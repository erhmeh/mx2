

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Aug 11 13:14:39 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1,inline
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1,inline
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1,inline
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   168                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   169  0000                     
   170                           ; Version 1.43
   171                           ; Generated 25/07/2017 GMT
   172                           ; 
   173                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   174                           ; All rights reserved.
   175                           ; 
   176                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   177                           ; 
   178                           ; Redistribution and use in source and binary forms, with or without modification, are
   179                           ; permitted provided that the following conditions are met:
   180                           ; 
   181                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   182                           ;        conditions and the following disclaimer.
   183                           ; 
   184                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   185                           ;        of conditions and the following disclaimer in the documentation and/or other
   186                           ;        materials provided with the distribution.
   187                           ; 
   188                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   189                           ;        software without specific prior written permission.
   190                           ; 
   191                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   192                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   193                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   194                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   195                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   196                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   197                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   198                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   199                           ; 
   200                           ; 
   201                           ; Code-generator required, PIC18F67J50 Definitions
   202                           ; 
   203                           ; SFR Addresses
   204  0000                     
   205                           	psect	idataCOMRAM
   206  014A89                     __pidataCOMRAM:
   207                           	opt stack 0
   208                           
   209                           ;initializer for _gCursor
   210  014A89  0006               	dw	6
   211  014A8B  0006               	dw	6
   212                           
   213                           ;initializer for _Bus_State
   214  014A8D  01                 	db	1
   215                           
   216                           ;initializer for _A
   217  014A8E  41                 	db	65
   218                           
   219                           ;initializer for _a
   220  014A8F  61                 	db	97
   221                           
   222                           ;initializer for _zero
   223  014A90  30                 	db	48
   224                           
   225                           ;initializer for _l
   226  014A91  80                 	db	128
   227                           
   228                           ;initializer for _w
   229  014A92  80                 	db	128
   230                           
   231                           	psect	idataBANK0
   232  014A7E                     __pidataBANK0:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCharSize
   236  014A7E  0005               	dw	5
   237  014A80  0007               	dw	7
   238                           
   239                           ;initializer for _DIST
   240  014A82  0064               	dw	100
   241                           
   242                           ;initializer for _Hz
   243  014A84  000A               	dw	10
   244                           
   245                           ;initializer for _gForecolour
   246  014A86  FFFF               	dw	65535
   247                           
   248                           ;initializer for _change
   249  014A88  01                 	db	1
   250                           
   251                           	psect	idataBANK1
   252  014AA8                     __pidataBANK1:
   253                           	opt stack 0
   254                           
   255                           ;initializer for Console_Render@F6956
   256  014AA8  0006               	dw	6
   257  014AAA  0006               	dw	6
   258                           
   259                           ;initializer for _gLineSize
   260  014AAC  0080               	dw	128
   261  014AAE  0007               	dw	7
   262                           
   263                           	psect	mediumconst
   264  00FC98                     __pmediumconst:
   265                           	opt stack 0
   266  00FC98  00                 	db	0
   267  00FC99                     _InitList:
   268                           	opt stack 0
   269  00FC99  1100               	dw	4352
   270  00FC9B  0080               	dw	128
   271  00FC9D  012C               	dw	300
   272  00FC9F  B100               	dw	45312
   273  00FCA1  0002               	dw	2
   274  00FCA3  0035               	dw	53
   275  00FCA5  0036               	dw	54
   276  00FCA7  B200               	dw	45568
   277  00FCA9  0002               	dw	2
   278  00FCAB  0035               	dw	53
   279  00FCAD  0036               	dw	54
   280  00FCAF  B300               	dw	45824
   281  00FCB1  0002               	dw	2
   282  00FCB3  0035               	dw	53
   283  00FCB5  0036               	dw	54
   284  00FCB7  0002               	dw	2
   285  00FCB9  0035               	dw	53
   286  00FCBB  0036               	dw	54
   287  00FCBD  B400               	dw	46080
   288  00FCBF  0000               	dw	0
   289  00FCC1  C000               	dw	49152
   290  00FCC3  00A2               	dw	162
   291  00FCC5  0002               	dw	2
   292  00FCC7  0084               	dw	132
   293  00FCC9  C100               	dw	49408
   294  00FCCB  00C5               	dw	197
   295  00FCCD  C200               	dw	49664
   296  00FCCF  000D               	dw	13
   297  00FCD1  0000               	dw	0
   298  00FCD3  C300               	dw	49920
   299  00FCD5  008D               	dw	141
   300  00FCD7  002A               	dw	42
   301  00FCD9  C400               	dw	50176
   302  00FCDB  008D               	dw	141
   303  00FCDD  00EE               	dw	238
   304  00FCDF  C500               	dw	50432
   305  00FCE1  000A               	dw	10
   306  00FCE3  3600               	dw	13824
   307  00FCE5  00C8               	dw	200
   308  00FCE7  E000               	dw	57344
   309  00FCE9  0012               	dw	18
   310  00FCEB  001C               	dw	28
   311  00FCED  0010               	dw	16
   312  00FCEF  0018               	dw	24
   313  00FCF1  0033               	dw	51
   314  00FCF3  002C               	dw	44
   315  00FCF5  0025               	dw	37
   316  00FCF7  0028               	dw	40
   317  00FCF9  0028               	dw	40
   318  00FCFB  0027               	dw	39
   319  00FCFD  002F               	dw	47
   320  00FCFF  003C               	dw	60
   321  00FD01  0000               	dw	0
   322  00FD03  0003               	dw	3
   323  00FD05  0003               	dw	3
   324  00FD07  0010               	dw	16
   325  00FD09  0080               	dw	128
   326  00FD0B  0078               	dw	120
   327  00FD0D  E100               	dw	57600
   328  00FD0F  0012               	dw	18
   329  00FD11  001C               	dw	28
   330  00FD13  0010               	dw	16
   331  00FD15  0018               	dw	24
   332  00FD17  002D               	dw	45
   333  00FD19  0028               	dw	40
   334  00FD1B  0023               	dw	35
   335  00FD1D  0028               	dw	40
   336  00FD1F  0028               	dw	40
   337  00FD21  0026               	dw	38
   338  00FD23  002F               	dw	47
   339  00FD25  003B               	dw	59
   340  00FD27  0000               	dw	0
   341  00FD29  0003               	dw	3
   342  00FD2B  0003               	dw	3
   343  00FD2D  0010               	dw	16
   344  00FD2F  3A00               	dw	14848
   345  00FD31  0005               	dw	5
   346  00FD33  2A00               	dw	10752
   347  00FD35  0000               	dw	0
   348  00FD37  0002               	dw	2
   349  00FD39  0000               	dw	0
   350  00FD3B  0081               	dw	129
   351  00FD3D  2B00               	dw	11008
   352  00FD3F  0000               	dw	0
   353  00FD41  0003               	dw	3
   354  00FD43  0000               	dw	0
   355  00FD45  00A2               	dw	162
   356  00FD47  2900               	dw	10496
   357  00FD49  2C00               	dw	11264
   358  00FD4B                     __end_of_InitList:
   359                           	opt stack 0
   360  00FD4B                     Timer0_Init@PRESCALE:
   361                           	opt stack 0
   362  00FD4B  0002               	dw	2
   363  00FD4D  0004               	dw	4
   364  00FD4F  0008               	dw	8
   365  00FD51  0010               	dw	16
   366  00FD53  0020               	dw	32
   367  00FD55  0040               	dw	64
   368  00FD57  0080               	dw	128
   369  00FD59  0100               	dw	256
   370  00FD5B                     __end_ofTimer0_Init@PRESCALE:
   371                           	opt stack 0
   372  00FD5B                     PortProperty_Valid@F6830:
   373                           	opt stack 0
   374  00FD5B  00                 	db	0
   375  00FD5C  01                 	db	1
   376  00FD5D  02                 	db	2
   377  00FD5E  00                 	db	0
   378  00FD5F  01                 	db	1
   379  00FD60  00                 	db	0
   380  00FD61  01                 	db	1
   381  00FD62  00                 	db	0
   382  00FD63  02                 	db	2
   383  00FD64  02                 	db	2
   384  00FD65  00                 	db	0
   385  00FD66  00                 	db	0
   386  00FD67  03                 	db	3
   387  00FD68  03                 	db	3
   388  00FD69  03                 	db	3
   389  00FD6A  00                 	db	0
   390  00FD6B                     __end_ofPortProperty_Valid@F6830:
   391                           	opt stack 0
   392  00FD6B                     _dpowers:
   393                           	opt stack 0
   394  00FD6B  0001               	dw	1
   395  00FD6D  000A               	dw	10
   396  00FD6F  0064               	dw	100
   397  00FD71  03E8               	dw	1000
   398  00FD73  2710               	dw	10000
   399  00FD75                     __end_of_dpowers:
   400                           	opt stack 0
   401  00FD75                     _MASKS:
   402                           	opt stack 0
   403  00FD75  00                 	db	0
   404  00FD76  01                 	db	1
   405  00FD77  03                 	db	3
   406  00FD78  07                 	db	7
   407  00FD79  0F                 	db	15
   408  00FD7A  1F                 	db	31
   409  00FD7B  3F                 	db	63
   410  00FD7C  7F                 	db	127
   411  00FD7D  FF                 	db	255
   412  00FD7E                     __end_of_MASKS:
   413                           	opt stack 0
   414  00FD7E                     HMI_SetButton@F7211:
   415                           	opt stack 0
   416  00FD7E  00                 	db	0
   417  00FD7F  02                 	db	2
   418  00FD80  01                 	db	1
   419  00FD81  03                 	db	3
   420  00FD82                     __end_ofHMI_SetButton@F7211:
   421                           	opt stack 0
   422  00FD82                     Timer2_Init@PRESCALE:
   423                           	opt stack 0
   424  00FD82  01                 	db	1
   425  00FD83  04                 	db	4
   426  00FD84  10                 	db	16
   427  00FD85                     __end_ofTimer2_Init@PRESCALE:
   428                           	opt stack 0
   429  00FD85                     _HzInc:
   430                           	opt stack 0
   431  00FD85  000A               	dw	10
   432  00FD87                     __end_of_HzInc:
   433                           	opt stack 0
   434  00FD87                     _Font5x7:
   435                           	opt stack 0
   436  00FD87  00                 	db	0
   437  00FD88  00                 	db	0
   438  00FD89  00                 	db	0
   439  00FD8A  00                 	db	0
   440  00FD8B  00                 	db	0
   441  00FD8C  00                 	db	0
   442  00FD8D  00                 	db	0
   443  00FD8E  5F                 	db	95
   444  00FD8F  00                 	db	0
   445  00FD90  00                 	db	0
   446  00FD91  00                 	db	0
   447  00FD92  07                 	db	7
   448  00FD93  00                 	db	0
   449  00FD94  07                 	db	7
   450  00FD95  00                 	db	0
   451  00FD96  14                 	db	20
   452  00FD97  7F                 	db	127
   453  00FD98  14                 	db	20
   454  00FD99  7F                 	db	127
   455  00FD9A  14                 	db	20
   456  00FD9B  24                 	db	36
   457  00FD9C  2A                 	db	42
   458  00FD9D  7F                 	db	127
   459  00FD9E  2A                 	db	42
   460  00FD9F  12                 	db	18
   461  00FDA0  23                 	db	35
   462  00FDA1  13                 	db	19
   463  00FDA2  08                 	db	8
   464  00FDA3  64                 	db	100
   465  00FDA4  62                 	db	98
   466  00FDA5  36                 	db	54
   467  00FDA6  49                 	db	73
   468  00FDA7  55                 	db	85
   469  00FDA8  22                 	db	34
   470  00FDA9  50                 	db	80
   471  00FDAA  00                 	db	0
   472  00FDAB  05                 	db	5
   473  00FDAC  03                 	db	3
   474  00FDAD  00                 	db	0
   475  00FDAE  00                 	db	0
   476  00FDAF  00                 	db	0
   477  00FDB0  1C                 	db	28
   478  00FDB1  22                 	db	34
   479  00FDB2  41                 	db	65
   480  00FDB3  00                 	db	0
   481  00FDB4  00                 	db	0
   482  00FDB5  41                 	db	65
   483  00FDB6  22                 	db	34
   484  00FDB7  1C                 	db	28
   485  00FDB8  00                 	db	0
   486  00FDB9  08                 	db	8
   487  00FDBA  2A                 	db	42
   488  00FDBB  1C                 	db	28
   489  00FDBC  2A                 	db	42
   490  00FDBD  08                 	db	8
   491  00FDBE  08                 	db	8
   492  00FDBF  08                 	db	8
   493  00FDC0  3E                 	db	62
   494  00FDC1  08                 	db	8
   495  00FDC2  08                 	db	8
   496  00FDC3  00                 	db	0
   497  00FDC4  50                 	db	80
   498  00FDC5  30                 	db	48
   499  00FDC6  00                 	db	0
   500  00FDC7  00                 	db	0
   501  00FDC8  08                 	db	8
   502  00FDC9  08                 	db	8
   503  00FDCA  08                 	db	8
   504  00FDCB  08                 	db	8
   505  00FDCC  08                 	db	8
   506  00FDCD  00                 	db	0
   507  00FDCE  60                 	db	96
   508  00FDCF  60                 	db	96
   509  00FDD0  00                 	db	0
   510  00FDD1  00                 	db	0
   511  00FDD2  20                 	db	32
   512  00FDD3  10                 	db	16
   513  00FDD4  08                 	db	8
   514  00FDD5  04                 	db	4
   515  00FDD6  02                 	db	2
   516  00FDD7  3E                 	db	62
   517  00FDD8  51                 	db	81
   518  00FDD9  49                 	db	73
   519  00FDDA  45                 	db	69
   520  00FDDB  3E                 	db	62
   521  00FDDC  00                 	db	0
   522  00FDDD  42                 	db	66
   523  00FDDE  7F                 	db	127
   524  00FDDF  40                 	db	64
   525  00FDE0  00                 	db	0
   526  00FDE1  42                 	db	66
   527  00FDE2  61                 	db	97
   528  00FDE3  51                 	db	81
   529  00FDE4  49                 	db	73
   530  00FDE5  46                 	db	70
   531  00FDE6  21                 	db	33
   532  00FDE7  41                 	db	65
   533  00FDE8  45                 	db	69
   534  00FDE9  4B                 	db	75
   535  00FDEA  31                 	db	49
   536  00FDEB  18                 	db	24
   537  00FDEC  14                 	db	20
   538  00FDED  12                 	db	18
   539  00FDEE  7F                 	db	127
   540  00FDEF  10                 	db	16
   541  00FDF0  27                 	db	39
   542  00FDF1  45                 	db	69
   543  00FDF2  45                 	db	69
   544  00FDF3  45                 	db	69
   545  00FDF4  39                 	db	57
   546  00FDF5  3C                 	db	60
   547  00FDF6  4A                 	db	74
   548  00FDF7  49                 	db	73
   549  00FDF8  49                 	db	73
   550  00FDF9  30                 	db	48
   551  00FDFA  01                 	db	1
   552  00FDFB  71                 	db	113
   553  00FDFC  09                 	db	9
   554  00FDFD  05                 	db	5
   555  00FDFE  03                 	db	3
   556  00FDFF  36                 	db	54
   557  00FE00  49                 	db	73
   558  00FE01  49                 	db	73
   559  00FE02  49                 	db	73
   560  00FE03  36                 	db	54
   561  00FE04  06                 	db	6
   562  00FE05  49                 	db	73
   563  00FE06  49                 	db	73
   564  00FE07  29                 	db	41
   565  00FE08  1E                 	db	30
   566  00FE09  00                 	db	0
   567  00FE0A  36                 	db	54
   568  00FE0B  36                 	db	54
   569  00FE0C  00                 	db	0
   570  00FE0D  00                 	db	0
   571  00FE0E  00                 	db	0
   572  00FE0F  56                 	db	86
   573  00FE10  36                 	db	54
   574  00FE11  00                 	db	0
   575  00FE12  00                 	db	0
   576  00FE13  00                 	db	0
   577  00FE14  08                 	db	8
   578  00FE15  14                 	db	20
   579  00FE16  22                 	db	34
   580  00FE17  41                 	db	65
   581  00FE18  14                 	db	20
   582  00FE19  14                 	db	20
   583  00FE1A  14                 	db	20
   584  00FE1B  14                 	db	20
   585  00FE1C  14                 	db	20
   586  00FE1D  41                 	db	65
   587  00FE1E  22                 	db	34
   588  00FE1F  14                 	db	20
   589  00FE20  08                 	db	8
   590  00FE21  00                 	db	0
   591  00FE22  02                 	db	2
   592  00FE23  01                 	db	1
   593  00FE24  51                 	db	81
   594  00FE25  09                 	db	9
   595  00FE26  06                 	db	6
   596  00FE27  32                 	db	50
   597  00FE28  49                 	db	73
   598  00FE29  79                 	db	121
   599  00FE2A  41                 	db	65
   600  00FE2B  3E                 	db	62
   601  00FE2C  7E                 	db	126
   602  00FE2D  11                 	db	17
   603  00FE2E  11                 	db	17
   604  00FE2F  11                 	db	17
   605  00FE30  7E                 	db	126
   606  00FE31  7F                 	db	127
   607  00FE32  49                 	db	73
   608  00FE33  49                 	db	73
   609  00FE34  49                 	db	73
   610  00FE35  36                 	db	54
   611  00FE36  3E                 	db	62
   612  00FE37  41                 	db	65
   613  00FE38  41                 	db	65
   614  00FE39  41                 	db	65
   615  00FE3A  22                 	db	34
   616  00FE3B  7F                 	db	127
   617  00FE3C  41                 	db	65
   618  00FE3D  41                 	db	65
   619  00FE3E  22                 	db	34
   620  00FE3F  1C                 	db	28
   621  00FE40  7F                 	db	127
   622  00FE41  49                 	db	73
   623  00FE42  49                 	db	73
   624  00FE43  49                 	db	73
   625  00FE44  41                 	db	65
   626  00FE45  7F                 	db	127
   627  00FE46  09                 	db	9
   628  00FE47  09                 	db	9
   629  00FE48  01                 	db	1
   630  00FE49  01                 	db	1
   631  00FE4A  3E                 	db	62
   632  00FE4B  41                 	db	65
   633  00FE4C  41                 	db	65
   634  00FE4D  51                 	db	81
   635  00FE4E  32                 	db	50
   636  00FE4F  7F                 	db	127
   637  00FE50  08                 	db	8
   638  00FE51  08                 	db	8
   639  00FE52  08                 	db	8
   640  00FE53  7F                 	db	127
   641  00FE54  00                 	db	0
   642  00FE55  41                 	db	65
   643  00FE56  7F                 	db	127
   644  00FE57  41                 	db	65
   645  00FE58  00                 	db	0
   646  00FE59  20                 	db	32
   647  00FE5A  40                 	db	64
   648  00FE5B  41                 	db	65
   649  00FE5C  3F                 	db	63
   650  00FE5D  01                 	db	1
   651  00FE5E  7F                 	db	127
   652  00FE5F  08                 	db	8
   653  00FE60  14                 	db	20
   654  00FE61  22                 	db	34
   655  00FE62  41                 	db	65
   656  00FE63  7F                 	db	127
   657  00FE64  40                 	db	64
   658  00FE65  40                 	db	64
   659  00FE66  40                 	db	64
   660  00FE67  40                 	db	64
   661  00FE68  7F                 	db	127
   662  00FE69  02                 	db	2
   663  00FE6A  04                 	db	4
   664  00FE6B  02                 	db	2
   665  00FE6C  7F                 	db	127
   666  00FE6D  7F                 	db	127
   667  00FE6E  04                 	db	4
   668  00FE6F  08                 	db	8
   669  00FE70  10                 	db	16
   670  00FE71  7F                 	db	127
   671  00FE72  3E                 	db	62
   672  00FE73  41                 	db	65
   673  00FE74  41                 	db	65
   674  00FE75  41                 	db	65
   675  00FE76  3E                 	db	62
   676  00FE77  7F                 	db	127
   677  00FE78  09                 	db	9
   678  00FE79  09                 	db	9
   679  00FE7A  09                 	db	9
   680  00FE7B  06                 	db	6
   681  00FE7C  3E                 	db	62
   682  00FE7D  41                 	db	65
   683  00FE7E  51                 	db	81
   684  00FE7F  21                 	db	33
   685  00FE80  5E                 	db	94
   686  00FE81  7F                 	db	127
   687  00FE82  09                 	db	9
   688  00FE83  19                 	db	25
   689  00FE84  29                 	db	41
   690  00FE85  46                 	db	70
   691  00FE86  46                 	db	70
   692  00FE87  49                 	db	73
   693  00FE88  49                 	db	73
   694  00FE89  49                 	db	73
   695  00FE8A  31                 	db	49
   696  00FE8B  01                 	db	1
   697  00FE8C  01                 	db	1
   698  00FE8D  7F                 	db	127
   699  00FE8E  01                 	db	1
   700  00FE8F  01                 	db	1
   701  00FE90  3F                 	db	63
   702  00FE91  40                 	db	64
   703  00FE92  40                 	db	64
   704  00FE93  40                 	db	64
   705  00FE94  3F                 	db	63
   706  00FE95  1F                 	db	31
   707  00FE96  20                 	db	32
   708  00FE97  40                 	db	64
   709  00FE98  20                 	db	32
   710  00FE99  1F                 	db	31
   711  00FE9A  7F                 	db	127
   712  00FE9B  20                 	db	32
   713  00FE9C  18                 	db	24
   714  00FE9D  20                 	db	32
   715  00FE9E  7F                 	db	127
   716  00FE9F  63                 	db	99
   717  00FEA0  14                 	db	20
   718  00FEA1  08                 	db	8
   719  00FEA2  14                 	db	20
   720  00FEA3  63                 	db	99
   721  00FEA4  03                 	db	3
   722  00FEA5  04                 	db	4
   723  00FEA6  78                 	db	120
   724  00FEA7  04                 	db	4
   725  00FEA8  03                 	db	3
   726  00FEA9  61                 	db	97
   727  00FEAA  51                 	db	81
   728  00FEAB  49                 	db	73
   729  00FEAC  45                 	db	69
   730  00FEAD  43                 	db	67
   731  00FEAE  00                 	db	0
   732  00FEAF  00                 	db	0
   733  00FEB0  7F                 	db	127
   734  00FEB1  41                 	db	65
   735  00FEB2  41                 	db	65
   736  00FEB3  02                 	db	2
   737  00FEB4  04                 	db	4
   738  00FEB5  08                 	db	8
   739  00FEB6  10                 	db	16
   740  00FEB7  20                 	db	32
   741  00FEB8  41                 	db	65
   742  00FEB9  41                 	db	65
   743  00FEBA  7F                 	db	127
   744  00FEBB  00                 	db	0
   745  00FEBC  00                 	db	0
   746  00FEBD  04                 	db	4
   747  00FEBE  02                 	db	2
   748  00FEBF  01                 	db	1
   749  00FEC0  02                 	db	2
   750  00FEC1  04                 	db	4
   751  00FEC2  40                 	db	64
   752  00FEC3  40                 	db	64
   753  00FEC4  40                 	db	64
   754  00FEC5  40                 	db	64
   755  00FEC6  40                 	db	64
   756  00FEC7  00                 	db	0
   757  00FEC8  01                 	db	1
   758  00FEC9  02                 	db	2
   759  00FECA  04                 	db	4
   760  00FECB  00                 	db	0
   761  00FECC  20                 	db	32
   762  00FECD  54                 	db	84
   763  00FECE  54                 	db	84
   764  00FECF  54                 	db	84
   765  00FED0  78                 	db	120
   766  00FED1  7F                 	db	127
   767  00FED2  48                 	db	72
   768  00FED3  44                 	db	68
   769  00FED4  44                 	db	68
   770  00FED5  38                 	db	56
   771  00FED6  38                 	db	56
   772  00FED7  44                 	db	68
   773  00FED8  44                 	db	68
   774  00FED9  44                 	db	68
   775  00FEDA  20                 	db	32
   776  00FEDB  38                 	db	56
   777  00FEDC  44                 	db	68
   778  00FEDD  44                 	db	68
   779  00FEDE  48                 	db	72
   780  00FEDF  7F                 	db	127
   781  00FEE0  38                 	db	56
   782  00FEE1  54                 	db	84
   783  00FEE2  54                 	db	84
   784  00FEE3  54                 	db	84
   785  00FEE4  18                 	db	24
   786  00FEE5  08                 	db	8
   787  00FEE6  7E                 	db	126
   788  00FEE7  09                 	db	9
   789  00FEE8  01                 	db	1
   790  00FEE9  02                 	db	2
   791  00FEEA  08                 	db	8
   792  00FEEB  14                 	db	20
   793  00FEEC  54                 	db	84
   794  00FEED  54                 	db	84
   795  00FEEE  3C                 	db	60
   796  00FEEF  7F                 	db	127
   797  00FEF0  08                 	db	8
   798  00FEF1  04                 	db	4
   799  00FEF2  04                 	db	4
   800  00FEF3  78                 	db	120
   801  00FEF4  00                 	db	0
   802  00FEF5  44                 	db	68
   803  00FEF6  7D                 	db	125
   804  00FEF7  40                 	db	64
   805  00FEF8  00                 	db	0
   806  00FEF9  20                 	db	32
   807  00FEFA  40                 	db	64
   808  00FEFB  44                 	db	68
   809  00FEFC  3D                 	db	61
   810  00FEFD  00                 	db	0
   811  00FEFE  00                 	db	0
   812  00FEFF  7F                 	db	127
   813  00FF00  10                 	db	16
   814  00FF01  28                 	db	40
   815  00FF02  44                 	db	68
   816  00FF03  00                 	db	0
   817  00FF04  41                 	db	65
   818  00FF05  7F                 	db	127
   819  00FF06  40                 	db	64
   820  00FF07  00                 	db	0
   821  00FF08  7C                 	db	124
   822  00FF09  04                 	db	4
   823  00FF0A  18                 	db	24
   824  00FF0B  04                 	db	4
   825  00FF0C  78                 	db	120
   826  00FF0D  7C                 	db	124
   827  00FF0E  08                 	db	8
   828  00FF0F  04                 	db	4
   829  00FF10  04                 	db	4
   830  00FF11  78                 	db	120
   831  00FF12  38                 	db	56
   832  00FF13  44                 	db	68
   833  00FF14  44                 	db	68
   834  00FF15  44                 	db	68
   835  00FF16  38                 	db	56
   836  00FF17  7C                 	db	124
   837  00FF18  14                 	db	20
   838  00FF19  14                 	db	20
   839  00FF1A  14                 	db	20
   840  00FF1B  08                 	db	8
   841  00FF1C  08                 	db	8
   842  00FF1D  14                 	db	20
   843  00FF1E  14                 	db	20
   844  00FF1F  18                 	db	24
   845  00FF20  7C                 	db	124
   846  00FF21  7C                 	db	124
   847  00FF22  08                 	db	8
   848  00FF23  04                 	db	4
   849  00FF24  04                 	db	4
   850  00FF25  08                 	db	8
   851  00FF26  48                 	db	72
   852  00FF27  54                 	db	84
   853  00FF28  54                 	db	84
   854  00FF29  54                 	db	84
   855  00FF2A  20                 	db	32
   856  00FF2B  04                 	db	4
   857  00FF2C  3F                 	db	63
   858  00FF2D  44                 	db	68
   859  00FF2E  40                 	db	64
   860  00FF2F  20                 	db	32
   861  00FF30  3C                 	db	60
   862  00FF31  40                 	db	64
   863  00FF32  40                 	db	64
   864  00FF33  20                 	db	32
   865  00FF34  7C                 	db	124
   866  00FF35  1C                 	db	28
   867  00FF36  20                 	db	32
   868  00FF37  40                 	db	64
   869  00FF38  20                 	db	32
   870  00FF39  1C                 	db	28
   871  00FF3A  3C                 	db	60
   872  00FF3B  40                 	db	64
   873  00FF3C  30                 	db	48
   874  00FF3D  40                 	db	64
   875  00FF3E  3C                 	db	60
   876  00FF3F  44                 	db	68
   877  00FF40  28                 	db	40
   878  00FF41  10                 	db	16
   879  00FF42  28                 	db	40
   880  00FF43  44                 	db	68
   881  00FF44  0C                 	db	12
   882  00FF45  50                 	db	80
   883  00FF46  50                 	db	80
   884  00FF47  50                 	db	80
   885  00FF48  3C                 	db	60
   886  00FF49  44                 	db	68
   887  00FF4A  64                 	db	100
   888  00FF4B  54                 	db	84
   889  00FF4C  4C                 	db	76
   890  00FF4D  44                 	db	68
   891  00FF4E  00                 	db	0
   892  00FF4F  08                 	db	8
   893  00FF50  36                 	db	54
   894  00FF51  41                 	db	65
   895  00FF52  00                 	db	0
   896  00FF53  00                 	db	0
   897  00FF54  00                 	db	0
   898  00FF55  7F                 	db	127
   899  00FF56  00                 	db	0
   900  00FF57  00                 	db	0
   901  00FF58  00                 	db	0
   902  00FF59  41                 	db	65
   903  00FF5A  36                 	db	54
   904  00FF5B  08                 	db	8
   905  00FF5C  00                 	db	0
   906  00FF5D  08                 	db	8
   907  00FF5E  08                 	db	8
   908  00FF5F  2A                 	db	42
   909  00FF60  1C                 	db	28
   910  00FF61  08                 	db	8
   911  00FF62  08                 	db	8
   912  00FF63  1C                 	db	28
   913  00FF64  2A                 	db	42
   914  00FF65  08                 	db	8
   915  00FF66  08                 	db	8
   916  00FF67                     __end_of_Font5x7:
   917                           	opt stack 0
   918  00FF67                     _PortG_Property:
   919                           	opt stack 0
   920  00FF67  FC00               	dw	64512
   921  00FF69                     __end_of_PortG_Property:
   922                           	opt stack 0
   923  00FF69                     _PortF_Property:
   924                           	opt stack 0
   925  00FF69  0FFF               	dw	4095
   926  00FF6B                     __end_of_PortF_Property:
   927                           	opt stack 0
   928  00FF6B                     _PortE_Property:
   929                           	opt stack 0
   930  00FF6B  0000               	dw	0
   931  00FF6D                     __end_of_PortE_Property:
   932                           	opt stack 0
   933  00FF6D                     _PortD_Property:
   934                           	opt stack 0
   935  00FF6D  FFFF               	dw	65535
   936  00FF6F                     __end_of_PortD_Property:
   937                           	opt stack 0
   938  00FF6F                     _PortC_Property:
   939                           	opt stack 0
   940  00FF6F  FFF0               	dw	65520
   941  00FF71                     __end_of_PortC_Property:
   942                           	opt stack 0
   943  00FF71                     _PortB_Property:
   944                           	opt stack 0
   945  00FF71  FF00               	dw	65280
   946  00FF73                     __end_of_PortB_Property:
   947                           	opt stack 0
   948  00FF73                     _PortA_Property:
   949                           	opt stack 0
   950  00FF73  00FF               	dw	255
   951  00FF75                     __end_of_PortA_Property:
   952                           	opt stack 0
   953  0000                     _TMR0	set	4054
   954  0000                     _PR2	set	4043
   955  0000                     _T2CONbits	set	4042
   956  0000                     _T0CONbits	set	4053
   957  0000                     _RCONbits	set	4048
   958  0000                     _OSCTUNEbits	set	3995
   959  0000                     _PIR3	set	4004
   960  0000                     _PIR2	set	4001
   961  0000                     _PIR1	set	3998
   962  0000                     _INTCONbits	set	4082
   963  0000                     _SSP2CON2bits	set	3947
   964  0000                     _SSP1CON2bits	set	4037
   965  0000                     _SSP1ADD	set	4040
   966  0000                     _ANCON0	set	4033
   967  0000                     _ADRESL	set	4035
   968  0000                     _ADRESH	set	4036
   969  0000                     _ADCON1bits	set	4033
   970  0000                     _ADCON0bits	set	4034
   971  0000                     _SSP2CON1bits	set	3948
   972  0000                     _SSP1CON1bits	set	4038
   973  0000                     _SSP2STATbits	set	3949
   974  0000                     _SSP1STATbits	set	4039
   975  0000                     _PIE3bits	set	4003
   976  0000                     _PIE1bits	set	3997
   977  0000                     _PIR3bits	set	4004
   978  0000                     _PIR1bits	set	3998
   979  0000                     _IPR3bits	set	4005
   980  0000                     _IPR1bits	set	3999
   981  0000                     _PORTFbits	set	3973
   982  0000                     _SSP2CON2	set	3947
   983  0000                     _SSP1CON2	set	4037
   984  0000                     _SSP2BUF	set	3951
   985  0000                     _SSP2CON1	set	3948
   986  0000                     _SSP2STAT	set	3949
   987  0000                     _SSP1BUF	set	4041
   988  0000                     _SSP1CON1	set	4038
   989  0000                     _SSP1STAT	set	4039
   990  0000                     _LATG	set	3983
   991  0000                     _LATF	set	3982
   992  0000                     _LATE	set	3981
   993  0000                     _LATD	set	3980
   994  0000                     _LATC	set	3979
   995  0000                     _LATB	set	3978
   996  0000                     _LATA	set	3977
   997  0000                     _TRISG	set	3992
   998  0000                     _TRISF	set	3991
   999  0000                     _TRISE	set	3990
  1000  0000                     _TRISD	set	3989
  1001  0000                     _TRISC	set	3988
  1002  0000                     _TRISB	set	3987
  1003  0000                     _TRISA	set	3986
  1004  0000                     _PORTG	set	3974
  1005  0000                     _PORTF	set	3973
  1006  0000                     _PORTE	set	3972
  1007  0000                     _PORTD	set	3971
  1008  0000                     _PORTC	set	3970
  1009  0000                     _PORTB	set	3969
  1010  0000                     _PORTA	set	3968
  1011  00FF75                     STR_10:
  1012  00FF75  20                 	db	32
  1013  00FF76  20                 	db	32
  1014  00FF77  20                 	db	32
  1015  00FF78  20                 	db	32
  1016  00FF79  20                 	db	32
  1017  00FF7A  20                 	db	32
  1018  00FF7B  20                 	db	32
  1019  00FF7C  20                 	db	32
  1020  00FF7D  20                 	db	32
  1021  00FF7E  20                 	db	32
  1022  00FF7F  20                 	db	32
  1023  00FF80  20                 	db	32
  1024  00FF81  20                 	db	32
  1025  00FF82  20                 	db	32
  1026  00FF83  20                 	db	32
  1027  00FF84  20                 	db	32
  1028  00FF85  20                 	db	32
  1029  00FF86  20                 	db	32
  1030  00FF87  20                 	db	32
  1031  00FF88  20                 	db	32
  1032  00FF89  20                 	db	32
  1033  00FF8A  20                 	db	32
  1034  00FF8B  0A                 	db	10
  1035  00FF8C  00                 	db	0
  1036  00FF8D                     STR_1:
  1037  00FF8D  4A                 	db	74	;'J'
  1038  00FF8E  61                 	db	97	;'a'
  1039  00FF8F  6D                 	db	109	;'m'
  1040  00FF90  69                 	db	105	;'i'
  1041  00FF91  6E                 	db	110	;'n'
  1042  00FF92  20                 	db	32
  1043  00FF93  45                 	db	69	;'E'
  1044  00FF94  61                 	db	97	;'a'
  1045  00FF95  72                 	db	114	;'r'
  1046  00FF96  6C                 	db	108	;'l'
  1047  00FF97  79                 	db	121	;'y'
  1048  00FF98  20                 	db	32
  1049  00FF99  39                 	db	57	;'9'
  1050  00FF9A  39                 	db	57	;'9'
  1051  00FF9B  31                 	db	49	;'1'
  1052  00FF9C  33                 	db	51	;'3'
  1053  00FF9D  33                 	db	51	;'3'
  1054  00FF9E  33                 	db	51	;'3'
  1055  00FF9F  39                 	db	57	;'9'
  1056  00FFA0  31                 	db	49	;'1'
  1057  00FFA1  0A                 	db	10
  1058  00FFA2  00                 	db	0
  1059  00FFA3                     STR_3:
  1060  00FFA3  43                 	db	67	;'C'
  1061  00FFA4  75                 	db	117	;'u'
  1062  00FFA5  72                 	db	114	;'r'
  1063  00FFA6  72                 	db	114	;'r'
  1064  00FFA7  65                 	db	101	;'e'
  1065  00FFA8  6E                 	db	110	;'n'
  1066  00FFA9  74                 	db	116	;'t'
  1067  00FFAA  20                 	db	32
  1068  00FFAB  4D                 	db	77	;'M'
  1069  00FFAC  6F                 	db	111	;'o'
  1070  00FFAD  64                 	db	100	;'d'
  1071  00FFAE  65                 	db	101	;'e'
  1072  00FFAF  3A                 	db	58	;':'
  1073  00FFB0  0A                 	db	10
  1074  00FFB1  00                 	db	0
  1075  00FFB2                     STR_9:
  1076  00FFB2  44                 	db	68	;'D'
  1077  00FFB3  69                 	db	105	;'i'
  1078  00FFB4  72                 	db	114	;'r'
  1079  00FFB5  65                 	db	101	;'e'
  1080  00FFB6  63                 	db	99	;'c'
  1081  00FFB7  74                 	db	116	;'t'
  1082  00FFB8  69                 	db	105	;'i'
  1083  00FFB9  6F                 	db	111	;'o'
  1084  00FFBA  6E                 	db	110	;'n'
  1085  00FFBB  3A                 	db	58	;':'
  1086  00FFBC  20                 	db	32
  1087  00FFBD  25                 	db	37
  1088  00FFBE  64                 	db	100	;'d'
  1089  00FFBF  0A                 	db	10
  1090  00FFC0  00                 	db	0
  1091  00FFC1                     STR_6:
  1092  00FFC1  20                 	db	32
  1093  00FFC2  43                 	db	67	;'C'
  1094  00FFC3  6F                 	db	111	;'o'
  1095  00FFC4  6E                 	db	110	;'n'
  1096  00FFC5  74                 	db	116	;'t'
  1097  00FFC6  69                 	db	105	;'i'
  1098  00FFC7  6E                 	db	110	;'n'
  1099  00FFC8  75                 	db	117	;'u'
  1100  00FFC9  6F                 	db	111	;'o'
  1101  00FFCA  75                 	db	117	;'u'
  1102  00FFCB  73                 	db	115	;'s'
  1103  00FFCC  0A                 	db	10
  1104  00FFCD  0A                 	db	10
  1105  00FFCE  00                 	db	0
  1106  00FFCF                     STR_7:
  1107  00FFCF  20                 	db	32
  1108  00FFD0  55                 	db	85	;'U'
  1109  00FFD1  6E                 	db	110	;'n'
  1110  00FFD2  64                 	db	100	;'d'
  1111  00FFD3  65                 	db	101	;'e'
  1112  00FFD4  66                 	db	102	;'f'
  1113  00FFD5  69                 	db	105	;'i'
  1114  00FFD6  6E                 	db	110	;'n'
  1115  00FFD7  65                 	db	101	;'e'
  1116  00FFD8  64                 	db	100	;'d'
  1117  00FFD9  0A                 	db	10
  1118  00FFDA  0A                 	db	10
  1119  00FFDB  00                 	db	0
  1120  00FFDC                     STR_4:
  1121  00FFDC  20                 	db	32
  1122  00FFDD  50                 	db	80	;'P'
  1123  00FFDE  6F                 	db	111	;'o'
  1124  00FFDF  73                 	db	115	;'s'
  1125  00FFE0  69                 	db	105	;'i'
  1126  00FFE1  74                 	db	116	;'t'
  1127  00FFE2  69                 	db	105	;'i'
  1128  00FFE3  6F                 	db	111	;'o'
  1129  00FFE4  6E                 	db	110	;'n'
  1130  00FFE5  0A                 	db	10
  1131  00FFE6  0A                 	db	10
  1132  00FFE7  00                 	db	0
  1133  00FFE8                     STR_8:
  1134  00FFE8  53                 	db	83	;'S'
  1135  00FFE9  70                 	db	112	;'p'
  1136  00FFEA  65                 	db	101	;'e'
  1137  00FFEB  65                 	db	101	;'e'
  1138  00FFEC  64                 	db	100	;'d'
  1139  00FFED  3A                 	db	58	;':'
  1140  00FFEE  20                 	db	32
  1141  00FFEF  25                 	db	37
  1142  00FFF0  64                 	db	100	;'d'
  1143  00FFF1  0A                 	db	10
  1144  00FFF2  00                 	db	0
  1145  00FFF3                     STR_5:
  1146  00FFF3  20                 	db	32
  1147  00FFF4  53                 	db	83	;'S'
  1148  00FFF5  74                 	db	116	;'t'
  1149  00FFF6  65                 	db	101	;'e'
  1150  00FFF7  70                 	db	112	;'p'
  1151  00FFF8  0A                 	db	10
  1152  00FFF9  0A                 	db	10
  1153  00FFFA  00                 	db	0
  1154  00FFFB                     STR_2:
  1155  00FFFB  25                 	db	37
  1156  00FFFC  63                 	db	99	;'c'
  1157  00FFFD  00                 	db	0
  1158  0000                     
  1159                           ; #config settings
  1160  00FFFE  00                 	db	0	; dummy byte at the end
  1161  0000                     
  1162                           	psect	cinit
  1163  012D24                     __pcinit:
  1164                           	opt stack 0
  1165  012D24                     start_initialization:
  1166                           	opt stack 0
  1167  012D24                     __initialization:
  1168                           	opt stack 0
  1169                           
  1170                           ; Initialize objects allocated to BANK1 (8 bytes)
  1171                           ; load TBLPTR registers with __pidataBANK1
  1172  012D24  0EA8               	movlw	low __pidataBANK1
  1173  012D26  6EF6               	movwf	tblptrl,c
  1174  012D28  0E4A               	movlw	high __pidataBANK1
  1175  012D2A  6EF7               	movwf	tblptrh,c
  1176  012D2C  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1177  012D2E  6EF8               	movwf	tblptru,c
  1178  012D30  EE01  F0DB         	lfsr	0,__pdataBANK1
  1179  012D34  EE10 F008          	lfsr	1,8
  1180  012D38                     copy_data0:
  1181  012D38  0009               	tblrd		*+
  1182  012D3A  CFF5 FFEE          	movff	tablat,postinc0
  1183  012D3E  50E5               	movf	postdec1,w,c
  1184  012D40  50E1               	movf	fsr1l,w,c
  1185  012D42  E1FA               	bnz	copy_data0
  1186                           
  1187                           ; Initialize objects allocated to BANK0 (11 bytes)
  1188                           ; load TBLPTR registers with __pidataBANK0
  1189  012D44  0E7E               	movlw	low __pidataBANK0
  1190  012D46  6EF6               	movwf	tblptrl,c
  1191  012D48  0E4A               	movlw	high __pidataBANK0
  1192  012D4A  6EF7               	movwf	tblptrh,c
  1193  012D4C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1194  012D4E  6EF8               	movwf	tblptru,c
  1195  012D50  EE00  F0F5         	lfsr	0,__pdataBANK0
  1196  012D54  EE10 F00B          	lfsr	1,11
  1197  012D58                     copy_data1:
  1198  012D58  0009               	tblrd		*+
  1199  012D5A  CFF5 FFEE          	movff	tablat,postinc0
  1200  012D5E  50E5               	movf	postdec1,w,c
  1201  012D60  50E1               	movf	fsr1l,w,c
  1202  012D62  E1FA               	bnz	copy_data1
  1203                           
  1204                           ; Initialize objects allocated to COMRAM (10 bytes)
  1205                           ; load TBLPTR registers with __pidataCOMRAM
  1206  012D64  0E89               	movlw	low __pidataCOMRAM
  1207  012D66  6EF6               	movwf	tblptrl,c
  1208  012D68  0E4A               	movlw	high __pidataCOMRAM
  1209  012D6A  6EF7               	movwf	tblptrh,c
  1210  012D6C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1211  012D6E  6EF8               	movwf	tblptru,c
  1212  012D70  EE00  F047         	lfsr	0,__pdataCOMRAM
  1213  012D74  EE10 F00A          	lfsr	1,10
  1214  012D78                     copy_data2:
  1215  012D78  0009               	tblrd		*+
  1216  012D7A  CFF5 FFEE          	movff	tablat,postinc0
  1217  012D7E  50E5               	movf	postdec1,w,c
  1218  012D80  50E1               	movf	fsr1l,w,c
  1219  012D82  E1FA               	bnz	copy_data2
  1220                           
  1221                           ; Clear objects allocated to BIGRAM (300 bytes)
  1222  012D84  EE02  F046         	lfsr	0,__pbssBIGRAM
  1223  012D88  EE11 F02C          	lfsr	1,300
  1224  012D8C                     clear_0:
  1225  012D8C  6AEE               	clrf	postinc0,c
  1226  012D8E  50E5               	movf	postdec1,w,c
  1227  012D90  50E1               	movf	fsr1l,w,c
  1228  012D92  E1FC               	bnz	clear_0
  1229  012D94  50E2               	movf	fsr1h,w,c
  1230  012D96  E1FA               	bnz	clear_0
  1231                           
  1232                           ; Clear objects allocated to BANK2 (70 bytes)
  1233  012D98  EE02  F000         	lfsr	0,__pbssBANK2
  1234  012D9C  0E46               	movlw	70
  1235  012D9E                     clear_1:
  1236  012D9E  6AEE               	clrf	postinc0,c
  1237  012DA0  06E8               	decf	wreg,f,c
  1238  012DA2  E1FD               	bnz	clear_1
  1239                           
  1240                           ; Clear objects allocated to BANK1 (200 bytes)
  1241  012DA4  EE01  F000         	lfsr	0,__pbssBANK1
  1242  012DA8  0EC8               	movlw	200
  1243  012DAA                     clear_2:
  1244  012DAA  6AEE               	clrf	postinc0,c
  1245  012DAC  06E8               	decf	wreg,f,c
  1246  012DAE  E1FD               	bnz	clear_2
  1247                           
  1248                           ; Clear objects allocated to BANK0 (82 bytes)
  1249  012DB0  EE00  F060         	lfsr	0,__pbssBANK0
  1250  012DB4  0E52               	movlw	82
  1251  012DB6                     clear_3:
  1252  012DB6  6AEE               	clrf	postinc0,c
  1253  012DB8  06E8               	decf	wreg,f,c
  1254  012DBA  E1FD               	bnz	clear_3
  1255                           
  1256                           ; Clear objects allocated to COMRAM (30 bytes)
  1257  012DBC  EE00  F029         	lfsr	0,__pbssCOMRAM
  1258  012DC0  0E1E               	movlw	30
  1259  012DC2                     clear_4:
  1260  012DC2  6AEE               	clrf	postinc0,c
  1261  012DC4  06E8               	decf	wreg,f,c
  1262  012DC6  E1FD               	bnz	clear_4
  1263  012DC8                     end_of_initialization:
  1264                           	opt stack 0
  1265  012DC8                     __end_of__initialization:
  1266                           	opt stack 0
  1267  012DC8  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1268  012DCA  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1269  012DCC  0100               	movlb	0
  1270  012DCE  EFFC  F0A1         	goto	_main	;jump to C main() function
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1h	equ	0xFE2
  1279                           fsr1l	equ	0xFE1
  1280                           
  1281                           	psect	bssCOMRAM
  1282  000029                     __pbssCOMRAM:
  1283                           	opt stack 0
  1284  000029                     _gISR:
  1285                           	opt stack 0
  1286  000029                     	ds	3
  1287  00002C                     _lStepFunction:
  1288                           	opt stack 0
  1289  00002C                     	ds	3
  1290  00002F                     _HzOld:
  1291                           	opt stack 0
  1292  00002F                     	ds	2
  1293  000031                     _COUNTER:
  1294                           	opt stack 0
  1295  000031                     	ds	2
  1296  000033                     HMI_GRender@a:
  1297                           	opt stack 0
  1298  000033                     	ds	2
  1299  000035                     SPI_Send9@dat:
  1300                           	opt stack 0
  1301  000035                     	ds	2
  1302  000037                     _k:
  1303                           	opt stack 0
  1304  000037                     	ds	1
  1305  000038                     _u:
  1306                           	opt stack 0
  1307  000038                     	ds	1
  1308  000039                     _j:
  1309                           	opt stack 0
  1310  000039                     	ds	1
  1311  00003A                     _i:
  1312                           	opt stack 0
  1313  00003A                     	ds	1
  1314  00003B                     rand@screw:
  1315                           	opt stack 0
  1316  00003B                     	ds	1
  1317  00003C                     _ADC_Initialised:
  1318                           	opt stack 0
  1319  00003C                     	ds	1
  1320  00003D                     OutSeg@a:
  1321                           	opt stack 0
  1322  00003D                     	ds	1
  1323  00003E                     OutSeg@segset:
  1324                           	opt stack 0
  1325  00003E                     	ds	1
  1326  00003F                     OutSeg@cur:
  1327                           	opt stack 0
  1328  00003F                     	ds	1
  1329  000040                     _I2C1T:
  1330                           	opt stack 0
  1331  000040                     	ds	7
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1h	equ	0xFE2
  1340                           fsr1l	equ	0xFE1
  1341                           
  1342                           	psect	dataCOMRAM
  1343  000047                     __pdataCOMRAM:
  1344                           	opt stack 0
  1345  000047                     _gCursor:
  1346                           	opt stack 0
  1347  000047                     	ds	4
  1348  00004B                     _Bus_State:
  1349                           	opt stack 0
  1350  00004B                     	ds	1
  1351  00004C                     	ds	1
  1352  00004D                     	ds	1
  1353  00004E                     	ds	1
  1354  00004F                     _l:
  1355                           	opt stack 0
  1356  00004F                     	ds	1
  1357  000050                     _w:
  1358                           	opt stack 0
  1359  000050                     	ds	1
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1h	equ	0xFE2
  1368                           fsr1l	equ	0xFE1
  1369                           
  1370                           	psect	bssBANK0
  1371  000060                     __pbssBANK0:
  1372                           	opt stack 0
  1373  000060                     Timer2_Init@DIV:
  1374                           	opt stack 0
  1375  000060                     	ds	4
  1376  000064                     Timer0_Init@DIV:
  1377                           	opt stack 0
  1378  000064                     	ds	4
  1379  000068                     _lQueue:
  1380                           	opt stack 0
  1381  000068                     	ds	3
  1382  00006B                     _pShiftVal:
  1383                           	opt stack 0
  1384  00006B                     	ds	2
  1385  00006D                     _val:
  1386                           	opt stack 0
  1387  00006D                     	ds	2
  1388  00006F                     _lMotor:
  1389                           	opt stack 0
  1390  00006F                     	ds	2
  1391  000071                     _lCurrent:
  1392                           	opt stack 0
  1393  000071                     	ds	2
  1394  000073                     _gBackcolour:
  1395                           	opt stack 0
  1396  000073                     	ds	2
  1397  000075                     Event_TestButton@j:
  1398                           	opt stack 0
  1399  000075                     	ds	1
  1400  000076                     Timer2_Init@PRE:
  1401                           	opt stack 0
  1402  000076                     	ds	1
  1403  000077                     Timer2_Init@INDEX:
  1404                           	opt stack 0
  1405  000077                     	ds	1
  1406  000078                     Timer0_Init@PRE:
  1407                           	opt stack 0
  1408  000078                     	ds	1
  1409  000079                     _INDEX:
  1410                           	opt stack 0
  1411  000079                     	ds	1
  1412  00007A                     _lBufferY:
  1413                           	opt stack 0
  1414  00007A                     	ds	1
  1415  00007B                     _lBufferX:
  1416                           	opt stack 0
  1417  00007B                     	ds	1
  1418  00007C                     _clearall:
  1419                           	opt stack 0
  1420  00007C                     	ds	1
  1421  00007D                     _PortE:
  1422                           	opt stack 0
  1423  00007D                     	ds	10
  1424  000087                     _PortD:
  1425                           	opt stack 0
  1426  000087                     	ds	10
  1427  000091                     _PortC:
  1428                           	opt stack 0
  1429  000091                     	ds	10
  1430  00009B                     _ADC_AN2:
  1431                           	opt stack 0
  1432  00009B                     	ds	5
  1433  0000A0                     _ADC_AN1:
  1434                           	opt stack 0
  1435  0000A0                     	ds	5
  1436  0000A5                     _ADC_AN0:
  1437                           	opt stack 0
  1438  0000A5                     	ds	5
  1439  0000AA                     LCD_DrawRectangle@p4:
  1440                           	opt stack 0
  1441  0000AA                     	ds	4
  1442  0000AE                     LCD_DrawRectangle@p2:
  1443                           	opt stack 0
  1444  0000AE                     	ds	4
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1h	equ	0xFE2
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	dataBANK0
  1456  0000F5                     __pdataBANK0:
  1457                           	opt stack 0
  1458  0000F5                     _gCharSize:
  1459                           	opt stack 0
  1460  0000F5                     	ds	4
  1461  0000F9                     _DIST:
  1462                           	opt stack 0
  1463  0000F9                     	ds	2
  1464  0000FB                     _Hz:
  1465                           	opt stack 0
  1466  0000FB                     	ds	2
  1467  0000FD                     _gForecolour:
  1468                           	opt stack 0
  1469  0000FD                     	ds	2
  1470  0000FF                     _change:
  1471                           	opt stack 0
  1472  0000FF                     	ds	1
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1h	equ	0xFE2
  1481                           fsr1l	equ	0xFE1
  1482                           
  1483                           	psect	bssBANK1
  1484  000100                     __pbssBANK1:
  1485                           	opt stack 0
  1486  000100                     _lCBuffer:
  1487                           	opt stack 0
  1488  000100                     	ds	30
  1489  00011E                     _I2C2_More:
  1490                           	opt stack 0
  1491  00011E                     	ds	3
  1492  000121                     _I2C1_More:
  1493                           	opt stack 0
  1494  000121                     	ds	3
  1495  000124                     _I2C2_Done:
  1496                           	opt stack 0
  1497  000124                     	ds	3
  1498  000127                     _I2C1_Done:
  1499                           	opt stack 0
  1500  000127                     	ds	3
  1501  00012A                     _HMIBoard:
  1502                           	opt stack 0
  1503  00012A                     	ds	58
  1504  000164                     _SPI1:
  1505                           	opt stack 0
  1506  000164                     	ds	11
  1507  00016F                     _SPI2:
  1508                           	opt stack 0
  1509  00016F                     	ds	11
  1510  00017A                     _DIPSwitch:
  1511                           	opt stack 0
  1512  00017A                     	ds	10
  1513  000184                     _TestButton:
  1514                           	opt stack 0
  1515  000184                     	ds	10
  1516  00018E                     _PortG:
  1517                           	opt stack 0
  1518  00018E                     	ds	10
  1519  000198                     _PortB:
  1520                           	opt stack 0
  1521  000198                     	ds	10
  1522  0001A2                     _PortA:
  1523                           	opt stack 0
  1524  0001A2                     	ds	10
  1525  0001AC                     _PortF:
  1526                           	opt stack 0
  1527  0001AC                     	ds	10
  1528  0001B6                     _I2C2T:
  1529                           	opt stack 0
  1530  0001B6                     	ds	7
  1531  0001BD                     _Stepper:
  1532                           	opt stack 0
  1533  0001BD                     	ds	6
  1534  0001C3                     _ADC_AN3:
  1535                           	opt stack 0
  1536  0001C3                     	ds	5
  1537                           tblptru	equ	0xFF8
  1538                           tblptrh	equ	0xFF7
  1539                           tblptrl	equ	0xFF6
  1540                           tablat	equ	0xFF5
  1541                           postinc0	equ	0xFEE
  1542                           wreg	equ	0xFE8
  1543                           postdec1	equ	0xFE5
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547                           	psect	dataBANK1
  1548  0001DB                     __pdataBANK1:
  1549                           	opt stack 0
  1550  0001DB                     Console_Render@F6956:
  1551                           	opt stack 0
  1552  0001DB                     	ds	4
  1553  0001DF                     _gLineSize:
  1554                           	opt stack 0
  1555  0001DF                     	ds	4
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postdec1	equ	0xFE5
  1563                           fsr1h	equ	0xFE2
  1564                           fsr1l	equ	0xFE1
  1565                           
  1566                           	psect	bssBANK2
  1567  000200                     __pbssBANK2:
  1568                           	opt stack 0
  1569  000200                     Console_MakeField@Fill:
  1570                           	opt stack 0
  1571  000200                     	ds	70
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1h	equ	0xFE2
  1580                           fsr1l	equ	0xFE1
  1581                           
  1582                           	psect	bssBIGRAM
  1583  000246                     __pbssBIGRAM:
  1584                           	opt stack 0
  1585  000246                     _lBuffer:
  1586                           	opt stack 0
  1587  000246                     	ds	300
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           
  1598                           	psect	cstackBANK1
  1599  0001C8                     __pcstackBANK1:
  1600                           	opt stack 0
  1601  0001C8                     ??_Port_Init:
  1602  0001C8                     Button_Init@pInput:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x0
  1606  0001C8                     	ds	2
  1607  0001CA                     Port_Init@i:
  1608                           	opt stack 0
  1609  0001CA                     Button_Init@pThreshold:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x2
  1613  0001CA                     	ds	2
  1614  0001CC                     Button_Init@pInitIO:
  1615                           	opt stack 0
  1616                           
  1617                           ; 3 bytes @ 0x4
  1618  0001CC                     	ds	3
  1619  0001CF                     Button_Init@pGetState:
  1620                           	opt stack 0
  1621                           
  1622                           ; 3 bytes @ 0x7
  1623  0001CF                     	ds	3
  1624  0001D2                     Button_Init@pFunction:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0xA
  1628  0001D2                     	ds	3
  1629  0001D5                     main@Stepper:
  1630                           	opt stack 0
  1631                           
  1632                           ; 6 bytes @ 0xD
  1633  0001D5                     	ds	6
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1h	equ	0xFE2
  1642                           fsr1l	equ	0xFE1
  1643                           
  1644                           	psect	cstackBANK0
  1645  0000B2                     __pcstackBANK0:
  1646                           	opt stack 0
  1647  0000B2                     ??_Console_ClearCursor:
  1648  0000B2                     ??_Console_Init:
  1649  0000B2                     ??_Console_NewLine:
  1650  0000B2                     ??_Console_FormFeed:
  1651  0000B2                     ??_HMI_SetButton:
  1652  0000B2                     ?_GetPortProperties:
  1653                           	opt stack 0
  1654  0000B2                     ?_GetPortPORT:
  1655                           	opt stack 0
  1656  0000B2                     ?_GetPortTRIS:
  1657                           	opt stack 0
  1658  0000B2                     ?___wmul:
  1659                           	opt stack 0
  1660  0000B2                     ?___awdiv:
  1661                           	opt stack 0
  1662  0000B2                     ?___lwdiv:
  1663                           	opt stack 0
  1664  0000B2                     ?___lldiv:
  1665                           	opt stack 0
  1666  0000B2                     Mode_Set@pMode:
  1667                           	opt stack 0
  1668  0000B2                     ToSegment@pCHR:
  1669                           	opt stack 0
  1670  0000B2                     HMI_SetLeft@pValue:
  1671                           	opt stack 0
  1672  0000B2                     HMI_SetRight@pValue:
  1673                           	opt stack 0
  1674  0000B2                     HMI_SetUp@pValue:
  1675                           	opt stack 0
  1676  0000B2                     HMI_SetDown@pValue:
  1677                           	opt stack 0
  1678  0000B2                     HMI_SetBar@pValue:
  1679                           	opt stack 0
  1680  0000B2                     Port_GetPin@pInput:
  1681                           	opt stack 0
  1682  0000B2                     Port_GetQuad@pInput:
  1683                           	opt stack 0
  1684  0000B2                     SPI_DisableISR@pInput:
  1685                           	opt stack 0
  1686  0000B2                     SPI_DCS@pInput:
  1687                           	opt stack 0
  1688  0000B2                     SPI_Send@pInput:
  1689                           	opt stack 0
  1690  0000B2                     Byte_SetBit@pInput:
  1691                           	opt stack 0
  1692  0000B2                     Byte_GetBit@pInput:
  1693                           	opt stack 0
  1694  0000B2                     Byte_SetZone@pInput:
  1695                           	opt stack 0
  1696  0000B2                     Byte_GetZone@pInput:
  1697                           	opt stack 0
  1698  0000B2                     Byte_SetByte@pInput:
  1699                           	opt stack 0
  1700  0000B2                     delay_ms@ms:
  1701                           	opt stack 0
  1702  0000B2                     delay_us@us:
  1703                           	opt stack 0
  1704  0000B2                     reverse@input:
  1705                           	opt stack 0
  1706  0000B2                     Console_SetForecolour@pColour:
  1707                           	opt stack 0
  1708  0000B2                     ___wmul@multiplier:
  1709                           	opt stack 0
  1710  0000B2                     ___awdiv@dividend:
  1711                           	opt stack 0
  1712  0000B2                     ___lwdiv@dividend:
  1713                           	opt stack 0
  1714  0000B2                     MXK_Queue@pCallback:
  1715                           	opt stack 0
  1716  0000B2                     Timer0_Start@pFunction:
  1717                           	opt stack 0
  1718  0000B2                     ___lldiv@dividend:
  1719                           	opt stack 0
  1720                           
  1721                           ; 4 bytes @ 0x0
  1722  0000B2                     	ds	1
  1723  0000B3                     HMI_SetSegments@pString:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x1
  1727  0000B3                     	ds	1
  1728  0000B4                     GetPortProperties@pInput:
  1729                           	opt stack 0
  1730  0000B4                     GetPortPORT@pInput:
  1731                           	opt stack 0
  1732  0000B4                     GetPortTRIS@pInput:
  1733                           	opt stack 0
  1734  0000B4                     Port_GetPin@pPin:
  1735                           	opt stack 0
  1736  0000B4                     Port_GetQuad@pQuad:
  1737                           	opt stack 0
  1738  0000B4                     SPI_Send@pData:
  1739                           	opt stack 0
  1740  0000B4                     Byte_SetBit@pBit:
  1741                           	opt stack 0
  1742  0000B4                     Byte_GetBit@pBit:
  1743                           	opt stack 0
  1744  0000B4                     Byte_SetZone@pMax:
  1745                           	opt stack 0
  1746  0000B4                     Byte_GetZone@pMax:
  1747                           	opt stack 0
  1748  0000B4                     Byte_SetByte@pValue:
  1749                           	opt stack 0
  1750  0000B4                     Console_Init@x:
  1751                           	opt stack 0
  1752  0000B4                     Console_FormFeed@x:
  1753                           	opt stack 0
  1754  0000B4                     reverse@length:
  1755                           	opt stack 0
  1756  0000B4                     ___wmul@multiplicand:
  1757                           	opt stack 0
  1758  0000B4                     ___awdiv@divisor:
  1759                           	opt stack 0
  1760  0000B4                     ___lwdiv@divisor:
  1761                           	opt stack 0
  1762  0000B4                     delay_ms@u:
  1763                           	opt stack 0
  1764  0000B4                     delay_us@u:
  1765                           	opt stack 0
  1766  0000B4                     HMI_SetButton@reindex:
  1767                           	opt stack 0
  1768                           
  1769                           ; 4 bytes @ 0x2
  1770  0000B4                     	ds	1
  1771  0000B5                     ??_Port_GetPin:
  1772  0000B5                     ??_Port_GetQuad:
  1773  0000B5                     ??_Byte_GetBit:
  1774  0000B5                     LCD_Write@mode:
  1775                           	opt stack 0
  1776  0000B5                     Byte_SetBit@pValue:
  1777                           	opt stack 0
  1778  0000B5                     Byte_SetZone@pChunk:
  1779                           	opt stack 0
  1780  0000B5                     Byte_GetZone@pChunk:
  1781                           	opt stack 0
  1782  0000B5                     Console_Init@y:
  1783                           	opt stack 0
  1784  0000B5                     Console_FormFeed@y:
  1785                           	opt stack 0
  1786  0000B5                     Motor_Move@pMotor:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x3
  1790  0000B5                     	ds	1
  1791  0000B6                     ??_Byte_SetBit:
  1792  0000B6                     ??_Console_IncrementCursor:
  1793  0000B6                     LCD_Write@value:
  1794                           	opt stack 0
  1795  0000B6                     Byte_GetBit@Output:
  1796                           	opt stack 0
  1797  0000B6                     Byte_SetZone@pChunkSize:
  1798                           	opt stack 0
  1799  0000B6                     Byte_GetZone@pChunkSize:
  1800                           	opt stack 0
  1801  0000B6                     reverse@tempVar:
  1802                           	opt stack 0
  1803  0000B6                     ___awdiv@counter:
  1804                           	opt stack 0
  1805  0000B6                     ___lwdiv@counter:
  1806                           	opt stack 0
  1807  0000B6                     HMI_SetSegments@in:
  1808                           	opt stack 0
  1809  0000B6                     ___wmul@product:
  1810                           	opt stack 0
  1811  0000B6                     ___lldiv@divisor:
  1812                           	opt stack 0
  1813                           
  1814                           ; 4 bytes @ 0x4
  1815  0000B6                     	ds	1
  1816  0000B7                     ??_Byte_GetZone:
  1817  0000B7                     ?_Console_MakeField:
  1818                           	opt stack 0
  1819  0000B7                     Set_Addr_Window@ys:
  1820                           	opt stack 0
  1821  0000B7                     Set_Rotation@m:
  1822                           	opt stack 0
  1823  0000B7                     Port_GetPin@Output:
  1824                           	opt stack 0
  1825  0000B7                     Port_GetQuad@Output:
  1826                           	opt stack 0
  1827  0000B7                     Byte_SetZone@pValue:
  1828                           	opt stack 0
  1829  0000B7                     ___awdiv@sign:
  1830                           	opt stack 0
  1831  0000B7                     LCD_Word_Write@value:
  1832                           	opt stack 0
  1833  0000B7                     reverse@iterator:
  1834                           	opt stack 0
  1835  0000B7                     Motor_Move@pDelta:
  1836                           	opt stack 0
  1837  0000B7                     ___lwdiv@quotient:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x5
  1841  0000B7                     	ds	1
  1842  0000B8                     ??_Byte_SetZone:
  1843  0000B8                     Set_Addr_Window@xe:
  1844                           	opt stack 0
  1845  0000B8                     Set_Rotation@rotation:
  1846                           	opt stack 0
  1847  0000B8                     Byte_GetZone@MASK:
  1848                           	opt stack 0
  1849  0000B8                     HMI_SetButton@pValue:
  1850                           	opt stack 0
  1851  0000B8                     MXK_BlockSwitchTo@CUR:
  1852                           	opt stack 0
  1853  0000B8                     MXK_SwitchTo@CUR:
  1854                           	opt stack 0
  1855  0000B8                     ___awdiv@quotient:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x6
  1859  0000B8                     	ds	1
  1860  0000B9                     ??_Console_MakeField:
  1861  0000B9                     ?___lwmod:
  1862                           	opt stack 0
  1863  0000B9                     Set_Addr_Window@ye:
  1864                           	opt stack 0
  1865  0000B9                     Byte_GetZone@Offset:
  1866                           	opt stack 0
  1867  0000B9                     HMI_SetButton@v:
  1868                           	opt stack 0
  1869  0000B9                     MXK_BlockSwitchTo@pModule:
  1870                           	opt stack 0
  1871  0000B9                     MXK_SwitchTo@pModule:
  1872                           	opt stack 0
  1873  0000B9                     ___lwmod@dividend:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x7
  1877  0000B9                     	ds	1
  1878  0000BA                     ??_Console_Tab:
  1879  0000BA                     Set_Addr_Window@xs:
  1880                           	opt stack 0
  1881  0000BA                     Byte_GetZone@Output:
  1882                           	opt stack 0
  1883  0000BA                     ___lldiv@quotient:
  1884                           	opt stack 0
  1885                           
  1886                           ; 4 bytes @ 0x8
  1887  0000BA                     	ds	1
  1888  0000BB                     Byte_SetZone@Offset:
  1889                           	opt stack 0
  1890  0000BB                     LCD_Fill@pColour:
  1891                           	opt stack 0
  1892  0000BB                     LCD_FillRectangle@pColour:
  1893                           	opt stack 0
  1894  0000BB                     Byte_GetPair@pInput:
  1895                           	opt stack 0
  1896  0000BB                     Console_MakeField@Index:
  1897                           	opt stack 0
  1898  0000BB                     ___lwmod@divisor:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x9
  1902  0000BB                     	ds	1
  1903  0000BC                     Byte_SetZone@MASK:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0xA
  1907  0000BC                     	ds	1
  1908  0000BD                     LCD_Fill@i:
  1909                           	opt stack 0
  1910  0000BD                     Byte_GetPair@pPair:
  1911                           	opt stack 0
  1912  0000BD                     Console_MakeField@pInput:
  1913                           	opt stack 0
  1914  0000BD                     ___lwmod@counter:
  1915                           	opt stack 0
  1916  0000BD                     Byte_SetPair@pInput:
  1917                           	opt stack 0
  1918  0000BD                     Byte_SetQuad@pInput:
  1919                           	opt stack 0
  1920  0000BD                     LCD_FillRectangle@pPoint:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0xB
  1924  0000BD                     	ds	1
  1925  0000BE                     LCD_Fill@j:
  1926                           	opt stack 0
  1927  0000BE                     ___lldiv@counter:
  1928                           	opt stack 0
  1929  0000BE                     Word_GetPair@pInput:
  1930                           	opt stack 0
  1931  0000BE                     itos@input:
  1932                           	opt stack 0
  1933  0000BE                     Console_MakeField@Column:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0xC
  1937  0000BE                     	ds	1
  1938  0000BF                     Byte_SetPair@pPair:
  1939                           	opt stack 0
  1940  0000BF                     Byte_SetQuad@pQuad:
  1941                           	opt stack 0
  1942  0000BF                     Console_Tab@t:
  1943                           	opt stack 0
  1944  0000BF                     Timer0_Init@pFrequency:
  1945                           	opt stack 0
  1946  0000BF                     Timer2_Init@pFrequency:
  1947                           	opt stack 0
  1948                           
  1949                           ; 4 bytes @ 0xD
  1950  0000BF                     	ds	1
  1951  0000C0                     Byte_SetPair@pValue:
  1952                           	opt stack 0
  1953  0000C0                     Byte_SetQuad@pValue:
  1954                           	opt stack 0
  1955  0000C0                     Word_GetPair@pPair:
  1956                           	opt stack 0
  1957  0000C0                     Console_Tab@i:
  1958                           	opt stack 0
  1959  0000C0                     itos@destination:
  1960                           	opt stack 0
  1961  0000C0                     _Console_MakeField$10974:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0xE
  1965  0000C0                     	ds	1
  1966  0000C1                     Console_Tab@c:
  1967                           	opt stack 0
  1968  0000C1                     Port_SetPin@pInput:
  1969                           	opt stack 0
  1970  0000C1                     Port_Set@pInput:
  1971                           	opt stack 0
  1972  0000C1                     SPI_MinSpeed@pInput:
  1973                           	opt stack 0
  1974  0000C1                     SPI_MaxSpeed@pInput:
  1975                           	opt stack 0
  1976  0000C1                     Word_SetPair@pInput:
  1977                           	opt stack 0
  1978  0000C1                     PortProperty_Valid@pInput:
  1979                           	opt stack 0
  1980  0000C1                     LCD_FillRectangle@pSize:
  1981                           	opt stack 0
  1982                           
  1983                           ; 4 bytes @ 0xF
  1984  0000C1                     	ds	1
  1985  0000C2                     ??_Console_PrintChar:
  1986  0000C2                     Console_MakeField@x:
  1987                           	opt stack 0
  1988  0000C2                     itos@Data:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x10
  1992  0000C2                     	ds	1
  1993  0000C3                     ??_Timer2_Init:
  1994  0000C3                     ??_Timer0_Init:
  1995  0000C3                     Port_SetPin@pPin:
  1996                           	opt stack 0
  1997  0000C3                     Port_Set@pValue:
  1998                           	opt stack 0
  1999  0000C3                     Word_SetPair@pPair:
  2000                           	opt stack 0
  2001  0000C3                     PortProperty_Valid@pPinDrive:
  2002                           	opt stack 0
  2003  0000C3                     Console_MakeField@y:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  0000C3                     	ds	1
  2008  0000C4                     ??_Port_Set:
  2009  0000C4                     Port_SetPin@pValue:
  2010                           	opt stack 0
  2011  0000C4                     Word_SetPair@pValue:
  2012                           	opt stack 0
  2013  0000C4                     PortProperty_Valid@pPin:
  2014                           	opt stack 0
  2015  0000C4                     LCD_DrawField@pField:
  2016                           	opt stack 0
  2017  0000C4                     itos@Length:
  2018                           	opt stack 0
  2019  0000C4                     Timer2_Init@RDIV:
  2020                           	opt stack 0
  2021                           
  2022                           ; 4 bytes @ 0x12
  2023  0000C4                     	ds	1
  2024  0000C5                     ??_PortProperty_Valid:
  2025  0000C5                     ??_LCD_FillRectangle:
  2026  0000C5                     Port_SetPin@Type:
  2027                           	opt stack 0
  2028  0000C5                     Console_PrintChar@pInput:
  2029                           	opt stack 0
  2030  0000C5                     Timer0_Init@pCPUClock:
  2031                           	opt stack 0
  2032                           
  2033                           ; 4 bytes @ 0x13
  2034  0000C5                     	ds	1
  2035  0000C6                     LED_Set@pValue:
  2036                           	opt stack 0
  2037  0000C6                     putch@c:
  2038                           	opt stack 0
  2039  0000C6                     Port_TogglePin@pInput:
  2040                           	opt stack 0
  2041  0000C6                     itos@Out:
  2042                           	opt stack 0
  2043  0000C6                     LCD_DrawField@pPoint:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0x14
  2047  0000C6                     	ds	1
  2048  0000C7                     ?_printf:
  2049                           	opt stack 0
  2050  0000C7                     LCD_FillRectangle@i:
  2051                           	opt stack 0
  2052  0000C7                     LED_Set@pLED:
  2053                           	opt stack 0
  2054  0000C7                     printf@f:
  2055                           	opt stack 0
  2056  0000C7                     PortProperty_Valid@Errors:
  2057                           	opt stack 0
  2058                           
  2059                           ; 16 bytes @ 0x15
  2060  0000C7                     	ds	1
  2061  0000C8                     LCD_FillRectangle@j:
  2062                           	opt stack 0
  2063  0000C8                     Port_TogglePin@pPin:
  2064                           	opt stack 0
  2065  0000C8                     HMI_SetNumber@pInput:
  2066                           	opt stack 0
  2067  0000C8                     Timer2_Init@pCPUClock:
  2068                           	opt stack 0
  2069                           
  2070                           ; 4 bytes @ 0x16
  2071  0000C8                     	ds	1
  2072  0000C9                     Port_TogglePin@Value:
  2073                           	opt stack 0
  2074  0000C9                     Timer0_Init@DIVIDE:
  2075                           	opt stack 0
  2076                           
  2077                           ; 4 bytes @ 0x17
  2078  0000C9                     	ds	1
  2079  0000CA                     LED_Toggle@pLED:
  2080                           	opt stack 0
  2081  0000CA                     LCD_DrawField@pSize:
  2082                           	opt stack 0
  2083                           
  2084                           ; 4 bytes @ 0x18
  2085  0000CA                     	ds	1
  2086  0000CB                     ??_printf:
  2087  0000CB                     Event_DIPSwitch@pState:
  2088                           	opt stack 0
  2089  0000CB                     Event_HMI_DIPSwitch@pState:
  2090                           	opt stack 0
  2091  0000CB                     Event_TestButton@pState:
  2092                           	opt stack 0
  2093  0000CB                     Event_HMI_LeftButton@pState:
  2094                           	opt stack 0
  2095  0000CB                     Event_HMI_RightButton@pState:
  2096                           	opt stack 0
  2097  0000CB                     Event_HMI_UpButton@pState:
  2098                           	opt stack 0
  2099  0000CB                     Event_HMI_DownButton@pState:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x19
  2103  0000CB                     	ds	1
  2104  0000CC                     Event_DIPSwitch@Bar:
  2105                           	opt stack 0
  2106  0000CC                     Event_HMI_DIPSwitch@Bar:
  2107                           	opt stack 0
  2108  0000CC                     printf@flag:
  2109                           	opt stack 0
  2110  0000CC                     Timer2_Init@DIVIDE:
  2111                           	opt stack 0
  2112                           
  2113                           ; 4 bytes @ 0x1A
  2114  0000CC                     	ds	1
  2115  0000CD                     printf@prec:
  2116                           	opt stack 0
  2117  0000CD                     Button_Poll@pButton:
  2118                           	opt stack 0
  2119  0000CD                     Motor_Speed@pMotor:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x1B
  2123  0000CD                     	ds	1
  2124  0000CE                     ??_LCD_DrawField:
  2125  0000CE                     printf@ap:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x1C
  2129  0000CE                     	ds	1
  2130  0000CF                     Button_Poll@pIncrement:
  2131                           	opt stack 0
  2132  0000CF                     Motor_Speed@pFrequency:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x1D
  2136  0000CF                     	ds	1
  2137  0000D0                     ??_Button_Poll:
  2138  0000D0                     LCD_DrawField@count:
  2139                           	opt stack 0
  2140  0000D0                     printf@val:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x1E
  2144  0000D0                     	ds	1
  2145  0000D1                     
  2146                           ; 1 bytes @ 0x1F
  2147  0000D1                     	ds	1
  2148  0000D2                     LCD_DrawField@xmax:
  2149                           	opt stack 0
  2150  0000D2                     printf@c:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x20
  2154  0000D2                     	ds	1
  2155  0000D3                     LCD_DrawField@ymax:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x21
  2159  0000D3                     	ds	1
  2160  0000D4                     LCD_DrawField@i:
  2161                           	opt stack 0
  2162  0000D4                     Port_Set@TypeRequired:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x22
  2166  0000D4                     	ds	1
  2167  0000D5                     ??_Console_Render:
  2168  0000D5                     Button_Poll@Pin:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x23
  2172  0000D5                     	ds	1
  2173  0000D6                     ?_getMode:
  2174                           	opt stack 0
  2175  0000D6                     Port_Set@TypeActual:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x24
  2179  0000D6                     	ds	1
  2180  0000D7                     PortProperty_Valid@Pair:
  2181                           	opt stack 0
  2182  0000D7                     Console_Render@temp:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x25
  2186  0000D7                     	ds	1
  2187  0000D8                     ??_getMode:
  2188  0000D8                     Port_Set@Type:
  2189                           	opt stack 0
  2190  0000D8                     Port_CheckPairType@pInput:
  2191                           	opt stack 0
  2192  0000D8                     Port_SetPinType@pInput:
  2193                           	opt stack 0
  2194  0000D8                     Console_Render@lCursor:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0x26
  2198  0000D8                     	ds	2
  2199  0000DA                     Port_CheckPairType@pPair:
  2200                           	opt stack 0
  2201  0000DA                     Port_SetPinType@pPin:
  2202                           	opt stack 0
  2203  0000DA                     getMode@dipState:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x28
  2207  0000DA                     	ds	1
  2208  0000DB                     Port_CheckPairType@pDrive:
  2209                           	opt stack 0
  2210  0000DB                     Port_SetPinType@pType:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x29
  2214  0000DB                     	ds	1
  2215  0000DC                     ??_displayMode:
  2216  0000DC                     Port_CheckPairType@Pin1:
  2217                           	opt stack 0
  2218  0000DC                     Port_SetPinType@Output:
  2219                           	opt stack 0
  2220  0000DC                     Console_Render@x:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x2A
  2224  0000DC                     	ds	1
  2225  0000DD                     Port_CheckPairType@Pin2:
  2226                           	opt stack 0
  2227  0000DD                     Console_Render@y:
  2228                           	opt stack 0
  2229  0000DD                     Port_SetPinType@Props:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x2B
  2233  0000DD                     	ds	1
  2234  0000DE                     Port_CheckPairType@Output:
  2235                           	opt stack 0
  2236  0000DE                     displayMode@mode:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x2C
  2240  0000DE                     	ds	1
  2241  0000DF                     LED_Init@pLED:
  2242                           	opt stack 0
  2243  0000DF                     Port_CheckPairType@Props:
  2244                           	opt stack 0
  2245  0000DF                     Motor_Init@pMotor:
  2246                           	opt stack 0
  2247  0000DF                     SPI_Init@pClock:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0x2D
  2251  0000DF                     	ds	1
  2252  0000E0                     ??_continuousMode:
  2253  0000E0                     
  2254                           ; 1 bytes @ 0x2E
  2255  0000E0                     	ds	1
  2256  0000E1                     Port_CheckQuadType@pInput:
  2257                           	opt stack 0
  2258  0000E1                     Motor_Init@pAddress:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x2F
  2262  0000E1                     	ds	1
  2263  0000E2                     continuousMode@mode:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x30
  2267  0000E2                     	ds	1
  2268  0000E3                     Port_CheckQuadType@pQuad:
  2269                           	opt stack 0
  2270  0000E3                     SPI_Init@pChannel:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x31
  2274  0000E3                     	ds	1
  2275  0000E4                     Port_CheckQuadType@pDrive:
  2276                           	opt stack 0
  2277  0000E4                     SPI_Init@pMode:
  2278                           	opt stack 0
  2279  0000E4                     continuousMode@direction:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x32
  2283  0000E4                     	ds	1
  2284  0000E5                     Port_CheckQuadType@Pair1:
  2285                           	opt stack 0
  2286  0000E5                     SPI_Init@pInput:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x33
  2290  0000E5                     	ds	1
  2291  0000E6                     Port_CheckQuadType@Pair2:
  2292                           	opt stack 0
  2293  0000E6                     continuousMode@speed:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x34
  2297  0000E6                     	ds	1
  2298  0000E7                     ??_LCD_Init:
  2299  0000E7                     Port_CheckQuadType@Output:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x35
  2303  0000E7                     	ds	1
  2304  0000E8                     ?_setMode:
  2305                           	opt stack 0
  2306  0000E8                     Port_CheckPortType@pInput:
  2307                           	opt stack 0
  2308  0000E8                     Port_SetQuadType@pInput:
  2309                           	opt stack 0
  2310                           
  2311                           ; 2 bytes @ 0x36
  2312  0000E8                     	ds	1
  2313  0000E9                     LCD_Init@i:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x37
  2317  0000E9                     	ds	1
  2318  0000EA                     Port_CheckPortType@pDrive:
  2319                           	opt stack 0
  2320  0000EA                     Port_SetQuadType@pQuad:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x38
  2324  0000EA                     	ds	1
  2325  0000EB                     Port_CheckPortType@Output:
  2326                           	opt stack 0
  2327  0000EB                     Port_SetQuadType@pType:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x39
  2331  0000EB                     	ds	1
  2332  0000EC                     Port_SetQuadType@Output:
  2333                           	opt stack 0
  2334  0000EC                     Port_SetType@pInput:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x3A
  2338  0000EC                     	ds	1
  2339  0000ED                     HMI_Init@in:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x3B
  2343  0000ED                     	ds	1
  2344  0000EE                     ??_setMode:
  2345  0000EE                     Port_SetType@pType:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x3C
  2349  0000EE                     	ds	1
  2350  0000EF                     ??_Port_SetType:
  2351                           
  2352                           ; 1 bytes @ 0x3D
  2353  0000EF                     	ds	1
  2354  0000F0                     setMode@mode:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x3E
  2358  0000F0                     	ds	1
  2359  0000F1                     Port_SetType@Output:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x3F
  2363  0000F1                     	ds	1
  2364  0000F2                     Port_Init@pInput:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x40
  2368  0000F2                     	ds	2
  2369  0000F4                     Port_Init@pPort:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x42
  2373  0000F4                     	ds	1
  2374  0000F5                     tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postdec1	equ	0xFE5
  2381                           fsr1h	equ	0xFE2
  2382                           fsr1l	equ	0xFE1
  2383                           
  2384                           ; 1 bytes @ 0x43
  2385                           
  2386                           	psect	cstackCOMRAM
  2387  000001                     __pcstackCOMRAM:
  2388                           	opt stack 0
  2389  000001                     i2Byte_SetBit@pInput:
  2390                           	opt stack 0
  2391  000001                     i2Byte_GetZone@pInput:
  2392                           	opt stack 0
  2393  000001                     i2delay_us@us:
  2394                           	opt stack 0
  2395  000001                     i2MXK_Queue@pCallback:
  2396                           	opt stack 0
  2397                           
  2398                           ; 3 bytes @ 0x0
  2399  000001                     	ds	2
  2400  000003                     i2Byte_SetBit@pBit:
  2401                           	opt stack 0
  2402  000003                     i2Byte_GetZone@pMax:
  2403                           	opt stack 0
  2404  000003                     i2delay_us@u:
  2405                           	opt stack 0
  2406                           
  2407                           ; 4 bytes @ 0x2
  2408  000003                     	ds	1
  2409  000004                     i2Byte_SetBit@pValue:
  2410                           	opt stack 0
  2411  000004                     i2Byte_GetZone@pChunk:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x3
  2415  000004                     	ds	1
  2416  000005                     ??i2_Byte_SetBit:
  2417  000005                     i2Byte_GetZone@pChunkSize:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x4
  2421  000005                     	ds	1
  2422  000006                     ??i2_Byte_GetZone:
  2423                           
  2424                           ; 1 bytes @ 0x5
  2425  000006                     	ds	1
  2426  000007                     i2Byte_GetZone@MASK:
  2427                           	opt stack 0
  2428  000007                     i2MXK_SwitchTo@CUR:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x6
  2432  000007                     	ds	1
  2433  000008                     i2Byte_GetZone@Offset:
  2434                           	opt stack 0
  2435  000008                     i2MXK_SwitchTo@pModule:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x7
  2439  000008                     	ds	1
  2440  000009                     i2Byte_GetZone@Output:
  2441                           	opt stack 0
  2442                           
  2443                           ; 1 bytes @ 0x8
  2444  000009                     	ds	1
  2445  00000A                     i2Byte_GetPair@pInput:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x9
  2449  00000A                     	ds	2
  2450  00000C                     i2Byte_GetPair@pPair:
  2451                           	opt stack 0
  2452                           
  2453                           ; 1 bytes @ 0xB
  2454  00000C                     	ds	1
  2455  00000D                     i2Word_GetPair@pInput:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0xC
  2459  00000D                     	ds	2
  2460  00000F                     i2Word_GetPair@pPair:
  2461                           	opt stack 0
  2462                           
  2463                           ; 1 bytes @ 0xE
  2464  00000F                     	ds	1
  2465  000010                     i2Port_SetPin@pInput:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0xF
  2469  000010                     	ds	2
  2470  000012                     i2Port_SetPin@pPin:
  2471                           	opt stack 0
  2472                           
  2473                           ; 1 bytes @ 0x11
  2474  000012                     	ds	1
  2475  000013                     i2Port_SetPin@pValue:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x12
  2479  000013                     	ds	1
  2480  000014                     i2Port_SetPin@Type:
  2481                           	opt stack 0
  2482                           
  2483                           ; 1 bytes @ 0x13
  2484  000014                     	ds	1
  2485  000015                     
  2486                           ; 1 bytes @ 0x14
  2487  000015                     	ds	2
  2488  000017                     ??_ISR_Function:
  2489                           
  2490                           ; 1 bytes @ 0x16
  2491  000017                     	ds	18
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1h	equ	0xFE2
  2500                           fsr1l	equ	0xFE1
  2501                           
  2502 ;;
  2503 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2504 ;;
  2505 ;; *************** function _main *****************
  2506 ;; Defined at:
  2507 ;;		line 222 in file "main.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  Stepper         6   13[BANK1 ] struct Motor
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;Total ram usage:        6 bytes
  2526 ;; Hardware stack levels required when called:   21
  2527 ;; This function calls:
  2528 ;;		_MXK_BlockSwitchTo
  2529 ;;		_MXK_Dequeue
  2530 ;;		_MXK_Release
  2531 ;;		_displayText
  2532 ;;		_initialise
  2533 ;;		_setMode
  2534 ;; This function is called by:
  2535 ;;		Startup code after reset
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text0
  2540  0143F8                     __ptext0:
  2541                           	opt stack 0
  2542  0143F8                     _main:
  2543                           	opt stack 10
  2544                           
  2545                           ;main.c: 223: Motor Stepper;
  2546                           ;main.c: 224: initialise();
  2547                           
  2548                           ;incstack = 0
  2549  0143F8  ECA2  F09E         	call	_initialise	;wreg free
  2550  0143FC                     
  2551                           ;main.c: 228: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2552  0143FC  0E01               	movlw	1
  2553  0143FE  ECA0  F0A1         	call	_MXK_BlockSwitchTo
  2554  014402  0900               	iorlw	0
  2555  014404  B4D8               	btfsc	status,2,c
  2556  014406  D7FA               	goto	l2075
  2557                           
  2558                           ;main.c: 230: displayText();
  2559  014408  EC73  F0A3         	call	_displayText	;wreg free
  2560                           
  2561                           ;main.c: 233: setMode(Stepper);
  2562  01440C  EE21  F0D5         	lfsr	2,main@Stepper
  2563  014410  EE00  F0E8         	lfsr	0,?_setMode
  2564  014414  0E05               	movlw	5
  2565  014416                     u9361:
  2566  014416  CFDB FFEB          	movff	plusw2,plusw0
  2567  01441A  06E8               	decf	wreg,f,c
  2568  01441C  E2FC               	bc	u9361
  2569  01441E  ECAD  F09F         	call	_setMode	;wreg free
  2570                           
  2571                           ;main.c: 235: if (MXK_Release())
  2572  014422  EC6D  F0A4         	call	_MXK_Release	;wreg free
  2573  014426  0900               	iorlw	0
  2574  014428  B4D8               	btfsc	status,2,c
  2575  01442A  D7E8               	goto	l2075
  2576                           
  2577                           ;main.c: 236: MXK_Dequeue();
  2578  01442C  EC81  F0A1         	call	_MXK_Dequeue	;wreg free
  2579                           
  2580                           ;main.c: 237: }
  2581                           ;main.c: 256: }
  2582  014430  D7E5               	goto	l2075
  2583  014432                     __end_of_main:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           plusw0	equ	0xFEB
  2591                           wreg	equ	0xFE8
  2592                           postdec1	equ	0xFE5
  2593                           fsr1h	equ	0xFE2
  2594                           fsr1l	equ	0xFE1
  2595                           plusw2	equ	0xFDB
  2596                           status	equ	0xFD8
  2597                           
  2598 ;; *************** function _setMode *****************
  2599 ;; Defined at:
  2600 ;;		line 204 in file "main.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  mode            2   62[BANK0 ] int 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:       10 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:   20
  2621 ;; This function calls:
  2622 ;;		_continuousMode
  2623 ;;		_getMode
  2624 ;;		_nullMode
  2625 ;;		_positionMode
  2626 ;;		_stepMode
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text1
  2633  013F5A                     __ptext1:
  2634                           	opt stack 0
  2635  013F5A                     _setMode:
  2636                           	opt stack 10
  2637                           
  2638                           ;main.c: 205: int mode = getMode();
  2639                           
  2640                           ;incstack = 0
  2641  013F5A  ECA7  F09A         	call	_getMode	;wreg free
  2642  013F5E  C0D6  F0F0         	movff	?_getMode,setMode@mode
  2643  013F62  C0D7  F0F1         	movff	?_getMode+1,setMode@mode+1
  2644                           
  2645                           ;main.c: 206: switch (mode) {
  2646  013F66  D00C               	goto	l2064
  2647  013F68                     
  2648                           ;main.c: 208: continuousMode();
  2649  013F68  ECEC  F083         	call	_continuousMode	;wreg free
  2650                           
  2651                           ;main.c: 209: break;
  2652  013F6C  0012               	return	
  2653  013F6E                     
  2654                           ;main.c: 211: stepMode();
  2655  013F6E  EC02  F00A         	call	_stepMode	;wreg free
  2656                           
  2657                           ;main.c: 212: break;
  2658  013F72  0012               	return	
  2659  013F74                     
  2660                           ;main.c: 214: positionMode();
  2661  013F74  EC6A  F0A5         	call	_positionMode	;wreg free
  2662                           
  2663                           ;main.c: 215: break;
  2664  013F78  0012               	return	
  2665  013F7A                     
  2666                           ;main.c: 217: nullMode();
  2667  013F7A  EC19  F0A2         	call	_nullMode	;wreg free
  2668                           
  2669                           ;main.c: 219: }
  2670                           
  2671                           ;main.c: 218: break;
  2672  013F7E  0012               	return	
  2673  013F80                     l2064:
  2674  013F80  C0F0  F0EE         	movff	setMode@mode,??_setMode
  2675  013F84  C0F1  F0EF         	movff	setMode@mode+1,??_setMode+1
  2676                           
  2677                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 1, Range of values is 0 to 0
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte            4     3 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  013F88  0100               	movlb	0	; () banked
  2685  013F8A  51EF               	movf	(??_setMode+1)& (0+255),w,b
  2686  013F8C  0A00               	xorlw	0	; case 0
  2687  013F8E  A4D8               	btfss	status,2,c
  2688  013F90  D7F4               	goto	l2069
  2689                           
  2690                           ; BSR set to: 0
  2691                           ; Switch size 1, requested type "space"
  2692                           ; Number of cases is 3, Range of values is 1 to 3
  2693                           ; switch strategies available:
  2694                           ; Name         Instructions Cycles
  2695                           ; simple_byte           10     6 (average)
  2696                           ;	Chosen strategy is simple_byte
  2697  013F92  0100               	movlb	0	; () banked
  2698  013F94  51EE               	movf	??_setMode& (0+255),w,b
  2699  013F96  0A01               	xorlw	1	; case 1
  2700  013F98  B4D8               	btfsc	status,2,c
  2701  013F9A  D7E6               	goto	l2065
  2702  013F9C  0A03               	xorlw	3	; case 2
  2703  013F9E  B4D8               	btfsc	status,2,c
  2704  013FA0  D7E6               	goto	l2067
  2705  013FA2  0A01               	xorlw	1	; case 3
  2706  013FA4  B4D8               	btfsc	status,2,c
  2707  013FA6  D7E6               	goto	l2068
  2708  013FA8  D7E8               	goto	l2069
  2709  013FAA                     __end_of_setMode:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           postinc0	equ	0xFEE
  2716                           plusw0	equ	0xFEB
  2717                           wreg	equ	0xFE8
  2718                           postdec1	equ	0xFE5
  2719                           fsr1h	equ	0xFE2
  2720                           fsr1l	equ	0xFE1
  2721                           plusw2	equ	0xFDB
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _stepMode *****************
  2725 ;; Defined at:
  2726 ;;		line 190 in file "main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		None
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    7
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_setMode
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text2
  2755  001404                     __ptext2:
  2756                           	opt stack 0
  2757  001404                     _stepMode:
  2758                           	opt stack 22
  2759                           
  2760                           ;incstack = 0
  2761  001404  0012               	return		;funcret
  2762  001406                     __end_of_stepMode:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           postinc0	equ	0xFEE
  2769                           plusw0	equ	0xFEB
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           plusw2	equ	0xFDB
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _positionMode *****************
  2778 ;; Defined at:
  2779 ;;		line 193 in file "main.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;		None
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;		None
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		None
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;Total ram usage:        0 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    7
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_setMode
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text3
  2808  014AD4                     __ptext3:
  2809                           	opt stack 0
  2810  014AD4                     _positionMode:
  2811                           	opt stack 22
  2812                           
  2813                           ;incstack = 0
  2814  014AD4  0012               	return		;funcret
  2815  014AD6                     __end_of_positionMode:
  2816                           	opt stack 0
  2817                           tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           postinc0	equ	0xFEE
  2822                           plusw0	equ	0xFEB
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           plusw2	equ	0xFDB
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _nullMode *****************
  2831 ;; Defined at:
  2832 ;;		line 196 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;Total ram usage:        0 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:   19
  2853 ;; This function calls:
  2854 ;;		_Console_Render
  2855 ;;		_displayText
  2856 ;;		_printf
  2857 ;; This function is called by:
  2858 ;;		_setMode
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text4
  2863  014432                     __ptext4:
  2864                           	opt stack 0
  2865  014432                     _nullMode:
  2866                           	opt stack 10
  2867                           
  2868                           ;main.c: 197: displayText();
  2869                           
  2870                           ;incstack = 0
  2871  014432  EC73  F0A3         	call	_displayText	;wreg free
  2872                           
  2873                           ;main.c: 198: printf("                      \n");
  2874  014436  0E75               	movlw	low STR_10
  2875  014438  0100               	movlb	0	; () banked
  2876  01443A  6FC7               	movwf	printf@f& (0+255),b
  2877  01443C  0EFF               	movlw	high STR_10
  2878  01443E  0100               	movlb	0	; () banked
  2879  014440  6FC8               	movwf	(printf@f+1)& (0+255),b
  2880  014442  EC83  F08C         	call	_printf	;wreg free
  2881                           
  2882                           ;main.c: 199: printf("                      \n");
  2883  014446  0E75               	movlw	low STR_10
  2884  014448  0100               	movlb	0	; () banked
  2885  01444A  6FC7               	movwf	printf@f& (0+255),b
  2886  01444C  0EFF               	movlw	high STR_10
  2887  01444E  0100               	movlb	0	; () banked
  2888  014450  6FC8               	movwf	(printf@f+1)& (0+255),b
  2889  014452  EC83  F08C         	call	_printf	;wreg free
  2890                           
  2891                           ;main.c: 200: printf("                      \n");
  2892  014456  0E75               	movlw	low STR_10
  2893  014458  0100               	movlb	0	; () banked
  2894  01445A  6FC7               	movwf	printf@f& (0+255),b
  2895  01445C  0EFF               	movlw	high STR_10
  2896  01445E  0100               	movlb	0	; () banked
  2897  014460  6FC8               	movwf	(printf@f+1)& (0+255),b
  2898  014462  EC83  F08C         	call	_printf	;wreg free
  2899                           
  2900                           ;main.c: 201: Console_Render();
  2901  014466  ECCF  F088         	call	_Console_Render	;wreg free
  2902  01446A  0012               	return		;funcret
  2903  01446C                     __end_of_nullMode:
  2904                           	opt stack 0
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           postinc0	equ	0xFEE
  2910                           plusw0	equ	0xFEB
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1h	equ	0xFE2
  2914                           fsr1l	equ	0xFE1
  2915                           plusw2	equ	0xFDB
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _continuousMode *****************
  2919 ;; Defined at:
  2920 ;;		line 135 in file "main.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  speed           2   52[BANK0 ] int 
  2925 ;;  direction       2   50[BANK0 ] short 
  2926 ;;  mode            2   48[BANK0 ] int 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        8 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:   19
  2943 ;; This function calls:
  2944 ;;		_Console_Render
  2945 ;;		_Console_SetForecolour
  2946 ;;		_HMI_DIPSwitch
  2947 ;;		_HMI_DownSwitch
  2948 ;;		_HMI_LeftSwitch
  2949 ;;		_HMI_Poll
  2950 ;;		_HMI_RightSwitch
  2951 ;;		_HMI_UpSwitch
  2952 ;;		_LED_Toggle
  2953 ;;		_MXK_DIPSwitch
  2954 ;;		_MXK_TestButton
  2955 ;;		_Motor_Move
  2956 ;;		_Motor_Speed
  2957 ;;		_displayText
  2958 ;;		_getMode
  2959 ;;		_printf
  2960 ;; This function is called by:
  2961 ;;		_setMode
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text5
  2966  0107D8                     __ptext5:
  2967                           	opt stack 0
  2968  0107D8                     _continuousMode:
  2969                           	opt stack 10
  2970                           
  2971                           ;main.c: 137: int mode = getMode();
  2972                           
  2973                           ;incstack = 0
  2974  0107D8  ECA7  F09A         	call	_getMode	;wreg free
  2975  0107DC  C0D6  F0E2         	movff	?_getMode,continuousMode@mode
  2976  0107E0  C0D7  F0E3         	movff	?_getMode+1,continuousMode@mode+1
  2977                           
  2978                           ;main.c: 139: int speed = 0;
  2979  0107E4  0E00               	movlw	0
  2980  0107E6  0100               	movlb	0	; () banked
  2981  0107E8  6FE7               	movwf	(continuousMode@speed+1)& (0+255),b
  2982  0107EA  0E00               	movlw	0
  2983  0107EC  6FE6               	movwf	continuousMode@speed& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;main.c: 142: INT16 direction = 0;
  2987  0107EE  0E00               	movlw	0
  2988  0107F0  0100               	movlb	0	; () banked
  2989  0107F2  6FE5               	movwf	(continuousMode@direction+1)& (0+255),b
  2990  0107F4  0E00               	movlw	0
  2991  0107F6  6FE4               	movwf	continuousMode@direction& (0+255),b
  2992                           
  2993                           ;main.c: 145: while (mode == 1) {
  2994  0107F8  D149               	goto	l2037
  2995  0107FA                     
  2996                           ; BSR set to: 0
  2997                           ;main.c: 148: if ((int) HMIBoard.mUp.mGetState() == 1 && (int) HMIBoard.mDown.mGetState(
      +                          ) == 0 & speed <= 9) {
  2998                           
  2999                           ; BSR set to: 0
  3000  0107FA  EE21  F04D         	lfsr	2,_HMIBoard+35
  3001  0107FE  D801               	call	u8208
  3002  010800  D00A               	goto	u8209
  3003  010802                     u8208:
  3004  010802  0005               	push	
  3005  010804  6EFA               	movwf	pclath,c
  3006  010806  50DE               	movf	postinc2,w,c
  3007  010808  6EFD               	movwf	tosl,c
  3008  01080A  50DE               	movf	postinc2,w,c
  3009  01080C  6EFE               	movwf	tosh,c
  3010  01080E  50DE               	movf	postinc2,w,c
  3011  010810  6EFF               	movwf	tosu,c
  3012  010812  50FA               	movf	pclath,w,c
  3013  010814  0012               	return		;indir
  3014  010816                     u8209:
  3015  010816  06E8               	decf	wreg,f,c
  3016  010818  A4D8               	btfss	status,2,c
  3017  01081A  D030               	goto	l2039
  3018  01081C  EE21  F057         	lfsr	2,_HMIBoard+45
  3019  010820  D801               	call	u8228
  3020  010822  D00A               	goto	u8229
  3021  010824                     u8228:
  3022  010824  0005               	push	
  3023  010826  6EFA               	movwf	pclath,c
  3024  010828  50DE               	movf	postinc2,w,c
  3025  01082A  6EFD               	movwf	tosl,c
  3026  01082C  50DE               	movf	postinc2,w,c
  3027  01082E  6EFE               	movwf	tosh,c
  3028  010830  50DE               	movf	postinc2,w,c
  3029  010832  6EFF               	movwf	tosu,c
  3030  010834  50FA               	movf	pclath,w,c
  3031  010836  0012               	return		;indir
  3032  010838                     u8229:
  3033  010838  0900               	iorlw	0
  3034  01083A  A4D8               	btfss	status,2,c
  3035  01083C  D01F               	goto	l2039
  3036  01083E  0100               	movlb	0	; () banked
  3037  010840  BFE7               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3038  010842  D008               	goto	u8240
  3039  010844  0100               	movlb	0	; () banked
  3040  010846  51E7               	movf	(continuousMode@speed+1)& (0+255),w,b
  3041  010848  E119               	bnz	l11942
  3042  01084A  0E0A               	movlw	10
  3043  01084C  0100               	movlb	0	; () banked
  3044  01084E  5DE6               	subwf	continuousMode@speed& (0+255),w,b
  3045  010850  B0D8               	btfsc	status,0,c
  3046  010852  D014               	goto	l2039
  3047  010854                     u8240:
  3048                           
  3049                           ; BSR set to: 0
  3050                           
  3051                           ; BSR set to: 0
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;main.c: 149: while((int) HMIBoard.mUp.mGetState() == 1){}
  3055  010854  EE21  F04D         	lfsr	2,_HMIBoard+35
  3056  010858  D801               	call	u8258
  3057  01085A  D00A               	goto	u8259
  3058  01085C                     u8258:
  3059  01085C  0005               	push	
  3060  01085E  6EFA               	movwf	pclath,c
  3061  010860  50DE               	movf	postinc2,w,c
  3062  010862  6EFD               	movwf	tosl,c
  3063  010864  50DE               	movf	postinc2,w,c
  3064  010866  6EFE               	movwf	tosh,c
  3065  010868  50DE               	movf	postinc2,w,c
  3066  01086A  6EFF               	movwf	tosu,c
  3067  01086C  50FA               	movf	pclath,w,c
  3068  01086E  0012               	return		;indir
  3069  010870                     u8259:
  3070  010870  06E8               	decf	wreg,f,c
  3071  010872  B4D8               	btfsc	status,2,c
  3072  010874  D7EF               	goto	u8240
  3073                           
  3074                           ;main.c: 150: speed++;
  3075  010876  0100               	movlb	0	; () banked
  3076  010878  4BE6               	infsnz	continuousMode@speed& (0+255),f,b
  3077  01087A  2BE7               	incf	(continuousMode@speed+1)& (0+255),f,b
  3078  01087C                     l2039:
  3079  01087C                     l11942:
  3080                           
  3081                           ;main.c: 151: }
  3082                           ;main.c: 153: if ((int) HMIBoard.mDown.mGetState() == 1 && (int) HMIBoard.mUp.mGetState(
      +                          ) == 0 & speed > 0) {
  3083  01087C  EE21  F057         	lfsr	2,_HMIBoard+45
  3084  010880  D801               	call	u8278
  3085  010882  D00A               	goto	u8279
  3086  010884                     u8278:
  3087  010884  0005               	push	
  3088  010886  6EFA               	movwf	pclath,c
  3089  010888  50DE               	movf	postinc2,w,c
  3090  01088A  6EFD               	movwf	tosl,c
  3091  01088C  50DE               	movf	postinc2,w,c
  3092  01088E  6EFE               	movwf	tosh,c
  3093  010890  50DE               	movf	postinc2,w,c
  3094  010892  6EFF               	movwf	tosu,c
  3095  010894  50FA               	movf	pclath,w,c
  3096  010896  0012               	return		;indir
  3097  010898                     u8279:
  3098  010898  06E8               	decf	wreg,f,c
  3099  01089A  A4D8               	btfss	status,2,c
  3100  01089C  D030               	goto	l2043
  3101  01089E  EE21  F04D         	lfsr	2,_HMIBoard+35
  3102  0108A2  D801               	call	u8298
  3103  0108A4  D00A               	goto	u8299
  3104  0108A6                     u8298:
  3105  0108A6  0005               	push	
  3106  0108A8  6EFA               	movwf	pclath,c
  3107  0108AA  50DE               	movf	postinc2,w,c
  3108  0108AC  6EFD               	movwf	tosl,c
  3109  0108AE  50DE               	movf	postinc2,w,c
  3110  0108B0  6EFE               	movwf	tosh,c
  3111  0108B2  50DE               	movf	postinc2,w,c
  3112  0108B4  6EFF               	movwf	tosu,c
  3113  0108B6  50FA               	movf	pclath,w,c
  3114  0108B8  0012               	return		;indir
  3115  0108BA                     u8299:
  3116  0108BA  0900               	iorlw	0
  3117  0108BC  A4D8               	btfss	status,2,c
  3118  0108BE  D01F               	goto	l2043
  3119  0108C0  0100               	movlb	0	; () banked
  3120  0108C2  BFE7               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3121  0108C4  D01C               	goto	l2043
  3122  0108C6  0100               	movlb	0	; () banked
  3123  0108C8  51E7               	movf	(continuousMode@speed+1)& (0+255),w,b
  3124  0108CA  E104               	bnz	l11950
  3125  0108CC  0100               	movlb	0	; () banked
  3126  0108CE  05E6               	decf	continuousMode@speed& (0+255),w,b
  3127  0108D0  A0D8               	btfss	status,0,c
  3128  0108D2  D015               	goto	l2043
  3129  0108D4                     u8310:
  3130  0108D4                     l11950:
  3131  0108D4  EE21  F057         	lfsr	2,_HMIBoard+45
  3132  0108D8  D801               	call	u8328
  3133  0108DA  D00A               	goto	u8329
  3134  0108DC                     u8328:
  3135  0108DC  0005               	push	
  3136  0108DE  6EFA               	movwf	pclath,c
  3137  0108E0  50DE               	movf	postinc2,w,c
  3138  0108E2  6EFD               	movwf	tosl,c
  3139  0108E4  50DE               	movf	postinc2,w,c
  3140  0108E6  6EFE               	movwf	tosh,c
  3141  0108E8  50DE               	movf	postinc2,w,c
  3142  0108EA  6EFF               	movwf	tosu,c
  3143  0108EC  50FA               	movf	pclath,w,c
  3144  0108EE  0012               	return		;indir
  3145  0108F0                     u8329:
  3146  0108F0  06E8               	decf	wreg,f,c
  3147  0108F2  B4D8               	btfsc	status,2,c
  3148  0108F4  D7EF               	goto	u8310
  3149                           
  3150                           ;main.c: 155: speed--;
  3151  0108F6  0100               	movlb	0	; () banked
  3152  0108F8  07E6               	decf	continuousMode@speed& (0+255),f,b
  3153  0108FA  A0D8               	btfss	status,0,c
  3154  0108FC  07E7               	decf	(continuousMode@speed+1)& (0+255),f,b
  3155  0108FE                     l2043:
  3156                           
  3157                           ;main.c: 156: }
  3158                           ;main.c: 158: if ((int) HMIBoard.mLeft.mGetState() == 1 && (int) HMIBoard.mRight.mGetSta
      +                          te() == 0) {
  3159                           
  3160                           ; BSR set to: 0
  3161  0108FE  EE21  F043         	lfsr	2,_HMIBoard+25
  3162  010902  D801               	call	u8348
  3163  010904  D00A               	goto	u8349
  3164  010906                     u8348:
  3165  010906  0005               	push	
  3166  010908  6EFA               	movwf	pclath,c
  3167  01090A  50DE               	movf	postinc2,w,c
  3168  01090C  6EFD               	movwf	tosl,c
  3169  01090E  50DE               	movf	postinc2,w,c
  3170  010910  6EFE               	movwf	tosh,c
  3171  010912  50DE               	movf	postinc2,w,c
  3172  010914  6EFF               	movwf	tosu,c
  3173  010916  50FA               	movf	pclath,w,c
  3174  010918  0012               	return		;indir
  3175  01091A                     u8349:
  3176  01091A  06E8               	decf	wreg,f,c
  3177  01091C  A4D8               	btfss	status,2,c
  3178  01091E  D016               	goto	l2047
  3179  010920  EE21  F039         	lfsr	2,_HMIBoard+15
  3180  010924  D801               	call	u8368
  3181  010926  D00A               	goto	u8369
  3182  010928                     u8368:
  3183  010928  0005               	push	
  3184  01092A  6EFA               	movwf	pclath,c
  3185  01092C  50DE               	movf	postinc2,w,c
  3186  01092E  6EFD               	movwf	tosl,c
  3187  010930  50DE               	movf	postinc2,w,c
  3188  010932  6EFE               	movwf	tosh,c
  3189  010934  50DE               	movf	postinc2,w,c
  3190  010936  6EFF               	movwf	tosu,c
  3191  010938  50FA               	movf	pclath,w,c
  3192  01093A  0012               	return		;indir
  3193  01093C                     u8369:
  3194  01093C  0900               	iorlw	0
  3195  01093E  A4D8               	btfss	status,2,c
  3196  010940  D005               	goto	l2047
  3197                           
  3198                           ;main.c: 159: direction = 1;
  3199  010942  0E00               	movlw	0
  3200  010944  0100               	movlb	0	; () banked
  3201  010946  6FE5               	movwf	(continuousMode@direction+1)& (0+255),b
  3202  010948  0E01               	movlw	1
  3203  01094A  6FE4               	movwf	continuousMode@direction& (0+255),b
  3204  01094C                     l2047:
  3205                           
  3206                           ;main.c: 160: }
  3207                           ;main.c: 162: if ((int) HMIBoard.mRight.mGetState() == 1 && (int) HMIBoard.mLeft.mGetSta
      +                          te() == 0) {
  3208                           
  3209                           ; BSR set to: 0
  3210  01094C  EE21  F039         	lfsr	2,_HMIBoard+15
  3211  010950  D801               	call	u8388
  3212  010952  D00A               	goto	u8389
  3213  010954                     u8388:
  3214  010954  0005               	push	
  3215  010956  6EFA               	movwf	pclath,c
  3216  010958  50DE               	movf	postinc2,w,c
  3217  01095A  6EFD               	movwf	tosl,c
  3218  01095C  50DE               	movf	postinc2,w,c
  3219  01095E  6EFE               	movwf	tosh,c
  3220  010960  50DE               	movf	postinc2,w,c
  3221  010962  6EFF               	movwf	tosu,c
  3222  010964  50FA               	movf	pclath,w,c
  3223  010966  0012               	return		;indir
  3224  010968                     u8389:
  3225  010968  06E8               	decf	wreg,f,c
  3226  01096A  A4D8               	btfss	status,2,c
  3227  01096C  D014               	goto	l2048
  3228  01096E  EE21  F043         	lfsr	2,_HMIBoard+25
  3229  010972  D801               	call	u8408
  3230  010974  D00A               	goto	u8409
  3231  010976                     u8408:
  3232  010976  0005               	push	
  3233  010978  6EFA               	movwf	pclath,c
  3234  01097A  50DE               	movf	postinc2,w,c
  3235  01097C  6EFD               	movwf	tosl,c
  3236  01097E  50DE               	movf	postinc2,w,c
  3237  010980  6EFE               	movwf	tosh,c
  3238  010982  50DE               	movf	postinc2,w,c
  3239  010984  6EFF               	movwf	tosu,c
  3240  010986  50FA               	movf	pclath,w,c
  3241  010988  0012               	return		;indir
  3242  01098A                     u8409:
  3243  01098A  0900               	iorlw	0
  3244  01098C  A4D8               	btfss	status,2,c
  3245  01098E  D003               	goto	l2048
  3246                           
  3247                           ;main.c: 163: direction = -1;
  3248  010990  0100               	movlb	0	; () banked
  3249  010992  69E4               	setf	continuousMode@direction& (0+255),b
  3250  010994  69E5               	setf	(continuousMode@direction+1)& (0+255),b
  3251  010996                     l2048:
  3252                           
  3253                           ;main.c: 164: }
  3254                           ;main.c: 166: displayText();
  3255                           
  3256                           ; BSR set to: 0
  3257  010996  EC73  F0A3         	call	_displayText	;wreg free
  3258                           
  3259                           ;main.c: 167: Console_SetForecolour(0xFFE0);
  3260  01099A  0EFF               	movlw	255
  3261  01099C  0100               	movlb	0	; () banked
  3262  01099E  6FB3               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3263  0109A0  0EE0               	movlw	224
  3264  0109A2  6FB2               	movwf	Console_SetForecolour@pColour& (0+255),b
  3265  0109A4  EC4F  F0A5         	call	_Console_SetForecolour	;wreg free
  3266                           
  3267                           ;main.c: 168: printf("Speed: %d\n", speed);
  3268  0109A8  0EE8               	movlw	low STR_8
  3269  0109AA  0100               	movlb	0	; () banked
  3270  0109AC  6FC7               	movwf	printf@f& (0+255),b
  3271  0109AE  0EFF               	movlw	high STR_8
  3272  0109B0  0100               	movlb	0	; () banked
  3273  0109B2  6FC8               	movwf	(printf@f+1)& (0+255),b
  3274  0109B4  C0E6  F0C9         	movff	continuousMode@speed,?_printf+2
  3275  0109B8  C0E7  F0CA         	movff	continuousMode@speed+1,?_printf+3
  3276  0109BC  EC83  F08C         	call	_printf	;wreg free
  3277                           
  3278                           ;main.c: 169: printf("Direction: %d\n", direction);
  3279  0109C0  0EB2               	movlw	low STR_9
  3280  0109C2  0100               	movlb	0	; () banked
  3281  0109C4  6FC7               	movwf	printf@f& (0+255),b
  3282  0109C6  0EFF               	movlw	high STR_9
  3283  0109C8  0100               	movlb	0	; () banked
  3284  0109CA  6FC8               	movwf	(printf@f+1)& (0+255),b
  3285  0109CC  C0E4  F0C9         	movff	continuousMode@direction,?_printf+2
  3286  0109D0  C0E5  F0CA         	movff	continuousMode@direction+1,?_printf+3
  3287  0109D4  EC83  F08C         	call	_printf	;wreg free
  3288                           
  3289                           ;main.c: 170: Console_Render();
  3290  0109D8  ECCF  F088         	call	_Console_Render	;wreg free
  3291                           
  3292                           ;main.c: 172: if (Stepper.mDelta == 0)
  3293  0109DC  0101               	movlb	1	; () banked
  3294  0109DE  51BD               	movf	_Stepper& (0+255),w,b
  3295  0109E0  0101               	movlb	1	; () banked
  3296  0109E2  11BE               	iorwf	(_Stepper+1)& (0+255),w,b
  3297  0109E4  A4D8               	btfss	status,2,c
  3298  0109E6  D04A               	goto	l2049
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;main.c: 173: {
  3302                           ;main.c: 174: Hz += HzInc;
  3303  0109E8  0E85               	movlw	low _HzInc
  3304  0109EA  6EF6               	movwf	tblptrl,c
  3305  0109EC                     	if	1	;There is more than 1 active tblptr byte
  3306  0109EC  0EFD               	movlw	high _HzInc
  3307  0109EE  6EF7               	movwf	tblptrh,c
  3308  0109F0                     	endif
  3309  0109F0                     	if	1	;There are 3 active tblptr bytes
  3310  0109F0  0E00               	movlw	low (_HzInc shr (0+16))
  3311  0109F2  6EF8               	movwf	tblptru,c
  3312  0109F4                     	endif
  3313  0109F4  0009               	tblrd		*+
  3314  0109F6  CFF5 F0E0          	movff	tablat,??_continuousMode
  3315  0109FA  0009               	tblrd		*+
  3316  0109FC  CFF5 F0E1          	movff	tablat,??_continuousMode+1
  3317  010A00  0100               	movlb	0	; () banked
  3318  010A02  51E0               	movf	??_continuousMode& (0+255),w,b
  3319  010A04  0100               	movlb	0	; () banked
  3320  010A06  27FB               	addwf	_Hz& (0+255),f,b
  3321  010A08  0100               	movlb	0	; () banked
  3322  010A0A  51E1               	movf	(??_continuousMode+1)& (0+255),w,b
  3323  010A0C  0100               	movlb	0	; () banked
  3324  010A0E  23FC               	addwfc	(_Hz+1)& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;main.c: 175: if (Hz >= DIST)
  3328  010A10  0100               	movlb	0	; () banked
  3329  010A12  51F9               	movf	_DIST& (0+255),w,b
  3330  010A14  0100               	movlb	0	; () banked
  3331  010A16  5DFB               	subwf	_Hz& (0+255),w,b
  3332  010A18  0100               	movlb	0	; () banked
  3333  010A1A  51FA               	movf	(_DIST+1)& (0+255),w,b
  3334  010A1C  0100               	movlb	0	; () banked
  3335  010A1E  59FC               	subwfb	(_Hz+1)& (0+255),w,b
  3336  010A20  A0D8               	btfss	status,0,c
  3337  010A22  D00C               	goto	l2050
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 176: Hz = HzInc;
  3341  010A24  0E85               	movlw	low _HzInc
  3342  010A26  6EF6               	movwf	tblptrl,c
  3343  010A28                     	if	1	;There is more than 1 active tblptr byte
  3344  010A28  0EFD               	movlw	high _HzInc
  3345  010A2A  6EF7               	movwf	tblptrh,c
  3346  010A2C                     	endif
  3347  010A2C                     	if	1	;There are 3 active tblptr bytes
  3348  010A2C  0E00               	movlw	low (_HzInc shr (0+16))
  3349  010A2E  6EF8               	movwf	tblptru,c
  3350  010A30                     	endif
  3351  010A30  0009               	tblrd		*+
  3352  010A32  CFF5 F0FB          	movff	tablat,_Hz
  3353  010A36  000A               	tblrd		*-
  3354  010A38  CFF5 F0FC          	movff	tablat,_Hz+1
  3355  010A3C                     l2050:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;main.c: 178: LED_Toggle(eLED1);
  3359                           
  3360                           ; BSR set to: 0
  3361  010A3C  0E00               	movlw	0
  3362  010A3E  EC94  F0A0         	call	_LED_Toggle
  3363                           
  3364                           ;main.c: 179: DIST = -DIST;
  3365  010A42  0100               	movlb	0	; () banked
  3366  010A44  6DF9               	negf	_DIST& (0+255),b
  3367  010A46  1FFA               	comf	(_DIST+1)& (0+255),f,b
  3368  010A48  B0D8               	btfsc	status,0,c
  3369  010A4A  2BFA               	incf	(_DIST+1)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 181: Motor_Speed(&Stepper, Hz);
  3373  010A4C  0EBD               	movlw	low _Stepper
  3374  010A4E  0100               	movlb	0	; () banked
  3375  010A50  6FCD               	movwf	Motor_Speed@pMotor& (0+255),b
  3376  010A52  0E01               	movlw	high _Stepper
  3377  010A54  0100               	movlb	0	; () banked
  3378  010A56  6FCE               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3379  010A58  C0FB  F0CF         	movff	_Hz,Motor_Speed@pFrequency
  3380  010A5C  C0FC  F0D0         	movff	_Hz+1,Motor_Speed@pFrequency+1
  3381  010A60  EC5E  F0A3         	call	_Motor_Speed	;wreg free
  3382                           
  3383                           ;main.c: 182: Motor_Move(&Stepper, DIST);
  3384  010A64  0EBD               	movlw	low _Stepper
  3385  010A66  0100               	movlb	0	; () banked
  3386  010A68  6FB5               	movwf	Motor_Move@pMotor& (0+255),b
  3387  010A6A  0E01               	movlw	high _Stepper
  3388  010A6C  0100               	movlb	0	; () banked
  3389  010A6E  6FB6               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3390  010A70  C0F9  F0B7         	movff	_DIST,Motor_Move@pDelta
  3391  010A74  C0FA  F0B8         	movff	_DIST+1,Motor_Move@pDelta+1
  3392  010A78  EC36  F0A2         	call	_Motor_Move	;wreg free
  3393  010A7C                     l2049:
  3394                           
  3395                           ;main.c: 183: }
  3396                           ;main.c: 185: mode = getMode();
  3397  010A7C  ECA7  F09A         	call	_getMode	;wreg free
  3398  010A80  C0D6  F0E2         	movff	?_getMode,continuousMode@mode
  3399  010A84  C0D7  F0E3         	movff	?_getMode+1,continuousMode@mode+1
  3400                           
  3401                           ;main.c: 186: HMI_Poll();
  3402  010A88  EC94  F09C         	call	_HMI_Poll	;wreg free
  3403  010A8C                     l2037:
  3404  010A8C  0100               	movlb	0	; () banked
  3405  010A8E  05E2               	decf	continuousMode@mode& (0+255),w,b
  3406  010A90  0100               	movlb	0	; () banked
  3407  010A92  11E3               	iorwf	(continuousMode@mode+1)& (0+255),w,b
  3408  010A94  A4D8               	btfss	status,2,c
  3409  010A96  0012               	return	
  3410  010A98  D6B0               	goto	l2038
  3411  010A9A                     __end_of_continuousMode:
  3412                           	opt stack 0
  3413                           tosu	equ	0xFFF
  3414                           tosh	equ	0xFFE
  3415                           tosl	equ	0xFFD
  3416                           pclath	equ	0xFFA
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           postinc0	equ	0xFEE
  3422                           plusw0	equ	0xFEB
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1h	equ	0xFE2
  3426                           fsr1l	equ	0xFE1
  3427                           postinc2	equ	0xFDE
  3428                           plusw2	equ	0xFDB
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function _displayText *****************
  3432 ;; Defined at:
  3433 ;;		line 76 in file "main.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;Total ram usage:        0 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:   18
  3454 ;; This function calls:
  3455 ;;		_Console_Render
  3456 ;;		_displayMode
  3457 ;;		_displaySID
  3458 ;;		_printf
  3459 ;; This function is called by:
  3460 ;;		_continuousMode
  3461 ;;		_nullMode
  3462 ;;		_main
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text6
  3467  0146E6                     __ptext6:
  3468                           	opt stack 0
  3469  0146E6                     _displayText:
  3470                           	opt stack 10
  3471                           
  3472                           ;main.c: 78: printf("%c", (char)35);
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;incstack = 0
  3476  0146E6  0EFB               	movlw	low STR_2
  3477  0146E8  0100               	movlb	0	; () banked
  3478  0146EA  6FC7               	movwf	printf@f& (0+255),b
  3479  0146EC  0EFF               	movlw	high STR_2
  3480  0146EE  0100               	movlb	0	; () banked
  3481  0146F0  6FC8               	movwf	(printf@f+1)& (0+255),b
  3482  0146F2  0E00               	movlw	0
  3483  0146F4  0100               	movlb	0	; () banked
  3484  0146F6  6FCA               	movwf	(?_printf+3)& (0+255),b
  3485  0146F8  0E23               	movlw	35
  3486  0146FA  6FC9               	movwf	(?_printf+2)& (0+255),b
  3487  0146FC  EC83  F08C         	call	_printf	;wreg free
  3488                           
  3489                           ;main.c: 81: displaySID();
  3490  014700  ECF4  F0A3         	call	_displaySID	;wreg free
  3491                           
  3492                           ;main.c: 84: displayMode();
  3493  014704  EC2F  F099         	call	_displayMode	;wreg free
  3494                           
  3495                           ;main.c: 87: Console_Render();
  3496  014708  ECCF  F088         	call	_Console_Render	;wreg free
  3497  01470C  0012               	return		;funcret
  3498  01470E                     __end_of_displayText:
  3499                           	opt stack 0
  3500                           tosu	equ	0xFFF
  3501                           tosh	equ	0xFFE
  3502                           tosl	equ	0xFFD
  3503                           pclath	equ	0xFFA
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           postinc0	equ	0xFEE
  3509                           plusw0	equ	0xFEB
  3510                           wreg	equ	0xFE8
  3511                           postdec1	equ	0xFE5
  3512                           fsr1h	equ	0xFE2
  3513                           fsr1l	equ	0xFE1
  3514                           postinc2	equ	0xFDE
  3515                           plusw2	equ	0xFDB
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _displaySID *****************
  3519 ;; Defined at:
  3520 ;;		line 70 in file "main.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:   13
  3541 ;; This function calls:
  3542 ;;		_Console_SetForecolour
  3543 ;;		_printf
  3544 ;; This function is called by:
  3545 ;;		_displayText
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text7
  3550  0147E8                     __ptext7:
  3551                           	opt stack 0
  3552  0147E8                     _displaySID:
  3553                           	opt stack 14
  3554                           
  3555                           ;main.c: 71: Console_SetForecolour(0x07E0);
  3556                           
  3557                           ;incstack = 0
  3558  0147E8  0E07               	movlw	7
  3559  0147EA  0100               	movlb	0	; () banked
  3560  0147EC  6FB3               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3561  0147EE  0EE0               	movlw	224
  3562  0147F0  6FB2               	movwf	Console_SetForecolour@pColour& (0+255),b
  3563  0147F2  EC4F  F0A5         	call	_Console_SetForecolour	;wreg free
  3564                           
  3565                           ;main.c: 72: printf("Jamin Early 99133391\n");
  3566  0147F6  0E8D               	movlw	low STR_1
  3567  0147F8  0100               	movlb	0	; () banked
  3568  0147FA  6FC7               	movwf	printf@f& (0+255),b
  3569  0147FC  0EFF               	movlw	high STR_1
  3570  0147FE  0100               	movlb	0	; () banked
  3571  014800  6FC8               	movwf	(printf@f+1)& (0+255),b
  3572  014802  EC83  F08C         	call	_printf	;wreg free
  3573  014806  0012               	return		;funcret
  3574  014808                     __end_of_displaySID:
  3575                           	opt stack 0
  3576                           tosu	equ	0xFFF
  3577                           tosh	equ	0xFFE
  3578                           tosl	equ	0xFFD
  3579                           pclath	equ	0xFFA
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           postinc0	equ	0xFEE
  3585                           plusw0	equ	0xFEB
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           postinc2	equ	0xFDE
  3591                           plusw2	equ	0xFDB
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _displayMode *****************
  3595 ;; Defined at:
  3596 ;;		line 115 in file "main.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;		None
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  mode            2   44[BANK0 ] int 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;Total ram usage:        4 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:   17
  3617 ;; This function calls:
  3618 ;;		_Console_SetForecolour
  3619 ;;		_getMode
  3620 ;;		_printf
  3621 ;; This function is called by:
  3622 ;;		_displayText
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text8
  3627  01325E                     __ptext8:
  3628                           	opt stack 0
  3629  01325E                     _displayMode:
  3630                           	opt stack 10
  3631                           
  3632                           ;main.c: 116: Console_SetForecolour(0xF800);
  3633                           
  3634                           ;incstack = 0
  3635  01325E  0EF8               	movlw	248
  3636  013260  0100               	movlb	0	; () banked
  3637  013262  6FB3               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3638  013264  0E00               	movlw	0
  3639  013266  6FB2               	movwf	Console_SetForecolour@pColour& (0+255),b
  3640  013268  EC4F  F0A5         	call	_Console_SetForecolour	;wreg free
  3641                           
  3642                           ;main.c: 117: int mode = getMode();
  3643  01326C  ECA7  F09A         	call	_getMode	;wreg free
  3644  013270  C0D6  F0DE         	movff	?_getMode,displayMode@mode
  3645  013274  C0D7  F0DF         	movff	?_getMode+1,displayMode@mode+1
  3646                           
  3647                           ;main.c: 118: printf("Current Mode:\n");
  3648  013278  0EA3               	movlw	low STR_3
  3649  01327A  0100               	movlb	0	; () banked
  3650  01327C  6FC7               	movwf	printf@f& (0+255),b
  3651  01327E  0EFF               	movlw	high STR_3
  3652  013280  0100               	movlb	0	; () banked
  3653  013282  6FC8               	movwf	(printf@f+1)& (0+255),b
  3654  013284  EC83  F08C         	call	_printf	;wreg free
  3655                           
  3656                           ;main.c: 119: switch (mode) {
  3657  013288  D024               	goto	l2028
  3658  01328A                     
  3659                           ;main.c: 121: printf(" Position\n\n");
  3660  01328A  0EDC               	movlw	low STR_4
  3661  01328C  0100               	movlb	0	; () banked
  3662  01328E  6FC7               	movwf	printf@f& (0+255),b
  3663  013290  0EFF               	movlw	high STR_4
  3664  013292  0100               	movlb	0	; () banked
  3665  013294  6FC8               	movwf	(printf@f+1)& (0+255),b
  3666  013296  EC83  F08C         	call	_printf	;wreg free
  3667                           
  3668                           ;main.c: 122: break;
  3669  01329A  0012               	return	
  3670  01329C                     
  3671                           ;main.c: 124: printf(" Step\n\n");
  3672  01329C  0EF3               	movlw	low STR_5
  3673  01329E  0100               	movlb	0	; () banked
  3674  0132A0  6FC7               	movwf	printf@f& (0+255),b
  3675  0132A2  0EFF               	movlw	high STR_5
  3676  0132A4  0100               	movlb	0	; () banked
  3677  0132A6  6FC8               	movwf	(printf@f+1)& (0+255),b
  3678  0132A8  EC83  F08C         	call	_printf	;wreg free
  3679                           
  3680                           ;main.c: 125: break;
  3681  0132AC  0012               	return	
  3682  0132AE                     
  3683                           ;main.c: 127: printf(" Continuous\n\n");
  3684  0132AE  0EC1               	movlw	low STR_6
  3685  0132B0  0100               	movlb	0	; () banked
  3686  0132B2  6FC7               	movwf	printf@f& (0+255),b
  3687  0132B4  0EFF               	movlw	high STR_6
  3688  0132B6  0100               	movlb	0	; () banked
  3689  0132B8  6FC8               	movwf	(printf@f+1)& (0+255),b
  3690  0132BA  EC83  F08C         	call	_printf	;wreg free
  3691                           
  3692                           ;main.c: 128: break;
  3693  0132BE  0012               	return	
  3694  0132C0                     
  3695                           ;main.c: 130: printf(" Undefined\n\n");
  3696  0132C0  0ECF               	movlw	low STR_7
  3697  0132C2  0100               	movlb	0	; () banked
  3698  0132C4  6FC7               	movwf	printf@f& (0+255),b
  3699  0132C6  0EFF               	movlw	high STR_7
  3700  0132C8  0100               	movlb	0	; () banked
  3701  0132CA  6FC8               	movwf	(printf@f+1)& (0+255),b
  3702  0132CC  EC83  F08C         	call	_printf	;wreg free
  3703                           
  3704                           ;main.c: 132: }
  3705                           
  3706                           ;main.c: 131: break;
  3707  0132D0  0012               	return	
  3708  0132D2                     l2028:
  3709  0132D2  C0DE  F0DC         	movff	displayMode@mode,??_displayMode
  3710  0132D6  C0DF  F0DD         	movff	displayMode@mode+1,??_displayMode+1
  3711                           
  3712                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3713                           ; Switch size 1, requested type "space"
  3714                           ; Number of cases is 1, Range of values is 0 to 0
  3715                           ; switch strategies available:
  3716                           ; Name         Instructions Cycles
  3717                           ; simple_byte            4     3 (average)
  3718                           ;	Chosen strategy is simple_byte
  3719  0132DA  0100               	movlb	0	; () banked
  3720  0132DC  51DD               	movf	(??_displayMode+1)& (0+255),w,b
  3721  0132DE  0A00               	xorlw	0	; case 0
  3722  0132E0  A4D8               	btfss	status,2,c
  3723  0132E2  D7EE               	goto	l2033
  3724                           
  3725                           ; BSR set to: 0
  3726                           ; Switch size 1, requested type "space"
  3727                           ; Number of cases is 3, Range of values is 1 to 3
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte           10     6 (average)
  3731                           ;	Chosen strategy is simple_byte
  3732  0132E4  0100               	movlb	0	; () banked
  3733  0132E6  51DC               	movf	??_displayMode& (0+255),w,b
  3734  0132E8  0A01               	xorlw	1	; case 1
  3735  0132EA  B4D8               	btfsc	status,2,c
  3736  0132EC  D7E0               	goto	l2032
  3737  0132EE  0A03               	xorlw	3	; case 2
  3738  0132F0  B4D8               	btfsc	status,2,c
  3739  0132F2  D7D4               	goto	l2031
  3740  0132F4  0A01               	xorlw	1	; case 3
  3741  0132F6  B4D8               	btfsc	status,2,c
  3742  0132F8  D7C8               	goto	l2029
  3743  0132FA  D7E2               	goto	l2033
  3744  0132FC                     __end_of_displayMode:
  3745                           	opt stack 0
  3746                           tosu	equ	0xFFF
  3747                           tosh	equ	0xFFE
  3748                           tosl	equ	0xFFD
  3749                           pclath	equ	0xFFA
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           postinc0	equ	0xFEE
  3755                           plusw0	equ	0xFEB
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1h	equ	0xFE2
  3759                           fsr1l	equ	0xFE1
  3760                           postinc2	equ	0xFDE
  3761                           plusw2	equ	0xFDB
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function _printf *****************
  3765 ;; Defined at:
  3766 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3769 ;;		 -> STR_12(24), STR_11(24), STR_10(24), STR_9(15), 
  3770 ;;		 -> STR_8(11), STR_7(13), STR_6(14), STR_5(8), 
  3771 ;;		 -> STR_4(12), STR_3(15), STR_2(3), STR_1(22), 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  tmpval          4    0        struct .
  3774 ;;  cp              3    0        PTR const unsigned char 
  3775 ;;  val             2   30[BANK0 ] unsigned int 
  3776 ;;  ap              2   28[BANK0 ] PTR void [1]
  3777 ;;		 -> ?_printf(2), 
  3778 ;;  len             2    0        unsigned int 
  3779 ;;  c               1   32[BANK0 ] char 
  3780 ;;  prec            1   27[BANK0 ] char 
  3781 ;;  flag            1   26[BANK0 ] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  2   21[BANK0 ] int 
  3784 ;; Registers used:
  3785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;Total ram usage:       12 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:   12
  3798 ;; This function calls:
  3799 ;;		___lwdiv
  3800 ;;		___lwmod
  3801 ;;		_putch
  3802 ;; This function is called by:
  3803 ;;		_displaySID
  3804 ;;		_displayText
  3805 ;;		_displayMode
  3806 ;;		_continuousMode
  3807 ;;		_nullMode
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text9
  3812  011906                     __ptext9:
  3813                           	opt stack 0
  3814  011906                     _printf:
  3815                           	opt stack 16
  3816                           
  3817                           ;doprnt.c: 466: va_list ap;
  3818                           ;doprnt.c: 499: signed char c;
  3819                           ;doprnt.c: 506: signed char prec;
  3820                           ;doprnt.c: 508: unsigned char flag;
  3821                           ;doprnt.c: 523: union {
  3822                           ;doprnt.c: 524: unsigned long vd;
  3823                           ;doprnt.c: 525: double integ;
  3824                           ;doprnt.c: 526: } tmpval;
  3825                           ;doprnt.c: 528: unsigned int val;
  3826                           ;doprnt.c: 529: unsigned len;
  3827                           ;doprnt.c: 530: const char * cp;
  3828                           ;doprnt.c: 533: *ap = __va_start();
  3829                           
  3830                           ;incstack = 0
  3831  011906  0EC9               	movlw	low (?_printf+2)
  3832  011908  0100               	movlb	0	; () banked
  3833  01190A  6FCE               	movwf	printf@ap& (0+255),b
  3834  01190C  0E00               	movlw	high (?_printf+2)
  3835  01190E  0100               	movlb	0	; () banked
  3836  011910  6FCF               	movwf	(printf@ap+1)& (0+255),b
  3837                           
  3838                           ;doprnt.c: 536: while(c = *f++) {
  3839  011912  D0B1               	goto	u7570
  3840  011914                     
  3841                           ; BSR set to: 0
  3842                           ;doprnt.c: 538: if(c != '%')
  3843                           
  3844                           ; BSR set to: 0
  3845  011914  0E25               	movlw	37
  3846  011916  0100               	movlb	0	; () banked
  3847  011918  19D2               	xorwf	printf@c& (0+255),w,b
  3848  01191A  B4D8               	btfsc	status,2,c
  3849  01191C  D005               	goto	l2092
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;doprnt.c: 540: {
  3853                           ;doprnt.c: 541: (putch(c) );
  3854  01191E  0100               	movlb	0	; () banked
  3855  011920  51D2               	movf	printf@c& (0+255),w,b
  3856  011922  EC11  F0A5         	call	_putch
  3857                           
  3858                           ;doprnt.c: 542: continue;
  3859  011926  D0A7               	goto	u7570
  3860  011928                     l2092:
  3861                           
  3862                           ;doprnt.c: 543: }
  3863                           ;doprnt.c: 548: flag = 0;
  3864  011928  0E00               	movlw	0
  3865  01192A  0100               	movlb	0	; () banked
  3866  01192C  6FCC               	movwf	printf@flag& (0+255),b
  3867                           
  3868                           ;doprnt.c: 635: switch(c = *f++) {
  3869  01192E  D011               	goto	l2093
  3870  011930                     
  3871                           ; BSR set to: 0
  3872                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3873                           
  3874                           ; BSR set to: 0
  3875  011930  C0CE  FFD9         	movff	printf@ap,fsr2l
  3876  011934  C0CF  FFDA         	movff	printf@ap+1,fsr2h
  3877  011938  50DF               	movf	indf2,w,c
  3878  01193A  0100               	movlb	0	; () banked
  3879  01193C  6FD2               	movwf	printf@c& (0+255),b
  3880                           
  3881                           ; BSR set to: 0
  3882  01193E  0E02               	movlw	2
  3883  011940  0100               	movlb	0	; () banked
  3884  011942  27CE               	addwf	printf@ap& (0+255),f,b
  3885  011944  0E00               	movlw	0
  3886  011946  23CF               	addwfc	(printf@ap+1)& (0+255),f,b
  3887  011948                     
  3888                           ; BSR set to: 0
  3889                           ;doprnt.c: 809: (putch(c) );
  3890                           
  3891                           ; BSR set to: 0
  3892  011948  0100               	movlb	0	; () banked
  3893  01194A  51D2               	movf	printf@c& (0+255),w,b
  3894  01194C  EC11  F0A5         	call	_putch
  3895                           
  3896                           ;doprnt.c: 810: continue;
  3897  011950  D092               	goto	u7570
  3898  011952                     l2093:
  3899  011952  C0C7  FFF6         	movff	printf@f,tblptrl
  3900  011956  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3901  01195A  0100               	movlb	0	; () banked
  3902  01195C  4BC7               	infsnz	printf@f& (0+255),f,b
  3903  01195E  2BC8               	incf	(printf@f+1)& (0+255),f,b
  3904  011960                     	if	0	;tblptru may be non-zero
  3905  011960                     	endif
  3906  011960                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3907  011960  0E00               	movlw	low (__mediumconst shr (0+16))
  3908  011962  6EF8               	movwf	tblptru,c
  3909  011964                     	endif
  3910  011964  0008               	tblrd		*
  3911  011966  CFF5 F0D2          	movff	tablat,printf@c
  3912  01196A  0100               	movlb	0	; () banked
  3913  01196C  51D2               	movf	printf@c& (0+255),w,b
  3914                           
  3915                           ; Switch size 1, requested type "space"
  3916                           ; Number of cases is 4, Range of values is 0 to 105
  3917                           ; switch strategies available:
  3918                           ; Name         Instructions Cycles
  3919                           ; simple_byte           13     7 (average)
  3920                           ;	Chosen strategy is simple_byte
  3921  01196E  0A00               	xorlw	0	; case 0
  3922  011970  B4D8               	btfsc	status,2,c
  3923  011972  0012               	return	
  3924  011974  0A63               	xorlw	99	; case 99
  3925  011976  B4D8               	btfsc	status,2,c
  3926  011978  D7DB               	goto	l2099
  3927  01197A  0A07               	xorlw	7	; case 100
  3928  01197C  B4D8               	btfsc	status,2,c
  3929  01197E  D003               	goto	l2098
  3930  011980  0A0D               	xorlw	13	; case 105
  3931  011982  A4D8               	btfss	status,2,c
  3932  011984  D7E1               	goto	l2100
  3933  011986                     l2098:
  3934                           
  3935                           ;doprnt.c: 1253: {
  3936                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3937                           
  3938                           ; BSR set to: 0
  3939  011986  C0CE  FFD9         	movff	printf@ap,fsr2l
  3940  01198A  C0CF  FFDA         	movff	printf@ap+1,fsr2h
  3941  01198E  CFDE F0D0          	movff	postinc2,printf@val
  3942  011992  CFDD F0D1          	movff	postdec2,printf@val+1
  3943  011996  0E02               	movlw	2
  3944  011998  0100               	movlb	0	; () banked
  3945  01199A  27CE               	addwf	printf@ap& (0+255),f,b
  3946  01199C  0E00               	movlw	0
  3947  01199E  23CF               	addwfc	(printf@ap+1)& (0+255),f,b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;doprnt.c: 1261: if((int)val < 0) {
  3951  0119A0  0100               	movlb	0	; () banked
  3952  0119A2  AFD1               	btfss	(printf@val+1)& (0+255),7,b
  3953  0119A4  D008               	goto	l2101
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;doprnt.c: 1262: flag |= 0x03;
  3957  0119A6  0E03               	movlw	3
  3958  0119A8  0100               	movlb	0	; () banked
  3959  0119AA  13CC               	iorwf	printf@flag& (0+255),f,b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;doprnt.c: 1263: val = -val;
  3963  0119AC  0100               	movlb	0	; () banked
  3964  0119AE  6DD0               	negf	printf@val& (0+255),b
  3965  0119B0  1FD1               	comf	(printf@val+1)& (0+255),f,b
  3966  0119B2  B0D8               	btfsc	status,0,c
  3967  0119B4  2BD1               	incf	(printf@val+1)& (0+255),f,b
  3968  0119B6                     l2101:
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;doprnt.c: 1264: }
  3972                           ;doprnt.c: 1266: }
  3973                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3974                           
  3975                           ; BSR set to: 0
  3976  0119B6  0E01               	movlw	1
  3977  0119B8  0100               	movlb	0	; () banked
  3978  0119BA  6FD2               	movwf	printf@c& (0+255),b
  3979  0119BC                     l11080:
  3980                           
  3981                           ; BSR set to: 0
  3982  0119BC  0E05               	movlw	5
  3983  0119BE  0100               	movlb	0	; () banked
  3984  0119C0  19D2               	xorwf	printf@c& (0+255),w,b
  3985  0119C2  B4D8               	btfsc	status,2,c
  3986  0119C4  D019               	goto	u7550
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;doprnt.c: 1306: if(val < dpowers[c])
  3990                           
  3991                           ; BSR set to: 0
  3992                           
  3993                           ; BSR set to: 0
  3994  0119C6  0100               	movlb	0	; () banked
  3995  0119C8  51D2               	movf	printf@c& (0+255),w,b
  3996  0119CA  0D02               	mullw	2
  3997  0119CC  0E6B               	movlw	low _dpowers
  3998  0119CE  24F3               	addwf	prodl,w,c
  3999  0119D0  6EF6               	movwf	tblptrl,c
  4000  0119D2  0EFD               	movlw	high _dpowers
  4001  0119D4  20F4               	addwfc	prodh,w,c
  4002  0119D6  6EF7               	movwf	tblptrh,c
  4003  0119D8                     	if	1	;There are 3 active tblptr bytes
  4004  0119D8  6AF8               	clrf	tblptru,c
  4005  0119DA  0E00               	movlw	low (__mediumconst shr (0+16))
  4006  0119DC  22F8               	addwfc	tblptru,f,c
  4007  0119DE                     	endif
  4008  0119DE  0009               	tblrd		*+
  4009  0119E0  50F5               	movf	tablat,w,c
  4010  0119E2  0100               	movlb	0	; () banked
  4011  0119E4  5DD0               	subwf	printf@val& (0+255),w,b
  4012  0119E6  0009               	tblrd		*+
  4013  0119E8  50F5               	movf	tablat,w,c
  4014  0119EA  0100               	movlb	0	; () banked
  4015  0119EC  59D1               	subwfb	(printf@val+1)& (0+255),w,b
  4016  0119EE  A0D8               	btfss	status,0,c
  4017  0119F0  D003               	goto	u7550
  4018                           
  4019                           ; BSR set to: 0
  4020                           
  4021                           ; BSR set to: 0
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;doprnt.c: 1307: break;
  4025  0119F2  0100               	movlb	0	; () banked
  4026  0119F4  2BD2               	incf	printf@c& (0+255),f,b
  4027  0119F6  D7E2               	goto	l11080
  4028  0119F8                     u7550:
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;doprnt.c: 1422: {
  4032                           ;doprnt.c: 1438: if(flag & 0x03)
  4033                           
  4034                           ; BSR set to: 0
  4035  0119F8  C0CC  F0CB         	movff	printf@flag,??_printf
  4036  0119FC  0E03               	movlw	3
  4037  0119FE  0100               	movlb	0	; () banked
  4038  011A00  17CB               	andwf	??_printf& (0+255),f,b
  4039  011A02  B4D8               	btfsc	status,2,c
  4040  011A04  D003               	goto	l2105
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;doprnt.c: 1439: (putch('-') );
  4044  011A06  0E2D               	movlw	45
  4045  011A08  EC11  F0A5         	call	_putch
  4046  011A0C                     l2105:
  4047                           
  4048                           ;doprnt.c: 1469: }
  4049                           ;doprnt.c: 1472: prec = c;
  4050  011A0C  C0D2  F0CD         	movff	printf@c,printf@prec
  4051                           
  4052                           ;doprnt.c: 1474: while(prec--) {
  4053  011A10  D02C               	goto	l2106
  4054  011A12                     
  4055                           ;doprnt.c: 1478: {
  4056                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4057  011A12  0100               	movlb	0	; () banked
  4058  011A14  51CD               	movf	printf@prec& (0+255),w,b
  4059  011A16  0D02               	mullw	2
  4060  011A18  0E6B               	movlw	low _dpowers
  4061  011A1A  24F3               	addwf	prodl,w,c
  4062  011A1C  6EF6               	movwf	tblptrl,c
  4063  011A1E  0EFD               	movlw	high _dpowers
  4064  011A20  20F4               	addwfc	prodh,w,c
  4065  011A22  6EF7               	movwf	tblptrh,c
  4066  011A24                     	if	1	;There are 3 active tblptr bytes
  4067  011A24  6AF8               	clrf	tblptru,c
  4068  011A26  0E00               	movlw	low (__mediumconst shr (0+16))
  4069  011A28  22F8               	addwfc	tblptru,f,c
  4070  011A2A                     	endif
  4071  011A2A  0009               	tblrd		*+
  4072  011A2C  CFF5 F0B4          	movff	tablat,___lwdiv@divisor
  4073  011A30  000A               	tblrd		*-
  4074  011A32  CFF5 F0B5          	movff	tablat,___lwdiv@divisor+1
  4075  011A36  C0D0  F0B2         	movff	printf@val,___lwdiv@dividend
  4076  011A3A  C0D1  F0B3         	movff	printf@val+1,___lwdiv@dividend+1
  4077  011A3E  EC6F  F09B         	call	___lwdiv	;wreg free
  4078  011A42  C0B2  F0B9         	movff	?___lwdiv,___lwmod@dividend
  4079  011A46  C0B3  F0BA         	movff	?___lwdiv+1,___lwmod@dividend+1
  4080  011A4A  0E00               	movlw	0
  4081  011A4C  0100               	movlb	0	; () banked
  4082  011A4E  6FBC               	movwf	(___lwmod@divisor+1)& (0+255),b
  4083  011A50  0E0A               	movlw	10
  4084  011A52  6FBB               	movwf	___lwmod@divisor& (0+255),b
  4085  011A54  EC40  F09E         	call	___lwmod	;wreg free
  4086  011A58  0100               	movlb	0	; () banked
  4087  011A5A  51B9               	movf	?___lwmod& (0+255),w,b
  4088  011A5C  0F30               	addlw	48
  4089  011A5E  0100               	movlb	0	; () banked
  4090  011A60  6FD2               	movwf	printf@c& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;doprnt.c: 1523: }
  4094                           ;doprnt.c: 1524: (putch(c) );
  4095  011A62  0100               	movlb	0	; () banked
  4096  011A64  51D2               	movf	printf@c& (0+255),w,b
  4097  011A66  EC11  F0A5         	call	_putch
  4098  011A6A                     l2106:
  4099  011A6A  0100               	movlb	0	; () banked
  4100  011A6C  07CD               	decf	printf@prec& (0+255),f,b
  4101  011A6E  0100               	movlb	0	; () banked
  4102  011A70  29CD               	incf	printf@prec& (0+255),w,b
  4103  011A72  A4D8               	btfss	status,2,c
  4104  011A74  D7CE               	goto	l2107
  4105  011A76                     u7570:
  4106                           
  4107                           ; BSR set to: 0
  4108                           
  4109                           ; BSR set to: 0
  4110  011A76  C0C7  FFF6         	movff	printf@f,tblptrl
  4111  011A7A  C0C8  FFF7         	movff	printf@f+1,tblptrh
  4112  011A7E  0100               	movlb	0	; () banked
  4113  011A80  4BC7               	infsnz	printf@f& (0+255),f,b
  4114  011A82  2BC8               	incf	(printf@f+1)& (0+255),f,b
  4115  011A84                     	if	0	;tblptru may be non-zero
  4116  011A84                     	endif
  4117  011A84                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4118  011A84  0E00               	movlw	low (__mediumconst shr (0+16))
  4119  011A86  6EF8               	movwf	tblptru,c
  4120  011A88                     	endif
  4121  011A88  0008               	tblrd		*
  4122  011A8A  CFF5 F0D2          	movff	tablat,printf@c
  4123  011A8E  0100               	movlb	0	; () banked
  4124  011A90  51D2               	movf	printf@c& (0+255),w,b
  4125  011A92  B4D8               	btfsc	status,2,c
  4126  011A94  0012               	return	
  4127  011A96  D73E               	goto	l2091
  4128  011A98                     __end_of_printf:
  4129                           	opt stack 0
  4130                           tosu	equ	0xFFF
  4131                           tosh	equ	0xFFE
  4132                           tosl	equ	0xFFD
  4133                           pclath	equ	0xFFA
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           plusw0	equ	0xFEB
  4142                           wreg	equ	0xFE8
  4143                           postdec1	equ	0xFE5
  4144                           fsr1h	equ	0xFE2
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           plusw2	equ	0xFDB
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function _putch *****************
  4155 ;; Defined at:
  4156 ;;		line 454 in file "Library/Console.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  c               1    wreg     unsigned char 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  c               1   20[BANK0 ] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;Total ram usage:        1 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:   11
  4177 ;; This function calls:
  4178 ;;		_Console_PrintChar
  4179 ;; This function is called by:
  4180 ;;		_printf
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text10
  4185  014A22                     __ptext10:
  4186                           	opt stack 0
  4187  014A22                     _putch:
  4188                           	opt stack 16
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;incstack = 0
  4192                           ;putch@c stored from wreg
  4193  014A22  0100               	movlb	0	; () banked
  4194  014A24  6FC6               	movwf	putch@c& (0+255),b
  4195                           
  4196                           ;Console.c: 456: Console_PrintChar(c);
  4197  014A26  0100               	movlb	0	; () banked
  4198  014A28  51C6               	movf	putch@c& (0+255),w,b
  4199  014A2A  ECB4  F08B         	call	_Console_PrintChar
  4200  014A2E  0012               	return		;funcret
  4201  014A30                     __end_of_putch:
  4202                           	opt stack 0
  4203                           tosu	equ	0xFFF
  4204                           tosh	equ	0xFFE
  4205                           tosl	equ	0xFFD
  4206                           pclath	equ	0xFFA
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           postinc0	equ	0xFEE
  4214                           plusw0	equ	0xFEB
  4215                           wreg	equ	0xFE8
  4216                           postdec1	equ	0xFE5
  4217                           fsr1h	equ	0xFE2
  4218                           fsr1l	equ	0xFE1
  4219                           indf2	equ	0xFDF
  4220                           postinc2	equ	0xFDE
  4221                           postdec2	equ	0xFDD
  4222                           plusw2	equ	0xFDB
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _Console_PrintChar *****************
  4228 ;; Defined at:
  4229 ;;		line 322 in file "Library/Console.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  pInput          1    wreg     unsigned char 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  pInput          1   19[BANK0 ] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        4 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:   10
  4250 ;; This function calls:
  4251 ;;		_Console_Backspace
  4252 ;;		_Console_FormFeed
  4253 ;;		_Console_IncrementCursor
  4254 ;;		_Console_NewLine
  4255 ;;		_Console_ResetCursor
  4256 ;;		_Console_Tab
  4257 ;; This function is called by:
  4258 ;;		_putch
  4259 ;;		_Console_PrintString
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text11
  4264  011768                     __ptext11:
  4265                           	opt stack 0
  4266  011768                     _Console_PrintChar:
  4267                           	opt stack 16
  4268                           
  4269                           ;incstack = 0
  4270                           ;Console_PrintChar@pInput stored from wreg
  4271  011768  0100               	movlb	0	; () banked
  4272  01176A  6FC5               	movwf	Console_PrintChar@pInput& (0+255),b
  4273                           
  4274                           ;Console.c: 324: switch(pInput)
  4275  01176C  D0B1               	goto	l1036
  4276  01176E                     
  4277                           ;Console.c: 327: case '\n':
  4278                           ;Console.c: 328: Console_NewLine();
  4279  01176E  ECDE  F098         	call	_Console_NewLine	;wreg free
  4280                           
  4281                           ;Console.c: 329: return;
  4282  011772  0012               	return	
  4283  011774                     
  4284                           ;Console.c: 331: Console_Backspace();
  4285  011774  ECD1  F09E         	call	_Console_Backspace	;wreg free
  4286                           
  4287                           ;Console.c: 332: return;
  4288  011778  0012               	return	
  4289  01177A                     
  4290                           ;Console.c: 334: Console_FormFeed();
  4291  01177A  EC60  F09A         	call	_Console_FormFeed	;wreg free
  4292                           
  4293                           ;Console.c: 335: return;
  4294  01177E  0012               	return	
  4295  011780                     
  4296                           ;Console.c: 337: Console_Tab();
  4297  011780  ECBC  F094         	call	_Console_Tab	;wreg free
  4298                           
  4299                           ;Console.c: 338: return;
  4300  011784  0012               	return	
  4301  011786                     
  4302                           ;Console.c: 340: Console_IncrementCursor();
  4303  011786  ECDB  F09D         	call	_Console_IncrementCursor	;wreg free
  4304                           
  4305                           ;Console.c: 341: return;
  4306  01178A  0012               	return	
  4307  01178C                     
  4308                           ;Console.c: 343: Console_ResetCursor();
  4309  01178C  EC04  F0A4         	call	_Console_ResetCursor	;wreg free
  4310                           
  4311                           ;Console.c: 344: return;
  4312  011790  0012               	return	
  4313  011792                     
  4314                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4315                           
  4316                           ;Console.c: 349: default:
  4317  011792  C0C5  F0C2         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4318  011796  0E7F               	movlw	127
  4319  011798  0100               	movlb	0	; () banked
  4320  01179A  17C2               	andwf	??_Console_PrintChar& (0+255),f,b
  4321  01179C  0100               	movlb	0	; () banked
  4322  01179E  517A               	movf	_lBufferY& (0+255),w,b
  4323  0117A0  0D14               	mullw	20
  4324  0117A2  0E46               	movlw	low _lBuffer
  4325  0117A4  0100               	movlb	0	; () banked
  4326  0117A6  6FC3               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4327  0117A8  0E02               	movlw	high _lBuffer
  4328  0117AA  0100               	movlb	0	; () banked
  4329  0117AC  6FC4               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4330  0117AE  50F3               	movf	prodl,w,c
  4331  0117B0  0100               	movlb	0	; () banked
  4332  0117B2  27C3               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4333  0117B4  50F4               	movf	prodh,w,c
  4334  0117B6  0100               	movlb	0	; () banked
  4335  0117B8  23C4               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4336  0117BA  0100               	movlb	0	; () banked
  4337  0117BC  517B               	movf	_lBufferX& (0+255),w,b
  4338  0117BE  0D01               	mullw	1
  4339  0117C0  50F3               	movf	prodl,w,c
  4340  0117C2  0100               	movlb	0	; () banked
  4341  0117C4  25C3               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4342  0117C6  6ED9               	movwf	fsr2l,c
  4343  0117C8  50F4               	movf	prodh,w,c
  4344  0117CA  0100               	movlb	0	; () banked
  4345  0117CC  21C4               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4346  0117CE  6EDA               	movwf	fsr2h,c
  4347  0117D0  50DF               	movf	indf2,w,c
  4348  0117D2  0B7F               	andlw	127
  4349  0117D4  0100               	movlb	0	; () banked
  4350  0117D6  19C2               	xorwf	??_Console_PrintChar& (0+255),w,b
  4351  0117D8  B4D8               	btfsc	status,2,c
  4352  0117DA  D02E               	goto	l1047
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;Console.c: 351: {
  4356                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4357  0117DC  0E01               	movlw	1
  4358  0117DE  0100               	movlb	0	; () banked
  4359  0117E0  6FFF               	movwf	_change& (0+255),b
  4360                           
  4361                           ; BSR set to: 0
  4362  0117E2  0100               	movlb	0	; () banked
  4363  0117E4  517A               	movf	_lBufferY& (0+255),w,b
  4364  0117E6  0D14               	mullw	20
  4365  0117E8  0E46               	movlw	low _lBuffer
  4366  0117EA  0100               	movlb	0	; () banked
  4367  0117EC  6FC2               	movwf	??_Console_PrintChar& (0+255),b
  4368  0117EE  0E02               	movlw	high _lBuffer
  4369  0117F0  0100               	movlb	0	; () banked
  4370  0117F2  6FC3               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4371  0117F4  50F3               	movf	prodl,w,c
  4372  0117F6  0100               	movlb	0	; () banked
  4373  0117F8  27C2               	addwf	??_Console_PrintChar& (0+255),f,b
  4374  0117FA  50F4               	movf	prodh,w,c
  4375  0117FC  0100               	movlb	0	; () banked
  4376  0117FE  23C3               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4377  011800  0100               	movlb	0	; () banked
  4378  011802  517B               	movf	_lBufferX& (0+255),w,b
  4379  011804  0D01               	mullw	1
  4380  011806  50F3               	movf	prodl,w,c
  4381  011808  0100               	movlb	0	; () banked
  4382  01180A  25C2               	addwf	??_Console_PrintChar& (0+255),w,b
  4383  01180C  6ED9               	movwf	fsr2l,c
  4384  01180E  50F4               	movf	prodh,w,c
  4385  011810  0100               	movlb	0	; () banked
  4386  011812  21C3               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4387  011814  6EDA               	movwf	fsr2h,c
  4388  011816  0100               	movlb	0	; () banked
  4389  011818  51C5               	movf	Console_PrintChar@pInput& (0+255),w,b
  4390  01181A  0980               	iorlw	128
  4391  01181C  6EDF               	movwf	indf2,c
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4395  01181E  0100               	movlb	0	; () banked
  4396  011820  517A               	movf	_lBufferY& (0+255),w,b
  4397  011822  0D02               	mullw	2
  4398  011824  0E00               	movlw	low _lCBuffer
  4399  011826  24F3               	addwf	prodl,w,c
  4400  011828  6ED9               	movwf	fsr2l,c
  4401  01182A  0E01               	movlw	high _lCBuffer
  4402  01182C  20F4               	addwfc	prodh,w,c
  4403  01182E  6EDA               	movwf	fsr2h,c
  4404  011830  C0FD  FFDE         	movff	_gForecolour,postinc2
  4405  011834  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4406  011838                     l1047:
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;Console.c: 354: }
  4410                           ;Console.c: 368: if(Console_IncrementCursor())
  4411                           
  4412                           ; BSR set to: 0
  4413  011838  ECDB  F09D         	call	_Console_IncrementCursor	;wreg free
  4414  01183C  0900               	iorlw	0
  4415  01183E  B4D8               	btfsc	status,2,c
  4416  011840  0012               	return	
  4417                           
  4418                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4419  011842  C0C5  F0C2         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4420  011846  0E7F               	movlw	127
  4421  011848  0100               	movlb	0	; () banked
  4422  01184A  17C2               	andwf	??_Console_PrintChar& (0+255),f,b
  4423  01184C  0100               	movlb	0	; () banked
  4424  01184E  517A               	movf	_lBufferY& (0+255),w,b
  4425  011850  0D14               	mullw	20
  4426  011852  0E46               	movlw	low _lBuffer
  4427  011854  0100               	movlb	0	; () banked
  4428  011856  6FC3               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4429  011858  0E02               	movlw	high _lBuffer
  4430  01185A  0100               	movlb	0	; () banked
  4431  01185C  6FC4               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4432  01185E  50F3               	movf	prodl,w,c
  4433  011860  0100               	movlb	0	; () banked
  4434  011862  27C3               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4435  011864  50F4               	movf	prodh,w,c
  4436  011866  0100               	movlb	0	; () banked
  4437  011868  23C4               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4438  01186A  0100               	movlb	0	; () banked
  4439  01186C  517B               	movf	_lBufferX& (0+255),w,b
  4440  01186E  0D01               	mullw	1
  4441  011870  50F3               	movf	prodl,w,c
  4442  011872  0100               	movlb	0	; () banked
  4443  011874  25C3               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4444  011876  6ED9               	movwf	fsr2l,c
  4445  011878  50F4               	movf	prodh,w,c
  4446  01187A  0100               	movlb	0	; () banked
  4447  01187C  21C4               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4448  01187E  6EDA               	movwf	fsr2h,c
  4449  011880  50DF               	movf	indf2,w,c
  4450  011882  0B7F               	andlw	127
  4451  011884  0100               	movlb	0	; () banked
  4452  011886  19C2               	xorwf	??_Console_PrintChar& (0+255),w,b
  4453  011888  B4D8               	btfsc	status,2,c
  4454  01188A  0012               	return	
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4458  01188C  0E01               	movlw	1
  4459  01188E  0100               	movlb	0	; () banked
  4460  011890  6FFF               	movwf	_change& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463  011892  0100               	movlb	0	; () banked
  4464  011894  517A               	movf	_lBufferY& (0+255),w,b
  4465  011896  0D14               	mullw	20
  4466  011898  0E46               	movlw	low _lBuffer
  4467  01189A  0100               	movlb	0	; () banked
  4468  01189C  6FC2               	movwf	??_Console_PrintChar& (0+255),b
  4469  01189E  0E02               	movlw	high _lBuffer
  4470  0118A0  0100               	movlb	0	; () banked
  4471  0118A2  6FC3               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4472  0118A4  50F3               	movf	prodl,w,c
  4473  0118A6  0100               	movlb	0	; () banked
  4474  0118A8  27C2               	addwf	??_Console_PrintChar& (0+255),f,b
  4475  0118AA  50F4               	movf	prodh,w,c
  4476  0118AC  0100               	movlb	0	; () banked
  4477  0118AE  23C3               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4478  0118B0  0100               	movlb	0	; () banked
  4479  0118B2  517B               	movf	_lBufferX& (0+255),w,b
  4480  0118B4  0D01               	mullw	1
  4481  0118B6  50F3               	movf	prodl,w,c
  4482  0118B8  0100               	movlb	0	; () banked
  4483  0118BA  25C2               	addwf	??_Console_PrintChar& (0+255),w,b
  4484  0118BC  6ED9               	movwf	fsr2l,c
  4485  0118BE  50F4               	movf	prodh,w,c
  4486  0118C0  0100               	movlb	0	; () banked
  4487  0118C2  21C3               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4488  0118C4  6EDA               	movwf	fsr2h,c
  4489  0118C6  0100               	movlb	0	; () banked
  4490  0118C8  51C5               	movf	Console_PrintChar@pInput& (0+255),w,b
  4491  0118CA  0980               	iorlw	128
  4492  0118CC  6EDF               	movwf	indf2,c
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;Console.c: 372: };
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;Console.c: 371: return;
  4499                           
  4500                           ; BSR set to: 0
  4501                           
  4502                           ; BSR set to: 0
  4503  0118CE  0012               	return	
  4504  0118D0                     l1036:
  4505                           
  4506                           ; BSR set to: 0
  4507  0118D0  0100               	movlb	0	; () banked
  4508  0118D2  51C5               	movf	Console_PrintChar@pInput& (0+255),w,b
  4509                           
  4510                           ; Switch size 1, requested type "space"
  4511                           ; Number of cases is 8, Range of values is 7 to 35
  4512                           ; switch strategies available:
  4513                           ; Name         Instructions Cycles
  4514                           ; simple_byte           25    13 (average)
  4515                           ;	Chosen strategy is simple_byte
  4516  0118D4  0A07               	xorlw	7	; case 7
  4517  0118D6  B4D8               	btfsc	status,2,c
  4518  0118D8  D756               	goto	l1043
  4519  0118DA  0A0F               	xorlw	15	; case 8
  4520  0118DC  B4D8               	btfsc	status,2,c
  4521  0118DE  D74A               	goto	l1040
  4522  0118E0  0A01               	xorlw	1	; case 9
  4523  0118E2  B4D8               	btfsc	status,2,c
  4524  0118E4  D74D               	goto	l1042
  4525  0118E6  0A03               	xorlw	3	; case 10
  4526  0118E8  B4D8               	btfsc	status,2,c
  4527  0118EA  D741               	goto	l1037
  4528  0118EC  0A06               	xorlw	6	; case 12
  4529  0118EE  B4D8               	btfsc	status,2,c
  4530  0118F0  D744               	goto	l1041
  4531  0118F2  0A01               	xorlw	1	; case 13
  4532  0118F4  B4D8               	btfsc	status,2,c
  4533  0118F6  D73B               	goto	l1037
  4534  0118F8  0A2D               	xorlw	45	; case 32
  4535  0118FA  B4D8               	btfsc	status,2,c
  4536  0118FC  D74A               	goto	l1045
  4537  0118FE  0A03               	xorlw	3	; case 35
  4538  011900  B4D8               	btfsc	status,2,c
  4539  011902  D744               	goto	l1044
  4540  011904  D746               	goto	l1045
  4541  011906                     __end_of_Console_PrintChar:
  4542                           	opt stack 0
  4543                           tosu	equ	0xFFF
  4544                           tosh	equ	0xFFE
  4545                           tosl	equ	0xFFD
  4546                           pclath	equ	0xFFA
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           postinc0	equ	0xFEE
  4554                           plusw0	equ	0xFEB
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1h	equ	0xFE2
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           plusw2	equ	0xFDB
  4563                           fsr2h	equ	0xFDA
  4564                           fsr2l	equ	0xFD9
  4565                           status	equ	0xFD8
  4566                           
  4567 ;; *************** function _Console_Tab *****************
  4568 ;; Defined at:
  4569 ;;		line 260 in file "Library/Console.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  c               1   15[BANK0 ] unsigned char 
  4574 ;;  i               1   14[BANK0 ] unsigned char 
  4575 ;;  t               1   13[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;Total ram usage:        8 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    9
  4592 ;; This function calls:
  4593 ;;		_Console_ClearCursor
  4594 ;;		_Console_IncrementCursor
  4595 ;;		___awdiv
  4596 ;; This function is called by:
  4597 ;;		_Console_PrintChar
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text12
  4602  012978                     __ptext12:
  4603                           	opt stack 0
  4604  012978                     _Console_Tab:
  4605                           	opt stack 16
  4606                           
  4607                           ;Console.c: 262: UINT8 i = 0;
  4608                           
  4609                           ;incstack = 0
  4610  012978  0E00               	movlw	0
  4611  01297A  0100               	movlb	0	; () banked
  4612  01297C  6FC0               	movwf	Console_Tab@i& (0+255),b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4616  01297E  0EFA               	movlw	250
  4617  012980  2447               	addwf	_gCursor,w,c
  4618  012982  0100               	movlb	0	; () banked
  4619  012984  6FB2               	movwf	___awdiv@dividend& (0+255),b
  4620  012986  0EFF               	movlw	255
  4621  012988  2048               	addwfc	_gCursor+1,w,c
  4622  01298A  0100               	movlb	0	; () banked
  4623  01298C  6FB3               	movwf	(___awdiv@dividend+1)& (0+255),b
  4624  01298E  0E00               	movlw	0
  4625  012990  0100               	movlb	0	; () banked
  4626  012992  6FB5               	movwf	(___awdiv@divisor+1)& (0+255),b
  4627  012994  0E06               	movlw	6
  4628  012996  6FB4               	movwf	___awdiv@divisor& (0+255),b
  4629  012998  EC1D  F095         	call	___awdiv	;wreg free
  4630  01299C  0100               	movlb	0	; () banked
  4631  01299E  51B2               	movf	?___awdiv& (0+255),w,b
  4632  0129A0  0100               	movlb	0	; () banked
  4633  0129A2  6FC1               	movwf	Console_Tab@c& (0+255),b
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;Console.c: 264: UINT8 t = c/4;
  4637  0129A4  C0C1  F0B2         	movff	Console_Tab@c,___awdiv@dividend
  4638  0129A8  0100               	movlb	0	; () banked
  4639  0129AA  6BB3               	clrf	(___awdiv@dividend+1)& (0+255),b
  4640  0129AC  0E00               	movlw	0
  4641  0129AE  0100               	movlb	0	; () banked
  4642  0129B0  6FB5               	movwf	(___awdiv@divisor+1)& (0+255),b
  4643  0129B2  0E04               	movlw	4
  4644  0129B4  6FB4               	movwf	___awdiv@divisor& (0+255),b
  4645  0129B6  EC1D  F095         	call	___awdiv	;wreg free
  4646  0129BA  0100               	movlb	0	; () banked
  4647  0129BC  51B2               	movf	?___awdiv& (0+255),w,b
  4648  0129BE  0100               	movlb	0	; () banked
  4649  0129C0  6FBF               	movwf	Console_Tab@t& (0+255),b
  4650                           
  4651                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4652  0129C2  0E00               	movlw	0
  4653  0129C4  0100               	movlb	0	; () banked
  4654  0129C6  6FC0               	movwf	Console_Tab@i& (0+255),b
  4655  0129C8  D006               	goto	l1009
  4656  0129CA                     
  4657                           ; BSR set to: 0
  4658                           ;Console.c: 266: {
  4659                           ;Console.c: 267: Console_ClearCursor();
  4660                           
  4661                           ; BSR set to: 0
  4662  0129CA  EC41  F0A1         	call	_Console_ClearCursor	;wreg free
  4663                           
  4664                           ;Console.c: 268: Console_IncrementCursor();
  4665  0129CE  ECDB  F09D         	call	_Console_IncrementCursor	;wreg free
  4666  0129D2  0100               	movlb	0	; () banked
  4667  0129D4  2BC0               	incf	Console_Tab@i& (0+255),f,b
  4668  0129D6                     l1009:
  4669                           
  4670                           ; BSR set to: 0
  4671                           
  4672                           ; BSR set to: 0
  4673  0129D6  0100               	movlb	0	; () banked
  4674  0129D8  51BF               	movf	Console_Tab@t& (0+255),w,b
  4675  0129DA  0D04               	mullw	4
  4676  0129DC  1EF3               	comf	prodl,f,c
  4677  0129DE  1EF4               	comf	prodh,f,c
  4678  0129E0  4AF3               	infsnz	prodl,f,c
  4679  0129E2  2AF4               	incf	prodh,f,c
  4680  0129E4  0100               	movlb	0	; () banked
  4681  0129E6  51C1               	movf	Console_Tab@c& (0+255),w,b
  4682  0129E8  0100               	movlb	0	; () banked
  4683  0129EA  6FBA               	movwf	??_Console_Tab& (0+255),b
  4684  0129EC  6BBB               	clrf	(??_Console_Tab+1)& (0+255),b
  4685  0129EE  50F3               	movf	prodl,w,c
  4686  0129F0  0100               	movlb	0	; () banked
  4687  0129F2  27BA               	addwf	??_Console_Tab& (0+255),f,b
  4688  0129F4  50F4               	movf	prodh,w,c
  4689  0129F6  0100               	movlb	0	; () banked
  4690  0129F8  23BB               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4691  0129FA  0100               	movlb	0	; () banked
  4692  0129FC  1FBA               	comf	??_Console_Tab& (0+255),f,b
  4693  0129FE  1FBB               	comf	(??_Console_Tab+1)& (0+255),f,b
  4694  012A00  4BBA               	infsnz	??_Console_Tab& (0+255),f,b
  4695  012A02  2BBB               	incf	(??_Console_Tab+1)& (0+255),f,b
  4696  012A04  0E04               	movlw	4
  4697  012A06  0100               	movlb	0	; () banked
  4698  012A08  27BA               	addwf	??_Console_Tab& (0+255),f,b
  4699  012A0A  0E00               	movlw	0
  4700  012A0C  23BB               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4701  012A0E  0100               	movlb	0	; () banked
  4702  012A10  51C0               	movf	Console_Tab@i& (0+255),w,b
  4703  012A12  0100               	movlb	0	; () banked
  4704  012A14  6FBC               	movwf	(??_Console_Tab+2)& (0+255),b
  4705  012A16  6BBD               	clrf	(??_Console_Tab+3)& (0+255),b
  4706  012A18  0100               	movlb	0	; () banked
  4707  012A1A  51BA               	movf	??_Console_Tab& (0+255),w,b
  4708  012A1C  0100               	movlb	0	; () banked
  4709  012A1E  5DBC               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4710  012A20  0100               	movlb	0	; () banked
  4711  012A22  51BD               	movf	(??_Console_Tab+3)& (0+255),w,b
  4712  012A24  0A80               	xorlw	128
  4713  012A26  0100               	movlb	0	; () banked
  4714  012A28  6FBE               	movwf	(??_Console_Tab+4)& (0+255),b
  4715  012A2A  0100               	movlb	0	; () banked
  4716  012A2C  51BB               	movf	(??_Console_Tab+1)& (0+255),w,b
  4717  012A2E  0A80               	xorlw	128
  4718  012A30  0100               	movlb	0	; () banked
  4719  012A32  59BE               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4720  012A34  B0D8               	btfsc	status,0,c
  4721  012A36  0012               	return	
  4722  012A38  D7C8               	goto	l1010
  4723  012A3A                     __end_of_Console_Tab:
  4724                           	opt stack 0
  4725                           tosu	equ	0xFFF
  4726                           tosh	equ	0xFFE
  4727                           tosl	equ	0xFFD
  4728                           pclath	equ	0xFFA
  4729                           tblptru	equ	0xFF8
  4730                           tblptrh	equ	0xFF7
  4731                           tblptrl	equ	0xFF6
  4732                           tablat	equ	0xFF5
  4733                           prodh	equ	0xFF4
  4734                           prodl	equ	0xFF3
  4735                           postinc0	equ	0xFEE
  4736                           plusw0	equ	0xFEB
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           plusw2	equ	0xFDB
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function ___awdiv *****************
  4750 ;; Defined at:
  4751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  dividend        2    0[BANK0 ] int 
  4754 ;;  divisor         2    2[BANK0 ] int 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  quotient        2    6[BANK0 ] int 
  4757 ;;  sign            1    5[BANK0 ] unsigned char 
  4758 ;;  counter         1    4[BANK0 ] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  2    0[BANK0 ] int 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        8 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    7
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_Console_Tab
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text13
  4783  012A3A                     __ptext13:
  4784                           	opt stack 0
  4785  012A3A                     ___awdiv:
  4786                           	opt stack 17
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;incstack = 0
  4790  012A3A  0E00               	movlw	0
  4791  012A3C  0100               	movlb	0	; () banked
  4792  012A3E  6FB7               	movwf	___awdiv@sign& (0+255),b
  4793                           
  4794                           ; BSR set to: 0
  4795  012A40  0100               	movlb	0	; () banked
  4796  012A42  AFB5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4797  012A44  D008               	goto	l2278
  4798                           
  4799                           ; BSR set to: 0
  4800  012A46  0100               	movlb	0	; () banked
  4801  012A48  6DB4               	negf	___awdiv@divisor& (0+255),b
  4802  012A4A  1FB5               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4803  012A4C  B0D8               	btfsc	status,0,c
  4804  012A4E  2BB5               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4805                           
  4806                           ; BSR set to: 0
  4807  012A50  0E01               	movlw	1
  4808  012A52  0100               	movlb	0	; () banked
  4809  012A54  6FB7               	movwf	___awdiv@sign& (0+255),b
  4810  012A56                     l2278:
  4811                           
  4812                           ; BSR set to: 0
  4813                           
  4814                           ; BSR set to: 0
  4815  012A56  0100               	movlb	0	; () banked
  4816  012A58  AFB3               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4817  012A5A  D008               	goto	l2279
  4818                           
  4819                           ; BSR set to: 0
  4820  012A5C  0100               	movlb	0	; () banked
  4821  012A5E  6DB2               	negf	___awdiv@dividend& (0+255),b
  4822  012A60  1FB3               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4823  012A62  B0D8               	btfsc	status,0,c
  4824  012A64  2BB3               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4825                           
  4826                           ; BSR set to: 0
  4827  012A66  0E01               	movlw	1
  4828  012A68  0100               	movlb	0	; () banked
  4829  012A6A  1BB7               	xorwf	___awdiv@sign& (0+255),f,b
  4830  012A6C                     l2279:
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ; BSR set to: 0
  4835  012A6C  0E00               	movlw	0
  4836  012A6E  0100               	movlb	0	; () banked
  4837  012A70  6FB9               	movwf	(___awdiv@quotient+1)& (0+255),b
  4838  012A72  0E00               	movlw	0
  4839  012A74  6FB8               	movwf	___awdiv@quotient& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842  012A76  0100               	movlb	0	; () banked
  4843  012A78  51B4               	movf	___awdiv@divisor& (0+255),w,b
  4844  012A7A  0100               	movlb	0	; () banked
  4845  012A7C  11B5               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4846  012A7E  B4D8               	btfsc	status,2,c
  4847  012A80  D02C               	goto	l2286
  4848                           
  4849                           ; BSR set to: 0
  4850  012A82  0E01               	movlw	1
  4851  012A84  0100               	movlb	0	; () banked
  4852  012A86  6FB6               	movwf	___awdiv@counter& (0+255),b
  4853  012A88  D006               	goto	l2281
  4854  012A8A                     
  4855                           ; BSR set to: 0
  4856                           
  4857                           ; BSR set to: 0
  4858  012A8A  0100               	movlb	0	; () banked
  4859  012A8C  90D8               	bcf	status,0,c
  4860  012A8E  37B4               	rlcf	___awdiv@divisor& (0+255),f,b
  4861  012A90  37B5               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4862  012A92  0100               	movlb	0	; () banked
  4863  012A94  2BB6               	incf	___awdiv@counter& (0+255),f,b
  4864  012A96                     l2281:
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  012A96  0100               	movlb	0	; () banked
  4870  012A98  AFB5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4871  012A9A  D7F7               	goto	l2282
  4872  012A9C                     u6850:
  4873                           
  4874                           ; BSR set to: 0
  4875                           
  4876                           ; BSR set to: 0
  4877                           
  4878                           ; BSR set to: 0
  4879  012A9C  0100               	movlb	0	; () banked
  4880  012A9E  90D8               	bcf	status,0,c
  4881  012AA0  37B8               	rlcf	___awdiv@quotient& (0+255),f,b
  4882  012AA2  37B9               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4883                           
  4884                           ; BSR set to: 0
  4885  012AA4  0100               	movlb	0	; () banked
  4886  012AA6  51B4               	movf	___awdiv@divisor& (0+255),w,b
  4887  012AA8  0100               	movlb	0	; () banked
  4888  012AAA  5DB2               	subwf	___awdiv@dividend& (0+255),w,b
  4889  012AAC  0100               	movlb	0	; () banked
  4890  012AAE  51B5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4891  012AB0  0100               	movlb	0	; () banked
  4892  012AB2  59B3               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4893  012AB4  A0D8               	btfss	status,0,c
  4894  012AB6  D00A               	goto	l2285
  4895                           
  4896                           ; BSR set to: 0
  4897  012AB8  0100               	movlb	0	; () banked
  4898  012ABA  51B4               	movf	___awdiv@divisor& (0+255),w,b
  4899  012ABC  0100               	movlb	0	; () banked
  4900  012ABE  5FB2               	subwf	___awdiv@dividend& (0+255),f,b
  4901  012AC0  0100               	movlb	0	; () banked
  4902  012AC2  51B5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4903  012AC4  0100               	movlb	0	; () banked
  4904  012AC6  5BB3               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4905                           
  4906                           ; BSR set to: 0
  4907  012AC8  0100               	movlb	0	; () banked
  4908  012ACA  81B8               	bsf	___awdiv@quotient& (0+255),0,b
  4909  012ACC                     l2285:
  4910                           
  4911                           ; BSR set to: 0
  4912                           
  4913                           ; BSR set to: 0
  4914  012ACC  0100               	movlb	0	; () banked
  4915  012ACE  90D8               	bcf	status,0,c
  4916  012AD0  33B5               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4917  012AD2  33B4               	rrcf	___awdiv@divisor& (0+255),f,b
  4918                           
  4919                           ; BSR set to: 0
  4920  012AD4  0100               	movlb	0	; () banked
  4921  012AD6  2FB6               	decfsz	___awdiv@counter& (0+255),f,b
  4922  012AD8  D7E1               	goto	u6850
  4923  012ADA                     l2286:
  4924                           
  4925                           ; BSR set to: 0
  4926                           
  4927                           ; BSR set to: 0
  4928                           
  4929                           ; BSR set to: 0
  4930  012ADA  0100               	movlb	0	; () banked
  4931  012ADC  51B7               	movf	___awdiv@sign& (0+255),w,b
  4932  012ADE  0100               	movlb	0	; () banked
  4933  012AE0  B4D8               	btfsc	status,2,c
  4934  012AE2  D005               	goto	l2287
  4935                           
  4936                           ; BSR set to: 0
  4937  012AE4  0100               	movlb	0	; () banked
  4938  012AE6  6DB8               	negf	___awdiv@quotient& (0+255),b
  4939  012AE8  1FB9               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4940  012AEA  B0D8               	btfsc	status,0,c
  4941  012AEC  2BB9               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4942  012AEE                     l2287:
  4943                           
  4944                           ; BSR set to: 0
  4945                           
  4946                           ; BSR set to: 0
  4947  012AEE  C0B8  F0B2         	movff	___awdiv@quotient,?___awdiv
  4948  012AF2  C0B9  F0B3         	movff	___awdiv@quotient+1,?___awdiv+1
  4949  012AF6  0012               	return	
  4950  012AF8                     __end_of___awdiv:
  4951                           	opt stack 0
  4952                           tosu	equ	0xFFF
  4953                           tosh	equ	0xFFE
  4954                           tosl	equ	0xFFD
  4955                           pclath	equ	0xFFA
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           postinc0	equ	0xFEE
  4963                           plusw0	equ	0xFEB
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           fsr1h	equ	0xFE2
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           plusw2	equ	0xFDB
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _Console_IncrementCursor *****************
  4977 ;; Defined at:
  4978 ;;		line 243 in file "Library/Console.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      unsigned char 
  4985 ;; Registers used:
  4986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;Total ram usage:        2 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    8
  4999 ;; This function calls:
  5000 ;;		_Console_FormFeed
  5001 ;;		_Console_NewLine
  5002 ;; This function is called by:
  5003 ;;		_Console_Tab
  5004 ;;		_Console_PrintChar
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text14
  5009  013BB6                     __ptext14:
  5010                           	opt stack 0
  5011  013BB6                     _Console_IncrementCursor:
  5012                           	opt stack 16
  5013                           
  5014                           ;Console.c: 246: lBufferX += 1;
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;incstack = 0
  5018  013BB6  0100               	movlb	0	; () banked
  5019  013BB8  2B7B               	incf	_lBufferX& (0+255),f,b
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;Console.c: 248: gCursor.x += 6;
  5023  013BBA  0E06               	movlw	6
  5024  013BBC  2647               	addwf	_gCursor,f,c
  5025  013BBE  0E00               	movlw	0
  5026  013BC0  2248               	addwfc	_gCursor+1,f,c
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5030  013BC2  0E06               	movlw	6
  5031  013BC4  2447               	addwf	_gCursor,w,c
  5032  013BC6  0100               	movlb	0	; () banked
  5033  013BC8  6FB6               	movwf	??_Console_IncrementCursor& (0+255),b
  5034  013BCA  0E00               	movlw	0
  5035  013BCC  2048               	addwfc	_gCursor+1,w,c
  5036  013BCE  0100               	movlb	0	; () banked
  5037  013BD0  6FB7               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5038  013BD2  0100               	movlb	0	; () banked
  5039  013BD4  BFB7               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5040  013BD6  D009               	goto	l1004
  5041  013BD8  0100               	movlb	0	; () banked
  5042  013BDA  51B7               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5043  013BDC  E104               	bnz	u6750
  5044  013BDE  0E80               	movlw	128
  5045  013BE0  0100               	movlb	0	; () banked
  5046  013BE2  5DB6               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5047  013BE4  B0D8               	btfsc	status,0,c
  5048  013BE6                     u6750:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;Console.c: 250: Console_NewLine();
  5052  013BE6  ECDE  F098         	call	_Console_NewLine	;wreg free
  5053  013BEA                     l1004:
  5054                           
  5055                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5056  013BEA  0E08               	movlw	8
  5057  013BEC  2449               	addwf	_gCursor+2,w,c
  5058  013BEE  0100               	movlb	0	; () banked
  5059  013BF0  6FB6               	movwf	??_Console_IncrementCursor& (0+255),b
  5060  013BF2  0E00               	movlw	0
  5061  013BF4  204A               	addwfc	_gCursor+3,w,c
  5062  013BF6  0100               	movlb	0	; () banked
  5063  013BF8  6FB7               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5064  013BFA  0100               	movlb	0	; () banked
  5065  013BFC  BFB7               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5066  013BFE  D00C               	goto	l1005
  5067  013C00  0100               	movlb	0	; () banked
  5068  013C02  51B7               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5069  013C04  E105               	bnz	u6760
  5070  013C06  0E80               	movlw	128
  5071  013C08  0100               	movlb	0	; () banked
  5072  013C0A  5DB6               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5073  013C0C  A0D8               	btfss	status,0,c
  5074  013C0E  D004               	goto	l1005
  5075  013C10                     u6760:
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;Console.c: 252: {
  5079                           ;Console.c: 253: Console_FormFeed();
  5080  013C10  EC60  F09A         	call	_Console_FormFeed	;wreg free
  5081                           
  5082                           ;Console.c: 254: return 1;
  5083  013C14  0E01               	movlw	1
  5084  013C16  0012               	return	
  5085  013C18                     l1005:
  5086                           
  5087                           ;Console.c: 255: }
  5088                           ;Console.c: 257: return 0;
  5089  013C18  0E00               	movlw	0
  5090  013C1A  0012               	return	
  5091  013C1C                     __end_of_Console_IncrementCursor:
  5092                           	opt stack 0
  5093                           tosu	equ	0xFFF
  5094                           tosh	equ	0xFFE
  5095                           tosl	equ	0xFFD
  5096                           pclath	equ	0xFFA
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           postinc0	equ	0xFEE
  5104                           plusw0	equ	0xFEB
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           plusw2	equ	0xFDB
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _Console_NewLine *****************
  5118 ;; Defined at:
  5119 ;;		line 175 in file "Library/Console.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;Total ram usage:        2 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    7
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_Console_IncrementCursor
  5144 ;;		_Console_PrintChar
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text15
  5149  0131BC                     __ptext15:
  5150                           	opt stack 0
  5151  0131BC                     _Console_NewLine:
  5152                           	opt stack 16
  5153                           
  5154                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5155                           
  5156                           ;incstack = 0
  5157  0131BC  D03E               	goto	l983
  5158  0131BE                     
  5159                           ;Console.c: 179: {
  5160                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5161  0131BE  0100               	movlb	0	; () banked
  5162  0131C0  517A               	movf	_lBufferY& (0+255),w,b
  5163  0131C2  0D14               	mullw	20
  5164  0131C4  0E46               	movlw	low _lBuffer
  5165  0131C6  0100               	movlb	0	; () banked
  5166  0131C8  6FB2               	movwf	??_Console_NewLine& (0+255),b
  5167  0131CA  0E02               	movlw	high _lBuffer
  5168  0131CC  0100               	movlb	0	; () banked
  5169  0131CE  6FB3               	movwf	(??_Console_NewLine+1)& (0+255),b
  5170  0131D0  50F3               	movf	prodl,w,c
  5171  0131D2  0100               	movlb	0	; () banked
  5172  0131D4  27B2               	addwf	??_Console_NewLine& (0+255),f,b
  5173  0131D6  50F4               	movf	prodh,w,c
  5174  0131D8  0100               	movlb	0	; () banked
  5175  0131DA  23B3               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5176  0131DC  0100               	movlb	0	; () banked
  5177  0131DE  517B               	movf	_lBufferX& (0+255),w,b
  5178  0131E0  0D01               	mullw	1
  5179  0131E2  50F3               	movf	prodl,w,c
  5180  0131E4  0100               	movlb	0	; () banked
  5181  0131E6  25B2               	addwf	??_Console_NewLine& (0+255),w,b
  5182  0131E8  6ED9               	movwf	fsr2l,c
  5183  0131EA  50F4               	movf	prodh,w,c
  5184  0131EC  0100               	movlb	0	; () banked
  5185  0131EE  21B3               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5186  0131F0  6EDA               	movwf	fsr2h,c
  5187  0131F2  50DF               	movf	indf2,w,c
  5188  0131F4  B4D8               	btfsc	status,2,c
  5189  0131F6  D01F               	goto	l985
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5193  0131F8  0E01               	movlw	1
  5194  0131FA  0100               	movlb	0	; () banked
  5195  0131FC  6FFF               	movwf	_change& (0+255),b
  5196                           
  5197                           ; BSR set to: 0
  5198  0131FE  0100               	movlb	0	; () banked
  5199  013200  517A               	movf	_lBufferY& (0+255),w,b
  5200  013202  0D14               	mullw	20
  5201  013204  0E46               	movlw	low _lBuffer
  5202  013206  0100               	movlb	0	; () banked
  5203  013208  6FB2               	movwf	??_Console_NewLine& (0+255),b
  5204  01320A  0E02               	movlw	high _lBuffer
  5205  01320C  0100               	movlb	0	; () banked
  5206  01320E  6FB3               	movwf	(??_Console_NewLine+1)& (0+255),b
  5207  013210  50F3               	movf	prodl,w,c
  5208  013212  0100               	movlb	0	; () banked
  5209  013214  27B2               	addwf	??_Console_NewLine& (0+255),f,b
  5210  013216  50F4               	movf	prodh,w,c
  5211  013218  0100               	movlb	0	; () banked
  5212  01321A  23B3               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5213  01321C  0100               	movlb	0	; () banked
  5214  01321E  517B               	movf	_lBufferX& (0+255),w,b
  5215  013220  0D01               	mullw	1
  5216  013222  50F3               	movf	prodl,w,c
  5217  013224  0100               	movlb	0	; () banked
  5218  013226  25B2               	addwf	??_Console_NewLine& (0+255),w,b
  5219  013228  6ED9               	movwf	fsr2l,c
  5220  01322A  50F4               	movf	prodh,w,c
  5221  01322C  0100               	movlb	0	; () banked
  5222  01322E  21B3               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5223  013230  6EDA               	movwf	fsr2h,c
  5224  013232  0E80               	movlw	128
  5225  013234  6EDF               	movwf	indf2,c
  5226  013236                     l985:
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;Console.c: 182: lBufferX ++;
  5230                           
  5231                           ; BSR set to: 0
  5232  013236  0100               	movlb	0	; () banked
  5233  013238  2B7B               	incf	_lBufferX& (0+255),f,b
  5234  01323A                     l983:
  5235                           
  5236                           ; BSR set to: 0
  5237  01323A  0E13               	movlw	19
  5238  01323C  0100               	movlb	0	; () banked
  5239  01323E  657B               	cpfsgt	_lBufferX& (0+255),b
  5240  013240  D7BE               	goto	l984
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;Console.c: 183: }
  5244                           ;Console.c: 185: lBufferX = 0;
  5245                           
  5246                           ; BSR set to: 0
  5247  013242  0E00               	movlw	0
  5248  013244  0100               	movlb	0	; () banked
  5249  013246  6F7B               	movwf	_lBufferX& (0+255),b
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;Console.c: 186: lBufferY ++;
  5253  013248  0100               	movlb	0	; () banked
  5254  01324A  2B7A               	incf	_lBufferY& (0+255),f,b
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;Console.c: 188: gCursor.y += 8;
  5258  01324C  0E08               	movlw	8
  5259  01324E  2649               	addwf	_gCursor+2,f,c
  5260  013250  0E00               	movlw	0
  5261  013252  224A               	addwfc	_gCursor+3,f,c
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;Console.c: 189: gCursor.x = 6;
  5265  013254  0E00               	movlw	0
  5266  013256  6E48               	movwf	_gCursor+1,c
  5267  013258  0E06               	movlw	6
  5268  01325A  6E47               	movwf	_gCursor,c
  5269                           
  5270                           ; BSR set to: 0
  5271  01325C  0012               	return		;funcret
  5272  01325E                     __end_of_Console_NewLine:
  5273                           	opt stack 0
  5274                           tosu	equ	0xFFF
  5275                           tosh	equ	0xFFE
  5276                           tosl	equ	0xFFD
  5277                           pclath	equ	0xFFA
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           postinc0	equ	0xFEE
  5285                           plusw0	equ	0xFEB
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           plusw2	equ	0xFDB
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _Console_FormFeed *****************
  5299 ;; Defined at:
  5300 ;;		line 192 in file "Library/Console.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  y               1    3[BANK0 ] unsigned char 
  5305 ;;  x               1    2[BANK0 ] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;Total ram usage:        4 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    7
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_Console_IncrementCursor
  5326 ;;		_Console_PrintChar
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text16
  5331  0134C0                     __ptext16:
  5332                           	opt stack 0
  5333  0134C0                     _Console_FormFeed:
  5334                           	opt stack 16
  5335                           
  5336                           ;Console.c: 195: lBufferX = 0;
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;incstack = 0
  5340  0134C0  0E00               	movlw	0
  5341  0134C2  0100               	movlb	0	; () banked
  5342  0134C4  6F7B               	movwf	_lBufferX& (0+255),b
  5343                           
  5344                           ;Console.c: 196: lBufferY = 0;
  5345  0134C6  0E00               	movlw	0
  5346  0134C8  0100               	movlb	0	; () banked
  5347  0134CA  6F7A               	movwf	_lBufferY& (0+255),b
  5348                           
  5349                           ;Console.c: 197: UINT8 x, y;
  5350                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5351  0134CC  0E00               	movlw	0
  5352  0134CE  0100               	movlb	0	; () banked
  5353  0134D0  6FB5               	movwf	Console_FormFeed@y& (0+255),b
  5354  0134D2                     l10266:
  5355                           
  5356                           ; BSR set to: 0
  5357  0134D2  0E0E               	movlw	14
  5358  0134D4  0100               	movlb	0	; () banked
  5359  0134D6  65B5               	cpfsgt	Console_FormFeed@y& (0+255),b
  5360  0134D8  D001               	goto	l990
  5361  0134DA  D02D               	goto	u6690
  5362  0134DC                     l990:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5366                           
  5367                           ; BSR set to: 0
  5368  0134DC  0E00               	movlw	0
  5369  0134DE  0100               	movlb	0	; () banked
  5370  0134E0  6FB4               	movwf	Console_FormFeed@x& (0+255),b
  5371  0134E2                     l10272:
  5372                           
  5373                           ; BSR set to: 0
  5374  0134E2  0E13               	movlw	19
  5375  0134E4  0100               	movlb	0	; () banked
  5376  0134E6  65B4               	cpfsgt	Console_FormFeed@x& (0+255),b
  5377  0134E8  D001               	goto	l992
  5378  0134EA  D022               	goto	u6680
  5379  0134EC                     l992:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5383                           
  5384                           ; BSR set to: 0
  5385  0134EC  0E01               	movlw	1
  5386  0134EE  0100               	movlb	0	; () banked
  5387  0134F0  6FFF               	movwf	_change& (0+255),b
  5388                           
  5389                           ; BSR set to: 0
  5390  0134F2  0100               	movlb	0	; () banked
  5391  0134F4  51B5               	movf	Console_FormFeed@y& (0+255),w,b
  5392  0134F6  0D14               	mullw	20
  5393  0134F8  0E46               	movlw	low _lBuffer
  5394  0134FA  0100               	movlb	0	; () banked
  5395  0134FC  6FB2               	movwf	??_Console_FormFeed& (0+255),b
  5396  0134FE  0E02               	movlw	high _lBuffer
  5397  013500  0100               	movlb	0	; () banked
  5398  013502  6FB3               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5399  013504  50F3               	movf	prodl,w,c
  5400  013506  0100               	movlb	0	; () banked
  5401  013508  27B2               	addwf	??_Console_FormFeed& (0+255),f,b
  5402  01350A  50F4               	movf	prodh,w,c
  5403  01350C  0100               	movlb	0	; () banked
  5404  01350E  23B3               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5405  013510  0100               	movlb	0	; () banked
  5406  013512  51B4               	movf	Console_FormFeed@x& (0+255),w,b
  5407  013514  0D01               	mullw	1
  5408  013516  50F3               	movf	prodl,w,c
  5409  013518  0100               	movlb	0	; () banked
  5410  01351A  25B2               	addwf	??_Console_FormFeed& (0+255),w,b
  5411  01351C  6ED9               	movwf	fsr2l,c
  5412  01351E  50F4               	movf	prodh,w,c
  5413  013520  0100               	movlb	0	; () banked
  5414  013522  21B3               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5415  013524  6EDA               	movwf	fsr2h,c
  5416  013526  0E80               	movlw	128
  5417  013528  6EDF               	movwf	indf2,c
  5418                           
  5419                           ; BSR set to: 0
  5420  01352A  0100               	movlb	0	; () banked
  5421  01352C  2BB4               	incf	Console_FormFeed@x& (0+255),f,b
  5422  01352E  D7D9               	goto	l10272
  5423  013530                     u6680:
  5424                           
  5425                           ; BSR set to: 0
  5426                           
  5427                           ; BSR set to: 0
  5428  013530  0100               	movlb	0	; () banked
  5429  013532  2BB5               	incf	Console_FormFeed@y& (0+255),f,b
  5430  013534  D7CE               	goto	l10266
  5431  013536                     u6690:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;Console.c: 204: clearall = 1;
  5435                           
  5436                           ; BSR set to: 0
  5437  013536  0E01               	movlw	1
  5438  013538  0100               	movlb	0	; () banked
  5439  01353A  6F7C               	movwf	_clearall& (0+255),b
  5440                           
  5441                           ;Console.c: 205: gCursor.x = 6;
  5442  01353C  0E00               	movlw	0
  5443  01353E  6E48               	movwf	_gCursor+1,c
  5444  013540  0E06               	movlw	6
  5445  013542  6E47               	movwf	_gCursor,c
  5446                           
  5447                           ;Console.c: 206: gCursor.y = 6;
  5448  013544  0E00               	movlw	0
  5449  013546  6E4A               	movwf	_gCursor+3,c
  5450  013548  0E06               	movlw	6
  5451  01354A  6E49               	movwf	_gCursor+2,c
  5452                           
  5453                           ; BSR set to: 0
  5454  01354C  0012               	return		;funcret
  5455  01354E                     __end_of_Console_FormFeed:
  5456                           	opt stack 0
  5457                           tosu	equ	0xFFF
  5458                           tosh	equ	0xFFE
  5459                           tosl	equ	0xFFD
  5460                           pclath	equ	0xFFA
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           postinc0	equ	0xFEE
  5468                           plusw0	equ	0xFEB
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _Console_ResetCursor *****************
  5482 ;; Defined at:
  5483 ;;		line 297 in file "Library/Console.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    7
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_Console_PrintChar
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text17
  5512  014808                     __ptext17:
  5513                           	opt stack 0
  5514  014808                     _Console_ResetCursor:
  5515                           	opt stack 18
  5516                           
  5517                           ;Console.c: 299: gCursor.x = 6;
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;incstack = 0
  5521  014808  0E00               	movlw	0
  5522  01480A  6E48               	movwf	_gCursor+1,c
  5523  01480C  0E06               	movlw	6
  5524  01480E  6E47               	movwf	_gCursor,c
  5525                           
  5526                           ;Console.c: 300: gCursor.y = 6;
  5527  014810  0E00               	movlw	0
  5528  014812  6E4A               	movwf	_gCursor+3,c
  5529  014814  0E06               	movlw	6
  5530  014816  6E49               	movwf	_gCursor+2,c
  5531                           
  5532                           ;Console.c: 303: lBufferX = 0;
  5533  014818  0E00               	movlw	0
  5534  01481A  0100               	movlb	0	; () banked
  5535  01481C  6F7B               	movwf	_lBufferX& (0+255),b
  5536                           
  5537                           ;Console.c: 304: lBufferY = 0;
  5538  01481E  0E00               	movlw	0
  5539  014820  0100               	movlb	0	; () banked
  5540  014822  6F7A               	movwf	_lBufferY& (0+255),b
  5541                           
  5542                           ; BSR set to: 0
  5543  014824  0012               	return		;funcret
  5544  014826                     __end_of_Console_ResetCursor:
  5545                           	opt stack 0
  5546                           tosu	equ	0xFFF
  5547                           tosh	equ	0xFFE
  5548                           tosl	equ	0xFFD
  5549                           pclath	equ	0xFFA
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           postinc0	equ	0xFEE
  5557                           plusw0	equ	0xFEB
  5558                           wreg	equ	0xFE8
  5559                           postdec1	equ	0xFE5
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           plusw2	equ	0xFDB
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _Console_Backspace *****************
  5571 ;; Defined at:
  5572 ;;		line 209 in file "Library/Console.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:        0 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    8
  5593 ;; This function calls:
  5594 ;;		_Console_ClearCursor
  5595 ;; This function is called by:
  5596 ;;		_Console_PrintChar
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text18
  5601  013DA2                     __ptext18:
  5602                           	opt stack 0
  5603  013DA2                     _Console_Backspace:
  5604                           	opt stack 17
  5605                           
  5606                           ;Console.c: 211: if (lBufferX > 0)
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;incstack = 0
  5610  013DA2  0100               	movlb	0	; () banked
  5611  013DA4  517B               	movf	_lBufferX& (0+255),w,b
  5612  013DA6  B4D8               	btfsc	status,2,c
  5613  013DA8  D007               	goto	l997
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;Console.c: 212: {
  5617                           ;Console.c: 213: gCursor.x -= 6;
  5618  013DAA  0EFA               	movlw	250
  5619  013DAC  2647               	addwf	_gCursor,f,c
  5620  013DAE  0EFF               	movlw	255
  5621  013DB0  2248               	addwfc	_gCursor+1,f,c
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;Console.c: 216: lBufferX --;
  5625  013DB2  0100               	movlb	0	; () banked
  5626  013DB4  077B               	decf	_lBufferX& (0+255),f,b
  5627                           
  5628                           ;Console.c: 218: }
  5629  013DB6  D020               	goto	l1000
  5630  013DB8                     l997:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;Console.c: 219: else if (lBufferY > 0)
  5634                           
  5635                           ; BSR set to: 0
  5636  013DB8  0100               	movlb	0	; () banked
  5637  013DBA  517A               	movf	_lBufferY& (0+255),w,b
  5638  013DBC  B4D8               	btfsc	status,2,c
  5639  013DBE  D00E               	goto	l999
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;Console.c: 220: {
  5643                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5644  013DC0  0E00               	movlw	0
  5645  013DC2  6E48               	movwf	_gCursor+1,c
  5646  013DC4  0E72               	movlw	114
  5647  013DC6  6E47               	movwf	_gCursor,c
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;Console.c: 222: gCursor.y -= 8;
  5651  013DC8  0EF8               	movlw	248
  5652  013DCA  2649               	addwf	_gCursor+2,f,c
  5653  013DCC  0EFF               	movlw	255
  5654  013DCE  224A               	addwfc	_gCursor+3,f,c
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5658  013DD0  0E13               	movlw	19
  5659  013DD2  0100               	movlb	0	; () banked
  5660  013DD4  6F7B               	movwf	_lBufferX& (0+255),b
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;Console.c: 226: lBufferY --;
  5664  013DD6  0100               	movlb	0	; () banked
  5665  013DD8  077A               	decf	_lBufferY& (0+255),f,b
  5666                           
  5667                           ;Console.c: 228: }
  5668  013DDA  D00E               	goto	l1000
  5669  013DDC                     l999:
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;Console.c: 229: else
  5673                           ;Console.c: 230: {
  5674                           ;Console.c: 231: gCursor.x = 6;
  5675                           
  5676                           ; BSR set to: 0
  5677  013DDC  0E00               	movlw	0
  5678  013DDE  6E48               	movwf	_gCursor+1,c
  5679  013DE0  0E06               	movlw	6
  5680  013DE2  6E47               	movwf	_gCursor,c
  5681                           
  5682                           ;Console.c: 232: gCursor.y = 6;
  5683  013DE4  0E00               	movlw	0
  5684  013DE6  6E4A               	movwf	_gCursor+3,c
  5685  013DE8  0E06               	movlw	6
  5686  013DEA  6E49               	movwf	_gCursor+2,c
  5687                           
  5688                           ;Console.c: 235: lBufferX = 0;
  5689  013DEC  0E00               	movlw	0
  5690  013DEE  0100               	movlb	0	; () banked
  5691  013DF0  6F7B               	movwf	_lBufferX& (0+255),b
  5692                           
  5693                           ;Console.c: 236: lBufferY = 0;
  5694  013DF2  0E00               	movlw	0
  5695  013DF4  0100               	movlb	0	; () banked
  5696  013DF6  6F7A               	movwf	_lBufferY& (0+255),b
  5697  013DF8                     l1000:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;Console.c: 238: }
  5701                           ;Console.c: 240: Console_ClearCursor();
  5702                           
  5703                           ; BSR set to: 0
  5704                           
  5705                           ; BSR set to: 0
  5706  013DF8  EC41  F0A1         	call	_Console_ClearCursor	;wreg free
  5707  013DFC  0012               	return		;funcret
  5708  013DFE                     __end_of_Console_Backspace:
  5709                           	opt stack 0
  5710                           tosu	equ	0xFFF
  5711                           tosh	equ	0xFFE
  5712                           tosl	equ	0xFFD
  5713                           pclath	equ	0xFFA
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           postinc0	equ	0xFEE
  5721                           plusw0	equ	0xFEB
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1h	equ	0xFE2
  5725                           fsr1l	equ	0xFE1
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           plusw2	equ	0xFDB
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _Console_ClearCursor *****************
  5735 ;; Defined at:
  5736 ;;		line 308 in file "Library/Console.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;		None
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;Total ram usage:        2 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    7
  5757 ;; This function calls:
  5758 ;;		Nothing
  5759 ;; This function is called by:
  5760 ;;		_Console_Backspace
  5761 ;;		_Console_Tab
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text19
  5766  014282                     __ptext19:
  5767                           	opt stack 0
  5768  014282                     _Console_ClearCursor:
  5769                           	opt stack 17
  5770                           
  5771                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5772                           
  5773                           ;incstack = 0
  5774  014282  0E01               	movlw	1
  5775  014284  0100               	movlb	0	; () banked
  5776  014286  6FFF               	movwf	_change& (0+255),b
  5777                           
  5778                           ; BSR set to: 0
  5779  014288  0100               	movlb	0	; () banked
  5780  01428A  517A               	movf	_lBufferY& (0+255),w,b
  5781  01428C  0D14               	mullw	20
  5782  01428E  0E46               	movlw	low _lBuffer
  5783  014290  0100               	movlb	0	; () banked
  5784  014292  6FB2               	movwf	??_Console_ClearCursor& (0+255),b
  5785  014294  0E02               	movlw	high _lBuffer
  5786  014296  0100               	movlb	0	; () banked
  5787  014298  6FB3               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5788  01429A  50F3               	movf	prodl,w,c
  5789  01429C  0100               	movlb	0	; () banked
  5790  01429E  27B2               	addwf	??_Console_ClearCursor& (0+255),f,b
  5791  0142A0  50F4               	movf	prodh,w,c
  5792  0142A2  0100               	movlb	0	; () banked
  5793  0142A4  23B3               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5794  0142A6  0100               	movlb	0	; () banked
  5795  0142A8  517B               	movf	_lBufferX& (0+255),w,b
  5796  0142AA  0D01               	mullw	1
  5797  0142AC  50F3               	movf	prodl,w,c
  5798  0142AE  0100               	movlb	0	; () banked
  5799  0142B0  25B2               	addwf	??_Console_ClearCursor& (0+255),w,b
  5800  0142B2  6ED9               	movwf	fsr2l,c
  5801  0142B4  50F4               	movf	prodh,w,c
  5802  0142B6  0100               	movlb	0	; () banked
  5803  0142B8  21B3               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5804  0142BA  6EDA               	movwf	fsr2h,c
  5805  0142BC  0E80               	movlw	128
  5806  0142BE  6EDF               	movwf	indf2,c
  5807                           
  5808                           ; BSR set to: 0
  5809  0142C0  0012               	return		;funcret
  5810  0142C2                     __end_of_Console_ClearCursor:
  5811                           	opt stack 0
  5812                           tosu	equ	0xFFF
  5813                           tosh	equ	0xFFE
  5814                           tosl	equ	0xFFD
  5815                           pclath	equ	0xFFA
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           postinc0	equ	0xFEE
  5823                           plusw0	equ	0xFEB
  5824                           wreg	equ	0xFE8
  5825                           postdec1	equ	0xFE5
  5826                           fsr1h	equ	0xFE2
  5827                           fsr1l	equ	0xFE1
  5828                           indf2	equ	0xFDF
  5829                           postinc2	equ	0xFDE
  5830                           postdec2	equ	0xFDD
  5831                           plusw2	equ	0xFDB
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function _getMode *****************
  5837 ;; Defined at:
  5838 ;;		line 101 in file "main.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;  dipState        2   40[BANK0 ] int 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  2   36[BANK0 ] int 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;Total ram usage:        6 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:   16
  5859 ;; This function calls:
  5860 ;;		_HMI_DIPSwitch
  5861 ;;		_HMI_DownSwitch
  5862 ;;		_HMI_LeftSwitch
  5863 ;;		_HMI_Poll
  5864 ;;		_HMI_RightSwitch
  5865 ;;		_HMI_UpSwitch
  5866 ;;		_MXK_DIPSwitch
  5867 ;;		_MXK_TestButton
  5868 ;; This function is called by:
  5869 ;;		_displayMode
  5870 ;;		_continuousMode
  5871 ;;		_setMode
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text20
  5876  01354E                     __ptext20:
  5877                           	opt stack 0
  5878  01354E                     _getMode:
  5879                           	opt stack 10
  5880                           
  5881                           ;main.c: 102: HMI_Poll();
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;incstack = 0
  5885  01354E  EC94  F09C         	call	_HMI_Poll	;wreg free
  5886                           
  5887                           ;main.c: 103: int dipState = HMIBoard.mDIP.mGetState();
  5888  013552  EE21  F061         	lfsr	2,_HMIBoard+55
  5889  013556  D801               	call	u7598
  5890  013558  D00A               	goto	u7599
  5891  01355A                     u7598:
  5892  01355A  0005               	push	
  5893  01355C  6EFA               	movwf	pclath,c
  5894  01355E  50DE               	movf	postinc2,w,c
  5895  013560  6EFD               	movwf	tosl,c
  5896  013562  50DE               	movf	postinc2,w,c
  5897  013564  6EFE               	movwf	tosh,c
  5898  013566  50DE               	movf	postinc2,w,c
  5899  013568  6EFF               	movwf	tosu,c
  5900  01356A  50FA               	movf	pclath,w,c
  5901  01356C  0012               	return		;indir
  5902  01356E                     u7599:
  5903  01356E  0100               	movlb	0	; () banked
  5904  013570  6FD8               	movwf	??_getMode& (0+255),b
  5905  013572  0100               	movlb	0	; () banked
  5906  013574  51D8               	movf	??_getMode& (0+255),w,b
  5907  013576  0100               	movlb	0	; () banked
  5908  013578  6FDA               	movwf	getMode@dipState& (0+255),b
  5909  01357A  6BDB               	clrf	(getMode@dipState+1)& (0+255),b
  5910                           
  5911                           ;main.c: 104: switch (dipState) {
  5912  01357C  D018               	goto	l2019
  5913  01357E                     
  5914                           ; BSR set to: 0
  5915                           ;main.c: 106: return 3;
  5916                           
  5917                           ; BSR set to: 0
  5918  01357E  0E00               	movlw	0
  5919  013580  0100               	movlb	0	; () banked
  5920  013582  6FD7               	movwf	(?_getMode+1)& (0+255),b
  5921  013584  0E03               	movlw	3
  5922  013586  6FD6               	movwf	?_getMode& (0+255),b
  5923                           
  5924                           ; BSR set to: 0
  5925  013588  0012               	return	
  5926  01358A                     
  5927                           ; BSR set to: 0
  5928                           ;main.c: 108: return 2;
  5929                           
  5930                           ; BSR set to: 0
  5931  01358A  0E00               	movlw	0
  5932  01358C  0100               	movlb	0	; () banked
  5933  01358E  6FD7               	movwf	(?_getMode+1)& (0+255),b
  5934  013590  0E02               	movlw	2
  5935  013592  6FD6               	movwf	?_getMode& (0+255),b
  5936                           
  5937                           ; BSR set to: 0
  5938  013594  0012               	return	
  5939  013596                     
  5940                           ; BSR set to: 0
  5941                           ;main.c: 110: return 1;
  5942                           
  5943                           ; BSR set to: 0
  5944  013596  0E00               	movlw	0
  5945  013598  0100               	movlb	0	; () banked
  5946  01359A  6FD7               	movwf	(?_getMode+1)& (0+255),b
  5947  01359C  0E01               	movlw	1
  5948  01359E  6FD6               	movwf	?_getMode& (0+255),b
  5949                           
  5950                           ; BSR set to: 0
  5951  0135A0  0012               	return	
  5952  0135A2                     
  5953                           ; BSR set to: 0
  5954                           ;main.c: 112: return 0;
  5955                           
  5956                           ; BSR set to: 0
  5957  0135A2  0E00               	movlw	0
  5958  0135A4  0100               	movlb	0	; () banked
  5959  0135A6  6FD7               	movwf	(?_getMode+1)& (0+255),b
  5960  0135A8  0E00               	movlw	0
  5961  0135AA  6FD6               	movwf	?_getMode& (0+255),b
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;main.c: 113: }
  5965                           
  5966                           ; BSR set to: 0
  5967  0135AC  0012               	return	
  5968  0135AE                     l2019:
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973  0135AE  C0DA  F0D8         	movff	getMode@dipState,??_getMode
  5974  0135B2  C0DB  F0D9         	movff	getMode@dipState+1,??_getMode+1
  5975                           
  5976                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5977                           ; Switch size 1, requested type "space"
  5978                           ; Number of cases is 1, Range of values is 0 to 0
  5979                           ; switch strategies available:
  5980                           ; Name         Instructions Cycles
  5981                           ; simple_byte            4     3 (average)
  5982                           ;	Chosen strategy is simple_byte
  5983  0135B6  0100               	movlb	0	; () banked
  5984  0135B8  51D9               	movf	(??_getMode+1)& (0+255),w,b
  5985  0135BA  0A00               	xorlw	0	; case 0
  5986  0135BC  A4D8               	btfss	status,2,c
  5987  0135BE  D7F1               	goto	l2024
  5988                           
  5989                           ; BSR set to: 0
  5990                           ; Switch size 1, requested type "space"
  5991                           ; Number of cases is 3, Range of values is 2 to 8
  5992                           ; switch strategies available:
  5993                           ; Name         Instructions Cycles
  5994                           ; simple_byte           10     6 (average)
  5995                           ;	Chosen strategy is simple_byte
  5996  0135C0  0100               	movlb	0	; () banked
  5997  0135C2  51D8               	movf	??_getMode& (0+255),w,b
  5998  0135C4  0A02               	xorlw	2	; case 2
  5999  0135C6  B4D8               	btfsc	status,2,c
  6000  0135C8  D7DA               	goto	l2020
  6001  0135CA  0A06               	xorlw	6	; case 4
  6002  0135CC  B4D8               	btfsc	status,2,c
  6003  0135CE  D7DD               	goto	l2022
  6004  0135D0  0A0C               	xorlw	12	; case 8
  6005  0135D2  B4D8               	btfsc	status,2,c
  6006  0135D4  D7E0               	goto	l2023
  6007  0135D6  D7E5               	goto	l2024
  6008  0135D8                     __end_of_getMode:
  6009                           	opt stack 0
  6010                           tosu	equ	0xFFF
  6011                           tosh	equ	0xFFE
  6012                           tosl	equ	0xFFD
  6013                           pclath	equ	0xFFA
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           postinc0	equ	0xFEE
  6021                           plusw0	equ	0xFEB
  6022                           wreg	equ	0xFE8
  6023                           postdec1	equ	0xFE5
  6024                           fsr1h	equ	0xFE2
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           plusw2	equ	0xFDB
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _HMI_Poll *****************
  6035 ;; Defined at:
  6036 ;;		line 252 in file "HMI.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:   15
  6057 ;; This function calls:
  6058 ;;		_Button_Poll
  6059 ;; This function is called by:
  6060 ;;		_getMode
  6061 ;;		_continuousMode
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text21
  6066  013928                     __ptext21:
  6067                           	opt stack 0
  6068  013928                     _HMI_Poll:
  6069                           	opt stack 10
  6070                           
  6071                           ;HMI.c: 254: TRISE = 0xFF;
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;incstack = 0
  6075  013928  6896               	setf	3990,c	;volatile
  6076                           
  6077                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6078  01392A  0E5A               	movlw	low (_HMIBoard+48)
  6079  01392C  0100               	movlb	0	; () banked
  6080  01392E  6FCD               	movwf	Button_Poll@pButton& (0+255),b
  6081  013930  0E01               	movlw	high (_HMIBoard+48)
  6082  013932  0100               	movlb	0	; () banked
  6083  013934  6FCE               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6084  013936  0E01               	movlw	1
  6085  013938  0100               	movlb	0	; () banked
  6086  01393A  6FCF               	movwf	Button_Poll@pIncrement& (0+255),b
  6087  01393C  EC8E  F08F         	call	_Button_Poll	;wreg free
  6088                           
  6089                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6090  013940  0E3C               	movlw	low (_HMIBoard+18)
  6091  013942  0100               	movlb	0	; () banked
  6092  013944  6FCD               	movwf	Button_Poll@pButton& (0+255),b
  6093  013946  0E01               	movlw	high (_HMIBoard+18)
  6094  013948  0100               	movlb	0	; () banked
  6095  01394A  6FCE               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6096  01394C  0E01               	movlw	1
  6097  01394E  0100               	movlb	0	; () banked
  6098  013950  6FCF               	movwf	Button_Poll@pIncrement& (0+255),b
  6099  013952  EC8E  F08F         	call	_Button_Poll	;wreg free
  6100                           
  6101                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6102  013956  0E32               	movlw	low (_HMIBoard+8)
  6103  013958  0100               	movlb	0	; () banked
  6104  01395A  6FCD               	movwf	Button_Poll@pButton& (0+255),b
  6105  01395C  0E01               	movlw	high (_HMIBoard+8)
  6106  01395E  0100               	movlb	0	; () banked
  6107  013960  6FCE               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6108  013962  0E01               	movlw	1
  6109  013964  0100               	movlb	0	; () banked
  6110  013966  6FCF               	movwf	Button_Poll@pIncrement& (0+255),b
  6111  013968  EC8E  F08F         	call	_Button_Poll	;wreg free
  6112                           
  6113                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6114  01396C  0E46               	movlw	low (_HMIBoard+28)
  6115  01396E  0100               	movlb	0	; () banked
  6116  013970  6FCD               	movwf	Button_Poll@pButton& (0+255),b
  6117  013972  0E01               	movlw	high (_HMIBoard+28)
  6118  013974  0100               	movlb	0	; () banked
  6119  013976  6FCE               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6120  013978  0E01               	movlw	1
  6121  01397A  0100               	movlb	0	; () banked
  6122  01397C  6FCF               	movwf	Button_Poll@pIncrement& (0+255),b
  6123  01397E  EC8E  F08F         	call	_Button_Poll	;wreg free
  6124                           
  6125                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6126  013982  0E50               	movlw	low (_HMIBoard+38)
  6127  013984  0100               	movlb	0	; () banked
  6128  013986  6FCD               	movwf	Button_Poll@pButton& (0+255),b
  6129  013988  0E01               	movlw	high (_HMIBoard+38)
  6130  01398A  0100               	movlb	0	; () banked
  6131  01398C  6FCE               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6132  01398E  0E01               	movlw	1
  6133  013990  0100               	movlb	0	; () banked
  6134  013992  6FCF               	movwf	Button_Poll@pIncrement& (0+255),b
  6135  013994  EC8E  F08F         	call	_Button_Poll	;wreg free
  6136  013998  0012               	return		;funcret
  6137  01399A                     __end_of_HMI_Poll:
  6138                           	opt stack 0
  6139                           tosu	equ	0xFFF
  6140                           tosh	equ	0xFFE
  6141                           tosl	equ	0xFFD
  6142                           pclath	equ	0xFFA
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           postinc0	equ	0xFEE
  6150                           plusw0	equ	0xFEB
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1h	equ	0xFE2
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           plusw2	equ	0xFDB
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _Button_Poll *****************
  6164 ;; Defined at:
  6165 ;;		line 57 in file "Library/Button.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6168 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6169 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  Pin             1   35[BANK0 ] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      unsigned char 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6181 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;Total ram usage:        9 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:   14
  6188 ;; This function calls:
  6189 ;;		_Event_DIPSwitch
  6190 ;;		_Event_HMI_DIPSwitch
  6191 ;;		_Event_HMI_DownButton
  6192 ;;		_Event_HMI_LeftButton
  6193 ;;		_Event_HMI_RightButton
  6194 ;;		_Event_HMI_UpButton
  6195 ;;		_Event_TestButton
  6196 ;;		_HMI_DIPSwitch
  6197 ;;		_HMI_DownSwitch
  6198 ;;		_HMI_LeftSwitch
  6199 ;;		_HMI_RightSwitch
  6200 ;;		_HMI_UpSwitch
  6201 ;;		_MXK_DIPSwitch
  6202 ;;		_MXK_TestButton
  6203 ;; This function is called by:
  6204 ;;		_HMI_Poll
  6205 ;;		_MXK_Poll
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text22
  6210  011F1C                     __ptext22:
  6211                           	opt stack 0
  6212  011F1C                     _Button_Poll:
  6213                           	opt stack 10
  6214                           
  6215                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6216                           
  6217                           ;incstack = 0
  6218  011F1C  0100               	movlb	0	; () banked
  6219  011F1E  EE20 F007          	lfsr	2,7
  6220  011F22  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6221  011F24  26D9               	addwf	fsr2l,f,c
  6222  011F26  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6223  011F28  22DA               	addwfc	fsr2h,f,c
  6224  011F2A  D801               	call	u7088
  6225  011F2C  D00A               	goto	u7089
  6226  011F2E                     u7088:
  6227  011F2E  0005               	push	
  6228  011F30  6EFA               	movwf	pclath,c
  6229  011F32  50DE               	movf	postinc2,w,c
  6230  011F34  6EFD               	movwf	tosl,c
  6231  011F36  50DE               	movf	postinc2,w,c
  6232  011F38  6EFE               	movwf	tosh,c
  6233  011F3A  50DE               	movf	postinc2,w,c
  6234  011F3C  6EFF               	movwf	tosu,c
  6235  011F3E  50FA               	movf	pclath,w,c
  6236  011F40  0012               	return		;indir
  6237  011F42                     u7089:
  6238  011F42  0100               	movlb	0	; () banked
  6239  011F44  6FD5               	movwf	Button_Poll@Pin& (0+255),b
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;Button.c: 61: if (pButton->mState == Pin)
  6243  011F46  C0CD  FFD9         	movff	Button_Poll@pButton,fsr2l
  6244  011F4A  C0CE  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6245  011F4E  0100               	movlb	0	; () banked
  6246  011F50  51D5               	movf	Button_Poll@Pin& (0+255),w,b
  6247  011F52  18DE               	xorwf	postinc2,w,c
  6248  011F54  A4D8               	btfss	status,2,c
  6249  011F56  D021               	goto	l11
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;Button.c: 62: {
  6253                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6254  011F58  0100               	movlb	0	; () banked
  6255  011F5A  EE20 F001          	lfsr	2,1
  6256  011F5E  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6257  011F60  26D9               	addwf	fsr2l,f,c
  6258  011F62  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6259  011F64  22DA               	addwfc	fsr2h,f,c
  6260  011F66  0100               	movlb	0	; () banked
  6261  011F68  51CF               	movf	Button_Poll@pIncrement& (0+255),w,b
  6262  011F6A  5CDE               	subwf	postinc2,w,c
  6263  011F6C  B0D8               	btfsc	status,0,c
  6264  011F6E  D00A               	goto	l12
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;Button.c: 66: pButton->mCount = 0;
  6268  011F70  0100               	movlb	0	; () banked
  6269  011F72  EE20 F001          	lfsr	2,1
  6270  011F76  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6271  011F78  26D9               	addwf	fsr2l,f,c
  6272  011F7A  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6273  011F7C  22DA               	addwfc	fsr2h,f,c
  6274  011F7E  0E00               	movlw	0
  6275  011F80  6EDF               	movwf	indf2,c
  6276  011F82  0012               	return	
  6277  011F84                     l12:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;Button.c: 67: else
  6281                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6282                           
  6283                           ; BSR set to: 0
  6284  011F84  0100               	movlb	0	; () banked
  6285  011F86  EE20 F001          	lfsr	2,1
  6286  011F8A  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6287  011F8C  26D9               	addwf	fsr2l,f,c
  6288  011F8E  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6289  011F90  22DA               	addwfc	fsr2h,f,c
  6290  011F92  0100               	movlb	0	; () banked
  6291  011F94  51CF               	movf	Button_Poll@pIncrement& (0+255),w,b
  6292  011F96  5EDF               	subwf	indf2,f,c
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;Button.c: 69: }
  6296  011F98  0012               	return	
  6297  011F9A                     l11:
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6301                           
  6302                           ; BSR set to: 0
  6303  011F9A  0100               	movlb	0	; () banked
  6304  011F9C  EE20 F001          	lfsr	2,1
  6305  011FA0  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6306  011FA2  26D9               	addwf	fsr2l,f,c
  6307  011FA4  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6308  011FA6  22DA               	addwfc	fsr2h,f,c
  6309  011FA8  50DF               	movf	indf2,w,c
  6310  011FAA  0100               	movlb	0	; () banked
  6311  011FAC  6FD0               	movwf	??_Button_Poll& (0+255),b
  6312  011FAE  6BD1               	clrf	(??_Button_Poll+1)& (0+255),b
  6313  011FB0  0100               	movlb	0	; () banked
  6314  011FB2  51CF               	movf	Button_Poll@pIncrement& (0+255),w,b
  6315  011FB4  0100               	movlb	0	; () banked
  6316  011FB6  27D0               	addwf	??_Button_Poll& (0+255),f,b
  6317  011FB8  0E00               	movlw	0
  6318  011FBA  23D1               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6319  011FBC  0100               	movlb	0	; () banked
  6320  011FBE  EE20 F001          	lfsr	2,1
  6321  011FC2  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6322  011FC4  26D9               	addwf	fsr2l,f,c
  6323  011FC6  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6324  011FC8  22DA               	addwfc	fsr2h,f,c
  6325  011FCA  50DF               	movf	indf2,w,c
  6326  011FCC  0100               	movlb	0	; () banked
  6327  011FCE  6FD2               	movwf	(??_Button_Poll+2)& (0+255),b
  6328  011FD0  6BD3               	clrf	(??_Button_Poll+3)& (0+255),b
  6329  011FD2  0100               	movlb	0	; () banked
  6330  011FD4  51D0               	movf	??_Button_Poll& (0+255),w,b
  6331  011FD6  0100               	movlb	0	; () banked
  6332  011FD8  5DD2               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6333  011FDA  0100               	movlb	0	; () banked
  6334  011FDC  51D3               	movf	(??_Button_Poll+3)& (0+255),w,b
  6335  011FDE  0A80               	xorlw	128
  6336  011FE0  0100               	movlb	0	; () banked
  6337  011FE2  6FD4               	movwf	(??_Button_Poll+4)& (0+255),b
  6338  011FE4  0100               	movlb	0	; () banked
  6339  011FE6  51D1               	movf	(??_Button_Poll+1)& (0+255),w,b
  6340  011FE8  0A80               	xorlw	128
  6341  011FEA  0100               	movlb	0	; () banked
  6342  011FEC  59D4               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6343  011FEE  B0D8               	btfsc	status,0,c
  6344  011FF0  0012               	return	
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;Button.c: 73: {
  6348                           ;Button.c: 75: pButton->mCount += pIncrement;
  6349  011FF2  0100               	movlb	0	; () banked
  6350  011FF4  EE20 F001          	lfsr	2,1
  6351  011FF8  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6352  011FFA  26D9               	addwf	fsr2l,f,c
  6353  011FFC  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6354  011FFE  22DA               	addwfc	fsr2h,f,c
  6355  012000  0100               	movlb	0	; () banked
  6356  012002  51CF               	movf	Button_Poll@pIncrement& (0+255),w,b
  6357  012004  26DF               	addwf	indf2,f,c
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6361  012006  0100               	movlb	0	; () banked
  6362  012008  EE20 F002          	lfsr	2,2
  6363  01200C  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6364  01200E  26D9               	addwf	fsr2l,f,c
  6365  012010  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6366  012012  22DA               	addwfc	fsr2h,f,c
  6367  012014  0100               	movlb	0	; () banked
  6368  012016  EE10 F001          	lfsr	1,1
  6369  01201A  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6370  01201C  26E1               	addwf	fsr1l,f,c
  6371  01201E  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6372  012020  22E2               	addwfc	fsr1h,f,c
  6373  012022  50E7               	movf	indf1,w,c
  6374  012024  0100               	movlb	0	; () banked
  6375  012026  6FD2               	movwf	(??_Button_Poll+2)& (0+255),b
  6376  012028  6BD3               	clrf	(??_Button_Poll+3)& (0+255),b
  6377  01202A  50DE               	movf	postinc2,w,c
  6378  01202C  0100               	movlb	0	; () banked
  6379  01202E  5DD2               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6380  012030  50DE               	movf	postinc2,w,c
  6381  012032  0100               	movlb	0	; () banked
  6382  012034  59D3               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6383  012036  A0D8               	btfss	status,0,c
  6384  012038  0012               	return	
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;Button.c: 77: {
  6388                           ;Button.c: 79: pButton->mState = Pin;
  6389  01203A  C0CD  FFD9         	movff	Button_Poll@pButton,fsr2l
  6390  01203E  C0CE  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6391  012042  C0D5  FFDF         	movff	Button_Poll@Pin,indf2
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;Button.c: 80: pButton->mCount = 0;
  6395  012046  0100               	movlb	0	; () banked
  6396  012048  EE20 F001          	lfsr	2,1
  6397  01204C  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6398  01204E  26D9               	addwf	fsr2l,f,c
  6399  012050  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6400  012052  22DA               	addwfc	fsr2h,f,c
  6401  012054  0E00               	movlw	0
  6402  012056  6EDF               	movwf	indf2,c
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;Button.c: 83: pButton->mFunction(Pin);
  6406  012058  0100               	movlb	0	; () banked
  6407  01205A  EE20 F004          	lfsr	2,4
  6408  01205E  51CD               	movf	Button_Poll@pButton& (0+255),w,b
  6409  012060  26D9               	addwf	fsr2l,f,c
  6410  012062  51CE               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6411  012064  22DA               	addwfc	fsr2h,f,c
  6412  012066  D801               	call	u7138
  6413  012068  0012               	return	
  6414  01206A                     u7138:
  6415  01206A  0005               	push	
  6416  01206C  6EFA               	movwf	pclath,c
  6417  01206E  50DE               	movf	postinc2,w,c
  6418  012070  6EFD               	movwf	tosl,c
  6419  012072  50DE               	movf	postinc2,w,c
  6420  012074  6EFE               	movwf	tosh,c
  6421  012076  50DE               	movf	postinc2,w,c
  6422  012078  6EFF               	movwf	tosu,c
  6423  01207A  50FA               	movf	pclath,w,c
  6424  01207C  0100               	movlb	0	; () banked
  6425  01207E  51D5               	movf	Button_Poll@Pin& (0+255),w,b
  6426  012080  0012               	return		;indir
  6427  012082                     __end_of_Button_Poll:
  6428                           	opt stack 0
  6429                           tosu	equ	0xFFF
  6430                           tosh	equ	0xFFE
  6431                           tosl	equ	0xFFD
  6432                           pclath	equ	0xFFA
  6433                           tblptru	equ	0xFF8
  6434                           tblptrh	equ	0xFF7
  6435                           tblptrl	equ	0xFF6
  6436                           tablat	equ	0xFF5
  6437                           prodh	equ	0xFF4
  6438                           prodl	equ	0xFF3
  6439                           postinc0	equ	0xFEE
  6440                           plusw0	equ	0xFEB
  6441                           wreg	equ	0xFE8
  6442                           indf1	equ	0xFE7
  6443                           postdec1	equ	0xFE5
  6444                           fsr1h	equ	0xFE2
  6445                           fsr1l	equ	0xFE1
  6446                           indf2	equ	0xFDF
  6447                           postinc2	equ	0xFDE
  6448                           postdec2	equ	0xFDD
  6449                           plusw2	equ	0xFDB
  6450                           fsr2h	equ	0xFDA
  6451                           fsr2l	equ	0xFD9
  6452                           status	equ	0xFD8
  6453                           
  6454 ;; *************** function _MXK_DIPSwitch *****************
  6455 ;; Defined at:
  6456 ;;		line 24 in file "Library/MXK.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      unsigned char 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;Total ram usage:        0 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    8
  6477 ;; This function calls:
  6478 ;;		_Port_GetQuad
  6479 ;; This function is called by:
  6480 ;;		_FunctInitButton
  6481 ;;		_Button_Poll
  6482 ;;		_getMode
  6483 ;;		_continuousMode
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text23
  6488  014910                     __ptext23:
  6489                           	opt stack 0
  6490  014910                     _MXK_DIPSwitch:
  6491                           	opt stack 17
  6492                           
  6493                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6494                           
  6495                           ;incstack = 0
  6496  014910  0E87               	movlw	low _PortD
  6497  014912  0100               	movlb	0	; () banked
  6498  014914  6FB2               	movwf	Port_GetQuad@pInput& (0+255),b
  6499  014916  0E00               	movlw	high _PortD
  6500  014918  0100               	movlb	0	; () banked
  6501  01491A  6FB3               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6502  01491C  0E00               	movlw	0
  6503  01491E  0100               	movlb	0	; () banked
  6504  014920  6FB4               	movwf	Port_GetQuad@pQuad& (0+255),b
  6505  014922  EC4B  F0A0         	call	_Port_GetQuad
  6506  014926  0012               	return	
  6507  014928                     __end_of_MXK_DIPSwitch:
  6508                           	opt stack 0
  6509                           tosu	equ	0xFFF
  6510                           tosh	equ	0xFFE
  6511                           tosl	equ	0xFFD
  6512                           pclath	equ	0xFFA
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           postinc0	equ	0xFEE
  6520                           plusw0	equ	0xFEB
  6521                           wreg	equ	0xFE8
  6522                           indf1	equ	0xFE7
  6523                           postdec1	equ	0xFE5
  6524                           fsr1h	equ	0xFE2
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           plusw2	equ	0xFDB
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _HMI_DIPSwitch *****************
  6535 ;; Defined at:
  6536 ;;		line 47 in file "HMI.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      unsigned char 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;Total ram usage:        0 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    8
  6557 ;; This function calls:
  6558 ;;		_Port_GetQuad
  6559 ;; This function is called by:
  6560 ;;		_HMI_Init
  6561 ;;		_Button_Poll
  6562 ;;		_getMode
  6563 ;;		_continuousMode
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text24
  6568  014928                     __ptext24:
  6569                           	opt stack 0
  6570  014928                     _HMI_DIPSwitch:
  6571                           	opt stack 15
  6572                           
  6573                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6574                           
  6575                           ;incstack = 0
  6576  014928  0E7D               	movlw	low _PortE
  6577  01492A  0100               	movlb	0	; () banked
  6578  01492C  6FB2               	movwf	Port_GetQuad@pInput& (0+255),b
  6579  01492E  0E00               	movlw	high _PortE
  6580  014930  0100               	movlb	0	; () banked
  6581  014932  6FB3               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6582  014934  0E00               	movlw	0
  6583  014936  0100               	movlb	0	; () banked
  6584  014938  6FB4               	movwf	Port_GetQuad@pQuad& (0+255),b
  6585  01493A  EC4B  F0A0         	call	_Port_GetQuad	;wreg free
  6586  01493E  0012               	return	
  6587  014940                     __end_of_HMI_DIPSwitch:
  6588                           	opt stack 0
  6589                           tosu	equ	0xFFF
  6590                           tosh	equ	0xFFE
  6591                           tosl	equ	0xFFD
  6592                           pclath	equ	0xFFA
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           postinc0	equ	0xFEE
  6600                           plusw0	equ	0xFEB
  6601                           wreg	equ	0xFE8
  6602                           indf1	equ	0xFE7
  6603                           postdec1	equ	0xFE5
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           plusw2	equ	0xFDB
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _HMI_DownSwitch *****************
  6615 ;; Defined at:
  6616 ;;		line 42 in file "HMI.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      unsigned char 
  6623 ;; Registers used:
  6624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    8
  6637 ;; This function calls:
  6638 ;;		_Port_GetPin
  6639 ;; This function is called by:
  6640 ;;		_HMI_Init
  6641 ;;		_Button_Poll
  6642 ;;		_getMode
  6643 ;;		_continuousMode
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text25
  6648  014940                     __ptext25:
  6649                           	opt stack 0
  6650  014940                     _HMI_DownSwitch:
  6651                           	opt stack 15
  6652                           
  6653                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6654                           
  6655                           ;incstack = 0
  6656  014940  0E7D               	movlw	low _PortE
  6657  014942  0100               	movlb	0	; () banked
  6658  014944  6FB2               	movwf	Port_GetPin@pInput& (0+255),b
  6659  014946  0E00               	movlw	high _PortE
  6660  014948  0100               	movlb	0	; () banked
  6661  01494A  6FB3               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6662  01494C  0E06               	movlw	6
  6663  01494E  0100               	movlb	0	; () banked
  6664  014950  6FB4               	movwf	Port_GetPin@pPin& (0+255),b
  6665  014952  ECB8  F0A0         	call	_Port_GetPin	;wreg free
  6666  014956  0012               	return	
  6667  014958                     __end_of_HMI_DownSwitch:
  6668                           	opt stack 0
  6669                           tosu	equ	0xFFF
  6670                           tosh	equ	0xFFE
  6671                           tosl	equ	0xFFD
  6672                           pclath	equ	0xFFA
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           postinc0	equ	0xFEE
  6680                           plusw0	equ	0xFEB
  6681                           wreg	equ	0xFE8
  6682                           indf1	equ	0xFE7
  6683                           postdec1	equ	0xFE5
  6684                           fsr1h	equ	0xFE2
  6685                           fsr1l	equ	0xFE1
  6686                           indf2	equ	0xFDF
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           plusw2	equ	0xFDB
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _HMI_UpSwitch *****************
  6695 ;; Defined at:
  6696 ;;		line 37 in file "HMI.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      unsigned char 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    8
  6717 ;; This function calls:
  6718 ;;		_Port_GetPin
  6719 ;; This function is called by:
  6720 ;;		_HMI_Init
  6721 ;;		_Button_Poll
  6722 ;;		_getMode
  6723 ;;		_continuousMode
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text26
  6728  014958                     __ptext26:
  6729                           	opt stack 0
  6730  014958                     _HMI_UpSwitch:
  6731                           	opt stack 17
  6732                           
  6733                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6734                           
  6735                           ;incstack = 0
  6736  014958  0E7D               	movlw	low _PortE
  6737  01495A  0100               	movlb	0	; () banked
  6738  01495C  6FB2               	movwf	Port_GetPin@pInput& (0+255),b
  6739  01495E  0E00               	movlw	high _PortE
  6740  014960  0100               	movlb	0	; () banked
  6741  014962  6FB3               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6742  014964  0E07               	movlw	7
  6743  014966  0100               	movlb	0	; () banked
  6744  014968  6FB4               	movwf	Port_GetPin@pPin& (0+255),b
  6745  01496A  ECB8  F0A0         	call	_Port_GetPin	;wreg free
  6746  01496E  0012               	return	
  6747  014970                     __end_of_HMI_UpSwitch:
  6748                           	opt stack 0
  6749                           tosu	equ	0xFFF
  6750                           tosh	equ	0xFFE
  6751                           tosl	equ	0xFFD
  6752                           pclath	equ	0xFFA
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           postinc0	equ	0xFEE
  6760                           plusw0	equ	0xFEB
  6761                           wreg	equ	0xFE8
  6762                           indf1	equ	0xFE7
  6763                           postdec1	equ	0xFE5
  6764                           fsr1h	equ	0xFE2
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           plusw2	equ	0xFDB
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _HMI_RightSwitch *****************
  6775 ;; Defined at:
  6776 ;;		line 32 in file "HMI.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      unsigned char 
  6783 ;; Registers used:
  6784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;Total ram usage:        0 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    8
  6797 ;; This function calls:
  6798 ;;		_Port_GetPin
  6799 ;; This function is called by:
  6800 ;;		_HMI_Init
  6801 ;;		_Button_Poll
  6802 ;;		_getMode
  6803 ;;		_continuousMode
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text27
  6808  014970                     __ptext27:
  6809                           	opt stack 0
  6810  014970                     _HMI_RightSwitch:
  6811                           	opt stack 17
  6812                           
  6813                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  6814                           
  6815                           ;incstack = 0
  6816  014970  0E7D               	movlw	low _PortE
  6817  014972  0100               	movlb	0	; () banked
  6818  014974  6FB2               	movwf	Port_GetPin@pInput& (0+255),b
  6819  014976  0E00               	movlw	high _PortE
  6820  014978  0100               	movlb	0	; () banked
  6821  01497A  6FB3               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6822  01497C  0E04               	movlw	4
  6823  01497E  0100               	movlb	0	; () banked
  6824  014980  6FB4               	movwf	Port_GetPin@pPin& (0+255),b
  6825  014982  ECB8  F0A0         	call	_Port_GetPin	;wreg free
  6826  014986  0012               	return	
  6827  014988                     __end_of_HMI_RightSwitch:
  6828                           	opt stack 0
  6829                           tosu	equ	0xFFF
  6830                           tosh	equ	0xFFE
  6831                           tosl	equ	0xFFD
  6832                           pclath	equ	0xFFA
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           postinc0	equ	0xFEE
  6840                           plusw0	equ	0xFEB
  6841                           wreg	equ	0xFE8
  6842                           indf1	equ	0xFE7
  6843                           postdec1	equ	0xFE5
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           plusw2	equ	0xFDB
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _HMI_LeftSwitch *****************
  6855 ;; Defined at:
  6856 ;;		line 27 in file "HMI.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;		None
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      unsigned char 
  6863 ;; Registers used:
  6864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;Total ram usage:        0 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    8
  6877 ;; This function calls:
  6878 ;;		_Port_GetPin
  6879 ;; This function is called by:
  6880 ;;		_HMI_Init
  6881 ;;		_Button_Poll
  6882 ;;		_getMode
  6883 ;;		_continuousMode
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text28
  6888  014988                     __ptext28:
  6889                           	opt stack 0
  6890  014988                     _HMI_LeftSwitch:
  6891                           	opt stack 15
  6892                           
  6893                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  6894                           
  6895                           ;incstack = 0
  6896  014988  0E7D               	movlw	low _PortE
  6897  01498A  0100               	movlb	0	; () banked
  6898  01498C  6FB2               	movwf	Port_GetPin@pInput& (0+255),b
  6899  01498E  0E00               	movlw	high _PortE
  6900  014990  0100               	movlb	0	; () banked
  6901  014992  6FB3               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6902  014994  0E05               	movlw	5
  6903  014996  0100               	movlb	0	; () banked
  6904  014998  6FB4               	movwf	Port_GetPin@pPin& (0+255),b
  6905  01499A  ECB8  F0A0         	call	_Port_GetPin	;wreg free
  6906  01499E  0012               	return	
  6907  0149A0                     __end_of_HMI_LeftSwitch:
  6908                           	opt stack 0
  6909                           tosu	equ	0xFFF
  6910                           tosh	equ	0xFFE
  6911                           tosl	equ	0xFFD
  6912                           pclath	equ	0xFFA
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           postinc0	equ	0xFEE
  6920                           plusw0	equ	0xFEB
  6921                           wreg	equ	0xFE8
  6922                           indf1	equ	0xFE7
  6923                           postdec1	equ	0xFE5
  6924                           fsr1h	equ	0xFE2
  6925                           fsr1l	equ	0xFE1
  6926                           indf2	equ	0xFDF
  6927                           postinc2	equ	0xFDE
  6928                           postdec2	equ	0xFDD
  6929                           plusw2	equ	0xFDB
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function _MXK_TestButton *****************
  6935 ;; Defined at:
  6936 ;;		line 14 in file "Library/MXK.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;		None
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      unsigned char 
  6943 ;; Registers used:
  6944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;Total ram usage:        0 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    8
  6957 ;; This function calls:
  6958 ;;		_Port_GetPin
  6959 ;; This function is called by:
  6960 ;;		_FunctInitButton
  6961 ;;		_Button_Poll
  6962 ;;		_getMode
  6963 ;;		_continuousMode
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text29
  6968  0149A0                     __ptext29:
  6969                           	opt stack 0
  6970  0149A0                     _MXK_TestButton:
  6971                           	opt stack 17
  6972                           
  6973                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  6974                           
  6975                           ;incstack = 0
  6976  0149A0  0E98               	movlw	low _PortB
  6977  0149A2  0100               	movlb	0	; () banked
  6978  0149A4  6FB2               	movwf	Port_GetPin@pInput& (0+255),b
  6979  0149A6  0E01               	movlw	high _PortB
  6980  0149A8  0100               	movlb	0	; () banked
  6981  0149AA  6FB3               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6982  0149AC  0E04               	movlw	4
  6983  0149AE  0100               	movlb	0	; () banked
  6984  0149B0  6FB4               	movwf	Port_GetPin@pPin& (0+255),b
  6985  0149B2  ECB8  F0A0         	call	_Port_GetPin	;wreg free
  6986  0149B6  0012               	return	
  6987  0149B8                     __end_of_MXK_TestButton:
  6988                           	opt stack 0
  6989                           tosu	equ	0xFFF
  6990                           tosh	equ	0xFFE
  6991                           tosl	equ	0xFFD
  6992                           pclath	equ	0xFFA
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           postinc0	equ	0xFEE
  7000                           plusw0	equ	0xFEB
  7001                           wreg	equ	0xFE8
  7002                           indf1	equ	0xFE7
  7003                           postdec1	equ	0xFE5
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           indf2	equ	0xFDF
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           plusw2	equ	0xFDB
  7010                           fsr2h	equ	0xFDA
  7011                           fsr2l	equ	0xFD9
  7012                           status	equ	0xFD8
  7013                           
  7014 ;; *************** function _Port_GetQuad *****************
  7015 ;; Defined at:
  7016 ;;		line 498 in file "Library/Port.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7019 ;;		 -> PortE(10), PortD(10), 
  7020 ;;  pQuad           1    2[BANK0 ] enum E6776
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  Output          1    5[BANK0 ] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      unsigned char 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:        6 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    7
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_HMI_DIPSwitch
  7043 ;;		_MXK_DIPSwitch
  7044 ;;		_Port_ToggleQuad
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text30
  7049  014096                     __ptext30:
  7050                           	opt stack 0
  7051  014096                     _Port_GetQuad:
  7052                           	opt stack 17
  7053                           
  7054                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7055                           
  7056                           ;incstack = 0
  7057  014096  0100               	movlb	0	; () banked
  7058  014098  EE20 F006          	lfsr	2,6
  7059  01409C  51B2               	movf	Port_GetQuad@pInput& (0+255),w,b
  7060  01409E  26D9               	addwf	fsr2l,f,c
  7061  0140A0  51B3               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7062  0140A2  22DA               	addwfc	fsr2h,f,c
  7063  0140A4  CFDE F0B5          	movff	postinc2,??_Port_GetQuad
  7064  0140A8  CFDD F0B6          	movff	postdec2,??_Port_GetQuad+1
  7065  0140AC  C0B5  FFD9         	movff	??_Port_GetQuad,fsr2l
  7066  0140B0  C0B6  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7067  0140B4  50DF               	movf	indf2,w,c
  7068  0140B6  0100               	movlb	0	; () banked
  7069  0140B8  6FB7               	movwf	Port_GetQuad@Output& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7073  0140BA  0100               	movlb	0	; () banked
  7074  0140BC  51B4               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7075  0140BE  0D04               	mullw	4
  7076  0140C0  28F3               	incf	prodl,w,c
  7077  0140C2  0100               	movlb	0	; () banked
  7078  0140C4  6FB5               	movwf	??_Port_GetQuad& (0+255),b
  7079  0140C6  D003               	goto	u6740
  7080  0140C8                     u6745:
  7081  0140C8  0100               	movlb	0	; () banked
  7082  0140CA  90D8               	bcf	status,0,c
  7083  0140CC  33B7               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7084  0140CE                     u6740:
  7085  0140CE  0100               	movlb	0	; () banked
  7086  0140D0  2FB5               	decfsz	??_Port_GetQuad& (0+255),f,b
  7087  0140D2  D7FA               	goto	u6745
  7088                           
  7089                           ;Port.c: 502: Output &= 0xF;
  7090  0140D4  0E0F               	movlw	15
  7091  0140D6  0100               	movlb	0	; () banked
  7092  0140D8  17B7               	andwf	Port_GetQuad@Output& (0+255),f,b
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;Port.c: 503: return Output;
  7096  0140DA  0100               	movlb	0	; () banked
  7097  0140DC  51B7               	movf	Port_GetQuad@Output& (0+255),w,b
  7098  0140DE  0012               	return	
  7099  0140E0                     __end_of_Port_GetQuad:
  7100                           	opt stack 0
  7101                           tosu	equ	0xFFF
  7102                           tosh	equ	0xFFE
  7103                           tosl	equ	0xFFD
  7104                           pclath	equ	0xFFA
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           postinc0	equ	0xFEE
  7112                           plusw0	equ	0xFEB
  7113                           wreg	equ	0xFE8
  7114                           indf1	equ	0xFE7
  7115                           postdec1	equ	0xFE5
  7116                           fsr1h	equ	0xFE2
  7117                           fsr1l	equ	0xFE1
  7118                           indf2	equ	0xFDF
  7119                           postinc2	equ	0xFDE
  7120                           postdec2	equ	0xFDD
  7121                           plusw2	equ	0xFDB
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126 ;; *************** function _Event_DIPSwitch *****************
  7127 ;; Defined at:
  7128 ;;		line 17 in file "Events.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  pState          1    wreg     unsigned char 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;  pState          1   25[BANK0 ] unsigned char 
  7133 ;;  Bar             1   26[BANK0 ] unsigned char 
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1    wreg      void 
  7136 ;; Registers used:
  7137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;Total ram usage:        2 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:   13
  7150 ;; This function calls:
  7151 ;;		_HMI_GetBar
  7152 ;;		_HMI_SetBar
  7153 ;;		_LED_Toggle
  7154 ;; This function is called by:
  7155 ;;		_FunctInitButton
  7156 ;;		_Button_Poll
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text31
  7161  014638                     __ptext31:
  7162                           	opt stack 0
  7163  014638                     _Event_DIPSwitch:
  7164                           	opt stack 10
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;incstack = 0
  7168                           ;Event_DIPSwitch@pState stored from wreg
  7169  014638  0100               	movlb	0	; () banked
  7170  01463A  6FCB               	movwf	Event_DIPSwitch@pState& (0+255),b
  7171                           
  7172                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
  7173  01463C  EC5C  F0A5         	call	_HMI_GetBar	;wreg free
  7174  014640  0100               	movlb	0	; () banked
  7175  014642  6FCC               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;Events.c: 20: Bar &= 0x0F;
  7179  014644  0E0F               	movlw	15
  7180  014646  0100               	movlb	0	; () banked
  7181  014648  17CC               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;Events.c: 21: pState <<= 4;
  7185  01464A  0100               	movlb	0	; () banked
  7186  01464C  3BCB               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7187  01464E  0EF0               	movlw	240
  7188  014650  17CB               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;Events.c: 24: HMI_SetBar(pState | Bar);
  7192  014652  0100               	movlb	0	; () banked
  7193  014654  51CB               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7194  014656  0100               	movlb	0	; () banked
  7195  014658  11CC               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7196  01465A  EC4A  F0A5         	call	_HMI_SetBar
  7197                           
  7198                           ;Events.c: 27: LED_Toggle(eLED1);
  7199  01465E  0E00               	movlw	0
  7200  014660  EC94  F0A0         	call	_LED_Toggle
  7201  014664  0012               	return		;funcret
  7202  014666                     __end_of_Event_DIPSwitch:
  7203                           	opt stack 0
  7204                           tosu	equ	0xFFF
  7205                           tosh	equ	0xFFE
  7206                           tosl	equ	0xFFD
  7207                           pclath	equ	0xFFA
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           postinc0	equ	0xFEE
  7215                           plusw0	equ	0xFEB
  7216                           wreg	equ	0xFE8
  7217                           indf1	equ	0xFE7
  7218                           postdec1	equ	0xFE5
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           plusw2	equ	0xFDB
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _Event_HMI_DownButton *****************
  7230 ;; Defined at:
  7231 ;;		line 123 in file "Events.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  pState          1    wreg     unsigned char 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  pState          1   25[BANK0 ] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;Total ram usage:        1 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:   13
  7252 ;; This function calls:
  7253 ;;		_HMI_SetDown
  7254 ;;		_HMI_SetNumber
  7255 ;;		_LED_Toggle
  7256 ;; This function is called by:
  7257 ;;		_HMI_Init
  7258 ;;		_Button_Poll
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text32
  7263  014546                     __ptext32:
  7264                           	opt stack 0
  7265  014546                     _Event_HMI_DownButton:
  7266                           	opt stack 10
  7267                           
  7268                           ;incstack = 0
  7269                           ;Event_HMI_DownButton@pState stored from wreg
  7270  014546  0100               	movlb	0	; () banked
  7271  014548  6FCB               	movwf	Event_HMI_DownButton@pState& (0+255),b
  7272                           
  7273                           ;Events.c: 126: HMI_SetDown(pState);
  7274  01454A  0100               	movlb	0	; () banked
  7275  01454C  51CB               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7276  01454E  ECFD  F0A4         	call	_HMI_SetDown
  7277                           
  7278                           ;Events.c: 128: if (pState == 0)
  7279  014552  0100               	movlb	0	; () banked
  7280  014554  51CB               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7281  014556  0100               	movlb	0	; () banked
  7282  014558  A4D8               	btfss	status,2,c
  7283  01455A  D00A               	goto	l1900
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;Events.c: 129: {
  7287                           ;Events.c: 130: val -= 1;
  7288  01455C  0100               	movlb	0	; () banked
  7289  01455E  076D               	decf	_val& (0+255),f,b
  7290  014560  A0D8               	btfss	status,0,c
  7291  014562  076E               	decf	(_val+1)& (0+255),f,b
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;Events.c: 131: HMI_SetNumber(val);
  7295  014564  C06D  F0C8         	movff	_val,HMI_SetNumber@pInput
  7296  014568  C06E  F0C9         	movff	_val+1,HMI_SetNumber@pInput+1
  7297  01456C  EC49  F0A3         	call	_HMI_SetNumber	;wreg free
  7298  014570                     l1900:
  7299                           
  7300                           ;Events.c: 132: }
  7301                           ;Events.c: 135: LED_Toggle(eLED1);
  7302  014570  0E00               	movlw	0
  7303  014572  EC94  F0A0         	call	_LED_Toggle
  7304  014576  0012               	return		;funcret
  7305  014578                     __end_of_Event_HMI_DownButton:
  7306                           	opt stack 0
  7307                           tosu	equ	0xFFF
  7308                           tosh	equ	0xFFE
  7309                           tosl	equ	0xFFD
  7310                           pclath	equ	0xFFA
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           postinc0	equ	0xFEE
  7318                           plusw0	equ	0xFEB
  7319                           wreg	equ	0xFE8
  7320                           indf1	equ	0xFE7
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _Event_HMI_UpButton *****************
  7333 ;; Defined at:
  7334 ;;		line 108 in file "Events.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  pState          1    wreg     unsigned char 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  pState          1   25[BANK0 ] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;Total ram usage:        1 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:   13
  7355 ;; This function calls:
  7356 ;;		_HMI_SetNumber
  7357 ;;		_HMI_SetUp
  7358 ;;		_LED_Toggle
  7359 ;; This function is called by:
  7360 ;;		_HMI_Init
  7361 ;;		_Button_Poll
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           	psect	text33
  7366  014578                     __ptext33:
  7367                           	opt stack 0
  7368  014578                     _Event_HMI_UpButton:
  7369                           	opt stack 10
  7370                           
  7371                           ;incstack = 0
  7372                           ;Event_HMI_UpButton@pState stored from wreg
  7373  014578  0100               	movlb	0	; () banked
  7374  01457A  6FCB               	movwf	Event_HMI_UpButton@pState& (0+255),b
  7375                           
  7376                           ;Events.c: 111: HMI_SetUp(pState);
  7377  01457C  0100               	movlb	0	; () banked
  7378  01457E  51CB               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7379  014580  ECDC  F0A4         	call	_HMI_SetUp
  7380                           
  7381                           ;Events.c: 113: if (pState == 0)
  7382  014584  0100               	movlb	0	; () banked
  7383  014586  51CB               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7384  014588  0100               	movlb	0	; () banked
  7385  01458A  A4D8               	btfss	status,2,c
  7386  01458C  D009               	goto	l1896
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;Events.c: 114: {
  7390                           ;Events.c: 115: val += 1;
  7391  01458E  0100               	movlb	0	; () banked
  7392  014590  4B6D               	infsnz	_val& (0+255),f,b
  7393  014592  2B6E               	incf	(_val+1)& (0+255),f,b
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;Events.c: 116: HMI_SetNumber(val);
  7397  014594  C06D  F0C8         	movff	_val,HMI_SetNumber@pInput
  7398  014598  C06E  F0C9         	movff	_val+1,HMI_SetNumber@pInput+1
  7399  01459C  EC49  F0A3         	call	_HMI_SetNumber	;wreg free
  7400  0145A0                     l1896:
  7401                           
  7402                           ;Events.c: 117: }
  7403                           ;Events.c: 120: LED_Toggle(eLED1);
  7404  0145A0  0E00               	movlw	0
  7405  0145A2  EC94  F0A0         	call	_LED_Toggle
  7406  0145A6  0012               	return		;funcret
  7407  0145A8                     __end_of_Event_HMI_UpButton:
  7408                           	opt stack 0
  7409                           tosu	equ	0xFFF
  7410                           tosh	equ	0xFFE
  7411                           tosl	equ	0xFFD
  7412                           pclath	equ	0xFFA
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           postinc0	equ	0xFEE
  7420                           plusw0	equ	0xFEB
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           plusw2	equ	0xFDB
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _Event_HMI_RightButton *****************
  7435 ;; Defined at:
  7436 ;;		line 91 in file "Events.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  pState          1    wreg     unsigned char 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  pState          1   25[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        1 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:   13
  7457 ;; This function calls:
  7458 ;;		_HMI_SetBar
  7459 ;;		_HMI_SetRight
  7460 ;;		_LED_Toggle
  7461 ;; This function is called by:
  7462 ;;		_HMI_Init
  7463 ;;		_Button_Poll
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	text34
  7468  0141FC                     __ptext34:
  7469                           	opt stack 0
  7470  0141FC                     _Event_HMI_RightButton:
  7471                           	opt stack 10
  7472                           
  7473                           ;incstack = 0
  7474                           ;Event_HMI_RightButton@pState stored from wreg
  7475  0141FC  0100               	movlb	0	; () banked
  7476  0141FE  6FCB               	movwf	Event_HMI_RightButton@pState& (0+255),b
  7477                           
  7478                           ;Events.c: 94: HMI_SetRight(pState);
  7479  014200  0100               	movlb	0	; () banked
  7480  014202  51CB               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7481  014204  ECE7  F0A4         	call	_HMI_SetRight
  7482                           
  7483                           ;Events.c: 96: if (pState == 0)
  7484  014208  0100               	movlb	0	; () banked
  7485  01420A  51CB               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7486  01420C  0100               	movlb	0	; () banked
  7487  01420E  A4D8               	btfss	status,2,c
  7488  014210  D013               	goto	l1891
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;Events.c: 97: {
  7492                           ;Events.c: 98: if (pShiftVal == 0)
  7493  014212  0100               	movlb	0	; () banked
  7494  014214  516B               	movf	_pShiftVal& (0+255),w,b
  7495  014216  0100               	movlb	0	; () banked
  7496  014218  116C               	iorwf	(_pShiftVal+1)& (0+255),w,b
  7497  01421A  A4D8               	btfss	status,2,c
  7498  01421C  D005               	goto	l1892
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;Events.c: 99: pShiftVal = 0xFF00;
  7502  01421E  0EFF               	movlw	255
  7503  014220  0100               	movlb	0	; () banked
  7504  014222  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7505  014224  0E00               	movlw	0
  7506  014226  6F6B               	movwf	_pShiftVal& (0+255),b
  7507  014228                     l1892:
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;Events.c: 100: pShiftVal >>= 1;
  7511                           
  7512                           ; BSR set to: 0
  7513  014228  0100               	movlb	0	; () banked
  7514  01422A  90D8               	bcf	status,0,c
  7515  01422C  336C               	rrcf	(_pShiftVal+1)& (0+255),f,b
  7516  01422E  336B               	rrcf	_pShiftVal& (0+255),f,b
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
  7520  014230  0100               	movlb	0	; () banked
  7521  014232  516B               	movf	_pShiftVal& (0+255),w,b
  7522  014234  EC4A  F0A5         	call	_HMI_SetBar
  7523  014238                     l1891:
  7524                           
  7525                           ;Events.c: 103: }
  7526                           ;Events.c: 105: LED_Toggle(eLED1);
  7527  014238  0E00               	movlw	0
  7528  01423A  EC94  F0A0         	call	_LED_Toggle
  7529  01423E  0012               	return		;funcret
  7530  014240                     __end_of_Event_HMI_RightButton:
  7531                           	opt stack 0
  7532                           tosu	equ	0xFFF
  7533                           tosh	equ	0xFFE
  7534                           tosl	equ	0xFFD
  7535                           pclath	equ	0xFFA
  7536                           tblptru	equ	0xFF8
  7537                           tblptrh	equ	0xFF7
  7538                           tblptrl	equ	0xFF6
  7539                           tablat	equ	0xFF5
  7540                           prodh	equ	0xFF4
  7541                           prodl	equ	0xFF3
  7542                           postinc0	equ	0xFEE
  7543                           plusw0	equ	0xFEB
  7544                           wreg	equ	0xFE8
  7545                           indf1	equ	0xFE7
  7546                           postdec1	equ	0xFE5
  7547                           fsr1h	equ	0xFE2
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           plusw2	equ	0xFDB
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function _Event_HMI_LeftButton *****************
  7558 ;; Defined at:
  7559 ;;		line 71 in file "Events.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  pState          1    wreg     unsigned char 
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  pState          1   25[BANK0 ] unsigned char 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;Total ram usage:        1 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:   13
  7580 ;; This function calls:
  7581 ;;		_HMI_SetBar
  7582 ;;		_HMI_SetLeft
  7583 ;;		_LED_Toggle
  7584 ;; This function is called by:
  7585 ;;		_HMI_Init
  7586 ;;		_Button_Poll
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text35
  7591  013E58                     __ptext35:
  7592                           	opt stack 0
  7593  013E58                     _Event_HMI_LeftButton:
  7594                           	opt stack 10
  7595                           
  7596                           ;incstack = 0
  7597                           ;Event_HMI_LeftButton@pState stored from wreg
  7598  013E58  0100               	movlb	0	; () banked
  7599  013E5A  6FCB               	movwf	Event_HMI_LeftButton@pState& (0+255),b
  7600                           
  7601                           ;Events.c: 74: HMI_SetLeft(pState);
  7602  013E5C  0100               	movlb	0	; () banked
  7603  013E5E  51CB               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7604  013E60  ECF2  F0A4         	call	_HMI_SetLeft
  7605                           
  7606                           ;Events.c: 76: if (pState == 0)
  7607  013E64  0100               	movlb	0	; () banked
  7608  013E66  51CB               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7609  013E68  0100               	movlb	0	; () banked
  7610  013E6A  A4D8               	btfss	status,2,c
  7611  013E6C  D01D               	goto	l1884
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;Events.c: 77: {
  7615                           ;Events.c: 78: pShiftVal <<= 1;
  7616  013E6E  0100               	movlb	0	; () banked
  7617  013E70  90D8               	bcf	status,0,c
  7618  013E72  376B               	rlcf	_pShiftVal& (0+255),f,b
  7619  013E74  376C               	rlcf	(_pShiftVal+1)& (0+255),f,b
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;Events.c: 79: if (pShiftVal == 0xFF00)
  7623  013E76  0100               	movlb	0	; () banked
  7624  013E78  296C               	incf	(_pShiftVal+1)& (0+255),w,b
  7625  013E7A  0100               	movlb	0	; () banked
  7626  013E7C  116B               	iorwf	_pShiftVal& (0+255),w,b
  7627  013E7E  A4D8               	btfss	status,2,c
  7628  013E80  D006               	goto	l1885
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;Events.c: 80: pShiftVal = 0;
  7632  013E82  0E00               	movlw	0
  7633  013E84  0100               	movlb	0	; () banked
  7634  013E86  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7635  013E88  0E00               	movlw	0
  7636  013E8A  6F6B               	movwf	_pShiftVal& (0+255),b
  7637  013E8C  D009               	goto	l1887
  7638  013E8E                     l1885:
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;Events.c: 81: else if (pShiftVal < 0xFF)
  7642                           
  7643                           ; BSR set to: 0
  7644  013E8E  0100               	movlb	0	; () banked
  7645  013E90  516C               	movf	(_pShiftVal+1)& (0+255),w,b
  7646  013E92  E106               	bnz	l10602
  7647  013E94  0100               	movlb	0	; () banked
  7648  013E96  296B               	incf	_pShiftVal& (0+255),w,b
  7649  013E98  B0D8               	btfsc	status,0,c
  7650  013E9A  D002               	goto	l1887
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;Events.c: 82: pShiftVal |= 1;
  7654  013E9C  0100               	movlb	0	; () banked
  7655  013E9E  816B               	bsf	_pShiftVal& (0+255),0,b
  7656  013EA0                     l1887:
  7657  013EA0                     l10602:
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
  7661  013EA0  0100               	movlb	0	; () banked
  7662  013EA2  516B               	movf	_pShiftVal& (0+255),w,b
  7663  013EA4  EC4A  F0A5         	call	_HMI_SetBar
  7664  013EA8                     l1884:
  7665                           
  7666                           ;Events.c: 85: }
  7667                           ;Events.c: 88: LED_Toggle(eLED1);
  7668  013EA8  0E00               	movlw	0
  7669  013EAA  EC94  F0A0         	call	_LED_Toggle
  7670  013EAE  0012               	return		;funcret
  7671  013EB0                     __end_of_Event_HMI_LeftButton:
  7672                           	opt stack 0
  7673                           tosu	equ	0xFFF
  7674                           tosh	equ	0xFFE
  7675                           tosl	equ	0xFFD
  7676                           pclath	equ	0xFFA
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           postinc0	equ	0xFEE
  7684                           plusw0	equ	0xFEB
  7685                           wreg	equ	0xFE8
  7686                           indf1	equ	0xFE7
  7687                           postdec1	equ	0xFE5
  7688                           fsr1h	equ	0xFE2
  7689                           fsr1l	equ	0xFE1
  7690                           indf2	equ	0xFDF
  7691                           postinc2	equ	0xFDE
  7692                           postdec2	equ	0xFDD
  7693                           plusw2	equ	0xFDB
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8
  7697                           
  7698 ;; *************** function _Event_HMI_DIPSwitch *****************
  7699 ;; Defined at:
  7700 ;;		line 30 in file "Events.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  pState          1    wreg     unsigned char 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  pState          1   25[BANK0 ] unsigned char 
  7705 ;;  Bar             1   26[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        2 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:   13
  7722 ;; This function calls:
  7723 ;;		_HMI_GetBar
  7724 ;;		_HMI_SetBar
  7725 ;;		_LED_Toggle
  7726 ;; This function is called by:
  7727 ;;		_HMI_Init
  7728 ;;		_Button_Poll
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text36
  7733  014666                     __ptext36:
  7734                           	opt stack 0
  7735  014666                     _Event_HMI_DIPSwitch:
  7736                           	opt stack 10
  7737                           
  7738                           ;incstack = 0
  7739                           ;Event_HMI_DIPSwitch@pState stored from wreg
  7740  014666  0100               	movlb	0	; () banked
  7741  014668  6FCB               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
  7742                           
  7743                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
  7744  01466A  EC5C  F0A5         	call	_HMI_GetBar	;wreg free
  7745  01466E  0100               	movlb	0	; () banked
  7746  014670  6FCC               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;Events.c: 33: HMI_SetBar(pState | Bar);
  7750  014672  0100               	movlb	0	; () banked
  7751  014674  51CB               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
  7752  014676  0100               	movlb	0	; () banked
  7753  014678  11CC               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
  7754  01467A  EC4A  F0A5         	call	_HMI_SetBar
  7755                           
  7756                           ;Events.c: 35: Bar &= 0xF0;
  7757  01467E  0EF0               	movlw	240
  7758  014680  0100               	movlb	0	; () banked
  7759  014682  17CC               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;Events.c: 36: pState &= 0x0F;
  7763  014684  0E0F               	movlw	15
  7764  014686  0100               	movlb	0	; () banked
  7765  014688  17CB               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;Events.c: 42: LED_Toggle(eLED1);
  7769  01468A  0E00               	movlw	0
  7770  01468C  EC94  F0A0         	call	_LED_Toggle
  7771  014690  0012               	return		;funcret
  7772  014692                     __end_of_Event_HMI_DIPSwitch:
  7773                           	opt stack 0
  7774                           tosu	equ	0xFFF
  7775                           tosh	equ	0xFFE
  7776                           tosl	equ	0xFFD
  7777                           pclath	equ	0xFFA
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           postinc0	equ	0xFEE
  7785                           plusw0	equ	0xFEB
  7786                           wreg	equ	0xFE8
  7787                           indf1	equ	0xFE7
  7788                           postdec1	equ	0xFE5
  7789                           fsr1h	equ	0xFE2
  7790                           fsr1l	equ	0xFE1
  7791                           indf2	equ	0xFDF
  7792                           postinc2	equ	0xFDE
  7793                           postdec2	equ	0xFDD
  7794                           plusw2	equ	0xFDB
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _Event_TestButton *****************
  7800 ;; Defined at:
  7801 ;;		line 47 in file "Events.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  pState          1    wreg     unsigned char 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  pState          1   25[BANK0 ] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        1 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:   13
  7822 ;; This function calls:
  7823 ;;		_HMI_SetButton
  7824 ;;		_HMI_SetNumber
  7825 ;;		_LED_Toggle
  7826 ;; This function is called by:
  7827 ;;		_FunctInitButton
  7828 ;;		_Button_Poll
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           	psect	text37
  7833  0143BC                     __ptext37:
  7834                           	opt stack 0
  7835  0143BC                     _Event_TestButton:
  7836                           	opt stack 10
  7837                           
  7838                           ;incstack = 0
  7839                           ;Event_TestButton@pState stored from wreg
  7840  0143BC  0100               	movlb	0	; () banked
  7841  0143BE  6FCB               	movwf	Event_TestButton@pState& (0+255),b
  7842                           
  7843                           ;Events.c: 51: static UINT8 j = 0;
  7844                           ;Events.c: 55: if (pState == 0)
  7845  0143C0  0100               	movlb	0	; () banked
  7846  0143C2  51CB               	movf	Event_TestButton@pState& (0+255),w,b
  7847  0143C4  0100               	movlb	0	; () banked
  7848  0143C6  A4D8               	btfss	status,2,c
  7849  0143C8  D013               	goto	l1878
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;Events.c: 56: {
  7853                           ;Events.c: 57: j++;
  7854  0143CA  0100               	movlb	0	; () banked
  7855  0143CC  2B75               	incf	Event_TestButton@j& (0+255),f,b
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;Events.c: 58: val += j;
  7859  0143CE  0100               	movlb	0	; () banked
  7860  0143D0  5175               	movf	Event_TestButton@j& (0+255),w,b
  7861  0143D2  0100               	movlb	0	; () banked
  7862  0143D4  276D               	addwf	_val& (0+255),f,b
  7863  0143D6  0E00               	movlw	0
  7864  0143D8  236E               	addwfc	(_val+1)& (0+255),f,b
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;Events.c: 59: HMI_SetNumber( val );
  7868  0143DA  C06D  F0C8         	movff	_val,HMI_SetNumber@pInput
  7869  0143DE  C06E  F0C9         	movff	_val+1,HMI_SetNumber@pInput+1
  7870  0143E2  EC49  F0A3         	call	_HMI_SetNumber	;wreg free
  7871                           
  7872                           ;Events.c: 62: HMI_SetButton( j & 3 );
  7873  0143E6  0100               	movlb	0	; () banked
  7874  0143E8  5175               	movf	Event_TestButton@j& (0+255),w,b
  7875  0143EA  0B03               	andlw	3
  7876  0143EC  EC18  F09A         	call	_HMI_SetButton
  7877  0143F0                     l1878:
  7878                           
  7879                           ;Events.c: 63: }
  7880                           ;Events.c: 67: LED_Toggle(eLED1);
  7881  0143F0  0E00               	movlw	0
  7882  0143F2  EC94  F0A0         	call	_LED_Toggle
  7883  0143F6  0012               	return		;funcret
  7884  0143F8                     __end_of_Event_TestButton:
  7885                           	opt stack 0
  7886                           tosu	equ	0xFFF
  7887                           tosh	equ	0xFFE
  7888                           tosl	equ	0xFFD
  7889                           pclath	equ	0xFFA
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           postinc0	equ	0xFEE
  7897                           plusw0	equ	0xFEB
  7898                           wreg	equ	0xFE8
  7899                           indf1	equ	0xFE7
  7900                           postdec1	equ	0xFE5
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           plusw2	equ	0xFDB
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _HMI_SetButton *****************
  7912 ;; Defined at:
  7913 ;;		line 186 in file "HMI.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  pValue          1    wreg     unsigned char 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  pValue          1    6[BANK0 ] unsigned char 
  7918 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  7919 ;;  v               1    7[BANK0 ] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;Total ram usage:        8 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    7
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Event_TestButton
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text38
  7944  013430                     __ptext38:
  7945                           	opt stack 0
  7946  013430                     _HMI_SetButton:
  7947                           	opt stack 15
  7948                           
  7949                           ;incstack = 0
  7950                           ;HMI_SetButton@pValue stored from wreg
  7951  013430  0100               	movlb	0	; () banked
  7952  013432  6FB8               	movwf	HMI_SetButton@pValue& (0+255),b
  7953                           
  7954                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  7955  013434  0E7E               	movlw	low HMI_SetButton@F7211
  7956  013436  6EF6               	movwf	tblptrl,c
  7957  013438                     	if	1	;There is more than 1 active tblptr byte
  7958  013438  0EFD               	movlw	high HMI_SetButton@F7211
  7959  01343A  6EF7               	movwf	tblptrh,c
  7960  01343C                     	endif
  7961  01343C                     	if	1	;There are 3 active tblptr bytes
  7962  01343C  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
  7963  01343E  6EF8               	movwf	tblptru,c
  7964  013440                     	endif
  7965  013440  0009               	tblrd		*+
  7966  013442  CFF5 F0B4          	movff	tablat,HMI_SetButton@reindex
  7967  013446  0009               	tblrd		*+
  7968  013448  CFF5 F0B5          	movff	tablat,HMI_SetButton@reindex+1
  7969  01344C  0009               	tblrd		*+
  7970  01344E  CFF5 F0B6          	movff	tablat,HMI_SetButton@reindex+2
  7971  013452  000A               	tblrd		*-
  7972  013454  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex+3
  7973                           
  7974                           ;HMI.c: 189: UINT8 v = 0b00010001;
  7975  013458  0E11               	movlw	17
  7976  01345A  0100               	movlb	0	; () banked
  7977  01345C  6FB9               	movwf	HMI_SetButton@v& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;HMI.c: 190: pValue &= 3;
  7981  01345E  0E03               	movlw	3
  7982  013460  0100               	movlb	0	; () banked
  7983  013462  17B8               	andwf	HMI_SetButton@pValue& (0+255),f,b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;HMI.c: 191: v = v << reindex[pValue];
  7987  013464  0100               	movlb	0	; () banked
  7988  013466  51B8               	movf	HMI_SetButton@pValue& (0+255),w,b
  7989  013468  0D01               	mullw	1
  7990  01346A  0EB4               	movlw	low HMI_SetButton@reindex
  7991  01346C  24F3               	addwf	prodl,w,c
  7992  01346E  6ED9               	movwf	fsr2l,c
  7993  013470  0E00               	movlw	high HMI_SetButton@reindex
  7994  013472  20F4               	addwfc	prodh,w,c
  7995  013474  6EDA               	movwf	fsr2h,c
  7996  013476  50DF               	movf	indf2,w,c
  7997  013478  0100               	movlb	0	; () banked
  7998  01347A  6FB2               	movwf	??_HMI_SetButton& (0+255),b
  7999  01347C  C0B9  F0B3         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  8000  013480  0100               	movlb	0	; () banked
  8001  013482  2BB2               	incf	??_HMI_SetButton& (0+255),f,b
  8002  013484  D003               	goto	u6814
  8003  013486                     u6815:
  8004  013486  0100               	movlb	0	; () banked
  8005  013488  90D8               	bcf	status,0,c
  8006  01348A  37B3               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  8007  01348C                     u6814:
  8008  01348C  0100               	movlb	0	; () banked
  8009  01348E  2FB2               	decfsz	??_HMI_SetButton& (0+255),f,b
  8010  013490  D7FA               	goto	u6815
  8011  013492  0100               	movlb	0	; () banked
  8012  013494  51B3               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  8013  013496  0100               	movlb	0	; () banked
  8014  013498  6FB9               	movwf	HMI_SetButton@v& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;HMI.c: 192: v = v >> 4;
  8018  01349A  0100               	movlb	0	; () banked
  8019  01349C  39B9               	swapf	HMI_SetButton@v& (0+255),w,b
  8020  01349E  0B0F               	andlw	15
  8021  0134A0  0100               	movlb	0	; () banked
  8022  0134A2  6FB9               	movwf	HMI_SetButton@v& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;HMI.c: 193: v = v & 0x0F;
  8026  0134A4  0100               	movlb	0	; () banked
  8027  0134A6  51B9               	movf	HMI_SetButton@v& (0+255),w,b
  8028  0134A8  0B0F               	andlw	15
  8029  0134AA  0100               	movlb	0	; () banked
  8030  0134AC  6FB9               	movwf	HMI_SetButton@v& (0+255),b
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;HMI.c: 194: HMIBoard.pButton = v;
  8034  0134AE  0101               	movlb	1	; () banked
  8035  0134B0  5130               	movf	(_HMIBoard+6)& (0+255),w,b
  8036  0134B2  0100               	movlb	0	; () banked
  8037  0134B4  19B9               	xorwf	HMI_SetButton@v& (0+255),w,b
  8038  0134B6  0BF0               	andlw	-16
  8039  0134B8  19B9               	xorwf	HMI_SetButton@v& (0+255),w,b
  8040  0134BA  0101               	movlb	1	; () banked
  8041  0134BC  6F30               	movwf	(_HMIBoard+6)& (0+255),b
  8042                           
  8043                           ; BSR set to: 1
  8044  0134BE  0012               	return		;funcret
  8045  0134C0                     __end_of_HMI_SetButton:
  8046                           	opt stack 0
  8047                           tosu	equ	0xFFF
  8048                           tosh	equ	0xFFE
  8049                           tosl	equ	0xFFD
  8050                           pclath	equ	0xFFA
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           postinc0	equ	0xFEE
  8058                           plusw0	equ	0xFEB
  8059                           wreg	equ	0xFE8
  8060                           indf1	equ	0xFE7
  8061                           postdec1	equ	0xFE5
  8062                           fsr1h	equ	0xFE2
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           plusw2	equ	0xFDB
  8068                           fsr2h	equ	0xFDA
  8069                           fsr2l	equ	0xFD9
  8070                           status	equ	0xFD8
  8071                           
  8072 ;; *************** function _HMI_SetUp *****************
  8073 ;; Defined at:
  8074 ;;		line 174 in file "HMI.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  pValue          1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  pValue          1    0[BANK0 ] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      void 
  8081 ;; Registers used:
  8082 ;;		wreg
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;Total ram usage:        1 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    7
  8095 ;; This function calls:
  8096 ;;		Nothing
  8097 ;; This function is called by:
  8098 ;;		_Event_HMI_UpButton
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text39
  8103  0149B8                     __ptext39:
  8104                           	opt stack 0
  8105  0149B8                     _HMI_SetUp:
  8106                           	opt stack 15
  8107                           
  8108                           ; BSR set to: 1
  8109                           ;incstack = 0
  8110                           ;HMI_SetUp@pValue stored from wreg
  8111  0149B8  0100               	movlb	0	; () banked
  8112  0149BA  6FB2               	movwf	HMI_SetUp@pValue& (0+255),b
  8113                           
  8114                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
  8115  0149BC  0100               	movlb	0	; () banked
  8116  0149BE  B1B2               	btfsc	HMI_SetUp@pValue& (0+255),0,b
  8117  0149C0  D003               	bra	u6795
  8118  0149C2  0101               	movlb	1	; () banked
  8119  0149C4  9130               	bcf	(_HMIBoard+6)& (0+255),0,b
  8120  0149C6  D002               	bra	u6796
  8121  0149C8                     u6795:
  8122  0149C8  0101               	movlb	1	; () banked
  8123  0149CA  8130               	bsf	(_HMIBoard+6)& (0+255),0,b
  8124  0149CC                     u6796:
  8125                           
  8126                           ; BSR set to: 1
  8127  0149CC  0012               	return		;funcret
  8128  0149CE                     __end_of_HMI_SetUp:
  8129                           	opt stack 0
  8130                           tosu	equ	0xFFF
  8131                           tosh	equ	0xFFE
  8132                           tosl	equ	0xFFD
  8133                           pclath	equ	0xFFA
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           postinc0	equ	0xFEE
  8141                           plusw0	equ	0xFEB
  8142                           wreg	equ	0xFE8
  8143                           indf1	equ	0xFE7
  8144                           postdec1	equ	0xFE5
  8145                           fsr1h	equ	0xFE2
  8146                           fsr1l	equ	0xFE1
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           plusw2	equ	0xFDB
  8151                           fsr2h	equ	0xFDA
  8152                           fsr2l	equ	0xFD9
  8153                           status	equ	0xFD8
  8154                           
  8155 ;; *************** function _HMI_SetRight *****************
  8156 ;; Defined at:
  8157 ;;		line 168 in file "HMI.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  pValue          1    wreg     unsigned char 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  pValue          1    0[BANK0 ] unsigned char 
  8162 ;; Return value:  Size  Location     Type
  8163 ;;                  1    wreg      void 
  8164 ;; Registers used:
  8165 ;;		wreg
  8166 ;; Tracked objects:
  8167 ;;		On entry : 0/0
  8168 ;;		On exit  : 0/0
  8169 ;;		Unchanged: 0/0
  8170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;Total ram usage:        1 bytes
  8176 ;; Hardware stack levels used:    1
  8177 ;; Hardware stack levels required when called:    7
  8178 ;; This function calls:
  8179 ;;		Nothing
  8180 ;; This function is called by:
  8181 ;;		_Event_HMI_RightButton
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           	psect	text40
  8186  0149CE                     __ptext40:
  8187                           	opt stack 0
  8188  0149CE                     _HMI_SetRight:
  8189                           	opt stack 15
  8190                           
  8191                           ; BSR set to: 1
  8192                           ;incstack = 0
  8193                           ;HMI_SetRight@pValue stored from wreg
  8194  0149CE  0100               	movlb	0	; () banked
  8195  0149D0  6FB2               	movwf	HMI_SetRight@pValue& (0+255),b
  8196                           
  8197                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
  8198  0149D2  0100               	movlb	0	; () banked
  8199  0149D4  B1B2               	btfsc	HMI_SetRight@pValue& (0+255),0,b
  8200  0149D6  D003               	bra	u6785
  8201  0149D8  0101               	movlb	1	; () banked
  8202  0149DA  9730               	bcf	(_HMIBoard+6)& (0+255),3,b
  8203  0149DC  D002               	bra	u6786
  8204  0149DE                     u6785:
  8205  0149DE  0101               	movlb	1	; () banked
  8206  0149E0  8730               	bsf	(_HMIBoard+6)& (0+255),3,b
  8207  0149E2                     u6786:
  8208                           
  8209                           ; BSR set to: 1
  8210  0149E2  0012               	return		;funcret
  8211  0149E4                     __end_of_HMI_SetRight:
  8212                           	opt stack 0
  8213                           tosu	equ	0xFFF
  8214                           tosh	equ	0xFFE
  8215                           tosl	equ	0xFFD
  8216                           pclath	equ	0xFFA
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           postinc0	equ	0xFEE
  8224                           plusw0	equ	0xFEB
  8225                           wreg	equ	0xFE8
  8226                           indf1	equ	0xFE7
  8227                           postdec1	equ	0xFE5
  8228                           fsr1h	equ	0xFE2
  8229                           fsr1l	equ	0xFE1
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           plusw2	equ	0xFDB
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _HMI_SetLeft *****************
  8239 ;; Defined at:
  8240 ;;		line 162 in file "HMI.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;  pValue          1    wreg     unsigned char 
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;  pValue          1    0[BANK0 ] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;Total ram usage:        1 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    7
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_Event_HMI_LeftButton
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text41
  8269  0149E4                     __ptext41:
  8270                           	opt stack 0
  8271  0149E4                     _HMI_SetLeft:
  8272                           	opt stack 15
  8273                           
  8274                           ; BSR set to: 1
  8275                           ;incstack = 0
  8276                           ;HMI_SetLeft@pValue stored from wreg
  8277  0149E4  0100               	movlb	0	; () banked
  8278  0149E6  6FB2               	movwf	HMI_SetLeft@pValue& (0+255),b
  8279                           
  8280                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
  8281  0149E8  0100               	movlb	0	; () banked
  8282  0149EA  B1B2               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
  8283  0149EC  D003               	bra	u6775
  8284  0149EE  0101               	movlb	1	; () banked
  8285  0149F0  9530               	bcf	(_HMIBoard+6)& (0+255),2,b
  8286  0149F2  D002               	bra	u6776
  8287  0149F4                     u6775:
  8288  0149F4  0101               	movlb	1	; () banked
  8289  0149F6  8530               	bsf	(_HMIBoard+6)& (0+255),2,b
  8290  0149F8                     u6776:
  8291                           
  8292                           ; BSR set to: 1
  8293  0149F8  0012               	return		;funcret
  8294  0149FA                     __end_of_HMI_SetLeft:
  8295                           	opt stack 0
  8296                           tosu	equ	0xFFF
  8297                           tosh	equ	0xFFE
  8298                           tosl	equ	0xFFD
  8299                           pclath	equ	0xFFA
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           postinc0	equ	0xFEE
  8307                           plusw0	equ	0xFEB
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postdec1	equ	0xFE5
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           plusw2	equ	0xFDB
  8317                           fsr2h	equ	0xFDA
  8318                           fsr2l	equ	0xFD9
  8319                           status	equ	0xFD8
  8320                           
  8321 ;; *************** function _HMI_SetNumber *****************
  8322 ;; Defined at:
  8323 ;;		line 221 in file "HMI.c"
  8324 ;; Parameters:    Size  Location     Type
  8325 ;;  pInput          2   22[BANK0 ] int 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;		None
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      void 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;Total ram usage:        2 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    9
  8344 ;; This function calls:
  8345 ;;		_HMI_SetSegments
  8346 ;;		_itos
  8347 ;; This function is called by:
  8348 ;;		_Event_TestButton
  8349 ;;		_Event_HMI_UpButton
  8350 ;;		_Event_HMI_DownButton
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text42
  8355  014692                     __ptext42:
  8356                           	opt stack 0
  8357  014692                     _HMI_SetNumber:
  8358                           	opt stack 13
  8359                           
  8360                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  8361                           
  8362                           ; BSR set to: 1
  8363                           ;incstack = 0
  8364  014692  C0C8  F0BE         	movff	HMI_SetNumber@pInput,itos@input
  8365  014696  C0C9  F0BF         	movff	HMI_SetNumber@pInput+1,itos@input+1
  8366  01469A  0E2A               	movlw	low _HMIBoard
  8367  01469C  0100               	movlb	0	; () banked
  8368  01469E  6FC0               	movwf	itos@destination& (0+255),b
  8369  0146A0  0E01               	movlw	high _HMIBoard
  8370  0146A2  0100               	movlb	0	; () banked
  8371  0146A4  6FC1               	movwf	(itos@destination+1)& (0+255),b
  8372  0146A6  ECB4  F092         	call	_itos	;wreg free
  8373                           
  8374                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  8375  0146AA  0E2A               	movlw	low _HMIBoard
  8376  0146AC  0100               	movlb	0	; () banked
  8377  0146AE  6FB3               	movwf	HMI_SetSegments@pString& (0+255),b
  8378  0146B0  0E01               	movlw	high _HMIBoard
  8379  0146B2  0100               	movlb	0	; () banked
  8380  0146B4  6FB4               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  8381  0146B6  ECDA  F095         	call	_HMI_SetSegments	;wreg free
  8382  0146BA  0012               	return		;funcret
  8383  0146BC                     __end_of_HMI_SetNumber:
  8384                           	opt stack 0
  8385                           tosu	equ	0xFFF
  8386                           tosh	equ	0xFFE
  8387                           tosl	equ	0xFFD
  8388                           pclath	equ	0xFFA
  8389                           tblptru	equ	0xFF8
  8390                           tblptrh	equ	0xFF7
  8391                           tblptrl	equ	0xFF6
  8392                           tablat	equ	0xFF5
  8393                           prodh	equ	0xFF4
  8394                           prodl	equ	0xFF3
  8395                           postinc0	equ	0xFEE
  8396                           plusw0	equ	0xFEB
  8397                           wreg	equ	0xFE8
  8398                           indf1	equ	0xFE7
  8399                           postdec1	equ	0xFE5
  8400                           fsr1h	equ	0xFE2
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _itos *****************
  8411 ;; Defined at:
  8412 ;;		line 369 in file "Library/Types.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  input           2   12[BANK0 ] unsigned short 
  8415 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  8416 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  Out             2   20[BANK0 ] unsigned short 
  8419 ;;  Length          2   18[BANK0 ] unsigned short 
  8420 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  8421 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      void 
  8424 ;; Registers used:
  8425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;Total ram usage:       10 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    8
  8438 ;; This function calls:
  8439 ;;		___lwdiv
  8440 ;;		___lwmod
  8441 ;;		_reverse
  8442 ;; This function is called by:
  8443 ;;		_HMI_SetNumber
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text43
  8448  012568                     __ptext43:
  8449                           	opt stack 0
  8450  012568                     _itos:
  8451                           	opt stack 13
  8452                           
  8453                           ;Types.c: 371: UINT16 Out = input;
  8454                           
  8455                           ;incstack = 0
  8456  012568  C0BE  F0C6         	movff	itos@input,itos@Out
  8457  01256C  C0BF  F0C7         	movff	itos@input+1,itos@Out+1
  8458                           
  8459                           ;Types.c: 372: UINT16 Length = 0;
  8460  012570  0E00               	movlw	0
  8461  012572  0100               	movlb	0	; () banked
  8462  012574  6FC5               	movwf	(itos@Length+1)& (0+255),b
  8463  012576  0E00               	movlw	0
  8464  012578  6FC4               	movwf	itos@Length& (0+255),b
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;Types.c: 373: char *Data = destination;
  8468  01257A  C0C0  F0C2         	movff	itos@destination,itos@Data
  8469  01257E  C0C1  F0C3         	movff	itos@destination+1,itos@Data+1
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;Types.c: 374: if(Out == 0)
  8473  012582  0100               	movlb	0	; () banked
  8474  012584  51C6               	movf	itos@Out& (0+255),w,b
  8475  012586  0100               	movlb	0	; () banked
  8476  012588  11C7               	iorwf	(itos@Out+1)& (0+255),w,b
  8477  01258A  A4D8               	btfss	status,2,c
  8478  01258C  D034               	goto	l929
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;Types.c: 375: {
  8482                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8483  01258E  C0C2  FFD9         	movff	itos@Data,fsr2l
  8484  012592  C0C3  FFDA         	movff	itos@Data+1,fsr2h
  8485  012596  0E30               	movlw	48
  8486  012598  6EDF               	movwf	indf2,c
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;Types.c: 377: Length = 1;
  8490  01259A  0E00               	movlw	0
  8491  01259C  0100               	movlb	0	; () banked
  8492  01259E  6FC5               	movwf	(itos@Length+1)& (0+255),b
  8493  0125A0  0E01               	movlw	1
  8494  0125A2  6FC4               	movwf	itos@Length& (0+255),b
  8495                           
  8496                           ;Types.c: 378: }
  8497  0125A4  D040               	goto	l928
  8498  0125A6                     
  8499                           ; BSR set to: 0
  8500                           ;Types.c: 382: {
  8501                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8502                           
  8503                           ; BSR set to: 0
  8504  0125A6  C0C6  F0B9         	movff	itos@Out,___lwmod@dividend
  8505  0125AA  C0C7  F0BA         	movff	itos@Out+1,___lwmod@dividend+1
  8506  0125AE  0E00               	movlw	0
  8507  0125B0  0100               	movlb	0	; () banked
  8508  0125B2  6FBC               	movwf	(___lwmod@divisor+1)& (0+255),b
  8509  0125B4  0E0A               	movlw	10
  8510  0125B6  6FBB               	movwf	___lwmod@divisor& (0+255),b
  8511  0125B8  EC40  F09E         	call	___lwmod	;wreg free
  8512  0125BC  0100               	movlb	0	; () banked
  8513  0125BE  51B9               	movf	?___lwmod& (0+255),w,b
  8514  0125C0  0F30               	addlw	48
  8515  0125C2  C0C2  FFD9         	movff	itos@Data,fsr2l
  8516  0125C6  C0C3  FFDA         	movff	itos@Data+1,fsr2h
  8517  0125CA  6EDF               	movwf	indf2,c
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;Types.c: 384: Out /= 10;
  8521  0125CC  C0C6  F0B2         	movff	itos@Out,___lwdiv@dividend
  8522  0125D0  C0C7  F0B3         	movff	itos@Out+1,___lwdiv@dividend+1
  8523  0125D4  0E00               	movlw	0
  8524  0125D6  0100               	movlb	0	; () banked
  8525  0125D8  6FB5               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8526  0125DA  0E0A               	movlw	10
  8527  0125DC  6FB4               	movwf	___lwdiv@divisor& (0+255),b
  8528  0125DE  EC6F  F09B         	call	___lwdiv	;wreg free
  8529  0125E2  C0B2  F0C6         	movff	?___lwdiv,itos@Out
  8530  0125E6  C0B3  F0C7         	movff	?___lwdiv+1,itos@Out+1
  8531                           
  8532                           ;Types.c: 385: Length ++;
  8533  0125EA  0100               	movlb	0	; () banked
  8534  0125EC  4BC4               	infsnz	itos@Length& (0+255),f,b
  8535  0125EE  2BC5               	incf	(itos@Length+1)& (0+255),f,b
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;Types.c: 386: Data++;
  8539  0125F0  0100               	movlb	0	; () banked
  8540  0125F2  4BC2               	infsnz	itos@Data& (0+255),f,b
  8541  0125F4  2BC3               	incf	(itos@Data+1)& (0+255),f,b
  8542  0125F6                     l929:
  8543                           
  8544                           ; BSR set to: 0
  8545                           
  8546                           ; BSR set to: 0
  8547  0125F6  0100               	movlb	0	; () banked
  8548  0125F8  51C6               	movf	itos@Out& (0+255),w,b
  8549  0125FA  0100               	movlb	0	; () banked
  8550  0125FC  11C7               	iorwf	(itos@Out+1)& (0+255),w,b
  8551  0125FE  B4D8               	btfsc	status,2,c
  8552  012600  D008               	goto	u6630
  8553                           
  8554                           ; BSR set to: 0
  8555  012602  0100               	movlb	0	; () banked
  8556  012604  51C5               	movf	(itos@Length+1)& (0+255),w,b
  8557  012606  E105               	bnz	l10240
  8558  012608  0E06               	movlw	6
  8559  01260A  0100               	movlb	0	; () banked
  8560  01260C  5DC4               	subwf	itos@Length& (0+255),w,b
  8561  01260E  A0D8               	btfss	status,0,c
  8562  012610  D7CA               	goto	l930
  8563  012612                     u6630:
  8564  012612                     l10240:
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;Types.c: 387: }
  8568                           ;Types.c: 388: reverse(destination, Length);
  8569  012612  C0C0  F0B2         	movff	itos@destination,reverse@input
  8570  012616  C0C1  F0B3         	movff	itos@destination+1,reverse@input+1
  8571  01261A  C0C4  F0B4         	movff	itos@Length,reverse@length
  8572  01261E  C0C5  F0B5         	movff	itos@Length+1,reverse@length+1
  8573  012622  EC05  F09D         	call	_reverse	;wreg free
  8574  012626                     l928:
  8575                           
  8576                           ;Types.c: 389: }
  8577                           ;Types.c: 390: destination[Length] = '\0';
  8578  012626  0100               	movlb	0	; () banked
  8579  012628  51C4               	movf	itos@Length& (0+255),w,b
  8580  01262A  0100               	movlb	0	; () banked
  8581  01262C  25C0               	addwf	itos@destination& (0+255),w,b
  8582  01262E  6ED9               	movwf	fsr2l,c
  8583  012630  0100               	movlb	0	; () banked
  8584  012632  51C5               	movf	(itos@Length+1)& (0+255),w,b
  8585  012634  0100               	movlb	0	; () banked
  8586  012636  21C1               	addwfc	(itos@destination+1)& (0+255),w,b
  8587  012638  6EDA               	movwf	fsr2h,c
  8588  01263A  0E00               	movlw	0
  8589  01263C  6EDF               	movwf	indf2,c
  8590                           
  8591                           ; BSR set to: 0
  8592  01263E  0012               	return		;funcret
  8593  012640                     __end_of_itos:
  8594                           	opt stack 0
  8595                           tosu	equ	0xFFF
  8596                           tosh	equ	0xFFE
  8597                           tosl	equ	0xFFD
  8598                           pclath	equ	0xFFA
  8599                           tblptru	equ	0xFF8
  8600                           tblptrh	equ	0xFF7
  8601                           tblptrl	equ	0xFF6
  8602                           tablat	equ	0xFF5
  8603                           prodh	equ	0xFF4
  8604                           prodl	equ	0xFF3
  8605                           postinc0	equ	0xFEE
  8606                           plusw0	equ	0xFEB
  8607                           wreg	equ	0xFE8
  8608                           indf1	equ	0xFE7
  8609                           postdec1	equ	0xFE5
  8610                           fsr1h	equ	0xFE2
  8611                           fsr1l	equ	0xFE1
  8612                           indf2	equ	0xFDF
  8613                           postinc2	equ	0xFDE
  8614                           postdec2	equ	0xFDD
  8615                           plusw2	equ	0xFDB
  8616                           fsr2h	equ	0xFDA
  8617                           fsr2l	equ	0xFD9
  8618                           status	equ	0xFD8
  8619                           
  8620 ;; *************** function _reverse *****************
  8621 ;; Defined at:
  8622 ;;		line 357 in file "Library/Types.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8625 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8626 ;;  length          2    2[BANK0 ] unsigned short 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8629 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8630 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:        7 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    7
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		_itos
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text44
  8655  013A0A                     __ptext44:
  8656                           	opt stack 0
  8657  013A0A                     _reverse:
  8658                           	opt stack 13
  8659                           
  8660                           ;Types.c: 359: char tempVar,
  8661                           ;Types.c: 360: *iterator = input + length;
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;incstack = 0
  8665  013A0A  0100               	movlb	0	; () banked
  8666  013A0C  51B4               	movf	reverse@length& (0+255),w,b
  8667  013A0E  0100               	movlb	0	; () banked
  8668  013A10  25B2               	addwf	reverse@input& (0+255),w,b
  8669  013A12  0100               	movlb	0	; () banked
  8670  013A14  6FB7               	movwf	reverse@iterator& (0+255),b
  8671  013A16  0100               	movlb	0	; () banked
  8672  013A18  51B5               	movf	(reverse@length+1)& (0+255),w,b
  8673  013A1A  0100               	movlb	0	; () banked
  8674  013A1C  21B3               	addwfc	(reverse@input+1)& (0+255),w,b
  8675  013A1E  0100               	movlb	0	; () banked
  8676  013A20  6FB8               	movwf	(reverse@iterator+1)& (0+255),b
  8677                           
  8678                           ;Types.c: 362: while ( --iterator > input )
  8679  013A22  D01A               	goto	l921
  8680  013A24                     
  8681                           ; BSR set to: 0
  8682                           ;Types.c: 363: {
  8683                           ;Types.c: 364: tempVar = *input;
  8684                           
  8685                           ; BSR set to: 0
  8686  013A24  C0B2  FFD9         	movff	reverse@input,fsr2l
  8687  013A28  C0B3  FFDA         	movff	reverse@input+1,fsr2h
  8688  013A2C  50DF               	movf	indf2,w,c
  8689  013A2E  0100               	movlb	0	; () banked
  8690  013A30  6FB6               	movwf	reverse@tempVar& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;Types.c: 365: *input++=*iterator;
  8694  013A32  C0B7  FFD9         	movff	reverse@iterator,fsr2l
  8695  013A36  C0B8  FFDA         	movff	reverse@iterator+1,fsr2h
  8696  013A3A  C0B2  FFE1         	movff	reverse@input,fsr1l
  8697  013A3E  C0B3  FFE2         	movff	reverse@input+1,fsr1h
  8698  013A42  CFDF FFE7          	movff	indf2,indf1
  8699                           
  8700                           ; BSR set to: 0
  8701  013A46  0100               	movlb	0	; () banked
  8702  013A48  4BB2               	infsnz	reverse@input& (0+255),f,b
  8703  013A4A  2BB3               	incf	(reverse@input+1)& (0+255),f,b
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;Types.c: 366: *iterator=tempVar;
  8707  013A4C  C0B7  FFD9         	movff	reverse@iterator,fsr2l
  8708  013A50  C0B8  FFDA         	movff	reverse@iterator+1,fsr2h
  8709  013A54  C0B6  FFDF         	movff	reverse@tempVar,indf2
  8710  013A58                     l921:
  8711                           
  8712                           ; BSR set to: 0
  8713                           
  8714                           ; BSR set to: 0
  8715  013A58  0100               	movlb	0	; () banked
  8716  013A5A  07B7               	decf	reverse@iterator& (0+255),f,b
  8717  013A5C  A0D8               	btfss	status,0,c
  8718  013A5E  07B8               	decf	(reverse@iterator+1)& (0+255),f,b
  8719  013A60  0100               	movlb	0	; () banked
  8720  013A62  51B7               	movf	reverse@iterator& (0+255),w,b
  8721  013A64  0100               	movlb	0	; () banked
  8722  013A66  5DB2               	subwf	reverse@input& (0+255),w,b
  8723  013A68  0100               	movlb	0	; () banked
  8724  013A6A  51B8               	movf	(reverse@iterator+1)& (0+255),w,b
  8725  013A6C  0100               	movlb	0	; () banked
  8726  013A6E  59B3               	subwfb	(reverse@input+1)& (0+255),w,b
  8727  013A70  B0D8               	btfsc	status,0,c
  8728  013A72  0012               	return	
  8729  013A74  D7D7               	goto	l922
  8730  013A76                     __end_of_reverse:
  8731                           	opt stack 0
  8732                           tosu	equ	0xFFF
  8733                           tosh	equ	0xFFE
  8734                           tosl	equ	0xFFD
  8735                           pclath	equ	0xFFA
  8736                           tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodh	equ	0xFF4
  8741                           prodl	equ	0xFF3
  8742                           postinc0	equ	0xFEE
  8743                           plusw0	equ	0xFEB
  8744                           wreg	equ	0xFE8
  8745                           indf1	equ	0xFE7
  8746                           postdec1	equ	0xFE5
  8747                           fsr1h	equ	0xFE2
  8748                           fsr1l	equ	0xFE1
  8749                           indf2	equ	0xFDF
  8750                           postinc2	equ	0xFDE
  8751                           postdec2	equ	0xFDD
  8752                           plusw2	equ	0xFDB
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function ___lwmod *****************
  8758 ;; Defined at:
  8759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  dividend        2    7[BANK0 ] unsigned int 
  8762 ;;  divisor         2    9[BANK0 ] unsigned int 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  counter         1   11[BANK0 ] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  2    7[BANK0 ] unsigned int 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2, status,0
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        5 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    7
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_itos
  8785 ;;		_printf
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           	psect	text45
  8790  013C80                     __ptext45:
  8791                           	opt stack 0
  8792  013C80                     ___lwmod:
  8793                           	opt stack 20
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;incstack = 0
  8797  013C80  0100               	movlb	0	; () banked
  8798  013C82  51BB               	movf	___lwmod@divisor& (0+255),w,b
  8799  013C84  0100               	movlb	0	; () banked
  8800  013C86  11BC               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8801  013C88  B4D8               	btfsc	status,2,c
  8802  013C8A  D026               	goto	l2529
  8803                           
  8804                           ; BSR set to: 0
  8805  013C8C  0E01               	movlw	1
  8806  013C8E  0100               	movlb	0	; () banked
  8807  013C90  6FBD               	movwf	___lwmod@counter& (0+255),b
  8808  013C92  D006               	goto	l2524
  8809  013C94                     
  8810                           ; BSR set to: 0
  8811                           
  8812                           ; BSR set to: 0
  8813  013C94  0100               	movlb	0	; () banked
  8814  013C96  90D8               	bcf	status,0,c
  8815  013C98  37BB               	rlcf	___lwmod@divisor& (0+255),f,b
  8816  013C9A  37BC               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8817  013C9C  0100               	movlb	0	; () banked
  8818  013C9E  2BBD               	incf	___lwmod@counter& (0+255),f,b
  8819  013CA0                     l2524:
  8820                           
  8821                           ; BSR set to: 0
  8822                           
  8823                           ; BSR set to: 0
  8824  013CA0  0100               	movlb	0	; () banked
  8825  013CA2  AFBC               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8826  013CA4  D7F7               	goto	l2525
  8827  013CA6                     u6590:
  8828                           
  8829                           ; BSR set to: 0
  8830                           
  8831                           ; BSR set to: 0
  8832                           
  8833                           ; BSR set to: 0
  8834  013CA6  0100               	movlb	0	; () banked
  8835  013CA8  51BB               	movf	___lwmod@divisor& (0+255),w,b
  8836  013CAA  0100               	movlb	0	; () banked
  8837  013CAC  5DB9               	subwf	___lwmod@dividend& (0+255),w,b
  8838  013CAE  0100               	movlb	0	; () banked
  8839  013CB0  51BC               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8840  013CB2  0100               	movlb	0	; () banked
  8841  013CB4  59BA               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8842  013CB6  A0D8               	btfss	status,0,c
  8843  013CB8  D008               	goto	l2528
  8844                           
  8845                           ; BSR set to: 0
  8846  013CBA  0100               	movlb	0	; () banked
  8847  013CBC  51BB               	movf	___lwmod@divisor& (0+255),w,b
  8848  013CBE  0100               	movlb	0	; () banked
  8849  013CC0  5FB9               	subwf	___lwmod@dividend& (0+255),f,b
  8850  013CC2  0100               	movlb	0	; () banked
  8851  013CC4  51BC               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8852  013CC6  0100               	movlb	0	; () banked
  8853  013CC8  5BBA               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8854  013CCA                     l2528:
  8855                           
  8856                           ; BSR set to: 0
  8857                           
  8858                           ; BSR set to: 0
  8859  013CCA  0100               	movlb	0	; () banked
  8860  013CCC  90D8               	bcf	status,0,c
  8861  013CCE  33BC               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8862  013CD0  33BB               	rrcf	___lwmod@divisor& (0+255),f,b
  8863                           
  8864                           ; BSR set to: 0
  8865  013CD2  0100               	movlb	0	; () banked
  8866  013CD4  2FBD               	decfsz	___lwmod@counter& (0+255),f,b
  8867  013CD6  D7E7               	goto	u6590
  8868  013CD8                     l2529:
  8869                           
  8870                           ; BSR set to: 0
  8871                           
  8872                           ; BSR set to: 0
  8873  013CD8  C0B9  F0B9         	movff	___lwmod@dividend,?___lwmod
  8874  013CDC  C0BA  F0BA         	movff	___lwmod@dividend+1,?___lwmod+1
  8875                           
  8876                           ; BSR set to: 0
  8877  013CE0  0012               	return		;funcret
  8878  013CE2                     __end_of___lwmod:
  8879                           	opt stack 0
  8880                           tosu	equ	0xFFF
  8881                           tosh	equ	0xFFE
  8882                           tosl	equ	0xFFD
  8883                           pclath	equ	0xFFA
  8884                           tblptru	equ	0xFF8
  8885                           tblptrh	equ	0xFF7
  8886                           tblptrl	equ	0xFF6
  8887                           tablat	equ	0xFF5
  8888                           prodh	equ	0xFF4
  8889                           prodl	equ	0xFF3
  8890                           postinc0	equ	0xFEE
  8891                           plusw0	equ	0xFEB
  8892                           wreg	equ	0xFE8
  8893                           indf1	equ	0xFE7
  8894                           postdec1	equ	0xFE5
  8895                           fsr1h	equ	0xFE2
  8896                           fsr1l	equ	0xFE1
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           plusw2	equ	0xFDB
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function ___lwdiv *****************
  8906 ;; Defined at:
  8907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  dividend        2    0[BANK0 ] unsigned int 
  8910 ;;  divisor         2    2[BANK0 ] unsigned int 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  quotient        2    5[BANK0 ] unsigned int 
  8913 ;;  counter         1    4[BANK0 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  2    0[BANK0 ] unsigned int 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        7 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    7
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		_itos
  8934 ;;		_printf
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text46
  8939  0136DE                     __ptext46:
  8940                           	opt stack 0
  8941  0136DE                     ___lwdiv:
  8942                           	opt stack 20
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;incstack = 0
  8946  0136DE  0E00               	movlw	0
  8947  0136E0  0100               	movlb	0	; () banked
  8948  0136E2  6FB8               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8949  0136E4  0E00               	movlw	0
  8950  0136E6  6FB7               	movwf	___lwdiv@quotient& (0+255),b
  8951                           
  8952                           ; BSR set to: 0
  8953  0136E8  0100               	movlb	0	; () banked
  8954  0136EA  51B4               	movf	___lwdiv@divisor& (0+255),w,b
  8955  0136EC  0100               	movlb	0	; () banked
  8956  0136EE  11B5               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8957  0136F0  B4D8               	btfsc	status,2,c
  8958  0136F2  D02C               	goto	l2519
  8959                           
  8960                           ; BSR set to: 0
  8961  0136F4  0E01               	movlw	1
  8962  0136F6  0100               	movlb	0	; () banked
  8963  0136F8  6FB6               	movwf	___lwdiv@counter& (0+255),b
  8964  0136FA  D006               	goto	l2514
  8965  0136FC                     
  8966                           ; BSR set to: 0
  8967                           
  8968                           ; BSR set to: 0
  8969  0136FC  0100               	movlb	0	; () banked
  8970  0136FE  90D8               	bcf	status,0,c
  8971  013700  37B4               	rlcf	___lwdiv@divisor& (0+255),f,b
  8972  013702  37B5               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8973  013704  0100               	movlb	0	; () banked
  8974  013706  2BB6               	incf	___lwdiv@counter& (0+255),f,b
  8975  013708                     l2514:
  8976                           
  8977                           ; BSR set to: 0
  8978                           
  8979                           ; BSR set to: 0
  8980  013708  0100               	movlb	0	; () banked
  8981  01370A  AFB5               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8982  01370C  D7F7               	goto	l2515
  8983  01370E                     u6560:
  8984                           
  8985                           ; BSR set to: 0
  8986                           
  8987                           ; BSR set to: 0
  8988                           
  8989                           ; BSR set to: 0
  8990  01370E  0100               	movlb	0	; () banked
  8991  013710  90D8               	bcf	status,0,c
  8992  013712  37B7               	rlcf	___lwdiv@quotient& (0+255),f,b
  8993  013714  37B8               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8994                           
  8995                           ; BSR set to: 0
  8996  013716  0100               	movlb	0	; () banked
  8997  013718  51B4               	movf	___lwdiv@divisor& (0+255),w,b
  8998  01371A  0100               	movlb	0	; () banked
  8999  01371C  5DB2               	subwf	___lwdiv@dividend& (0+255),w,b
  9000  01371E  0100               	movlb	0	; () banked
  9001  013720  51B5               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9002  013722  0100               	movlb	0	; () banked
  9003  013724  59B3               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9004  013726  A0D8               	btfss	status,0,c
  9005  013728  D00A               	goto	l2518
  9006                           
  9007                           ; BSR set to: 0
  9008  01372A  0100               	movlb	0	; () banked
  9009  01372C  51B4               	movf	___lwdiv@divisor& (0+255),w,b
  9010  01372E  0100               	movlb	0	; () banked
  9011  013730  5FB2               	subwf	___lwdiv@dividend& (0+255),f,b
  9012  013732  0100               	movlb	0	; () banked
  9013  013734  51B5               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9014  013736  0100               	movlb	0	; () banked
  9015  013738  5BB3               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9016                           
  9017                           ; BSR set to: 0
  9018  01373A  0100               	movlb	0	; () banked
  9019  01373C  81B7               	bsf	___lwdiv@quotient& (0+255),0,b
  9020  01373E                     l2518:
  9021                           
  9022                           ; BSR set to: 0
  9023                           
  9024                           ; BSR set to: 0
  9025  01373E  0100               	movlb	0	; () banked
  9026  013740  90D8               	bcf	status,0,c
  9027  013742  33B5               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9028  013744  33B4               	rrcf	___lwdiv@divisor& (0+255),f,b
  9029                           
  9030                           ; BSR set to: 0
  9031  013746  0100               	movlb	0	; () banked
  9032  013748  2FB6               	decfsz	___lwdiv@counter& (0+255),f,b
  9033  01374A  D7E1               	goto	u6560
  9034  01374C                     l2519:
  9035                           
  9036                           ; BSR set to: 0
  9037                           
  9038                           ; BSR set to: 0
  9039  01374C  C0B7  F0B2         	movff	___lwdiv@quotient,?___lwdiv
  9040  013750  C0B8  F0B3         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9041                           
  9042                           ; BSR set to: 0
  9043  013754  0012               	return		;funcret
  9044  013756                     __end_of___lwdiv:
  9045                           	opt stack 0
  9046                           tosu	equ	0xFFF
  9047                           tosh	equ	0xFFE
  9048                           tosl	equ	0xFFD
  9049                           pclath	equ	0xFFA
  9050                           tblptru	equ	0xFF8
  9051                           tblptrh	equ	0xFF7
  9052                           tblptrl	equ	0xFF6
  9053                           tablat	equ	0xFF5
  9054                           prodh	equ	0xFF4
  9055                           prodl	equ	0xFF3
  9056                           postinc0	equ	0xFEE
  9057                           plusw0	equ	0xFEB
  9058                           wreg	equ	0xFE8
  9059                           indf1	equ	0xFE7
  9060                           postdec1	equ	0xFE5
  9061                           fsr1h	equ	0xFE2
  9062                           fsr1l	equ	0xFE1
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           plusw2	equ	0xFDB
  9067                           fsr2h	equ	0xFDA
  9068                           fsr2l	equ	0xFD9
  9069                           status	equ	0xFD8
  9070                           
  9071 ;; *************** function _HMI_SetSegments *****************
  9072 ;; Defined at:
  9073 ;;		line 226 in file "HMI.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9076 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;  in              2    4[BANK0 ] unsigned short 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  1    wreg      void 
  9081 ;; Registers used:
  9082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9088 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;Total ram usage:        5 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    8
  9095 ;; This function calls:
  9096 ;;		_ToSegment
  9097 ;; This function is called by:
  9098 ;;		_HMI_SetNumber
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           	psect	text47
  9103  012BB4                     __ptext47:
  9104                           	opt stack 0
  9105  012BB4                     _HMI_SetSegments:
  9106                           	opt stack 13
  9107                           
  9108                           ;HMI.c: 228: UINT16 in=0;
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;incstack = 0
  9112  012BB4  0E00               	movlw	0
  9113  012BB6  0100               	movlb	0	; () banked
  9114  012BB8  6FB7               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9115  012BBA  0E00               	movlw	0
  9116  012BBC  6FB6               	movwf	HMI_SetSegments@in& (0+255),b
  9117                           
  9118                           ;HMI.c: 229: while(*pString)
  9119  012BBE  D038               	goto	l1210
  9120  012BC0                     
  9121                           ; BSR set to: 0
  9122                           ;HMI.c: 230: {
  9123                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9124                           
  9125                           ; BSR set to: 0
  9126  012BC0  0E2A               	movlw	low _HMIBoard
  9127  012BC2  0100               	movlb	0	; () banked
  9128  012BC4  25B6               	addwf	HMI_SetSegments@in& (0+255),w,b
  9129  012BC6  6ED9               	movwf	fsr2l,c
  9130  012BC8  0E01               	movlw	high _HMIBoard
  9131  012BCA  0100               	movlb	0	; () banked
  9132  012BCC  21B7               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9133  012BCE  6EDA               	movwf	fsr2h,c
  9134  012BD0  C0B3  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9135  012BD4  C0B4  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9136  012BD8  50E7               	movf	indf1,w,c
  9137  012BDA  EC4D  F085         	call	_ToSegment
  9138  012BDE  6EDF               	movwf	indf2,c
  9139                           
  9140                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  9141  012BE0  0E2A               	movlw	low _HMIBoard
  9142  012BE2  0100               	movlb	0	; () banked
  9143  012BE4  25B6               	addwf	HMI_SetSegments@in& (0+255),w,b
  9144  012BE6  6ED9               	movwf	fsr2l,c
  9145  012BE8  0E01               	movlw	high _HMIBoard
  9146  012BEA  0100               	movlb	0	; () banked
  9147  012BEC  21B7               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9148  012BEE  6EDA               	movwf	fsr2h,c
  9149  012BF0  0E80               	movlw	128
  9150  012BF2  18DE               	xorwf	postinc2,w,c
  9151  012BF4  A4D8               	btfss	status,2,c
  9152  012BF6  D00E               	goto	l1209
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;HMI.c: 234: {
  9156                           ;HMI.c: 235: in--;
  9157  012BF8  0100               	movlb	0	; () banked
  9158  012BFA  07B6               	decf	HMI_SetSegments@in& (0+255),f,b
  9159  012BFC  A0D8               	btfss	status,0,c
  9160  012BFE  07B7               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  9164  012C00  0E2A               	movlw	low _HMIBoard
  9165  012C02  0100               	movlb	0	; () banked
  9166  012C04  25B6               	addwf	HMI_SetSegments@in& (0+255),w,b
  9167  012C06  6ED9               	movwf	fsr2l,c
  9168  012C08  0E01               	movlw	high _HMIBoard
  9169  012C0A  0100               	movlb	0	; () banked
  9170  012C0C  21B7               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9171  012C0E  6EDA               	movwf	fsr2h,c
  9172  012C10  0E00               	movlw	0
  9173  012C12  8EDB               	bsf	plusw2,7,c
  9174  012C14                     l1209:
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;HMI.c: 237: }
  9178                           ;HMI.c: 239: pString++;
  9179                           
  9180                           ; BSR set to: 0
  9181  012C14  0100               	movlb	0	; () banked
  9182  012C16  4BB3               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  9183  012C18  2BB4               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;HMI.c: 240: in++;
  9187  012C1A  0100               	movlb	0	; () banked
  9188  012C1C  4BB6               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9189  012C1E  2BB7               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;HMI.c: 241: if (in>=6)
  9193  012C20  0100               	movlb	0	; () banked
  9194  012C22  51B7               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9195  012C24  E11A               	bnz	l10314
  9196  012C26  0E06               	movlw	6
  9197  012C28  0100               	movlb	0	; () banked
  9198  012C2A  5DB6               	subwf	HMI_SetSegments@in& (0+255),w,b
  9199  012C2C  B0D8               	btfsc	status,0,c
  9200  012C2E  D015               	goto	l1212
  9201  012C30                     l1210:
  9202                           
  9203                           ; BSR set to: 0
  9204                           
  9205                           ; BSR set to: 0
  9206                           
  9207                           ; BSR set to: 0
  9208  012C30  C0B3  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  9209  012C34  C0B4  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  9210  012C38  50DF               	movf	indf2,w,c
  9211  012C3A  B4D8               	btfsc	status,2,c
  9212  012C3C  D00E               	goto	l1212
  9213  012C3E  D7C0               	goto	l1208
  9214  012C40                     
  9215                           ; BSR set to: 0
  9216                           ;HMI.c: 245: {
  9217                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  9218                           
  9219                           ; BSR set to: 0
  9220  012C40  0E2A               	movlw	low _HMIBoard
  9221  012C42  0100               	movlb	0	; () banked
  9222  012C44  25B6               	addwf	HMI_SetSegments@in& (0+255),w,b
  9223  012C46  6ED9               	movwf	fsr2l,c
  9224  012C48  0E01               	movlw	high _HMIBoard
  9225  012C4A  0100               	movlb	0	; () banked
  9226  012C4C  21B7               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9227  012C4E  6EDA               	movwf	fsr2h,c
  9228  012C50  0E00               	movlw	0
  9229  012C52  6EDF               	movwf	indf2,c
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;HMI.c: 247: in++;
  9233  012C54  0100               	movlb	0	; () banked
  9234  012C56  4BB6               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9235  012C58  2BB7               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9236  012C5A                     l1212:
  9237  012C5A                     l10314:
  9238                           
  9239                           ; BSR set to: 0
  9240  012C5A  0100               	movlb	0	; () banked
  9241  012C5C  51B7               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9242  012C5E  E106               	bnz	l1215
  9243  012C60  0E06               	movlw	6
  9244  012C62  0100               	movlb	0	; () banked
  9245  012C64  5DB6               	subwf	HMI_SetSegments@in& (0+255),w,b
  9246  012C66  B0D8               	btfsc	status,0,c
  9247  012C68  0012               	return	
  9248  012C6A  D7EA               	goto	l1213
  9249  012C6C                     l1215:
  9250                           
  9251                           ; BSR set to: 0
  9252  012C6C  0012               	return		;funcret
  9253  012C6E                     __end_of_HMI_SetSegments:
  9254                           	opt stack 0
  9255                           tosu	equ	0xFFF
  9256                           tosh	equ	0xFFE
  9257                           tosl	equ	0xFFD
  9258                           pclath	equ	0xFFA
  9259                           tblptru	equ	0xFF8
  9260                           tblptrh	equ	0xFF7
  9261                           tblptrl	equ	0xFF6
  9262                           tablat	equ	0xFF5
  9263                           prodh	equ	0xFF4
  9264                           prodl	equ	0xFF3
  9265                           postinc0	equ	0xFEE
  9266                           plusw0	equ	0xFEB
  9267                           wreg	equ	0xFE8
  9268                           indf1	equ	0xFE7
  9269                           postdec1	equ	0xFE5
  9270                           fsr1h	equ	0xFE2
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           plusw2	equ	0xFDB
  9276                           fsr2h	equ	0xFDA
  9277                           fsr2l	equ	0xFD9
  9278                           status	equ	0xFD8
  9279                           
  9280 ;; *************** function _ToSegment *****************
  9281 ;; Defined at:
  9282 ;;		line 284 in file "Library/Types.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;  pCHR            1    wreg     unsigned char 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  pCHR            1    0[BANK0 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  1    wreg      unsigned char 
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        1 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    7
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_HMI_SetSegments
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           	psect	text48
  9311  010A9A                     __ptext48:
  9312                           	opt stack 0
  9313  010A9A                     _ToSegment:
  9314                           	opt stack 13
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;incstack = 0
  9318                           ;ToSegment@pCHR stored from wreg
  9319  010A9A  0100               	movlb	0	; () banked
  9320  010A9C  6FB2               	movwf	ToSegment@pCHR& (0+255),b
  9321                           
  9322                           ;Types.c: 286: switch(pCHR)
  9323  010A9E  D07E               	goto	l853
  9324  010AA0  0E3F               	movlw	63
  9325  010AA2  0012               	return	
  9326  010AA4  0E06               	movlw	6
  9327  010AA6  0012               	return	
  9328  010AA8  0E5B               	movlw	91
  9329  010AAA  0012               	return	
  9330  010AAC  0E4F               	movlw	79
  9331  010AAE  0012               	return	
  9332  010AB0  0E66               	movlw	102
  9333  010AB2  0012               	return	
  9334  010AB4  0E6D               	movlw	109
  9335  010AB6  0012               	return	
  9336  010AB8  0E7D               	movlw	125
  9337  010ABA  0012               	return	
  9338  010ABC  0E07               	movlw	7
  9339  010ABE  0012               	return	
  9340  010AC0  0E7F               	movlw	127
  9341  010AC2  0012               	return	
  9342  010AC4  0E6F               	movlw	111
  9343  010AC6  0012               	return	
  9344  010AC8  0E5F               	movlw	95
  9345  010ACA  0012               	return	
  9346  010ACC  0E7C               	movlw	124
  9347  010ACE  0012               	return	
  9348  010AD0  0E58               	movlw	88
  9349  010AD2  0012               	return	
  9350  010AD4  0E5E               	movlw	94
  9351  010AD6  0012               	return	
  9352  010AD8  0E7B               	movlw	123
  9353  010ADA  0012               	return	
  9354  010ADC  0E71               	movlw	113
  9355  010ADE  0012               	return	
  9356  010AE0  0E6F               	movlw	111
  9357  010AE2  0012               	return	
  9358  010AE4  0E74               	movlw	116
  9359  010AE6  0012               	return	
  9360  010AE8  0E04               	movlw	4
  9361  010AEA  0012               	return	
  9362  010AEC  0E0E               	movlw	14
  9363  010AEE  0012               	return	
  9364  010AF0  0E7A               	movlw	122
  9365  010AF2  0012               	return	
  9366  010AF4  0E06               	movlw	6
  9367  010AF6  0012               	return	
  9368  010AF8  0E14               	movlw	20
  9369  010AFA  0012               	return	
  9370  010AFC  0E54               	movlw	84
  9371  010AFE  0012               	return	
  9372  010B00  0E5C               	movlw	92
  9373  010B02  0012               	return	
  9374  010B04  0E73               	movlw	115
  9375  010B06  0012               	return	
  9376  010B08  0E67               	movlw	103
  9377  010B0A  0012               	return	
  9378  010B0C  0E50               	movlw	80
  9379  010B0E  0012               	return	
  9380  010B10  0E6D               	movlw	109
  9381  010B12  0012               	return	
  9382  010B14  0E78               	movlw	120
  9383  010B16  0012               	return	
  9384  010B18  0E1C               	movlw	28
  9385  010B1A  0012               	return	
  9386  010B1C  0E62               	movlw	98
  9387  010B1E  0012               	return	
  9388  010B20  0E2A               	movlw	42
  9389  010B22  0012               	return	
  9390  010B24  0E64               	movlw	100
  9391  010B26  0012               	return	
  9392  010B28  0E6E               	movlw	110
  9393  010B2A  0012               	return	
  9394  010B2C  0E5B               	movlw	91
  9395  010B2E  0012               	return	
  9396  010B30  0E77               	movlw	119
  9397  010B32  0012               	return	
  9398  010B34  0E7F               	movlw	127
  9399  010B36  0012               	return	
  9400  010B38  0E39               	movlw	57
  9401  010B3A  0012               	return	
  9402  010B3C  0E3F               	movlw	63
  9403  010B3E  0012               	return	
  9404  010B40  0E79               	movlw	121
  9405  010B42  0012               	return	
  9406  010B44  0E71               	movlw	113
  9407  010B46  0012               	return	
  9408  010B48  0E3D               	movlw	61
  9409  010B4A  0012               	return	
  9410  010B4C  0E76               	movlw	118
  9411  010B4E  0012               	return	
  9412  010B50  0E06               	movlw	6
  9413  010B52  0012               	return	
  9414  010B54  0E1E               	movlw	30
  9415  010B56  0012               	return	
  9416  010B58  0E57               	movlw	87
  9417  010B5A  0012               	return	
  9418  010B5C  0E38               	movlw	56
  9419  010B5E  0012               	return	
  9420  010B60  0E76               	movlw	118
  9421  010B62  0012               	return	
  9422  010B64  0E76               	movlw	118
  9423  010B66  0012               	return	
  9424  010B68  0E3F               	movlw	63
  9425  010B6A  0012               	return	
  9426  010B6C  0E73               	movlw	115
  9427  010B6E  0012               	return	
  9428  010B70  0E3F               	movlw	63
  9429  010B72  0012               	return	
  9430  010B74  0E77               	movlw	119
  9431  010B76  0012               	return	
  9432  010B78  0E6D               	movlw	109
  9433  010B7A  0012               	return	
  9434  010B7C  0E31               	movlw	49
  9435  010B7E  0012               	return	
  9436  010B80  0E3E               	movlw	62
  9437  010B82  0012               	return	
  9438  010B84  0E3E               	movlw	62
  9439  010B86  0012               	return	
  9440  010B88  0E7E               	movlw	126
  9441  010B8A  0012               	return	
  9442  010B8C  0E76               	movlw	118
  9443  010B8E  0012               	return	
  9444  010B90  0E66               	movlw	102
  9445  010B92  0012               	return	
  9446  010B94  0E5B               	movlw	91
  9447  010B96  0012               	return	
  9448  010B98  0E80               	movlw	128
  9449  010B9A  0012               	return	
  9450  010B9C                     l853:
  9451  010B9C  0100               	movlb	0	; () banked
  9452  010B9E  51B2               	movf	ToSegment@pCHR& (0+255),w,b
  9453                           
  9454                           ; Switch size 1, requested type "space"
  9455                           ; Number of cases is 63, Range of values is 46 to 122
  9456                           ; switch strategies available:
  9457                           ; Name         Instructions Cycles
  9458                           ; simple_byte          190    96 (average)
  9459                           ;	Chosen strategy is simple_byte
  9460  010BA0  0A2E               	xorlw	46	; case 46
  9461  010BA2  B4D8               	btfsc	status,2,c
  9462  010BA4  D7F9               	goto	l917
  9463  010BA6  0A1E               	xorlw	30	; case 48
  9464  010BA8  B4D8               	btfsc	status,2,c
  9465  010BAA  D77A               	goto	l854
  9466  010BAC  0A01               	xorlw	1	; case 49
  9467  010BAE  B4D8               	btfsc	status,2,c
  9468  010BB0  D779               	goto	l856
  9469  010BB2  0A03               	xorlw	3	; case 50
  9470  010BB4  B4D8               	btfsc	status,2,c
  9471  010BB6  D778               	goto	l857
  9472  010BB8  0A01               	xorlw	1	; case 51
  9473  010BBA  B4D8               	btfsc	status,2,c
  9474  010BBC  D777               	goto	l858
  9475  010BBE  0A07               	xorlw	7	; case 52
  9476  010BC0  B4D8               	btfsc	status,2,c
  9477  010BC2  D776               	goto	l859
  9478  010BC4  0A01               	xorlw	1	; case 53
  9479  010BC6  B4D8               	btfsc	status,2,c
  9480  010BC8  D775               	goto	l860
  9481  010BCA  0A03               	xorlw	3	; case 54
  9482  010BCC  B4D8               	btfsc	status,2,c
  9483  010BCE  D774               	goto	l861
  9484  010BD0  0A01               	xorlw	1	; case 55
  9485  010BD2  B4D8               	btfsc	status,2,c
  9486  010BD4  D773               	goto	l862
  9487  010BD6  0A0F               	xorlw	15	; case 56
  9488  010BD8  B4D8               	btfsc	status,2,c
  9489  010BDA  D772               	goto	l863
  9490  010BDC  0A01               	xorlw	1	; case 57
  9491  010BDE  B4D8               	btfsc	status,2,c
  9492  010BE0  D771               	goto	l864
  9493  010BE2  0A78               	xorlw	120	; case 65
  9494  010BE4  B4D8               	btfsc	status,2,c
  9495  010BE6  D7A4               	goto	l891
  9496  010BE8  0A03               	xorlw	3	; case 66
  9497  010BEA  B4D8               	btfsc	status,2,c
  9498  010BEC  D7A3               	goto	l892
  9499  010BEE  0A01               	xorlw	1	; case 67
  9500  010BF0  B4D8               	btfsc	status,2,c
  9501  010BF2  D7A2               	goto	l893
  9502  010BF4  0A07               	xorlw	7	; case 68
  9503  010BF6  B4D8               	btfsc	status,2,c
  9504  010BF8  D7A1               	goto	l894
  9505  010BFA  0A01               	xorlw	1	; case 69
  9506  010BFC  B4D8               	btfsc	status,2,c
  9507  010BFE  D7A0               	goto	l895
  9508  010C00  0A03               	xorlw	3	; case 70
  9509  010C02  B4D8               	btfsc	status,2,c
  9510  010C04  D79F               	goto	l896
  9511  010C06  0A01               	xorlw	1	; case 71
  9512  010C08  B4D8               	btfsc	status,2,c
  9513  010C0A  D79E               	goto	l897
  9514  010C0C  0A0F               	xorlw	15	; case 72
  9515  010C0E  B4D8               	btfsc	status,2,c
  9516  010C10  D79D               	goto	l898
  9517  010C12  0A01               	xorlw	1	; case 73
  9518  010C14  B4D8               	btfsc	status,2,c
  9519  010C16  D79C               	goto	l899
  9520  010C18  0A03               	xorlw	3	; case 74
  9521  010C1A  B4D8               	btfsc	status,2,c
  9522  010C1C  D79B               	goto	l900
  9523  010C1E  0A01               	xorlw	1	; case 75
  9524  010C20  B4D8               	btfsc	status,2,c
  9525  010C22  D79A               	goto	l901
  9526  010C24  0A07               	xorlw	7	; case 76
  9527  010C26  B4D8               	btfsc	status,2,c
  9528  010C28  D799               	goto	l902
  9529  010C2A  0A01               	xorlw	1	; case 77
  9530  010C2C  B4D8               	btfsc	status,2,c
  9531  010C2E  D798               	goto	l903
  9532  010C30  0A03               	xorlw	3	; case 78
  9533  010C32  B4D8               	btfsc	status,2,c
  9534  010C34  D797               	goto	l904
  9535  010C36  0A01               	xorlw	1	; case 79
  9536  010C38  B4D8               	btfsc	status,2,c
  9537  010C3A  D796               	goto	l905
  9538  010C3C  0A1F               	xorlw	31	; case 80
  9539  010C3E  B4D8               	btfsc	status,2,c
  9540  010C40  D795               	goto	l906
  9541  010C42  0A01               	xorlw	1	; case 81
  9542  010C44  B4D8               	btfsc	status,2,c
  9543  010C46  D794               	goto	l907
  9544  010C48  0A03               	xorlw	3	; case 82
  9545  010C4A  B4D8               	btfsc	status,2,c
  9546  010C4C  D793               	goto	l908
  9547  010C4E  0A01               	xorlw	1	; case 83
  9548  010C50  B4D8               	btfsc	status,2,c
  9549  010C52  D792               	goto	l909
  9550  010C54  0A07               	xorlw	7	; case 84
  9551  010C56  B4D8               	btfsc	status,2,c
  9552  010C58  D791               	goto	l910
  9553  010C5A  0A01               	xorlw	1	; case 85
  9554  010C5C  B4D8               	btfsc	status,2,c
  9555  010C5E  D790               	goto	l911
  9556  010C60  0A03               	xorlw	3	; case 86
  9557  010C62  B4D8               	btfsc	status,2,c
  9558  010C64  D78F               	goto	l912
  9559  010C66  0A01               	xorlw	1	; case 87
  9560  010C68  B4D8               	btfsc	status,2,c
  9561  010C6A  D78E               	goto	l913
  9562  010C6C  0A0F               	xorlw	15	; case 88
  9563  010C6E  B4D8               	btfsc	status,2,c
  9564  010C70  D78D               	goto	l914
  9565  010C72  0A01               	xorlw	1	; case 89
  9566  010C74  B4D8               	btfsc	status,2,c
  9567  010C76  D78C               	goto	l915
  9568  010C78  0A03               	xorlw	3	; case 90
  9569  010C7A  B4D8               	btfsc	status,2,c
  9570  010C7C  D78B               	goto	l916
  9571  010C7E  0A3B               	xorlw	59	; case 97
  9572  010C80  B4D8               	btfsc	status,2,c
  9573  010C82  D722               	goto	l865
  9574  010C84  0A03               	xorlw	3	; case 98
  9575  010C86  B4D8               	btfsc	status,2,c
  9576  010C88  D721               	goto	l866
  9577  010C8A  0A01               	xorlw	1	; case 99
  9578  010C8C  B4D8               	btfsc	status,2,c
  9579  010C8E  D720               	goto	l867
  9580  010C90  0A07               	xorlw	7	; case 100
  9581  010C92  B4D8               	btfsc	status,2,c
  9582  010C94  D71F               	goto	l868
  9583  010C96  0A01               	xorlw	1	; case 101
  9584  010C98  B4D8               	btfsc	status,2,c
  9585  010C9A  D71E               	goto	l869
  9586  010C9C  0A03               	xorlw	3	; case 102
  9587  010C9E  B4D8               	btfsc	status,2,c
  9588  010CA0  D71D               	goto	l870
  9589  010CA2  0A01               	xorlw	1	; case 103
  9590  010CA4  B4D8               	btfsc	status,2,c
  9591  010CA6  D71C               	goto	l871
  9592  010CA8  0A0F               	xorlw	15	; case 104
  9593  010CAA  B4D8               	btfsc	status,2,c
  9594  010CAC  D71B               	goto	l872
  9595  010CAE  0A01               	xorlw	1	; case 105
  9596  010CB0  B4D8               	btfsc	status,2,c
  9597  010CB2  D71A               	goto	l873
  9598  010CB4  0A03               	xorlw	3	; case 106
  9599  010CB6  B4D8               	btfsc	status,2,c
  9600  010CB8  D719               	goto	l874
  9601  010CBA  0A01               	xorlw	1	; case 107
  9602  010CBC  B4D8               	btfsc	status,2,c
  9603  010CBE  D718               	goto	l875
  9604  010CC0  0A07               	xorlw	7	; case 108
  9605  010CC2  B4D8               	btfsc	status,2,c
  9606  010CC4  D717               	goto	l876
  9607  010CC6  0A01               	xorlw	1	; case 109
  9608  010CC8  B4D8               	btfsc	status,2,c
  9609  010CCA  D716               	goto	l877
  9610  010CCC  0A03               	xorlw	3	; case 110
  9611  010CCE  B4D8               	btfsc	status,2,c
  9612  010CD0  D715               	goto	l878
  9613  010CD2  0A01               	xorlw	1	; case 111
  9614  010CD4  B4D8               	btfsc	status,2,c
  9615  010CD6  D714               	goto	l879
  9616  010CD8  0A1F               	xorlw	31	; case 112
  9617  010CDA  B4D8               	btfsc	status,2,c
  9618  010CDC  D713               	goto	l880
  9619  010CDE  0A01               	xorlw	1	; case 113
  9620  010CE0  B4D8               	btfsc	status,2,c
  9621  010CE2  D712               	goto	l881
  9622  010CE4  0A03               	xorlw	3	; case 114
  9623  010CE6  B4D8               	btfsc	status,2,c
  9624  010CE8  D711               	goto	l882
  9625  010CEA  0A01               	xorlw	1	; case 115
  9626  010CEC  B4D8               	btfsc	status,2,c
  9627  010CEE  D710               	goto	l883
  9628  010CF0  0A07               	xorlw	7	; case 116
  9629  010CF2  B4D8               	btfsc	status,2,c
  9630  010CF4  D70F               	goto	l884
  9631  010CF6  0A01               	xorlw	1	; case 117
  9632  010CF8  B4D8               	btfsc	status,2,c
  9633  010CFA  D70E               	goto	l885
  9634  010CFC  0A03               	xorlw	3	; case 118
  9635  010CFE  B4D8               	btfsc	status,2,c
  9636  010D00  D70D               	goto	l886
  9637  010D02  0A01               	xorlw	1	; case 119
  9638  010D04  B4D8               	btfsc	status,2,c
  9639  010D06  D70C               	goto	l887
  9640  010D08  0A0F               	xorlw	15	; case 120
  9641  010D0A  B4D8               	btfsc	status,2,c
  9642  010D0C  D70B               	goto	l888
  9643  010D0E  0A01               	xorlw	1	; case 121
  9644  010D10  B4D8               	btfsc	status,2,c
  9645  010D12  D70A               	goto	l889
  9646  010D14  0A03               	xorlw	3	; case 122
  9647  010D16  B4D8               	btfsc	status,2,c
  9648  010D18  D709               	goto	l890
  9649                           
  9650                           ;Types.c: 354: return 0;
  9651                           
  9652                           ; BSR set to: 0
  9653  010D1A  0E00               	movlw	0
  9654  010D1C  0012               	return	
  9655  010D1E                     __end_of_ToSegment:
  9656                           	opt stack 0
  9657                           tosu	equ	0xFFF
  9658                           tosh	equ	0xFFE
  9659                           tosl	equ	0xFFD
  9660                           pclath	equ	0xFFA
  9661                           tblptru	equ	0xFF8
  9662                           tblptrh	equ	0xFF7
  9663                           tblptrl	equ	0xFF6
  9664                           tablat	equ	0xFF5
  9665                           prodh	equ	0xFF4
  9666                           prodl	equ	0xFF3
  9667                           postinc0	equ	0xFEE
  9668                           plusw0	equ	0xFEB
  9669                           wreg	equ	0xFE8
  9670                           indf1	equ	0xFE7
  9671                           postdec1	equ	0xFE5
  9672                           fsr1h	equ	0xFE2
  9673                           fsr1l	equ	0xFE1
  9674                           indf2	equ	0xFDF
  9675                           postinc2	equ	0xFDE
  9676                           postdec2	equ	0xFDD
  9677                           plusw2	equ	0xFDB
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8
  9681                           
  9682 ;; *************** function _HMI_SetDown *****************
  9683 ;; Defined at:
  9684 ;;		line 180 in file "HMI.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  pValue          1    wreg     unsigned char 
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;  pValue          1    0[BANK0 ] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  1    wreg      void 
  9691 ;; Registers used:
  9692 ;;		wreg
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;Total ram usage:        1 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    7
  9705 ;; This function calls:
  9706 ;;		Nothing
  9707 ;; This function is called by:
  9708 ;;		_Event_HMI_DownButton
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           	psect	text49
  9713  0149FA                     __ptext49:
  9714                           	opt stack 0
  9715  0149FA                     _HMI_SetDown:
  9716                           	opt stack 15
  9717                           
  9718                           ;incstack = 0
  9719                           ;HMI_SetDown@pValue stored from wreg
  9720  0149FA  0100               	movlb	0	; () banked
  9721  0149FC  6FB2               	movwf	HMI_SetDown@pValue& (0+255),b
  9722                           
  9723                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
  9724  0149FE  0100               	movlb	0	; () banked
  9725  014A00  B1B2               	btfsc	HMI_SetDown@pValue& (0+255),0,b
  9726  014A02  D003               	bra	u6805
  9727  014A04  0101               	movlb	1	; () banked
  9728  014A06  9330               	bcf	(_HMIBoard+6)& (0+255),1,b
  9729  014A08  D002               	bra	u6806
  9730  014A0A                     u6805:
  9731  014A0A  0101               	movlb	1	; () banked
  9732  014A0C  8330               	bsf	(_HMIBoard+6)& (0+255),1,b
  9733  014A0E                     u6806:
  9734                           
  9735                           ; BSR set to: 1
  9736  014A0E  0012               	return		;funcret
  9737  014A10                     __end_of_HMI_SetDown:
  9738                           	opt stack 0
  9739                           tosu	equ	0xFFF
  9740                           tosh	equ	0xFFE
  9741                           tosl	equ	0xFFD
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           postinc0	equ	0xFEE
  9750                           plusw0	equ	0xFEB
  9751                           wreg	equ	0xFE8
  9752                           indf1	equ	0xFE7
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           plusw2	equ	0xFDB
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _HMI_SetBar *****************
  9765 ;; Defined at:
  9766 ;;		line 205 in file "HMI.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  pValue          1    wreg     unsigned char 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  pValue          1    0[BANK0 ] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        1 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    7
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_Event_DIPSwitch
  9791 ;;		_Event_HMI_DIPSwitch
  9792 ;;		_Event_HMI_LeftButton
  9793 ;;		_Event_HMI_RightButton
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text50
  9798  014A94                     __ptext50:
  9799                           	opt stack 0
  9800  014A94                     _HMI_SetBar:
  9801                           	opt stack 15
  9802                           
  9803                           ; BSR set to: 1
  9804                           ;incstack = 0
  9805                           ;HMI_SetBar@pValue stored from wreg
  9806  014A94  0100               	movlb	0	; () banked
  9807  014A96  6FB2               	movwf	HMI_SetBar@pValue& (0+255),b
  9808                           
  9809                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9810  014A98  C0B2  F131         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9811  014A9C  0012               	return		;funcret
  9812  014A9E                     __end_of_HMI_SetBar:
  9813                           	opt stack 0
  9814                           tosu	equ	0xFFF
  9815                           tosh	equ	0xFFE
  9816                           tosl	equ	0xFFD
  9817                           pclath	equ	0xFFA
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           postinc0	equ	0xFEE
  9825                           plusw0	equ	0xFEB
  9826                           wreg	equ	0xFE8
  9827                           indf1	equ	0xFE7
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           plusw2	equ	0xFDB
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function _HMI_GetBar *****************
  9840 ;; Defined at:
  9841 ;;		line 209 in file "HMI.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  1    wreg      unsigned char 
  9848 ;; Registers used:
  9849 ;;		wreg, status,2
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    7
  9862 ;; This function calls:
  9863 ;;		Nothing
  9864 ;; This function is called by:
  9865 ;;		_Event_DIPSwitch
  9866 ;;		_Event_HMI_DIPSwitch
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           	psect	text51
  9871  014AB8                     __ptext51:
  9872                           	opt stack 0
  9873  014AB8                     _HMI_GetBar:
  9874                           	opt stack 15
  9875                           
  9876                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9877                           
  9878                           ;incstack = 0
  9879  014AB8  0101               	movlb	1	; () banked
  9880  014ABA  5131               	movf	(_HMIBoard+7)& (0+255),w,b
  9881  014ABC  0012               	return	
  9882  014ABE                     __end_of_HMI_GetBar:
  9883                           	opt stack 0
  9884                           tosu	equ	0xFFF
  9885                           tosh	equ	0xFFE
  9886                           tosl	equ	0xFFD
  9887                           pclath	equ	0xFFA
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           postinc0	equ	0xFEE
  9895                           plusw0	equ	0xFEB
  9896                           wreg	equ	0xFE8
  9897                           indf1	equ	0xFE7
  9898                           postdec1	equ	0xFE5
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           plusw2	equ	0xFDB
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _Console_SetForecolour *****************
  9910 ;; Defined at:
  9911 ;;		line 286 in file "Library/Console.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  pColour         2    0[BANK0 ] unsigned short 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		None
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;Total ram usage:        2 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    7
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_displaySID
  9936 ;;		_displayMode
  9937 ;;		_continuousMode
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text52
  9942  014A9E                     __ptext52:
  9943                           	opt stack 0
  9944  014A9E                     _Console_SetForecolour:
  9945                           	opt stack 19
  9946                           
  9947                           ;Console.c: 289: gForecolour = pColour;
  9948                           
  9949                           ; BSR set to: 1
  9950                           ;incstack = 0
  9951  014A9E  C0B2  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
  9952  014AA2  C0B3  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
  9953  014AA6  0012               	return		;funcret
  9954  014AA8                     __end_of_Console_SetForecolour:
  9955                           	opt stack 0
  9956                           tosu	equ	0xFFF
  9957                           tosh	equ	0xFFE
  9958                           tosl	equ	0xFFD
  9959                           pclath	equ	0xFFA
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           postinc0	equ	0xFEE
  9967                           plusw0	equ	0xFEB
  9968                           wreg	equ	0xFE8
  9969                           indf1	equ	0xFE7
  9970                           postdec1	equ	0xFE5
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           plusw2	equ	0xFDB
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8
  9980                           
  9981 ;; *************** function _Console_Render *****************
  9982 ;; Defined at:
  9983 ;;		line 377 in file "Library/Console.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  lCursor         4   38[BANK0 ] struct Point
  9988 ;;  y               1   43[BANK0 ] unsigned char 
  9989 ;;  x               1   42[BANK0 ] unsigned char 
  9990 ;;  temp            1   37[BANK0 ] unsigned char 
  9991 ;;  Temp            2    0        unsigned short 
  9992 ;; Return value:  Size  Location     Type
  9993 ;;                  1    wreg      void 
  9994 ;; Registers used:
  9995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;Total ram usage:        9 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:   11
 10008 ;; This function calls:
 10009 ;;		_Console_MakeField
 10010 ;;		_LCD_DrawField
 10011 ;;		_LCD_FillRectangle
 10012 ;; This function is called by:
 10013 ;;		_displayText
 10014 ;;		_continuousMode
 10015 ;;		_nullMode
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           	psect	text53
 10020  01119E                     __ptext53:
 10021                           	opt stack 0
 10022  01119E                     _Console_Render:
 10023                           	opt stack 16
 10024                           
 10025                           ;Console.c: 379: Colour Temp;
 10026                           ;Console.c: 380: if (change)
 10027                           
 10028                           ;incstack = 0
 10029  01119E  0100               	movlb	0	; () banked
 10030  0111A0  51FF               	movf	_change& (0+255),w,b
 10031  0111A2  B4D8               	btfsc	status,2,c
 10032  0111A4  0012               	return	
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;Console.c: 381: {
 10036                           ;Console.c: 382: UINT8 x, y, temp;
 10037                           ;Console.c: 383: Point lCursor = {6,6};
 10038  0111A6  C1DB  F0D8         	movff	Console_Render@F6956,Console_Render@lCursor
 10039  0111AA  C1DC  F0D9         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10040  0111AE  C1DD  F0DA         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10041  0111B2  C1DE  F0DB         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;Console.c: 385: if (clearall)
 10045  0111B6  0100               	movlb	0	; () banked
 10046  0111B8  517C               	movf	_clearall& (0+255),w,b
 10047  0111BA  B4D8               	btfsc	status,2,c
 10048  0111BC  D005               	goto	l1056
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;Console.c: 386: {
 10052                           ;Console.c: 389: temp = lBufferY;
 10053  0111BE  C07A  F0D7         	movff	_lBufferY,Console_Render@temp
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10057  0111C2  0E0F               	movlw	15
 10058  0111C4  0100               	movlb	0	; () banked
 10059  0111C6  6F7A               	movwf	_lBufferY& (0+255),b
 10060  0111C8                     l1056:
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;Console.c: 391: }
 10064                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10065  0111C8  0E00               	movlw	0
 10066  0111CA  0100               	movlb	0	; () banked
 10067  0111CC  6FDD               	movwf	Console_Render@y& (0+255),b
 10068  0111CE  D0DF               	goto	l1057
 10069  0111D0                     
 10070                           ; BSR set to: 0
 10071                           ;Console.c: 394: {
 10072                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10073                           
 10074                           ; BSR set to: 0
 10075  0111D0  0100               	movlb	0	; () banked
 10076  0111D2  51DD               	movf	Console_Render@y& (0+255),w,b
 10077  0111D4  0D02               	mullw	2
 10078  0111D6  0E00               	movlw	low _lCBuffer
 10079  0111D8  24F3               	addwf	prodl,w,c
 10080  0111DA  6ED9               	movwf	fsr2l,c
 10081  0111DC  0E01               	movlw	high _lCBuffer
 10082  0111DE  20F4               	addwfc	prodh,w,c
 10083  0111E0  6EDA               	movwf	fsr2h,c
 10084  0111E2  CFDE F0FD          	movff	postinc2,_gForecolour
 10085  0111E6  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10089  0111EA  0E00               	movlw	0
 10090  0111EC  0100               	movlb	0	; () banked
 10091  0111EE  6FDC               	movwf	Console_Render@x& (0+255),b
 10092  0111F0                     l11414:
 10093                           
 10094                           ; BSR set to: 0
 10095  0111F0  0E13               	movlw	19
 10096  0111F2  0100               	movlb	0	; () banked
 10097  0111F4  65DC               	cpfsgt	Console_Render@x& (0+255),b
 10098  0111F6  D001               	goto	l1059
 10099  0111F8  D0BE               	goto	u7770
 10100  0111FA                     l1059:
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;Console.c: 397: {
 10104                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10105                           
 10106                           ; BSR set to: 0
 10107  0111FA  0100               	movlb	0	; () banked
 10108  0111FC  51DD               	movf	Console_Render@y& (0+255),w,b
 10109  0111FE  0D14               	mullw	20
 10110  011200  0E46               	movlw	low _lBuffer
 10111  011202  0100               	movlb	0	; () banked
 10112  011204  6FD5               	movwf	??_Console_Render& (0+255),b
 10113  011206  0E02               	movlw	high _lBuffer
 10114  011208  0100               	movlb	0	; () banked
 10115  01120A  6FD6               	movwf	(??_Console_Render+1)& (0+255),b
 10116  01120C  50F3               	movf	prodl,w,c
 10117  01120E  0100               	movlb	0	; () banked
 10118  011210  27D5               	addwf	??_Console_Render& (0+255),f,b
 10119  011212  50F4               	movf	prodh,w,c
 10120  011214  0100               	movlb	0	; () banked
 10121  011216  23D6               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10122  011218  0100               	movlb	0	; () banked
 10123  01121A  51DC               	movf	Console_Render@x& (0+255),w,b
 10124  01121C  0D01               	mullw	1
 10125  01121E  50F3               	movf	prodl,w,c
 10126  011220  0100               	movlb	0	; () banked
 10127  011222  25D5               	addwf	??_Console_Render& (0+255),w,b
 10128  011224  6ED9               	movwf	fsr2l,c
 10129  011226  50F4               	movf	prodh,w,c
 10130  011228  0100               	movlb	0	; () banked
 10131  01122A  21D6               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10132  01122C  6EDA               	movwf	fsr2h,c
 10133  01122E  AEDF               	btfss	indf2,7,c
 10134  011230  D09A               	goto	l1063
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;Console.c: 399: {
 10138                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10139  011232  0100               	movlb	0	; () banked
 10140  011234  51DD               	movf	Console_Render@y& (0+255),w,b
 10141  011236  0D14               	mullw	20
 10142  011238  0E46               	movlw	low _lBuffer
 10143  01123A  0100               	movlb	0	; () banked
 10144  01123C  6FD5               	movwf	??_Console_Render& (0+255),b
 10145  01123E  0E02               	movlw	high _lBuffer
 10146  011240  0100               	movlb	0	; () banked
 10147  011242  6FD6               	movwf	(??_Console_Render+1)& (0+255),b
 10148  011244  50F3               	movf	prodl,w,c
 10149  011246  0100               	movlb	0	; () banked
 10150  011248  27D5               	addwf	??_Console_Render& (0+255),f,b
 10151  01124A  50F4               	movf	prodh,w,c
 10152  01124C  0100               	movlb	0	; () banked
 10153  01124E  23D6               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10154  011250  0100               	movlb	0	; () banked
 10155  011252  51DC               	movf	Console_Render@x& (0+255),w,b
 10156  011254  0D01               	mullw	1
 10157  011256  50F3               	movf	prodl,w,c
 10158  011258  0100               	movlb	0	; () banked
 10159  01125A  25D5               	addwf	??_Console_Render& (0+255),w,b
 10160  01125C  6ED9               	movwf	fsr2l,c
 10161  01125E  50F4               	movf	prodh,w,c
 10162  011260  0100               	movlb	0	; () banked
 10163  011262  21D6               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10164  011264  6EDA               	movwf	fsr2h,c
 10165  011266  0E7F               	movlw	127
 10166  011268  16DF               	andwf	indf2,f,c
 10167                           
 10168                           ;Console.c: 401: if (lBuffer[y][x])
 10169  01126A  0100               	movlb	0	; () banked
 10170  01126C  51DD               	movf	Console_Render@y& (0+255),w,b
 10171  01126E  0D14               	mullw	20
 10172  011270  0E46               	movlw	low _lBuffer
 10173  011272  0100               	movlb	0	; () banked
 10174  011274  6FD5               	movwf	??_Console_Render& (0+255),b
 10175  011276  0E02               	movlw	high _lBuffer
 10176  011278  0100               	movlb	0	; () banked
 10177  01127A  6FD6               	movwf	(??_Console_Render+1)& (0+255),b
 10178  01127C  50F3               	movf	prodl,w,c
 10179  01127E  0100               	movlb	0	; () banked
 10180  011280  27D5               	addwf	??_Console_Render& (0+255),f,b
 10181  011282  50F4               	movf	prodh,w,c
 10182  011284  0100               	movlb	0	; () banked
 10183  011286  23D6               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10184  011288  0100               	movlb	0	; () banked
 10185  01128A  51DC               	movf	Console_Render@x& (0+255),w,b
 10186  01128C  0D01               	mullw	1
 10187  01128E  50F3               	movf	prodl,w,c
 10188  011290  0100               	movlb	0	; () banked
 10189  011292  25D5               	addwf	??_Console_Render& (0+255),w,b
 10190  011294  6ED9               	movwf	fsr2l,c
 10191  011296  50F4               	movf	prodh,w,c
 10192  011298  0100               	movlb	0	; () banked
 10193  01129A  21D6               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10194  01129C  6EDA               	movwf	fsr2h,c
 10195  01129E  50DF               	movf	indf2,w,c
 10196  0112A0  B4D8               	btfsc	status,2,c
 10197  0112A2  D04A               	goto	l1062
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;Console.c: 402: {
 10201                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10202  0112A4  C073  F0BB         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10203  0112A8  C074  F0BC         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10204  0112AC  C0D8  F0BD         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10205  0112B0  C0D9  F0BE         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10206  0112B4  C0DA  F0BF         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10207  0112B8  C0DB  F0C0         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10208  0112BC  C0F5  F0C1         	movff	_gCharSize,LCD_FillRectangle@pSize
 10209  0112C0  C0F6  F0C2         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10210  0112C4  C0F7  F0C3         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10211  0112C8  C0F8  F0C4         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10212  0112CC  ECE6  F09B         	call	_LCD_FillRectangle	;wreg free
 10213                           
 10214                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10215  0112D0  0100               	movlb	0	; () banked
 10216  0112D2  51DD               	movf	Console_Render@y& (0+255),w,b
 10217  0112D4  0D14               	mullw	20
 10218  0112D6  0E46               	movlw	low _lBuffer
 10219  0112D8  0100               	movlb	0	; () banked
 10220  0112DA  6FD5               	movwf	??_Console_Render& (0+255),b
 10221  0112DC  0E02               	movlw	high _lBuffer
 10222  0112DE  0100               	movlb	0	; () banked
 10223  0112E0  6FD6               	movwf	(??_Console_Render+1)& (0+255),b
 10224  0112E2  50F3               	movf	prodl,w,c
 10225  0112E4  0100               	movlb	0	; () banked
 10226  0112E6  27D5               	addwf	??_Console_Render& (0+255),f,b
 10227  0112E8  50F4               	movf	prodh,w,c
 10228  0112EA  0100               	movlb	0	; () banked
 10229  0112EC  23D6               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10230  0112EE  0100               	movlb	0	; () banked
 10231  0112F0  51DC               	movf	Console_Render@x& (0+255),w,b
 10232  0112F2  0D01               	mullw	1
 10233  0112F4  50F3               	movf	prodl,w,c
 10234  0112F6  0100               	movlb	0	; () banked
 10235  0112F8  25D5               	addwf	??_Console_Render& (0+255),w,b
 10236  0112FA  6ED9               	movwf	fsr2l,c
 10237  0112FC  50F4               	movf	prodh,w,c
 10238  0112FE  0100               	movlb	0	; () banked
 10239  011300  21D6               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10240  011302  6EDA               	movwf	fsr2h,c
 10241  011304  50DF               	movf	indf2,w,c
 10242  011306  EC8A  F093         	call	_Console_MakeField
 10243  01130A  C0B7  F0C4         	movff	?_Console_MakeField,LCD_DrawField@pField
 10244  01130E  C0B8  F0C5         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10245  011312  C0D8  F0C6         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10246  011316  C0D9  F0C7         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10247  01131A  C0DA  F0C8         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10248  01131E  C0DB  F0C9         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10249  011322  C0F5  F0CA         	movff	_gCharSize,LCD_DrawField@pSize
 10250  011326  C0F6  F0CB         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10251  01132A  C0F7  F0CC         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10252  01132E  C0F8  F0CD         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10253  011332  EC8C  F098         	call	_LCD_DrawField	;wreg free
 10254                           
 10255                           ;Console.c: 405: }
 10256  011336  D017               	goto	l1063
 10257  011338                     l1062:
 10258                           
 10259                           ;Console.c: 406: else
 10260                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10261  011338  0E00               	movlw	0
 10262  01133A  0100               	movlb	0	; () banked
 10263  01133C  6FBC               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10264  01133E  0E00               	movlw	0
 10265  011340  6FBB               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10266  011342  C0D8  F0BD         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10267  011346  C0D9  F0BE         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10268  01134A  C0DA  F0BF         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10269  01134E  C0DB  F0C0         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10270  011352  C0F5  F0C1         	movff	_gCharSize,LCD_FillRectangle@pSize
 10271  011356  C0F6  F0C2         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10272  01135A  C0F7  F0C3         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10273  01135E  C0F8  F0C4         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10274  011362  ECE6  F09B         	call	_LCD_FillRectangle	;wreg free
 10275  011366                     l1063:
 10276                           
 10277                           ;Console.c: 408: }
 10278                           ;Console.c: 409: lCursor.x += (5 + 1);
 10279  011366  0E06               	movlw	6
 10280  011368  0100               	movlb	0	; () banked
 10281  01136A  27D8               	addwf	Console_Render@lCursor& (0+255),f,b
 10282  01136C  0E00               	movlw	0
 10283  01136E  23D9               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10284                           
 10285                           ; BSR set to: 0
 10286  011370  0100               	movlb	0	; () banked
 10287  011372  2BDC               	incf	Console_Render@x& (0+255),f,b
 10288  011374  D73D               	goto	l11414
 10289  011376                     u7770:
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;Console.c: 410: }
 10293                           ;Console.c: 411: lCursor.y += (7 + 1);
 10294                           
 10295                           ; BSR set to: 0
 10296  011376  0E08               	movlw	8
 10297  011378  0100               	movlb	0	; () banked
 10298  01137A  27DA               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10299  01137C  0E00               	movlw	0
 10300  01137E  23DB               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;Console.c: 412: lCursor.x = 6;
 10304  011380  0E00               	movlw	0
 10305  011382  0100               	movlb	0	; () banked
 10306  011384  6FD9               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10307  011386  0E06               	movlw	6
 10308  011388  6FD8               	movwf	Console_Render@lCursor& (0+255),b
 10309                           
 10310                           ; BSR set to: 0
 10311  01138A  0100               	movlb	0	; () banked
 10312  01138C  2BDD               	incf	Console_Render@y& (0+255),f,b
 10313  01138E                     l1057:
 10314                           
 10315                           ; BSR set to: 0
 10316                           
 10317                           ; BSR set to: 0
 10318  01138E  0100               	movlb	0	; () banked
 10319  011390  51DD               	movf	Console_Render@y& (0+255),w,b
 10320  011392  0100               	movlb	0	; () banked
 10321  011394  5D7A               	subwf	_lBufferY& (0+255),w,b
 10322  011396  B0D8               	btfsc	status,0,c
 10323  011398  D71B               	goto	l1058
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;Console.c: 413: }
 10327                           ;Console.c: 415: if (clearall)
 10328                           
 10329                           ; BSR set to: 0
 10330  01139A  0100               	movlb	0	; () banked
 10331  01139C  517C               	movf	_clearall& (0+255),w,b
 10332  01139E  B4D8               	btfsc	status,2,c
 10333  0113A0  0012               	return	
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;Console.c: 416: {
 10337                           ;Console.c: 417: clearall = 0;
 10338  0113A2  0E00               	movlw	0
 10339  0113A4  0100               	movlb	0	; () banked
 10340  0113A6  6F7C               	movwf	_clearall& (0+255),b
 10341                           
 10342                           ; BSR set to: 0
 10343                           ;Console.c: 418: lBufferY = temp;
 10344  0113A8  C0D7  F07A         	movff	Console_Render@temp,_lBufferY
 10345                           
 10346                           ; BSR set to: 0
 10347  0113AC  0012               	return	
 10348  0113AE                     __end_of_Console_Render:
 10349                           	opt stack 0
 10350                           tosu	equ	0xFFF
 10351                           tosh	equ	0xFFE
 10352                           tosl	equ	0xFFD
 10353                           pclath	equ	0xFFA
 10354                           tblptru	equ	0xFF8
 10355                           tblptrh	equ	0xFF7
 10356                           tblptrl	equ	0xFF6
 10357                           tablat	equ	0xFF5
 10358                           prodh	equ	0xFF4
 10359                           prodl	equ	0xFF3
 10360                           postinc0	equ	0xFEE
 10361                           plusw0	equ	0xFEB
 10362                           wreg	equ	0xFE8
 10363                           indf1	equ	0xFE7
 10364                           postdec1	equ	0xFE5
 10365                           fsr1h	equ	0xFE2
 10366                           fsr1l	equ	0xFE1
 10367                           indf2	equ	0xFDF
 10368                           postinc2	equ	0xFDE
 10369                           postdec2	equ	0xFDD
 10370                           plusw2	equ	0xFDB
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function _LCD_FillRectangle *****************
 10376 ;; Defined at:
 10377 ;;		line 318 in file "Library/LCD.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  pColour         2    9[BANK0 ] unsigned short 
 10380 ;;  pPoint          4   11[BANK0 ] struct Point
 10381 ;;  pSize           4   15[BANK0 ] struct Point
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  j               1   22[BANK0 ] unsigned char 
 10384 ;;  i               1   21[BANK0 ] unsigned char 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10394 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;Total ram usage:       14 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:   10
 10401 ;; This function calls:
 10402 ;;		_LCD_Word_Write
 10403 ;;		_Set_Addr_Window
 10404 ;; This function is called by:
 10405 ;;		_Console_Render
 10406 ;;		_Console_ClearLine
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           	psect	text54
 10411  0137CC                     __ptext54:
 10412                           	opt stack 0
 10413  0137CC                     _LCD_FillRectangle:
 10414                           	opt stack 16
 10415                           
 10416                           ;LCD.c: 320: UINT8 i = 0x00;
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;incstack = 0
 10420  0137CC  0E00               	movlw	0
 10421  0137CE  0100               	movlb	0	; () banked
 10422  0137D0  6FC7               	movwf	LCD_FillRectangle@i& (0+255),b
 10423                           
 10424                           ;LCD.c: 321: UINT8 j = 0x00;
 10425  0137D2  0E00               	movlw	0
 10426  0137D4  0100               	movlb	0	; () banked
 10427  0137D6  6FC8               	movwf	LCD_FillRectangle@j& (0+255),b
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10431  0137D8  C0BF  F0B7         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10432  0137DC  0100               	movlb	0	; () banked
 10433  0137DE  51BD               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10434  0137E0  0100               	movlb	0	; () banked
 10435  0137E2  25C1               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10436  0137E4  0100               	movlb	0	; () banked
 10437  0137E6  6FC5               	movwf	??_LCD_FillRectangle& (0+255),b
 10438  0137E8  0100               	movlb	0	; () banked
 10439  0137EA  05C5               	decf	??_LCD_FillRectangle& (0+255),w,b
 10440  0137EC  0100               	movlb	0	; () banked
 10441  0137EE  6FB8               	movwf	Set_Addr_Window@xe& (0+255),b
 10442  0137F0  0100               	movlb	0	; () banked
 10443  0137F2  51BF               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10444  0137F4  0100               	movlb	0	; () banked
 10445  0137F6  25C3               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10446  0137F8  0100               	movlb	0	; () banked
 10447  0137FA  6FC6               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10448  0137FC  0100               	movlb	0	; () banked
 10449  0137FE  05C6               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10450  013800  0100               	movlb	0	; () banked
 10451  013802  6FB9               	movwf	Set_Addr_Window@ye& (0+255),b
 10452  013804  0100               	movlb	0	; () banked
 10453  013806  51BD               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10454  013808  ECE9  F096         	call	_Set_Addr_Window
 10455                           
 10456                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10457  01380C  C0C3  F0C8         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10458  013810                     l10882:
 10459  013810  0100               	movlb	0	; () banked
 10460  013812  51C8               	movf	LCD_FillRectangle@j& (0+255),w,b
 10461  013814  0100               	movlb	0	; () banked
 10462  013816  B4D8               	btfsc	status,2,c
 10463  013818  0012               	return	
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10467                           
 10468                           ; BSR set to: 0
 10469  01381A  C0C1  F0C7         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10470  01381E                     l10886:
 10471                           
 10472                           ; BSR set to: 0
 10473  01381E  0100               	movlb	0	; () banked
 10474  013820  51C7               	movf	LCD_FillRectangle@i& (0+255),w,b
 10475  013822  0100               	movlb	0	; () banked
 10476  013824  B4D8               	btfsc	status,2,c
 10477  013826  D009               	goto	u7320
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10481                           
 10482                           ; BSR set to: 0
 10483                           
 10484                           ; BSR set to: 0
 10485  013828  C0BB  F0B7         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10486  01382C  C0BC  F0B8         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10487  013830  EC13  F0A4         	call	_LCD_Word_Write	;wreg free
 10488  013834  0100               	movlb	0	; () banked
 10489  013836  07C7               	decf	LCD_FillRectangle@i& (0+255),f,b
 10490  013838  D7F2               	goto	l10886
 10491  01383A                     u7320:
 10492                           
 10493                           ; BSR set to: 0
 10494                           
 10495                           ; BSR set to: 0
 10496  01383A  0100               	movlb	0	; () banked
 10497  01383C  07C8               	decf	LCD_FillRectangle@j& (0+255),f,b
 10498  01383E  D7E8               	goto	l10882
 10499  013840                     __end_of_LCD_FillRectangle:
 10500                           	opt stack 0
 10501                           tosu	equ	0xFFF
 10502                           tosh	equ	0xFFE
 10503                           tosl	equ	0xFFD
 10504                           pclath	equ	0xFFA
 10505                           tblptru	equ	0xFF8
 10506                           tblptrh	equ	0xFF7
 10507                           tblptrl	equ	0xFF6
 10508                           tablat	equ	0xFF5
 10509                           prodh	equ	0xFF4
 10510                           prodl	equ	0xFF3
 10511                           postinc0	equ	0xFEE
 10512                           plusw0	equ	0xFEB
 10513                           wreg	equ	0xFE8
 10514                           indf1	equ	0xFE7
 10515                           postdec1	equ	0xFE5
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           plusw2	equ	0xFDB
 10522                           fsr2h	equ	0xFDA
 10523                           fsr2l	equ	0xFD9
 10524                           status	equ	0xFD8
 10525                           
 10526 ;; *************** function _LCD_DrawField *****************
 10527 ;; Defined at:
 10528 ;;		line 393 in file "Library/LCD.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10531 ;;		 -> Console_MakeField@Fill(70), 
 10532 ;;  pPoint          4   20[BANK0 ] struct Point
 10533 ;;  pSize           4   24[BANK0 ] struct Point
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  count           2   30[BANK0 ] unsigned short 
 10536 ;;  i               1   34[BANK0 ] unsigned char 
 10537 ;;  ymax            1   33[BANK0 ] unsigned char 
 10538 ;;  xmax            1   32[BANK0 ] unsigned char 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  1    wreg      void 
 10541 ;; Registers used:
 10542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10548 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;Total ram usage:       17 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:   10
 10555 ;; This function calls:
 10556 ;;		_LCD_Word_Write
 10557 ;;		_Set_Addr_Window
 10558 ;;		___wmul
 10559 ;; This function is called by:
 10560 ;;		_Console_Render
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           	psect	text55
 10565  013118                     __ptext55:
 10566                           	opt stack 0
 10567  013118                     _LCD_DrawField:
 10568                           	opt stack 16
 10569                           
 10570                           ;LCD.c: 396: UINT8 i = 0x00;
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;incstack = 0
 10574  013118  0E00               	movlw	0
 10575  01311A  0100               	movlb	0	; () banked
 10576  01311C  6FD4               	movwf	LCD_DrawField@i& (0+255),b
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10580  01311E  0100               	movlb	0	; () banked
 10581  013120  51C6               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10582  013122  0100               	movlb	0	; () banked
 10583  013124  25CA               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10584  013126  0100               	movlb	0	; () banked
 10585  013128  6FD2               	movwf	LCD_DrawField@xmax& (0+255),b
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10589  01312A  0100               	movlb	0	; () banked
 10590  01312C  51C8               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10591  01312E  0100               	movlb	0	; () banked
 10592  013130  25CC               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10593  013132  0100               	movlb	0	; () banked
 10594  013134  6FD3               	movwf	LCD_DrawField@ymax& (0+255),b
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10598  013136  C0CC  F0B2         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10599  01313A  C0CD  F0B3         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10600  01313E  C0CA  F0B4         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10601  013142  C0CB  F0B5         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10602  013146  EC53  F0A2         	call	___wmul	;wreg free
 10603  01314A  C0B2  F0D0         	movff	?___wmul,LCD_DrawField@count
 10604  01314E  C0B3  F0D1         	movff	?___wmul+1,LCD_DrawField@count+1
 10605                           
 10606                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10607  013152  C0C8  F0B7         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10608  013156  0100               	movlb	0	; () banked
 10609  013158  05D2               	decf	LCD_DrawField@xmax& (0+255),w,b
 10610  01315A  0100               	movlb	0	; () banked
 10611  01315C  6FB8               	movwf	Set_Addr_Window@xe& (0+255),b
 10612  01315E  0100               	movlb	0	; () banked
 10613  013160  05D3               	decf	LCD_DrawField@ymax& (0+255),w,b
 10614  013162  0100               	movlb	0	; () banked
 10615  013164  6FB9               	movwf	Set_Addr_Window@ye& (0+255),b
 10616  013166  0100               	movlb	0	; () banked
 10617  013168  51C6               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10618  01316A  ECE9  F096         	call	_Set_Addr_Window
 10619                           
 10620                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10621  01316E  0E00               	movlw	0
 10622  013170  0100               	movlb	0	; () banked
 10623  013172  6FD4               	movwf	LCD_DrawField@i& (0+255),b
 10624  013174  D013               	goto	l183
 10625  013176                     
 10626                           ; BSR set to: 0
 10627                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10628                           
 10629                           ; BSR set to: 0
 10630  013176  0100               	movlb	0	; () banked
 10631  013178  51D4               	movf	LCD_DrawField@i& (0+255),w,b
 10632  01317A  0D02               	mullw	2
 10633  01317C  50F3               	movf	prodl,w,c
 10634  01317E  0100               	movlb	0	; () banked
 10635  013180  25C4               	addwf	LCD_DrawField@pField& (0+255),w,b
 10636  013182  6ED9               	movwf	fsr2l,c
 10637  013184  50F4               	movf	prodh,w,c
 10638  013186  0100               	movlb	0	; () banked
 10639  013188  21C5               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10640  01318A  6EDA               	movwf	fsr2h,c
 10641  01318C  CFDE F0B7          	movff	postinc2,LCD_Word_Write@value
 10642  013190  CFDD F0B8          	movff	postdec2,LCD_Word_Write@value+1
 10643  013194  EC13  F0A4         	call	_LCD_Word_Write	;wreg free
 10644  013198  0100               	movlb	0	; () banked
 10645  01319A  2BD4               	incf	LCD_DrawField@i& (0+255),f,b
 10646  01319C                     l183:
 10647                           
 10648                           ; BSR set to: 0
 10649                           
 10650                           ; BSR set to: 0
 10651  01319C  0100               	movlb	0	; () banked
 10652  01319E  51D4               	movf	LCD_DrawField@i& (0+255),w,b
 10653  0131A0  0100               	movlb	0	; () banked
 10654  0131A2  6FCE               	movwf	??_LCD_DrawField& (0+255),b
 10655  0131A4  6BCF               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10656  0131A6  0100               	movlb	0	; () banked
 10657  0131A8  51D0               	movf	LCD_DrawField@count& (0+255),w,b
 10658  0131AA  0100               	movlb	0	; () banked
 10659  0131AC  5DCE               	subwf	??_LCD_DrawField& (0+255),w,b
 10660  0131AE  0100               	movlb	0	; () banked
 10661  0131B0  51D1               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10662  0131B2  0100               	movlb	0	; () banked
 10663  0131B4  59CF               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10664  0131B6  B0D8               	btfsc	status,0,c
 10665  0131B8  0012               	return	
 10666  0131BA  D7DD               	goto	l184
 10667  0131BC                     __end_of_LCD_DrawField:
 10668                           	opt stack 0
 10669                           tosu	equ	0xFFF
 10670                           tosh	equ	0xFFE
 10671                           tosl	equ	0xFFD
 10672                           pclath	equ	0xFFA
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           postinc0	equ	0xFEE
 10680                           plusw0	equ	0xFEB
 10681                           wreg	equ	0xFE8
 10682                           indf1	equ	0xFE7
 10683                           postdec1	equ	0xFE5
 10684                           fsr1h	equ	0xFE2
 10685                           fsr1l	equ	0xFE1
 10686                           indf2	equ	0xFDF
 10687                           postinc2	equ	0xFDE
 10688                           postdec2	equ	0xFDD
 10689                           plusw2	equ	0xFDB
 10690                           fsr2h	equ	0xFDA
 10691                           fsr2l	equ	0xFD9
 10692                           status	equ	0xFD8
 10693                           
 10694 ;; *************** function ___wmul *****************
 10695 ;; Defined at:
 10696 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10699 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  product         2    4[BANK0 ] unsigned int 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  2    0[BANK0 ] unsigned int 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0, prodl, prodh
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;Total ram usage:        6 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    7
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_LCD_DrawField
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           	psect	text56
 10726  0144A6                     __ptext56:
 10727                           	opt stack 0
 10728  0144A6                     ___wmul:
 10729                           	opt stack 18
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;incstack = 0
 10733  0144A6  0100               	movlb	0	; () banked
 10734  0144A8  51B2               	movf	___wmul@multiplier& (0+255),w,b
 10735  0144AA  0100               	movlb	0	; () banked
 10736  0144AC  03B4               	mulwf	___wmul@multiplicand& (0+255),b
 10737  0144AE  CFF3 F0B6          	movff	prodl,___wmul@product
 10738  0144B2  CFF4 F0B7          	movff	prodh,___wmul@product+1
 10739  0144B6  0100               	movlb	0	; () banked
 10740  0144B8  51B2               	movf	___wmul@multiplier& (0+255),w,b
 10741  0144BA  0100               	movlb	0	; () banked
 10742  0144BC  03B5               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10743  0144BE  50F3               	movf	prodl,w,c
 10744  0144C0  0100               	movlb	0	; () banked
 10745  0144C2  27B7               	addwf	(___wmul@product+1)& (0+255),f,b
 10746  0144C4  0100               	movlb	0	; () banked
 10747  0144C6  51B3               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10748  0144C8  0100               	movlb	0	; () banked
 10749  0144CA  03B4               	mulwf	___wmul@multiplicand& (0+255),b
 10750  0144CC  50F3               	movf	prodl,w,c
 10751  0144CE  0100               	movlb	0	; () banked
 10752  0144D0  27B7               	addwf	(___wmul@product+1)& (0+255),f,b
 10753                           
 10754                           ; BSR set to: 0
 10755  0144D2  C0B6  F0B2         	movff	___wmul@product,?___wmul
 10756  0144D6  C0B7  F0B3         	movff	___wmul@product+1,?___wmul+1
 10757  0144DA  0012               	return	
 10758  0144DC                     __end_of___wmul:
 10759                           	opt stack 0
 10760                           tosu	equ	0xFFF
 10761                           tosh	equ	0xFFE
 10762                           tosl	equ	0xFFD
 10763                           pclath	equ	0xFFA
 10764                           tblptru	equ	0xFF8
 10765                           tblptrh	equ	0xFF7
 10766                           tblptrl	equ	0xFF6
 10767                           tablat	equ	0xFF5
 10768                           prodh	equ	0xFF4
 10769                           prodl	equ	0xFF3
 10770                           postinc0	equ	0xFEE
 10771                           plusw0	equ	0xFEB
 10772                           wreg	equ	0xFE8
 10773                           indf1	equ	0xFE7
 10774                           postdec1	equ	0xFE5
 10775                           fsr1h	equ	0xFE2
 10776                           fsr1l	equ	0xFE1
 10777                           indf2	equ	0xFDF
 10778                           postinc2	equ	0xFDE
 10779                           postdec2	equ	0xFDD
 10780                           plusw2	equ	0xFDB
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _Console_MakeField *****************
 10786 ;; Defined at:
 10787 ;;		line 435 in file "Library/Console.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;  pInput          1    wreg     unsigned char 
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  pInput          1   11[BANK0 ] unsigned char 
 10792 ;;  y               1   17[BANK0 ] unsigned char 
 10793 ;;  x               1   16[BANK0 ] unsigned char 
 10794 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10795 ;;		 -> Font5x7(480), 
 10796 ;;  Index           2    9[BANK0 ] unsigned short 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  2    5[BANK0 ] PTR unsigned short 
 10799 ;; Registers used:
 10800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10806 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;Total ram usage:       13 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    8
 10813 ;; This function calls:
 10814 ;;		_Byte_GetBit
 10815 ;; This function is called by:
 10816 ;;		_Console_Render
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           	psect	text57
 10821  012714                     __ptext57:
 10822                           	opt stack 0
 10823  012714                     _Console_MakeField:
 10824                           	opt stack 18
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;incstack = 0
 10828                           ;Console_MakeField@pInput stored from wreg
 10829  012714  0100               	movlb	0	; () banked
 10830  012716  6FBD               	movwf	Console_MakeField@pInput& (0+255),b
 10831                           
 10832                           ;Console.c: 437: static Colour Fill[7][5];
 10833                           ;Console.c: 438: pInput -= 32;
 10834  012718  0E20               	movlw	32
 10835  01271A  0100               	movlb	0	; () banked
 10836  01271C  5FBD               	subwf	Console_MakeField@pInput& (0+255),f,b
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10840  01271E  0100               	movlb	0	; () banked
 10841  012720  51BD               	movf	Console_MakeField@pInput& (0+255),w,b
 10842  012722  0D05               	mullw	5
 10843  012724  CFF3 F0BB          	movff	prodl,Console_MakeField@Index
 10844  012728  CFF4 F0BC          	movff	prodh,Console_MakeField@Index+1
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10848  01272C  0E87               	movlw	low _Font5x7
 10849  01272E  0100               	movlb	0	; () banked
 10850  012730  25BB               	addwf	Console_MakeField@Index& (0+255),w,b
 10851  012732  0100               	movlb	0	; () banked
 10852  012734  6FBE               	movwf	Console_MakeField@Column& (0+255),b
 10853  012736  0EFD               	movlw	high _Font5x7
 10854  012738  0100               	movlb	0	; () banked
 10855  01273A  21BC               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10856  01273C  0100               	movlb	0	; () banked
 10857  01273E  6FBF               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10861  012740  0E00               	movlw	0
 10862  012742  0100               	movlb	0	; () banked
 10863  012744  6FC2               	movwf	Console_MakeField@x& (0+255),b
 10864  012746                     l11020:
 10865                           
 10866                           ; BSR set to: 0
 10867  012746  0E04               	movlw	4
 10868  012748  0100               	movlb	0	; () banked
 10869  01274A  65C2               	cpfsgt	Console_MakeField@x& (0+255),b
 10870  01274C  D001               	goto	l1077
 10871  01274E  D043               	goto	u7500
 10872  012750                     l1077:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;Console.c: 444: {
 10876                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10877                           
 10878                           ; BSR set to: 0
 10879  012750  0E00               	movlw	0
 10880  012752  0100               	movlb	0	; () banked
 10881  012754  6FC3               	movwf	Console_MakeField@y& (0+255),b
 10882  012756                     l11026:
 10883                           
 10884                           ; BSR set to: 0
 10885  012756  0E06               	movlw	6
 10886  012758  0100               	movlb	0	; () banked
 10887  01275A  65C3               	cpfsgt	Console_MakeField@y& (0+255),b
 10888  01275C  D001               	goto	l1079
 10889  01275E  D035               	goto	u7490
 10890  012760                     l1079:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10894                           
 10895                           ; BSR set to: 0
 10896  012760  C0BE  F0B2         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10897  012764  C0BF  F0B3         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10898  012768  C0C3  F0B4         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10899  01276C  EC89  F0A2         	call	_Byte_GetBit	;wreg free
 10900  012770  0900               	iorlw	0
 10901  012772  A4D8               	btfss	status,2,c
 10902  012774  D005               	goto	l1082
 10903  012776  C073  F0C0         	movff	_gBackcolour,_Console_MakeField$10974
 10904  01277A  C074  F0C1         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10905  01277E  D004               	goto	l1084
 10906  012780                     l1082:
 10907  012780  C0FD  F0C0         	movff	_gForecolour,_Console_MakeField$10974
 10908  012784  C0FE  F0C1         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10909  012788                     l1084:
 10910  012788  0100               	movlb	0	; () banked
 10911  01278A  51C3               	movf	Console_MakeField@y& (0+255),w,b
 10912  01278C  0D0A               	mullw	10
 10913  01278E  0E00               	movlw	low Console_MakeField@Fill
 10914  012790  0100               	movlb	0	; () banked
 10915  012792  6FB9               	movwf	??_Console_MakeField& (0+255),b
 10916  012794  0E02               	movlw	high Console_MakeField@Fill
 10917  012796  0100               	movlb	0	; () banked
 10918  012798  6FBA               	movwf	(??_Console_MakeField+1)& (0+255),b
 10919  01279A  50F3               	movf	prodl,w,c
 10920  01279C  0100               	movlb	0	; () banked
 10921  01279E  27B9               	addwf	??_Console_MakeField& (0+255),f,b
 10922  0127A0  50F4               	movf	prodh,w,c
 10923  0127A2  0100               	movlb	0	; () banked
 10924  0127A4  23BA               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10925  0127A6  0100               	movlb	0	; () banked
 10926  0127A8  51C2               	movf	Console_MakeField@x& (0+255),w,b
 10927  0127AA  0D02               	mullw	2
 10928  0127AC  50F3               	movf	prodl,w,c
 10929  0127AE  0100               	movlb	0	; () banked
 10930  0127B0  25B9               	addwf	??_Console_MakeField& (0+255),w,b
 10931  0127B2  6ED9               	movwf	fsr2l,c
 10932  0127B4  50F4               	movf	prodh,w,c
 10933  0127B6  0100               	movlb	0	; () banked
 10934  0127B8  21BA               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10935  0127BA  6EDA               	movwf	fsr2h,c
 10936  0127BC  C0C0  FFDE         	movff	_Console_MakeField$10974,postinc2
 10937  0127C0  C0C1  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10938                           
 10939                           ; BSR set to: 0
 10940  0127C4  0100               	movlb	0	; () banked
 10941  0127C6  2BC3               	incf	Console_MakeField@y& (0+255),f,b
 10942  0127C8  D7C6               	goto	l11026
 10943  0127CA                     u7490:
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;Console.c: 447: Column += 1;
 10947                           
 10948                           ; BSR set to: 0
 10949  0127CA  0100               	movlb	0	; () banked
 10950  0127CC  4BBE               	infsnz	Console_MakeField@Column& (0+255),f,b
 10951  0127CE  2BBF               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10952  0127D0  0100               	movlb	0	; () banked
 10953  0127D2  2BC2               	incf	Console_MakeField@x& (0+255),f,b
 10954  0127D4  D7B8               	goto	l11020
 10955  0127D6                     u7500:
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;Console.c: 448: }
 10959                           ;Console.c: 449: return (ColourPtr)Fill;
 10960                           
 10961                           ; BSR set to: 0
 10962  0127D6  0E00               	movlw	low Console_MakeField@Fill
 10963  0127D8  0100               	movlb	0	; () banked
 10964  0127DA  6FB7               	movwf	?_Console_MakeField& (0+255),b
 10965  0127DC  0E02               	movlw	high Console_MakeField@Fill
 10966  0127DE  0100               	movlb	0	; () banked
 10967  0127E0  6FB8               	movwf	(?_Console_MakeField+1)& (0+255),b
 10968  0127E2  0012               	return	
 10969  0127E4                     __end_of_Console_MakeField:
 10970                           	opt stack 0
 10971                           tosu	equ	0xFFF
 10972                           tosh	equ	0xFFE
 10973                           tosl	equ	0xFFD
 10974                           pclath	equ	0xFFA
 10975                           tblptru	equ	0xFF8
 10976                           tblptrh	equ	0xFF7
 10977                           tblptrl	equ	0xFF6
 10978                           tablat	equ	0xFF5
 10979                           prodh	equ	0xFF4
 10980                           prodl	equ	0xFF3
 10981                           postinc0	equ	0xFEE
 10982                           plusw0	equ	0xFEB
 10983                           wreg	equ	0xFE8
 10984                           indf1	equ	0xFE7
 10985                           postdec1	equ	0xFE5
 10986                           fsr1h	equ	0xFE2
 10987                           fsr1l	equ	0xFE1
 10988                           indf2	equ	0xFDF
 10989                           postinc2	equ	0xFDE
 10990                           postdec2	equ	0xFDD
 10991                           plusw2	equ	0xFDB
 10992                           fsr2h	equ	0xFDA
 10993                           fsr2l	equ	0xFD9
 10994                           status	equ	0xFD8
 10995                           
 10996 ;; *************** function _Byte_GetBit *****************
 10997 ;; Defined at:
 10998 ;;		line 38 in file "Library/Types.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11001 ;;		 -> Font5x7(480), 
 11002 ;;  pBit            1    2[BANK0 ] unsigned char 
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;  Output          1    4[BANK0 ] unsigned char 
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      unsigned char 
 11007 ;; Registers used:
 11008 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11009 ;; Tracked objects:
 11010 ;;		On entry : 0/0
 11011 ;;		On exit  : 0/0
 11012 ;;		Unchanged: 0/0
 11013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11014 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;Total ram usage:        5 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    7
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_Console_MakeField
 11025 ;;		_Word_GetBit
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           	psect	text58
 11030  014512                     __ptext58:
 11031                           	opt stack 0
 11032  014512                     _Byte_GetBit:
 11033                           	opt stack 18
 11034                           
 11035                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;incstack = 0
 11039  014512  C0B2  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11040  014516  C0B3  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11041  01451A                     	if	0	;tblptru may be non-zero
 11042  01451A                     	endif
 11043  01451A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11044  01451A  0E00               	movlw	low (__mediumconst shr (0+16))
 11045  01451C  6EF8               	movwf	tblptru,c
 11046  01451E                     	endif
 11047  01451E  0008               	tblrd		*
 11048  014520  CFF5 F0B6          	movff	tablat,Byte_GetBit@Output
 11049                           
 11050                           ;Types.c: 42: Output >>= pBit;
 11051  014524  0100               	movlb	0	; () banked
 11052  014526  29B4               	incf	Byte_GetBit@pBit& (0+255),w,b
 11053  014528  0100               	movlb	0	; () banked
 11054  01452A  6FB5               	movwf	??_Byte_GetBit& (0+255),b
 11055  01452C  D003               	goto	u7200
 11056  01452E                     u7205:
 11057  01452E  0100               	movlb	0	; () banked
 11058  014530  90D8               	bcf	status,0,c
 11059  014532  33B6               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11060  014534                     u7200:
 11061  014534  0100               	movlb	0	; () banked
 11062  014536  2FB5               	decfsz	??_Byte_GetBit& (0+255),f,b
 11063  014538  D7FA               	goto	u7205
 11064                           
 11065                           ;Types.c: 43: Output &= 1;
 11066  01453A  0E01               	movlw	1
 11067  01453C  0100               	movlb	0	; () banked
 11068  01453E  17B6               	andwf	Byte_GetBit@Output& (0+255),f,b
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;Types.c: 44: return Output;
 11072  014540  0100               	movlb	0	; () banked
 11073  014542  51B6               	movf	Byte_GetBit@Output& (0+255),w,b
 11074  014544  0012               	return	
 11075  014546                     __end_of_Byte_GetBit:
 11076                           	opt stack 0
 11077                           tosu	equ	0xFFF
 11078                           tosh	equ	0xFFE
 11079                           tosl	equ	0xFFD
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           postinc0	equ	0xFEE
 11088                           plusw0	equ	0xFEB
 11089                           wreg	equ	0xFE8
 11090                           indf1	equ	0xFE7
 11091                           postdec1	equ	0xFE5
 11092                           fsr1h	equ	0xFE2
 11093                           fsr1l	equ	0xFE1
 11094                           indf2	equ	0xFDF
 11095                           postinc2	equ	0xFDE
 11096                           postdec2	equ	0xFDD
 11097                           plusw2	equ	0xFDB
 11098                           fsr2h	equ	0xFDA
 11099                           fsr2l	equ	0xFD9
 11100                           status	equ	0xFD8
 11101                           
 11102 ;; *************** function _Motor_Speed *****************
 11103 ;; Defined at:
 11104 ;;		line 117 in file "Library/Motor.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 11107 ;;		 -> Stepper(6), 
 11108 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;		None
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      unsigned char 
 11113 ;; Registers used:
 11114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;Total ram usage:        4 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    9
 11127 ;; This function calls:
 11128 ;;		_Timer0_Init
 11129 ;; This function is called by:
 11130 ;;		_continuousMode
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text59
 11135  0146BC                     __ptext59:
 11136                           	opt stack 0
 11137  0146BC                     _Motor_Speed:
 11138                           	opt stack 19
 11139                           
 11140                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;incstack = 0
 11144  0146BC  0100               	movlb	0	; () banked
 11145  0146BE  EE20 F002          	lfsr	2,2
 11146  0146C2  51CD               	movf	Motor_Speed@pMotor& (0+255),w,b
 11147  0146C4  26D9               	addwf	fsr2l,f,c
 11148  0146C6  51CE               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 11149  0146C8  22DA               	addwfc	fsr2h,f,c
 11150  0146CA  C0CF  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 11151  0146CE  C0D0  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;Motor.c: 120: Timer0_Init(pFrequency);
 11155  0146D2  C0CF  F0BF         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 11156  0146D6  C0D0  F0C0         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 11157  0146DA  0100               	movlb	0	; () banked
 11158  0146DC  6BC1               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 11159  0146DE  6BC2               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 11160  0146E0  EC41  F090         	call	_Timer0_Init	;wreg free
 11161  0146E4  0012               	return	
 11162  0146E6                     __end_of_Motor_Speed:
 11163                           	opt stack 0
 11164                           tosu	equ	0xFFF
 11165                           tosh	equ	0xFFE
 11166                           tosl	equ	0xFFD
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           postinc0	equ	0xFEE
 11175                           plusw0	equ	0xFEB
 11176                           wreg	equ	0xFE8
 11177                           indf1	equ	0xFE7
 11178                           postdec1	equ	0xFE5
 11179                           fsr1h	equ	0xFE2
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           plusw2	equ	0xFDB
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _Motor_Move *****************
 11190 ;; Defined at:
 11191 ;;		line 51 in file "Library/Motor.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 11194 ;;		 -> Stepper(6), 
 11195 ;;  pDelta          2    5[BANK0 ] short 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;		None
 11198 ;; Return value:  Size  Location     Type
 11199 ;;                  1    wreg      unsigned char 
 11200 ;; Registers used:
 11201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;Total ram usage:        6 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; Hardware stack levels required when called:    8
 11214 ;; This function calls:
 11215 ;;		_Timer0_Start
 11216 ;; This function is called by:
 11217 ;;		_continuousMode
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text60
 11222  01446C                     __ptext60:
 11223                           	opt stack 0
 11224  01446C                     _Motor_Move:
 11225                           	opt stack 20
 11226                           
 11227                           ;Motor.c: 54: lMotor = pMotor;
 11228                           
 11229                           ;incstack = 0
 11230  01446C  C0B5  F06F         	movff	Motor_Move@pMotor,_lMotor
 11231  014470  C0B6  F070         	movff	Motor_Move@pMotor+1,_lMotor+1
 11232                           
 11233                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 11234  014474  C0B5  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11235  014478  C0B6  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11236  01447C  50DE               	movf	postinc2,w,c
 11237  01447E  10DE               	iorwf	postinc2,w,c
 11238  014480  A4D8               	btfss	status,2,c
 11239  014482  0012               	return	
 11240                           
 11241                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 11242                           
 11243                           ;Motor.c: 59: return 0;
 11244                           ;	Return value of _Motor_Move is never used
 11245  014484  C0B5  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11246  014488  C0B6  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11247  01448C  C0B7  FFDE         	movff	Motor_Move@pDelta,postinc2
 11248  014490  C0B8  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 11249                           
 11250                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 11251  014494  C02C  F0B2         	movff	_lStepFunction,Timer0_Start@pFunction
 11252  014498  C02D  F0B3         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 11253  01449C  C02E  F0B4         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 11254  0144A0  EC9B  F0A3         	call	_Timer0_Start	;wreg free
 11255  0144A4  0012               	return	
 11256  0144A6                     __end_of_Motor_Move:
 11257                           	opt stack 0
 11258                           tosu	equ	0xFFF
 11259                           tosh	equ	0xFFE
 11260                           tosl	equ	0xFFD
 11261                           pclath	equ	0xFFA
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           postinc0	equ	0xFEE
 11269                           plusw0	equ	0xFEB
 11270                           wreg	equ	0xFE8
 11271                           indf1	equ	0xFE7
 11272                           postdec1	equ	0xFE5
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           plusw2	equ	0xFDB
 11279                           fsr2h	equ	0xFDA
 11280                           fsr2l	equ	0xFD9
 11281                           status	equ	0xFD8
 11282                           
 11283 ;; *************** function _Timer0_Start *****************
 11284 ;; Defined at:
 11285 ;;		line 75 in file "Library/Timer0.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 11288 ;;		 -> Absolute function(1), Motor_Step(1), 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2, status,0
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        3 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    7
 11307 ;; This function calls:
 11308 ;;		Nothing
 11309 ;; This function is called by:
 11310 ;;		_Motor_Move
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           	psect	text61
 11315  014736                     __ptext61:
 11316                           	opt stack 0
 11317  014736                     _Timer0_Start:
 11318                           	opt stack 20
 11319                           
 11320                           ;Timer0.c: 77: gISR = pFunction;
 11321                           
 11322                           ;incstack = 0
 11323  014736  C0B2  F029         	movff	Timer0_Start@pFunction,_gISR
 11324  01473A  C0B3  F02A         	movff	Timer0_Start@pFunction+1,_gISR+1
 11325  01473E  C0B4  F02B         	movff	Timer0_Start@pFunction+2,_gISR+2
 11326                           
 11327                           ;Timer0.c: 78: TMR0 = COUNTER;
 11328  014742  C031  FFD6         	movff	_COUNTER,4054	;volatile
 11329  014746  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 11330                           
 11331                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 11332  01474A  50D5               	movf	4053,w,c	;volatile
 11333  01474C  0100               	movlb	0	; () banked
 11334  01474E  1979               	xorwf	_INDEX& (0+255),w,b
 11335  014750  0BF8               	andlw	-8
 11336  014752  1979               	xorwf	_INDEX& (0+255),w,b
 11337  014754  6ED5               	movwf	4053,c	;volatile
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 11341  014756  94F2               	bcf	intcon,2,c	;volatile
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 11345  014758  8AF2               	bsf	intcon,5,c	;volatile
 11346                           
 11347                           ; BSR set to: 0
 11348  01475A  0012               	return		;funcret
 11349  01475C                     __end_of_Timer0_Start:
 11350                           	opt stack 0
 11351                           tosu	equ	0xFFF
 11352                           tosh	equ	0xFFE
 11353                           tosl	equ	0xFFD
 11354                           pclath	equ	0xFFA
 11355                           tblptru	equ	0xFF8
 11356                           tblptrh	equ	0xFF7
 11357                           tblptrl	equ	0xFF6
 11358                           tablat	equ	0xFF5
 11359                           prodh	equ	0xFF4
 11360                           prodl	equ	0xFF3
 11361                           intcon	equ	0xFF2
 11362                           postinc0	equ	0xFEE
 11363                           plusw0	equ	0xFEB
 11364                           wreg	equ	0xFE8
 11365                           indf1	equ	0xFE7
 11366                           postdec1	equ	0xFE5
 11367                           fsr1h	equ	0xFE2
 11368                           fsr1l	equ	0xFE1
 11369                           indf2	equ	0xFDF
 11370                           postinc2	equ	0xFDE
 11371                           postdec2	equ	0xFDD
 11372                           plusw2	equ	0xFDB
 11373                           fsr2h	equ	0xFDA
 11374                           fsr2l	equ	0xFD9
 11375                           status	equ	0xFD8
 11376                           
 11377 ;; *************** function _initialise *****************
 11378 ;; Defined at:
 11379 ;;		line 43 in file "main.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      void 
 11386 ;; Registers used:
 11387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;Total ram usage:        0 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:   17
 11400 ;; This function calls:
 11401 ;;		_Console_Init
 11402 ;;		_HMI_Init
 11403 ;;		_LCD_Init
 11404 ;;		_MXK_BlockSwitchTo
 11405 ;;		_MXK_Dequeue
 11406 ;;		_MXK_Init
 11407 ;;		_MXK_Release
 11408 ;;		_Motor_Init
 11409 ;; This function is called by:
 11410 ;;		_main
 11411 ;; This function uses a non-reentrant model
 11412 ;;
 11413                           
 11414                           	psect	text62
 11415  013D44                     __ptext62:
 11416                           	opt stack 0
 11417  013D44                     _initialise:
 11418                           	opt stack 13
 11419                           
 11420                           ;main.c: 45: MXK_Init();
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;incstack = 0
 11424  013D44  EC15  F08E         	call	_MXK_Init	;wreg free
 11425                           
 11426                           ;main.c: 48: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 11427  013D48  0E01               	movlw	1
 11428  013D4A  ECA0  F0A1         	call	_MXK_BlockSwitchTo
 11429  013D4E  0900               	iorlw	0
 11430  013D50  B4D8               	btfsc	status,2,c
 11431  013D52  D00C               	goto	l2007
 11432                           
 11433                           ;main.c: 50: LCD_Init();
 11434  013D54  ECD5  F08E         	call	_LCD_Init	;wreg free
 11435                           
 11436                           ;main.c: 51: Console_Init();
 11437  013D58  ECEC  F09A         	call	_Console_Init	;wreg free
 11438                           
 11439                           ;main.c: 52: HMI_Init();
 11440  013D5C  ECD7  F089         	call	_HMI_Init	;wreg free
 11441                           
 11442                           ;main.c: 53: if (MXK_Release())
 11443  013D60  EC6D  F0A4         	call	_MXK_Release	;wreg free
 11444  013D64  0900               	iorlw	0
 11445  013D66  A4D8               	btfss	status,2,c
 11446                           
 11447                           ;main.c: 54: MXK_Dequeue();
 11448  013D68  EC81  F0A1         	call	_MXK_Dequeue	;wreg free
 11449  013D6C                     l2007:
 11450                           
 11451                           ;main.c: 55: }
 11452                           ;main.c: 58: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 11453  013D6C  0E08               	movlw	8
 11454  013D6E  ECA0  F0A1         	call	_MXK_BlockSwitchTo
 11455  013D72  0900               	iorlw	0
 11456  013D74  B4D8               	btfsc	status,2,c
 11457  013D76  0012               	return	
 11458                           
 11459                           ;main.c: 59: Motor_Init(&Stepper, 0b1000);
 11460  013D78  0EBD               	movlw	low _Stepper
 11461  013D7A  0100               	movlb	0	; () banked
 11462  013D7C  6FDF               	movwf	Motor_Init@pMotor& (0+255),b
 11463  013D7E  0E01               	movlw	high _Stepper
 11464  013D80  0100               	movlb	0	; () banked
 11465  013D82  6FE0               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 11466  013D84  0E00               	movlw	0
 11467  013D86  0100               	movlb	0	; () banked
 11468  013D88  6FE2               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 11469  013D8A  0E08               	movlw	8
 11470  013D8C  6FE1               	movwf	Motor_Init@pAddress& (0+255),b
 11471  013D8E  ECF2  F093         	call	_Motor_Init	;wreg free
 11472                           
 11473                           ;main.c: 60: if (MXK_Release())
 11474  013D92  EC6D  F0A4         	call	_MXK_Release	;wreg free
 11475  013D96  0900               	iorlw	0
 11476  013D98  B4D8               	btfsc	status,2,c
 11477  013D9A  0012               	return	
 11478                           
 11479                           ;main.c: 61: MXK_Dequeue();
 11480  013D9C  EC81  F0A1         	call	_MXK_Dequeue	;wreg free
 11481  013DA0  0012               	return	
 11482  013DA2                     __end_of_initialise:
 11483                           	opt stack 0
 11484                           tosu	equ	0xFFF
 11485                           tosh	equ	0xFFE
 11486                           tosl	equ	0xFFD
 11487                           pclath	equ	0xFFA
 11488                           tblptru	equ	0xFF8
 11489                           tblptrh	equ	0xFF7
 11490                           tblptrl	equ	0xFF6
 11491                           tablat	equ	0xFF5
 11492                           prodh	equ	0xFF4
 11493                           prodl	equ	0xFF3
 11494                           intcon	equ	0xFF2
 11495                           postinc0	equ	0xFEE
 11496                           plusw0	equ	0xFEB
 11497                           wreg	equ	0xFE8
 11498                           indf1	equ	0xFE7
 11499                           postdec1	equ	0xFE5
 11500                           fsr1h	equ	0xFE2
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           plusw2	equ	0xFDB
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _Motor_Init *****************
 11511 ;; Defined at:
 11512 ;;		line 26 in file "Library/Motor.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 11515 ;;		 -> Stepper(6), 
 11516 ;;  pAddress        2   47[BANK0 ] unsigned short 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11528 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;Total ram usage:        4 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:   12
 11535 ;; This function calls:
 11536 ;;		_Port_SetPin
 11537 ;;		_Port_SetPinType
 11538 ;;		_Timer0_Init
 11539 ;; This function is called by:
 11540 ;;		_initialise
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text63
 11545  0127E4                     __ptext63:
 11546                           	opt stack 0
 11547  0127E4                     _Motor_Init:
 11548                           	opt stack 17
 11549                           
 11550                           ;Motor.c: 28: pMotor->mDelta = 0;
 11551                           
 11552                           ;incstack = 0
 11553  0127E4  C0DF  FFD9         	movff	Motor_Init@pMotor,fsr2l
 11554  0127E8  C0E0  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 11555  0127EC  0E00               	movlw	0
 11556  0127EE  6EDE               	movwf	postinc2,c
 11557  0127F0  0E00               	movlw	0
 11558  0127F2  6EDD               	movwf	postdec2,c
 11559                           
 11560                           ;Motor.c: 29: pMotor->mFrequency = 0;
 11561  0127F4  0100               	movlb	0	; () banked
 11562  0127F6  EE20 F002          	lfsr	2,2
 11563  0127FA  51DF               	movf	Motor_Init@pMotor& (0+255),w,b
 11564  0127FC  26D9               	addwf	fsr2l,f,c
 11565  0127FE  51E0               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11566  012800  22DA               	addwfc	fsr2h,f,c
 11567  012802  0E00               	movlw	0
 11568  012804  6EDE               	movwf	postinc2,c
 11569  012806  0E00               	movlw	0
 11570  012808  6EDD               	movwf	postdec2,c
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 11574  01280A  0100               	movlb	0	; () banked
 11575  01280C  EE20 F004          	lfsr	2,4
 11576  012810  51DF               	movf	Motor_Init@pMotor& (0+255),w,b
 11577  012812  26D9               	addwf	fsr2l,f,c
 11578  012814  51E0               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11579  012816  22DA               	addwfc	fsr2h,f,c
 11580  012818  C0E1  FFDE         	movff	Motor_Init@pAddress,postinc2
 11581  01281C  C0E2  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 11585  012820  0E7D               	movlw	low _PortE
 11586  012822  0100               	movlb	0	; () banked
 11587  012824  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 11588  012826  0E00               	movlw	high _PortE
 11589  012828  0100               	movlb	0	; () banked
 11590  01282A  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11591  01282C  0E00               	movlw	0
 11592  01282E  0100               	movlb	0	; () banked
 11593  012830  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 11594  012832  0E03               	movlw	3
 11595  012834  0100               	movlb	0	; () banked
 11596  012836  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 11597  012838  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 11598                           
 11599                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 11600  01283C  0E7D               	movlw	low _PortE
 11601  01283E  0100               	movlb	0	; () banked
 11602  012840  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 11603  012842  0E00               	movlw	high _PortE
 11604  012844  0100               	movlb	0	; () banked
 11605  012846  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11606  012848  0E01               	movlw	1
 11607  01284A  0100               	movlb	0	; () banked
 11608  01284C  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 11609  01284E  0E03               	movlw	3
 11610  012850  0100               	movlb	0	; () banked
 11611  012852  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 11612  012854  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 11613                           
 11614                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 11615  012858  0E7D               	movlw	low _PortE
 11616  01285A  0100               	movlb	0	; () banked
 11617  01285C  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 11618  01285E  0E00               	movlw	high _PortE
 11619  012860  0100               	movlb	0	; () banked
 11620  012862  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11621  012864  0E00               	movlw	0
 11622  012866  0100               	movlb	0	; () banked
 11623  012868  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 11624  01286A  0E00               	movlw	0
 11625  01286C  0100               	movlb	0	; () banked
 11626  01286E  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 11627  012870  EC5A  F094         	call	_Port_SetPin	;wreg free
 11628                           
 11629                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 11630  012874  0E7D               	movlw	low _PortE
 11631  012876  0100               	movlb	0	; () banked
 11632  012878  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 11633  01287A  0E00               	movlw	high _PortE
 11634  01287C  0100               	movlb	0	; () banked
 11635  01287E  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11636  012880  0E01               	movlw	1
 11637  012882  0100               	movlb	0	; () banked
 11638  012884  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 11639  012886  0E00               	movlw	0
 11640  012888  0100               	movlb	0	; () banked
 11641  01288A  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 11642  01288C  EC5A  F094         	call	_Port_SetPin	;wreg free
 11643                           
 11644                           ;Motor.c: 38: lStepFunction = Motor_Step;
 11645  012890  0E42               	movlw	low _Motor_Step
 11646  012892  6E2C               	movwf	_lStepFunction,c
 11647  012894  0E23               	movlw	high _Motor_Step
 11648  012896  6E2D               	movwf	_lStepFunction+1,c
 11649  012898  0E01               	movlw	low (_Motor_Step shr (0+16))
 11650  01289A  6E2E               	movwf	_lStepFunction+2,c
 11651                           
 11652                           ;Motor.c: 39: Timer0_Init(1000);
 11653  01289C  0EE8               	movlw	232
 11654  01289E  0100               	movlb	0	; () banked
 11655  0128A0  6FBF               	movwf	Timer0_Init@pFrequency& (0+255),b
 11656  0128A2  0E03               	movlw	3
 11657  0128A4  6FC0               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 11658  0128A6  0E00               	movlw	0
 11659  0128A8  6FC1               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 11660  0128AA  0E00               	movlw	0
 11661  0128AC  6FC2               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 11662  0128AE  EC41  F090         	call	_Timer0_Init	;wreg free
 11663  0128B2  0012               	return		;funcret
 11664  0128B4                     __end_of_Motor_Init:
 11665                           	opt stack 0
 11666                           tosu	equ	0xFFF
 11667                           tosh	equ	0xFFE
 11668                           tosl	equ	0xFFD
 11669                           pclath	equ	0xFFA
 11670                           tblptru	equ	0xFF8
 11671                           tblptrh	equ	0xFF7
 11672                           tblptrl	equ	0xFF6
 11673                           tablat	equ	0xFF5
 11674                           prodh	equ	0xFF4
 11675                           prodl	equ	0xFF3
 11676                           intcon	equ	0xFF2
 11677                           postinc0	equ	0xFEE
 11678                           plusw0	equ	0xFEB
 11679                           wreg	equ	0xFE8
 11680                           indf1	equ	0xFE7
 11681                           postdec1	equ	0xFE5
 11682                           fsr1h	equ	0xFE2
 11683                           fsr1l	equ	0xFE1
 11684                           indf2	equ	0xFDF
 11685                           postinc2	equ	0xFDE
 11686                           postdec2	equ	0xFDD
 11687                           plusw2	equ	0xFDB
 11688                           fsr2h	equ	0xFDA
 11689                           fsr2l	equ	0xFD9
 11690                           status	equ	0xFD8
 11691                           
 11692 ;; *************** function _Timer0_Init *****************
 11693 ;; Defined at:
 11694 ;;		line 25 in file "Library/Timer0.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 11697 ;; Auto vars:     Size  Location     Type
 11698 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 11699 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 11700 ;; Return value:  Size  Location     Type
 11701 ;;                  1    wreg      void 
 11702 ;; Registers used:
 11703 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11704 ;; Tracked objects:
 11705 ;;		On entry : 0/0
 11706 ;;		On exit  : 0/0
 11707 ;;		Unchanged: 0/0
 11708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11709 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;Total ram usage:       14 bytes
 11714 ;; Hardware stack levels used:    1
 11715 ;; Hardware stack levels required when called:    8
 11716 ;; This function calls:
 11717 ;;		_Timer0_Clear
 11718 ;;		___lldiv
 11719 ;; This function is called by:
 11720 ;;		_Motor_Init
 11721 ;;		_Motor_Speed
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           	psect	text64
 11726  012082                     __ptext64:
 11727                           	opt stack 0
 11728  012082                     _Timer0_Init:
 11729                           	opt stack 19
 11730                           
 11731                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 11732                           
 11733                           ;incstack = 0
 11734  012082  0E80               	movlw	128
 11735  012084  0100               	movlb	0	; () banked
 11736  012086  6FC5               	movwf	Timer0_Init@pCPUClock& (0+255),b
 11737  012088  0E8D               	movlw	141
 11738  01208A  6FC6               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 11739  01208C  0E5B               	movlw	91
 11740  01208E  6FC7               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 11741  012090  0E00               	movlw	0
 11742  012092  6FC8               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 11746                           ;Timer0.c: 31: static UINT8 PRE = 0;
 11747                           ;Timer0.c: 32: static UINT32 DIV = 0;
 11748                           ;Timer0.c: 34: UINT32 DIVIDE;
 11749                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 11750  012094  9ED5               	bcf	4053,7,c	;volatile
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;Timer0.c: 38: if (pFrequency == 0)
 11754  012096  0100               	movlb	0	; () banked
 11755  012098  51BF               	movf	Timer0_Init@pFrequency& (0+255),w,b
 11756  01209A  0100               	movlb	0	; () banked
 11757  01209C  11C0               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 11758  01209E  0100               	movlb	0	; () banked
 11759  0120A0  11C1               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 11760  0120A2  0100               	movlb	0	; () banked
 11761  0120A4  11C2               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 11762  0120A6  B4D8               	btfsc	status,2,c
 11763  0120A8  0012               	return	
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;Timer0.c: 39: return;
 11770  0120AA  96D5               	bcf	4053,3,c	;volatile
 11771                           
 11772                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 11773  0120AC  9CD5               	bcf	4053,6,c	;volatile
 11774                           
 11775                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 11776  0120AE  9AD5               	bcf	4053,5,c	;volatile
 11777                           
 11778                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 11779  0120B0  98D5               	bcf	4053,4,c	;volatile
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 11783  0120B2  C0C5  F0B2         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 11784  0120B6  C0C6  F0B3         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 11785  0120BA  C0C7  F0B4         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 11786  0120BE  C0C8  F0B5         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 11787  0120C2  C0BF  F0B6         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 11788  0120C6  C0C0  F0B7         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 11789  0120CA  C0C1  F0B8         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 11790  0120CE  C0C2  F0B9         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 11791  0120D2  EC7C  F095         	call	___lldiv	;wreg free
 11792  0120D6  C0B2  F0C9         	movff	?___lldiv,Timer0_Init@DIVIDE
 11793  0120DA  C0B3  F0CA         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 11794  0120DE  C0B4  F0CB         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 11795  0120E2  C0B5  F0CC         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 11796                           
 11797                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 11798  0120E6  D00C               	goto	l1795
 11799  0120E8                     l11460:
 11800                           
 11801                           ;Timer0.c: 50: {
 11802                           ;Timer0.c: 51: INDEX ++;
 11803  0120E8  0100               	movlb	0	; () banked
 11804  0120EA  2B79               	incf	_INDEX& (0+255),f,b
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;Timer0.c: 52: if (INDEX >= 3)
 11808  0120EC  0E02               	movlw	2
 11809  0120EE  0100               	movlb	0	; () banked
 11810  0120F0  6579               	cpfsgt	_INDEX& (0+255),b
 11811  0120F2  D001               	goto	l1793
 11812  0120F4  D02F               	goto	u7830
 11813  0120F6                     l1793:
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;Timer0.c: 56: if (INDEX >= 8)
 11817                           
 11818                           ; BSR set to: 0
 11819  0120F6  0E07               	movlw	7
 11820  0120F8  0100               	movlb	0	; () banked
 11821  0120FA  6579               	cpfsgt	_INDEX& (0+255),b
 11822  0120FC  D001               	goto	l1795
 11823  0120FE  0012               	return	
 11824  012100                     l1795:
 11825                           
 11826                           ; BSR set to: 0
 11827                           
 11828                           ; BSR set to: 0
 11829  012100  C0C9  F0B2         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 11830  012104  C0CA  F0B3         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 11831  012108  C0CB  F0B4         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 11832  01210C  C0CC  F0B5         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 11833  012110  0100               	movlb	0	; () banked
 11834  012112  5179               	movf	_INDEX& (0+255),w,b
 11835  012114  0D02               	mullw	2
 11836  012116  0E4B               	movlw	low Timer0_Init@PRESCALE
 11837  012118  24F3               	addwf	prodl,w,c
 11838  01211A  6EF6               	movwf	tblptrl,c
 11839  01211C  0EFD               	movlw	high Timer0_Init@PRESCALE
 11840  01211E  20F4               	addwfc	prodh,w,c
 11841  012120  6EF7               	movwf	tblptrh,c
 11842  012122                     	if	1	;There are 3 active tblptr bytes
 11843  012122  6AF8               	clrf	tblptru,c
 11844  012124  0E00               	movlw	low (__mediumconst shr (0+16))
 11845  012126  22F8               	addwfc	tblptru,f,c
 11846  012128                     	endif
 11847  012128  0009               	tblrd		*+
 11848  01212A  CFF5 F0C3          	movff	tablat,??_Timer0_Init
 11849  01212E  0009               	tblrd		*+
 11850  012130  CFF5 F0C4          	movff	tablat,??_Timer0_Init+1
 11851  012134  C0C3  F0B6         	movff	??_Timer0_Init,___lldiv@divisor
 11852  012138  C0C4  F0B7         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 11853  01213C  0100               	movlb	0	; () banked
 11854  01213E  6BB8               	clrf	(___lldiv@divisor+2)& (0+255),b
 11855  012140  6BB9               	clrf	(___lldiv@divisor+3)& (0+255),b
 11856  012142  EC7C  F095         	call	___lldiv	;wreg free
 11857  012146  0100               	movlb	0	; () banked
 11858  012148  51B5               	movf	(?___lldiv+3)& (0+255),w,b
 11859  01214A  E1CE               	bnz	l11460
 11860  01214C  0100               	movlb	0	; () banked
 11861  01214E  05B4               	decf	(?___lldiv+2)& (0+255),w,b
 11862  012150  B0D8               	btfsc	status,0,c
 11863  012152  D7CA               	goto	l1792
 11864  012154                     u7830:
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;Timer0.c: 58: }
 11868                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 11869                           
 11870                           ; BSR set to: 0
 11871  012154  0100               	movlb	0	; () banked
 11872  012156  5179               	movf	_INDEX& (0+255),w,b
 11873  012158  0D02               	mullw	2
 11874  01215A  0E4B               	movlw	low Timer0_Init@PRESCALE
 11875  01215C  24F3               	addwf	prodl,w,c
 11876  01215E  6EF6               	movwf	tblptrl,c
 11877  012160  0EFD               	movlw	high Timer0_Init@PRESCALE
 11878  012162  20F4               	addwfc	prodh,w,c
 11879  012164  6EF7               	movwf	tblptrh,c
 11880  012166                     	if	1	;There are 3 active tblptr bytes
 11881  012166  6AF8               	clrf	tblptru,c
 11882  012168  0E00               	movlw	low (__mediumconst shr (0+16))
 11883  01216A  22F8               	addwfc	tblptru,f,c
 11884  01216C                     	endif
 11885  01216C  0008               	tblrd		*
 11886  01216E  CFF5 F078          	movff	tablat,Timer0_Init@PRE
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 11890  012172  0EFF               	movlw	255
 11891  012174  0100               	movlb	0	; () banked
 11892  012176  25C9               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 11893  012178  0100               	movlb	0	; () banked
 11894  01217A  6F64               	movwf	Timer0_Init@DIV& (0+255),b
 11895  01217C  0EFF               	movlw	255
 11896  01217E  0100               	movlb	0	; () banked
 11897  012180  21CA               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 11898  012182  0100               	movlb	0	; () banked
 11899  012184  6F65               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 11900  012186  0EFF               	movlw	255
 11901  012188  0100               	movlb	0	; () banked
 11902  01218A  21CB               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 11903  01218C  0100               	movlb	0	; () banked
 11904  01218E  6F66               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 11905  012190  0EFF               	movlw	255
 11906  012192  0100               	movlb	0	; () banked
 11907  012194  21CC               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 11908  012196  0100               	movlb	0	; () banked
 11909  012198  6F67               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 11913  01219A  C064  F0B2         	movff	Timer0_Init@DIV,___lldiv@dividend
 11914  01219E  C065  F0B3         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 11915  0121A2  C066  F0B4         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 11916  0121A6  C067  F0B5         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 11917  0121AA  0100               	movlb	0	; () banked
 11918  0121AC  5178               	movf	Timer0_Init@PRE& (0+255),w,b
 11919  0121AE  0100               	movlb	0	; () banked
 11920  0121B0  6FB6               	movwf	___lldiv@divisor& (0+255),b
 11921  0121B2  6BB7               	clrf	(___lldiv@divisor+1)& (0+255),b
 11922  0121B4  6BB8               	clrf	(___lldiv@divisor+2)& (0+255),b
 11923  0121B6  6BB9               	clrf	(___lldiv@divisor+3)& (0+255),b
 11924  0121B8  EC7C  F095         	call	___lldiv	;wreg free
 11925  0121BC  0100               	movlb	0	; () banked
 11926  0121BE  1FB2               	comf	?___lldiv& (0+255),f,b
 11927  0121C0  0100               	movlb	0	; () banked
 11928  0121C2  1FB3               	comf	(?___lldiv+1)& (0+255),f,b
 11929  0121C4  0100               	movlb	0	; () banked
 11930  0121C6  4BB2               	infsnz	?___lldiv& (0+255),f,b
 11931  0121C8  2BB3               	incf	(?___lldiv+1)& (0+255),f,b
 11932  0121CA  0EFF               	movlw	255
 11933  0121CC  0100               	movlb	0	; () banked
 11934  0121CE  25B2               	addwf	?___lldiv& (0+255),w,b
 11935  0121D0  6E31               	movwf	_COUNTER,c
 11936  0121D2  0EFF               	movlw	255
 11937  0121D4  0100               	movlb	0	; () banked
 11938  0121D6  21B3               	addwfc	(?___lldiv+1)& (0+255),w,b
 11939  0121D8  6E32               	movwf	_COUNTER+1,c
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;Timer0.c: 68: Timer0_Clear();
 11943  0121DA  EC2D  F0A5         	call	_Timer0_Clear	;wreg free
 11944                           
 11945                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 11946  0121DE  8ED5               	bsf	4053,7,c	;volatile
 11947  0121E0  0012               	return		;funcret
 11948  0121E2                     __end_of_Timer0_Init:
 11949                           	opt stack 0
 11950                           tosu	equ	0xFFF
 11951                           tosh	equ	0xFFE
 11952                           tosl	equ	0xFFD
 11953                           pclath	equ	0xFFA
 11954                           tblptru	equ	0xFF8
 11955                           tblptrh	equ	0xFF7
 11956                           tblptrl	equ	0xFF6
 11957                           tablat	equ	0xFF5
 11958                           prodh	equ	0xFF4
 11959                           prodl	equ	0xFF3
 11960                           intcon	equ	0xFF2
 11961                           postinc0	equ	0xFEE
 11962                           plusw0	equ	0xFEB
 11963                           wreg	equ	0xFE8
 11964                           indf1	equ	0xFE7
 11965                           postdec1	equ	0xFE5
 11966                           fsr1h	equ	0xFE2
 11967                           fsr1l	equ	0xFE1
 11968                           indf2	equ	0xFDF
 11969                           postinc2	equ	0xFDE
 11970                           postdec2	equ	0xFDD
 11971                           plusw2	equ	0xFDB
 11972                           fsr2h	equ	0xFDA
 11973                           fsr2l	equ	0xFD9
 11974                           status	equ	0xFD8
 11975                           
 11976 ;; *************** function _Timer0_Clear *****************
 11977 ;; Defined at:
 11978 ;;		line 20 in file "Library/Timer0.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;		None
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  1    wreg      void 
 11985 ;; Registers used:
 11986 ;;		None
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;Total ram usage:        0 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    7
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_Timer0_Init
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           	psect	text65
 12007  014A5A                     __ptext65:
 12008                           	opt stack 0
 12009  014A5A                     _Timer0_Clear:
 12010                           	opt stack 19
 12011                           
 12012                           ;Timer0.c: 22: TMR0 = COUNTER;
 12013                           
 12014                           ;incstack = 0
 12015  014A5A  C031  FFD6         	movff	_COUNTER,4054	;volatile
 12016  014A5E  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 12017                           
 12018                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 12019  014A62  94F2               	bcf	intcon,2,c	;volatile
 12020  014A64  0012               	return		;funcret
 12021  014A66                     __end_of_Timer0_Clear:
 12022                           	opt stack 0
 12023                           tosu	equ	0xFFF
 12024                           tosh	equ	0xFFE
 12025                           tosl	equ	0xFFD
 12026                           pclath	equ	0xFFA
 12027                           tblptru	equ	0xFF8
 12028                           tblptrh	equ	0xFF7
 12029                           tblptrl	equ	0xFF6
 12030                           tablat	equ	0xFF5
 12031                           prodh	equ	0xFF4
 12032                           prodl	equ	0xFF3
 12033                           intcon	equ	0xFF2
 12034                           postinc0	equ	0xFEE
 12035                           plusw0	equ	0xFEB
 12036                           wreg	equ	0xFE8
 12037                           indf1	equ	0xFE7
 12038                           postdec1	equ	0xFE5
 12039                           fsr1h	equ	0xFE2
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           plusw2	equ	0xFDB
 12045                           fsr2h	equ	0xFDA
 12046                           fsr2l	equ	0xFD9
 12047                           status	equ	0xFD8
 12048                           
 12049 ;; *************** function _MXK_Init *****************
 12050 ;; Defined at:
 12051 ;;		line 33 in file "Library/MXK.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;		None
 12056 ;; Return value:  Size  Location     Type
 12057 ;;                  1    wreg      void 
 12058 ;; Registers used:
 12059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;Total ram usage:        0 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:   16
 12072 ;; This function calls:
 12073 ;;		_LED_Init
 12074 ;;		_Port_Init
 12075 ;;		_Port_SetPin
 12076 ;;		_Port_SetPinType
 12077 ;;		_Port_SetQuadType
 12078 ;;		_Port_SetType
 12079 ;;		_delay_ms
 12080 ;; This function is called by:
 12081 ;;		_initialise
 12082 ;; This function uses a non-reentrant model
 12083 ;;
 12084                           
 12085                           	psect	text66
 12086  011C2A                     __ptext66:
 12087                           	opt stack 0
 12088  011C2A                     _MXK_Init:
 12089                           	opt stack 13
 12090                           
 12091                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 12092                           
 12093                           ;incstack = 0
 12094  011C2A  0E01               	movlw	1
 12095  011C2C  6E4B               	movwf	_Bus_State,c
 12096                           
 12097                           ;MXK.c: 36: lQueue = (Function)0;
 12098  011C2E  0E00               	movlw	0
 12099  011C30  0100               	movlb	0	; () banked
 12100  011C32  6F68               	movwf	_lQueue& (0+255),b	;volatile
 12101  011C34  0E00               	movlw	0
 12102  011C36  0100               	movlb	0	; () banked
 12103  011C38  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12104  011C3A  0E00               	movlw	0
 12105  011C3C  0100               	movlb	0	; () banked
 12106  011C3E  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 12110  011C40  0EA2               	movlw	low _PortA
 12111  011C42  0100               	movlb	0	; () banked
 12112  011C44  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12113  011C46  0E01               	movlw	high _PortA
 12114  011C48  0100               	movlb	0	; () banked
 12115  011C4A  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12116  011C4C  0E00               	movlw	0
 12117  011C4E  0100               	movlb	0	; () banked
 12118  011C50  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12119  011C52  EC4C  F08D         	call	_Port_Init	;wreg free
 12120                           
 12121                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 12122  011C56  0E98               	movlw	low _PortB
 12123  011C58  0100               	movlb	0	; () banked
 12124  011C5A  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12125  011C5C  0E01               	movlw	high _PortB
 12126  011C5E  0100               	movlb	0	; () banked
 12127  011C60  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12128  011C62  0E01               	movlw	1
 12129  011C64  0100               	movlb	0	; () banked
 12130  011C66  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12131  011C68  EC4C  F08D         	call	_Port_Init	;wreg free
 12132                           
 12133                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 12134  011C6C  0E91               	movlw	low _PortC
 12135  011C6E  0100               	movlb	0	; () banked
 12136  011C70  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12137  011C72  0E00               	movlw	high _PortC
 12138  011C74  0100               	movlb	0	; () banked
 12139  011C76  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12140  011C78  0E02               	movlw	2
 12141  011C7A  0100               	movlb	0	; () banked
 12142  011C7C  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12143  011C7E  EC4C  F08D         	call	_Port_Init	;wreg free
 12144                           
 12145                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 12146  011C82  0E87               	movlw	low _PortD
 12147  011C84  0100               	movlb	0	; () banked
 12148  011C86  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12149  011C88  0E00               	movlw	high _PortD
 12150  011C8A  0100               	movlb	0	; () banked
 12151  011C8C  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12152  011C8E  0E03               	movlw	3
 12153  011C90  0100               	movlb	0	; () banked
 12154  011C92  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12155  011C94  EC4C  F08D         	call	_Port_Init	;wreg free
 12156                           
 12157                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 12158  011C98  0E7D               	movlw	low _PortE
 12159  011C9A  0100               	movlb	0	; () banked
 12160  011C9C  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12161  011C9E  0E00               	movlw	high _PortE
 12162  011CA0  0100               	movlb	0	; () banked
 12163  011CA2  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12164  011CA4  0E04               	movlw	4
 12165  011CA6  0100               	movlb	0	; () banked
 12166  011CA8  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12167  011CAA  EC4C  F08D         	call	_Port_Init	;wreg free
 12168                           
 12169                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 12170  011CAE  0EAC               	movlw	low _PortF
 12171  011CB0  0100               	movlb	0	; () banked
 12172  011CB2  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12173  011CB4  0E01               	movlw	high _PortF
 12174  011CB6  0100               	movlb	0	; () banked
 12175  011CB8  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12176  011CBA  0E05               	movlw	5
 12177  011CBC  0100               	movlb	0	; () banked
 12178  011CBE  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12179  011CC0  EC4C  F08D         	call	_Port_Init	;wreg free
 12180                           
 12181                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 12182  011CC4  0E8E               	movlw	low _PortG
 12183  011CC6  0100               	movlb	0	; () banked
 12184  011CC8  6FF2               	movwf	Port_Init@pInput& (0+255),b
 12185  011CCA  0E01               	movlw	high _PortG
 12186  011CCC  0100               	movlb	0	; () banked
 12187  011CCE  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12188  011CD0  0E06               	movlw	6
 12189  011CD2  0100               	movlb	0	; () banked
 12190  011CD4  6FF4               	movwf	Port_Init@pPort& (0+255),b
 12191  011CD6  EC4C  F08D         	call	_Port_Init	;wreg free
 12192                           
 12193                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 12194  011CDA  0EAC               	movlw	low _PortF
 12195  011CDC  0100               	movlb	0	; () banked
 12196  011CDE  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 12197  011CE0  0E01               	movlw	high _PortF
 12198  011CE2  0100               	movlb	0	; () banked
 12199  011CE4  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12200  011CE6  0E05               	movlw	5
 12201  011CE8  0100               	movlb	0	; () banked
 12202  011CEA  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 12203  011CEC  0E00               	movlw	0
 12204  011CEE  0100               	movlb	0	; () banked
 12205  011CF0  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12206  011CF2  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12207                           
 12208                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 12209  011CF6  0E98               	movlw	low _PortB
 12210  011CF8  0100               	movlb	0	; () banked
 12211  011CFA  6FE8               	movwf	Port_SetQuadType@pInput& (0+255),b
 12212  011CFC  0E01               	movlw	high _PortB
 12213  011CFE  0100               	movlb	0	; () banked
 12214  011D00  6FE9               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12215  011D02  0E00               	movlw	0
 12216  011D04  0100               	movlb	0	; () banked
 12217  011D06  6FEA               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12218  011D08  0E00               	movlw	0
 12219  011D0A  0100               	movlb	0	; () banked
 12220  011D0C  6FEB               	movwf	Port_SetQuadType@pType& (0+255),b
 12221  011D0E  EC8F  F086         	call	_Port_SetQuadType	;wreg free
 12222                           
 12223                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 12224  011D12  0EAC               	movlw	low _PortF
 12225  011D14  0100               	movlb	0	; () banked
 12226  011D16  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 12227  011D18  0E01               	movlw	high _PortF
 12228  011D1A  0100               	movlb	0	; () banked
 12229  011D1C  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12230  011D1E  0E06               	movlw	6
 12231  011D20  0100               	movlb	0	; () banked
 12232  011D22  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 12233  011D24  0E03               	movlw	3
 12234  011D26  0100               	movlb	0	; () banked
 12235  011D28  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12236  011D2A  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12237                           
 12238                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12239  011D2E  0E8E               	movlw	low _PortG
 12240  011D30  0100               	movlb	0	; () banked
 12241  011D32  6FEC               	movwf	Port_SetType@pInput& (0+255),b
 12242  011D34  0E01               	movlw	high _PortG
 12243  011D36  0100               	movlb	0	; () banked
 12244  011D38  6FED               	movwf	(Port_SetType@pInput+1)& (0+255),b
 12245  011D3A  0E03               	movlw	3
 12246  011D3C  0100               	movlb	0	; () banked
 12247  011D3E  6FEE               	movwf	Port_SetType@pType& (0+255),b
 12248  011D40  ECBA  F087         	call	_Port_SetType	;wreg free
 12249                           
 12250                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12251  011D44  0E8E               	movlw	low _PortG
 12252  011D46  0100               	movlb	0	; () banked
 12253  011D48  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 12254  011D4A  0E01               	movlw	high _PortG
 12255  011D4C  0100               	movlb	0	; () banked
 12256  011D4E  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12257  011D50  0E04               	movlw	4
 12258  011D52  0100               	movlb	0	; () banked
 12259  011D54  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 12260  011D56  0E00               	movlw	0
 12261  011D58  0100               	movlb	0	; () banked
 12262  011D5A  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 12263  011D5C  EC5A  F094         	call	_Port_SetPin	;wreg free
 12264                           
 12265                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12266  011D60  0EAC               	movlw	low _PortF
 12267  011D62  0100               	movlb	0	; () banked
 12268  011D64  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 12269  011D66  0E01               	movlw	high _PortF
 12270  011D68  0100               	movlb	0	; () banked
 12271  011D6A  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12272  011D6C  0E06               	movlw	6
 12273  011D6E  0100               	movlb	0	; () banked
 12274  011D70  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 12275  011D72  0E01               	movlw	1
 12276  011D74  0100               	movlb	0	; () banked
 12277  011D76  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 12278  011D78  EC5A  F094         	call	_Port_SetPin	;wreg free
 12279                           
 12280                           ;MXK.c: 55: LED_Init(eLED1);
 12281  011D7C  0E00               	movlw	0
 12282  011D7E  EC71  F09E         	call	_LED_Init
 12283                           
 12284                           ;MXK.c: 56: LED_Init(eLED2);
 12285  011D82  0E01               	movlw	1
 12286  011D84  EC71  F09E         	call	_LED_Init
 12287                           
 12288                           ;MXK.c: 58: PIR1 = 0;
 12289  011D88  0E00               	movlw	0
 12290  011D8A  6E9E               	movwf	3998,c	;volatile
 12291                           
 12292                           ;MXK.c: 59: PIR2 = 0;
 12293  011D8C  0E00               	movlw	0
 12294  011D8E  6EA1               	movwf	4001,c	;volatile
 12295                           
 12296                           ;MXK.c: 60: PIR3 = 0;
 12297  011D90  0E00               	movlw	0
 12298  011D92  6EA4               	movwf	4004,c	;volatile
 12299                           
 12300                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12301  011D94  8E9B               	bsf	3995,7,c	;volatile
 12302                           
 12303                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12304  011D96  8C9B               	bsf	3995,6,c	;volatile
 12305                           
 12306                           ;MXK.c: 66: delay_ms(100);
 12307  011D98  0E00               	movlw	0
 12308  011D9A  0100               	movlb	0	; () banked
 12309  011D9C  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 12310  011D9E  0E64               	movlw	100
 12311  011DA0  6FB2               	movwf	delay_ms@ms& (0+255),b
 12312  011DA2  EC71  F09D         	call	_delay_ms	;wreg free
 12313                           
 12314                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12315  011DA6  8ED0               	bsf	4048,7,c	;volatile
 12316  011DA8  0012               	return		;funcret
 12317  011DAA                     __end_of_MXK_Init:
 12318                           	opt stack 0
 12319                           tosu	equ	0xFFF
 12320                           tosh	equ	0xFFE
 12321                           tosl	equ	0xFFD
 12322                           pclath	equ	0xFFA
 12323                           tblptru	equ	0xFF8
 12324                           tblptrh	equ	0xFF7
 12325                           tblptrl	equ	0xFF6
 12326                           tablat	equ	0xFF5
 12327                           prodh	equ	0xFF4
 12328                           prodl	equ	0xFF3
 12329                           intcon	equ	0xFF2
 12330                           postinc0	equ	0xFEE
 12331                           plusw0	equ	0xFEB
 12332                           wreg	equ	0xFE8
 12333                           indf1	equ	0xFE7
 12334                           postdec1	equ	0xFE5
 12335                           fsr1h	equ	0xFE2
 12336                           fsr1l	equ	0xFE1
 12337                           indf2	equ	0xFDF
 12338                           postinc2	equ	0xFDE
 12339                           postdec2	equ	0xFDD
 12340                           plusw2	equ	0xFDB
 12341                           fsr2h	equ	0xFDA
 12342                           fsr2l	equ	0xFD9
 12343                           status	equ	0xFD8
 12344                           
 12345 ;; *************** function _Port_Init *****************
 12346 ;; Defined at:
 12347 ;;		line 150 in file "Library/Port.c"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 12350 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12351 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12352 ;;  pPort           1   66[BANK0 ] enum E6786
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  i               1    2[BANK1 ] unsigned char 
 12355 ;; Return value:  Size  Location     Type
 12356 ;;                  1    wreg      void 
 12357 ;; Registers used:
 12358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12359 ;; Tracked objects:
 12360 ;;		On entry : 0/0
 12361 ;;		On exit  : 0/0
 12362 ;;		Unchanged: 0/0
 12363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12364 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12365 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Totals:         0       3       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;Total ram usage:        6 bytes
 12369 ;; Hardware stack levels used:    1
 12370 ;; Hardware stack levels required when called:   15
 12371 ;; This function calls:
 12372 ;;		_GetPortPORT
 12373 ;;		_GetPortProperties
 12374 ;;		_GetPortTRIS
 12375 ;;		_Port_Set
 12376 ;;		_Port_SetPinType
 12377 ;;		_Port_SetType
 12378 ;;		_Word_GetPair
 12379 ;; This function is called by:
 12380 ;;		_MXK_Init
 12381 ;; This function uses a non-reentrant model
 12382 ;;
 12383                           
 12384                           	psect	text67
 12385  011A98                     __ptext67:
 12386                           	opt stack 0
 12387  011A98                     _Port_Init:
 12388                           	opt stack 13
 12389                           
 12390                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12391                           
 12392                           ;incstack = 0
 12393  011A98  0100               	movlb	0	; () banked
 12394  011A9A  51F4               	movf	Port_Init@pPort& (0+255),w,b
 12395  011A9C  ECE6  F097         	call	_GetPortProperties
 12396  011AA0  C0F2  FFD9         	movff	Port_Init@pInput,fsr2l
 12397  011AA4  C0F3  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12398  011AA8  0100               	movlb	0	; () banked
 12399  011AAA  C0B2  FFDE         	movff	?_GetPortProperties,postinc2
 12400  011AAE  0100               	movlb	0	; () banked
 12401  011AB0  C0B3  FFDD         	movff	?_GetPortProperties+1,postdec2
 12402                           
 12403                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12404  011AB4  0100               	movlb	0	; () banked
 12405  011AB6  51F4               	movf	Port_Init@pPort& (0+255),w,b
 12406  011AB8  EC39  F098         	call	_GetPortPORT
 12407  011ABC  0100               	movlb	0	; () banked
 12408  011ABE  EE20 F006          	lfsr	2,6
 12409  011AC2  51F2               	movf	Port_Init@pInput& (0+255),w,b
 12410  011AC4  26D9               	addwf	fsr2l,f,c
 12411  011AC6  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12412  011AC8  22DA               	addwfc	fsr2h,f,c
 12413  011ACA  0100               	movlb	0	; () banked
 12414  011ACC  C0B2  FFDE         	movff	?_GetPortPORT,postinc2
 12415  011AD0  0100               	movlb	0	; () banked
 12416  011AD2  C0B3  FFDD         	movff	?_GetPortPORT+1,postdec2
 12417                           
 12418                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12419  011AD6  0100               	movlb	0	; () banked
 12420  011AD8  51F4               	movf	Port_Init@pPort& (0+255),w,b
 12421  011ADA  EC39  F098         	call	_GetPortPORT
 12422  011ADE  0100               	movlb	0	; () banked
 12423  011AE0  EE20 F004          	lfsr	2,4
 12424  011AE4  51F2               	movf	Port_Init@pInput& (0+255),w,b
 12425  011AE6  26D9               	addwf	fsr2l,f,c
 12426  011AE8  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12427  011AEA  22DA               	addwfc	fsr2h,f,c
 12428  011AEC  0100               	movlb	0	; () banked
 12429  011AEE  C0B2  FFDE         	movff	?_GetPortPORT,postinc2
 12430  011AF2  0100               	movlb	0	; () banked
 12431  011AF4  C0B3  FFDD         	movff	?_GetPortPORT+1,postdec2
 12432                           
 12433                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12434  011AF8  0100               	movlb	0	; () banked
 12435  011AFA  51F4               	movf	Port_Init@pPort& (0+255),w,b
 12436  011AFC  EC93  F097         	call	_GetPortTRIS
 12437  011B00  0100               	movlb	0	; () banked
 12438  011B02  EE20 F002          	lfsr	2,2
 12439  011B06  51F2               	movf	Port_Init@pInput& (0+255),w,b
 12440  011B08  26D9               	addwf	fsr2l,f,c
 12441  011B0A  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12442  011B0C  22DA               	addwfc	fsr2h,f,c
 12443  011B0E  0100               	movlb	0	; () banked
 12444  011B10  C0B2  FFDE         	movff	?_GetPortTRIS,postinc2
 12445  011B14  0100               	movlb	0	; () banked
 12446  011B16  C0B3  FFDD         	movff	?_GetPortTRIS+1,postdec2
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12450  011B1A  0100               	movlb	0	; () banked
 12451  011B1C  EE20 F004          	lfsr	2,4
 12452  011B20  51F2               	movf	Port_Init@pInput& (0+255),w,b
 12453  011B22  26D9               	addwf	fsr2l,f,c
 12454  011B24  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12455  011B26  22DA               	addwfc	fsr2h,f,c
 12456  011B28  CFDE F1C8          	movff	postinc2,??_Port_Init
 12457  011B2C  CFDD F1C9          	movff	postdec2,??_Port_Init+1
 12458  011B30  C1C8  FFD9         	movff	??_Port_Init,fsr2l
 12459  011B34  C1C9  FFDA         	movff	??_Port_Init+1,fsr2h
 12460  011B38  0E00               	movlw	0
 12461  011B3A  6EDF               	movwf	indf2,c
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12465  011B3C  0100               	movlb	0	; () banked
 12466  011B3E  EE20 F002          	lfsr	2,2
 12467  011B42  51F2               	movf	Port_Init@pInput& (0+255),w,b
 12468  011B44  26D9               	addwf	fsr2l,f,c
 12469  011B46  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12470  011B48  22DA               	addwfc	fsr2h,f,c
 12471  011B4A  CFDE F1C8          	movff	postinc2,??_Port_Init
 12472  011B4E  CFDD F1C9          	movff	postdec2,??_Port_Init+1
 12473  011B52  C1C8  FFD9         	movff	??_Port_Init,fsr2l
 12474  011B56  C1C9  FFDA         	movff	??_Port_Init+1,fsr2h
 12475  011B5A  0EFF               	movlw	255
 12476  011B5C  6EDF               	movwf	indf2,c
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12480  011B5E  C0F2  F0EC         	movff	Port_Init@pInput,Port_SetType@pInput
 12481  011B62  C0F3  F0ED         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12482  011B66  0E00               	movlw	0
 12483  011B68  0100               	movlb	0	; () banked
 12484  011B6A  6FEE               	movwf	Port_SetType@pType& (0+255),b
 12485  011B6C  ECBA  F087         	call	_Port_SetType	;wreg free
 12486                           
 12487                           ;Port.c: 166: UINT8 i;
 12488                           ;Port.c: 167: for (i=0; i<8; i++)
 12489  011B70  0E00               	movlw	0
 12490  011B72  0101               	movlb	1	; () banked
 12491  011B74  6FCA               	movwf	Port_Init@i& (0+255),b
 12492  011B76                     l11674:
 12493                           
 12494                           ; BSR set to: 1
 12495  011B76  0E07               	movlw	7
 12496  011B78  0101               	movlb	1	; () banked
 12497  011B7A  65CA               	cpfsgt	Port_Init@i& (0+255),b
 12498  011B7C  D031               	goto	l403
 12499  011B7E  D04B               	goto	u7980
 12500  011B80                     
 12501                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12502                           
 12503                           ; BSR set to: 1
 12504  011B80  C0F2  F0D8         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12505  011B84  C0F3  F0D9         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12506  011B88  C1CA  F0DA         	movff	Port_Init@i,Port_SetPinType@pPin
 12507  011B8C  0E03               	movlw	3
 12508  011B8E  0100               	movlb	0	; () banked
 12509  011B90  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12510  011B92  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12511                           
 12512                           ;Port.c: 173: break;
 12513  011B96  D03C               	goto	l405
 12514  011B98                     
 12515                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12516  011B98  C0F2  F0D8         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12517  011B9C  C0F3  F0D9         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12518  011BA0  C1CA  F0DA         	movff	Port_Init@i,Port_SetPinType@pPin
 12519  011BA4  0E02               	movlw	2
 12520  011BA6  0100               	movlb	0	; () banked
 12521  011BA8  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12522  011BAA  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12523                           
 12524                           ;Port.c: 176: break;
 12525  011BAE  D030               	goto	l405
 12526  011BB0                     
 12527                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12528  011BB0  C0F2  F0D8         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12529  011BB4  C0F3  F0D9         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12530  011BB8  C1CA  F0DA         	movff	Port_Init@i,Port_SetPinType@pPin
 12531  011BBC  0E01               	movlw	1
 12532  011BBE  0100               	movlb	0	; () banked
 12533  011BC0  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12534  011BC2  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12535                           
 12536                           ;Port.c: 179: break;
 12537  011BC6  D024               	goto	l405
 12538  011BC8                     
 12539                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12540  011BC8  C0F2  F0D8         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12541  011BCC  C0F3  F0D9         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12542  011BD0  C1CA  F0DA         	movff	Port_Init@i,Port_SetPinType@pPin
 12543  011BD4  0E00               	movlw	0
 12544  011BD6  0100               	movlb	0	; () banked
 12545  011BD8  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 12546  011BDA  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 12547                           
 12548                           ;Port.c: 183: }
 12549                           
 12550                           ;Port.c: 182: break;
 12551  011BDE  D018               	goto	l405
 12552  011BE0                     l403:
 12553  011BE0  C0F2  FFD9         	movff	Port_Init@pInput,fsr2l
 12554  011BE4  C0F3  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12555  011BE8  CFDE F0BE          	movff	postinc2,Word_GetPair@pInput
 12556  011BEC  CFDD F0BF          	movff	postdec2,Word_GetPair@pInput+1
 12557  011BF0  C1CA  F0C0         	movff	Port_Init@i,Word_GetPair@pPair
 12558  011BF4  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 12559                           
 12560                           ; Switch size 1, requested type "space"
 12561                           ; Number of cases is 4, Range of values is 0 to 3
 12562                           ; switch strategies available:
 12563                           ; Name         Instructions Cycles
 12564                           ; simple_byte           13     7 (average)
 12565                           ;	Chosen strategy is simple_byte
 12566  011BF8  0A00               	xorlw	0	; case 0
 12567  011BFA  B4D8               	btfsc	status,2,c
 12568  011BFC  D7C1               	goto	l404
 12569  011BFE  0A01               	xorlw	1	; case 1
 12570  011C00  B4D8               	btfsc	status,2,c
 12571  011C02  D7D6               	goto	l407
 12572  011C04  0A03               	xorlw	3	; case 2
 12573  011C06  B4D8               	btfsc	status,2,c
 12574  011C08  D7C7               	goto	l406
 12575  011C0A  0A01               	xorlw	1	; case 3
 12576  011C0C  B4D8               	btfsc	status,2,c
 12577  011C0E  D7DC               	goto	l408
 12578  011C10                     l405:
 12579  011C10  0101               	movlb	1	; () banked
 12580  011C12  2BCA               	incf	Port_Init@i& (0+255),f,b
 12581  011C14  D7B0               	goto	l11674
 12582  011C16                     u7980:
 12583                           
 12584                           ; BSR set to: 1
 12585                           ;Port.c: 184: }
 12586                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12587                           
 12588                           ; BSR set to: 1
 12589  011C16  C0F2  F0C1         	movff	Port_Init@pInput,Port_Set@pInput
 12590  011C1A  C0F3  F0C2         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12591  011C1E  0E00               	movlw	0
 12592  011C20  0100               	movlb	0	; () banked
 12593  011C22  6FC3               	movwf	Port_Set@pValue& (0+255),b
 12594  011C24  EC0F  F082         	call	_Port_Set	;wreg free
 12595  011C28  0012               	return		;funcret
 12596  011C2A                     __end_of_Port_Init:
 12597                           	opt stack 0
 12598                           tosu	equ	0xFFF
 12599                           tosh	equ	0xFFE
 12600                           tosl	equ	0xFFD
 12601                           pclath	equ	0xFFA
 12602                           tblptru	equ	0xFF8
 12603                           tblptrh	equ	0xFF7
 12604                           tblptrl	equ	0xFF6
 12605                           tablat	equ	0xFF5
 12606                           prodh	equ	0xFF4
 12607                           prodl	equ	0xFF3
 12608                           intcon	equ	0xFF2
 12609                           postinc0	equ	0xFEE
 12610                           plusw0	equ	0xFEB
 12611                           wreg	equ	0xFE8
 12612                           indf1	equ	0xFE7
 12613                           postdec1	equ	0xFE5
 12614                           fsr1h	equ	0xFE2
 12615                           fsr1l	equ	0xFE1
 12616                           indf2	equ	0xFDF
 12617                           postinc2	equ	0xFDE
 12618                           postdec2	equ	0xFDD
 12619                           plusw2	equ	0xFDB
 12620                           fsr2h	equ	0xFDA
 12621                           fsr2l	equ	0xFD9
 12622                           status	equ	0xFD8
 12623                           
 12624 ;; *************** function _Port_SetType *****************
 12625 ;; Defined at:
 12626 ;;		line 513 in file "Library/Port.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 12629 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12630 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12631 ;;  pType           1   60[BANK0 ] enum E6795
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  Output          1   63[BANK0 ] enum E6475
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  1    wreg      enum E6475
 12636 ;; Registers used:
 12637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12643 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;Total ram usage:        6 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:   14
 12650 ;; This function calls:
 12651 ;;		_Port_CheckPortType
 12652 ;;		_Word_SetPair
 12653 ;; This function is called by:
 12654 ;;		_Port_Init
 12655 ;;		_MXK_Init
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           	psect	text68
 12660  010F74                     __ptext68:
 12661                           	opt stack 0
 12662  010F74                     _Port_SetType:
 12663                           	opt stack 14
 12664                           
 12665                           ;Port.c: 515: ePinError Output = ePinErrorState;
 12666                           
 12667                           ;incstack = 0
 12668  010F74  0E05               	movlw	5
 12669  010F76  0100               	movlb	0	; () banked
 12670  010F78  6FF1               	movwf	Port_SetType@Output& (0+255),b
 12671                           
 12672                           ;Port.c: 517: switch (pType)
 12673  010F7A  D07A               	goto	l509
 12674  010F7C                     
 12675                           ; BSR set to: 0
 12676                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 12677                           
 12678                           ; BSR set to: 0
 12679  010F7C  0100               	movlb	0	; () banked
 12680  010F7E  EE20 F002          	lfsr	2,2
 12681  010F82  51EC               	movf	Port_SetType@pInput& (0+255),w,b
 12682  010F84  26D9               	addwf	fsr2l,f,c
 12683  010F86  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12684  010F88  22DA               	addwfc	fsr2h,f,c
 12685  010F8A  CFDE F0EF          	movff	postinc2,??_Port_SetType
 12686  010F8E  CFDD F0F0          	movff	postdec2,??_Port_SetType+1
 12687  010F92  C0EF  FFD9         	movff	??_Port_SetType,fsr2l
 12688  010F96  C0F0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12689  010F9A  0EFF               	movlw	255
 12690  010F9C  D067               	goto	L3
 12691  010F9E                     
 12692                           ; BSR set to: 0
 12693                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 12694                           
 12695                           ; BSR set to: 0
 12696  010F9E  C0EC  F0E8         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12697  010FA2  C0ED  F0E9         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12698  010FA6  0E01               	movlw	1
 12699  010FA8  0100               	movlb	0	; () banked
 12700  010FAA  6FEA               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12701  010FAC  EC70  F0A0         	call	_Port_CheckPortType	;wreg free
 12702  010FB0  0100               	movlb	0	; () banked
 12703  010FB2  6FF1               	movwf	Port_SetType@Output& (0+255),b
 12704  010FB4  0100               	movlb	0	; () banked
 12705  010FB6  51F1               	movf	Port_SetType@Output& (0+255),w,b
 12706  010FB8  A4D8               	btfss	status,2,c
 12707  010FBA  0012               	return	
 12708                           
 12709                           ; BSR set to: 0
 12710                           ;Port.c: 527: {
 12711                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 12712  010FBC  0100               	movlb	0	; () banked
 12713  010FBE  EE20 F002          	lfsr	2,2
 12714  010FC2  51EC               	movf	Port_SetType@pInput& (0+255),w,b
 12715  010FC4  26D9               	addwf	fsr2l,f,c
 12716  010FC6  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12717  010FC8  22DA               	addwfc	fsr2h,f,c
 12718  010FCA  CFDE F0EF          	movff	postinc2,??_Port_SetType
 12719  010FCE  CFDD F0F0          	movff	postdec2,??_Port_SetType+1
 12720  010FD2  C0EF  FFD9         	movff	??_Port_SetType,fsr2l
 12721  010FD6  C0F0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12722  010FDA  0E00               	movlw	0
 12723  010FDC  6EDF               	movwf	indf2,c
 12724                           
 12725                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 12726  010FDE  0100               	movlb	0	; () banked
 12727  010FE0  EE20 F004          	lfsr	2,4
 12728  010FE4  D036               	goto	L8
 12729  010FE6                     
 12730                           ; BSR set to: 0
 12731                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 12732                           
 12733                           ; BSR set to: 0
 12734  010FE6  C0EC  F0E8         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12735  010FEA  C0ED  F0E9         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12736  010FEE  0E02               	movlw	2
 12737  010FF0  0100               	movlb	0	; () banked
 12738  010FF2  6FEA               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12739  010FF4  EC70  F0A0         	call	_Port_CheckPortType	;wreg free
 12740  010FF8  0100               	movlb	0	; () banked
 12741  010FFA  6FF1               	movwf	Port_SetType@Output& (0+255),b
 12742  010FFC  0100               	movlb	0	; () banked
 12743  010FFE  51F1               	movf	Port_SetType@Output& (0+255),w,b
 12744  011000  A4D8               	btfss	status,2,c
 12745  011002  0012               	return	
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;Port.c: 538: {
 12749                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 12750  011004  0100               	movlb	0	; () banked
 12751  011006  EE20 F002          	lfsr	2,2
 12752  01100A  51EC               	movf	Port_SetType@pInput& (0+255),w,b
 12753  01100C  26D9               	addwf	fsr2l,f,c
 12754  01100E  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12755  011010  22DA               	addwfc	fsr2h,f,c
 12756  011012  CFDE F0EF          	movff	postinc2,??_Port_SetType
 12757  011016  CFDD F0F0          	movff	postdec2,??_Port_SetType+1
 12758  01101A  C0EF  FFD9         	movff	??_Port_SetType,fsr2l
 12759  01101E  C0F0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12760  011022  0EFF               	movlw	255
 12761  011024  6EDF               	movwf	indf2,c
 12762                           
 12763                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 12764  011026  0100               	movlb	0	; () banked
 12765  011028  EE20 F004          	lfsr	2,4
 12766  01102C  D7AA               	goto	L4
 12767  01102E                     
 12768                           ; BSR set to: 0
 12769                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 12770                           
 12771                           ; BSR set to: 0
 12772  01102E  C0EC  F0E8         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12773  011032  C0ED  F0E9         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12774  011036  0E00               	movlw	0
 12775  011038  0100               	movlb	0	; () banked
 12776  01103A  6FEA               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12777  01103C  EC70  F0A0         	call	_Port_CheckPortType	;wreg free
 12778  011040  0100               	movlb	0	; () banked
 12779  011042  6FF1               	movwf	Port_SetType@Output& (0+255),b
 12780  011044  0100               	movlb	0	; () banked
 12781  011046  51F1               	movf	Port_SetType@Output& (0+255),w,b
 12782  011048  A4D8               	btfss	status,2,c
 12783  01104A  0012               	return	
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;Port.c: 549: {
 12787                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 12788  01104C  0100               	movlb	0	; () banked
 12789  01104E  EE20 F002          	lfsr	2,2
 12790  011052                     L8:
 12791  011052  51EC               	movf	Port_SetType@pInput& (0+255),w,b
 12792  011054  26D9               	addwf	fsr2l,f,c
 12793  011056  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12794  011058  22DA               	addwfc	fsr2h,f,c
 12795  01105A  CFDE F0EF          	movff	postinc2,??_Port_SetType
 12796  01105E  CFDD F0F0          	movff	postdec2,??_Port_SetType+1
 12797  011062  C0EF  FFD9         	movff	??_Port_SetType,fsr2l
 12798  011066  C0F0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12799  01106A  0E00               	movlw	0
 12800  01106C                     L3:
 12801  01106C  6EDF               	movwf	indf2,c
 12802                           
 12803                           ;Port.c: 552: }
 12804  01106E  D00E               	goto	l511
 12805  011070                     l509:
 12806                           
 12807                           ; BSR set to: 0
 12808                           
 12809                           ; BSR set to: 0
 12810  011070  0100               	movlb	0	; () banked
 12811  011072  51EE               	movf	Port_SetType@pType& (0+255),w,b
 12812                           
 12813                           ; Switch size 1, requested type "space"
 12814                           ; Number of cases is 4, Range of values is 0 to 3
 12815                           ; switch strategies available:
 12816                           ; Name         Instructions Cycles
 12817                           ; simple_byte           13     7 (average)
 12818                           ;	Chosen strategy is simple_byte
 12819  011074  0A00               	xorlw	0	; case 0
 12820  011076  B4D8               	btfsc	status,2,c
 12821  011078  D781               	goto	l510
 12822  01107A  0A01               	xorlw	1	; case 1
 12823  01107C  B4D8               	btfsc	status,2,c
 12824  01107E  D78F               	goto	l512
 12825  011080  0A03               	xorlw	3	; case 2
 12826  011082  B4D8               	btfsc	status,2,c
 12827  011084  D7B0               	goto	l516
 12828  011086  0A01               	xorlw	1	; case 3
 12829  011088  B4D8               	btfsc	status,2,c
 12830  01108A  D7D1               	goto	l519
 12831  01108C                     l511:
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 12835                           
 12836                           ; BSR set to: 0
 12837  01108C  0E08               	movlw	8
 12838  01108E  0100               	movlb	0	; () banked
 12839  011090  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12840  011092  0100               	movlb	0	; () banked
 12841  011094  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12842  011096  0E00               	movlw	0
 12843  011098  0100               	movlb	0	; () banked
 12844  01109A  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12845  01109C  0100               	movlb	0	; () banked
 12846  01109E  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12847  0110A0  0E00               	movlw	0
 12848  0110A2  0100               	movlb	0	; () banked
 12849  0110A4  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12850  0110A6  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12851  0110AA  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12852                           
 12853                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 12854  0110AE  0E08               	movlw	8
 12855  0110B0  0100               	movlb	0	; () banked
 12856  0110B2  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12857  0110B4  0100               	movlb	0	; () banked
 12858  0110B6  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12859  0110B8  0E00               	movlw	0
 12860  0110BA  0100               	movlb	0	; () banked
 12861  0110BC  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12862  0110BE  0100               	movlb	0	; () banked
 12863  0110C0  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12864  0110C2  0E01               	movlw	1
 12865  0110C4  0100               	movlb	0	; () banked
 12866  0110C6  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12867  0110C8  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12868  0110CC  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12869                           
 12870                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 12871  0110D0  0E08               	movlw	8
 12872  0110D2  0100               	movlb	0	; () banked
 12873  0110D4  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12874  0110D6  0100               	movlb	0	; () banked
 12875  0110D8  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12876  0110DA  0E00               	movlw	0
 12877  0110DC  0100               	movlb	0	; () banked
 12878  0110DE  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12879  0110E0  0100               	movlb	0	; () banked
 12880  0110E2  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12881  0110E4  0E02               	movlw	2
 12882  0110E6  0100               	movlb	0	; () banked
 12883  0110E8  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12884  0110EA  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12885  0110EE  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12886                           
 12887                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 12888  0110F2  0E08               	movlw	8
 12889  0110F4  0100               	movlb	0	; () banked
 12890  0110F6  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12891  0110F8  0100               	movlb	0	; () banked
 12892  0110FA  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12893  0110FC  0E00               	movlw	0
 12894  0110FE  0100               	movlb	0	; () banked
 12895  011100  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12896  011102  0100               	movlb	0	; () banked
 12897  011104  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12898  011106  0E03               	movlw	3
 12899  011108  0100               	movlb	0	; () banked
 12900  01110A  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12901  01110C  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12902  011110  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12903                           
 12904                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 12905  011114  0E08               	movlw	8
 12906  011116  0100               	movlb	0	; () banked
 12907  011118  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12908  01111A  0100               	movlb	0	; () banked
 12909  01111C  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12910  01111E  0E00               	movlw	0
 12911  011120  0100               	movlb	0	; () banked
 12912  011122  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12913  011124  0100               	movlb	0	; () banked
 12914  011126  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12915  011128  0E04               	movlw	4
 12916  01112A  0100               	movlb	0	; () banked
 12917  01112C  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12918  01112E  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12919  011132  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12920                           
 12921                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 12922  011136  0E08               	movlw	8
 12923  011138  0100               	movlb	0	; () banked
 12924  01113A  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12925  01113C  0100               	movlb	0	; () banked
 12926  01113E  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12927  011140  0E00               	movlw	0
 12928  011142  0100               	movlb	0	; () banked
 12929  011144  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12930  011146  0100               	movlb	0	; () banked
 12931  011148  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12932  01114A  0E05               	movlw	5
 12933  01114C  0100               	movlb	0	; () banked
 12934  01114E  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12935  011150  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12936  011154  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12937                           
 12938                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 12939  011158  0E08               	movlw	8
 12940  01115A  0100               	movlb	0	; () banked
 12941  01115C  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12942  01115E  0100               	movlb	0	; () banked
 12943  011160  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12944  011162  0E00               	movlw	0
 12945  011164  0100               	movlb	0	; () banked
 12946  011166  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12947  011168  0100               	movlb	0	; () banked
 12948  01116A  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12949  01116C  0E06               	movlw	6
 12950  01116E  0100               	movlb	0	; () banked
 12951  011170  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12952  011172  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12953  011176  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12954                           
 12955                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 12956  01117A  0E08               	movlw	8
 12957  01117C  0100               	movlb	0	; () banked
 12958  01117E  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
 12959  011180  0100               	movlb	0	; () banked
 12960  011182  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 12961  011184  0E00               	movlw	0
 12962  011186  0100               	movlb	0	; () banked
 12963  011188  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12964  01118A  0100               	movlb	0	; () banked
 12965  01118C  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12966  01118E  0E07               	movlw	7
 12967  011190  0100               	movlb	0	; () banked
 12968  011192  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 12969  011194  C0EE  F0C4         	movff	Port_SetType@pType,Word_SetPair@pValue
 12970  011198  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 12971  01119C  0012               	return	
 12972  01119E                     __end_of_Port_SetType:
 12973                           	opt stack 0
 12974                           tosu	equ	0xFFF
 12975                           tosh	equ	0xFFE
 12976                           tosl	equ	0xFFD
 12977                           pclath	equ	0xFFA
 12978                           tblptru	equ	0xFF8
 12979                           tblptrh	equ	0xFF7
 12980                           tblptrl	equ	0xFF6
 12981                           tablat	equ	0xFF5
 12982                           prodh	equ	0xFF4
 12983                           prodl	equ	0xFF3
 12984                           intcon	equ	0xFF2
 12985                           postinc0	equ	0xFEE
 12986                           plusw0	equ	0xFEB
 12987                           wreg	equ	0xFE8
 12988                           indf1	equ	0xFE7
 12989                           postdec1	equ	0xFE5
 12990                           fsr1h	equ	0xFE2
 12991                           fsr1l	equ	0xFE1
 12992                           indf2	equ	0xFDF
 12993                           postinc2	equ	0xFDE
 12994                           postdec2	equ	0xFDD
 12995                           plusw2	equ	0xFDB
 12996                           fsr2h	equ	0xFDA
 12997                           fsr2l	equ	0xFD9
 12998                           status	equ	0xFD8
 12999                           
 13000 ;; *************** function _Port_CheckPortType *****************
 13001 ;; Defined at:
 13002 ;;		line 138 in file "Library/Port.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 13005 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13006 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13007 ;;  pDrive          1   56[BANK0 ] enum E6469
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;  Output          1   57[BANK0 ] enum E6475
 13010 ;; Return value:  Size  Location     Type
 13011 ;;                  1    wreg      enum E6475
 13012 ;; Registers used:
 13013 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13019 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13022 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13023 ;;Total ram usage:        4 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; Hardware stack levels required when called:   13
 13026 ;; This function calls:
 13027 ;;		_Port_CheckQuadType
 13028 ;; This function is called by:
 13029 ;;		_Port_SetType
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           	psect	text69
 13034  0140E0                     __ptext69:
 13035                           	opt stack 0
 13036  0140E0                     _Port_CheckPortType:
 13037                           	opt stack 14
 13038                           
 13039                           ;Port.c: 140: ePinError Output = ePinErrorState;
 13040                           
 13041                           ;incstack = 0
 13042  0140E0  0E05               	movlw	5
 13043  0140E2  0100               	movlb	0	; () banked
 13044  0140E4  6FEB               	movwf	Port_CheckPortType@Output& (0+255),b
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 13048  0140E6  C0E8  F0E1         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13049  0140EA  C0E9  F0E2         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13050  0140EE  0E00               	movlw	0
 13051  0140F0  0100               	movlb	0	; () banked
 13052  0140F2  6FE3               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13053  0140F4  C0EA  F0E4         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13054  0140F8  ECFF  F09E         	call	_Port_CheckQuadType	;wreg free
 13055  0140FC  0100               	movlb	0	; () banked
 13056  0140FE  6FEB               	movwf	Port_CheckPortType@Output& (0+255),b
 13057  014100  0100               	movlb	0	; () banked
 13058  014102  51EB               	movf	Port_CheckPortType@Output& (0+255),w,b
 13059  014104  A4D8               	btfss	status,2,c
 13060  014106  D00D               	goto	l397
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 13064  014108  C0E8  F0E1         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13065  01410C  C0E9  F0E2         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13066  014110  0E01               	movlw	1
 13067  014112  0100               	movlb	0	; () banked
 13068  014114  6FE3               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13069  014116  C0EA  F0E4         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13070  01411A  ECFF  F09E         	call	_Port_CheckQuadType	;wreg free
 13071  01411E  0100               	movlb	0	; () banked
 13072  014120  6FEB               	movwf	Port_CheckPortType@Output& (0+255),b
 13073  014122                     l397:
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;Port.c: 146: return Output;
 13077                           
 13078                           ; BSR set to: 0
 13079  014122  0100               	movlb	0	; () banked
 13080  014124  51EB               	movf	Port_CheckPortType@Output& (0+255),w,b
 13081  014126  0012               	return	
 13082  014128                     __end_of_Port_CheckPortType:
 13083                           	opt stack 0
 13084                           tosu	equ	0xFFF
 13085                           tosh	equ	0xFFE
 13086                           tosl	equ	0xFFD
 13087                           pclath	equ	0xFFA
 13088                           tblptru	equ	0xFF8
 13089                           tblptrh	equ	0xFF7
 13090                           tblptrl	equ	0xFF6
 13091                           tablat	equ	0xFF5
 13092                           prodh	equ	0xFF4
 13093                           prodl	equ	0xFF3
 13094                           intcon	equ	0xFF2
 13095                           postinc0	equ	0xFEE
 13096                           plusw0	equ	0xFEB
 13097                           wreg	equ	0xFE8
 13098                           indf1	equ	0xFE7
 13099                           postdec1	equ	0xFE5
 13100                           fsr1h	equ	0xFE2
 13101                           fsr1l	equ	0xFE1
 13102                           indf2	equ	0xFDF
 13103                           postinc2	equ	0xFDE
 13104                           postdec2	equ	0xFDD
 13105                           plusw2	equ	0xFDB
 13106                           fsr2h	equ	0xFDA
 13107                           fsr2l	equ	0xFD9
 13108                           status	equ	0xFD8
 13109                           
 13110 ;; *************** function _Port_Set *****************
 13111 ;; Defined at:
 13112 ;;		line 570 in file "Library/Port.c"
 13113 ;; Parameters:    Size  Location     Type
 13114 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13115 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13116 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13117 ;;  pValue          1   17[BANK0 ] unsigned char 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 13120 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 13121 ;;  Type            1   38[BANK0 ] enum E6795
 13122 ;; Return value:  Size  Location     Type
 13123 ;;                  1    wreg      void 
 13124 ;; Registers used:
 13125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13126 ;; Tracked objects:
 13127 ;;		On entry : 0/0
 13128 ;;		On exit  : 0/0
 13129 ;;		Unchanged: 0/0
 13130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13131 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13134 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13135 ;;Total ram usage:       24 bytes
 13136 ;; Hardware stack levels used:    1
 13137 ;; Hardware stack levels required when called:   10
 13138 ;; This function calls:
 13139 ;;		_Byte_SetByte
 13140 ;;		_Word_GetPair
 13141 ;; This function is called by:
 13142 ;;		_Port_Init
 13143 ;;		_Port_Toggle
 13144 ;; This function uses a non-reentrant model
 13145 ;;
 13146                           
 13147                           	psect	text70
 13148  01041E                     __ptext70:
 13149                           	opt stack 0
 13150  01041E                     _Port_Set:
 13151                           	opt stack 17
 13152                           
 13153                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;incstack = 0
 13157  01041E  0E08               	movlw	8
 13158  010420  0100               	movlb	0	; () banked
 13159  010422  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13160  010424  0100               	movlb	0	; () banked
 13161  010426  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13162  010428  0E00               	movlw	0
 13163  01042A  0100               	movlb	0	; () banked
 13164  01042C  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13165  01042E  0100               	movlb	0	; () banked
 13166  010430  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13167  010432  0E00               	movlw	0
 13168  010434  0100               	movlb	0	; () banked
 13169  010436  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13170  010438  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13171  01043C  0100               	movlb	0	; () banked
 13172  01043E  6FD8               	movwf	Port_Set@Type& (0+255),b
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 13176  010440  0100               	movlb	0	; () banked
 13177  010442  51D8               	movf	Port_Set@Type& (0+255),w,b
 13178  010444  0100               	movlb	0	; () banked
 13179  010446  6FC4               	movwf	??_Port_Set& (0+255),b
 13180  010448  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13181  01044A  0E0E               	movlw	14
 13182  01044C                     u7635:
 13183  01044C  90D8               	bcf	status,0,c
 13184  01044E  0100               	movlb	0	; () banked
 13185  010450  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13186  010452  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13187  010454  2EE8               	decfsz	wreg,f,c
 13188  010456  D7FA               	goto	u7635
 13189  010458  0100               	movlb	0	; () banked
 13190  01045A  51D8               	movf	Port_Set@Type& (0+255),w,b
 13191  01045C  0100               	movlb	0	; () banked
 13192  01045E  6FC6               	movwf	(??_Port_Set+2)& (0+255),b
 13193  010460  6BC7               	clrf	(??_Port_Set+3)& (0+255),b
 13194  010462  0E0C               	movlw	12
 13195  010464                     u7645:
 13196  010464  90D8               	bcf	status,0,c
 13197  010466  0100               	movlb	0	; () banked
 13198  010468  37C6               	rlcf	(??_Port_Set+2)& (0+255),f,b
 13199  01046A  37C7               	rlcf	(??_Port_Set+3)& (0+255),f,b
 13200  01046C  2EE8               	decfsz	wreg,f,c
 13201  01046E  D7FA               	goto	u7645
 13202  010470  0100               	movlb	0	; () banked
 13203  010472  51D8               	movf	Port_Set@Type& (0+255),w,b
 13204  010474  0100               	movlb	0	; () banked
 13205  010476  6FC8               	movwf	(??_Port_Set+4)& (0+255),b
 13206  010478  6BC9               	clrf	(??_Port_Set+5)& (0+255),b
 13207  01047A  0E0A               	movlw	10
 13208  01047C                     u7655:
 13209  01047C  90D8               	bcf	status,0,c
 13210  01047E  0100               	movlb	0	; () banked
 13211  010480  37C8               	rlcf	(??_Port_Set+4)& (0+255),f,b
 13212  010482  37C9               	rlcf	(??_Port_Set+5)& (0+255),f,b
 13213  010484  2EE8               	decfsz	wreg,f,c
 13214  010486  D7FA               	goto	u7655
 13215  010488  0100               	movlb	0	; () banked
 13216  01048A  51D8               	movf	Port_Set@Type& (0+255),w,b
 13217  01048C  0100               	movlb	0	; () banked
 13218  01048E  6FCB               	movwf	(??_Port_Set+7)& (0+255),b
 13219  010490  6BCA               	clrf	(??_Port_Set+6)& (0+255),b
 13220  010492  0100               	movlb	0	; () banked
 13221  010494  51D8               	movf	Port_Set@Type& (0+255),w,b
 13222  010496  0100               	movlb	0	; () banked
 13223  010498  6FCC               	movwf	(??_Port_Set+8)& (0+255),b
 13224  01049A  6BCD               	clrf	(??_Port_Set+9)& (0+255),b
 13225  01049C  0E06               	movlw	6
 13226  01049E                     u7665:
 13227  01049E  90D8               	bcf	status,0,c
 13228  0104A0  0100               	movlb	0	; () banked
 13229  0104A2  37CC               	rlcf	(??_Port_Set+8)& (0+255),f,b
 13230  0104A4  37CD               	rlcf	(??_Port_Set+9)& (0+255),f,b
 13231  0104A6  2EE8               	decfsz	wreg,f,c
 13232  0104A8  D7FA               	goto	u7665
 13233  0104AA  0100               	movlb	0	; () banked
 13234  0104AC  51D8               	movf	Port_Set@Type& (0+255),w,b
 13235  0104AE  0100               	movlb	0	; () banked
 13236  0104B0  6FCE               	movwf	(??_Port_Set+10)& (0+255),b
 13237  0104B2  6BCF               	clrf	(??_Port_Set+11)& (0+255),b
 13238  0104B4  0100               	movlb	0	; () banked
 13239  0104B6  3BCE               	swapf	(??_Port_Set+10)& (0+255),f,b
 13240  0104B8  3BCF               	swapf	(??_Port_Set+11)& (0+255),f,b
 13241  0104BA  0EF0               	movlw	240
 13242  0104BC  17CF               	andwf	(??_Port_Set+11)& (0+255),f,b
 13243  0104BE  51CE               	movf	(??_Port_Set+10)& (0+255),w,b
 13244  0104C0  0B0F               	andlw	15
 13245  0104C2  13CF               	iorwf	(??_Port_Set+11)& (0+255),f,b
 13246  0104C4  0EF0               	movlw	240
 13247  0104C6  17CE               	andwf	(??_Port_Set+10)& (0+255),f,b
 13248  0104C8  0100               	movlb	0	; () banked
 13249  0104CA  51D8               	movf	Port_Set@Type& (0+255),w,b
 13250  0104CC  0100               	movlb	0	; () banked
 13251  0104CE  6FD0               	movwf	(??_Port_Set+12)& (0+255),b
 13252  0104D0  6BD1               	clrf	(??_Port_Set+13)& (0+255),b
 13253  0104D2  0100               	movlb	0	; () banked
 13254  0104D4  90D8               	bcf	status,0,c
 13255  0104D6  37D0               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13256  0104D8  37D1               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13257  0104DA  0100               	movlb	0	; () banked
 13258  0104DC  90D8               	bcf	status,0,c
 13259  0104DE  37D0               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13260  0104E0  37D1               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13261  0104E2  0100               	movlb	0	; () banked
 13262  0104E4  51D8               	movf	Port_Set@Type& (0+255),w,b
 13263  0104E6  0100               	movlb	0	; () banked
 13264  0104E8  6FD2               	movwf	(??_Port_Set+14)& (0+255),b
 13265  0104EA  6BD3               	clrf	(??_Port_Set+15)& (0+255),b
 13266  0104EC  0100               	movlb	0	; () banked
 13267  0104EE  51D0               	movf	(??_Port_Set+12)& (0+255),w,b
 13268  0104F0  0100               	movlb	0	; () banked
 13269  0104F2  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13270  0104F4  0100               	movlb	0	; () banked
 13271  0104F6  51D1               	movf	(??_Port_Set+13)& (0+255),w,b
 13272  0104F8  0100               	movlb	0	; () banked
 13273  0104FA  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13274  0104FC  0100               	movlb	0	; () banked
 13275  0104FE  51CE               	movf	(??_Port_Set+10)& (0+255),w,b
 13276  010500  0100               	movlb	0	; () banked
 13277  010502  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13278  010504  0100               	movlb	0	; () banked
 13279  010506  51CF               	movf	(??_Port_Set+11)& (0+255),w,b
 13280  010508  0100               	movlb	0	; () banked
 13281  01050A  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13282  01050C  0100               	movlb	0	; () banked
 13283  01050E  51CC               	movf	(??_Port_Set+8)& (0+255),w,b
 13284  010510  0100               	movlb	0	; () banked
 13285  010512  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13286  010514  0100               	movlb	0	; () banked
 13287  010516  51CD               	movf	(??_Port_Set+9)& (0+255),w,b
 13288  010518  0100               	movlb	0	; () banked
 13289  01051A  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13290  01051C  0100               	movlb	0	; () banked
 13291  01051E  51CA               	movf	(??_Port_Set+6)& (0+255),w,b
 13292  010520  0100               	movlb	0	; () banked
 13293  010522  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13294  010524  0100               	movlb	0	; () banked
 13295  010526  51CB               	movf	(??_Port_Set+7)& (0+255),w,b
 13296  010528  0100               	movlb	0	; () banked
 13297  01052A  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13298  01052C  0100               	movlb	0	; () banked
 13299  01052E  51C8               	movf	(??_Port_Set+4)& (0+255),w,b
 13300  010530  0100               	movlb	0	; () banked
 13301  010532  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13302  010534  0100               	movlb	0	; () banked
 13303  010536  51C9               	movf	(??_Port_Set+5)& (0+255),w,b
 13304  010538  0100               	movlb	0	; () banked
 13305  01053A  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13306  01053C  0100               	movlb	0	; () banked
 13307  01053E  51C6               	movf	(??_Port_Set+2)& (0+255),w,b
 13308  010540  0100               	movlb	0	; () banked
 13309  010542  13D2               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13310  010544  0100               	movlb	0	; () banked
 13311  010546  51C7               	movf	(??_Port_Set+3)& (0+255),w,b
 13312  010548  0100               	movlb	0	; () banked
 13313  01054A  13D3               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13314  01054C  0100               	movlb	0	; () banked
 13315  01054E  51C4               	movf	??_Port_Set& (0+255),w,b
 13316  010550  0100               	movlb	0	; () banked
 13317  010552  11D2               	iorwf	(??_Port_Set+14)& (0+255),w,b
 13318  010554  0100               	movlb	0	; () banked
 13319  010556  6FD4               	movwf	Port_Set@TypeRequired& (0+255),b
 13320  010558  0100               	movlb	0	; () banked
 13321  01055A  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13322  01055C  0100               	movlb	0	; () banked
 13323  01055E  11D3               	iorwf	(??_Port_Set+15)& (0+255),w,b
 13324  010560  0100               	movlb	0	; () banked
 13325  010562  6FD5               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;Port.c: 574: UINT16 TypeActual = Type;
 13329  010564  C0D8  F0D6         	movff	Port_Set@Type,Port_Set@TypeActual
 13330  010568  0100               	movlb	0	; () banked
 13331  01056A  6BD7               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13335  01056C  0E08               	movlw	8
 13336  01056E  0100               	movlb	0	; () banked
 13337  010570  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13338  010572  0100               	movlb	0	; () banked
 13339  010574  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13340  010576  0E00               	movlw	0
 13341  010578  0100               	movlb	0	; () banked
 13342  01057A  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13343  01057C  0100               	movlb	0	; () banked
 13344  01057E  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13345  010580  0E01               	movlw	1
 13346  010582  0100               	movlb	0	; () banked
 13347  010584  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13348  010586  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13349  01058A  0100               	movlb	0	; () banked
 13350  01058C  6FC4               	movwf	??_Port_Set& (0+255),b
 13351  01058E  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13352  010590  0100               	movlb	0	; () banked
 13353  010592  90D8               	bcf	status,0,c
 13354  010594  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13355  010596  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13356  010598  0100               	movlb	0	; () banked
 13357  01059A  90D8               	bcf	status,0,c
 13358  01059C  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13359  01059E  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13360  0105A0  0100               	movlb	0	; () banked
 13361  0105A2  51C4               	movf	??_Port_Set& (0+255),w,b
 13362  0105A4  0100               	movlb	0	; () banked
 13363  0105A6  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13364  0105A8  0100               	movlb	0	; () banked
 13365  0105AA  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13366  0105AC  0100               	movlb	0	; () banked
 13367  0105AE  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13371  0105B0  0E08               	movlw	8
 13372  0105B2  0100               	movlb	0	; () banked
 13373  0105B4  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13374  0105B6  0100               	movlb	0	; () banked
 13375  0105B8  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13376  0105BA  0E00               	movlw	0
 13377  0105BC  0100               	movlb	0	; () banked
 13378  0105BE  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13379  0105C0  0100               	movlb	0	; () banked
 13380  0105C2  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13381  0105C4  0E02               	movlw	2
 13382  0105C6  0100               	movlb	0	; () banked
 13383  0105C8  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13384  0105CA  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13385  0105CE  0100               	movlb	0	; () banked
 13386  0105D0  6FC4               	movwf	??_Port_Set& (0+255),b
 13387  0105D2  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13388  0105D4  0100               	movlb	0	; () banked
 13389  0105D6  3BC4               	swapf	??_Port_Set& (0+255),f,b
 13390  0105D8  3BC5               	swapf	(??_Port_Set+1)& (0+255),f,b
 13391  0105DA  0EF0               	movlw	240
 13392  0105DC  17C5               	andwf	(??_Port_Set+1)& (0+255),f,b
 13393  0105DE  51C4               	movf	??_Port_Set& (0+255),w,b
 13394  0105E0  0B0F               	andlw	15
 13395  0105E2  13C5               	iorwf	(??_Port_Set+1)& (0+255),f,b
 13396  0105E4  0EF0               	movlw	240
 13397  0105E6  17C4               	andwf	??_Port_Set& (0+255),f,b
 13398  0105E8  0100               	movlb	0	; () banked
 13399  0105EA  51C4               	movf	??_Port_Set& (0+255),w,b
 13400  0105EC  0100               	movlb	0	; () banked
 13401  0105EE  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13402  0105F0  0100               	movlb	0	; () banked
 13403  0105F2  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13404  0105F4  0100               	movlb	0	; () banked
 13405  0105F6  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13409  0105F8  0E08               	movlw	8
 13410  0105FA  0100               	movlb	0	; () banked
 13411  0105FC  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13412  0105FE  0100               	movlb	0	; () banked
 13413  010600  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13414  010602  0E00               	movlw	0
 13415  010604  0100               	movlb	0	; () banked
 13416  010606  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13417  010608  0100               	movlb	0	; () banked
 13418  01060A  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13419  01060C  0E03               	movlw	3
 13420  01060E  0100               	movlb	0	; () banked
 13421  010610  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13422  010612  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13423  010616  0100               	movlb	0	; () banked
 13424  010618  6FC4               	movwf	??_Port_Set& (0+255),b
 13425  01061A  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13426  01061C  0E06               	movlw	6
 13427  01061E                     u7675:
 13428  01061E  90D8               	bcf	status,0,c
 13429  010620  0100               	movlb	0	; () banked
 13430  010622  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13431  010624  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13432  010626  2EE8               	decfsz	wreg,f,c
 13433  010628  D7FA               	goto	u7675
 13434  01062A  0100               	movlb	0	; () banked
 13435  01062C  51C4               	movf	??_Port_Set& (0+255),w,b
 13436  01062E  0100               	movlb	0	; () banked
 13437  010630  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13438  010632  0100               	movlb	0	; () banked
 13439  010634  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13440  010636  0100               	movlb	0	; () banked
 13441  010638  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13445  01063A  0E08               	movlw	8
 13446  01063C  0100               	movlb	0	; () banked
 13447  01063E  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13448  010640  0100               	movlb	0	; () banked
 13449  010642  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13450  010644  0E00               	movlw	0
 13451  010646  0100               	movlb	0	; () banked
 13452  010648  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13453  01064A  0100               	movlb	0	; () banked
 13454  01064C  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13455  01064E  0E04               	movlw	4
 13456  010650  0100               	movlb	0	; () banked
 13457  010652  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13458  010654  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13459  010658  0100               	movlb	0	; () banked
 13460  01065A  6FC4               	movwf	??_Port_Set& (0+255),b
 13461  01065C  0100               	movlb	0	; () banked
 13462  01065E  51C4               	movf	??_Port_Set& (0+255),w,b
 13463  010660  0100               	movlb	0	; () banked
 13464  010662  6FC6               	movwf	(??_Port_Set+2)& (0+255),b
 13465  010664  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13466  010666  0100               	movlb	0	; () banked
 13467  010668  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13468  01066A  0100               	movlb	0	; () banked
 13469  01066C  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13470  01066E  0100               	movlb	0	; () banked
 13471  010670  51C6               	movf	(??_Port_Set+2)& (0+255),w,b
 13472  010672  0100               	movlb	0	; () banked
 13473  010674  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13477  010676  0E08               	movlw	8
 13478  010678  0100               	movlb	0	; () banked
 13479  01067A  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13480  01067C  0100               	movlb	0	; () banked
 13481  01067E  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13482  010680  0E00               	movlw	0
 13483  010682  0100               	movlb	0	; () banked
 13484  010684  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13485  010686  0100               	movlb	0	; () banked
 13486  010688  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13487  01068A  0E05               	movlw	5
 13488  01068C  0100               	movlb	0	; () banked
 13489  01068E  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13490  010690  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13491  010694  0100               	movlb	0	; () banked
 13492  010696  6FC4               	movwf	??_Port_Set& (0+255),b
 13493  010698  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13494  01069A  0E0A               	movlw	10
 13495  01069C                     u7685:
 13496  01069C  90D8               	bcf	status,0,c
 13497  01069E  0100               	movlb	0	; () banked
 13498  0106A0  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13499  0106A2  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13500  0106A4  2EE8               	decfsz	wreg,f,c
 13501  0106A6  D7FA               	goto	u7685
 13502  0106A8  0100               	movlb	0	; () banked
 13503  0106AA  51C4               	movf	??_Port_Set& (0+255),w,b
 13504  0106AC  0100               	movlb	0	; () banked
 13505  0106AE  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13506  0106B0  0100               	movlb	0	; () banked
 13507  0106B2  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13508  0106B4  0100               	movlb	0	; () banked
 13509  0106B6  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13513  0106B8  0E08               	movlw	8
 13514  0106BA  0100               	movlb	0	; () banked
 13515  0106BC  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13516  0106BE  0100               	movlb	0	; () banked
 13517  0106C0  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13518  0106C2  0E00               	movlw	0
 13519  0106C4  0100               	movlb	0	; () banked
 13520  0106C6  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13521  0106C8  0100               	movlb	0	; () banked
 13522  0106CA  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13523  0106CC  0E06               	movlw	6
 13524  0106CE  0100               	movlb	0	; () banked
 13525  0106D0  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13526  0106D2  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13527  0106D6  0100               	movlb	0	; () banked
 13528  0106D8  6FC4               	movwf	??_Port_Set& (0+255),b
 13529  0106DA  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13530  0106DC  0E0C               	movlw	12
 13531  0106DE                     u7695:
 13532  0106DE  90D8               	bcf	status,0,c
 13533  0106E0  0100               	movlb	0	; () banked
 13534  0106E2  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13535  0106E4  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13536  0106E6  2EE8               	decfsz	wreg,f,c
 13537  0106E8  D7FA               	goto	u7695
 13538  0106EA  0100               	movlb	0	; () banked
 13539  0106EC  51C4               	movf	??_Port_Set& (0+255),w,b
 13540  0106EE  0100               	movlb	0	; () banked
 13541  0106F0  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13542  0106F2  0100               	movlb	0	; () banked
 13543  0106F4  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13544  0106F6  0100               	movlb	0	; () banked
 13545  0106F8  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13549  0106FA  0E08               	movlw	8
 13550  0106FC  0100               	movlb	0	; () banked
 13551  0106FE  25C1               	addwf	Port_Set@pInput& (0+255),w,b
 13552  010700  0100               	movlb	0	; () banked
 13553  010702  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 13554  010704  0E00               	movlw	0
 13555  010706  0100               	movlb	0	; () banked
 13556  010708  21C2               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13557  01070A  0100               	movlb	0	; () banked
 13558  01070C  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13559  01070E  0E07               	movlw	7
 13560  010710  0100               	movlb	0	; () banked
 13561  010712  6FC0               	movwf	Word_GetPair@pPair& (0+255),b
 13562  010714  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 13563  010718  0100               	movlb	0	; () banked
 13564  01071A  6FC4               	movwf	??_Port_Set& (0+255),b
 13565  01071C  6BC5               	clrf	(??_Port_Set+1)& (0+255),b
 13566  01071E  0E0E               	movlw	14
 13567  010720                     u7705:
 13568  010720  90D8               	bcf	status,0,c
 13569  010722  0100               	movlb	0	; () banked
 13570  010724  37C4               	rlcf	??_Port_Set& (0+255),f,b
 13571  010726  37C5               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13572  010728  2EE8               	decfsz	wreg,f,c
 13573  01072A  D7FA               	goto	u7705
 13574  01072C  0100               	movlb	0	; () banked
 13575  01072E  51C4               	movf	??_Port_Set& (0+255),w,b
 13576  010730  0100               	movlb	0	; () banked
 13577  010732  13D6               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13578  010734  0100               	movlb	0	; () banked
 13579  010736  51C5               	movf	(??_Port_Set+1)& (0+255),w,b
 13580  010738  0100               	movlb	0	; () banked
 13581  01073A  13D7               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13582                           
 13583                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13584  01073C  0100               	movlb	0	; () banked
 13585  01073E  51D6               	movf	Port_Set@TypeActual& (0+255),w,b
 13586  010740  0100               	movlb	0	; () banked
 13587  010742  19D4               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13588  010744  E148               	bnz	l528
 13589  010746  0100               	movlb	0	; () banked
 13590  010748  51D7               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13591  01074A  0100               	movlb	0	; () banked
 13592  01074C  19D5               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13593  01074E  A4D8               	btfss	status,2,c
 13594  010750  0012               	return	
 13595  010752  D032               	goto	l526
 13596  010754                     
 13597                           ; BSR set to: 0
 13598                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 13599                           
 13600                           ; BSR set to: 0
 13601  010754  0100               	movlb	0	; () banked
 13602  010756  EE20 F002          	lfsr	2,2
 13603  01075A  51C1               	movf	Port_Set@pInput& (0+255),w,b
 13604  01075C  26D9               	addwf	fsr2l,f,c
 13605  01075E  51C2               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13606  010760  22DA               	addwfc	fsr2h,f,c
 13607  010762  CFDE F0B2          	movff	postinc2,Byte_SetByte@pInput
 13608  010766  CFDD F0B3          	movff	postdec2,Byte_SetByte@pInput+1
 13609  01076A  C0C3  F0B4         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13610  01076E  EC18  F0A5         	call	_Byte_SetByte	;wreg free
 13611                           
 13612                           ;Port.c: 594: break;
 13613  010772  0012               	return	
 13614  010774                     
 13615                           ;Port.c: 597: pValue = ~pValue;
 13616  010774  0100               	movlb	0	; () banked
 13617  010776  1FC3               	comf	Port_Set@pValue& (0+255),f,b
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 13621  010778  0100               	movlb	0	; () banked
 13622  01077A  EE20 F002          	lfsr	2,2
 13623  01077E  51C1               	movf	Port_Set@pInput& (0+255),w,b
 13624  010780  26D9               	addwf	fsr2l,f,c
 13625  010782  51C2               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13626  010784  22DA               	addwfc	fsr2h,f,c
 13627  010786  CFDE F0B2          	movff	postinc2,Byte_SetByte@pInput
 13628  01078A  CFDD F0B3          	movff	postdec2,Byte_SetByte@pInput+1
 13629  01078E  C0C3  F0B4         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13630  010792  EC18  F0A5         	call	_Byte_SetByte	;wreg free
 13631                           
 13632                           ;Port.c: 599: break;
 13633  010796  0012               	return	
 13634  010798                     
 13635                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 13636  010798  0100               	movlb	0	; () banked
 13637  01079A  EE20 F004          	lfsr	2,4
 13638  01079E  51C1               	movf	Port_Set@pInput& (0+255),w,b
 13639  0107A0  26D9               	addwf	fsr2l,f,c
 13640  0107A2  51C2               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13641  0107A4  22DA               	addwfc	fsr2h,f,c
 13642  0107A6  CFDE F0B2          	movff	postinc2,Byte_SetByte@pInput
 13643  0107AA  CFDD F0B3          	movff	postdec2,Byte_SetByte@pInput+1
 13644  0107AE  C0C3  F0B4         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13645  0107B2  EC18  F0A5         	call	_Byte_SetByte	;wreg free
 13646                           
 13647                           ;Port.c: 606: }
 13648                           
 13649                           ;Port.c: 605: break;
 13650                           
 13651                           ;Port.c: 604: default:
 13652                           
 13653                           ;Port.c: 603: break;
 13654  0107B6  0012               	return	
 13655  0107B8                     l526:
 13656  0107B8  0100               	movlb	0	; () banked
 13657  0107BA  51D8               	movf	Port_Set@Type& (0+255),w,b
 13658                           
 13659                           ; Switch size 1, requested type "space"
 13660                           ; Number of cases is 4, Range of values is 0 to 3
 13661                           ; switch strategies available:
 13662                           ; Name         Instructions Cycles
 13663                           ; simple_byte           13     7 (average)
 13664                           ;	Chosen strategy is simple_byte
 13665  0107BC  0A00               	xorlw	0	; case 0
 13666  0107BE  B4D8               	btfsc	status,2,c
 13667  0107C0  0012               	return	
 13668  0107C2  0A01               	xorlw	1	; case 1
 13669  0107C4  B4D8               	btfsc	status,2,c
 13670  0107C6  D7C6               	goto	l529
 13671  0107C8  0A03               	xorlw	3	; case 2
 13672  0107CA  B4D8               	btfsc	status,2,c
 13673  0107CC  D7D3               	goto	l531
 13674  0107CE  0A01               	xorlw	1	; case 3
 13675  0107D0  A4D8               	btfss	status,2,c
 13676                           
 13677                           ; BSR set to: 0
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;Port.c: 607: }
 13681  0107D2  0012               	return	
 13682  0107D4  D7E1               	goto	l532
 13683  0107D6                     l528:
 13684  0107D6  0012               	return		;funcret
 13685  0107D8                     __end_of_Port_Set:
 13686                           	opt stack 0
 13687                           tosu	equ	0xFFF
 13688                           tosh	equ	0xFFE
 13689                           tosl	equ	0xFFD
 13690                           pclath	equ	0xFFA
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           intcon	equ	0xFF2
 13698                           postinc0	equ	0xFEE
 13699                           plusw0	equ	0xFEB
 13700                           wreg	equ	0xFE8
 13701                           indf1	equ	0xFE7
 13702                           postdec1	equ	0xFE5
 13703                           fsr1h	equ	0xFE2
 13704                           fsr1l	equ	0xFE1
 13705                           indf2	equ	0xFDF
 13706                           postinc2	equ	0xFDE
 13707                           postdec2	equ	0xFDD
 13708                           plusw2	equ	0xFDB
 13709                           fsr2h	equ	0xFDA
 13710                           fsr2l	equ	0xFD9
 13711                           status	equ	0xFD8
 13712                           
 13713 ;; *************** function _Byte_SetByte *****************
 13714 ;; Defined at:
 13715 ;;		line 110 in file "Library/Types.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13718 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 13719 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13720 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13721 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13722 ;;		 -> NULL(0), 
 13723 ;;  pValue          1    2[BANK0 ] unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;		None
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  1    wreg      void 
 13728 ;; Registers used:
 13729 ;;		fsr2l, fsr2h
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;Total ram usage:        3 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    7
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_Port_Set
 13746 ;;		_I2C_Init
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           	psect	text71
 13751  014A30                     __ptext71:
 13752                           	opt stack 0
 13753  014A30                     _Byte_SetByte:
 13754                           	opt stack 19
 13755                           
 13756                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 13757                           
 13758                           ;incstack = 0
 13759  014A30  C0B2  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 13760  014A34  C0B3  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 13761  014A38  C0B4  FFDF         	movff	Byte_SetByte@pValue,indf2
 13762  014A3C  0012               	return		;funcret
 13763  014A3E                     __end_of_Byte_SetByte:
 13764                           	opt stack 0
 13765                           tosu	equ	0xFFF
 13766                           tosh	equ	0xFFE
 13767                           tosl	equ	0xFFD
 13768                           pclath	equ	0xFFA
 13769                           tblptru	equ	0xFF8
 13770                           tblptrh	equ	0xFF7
 13771                           tblptrl	equ	0xFF6
 13772                           tablat	equ	0xFF5
 13773                           prodh	equ	0xFF4
 13774                           prodl	equ	0xFF3
 13775                           intcon	equ	0xFF2
 13776                           postinc0	equ	0xFEE
 13777                           plusw0	equ	0xFEB
 13778                           wreg	equ	0xFE8
 13779                           indf1	equ	0xFE7
 13780                           postdec1	equ	0xFE5
 13781                           fsr1h	equ	0xFE2
 13782                           fsr1l	equ	0xFE1
 13783                           indf2	equ	0xFDF
 13784                           postinc2	equ	0xFDE
 13785                           postdec2	equ	0xFDD
 13786                           plusw2	equ	0xFDB
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function _GetPortTRIS *****************
 13792 ;; Defined at:
 13793 ;;		line 67 in file "Library/Port.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  pInput          1    wreg     enum E6786
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;  pInput          1    2[BANK0 ] enum E6786
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  2    0[BANK0 ] PTR struct Byte
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;Total ram usage:        3 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    7
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_Port_Init
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           	psect	text72
 13822  012F26                     __ptext72:
 13823                           	opt stack 0
 13824  012F26                     _GetPortTRIS:
 13825                           	opt stack 20
 13826                           
 13827                           ;incstack = 0
 13828                           ;GetPortTRIS@pInput stored from wreg
 13829  012F26  0100               	movlb	0	; () banked
 13830  012F28  6FB4               	movwf	GetPortTRIS@pInput& (0+255),b
 13831                           
 13832                           ;Port.c: 69: switch (pInput)
 13833  012F2A  D038               	goto	l363
 13834  012F2C                     
 13835                           ;Port.c: 72: return (BytePtr)&TRISA;
 13836  012F2C  0E92               	movlw	146
 13837  012F2E  0100               	movlb	0	; () banked
 13838  012F30  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13839  012F32  0E0F               	movlw	15
 13840  012F34  0100               	movlb	0	; () banked
 13841  012F36  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13842                           
 13843                           ; BSR set to: 0
 13844  012F38  0012               	return	
 13845  012F3A                     
 13846                           ; BSR set to: 0
 13847                           ;Port.c: 74: return (BytePtr)&TRISB;
 13848                           
 13849                           ; BSR set to: 0
 13850  012F3A  0E93               	movlw	147
 13851  012F3C  0100               	movlb	0	; () banked
 13852  012F3E  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13853  012F40  0E0F               	movlw	15
 13854  012F42  0100               	movlb	0	; () banked
 13855  012F44  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13856                           
 13857                           ; BSR set to: 0
 13858  012F46  0012               	return	
 13859  012F48                     
 13860                           ; BSR set to: 0
 13861                           ;Port.c: 76: return (BytePtr)&TRISC;
 13862                           
 13863                           ; BSR set to: 0
 13864  012F48  0E94               	movlw	148
 13865  012F4A  0100               	movlb	0	; () banked
 13866  012F4C  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13867  012F4E  0E0F               	movlw	15
 13868  012F50  0100               	movlb	0	; () banked
 13869  012F52  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13870                           
 13871                           ; BSR set to: 0
 13872  012F54  0012               	return	
 13873  012F56                     
 13874                           ; BSR set to: 0
 13875                           ;Port.c: 78: return (BytePtr)&TRISD;
 13876                           
 13877                           ; BSR set to: 0
 13878  012F56  0E95               	movlw	149
 13879  012F58  0100               	movlb	0	; () banked
 13880  012F5A  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13881  012F5C  0E0F               	movlw	15
 13882  012F5E  0100               	movlb	0	; () banked
 13883  012F60  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13884                           
 13885                           ; BSR set to: 0
 13886  012F62  0012               	return	
 13887  012F64                     
 13888                           ; BSR set to: 0
 13889                           ;Port.c: 80: return (BytePtr)&TRISE;
 13890                           
 13891                           ; BSR set to: 0
 13892  012F64  0E96               	movlw	150
 13893  012F66  0100               	movlb	0	; () banked
 13894  012F68  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13895  012F6A  0E0F               	movlw	15
 13896  012F6C  0100               	movlb	0	; () banked
 13897  012F6E  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13898                           
 13899                           ; BSR set to: 0
 13900  012F70  0012               	return	
 13901  012F72                     
 13902                           ; BSR set to: 0
 13903                           ;Port.c: 82: return (BytePtr)&TRISF;
 13904                           
 13905                           ; BSR set to: 0
 13906  012F72  0E97               	movlw	151
 13907  012F74  0100               	movlb	0	; () banked
 13908  012F76  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13909  012F78  0E0F               	movlw	15
 13910  012F7A  0100               	movlb	0	; () banked
 13911  012F7C  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13912                           
 13913                           ; BSR set to: 0
 13914  012F7E  0012               	return	
 13915  012F80                     
 13916                           ; BSR set to: 0
 13917                           ;Port.c: 84: return (BytePtr)&TRISG;
 13918                           
 13919                           ; BSR set to: 0
 13920  012F80  0E98               	movlw	152
 13921  012F82  0100               	movlb	0	; () banked
 13922  012F84  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13923  012F86  0E0F               	movlw	15
 13924  012F88  0100               	movlb	0	; () banked
 13925  012F8A  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13926                           
 13927                           ; BSR set to: 0
 13928  012F8C  0012               	return	
 13929  012F8E                     
 13930                           ; BSR set to: 0
 13931                           ;Port.c: 86: return (void*)0;
 13932                           
 13933                           ; BSR set to: 0
 13934  012F8E  0E00               	movlw	0
 13935  012F90  0100               	movlb	0	; () banked
 13936  012F92  6FB2               	movwf	?_GetPortTRIS& (0+255),b
 13937  012F94  0E00               	movlw	0
 13938  012F96  0100               	movlb	0	; () banked
 13939  012F98  6FB3               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;Port.c: 87: }
 13943                           
 13944                           ; BSR set to: 0
 13945  012F9A  0012               	return	
 13946  012F9C                     l363:
 13947                           
 13948                           ; BSR set to: 0
 13949  012F9C  0100               	movlb	0	; () banked
 13950  012F9E  51B4               	movf	GetPortTRIS@pInput& (0+255),w,b
 13951                           
 13952                           ; Switch size 1, requested type "space"
 13953                           ; Number of cases is 7, Range of values is 0 to 6
 13954                           ; switch strategies available:
 13955                           ; Name         Instructions Cycles
 13956                           ; simple_byte           22    12 (average)
 13957                           ;	Chosen strategy is simple_byte
 13958  012FA0  0A00               	xorlw	0	; case 0
 13959  012FA2  B4D8               	btfsc	status,2,c
 13960  012FA4  D7C3               	goto	l364
 13961  012FA6  0A01               	xorlw	1	; case 1
 13962  012FA8  B4D8               	btfsc	status,2,c
 13963  012FAA  D7C7               	goto	l366
 13964  012FAC  0A03               	xorlw	3	; case 2
 13965  012FAE  B4D8               	btfsc	status,2,c
 13966  012FB0  D7CB               	goto	l367
 13967  012FB2  0A01               	xorlw	1	; case 3
 13968  012FB4  B4D8               	btfsc	status,2,c
 13969  012FB6  D7CF               	goto	l368
 13970  012FB8  0A07               	xorlw	7	; case 4
 13971  012FBA  B4D8               	btfsc	status,2,c
 13972  012FBC  D7D3               	goto	l369
 13973  012FBE  0A01               	xorlw	1	; case 5
 13974  012FC0  B4D8               	btfsc	status,2,c
 13975  012FC2  D7D7               	goto	l370
 13976  012FC4  0A03               	xorlw	3	; case 6
 13977  012FC6  B4D8               	btfsc	status,2,c
 13978  012FC8  D7DB               	goto	l371
 13979  012FCA  D7E1               	goto	l372
 13980  012FCC                     __end_of_GetPortTRIS:
 13981                           	opt stack 0
 13982                           tosu	equ	0xFFF
 13983                           tosh	equ	0xFFE
 13984                           tosl	equ	0xFFD
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           postinc0	equ	0xFEE
 13994                           plusw0	equ	0xFEB
 13995                           wreg	equ	0xFE8
 13996                           indf1	equ	0xFE7
 13997                           postdec1	equ	0xFE5
 13998                           fsr1h	equ	0xFE2
 13999                           fsr1l	equ	0xFE1
 14000                           indf2	equ	0xFDF
 14001                           postinc2	equ	0xFDE
 14002                           postdec2	equ	0xFDD
 14003                           plusw2	equ	0xFDB
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _GetPortProperties *****************
 14009 ;; Defined at:
 14010 ;;		line 21 in file "Library/Port.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;  pInput          1    wreg     enum E6786
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  pInput          1    2[BANK0 ] enum E6786
 14015 ;; Return value:  Size  Location     Type
 14016 ;;                  2    0[BANK0 ] PTR struct PortProperty
 14017 ;; Registers used:
 14018 ;;		wreg, status,2, status,0
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;Total ram usage:        3 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    7
 14031 ;; This function calls:
 14032 ;;		Nothing
 14033 ;; This function is called by:
 14034 ;;		_Port_Init
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           	psect	text73
 14039  012FCC                     __ptext73:
 14040                           	opt stack 0
 14041  012FCC                     _GetPortProperties:
 14042                           	opt stack 20
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;incstack = 0
 14046                           ;GetPortProperties@pInput stored from wreg
 14047  012FCC  0100               	movlb	0	; () banked
 14048  012FCE  6FB4               	movwf	GetPortProperties@pInput& (0+255),b
 14049                           
 14050                           ;Port.c: 23: switch (pInput)
 14051  012FD0  D038               	goto	l337
 14052  012FD2                     
 14053                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 14054  012FD2  0E73               	movlw	low _PortA_Property
 14055  012FD4  0100               	movlb	0	; () banked
 14056  012FD6  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14057  012FD8  0EFF               	movlw	high _PortA_Property
 14058  012FDA  0100               	movlb	0	; () banked
 14059  012FDC  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14060                           
 14061                           ; BSR set to: 0
 14062  012FDE  0012               	return	
 14063  012FE0                     
 14064                           ; BSR set to: 0
 14065                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 14066                           
 14067                           ; BSR set to: 0
 14068  012FE0  0E71               	movlw	low _PortB_Property
 14069  012FE2  0100               	movlb	0	; () banked
 14070  012FE4  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14071  012FE6  0EFF               	movlw	high _PortB_Property
 14072  012FE8  0100               	movlb	0	; () banked
 14073  012FEA  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14074                           
 14075                           ; BSR set to: 0
 14076  012FEC  0012               	return	
 14077  012FEE                     
 14078                           ; BSR set to: 0
 14079                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 14080                           
 14081                           ; BSR set to: 0
 14082  012FEE  0E6F               	movlw	low _PortC_Property
 14083  012FF0  0100               	movlb	0	; () banked
 14084  012FF2  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14085  012FF4  0EFF               	movlw	high _PortC_Property
 14086  012FF6  0100               	movlb	0	; () banked
 14087  012FF8  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14088                           
 14089                           ; BSR set to: 0
 14090  012FFA  0012               	return	
 14091  012FFC                     
 14092                           ; BSR set to: 0
 14093                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 14094                           
 14095                           ; BSR set to: 0
 14096  012FFC  0E6D               	movlw	low _PortD_Property
 14097  012FFE  0100               	movlb	0	; () banked
 14098  013000  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14099  013002  0EFF               	movlw	high _PortD_Property
 14100  013004  0100               	movlb	0	; () banked
 14101  013006  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14102                           
 14103                           ; BSR set to: 0
 14104  013008  0012               	return	
 14105  01300A                     
 14106                           ; BSR set to: 0
 14107                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 14108                           
 14109                           ; BSR set to: 0
 14110  01300A  0E6B               	movlw	low _PortE_Property
 14111  01300C  0100               	movlb	0	; () banked
 14112  01300E  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14113  013010  0EFF               	movlw	high _PortE_Property
 14114  013012  0100               	movlb	0	; () banked
 14115  013014  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14116                           
 14117                           ; BSR set to: 0
 14118  013016  0012               	return	
 14119  013018                     
 14120                           ; BSR set to: 0
 14121                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 14122                           
 14123                           ; BSR set to: 0
 14124  013018  0E69               	movlw	low _PortF_Property
 14125  01301A  0100               	movlb	0	; () banked
 14126  01301C  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14127  01301E  0EFF               	movlw	high _PortF_Property
 14128  013020  0100               	movlb	0	; () banked
 14129  013022  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14130                           
 14131                           ; BSR set to: 0
 14132  013024  0012               	return	
 14133  013026                     
 14134                           ; BSR set to: 0
 14135                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 14136                           
 14137                           ; BSR set to: 0
 14138  013026  0E67               	movlw	low _PortG_Property
 14139  013028  0100               	movlb	0	; () banked
 14140  01302A  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14141  01302C  0EFF               	movlw	high _PortG_Property
 14142  01302E  0100               	movlb	0	; () banked
 14143  013030  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14144                           
 14145                           ; BSR set to: 0
 14146  013032  0012               	return	
 14147  013034                     
 14148                           ; BSR set to: 0
 14149                           ;Port.c: 40: return (void*)0;
 14150                           
 14151                           ; BSR set to: 0
 14152  013034  0E00               	movlw	0
 14153  013036  0100               	movlb	0	; () banked
 14154  013038  6FB2               	movwf	?_GetPortProperties& (0+255),b
 14155  01303A  0E00               	movlw	0
 14156  01303C  0100               	movlb	0	; () banked
 14157  01303E  6FB3               	movwf	(?_GetPortProperties+1)& (0+255),b
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;Port.c: 41: }
 14161                           
 14162                           ; BSR set to: 0
 14163  013040  0012               	return	
 14164  013042                     l337:
 14165                           
 14166                           ; BSR set to: 0
 14167  013042  0100               	movlb	0	; () banked
 14168  013044  51B4               	movf	GetPortProperties@pInput& (0+255),w,b
 14169                           
 14170                           ; Switch size 1, requested type "space"
 14171                           ; Number of cases is 7, Range of values is 0 to 6
 14172                           ; switch strategies available:
 14173                           ; Name         Instructions Cycles
 14174                           ; simple_byte           22    12 (average)
 14175                           ;	Chosen strategy is simple_byte
 14176  013046  0A00               	xorlw	0	; case 0
 14177  013048  B4D8               	btfsc	status,2,c
 14178  01304A  D7C3               	goto	l338
 14179  01304C  0A01               	xorlw	1	; case 1
 14180  01304E  B4D8               	btfsc	status,2,c
 14181  013050  D7C7               	goto	l340
 14182  013052  0A03               	xorlw	3	; case 2
 14183  013054  B4D8               	btfsc	status,2,c
 14184  013056  D7CB               	goto	l341
 14185  013058  0A01               	xorlw	1	; case 3
 14186  01305A  B4D8               	btfsc	status,2,c
 14187  01305C  D7CF               	goto	l342
 14188  01305E  0A07               	xorlw	7	; case 4
 14189  013060  B4D8               	btfsc	status,2,c
 14190  013062  D7D3               	goto	l343
 14191  013064  0A01               	xorlw	1	; case 5
 14192  013066  B4D8               	btfsc	status,2,c
 14193  013068  D7D7               	goto	l344
 14194  01306A  0A03               	xorlw	3	; case 6
 14195  01306C  B4D8               	btfsc	status,2,c
 14196  01306E  D7DB               	goto	l345
 14197  013070  D7E1               	goto	l346
 14198  013072                     __end_of_GetPortProperties:
 14199                           	opt stack 0
 14200                           tosu	equ	0xFFF
 14201                           tosh	equ	0xFFE
 14202                           tosl	equ	0xFFD
 14203                           pclath	equ	0xFFA
 14204                           tblptru	equ	0xFF8
 14205                           tblptrh	equ	0xFF7
 14206                           tblptrl	equ	0xFF6
 14207                           tablat	equ	0xFF5
 14208                           prodh	equ	0xFF4
 14209                           prodl	equ	0xFF3
 14210                           intcon	equ	0xFF2
 14211                           postinc0	equ	0xFEE
 14212                           plusw0	equ	0xFEB
 14213                           wreg	equ	0xFE8
 14214                           indf1	equ	0xFE7
 14215                           postdec1	equ	0xFE5
 14216                           fsr1h	equ	0xFE2
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           plusw2	equ	0xFDB
 14222                           fsr2h	equ	0xFDA
 14223                           fsr2l	equ	0xFD9
 14224                           status	equ	0xFD8
 14225                           
 14226 ;; *************** function _GetPortPORT *****************
 14227 ;; Defined at:
 14228 ;;		line 44 in file "Library/Port.c"
 14229 ;; Parameters:    Size  Location     Type
 14230 ;;  pInput          1    wreg     enum E6786
 14231 ;; Auto vars:     Size  Location     Type
 14232 ;;  pInput          1    2[BANK0 ] enum E6786
 14233 ;; Return value:  Size  Location     Type
 14234 ;;                  2    0[BANK0 ] PTR struct Byte
 14235 ;; Registers used:
 14236 ;;		wreg, status,2, status,0
 14237 ;; Tracked objects:
 14238 ;;		On entry : 0/0
 14239 ;;		On exit  : 0/0
 14240 ;;		Unchanged: 0/0
 14241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14246 ;;Total ram usage:        3 bytes
 14247 ;; Hardware stack levels used:    1
 14248 ;; Hardware stack levels required when called:    7
 14249 ;; This function calls:
 14250 ;;		Nothing
 14251 ;; This function is called by:
 14252 ;;		_Port_Init
 14253 ;; This function uses a non-reentrant model
 14254 ;;
 14255                           
 14256                           	psect	text74
 14257  013072                     __ptext74:
 14258                           	opt stack 0
 14259  013072                     _GetPortPORT:
 14260                           	opt stack 20
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;incstack = 0
 14264                           ;GetPortPORT@pInput stored from wreg
 14265  013072  0100               	movlb	0	; () banked
 14266  013074  6FB4               	movwf	GetPortPORT@pInput& (0+255),b
 14267                           
 14268                           ;Port.c: 46: switch (pInput)
 14269  013076  D038               	goto	l350
 14270  013078                     
 14271                           ;Port.c: 49: return (BytePtr)&PORTA;
 14272  013078  0E80               	movlw	128
 14273  01307A  0100               	movlb	0	; () banked
 14274  01307C  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14275  01307E  0E0F               	movlw	15
 14276  013080  0100               	movlb	0	; () banked
 14277  013082  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14278                           
 14279                           ; BSR set to: 0
 14280  013084  0012               	return	
 14281  013086                     
 14282                           ; BSR set to: 0
 14283                           ;Port.c: 51: return (BytePtr)&PORTB;
 14284                           
 14285                           ; BSR set to: 0
 14286  013086  0E81               	movlw	129
 14287  013088  0100               	movlb	0	; () banked
 14288  01308A  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14289  01308C  0E0F               	movlw	15
 14290  01308E  0100               	movlb	0	; () banked
 14291  013090  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14292                           
 14293                           ; BSR set to: 0
 14294  013092  0012               	return	
 14295  013094                     
 14296                           ; BSR set to: 0
 14297                           ;Port.c: 53: return (BytePtr)&PORTC;
 14298                           
 14299                           ; BSR set to: 0
 14300  013094  0E82               	movlw	130
 14301  013096  0100               	movlb	0	; () banked
 14302  013098  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14303  01309A  0E0F               	movlw	15
 14304  01309C  0100               	movlb	0	; () banked
 14305  01309E  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14306                           
 14307                           ; BSR set to: 0
 14308  0130A0  0012               	return	
 14309  0130A2                     
 14310                           ; BSR set to: 0
 14311                           ;Port.c: 55: return (BytePtr)&PORTD;
 14312                           
 14313                           ; BSR set to: 0
 14314  0130A2  0E83               	movlw	131
 14315  0130A4  0100               	movlb	0	; () banked
 14316  0130A6  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14317  0130A8  0E0F               	movlw	15
 14318  0130AA  0100               	movlb	0	; () banked
 14319  0130AC  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14320                           
 14321                           ; BSR set to: 0
 14322  0130AE  0012               	return	
 14323  0130B0                     
 14324                           ; BSR set to: 0
 14325                           ;Port.c: 57: return (BytePtr)&PORTE;
 14326                           
 14327                           ; BSR set to: 0
 14328  0130B0  0E84               	movlw	132
 14329  0130B2  0100               	movlb	0	; () banked
 14330  0130B4  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14331  0130B6  0E0F               	movlw	15
 14332  0130B8  0100               	movlb	0	; () banked
 14333  0130BA  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14334                           
 14335                           ; BSR set to: 0
 14336  0130BC  0012               	return	
 14337  0130BE                     
 14338                           ; BSR set to: 0
 14339                           ;Port.c: 59: return (BytePtr)&PORTF;
 14340                           
 14341                           ; BSR set to: 0
 14342  0130BE  0E85               	movlw	133
 14343  0130C0  0100               	movlb	0	; () banked
 14344  0130C2  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14345  0130C4  0E0F               	movlw	15
 14346  0130C6  0100               	movlb	0	; () banked
 14347  0130C8  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14348                           
 14349                           ; BSR set to: 0
 14350  0130CA  0012               	return	
 14351  0130CC                     
 14352                           ; BSR set to: 0
 14353                           ;Port.c: 61: return (BytePtr)&PORTG;
 14354                           
 14355                           ; BSR set to: 0
 14356  0130CC  0E86               	movlw	134
 14357  0130CE  0100               	movlb	0	; () banked
 14358  0130D0  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14359  0130D2  0E0F               	movlw	15
 14360  0130D4  0100               	movlb	0	; () banked
 14361  0130D6  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14362                           
 14363                           ; BSR set to: 0
 14364  0130D8  0012               	return	
 14365  0130DA                     
 14366                           ; BSR set to: 0
 14367                           ;Port.c: 63: return (void*)0;
 14368                           
 14369                           ; BSR set to: 0
 14370  0130DA  0E00               	movlw	0
 14371  0130DC  0100               	movlb	0	; () banked
 14372  0130DE  6FB2               	movwf	?_GetPortPORT& (0+255),b
 14373  0130E0  0E00               	movlw	0
 14374  0130E2  0100               	movlb	0	; () banked
 14375  0130E4  6FB3               	movwf	(?_GetPortPORT+1)& (0+255),b
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;Port.c: 64: }
 14379                           
 14380                           ; BSR set to: 0
 14381  0130E6  0012               	return	
 14382  0130E8                     l350:
 14383                           
 14384                           ; BSR set to: 0
 14385  0130E8  0100               	movlb	0	; () banked
 14386  0130EA  51B4               	movf	GetPortPORT@pInput& (0+255),w,b
 14387                           
 14388                           ; Switch size 1, requested type "space"
 14389                           ; Number of cases is 7, Range of values is 0 to 6
 14390                           ; switch strategies available:
 14391                           ; Name         Instructions Cycles
 14392                           ; simple_byte           22    12 (average)
 14393                           ;	Chosen strategy is simple_byte
 14394  0130EC  0A00               	xorlw	0	; case 0
 14395  0130EE  B4D8               	btfsc	status,2,c
 14396  0130F0  D7C3               	goto	l351
 14397  0130F2  0A01               	xorlw	1	; case 1
 14398  0130F4  B4D8               	btfsc	status,2,c
 14399  0130F6  D7C7               	goto	l353
 14400  0130F8  0A03               	xorlw	3	; case 2
 14401  0130FA  B4D8               	btfsc	status,2,c
 14402  0130FC  D7CB               	goto	l354
 14403  0130FE  0A01               	xorlw	1	; case 3
 14404  013100  B4D8               	btfsc	status,2,c
 14405  013102  D7CF               	goto	l355
 14406  013104  0A07               	xorlw	7	; case 4
 14407  013106  B4D8               	btfsc	status,2,c
 14408  013108  D7D3               	goto	l356
 14409  01310A  0A01               	xorlw	1	; case 5
 14410  01310C  B4D8               	btfsc	status,2,c
 14411  01310E  D7D7               	goto	l357
 14412  013110  0A03               	xorlw	3	; case 6
 14413  013112  B4D8               	btfsc	status,2,c
 14414  013114  D7DB               	goto	l358
 14415  013116  D7E1               	goto	l359
 14416  013118                     __end_of_GetPortPORT:
 14417                           	opt stack 0
 14418                           tosu	equ	0xFFF
 14419                           tosh	equ	0xFFE
 14420                           tosl	equ	0xFFD
 14421                           pclath	equ	0xFFA
 14422                           tblptru	equ	0xFF8
 14423                           tblptrh	equ	0xFF7
 14424                           tblptrl	equ	0xFF6
 14425                           tablat	equ	0xFF5
 14426                           prodh	equ	0xFF4
 14427                           prodl	equ	0xFF3
 14428                           intcon	equ	0xFF2
 14429                           postinc0	equ	0xFEE
 14430                           plusw0	equ	0xFEB
 14431                           wreg	equ	0xFE8
 14432                           indf1	equ	0xFE7
 14433                           postdec1	equ	0xFE5
 14434                           fsr1h	equ	0xFE2
 14435                           fsr1l	equ	0xFE1
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           plusw2	equ	0xFDB
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444 ;; *************** function _LED_Init *****************
 14445 ;; Defined at:
 14446 ;;		line 15 in file "Library/LED.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;  pLED            1    wreg     enum E6739
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  pLED            1   45[BANK0 ] enum E6739
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;Total ram usage:        1 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:   12
 14467 ;; This function calls:
 14468 ;;		_LED_Set
 14469 ;;		_Port_SetPinType
 14470 ;; This function is called by:
 14471 ;;		_MXK_Init
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           	psect	text75
 14476  013CE2                     __ptext75:
 14477                           	opt stack 0
 14478  013CE2                     _LED_Init:
 14479                           	opt stack 16
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;incstack = 0
 14483                           ;LED_Init@pLED stored from wreg
 14484  013CE2  0100               	movlb	0	; () banked
 14485  013CE4  6FDF               	movwf	LED_Init@pLED& (0+255),b
 14486                           
 14487                           ;LED.c: 17: switch (pLED)
 14488  013CE6  D01E               	goto	l220
 14489  013CE8                     
 14490                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14491  013CE8  0E91               	movlw	low _PortC
 14492  013CEA  0100               	movlb	0	; () banked
 14493  013CEC  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 14494  013CEE  0E00               	movlw	high _PortC
 14495  013CF0  0100               	movlb	0	; () banked
 14496  013CF2  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14497  013CF4  0E00               	movlw	0
 14498  013CF6  0100               	movlb	0	; () banked
 14499  013CF8  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 14500  013CFA  0E03               	movlw	3
 14501  013CFC  0100               	movlb	0	; () banked
 14502  013CFE  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 14503  013D00  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 14504                           
 14505                           ;LED.c: 21: break;
 14506  013D04  D017               	goto	l222
 14507  013D06                     
 14508                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14509  013D06  0E91               	movlw	low _PortC
 14510  013D08  0100               	movlb	0	; () banked
 14511  013D0A  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 14512  013D0C  0E00               	movlw	high _PortC
 14513  013D0E  0100               	movlb	0	; () banked
 14514  013D10  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14515  013D12  0E01               	movlw	1
 14516  013D14  0100               	movlb	0	; () banked
 14517  013D16  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 14518  013D18  0E03               	movlw	3
 14519  013D1A  0100               	movlb	0	; () banked
 14520  013D1C  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 14521  013D1E  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 14522                           
 14523                           ;LED.c: 25: }
 14524                           
 14525                           ;LED.c: 24: break;
 14526  013D22  D008               	goto	l222
 14527  013D24                     l220:
 14528  013D24  0100               	movlb	0	; () banked
 14529  013D26  51DF               	movf	LED_Init@pLED& (0+255),w,b
 14530                           
 14531                           ; Switch size 1, requested type "space"
 14532                           ; Number of cases is 2, Range of values is 0 to 1
 14533                           ; switch strategies available:
 14534                           ; Name         Instructions Cycles
 14535                           ; simple_byte            7     4 (average)
 14536                           ;	Chosen strategy is simple_byte
 14537  013D28  0A00               	xorlw	0	; case 0
 14538  013D2A  B4D8               	btfsc	status,2,c
 14539  013D2C  D7DD               	goto	l221
 14540  013D2E  0A01               	xorlw	1	; case 1
 14541  013D30  B4D8               	btfsc	status,2,c
 14542  013D32  D7E9               	goto	l223
 14543  013D34                     l222:
 14544                           
 14545                           ;LED.c: 26: LED_Set(pLED, 0);
 14546                           
 14547                           ; BSR set to: 0
 14548  013D34  0E00               	movlw	0
 14549  013D36  0100               	movlb	0	; () banked
 14550  013D38  6FC6               	movwf	LED_Set@pValue& (0+255),b
 14551  013D3A  0100               	movlb	0	; () banked
 14552  013D3C  51DF               	movf	LED_Init@pLED& (0+255),w,b
 14553  013D3E  ECD5  F09F         	call	_LED_Set
 14554  013D42  0012               	return		;funcret
 14555  013D44                     __end_of_LED_Init:
 14556                           	opt stack 0
 14557                           tosu	equ	0xFFF
 14558                           tosh	equ	0xFFE
 14559                           tosl	equ	0xFFD
 14560                           pclath	equ	0xFFA
 14561                           tblptru	equ	0xFF8
 14562                           tblptrh	equ	0xFF7
 14563                           tblptrl	equ	0xFF6
 14564                           tablat	equ	0xFF5
 14565                           prodh	equ	0xFF4
 14566                           prodl	equ	0xFF3
 14567                           intcon	equ	0xFF2
 14568                           postinc0	equ	0xFEE
 14569                           plusw0	equ	0xFEB
 14570                           wreg	equ	0xFE8
 14571                           indf1	equ	0xFE7
 14572                           postdec1	equ	0xFE5
 14573                           fsr1h	equ	0xFE2
 14574                           fsr1l	equ	0xFE1
 14575                           indf2	equ	0xFDF
 14576                           postinc2	equ	0xFDE
 14577                           postdec2	equ	0xFDD
 14578                           plusw2	equ	0xFDB
 14579                           fsr2h	equ	0xFDA
 14580                           fsr2l	equ	0xFD9
 14581                           status	equ	0xFD8
 14582                           
 14583 ;; *************** function _LED_Set *****************
 14584 ;; Defined at:
 14585 ;;		line 33 in file "Library/LED.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;  pLED            1    wreg     enum E6739
 14588 ;;  pValue          1   20[BANK0 ] unsigned char 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;  pLED            1   21[BANK0 ] enum E6739
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  1    wreg      void 
 14593 ;; Registers used:
 14594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14600 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;Total ram usage:        2 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:   11
 14607 ;; This function calls:
 14608 ;;		_Port_SetPin
 14609 ;; This function is called by:
 14610 ;;		_LED_Init
 14611 ;;		_SYSTEM_Initialize
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           	psect	text76
 14616  013FAA                     __ptext76:
 14617                           	opt stack 0
 14618  013FAA                     _LED_Set:
 14619                           	opt stack 16
 14620                           
 14621                           ;incstack = 0
 14622                           ;LED_Set@pLED stored from wreg
 14623  013FAA  0100               	movlb	0	; () banked
 14624  013FAC  6FC7               	movwf	LED_Set@pLED& (0+255),b
 14625                           
 14626                           ;LED.c: 35: switch (pLED)
 14627  013FAE  D01C               	goto	l227
 14628  013FB0                     
 14629                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 14630  013FB0  0E91               	movlw	low _PortC
 14631  013FB2  0100               	movlb	0	; () banked
 14632  013FB4  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 14633  013FB6  0E00               	movlw	high _PortC
 14634  013FB8  0100               	movlb	0	; () banked
 14635  013FBA  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14636  013FBC  0E00               	movlw	0
 14637  013FBE  0100               	movlb	0	; () banked
 14638  013FC0  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 14639  013FC2  C0C6  F0C4         	movff	LED_Set@pValue,Port_SetPin@pValue
 14640  013FC6  EC5A  F094         	call	_Port_SetPin	;wreg free
 14641                           
 14642                           ;LED.c: 39: break;
 14643  013FCA  0012               	return	
 14644  013FCC                     
 14645                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 14646  013FCC  0E91               	movlw	low _PortC
 14647  013FCE  0100               	movlb	0	; () banked
 14648  013FD0  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 14649  013FD2  0E00               	movlw	high _PortC
 14650  013FD4  0100               	movlb	0	; () banked
 14651  013FD6  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14652  013FD8  0E01               	movlw	1
 14653  013FDA  0100               	movlb	0	; () banked
 14654  013FDC  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 14655  013FDE  C0C6  F0C4         	movff	LED_Set@pValue,Port_SetPin@pValue
 14656  013FE2  EC5A  F094         	call	_Port_SetPin	;wreg free
 14657                           
 14658                           ;LED.c: 43: }
 14659                           
 14660                           ;LED.c: 42: break;
 14661  013FE6  0012               	return	
 14662  013FE8                     l227:
 14663  013FE8  0100               	movlb	0	; () banked
 14664  013FEA  51C7               	movf	LED_Set@pLED& (0+255),w,b
 14665                           
 14666                           ; Switch size 1, requested type "space"
 14667                           ; Number of cases is 2, Range of values is 0 to 1
 14668                           ; switch strategies available:
 14669                           ; Name         Instructions Cycles
 14670                           ; simple_byte            7     4 (average)
 14671                           ;	Chosen strategy is simple_byte
 14672  013FEC  0A00               	xorlw	0	; case 0
 14673  013FEE  B4D8               	btfsc	status,2,c
 14674  013FF0  D7DF               	goto	l228
 14675  013FF2  0A01               	xorlw	1	; case 1
 14676  013FF4  A4D8               	btfss	status,2,c
 14677  013FF6  0012               	return	
 14678  013FF8  D7E9               	goto	l230
 14679  013FFA                     __end_of_LED_Set:
 14680                           	opt stack 0
 14681                           tosu	equ	0xFFF
 14682                           tosh	equ	0xFFE
 14683                           tosl	equ	0xFFD
 14684                           pclath	equ	0xFFA
 14685                           tblptru	equ	0xFF8
 14686                           tblptrh	equ	0xFF7
 14687                           tblptrl	equ	0xFF6
 14688                           tablat	equ	0xFF5
 14689                           prodh	equ	0xFF4
 14690                           prodl	equ	0xFF3
 14691                           intcon	equ	0xFF2
 14692                           postinc0	equ	0xFEE
 14693                           plusw0	equ	0xFEB
 14694                           wreg	equ	0xFE8
 14695                           indf1	equ	0xFE7
 14696                           postdec1	equ	0xFE5
 14697                           fsr1h	equ	0xFE2
 14698                           fsr1l	equ	0xFE1
 14699                           indf2	equ	0xFDF
 14700                           postinc2	equ	0xFDE
 14701                           postdec2	equ	0xFDD
 14702                           plusw2	equ	0xFDB
 14703                           fsr2h	equ	0xFDA
 14704                           fsr2l	equ	0xFD9
 14705                           status	equ	0xFD8
 14706                           
 14707 ;; *************** function _MXK_Dequeue *****************
 14708 ;; Defined at:
 14709 ;;		line 153 in file "Library/MXK.c"
 14710 ;; Parameters:    Size  Location     Type
 14711 ;;		None
 14712 ;; Auto vars:     Size  Location     Type
 14713 ;;		None
 14714 ;; Return value:  Size  Location     Type
 14715 ;;                  1    wreg      void 
 14716 ;; Registers used:
 14717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14718 ;; Tracked objects:
 14719 ;;		On entry : 0/0
 14720 ;;		On exit  : 0/0
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;Total ram usage:        0 bytes
 14728 ;; Hardware stack levels used:    1
 14729 ;; Hardware stack levels required when called:   12
 14730 ;; This function calls:
 14731 ;;		Absolute function
 14732 ;;		_Motor_Step
 14733 ;; This function is called by:
 14734 ;;		_initialise
 14735 ;;		_main
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           	psect	text77
 14740  014302                     __ptext77:
 14741                           	opt stack 0
 14742  014302                     _MXK_Dequeue:
 14743                           	opt stack 17
 14744                           
 14745                           ;MXK.c: 155: if (lQueue)
 14746                           
 14747                           ;incstack = 0
 14748  014302  0100               	movlb	0	; () banked
 14749  014304  5168               	movf	_lQueue& (0+255),w,b	;volatile
 14750  014306  0100               	movlb	0	; () banked
 14751  014308  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 14752  01430A  0100               	movlb	0	; () banked
 14753  01430C  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 14754  01430E  B4D8               	btfsc	status,2,c
 14755  014310  D00D               	goto	u9269
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;MXK.c: 156: lQueue();
 14759  014312  D801               	call	u9268
 14760  014314  D00B               	goto	u9269
 14761  014316                     u9268:
 14762  014316  0005               	push	
 14763  014318  6EFA               	movwf	pclath,c
 14764  01431A  0100               	movlb	0	; () banked
 14765  01431C  5168               	movf	_lQueue& (0+255),w,b	;volatile
 14766  01431E  6EFD               	movwf	tosl,c
 14767  014320  5169               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 14768  014322  6EFE               	movwf	tosh,c
 14769  014324  516A               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 14770  014326  6EFF               	movwf	tosu,c
 14771  014328  50FA               	movf	pclath,w,c
 14772  01432A  0012               	return		;indir
 14773  01432C                     u9269:
 14774                           
 14775                           ;MXK.c: 157: lQueue = 0;
 14776  01432C  0E00               	movlw	0
 14777  01432E  0100               	movlb	0	; () banked
 14778  014330  6F68               	movwf	_lQueue& (0+255),b	;volatile
 14779  014332  0E00               	movlw	0
 14780  014334  0100               	movlb	0	; () banked
 14781  014336  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14782  014338  0E00               	movlw	0
 14783  01433A  0100               	movlb	0	; () banked
 14784  01433C  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14785                           
 14786                           ; BSR set to: 0
 14787  01433E  0012               	return		;funcret
 14788  014340                     __end_of_MXK_Dequeue:
 14789                           	opt stack 0
 14790                           tosu	equ	0xFFF
 14791                           tosh	equ	0xFFE
 14792                           tosl	equ	0xFFD
 14793                           pclath	equ	0xFFA
 14794                           tblptru	equ	0xFF8
 14795                           tblptrh	equ	0xFF7
 14796                           tblptrl	equ	0xFF6
 14797                           tablat	equ	0xFF5
 14798                           prodh	equ	0xFF4
 14799                           prodl	equ	0xFF3
 14800                           intcon	equ	0xFF2
 14801                           postinc0	equ	0xFEE
 14802                           plusw0	equ	0xFEB
 14803                           wreg	equ	0xFE8
 14804                           indf1	equ	0xFE7
 14805                           postdec1	equ	0xFE5
 14806                           fsr1h	equ	0xFE2
 14807                           fsr1l	equ	0xFE1
 14808                           indf2	equ	0xFDF
 14809                           postinc2	equ	0xFDE
 14810                           postdec2	equ	0xFDD
 14811                           plusw2	equ	0xFDB
 14812                           fsr2h	equ	0xFDA
 14813                           fsr2l	equ	0xFD9
 14814                           status	equ	0xFD8
 14815                           
 14816 ;; *************** function _Motor_Step *****************
 14817 ;; Defined at:
 14818 ;;		line 75 in file "Library/Motor.c"
 14819 ;; Parameters:    Size  Location     Type
 14820 ;;		None
 14821 ;; Auto vars:     Size  Location     Type
 14822 ;;		None
 14823 ;; Return value:  Size  Location     Type
 14824 ;;                  1    wreg      void 
 14825 ;; Registers used:
 14826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14827 ;; Tracked objects:
 14828 ;;		On entry : 0/0
 14829 ;;		On exit  : 0/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;Total ram usage:        2 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; Hardware stack levels required when called:   11
 14839 ;; This function calls:
 14840 ;;		_MXK_Queue
 14841 ;;		_MXK_Release
 14842 ;;		_MXK_SwitchTo
 14843 ;;		_Port_SetPin
 14844 ;;		_Timer0_Restart
 14845 ;;		_Timer0_Stop
 14846 ;; This function is called by:
 14847 ;;		_Motor_Init
 14848 ;;		_MXK_Dequeue
 14849 ;;		_Timer0_ISR
 14850 ;; This function uses a non-reentrant model
 14851 ;;
 14852                           
 14853                           	psect	text78
 14854  012342                     __ptext78:
 14855                           	opt stack 0
 14856  012342                     _Motor_Step:
 14857                           	opt stack 0
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;Skip over the trampoline to the duplicate function for level 2
 14861  012342  B251               	btfsc	btemp,1,c
 14862  012344  EF34  F092         	goto	i2_Motor_Step
 14863  012348                     _Motor_Step$intlevel0:
 14864                           	opt stack 17
 14865                           
 14866                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 14867                           
 14868                           ;incstack = 0
 14869  012348  0100               	movlb	0	; () banked
 14870  01234A  EE20 F004          	lfsr	2,4
 14871  01234E  516F               	movf	_lMotor& (0+255),w,b
 14872  012350  26D9               	addwf	fsr2l,f,c
 14873  012352  5170               	movf	(_lMotor+1)& (0+255),w,b
 14874  012354  22DA               	addwfc	fsr2h,f,c
 14875  012356  50DF               	movf	indf2,w,c
 14876  012358  EC20  F0A1         	call	_MXK_SwitchTo
 14877  01235C  0900               	iorlw	0
 14878  01235E  B4D8               	btfsc	status,2,c
 14879  012360  D07A               	goto	l1635
 14880                           
 14881                           ;Motor.c: 78: {
 14882                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 14883  012362  C06F  FFD9         	movff	_lMotor,fsr2l
 14884  012366  C070  FFDA         	movff	_lMotor+1,fsr2h
 14885  01236A  50DE               	movf	postinc2,w,c
 14886  01236C  10DE               	iorwf	postinc2,w,c
 14887  01236E  B4D8               	btfsc	status,2,c
 14888  012370  D06D               	goto	l1636
 14889                           
 14890                           ;Motor.c: 80: {
 14891                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 14892  012372  C06F  FFD9         	movff	_lMotor,fsr2l
 14893  012376  C070  FFDA         	movff	_lMotor+1,fsr2h
 14894  01237A  0E01               	movlw	1
 14895  01237C  BEDB               	btfsc	plusw2,7,c
 14896  01237E  D026               	goto	l1637
 14897  012380  0E01               	movlw	1
 14898  012382  50DB               	movf	plusw2,w,c
 14899  012384  E103               	bnz	u8020
 14900  012386  04DE               	decf	postinc2,w,c
 14901  012388  A0D8               	btfss	status,0,c
 14902  01238A  D020               	goto	l1637
 14903  01238C                     u8020:
 14904                           
 14905                           ;Motor.c: 83: {
 14906                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 14907  01238C  C06F  FFD9         	movff	_lMotor,fsr2l
 14908  012390  C070  FFDA         	movff	_lMotor+1,fsr2h
 14909  012394  28DE               	incf	postinc2,w,c
 14910  012396  E104               	bnz	u8030
 14911  012398  0E7F               	movlw	127
 14912  01239A  18DE               	xorwf	postinc2,w,c
 14913  01239C  B4D8               	btfsc	status,2,c
 14914  01239E  D007               	goto	l1638
 14915  0123A0                     u8030:
 14916                           
 14917                           ;Motor.c: 85: lMotor->mDelta --;
 14918  0123A0  C06F  FFD9         	movff	_lMotor,fsr2l
 14919  0123A4  C070  FFDA         	movff	_lMotor+1,fsr2h
 14920  0123A8  06DE               	decf	postinc2,f,c
 14921  0123AA  0E00               	movlw	0
 14922  0123AC  5ADD               	subwfb	postdec2,f,c
 14923  0123AE                     l1638:
 14924                           
 14925                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 14926  0123AE  0E7D               	movlw	low _PortE
 14927  0123B0  0100               	movlb	0	; () banked
 14928  0123B2  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 14929  0123B4  0E00               	movlw	high _PortE
 14930  0123B6  0100               	movlb	0	; () banked
 14931  0123B8  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14932  0123BA  0E00               	movlw	0
 14933  0123BC  0100               	movlb	0	; () banked
 14934  0123BE  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 14935  0123C0  0E01               	movlw	1
 14936  0123C2  0100               	movlb	0	; () banked
 14937  0123C4  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 14938  0123C6  EC5A  F094         	call	_Port_SetPin	;wreg free
 14939                           
 14940                           ;Motor.c: 88: }
 14941  0123CA  D01F               	goto	l1639
 14942  0123CC                     l1637:
 14943                           
 14944                           ;Motor.c: 89: else
 14945                           ;Motor.c: 90: {
 14946                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 14947  0123CC  C06F  FFD9         	movff	_lMotor,fsr2l
 14948  0123D0  C070  FFDA         	movff	_lMotor+1,fsr2h
 14949  0123D4  04DE               	decf	postinc2,w,c
 14950  0123D6  E104               	bnz	u8040
 14951  0123D8  0E80               	movlw	128
 14952  0123DA  18DE               	xorwf	postinc2,w,c
 14953  0123DC  B4D8               	btfsc	status,2,c
 14954  0123DE  D007               	goto	l1640
 14955  0123E0                     u8040:
 14956                           
 14957                           ;Motor.c: 92: lMotor->mDelta ++;
 14958  0123E0  C06F  FFD9         	movff	_lMotor,fsr2l
 14959  0123E4  C070  FFDA         	movff	_lMotor+1,fsr2h
 14960  0123E8  2ADE               	incf	postinc2,f,c
 14961  0123EA  0E00               	movlw	0
 14962  0123EC  22DD               	addwfc	postdec2,f,c
 14963  0123EE                     l1640:
 14964                           
 14965                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 14966  0123EE  0E7D               	movlw	low _PortE
 14967  0123F0  0100               	movlb	0	; () banked
 14968  0123F2  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 14969  0123F4  0E00               	movlw	high _PortE
 14970  0123F6  0100               	movlb	0	; () banked
 14971  0123F8  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14972  0123FA  0E00               	movlw	0
 14973  0123FC  0100               	movlb	0	; () banked
 14974  0123FE  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 14975  012400  0E00               	movlw	0
 14976  012402  0100               	movlb	0	; () banked
 14977  012404  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 14978  012406  EC5A  F094         	call	_Port_SetPin	;wreg free
 14979  01240A                     l1639:
 14980                           
 14981                           ;Motor.c: 95: }
 14982                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 14983  01240A  0E7D               	movlw	low _PortE
 14984  01240C  0100               	movlb	0	; () banked
 14985  01240E  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 14986  012410  0E00               	movlw	high _PortE
 14987  012412  0100               	movlb	0	; () banked
 14988  012414  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14989  012416  0E01               	movlw	1
 14990  012418  0100               	movlb	0	; () banked
 14991  01241A  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 14992  01241C  0E01               	movlw	1
 14993  01241E  0100               	movlb	0	; () banked
 14994  012420  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 14995  012422  EC5A  F094         	call	_Port_SetPin	;wreg free
 14996                           
 14997                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 14998  012426  0E7D               	movlw	low _PortE
 14999  012428  0100               	movlb	0	; () banked
 15000  01242A  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 15001  01242C  0E00               	movlw	high _PortE
 15002  01242E  0100               	movlb	0	; () banked
 15003  012430  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15004  012432  0E01               	movlw	1
 15005  012434  0100               	movlb	0	; () banked
 15006  012436  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 15007  012438  0E00               	movlw	0
 15008  01243A  0100               	movlb	0	; () banked
 15009  01243C  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 15010  01243E  EC5A  F094         	call	_Port_SetPin	;wreg free
 15011                           
 15012                           ;Motor.c: 101: MXK_Release();
 15013  012442  EC6D  F0A4         	call	_MXK_Release	;wreg free
 15014                           
 15015                           ;Motor.c: 102: Timer0_Restart();
 15016  012446  EC33  F0A5         	call	_Timer0_Restart	;wreg free
 15017                           
 15018                           ;Motor.c: 103: return;
 15019  01244A  0012               	return	
 15020  01244C                     l1636:
 15021                           
 15022                           ;Motor.c: 104: }
 15023                           ;Motor.c: 105: MXK_Release();
 15024  01244C  EC6D  F0A4         	call	_MXK_Release	;wreg free
 15025                           
 15026                           ;Motor.c: 106: Timer0_Stop();
 15027  012450  EC5F  F0A5         	call	_Timer0_Stop	;wreg free
 15028                           
 15029                           ;Motor.c: 107: return;
 15030  012454  0012               	return	
 15031  012456                     l1635:
 15032                           
 15033                           ;Motor.c: 108: }
 15034                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 15035  012456  C02C  F0B2         	movff	_lStepFunction,MXK_Queue@pCallback
 15036  01245A  C02D  F0B3         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 15037  01245E  C02E  F0B4         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 15038  012462  EC1F  F0A5         	call	_MXK_Queue	;wreg free
 15039  012466  0012               	return		;funcret
 15040  012468                     __end_of_Motor_Step:
 15041                           	opt stack 0
 15042                           tosu	equ	0xFFF
 15043                           tosh	equ	0xFFE
 15044                           tosl	equ	0xFFD
 15045                           pclath	equ	0xFFA
 15046                           tblptru	equ	0xFF8
 15047                           tblptrh	equ	0xFF7
 15048                           tblptrl	equ	0xFF6
 15049                           tablat	equ	0xFF5
 15050                           prodh	equ	0xFF4
 15051                           prodl	equ	0xFF3
 15052                           intcon	equ	0xFF2
 15053                           postinc0	equ	0xFEE
 15054                           plusw0	equ	0xFEB
 15055                           wreg	equ	0xFE8
 15056                           indf1	equ	0xFE7
 15057                           postdec1	equ	0xFE5
 15058                           fsr1h	equ	0xFE2
 15059                           fsr1l	equ	0xFE1
 15060                           indf2	equ	0xFDF
 15061                           postinc2	equ	0xFDE
 15062                           postdec2	equ	0xFDD
 15063                           plusw2	equ	0xFDB
 15064                           fsr2h	equ	0xFDA
 15065                           fsr2l	equ	0xFD9
 15066                           status	equ	0xFD8
 15067                           
 15068 ;; *************** function _Timer0_Stop *****************
 15069 ;; Defined at:
 15070 ;;		line 89 in file "Library/Timer0.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;		None
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;		None
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  1    wreg      void 
 15077 ;; Registers used:
 15078 ;;		None
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15088 ;;Total ram usage:        0 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    7
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_Motor_Step
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           	psect	text79
 15099  014ABE                     __ptext79:
 15100                           	opt stack 0
 15101  014ABE                     _Timer0_Stop:
 15102                           	opt stack 20
 15103                           
 15104                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 15105                           
 15106                           ;incstack = 0
 15107  014ABE  9AF2               	bcf	intcon,5,c	;volatile
 15108                           
 15109                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 15110  014AC0  94F2               	bcf	intcon,2,c	;volatile
 15111  014AC2  0012               	return		;funcret
 15112  014AC4                     __end_of_Timer0_Stop:
 15113                           	opt stack 0
 15114                           tosu	equ	0xFFF
 15115                           tosh	equ	0xFFE
 15116                           tosl	equ	0xFFD
 15117                           pclath	equ	0xFFA
 15118                           tblptru	equ	0xFF8
 15119                           tblptrh	equ	0xFF7
 15120                           tblptrl	equ	0xFF6
 15121                           tablat	equ	0xFF5
 15122                           prodh	equ	0xFF4
 15123                           prodl	equ	0xFF3
 15124                           intcon	equ	0xFF2
 15125                           postinc0	equ	0xFEE
 15126                           plusw0	equ	0xFEB
 15127                           wreg	equ	0xFE8
 15128                           indf1	equ	0xFE7
 15129                           postdec1	equ	0xFE5
 15130                           fsr1h	equ	0xFE2
 15131                           fsr1l	equ	0xFE1
 15132                           indf2	equ	0xFDF
 15133                           postinc2	equ	0xFDE
 15134                           postdec2	equ	0xFDD
 15135                           plusw2	equ	0xFDB
 15136                           fsr2h	equ	0xFDA
 15137                           fsr2l	equ	0xFD9
 15138                           status	equ	0xFD8
 15139                           
 15140 ;; *************** function _Timer0_Restart *****************
 15141 ;; Defined at:
 15142 ;;		line 83 in file "Library/Timer0.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;		None
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;		None
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      void 
 15149 ;; Registers used:
 15150 ;;		None
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;Total ram usage:        0 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    7
 15163 ;; This function calls:
 15164 ;;		Nothing
 15165 ;; This function is called by:
 15166 ;;		_Motor_Step
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           	psect	text80
 15171  014A66                     __ptext80:
 15172                           	opt stack 0
 15173  014A66                     _Timer0_Restart:
 15174                           	opt stack 20
 15175                           
 15176                           ;Timer0.c: 85: TMR0 = COUNTER;
 15177                           
 15178                           ;incstack = 0
 15179  014A66  C031  FFD6         	movff	_COUNTER,4054	;volatile
 15180  014A6A  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 15181                           
 15182                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 15183  014A6E  8AF2               	bsf	intcon,5,c	;volatile
 15184  014A70  0012               	return		;funcret
 15185  014A72                     __end_of_Timer0_Restart:
 15186                           	opt stack 0
 15187                           tosu	equ	0xFFF
 15188                           tosh	equ	0xFFE
 15189                           tosl	equ	0xFFD
 15190                           pclath	equ	0xFFA
 15191                           tblptru	equ	0xFF8
 15192                           tblptrh	equ	0xFF7
 15193                           tblptrl	equ	0xFF6
 15194                           tablat	equ	0xFF5
 15195                           prodh	equ	0xFF4
 15196                           prodl	equ	0xFF3
 15197                           intcon	equ	0xFF2
 15198                           postinc0	equ	0xFEE
 15199                           plusw0	equ	0xFEB
 15200                           wreg	equ	0xFE8
 15201                           indf1	equ	0xFE7
 15202                           postdec1	equ	0xFE5
 15203                           fsr1h	equ	0xFE2
 15204                           fsr1l	equ	0xFE1
 15205                           indf2	equ	0xFDF
 15206                           postinc2	equ	0xFDE
 15207                           postdec2	equ	0xFDD
 15208                           plusw2	equ	0xFDB
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213 ;; *************** function _MXK_SwitchTo *****************
 15214 ;; Defined at:
 15215 ;;		line 105 in file "Library/MXK.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;  pModule         1    wreg     enum E6925
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  pModule         1    7[BANK0 ] enum E6925
 15220 ;;  CUR             1    6[BANK0 ] unsigned char 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      unsigned char 
 15223 ;; Registers used:
 15224 ;;		wreg, status,2, status,0, cstack
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;Total ram usage:        2 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    8
 15237 ;; This function calls:
 15238 ;;		_delay_us
 15239 ;; This function is called by:
 15240 ;;		_Motor_Step
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           	psect	text81
 15245  014240                     __ptext81:
 15246                           	opt stack 0
 15247  014240                     _MXK_SwitchTo:
 15248                           	opt stack 19
 15249                           
 15250                           ;incstack = 0
 15251                           ;MXK_SwitchTo@pModule stored from wreg
 15252  014240  0100               	movlb	0	; () banked
 15253  014242  6FB9               	movwf	MXK_SwitchTo@pModule& (0+255),b
 15254                           
 15255                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 15256  014244  5086               	movf	3974,w,c	;volatile
 15257  014246  0B0F               	andlw	15
 15258  014248  0100               	movlb	0	; () banked
 15259  01424A  6FB8               	movwf	MXK_SwitchTo@CUR& (0+255),b
 15260                           
 15261                           ; BSR set to: 0
 15262                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15263  01424C  504B               	movf	_Bus_State,w,c
 15264  01424E  A4D8               	btfss	status,2,c
 15265  014250  D002               	goto	l1738
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;MXK.c: 110: return 0;
 15269  014252  0E00               	movlw	0
 15270                           
 15271                           ; BSR set to: 0
 15272  014254  0012               	return	
 15273  014256                     l1738:
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15277                           
 15278                           ; BSR set to: 0
 15279  014256  0E00               	movlw	0
 15280  014258  6E4B               	movwf	_Bus_State,c
 15281                           
 15282                           ; BSR set to: 0
 15283                           ;MXK.c: 114: if (CUR != pModule)
 15284  01425A  0100               	movlb	0	; () banked
 15285  01425C  51B9               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15286  01425E  0100               	movlb	0	; () banked
 15287  014260  19B8               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15288  014262  B4D8               	btfsc	status,2,c
 15289  014264  D00C               	goto	l1740
 15290                           
 15291                           ; BSR set to: 0
 15292                           ;MXK.c: 115: {
 15293                           ;MXK.c: 116: PORTG &= ~(0xF);
 15294  014266  0EF0               	movlw	240
 15295  014268  1686               	andwf	3974,f,c	;volatile
 15296                           
 15297                           ;MXK.c: 117: PORTG |= pModule;
 15298  01426A  0100               	movlb	0	; () banked
 15299  01426C  51B9               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15300  01426E  1286               	iorwf	3974,f,c	;volatile
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;MXK.c: 120: delay_us(10);
 15304  014270  0E00               	movlw	0
 15305  014272  0100               	movlb	0	; () banked
 15306  014274  6FB3               	movwf	(delay_us@us+1)& (0+255),b
 15307  014276  0E0A               	movlw	10
 15308  014278  6FB2               	movwf	delay_us@us& (0+255),b
 15309  01427A  EC84  F09F         	call	_delay_us	;wreg free
 15310  01427E                     l1740:
 15311                           
 15312                           ;MXK.c: 121: }
 15313                           ;MXK.c: 122: return 1;
 15314  01427E  0E01               	movlw	1
 15315  014280  0012               	return	
 15316  014282                     __end_of_MXK_SwitchTo:
 15317                           	opt stack 0
 15318                           tosu	equ	0xFFF
 15319                           tosh	equ	0xFFE
 15320                           tosl	equ	0xFFD
 15321                           pclath	equ	0xFFA
 15322                           tblptru	equ	0xFF8
 15323                           tblptrh	equ	0xFF7
 15324                           tblptrl	equ	0xFF6
 15325                           tablat	equ	0xFF5
 15326                           prodh	equ	0xFF4
 15327                           prodl	equ	0xFF3
 15328                           intcon	equ	0xFF2
 15329                           postinc0	equ	0xFEE
 15330                           plusw0	equ	0xFEB
 15331                           wreg	equ	0xFE8
 15332                           indf1	equ	0xFE7
 15333                           postdec1	equ	0xFE5
 15334                           fsr1h	equ	0xFE2
 15335                           fsr1l	equ	0xFE1
 15336                           indf2	equ	0xFDF
 15337                           postinc2	equ	0xFDE
 15338                           postdec2	equ	0xFDD
 15339                           plusw2	equ	0xFDB
 15340                           fsr2h	equ	0xFDA
 15341                           fsr2l	equ	0xFD9
 15342                           status	equ	0xFD8
 15343                           
 15344 ;; *************** function _MXK_Release *****************
 15345 ;; Defined at:
 15346 ;;		line 130 in file "Library/MXK.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  1    wreg      unsigned char 
 15353 ;; Registers used:
 15354 ;;		wreg, status,2, status,0
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15364 ;;Total ram usage:        0 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    7
 15367 ;; This function calls:
 15368 ;;		Nothing
 15369 ;; This function is called by:
 15370 ;;		_Motor_Step
 15371 ;;		_initialise
 15372 ;;		_main
 15373 ;; This function uses a non-reentrant model
 15374 ;;
 15375                           
 15376                           	psect	text82
 15377  0148DA                     __ptext82:
 15378                           	opt stack 0
 15379  0148DA                     _MXK_Release:
 15380                           	opt stack 22
 15381                           
 15382                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15383                           
 15384                           ;incstack = 0
 15385  0148DA  0E01               	movlw	1
 15386  0148DC  6E4B               	movwf	_Bus_State,c
 15387                           
 15388                           ;MXK.c: 134: if (lQueue != 0)
 15389  0148DE  0100               	movlb	0	; () banked
 15390  0148E0  5168               	movf	_lQueue& (0+255),w,b	;volatile
 15391  0148E2  0100               	movlb	0	; () banked
 15392  0148E4  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15393  0148E6  0100               	movlb	0	; () banked
 15394  0148E8  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15395  0148EA  B4D8               	btfsc	status,2,c
 15396  0148EC  D002               	goto	l1743
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;MXK.c: 135: return 1;
 15400  0148EE  0E01               	movlw	1
 15401                           
 15402                           ; BSR set to: 0
 15403  0148F0  0012               	return	
 15404  0148F2                     l1743:
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;MXK.c: 137: return 0;
 15408                           
 15409                           ; BSR set to: 0
 15410  0148F2  0E00               	movlw	0
 15411  0148F4  0012               	return	
 15412  0148F6                     __end_of_MXK_Release:
 15413                           	opt stack 0
 15414                           tosu	equ	0xFFF
 15415                           tosh	equ	0xFFE
 15416                           tosl	equ	0xFFD
 15417                           pclath	equ	0xFFA
 15418                           tblptru	equ	0xFF8
 15419                           tblptrh	equ	0xFF7
 15420                           tblptrl	equ	0xFF6
 15421                           tablat	equ	0xFF5
 15422                           prodh	equ	0xFF4
 15423                           prodl	equ	0xFF3
 15424                           intcon	equ	0xFF2
 15425                           postinc0	equ	0xFEE
 15426                           plusw0	equ	0xFEB
 15427                           wreg	equ	0xFE8
 15428                           indf1	equ	0xFE7
 15429                           postdec1	equ	0xFE5
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function _MXK_Queue *****************
 15441 ;; Defined at:
 15442 ;;		line 144 in file "Library/MXK.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15445 ;;		 -> Absolute function(1), Motor_Step(1), 
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;		None
 15448 ;; Return value:  Size  Location     Type
 15449 ;;                  1    wreg      void 
 15450 ;; Registers used:
 15451 ;;		wreg, status,2, status,0
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15457 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15460 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15461 ;;Total ram usage:        3 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    7
 15464 ;; This function calls:
 15465 ;;		Nothing
 15466 ;; This function is called by:
 15467 ;;		_Motor_Step
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           	psect	text83
 15472  014A3E                     __ptext83:
 15473                           	opt stack 0
 15474  014A3E                     _MXK_Queue:
 15475                           	opt stack 20
 15476                           
 15477                           ;MXK.c: 146: lQueue = pCallback;
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;incstack = 0
 15481  014A3E  C0B2  F068         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15482  014A42  C0B3  F069         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15483  014A46  C0B4  F06A         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15484  014A4A  0012               	return		;funcret
 15485  014A4C                     __end_of_MXK_Queue:
 15486                           	opt stack 0
 15487                           tosu	equ	0xFFF
 15488                           tosh	equ	0xFFE
 15489                           tosl	equ	0xFFD
 15490                           pclath	equ	0xFFA
 15491                           tblptru	equ	0xFF8
 15492                           tblptrh	equ	0xFF7
 15493                           tblptrl	equ	0xFF6
 15494                           tablat	equ	0xFF5
 15495                           prodh	equ	0xFF4
 15496                           prodl	equ	0xFF3
 15497                           intcon	equ	0xFF2
 15498                           postinc0	equ	0xFEE
 15499                           plusw0	equ	0xFEB
 15500                           wreg	equ	0xFE8
 15501                           indf1	equ	0xFE7
 15502                           postdec1	equ	0xFE5
 15503                           fsr1h	equ	0xFE2
 15504                           fsr1l	equ	0xFE1
 15505                           indf2	equ	0xFDF
 15506                           postinc2	equ	0xFDE
 15507                           postdec2	equ	0xFDD
 15508                           plusw2	equ	0xFDB
 15509                           fsr2h	equ	0xFDA
 15510                           fsr2l	equ	0xFD9
 15511                           status	equ	0xFD8
 15512                           
 15513 ;; *************** function _MXK_BlockSwitchTo *****************
 15514 ;; Defined at:
 15515 ;;		line 82 in file "Library/MXK.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;  pModule         1    wreg     enum E6925
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  pModule         1    7[BANK0 ] enum E6925
 15520 ;;  CUR             1    6[BANK0 ] unsigned char 
 15521 ;; Return value:  Size  Location     Type
 15522 ;;                  1    wreg      unsigned char 
 15523 ;; Registers used:
 15524 ;;		wreg, status,2, status,0, cstack
 15525 ;; Tracked objects:
 15526 ;;		On entry : 0/0
 15527 ;;		On exit  : 0/0
 15528 ;;		Unchanged: 0/0
 15529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15531 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15534 ;;Total ram usage:        2 bytes
 15535 ;; Hardware stack levels used:    1
 15536 ;; Hardware stack levels required when called:    8
 15537 ;; This function calls:
 15538 ;;		_delay_us
 15539 ;; This function is called by:
 15540 ;;		_initialise
 15541 ;;		_main
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545                           	psect	text84
 15546  014340                     __ptext84:
 15547                           	opt stack 0
 15548  014340                     _MXK_BlockSwitchTo:
 15549                           	opt stack 21
 15550                           
 15551                           ;incstack = 0
 15552                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15553  014340  0100               	movlb	0	; () banked
 15554  014342  6FB9               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15555                           
 15556                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15557  014344  5086               	movf	3974,w,c	;volatile
 15558  014346  0B0F               	andlw	15
 15559  014348  0100               	movlb	0	; () banked
 15560  01434A  6FB8               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15561  01434C                     
 15562                           ; BSR set to: 0
 15563                           
 15564                           ; BSR set to: 0
 15565  01434C  504B               	movf	_Bus_State,w,c
 15566  01434E  B4D8               	btfsc	status,2,c
 15567  014350  D7FD               	goto	l1732
 15568                           
 15569                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15570  014352  0E00               	movlw	0
 15571  014354  6E4B               	movwf	_Bus_State,c
 15572                           
 15573                           ;MXK.c: 90: if (CUR != pModule)
 15574  014356  0100               	movlb	0	; () banked
 15575  014358  51B9               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15576  01435A  0100               	movlb	0	; () banked
 15577  01435C  19B8               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15578  01435E  B4D8               	btfsc	status,2,c
 15579  014360  D00C               	goto	l1734
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;MXK.c: 91: {
 15583                           ;MXK.c: 92: PORTG &= ~(0xF);
 15584  014362  0EF0               	movlw	240
 15585  014364  1686               	andwf	3974,f,c	;volatile
 15586                           
 15587                           ;MXK.c: 93: PORTG |= pModule;
 15588  014366  0100               	movlb	0	; () banked
 15589  014368  51B9               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15590  01436A  1286               	iorwf	3974,f,c	;volatile
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;MXK.c: 96: delay_us(10);
 15594  01436C  0E00               	movlw	0
 15595  01436E  0100               	movlb	0	; () banked
 15596  014370  6FB3               	movwf	(delay_us@us+1)& (0+255),b
 15597  014372  0E0A               	movlw	10
 15598  014374  6FB2               	movwf	delay_us@us& (0+255),b
 15599  014376  EC84  F09F         	call	_delay_us	;wreg free
 15600  01437A                     l1734:
 15601                           
 15602                           ;MXK.c: 97: }
 15603                           ;MXK.c: 98: return 1;
 15604  01437A  0E01               	movlw	1
 15605  01437C  0012               	return	
 15606  01437E                     __end_of_MXK_BlockSwitchTo:
 15607                           	opt stack 0
 15608                           tosu	equ	0xFFF
 15609                           tosh	equ	0xFFE
 15610                           tosl	equ	0xFFD
 15611                           pclath	equ	0xFFA
 15612                           tblptru	equ	0xFF8
 15613                           tblptrh	equ	0xFF7
 15614                           tblptrl	equ	0xFF6
 15615                           tablat	equ	0xFF5
 15616                           prodh	equ	0xFF4
 15617                           prodl	equ	0xFF3
 15618                           intcon	equ	0xFF2
 15619                           postinc0	equ	0xFEE
 15620                           plusw0	equ	0xFEB
 15621                           wreg	equ	0xFE8
 15622                           indf1	equ	0xFE7
 15623                           postdec1	equ	0xFE5
 15624                           fsr1h	equ	0xFE2
 15625                           fsr1l	equ	0xFE1
 15626                           indf2	equ	0xFDF
 15627                           postinc2	equ	0xFDE
 15628                           postdec2	equ	0xFDD
 15629                           plusw2	equ	0xFDB
 15630                           fsr2h	equ	0xFDA
 15631                           fsr2l	equ	0xFD9
 15632                           status	equ	0xFD8
 15633                           
 15634 ;; *************** function _delay_us *****************
 15635 ;; Defined at:
 15636 ;;		line 255 in file "Library/Types.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;  us              2    0[BANK0 ] unsigned short 
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;  u               4    2[BANK0 ] unsigned long 
 15641 ;; Return value:  Size  Location     Type
 15642 ;;                  1    wreg      void 
 15643 ;; Registers used:
 15644 ;;		wreg, status,2, status,0
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15650 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15651 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;Total ram usage:        6 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    7
 15657 ;; This function calls:
 15658 ;;		Nothing
 15659 ;; This function is called by:
 15660 ;;		_MXK_BlockSwitchTo
 15661 ;;		_MXK_SwitchTo
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           	psect	text85
 15666  013F08                     __ptext85:
 15667                           	opt stack 0
 15668  013F08                     _delay_us:
 15669                           	opt stack 19
 15670                           
 15671                           ;Types.c: 256: unsigned long u;
 15672                           ;Types.c: 257: while (us--) {
 15673                           
 15674                           ;incstack = 0
 15675  013F08  D01C               	goto	u7440
 15676  013F0A                     l11000:
 15677                           
 15678                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15679  013F0A  0E00               	movlw	0
 15680  013F0C  0100               	movlb	0	; () banked
 15681  013F0E  6FB4               	movwf	delay_us@u& (0+255),b
 15682  013F10  0E00               	movlw	0
 15683  013F12  6FB5               	movwf	(delay_us@u+1)& (0+255),b
 15684  013F14  0E00               	movlw	0
 15685  013F16  6FB6               	movwf	(delay_us@u+2)& (0+255),b
 15686  013F18  0E00               	movlw	0
 15687  013F1A  6FB7               	movwf	(delay_us@u+3)& (0+255),b
 15688  013F1C                     l11002:
 15689                           
 15690                           ; BSR set to: 0
 15691  013F1C  0100               	movlb	0	; () banked
 15692  013F1E  51B4               	movf	delay_us@u& (0+255),w,b
 15693  013F20  0100               	movlb	0	; () banked
 15694  013F22  11B5               	iorwf	(delay_us@u+1)& (0+255),w,b
 15695  013F24  0100               	movlb	0	; () banked
 15696  013F26  11B6               	iorwf	(delay_us@u+2)& (0+255),w,b
 15697  013F28  0100               	movlb	0	; () banked
 15698  013F2A  11B7               	iorwf	(delay_us@u+3)& (0+255),w,b
 15699  013F2C  A4D8               	btfss	status,2,c
 15700  013F2E  D009               	goto	u7440
 15701                           
 15702                           ; BSR set to: 0
 15703                           
 15704                           ; BSR set to: 0
 15705  013F30  F000               	nop		; ;# 
 15706  013F32  0E01               	movlw	1
 15707  013F34  0100               	movlb	0	; () banked
 15708  013F36  27B4               	addwf	delay_us@u& (0+255),f,b
 15709  013F38  0E00               	movlw	0
 15710  013F3A  23B5               	addwfc	(delay_us@u+1)& (0+255),f,b
 15711  013F3C  23B6               	addwfc	(delay_us@u+2)& (0+255),f,b
 15712  013F3E  23B7               	addwfc	(delay_us@u+3)& (0+255),f,b
 15713  013F40  D7ED               	goto	l11002
 15714  013F42                     u7440:
 15715                           
 15716                           ; BSR set to: 0
 15717                           
 15718                           ; BSR set to: 0
 15719  013F42  0100               	movlb	0	; () banked
 15720  013F44  07B2               	decf	delay_us@us& (0+255),f,b
 15721  013F46  A0D8               	btfss	status,0,c
 15722  013F48  07B3               	decf	(delay_us@us+1)& (0+255),f,b
 15723  013F4A  0100               	movlb	0	; () banked
 15724  013F4C  29B2               	incf	delay_us@us& (0+255),w,b
 15725  013F4E  E1DD               	bnz	l11000
 15726  013F50  0100               	movlb	0	; () banked
 15727  013F52  29B3               	incf	(delay_us@us+1)& (0+255),w,b
 15728  013F54  B4D8               	btfsc	status,2,c
 15729  013F56  0012               	return	
 15730  013F58  D7D8               	goto	l832
 15731  013F5A                     __end_of_delay_us:
 15732                           	opt stack 0
 15733                           tosu	equ	0xFFF
 15734                           tosh	equ	0xFFE
 15735                           tosl	equ	0xFFD
 15736                           pclath	equ	0xFFA
 15737                           tblptru	equ	0xFF8
 15738                           tblptrh	equ	0xFF7
 15739                           tblptrl	equ	0xFF6
 15740                           tablat	equ	0xFF5
 15741                           prodh	equ	0xFF4
 15742                           prodl	equ	0xFF3
 15743                           intcon	equ	0xFF2
 15744                           postinc0	equ	0xFEE
 15745                           plusw0	equ	0xFEB
 15746                           wreg	equ	0xFE8
 15747                           indf1	equ	0xFE7
 15748                           postdec1	equ	0xFE5
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           plusw2	equ	0xFDB
 15755                           fsr2h	equ	0xFDA
 15756                           fsr2l	equ	0xFD9
 15757                           status	equ	0xFD8
 15758                           
 15759 ;; *************** function _LCD_Init *****************
 15760 ;; Defined at:
 15761 ;;		line 172 in file "Library/LCD.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;		None
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;  i               2   55[BANK0 ] unsigned short 
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      void 
 15768 ;; Registers used:
 15769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15779 ;;Total ram usage:        4 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:   15
 15782 ;; This function calls:
 15783 ;;		_Configure_GPIOs
 15784 ;;		_LCD_Fill
 15785 ;;		_LCD_Write
 15786 ;;		_Set_Rotation
 15787 ;;		_delay_ms
 15788 ;; This function is called by:
 15789 ;;		_initialise
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           	psect	text86
 15794  011DAA                     __ptext86:
 15795                           	opt stack 0
 15796  011DAA                     _LCD_Init:
 15797                           	opt stack 14
 15798                           
 15799                           ;LCD.c: 174: UINT16 i;
 15800                           ;LCD.c: 175: Configure_GPIOs();
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;incstack = 0
 15804  011DAA  ECCD  F09C         	call	_Configure_GPIOs	;wreg free
 15805                           
 15806                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 15807  011DAE  0E00               	movlw	0
 15808  011DB0  0100               	movlb	0	; () banked
 15809  011DB2  6FEA               	movwf	(LCD_Init@i+1)& (0+255),b
 15810  011DB4  0E00               	movlw	0
 15811  011DB6  6FE9               	movwf	LCD_Init@i& (0+255),b
 15812                           
 15813                           ; BSR set to: 0
 15814  011DB8  0100               	movlb	0	; () banked
 15815  011DBA  51EA               	movf	(LCD_Init@i+1)& (0+255),w,b
 15816  011DBC  E106               	bnz	u8050
 15817  011DBE  0E59               	movlw	89
 15818  011DC0  0100               	movlb	0	; () banked
 15819  011DC2  5DE9               	subwf	LCD_Init@i& (0+255),w,b
 15820  011DC4  B0D8               	btfsc	status,0,c
 15821  011DC6  D08B               	goto	u8090
 15822  011DC8  D001               	goto	l85
 15823  011DCA                     u8050:
 15824                           
 15825                           ; BSR set to: 0
 15826  011DCA  D089               	goto	u8090
 15827  011DCC                     l85:
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;LCD.c: 178: {
 15831                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 15832                           
 15833                           ; BSR set to: 0
 15834  011DCC  90D8               	bcf	status,0,c
 15835  011DCE  0100               	movlb	0	; () banked
 15836  011DD0  35E9               	rlcf	LCD_Init@i& (0+255),w,b
 15837  011DD2  6EF6               	movwf	tblptrl,c
 15838  011DD4  0100               	movlb	0	; () banked
 15839  011DD6  35EA               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15840  011DD8  6EF7               	movwf	tblptrh,c
 15841  011DDA  0E99               	movlw	low _InitList
 15842  011DDC  26F6               	addwf	tblptrl,f,c
 15843  011DDE  0EFC               	movlw	high _InitList
 15844  011DE0  22F7               	addwfc	tblptrh,f,c
 15845  011DE2                     	if	1	;There are 3 active tblptr bytes
 15846  011DE2  6AF8               	clrf	tblptru,c
 15847  011DE4  0E00               	movlw	low (__mediumconst shr (0+16))
 15848  011DE6  22F8               	addwfc	tblptru,f,c
 15849  011DE8                     	endif
 15850  011DE8  0009               	tblrd		*+
 15851  011DEA  0E80               	movlw	128
 15852  011DEC  18F5               	xorwf	tablat,w,c
 15853  011DEE  0009               	tblrd		*+
 15854  011DF0  10F5               	iorwf	tablat,w,c
 15855  011DF2  A4D8               	btfss	status,2,c
 15856  011DF4  D022               	goto	l87
 15857                           
 15858                           ; BSR set to: 0
 15859  011DF6  0100               	movlb	0	; () banked
 15860  011DF8  51EA               	movf	(LCD_Init@i+1)& (0+255),w,b
 15861  011DFA  E11F               	bnz	l11776
 15862  011DFC  0E58               	movlw	88
 15863  011DFE  0100               	movlb	0	; () banked
 15864  011E00  5DE9               	subwf	LCD_Init@i& (0+255),w,b
 15865  011E02  B0D8               	btfsc	status,0,c
 15866  011E04  D01A               	goto	l87
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;LCD.c: 180: delay_ms(InitList[++i]);
 15870  011E06  0100               	movlb	0	; () banked
 15871  011E08  4BE9               	infsnz	LCD_Init@i& (0+255),f,b
 15872  011E0A  2BEA               	incf	(LCD_Init@i+1)& (0+255),f,b
 15873  011E0C  90D8               	bcf	status,0,c
 15874  011E0E  0100               	movlb	0	; () banked
 15875  011E10  35E9               	rlcf	LCD_Init@i& (0+255),w,b
 15876  011E12  6EF6               	movwf	tblptrl,c
 15877  011E14  0100               	movlb	0	; () banked
 15878  011E16  35EA               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15879  011E18  6EF7               	movwf	tblptrh,c
 15880  011E1A  0E99               	movlw	low _InitList
 15881  011E1C  26F6               	addwf	tblptrl,f,c
 15882  011E1E  0EFC               	movlw	high _InitList
 15883  011E20  22F7               	addwfc	tblptrh,f,c
 15884  011E22                     	if	1	;There are 3 active tblptr bytes
 15885  011E22  6AF8               	clrf	tblptru,c
 15886  011E24  0E00               	movlw	low (__mediumconst shr (0+16))
 15887  011E26  22F8               	addwfc	tblptru,f,c
 15888  011E28                     	endif
 15889  011E28  0009               	tblrd		*+
 15890  011E2A  CFF5 F0B2          	movff	tablat,delay_ms@ms
 15891  011E2E  000A               	tblrd		*-
 15892  011E30  CFF5 F0B3          	movff	tablat,delay_ms@ms+1
 15893  011E34  EC71  F09D         	call	_delay_ms	;wreg free
 15894  011E38  D04B               	goto	l90
 15895  011E3A                     l87:
 15896  011E3A                     l11776:
 15897                           
 15898                           ;LCD.c: 181: else
 15899                           ;LCD.c: 182: {
 15900                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 15901  011E3A  90D8               	bcf	status,0,c
 15902  011E3C  0100               	movlb	0	; () banked
 15903  011E3E  35E9               	rlcf	LCD_Init@i& (0+255),w,b
 15904  011E40  6EF6               	movwf	tblptrl,c
 15905  011E42  0100               	movlb	0	; () banked
 15906  011E44  35EA               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15907  011E46  6EF7               	movwf	tblptrh,c
 15908  011E48  0E99               	movlw	low _InitList
 15909  011E4A  26F6               	addwf	tblptrl,f,c
 15910  011E4C  0EFC               	movlw	high _InitList
 15911  011E4E  22F7               	addwfc	tblptrh,f,c
 15912  011E50                     	if	1	;There are 3 active tblptr bytes
 15913  011E50  6AF8               	clrf	tblptru,c
 15914  011E52  0E00               	movlw	low (__mediumconst shr (0+16))
 15915  011E54  22F8               	addwfc	tblptru,f,c
 15916  011E56                     	endif
 15917  011E56  0009               	tblrd		*+
 15918  011E58  0E00               	movlw	0
 15919  011E5A  5EF5               	subwf	tablat,f,c
 15920  011E5C  0009               	tblrd		*+
 15921  011E5E  0E01               	movlw	1
 15922  011E60  5AF5               	subwfb	tablat,f,c
 15923  011E62  A0D8               	btfss	status,0,c
 15924  011E64  D020               	goto	l89
 15925                           
 15926                           ; BSR set to: 0
 15927  011E66  0E00               	movlw	0
 15928  011E68  0100               	movlb	0	; () banked
 15929  011E6A  6FB5               	movwf	LCD_Write@mode& (0+255),b
 15930  011E6C  90D8               	bcf	status,0,c
 15931  011E6E  0100               	movlb	0	; () banked
 15932  011E70  35E9               	rlcf	LCD_Init@i& (0+255),w,b
 15933  011E72  6EF6               	movwf	tblptrl,c
 15934  011E74  0100               	movlb	0	; () banked
 15935  011E76  35EA               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15936  011E78  6EF7               	movwf	tblptrh,c
 15937  011E7A  0E99               	movlw	low _InitList
 15938  011E7C  26F6               	addwf	tblptrl,f,c
 15939  011E7E  0EFC               	movlw	high _InitList
 15940  011E80  22F7               	addwfc	tblptrh,f,c
 15941  011E82                     	if	1	;There are 3 active tblptr bytes
 15942  011E82  6AF8               	clrf	tblptru,c
 15943  011E84  0E00               	movlw	low (__mediumconst shr (0+16))
 15944  011E86  22F8               	addwfc	tblptru,f,c
 15945  011E88                     	endif
 15946  011E88  0009               	tblrd		*+
 15947  011E8A  CFF5 F0E7          	movff	tablat,??_LCD_Init
 15948  011E8E  0009               	tblrd		*+
 15949  011E90  CFF5 F0E8          	movff	tablat,??_LCD_Init+1
 15950  011E94  C0E8  F0E7         	movff	??_LCD_Init+1,??_LCD_Init
 15951  011E98  0100               	movlb	0	; () banked
 15952  011E9A  6BE8               	clrf	(??_LCD_Init+1)& (0+255),b
 15953  011E9C  0100               	movlb	0	; () banked
 15954  011E9E  51E7               	movf	??_LCD_Init& (0+255),w,b
 15955  011EA0  ECC1  F0A3         	call	_LCD_Write
 15956  011EA4  D015               	goto	l90
 15957  011EA6                     l89:
 15958                           
 15959                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 15960  011EA6  0E01               	movlw	1
 15961  011EA8  0100               	movlb	0	; () banked
 15962  011EAA  6FB5               	movwf	LCD_Write@mode& (0+255),b
 15963  011EAC  90D8               	bcf	status,0,c
 15964  011EAE  0100               	movlb	0	; () banked
 15965  011EB0  35E9               	rlcf	LCD_Init@i& (0+255),w,b
 15966  011EB2  6EF6               	movwf	tblptrl,c
 15967  011EB4  0100               	movlb	0	; () banked
 15968  011EB6  35EA               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15969  011EB8  6EF7               	movwf	tblptrh,c
 15970  011EBA  0E99               	movlw	low _InitList
 15971  011EBC  26F6               	addwf	tblptrl,f,c
 15972  011EBE  0EFC               	movlw	high _InitList
 15973  011EC0  22F7               	addwfc	tblptrh,f,c
 15974  011EC2                     	if	1	;There are 3 active tblptr bytes
 15975  011EC2  6AF8               	clrf	tblptru,c
 15976  011EC4  0E00               	movlw	low (__mediumconst shr (0+16))
 15977  011EC6  22F8               	addwfc	tblptru,f,c
 15978  011EC8                     	endif
 15979  011EC8  0008               	tblrd		*
 15980  011ECA  50F5               	movf	tablat,w,c
 15981  011ECC  ECC1  F0A3         	call	_LCD_Write
 15982  011ED0                     l90:
 15983  011ED0  0100               	movlb	0	; () banked
 15984  011ED2  4BE9               	infsnz	LCD_Init@i& (0+255),f,b
 15985  011ED4  2BEA               	incf	(LCD_Init@i+1)& (0+255),f,b
 15986                           
 15987                           ; BSR set to: 0
 15988  011ED6  0100               	movlb	0	; () banked
 15989  011ED8  51EA               	movf	(LCD_Init@i+1)& (0+255),w,b
 15990  011EDA  E101               	bnz	l11786
 15991  011EDC  D770               	goto	L5
 15992  011EDE                     u8090:
 15993  011EDE                     l11786:
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;LCD.c: 185: }
 15997                           ;LCD.c: 186: }
 15998                           ;LCD.c: 187: delay_ms(100);
 15999  011EDE  0E00               	movlw	0
 16000  011EE0  0100               	movlb	0	; () banked
 16001  011EE2  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 16002  011EE4  0E64               	movlw	100
 16003  011EE6  6FB2               	movwf	delay_ms@ms& (0+255),b
 16004  011EE8  EC71  F09D         	call	_delay_ms	;wreg free
 16005                           
 16006                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 16007  011EEC  0E00               	movlw	0
 16008  011EEE  0100               	movlb	0	; () banked
 16009  011EF0  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16010  011EF2  0E29               	movlw	41
 16011  011EF4  ECC1  F0A3         	call	_LCD_Write
 16012                           
 16013                           ;LCD.c: 189: Set_Rotation(1);
 16014  011EF8  0E01               	movlw	1
 16015  011EFA  ECCC  F099         	call	_Set_Rotation
 16016                           
 16017                           ;LCD.c: 191: delay_ms(100);
 16018  011EFE  0E00               	movlw	0
 16019  011F00  0100               	movlb	0	; () banked
 16020  011F02  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 16021  011F04  0E64               	movlw	100
 16022  011F06  6FB2               	movwf	delay_ms@ms& (0+255),b
 16023  011F08  EC71  F09D         	call	_delay_ms	;wreg free
 16024                           
 16025                           ;LCD.c: 192: LCD_Fill(0x0000);
 16026  011F0C  0E00               	movlw	0
 16027  011F0E  0100               	movlb	0	; () banked
 16028  011F10  6FBC               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 16029  011F12  0E00               	movlw	0
 16030  011F14  6FBB               	movwf	LCD_Fill@pColour& (0+255),b
 16031  011F16  EC58  F09F         	call	_LCD_Fill	;wreg free
 16032  011F1A  0012               	return		;funcret
 16033  011F1C                     __end_of_LCD_Init:
 16034                           	opt stack 0
 16035                           tosu	equ	0xFFF
 16036                           tosh	equ	0xFFE
 16037                           tosl	equ	0xFFD
 16038                           pclath	equ	0xFFA
 16039                           tblptru	equ	0xFF8
 16040                           tblptrh	equ	0xFF7
 16041                           tblptrl	equ	0xFF6
 16042                           tablat	equ	0xFF5
 16043                           prodh	equ	0xFF4
 16044                           prodl	equ	0xFF3
 16045                           intcon	equ	0xFF2
 16046                           postinc0	equ	0xFEE
 16047                           plusw0	equ	0xFEB
 16048                           wreg	equ	0xFE8
 16049                           indf1	equ	0xFE7
 16050                           postdec1	equ	0xFE5
 16051                           fsr1h	equ	0xFE2
 16052                           fsr1l	equ	0xFE1
 16053                           indf2	equ	0xFDF
 16054                           postinc2	equ	0xFDE
 16055                           postdec2	equ	0xFDD
 16056                           plusw2	equ	0xFDB
 16057                           fsr2h	equ	0xFDA
 16058                           fsr2l	equ	0xFD9
 16059                           status	equ	0xFD8
 16060                           
 16061 ;; *************** function _Set_Rotation *****************
 16062 ;; Defined at:
 16063 ;;		line 248 in file "Library/LCD.c"
 16064 ;; Parameters:    Size  Location     Type
 16065 ;;  m               1    wreg     unsigned char 
 16066 ;; Auto vars:     Size  Location     Type
 16067 ;;  m               1    5[BANK0 ] unsigned char 
 16068 ;;  rotation        1    6[BANK0 ] unsigned char 
 16069 ;; Return value:  Size  Location     Type
 16070 ;;                  1    wreg      void 
 16071 ;; Registers used:
 16072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16073 ;; Tracked objects:
 16074 ;;		On entry : 0/0
 16075 ;;		On exit  : 0/0
 16076 ;;		Unchanged: 0/0
 16077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16082 ;;Total ram usage:        2 bytes
 16083 ;; Hardware stack levels used:    1
 16084 ;; Hardware stack levels required when called:    9
 16085 ;; This function calls:
 16086 ;;		_LCD_Write
 16087 ;; This function is called by:
 16088 ;;		_LCD_Init
 16089 ;; This function uses a non-reentrant model
 16090 ;;
 16091                           
 16092                           	psect	text87
 16093  013398                     __ptext87:
 16094                           	opt stack 0
 16095  013398                     _Set_Rotation:
 16096                           	opt stack 19
 16097                           
 16098                           ;incstack = 0
 16099                           ;Set_Rotation@m stored from wreg
 16100  013398  0100               	movlb	0	; () banked
 16101  01339A  6FB7               	movwf	Set_Rotation@m& (0+255),b
 16102                           
 16103                           ;LCD.c: 250: UINT8 rotation = 0x00;
 16104  01339C  0E00               	movlw	0
 16105  01339E  0100               	movlb	0	; () banked
 16106  0133A0  6FB8               	movwf	Set_Rotation@rotation& (0+255),b
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 16110  0133A2  0E00               	movlw	0
 16111  0133A4  0100               	movlb	0	; () banked
 16112  0133A6  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16113  0133A8  0E36               	movlw	54
 16114  0133AA  ECC1  F0A3         	call	_LCD_Write
 16115                           
 16116                           ;LCD.c: 253: rotation = (m % 4);
 16117  0133AE  0100               	movlb	0	; () banked
 16118  0133B0  51B7               	movf	Set_Rotation@m& (0+255),w,b
 16119  0133B2  0B03               	andlw	3
 16120  0133B4  0100               	movlb	0	; () banked
 16121  0133B6  6FB8               	movwf	Set_Rotation@rotation& (0+255),b
 16122                           
 16123                           ;LCD.c: 255: switch(rotation)
 16124  0133B8  D02C               	goto	l117
 16125  0133BA                     
 16126                           ; BSR set to: 0
 16127                           ;LCD.c: 258: {
 16128                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 16129                           
 16130                           ; BSR set to: 0
 16131  0133BA  0E01               	movlw	1
 16132  0133BC  0100               	movlb	0	; () banked
 16133  0133BE  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16134  0133C0  0EC8               	movlw	200
 16135  0133C2  ECC1  F0A3         	call	_LCD_Write
 16136                           
 16137                           ;LCD.c: 260: w = 128;
 16138  0133C6  0E80               	movlw	128
 16139  0133C8  6E50               	movwf	_w,c
 16140                           
 16141                           ;LCD.c: 261: l = 128;
 16142  0133CA  0E80               	movlw	128
 16143  0133CC  6E4F               	movwf	_l,c
 16144                           
 16145                           ;LCD.c: 262: break;
 16146  0133CE  0012               	return	
 16147  0133D0                     
 16148                           ;LCD.c: 265: {
 16149                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 16150  0133D0  0E01               	movlw	1
 16151  0133D2  0100               	movlb	0	; () banked
 16152  0133D4  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16153  0133D6  0EA8               	movlw	168
 16154  0133D8  ECC1  F0A3         	call	_LCD_Write
 16155                           
 16156                           ;LCD.c: 267: w = 128;
 16157  0133DC  0E80               	movlw	128
 16158  0133DE  6E50               	movwf	_w,c
 16159                           
 16160                           ;LCD.c: 268: l = 128;
 16161  0133E0  0E80               	movlw	128
 16162  0133E2  6E4F               	movwf	_l,c
 16163                           
 16164                           ;LCD.c: 269: break;
 16165  0133E4  0012               	return	
 16166  0133E6                     
 16167                           ;LCD.c: 272: {
 16168                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 16169  0133E6  0E01               	movlw	1
 16170  0133E8  0100               	movlb	0	; () banked
 16171  0133EA  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16172  0133EC  0E08               	movlw	8
 16173  0133EE  ECC1  F0A3         	call	_LCD_Write
 16174                           
 16175                           ;LCD.c: 274: w = 128;
 16176  0133F2  0E80               	movlw	128
 16177  0133F4  6E50               	movwf	_w,c
 16178                           
 16179                           ;LCD.c: 275: l = 128;
 16180  0133F6  0E80               	movlw	128
 16181  0133F8  6E4F               	movwf	_l,c
 16182                           
 16183                           ;LCD.c: 276: break;
 16184  0133FA  0012               	return	
 16185  0133FC                     
 16186                           ;LCD.c: 279: {
 16187                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 16188  0133FC  0E01               	movlw	1
 16189  0133FE  0100               	movlb	0	; () banked
 16190  013400  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16191  013402  0E68               	movlw	104
 16192  013404  ECC1  F0A3         	call	_LCD_Write
 16193                           
 16194                           ;LCD.c: 281: w = 128;
 16195  013408  0E80               	movlw	128
 16196  01340A  6E50               	movwf	_w,c
 16197                           
 16198                           ;LCD.c: 282: l = 128;
 16199  01340C  0E80               	movlw	128
 16200  01340E  6E4F               	movwf	_l,c
 16201                           
 16202                           ;LCD.c: 284: }
 16203                           ;LCD.c: 285: }
 16204                           
 16205                           ;LCD.c: 283: break;
 16206  013410  0012               	return	
 16207  013412                     l117:
 16208  013412  0100               	movlb	0	; () banked
 16209  013414  51B8               	movf	Set_Rotation@rotation& (0+255),w,b
 16210                           
 16211                           ; Switch size 1, requested type "space"
 16212                           ; Number of cases is 4, Range of values is 0 to 3
 16213                           ; switch strategies available:
 16214                           ; Name         Instructions Cycles
 16215                           ; simple_byte           13     7 (average)
 16216                           ;	Chosen strategy is simple_byte
 16217  013416  0A00               	xorlw	0	; case 0
 16218  013418  B4D8               	btfsc	status,2,c
 16219  01341A  D7CF               	goto	l118
 16220  01341C  0A01               	xorlw	1	; case 1
 16221  01341E  B4D8               	btfsc	status,2,c
 16222  013420  D7D7               	goto	l120
 16223  013422  0A03               	xorlw	3	; case 2
 16224  013424  B4D8               	btfsc	status,2,c
 16225  013426  D7DF               	goto	l121
 16226  013428  0A01               	xorlw	1	; case 3
 16227  01342A  A4D8               	btfss	status,2,c
 16228  01342C  0012               	return	
 16229  01342E  D7E6               	goto	l122
 16230  013430                     __end_of_Set_Rotation:
 16231                           	opt stack 0
 16232                           tosu	equ	0xFFF
 16233                           tosh	equ	0xFFE
 16234                           tosl	equ	0xFFD
 16235                           pclath	equ	0xFFA
 16236                           tblptru	equ	0xFF8
 16237                           tblptrh	equ	0xFF7
 16238                           tblptrl	equ	0xFF6
 16239                           tablat	equ	0xFF5
 16240                           prodh	equ	0xFF4
 16241                           prodl	equ	0xFF3
 16242                           intcon	equ	0xFF2
 16243                           postinc0	equ	0xFEE
 16244                           plusw0	equ	0xFEB
 16245                           wreg	equ	0xFE8
 16246                           indf1	equ	0xFE7
 16247                           postdec1	equ	0xFE5
 16248                           fsr1h	equ	0xFE2
 16249                           fsr1l	equ	0xFE1
 16250                           indf2	equ	0xFDF
 16251                           postinc2	equ	0xFDE
 16252                           postdec2	equ	0xFDD
 16253                           plusw2	equ	0xFDB
 16254                           fsr2h	equ	0xFDA
 16255                           fsr2l	equ	0xFD9
 16256                           status	equ	0xFD8
 16257                           
 16258 ;; *************** function _LCD_Fill *****************
 16259 ;; Defined at:
 16260 ;;		line 287 in file "Library/LCD.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;  pColour         2    9[BANK0 ] unsigned short 
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;  j               1   12[BANK0 ] unsigned char 
 16265 ;;  i               1   11[BANK0 ] unsigned char 
 16266 ;; Return value:  Size  Location     Type
 16267 ;;                  1    wreg      void 
 16268 ;; Registers used:
 16269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16270 ;; Tracked objects:
 16271 ;;		On entry : 0/0
 16272 ;;		On exit  : 0/0
 16273 ;;		Unchanged: 0/0
 16274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16275 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16278 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;Total ram usage:        4 bytes
 16280 ;; Hardware stack levels used:    1
 16281 ;; Hardware stack levels required when called:   10
 16282 ;; This function calls:
 16283 ;;		_LCD_Word_Write
 16284 ;;		_Set_Addr_Window
 16285 ;; This function is called by:
 16286 ;;		_LCD_Init
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           	psect	text88
 16291  013EB0                     __ptext88:
 16292                           	opt stack 0
 16293  013EB0                     _LCD_Fill:
 16294                           	opt stack 18
 16295                           
 16296                           ;LCD.c: 296: UINT8 i = 0x00;
 16297                           
 16298                           ;incstack = 0
 16299  013EB0  0E00               	movlw	0
 16300  013EB2  0100               	movlb	0	; () banked
 16301  013EB4  6FBD               	movwf	LCD_Fill@i& (0+255),b
 16302                           
 16303                           ;LCD.c: 297: UINT8 j = 0x00;
 16304  013EB6  0E00               	movlw	0
 16305  013EB8  0100               	movlb	0	; () banked
 16306  013EBA  6FBE               	movwf	LCD_Fill@j& (0+255),b
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16310  013EBC  0E00               	movlw	0
 16311  013EBE  0100               	movlb	0	; () banked
 16312  013EC0  6FB7               	movwf	Set_Addr_Window@ys& (0+255),b
 16313  013EC2  0450               	decf	_w,w,c
 16314  013EC4  0100               	movlb	0	; () banked
 16315  013EC6  6FB8               	movwf	Set_Addr_Window@xe& (0+255),b
 16316  013EC8  044F               	decf	_l,w,c
 16317  013ECA  0100               	movlb	0	; () banked
 16318  013ECC  6FB9               	movwf	Set_Addr_Window@ye& (0+255),b
 16319  013ECE  0E00               	movlw	0
 16320  013ED0  ECE9  F096         	call	_Set_Addr_Window
 16321                           
 16322                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16323  013ED4  C04F  F0BE         	movff	_l,LCD_Fill@j
 16324  013ED8                     l11634:
 16325  013ED8  0100               	movlb	0	; () banked
 16326  013EDA  51BE               	movf	LCD_Fill@j& (0+255),w,b
 16327  013EDC  0100               	movlb	0	; () banked
 16328  013EDE  B4D8               	btfsc	status,2,c
 16329  013EE0  0012               	return	
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16333                           
 16334                           ; BSR set to: 0
 16335  013EE2  C050  F0BD         	movff	_w,LCD_Fill@i
 16336  013EE6                     l11638:
 16337                           
 16338                           ; BSR set to: 0
 16339  013EE6  0100               	movlb	0	; () banked
 16340  013EE8  51BD               	movf	LCD_Fill@i& (0+255),w,b
 16341  013EEA  0100               	movlb	0	; () banked
 16342  013EEC  B4D8               	btfsc	status,2,c
 16343  013EEE  D009               	goto	u7950
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16347                           
 16348                           ; BSR set to: 0
 16349                           
 16350                           ; BSR set to: 0
 16351  013EF0  C0BB  F0B7         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16352  013EF4  C0BC  F0B8         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16353  013EF8  EC13  F0A4         	call	_LCD_Word_Write	;wreg free
 16354  013EFC  0100               	movlb	0	; () banked
 16355  013EFE  07BD               	decf	LCD_Fill@i& (0+255),f,b
 16356  013F00  D7F2               	goto	l11638
 16357  013F02                     u7950:
 16358                           
 16359                           ; BSR set to: 0
 16360                           
 16361                           ; BSR set to: 0
 16362  013F02  0100               	movlb	0	; () banked
 16363  013F04  07BE               	decf	LCD_Fill@j& (0+255),f,b
 16364  013F06  D7E8               	goto	l11634
 16365  013F08                     __end_of_LCD_Fill:
 16366                           	opt stack 0
 16367                           tosu	equ	0xFFF
 16368                           tosh	equ	0xFFE
 16369                           tosl	equ	0xFFD
 16370                           pclath	equ	0xFFA
 16371                           tblptru	equ	0xFF8
 16372                           tblptrh	equ	0xFF7
 16373                           tblptrl	equ	0xFF6
 16374                           tablat	equ	0xFF5
 16375                           prodh	equ	0xFF4
 16376                           prodl	equ	0xFF3
 16377                           intcon	equ	0xFF2
 16378                           postinc0	equ	0xFEE
 16379                           plusw0	equ	0xFEB
 16380                           wreg	equ	0xFE8
 16381                           indf1	equ	0xFE7
 16382                           postdec1	equ	0xFE5
 16383                           fsr1h	equ	0xFE2
 16384                           fsr1l	equ	0xFE1
 16385                           indf2	equ	0xFDF
 16386                           postinc2	equ	0xFDE
 16387                           postdec2	equ	0xFDD
 16388                           plusw2	equ	0xFDB
 16389                           fsr2h	equ	0xFDA
 16390                           fsr2l	equ	0xFD9
 16391                           status	equ	0xFD8
 16392                           
 16393 ;; *************** function _Set_Addr_Window *****************
 16394 ;; Defined at:
 16395 ;;		line 214 in file "Library/LCD.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  xs              1    wreg     unsigned char 
 16398 ;;  ys              1    5[BANK0 ] unsigned char 
 16399 ;;  xe              1    6[BANK0 ] unsigned char 
 16400 ;;  ye              1    7[BANK0 ] unsigned char 
 16401 ;; Auto vars:     Size  Location     Type
 16402 ;;  xs              1    8[BANK0 ] unsigned char 
 16403 ;; Return value:  Size  Location     Type
 16404 ;;                  1    wreg      void 
 16405 ;; Registers used:
 16406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16407 ;; Tracked objects:
 16408 ;;		On entry : 0/0
 16409 ;;		On exit  : 0/0
 16410 ;;		Unchanged: 0/0
 16411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16412 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;Total ram usage:        4 bytes
 16417 ;; Hardware stack levels used:    1
 16418 ;; Hardware stack levels required when called:    9
 16419 ;; This function calls:
 16420 ;;		_LCD_Write
 16421 ;; This function is called by:
 16422 ;;		_LCD_Fill
 16423 ;;		_LCD_FillRectangle
 16424 ;;		_LCD_DrawField
 16425 ;;		_RAM_Address_Set
 16426 ;;		_LCD_DrawPixel
 16427 ;; This function uses a non-reentrant model
 16428 ;;
 16429                           
 16430                           	psect	text89
 16431  012DD2                     __ptext89:
 16432                           	opt stack 0
 16433  012DD2                     _Set_Addr_Window:
 16434                           	opt stack 16
 16435                           
 16436                           ; BSR set to: 0
 16437                           ;incstack = 0
 16438                           ;Set_Addr_Window@xs stored from wreg
 16439  012DD2  0100               	movlb	0	; () banked
 16440  012DD4  6FBA               	movwf	Set_Addr_Window@xs& (0+255),b
 16441                           
 16442                           ;LCD.c: 216: ys+=2;
 16443  012DD6  0E02               	movlw	2
 16444  012DD8  0100               	movlb	0	; () banked
 16445  012DDA  27B7               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16446                           
 16447                           ;LCD.c: 217: ye+=2;
 16448  012DDC  0E02               	movlw	2
 16449  012DDE  0100               	movlb	0	; () banked
 16450  012DE0  27B9               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16451                           
 16452                           ;LCD.c: 218: xs+=3;
 16453  012DE2  0E03               	movlw	3
 16454  012DE4  0100               	movlb	0	; () banked
 16455  012DE6  27BA               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16456                           
 16457                           ;LCD.c: 219: xe+=3;
 16458  012DE8  0E03               	movlw	3
 16459  012DEA  0100               	movlb	0	; () banked
 16460  012DEC  27B8               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16464  012DEE  0E00               	movlw	0
 16465  012DF0  0100               	movlb	0	; () banked
 16466  012DF2  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16467  012DF4  0E2A               	movlw	42
 16468  012DF6  ECC1  F0A3         	call	_LCD_Write
 16469                           
 16470                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16471  012DFA  0E01               	movlw	1
 16472  012DFC  0100               	movlb	0	; () banked
 16473  012DFE  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16474  012E00  0E00               	movlw	0
 16475  012E02  ECC1  F0A3         	call	_LCD_Write
 16476                           
 16477                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16478  012E06  0E01               	movlw	1
 16479  012E08  0100               	movlb	0	; () banked
 16480  012E0A  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16481  012E0C  0100               	movlb	0	; () banked
 16482  012E0E  51BA               	movf	Set_Addr_Window@xs& (0+255),w,b
 16483  012E10  ECC1  F0A3         	call	_LCD_Write
 16484                           
 16485                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16486  012E14  0E01               	movlw	1
 16487  012E16  0100               	movlb	0	; () banked
 16488  012E18  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16489  012E1A  0E00               	movlw	0
 16490  012E1C  ECC1  F0A3         	call	_LCD_Write
 16491                           
 16492                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16493  012E20  0E01               	movlw	1
 16494  012E22  0100               	movlb	0	; () banked
 16495  012E24  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16496  012E26  0100               	movlb	0	; () banked
 16497  012E28  51B8               	movf	Set_Addr_Window@xe& (0+255),w,b
 16498  012E2A  ECC1  F0A3         	call	_LCD_Write
 16499                           
 16500                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16501  012E2E  0E00               	movlw	0
 16502  012E30  0100               	movlb	0	; () banked
 16503  012E32  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16504  012E34  0E2B               	movlw	43
 16505  012E36  ECC1  F0A3         	call	_LCD_Write
 16506                           
 16507                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16508  012E3A  0E01               	movlw	1
 16509  012E3C  0100               	movlb	0	; () banked
 16510  012E3E  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16511  012E40  0E00               	movlw	0
 16512  012E42  ECC1  F0A3         	call	_LCD_Write
 16513                           
 16514                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16515  012E46  0E01               	movlw	1
 16516  012E48  0100               	movlb	0	; () banked
 16517  012E4A  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16518  012E4C  0100               	movlb	0	; () banked
 16519  012E4E  51B7               	movf	Set_Addr_Window@ys& (0+255),w,b
 16520  012E50  ECC1  F0A3         	call	_LCD_Write
 16521                           
 16522                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16523  012E54  0E01               	movlw	1
 16524  012E56  0100               	movlb	0	; () banked
 16525  012E58  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16526  012E5A  0E00               	movlw	0
 16527  012E5C  ECC1  F0A3         	call	_LCD_Write
 16528                           
 16529                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16530  012E60  0E01               	movlw	1
 16531  012E62  0100               	movlb	0	; () banked
 16532  012E64  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16533  012E66  0100               	movlb	0	; () banked
 16534  012E68  51B9               	movf	Set_Addr_Window@ye& (0+255),w,b
 16535  012E6A  ECC1  F0A3         	call	_LCD_Write
 16536                           
 16537                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16538  012E6E  0E00               	movlw	0
 16539  012E70  0100               	movlb	0	; () banked
 16540  012E72  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16541  012E74  0E2C               	movlw	44
 16542  012E76  ECC1  F0A3         	call	_LCD_Write
 16543  012E7A  0012               	return		;funcret
 16544  012E7C                     __end_of_Set_Addr_Window:
 16545                           	opt stack 0
 16546                           tosu	equ	0xFFF
 16547                           tosh	equ	0xFFE
 16548                           tosl	equ	0xFFD
 16549                           pclath	equ	0xFFA
 16550                           tblptru	equ	0xFF8
 16551                           tblptrh	equ	0xFF7
 16552                           tblptrl	equ	0xFF6
 16553                           tablat	equ	0xFF5
 16554                           prodh	equ	0xFF4
 16555                           prodl	equ	0xFF3
 16556                           intcon	equ	0xFF2
 16557                           postinc0	equ	0xFEE
 16558                           plusw0	equ	0xFEB
 16559                           wreg	equ	0xFE8
 16560                           indf1	equ	0xFE7
 16561                           postdec1	equ	0xFE5
 16562                           fsr1h	equ	0xFE2
 16563                           fsr1l	equ	0xFE1
 16564                           indf2	equ	0xFDF
 16565                           postinc2	equ	0xFDE
 16566                           postdec2	equ	0xFDD
 16567                           plusw2	equ	0xFDB
 16568                           fsr2h	equ	0xFDA
 16569                           fsr2l	equ	0xFD9
 16570                           status	equ	0xFD8
 16571                           
 16572 ;; *************** function _LCD_Word_Write *****************
 16573 ;; Defined at:
 16574 ;;		line 198 in file "Library/LCD.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;  value           2    5[BANK0 ] unsigned short 
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;		None
 16579 ;; Return value:  Size  Location     Type
 16580 ;;                  1    wreg      void 
 16581 ;; Registers used:
 16582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16588 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16592 ;;Total ram usage:        2 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    9
 16595 ;; This function calls:
 16596 ;;		_LCD_Write
 16597 ;; This function is called by:
 16598 ;;		_LCD_Fill
 16599 ;;		_LCD_FillRectangle
 16600 ;;		_LCD_DrawField
 16601 ;;		_LCD_DrawPixel
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           	psect	text90
 16606  014826                     __ptext90:
 16607                           	opt stack 0
 16608  014826                     _LCD_Word_Write:
 16609                           	opt stack 16
 16610                           
 16611                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16612                           
 16613                           ;incstack = 0
 16614  014826  0E01               	movlw	1
 16615  014828  0100               	movlb	0	; () banked
 16616  01482A  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16617  01482C  0100               	movlb	0	; () banked
 16618  01482E  51B8               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16619  014830  ECC1  F0A3         	call	_LCD_Write
 16620                           
 16621                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16622  014834  0E01               	movlw	1
 16623  014836  0100               	movlb	0	; () banked
 16624  014838  6FB5               	movwf	LCD_Write@mode& (0+255),b
 16625  01483A  0100               	movlb	0	; () banked
 16626  01483C  51B7               	movf	LCD_Word_Write@value& (0+255),w,b
 16627  01483E  ECC1  F0A3         	call	_LCD_Write
 16628  014842  0012               	return		;funcret
 16629  014844                     __end_of_LCD_Word_Write:
 16630                           	opt stack 0
 16631                           tosu	equ	0xFFF
 16632                           tosh	equ	0xFFE
 16633                           tosl	equ	0xFFD
 16634                           pclath	equ	0xFFA
 16635                           tblptru	equ	0xFF8
 16636                           tblptrh	equ	0xFF7
 16637                           tblptrl	equ	0xFF6
 16638                           tablat	equ	0xFF5
 16639                           prodh	equ	0xFF4
 16640                           prodl	equ	0xFF3
 16641                           intcon	equ	0xFF2
 16642                           postinc0	equ	0xFEE
 16643                           plusw0	equ	0xFEB
 16644                           wreg	equ	0xFE8
 16645                           indf1	equ	0xFE7
 16646                           postdec1	equ	0xFE5
 16647                           fsr1h	equ	0xFE2
 16648                           fsr1l	equ	0xFE1
 16649                           indf2	equ	0xFDF
 16650                           postinc2	equ	0xFDE
 16651                           postdec2	equ	0xFDD
 16652                           plusw2	equ	0xFDB
 16653                           fsr2h	equ	0xFDA
 16654                           fsr2l	equ	0xFD9
 16655                           status	equ	0xFD8
 16656                           
 16657 ;; *************** function _LCD_Write *****************
 16658 ;; Defined at:
 16659 ;;		line 67 in file "Library/LCD.c"
 16660 ;; Parameters:    Size  Location     Type
 16661 ;;  value           1    wreg     unsigned char 
 16662 ;;  mode            1    3[BANK0 ] enum E6761
 16663 ;; Auto vars:     Size  Location     Type
 16664 ;;  value           1    4[BANK0 ] unsigned char 
 16665 ;; Return value:  Size  Location     Type
 16666 ;;                  1    wreg      void 
 16667 ;; Registers used:
 16668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16669 ;; Tracked objects:
 16670 ;;		On entry : 0/0
 16671 ;;		On exit  : 0/0
 16672 ;;		Unchanged: 0/0
 16673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16674 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16678 ;;Total ram usage:        2 bytes
 16679 ;; Hardware stack levels used:    1
 16680 ;; Hardware stack levels required when called:    8
 16681 ;; This function calls:
 16682 ;;		_Mode_Set
 16683 ;;		_SPI_Send
 16684 ;; This function is called by:
 16685 ;;		_LCD_Init
 16686 ;;		_LCD_Word_Write
 16687 ;;		_Set_Addr_Window
 16688 ;;		_Set_Rotation
 16689 ;;		_LCD_WriteCMD
 16690 ;;		_LCD_WriteData
 16691 ;;		_LCD_Data_Write
 16692 ;;		_LCD_Data_Write_4k
 16693 ;;		_Invert_Display
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           	psect	text91
 16698  014782                     __ptext91:
 16699                           	opt stack 0
 16700  014782                     _LCD_Write:
 16701                           	opt stack 16
 16702                           
 16703                           ;incstack = 0
 16704                           ;LCD_Write@value stored from wreg
 16705  014782  0100               	movlb	0	; () banked
 16706  014784  6FB6               	movwf	LCD_Write@value& (0+255),b
 16707                           
 16708                           ;LCD.c: 89: Mode_Set(mode);
 16709  014786  0100               	movlb	0	; () banked
 16710  014788  51B5               	movf	LCD_Write@mode& (0+255),w,b
 16711  01478A  EC08  F0A5         	call	_Mode_Set
 16712                           
 16713                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16714  01478E  0E6F               	movlw	low _SPI2
 16715  014790  0100               	movlb	0	; () banked
 16716  014792  6FB2               	movwf	SPI_Send@pInput& (0+255),b
 16717  014794  0E01               	movlw	high _SPI2
 16718  014796  0100               	movlb	0	; () banked
 16719  014798  6FB3               	movwf	(SPI_Send@pInput+1)& (0+255),b
 16720  01479A  C0B6  F0B4         	movff	LCD_Write@value,SPI_Send@pData
 16721  01479E  EC3B  F09D         	call	_SPI_Send	;wreg free
 16722  0147A2  0012               	return		;funcret
 16723  0147A4                     __end_of_LCD_Write:
 16724                           	opt stack 0
 16725                           tosu	equ	0xFFF
 16726                           tosh	equ	0xFFE
 16727                           tosl	equ	0xFFD
 16728                           pclath	equ	0xFFA
 16729                           tblptru	equ	0xFF8
 16730                           tblptrh	equ	0xFF7
 16731                           tblptrl	equ	0xFF6
 16732                           tablat	equ	0xFF5
 16733                           prodh	equ	0xFF4
 16734                           prodl	equ	0xFF3
 16735                           intcon	equ	0xFF2
 16736                           postinc0	equ	0xFEE
 16737                           plusw0	equ	0xFEB
 16738                           wreg	equ	0xFE8
 16739                           indf1	equ	0xFE7
 16740                           postdec1	equ	0xFE5
 16741                           fsr1h	equ	0xFE2
 16742                           fsr1l	equ	0xFE1
 16743                           indf2	equ	0xFDF
 16744                           postinc2	equ	0xFDE
 16745                           postdec2	equ	0xFDD
 16746                           plusw2	equ	0xFDB
 16747                           fsr2h	equ	0xFDA
 16748                           fsr2l	equ	0xFD9
 16749                           status	equ	0xFD8
 16750                           
 16751 ;; *************** function _SPI_Send *****************
 16752 ;; Defined at:
 16753 ;;		line 226 in file "Library/SPI.c"
 16754 ;; Parameters:    Size  Location     Type
 16755 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16756 ;;		 -> SPI1(11), SPI2(11), 
 16757 ;;  pData           1    2[BANK0 ] unsigned char 
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;		None
 16760 ;; Return value:  Size  Location     Type
 16761 ;;                  1    wreg      unsigned char 
 16762 ;; Registers used:
 16763 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16769 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16773 ;;Total ram usage:        3 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; Hardware stack levels required when called:    7
 16776 ;; This function calls:
 16777 ;;		Nothing
 16778 ;; This function is called by:
 16779 ;;		_LCD_Write
 16780 ;;		_OutSeg
 16781 ;; This function uses a non-reentrant model
 16782 ;;
 16783                           
 16784                           	psect	text92
 16785  013A76                     __ptext92:
 16786                           	opt stack 0
 16787  013A76                     _SPI_Send:
 16788                           	opt stack 16
 16789                           
 16790                           ;SPI.c: 253: switch (pInput->mChannel)
 16791                           
 16792                           ;incstack = 0
 16793  013A76  D026               	goto	l678
 16794  013A78                     
 16795                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 16796  013A78  C095  FFD9         	movff	_PortC+4,fsr2l
 16797  013A7C  C096  FFDA         	movff	_PortC+5,fsr2h
 16798  013A80  0100               	movlb	0	; () banked
 16799  013A82  94DF               	bcf	indf2,2,c
 16800                           
 16801                           ; BSR set to: 0
 16802                           ;SPI.c: 257: SSP1BUF = pData;
 16803  013A84  C0B4  FFC9         	movff	SPI_Send@pData,4041	;volatile
 16804  013A88                     
 16805                           ; BSR set to: 0
 16806  013A88  A0C7               	btfss	4039,0,c	;volatile
 16807  013A8A  D7FE               	goto	l681
 16808                           
 16809                           ;SPI.c: 259: pData = SSP1BUF;
 16810  013A8C  CFC9 F0B4          	movff	4041,SPI_Send@pData	;volatile
 16811                           
 16812                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 16813  013A90  C095  FFD9         	movff	_PortC+4,fsr2l
 16814  013A94  C096  FFDA         	movff	_PortC+5,fsr2h
 16815  013A98  0100               	movlb	0	; () banked
 16816  013A9A  84DF               	bsf	indf2,2,c
 16817                           
 16818                           ; BSR set to: 0
 16819                           ;SPI.c: 261: return pData;
 16820                           ;	Return value of _SPI_Send is never used
 16821  013A9C  0012               	return	
 16822  013A9E                     
 16823                           ; BSR set to: 0
 16824                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 16825                           
 16826                           ; BSR set to: 0
 16827  013A9E  C08B  FFD9         	movff	_PortD+4,fsr2l
 16828  013AA2  C08C  FFDA         	movff	_PortD+5,fsr2h
 16829  013AA6  0100               	movlb	0	; () banked
 16830  013AA8  9EDF               	bcf	indf2,7,c
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;SPI.c: 264: SSP2BUF = pData;
 16834  013AAA  C0B4  FF6F         	movff	SPI_Send@pData,3951	;volatile
 16835  013AAE                     
 16836                           ; BSR set to: 0
 16837  013AAE  A06D               	btfss	3949,0,c	;volatile
 16838  013AB0  D7FE               	goto	l686
 16839                           
 16840                           ;SPI.c: 266: pData = SSP2BUF;
 16841  013AB2  CF6F F0B4          	movff	3951,SPI_Send@pData	;volatile
 16842                           
 16843                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 16844  013AB6  C08B  FFD9         	movff	_PortD+4,fsr2l
 16845  013ABA  C08C  FFDA         	movff	_PortD+5,fsr2h
 16846  013ABE  0100               	movlb	0	; () banked
 16847  013AC0  8EDF               	bsf	indf2,7,c
 16848                           
 16849                           ; BSR set to: 0
 16850                           ;SPI.c: 269: };
 16851                           
 16852                           ; BSR set to: 0
 16853                           ;SPI.c: 268: return pData;
 16854                           ;	Return value of _SPI_Send is never used
 16855  013AC2  0012               	return	
 16856  013AC4                     l678:
 16857                           
 16858                           ; BSR set to: 0
 16859  013AC4  0100               	movlb	0	; () banked
 16860  013AC6  EE20 F002          	lfsr	2,2
 16861  013ACA  51B2               	movf	SPI_Send@pInput& (0+255),w,b
 16862  013ACC  26D9               	addwf	fsr2l,f,c
 16863  013ACE  51B3               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 16864  013AD0  22DA               	addwfc	fsr2h,f,c
 16865  013AD2  50DF               	movf	indf2,w,c
 16866                           
 16867                           ; Switch size 1, requested type "space"
 16868                           ; Number of cases is 2, Range of values is 0 to 1
 16869                           ; switch strategies available:
 16870                           ; Name         Instructions Cycles
 16871                           ; simple_byte            7     4 (average)
 16872                           ;	Chosen strategy is simple_byte
 16873  013AD4  0A00               	xorlw	0	; case 0
 16874  013AD6  B4D8               	btfsc	status,2,c
 16875  013AD8  D7CF               	goto	l679
 16876  013ADA  0A01               	xorlw	1	; case 1
 16877  013ADC  A4D8               	btfss	status,2,c
 16878  013ADE  0012               	return	
 16879  013AE0  D7DE               	goto	l684
 16880  013AE2                     __end_of_SPI_Send:
 16881                           	opt stack 0
 16882                           tosu	equ	0xFFF
 16883                           tosh	equ	0xFFE
 16884                           tosl	equ	0xFFD
 16885                           pclath	equ	0xFFA
 16886                           tblptru	equ	0xFF8
 16887                           tblptrh	equ	0xFF7
 16888                           tblptrl	equ	0xFF6
 16889                           tablat	equ	0xFF5
 16890                           prodh	equ	0xFF4
 16891                           prodl	equ	0xFF3
 16892                           intcon	equ	0xFF2
 16893                           postinc0	equ	0xFEE
 16894                           plusw0	equ	0xFEB
 16895                           wreg	equ	0xFE8
 16896                           indf1	equ	0xFE7
 16897                           postdec1	equ	0xFE5
 16898                           fsr1h	equ	0xFE2
 16899                           fsr1l	equ	0xFE1
 16900                           indf2	equ	0xFDF
 16901                           postinc2	equ	0xFDE
 16902                           postdec2	equ	0xFDD
 16903                           plusw2	equ	0xFDB
 16904                           fsr2h	equ	0xFDA
 16905                           fsr2l	equ	0xFD9
 16906                           status	equ	0xFD8
 16907                           
 16908 ;; *************** function _Mode_Set *****************
 16909 ;; Defined at:
 16910 ;;		line 40 in file "Library/LCD.c"
 16911 ;; Parameters:    Size  Location     Type
 16912 ;;  pMode           1    wreg     enum E6761
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;  pMode           1    0[BANK0 ] enum E6761
 16915 ;; Return value:  Size  Location     Type
 16916 ;;                  1    wreg      void 
 16917 ;; Registers used:
 16918 ;;		wreg
 16919 ;; Tracked objects:
 16920 ;;		On entry : 0/0
 16921 ;;		On exit  : 0/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16928 ;;Total ram usage:        1 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    7
 16931 ;; This function calls:
 16932 ;;		Nothing
 16933 ;; This function is called by:
 16934 ;;		_LCD_Write
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           	psect	text93
 16939  014A10                     __ptext93:
 16940                           	opt stack 0
 16941  014A10                     _Mode_Set:
 16942                           	opt stack 16
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;incstack = 0
 16946                           ;Mode_Set@pMode stored from wreg
 16947  014A10  0100               	movlb	0	; () banked
 16948  014A12  6FB2               	movwf	Mode_Set@pMode& (0+255),b
 16949                           
 16950                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 16951  014A14  0100               	movlb	0	; () banked
 16952  014A16  B1B2               	btfsc	Mode_Set@pMode& (0+255),0,b
 16953  014A18  D002               	bra	u6885
 16954  014A1A  9E85               	bcf	3973,7,c	;volatile
 16955  014A1C  D001               	bra	u6886
 16956  014A1E                     u6885:
 16957  014A1E  8E85               	bsf	3973,7,c	;volatile
 16958  014A20                     u6886:
 16959  014A20  0012               	return		;funcret
 16960  014A22                     __end_of_Mode_Set:
 16961                           	opt stack 0
 16962                           tosu	equ	0xFFF
 16963                           tosh	equ	0xFFE
 16964                           tosl	equ	0xFFD
 16965                           pclath	equ	0xFFA
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           postinc0	equ	0xFEE
 16974                           plusw0	equ	0xFEB
 16975                           wreg	equ	0xFE8
 16976                           indf1	equ	0xFE7
 16977                           postdec1	equ	0xFE5
 16978                           fsr1h	equ	0xFE2
 16979                           fsr1l	equ	0xFE1
 16980                           indf2	equ	0xFDF
 16981                           postinc2	equ	0xFDE
 16982                           postdec2	equ	0xFDD
 16983                           plusw2	equ	0xFDB
 16984                           fsr2h	equ	0xFDA
 16985                           fsr2l	equ	0xFD9
 16986                           status	equ	0xFD8
 16987                           
 16988 ;; *************** function _Configure_GPIOs *****************
 16989 ;; Defined at:
 16990 ;;		line 46 in file "Library/LCD.c"
 16991 ;; Parameters:    Size  Location     Type
 16992 ;;		None
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;		None
 16995 ;; Return value:  Size  Location     Type
 16996 ;;                  1    wreg      void 
 16997 ;; Registers used:
 16998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16999 ;; Tracked objects:
 17000 ;;		On entry : 0/0
 17001 ;;		On exit  : 0/0
 17002 ;;		Unchanged: 0/0
 17003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17008 ;;Total ram usage:        0 bytes
 17009 ;; Hardware stack levels used:    1
 17010 ;; Hardware stack levels required when called:   14
 17011 ;; This function calls:
 17012 ;;		_LCD_Reset
 17013 ;;		_Port_SetPinType
 17014 ;;		_SPI_Init
 17015 ;;		_SPI_MaxSpeed
 17016 ;; This function is called by:
 17017 ;;		_LCD_Init
 17018 ;; This function uses a non-reentrant model
 17019 ;;
 17020                           
 17021                           	psect	text94
 17022  01399A                     __ptext94:
 17023                           	opt stack 0
 17024  01399A                     _Configure_GPIOs:
 17025                           	opt stack 14
 17026                           
 17027                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 17028                           
 17029                           ;incstack = 0
 17030  01399A  0EAC               	movlw	low _PortF
 17031  01399C  0100               	movlb	0	; () banked
 17032  01399E  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 17033  0139A0  0E01               	movlw	high _PortF
 17034  0139A2  0100               	movlb	0	; () banked
 17035  0139A4  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17036  0139A6  0E07               	movlw	7
 17037  0139A8  0100               	movlb	0	; () banked
 17038  0139AA  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 17039  0139AC  0E03               	movlw	3
 17040  0139AE  0100               	movlb	0	; () banked
 17041  0139B0  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 17042  0139B2  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 17043                           
 17044                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 17045  0139B6  0EAC               	movlw	low _PortF
 17046  0139B8  0100               	movlb	0	; () banked
 17047  0139BA  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 17048  0139BC  0E01               	movlw	high _PortF
 17049  0139BE  0100               	movlb	0	; () banked
 17050  0139C0  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17051  0139C2  0E06               	movlw	6
 17052  0139C4  0100               	movlb	0	; () banked
 17053  0139C6  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 17054  0139C8  0E03               	movlw	3
 17055  0139CA  0100               	movlb	0	; () banked
 17056  0139CC  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 17057  0139CE  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 17058                           
 17059                           ;LCD.c: 55: LCD_Reset();
 17060  0139D2  ECFD  F09F         	call	_LCD_Reset	;wreg free
 17061                           
 17062                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 17063  0139D6  0EC0               	movlw	192
 17064  0139D8  0100               	movlb	0	; () banked
 17065  0139DA  6FDF               	movwf	SPI_Init@pClock& (0+255),b
 17066  0139DC  0EC6               	movlw	198
 17067  0139DE  6FE0               	movwf	(SPI_Init@pClock+1)& (0+255),b
 17068  0139E0  0E2D               	movlw	45
 17069  0139E2  6FE1               	movwf	(SPI_Init@pClock+2)& (0+255),b
 17070  0139E4  0E00               	movlw	0
 17071  0139E6  6FE2               	movwf	(SPI_Init@pClock+3)& (0+255),b
 17072  0139E8  0E01               	movlw	1
 17073  0139EA  0100               	movlb	0	; () banked
 17074  0139EC  6FE3               	movwf	SPI_Init@pChannel& (0+255),b
 17075  0139EE  0E01               	movlw	1
 17076  0139F0  0100               	movlb	0	; () banked
 17077  0139F2  6FE4               	movwf	SPI_Init@pMode& (0+255),b
 17078  0139F4  EC00  F080         	call	_SPI_Init	;wreg free
 17079                           
 17080                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 17081  0139F8  0E6F               	movlw	low _SPI2
 17082  0139FA  0100               	movlb	0	; () banked
 17083  0139FC  6FC1               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 17084  0139FE  0E01               	movlw	high _SPI2
 17085  013A00  0100               	movlb	0	; () banked
 17086  013A02  6FC2               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 17087  013A04  EC20  F09C         	call	_SPI_MaxSpeed	;wreg free
 17088  013A08  0012               	return		;funcret
 17089  013A0A                     __end_of_Configure_GPIOs:
 17090                           	opt stack 0
 17091                           tosu	equ	0xFFF
 17092                           tosh	equ	0xFFE
 17093                           tosl	equ	0xFFD
 17094                           pclath	equ	0xFFA
 17095                           tblptru	equ	0xFF8
 17096                           tblptrh	equ	0xFF7
 17097                           tblptrl	equ	0xFF6
 17098                           tablat	equ	0xFF5
 17099                           prodh	equ	0xFF4
 17100                           prodl	equ	0xFF3
 17101                           intcon	equ	0xFF2
 17102                           postinc0	equ	0xFEE
 17103                           plusw0	equ	0xFEB
 17104                           wreg	equ	0xFE8
 17105                           indf1	equ	0xFE7
 17106                           postdec1	equ	0xFE5
 17107                           fsr1h	equ	0xFE2
 17108                           fsr1l	equ	0xFE1
 17109                           indf2	equ	0xFDF
 17110                           postinc2	equ	0xFDE
 17111                           postdec2	equ	0xFDD
 17112                           plusw2	equ	0xFDB
 17113                           fsr2h	equ	0xFDA
 17114                           fsr2l	equ	0xFD9
 17115                           status	equ	0xFD8
 17116                           
 17117 ;; *************** function _SPI_MaxSpeed *****************
 17118 ;; Defined at:
 17119 ;;		line 201 in file "Library/SPI.c"
 17120 ;; Parameters:    Size  Location     Type
 17121 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 17122 ;;		 -> SPI2(11), 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;		None
 17125 ;; Return value:  Size  Location     Type
 17126 ;;                  1    wreg      void 
 17127 ;; Registers used:
 17128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17134 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17138 ;;Total ram usage:        2 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    9
 17141 ;; This function calls:
 17142 ;;		_Byte_SetBit
 17143 ;;		_Byte_SetQuad
 17144 ;; This function is called by:
 17145 ;;		_Configure_GPIOs
 17146 ;; This function uses a non-reentrant model
 17147 ;;
 17148                           
 17149                           	psect	text95
 17150  013840                     __ptext95:
 17151                           	opt stack 0
 17152  013840                     _SPI_MaxSpeed:
 17153                           	opt stack 18
 17154                           
 17155                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17156                           
 17157                           ;incstack = 0
 17158  013840  0100               	movlb	0	; () banked
 17159  013842  EE20 F006          	lfsr	2,6
 17160  013846  51C1               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17161  013848  26D9               	addwf	fsr2l,f,c
 17162  01384A  51C2               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17163  01384C  22DA               	addwfc	fsr2h,f,c
 17164  01384E  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 17165  013852  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 17166  013856  0E05               	movlw	5
 17167  013858  0100               	movlb	0	; () banked
 17168  01385A  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 17169  01385C  0E00               	movlw	0
 17170  01385E  0100               	movlb	0	; () banked
 17171  013860  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 17172  013862  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 17173                           
 17174                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 17175  013866  0100               	movlb	0	; () banked
 17176  013868  EE20 F006          	lfsr	2,6
 17177  01386C  51C1               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17178  01386E  26D9               	addwf	fsr2l,f,c
 17179  013870  51C2               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17180  013872  22DA               	addwfc	fsr2h,f,c
 17181  013874  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 17182  013878  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 17183  01387C  0E00               	movlw	0
 17184  01387E  0100               	movlb	0	; () banked
 17185  013880  6FBF               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17186  013882  0E00               	movlw	0
 17187  013884  0100               	movlb	0	; () banked
 17188  013886  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 17189  013888  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 17190                           
 17191                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17192  01388C  0100               	movlb	0	; () banked
 17193  01388E  EE20 F006          	lfsr	2,6
 17194  013892  51C1               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17195  013894  26D9               	addwf	fsr2l,f,c
 17196  013896  51C2               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17197  013898  22DA               	addwfc	fsr2h,f,c
 17198  01389A  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 17199  01389E  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 17200  0138A2  0E05               	movlw	5
 17201  0138A4  0100               	movlb	0	; () banked
 17202  0138A6  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 17203  0138A8  0E01               	movlw	1
 17204  0138AA  0100               	movlb	0	; () banked
 17205  0138AC  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 17206  0138AE  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 17207  0138B2  0012               	return		;funcret
 17208  0138B4                     __end_of_SPI_MaxSpeed:
 17209                           	opt stack 0
 17210                           tosu	equ	0xFFF
 17211                           tosh	equ	0xFFE
 17212                           tosl	equ	0xFFD
 17213                           pclath	equ	0xFFA
 17214                           tblptru	equ	0xFF8
 17215                           tblptrh	equ	0xFF7
 17216                           tblptrl	equ	0xFF6
 17217                           tablat	equ	0xFF5
 17218                           prodh	equ	0xFF4
 17219                           prodl	equ	0xFF3
 17220                           intcon	equ	0xFF2
 17221                           postinc0	equ	0xFEE
 17222                           plusw0	equ	0xFEB
 17223                           wreg	equ	0xFE8
 17224                           indf1	equ	0xFE7
 17225                           postdec1	equ	0xFE5
 17226                           fsr1h	equ	0xFE2
 17227                           fsr1l	equ	0xFE1
 17228                           indf2	equ	0xFDF
 17229                           postinc2	equ	0xFDE
 17230                           postdec2	equ	0xFDD
 17231                           plusw2	equ	0xFDB
 17232                           fsr2h	equ	0xFDA
 17233                           fsr2l	equ	0xFD9
 17234                           status	equ	0xFD8
 17235                           
 17236 ;; *************** function _LCD_Reset *****************
 17237 ;; Defined at:
 17238 ;;		line 95 in file "Library/LCD.c"
 17239 ;; Parameters:    Size  Location     Type
 17240 ;;		None
 17241 ;; Auto vars:     Size  Location     Type
 17242 ;;		None
 17243 ;; Return value:  Size  Location     Type
 17244 ;;                  1    wreg      void 
 17245 ;; Registers used:
 17246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17247 ;; Tracked objects:
 17248 ;;		On entry : 0/0
 17249 ;;		On exit  : 0/0
 17250 ;;		Unchanged: 0/0
 17251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17256 ;;Total ram usage:        0 bytes
 17257 ;; Hardware stack levels used:    1
 17258 ;; Hardware stack levels required when called:   13
 17259 ;; This function calls:
 17260 ;;		_LED_Toggle
 17261 ;;		_Reset_High
 17262 ;;		_Reset_Low
 17263 ;;		_delay_ms
 17264 ;; This function is called by:
 17265 ;;		_Configure_GPIOs
 17266 ;; This function uses a non-reentrant model
 17267 ;;
 17268                           
 17269                           	psect	text96
 17270  013FFA                     __ptext96:
 17271                           	opt stack 0
 17272  013FFA                     _LCD_Reset:
 17273                           	opt stack 14
 17274                           
 17275                           ;LCD.c: 97: Reset_High();
 17276                           
 17277                           ;incstack = 0
 17278  013FFA  EC31  F0A4         	call	_Reset_High	;wreg free
 17279                           
 17280                           ;LCD.c: 98: LED_Toggle(eLED2);
 17281  013FFE  0E01               	movlw	1
 17282  014000  EC94  F0A0         	call	_LED_Toggle
 17283                           
 17284                           ;LCD.c: 99: delay_ms(0x80);
 17285  014004  0E00               	movlw	0
 17286  014006  0100               	movlb	0	; () banked
 17287  014008  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 17288  01400A  0E80               	movlw	128
 17289  01400C  6FB2               	movwf	delay_ms@ms& (0+255),b
 17290  01400E  EC71  F09D         	call	_delay_ms	;wreg free
 17291                           
 17292                           ;LCD.c: 100: LED_Toggle(eLED2);
 17293  014012  0E01               	movlw	1
 17294  014014  EC94  F0A0         	call	_LED_Toggle
 17295                           
 17296                           ;LCD.c: 101: Reset_Low();
 17297  014018  EC22  F0A4         	call	_Reset_Low	;wreg free
 17298                           
 17299                           ;LCD.c: 102: delay_ms(0x80);
 17300  01401C  0E00               	movlw	0
 17301  01401E  0100               	movlb	0	; () banked
 17302  014020  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 17303  014022  0E80               	movlw	128
 17304  014024  6FB2               	movwf	delay_ms@ms& (0+255),b
 17305  014026  EC71  F09D         	call	_delay_ms	;wreg free
 17306                           
 17307                           ;LCD.c: 103: LED_Toggle(eLED2);
 17308  01402A  0E01               	movlw	1
 17309  01402C  EC94  F0A0         	call	_LED_Toggle
 17310                           
 17311                           ;LCD.c: 104: Reset_High();
 17312  014030  EC31  F0A4         	call	_Reset_High	;wreg free
 17313                           
 17314                           ;LCD.c: 105: delay_ms(0x80);
 17315  014034  0E00               	movlw	0
 17316  014036  0100               	movlb	0	; () banked
 17317  014038  6FB3               	movwf	(delay_ms@ms+1)& (0+255),b
 17318  01403A  0E80               	movlw	128
 17319  01403C  6FB2               	movwf	delay_ms@ms& (0+255),b
 17320  01403E  EC71  F09D         	call	_delay_ms	;wreg free
 17321                           
 17322                           ;LCD.c: 106: LED_Toggle(eLED2);
 17323  014042  0E01               	movlw	1
 17324  014044  EC94  F0A0         	call	_LED_Toggle
 17325  014048  0012               	return		;funcret
 17326  01404A                     __end_of_LCD_Reset:
 17327                           	opt stack 0
 17328                           tosu	equ	0xFFF
 17329                           tosh	equ	0xFFE
 17330                           tosl	equ	0xFFD
 17331                           pclath	equ	0xFFA
 17332                           tblptru	equ	0xFF8
 17333                           tblptrh	equ	0xFF7
 17334                           tblptrl	equ	0xFF6
 17335                           tablat	equ	0xFF5
 17336                           prodh	equ	0xFF4
 17337                           prodl	equ	0xFF3
 17338                           intcon	equ	0xFF2
 17339                           postinc0	equ	0xFEE
 17340                           plusw0	equ	0xFEB
 17341                           wreg	equ	0xFE8
 17342                           indf1	equ	0xFE7
 17343                           postdec1	equ	0xFE5
 17344                           fsr1h	equ	0xFE2
 17345                           fsr1l	equ	0xFE1
 17346                           indf2	equ	0xFDF
 17347                           postinc2	equ	0xFDE
 17348                           postdec2	equ	0xFDD
 17349                           plusw2	equ	0xFDB
 17350                           fsr2h	equ	0xFDA
 17351                           fsr2l	equ	0xFD9
 17352                           status	equ	0xFD8
 17353                           
 17354 ;; *************** function _delay_ms *****************
 17355 ;; Defined at:
 17356 ;;		line 240 in file "Library/Types.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;  ms              2    0[BANK0 ] unsigned short 
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17361 ;; Return value:  Size  Location     Type
 17362 ;;                  1    wreg      void 
 17363 ;; Registers used:
 17364 ;;		wreg, status,2, status,0
 17365 ;; Tracked objects:
 17366 ;;		On entry : 0/0
 17367 ;;		On exit  : 0/0
 17368 ;;		Unchanged: 0/0
 17369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17370 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17371 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17373 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17374 ;;Total ram usage:        6 bytes
 17375 ;; Hardware stack levels used:    1
 17376 ;; Hardware stack levels required when called:    7
 17377 ;; This function calls:
 17378 ;;		Nothing
 17379 ;; This function is called by:
 17380 ;;		_LCD_Reset
 17381 ;;		_LCD_Init
 17382 ;;		_MXK_Init
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           	psect	text97
 17387  013AE2                     __ptext97:
 17388                           	opt stack 0
 17389  013AE2                     _delay_ms:
 17390                           	opt stack 21
 17391                           
 17392                           ;Types.c: 242: volatile unsigned long u;
 17393                           ;Types.c: 243: while (ms--)
 17394                           
 17395                           ;incstack = 0
 17396  013AE2  D01F               	goto	u7280
 17397  013AE4                     l10864:
 17398                           
 17399                           ;Types.c: 244: {
 17400                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17401  013AE4  0E00               	movlw	0
 17402  013AE6  0100               	movlb	0	; () banked
 17403  013AE8  6FB4               	movwf	delay_ms@u& (0+255),b	;volatile
 17404  013AEA  0E00               	movlw	0
 17405  013AEC  6FB5               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17406  013AEE  0E00               	movlw	0
 17407  013AF0  6FB6               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17408  013AF2  0E00               	movlw	0
 17409  013AF4  6FB7               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17410  013AF6                     l10866:
 17411                           
 17412                           ; BSR set to: 0
 17413  013AF6  0100               	movlb	0	; () banked
 17414  013AF8  51B7               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17415  013AFA  0100               	movlb	0	; () banked
 17416  013AFC  11B6               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17417  013AFE  E111               	bnz	l10872
 17418  013B00  0EB0               	movlw	176
 17419  013B02  0100               	movlb	0	; () banked
 17420  013B04  5DB4               	subwf	delay_ms@u& (0+255),w,b	;volatile
 17421  013B06  0E04               	movlw	4
 17422  013B08  0100               	movlb	0	; () banked
 17423  013B0A  59B5               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17424  013B0C  B0D8               	btfsc	status,0,c
 17425  013B0E  D009               	goto	u7280
 17426                           
 17427                           ; BSR set to: 0
 17428                           
 17429                           ; BSR set to: 0
 17430  013B10  F000               	nop		; ;# 
 17431  013B12  0E01               	movlw	1
 17432  013B14  0100               	movlb	0	; () banked
 17433  013B16  27B4               	addwf	delay_ms@u& (0+255),f,b	;volatile
 17434  013B18  0E00               	movlw	0
 17435  013B1A  23B5               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17436  013B1C  23B6               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17437  013B1E  23B7               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17438  013B20  D7EA               	goto	l10866
 17439  013B22                     u7280:
 17440  013B22                     l10872:
 17441  013B22  0100               	movlb	0	; () banked
 17442  013B24  07B2               	decf	delay_ms@ms& (0+255),f,b
 17443  013B26  A0D8               	btfss	status,0,c
 17444  013B28  07B3               	decf	(delay_ms@ms+1)& (0+255),f,b
 17445  013B2A  0100               	movlb	0	; () banked
 17446  013B2C  29B2               	incf	delay_ms@ms& (0+255),w,b
 17447  013B2E  E1DA               	bnz	l10864
 17448  013B30  0100               	movlb	0	; () banked
 17449  013B32  29B3               	incf	(delay_ms@ms+1)& (0+255),w,b
 17450  013B34  A4D8               	btfss	status,2,c
 17451  013B36  D7D6               	goto	l824
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;Types.c: 251: }
 17455                           ;Types.c: 252: }
 17456                           ;Types.c: 253: u = 0x8008;
 17457                           
 17458                           ; BSR set to: 0
 17459  013B38  0E08               	movlw	8
 17460  013B3A  0100               	movlb	0	; () banked
 17461  013B3C  6FB4               	movwf	delay_ms@u& (0+255),b	;volatile
 17462  013B3E  0E80               	movlw	128
 17463  013B40  6FB5               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17464  013B42  0E00               	movlw	0
 17465  013B44  6FB6               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17466  013B46  0E00               	movlw	0
 17467  013B48  6FB7               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17468                           
 17469                           ; BSR set to: 0
 17470  013B4A  0012               	return		;funcret
 17471  013B4C                     __end_of_delay_ms:
 17472                           	opt stack 0
 17473                           tosu	equ	0xFFF
 17474                           tosh	equ	0xFFE
 17475                           tosl	equ	0xFFD
 17476                           pclath	equ	0xFFA
 17477                           tblptru	equ	0xFF8
 17478                           tblptrh	equ	0xFF7
 17479                           tblptrl	equ	0xFF6
 17480                           tablat	equ	0xFF5
 17481                           prodh	equ	0xFF4
 17482                           prodl	equ	0xFF3
 17483                           intcon	equ	0xFF2
 17484                           postinc0	equ	0xFEE
 17485                           plusw0	equ	0xFEB
 17486                           wreg	equ	0xFE8
 17487                           indf1	equ	0xFE7
 17488                           postdec1	equ	0xFE5
 17489                           fsr1h	equ	0xFE2
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           postdec2	equ	0xFDD
 17494                           plusw2	equ	0xFDB
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           
 17499 ;; *************** function _Reset_Low *****************
 17500 ;; Defined at:
 17501 ;;		line 32 in file "Library/LCD.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;		None
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;		None
 17506 ;; Return value:  Size  Location     Type
 17507 ;;                  1    wreg      void 
 17508 ;; Registers used:
 17509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17510 ;; Tracked objects:
 17511 ;;		On entry : 0/0
 17512 ;;		On exit  : 0/0
 17513 ;;		Unchanged: 0/0
 17514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17519 ;;Total ram usage:        0 bytes
 17520 ;; Hardware stack levels used:    1
 17521 ;; Hardware stack levels required when called:   11
 17522 ;; This function calls:
 17523 ;;		_Port_SetPin
 17524 ;; This function is called by:
 17525 ;;		_LCD_Reset
 17526 ;; This function uses a non-reentrant model
 17527 ;;
 17528                           
 17529                           	psect	text98
 17530  014844                     __ptext98:
 17531                           	opt stack 0
 17532  014844                     _Reset_Low:
 17533                           	opt stack 15
 17534                           
 17535                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;incstack = 0
 17539  014844  0EAC               	movlw	low _PortF
 17540  014846  0100               	movlb	0	; () banked
 17541  014848  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 17542  01484A  0E01               	movlw	high _PortF
 17543  01484C  0100               	movlb	0	; () banked
 17544  01484E  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17545  014850  0E06               	movlw	6
 17546  014852  0100               	movlb	0	; () banked
 17547  014854  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 17548  014856  0E01               	movlw	1
 17549  014858  0100               	movlb	0	; () banked
 17550  01485A  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 17551  01485C  EC5A  F094         	call	_Port_SetPin	;wreg free
 17552  014860  0012               	return		;funcret
 17553  014862                     __end_of_Reset_Low:
 17554                           	opt stack 0
 17555                           tosu	equ	0xFFF
 17556                           tosh	equ	0xFFE
 17557                           tosl	equ	0xFFD
 17558                           pclath	equ	0xFFA
 17559                           tblptru	equ	0xFF8
 17560                           tblptrh	equ	0xFF7
 17561                           tblptrl	equ	0xFF6
 17562                           tablat	equ	0xFF5
 17563                           prodh	equ	0xFF4
 17564                           prodl	equ	0xFF3
 17565                           intcon	equ	0xFF2
 17566                           postinc0	equ	0xFEE
 17567                           plusw0	equ	0xFEB
 17568                           wreg	equ	0xFE8
 17569                           indf1	equ	0xFE7
 17570                           postdec1	equ	0xFE5
 17571                           fsr1h	equ	0xFE2
 17572                           fsr1l	equ	0xFE1
 17573                           indf2	equ	0xFDF
 17574                           postinc2	equ	0xFDE
 17575                           postdec2	equ	0xFDD
 17576                           plusw2	equ	0xFDB
 17577                           fsr2h	equ	0xFDA
 17578                           fsr2l	equ	0xFD9
 17579                           status	equ	0xFD8
 17580                           
 17581 ;; *************** function _Reset_High *****************
 17582 ;; Defined at:
 17583 ;;		line 36 in file "Library/LCD.c"
 17584 ;; Parameters:    Size  Location     Type
 17585 ;;		None
 17586 ;; Auto vars:     Size  Location     Type
 17587 ;;		None
 17588 ;; Return value:  Size  Location     Type
 17589 ;;                  1    wreg      void 
 17590 ;; Registers used:
 17591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17592 ;; Tracked objects:
 17593 ;;		On entry : 0/0
 17594 ;;		On exit  : 0/0
 17595 ;;		Unchanged: 0/0
 17596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17601 ;;Total ram usage:        0 bytes
 17602 ;; Hardware stack levels used:    1
 17603 ;; Hardware stack levels required when called:   11
 17604 ;; This function calls:
 17605 ;;		_Port_SetPin
 17606 ;; This function is called by:
 17607 ;;		_LCD_Reset
 17608 ;; This function uses a non-reentrant model
 17609 ;;
 17610                           
 17611                           	psect	text99
 17612  014862                     __ptext99:
 17613                           	opt stack 0
 17614  014862                     _Reset_High:
 17615                           	opt stack 15
 17616                           
 17617                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 17618                           
 17619                           ;incstack = 0
 17620  014862  0EAC               	movlw	low _PortF
 17621  014864  0100               	movlb	0	; () banked
 17622  014866  6FC1               	movwf	Port_SetPin@pInput& (0+255),b
 17623  014868  0E01               	movlw	high _PortF
 17624  01486A  0100               	movlb	0	; () banked
 17625  01486C  6FC2               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17626  01486E  0E06               	movlw	6
 17627  014870  0100               	movlb	0	; () banked
 17628  014872  6FC3               	movwf	Port_SetPin@pPin& (0+255),b
 17629  014874  0E00               	movlw	0
 17630  014876  0100               	movlb	0	; () banked
 17631  014878  6FC4               	movwf	Port_SetPin@pValue& (0+255),b
 17632  01487A  EC5A  F094         	call	_Port_SetPin	;wreg free
 17633  01487E  0012               	return		;funcret
 17634  014880                     __end_of_Reset_High:
 17635                           	opt stack 0
 17636                           tosu	equ	0xFFF
 17637                           tosh	equ	0xFFE
 17638                           tosl	equ	0xFFD
 17639                           pclath	equ	0xFFA
 17640                           tblptru	equ	0xFF8
 17641                           tblptrh	equ	0xFF7
 17642                           tblptrl	equ	0xFF6
 17643                           tablat	equ	0xFF5
 17644                           prodh	equ	0xFF4
 17645                           prodl	equ	0xFF3
 17646                           intcon	equ	0xFF2
 17647                           postinc0	equ	0xFEE
 17648                           plusw0	equ	0xFEB
 17649                           wreg	equ	0xFE8
 17650                           indf1	equ	0xFE7
 17651                           postdec1	equ	0xFE5
 17652                           fsr1h	equ	0xFE2
 17653                           fsr1l	equ	0xFE1
 17654                           indf2	equ	0xFDF
 17655                           postinc2	equ	0xFDE
 17656                           postdec2	equ	0xFDD
 17657                           plusw2	equ	0xFDB
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function _LED_Toggle *****************
 17663 ;; Defined at:
 17664 ;;		line 50 in file "Library/LED.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;  pLED            1    wreg     enum E6739
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;  pLED            1   24[BANK0 ] enum E6739
 17669 ;; Return value:  Size  Location     Type
 17670 ;;                  1    wreg      void 
 17671 ;; Registers used:
 17672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;Total ram usage:        1 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:   12
 17685 ;; This function calls:
 17686 ;;		_Port_TogglePin
 17687 ;; This function is called by:
 17688 ;;		_LCD_Reset
 17689 ;;		_Event_DIPSwitch
 17690 ;;		_Event_HMI_DIPSwitch
 17691 ;;		_Event_TestButton
 17692 ;;		_Event_HMI_LeftButton
 17693 ;;		_Event_HMI_RightButton
 17694 ;;		_Event_HMI_UpButton
 17695 ;;		_Event_HMI_DownButton
 17696 ;;		_continuousMode
 17697 ;;		_Event_ADCSequenceComplete
 17698 ;; This function uses a non-reentrant model
 17699 ;;
 17700                           
 17701                           	psect	text100
 17702  014128                     __ptext100:
 17703                           	opt stack 0
 17704  014128                     _LED_Toggle:
 17705                           	opt stack 10
 17706                           
 17707                           ;incstack = 0
 17708                           ;LED_Toggle@pLED stored from wreg
 17709  014128  0100               	movlb	0	; () banked
 17710  01412A  6FCA               	movwf	LED_Toggle@pLED& (0+255),b
 17711                           
 17712                           ;LED.c: 52: switch (pLED)
 17713  01412C  D018               	goto	l234
 17714  01412E                     
 17715                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 17716  01412E  0E91               	movlw	low _PortC
 17717  014130  0100               	movlb	0	; () banked
 17718  014132  6FC6               	movwf	Port_TogglePin@pInput& (0+255),b
 17719  014134  0E00               	movlw	high _PortC
 17720  014136  0100               	movlb	0	; () banked
 17721  014138  6FC7               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17722  01413A  0E00               	movlw	0
 17723  01413C  0100               	movlb	0	; () banked
 17724  01413E  6FC8               	movwf	Port_TogglePin@pPin& (0+255),b
 17725  014140  ECD4  F0A2         	call	_Port_TogglePin	;wreg free
 17726                           
 17727                           ;LED.c: 56: break;
 17728  014144  0012               	return	
 17729  014146                     
 17730                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 17731  014146  0E91               	movlw	low _PortC
 17732  014148  0100               	movlb	0	; () banked
 17733  01414A  6FC6               	movwf	Port_TogglePin@pInput& (0+255),b
 17734  01414C  0E00               	movlw	high _PortC
 17735  01414E  0100               	movlb	0	; () banked
 17736  014150  6FC7               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17737  014152  0E01               	movlw	1
 17738  014154  0100               	movlb	0	; () banked
 17739  014156  6FC8               	movwf	Port_TogglePin@pPin& (0+255),b
 17740  014158  ECD4  F0A2         	call	_Port_TogglePin	;wreg free
 17741                           
 17742                           ;LED.c: 60: }
 17743                           
 17744                           ;LED.c: 59: break;
 17745  01415C  0012               	return	
 17746  01415E                     l234:
 17747  01415E  0100               	movlb	0	; () banked
 17748  014160  51CA               	movf	LED_Toggle@pLED& (0+255),w,b
 17749                           
 17750                           ; Switch size 1, requested type "space"
 17751                           ; Number of cases is 2, Range of values is 0 to 1
 17752                           ; switch strategies available:
 17753                           ; Name         Instructions Cycles
 17754                           ; simple_byte            7     4 (average)
 17755                           ;	Chosen strategy is simple_byte
 17756  014162  0A00               	xorlw	0	; case 0
 17757  014164  B4D8               	btfsc	status,2,c
 17758  014166  D7E3               	goto	l235
 17759  014168  0A01               	xorlw	1	; case 1
 17760  01416A  A4D8               	btfss	status,2,c
 17761  01416C  0012               	return	
 17762  01416E  D7EB               	goto	l237
 17763  014170                     __end_of_LED_Toggle:
 17764                           	opt stack 0
 17765                           tosu	equ	0xFFF
 17766                           tosh	equ	0xFFE
 17767                           tosl	equ	0xFFD
 17768                           pclath	equ	0xFFA
 17769                           tblptru	equ	0xFF8
 17770                           tblptrh	equ	0xFF7
 17771                           tblptrl	equ	0xFF6
 17772                           tablat	equ	0xFF5
 17773                           prodh	equ	0xFF4
 17774                           prodl	equ	0xFF3
 17775                           intcon	equ	0xFF2
 17776                           postinc0	equ	0xFEE
 17777                           plusw0	equ	0xFEB
 17778                           wreg	equ	0xFE8
 17779                           indf1	equ	0xFE7
 17780                           postdec1	equ	0xFE5
 17781                           fsr1h	equ	0xFE2
 17782                           fsr1l	equ	0xFE1
 17783                           indf2	equ	0xFDF
 17784                           postinc2	equ	0xFDE
 17785                           postdec2	equ	0xFDD
 17786                           plusw2	equ	0xFDB
 17787                           fsr2h	equ	0xFDA
 17788                           fsr2l	equ	0xFD9
 17789                           status	equ	0xFD8
 17790                           
 17791 ;; *************** function _Port_TogglePin *****************
 17792 ;; Defined at:
 17793 ;;		line 278 in file "Library/Port.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 17796 ;;		 -> PortC(10), 
 17797 ;;  pPin            1   22[BANK0 ] enum E6750
 17798 ;; Auto vars:     Size  Location     Type
 17799 ;;  Value           1   23[BANK0 ] unsigned char 
 17800 ;; Return value:  Size  Location     Type
 17801 ;;                  1    wreg      void 
 17802 ;; Registers used:
 17803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17804 ;; Tracked objects:
 17805 ;;		On entry : 0/0
 17806 ;;		On exit  : 0/0
 17807 ;;		Unchanged: 0/0
 17808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17809 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17813 ;;Total ram usage:        4 bytes
 17814 ;; Hardware stack levels used:    1
 17815 ;; Hardware stack levels required when called:   11
 17816 ;; This function calls:
 17817 ;;		_Port_GetPin
 17818 ;;		_Port_SetPin
 17819 ;; This function is called by:
 17820 ;;		_LED_Toggle
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824                           	psect	text101
 17825  0145A8                     __ptext101:
 17826                           	opt stack 0
 17827  0145A8                     _Port_TogglePin:
 17828                           	opt stack 10
 17829                           
 17830                           ;Port.c: 280: UINT8 Value;
 17831                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 17832                           
 17833                           ;incstack = 0
 17834  0145A8  C0C6  F0B2         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 17835  0145AC  C0C7  F0B3         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 17836  0145B0  C0C8  F0B4         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 17837  0145B4  ECB8  F0A0         	call	_Port_GetPin	;wreg free
 17838  0145B8  0100               	movlb	0	; () banked
 17839  0145BA  6FC9               	movwf	Port_TogglePin@Value& (0+255),b
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;Port.c: 282: Value ^= 0x01;
 17843  0145BC  0E01               	movlw	1
 17844  0145BE  0100               	movlb	0	; () banked
 17845  0145C0  1BC9               	xorwf	Port_TogglePin@Value& (0+255),f,b
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 17849  0145C2  C0C6  F0C1         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 17850  0145C6  C0C7  F0C2         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 17851  0145CA  C0C8  F0C3         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 17852  0145CE  C0C9  F0C4         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 17853  0145D2  EC5A  F094         	call	_Port_SetPin	;wreg free
 17854  0145D6  0012               	return		;funcret
 17855  0145D8                     __end_of_Port_TogglePin:
 17856                           	opt stack 0
 17857                           tosu	equ	0xFFF
 17858                           tosh	equ	0xFFE
 17859                           tosl	equ	0xFFD
 17860                           pclath	equ	0xFFA
 17861                           tblptru	equ	0xFF8
 17862                           tblptrh	equ	0xFF7
 17863                           tblptrl	equ	0xFF6
 17864                           tablat	equ	0xFF5
 17865                           prodh	equ	0xFF4
 17866                           prodl	equ	0xFF3
 17867                           intcon	equ	0xFF2
 17868                           postinc0	equ	0xFEE
 17869                           plusw0	equ	0xFEB
 17870                           wreg	equ	0xFE8
 17871                           indf1	equ	0xFE7
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           plusw2	equ	0xFDB
 17879                           fsr2h	equ	0xFDA
 17880                           fsr2l	equ	0xFD9
 17881                           status	equ	0xFD8
 17882                           
 17883 ;; *************** function _Port_SetPin *****************
 17884 ;; Defined at:
 17885 ;;		line 247 in file "Library/Port.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17888 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 17889 ;;  pPin            1   17[BANK0 ] enum E6750
 17890 ;;  pValue          1   18[BANK0 ] unsigned char 
 17891 ;; Auto vars:     Size  Location     Type
 17892 ;;  Type            1   19[BANK0 ] enum E6795
 17893 ;; Return value:  Size  Location     Type
 17894 ;;                  1    wreg      void 
 17895 ;; Registers used:
 17896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17897 ;; Tracked objects:
 17898 ;;		On entry : 0/0
 17899 ;;		On exit  : 0/0
 17900 ;;		Unchanged: 0/0
 17901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17905 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17906 ;;Total ram usage:        5 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; Hardware stack levels required when called:   10
 17909 ;; This function calls:
 17910 ;;		_Byte_SetBit
 17911 ;;		_Word_GetPair
 17912 ;; This function is called by:
 17913 ;;		_Reset_Low
 17914 ;;		_Reset_High
 17915 ;;		_LED_Set
 17916 ;;		_Port_TogglePin
 17917 ;;		_Motor_Init
 17918 ;;		_Motor_Step
 17919 ;;		_MXK_Init
 17920 ;; This function uses a non-reentrant model
 17921 ;;
 17922                           
 17923                           	psect	text102
 17924  0128B4                     __ptext102:
 17925                           	opt stack 0
 17926  0128B4                     _Port_SetPin:
 17927                           	opt stack 10
 17928                           
 17929                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 17930                           
 17931                           ;incstack = 0
 17932  0128B4  0E08               	movlw	8
 17933  0128B6  0100               	movlb	0	; () banked
 17934  0128B8  25C1               	addwf	Port_SetPin@pInput& (0+255),w,b
 17935  0128BA  0100               	movlb	0	; () banked
 17936  0128BC  6FBE               	movwf	Word_GetPair@pInput& (0+255),b
 17937  0128BE  0E00               	movlw	0
 17938  0128C0  0100               	movlb	0	; () banked
 17939  0128C2  21C2               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 17940  0128C4  0100               	movlb	0	; () banked
 17941  0128C6  6FBF               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17942  0128C8  C0C3  F0C0         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 17943  0128CC  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 17944  0128D0  0100               	movlb	0	; () banked
 17945  0128D2  6FC5               	movwf	Port_SetPin@Type& (0+255),b
 17946                           
 17947                           ;Port.c: 250: switch (Type)
 17948  0128D4  D042               	goto	l427
 17949  0128D6                     
 17950                           ; BSR set to: 0
 17951                           ;Port.c: 256: pValue &= 1;
 17952                           
 17953                           ; BSR set to: 0
 17954  0128D6  0E01               	movlw	1
 17955  0128D8  0100               	movlb	0	; () banked
 17956  0128DA  17C4               	andwf	Port_SetPin@pValue& (0+255),f,b
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17960  0128DC  0100               	movlb	0	; () banked
 17961  0128DE  EE20 F002          	lfsr	2,2
 17962  0128E2  51C1               	movf	Port_SetPin@pInput& (0+255),w,b
 17963  0128E4  26D9               	addwf	fsr2l,f,c
 17964  0128E6  51C2               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17965  0128E8  22DA               	addwfc	fsr2h,f,c
 17966  0128EA  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 17967  0128EE  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 17968  0128F2  C0C3  F0B4         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17969  0128F6  C0C4  F0B5         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17970  0128FA  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 17971                           
 17972                           ;Port.c: 258: break;
 17973  0128FE  0012               	return	
 17974  012900                     
 17975                           ;Port.c: 261: pValue &= 1;
 17976  012900  0E01               	movlw	1
 17977  012902  0100               	movlb	0	; () banked
 17978  012904  17C4               	andwf	Port_SetPin@pValue& (0+255),f,b
 17979                           
 17980                           ;Port.c: 262: pValue ^= 1;
 17981  012906  0E01               	movlw	1
 17982  012908  0100               	movlb	0	; () banked
 17983  01290A  1BC4               	xorwf	Port_SetPin@pValue& (0+255),f,b
 17984                           
 17985                           ; BSR set to: 0
 17986                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17987  01290C  0100               	movlb	0	; () banked
 17988  01290E  EE20 F002          	lfsr	2,2
 17989  012912  51C1               	movf	Port_SetPin@pInput& (0+255),w,b
 17990  012914  26D9               	addwf	fsr2l,f,c
 17991  012916  51C2               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17992  012918  22DA               	addwfc	fsr2h,f,c
 17993  01291A  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 17994  01291E  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 17995  012922  C0C3  F0B4         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17996  012926  C0C4  F0B5         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17997  01292A  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 17998                           
 17999                           ;Port.c: 264: break;
 18000  01292E  0012               	return	
 18001  012930                     
 18002                           ;Port.c: 266: pValue &= 1;
 18003  012930  0E01               	movlw	1
 18004  012932  0100               	movlb	0	; () banked
 18005  012934  17C4               	andwf	Port_SetPin@pValue& (0+255),f,b
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 18009  012936  0100               	movlb	0	; () banked
 18010  012938  EE20 F004          	lfsr	2,4
 18011  01293C  51C1               	movf	Port_SetPin@pInput& (0+255),w,b
 18012  01293E  26D9               	addwf	fsr2l,f,c
 18013  012940  51C2               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18014  012942  22DA               	addwfc	fsr2h,f,c
 18015  012944  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 18016  012948  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 18017  01294C  C0C3  F0B4         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18018  012950  C0C4  F0B5         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18019  012954  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 18020                           
 18021                           ;Port.c: 269: }
 18022                           
 18023                           ;Port.c: 268: break;
 18024  012958  0012               	return	
 18025  01295A                     l427:
 18026  01295A  0100               	movlb	0	; () banked
 18027  01295C  51C5               	movf	Port_SetPin@Type& (0+255),w,b
 18028                           
 18029                           ; Switch size 1, requested type "space"
 18030                           ; Number of cases is 4, Range of values is 0 to 3
 18031                           ; switch strategies available:
 18032                           ; Name         Instructions Cycles
 18033                           ; simple_byte           13     7 (average)
 18034                           ;	Chosen strategy is simple_byte
 18035  01295E  0A00               	xorlw	0	; case 0
 18036  012960  B4D8               	btfsc	status,2,c
 18037  012962  0012               	return	
 18038  012964  0A01               	xorlw	1	; case 1
 18039  012966  B4D8               	btfsc	status,2,c
 18040  012968  D7B6               	goto	l430
 18041  01296A  0A03               	xorlw	3	; case 2
 18042  01296C  B4D8               	btfsc	status,2,c
 18043  01296E  D7C8               	goto	l432
 18044  012970  0A01               	xorlw	1	; case 3
 18045  012972  A4D8               	btfss	status,2,c
 18046  012974  0012               	return	
 18047  012976  D7DC               	goto	l433
 18048  012978                     __end_of_Port_SetPin:
 18049                           	opt stack 0
 18050                           tosu	equ	0xFFF
 18051                           tosh	equ	0xFFE
 18052                           tosl	equ	0xFFD
 18053                           pclath	equ	0xFFA
 18054                           tblptru	equ	0xFF8
 18055                           tblptrh	equ	0xFF7
 18056                           tblptrl	equ	0xFF6
 18057                           tablat	equ	0xFF5
 18058                           prodh	equ	0xFF4
 18059                           prodl	equ	0xFF3
 18060                           intcon	equ	0xFF2
 18061                           postinc0	equ	0xFEE
 18062                           plusw0	equ	0xFEB
 18063                           wreg	equ	0xFE8
 18064                           indf1	equ	0xFE7
 18065                           postdec1	equ	0xFE5
 18066                           fsr1h	equ	0xFE2
 18067                           fsr1l	equ	0xFE1
 18068                           indf2	equ	0xFDF
 18069                           postinc2	equ	0xFDE
 18070                           postdec2	equ	0xFDD
 18071                           plusw2	equ	0xFDB
 18072                           fsr2h	equ	0xFDA
 18073                           fsr2l	equ	0xFD9
 18074                           status	equ	0xFD8
 18075                           
 18076 ;; *************** function _Port_GetPin *****************
 18077 ;; Defined at:
 18078 ;;		line 271 in file "Library/Port.c"
 18079 ;; Parameters:    Size  Location     Type
 18080 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 18081 ;;		 -> PortB(10), PortE(10), PortC(10), 
 18082 ;;  pPin            1    2[BANK0 ] enum E6750
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;  Output          1    5[BANK0 ] unsigned char 
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  1    wreg      unsigned char 
 18087 ;; Registers used:
 18088 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18094 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;Total ram usage:        6 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; Hardware stack levels required when called:    7
 18101 ;; This function calls:
 18102 ;;		Nothing
 18103 ;; This function is called by:
 18104 ;;		_Port_TogglePin
 18105 ;;		_HMI_LeftSwitch
 18106 ;;		_HMI_RightSwitch
 18107 ;;		_HMI_UpSwitch
 18108 ;;		_HMI_DownSwitch
 18109 ;;		_MXK_TestButton
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           	psect	text103
 18114  014170                     __ptext103:
 18115                           	opt stack 0
 18116  014170                     _Port_GetPin:
 18117                           	opt stack 17
 18118                           
 18119                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 18120                           
 18121                           ;incstack = 0
 18122  014170  0100               	movlb	0	; () banked
 18123  014172  EE20 F006          	lfsr	2,6
 18124  014176  51B2               	movf	Port_GetPin@pInput& (0+255),w,b
 18125  014178  26D9               	addwf	fsr2l,f,c
 18126  01417A  51B3               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 18127  01417C  22DA               	addwfc	fsr2h,f,c
 18128  01417E  CFDE F0B5          	movff	postinc2,??_Port_GetPin
 18129  014182  CFDD F0B6          	movff	postdec2,??_Port_GetPin+1
 18130  014186  C0B5  FFD9         	movff	??_Port_GetPin,fsr2l
 18131  01418A  C0B6  FFDA         	movff	??_Port_GetPin+1,fsr2h
 18132  01418E  50DF               	movf	indf2,w,c
 18133  014190  0100               	movlb	0	; () banked
 18134  014192  6FB7               	movwf	Port_GetPin@Output& (0+255),b
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;Port.c: 274: Output >>= (UINT8)pPin;
 18138  014194  0100               	movlb	0	; () banked
 18139  014196  29B4               	incf	Port_GetPin@pPin& (0+255),w,b
 18140  014198  0100               	movlb	0	; () banked
 18141  01419A  6FB5               	movwf	??_Port_GetPin& (0+255),b
 18142  01419C  D003               	goto	u6530
 18143  01419E                     u6535:
 18144  01419E  0100               	movlb	0	; () banked
 18145  0141A0  90D8               	bcf	status,0,c
 18146  0141A2  33B7               	rrcf	Port_GetPin@Output& (0+255),f,b
 18147  0141A4                     u6530:
 18148  0141A4  0100               	movlb	0	; () banked
 18149  0141A6  2FB5               	decfsz	??_Port_GetPin& (0+255),f,b
 18150  0141A8  D7FA               	goto	u6535
 18151                           
 18152                           ;Port.c: 275: Output &= 1;
 18153  0141AA  0E01               	movlw	1
 18154  0141AC  0100               	movlb	0	; () banked
 18155  0141AE  17B7               	andwf	Port_GetPin@Output& (0+255),f,b
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;Port.c: 276: return Output;
 18159  0141B0  0100               	movlb	0	; () banked
 18160  0141B2  51B7               	movf	Port_GetPin@Output& (0+255),w,b
 18161  0141B4  0012               	return	
 18162  0141B6                     __end_of_Port_GetPin:
 18163                           	opt stack 0
 18164                           tosu	equ	0xFFF
 18165                           tosh	equ	0xFFE
 18166                           tosl	equ	0xFFD
 18167                           pclath	equ	0xFFA
 18168                           tblptru	equ	0xFF8
 18169                           tblptrh	equ	0xFF7
 18170                           tblptrl	equ	0xFF6
 18171                           tablat	equ	0xFF5
 18172                           prodh	equ	0xFF4
 18173                           prodl	equ	0xFF3
 18174                           intcon	equ	0xFF2
 18175                           postinc0	equ	0xFEE
 18176                           plusw0	equ	0xFEB
 18177                           wreg	equ	0xFE8
 18178                           indf1	equ	0xFE7
 18179                           postdec1	equ	0xFE5
 18180                           fsr1h	equ	0xFE2
 18181                           fsr1l	equ	0xFE1
 18182                           indf2	equ	0xFDF
 18183                           postinc2	equ	0xFDE
 18184                           postdec2	equ	0xFDD
 18185                           plusw2	equ	0xFDB
 18186                           fsr2h	equ	0xFDA
 18187                           fsr2l	equ	0xFD9
 18188                           status	equ	0xFD8
 18189                           
 18190 ;; *************** function _HMI_Init *****************
 18191 ;; Defined at:
 18192 ;;		line 104 in file "HMI.c"
 18193 ;; Parameters:    Size  Location     Type
 18194 ;;		None
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;  in              2   59[BANK0 ] unsigned short 
 18197 ;; Return value:  Size  Location     Type
 18198 ;;                  1    wreg      void 
 18199 ;; Registers used:
 18200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18210 ;;Total ram usage:        2 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:   16
 18213 ;; This function calls:
 18214 ;;		_Button_Init
 18215 ;;		_SPI_Init
 18216 ;;		_SPI_MinSpeed
 18217 ;; This function is called by:
 18218 ;;		_initialise
 18219 ;; This function uses a non-reentrant model
 18220 ;;
 18221                           
 18222                           	psect	text104
 18223  0113AE                     __ptext104:
 18224                           	opt stack 0
 18225  0113AE                     _HMI_Init:
 18226                           	opt stack 13
 18227                           
 18228                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18229                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;incstack = 0
 18233  0113AE  0E5A               	movlw	low (_HMIBoard+48)
 18234  0113B0  0101               	movlb	1	; () banked
 18235  0113B2  6FC8               	movwf	Button_Init@pInput& (0+255),b
 18236  0113B4  0E01               	movlw	high (_HMIBoard+48)
 18237  0113B6  0101               	movlb	1	; () banked
 18238  0113B8  6FC9               	movwf	(Button_Init@pInput+1)& (0+255),b
 18239  0113BA  0E00               	movlw	0
 18240  0113BC  0101               	movlb	1	; () banked
 18241  0113BE  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18242  0113C0  0E02               	movlw	2
 18243  0113C2  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 18244  0113C4  0ED0               	movlw	low _HMI_InitButtons
 18245  0113C6  0101               	movlb	1	; () banked
 18246  0113C8  6FCC               	movwf	Button_Init@pInitIO& (0+255),b
 18247  0113CA  0E4A               	movlw	high _HMI_InitButtons
 18248  0113CC  0101               	movlb	1	; () banked
 18249  0113CE  6FCD               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18250  0113D0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18251  0113D2  0101               	movlb	1	; () banked
 18252  0113D4  6FCE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18253  0113D6  0E28               	movlw	low _HMI_DIPSwitch
 18254  0113D8  0101               	movlb	1	; () banked
 18255  0113DA  6FCF               	movwf	Button_Init@pGetState& (0+255),b
 18256  0113DC  0E49               	movlw	high _HMI_DIPSwitch
 18257  0113DE  0101               	movlb	1	; () banked
 18258  0113E0  6FD0               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18259  0113E2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18260  0113E4  0101               	movlb	1	; () banked
 18261  0113E6  6FD1               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18262  0113E8  0E66               	movlw	low _Event_HMI_DIPSwitch
 18263  0113EA  0101               	movlb	1	; () banked
 18264  0113EC  6FD2               	movwf	Button_Init@pFunction& (0+255),b
 18265  0113EE  0E46               	movlw	high _Event_HMI_DIPSwitch
 18266  0113F0  0101               	movlb	1	; () banked
 18267  0113F2  6FD3               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18268  0113F4  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 18269  0113F6  0101               	movlb	1	; () banked
 18270  0113F8  6FD4               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18271  0113FA  EC20  F093         	call	_Button_Init	;wreg free
 18272                           
 18273                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18274                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 18275  0113FE  0E3C               	movlw	low (_HMIBoard+18)
 18276  011400  0101               	movlb	1	; () banked
 18277  011402  6FC8               	movwf	Button_Init@pInput& (0+255),b
 18278  011404  0E01               	movlw	high (_HMIBoard+18)
 18279  011406  0101               	movlb	1	; () banked
 18280  011408  6FC9               	movwf	(Button_Init@pInput+1)& (0+255),b
 18281  01140A  0E00               	movlw	0
 18282  01140C  0101               	movlb	1	; () banked
 18283  01140E  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18284  011410  0E02               	movlw	2
 18285  011412  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 18286  011414  0ED0               	movlw	low _HMI_InitButtons
 18287  011416  0101               	movlb	1	; () banked
 18288  011418  6FCC               	movwf	Button_Init@pInitIO& (0+255),b
 18289  01141A  0E4A               	movlw	high _HMI_InitButtons
 18290  01141C  0101               	movlb	1	; () banked
 18291  01141E  6FCD               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18292  011420  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18293  011422  0101               	movlb	1	; () banked
 18294  011424  6FCE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18295  011426  0E88               	movlw	low _HMI_LeftSwitch
 18296  011428  0101               	movlb	1	; () banked
 18297  01142A  6FCF               	movwf	Button_Init@pGetState& (0+255),b
 18298  01142C  0E49               	movlw	high _HMI_LeftSwitch
 18299  01142E  0101               	movlb	1	; () banked
 18300  011430  6FD0               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18301  011432  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18302  011434  0101               	movlb	1	; () banked
 18303  011436  6FD1               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18304  011438  0E58               	movlw	low _Event_HMI_LeftButton
 18305  01143A  0101               	movlb	1	; () banked
 18306  01143C  6FD2               	movwf	Button_Init@pFunction& (0+255),b
 18307  01143E  0E3E               	movlw	high _Event_HMI_LeftButton
 18308  011440  0101               	movlb	1	; () banked
 18309  011442  6FD3               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18310  011444  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 18311  011446  0101               	movlb	1	; () banked
 18312  011448  6FD4               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18313  01144A  EC20  F093         	call	_Button_Init	;wreg free
 18314                           
 18315                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18316                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 18317  01144E  0E32               	movlw	low (_HMIBoard+8)
 18318  011450  0101               	movlb	1	; () banked
 18319  011452  6FC8               	movwf	Button_Init@pInput& (0+255),b
 18320  011454  0E01               	movlw	high (_HMIBoard+8)
 18321  011456  0101               	movlb	1	; () banked
 18322  011458  6FC9               	movwf	(Button_Init@pInput+1)& (0+255),b
 18323  01145A  0E00               	movlw	0
 18324  01145C  0101               	movlb	1	; () banked
 18325  01145E  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18326  011460  0E02               	movlw	2
 18327  011462  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 18328  011464  0ED0               	movlw	low _HMI_InitButtons
 18329  011466  0101               	movlb	1	; () banked
 18330  011468  6FCC               	movwf	Button_Init@pInitIO& (0+255),b
 18331  01146A  0E4A               	movlw	high _HMI_InitButtons
 18332  01146C  0101               	movlb	1	; () banked
 18333  01146E  6FCD               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18334  011470  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18335  011472  0101               	movlb	1	; () banked
 18336  011474  6FCE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18337  011476  0E70               	movlw	low _HMI_RightSwitch
 18338  011478  0101               	movlb	1	; () banked
 18339  01147A  6FCF               	movwf	Button_Init@pGetState& (0+255),b
 18340  01147C  0E49               	movlw	high _HMI_RightSwitch
 18341  01147E  0101               	movlb	1	; () banked
 18342  011480  6FD0               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18343  011482  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 18344  011484  0101               	movlb	1	; () banked
 18345  011486  6FD1               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18346  011488  0EFC               	movlw	low _Event_HMI_RightButton
 18347  01148A  0101               	movlb	1	; () banked
 18348  01148C  6FD2               	movwf	Button_Init@pFunction& (0+255),b
 18349  01148E  0E41               	movlw	high _Event_HMI_RightButton
 18350  011490  0101               	movlb	1	; () banked
 18351  011492  6FD3               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18352  011494  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 18353  011496  0101               	movlb	1	; () banked
 18354  011498  6FD4               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18355  01149A  EC20  F093         	call	_Button_Init	;wreg free
 18356                           
 18357                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18358                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 18359  01149E  0E46               	movlw	low (_HMIBoard+28)
 18360  0114A0  0101               	movlb	1	; () banked
 18361  0114A2  6FC8               	movwf	Button_Init@pInput& (0+255),b
 18362  0114A4  0E01               	movlw	high (_HMIBoard+28)
 18363  0114A6  0101               	movlb	1	; () banked
 18364  0114A8  6FC9               	movwf	(Button_Init@pInput+1)& (0+255),b
 18365  0114AA  0E00               	movlw	0
 18366  0114AC  0101               	movlb	1	; () banked
 18367  0114AE  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18368  0114B0  0E02               	movlw	2
 18369  0114B2  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 18370  0114B4  0ED0               	movlw	low _HMI_InitButtons
 18371  0114B6  0101               	movlb	1	; () banked
 18372  0114B8  6FCC               	movwf	Button_Init@pInitIO& (0+255),b
 18373  0114BA  0E4A               	movlw	high _HMI_InitButtons
 18374  0114BC  0101               	movlb	1	; () banked
 18375  0114BE  6FCD               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18376  0114C0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18377  0114C2  0101               	movlb	1	; () banked
 18378  0114C4  6FCE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18379  0114C6  0E58               	movlw	low _HMI_UpSwitch
 18380  0114C8  0101               	movlb	1	; () banked
 18381  0114CA  6FCF               	movwf	Button_Init@pGetState& (0+255),b
 18382  0114CC  0E49               	movlw	high _HMI_UpSwitch
 18383  0114CE  0101               	movlb	1	; () banked
 18384  0114D0  6FD0               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18385  0114D2  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 18386  0114D4  0101               	movlb	1	; () banked
 18387  0114D6  6FD1               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18388  0114D8  0E78               	movlw	low _Event_HMI_UpButton
 18389  0114DA  0101               	movlb	1	; () banked
 18390  0114DC  6FD2               	movwf	Button_Init@pFunction& (0+255),b
 18391  0114DE  0E45               	movlw	high _Event_HMI_UpButton
 18392  0114E0  0101               	movlb	1	; () banked
 18393  0114E2  6FD3               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18394  0114E4  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 18395  0114E6  0101               	movlb	1	; () banked
 18396  0114E8  6FD4               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18397  0114EA  EC20  F093         	call	_Button_Init	;wreg free
 18398                           
 18399                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18400                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 18401  0114EE  0E50               	movlw	low (_HMIBoard+38)
 18402  0114F0  0101               	movlb	1	; () banked
 18403  0114F2  6FC8               	movwf	Button_Init@pInput& (0+255),b
 18404  0114F4  0E01               	movlw	high (_HMIBoard+38)
 18405  0114F6  0101               	movlb	1	; () banked
 18406  0114F8  6FC9               	movwf	(Button_Init@pInput+1)& (0+255),b
 18407  0114FA  0E00               	movlw	0
 18408  0114FC  0101               	movlb	1	; () banked
 18409  0114FE  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18410  011500  0E02               	movlw	2
 18411  011502  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 18412  011504  0ED0               	movlw	low _HMI_InitButtons
 18413  011506  0101               	movlb	1	; () banked
 18414  011508  6FCC               	movwf	Button_Init@pInitIO& (0+255),b
 18415  01150A  0E4A               	movlw	high _HMI_InitButtons
 18416  01150C  0101               	movlb	1	; () banked
 18417  01150E  6FCD               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18418  011510  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18419  011512  0101               	movlb	1	; () banked
 18420  011514  6FCE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18421  011516  0E40               	movlw	low _HMI_DownSwitch
 18422  011518  0101               	movlb	1	; () banked
 18423  01151A  6FCF               	movwf	Button_Init@pGetState& (0+255),b
 18424  01151C  0E49               	movlw	high _HMI_DownSwitch
 18425  01151E  0101               	movlb	1	; () banked
 18426  011520  6FD0               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18427  011522  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 18428  011524  0101               	movlb	1	; () banked
 18429  011526  6FD1               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18430  011528  0E46               	movlw	low _Event_HMI_DownButton
 18431  01152A  0101               	movlb	1	; () banked
 18432  01152C  6FD2               	movwf	Button_Init@pFunction& (0+255),b
 18433  01152E  0E45               	movlw	high _Event_HMI_DownButton
 18434  011530  0101               	movlb	1	; () banked
 18435  011532  6FD3               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18436  011534  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 18437  011536  0101               	movlb	1	; () banked
 18438  011538  6FD4               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18439  01153A  EC20  F093         	call	_Button_Init	;wreg free
 18440                           
 18441                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18442  01153E  0EA0               	movlw	160
 18443  011540  0100               	movlb	0	; () banked
 18444  011542  6FDF               	movwf	SPI_Init@pClock& (0+255),b
 18445  011544  0E86               	movlw	134
 18446  011546  6FE0               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18447  011548  0E01               	movlw	1
 18448  01154A  6FE1               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18449  01154C  0E00               	movlw	0
 18450  01154E  6FE2               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18451  011550  0E00               	movlw	0
 18452  011552  0100               	movlb	0	; () banked
 18453  011554  6FE3               	movwf	SPI_Init@pChannel& (0+255),b
 18454  011556  0E02               	movlw	2
 18455  011558  0100               	movlb	0	; () banked
 18456  01155A  6FE4               	movwf	SPI_Init@pMode& (0+255),b
 18457  01155C  EC00  F080         	call	_SPI_Init	;wreg free
 18458                           
 18459                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18460  011560  0E64               	movlw	low _SPI1
 18461  011562  0100               	movlb	0	; () banked
 18462  011564  6FC1               	movwf	SPI_MinSpeed@pInput& (0+255),b
 18463  011566  0E01               	movlw	high _SPI1
 18464  011568  0100               	movlb	0	; () banked
 18465  01156A  6FC2               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18466  01156C  EC5A  F09C         	call	_SPI_MinSpeed	;wreg free
 18467                           
 18468                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18469  011570  0E00               	movlw	0
 18470  011572  0100               	movlb	0	; () banked
 18471  011574  6FEE               	movwf	(HMI_Init@in+1)& (0+255),b
 18472  011576  0E00               	movlw	0
 18473  011578  6FED               	movwf	HMI_Init@in& (0+255),b
 18474  01157A                     l11826:
 18475                           
 18476                           ; BSR set to: 0
 18477  01157A  0100               	movlb	0	; () banked
 18478  01157C  51EE               	movf	(HMI_Init@in+1)& (0+255),w,b
 18479  01157E  E113               	bnz	l1161
 18480  011580  0E08               	movlw	8
 18481  011582  0100               	movlb	0	; () banked
 18482  011584  5DED               	subwf	HMI_Init@in& (0+255),w,b
 18483  011586  B0D8               	btfsc	status,0,c
 18484  011588  0012               	return	
 18485                           
 18486                           ; BSR set to: 0
 18487                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18488                           
 18489                           ; BSR set to: 0
 18490                           
 18491                           ; BSR set to: 0
 18492  01158A  0E2A               	movlw	low _HMIBoard
 18493  01158C  0100               	movlb	0	; () banked
 18494  01158E  25ED               	addwf	HMI_Init@in& (0+255),w,b
 18495  011590  6ED9               	movwf	fsr2l,c
 18496  011592  0E01               	movlw	high _HMIBoard
 18497  011594  0100               	movlb	0	; () banked
 18498  011596  21EE               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18499  011598  6EDA               	movwf	fsr2h,c
 18500  01159A  0E00               	movlw	0
 18501  01159C  6EDF               	movwf	indf2,c
 18502                           
 18503                           ; BSR set to: 0
 18504  01159E  0100               	movlb	0	; () banked
 18505  0115A0  4BED               	infsnz	HMI_Init@in& (0+255),f,b
 18506  0115A2  2BEE               	incf	(HMI_Init@in+1)& (0+255),f,b
 18507  0115A4  D7EA               	goto	l11826
 18508  0115A6                     l1161:
 18509                           
 18510                           ; BSR set to: 0
 18511  0115A6  0012               	return		;funcret
 18512  0115A8                     __end_of_HMI_Init:
 18513                           	opt stack 0
 18514                           tosu	equ	0xFFF
 18515                           tosh	equ	0xFFE
 18516                           tosl	equ	0xFFD
 18517                           pclath	equ	0xFFA
 18518                           tblptru	equ	0xFF8
 18519                           tblptrh	equ	0xFF7
 18520                           tblptrl	equ	0xFF6
 18521                           tablat	equ	0xFF5
 18522                           prodh	equ	0xFF4
 18523                           prodl	equ	0xFF3
 18524                           intcon	equ	0xFF2
 18525                           postinc0	equ	0xFEE
 18526                           plusw0	equ	0xFEB
 18527                           wreg	equ	0xFE8
 18528                           indf1	equ	0xFE7
 18529                           postdec1	equ	0xFE5
 18530                           fsr1h	equ	0xFE2
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           postdec2	equ	0xFDD
 18535                           plusw2	equ	0xFDB
 18536                           fsr2h	equ	0xFDA
 18537                           fsr2l	equ	0xFD9
 18538                           status	equ	0xFD8
 18539                           
 18540 ;; *************** function _SPI_MinSpeed *****************
 18541 ;; Defined at:
 18542 ;;		line 190 in file "Library/SPI.c"
 18543 ;; Parameters:    Size  Location     Type
 18544 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18545 ;;		 -> SPI1(11), 
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;		None
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  1    wreg      void 
 18550 ;; Registers used:
 18551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        2 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    9
 18564 ;; This function calls:
 18565 ;;		_Byte_SetBit
 18566 ;;		_Byte_SetQuad
 18567 ;; This function is called by:
 18568 ;;		_HMI_Init
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           	psect	text105
 18573  0138B4                     __ptext105:
 18574                           	opt stack 0
 18575  0138B4                     _SPI_MinSpeed:
 18576                           	opt stack 19
 18577                           
 18578                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18579                           
 18580                           ; BSR set to: 0
 18581                           ;incstack = 0
 18582  0138B4  0100               	movlb	0	; () banked
 18583  0138B6  EE20 F006          	lfsr	2,6
 18584  0138BA  51C1               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18585  0138BC  26D9               	addwf	fsr2l,f,c
 18586  0138BE  51C2               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18587  0138C0  22DA               	addwfc	fsr2h,f,c
 18588  0138C2  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 18589  0138C6  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 18590  0138CA  0E05               	movlw	5
 18591  0138CC  0100               	movlb	0	; () banked
 18592  0138CE  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 18593  0138D0  0E00               	movlw	0
 18594  0138D2  0100               	movlb	0	; () banked
 18595  0138D4  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 18596  0138D6  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 18597                           
 18598                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 18599  0138DA  0100               	movlb	0	; () banked
 18600  0138DC  EE20 F006          	lfsr	2,6
 18601  0138E0  51C1               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18602  0138E2  26D9               	addwf	fsr2l,f,c
 18603  0138E4  51C2               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18604  0138E6  22DA               	addwfc	fsr2h,f,c
 18605  0138E8  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 18606  0138EC  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 18607  0138F0  0E00               	movlw	0
 18608  0138F2  0100               	movlb	0	; () banked
 18609  0138F4  6FBF               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18610  0138F6  0E02               	movlw	2
 18611  0138F8  0100               	movlb	0	; () banked
 18612  0138FA  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 18613  0138FC  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 18614                           
 18615                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18616  013900  0100               	movlb	0	; () banked
 18617  013902  EE20 F006          	lfsr	2,6
 18618  013906  51C1               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18619  013908  26D9               	addwf	fsr2l,f,c
 18620  01390A  51C2               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18621  01390C  22DA               	addwfc	fsr2h,f,c
 18622  01390E  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 18623  013912  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 18624  013916  0E05               	movlw	5
 18625  013918  0100               	movlb	0	; () banked
 18626  01391A  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 18627  01391C  0E01               	movlw	1
 18628  01391E  0100               	movlb	0	; () banked
 18629  013920  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 18630  013922  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 18631  013926  0012               	return		;funcret
 18632  013928                     __end_of_SPI_MinSpeed:
 18633                           	opt stack 0
 18634                           tosu	equ	0xFFF
 18635                           tosh	equ	0xFFE
 18636                           tosl	equ	0xFFD
 18637                           pclath	equ	0xFFA
 18638                           tblptru	equ	0xFF8
 18639                           tblptrh	equ	0xFF7
 18640                           tblptrl	equ	0xFF6
 18641                           tablat	equ	0xFF5
 18642                           prodh	equ	0xFF4
 18643                           prodl	equ	0xFF3
 18644                           intcon	equ	0xFF2
 18645                           postinc0	equ	0xFEE
 18646                           plusw0	equ	0xFEB
 18647                           wreg	equ	0xFE8
 18648                           indf1	equ	0xFE7
 18649                           postdec1	equ	0xFE5
 18650                           fsr1h	equ	0xFE2
 18651                           fsr1l	equ	0xFE1
 18652                           indf2	equ	0xFDF
 18653                           postinc2	equ	0xFDE
 18654                           postdec2	equ	0xFDD
 18655                           plusw2	equ	0xFDB
 18656                           fsr2h	equ	0xFDA
 18657                           fsr2l	equ	0xFD9
 18658                           status	equ	0xFD8
 18659                           
 18660 ;; *************** function _SPI_Init *****************
 18661 ;; Defined at:
 18662 ;;		line 12 in file "Library/SPI.c"
 18663 ;; Parameters:    Size  Location     Type
 18664 ;;  pClock          4   45[BANK0 ] unsigned long 
 18665 ;;  pChannel        1   49[BANK0 ] enum E6744
 18666 ;;  pMode           1   50[BANK0 ] enum E6748
 18667 ;; Auto vars:     Size  Location     Type
 18668 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 18669 ;;		 -> SPI1(11), SPI2(11), 
 18670 ;; Return value:  Size  Location     Type
 18671 ;;                  1    wreg      void 
 18672 ;; Registers used:
 18673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18674 ;; Tracked objects:
 18675 ;;		On entry : 0/0
 18676 ;;		On exit  : 0/0
 18677 ;;		Unchanged: 0/0
 18678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18679 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18682 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18683 ;;Total ram usage:        8 bytes
 18684 ;; Hardware stack levels used:    1
 18685 ;; Hardware stack levels required when called:   12
 18686 ;; This function calls:
 18687 ;;		_Byte_SetBit
 18688 ;;		_Byte_SetQuad
 18689 ;;		_Port_SetPinType
 18690 ;;		_SPI_DCS
 18691 ;;		_SPI_DisableISR
 18692 ;;		_Timer2_Init
 18693 ;; This function is called by:
 18694 ;;		_Configure_GPIOs
 18695 ;;		_HMI_Init
 18696 ;; This function uses a non-reentrant model
 18697 ;;
 18698                           
 18699                           	psect	text106
 18700  010000                     __ptext106:
 18701                           	opt stack 0
 18702  010000                     _SPI_Init:
 18703                           	opt stack 15
 18704                           
 18705                           ;SPI.c: 14: SPIPtr pInput;
 18706                           ;SPI.c: 16: switch (pChannel)
 18707                           
 18708                           ;incstack = 0
 18709  010000  D00C               	goto	l597
 18710  010002                     
 18711                           ;SPI.c: 19: pInput = &SPI1;
 18712  010002  0E64               	movlw	low _SPI1
 18713  010004  0100               	movlb	0	; () banked
 18714  010006  6FE5               	movwf	SPI_Init@pInput& (0+255),b
 18715  010008  0E01               	movlw	high _SPI1
 18716  01000A  D004               	goto	L6
 18717  01000C                     
 18718                           ; BSR set to: 0
 18719                           ;SPI.c: 22: pInput = &SPI2;
 18720                           
 18721                           ; BSR set to: 0
 18722  01000C  0E6F               	movlw	low _SPI2
 18723  01000E  0100               	movlb	0	; () banked
 18724  010010  6FE5               	movwf	SPI_Init@pInput& (0+255),b
 18725  010012  0E01               	movlw	high _SPI2
 18726  010014                     L6:
 18727  010014  0100               	movlb	0	; () banked
 18728  010016  6FE6               	movwf	(SPI_Init@pInput+1)& (0+255),b
 18729                           
 18730                           ; BSR set to: 0
 18731                           ;SPI.c: 24: };
 18732                           
 18733                           ;SPI.c: 23: break;
 18734  010018  D008               	goto	l599
 18735  01001A                     l597:
 18736                           
 18737                           ; BSR set to: 0
 18738  01001A  0100               	movlb	0	; () banked
 18739  01001C  51E3               	movf	SPI_Init@pChannel& (0+255),w,b
 18740                           
 18741                           ; Switch size 1, requested type "space"
 18742                           ; Number of cases is 2, Range of values is 0 to 1
 18743                           ; switch strategies available:
 18744                           ; Name         Instructions Cycles
 18745                           ; simple_byte            7     4 (average)
 18746                           ;	Chosen strategy is simple_byte
 18747  01001E  0A00               	xorlw	0	; case 0
 18748  010020  B4D8               	btfsc	status,2,c
 18749  010022  D7EF               	goto	l598
 18750  010024  0A01               	xorlw	1	; case 1
 18751  010026  B4D8               	btfsc	status,2,c
 18752  010028  D7F1               	goto	l600
 18753  01002A                     l599:
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;SPI.c: 26: pInput->mChannel = pChannel;
 18757                           
 18758                           ; BSR set to: 0
 18759  01002A  0100               	movlb	0	; () banked
 18760  01002C  EE20 F002          	lfsr	2,2
 18761  010030  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18762  010032  26D9               	addwf	fsr2l,f,c
 18763  010034  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18764  010036  22DA               	addwfc	fsr2h,f,c
 18765  010038  C0E3  FFDF         	movff	SPI_Init@pChannel,indf2
 18766                           
 18767                           ;SPI.c: 35: switch (pChannel)
 18768  01003C  D0B1               	goto	l601
 18769  01003E                     
 18770                           ; BSR set to: 0
 18771                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 18772                           
 18773                           ; BSR set to: 0
 18774  01003E  0E91               	movlw	low _PortC
 18775  010040  0100               	movlb	0	; () banked
 18776  010042  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18777  010044  0E00               	movlw	high _PortC
 18778  010046  0100               	movlb	0	; () banked
 18779  010048  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18780  01004A  0E02               	movlw	2
 18781  01004C  0100               	movlb	0	; () banked
 18782  01004E  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18783  010050  0E03               	movlw	3
 18784  010052  0100               	movlb	0	; () banked
 18785  010054  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18786  010056  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18787                           
 18788                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 18789  01005A  0E91               	movlw	low _PortC
 18790  01005C  0100               	movlb	0	; () banked
 18791  01005E  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18792  010060  0E00               	movlw	high _PortC
 18793  010062  0100               	movlb	0	; () banked
 18794  010064  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18795  010066  0E03               	movlw	3
 18796  010068  0100               	movlb	0	; () banked
 18797  01006A  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18798  01006C  0E03               	movlw	3
 18799  01006E  0100               	movlb	0	; () banked
 18800  010070  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18801  010072  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18802                           
 18803                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 18804  010076  0E91               	movlw	low _PortC
 18805  010078  0100               	movlb	0	; () banked
 18806  01007A  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18807  01007C  0E00               	movlw	high _PortC
 18808  01007E  0100               	movlb	0	; () banked
 18809  010080  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18810  010082  0E05               	movlw	5
 18811  010084  0100               	movlb	0	; () banked
 18812  010086  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18813  010088  0E03               	movlw	3
 18814  01008A  0100               	movlb	0	; () banked
 18815  01008C  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18816  01008E  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18817                           
 18818                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 18819  010092  0E91               	movlw	low _PortC
 18820  010094  0100               	movlb	0	; () banked
 18821  010096  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18822  010098  0E00               	movlw	high _PortC
 18823  01009A  0100               	movlb	0	; () banked
 18824  01009C  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18825  01009E  0E04               	movlw	4
 18826  0100A0  0100               	movlb	0	; () banked
 18827  0100A2  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18828  0100A4  0E00               	movlw	0
 18829  0100A6  0100               	movlb	0	; () banked
 18830  0100A8  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18831  0100AA  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18832                           
 18833                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 18834  0100AE  0100               	movlb	0	; () banked
 18835  0100B0  EE20 F003          	lfsr	2,3
 18836  0100B4  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18837  0100B6  26D9               	addwf	fsr2l,f,c
 18838  0100B8  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18839  0100BA  22DA               	addwfc	fsr2h,f,c
 18840  0100BC  0EC7               	movlw	199
 18841  0100BE  6EDE               	movwf	postinc2,c
 18842  0100C0  0E0F               	movlw	15
 18843  0100C2  6EDD               	movwf	postdec2,c
 18844                           
 18845                           ; BSR set to: 0
 18846                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 18847  0100C4  0100               	movlb	0	; () banked
 18848  0100C6  EE20 F006          	lfsr	2,6
 18849  0100CA  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18850  0100CC  26D9               	addwf	fsr2l,f,c
 18851  0100CE  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18852  0100D0  22DA               	addwfc	fsr2h,f,c
 18853  0100D2  0EC6               	movlw	198
 18854  0100D4  6EDE               	movwf	postinc2,c
 18855  0100D6  0E0F               	movlw	15
 18856  0100D8  6EDD               	movwf	postdec2,c
 18857                           
 18858                           ; BSR set to: 0
 18859                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 18860  0100DA  0100               	movlb	0	; () banked
 18861  0100DC  EE20 F009          	lfsr	2,9
 18862  0100E0  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18863  0100E2  26D9               	addwf	fsr2l,f,c
 18864  0100E4  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18865  0100E6  22DA               	addwfc	fsr2h,f,c
 18866  0100E8  0EC9               	movlw	201
 18867  0100EA  D056               	goto	L7
 18868  0100EC                     
 18869                           ; BSR set to: 0
 18870                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 18871                           
 18872                           ; BSR set to: 0
 18873  0100EC  0E87               	movlw	low _PortD
 18874  0100EE  0100               	movlb	0	; () banked
 18875  0100F0  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18876  0100F2  0E00               	movlw	high _PortD
 18877  0100F4  0100               	movlb	0	; () banked
 18878  0100F6  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18879  0100F8  0E07               	movlw	7
 18880  0100FA  0100               	movlb	0	; () banked
 18881  0100FC  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18882  0100FE  0E03               	movlw	3
 18883  010100  0100               	movlb	0	; () banked
 18884  010102  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18885  010104  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18886                           
 18887                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 18888  010108  0E87               	movlw	low _PortD
 18889  01010A  0100               	movlb	0	; () banked
 18890  01010C  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18891  01010E  0E00               	movlw	high _PortD
 18892  010110  0100               	movlb	0	; () banked
 18893  010112  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18894  010114  0E06               	movlw	6
 18895  010116  0100               	movlb	0	; () banked
 18896  010118  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18897  01011A  0E03               	movlw	3
 18898  01011C  0100               	movlb	0	; () banked
 18899  01011E  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18900  010120  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18901                           
 18902                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 18903  010124  0E87               	movlw	low _PortD
 18904  010126  0100               	movlb	0	; () banked
 18905  010128  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18906  01012A  0E00               	movlw	high _PortD
 18907  01012C  0100               	movlb	0	; () banked
 18908  01012E  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18909  010130  0E04               	movlw	4
 18910  010132  0100               	movlb	0	; () banked
 18911  010134  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18912  010136  0E03               	movlw	3
 18913  010138  0100               	movlb	0	; () banked
 18914  01013A  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18915  01013C  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18916                           
 18917                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 18918  010140  0E87               	movlw	low _PortD
 18919  010142  0100               	movlb	0	; () banked
 18920  010144  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 18921  010146  0E00               	movlw	high _PortD
 18922  010148  0100               	movlb	0	; () banked
 18923  01014A  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18924  01014C  0E05               	movlw	5
 18925  01014E  0100               	movlb	0	; () banked
 18926  010150  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 18927  010152  0E00               	movlw	0
 18928  010154  0100               	movlb	0	; () banked
 18929  010156  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 18930  010158  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 18931                           
 18932                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 18933  01015C  0100               	movlb	0	; () banked
 18934  01015E  EE20 F003          	lfsr	2,3
 18935  010162  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18936  010164  26D9               	addwf	fsr2l,f,c
 18937  010166  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18938  010168  22DA               	addwfc	fsr2h,f,c
 18939  01016A  0E6D               	movlw	109
 18940  01016C  6EDE               	movwf	postinc2,c
 18941  01016E  0E0F               	movlw	15
 18942  010170  6EDD               	movwf	postdec2,c
 18943                           
 18944                           ; BSR set to: 0
 18945                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 18946  010172  0100               	movlb	0	; () banked
 18947  010174  EE20 F006          	lfsr	2,6
 18948  010178  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18949  01017A  26D9               	addwf	fsr2l,f,c
 18950  01017C  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18951  01017E  22DA               	addwfc	fsr2h,f,c
 18952  010180  0E6C               	movlw	108
 18953  010182  6EDE               	movwf	postinc2,c
 18954  010184  0E0F               	movlw	15
 18955  010186  6EDD               	movwf	postdec2,c
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 18959  010188  0100               	movlb	0	; () banked
 18960  01018A  EE20 F009          	lfsr	2,9
 18961  01018E  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 18962  010190  26D9               	addwf	fsr2l,f,c
 18963  010192  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18964  010194  22DA               	addwfc	fsr2h,f,c
 18965  010196  0E6F               	movlw	111
 18966  010198                     L7:
 18967  010198  6EDE               	movwf	postinc2,c
 18968  01019A  0E0F               	movlw	15
 18969  01019C  6EDD               	movwf	postdec2,c
 18970                           
 18971                           ;SPI.c: 68: break;
 18972  01019E  D009               	goto	l603
 18973  0101A0                     l601:
 18974                           
 18975                           ; BSR set to: 0
 18976                           
 18977                           ; BSR set to: 0
 18978  0101A0  0100               	movlb	0	; () banked
 18979  0101A2  51E3               	movf	SPI_Init@pChannel& (0+255),w,b
 18980                           
 18981                           ; Switch size 1, requested type "space"
 18982                           ; Number of cases is 2, Range of values is 0 to 1
 18983                           ; switch strategies available:
 18984                           ; Name         Instructions Cycles
 18985                           ; simple_byte            7     4 (average)
 18986                           ;	Chosen strategy is simple_byte
 18987  0101A4  0A00               	xorlw	0	; case 0
 18988  0101A6  B4D8               	btfsc	status,2,c
 18989  0101A8  D74A               	goto	l602
 18990  0101AA  0A01               	xorlw	1	; case 1
 18991  0101AC  A4D8               	btfss	status,2,c
 18992  0101AE  0012               	return	
 18993  0101B0  D79D               	goto	l604
 18994  0101B2                     l603:
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18998                           
 18999                           ; BSR set to: 0
 19000  0101B2  0100               	movlb	0	; () banked
 19001  0101B4  EE20 F006          	lfsr	2,6
 19002  0101B8  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19003  0101BA  26D9               	addwf	fsr2l,f,c
 19004  0101BC  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19005  0101BE  22DA               	addwfc	fsr2h,f,c
 19006  0101C0  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19007  0101C4  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19008  0101C8  0E05               	movlw	5
 19009  0101CA  0100               	movlb	0	; () banked
 19010  0101CC  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19011  0101CE  0E00               	movlw	0
 19012  0101D0  0100               	movlb	0	; () banked
 19013  0101D2  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19014  0101D4  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19015                           
 19016                           ;SPI.c: 77: switch(pMode)
 19017  0101D8  D09C               	goto	l607
 19018  0101DA                     
 19019                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19020  0101DA  0100               	movlb	0	; () banked
 19021  0101DC  EE20 F006          	lfsr	2,6
 19022  0101E0  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19023  0101E2  26D9               	addwf	fsr2l,f,c
 19024  0101E4  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19025  0101E6  22DA               	addwfc	fsr2h,f,c
 19026  0101E8  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19027  0101EC  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19028  0101F0  0E04               	movlw	4
 19029  0101F2  0100               	movlb	0	; () banked
 19030  0101F4  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19031  0101F6  0E00               	movlw	0
 19032  0101F8  0100               	movlb	0	; () banked
 19033  0101FA  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19034  0101FC  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19035                           
 19036                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19037  010200  0100               	movlb	0	; () banked
 19038  010202  EE20 F003          	lfsr	2,3
 19039  010206  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19040  010208  26D9               	addwf	fsr2l,f,c
 19041  01020A  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19042  01020C  22DA               	addwfc	fsr2h,f,c
 19043  01020E  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19044  010212  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19045  010216  0E06               	movlw	6
 19046  010218  0100               	movlb	0	; () banked
 19047  01021A  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19048  01021C  0E00               	movlw	0
 19049  01021E  0100               	movlb	0	; () banked
 19050  010220  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19051  010222  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19052                           
 19053                           ;SPI.c: 82: break;
 19054  010226  D084               	goto	l609
 19055  010228                     
 19056                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19057  010228  0100               	movlb	0	; () banked
 19058  01022A  EE20 F006          	lfsr	2,6
 19059  01022E  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19060  010230  26D9               	addwf	fsr2l,f,c
 19061  010232  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19062  010234  22DA               	addwfc	fsr2h,f,c
 19063  010236  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19064  01023A  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19065  01023E  0E04               	movlw	4
 19066  010240  0100               	movlb	0	; () banked
 19067  010242  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19068  010244  0E00               	movlw	0
 19069  010246  0100               	movlb	0	; () banked
 19070  010248  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19071  01024A  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19072                           
 19073                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19074  01024E  0100               	movlb	0	; () banked
 19075  010250  EE20 F003          	lfsr	2,3
 19076  010254  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19077  010256  26D9               	addwf	fsr2l,f,c
 19078  010258  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19079  01025A  22DA               	addwfc	fsr2h,f,c
 19080  01025C  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19081  010260  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19082  010264  0E06               	movlw	6
 19083  010266  0100               	movlb	0	; () banked
 19084  010268  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19085  01026A  0E01               	movlw	1
 19086  01026C  0100               	movlb	0	; () banked
 19087  01026E  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19088  010270  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19089                           
 19090                           ;SPI.c: 86: break;
 19091  010274  D05D               	goto	l609
 19092  010276                     
 19093                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19094  010276  0100               	movlb	0	; () banked
 19095  010278  EE20 F006          	lfsr	2,6
 19096  01027C  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19097  01027E  26D9               	addwf	fsr2l,f,c
 19098  010280  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19099  010282  22DA               	addwfc	fsr2h,f,c
 19100  010284  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19101  010288  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19102  01028C  0E04               	movlw	4
 19103  01028E  0100               	movlb	0	; () banked
 19104  010290  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19105  010292  0E01               	movlw	1
 19106  010294  0100               	movlb	0	; () banked
 19107  010296  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19108  010298  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19109                           
 19110                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19111  01029C  0100               	movlb	0	; () banked
 19112  01029E  EE20 F003          	lfsr	2,3
 19113  0102A2  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19114  0102A4  26D9               	addwf	fsr2l,f,c
 19115  0102A6  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19116  0102A8  22DA               	addwfc	fsr2h,f,c
 19117  0102AA  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19118  0102AE  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19119  0102B2  0E06               	movlw	6
 19120  0102B4  0100               	movlb	0	; () banked
 19121  0102B6  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19122  0102B8  0E00               	movlw	0
 19123  0102BA  0100               	movlb	0	; () banked
 19124  0102BC  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19125  0102BE  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19126                           
 19127                           ;SPI.c: 90: break;
 19128  0102C2  D036               	goto	l609
 19129  0102C4                     
 19130                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19131  0102C4  0100               	movlb	0	; () banked
 19132  0102C6  EE20 F006          	lfsr	2,6
 19133  0102CA  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19134  0102CC  26D9               	addwf	fsr2l,f,c
 19135  0102CE  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19136  0102D0  22DA               	addwfc	fsr2h,f,c
 19137  0102D2  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19138  0102D6  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19139  0102DA  0E04               	movlw	4
 19140  0102DC  0100               	movlb	0	; () banked
 19141  0102DE  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19142  0102E0  0E01               	movlw	1
 19143  0102E2  0100               	movlb	0	; () banked
 19144  0102E4  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19145  0102E6  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19146                           
 19147                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19148  0102EA  0100               	movlb	0	; () banked
 19149  0102EC  EE20 F003          	lfsr	2,3
 19150  0102F0  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19151  0102F2  26D9               	addwf	fsr2l,f,c
 19152  0102F4  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19153  0102F6  22DA               	addwfc	fsr2h,f,c
 19154  0102F8  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19155  0102FC  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19156  010300  0E06               	movlw	6
 19157  010302  0100               	movlb	0	; () banked
 19158  010304  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19159  010306  0E01               	movlw	1
 19160  010308  0100               	movlb	0	; () banked
 19161  01030A  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19162  01030C  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19163                           
 19164                           ;SPI.c: 94: break;
 19165  010310  D00F               	goto	l609
 19166  010312                     l607:
 19167  010312  0100               	movlb	0	; () banked
 19168  010314  51E4               	movf	SPI_Init@pMode& (0+255),w,b
 19169                           
 19170                           ; Switch size 1, requested type "space"
 19171                           ; Number of cases is 4, Range of values is 0 to 3
 19172                           ; switch strategies available:
 19173                           ; Name         Instructions Cycles
 19174                           ; simple_byte           13     7 (average)
 19175                           ;	Chosen strategy is simple_byte
 19176  010316  0A00               	xorlw	0	; case 0
 19177  010318  B4D8               	btfsc	status,2,c
 19178  01031A  D75F               	goto	l608
 19179  01031C  0A01               	xorlw	1	; case 1
 19180  01031E  B4D8               	btfsc	status,2,c
 19181  010320  D783               	goto	l610
 19182  010322  0A03               	xorlw	3	; case 2
 19183  010324  B4D8               	btfsc	status,2,c
 19184  010326  D7A7               	goto	l611
 19185  010328  0A01               	xorlw	1	; case 3
 19186  01032A  A4D8               	btfss	status,2,c
 19187  01032C  0012               	return	
 19188  01032E  D7CA               	goto	l612
 19189  010330                     l609:
 19190                           
 19191                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19192                           
 19193                           ; BSR set to: 0
 19194  010330  0100               	movlb	0	; () banked
 19195  010332  EE20 F006          	lfsr	2,6
 19196  010336  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19197  010338  26D9               	addwf	fsr2l,f,c
 19198  01033A  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19199  01033C  22DA               	addwfc	fsr2h,f,c
 19200  01033E  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19201  010342  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19202  010346  0E07               	movlw	7
 19203  010348  0100               	movlb	0	; () banked
 19204  01034A  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19205  01034C  0E00               	movlw	0
 19206  01034E  0100               	movlb	0	; () banked
 19207  010350  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19208  010352  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19209                           
 19210                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19211  010356  0100               	movlb	0	; () banked
 19212  010358  EE20 F006          	lfsr	2,6
 19213  01035C  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19214  01035E  26D9               	addwf	fsr2l,f,c
 19215  010360  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19216  010362  22DA               	addwfc	fsr2h,f,c
 19217  010364  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19218  010368  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19219  01036C  0E06               	movlw	6
 19220  01036E  0100               	movlb	0	; () banked
 19221  010370  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19222  010372  0E00               	movlw	0
 19223  010374  0100               	movlb	0	; () banked
 19224  010376  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19225  010378  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19226                           
 19227                           ;SPI.c: 106: Timer2_Init(pClock);
 19228  01037C  C0DF  F0BF         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19229  010380  C0E0  F0C0         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19230  010384  C0E1  F0C1         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19231  010388  C0E2  F0C2         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19232  01038C  ECF1  F090         	call	_Timer2_Init	;wreg free
 19233                           
 19234                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19235  010390  C0E5  F0B2         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19236  010394  C0E6  F0B3         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19237  010398  EC87  F0A3         	call	_SPI_DisableISR	;wreg free
 19238                           
 19239                           ;SPI.c: 116: switch (pChannel)
 19240  01039C  D004               	goto	l614
 19241  01039E                     l615:
 19242                           
 19243                           ; BSR set to: 0
 19244  01039E  869F               	bsf	3999,3,c	;volatile
 19245  0103A0  D00B               	goto	l616
 19246  0103A2                     l617:
 19247                           
 19248                           ; BSR set to: 0
 19249  0103A2  8EA5               	bsf	4005,7,c	;volatile
 19250  0103A4  D009               	goto	l616
 19251  0103A6                     l614:
 19252                           
 19253                           ; BSR set to: 0
 19254  0103A6  0100               	movlb	0	; () banked
 19255  0103A8  51E3               	movf	SPI_Init@pChannel& (0+255),w,b
 19256                           
 19257                           ; Switch size 1, requested type "space"
 19258                           ; Number of cases is 2, Range of values is 0 to 1
 19259                           ; switch strategies available:
 19260                           ; Name         Instructions Cycles
 19261                           ; simple_byte            7     4 (average)
 19262                           ;	Chosen strategy is simple_byte
 19263  0103AA  0A00               	xorlw	0	; case 0
 19264  0103AC  B4D8               	btfsc	status,2,c
 19265  0103AE  D7F7               	goto	l615
 19266  0103B0  0A01               	xorlw	1	; case 1
 19267  0103B2  A4D8               	btfss	status,2,c
 19268  0103B4  0012               	return	
 19269  0103B6  D7F5               	goto	l617
 19270  0103B8                     l616:
 19271                           
 19272                           ; BSR set to: 0
 19273                           ;SPI.c: 124: SPI_DCS(pInput);
 19274                           
 19275                           ; BSR set to: 0
 19276  0103B8  C0E5  F0B2         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19277  0103BC  C0E6  F0B3         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19278  0103C0  ECEC  F0A2         	call	_SPI_DCS	;wreg free
 19279                           
 19280                           ;SPI.c: 126: pInput->mBusy = 0;
 19281  0103C4  C0E5  FFD9         	movff	SPI_Init@pInput,fsr2l
 19282  0103C8  C0E6  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19283  0103CC  0E00               	movlw	0
 19284  0103CE  6EDF               	movwf	indf2,c
 19285                           
 19286                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19287  0103D0  0100               	movlb	0	; () banked
 19288  0103D2  EE20 F006          	lfsr	2,6
 19289  0103D6  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19290  0103D8  26D9               	addwf	fsr2l,f,c
 19291  0103DA  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19292  0103DC  22DA               	addwfc	fsr2h,f,c
 19293  0103DE  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 19294  0103E2  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 19295  0103E6  0E00               	movlw	0
 19296  0103E8  0100               	movlb	0	; () banked
 19297  0103EA  6FBF               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19298  0103EC  0E03               	movlw	3
 19299  0103EE  0100               	movlb	0	; () banked
 19300  0103F0  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 19301  0103F2  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 19302                           
 19303                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19304  0103F6  0100               	movlb	0	; () banked
 19305  0103F8  EE20 F006          	lfsr	2,6
 19306  0103FC  51E5               	movf	SPI_Init@pInput& (0+255),w,b
 19307  0103FE  26D9               	addwf	fsr2l,f,c
 19308  010400  51E6               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19309  010402  22DA               	addwfc	fsr2h,f,c
 19310  010404  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 19311  010408  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 19312  01040C  0E05               	movlw	5
 19313  01040E  0100               	movlb	0	; () banked
 19314  010410  6FB4               	movwf	Byte_SetBit@pBit& (0+255),b
 19315  010412  0E01               	movlw	1
 19316  010414  0100               	movlb	0	; () banked
 19317  010416  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 19318  010418  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 19319  01041C  0012               	return		;funcret
 19320  01041E                     __end_of_SPI_Init:
 19321                           	opt stack 0
 19322                           tosu	equ	0xFFF
 19323                           tosh	equ	0xFFE
 19324                           tosl	equ	0xFFD
 19325                           pclath	equ	0xFFA
 19326                           tblptru	equ	0xFF8
 19327                           tblptrh	equ	0xFF7
 19328                           tblptrl	equ	0xFF6
 19329                           tablat	equ	0xFF5
 19330                           prodh	equ	0xFF4
 19331                           prodl	equ	0xFF3
 19332                           intcon	equ	0xFF2
 19333                           postinc0	equ	0xFEE
 19334                           plusw0	equ	0xFEB
 19335                           wreg	equ	0xFE8
 19336                           indf1	equ	0xFE7
 19337                           postdec1	equ	0xFE5
 19338                           fsr1h	equ	0xFE2
 19339                           fsr1l	equ	0xFE1
 19340                           indf2	equ	0xFDF
 19341                           postinc2	equ	0xFDE
 19342                           postdec2	equ	0xFDD
 19343                           plusw2	equ	0xFDB
 19344                           fsr2h	equ	0xFDA
 19345                           fsr2l	equ	0xFD9
 19346                           status	equ	0xFD8
 19347                           
 19348 ;; *************** function _Timer2_Init *****************
 19349 ;; Defined at:
 19350 ;;		line 10 in file "Library/Timer2.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19353 ;; Auto vars:     Size  Location     Type
 19354 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19355 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19356 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19357 ;; Return value:  Size  Location     Type
 19358 ;;                  1    wreg      void 
 19359 ;; Registers used:
 19360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19361 ;; Tracked objects:
 19362 ;;		On entry : 0/0
 19363 ;;		On exit  : 0/0
 19364 ;;		Unchanged: 0/0
 19365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19366 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19367 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19369 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19370 ;;Total ram usage:       17 bytes
 19371 ;; Hardware stack levels used:    1
 19372 ;; Hardware stack levels required when called:    8
 19373 ;; This function calls:
 19374 ;;		_Timer2_Clear
 19375 ;;		___lldiv
 19376 ;; This function is called by:
 19377 ;;		_SPI_Init
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381                           	psect	text107
 19382  0121E2                     __ptext107:
 19383                           	opt stack 0
 19384  0121E2                     _Timer2_Init:
 19385                           	opt stack 18
 19386                           
 19387                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19388                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19389                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19390                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19391                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19392                           
 19393                           ;incstack = 0
 19394  0121E2  0E00               	movlw	0
 19395  0121E4  0100               	movlb	0	; () banked
 19396  0121E6  6FC8               	movwf	Timer2_Init@pCPUClock& (0+255),b
 19397  0121E8  0E6C               	movlw	108
 19398  0121EA  6FC9               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19399  0121EC  0EDC               	movlw	220
 19400  0121EE  6FCA               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19401  0121F0  0E02               	movlw	2
 19402  0121F2  6FCB               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19406                           ;Timer2.c: 20: pFrequency *= 2;
 19407  0121F4  0100               	movlb	0	; () banked
 19408  0121F6  90D8               	bcf	status,0,c
 19409  0121F8  37BF               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19410  0121FA  37C0               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19411  0121FC  37C1               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19412  0121FE  37C2               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19413                           
 19414                           ; BSR set to: 0
 19415                           ;Timer2.c: 23: pCPUClock /= 4;
 19416  012200  0E02               	movlw	2
 19417  012202  0100               	movlb	0	; () banked
 19418  012204  6FC3               	movwf	??_Timer2_Init& (0+255),b
 19419  012206                     u7395:
 19420  012206  90D8               	bcf	status,0,c
 19421  012208  0100               	movlb	0	; () banked
 19422  01220A  33CB               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19423  01220C  33CA               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19424  01220E  33C9               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19425  012210  33C8               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19426  012212  0100               	movlb	0	; () banked
 19427  012214  2FC3               	decfsz	??_Timer2_Init& (0+255),f,b
 19428  012216  D7F7               	goto	u7395
 19429                           
 19430                           ; BSR set to: 0
 19431                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19432  012218  C0C8  F0B2         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19433  01221C  C0C9  F0B3         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19434  012220  C0CA  F0B4         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19435  012224  C0CB  F0B5         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19436  012228  C0BF  F0B6         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19437  01222C  C0C0  F0B7         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19438  012230  C0C1  F0B8         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19439  012234  C0C2  F0B9         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19440  012238  EC7C  F095         	call	___lldiv	;wreg free
 19441  01223C  C0B2  F0CC         	movff	?___lldiv,Timer2_Init@DIVIDE
 19442  012240  C0B3  F0CD         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19443  012244  C0B4  F0CE         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19444  012248  C0B5  F0CF         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19445                           
 19446                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19447  01224C  D010               	goto	l1836
 19448  01224E                     l10962:
 19449                           
 19450                           ;Timer2.c: 28: {
 19451                           ;Timer2.c: 29: RDIV = 0;
 19452  01224E  0E00               	movlw	0
 19453  012250  0100               	movlb	0	; () banked
 19454  012252  6FC4               	movwf	Timer2_Init@RDIV& (0+255),b
 19455  012254  0E00               	movlw	0
 19456  012256  6FC5               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19457  012258  0E00               	movlw	0
 19458  01225A  6FC6               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19459  01225C  0E00               	movlw	0
 19460  01225E  6FC7               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19461                           
 19462                           ; BSR set to: 0
 19463                           ;Timer2.c: 30: INDEX ++;
 19464  012260  0100               	movlb	0	; () banked
 19465  012262  2B77               	incf	Timer2_Init@INDEX& (0+255),f,b
 19466                           
 19467                           ; BSR set to: 0
 19468                           ;Timer2.c: 31: if (INDEX >= 3)
 19469  012264  0E02               	movlw	2
 19470  012266  0100               	movlb	0	; () banked
 19471  012268  6577               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 19472  01226A  D001               	goto	l1836
 19473  01226C  D026               	goto	u7410
 19474  01226E                     l1836:
 19475                           
 19476                           ; BSR set to: 0
 19477                           
 19478                           ; BSR set to: 0
 19479  01226E  C0CC  F0B2         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19480  012272  C0CD  F0B3         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19481  012276  C0CE  F0B4         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19482  01227A  C0CF  F0B5         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19483  01227E  0100               	movlb	0	; () banked
 19484  012280  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19485  012282  0D01               	mullw	1
 19486  012284  0E82               	movlw	low Timer2_Init@PRESCALE
 19487  012286  24F3               	addwf	prodl,w,c
 19488  012288  6EF6               	movwf	tblptrl,c
 19489  01228A  0EFD               	movlw	high Timer2_Init@PRESCALE
 19490  01228C  20F4               	addwfc	prodh,w,c
 19491  01228E  6EF7               	movwf	tblptrh,c
 19492  012290                     	if	1	;There are 3 active tblptr bytes
 19493  012290  6AF8               	clrf	tblptru,c
 19494  012292  0E00               	movlw	low (__mediumconst shr (0+16))
 19495  012294  22F8               	addwfc	tblptru,f,c
 19496  012296                     	endif
 19497  012296  0008               	tblrd		*
 19498  012298  50F5               	movf	tablat,w,c
 19499  01229A  0100               	movlb	0	; () banked
 19500  01229C  6FB6               	movwf	___lldiv@divisor& (0+255),b
 19501  01229E  6BB7               	clrf	(___lldiv@divisor+1)& (0+255),b
 19502  0122A0  6BB8               	clrf	(___lldiv@divisor+2)& (0+255),b
 19503  0122A2  6BB9               	clrf	(___lldiv@divisor+3)& (0+255),b
 19504  0122A4  EC7C  F095         	call	___lldiv	;wreg free
 19505  0122A8  0100               	movlb	0	; () banked
 19506  0122AA  51B5               	movf	(?___lldiv+3)& (0+255),w,b
 19507  0122AC  0100               	movlb	0	; () banked
 19508  0122AE  11B4               	iorwf	(?___lldiv+2)& (0+255),w,b
 19509  0122B0  E1CE               	bnz	l10962
 19510  0122B2  0100               	movlb	0	; () banked
 19511  0122B4  05B3               	decf	(?___lldiv+1)& (0+255),w,b
 19512  0122B6  B0D8               	btfsc	status,0,c
 19513  0122B8  D7CA               	goto	l1835
 19514  0122BA                     u7410:
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;Timer2.c: 33: }
 19518                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19519                           
 19520                           ; BSR set to: 0
 19521  0122BA  50CA               	movf	4042,w,c	;volatile
 19522  0122BC  0100               	movlb	0	; () banked
 19523  0122BE  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19524  0122C0  0BFC               	andlw	-4
 19525  0122C2  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19526  0122C4  6ECA               	movwf	4042,c	;volatile
 19527                           
 19528                           ; BSR set to: 0
 19529                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19530  0122C6  84CA               	bsf	4042,2,c	;volatile
 19531                           
 19532                           ; BSR set to: 0
 19533                           ;Timer2.c: 44: Timer2_Clear();
 19534  0122C8  EC58  F0A5         	call	_Timer2_Clear	;wreg free
 19535                           
 19536                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19537  0122CC  0100               	movlb	0	; () banked
 19538  0122CE  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19539  0122D0  0D01               	mullw	1
 19540  0122D2  0E82               	movlw	low Timer2_Init@PRESCALE
 19541  0122D4  24F3               	addwf	prodl,w,c
 19542  0122D6  6EF6               	movwf	tblptrl,c
 19543  0122D8  0EFD               	movlw	high Timer2_Init@PRESCALE
 19544  0122DA  20F4               	addwfc	prodh,w,c
 19545  0122DC  6EF7               	movwf	tblptrh,c
 19546  0122DE                     	if	1	;There are 3 active tblptr bytes
 19547  0122DE  6AF8               	clrf	tblptru,c
 19548  0122E0  0E00               	movlw	low (__mediumconst shr (0+16))
 19549  0122E2  22F8               	addwfc	tblptru,f,c
 19550  0122E4                     	endif
 19551  0122E4  0008               	tblrd		*
 19552  0122E6  CFF5 F076          	movff	tablat,Timer2_Init@PRE
 19553                           
 19554                           ; BSR set to: 0
 19555                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19556  0122EA  0EFF               	movlw	255
 19557  0122EC  0100               	movlb	0	; () banked
 19558  0122EE  25CC               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19559  0122F0  0100               	movlb	0	; () banked
 19560  0122F2  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 19561  0122F4  0EFF               	movlw	255
 19562  0122F6  0100               	movlb	0	; () banked
 19563  0122F8  21CD               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19564  0122FA  0100               	movlb	0	; () banked
 19565  0122FC  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19566  0122FE  0EFF               	movlw	255
 19567  012300  0100               	movlb	0	; () banked
 19568  012302  21CE               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19569  012304  0100               	movlb	0	; () banked
 19570  012306  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19571  012308  0EFF               	movlw	255
 19572  01230A  0100               	movlb	0	; () banked
 19573  01230C  21CF               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19574  01230E  0100               	movlb	0	; () banked
 19575  012310  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19576                           
 19577                           ; BSR set to: 0
 19578                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19579  012312  C060  F0B2         	movff	Timer2_Init@DIV,___lldiv@dividend
 19580  012316  C061  F0B3         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19581  01231A  C062  F0B4         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19582  01231E  C063  F0B5         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19583  012322  0100               	movlb	0	; () banked
 19584  012324  5176               	movf	Timer2_Init@PRE& (0+255),w,b
 19585  012326  0100               	movlb	0	; () banked
 19586  012328  6FB6               	movwf	___lldiv@divisor& (0+255),b
 19587  01232A  6BB7               	clrf	(___lldiv@divisor+1)& (0+255),b
 19588  01232C  6BB8               	clrf	(___lldiv@divisor+2)& (0+255),b
 19589  01232E  6BB9               	clrf	(___lldiv@divisor+3)& (0+255),b
 19590  012330  EC7C  F095         	call	___lldiv	;wreg free
 19591  012334  0100               	movlb	0	; () banked
 19592  012336  51B2               	movf	?___lldiv& (0+255),w,b
 19593  012338  0100               	movlb	0	; () banked
 19594  01233A  6F77               	movwf	Timer2_Init@INDEX& (0+255),b
 19595                           
 19596                           ; BSR set to: 0
 19597                           ;Timer2.c: 49: PR2 = INDEX;
 19598  01233C  C077  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 19599                           
 19600                           ; BSR set to: 0
 19601  012340  0012               	return		;funcret
 19602  012342                     __end_of_Timer2_Init:
 19603                           	opt stack 0
 19604                           tosu	equ	0xFFF
 19605                           tosh	equ	0xFFE
 19606                           tosl	equ	0xFFD
 19607                           pclath	equ	0xFFA
 19608                           tblptru	equ	0xFF8
 19609                           tblptrh	equ	0xFF7
 19610                           tblptrl	equ	0xFF6
 19611                           tablat	equ	0xFF5
 19612                           prodh	equ	0xFF4
 19613                           prodl	equ	0xFF3
 19614                           intcon	equ	0xFF2
 19615                           postinc0	equ	0xFEE
 19616                           plusw0	equ	0xFEB
 19617                           wreg	equ	0xFE8
 19618                           indf1	equ	0xFE7
 19619                           postdec1	equ	0xFE5
 19620                           fsr1h	equ	0xFE2
 19621                           fsr1l	equ	0xFE1
 19622                           indf2	equ	0xFDF
 19623                           postinc2	equ	0xFDE
 19624                           postdec2	equ	0xFDD
 19625                           plusw2	equ	0xFDB
 19626                           fsr2h	equ	0xFDA
 19627                           fsr2l	equ	0xFD9
 19628                           status	equ	0xFD8
 19629                           
 19630 ;; *************** function ___lldiv *****************
 19631 ;; Defined at:
 19632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 19633 ;; Parameters:    Size  Location     Type
 19634 ;;  dividend        4    0[BANK0 ] unsigned long 
 19635 ;;  divisor         4    4[BANK0 ] unsigned long 
 19636 ;; Auto vars:     Size  Location     Type
 19637 ;;  quotient        4    8[BANK0 ] unsigned long 
 19638 ;;  counter         1   12[BANK0 ] unsigned char 
 19639 ;; Return value:  Size  Location     Type
 19640 ;;                  4    0[BANK0 ] unsigned long 
 19641 ;; Registers used:
 19642 ;;		wreg, status,2, status,0
 19643 ;; Tracked objects:
 19644 ;;		On entry : 0/0
 19645 ;;		On exit  : 0/0
 19646 ;;		Unchanged: 0/0
 19647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19648 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19649 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19651 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;Total ram usage:       13 bytes
 19653 ;; Hardware stack levels used:    1
 19654 ;; Hardware stack levels required when called:    7
 19655 ;; This function calls:
 19656 ;;		Nothing
 19657 ;; This function is called by:
 19658 ;;		_Timer0_Init
 19659 ;;		_Timer2_Init
 19660 ;;		_rand_between
 19661 ;;		_I2C_Init
 19662 ;; This function uses a non-reentrant model
 19663 ;;
 19664                           
 19665                           	psect	text108
 19666  012AF8                     __ptext108:
 19667                           	opt stack 0
 19668  012AF8                     ___lldiv:
 19669                           	opt stack 19
 19670                           
 19671                           ; BSR set to: 0
 19672                           ;incstack = 0
 19673  012AF8  0E00               	movlw	0
 19674  012AFA  0100               	movlb	0	; () banked
 19675  012AFC  6FBA               	movwf	___lldiv@quotient& (0+255),b
 19676  012AFE  0E00               	movlw	0
 19677  012B00  6FBB               	movwf	(___lldiv@quotient+1)& (0+255),b
 19678  012B02  0E00               	movlw	0
 19679  012B04  6FBC               	movwf	(___lldiv@quotient+2)& (0+255),b
 19680  012B06  0E00               	movlw	0
 19681  012B08  6FBD               	movwf	(___lldiv@quotient+3)& (0+255),b
 19682                           
 19683                           ; BSR set to: 0
 19684  012B0A  0100               	movlb	0	; () banked
 19685  012B0C  51B6               	movf	___lldiv@divisor& (0+255),w,b
 19686  012B0E  0100               	movlb	0	; () banked
 19687  012B10  11B7               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19688  012B12  0100               	movlb	0	; () banked
 19689  012B14  11B8               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19690  012B16  0100               	movlb	0	; () banked
 19691  012B18  11B9               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19692  012B1A  B4D8               	btfsc	status,2,c
 19693  012B1C  D042               	goto	l2466
 19694                           
 19695                           ; BSR set to: 0
 19696  012B1E  0E01               	movlw	1
 19697  012B20  0100               	movlb	0	; () banked
 19698  012B22  6FBE               	movwf	___lldiv@counter& (0+255),b
 19699  012B24  D008               	goto	l2461
 19700  012B26                     
 19701                           ; BSR set to: 0
 19702                           
 19703                           ; BSR set to: 0
 19704  012B26  0100               	movlb	0	; () banked
 19705  012B28  90D8               	bcf	status,0,c
 19706  012B2A  37B6               	rlcf	___lldiv@divisor& (0+255),f,b
 19707  012B2C  37B7               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19708  012B2E  37B8               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19709  012B30  37B9               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19710  012B32  0100               	movlb	0	; () banked
 19711  012B34  2BBE               	incf	___lldiv@counter& (0+255),f,b
 19712  012B36                     l2461:
 19713                           
 19714                           ; BSR set to: 0
 19715                           
 19716                           ; BSR set to: 0
 19717  012B36  0100               	movlb	0	; () banked
 19718  012B38  AFB9               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19719  012B3A  D7F5               	goto	l2462
 19720  012B3C                     u7220:
 19721                           
 19722                           ; BSR set to: 0
 19723                           
 19724                           ; BSR set to: 0
 19725                           
 19726                           ; BSR set to: 0
 19727  012B3C  0100               	movlb	0	; () banked
 19728  012B3E  90D8               	bcf	status,0,c
 19729  012B40  37BA               	rlcf	___lldiv@quotient& (0+255),f,b
 19730  012B42  37BB               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19731  012B44  37BC               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19732  012B46  37BD               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19733                           
 19734                           ; BSR set to: 0
 19735  012B48  0100               	movlb	0	; () banked
 19736  012B4A  51B6               	movf	___lldiv@divisor& (0+255),w,b
 19737  012B4C  0100               	movlb	0	; () banked
 19738  012B4E  5DB2               	subwf	___lldiv@dividend& (0+255),w,b
 19739  012B50  0100               	movlb	0	; () banked
 19740  012B52  51B7               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19741  012B54  0100               	movlb	0	; () banked
 19742  012B56  59B3               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19743  012B58  0100               	movlb	0	; () banked
 19744  012B5A  51B8               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19745  012B5C  0100               	movlb	0	; () banked
 19746  012B5E  59B4               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19747  012B60  0100               	movlb	0	; () banked
 19748  012B62  51B9               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19749  012B64  0100               	movlb	0	; () banked
 19750  012B66  59B5               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19751  012B68  A0D8               	btfss	status,0,c
 19752  012B6A  D012               	goto	l2465
 19753                           
 19754                           ; BSR set to: 0
 19755  012B6C  0100               	movlb	0	; () banked
 19756  012B6E  51B6               	movf	___lldiv@divisor& (0+255),w,b
 19757  012B70  0100               	movlb	0	; () banked
 19758  012B72  5FB2               	subwf	___lldiv@dividend& (0+255),f,b
 19759  012B74  0100               	movlb	0	; () banked
 19760  012B76  51B7               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19761  012B78  0100               	movlb	0	; () banked
 19762  012B7A  5BB3               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19763  012B7C  0100               	movlb	0	; () banked
 19764  012B7E  51B8               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19765  012B80  0100               	movlb	0	; () banked
 19766  012B82  5BB4               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19767  012B84  0100               	movlb	0	; () banked
 19768  012B86  51B9               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19769  012B88  0100               	movlb	0	; () banked
 19770  012B8A  5BB5               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19771                           
 19772                           ; BSR set to: 0
 19773  012B8C  0100               	movlb	0	; () banked
 19774  012B8E  81BA               	bsf	___lldiv@quotient& (0+255),0,b
 19775  012B90                     l2465:
 19776                           
 19777                           ; BSR set to: 0
 19778                           
 19779                           ; BSR set to: 0
 19780  012B90  0100               	movlb	0	; () banked
 19781  012B92  90D8               	bcf	status,0,c
 19782  012B94  33B9               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19783  012B96  33B8               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19784  012B98  33B7               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19785  012B9A  33B6               	rrcf	___lldiv@divisor& (0+255),f,b
 19786                           
 19787                           ; BSR set to: 0
 19788  012B9C  0100               	movlb	0	; () banked
 19789  012B9E  2FBE               	decfsz	___lldiv@counter& (0+255),f,b
 19790  012BA0  D7CD               	goto	u7220
 19791  012BA2                     l2466:
 19792                           
 19793                           ; BSR set to: 0
 19794                           
 19795                           ; BSR set to: 0
 19796  012BA2  C0BA  F0B2         	movff	___lldiv@quotient,?___lldiv
 19797  012BA6  C0BB  F0B3         	movff	___lldiv@quotient+1,?___lldiv+1
 19798  012BAA  C0BC  F0B4         	movff	___lldiv@quotient+2,?___lldiv+2
 19799  012BAE  C0BD  F0B5         	movff	___lldiv@quotient+3,?___lldiv+3
 19800                           
 19801                           ; BSR set to: 0
 19802  012BB2  0012               	return		;funcret
 19803  012BB4                     __end_of___lldiv:
 19804                           	opt stack 0
 19805                           tosu	equ	0xFFF
 19806                           tosh	equ	0xFFE
 19807                           tosl	equ	0xFFD
 19808                           pclath	equ	0xFFA
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           postinc0	equ	0xFEE
 19817                           plusw0	equ	0xFEB
 19818                           wreg	equ	0xFE8
 19819                           indf1	equ	0xFE7
 19820                           postdec1	equ	0xFE5
 19821                           fsr1h	equ	0xFE2
 19822                           fsr1l	equ	0xFE1
 19823                           indf2	equ	0xFDF
 19824                           postinc2	equ	0xFDE
 19825                           postdec2	equ	0xFDD
 19826                           plusw2	equ	0xFDB
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _Timer2_Clear *****************
 19832 ;; Defined at:
 19833 ;;		line 3 in file "Library/Timer2.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;		None
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;		None
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  1    wreg      void 
 19840 ;; Registers used:
 19841 ;;		None
 19842 ;; Tracked objects:
 19843 ;;		On entry : 0/0
 19844 ;;		On exit  : 0/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;Total ram usage:        0 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    7
 19854 ;; This function calls:
 19855 ;;		Nothing
 19856 ;; This function is called by:
 19857 ;;		_Timer2_Init
 19858 ;; This function uses a non-reentrant model
 19859 ;;
 19860                           
 19861                           	psect	text109
 19862  014AB0                     __ptext109:
 19863                           	opt stack 0
 19864  014AB0                     _Timer2_Clear:
 19865                           	opt stack 18
 19866                           
 19867                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;incstack = 0
 19871  014AB0  929E               	bcf	3998,1,c	;volatile
 19872                           
 19873                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 19874  014AB2  929D               	bcf	3997,1,c	;volatile
 19875                           
 19876                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 19877  014AB4  929F               	bcf	3999,1,c	;volatile
 19878  014AB6  0012               	return		;funcret
 19879  014AB8                     __end_of_Timer2_Clear:
 19880                           	opt stack 0
 19881                           tosu	equ	0xFFF
 19882                           tosh	equ	0xFFE
 19883                           tosl	equ	0xFFD
 19884                           pclath	equ	0xFFA
 19885                           tblptru	equ	0xFF8
 19886                           tblptrh	equ	0xFF7
 19887                           tblptrl	equ	0xFF6
 19888                           tablat	equ	0xFF5
 19889                           prodh	equ	0xFF4
 19890                           prodl	equ	0xFF3
 19891                           intcon	equ	0xFF2
 19892                           postinc0	equ	0xFEE
 19893                           plusw0	equ	0xFEB
 19894                           wreg	equ	0xFE8
 19895                           indf1	equ	0xFE7
 19896                           postdec1	equ	0xFE5
 19897                           fsr1h	equ	0xFE2
 19898                           fsr1l	equ	0xFE1
 19899                           indf2	equ	0xFDF
 19900                           postinc2	equ	0xFDE
 19901                           postdec2	equ	0xFDD
 19902                           plusw2	equ	0xFDB
 19903                           fsr2h	equ	0xFDA
 19904                           fsr2l	equ	0xFD9
 19905                           status	equ	0xFD8
 19906                           
 19907 ;; *************** function _SPI_DisableISR *****************
 19908 ;; Defined at:
 19909 ;;		line 181 in file "Library/SPI.c"
 19910 ;; Parameters:    Size  Location     Type
 19911 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19912 ;;		 -> SPI1(11), SPI2(11), 
 19913 ;; Auto vars:     Size  Location     Type
 19914 ;;		None
 19915 ;; Return value:  Size  Location     Type
 19916 ;;                  1    wreg      void 
 19917 ;; Registers used:
 19918 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19919 ;; Tracked objects:
 19920 ;;		On entry : 0/0
 19921 ;;		On exit  : 0/0
 19922 ;;		Unchanged: 0/0
 19923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19928 ;;Total ram usage:        2 bytes
 19929 ;; Hardware stack levels used:    1
 19930 ;; Hardware stack levels required when called:    7
 19931 ;; This function calls:
 19932 ;;		Nothing
 19933 ;; This function is called by:
 19934 ;;		_SPI_Init
 19935 ;; This function uses a non-reentrant model
 19936 ;;
 19937                           
 19938                           	psect	text110
 19939  01470E                     __ptext110:
 19940                           	opt stack 0
 19941  01470E                     _SPI_DisableISR:
 19942                           	opt stack 19
 19943                           
 19944                           ;SPI.c: 183: switch (pInput->mChannel)
 19945                           
 19946                           ;incstack = 0
 19947  01470E  D004               	goto	l654
 19948  014710                     l655:
 19949                           
 19950                           ; BSR set to: 0
 19951  014710  969D               	bcf	3997,3,c	;volatile
 19952  014712  0012               	return	
 19953  014714                     l657:
 19954                           
 19955                           ; BSR set to: 0
 19956  014714  9EA3               	bcf	4003,7,c	;volatile
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;SPI.c: 188: };
 19960                           
 19961                           ; BSR set to: 0
 19962                           
 19963                           ;SPI.c: 187: default: return;
 19964  014716  0012               	return	
 19965  014718                     l654:
 19966                           
 19967                           ; BSR set to: 0
 19968  014718  0100               	movlb	0	; () banked
 19969  01471A  EE20 F002          	lfsr	2,2
 19970  01471E  51B2               	movf	SPI_DisableISR@pInput& (0+255),w,b
 19971  014720  26D9               	addwf	fsr2l,f,c
 19972  014722  51B3               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 19973  014724  22DA               	addwfc	fsr2h,f,c
 19974  014726  50DF               	movf	indf2,w,c
 19975                           
 19976                           ; Switch size 1, requested type "space"
 19977                           ; Number of cases is 2, Range of values is 0 to 1
 19978                           ; switch strategies available:
 19979                           ; Name         Instructions Cycles
 19980                           ; simple_byte            7     4 (average)
 19981                           ;	Chosen strategy is simple_byte
 19982  014728  0A00               	xorlw	0	; case 0
 19983  01472A  B4D8               	btfsc	status,2,c
 19984  01472C  D7F1               	goto	l655
 19985  01472E  0A01               	xorlw	1	; case 1
 19986  014730  A4D8               	btfss	status,2,c
 19987  014732  0012               	return	
 19988  014734  D7EF               	goto	l657
 19989  014736                     __end_of_SPI_DisableISR:
 19990                           	opt stack 0
 19991                           tosu	equ	0xFFF
 19992                           tosh	equ	0xFFE
 19993                           tosl	equ	0xFFD
 19994                           pclath	equ	0xFFA
 19995                           tblptru	equ	0xFF8
 19996                           tblptrh	equ	0xFF7
 19997                           tblptrl	equ	0xFF6
 19998                           tablat	equ	0xFF5
 19999                           prodh	equ	0xFF4
 20000                           prodl	equ	0xFF3
 20001                           intcon	equ	0xFF2
 20002                           postinc0	equ	0xFEE
 20003                           plusw0	equ	0xFEB
 20004                           wreg	equ	0xFE8
 20005                           indf1	equ	0xFE7
 20006                           postdec1	equ	0xFE5
 20007                           fsr1h	equ	0xFE2
 20008                           fsr1l	equ	0xFE1
 20009                           indf2	equ	0xFDF
 20010                           postinc2	equ	0xFDE
 20011                           postdec2	equ	0xFDD
 20012                           plusw2	equ	0xFDB
 20013                           fsr2h	equ	0xFDA
 20014                           fsr2l	equ	0xFD9
 20015                           status	equ	0xFD8
 20016                           
 20017 ;; *************** function _SPI_DCS *****************
 20018 ;; Defined at:
 20019 ;;		line 219 in file "Library/SPI.c"
 20020 ;; Parameters:    Size  Location     Type
 20021 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20022 ;;		 -> SPI1(11), SPI2(11), 
 20023 ;; Auto vars:     Size  Location     Type
 20024 ;;		None
 20025 ;; Return value:  Size  Location     Type
 20026 ;;                  1    wreg      void 
 20027 ;; Registers used:
 20028 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20029 ;; Tracked objects:
 20030 ;;		On entry : 0/0
 20031 ;;		On exit  : 0/0
 20032 ;;		Unchanged: 0/0
 20033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20034 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20037 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20038 ;;Total ram usage:        2 bytes
 20039 ;; Hardware stack levels used:    1
 20040 ;; Hardware stack levels required when called:    7
 20041 ;; This function calls:
 20042 ;;		Nothing
 20043 ;; This function is called by:
 20044 ;;		_SPI_Init
 20045 ;; This function uses a non-reentrant model
 20046 ;;
 20047                           
 20048                           	psect	text111
 20049  0145D8                     __ptext111:
 20050                           	opt stack 0
 20051  0145D8                     _SPI_DCS:
 20052                           	opt stack 19
 20053                           
 20054                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;incstack = 0
 20058  0145D8  0100               	movlb	0	; () banked
 20059  0145DA  EE20 F002          	lfsr	2,2
 20060  0145DE  51B2               	movf	SPI_DCS@pInput& (0+255),w,b
 20061  0145E0  26D9               	addwf	fsr2l,f,c
 20062  0145E2  51B3               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 20063  0145E4  22DA               	addwfc	fsr2h,f,c
 20064  0145E6  50DF               	movf	indf2,w,c
 20065  0145E8  A4D8               	btfss	status,2,c
 20066  0145EA  D007               	goto	l673
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 20070  0145EC  C095  FFD9         	movff	_PortC+4,fsr2l
 20071  0145F0  C096  FFDA         	movff	_PortC+5,fsr2h
 20072  0145F4  0100               	movlb	0	; () banked
 20073  0145F6  84DF               	bsf	indf2,2,c
 20074  0145F8  0012               	return	
 20075  0145FA                     l673:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;SPI.c: 223: else
 20079                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 20080                           
 20081                           ; BSR set to: 0
 20082  0145FA  C08B  FFD9         	movff	_PortD+4,fsr2l
 20083  0145FE  C08C  FFDA         	movff	_PortD+5,fsr2h
 20084  014602  0100               	movlb	0	; () banked
 20085  014604  8EDF               	bsf	indf2,7,c
 20086  014606  0012               	return	
 20087  014608                     __end_of_SPI_DCS:
 20088                           	opt stack 0
 20089                           tosu	equ	0xFFF
 20090                           tosh	equ	0xFFE
 20091                           tosl	equ	0xFFD
 20092                           pclath	equ	0xFFA
 20093                           tblptru	equ	0xFF8
 20094                           tblptrh	equ	0xFF7
 20095                           tblptrl	equ	0xFF6
 20096                           tablat	equ	0xFF5
 20097                           prodh	equ	0xFF4
 20098                           prodl	equ	0xFF3
 20099                           intcon	equ	0xFF2
 20100                           postinc0	equ	0xFEE
 20101                           plusw0	equ	0xFEB
 20102                           wreg	equ	0xFE8
 20103                           indf1	equ	0xFE7
 20104                           postdec1	equ	0xFE5
 20105                           fsr1h	equ	0xFE2
 20106                           fsr1l	equ	0xFE1
 20107                           indf2	equ	0xFDF
 20108                           postinc2	equ	0xFDE
 20109                           postdec2	equ	0xFDD
 20110                           plusw2	equ	0xFDB
 20111                           fsr2h	equ	0xFDA
 20112                           fsr2l	equ	0xFD9
 20113                           status	equ	0xFD8
 20114                           
 20115 ;; *************** function _Button_Init *****************
 20116 ;; Defined at:
 20117 ;;		line 18 in file "Library/Button.c"
 20118 ;; Parameters:    Size  Location     Type
 20119 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 20120 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 20121 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 20122 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 20123 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 20124 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 20125 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 20126 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 20127 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 20128 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 20129 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 20130 ;; Auto vars:     Size  Location     Type
 20131 ;;		None
 20132 ;; Return value:  Size  Location     Type
 20133 ;;                  1    wreg      void 
 20134 ;; Registers used:
 20135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20136 ;; Tracked objects:
 20137 ;;		On entry : 0/0
 20138 ;;		On exit  : 0/0
 20139 ;;		Unchanged: 0/0
 20140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20141 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;Total ram usage:       13 bytes
 20146 ;; Hardware stack levels used:    1
 20147 ;; Hardware stack levels required when called:   15
 20148 ;; This function calls:
 20149 ;;		_HMI_InitButtons
 20150 ;;		_MXK_InitDIPSwitch
 20151 ;;		_MXK_InitTestButton
 20152 ;; This function is called by:
 20153 ;;		_HMI_Init
 20154 ;;		_FunctInitButton
 20155 ;; This function uses a non-reentrant model
 20156 ;;
 20157                           
 20158                           	psect	text112
 20159  012640                     __ptext112:
 20160                           	opt stack 0
 20161  012640                     _Button_Init:
 20162                           	opt stack 13
 20163                           
 20164                           ;Button.c: 21: if(pInput==(void*)0)
 20165                           
 20166                           ; BSR set to: 0
 20167                           ;incstack = 0
 20168  012640  0101               	movlb	1	; () banked
 20169  012642  51C8               	movf	Button_Init@pInput& (0+255),w,b
 20170  012644  0101               	movlb	1	; () banked
 20171  012646  11C9               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20172  012648  B4D8               	btfsc	status,2,c
 20173  01264A  0012               	return	
 20174                           
 20175                           ; BSR set to: 1
 20176                           ;Button.c: 23: if(pInitIO==(void*)0)
 20177                           
 20178                           ; BSR set to: 1
 20179                           
 20180                           ; BSR set to: 1
 20181                           ;Button.c: 22: return;
 20182  01264C  0101               	movlb	1	; () banked
 20183  01264E  51CC               	movf	Button_Init@pInitIO& (0+255),w,b
 20184  012650  0101               	movlb	1	; () banked
 20185  012652  11CD               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 20186  012654  0101               	movlb	1	; () banked
 20187  012656  11CE               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 20188  012658  B4D8               	btfsc	status,2,c
 20189  01265A  0012               	return	
 20190                           
 20191                           ; BSR set to: 1
 20192                           ;Button.c: 25: if(pGetState==(void*)0)
 20193                           
 20194                           ; BSR set to: 1
 20195                           
 20196                           ; BSR set to: 1
 20197                           ;Button.c: 24: return;
 20198  01265C  0101               	movlb	1	; () banked
 20199  01265E  51CF               	movf	Button_Init@pGetState& (0+255),w,b
 20200  012660  0101               	movlb	1	; () banked
 20201  012662  11D0               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 20202  012664  0101               	movlb	1	; () banked
 20203  012666  11D1               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 20204  012668  B4D8               	btfsc	status,2,c
 20205  01266A  0012               	return	
 20206                           
 20207                           ; BSR set to: 1
 20208                           ;Button.c: 27: if(pFunction==(void*)0)
 20209                           
 20210                           ; BSR set to: 1
 20211                           
 20212                           ; BSR set to: 1
 20213                           ;Button.c: 26: return;
 20214  01266C  0101               	movlb	1	; () banked
 20215  01266E  51D2               	movf	Button_Init@pFunction& (0+255),w,b
 20216  012670  0101               	movlb	1	; () banked
 20217  012672  11D3               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 20218  012674  0101               	movlb	1	; () banked
 20219  012676  11D4               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 20220  012678  B4D8               	btfsc	status,2,c
 20221  01267A  0012               	return	
 20222                           
 20223                           ; BSR set to: 1
 20224                           ;Button.c: 30: if(pThreshold == 0)
 20225                           
 20226                           ; BSR set to: 1
 20227                           
 20228                           ; BSR set to: 1
 20229                           ;Button.c: 28: return;
 20230  01267C  0101               	movlb	1	; () banked
 20231  01267E  51CA               	movf	Button_Init@pThreshold& (0+255),w,b
 20232  012680  0101               	movlb	1	; () banked
 20233  012682  11CB               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 20234  012684  A4D8               	btfss	status,2,c
 20235  012686  D005               	goto	l8
 20236                           
 20237                           ; BSR set to: 1
 20238                           ;Button.c: 31: pThreshold = 1;
 20239  012688  0E00               	movlw	0
 20240  01268A  0101               	movlb	1	; () banked
 20241  01268C  6FCB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20242  01268E  0E01               	movlw	1
 20243  012690  6FCA               	movwf	Button_Init@pThreshold& (0+255),b
 20244  012692                     l8:
 20245                           
 20246                           ; BSR set to: 1
 20247                           ;Button.c: 34: pInput->mState = 0;
 20248                           
 20249                           ; BSR set to: 1
 20250  012692  C1C8  FFD9         	movff	Button_Init@pInput,fsr2l
 20251  012696  C1C9  FFDA         	movff	Button_Init@pInput+1,fsr2h
 20252  01269A  0E00               	movlw	0
 20253  01269C  6EDF               	movwf	indf2,c
 20254                           
 20255                           ; BSR set to: 1
 20256                           ;Button.c: 35: pInput->mCount = 0;
 20257  01269E  0101               	movlb	1	; () banked
 20258  0126A0  EE20 F001          	lfsr	2,1
 20259  0126A4  51C8               	movf	Button_Init@pInput& (0+255),w,b
 20260  0126A6  26D9               	addwf	fsr2l,f,c
 20261  0126A8  51C9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20262  0126AA  22DA               	addwfc	fsr2h,f,c
 20263  0126AC  0E00               	movlw	0
 20264  0126AE  6EDF               	movwf	indf2,c
 20265                           
 20266                           ; BSR set to: 1
 20267                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 20268  0126B0  0101               	movlb	1	; () banked
 20269  0126B2  EE20 F002          	lfsr	2,2
 20270  0126B6  51C8               	movf	Button_Init@pInput& (0+255),w,b
 20271  0126B8  26D9               	addwf	fsr2l,f,c
 20272  0126BA  51C9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20273  0126BC  22DA               	addwfc	fsr2h,f,c
 20274  0126BE  C1CA  FFDE         	movff	Button_Init@pThreshold,postinc2
 20275  0126C2  C1CB  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 20276                           
 20277                           ; BSR set to: 1
 20278                           ;Button.c: 37: pInput->mFunction = pFunction;
 20279  0126C6  0101               	movlb	1	; () banked
 20280  0126C8  EE20 F004          	lfsr	2,4
 20281  0126CC  51C8               	movf	Button_Init@pInput& (0+255),w,b
 20282  0126CE  26D9               	addwf	fsr2l,f,c
 20283  0126D0  51C9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20284  0126D2  22DA               	addwfc	fsr2h,f,c
 20285  0126D4  C1D2  FFDE         	movff	Button_Init@pFunction,postinc2
 20286  0126D8  C1D3  FFDE         	movff	Button_Init@pFunction+1,postinc2
 20287  0126DC  C1D4  FFDE         	movff	Button_Init@pFunction+2,postinc2
 20288                           
 20289                           ; BSR set to: 1
 20290                           ;Button.c: 38: pInput->mGetState = pGetState;
 20291  0126E0  0101               	movlb	1	; () banked
 20292  0126E2  EE20 F007          	lfsr	2,7
 20293  0126E6  51C8               	movf	Button_Init@pInput& (0+255),w,b
 20294  0126E8  26D9               	addwf	fsr2l,f,c
 20295  0126EA  51C9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20296  0126EC  22DA               	addwfc	fsr2h,f,c
 20297  0126EE  C1CF  FFDE         	movff	Button_Init@pGetState,postinc2
 20298  0126F2  C1D0  FFDE         	movff	Button_Init@pGetState+1,postinc2
 20299  0126F6  C1D1  FFDE         	movff	Button_Init@pGetState+2,postinc2
 20300                           
 20301                           ; BSR set to: 1
 20302                           ;Button.c: 41: pInitIO();
 20303  0126FA  D801               	call	u7928
 20304  0126FC  0012               	return	
 20305  0126FE                     u7928:
 20306  0126FE  0005               	push	
 20307  012700  6EFA               	movwf	pclath,c
 20308  012702  0101               	movlb	1	; () banked
 20309  012704  51CC               	movf	Button_Init@pInitIO& (0+255),w,b
 20310  012706  6EFD               	movwf	tosl,c
 20311  012708  51CD               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20312  01270A  6EFE               	movwf	tosh,c
 20313  01270C  51CE               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20314  01270E  6EFF               	movwf	tosu,c
 20315  012710  50FA               	movf	pclath,w,c
 20316  012712  0012               	return		;indir
 20317  012714                     __end_of_Button_Init:
 20318                           	opt stack 0
 20319                           tosu	equ	0xFFF
 20320                           tosh	equ	0xFFE
 20321                           tosl	equ	0xFFD
 20322                           pclath	equ	0xFFA
 20323                           tblptru	equ	0xFF8
 20324                           tblptrh	equ	0xFF7
 20325                           tblptrl	equ	0xFF6
 20326                           tablat	equ	0xFF5
 20327                           prodh	equ	0xFF4
 20328                           prodl	equ	0xFF3
 20329                           intcon	equ	0xFF2
 20330                           postinc0	equ	0xFEE
 20331                           plusw0	equ	0xFEB
 20332                           wreg	equ	0xFE8
 20333                           indf1	equ	0xFE7
 20334                           postdec1	equ	0xFE5
 20335                           fsr1h	equ	0xFE2
 20336                           fsr1l	equ	0xFE1
 20337                           indf2	equ	0xFDF
 20338                           postinc2	equ	0xFDE
 20339                           postdec2	equ	0xFDD
 20340                           plusw2	equ	0xFDB
 20341                           fsr2h	equ	0xFDA
 20342                           fsr2l	equ	0xFD9
 20343                           status	equ	0xFD8
 20344                           
 20345 ;; *************** function _MXK_InitDIPSwitch *****************
 20346 ;; Defined at:
 20347 ;;		line 20 in file "Library/MXK.c"
 20348 ;; Parameters:    Size  Location     Type
 20349 ;;		None
 20350 ;; Auto vars:     Size  Location     Type
 20351 ;;		None
 20352 ;; Return value:  Size  Location     Type
 20353 ;;                  1    wreg      void 
 20354 ;; Registers used:
 20355 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20356 ;; Tracked objects:
 20357 ;;		On entry : 0/0
 20358 ;;		On exit  : 0/0
 20359 ;;		Unchanged: 0/0
 20360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20365 ;;Total ram usage:        0 bytes
 20366 ;; Hardware stack levels used:    1
 20367 ;; Hardware stack levels required when called:   14
 20368 ;; This function calls:
 20369 ;;		_Port_SetQuadType
 20370 ;; This function is called by:
 20371 ;;		_FunctInitButton
 20372 ;;		_Button_Init
 20373 ;; This function uses a non-reentrant model
 20374 ;;
 20375                           
 20376                           	psect	text113
 20377  014880                     __ptext113:
 20378                           	opt stack 0
 20379  014880                     _MXK_InitDIPSwitch:
 20380                           	opt stack 13
 20381                           
 20382                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20383                           
 20384                           ;incstack = 0
 20385  014880  0E87               	movlw	low _PortD
 20386  014882  0100               	movlb	0	; () banked
 20387  014884  6FE8               	movwf	Port_SetQuadType@pInput& (0+255),b
 20388  014886  0E00               	movlw	high _PortD
 20389  014888  0100               	movlb	0	; () banked
 20390  01488A  6FE9               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20391  01488C  0E00               	movlw	0
 20392  01488E  0100               	movlb	0	; () banked
 20393  014890  6FEA               	movwf	Port_SetQuadType@pQuad& (0+255),b
 20394  014892  0E00               	movlw	0
 20395  014894  0100               	movlb	0	; () banked
 20396  014896  6FEB               	movwf	Port_SetQuadType@pType& (0+255),b
 20397  014898  EC8F  F086         	call	_Port_SetQuadType	;wreg free
 20398  01489C  0012               	return		;funcret
 20399  01489E                     __end_of_MXK_InitDIPSwitch:
 20400                           	opt stack 0
 20401                           tosu	equ	0xFFF
 20402                           tosh	equ	0xFFE
 20403                           tosl	equ	0xFFD
 20404                           pclath	equ	0xFFA
 20405                           tblptru	equ	0xFF8
 20406                           tblptrh	equ	0xFF7
 20407                           tblptrl	equ	0xFF6
 20408                           tablat	equ	0xFF5
 20409                           prodh	equ	0xFF4
 20410                           prodl	equ	0xFF3
 20411                           intcon	equ	0xFF2
 20412                           postinc0	equ	0xFEE
 20413                           plusw0	equ	0xFEB
 20414                           wreg	equ	0xFE8
 20415                           indf1	equ	0xFE7
 20416                           postdec1	equ	0xFE5
 20417                           fsr1h	equ	0xFE2
 20418                           fsr1l	equ	0xFE1
 20419                           indf2	equ	0xFDF
 20420                           postinc2	equ	0xFDE
 20421                           postdec2	equ	0xFDD
 20422                           plusw2	equ	0xFDB
 20423                           fsr2h	equ	0xFDA
 20424                           fsr2l	equ	0xFD9
 20425                           status	equ	0xFD8
 20426                           
 20427 ;; *************** function _HMI_InitButtons *****************
 20428 ;; Defined at:
 20429 ;;		line 21 in file "HMI.c"
 20430 ;; Parameters:    Size  Location     Type
 20431 ;;		None
 20432 ;; Auto vars:     Size  Location     Type
 20433 ;;		None
 20434 ;; Return value:  Size  Location     Type
 20435 ;;                  1    wreg      void 
 20436 ;; Registers used:
 20437 ;;		None
 20438 ;; Tracked objects:
 20439 ;;		On entry : 0/0
 20440 ;;		On exit  : 0/0
 20441 ;;		Unchanged: 0/0
 20442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;Total ram usage:        0 bytes
 20448 ;; Hardware stack levels used:    1
 20449 ;; Hardware stack levels required when called:    7
 20450 ;; This function calls:
 20451 ;;		Nothing
 20452 ;; This function is called by:
 20453 ;;		_HMI_Init
 20454 ;;		_Button_Init
 20455 ;; This function uses a non-reentrant model
 20456 ;;
 20457                           
 20458                           	psect	text114
 20459  014AD0                     __ptext114:
 20460                           	opt stack 0
 20461  014AD0                     _HMI_InitButtons:
 20462                           	opt stack 20
 20463                           
 20464                           ;HMI.c: 23: TRISE = 0xFF;
 20465                           
 20466                           ;incstack = 0
 20467  014AD0  6896               	setf	3990,c	;volatile
 20468  014AD2  0012               	return		;funcret
 20469  014AD4                     __end_of_HMI_InitButtons:
 20470                           	opt stack 0
 20471                           tosu	equ	0xFFF
 20472                           tosh	equ	0xFFE
 20473                           tosl	equ	0xFFD
 20474                           pclath	equ	0xFFA
 20475                           tblptru	equ	0xFF8
 20476                           tblptrh	equ	0xFF7
 20477                           tblptrl	equ	0xFF6
 20478                           tablat	equ	0xFF5
 20479                           prodh	equ	0xFF4
 20480                           prodl	equ	0xFF3
 20481                           intcon	equ	0xFF2
 20482                           postinc0	equ	0xFEE
 20483                           plusw0	equ	0xFEB
 20484                           wreg	equ	0xFE8
 20485                           indf1	equ	0xFE7
 20486                           postdec1	equ	0xFE5
 20487                           fsr1h	equ	0xFE2
 20488                           fsr1l	equ	0xFE1
 20489                           indf2	equ	0xFDF
 20490                           postinc2	equ	0xFDE
 20491                           postdec2	equ	0xFDD
 20492                           plusw2	equ	0xFDB
 20493                           fsr2h	equ	0xFDA
 20494                           fsr2l	equ	0xFD9
 20495                           status	equ	0xFD8
 20496                           
 20497 ;; *************** function _MXK_InitTestButton *****************
 20498 ;; Defined at:
 20499 ;;		line 10 in file "Library/MXK.c"
 20500 ;; Parameters:    Size  Location     Type
 20501 ;;		None
 20502 ;; Auto vars:     Size  Location     Type
 20503 ;;		None
 20504 ;; Return value:  Size  Location     Type
 20505 ;;                  1    wreg      void 
 20506 ;; Registers used:
 20507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20508 ;; Tracked objects:
 20509 ;;		On entry : 0/0
 20510 ;;		On exit  : 0/0
 20511 ;;		Unchanged: 0/0
 20512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20517 ;;Total ram usage:        0 bytes
 20518 ;; Hardware stack levels used:    1
 20519 ;; Hardware stack levels required when called:   12
 20520 ;; This function calls:
 20521 ;;		_Port_SetPinType
 20522 ;; This function is called by:
 20523 ;;		_FunctInitButton
 20524 ;;		_Button_Init
 20525 ;; This function uses a non-reentrant model
 20526 ;;
 20527                           
 20528                           	psect	text115
 20529  01489E                     __ptext115:
 20530                           	opt stack 0
 20531  01489E                     _MXK_InitTestButton:
 20532                           	opt stack 15
 20533                           
 20534                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20535                           
 20536                           ;incstack = 0
 20537  01489E  0E98               	movlw	low _PortB
 20538  0148A0  0100               	movlb	0	; () banked
 20539  0148A2  6FD8               	movwf	Port_SetPinType@pInput& (0+255),b
 20540  0148A4  0E01               	movlw	high _PortB
 20541  0148A6  0100               	movlb	0	; () banked
 20542  0148A8  6FD9               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20543  0148AA  0E04               	movlw	4
 20544  0148AC  0100               	movlb	0	; () banked
 20545  0148AE  6FDA               	movwf	Port_SetPinType@pPin& (0+255),b
 20546  0148B0  0E00               	movlw	0
 20547  0148B2  0100               	movlb	0	; () banked
 20548  0148B4  6FDB               	movwf	Port_SetPinType@pType& (0+255),b
 20549  0148B6  ECD4  F08A         	call	_Port_SetPinType	;wreg free
 20550  0148BA  0012               	return		;funcret
 20551  0148BC                     __end_of_MXK_InitTestButton:
 20552                           	opt stack 0
 20553                           tosu	equ	0xFFF
 20554                           tosh	equ	0xFFE
 20555                           tosl	equ	0xFFD
 20556                           pclath	equ	0xFFA
 20557                           tblptru	equ	0xFF8
 20558                           tblptrh	equ	0xFF7
 20559                           tblptrl	equ	0xFF6
 20560                           tablat	equ	0xFF5
 20561                           prodh	equ	0xFF4
 20562                           prodl	equ	0xFF3
 20563                           intcon	equ	0xFF2
 20564                           postinc0	equ	0xFEE
 20565                           plusw0	equ	0xFEB
 20566                           wreg	equ	0xFE8
 20567                           indf1	equ	0xFE7
 20568                           postdec1	equ	0xFE5
 20569                           fsr1h	equ	0xFE2
 20570                           fsr1l	equ	0xFE1
 20571                           indf2	equ	0xFDF
 20572                           postinc2	equ	0xFDE
 20573                           postdec2	equ	0xFDD
 20574                           plusw2	equ	0xFDB
 20575                           fsr2h	equ	0xFDA
 20576                           fsr2l	equ	0xFD9
 20577                           status	equ	0xFD8
 20578                           
 20579 ;; *************** function _Port_SetPinType *****************
 20580 ;; Defined at:
 20581 ;;		line 189 in file "Library/Port.c"
 20582 ;; Parameters:    Size  Location     Type
 20583 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20584 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20585 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20586 ;;  pPin            1   40[BANK0 ] enum E6750
 20587 ;;  pType           1   41[BANK0 ] enum E6795
 20588 ;; Auto vars:     Size  Location     Type
 20589 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20590 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20591 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 20592 ;;  Output          1   42[BANK0 ] enum E6475
 20593 ;; Return value:  Size  Location     Type
 20594 ;;                  1    wreg      enum E6475
 20595 ;; Registers used:
 20596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20597 ;; Tracked objects:
 20598 ;;		On entry : 0/0
 20599 ;;		On exit  : 0/0
 20600 ;;		Unchanged: 0/0
 20601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20603 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20605 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20606 ;;Total ram usage:        7 bytes
 20607 ;; Hardware stack levels used:    1
 20608 ;; Hardware stack levels required when called:   11
 20609 ;; This function calls:
 20610 ;;		_Byte_SetBit
 20611 ;;		_PortProperty_Valid
 20612 ;;		_Word_SetPair
 20613 ;; This function is called by:
 20614 ;;		_Configure_GPIOs
 20615 ;;		_LED_Init
 20616 ;;		_Port_Init
 20617 ;;		_SPI_Init
 20618 ;;		_Motor_Init
 20619 ;;		_MXK_InitTestButton
 20620 ;;		_MXK_Init
 20621 ;;		_I2C_Init
 20622 ;; This function uses a non-reentrant model
 20623 ;;
 20624                           
 20625                           	psect	text116
 20626  0115A8                     __ptext116:
 20627                           	opt stack 0
 20628  0115A8                     _Port_SetPinType:
 20629                           	opt stack 17
 20630                           
 20631                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 20632                           
 20633                           ;incstack = 0
 20634  0115A8  C0D8  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 20635  0115AC  C0D9  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 20636  0115B0  CFDE F0DD          	movff	postinc2,Port_SetPinType@Props
 20637  0115B4  CFDD F0DE          	movff	postdec2,Port_SetPinType@Props+1
 20638                           
 20639                           ;Port.c: 192: ePinError Output = ePinErrorState;
 20640  0115B8  0E05               	movlw	5
 20641  0115BA  0100               	movlb	0	; () banked
 20642  0115BC  6FDC               	movwf	Port_SetPinType@Output& (0+255),b
 20643                           
 20644                           ;Port.c: 193: switch (pType)
 20645  0115BE  D0B5               	goto	l412
 20646  0115C0                     
 20647                           ; BSR set to: 0
 20648                           ;Port.c: 197: {
 20649                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20650                           
 20651                           ; BSR set to: 0
 20652  0115C0  0100               	movlb	0	; () banked
 20653  0115C2  EE20 F002          	lfsr	2,2
 20654  0115C6  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20655  0115C8  26D9               	addwf	fsr2l,f,c
 20656  0115CA  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20657  0115CC  22DA               	addwfc	fsr2h,f,c
 20658  0115CE  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20659  0115D2  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20660  0115D6  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20661  0115DA  0E01               	movlw	1
 20662  0115DC  0100               	movlb	0	; () banked
 20663  0115DE  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20664  0115E0  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20665                           
 20666                           ;Port.c: 203: break;
 20667  0115E4  D0B0               	goto	l414
 20668  0115E6                     
 20669                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 20670  0115E6  C0DD  F0C1         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20671  0115EA  C0DE  F0C2         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20672  0115EE  0E01               	movlw	1
 20673  0115F0  0100               	movlb	0	; () banked
 20674  0115F2  6FC3               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20675  0115F4  C0DA  F0C4         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20676  0115F8  EC31  F09B         	call	_PortProperty_Valid	;wreg free
 20677  0115FC  0100               	movlb	0	; () banked
 20678  0115FE  6FDC               	movwf	Port_SetPinType@Output& (0+255),b
 20679  011600  0100               	movlb	0	; () banked
 20680  011602  51DC               	movf	Port_SetPinType@Output& (0+255),w,b
 20681  011604  A4D8               	btfss	status,2,c
 20682  011606  0012               	return	
 20683                           
 20684                           ; BSR set to: 0
 20685                           ;Port.c: 208: {
 20686                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20687  011608  0100               	movlb	0	; () banked
 20688  01160A  EE20 F002          	lfsr	2,2
 20689  01160E  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20690  011610  26D9               	addwf	fsr2l,f,c
 20691  011612  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20692  011614  22DA               	addwfc	fsr2h,f,c
 20693  011616  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20694  01161A  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20695  01161E  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20696  011622  0E00               	movlw	0
 20697  011624  0100               	movlb	0	; () banked
 20698  011626  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20699  011628  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20700                           
 20701                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20702  01162C  0100               	movlb	0	; () banked
 20703  01162E  EE20 F004          	lfsr	2,4
 20704  011632  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20705  011634  26D9               	addwf	fsr2l,f,c
 20706  011636  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20707  011638  22DA               	addwfc	fsr2h,f,c
 20708  01163A  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20709  01163E  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20710  011642  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20711  011646  0E00               	movlw	0
 20712  011648  0100               	movlb	0	; () banked
 20713  01164A  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20714  01164C  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20715                           
 20716                           ;Port.c: 214: break;
 20717  011650  D07A               	goto	l414
 20718  011652                     
 20719                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 20720                           
 20721                           ;Port.c: 218: case eTypeOutputOpenSource:
 20722  011652  C0DD  F0C1         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20723  011656  C0DE  F0C2         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20724  01165A  0E02               	movlw	2
 20725  01165C  0100               	movlb	0	; () banked
 20726  01165E  6FC3               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20727  011660  C0DA  F0C4         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20728  011664  EC31  F09B         	call	_PortProperty_Valid	;wreg free
 20729  011668  0100               	movlb	0	; () banked
 20730  01166A  6FDC               	movwf	Port_SetPinType@Output& (0+255),b
 20731  01166C  0100               	movlb	0	; () banked
 20732  01166E  51DC               	movf	Port_SetPinType@Output& (0+255),w,b
 20733  011670  A4D8               	btfss	status,2,c
 20734  011672  0012               	return	
 20735                           
 20736                           ; BSR set to: 0
 20737                           ;Port.c: 220: {
 20738                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20739  011674  0100               	movlb	0	; () banked
 20740  011676  EE20 F002          	lfsr	2,2
 20741  01167A  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20742  01167C  26D9               	addwf	fsr2l,f,c
 20743  01167E  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20744  011680  22DA               	addwfc	fsr2h,f,c
 20745  011682  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20746  011686  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20747  01168A  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20748  01168E  0E01               	movlw	1
 20749  011690  0100               	movlb	0	; () banked
 20750  011692  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20751  011694  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20752                           
 20753                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 20754  011698  0100               	movlb	0	; () banked
 20755  01169A  EE20 F004          	lfsr	2,4
 20756  01169E  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20757  0116A0  26D9               	addwf	fsr2l,f,c
 20758  0116A2  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20759  0116A4  22DA               	addwfc	fsr2h,f,c
 20760  0116A6  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20761  0116AA  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20762  0116AE  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20763  0116B2  0E01               	movlw	1
 20764  0116B4  0100               	movlb	0	; () banked
 20765  0116B6  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20766  0116B8  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20767                           
 20768                           ;Port.c: 226: break;
 20769  0116BC  D044               	goto	l414
 20770  0116BE                     
 20771                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 20772                           
 20773                           ;Port.c: 230: case eTypeOutputPushPull:
 20774  0116BE  C0DD  F0C1         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20775  0116C2  C0DE  F0C2         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20776  0116C6  0E00               	movlw	0
 20777  0116C8  0100               	movlb	0	; () banked
 20778  0116CA  6FC3               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20779  0116CC  C0DA  F0C4         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20780  0116D0  EC31  F09B         	call	_PortProperty_Valid	;wreg free
 20781  0116D4  0100               	movlb	0	; () banked
 20782  0116D6  6FDC               	movwf	Port_SetPinType@Output& (0+255),b
 20783  0116D8  0100               	movlb	0	; () banked
 20784  0116DA  51DC               	movf	Port_SetPinType@Output& (0+255),w,b
 20785  0116DC  A4D8               	btfss	status,2,c
 20786  0116DE  0012               	return	
 20787                           
 20788                           ; BSR set to: 0
 20789                           ;Port.c: 232: {
 20790                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20791  0116E0  0100               	movlb	0	; () banked
 20792  0116E2  EE20 F002          	lfsr	2,2
 20793  0116E6  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20794  0116E8  26D9               	addwf	fsr2l,f,c
 20795  0116EA  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20796  0116EC  22DA               	addwfc	fsr2h,f,c
 20797  0116EE  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20798  0116F2  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20799  0116F6  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20800  0116FA  0E00               	movlw	0
 20801  0116FC  0100               	movlb	0	; () banked
 20802  0116FE  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20803  011700  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20804                           
 20805                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20806  011704  0100               	movlb	0	; () banked
 20807  011706  EE20 F004          	lfsr	2,4
 20808  01170A  51D8               	movf	Port_SetPinType@pInput& (0+255),w,b
 20809  01170C  26D9               	addwf	fsr2l,f,c
 20810  01170E  51D9               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20811  011710  22DA               	addwfc	fsr2h,f,c
 20812  011712  CFDE F0B2          	movff	postinc2,Byte_SetBit@pInput
 20813  011716  CFDD F0B3          	movff	postdec2,Byte_SetBit@pInput+1
 20814  01171A  C0DA  F0B4         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20815  01171E  0E00               	movlw	0
 20816  011720  0100               	movlb	0	; () banked
 20817  011722  6FB5               	movwf	Byte_SetBit@pValue& (0+255),b
 20818  011724  EC0E  F09E         	call	_Byte_SetBit	;wreg free
 20819                           
 20820                           ;Port.c: 239: }
 20821                           
 20822                           ;Port.c: 238: break;
 20823  011728  D00E               	goto	l414
 20824  01172A                     l412:
 20825  01172A  0100               	movlb	0	; () banked
 20826  01172C  51DB               	movf	Port_SetPinType@pType& (0+255),w,b
 20827                           
 20828                           ; Switch size 1, requested type "space"
 20829                           ; Number of cases is 4, Range of values is 0 to 3
 20830                           ; switch strategies available:
 20831                           ; Name         Instructions Cycles
 20832                           ; simple_byte           13     7 (average)
 20833                           ;	Chosen strategy is simple_byte
 20834  01172E  0A00               	xorlw	0	; case 0
 20835  011730  B4D8               	btfsc	status,2,c
 20836  011732  D746               	goto	l413
 20837  011734  0A01               	xorlw	1	; case 1
 20838  011736  B4D8               	btfsc	status,2,c
 20839  011738  D756               	goto	l415
 20840  01173A  0A03               	xorlw	3	; case 2
 20841  01173C  B4D8               	btfsc	status,2,c
 20842  01173E  D789               	goto	l417
 20843  011740  0A01               	xorlw	1	; case 3
 20844  011742  B4D8               	btfsc	status,2,c
 20845  011744  D7BC               	goto	l421
 20846  011746                     l414:
 20847                           
 20848                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 20849                           
 20850                           ; BSR set to: 0
 20851  011746  0E08               	movlw	8
 20852  011748  0100               	movlb	0	; () banked
 20853  01174A  25D8               	addwf	Port_SetPinType@pInput& (0+255),w,b
 20854  01174C  0100               	movlb	0	; () banked
 20855  01174E  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 20856  011750  0E00               	movlw	0
 20857  011752  0100               	movlb	0	; () banked
 20858  011754  21D9               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 20859  011756  0100               	movlb	0	; () banked
 20860  011758  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 20861  01175A  C0DA  F0C3         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 20862  01175E  C0DB  F0C4         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 20863  011762  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 20864  011766  0012               	return	
 20865  011768                     __end_of_Port_SetPinType:
 20866                           	opt stack 0
 20867                           tosu	equ	0xFFF
 20868                           tosh	equ	0xFFE
 20869                           tosl	equ	0xFFD
 20870                           pclath	equ	0xFFA
 20871                           tblptru	equ	0xFF8
 20872                           tblptrh	equ	0xFF7
 20873                           tblptrl	equ	0xFF6
 20874                           tablat	equ	0xFF5
 20875                           prodh	equ	0xFF4
 20876                           prodl	equ	0xFF3
 20877                           intcon	equ	0xFF2
 20878                           postinc0	equ	0xFEE
 20879                           plusw0	equ	0xFEB
 20880                           wreg	equ	0xFE8
 20881                           indf1	equ	0xFE7
 20882                           postdec1	equ	0xFE5
 20883                           fsr1h	equ	0xFE2
 20884                           fsr1l	equ	0xFE1
 20885                           indf2	equ	0xFDF
 20886                           postinc2	equ	0xFDE
 20887                           postdec2	equ	0xFDD
 20888                           plusw2	equ	0xFDB
 20889                           fsr2h	equ	0xFDA
 20890                           fsr2l	equ	0xFD9
 20891                           status	equ	0xFD8
 20892                           
 20893 ;; *************** function _Byte_SetBit *****************
 20894 ;; Defined at:
 20895 ;;		line 32 in file "Library/Types.c"
 20896 ;; Parameters:    Size  Location     Type
 20897 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20898 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20899 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20900 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20901 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20902 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20903 ;;		 -> NULL(0), 
 20904 ;;  pBit            1    2[BANK0 ] unsigned char 
 20905 ;;  pValue          1    3[BANK0 ] unsigned char 
 20906 ;; Auto vars:     Size  Location     Type
 20907 ;;		None
 20908 ;; Return value:  Size  Location     Type
 20909 ;;                  1    wreg      void 
 20910 ;; Registers used:
 20911 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20912 ;; Tracked objects:
 20913 ;;		On entry : 0/0
 20914 ;;		On exit  : 0/0
 20915 ;;		Unchanged: 0/0
 20916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;Total ram usage:        7 bytes
 20922 ;; Hardware stack levels used:    1
 20923 ;; Hardware stack levels required when called:    7
 20924 ;; This function calls:
 20925 ;;		Nothing
 20926 ;; This function is called by:
 20927 ;;		_Port_SetPinType
 20928 ;;		_Port_SetPin
 20929 ;;		_SPI_Init
 20930 ;;		_SPI_MinSpeed
 20931 ;;		_SPI_MaxSpeed
 20932 ;;		_Word_SetBit
 20933 ;;		_I2C_Init
 20934 ;; This function uses a non-reentrant model
 20935 ;;
 20936                           
 20937                           	psect	text117
 20938  013C1C                     __ptext117:
 20939                           	opt stack 0
 20940  013C1C                     _Byte_SetBit:
 20941                           	opt stack 12
 20942                           
 20943                           ;Types.c: 34: pValue &= 1;
 20944                           
 20945                           ;incstack = 0
 20946  013C1C  0E01               	movlw	1
 20947  013C1E  0100               	movlb	0	; () banked
 20948  013C20  17B5               	andwf	Byte_SetBit@pValue& (0+255),f,b
 20949                           
 20950                           ; BSR set to: 0
 20951                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20952  013C22  C0B4  F0B6         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20953  013C26  0E01               	movlw	1
 20954  013C28  0100               	movlb	0	; () banked
 20955  013C2A  6FB7               	movwf	(??_Byte_SetBit+1)& (0+255),b
 20956  013C2C  0100               	movlb	0	; () banked
 20957  013C2E  2BB6               	incf	??_Byte_SetBit& (0+255),f,b
 20958  013C30  D003               	goto	u6514
 20959  013C32                     u6515:
 20960  013C32  0100               	movlb	0	; () banked
 20961  013C34  90D8               	bcf	status,0,c
 20962  013C36  37B7               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20963  013C38                     u6514:
 20964  013C38  0100               	movlb	0	; () banked
 20965  013C3A  2FB6               	decfsz	??_Byte_SetBit& (0+255),f,b
 20966  013C3C  D7FA               	goto	u6515
 20967  013C3E  0100               	movlb	0	; () banked
 20968  013C40  51B7               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20969  013C42  0AFF               	xorlw	255
 20970  013C44  0100               	movlb	0	; () banked
 20971  013C46  6FB8               	movwf	(??_Byte_SetBit+2)& (0+255),b
 20972  013C48  C0B2  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20973  013C4C  C0B3  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20974  013C50  0100               	movlb	0	; () banked
 20975  013C52  51B8               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 20976  013C54  16DF               	andwf	indf2,f,c
 20977                           
 20978                           ; BSR set to: 0
 20979                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20980  013C56  C0B4  F0B6         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20981  013C5A  C0B5  F0B7         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 20982  013C5E  0100               	movlb	0	; () banked
 20983  013C60  2BB6               	incf	??_Byte_SetBit& (0+255),f,b
 20984  013C62  D003               	goto	u6524
 20985  013C64                     u6525:
 20986  013C64  0100               	movlb	0	; () banked
 20987  013C66  90D8               	bcf	status,0,c
 20988  013C68  37B7               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20989  013C6A                     u6524:
 20990  013C6A  0100               	movlb	0	; () banked
 20991  013C6C  2FB6               	decfsz	??_Byte_SetBit& (0+255),f,b
 20992  013C6E  D7FA               	goto	u6525
 20993  013C70  C0B2  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20994  013C74  C0B3  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20995  013C78  0100               	movlb	0	; () banked
 20996  013C7A  51B7               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20997  013C7C  12DF               	iorwf	indf2,f,c
 20998                           
 20999                           ; BSR set to: 0
 21000  013C7E  0012               	return		;funcret
 21001  013C80                     __end_of_Byte_SetBit:
 21002                           	opt stack 0
 21003                           tosu	equ	0xFFF
 21004                           tosh	equ	0xFFE
 21005                           tosl	equ	0xFFD
 21006                           pclath	equ	0xFFA
 21007                           tblptru	equ	0xFF8
 21008                           tblptrh	equ	0xFF7
 21009                           tblptrl	equ	0xFF6
 21010                           tablat	equ	0xFF5
 21011                           prodh	equ	0xFF4
 21012                           prodl	equ	0xFF3
 21013                           intcon	equ	0xFF2
 21014                           postinc0	equ	0xFEE
 21015                           plusw0	equ	0xFEB
 21016                           wreg	equ	0xFE8
 21017                           indf1	equ	0xFE7
 21018                           postdec1	equ	0xFE5
 21019                           fsr1h	equ	0xFE2
 21020                           fsr1l	equ	0xFE1
 21021                           indf2	equ	0xFDF
 21022                           postinc2	equ	0xFDE
 21023                           postdec2	equ	0xFDD
 21024                           plusw2	equ	0xFDB
 21025                           fsr2h	equ	0xFDA
 21026                           fsr2l	equ	0xFD9
 21027                           status	equ	0xFD8
 21028                           
 21029 ;; *************** function _Port_SetQuadType *****************
 21030 ;; Defined at:
 21031 ;;		line 399 in file "Library/Port.c"
 21032 ;; Parameters:    Size  Location     Type
 21033 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 21034 ;;		 -> PortB(10), PortD(10), 
 21035 ;;  pQuad           1   56[BANK0 ] enum E6776
 21036 ;;  pType           1   57[BANK0 ] enum E6795
 21037 ;; Auto vars:     Size  Location     Type
 21038 ;;  Output          1   58[BANK0 ] enum E6475
 21039 ;; Return value:  Size  Location     Type
 21040 ;;                  1    wreg      enum E6475
 21041 ;; Registers used:
 21042 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21043 ;; Tracked objects:
 21044 ;;		On entry : 0/0
 21045 ;;		On exit  : 0/0
 21046 ;;		Unchanged: 0/0
 21047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21048 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21051 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21052 ;;Total ram usage:        5 bytes
 21053 ;; Hardware stack levels used:    1
 21054 ;; Hardware stack levels required when called:   13
 21055 ;; This function calls:
 21056 ;;		_Byte_SetQuad
 21057 ;;		_Port_CheckQuadType
 21058 ;;		_Word_SetPair
 21059 ;; This function is called by:
 21060 ;;		_MXK_InitDIPSwitch
 21061 ;;		_MXK_Init
 21062 ;; This function uses a non-reentrant model
 21063 ;;
 21064                           
 21065                           	psect	text118
 21066  010D1E                     __ptext118:
 21067                           	opt stack 0
 21068  010D1E                     _Port_SetQuadType:
 21069                           	opt stack 15
 21070                           
 21071                           ;Port.c: 401: ePinError Output = ePinErrorState;
 21072                           
 21073                           ; BSR set to: 0
 21074                           ;incstack = 0
 21075  010D1E  0E05               	movlw	5
 21076  010D20  0100               	movlb	0	; () banked
 21077  010D22  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 21078                           
 21079                           ;Port.c: 403: switch (pType)
 21080  010D24  D0C7               	goto	l476
 21081  010D26                     
 21082                           ; BSR set to: 0
 21083                           ;Port.c: 407: {
 21084                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21085                           
 21086                           ; BSR set to: 0
 21087  010D26  0100               	movlb	0	; () banked
 21088  010D28  EE20 F002          	lfsr	2,2
 21089  010D2C  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21090  010D2E  26D9               	addwf	fsr2l,f,c
 21091  010D30  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21092  010D32  22DA               	addwfc	fsr2h,f,c
 21093  010D34  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21094  010D38  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21095  010D3C  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21096  010D40  0E0F               	movlw	15
 21097  010D42  0100               	movlb	0	; () banked
 21098  010D44  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21099  010D46  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21100                           
 21101                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21102  010D4A  0100               	movlb	0	; () banked
 21103  010D4C  EE20 F004          	lfsr	2,4
 21104  010D50  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21105  010D52  26D9               	addwf	fsr2l,f,c
 21106  010D54  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21107  010D56  22DA               	addwfc	fsr2h,f,c
 21108  010D58  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21109  010D5C  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21110  010D60  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21111  010D64  0E00               	movlw	0
 21112  010D66  0100               	movlb	0	; () banked
 21113  010D68  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21114  010D6A  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21115                           
 21116                           ;Port.c: 413: }
 21117                           ;Port.c: 415: break;
 21118  010D6E  D0B0               	goto	l478
 21119  010D70                     
 21120                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21121  010D70  C0E8  F0E1         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21122  010D74  C0E9  F0E2         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21123  010D78  C0EA  F0E3         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21124  010D7C  0E03               	movlw	3
 21125  010D7E  0100               	movlb	0	; () banked
 21126  010D80  6FE4               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21127  010D82  ECFF  F09E         	call	_Port_CheckQuadType	;wreg free
 21128  010D86  0100               	movlb	0	; () banked
 21129  010D88  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 21130  010D8A  0100               	movlb	0	; () banked
 21131  010D8C  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 21132  010D8E  A4D8               	btfss	status,2,c
 21133  010D90  0012               	return	
 21134                           
 21135                           ; BSR set to: 0
 21136                           ;Port.c: 418: {
 21137                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21138  010D92  0100               	movlb	0	; () banked
 21139  010D94  EE20 F002          	lfsr	2,2
 21140  010D98  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21141  010D9A  26D9               	addwf	fsr2l,f,c
 21142  010D9C  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21143  010D9E  22DA               	addwfc	fsr2h,f,c
 21144  010DA0  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21145  010DA4  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21146  010DA8  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21147  010DAC  0E00               	movlw	0
 21148  010DAE  0100               	movlb	0	; () banked
 21149  010DB0  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21150  010DB2  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21151                           
 21152                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21153  010DB6  0100               	movlb	0	; () banked
 21154  010DB8  EE20 F004          	lfsr	2,4
 21155  010DBC  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21156  010DBE  26D9               	addwf	fsr2l,f,c
 21157  010DC0  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21158  010DC2  22DA               	addwfc	fsr2h,f,c
 21159  010DC4  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21160  010DC8  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21161  010DCC  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21162  010DD0  0E00               	movlw	0
 21163  010DD2  0100               	movlb	0	; () banked
 21164  010DD4  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21165  010DD6  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21166                           
 21167                           ;Port.c: 424: }
 21168  010DDA  D07A               	goto	l478
 21169  010DDC                     
 21170                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21171  010DDC  C0E8  F0E1         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21172  010DE0  C0E9  F0E2         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21173  010DE4  C0EA  F0E3         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21174  010DE8  0E03               	movlw	3
 21175  010DEA  0100               	movlb	0	; () banked
 21176  010DEC  6FE4               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21177  010DEE  ECFF  F09E         	call	_Port_CheckQuadType	;wreg free
 21178  010DF2  0100               	movlb	0	; () banked
 21179  010DF4  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 21180  010DF6  0100               	movlb	0	; () banked
 21181  010DF8  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 21182  010DFA  A4D8               	btfss	status,2,c
 21183  010DFC  0012               	return	
 21184                           
 21185                           ; BSR set to: 0
 21186                           ;Port.c: 429: {
 21187                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21188  010DFE  0100               	movlb	0	; () banked
 21189  010E00  EE20 F002          	lfsr	2,2
 21190  010E04  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21191  010E06  26D9               	addwf	fsr2l,f,c
 21192  010E08  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21193  010E0A  22DA               	addwfc	fsr2h,f,c
 21194  010E0C  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21195  010E10  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21196  010E14  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21197  010E18  0E0F               	movlw	15
 21198  010E1A  0100               	movlb	0	; () banked
 21199  010E1C  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21200  010E1E  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21201                           
 21202                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 21203  010E22  0100               	movlb	0	; () banked
 21204  010E24  EE20 F004          	lfsr	2,4
 21205  010E28  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21206  010E2A  26D9               	addwf	fsr2l,f,c
 21207  010E2C  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21208  010E2E  22DA               	addwfc	fsr2h,f,c
 21209  010E30  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21210  010E34  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21211  010E38  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21212  010E3C  0E0F               	movlw	15
 21213  010E3E  0100               	movlb	0	; () banked
 21214  010E40  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21215  010E42  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21216                           
 21217                           ;Port.c: 435: }
 21218  010E46  D044               	goto	l478
 21219  010E48                     
 21220                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21221  010E48  C0E8  F0E1         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21222  010E4C  C0E9  F0E2         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21223  010E50  C0EA  F0E3         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21224  010E54  0E03               	movlw	3
 21225  010E56  0100               	movlb	0	; () banked
 21226  010E58  6FE4               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21227  010E5A  ECFF  F09E         	call	_Port_CheckQuadType	;wreg free
 21228  010E5E  0100               	movlb	0	; () banked
 21229  010E60  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 21230  010E62  0100               	movlb	0	; () banked
 21231  010E64  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 21232  010E66  A4D8               	btfss	status,2,c
 21233  010E68  0012               	return	
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;Port.c: 440: {
 21237                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21238  010E6A  0100               	movlb	0	; () banked
 21239  010E6C  EE20 F002          	lfsr	2,2
 21240  010E70  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21241  010E72  26D9               	addwf	fsr2l,f,c
 21242  010E74  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21243  010E76  22DA               	addwfc	fsr2h,f,c
 21244  010E78  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21245  010E7C  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21246  010E80  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21247  010E84  0E00               	movlw	0
 21248  010E86  0100               	movlb	0	; () banked
 21249  010E88  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21250  010E8A  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21251                           
 21252                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21253  010E8E  0100               	movlb	0	; () banked
 21254  010E90  EE20 F004          	lfsr	2,4
 21255  010E94  51E8               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21256  010E96  26D9               	addwf	fsr2l,f,c
 21257  010E98  51E9               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21258  010E9A  22DA               	addwfc	fsr2h,f,c
 21259  010E9C  CFDE F0BD          	movff	postinc2,Byte_SetQuad@pInput
 21260  010EA0  CFDD F0BE          	movff	postdec2,Byte_SetQuad@pInput+1
 21261  010EA4  C0EA  F0BF         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21262  010EA8  0E00               	movlw	0
 21263  010EAA  0100               	movlb	0	; () banked
 21264  010EAC  6FC0               	movwf	Byte_SetQuad@pValue& (0+255),b
 21265  010EAE  ECE3  F0A3         	call	_Byte_SetQuad	;wreg free
 21266                           
 21267                           ;Port.c: 446: }
 21268  010EB2  D00E               	goto	l478
 21269  010EB4                     l476:
 21270  010EB4  0100               	movlb	0	; () banked
 21271  010EB6  51EB               	movf	Port_SetQuadType@pType& (0+255),w,b
 21272                           
 21273                           ; Switch size 1, requested type "space"
 21274                           ; Number of cases is 4, Range of values is 0 to 3
 21275                           ; switch strategies available:
 21276                           ; Name         Instructions Cycles
 21277                           ; simple_byte           13     7 (average)
 21278                           ;	Chosen strategy is simple_byte
 21279  010EB8  0A00               	xorlw	0	; case 0
 21280  010EBA  B4D8               	btfsc	status,2,c
 21281  010EBC  D734               	goto	l477
 21282  010EBE  0A01               	xorlw	1	; case 1
 21283  010EC0  B4D8               	btfsc	status,2,c
 21284  010EC2  D756               	goto	l479
 21285  010EC4  0A03               	xorlw	3	; case 2
 21286  010EC6  B4D8               	btfsc	status,2,c
 21287  010EC8  D789               	goto	l483
 21288  010ECA  0A01               	xorlw	1	; case 3
 21289  010ECC  B4D8               	btfsc	status,2,c
 21290  010ECE  D7BC               	goto	l486
 21291  010ED0                     l478:
 21292                           
 21293                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 21294                           
 21295                           ; BSR set to: 0
 21296  010ED0  0E08               	movlw	8
 21297  010ED2  0100               	movlb	0	; () banked
 21298  010ED4  25E8               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21299  010ED6  0100               	movlb	0	; () banked
 21300  010ED8  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 21301  010EDA  0E00               	movlw	0
 21302  010EDC  0100               	movlb	0	; () banked
 21303  010EDE  21E9               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21304  010EE0  0100               	movlb	0	; () banked
 21305  010EE2  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21306  010EE4  0100               	movlb	0	; () banked
 21307  010EE6  51EA               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21308  010EE8  0D04               	mullw	4
 21309  010EEA  CFF3 F0C3          	movff	prodl,Word_SetPair@pPair
 21310  010EEE  C0EB  F0C4         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21311  010EF2  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 21312                           
 21313                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21314  010EF6  0E08               	movlw	8
 21315  010EF8  0100               	movlb	0	; () banked
 21316  010EFA  25E8               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21317  010EFC  0100               	movlb	0	; () banked
 21318  010EFE  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 21319  010F00  0E00               	movlw	0
 21320  010F02  0100               	movlb	0	; () banked
 21321  010F04  21E9               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21322  010F06  0100               	movlb	0	; () banked
 21323  010F08  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21324  010F0A  0100               	movlb	0	; () banked
 21325  010F0C  51EA               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21326  010F0E  0D04               	mullw	4
 21327  010F10  28F3               	incf	prodl,w,c
 21328  010F12  0100               	movlb	0	; () banked
 21329  010F14  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 21330  010F16  C0EB  F0C4         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21331  010F1A  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 21332                           
 21333                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21334  010F1E  0E08               	movlw	8
 21335  010F20  0100               	movlb	0	; () banked
 21336  010F22  25E8               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21337  010F24  0100               	movlb	0	; () banked
 21338  010F26  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 21339  010F28  0E00               	movlw	0
 21340  010F2A  0100               	movlb	0	; () banked
 21341  010F2C  21E9               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21342  010F2E  0100               	movlb	0	; () banked
 21343  010F30  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21344  010F32  0100               	movlb	0	; () banked
 21345  010F34  51EA               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21346  010F36  0D04               	mullw	4
 21347  010F38  50F3               	movf	prodl,w,c
 21348  010F3A  0F02               	addlw	2
 21349  010F3C  0100               	movlb	0	; () banked
 21350  010F3E  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 21351  010F40  C0EB  F0C4         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21352  010F44  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 21353                           
 21354                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21355  010F48  0E08               	movlw	8
 21356  010F4A  0100               	movlb	0	; () banked
 21357  010F4C  25E8               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21358  010F4E  0100               	movlb	0	; () banked
 21359  010F50  6FC1               	movwf	Word_SetPair@pInput& (0+255),b
 21360  010F52  0E00               	movlw	0
 21361  010F54  0100               	movlb	0	; () banked
 21362  010F56  21E9               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21363  010F58  0100               	movlb	0	; () banked
 21364  010F5A  6FC2               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21365  010F5C  0100               	movlb	0	; () banked
 21366  010F5E  51EA               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21367  010F60  0D04               	mullw	4
 21368  010F62  50F3               	movf	prodl,w,c
 21369  010F64  0F03               	addlw	3
 21370  010F66  0100               	movlb	0	; () banked
 21371  010F68  6FC3               	movwf	Word_SetPair@pPair& (0+255),b
 21372  010F6A  C0EB  F0C4         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21373  010F6E  ECDB  F0A0         	call	_Word_SetPair	;wreg free
 21374  010F72  0012               	return	
 21375  010F74                     __end_of_Port_SetQuadType:
 21376                           	opt stack 0
 21377                           tosu	equ	0xFFF
 21378                           tosh	equ	0xFFE
 21379                           tosl	equ	0xFFD
 21380                           pclath	equ	0xFFA
 21381                           tblptru	equ	0xFF8
 21382                           tblptrh	equ	0xFF7
 21383                           tblptrl	equ	0xFF6
 21384                           tablat	equ	0xFF5
 21385                           prodh	equ	0xFF4
 21386                           prodl	equ	0xFF3
 21387                           intcon	equ	0xFF2
 21388                           postinc0	equ	0xFEE
 21389                           plusw0	equ	0xFEB
 21390                           wreg	equ	0xFE8
 21391                           indf1	equ	0xFE7
 21392                           postdec1	equ	0xFE5
 21393                           fsr1h	equ	0xFE2
 21394                           fsr1l	equ	0xFE1
 21395                           indf2	equ	0xFDF
 21396                           postinc2	equ	0xFDE
 21397                           postdec2	equ	0xFDD
 21398                           plusw2	equ	0xFDB
 21399                           fsr2h	equ	0xFDA
 21400                           fsr2l	equ	0xFD9
 21401                           status	equ	0xFD8
 21402                           
 21403 ;; *************** function _Word_SetPair *****************
 21404 ;; Defined at:
 21405 ;;		line 149 in file "Library/Types.c"
 21406 ;; Parameters:    Size  Location     Type
 21407 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21408 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21409 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21410 ;;  pPair           1   17[BANK0 ] unsigned char 
 21411 ;;  pValue          1   18[BANK0 ] unsigned char 
 21412 ;; Auto vars:     Size  Location     Type
 21413 ;;		None
 21414 ;; Return value:  Size  Location     Type
 21415 ;;                  1    wreg      void 
 21416 ;; Registers used:
 21417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21418 ;; Tracked objects:
 21419 ;;		On entry : 0/0
 21420 ;;		On exit  : 0/0
 21421 ;;		Unchanged: 0/0
 21422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21423 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21426 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21427 ;;Total ram usage:        4 bytes
 21428 ;; Hardware stack levels used:    1
 21429 ;; Hardware stack levels required when called:    9
 21430 ;; This function calls:
 21431 ;;		_Byte_SetPair
 21432 ;; This function is called by:
 21433 ;;		_Port_SetPinType
 21434 ;;		_Port_SetQuadType
 21435 ;;		_Port_SetType
 21436 ;;		_Port_SetPairType
 21437 ;;		_PortProperty_Init
 21438 ;; This function uses a non-reentrant model
 21439 ;;
 21440                           
 21441                           	psect	text119
 21442  0141B6                     __ptext119:
 21443                           	opt stack 0
 21444  0141B6                     _Word_SetPair:
 21445                           	opt stack 18
 21446                           
 21447                           ;Types.c: 151: if (pPair >= 4)
 21448                           
 21449                           ;incstack = 0
 21450  0141B6  0E03               	movlw	3
 21451  0141B8  0100               	movlb	0	; () banked
 21452  0141BA  65C3               	cpfsgt	Word_SetPair@pPair& (0+255),b
 21453  0141BC  D014               	goto	l776
 21454                           
 21455                           ; BSR set to: 0
 21456                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21457  0141BE  0E01               	movlw	1
 21458  0141C0  0100               	movlb	0	; () banked
 21459  0141C2  25C1               	addwf	Word_SetPair@pInput& (0+255),w,b
 21460  0141C4  0100               	movlb	0	; () banked
 21461  0141C6  6FBD               	movwf	Byte_SetPair@pInput& (0+255),b
 21462  0141C8  0E00               	movlw	0
 21463  0141CA  0100               	movlb	0	; () banked
 21464  0141CC  21C2               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21465  0141CE  0100               	movlb	0	; () banked
 21466  0141D0  6FBE               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21467  0141D2  0100               	movlb	0	; () banked
 21468  0141D4  51C3               	movf	Word_SetPair@pPair& (0+255),w,b
 21469  0141D6  0FFC               	addlw	252
 21470  0141D8  0100               	movlb	0	; () banked
 21471  0141DA  6FBF               	movwf	Byte_SetPair@pPair& (0+255),b
 21472  0141DC  C0C4  F0C0         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21473  0141E0  ECD2  F0A3         	call	_Byte_SetPair	;wreg free
 21474  0141E4  0012               	return	
 21475  0141E6                     l776:
 21476                           
 21477                           ;Types.c: 153: else
 21478                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21479  0141E6  C0C1  F0BD         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21480  0141EA  C0C2  F0BE         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21481  0141EE  C0C3  F0BF         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21482  0141F2  C0C4  F0C0         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21483  0141F6  ECD2  F0A3         	call	_Byte_SetPair	;wreg free
 21484  0141FA  0012               	return	
 21485  0141FC                     __end_of_Word_SetPair:
 21486                           	opt stack 0
 21487                           tosu	equ	0xFFF
 21488                           tosh	equ	0xFFE
 21489                           tosl	equ	0xFFD
 21490                           pclath	equ	0xFFA
 21491                           tblptru	equ	0xFF8
 21492                           tblptrh	equ	0xFF7
 21493                           tblptrl	equ	0xFF6
 21494                           tablat	equ	0xFF5
 21495                           prodh	equ	0xFF4
 21496                           prodl	equ	0xFF3
 21497                           intcon	equ	0xFF2
 21498                           postinc0	equ	0xFEE
 21499                           plusw0	equ	0xFEB
 21500                           wreg	equ	0xFE8
 21501                           indf1	equ	0xFE7
 21502                           postdec1	equ	0xFE5
 21503                           fsr1h	equ	0xFE2
 21504                           fsr1l	equ	0xFE1
 21505                           indf2	equ	0xFDF
 21506                           postinc2	equ	0xFDE
 21507                           postdec2	equ	0xFDD
 21508                           plusw2	equ	0xFDB
 21509                           fsr2h	equ	0xFDA
 21510                           fsr2l	equ	0xFD9
 21511                           status	equ	0xFD8
 21512                           
 21513 ;; *************** function _Byte_SetPair *****************
 21514 ;; Defined at:
 21515 ;;		line 83 in file "Library/Types.c"
 21516 ;; Parameters:    Size  Location     Type
 21517 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21518 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21519 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21520 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21521 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21522 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21523 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21524 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21525 ;;		 -> NULL(0), 
 21526 ;;  pPair           1   13[BANK0 ] unsigned char 
 21527 ;;  pValue          1   14[BANK0 ] unsigned char 
 21528 ;; Auto vars:     Size  Location     Type
 21529 ;;		None
 21530 ;; Return value:  Size  Location     Type
 21531 ;;                  1    wreg      void 
 21532 ;; Registers used:
 21533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21534 ;; Tracked objects:
 21535 ;;		On entry : 0/0
 21536 ;;		On exit  : 0/0
 21537 ;;		Unchanged: 0/0
 21538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21542 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21543 ;;Total ram usage:        4 bytes
 21544 ;; Hardware stack levels used:    1
 21545 ;; Hardware stack levels required when called:    8
 21546 ;; This function calls:
 21547 ;;		_Byte_SetZone
 21548 ;; This function is called by:
 21549 ;;		_Word_SetPair
 21550 ;;		_Port_SetPairType
 21551 ;;		_Port_SetPair
 21552 ;; This function uses a non-reentrant model
 21553 ;;
 21554                           
 21555                           	psect	text120
 21556  0147A4                     __ptext120:
 21557                           	opt stack 0
 21558  0147A4                     _Byte_SetPair:
 21559                           	opt stack 18
 21560                           
 21561                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21562                           
 21563                           ;incstack = 0
 21564  0147A4  C0BD  F0B2         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21565  0147A8  C0BE  F0B3         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21566  0147AC  0E04               	movlw	4
 21567  0147AE  0100               	movlb	0	; () banked
 21568  0147B0  6FB4               	movwf	Byte_SetZone@pMax& (0+255),b
 21569  0147B2  C0BF  F0B5         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21570  0147B6  0E02               	movlw	2
 21571  0147B8  0100               	movlb	0	; () banked
 21572  0147BA  6FB6               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21573  0147BC  C0C0  F0B7         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21574  0147C0  EC37  F096         	call	_Byte_SetZone	;wreg free
 21575  0147C4  0012               	return		;funcret
 21576  0147C6                     __end_of_Byte_SetPair:
 21577                           	opt stack 0
 21578                           tosu	equ	0xFFF
 21579                           tosh	equ	0xFFE
 21580                           tosl	equ	0xFFD
 21581                           pclath	equ	0xFFA
 21582                           tblptru	equ	0xFF8
 21583                           tblptrh	equ	0xFF7
 21584                           tblptrl	equ	0xFF6
 21585                           tablat	equ	0xFF5
 21586                           prodh	equ	0xFF4
 21587                           prodl	equ	0xFF3
 21588                           intcon	equ	0xFF2
 21589                           postinc0	equ	0xFEE
 21590                           plusw0	equ	0xFEB
 21591                           wreg	equ	0xFE8
 21592                           indf1	equ	0xFE7
 21593                           postdec1	equ	0xFE5
 21594                           fsr1h	equ	0xFE2
 21595                           fsr1l	equ	0xFE1
 21596                           indf2	equ	0xFDF
 21597                           postinc2	equ	0xFDE
 21598                           postdec2	equ	0xFDD
 21599                           plusw2	equ	0xFDB
 21600                           fsr2h	equ	0xFDA
 21601                           fsr2l	equ	0xFD9
 21602                           status	equ	0xFD8
 21603                           
 21604 ;; *************** function _Port_CheckQuadType *****************
 21605 ;; Defined at:
 21606 ;;		line 126 in file "Library/Port.c"
 21607 ;; Parameters:    Size  Location     Type
 21608 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 21609 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21610 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21611 ;;  pQuad           1   49[BANK0 ] enum E6776
 21612 ;;  pDrive          1   50[BANK0 ] enum E6469
 21613 ;; Auto vars:     Size  Location     Type
 21614 ;;  Output          1   53[BANK0 ] enum E6475
 21615 ;;  Pair2           1   52[BANK0 ] enum E6760
 21616 ;;  Pair1           1   51[BANK0 ] enum E6760
 21617 ;; Return value:  Size  Location     Type
 21618 ;;                  1    wreg      enum E6475
 21619 ;; Registers used:
 21620 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21621 ;; Tracked objects:
 21622 ;;		On entry : 0/0
 21623 ;;		On exit  : 0/0
 21624 ;;		Unchanged: 0/0
 21625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21627 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21629 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21630 ;;Total ram usage:        7 bytes
 21631 ;; Hardware stack levels used:    1
 21632 ;; Hardware stack levels required when called:   12
 21633 ;; This function calls:
 21634 ;;		_Port_CheckPairType
 21635 ;; This function is called by:
 21636 ;;		_Port_CheckPortType
 21637 ;;		_Port_SetQuadType
 21638 ;; This function uses a non-reentrant model
 21639 ;;
 21640                           
 21641                           	psect	text121
 21642  013DFE                     __ptext121:
 21643                           	opt stack 0
 21644  013DFE                     _Port_CheckQuadType:
 21645                           	opt stack 14
 21646                           
 21647                           ;Port.c: 128: ePinError Output = ePinErrorState;
 21648                           
 21649                           ;incstack = 0
 21650  013DFE  0E05               	movlw	5
 21651  013E00  0100               	movlb	0	; () banked
 21652  013E02  6FE7               	movwf	Port_CheckQuadType@Output& (0+255),b
 21653                           
 21654                           ; BSR set to: 0
 21655                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 21656  013E04  0100               	movlb	0	; () banked
 21657  013E06  51E3               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21658  013E08  0D02               	mullw	2
 21659  013E0A  CFF3 F0E5          	movff	prodl,Port_CheckQuadType@Pair1
 21660                           
 21661                           ; BSR set to: 0
 21662                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 21663  013E0E  0100               	movlb	0	; () banked
 21664  013E10  51E3               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21665  013E12  0D02               	mullw	2
 21666  013E14  28F3               	incf	prodl,w,c
 21667  013E16  0100               	movlb	0	; () banked
 21668  013E18  6FE6               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 21669                           
 21670                           ; BSR set to: 0
 21671                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 21672  013E1A  C0E1  F0D8         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21673  013E1E  C0E2  F0D9         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21674  013E22  C0E5  F0DA         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 21675  013E26  C0E4  F0DB         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21676  013E2A  ECA6  F09D         	call	_Port_CheckPairType	;wreg free
 21677  013E2E  0100               	movlb	0	; () banked
 21678  013E30  6FE7               	movwf	Port_CheckQuadType@Output& (0+255),b
 21679  013E32  0100               	movlb	0	; () banked
 21680  013E34  51E7               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21681  013E36  A4D8               	btfss	status,2,c
 21682  013E38  D00C               	goto	l393
 21683                           
 21684                           ; BSR set to: 0
 21685                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 21686  013E3A  C0E1  F0D8         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21687  013E3E  C0E2  F0D9         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21688  013E42  C0E6  F0DA         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 21689  013E46  C0E4  F0DB         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21690  013E4A  ECA6  F09D         	call	_Port_CheckPairType	;wreg free
 21691  013E4E  0100               	movlb	0	; () banked
 21692  013E50  6FE7               	movwf	Port_CheckQuadType@Output& (0+255),b
 21693  013E52                     l393:
 21694                           
 21695                           ; BSR set to: 0
 21696                           ;Port.c: 136: return Output;
 21697                           
 21698                           ; BSR set to: 0
 21699  013E52  0100               	movlb	0	; () banked
 21700  013E54  51E7               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21701  013E56  0012               	return	
 21702  013E58                     __end_of_Port_CheckQuadType:
 21703                           	opt stack 0
 21704                           tosu	equ	0xFFF
 21705                           tosh	equ	0xFFE
 21706                           tosl	equ	0xFFD
 21707                           pclath	equ	0xFFA
 21708                           tblptru	equ	0xFF8
 21709                           tblptrh	equ	0xFF7
 21710                           tblptrl	equ	0xFF6
 21711                           tablat	equ	0xFF5
 21712                           prodh	equ	0xFF4
 21713                           prodl	equ	0xFF3
 21714                           intcon	equ	0xFF2
 21715                           postinc0	equ	0xFEE
 21716                           plusw0	equ	0xFEB
 21717                           wreg	equ	0xFE8
 21718                           indf1	equ	0xFE7
 21719                           postdec1	equ	0xFE5
 21720                           fsr1h	equ	0xFE2
 21721                           fsr1l	equ	0xFE1
 21722                           indf2	equ	0xFDF
 21723                           postinc2	equ	0xFDE
 21724                           postdec2	equ	0xFDD
 21725                           plusw2	equ	0xFDB
 21726                           fsr2h	equ	0xFDA
 21727                           fsr2l	equ	0xFD9
 21728                           status	equ	0xFD8
 21729                           
 21730 ;; *************** function _Port_CheckPairType *****************
 21731 ;; Defined at:
 21732 ;;		line 112 in file "Library/Port.c"
 21733 ;; Parameters:    Size  Location     Type
 21734 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21735 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21736 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21737 ;;  pPair           1   40[BANK0 ] enum E6760
 21738 ;;  pDrive          1   41[BANK0 ] enum E6469
 21739 ;; Auto vars:     Size  Location     Type
 21740 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 21741 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21742 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21743 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21744 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21745 ;;  Output          1   44[BANK0 ] enum E6475
 21746 ;;  Pin2            1   43[BANK0 ] enum E6750
 21747 ;;  Pin1            1   42[BANK0 ] enum E6750
 21748 ;; Return value:  Size  Location     Type
 21749 ;;                  1    wreg      enum E6475
 21750 ;; Registers used:
 21751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21752 ;; Tracked objects:
 21753 ;;		On entry : 0/0
 21754 ;;		On exit  : 0/0
 21755 ;;		Unchanged: 0/0
 21756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21761 ;;Total ram usage:        9 bytes
 21762 ;; Hardware stack levels used:    1
 21763 ;; Hardware stack levels required when called:   11
 21764 ;; This function calls:
 21765 ;;		_PortProperty_Valid
 21766 ;; This function is called by:
 21767 ;;		_Port_CheckQuadType
 21768 ;;		_Port_SetPairType
 21769 ;; This function uses a non-reentrant model
 21770 ;;
 21771                           
 21772                           	psect	text122
 21773  013B4C                     __ptext122:
 21774                           	opt stack 0
 21775  013B4C                     _Port_CheckPairType:
 21776                           	opt stack 14
 21777                           
 21778                           ;Port.c: 114: ePinError Output = ePinErrorState;
 21779                           
 21780                           ; BSR set to: 0
 21781                           ;incstack = 0
 21782  013B4C  0E05               	movlw	5
 21783  013B4E  0100               	movlb	0	; () banked
 21784  013B50  6FDE               	movwf	Port_CheckPairType@Output& (0+255),b
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 21788  013B52  C0D8  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 21789  013B56  C0D9  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 21790  013B5A  CFDE F0DF          	movff	postinc2,Port_CheckPairType@Props
 21791  013B5E  CFDD F0E0          	movff	postdec2,Port_CheckPairType@Props+1
 21792                           
 21793                           ; BSR set to: 0
 21794                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 21795  013B62  0100               	movlb	0	; () banked
 21796  013B64  51DA               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21797  013B66  0D02               	mullw	2
 21798  013B68  CFF3 F0DC          	movff	prodl,Port_CheckPairType@Pin1
 21799                           
 21800                           ; BSR set to: 0
 21801                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 21802  013B6C  0100               	movlb	0	; () banked
 21803  013B6E  51DA               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21804  013B70  0D02               	mullw	2
 21805  013B72  28F3               	incf	prodl,w,c
 21806  013B74  0100               	movlb	0	; () banked
 21807  013B76  6FDD               	movwf	Port_CheckPairType@Pin2& (0+255),b
 21808                           
 21809                           ; BSR set to: 0
 21810                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 21811  013B78  C0DF  F0C1         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21812  013B7C  C0E0  F0C2         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21813  013B80  C0DB  F0C3         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21814  013B84  C0DC  F0C4         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 21815  013B88  EC31  F09B         	call	_PortProperty_Valid	;wreg free
 21816  013B8C  0100               	movlb	0	; () banked
 21817  013B8E  6FDE               	movwf	Port_CheckPairType@Output& (0+255),b
 21818  013B90  0100               	movlb	0	; () banked
 21819  013B92  51DE               	movf	Port_CheckPairType@Output& (0+255),w,b
 21820  013B94  A4D8               	btfss	status,2,c
 21821  013B96  D00C               	goto	l389
 21822                           
 21823                           ; BSR set to: 0
 21824                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 21825  013B98  C0DF  F0C1         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21826  013B9C  C0E0  F0C2         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21827  013BA0  C0DB  F0C3         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21828  013BA4  C0DD  F0C4         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 21829  013BA8  EC31  F09B         	call	_PortProperty_Valid	;wreg free
 21830  013BAC  0100               	movlb	0	; () banked
 21831  013BAE  6FDE               	movwf	Port_CheckPairType@Output& (0+255),b
 21832  013BB0                     l389:
 21833                           
 21834                           ; BSR set to: 0
 21835                           ;Port.c: 124: return Output;
 21836                           
 21837                           ; BSR set to: 0
 21838  013BB0  0100               	movlb	0	; () banked
 21839  013BB2  51DE               	movf	Port_CheckPairType@Output& (0+255),w,b
 21840  013BB4  0012               	return	
 21841  013BB6                     __end_of_Port_CheckPairType:
 21842                           	opt stack 0
 21843                           tosu	equ	0xFFF
 21844                           tosh	equ	0xFFE
 21845                           tosl	equ	0xFFD
 21846                           pclath	equ	0xFFA
 21847                           tblptru	equ	0xFF8
 21848                           tblptrh	equ	0xFF7
 21849                           tblptrl	equ	0xFF6
 21850                           tablat	equ	0xFF5
 21851                           prodh	equ	0xFF4
 21852                           prodl	equ	0xFF3
 21853                           intcon	equ	0xFF2
 21854                           postinc0	equ	0xFEE
 21855                           plusw0	equ	0xFEB
 21856                           wreg	equ	0xFE8
 21857                           indf1	equ	0xFE7
 21858                           postdec1	equ	0xFE5
 21859                           fsr1h	equ	0xFE2
 21860                           fsr1l	equ	0xFE1
 21861                           indf2	equ	0xFDF
 21862                           postinc2	equ	0xFDE
 21863                           postdec2	equ	0xFDD
 21864                           plusw2	equ	0xFDB
 21865                           fsr2h	equ	0xFDA
 21866                           fsr2l	equ	0xFD9
 21867                           status	equ	0xFD8
 21868                           
 21869 ;; *************** function _PortProperty_Valid *****************
 21870 ;; Defined at:
 21871 ;;		line 220 in file "Library/Types.c"
 21872 ;; Parameters:    Size  Location     Type
 21873 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 21874 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21875 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21876 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21877 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21878 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 21879 ;;  pPin            1   18[BANK0 ] unsigned char 
 21880 ;; Auto vars:     Size  Location     Type
 21881 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 21882 ;;  Pair            1   37[BANK0 ] enum E6469
 21883 ;; Return value:  Size  Location     Type
 21884 ;;                  1    wreg      enum E6475
 21885 ;; Registers used:
 21886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21887 ;; Tracked objects:
 21888 ;;		On entry : 0/0
 21889 ;;		On exit  : 0/0
 21890 ;;		Unchanged: 0/0
 21891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21893 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21895 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21896 ;;Total ram usage:       23 bytes
 21897 ;; Hardware stack levels used:    1
 21898 ;; Hardware stack levels required when called:   10
 21899 ;; This function calls:
 21900 ;;		_Word_GetPair
 21901 ;; This function is called by:
 21902 ;;		_Port_CheckPairType
 21903 ;;		_Port_SetPinType
 21904 ;; This function uses a non-reentrant model
 21905 ;;
 21906                           
 21907                           	psect	text123
 21908  013662                     __ptext123:
 21909                           	opt stack 0
 21910  013662                     _PortProperty_Valid:
 21911                           	opt stack 17
 21912                           
 21913                           ;Types.c: 222: ePinDrive Pair;
 21914                           ;Types.c: 223: const ePinError Errors[4][4] =
 21915                           ;Types.c: 224: {
 21916                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 21917                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 21918                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 21919                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 21920                           ;Types.c: 230: };
 21921                           
 21922                           ; BSR set to: 0
 21923                           ;incstack = 0
 21924  013662  0E5B               	movlw	low PortProperty_Valid@F6830
 21925  013664  6EF6               	movwf	tblptrl,c
 21926  013666                     	if	1	;There is more than 1 active tblptr byte
 21927  013666  0EFD               	movlw	high PortProperty_Valid@F6830
 21928  013668  6EF7               	movwf	tblptrh,c
 21929  01366A                     	endif
 21930  01366A                     	if	1	;There are 3 active tblptr bytes
 21931  01366A  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 21932  01366C  6EF8               	movwf	tblptru,c
 21933  01366E                     	endif
 21934  01366E  EE20  F0C7         	lfsr	2,PortProperty_Valid@Errors
 21935  013672  0E0F               	movlw	15
 21936  013674                     u6910:
 21937  013674  0009               	tblrd		*+
 21938  013676  CFF5 FFDE          	movff	tablat,postinc2
 21939  01367A  06E8               	decf	wreg,f,c
 21940  01367C  E2FB               	bc	u6910
 21941                           
 21942                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 21943  01367E  C0C1  F0BE         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 21944  013682  C0C2  F0BF         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 21945  013686  C0C4  F0C0         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 21946  01368A  ECBF  F0A1         	call	_Word_GetPair	;wreg free
 21947  01368E  0100               	movlb	0	; () banked
 21948  013690  6FD7               	movwf	PortProperty_Valid@Pair& (0+255),b
 21949                           
 21950                           ; BSR set to: 0
 21951                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 21952  013692  0E04               	movlw	4
 21953  013694  0100               	movlb	0	; () banked
 21954  013696  61C3               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 21955  013698  D020               	goto	l819
 21956                           
 21957                           ; BSR set to: 0
 21958  01369A  0E04               	movlw	4
 21959  01369C  0100               	movlb	0	; () banked
 21960  01369E  61D7               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 21961  0136A0  D01C               	goto	l819
 21962                           
 21963                           ; BSR set to: 0
 21964                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 21965  0136A2  0100               	movlb	0	; () banked
 21966  0136A4  51C3               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 21967  0136A6  0D04               	mullw	4
 21968  0136A8  0EC7               	movlw	low PortProperty_Valid@Errors
 21969  0136AA  0100               	movlb	0	; () banked
 21970  0136AC  6FC5               	movwf	??_PortProperty_Valid& (0+255),b
 21971  0136AE  0E00               	movlw	high PortProperty_Valid@Errors
 21972  0136B0  0100               	movlb	0	; () banked
 21973  0136B2  6FC6               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 21974  0136B4  50F3               	movf	prodl,w,c
 21975  0136B6  0100               	movlb	0	; () banked
 21976  0136B8  27C5               	addwf	??_PortProperty_Valid& (0+255),f,b
 21977  0136BA  50F4               	movf	prodh,w,c
 21978  0136BC  0100               	movlb	0	; () banked
 21979  0136BE  23C6               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 21980  0136C0  0100               	movlb	0	; () banked
 21981  0136C2  51D7               	movf	PortProperty_Valid@Pair& (0+255),w,b
 21982  0136C4  0D01               	mullw	1
 21983  0136C6  50F3               	movf	prodl,w,c
 21984  0136C8  0100               	movlb	0	; () banked
 21985  0136CA  25C5               	addwf	??_PortProperty_Valid& (0+255),w,b
 21986  0136CC  6ED9               	movwf	fsr2l,c
 21987  0136CE  50F4               	movf	prodh,w,c
 21988  0136D0  0100               	movlb	0	; () banked
 21989  0136D2  21C6               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 21990  0136D4  6EDA               	movwf	fsr2h,c
 21991  0136D6  50DF               	movf	indf2,w,c
 21992                           
 21993                           ; BSR set to: 0
 21994  0136D8  0012               	return	
 21995  0136DA                     l819:
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;Types.c: 237: return ePinErrorState;
 21999                           
 22000                           ; BSR set to: 0
 22001  0136DA  0E05               	movlw	5
 22002  0136DC  0012               	return	
 22003  0136DE                     __end_of_PortProperty_Valid:
 22004                           	opt stack 0
 22005                           tosu	equ	0xFFF
 22006                           tosh	equ	0xFFE
 22007                           tosl	equ	0xFFD
 22008                           pclath	equ	0xFFA
 22009                           tblptru	equ	0xFF8
 22010                           tblptrh	equ	0xFF7
 22011                           tblptrl	equ	0xFF6
 22012                           tablat	equ	0xFF5
 22013                           prodh	equ	0xFF4
 22014                           prodl	equ	0xFF3
 22015                           intcon	equ	0xFF2
 22016                           postinc0	equ	0xFEE
 22017                           plusw0	equ	0xFEB
 22018                           wreg	equ	0xFE8
 22019                           indf1	equ	0xFE7
 22020                           postdec1	equ	0xFE5
 22021                           fsr1h	equ	0xFE2
 22022                           fsr1l	equ	0xFE1
 22023                           indf2	equ	0xFDF
 22024                           postinc2	equ	0xFDE
 22025                           postdec2	equ	0xFDD
 22026                           plusw2	equ	0xFDB
 22027                           fsr2h	equ	0xFDA
 22028                           fsr2l	equ	0xFD9
 22029                           status	equ	0xFD8
 22030                           
 22031 ;; *************** function _Word_GetPair *****************
 22032 ;; Defined at:
 22033 ;;		line 156 in file "Library/Types.c"
 22034 ;; Parameters:    Size  Location     Type
 22035 ;;  pInput          2   12[BANK0 ] PTR struct Word
 22036 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22037 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22038 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22039 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22040 ;;  pPair           1   14[BANK0 ] unsigned char 
 22041 ;; Auto vars:     Size  Location     Type
 22042 ;;		None
 22043 ;; Return value:  Size  Location     Type
 22044 ;;                  1    wreg      unsigned char 
 22045 ;; Registers used:
 22046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22047 ;; Tracked objects:
 22048 ;;		On entry : 0/0
 22049 ;;		On exit  : 0/0
 22050 ;;		Unchanged: 0/0
 22051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22052 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22056 ;;Total ram usage:        3 bytes
 22057 ;; Hardware stack levels used:    1
 22058 ;; Hardware stack levels required when called:    9
 22059 ;; This function calls:
 22060 ;;		_Byte_GetPair
 22061 ;; This function is called by:
 22062 ;;		_Port_Init
 22063 ;;		_Port_SetPin
 22064 ;;		_Port_Set
 22065 ;;		_PortProperty_Valid
 22066 ;;		_Port_SetPair
 22067 ;;		_Port_SetQuad
 22068 ;; This function uses a non-reentrant model
 22069 ;;
 22070                           
 22071                           	psect	text124
 22072  01437E                     __ptext124:
 22073                           	opt stack 0
 22074  01437E                     _Word_GetPair:
 22075                           	opt stack 10
 22076                           
 22077                           ;Types.c: 158: if (pPair >= 4)
 22078                           
 22079                           ; BSR set to: 0
 22080                           ;incstack = 0
 22081  01437E  0E03               	movlw	3
 22082  014380  0100               	movlb	0	; () banked
 22083  014382  65C0               	cpfsgt	Word_GetPair@pPair& (0+255),b
 22084  014384  D012               	goto	l781
 22085                           
 22086                           ; BSR set to: 0
 22087                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22088  014386  0E01               	movlw	1
 22089  014388  0100               	movlb	0	; () banked
 22090  01438A  25BE               	addwf	Word_GetPair@pInput& (0+255),w,b
 22091  01438C  0100               	movlb	0	; () banked
 22092  01438E  6FBB               	movwf	Byte_GetPair@pInput& (0+255),b
 22093  014390  0E00               	movlw	0
 22094  014392  0100               	movlb	0	; () banked
 22095  014394  21BF               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 22096  014396  0100               	movlb	0	; () banked
 22097  014398  6FBC               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 22098  01439A  0100               	movlb	0	; () banked
 22099  01439C  51C0               	movf	Word_GetPair@pPair& (0+255),w,b
 22100  01439E  0FFC               	addlw	252
 22101  0143A0  0100               	movlb	0	; () banked
 22102  0143A2  6FBD               	movwf	Byte_GetPair@pPair& (0+255),b
 22103  0143A4  EC5E  F0A4         	call	_Byte_GetPair	;wreg free
 22104  0143A8  0012               	return	
 22105  0143AA                     l781:
 22106                           
 22107                           ;Types.c: 160: else
 22108                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22109  0143AA  C0BE  F0BB         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 22110  0143AE  C0BF  F0BC         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 22111  0143B2  C0C0  F0BD         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 22112  0143B6  EC5E  F0A4         	call	_Byte_GetPair	;wreg free
 22113  0143BA  0012               	return	
 22114  0143BC                     __end_of_Word_GetPair:
 22115                           	opt stack 0
 22116                           tosu	equ	0xFFF
 22117                           tosh	equ	0xFFE
 22118                           tosl	equ	0xFFD
 22119                           pclath	equ	0xFFA
 22120                           tblptru	equ	0xFF8
 22121                           tblptrh	equ	0xFF7
 22122                           tblptrl	equ	0xFF6
 22123                           tablat	equ	0xFF5
 22124                           prodh	equ	0xFF4
 22125                           prodl	equ	0xFF3
 22126                           intcon	equ	0xFF2
 22127                           postinc0	equ	0xFEE
 22128                           plusw0	equ	0xFEB
 22129                           wreg	equ	0xFE8
 22130                           indf1	equ	0xFE7
 22131                           postdec1	equ	0xFE5
 22132                           fsr1h	equ	0xFE2
 22133                           fsr1l	equ	0xFE1
 22134                           indf2	equ	0xFDF
 22135                           postinc2	equ	0xFDE
 22136                           postdec2	equ	0xFDD
 22137                           plusw2	equ	0xFDB
 22138                           fsr2h	equ	0xFDA
 22139                           fsr2l	equ	0xFD9
 22140                           status	equ	0xFD8
 22141                           
 22142 ;; *************** function _Byte_GetPair *****************
 22143 ;; Defined at:
 22144 ;;		line 87 in file "Library/Types.c"
 22145 ;; Parameters:    Size  Location     Type
 22146 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 22147 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22148 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22149 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22150 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22151 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22152 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22153 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22154 ;;		 -> NULL(0), 
 22155 ;;  pPair           1   11[BANK0 ] unsigned char 
 22156 ;; Auto vars:     Size  Location     Type
 22157 ;;		None
 22158 ;; Return value:  Size  Location     Type
 22159 ;;                  1    wreg      unsigned char 
 22160 ;; Registers used:
 22161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22162 ;; Tracked objects:
 22163 ;;		On entry : 0/0
 22164 ;;		On exit  : 0/0
 22165 ;;		Unchanged: 0/0
 22166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22171 ;;Total ram usage:        3 bytes
 22172 ;; Hardware stack levels used:    1
 22173 ;; Hardware stack levels required when called:    8
 22174 ;; This function calls:
 22175 ;;		_Byte_GetZone
 22176 ;; This function is called by:
 22177 ;;		_Word_GetPair
 22178 ;; This function uses a non-reentrant model
 22179 ;;
 22180                           
 22181                           	psect	text125
 22182  0148BC                     __ptext125:
 22183                           	opt stack 0
 22184  0148BC                     _Byte_GetPair:
 22185                           	opt stack 10
 22186                           
 22187                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22188                           
 22189                           ;incstack = 0
 22190  0148BC  C0BB  F0B2         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 22191  0148C0  C0BC  F0B3         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 22192  0148C4  0E04               	movlw	4
 22193  0148C6  0100               	movlb	0	; () banked
 22194  0148C8  6FB4               	movwf	Byte_GetZone@pMax& (0+255),b
 22195  0148CA  C0BD  F0B5         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 22196  0148CE  0E02               	movlw	2
 22197  0148D0  0100               	movlb	0	; () banked
 22198  0148D2  6FB6               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 22199  0148D4  EC7E  F099         	call	_Byte_GetZone	;wreg free
 22200  0148D8  0012               	return	
 22201  0148DA                     __end_of_Byte_GetPair:
 22202                           	opt stack 0
 22203                           tosu	equ	0xFFF
 22204                           tosh	equ	0xFFE
 22205                           tosl	equ	0xFFD
 22206                           pclath	equ	0xFFA
 22207                           tblptru	equ	0xFF8
 22208                           tblptrh	equ	0xFF7
 22209                           tblptrl	equ	0xFF6
 22210                           tablat	equ	0xFF5
 22211                           prodh	equ	0xFF4
 22212                           prodl	equ	0xFF3
 22213                           intcon	equ	0xFF2
 22214                           postinc0	equ	0xFEE
 22215                           plusw0	equ	0xFEB
 22216                           wreg	equ	0xFE8
 22217                           indf1	equ	0xFE7
 22218                           postdec1	equ	0xFE5
 22219                           fsr1h	equ	0xFE2
 22220                           fsr1l	equ	0xFE1
 22221                           indf2	equ	0xFDF
 22222                           postinc2	equ	0xFDE
 22223                           postdec2	equ	0xFDD
 22224                           plusw2	equ	0xFDB
 22225                           fsr2h	equ	0xFDA
 22226                           fsr2l	equ	0xFD9
 22227                           status	equ	0xFD8
 22228                           
 22229 ;; *************** function _Byte_GetZone *****************
 22230 ;; Defined at:
 22231 ;;		line 64 in file "Library/Types.c"
 22232 ;; Parameters:    Size  Location     Type
 22233 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22234 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22235 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22236 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22237 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22238 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22239 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22240 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22241 ;;		 -> NULL(0), 
 22242 ;;  pMax            1    2[BANK0 ] unsigned char 
 22243 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22244 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22245 ;; Auto vars:     Size  Location     Type
 22246 ;;  Output          1    8[BANK0 ] unsigned char 
 22247 ;;  Offset          1    7[BANK0 ] unsigned char 
 22248 ;;  MASK            1    6[BANK0 ] unsigned char 
 22249 ;; Return value:  Size  Location     Type
 22250 ;;                  1    wreg      unsigned char 
 22251 ;; Registers used:
 22252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22253 ;; Tracked objects:
 22254 ;;		On entry : 0/0
 22255 ;;		On exit  : 0/0
 22256 ;;		Unchanged: 0/0
 22257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22258 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22259 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22261 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22262 ;;Total ram usage:        9 bytes
 22263 ;; Hardware stack levels used:    1
 22264 ;; Hardware stack levels required when called:    7
 22265 ;; This function calls:
 22266 ;;		Nothing
 22267 ;; This function is called by:
 22268 ;;		_Byte_GetPair
 22269 ;;		_Byte_GetTriple
 22270 ;;		_Byte_GetQuad
 22271 ;; This function uses a non-reentrant model
 22272 ;;
 22273                           
 22274                           	psect	text126
 22275  0132FC                     __ptext126:
 22276                           	opt stack 0
 22277  0132FC                     _Byte_GetZone:
 22278                           	opt stack 10
 22279                           
 22280                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22281                           
 22282                           ;incstack = 0
 22283  0132FC  C0B2  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 22284  013300  C0B3  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 22285  013304  0E00               	movlw	low (__mediumconst shr (0+16))
 22286  013306  6EF8               	movwf	tblptru,c
 22287  013308  0E0F               	movlw	(high __ramtop+-1)
 22288  01330A  64F7               	cpfsgt	tblptrh,c
 22289  01330C  D003               	bra	u6477
 22290  01330E  0008               	tblrd		*
 22291  013310  50F5               	movf	tablat,w,c
 22292  013312  D005               	bra	u6470
 22293  013314                     u6477:
 22294  013314  CFF6 FFE9          	movff	tblptrl,fsr0l
 22295  013318  CFF7 FFEA          	movff	tblptrh,fsr0h
 22296  01331C  50EF               	movf	indf0,w,c
 22297  01331E                     u6470:
 22298  01331E  0100               	movlb	0	; () banked
 22299  013320  6FBA               	movwf	Byte_GetZone@Output& (0+255),b
 22300                           
 22301                           ; BSR set to: 0
 22302                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22303  013322  0100               	movlb	0	; () banked
 22304  013324  51B6               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22305  013326  0D01               	mullw	1
 22306  013328  0E75               	movlw	low _MASKS
 22307  01332A  24F3               	addwf	prodl,w,c
 22308  01332C  6EF6               	movwf	tblptrl,c
 22309  01332E  0EFD               	movlw	high _MASKS
 22310  013330  20F4               	addwfc	prodh,w,c
 22311  013332  6EF7               	movwf	tblptrh,c
 22312  013334                     	if	1	;There are 3 active tblptr bytes
 22313  013334  6AF8               	clrf	tblptru,c
 22314  013336  0E00               	movlw	low (__mediumconst shr (0+16))
 22315  013338  22F8               	addwfc	tblptru,f,c
 22316  01333A                     	endif
 22317  01333A  0008               	tblrd		*
 22318  01333C  CFF5 F0B8          	movff	tablat,Byte_GetZone@MASK
 22319                           
 22320                           ; BSR set to: 0
 22321                           ;Types.c: 68: UINT8 Offset = 0;
 22322  013340  0E00               	movlw	0
 22323  013342  0100               	movlb	0	; () banked
 22324  013344  6FB9               	movwf	Byte_GetZone@Offset& (0+255),b
 22325                           
 22326                           ;Types.c: 70: while (pChunk >= pMax)
 22327  013346  D006               	goto	l732
 22328  013348                     
 22329                           ; BSR set to: 0
 22330                           ;Types.c: 71: {
 22331                           ;Types.c: 72: pChunk -= pMax;
 22332                           
 22333                           ; BSR set to: 0
 22334  013348  0100               	movlb	0	; () banked
 22335  01334A  51B4               	movf	Byte_GetZone@pMax& (0+255),w,b
 22336  01334C  0100               	movlb	0	; () banked
 22337  01334E  5FB5               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22338                           
 22339                           ; BSR set to: 0
 22340                           ;Types.c: 73: Offset += 1;
 22341  013350  0100               	movlb	0	; () banked
 22342  013352  2BB9               	incf	Byte_GetZone@Offset& (0+255),f,b
 22343  013354                     l732:
 22344                           
 22345                           ; BSR set to: 0
 22346                           
 22347                           ; BSR set to: 0
 22348  013354  0100               	movlb	0	; () banked
 22349  013356  51B4               	movf	Byte_GetZone@pMax& (0+255),w,b
 22350  013358  0100               	movlb	0	; () banked
 22351  01335A  5DB5               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22352  01335C  B0D8               	btfsc	status,0,c
 22353  01335E  D7F4               	goto	l733
 22354                           
 22355                           ; BSR set to: 0
 22356                           ;Types.c: 74: }
 22357                           ;Types.c: 75: pChunk *= pChunkSize;
 22358                           
 22359                           ; BSR set to: 0
 22360  013360  0100               	movlb	0	; () banked
 22361  013362  51B6               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22362  013364  0100               	movlb	0	; () banked
 22363  013366  03B5               	mulwf	Byte_GetZone@pChunk& (0+255),b
 22364  013368  50F3               	movf	prodl,w,c
 22365  01336A  6FB5               	movwf	Byte_GetZone@pChunk& (0+255),b
 22366                           
 22367                           ; BSR set to: 0
 22368                           ;Types.c: 76: pChunk += Offset;
 22369  01336C  0100               	movlb	0	; () banked
 22370  01336E  51B9               	movf	Byte_GetZone@Offset& (0+255),w,b
 22371  013370  0100               	movlb	0	; () banked
 22372  013372  27B5               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22373                           
 22374                           ; BSR set to: 0
 22375                           ;Types.c: 78: Output >>= pChunk;
 22376  013374  0100               	movlb	0	; () banked
 22377  013376  29B5               	incf	Byte_GetZone@pChunk& (0+255),w,b
 22378  013378  0100               	movlb	0	; () banked
 22379  01337A  6FB7               	movwf	??_Byte_GetZone& (0+255),b
 22380  01337C  D003               	goto	u6490
 22381  01337E                     u6495:
 22382  01337E  0100               	movlb	0	; () banked
 22383  013380  90D8               	bcf	status,0,c
 22384  013382  33BA               	rrcf	Byte_GetZone@Output& (0+255),f,b
 22385  013384                     u6490:
 22386  013384  0100               	movlb	0	; () banked
 22387  013386  2FB7               	decfsz	??_Byte_GetZone& (0+255),f,b
 22388  013388  D7FA               	goto	u6495
 22389                           
 22390                           ;Types.c: 79: Output &= MASK;
 22391  01338A  0100               	movlb	0	; () banked
 22392  01338C  51B8               	movf	Byte_GetZone@MASK& (0+255),w,b
 22393  01338E  0100               	movlb	0	; () banked
 22394  013390  17BA               	andwf	Byte_GetZone@Output& (0+255),f,b
 22395                           
 22396                           ; BSR set to: 0
 22397                           ;Types.c: 80: return Output;
 22398  013392  0100               	movlb	0	; () banked
 22399  013394  51BA               	movf	Byte_GetZone@Output& (0+255),w,b
 22400  013396  0012               	return	
 22401  013398                     __end_of_Byte_GetZone:
 22402                           	opt stack 0
 22403                           tosu	equ	0xFFF
 22404                           tosh	equ	0xFFE
 22405                           tosl	equ	0xFFD
 22406                           pclath	equ	0xFFA
 22407                           tblptru	equ	0xFF8
 22408                           tblptrh	equ	0xFF7
 22409                           tblptrl	equ	0xFF6
 22410                           tablat	equ	0xFF5
 22411                           prodh	equ	0xFF4
 22412                           prodl	equ	0xFF3
 22413                           intcon	equ	0xFF2
 22414                           indf0	equ	0xFEF
 22415                           postinc0	equ	0xFEE
 22416                           plusw0	equ	0xFEB
 22417                           fsr0h	equ	0xFEA
 22418                           fsr0l	equ	0xFE9
 22419                           wreg	equ	0xFE8
 22420                           indf1	equ	0xFE7
 22421                           postdec1	equ	0xFE5
 22422                           fsr1h	equ	0xFE2
 22423                           fsr1l	equ	0xFE1
 22424                           indf2	equ	0xFDF
 22425                           postinc2	equ	0xFDE
 22426                           postdec2	equ	0xFDD
 22427                           plusw2	equ	0xFDB
 22428                           fsr2h	equ	0xFDA
 22429                           fsr2l	equ	0xFD9
 22430                           status	equ	0xFD8
 22431                           
 22432 ;; *************** function _Byte_SetQuad *****************
 22433 ;; Defined at:
 22434 ;;		line 101 in file "Library/Types.c"
 22435 ;; Parameters:    Size  Location     Type
 22436 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22437 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22438 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22439 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22440 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22441 ;;		 -> NULL(0), 
 22442 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22443 ;;  pValue          1   14[BANK0 ] unsigned char 
 22444 ;; Auto vars:     Size  Location     Type
 22445 ;;		None
 22446 ;; Return value:  Size  Location     Type
 22447 ;;                  1    wreg      void 
 22448 ;; Registers used:
 22449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22450 ;; Tracked objects:
 22451 ;;		On entry : 0/0
 22452 ;;		On exit  : 0/0
 22453 ;;		Unchanged: 0/0
 22454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22459 ;;Total ram usage:        4 bytes
 22460 ;; Hardware stack levels used:    1
 22461 ;; Hardware stack levels required when called:    8
 22462 ;; This function calls:
 22463 ;;		_Byte_SetZone
 22464 ;; This function is called by:
 22465 ;;		_Port_SetQuadType
 22466 ;;		_SPI_Init
 22467 ;;		_SPI_MinSpeed
 22468 ;;		_SPI_MaxSpeed
 22469 ;;		_Port_SetQuad
 22470 ;;		_Word_SetQuad
 22471 ;;		_I2C_Init
 22472 ;; This function uses a non-reentrant model
 22473 ;;
 22474                           
 22475                           	psect	text127
 22476  0147C6                     __ptext127:
 22477                           	opt stack 0
 22478  0147C6                     _Byte_SetQuad:
 22479                           	opt stack 19
 22480                           
 22481                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22482                           
 22483                           ; BSR set to: 0
 22484                           ;incstack = 0
 22485  0147C6  C0BD  F0B2         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22486  0147CA  C0BE  F0B3         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22487  0147CE  0E02               	movlw	2
 22488  0147D0  0100               	movlb	0	; () banked
 22489  0147D2  6FB4               	movwf	Byte_SetZone@pMax& (0+255),b
 22490  0147D4  C0BF  F0B5         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22491  0147D8  0E04               	movlw	4
 22492  0147DA  0100               	movlb	0	; () banked
 22493  0147DC  6FB6               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22494  0147DE  C0C0  F0B7         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22495  0147E2  EC37  F096         	call	_Byte_SetZone	;wreg free
 22496  0147E6  0012               	return		;funcret
 22497  0147E8                     __end_of_Byte_SetQuad:
 22498                           	opt stack 0
 22499                           tosu	equ	0xFFF
 22500                           tosh	equ	0xFFE
 22501                           tosl	equ	0xFFD
 22502                           pclath	equ	0xFFA
 22503                           tblptru	equ	0xFF8
 22504                           tblptrh	equ	0xFF7
 22505                           tblptrl	equ	0xFF6
 22506                           tablat	equ	0xFF5
 22507                           prodh	equ	0xFF4
 22508                           prodl	equ	0xFF3
 22509                           intcon	equ	0xFF2
 22510                           indf0	equ	0xFEF
 22511                           postinc0	equ	0xFEE
 22512                           plusw0	equ	0xFEB
 22513                           fsr0h	equ	0xFEA
 22514                           fsr0l	equ	0xFE9
 22515                           wreg	equ	0xFE8
 22516                           indf1	equ	0xFE7
 22517                           postdec1	equ	0xFE5
 22518                           fsr1h	equ	0xFE2
 22519                           fsr1l	equ	0xFE1
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           postdec2	equ	0xFDD
 22523                           plusw2	equ	0xFDB
 22524                           fsr2h	equ	0xFDA
 22525                           fsr2l	equ	0xFD9
 22526                           status	equ	0xFD8
 22527                           
 22528 ;; *************** function _Byte_SetZone *****************
 22529 ;; Defined at:
 22530 ;;		line 47 in file "Library/Types.c"
 22531 ;; Parameters:    Size  Location     Type
 22532 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22533 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22534 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22535 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22536 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22537 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22538 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22539 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22540 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22541 ;;  pMax            1    2[BANK0 ] unsigned char 
 22542 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22543 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22544 ;;  pValue          1    5[BANK0 ] unsigned char 
 22545 ;; Auto vars:     Size  Location     Type
 22546 ;;  MASK            1   10[BANK0 ] unsigned char 
 22547 ;;  Offset          1    9[BANK0 ] unsigned char 
 22548 ;; Return value:  Size  Location     Type
 22549 ;;                  1    wreg      void 
 22550 ;; Registers used:
 22551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22552 ;; Tracked objects:
 22553 ;;		On entry : 0/0
 22554 ;;		On exit  : 0/0
 22555 ;;		Unchanged: 0/0
 22556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22557 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22558 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22559 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22560 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22561 ;;Total ram usage:       11 bytes
 22562 ;; Hardware stack levels used:    1
 22563 ;; Hardware stack levels required when called:    7
 22564 ;; This function calls:
 22565 ;;		Nothing
 22566 ;; This function is called by:
 22567 ;;		_Byte_SetPair
 22568 ;;		_Byte_SetQuad
 22569 ;;		_Byte_SetTriple
 22570 ;; This function uses a non-reentrant model
 22571 ;;
 22572                           
 22573                           	psect	text128
 22574  012C6E                     __ptext128:
 22575                           	opt stack 0
 22576  012C6E                     _Byte_SetZone:
 22577                           	opt stack 18
 22578                           
 22579                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22580                           
 22581                           ;incstack = 0
 22582  012C6E  0100               	movlb	0	; () banked
 22583  012C70  51B6               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22584  012C72  0D01               	mullw	1
 22585  012C74  0E75               	movlw	low _MASKS
 22586  012C76  24F3               	addwf	prodl,w,c
 22587  012C78  6EF6               	movwf	tblptrl,c
 22588  012C7A  0EFD               	movlw	high _MASKS
 22589  012C7C  20F4               	addwfc	prodh,w,c
 22590  012C7E  6EF7               	movwf	tblptrh,c
 22591  012C80                     	if	1	;There are 3 active tblptr bytes
 22592  012C80  6AF8               	clrf	tblptru,c
 22593  012C82  0E00               	movlw	low (__mediumconst shr (0+16))
 22594  012C84  22F8               	addwfc	tblptru,f,c
 22595  012C86                     	endif
 22596  012C86  0008               	tblrd		*
 22597  012C88  CFF5 F0BC          	movff	tablat,Byte_SetZone@MASK
 22598                           
 22599                           ; BSR set to: 0
 22600                           ;Types.c: 50: UINT8 Offset = 0;
 22601  012C8C  0E00               	movlw	0
 22602  012C8E  0100               	movlb	0	; () banked
 22603  012C90  6FBB               	movwf	Byte_SetZone@Offset& (0+255),b
 22604                           
 22605                           ;Types.c: 52: while (pChunk >= pMax)
 22606  012C92  D006               	goto	l726
 22607  012C94                     
 22608                           ; BSR set to: 0
 22609                           ;Types.c: 53: {
 22610                           ;Types.c: 54: pChunk -= pMax;
 22611                           
 22612                           ; BSR set to: 0
 22613  012C94  0100               	movlb	0	; () banked
 22614  012C96  51B4               	movf	Byte_SetZone@pMax& (0+255),w,b
 22615  012C98  0100               	movlb	0	; () banked
 22616  012C9A  5FB5               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 22617                           
 22618                           ; BSR set to: 0
 22619                           ;Types.c: 55: Offset += 1;
 22620  012C9C  0100               	movlb	0	; () banked
 22621  012C9E  2BBB               	incf	Byte_SetZone@Offset& (0+255),f,b
 22622  012CA0                     l726:
 22623                           
 22624                           ; BSR set to: 0
 22625                           
 22626                           ; BSR set to: 0
 22627  012CA0  0100               	movlb	0	; () banked
 22628  012CA2  51B4               	movf	Byte_SetZone@pMax& (0+255),w,b
 22629  012CA4  0100               	movlb	0	; () banked
 22630  012CA6  5DB5               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 22631  012CA8  B0D8               	btfsc	status,0,c
 22632  012CAA  D7F4               	goto	l727
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;Types.c: 56: }
 22636                           ;Types.c: 57: pChunk *= pChunkSize;
 22637                           
 22638                           ; BSR set to: 0
 22639  012CAC  0100               	movlb	0	; () banked
 22640  012CAE  51B6               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22641  012CB0  0100               	movlb	0	; () banked
 22642  012CB2  03B5               	mulwf	Byte_SetZone@pChunk& (0+255),b
 22643  012CB4  50F3               	movf	prodl,w,c
 22644  012CB6  6FB5               	movwf	Byte_SetZone@pChunk& (0+255),b
 22645                           
 22646                           ; BSR set to: 0
 22647                           ;Types.c: 58: pChunk += Offset;
 22648  012CB8  0100               	movlb	0	; () banked
 22649  012CBA  51BB               	movf	Byte_SetZone@Offset& (0+255),w,b
 22650  012CBC  0100               	movlb	0	; () banked
 22651  012CBE  27B5               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 22652                           
 22653                           ; BSR set to: 0
 22654                           ;Types.c: 60: pValue &= MASK;
 22655  012CC0  0100               	movlb	0	; () banked
 22656  012CC2  51BC               	movf	Byte_SetZone@MASK& (0+255),w,b
 22657  012CC4  0100               	movlb	0	; () banked
 22658  012CC6  17B7               	andwf	Byte_SetZone@pValue& (0+255),f,b
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 22662  012CC8  C0B5  F0B8         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22663  012CCC  C0BC  F0B9         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 22664  012CD0  0100               	movlb	0	; () banked
 22665  012CD2  2BB8               	incf	??_Byte_SetZone& (0+255),f,b
 22666  012CD4  D003               	goto	u6954
 22667  012CD6                     u6955:
 22668  012CD6  0100               	movlb	0	; () banked
 22669  012CD8  90D8               	bcf	status,0,c
 22670  012CDA  37B9               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22671  012CDC                     u6954:
 22672  012CDC  0100               	movlb	0	; () banked
 22673  012CDE  2FB8               	decfsz	??_Byte_SetZone& (0+255),f,b
 22674  012CE0  D7FA               	goto	u6955
 22675  012CE2  0100               	movlb	0	; () banked
 22676  012CE4  51B9               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22677  012CE6  0AFF               	xorlw	255
 22678  012CE8  0100               	movlb	0	; () banked
 22679  012CEA  6FBA               	movwf	(??_Byte_SetZone+2)& (0+255),b
 22680  012CEC  C0B2  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22681  012CF0  C0B3  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22682  012CF4  0100               	movlb	0	; () banked
 22683  012CF6  51BA               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 22684  012CF8  16DF               	andwf	indf2,f,c
 22685                           
 22686                           ; BSR set to: 0
 22687                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 22688  012CFA  C0B5  F0B8         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22689  012CFE  C0B7  F0B9         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 22690  012D02  0100               	movlb	0	; () banked
 22691  012D04  2BB8               	incf	??_Byte_SetZone& (0+255),f,b
 22692  012D06  D003               	goto	u6964
 22693  012D08                     u6965:
 22694  012D08  0100               	movlb	0	; () banked
 22695  012D0A  90D8               	bcf	status,0,c
 22696  012D0C  37B9               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22697  012D0E                     u6964:
 22698  012D0E  0100               	movlb	0	; () banked
 22699  012D10  2FB8               	decfsz	??_Byte_SetZone& (0+255),f,b
 22700  012D12  D7FA               	goto	u6965
 22701  012D14  C0B2  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22702  012D18  C0B3  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22703  012D1C  0100               	movlb	0	; () banked
 22704  012D1E  51B9               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22705  012D20  12DF               	iorwf	indf2,f,c
 22706                           
 22707                           ; BSR set to: 0
 22708  012D22  0012               	return		;funcret
 22709  012D24                     __end_of_Byte_SetZone:
 22710                           	opt stack 0
 22711                           tosu	equ	0xFFF
 22712                           tosh	equ	0xFFE
 22713                           tosl	equ	0xFFD
 22714                           pclath	equ	0xFFA
 22715                           tblptru	equ	0xFF8
 22716                           tblptrh	equ	0xFF7
 22717                           tblptrl	equ	0xFF6
 22718                           tablat	equ	0xFF5
 22719                           prodh	equ	0xFF4
 22720                           prodl	equ	0xFF3
 22721                           intcon	equ	0xFF2
 22722                           indf0	equ	0xFEF
 22723                           postinc0	equ	0xFEE
 22724                           plusw0	equ	0xFEB
 22725                           fsr0h	equ	0xFEA
 22726                           fsr0l	equ	0xFE9
 22727                           wreg	equ	0xFE8
 22728                           indf1	equ	0xFE7
 22729                           postdec1	equ	0xFE5
 22730                           fsr1h	equ	0xFE2
 22731                           fsr1l	equ	0xFE1
 22732                           indf2	equ	0xFDF
 22733                           postinc2	equ	0xFDE
 22734                           postdec2	equ	0xFDD
 22735                           plusw2	equ	0xFDB
 22736                           fsr2h	equ	0xFDA
 22737                           fsr2l	equ	0xFD9
 22738                           status	equ	0xFD8
 22739                           
 22740 ;; *************** function _Console_Init *****************
 22741 ;; Defined at:
 22742 ;;		line 157 in file "Library/Console.c"
 22743 ;; Parameters:    Size  Location     Type
 22744 ;;		None
 22745 ;; Auto vars:     Size  Location     Type
 22746 ;;  y               1    3[BANK0 ] unsigned char 
 22747 ;;  x               1    2[BANK0 ] unsigned char 
 22748 ;; Return value:  Size  Location     Type
 22749 ;;                  1    wreg      void 
 22750 ;; Registers used:
 22751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22752 ;; Tracked objects:
 22753 ;;		On entry : 0/0
 22754 ;;		On exit  : 0/0
 22755 ;;		Unchanged: 0/0
 22756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22760 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22761 ;;Total ram usage:        4 bytes
 22762 ;; Hardware stack levels used:    1
 22763 ;; Hardware stack levels required when called:    7
 22764 ;; This function calls:
 22765 ;;		Nothing
 22766 ;; This function is called by:
 22767 ;;		_initialise
 22768 ;; This function uses a non-reentrant model
 22769 ;;
 22770                           
 22771                           	psect	text129
 22772  0135D8                     __ptext129:
 22773                           	opt stack 0
 22774  0135D8                     _Console_Init:
 22775                           	opt stack 22
 22776                           
 22777                           ;Console.c: 160: lBufferX = 0;
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;incstack = 0
 22781  0135D8  0E00               	movlw	0
 22782  0135DA  0100               	movlb	0	; () banked
 22783  0135DC  6F7B               	movwf	_lBufferX& (0+255),b
 22784                           
 22785                           ;Console.c: 161: lBufferY = 0;
 22786  0135DE  0E00               	movlw	0
 22787  0135E0  0100               	movlb	0	; () banked
 22788  0135E2  6F7A               	movwf	_lBufferY& (0+255),b
 22789                           
 22790                           ;Console.c: 163: UINT8 x, y;
 22791                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22792  0135E4  0E00               	movlw	0
 22793  0135E6  0100               	movlb	0	; () banked
 22794  0135E8  6FB4               	movwf	Console_Init@x& (0+255),b
 22795  0135EA                     l11798:
 22796                           
 22797                           ; BSR set to: 0
 22798  0135EA  0E13               	movlw	19
 22799  0135EC  0100               	movlb	0	; () banked
 22800  0135EE  65B4               	cpfsgt	Console_Init@x& (0+255),b
 22801  0135F0  D001               	goto	l976
 22802  0135F2  0012               	return	
 22803  0135F4                     l976:
 22804                           
 22805                           ; BSR set to: 0
 22806                           ;Console.c: 165: {
 22807                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22808                           
 22809                           ; BSR set to: 0
 22810  0135F4  0E00               	movlw	0
 22811  0135F6  0100               	movlb	0	; () banked
 22812  0135F8  6FB5               	movwf	Console_Init@y& (0+255),b
 22813  0135FA                     l11804:
 22814                           
 22815                           ; BSR set to: 0
 22816  0135FA  0E0E               	movlw	14
 22817  0135FC  0100               	movlb	0	; () banked
 22818  0135FE  65B5               	cpfsgt	Console_Init@y& (0+255),b
 22819  013600  D001               	goto	l978
 22820  013602  D02C               	goto	u8120
 22821  013604                     l978:
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;Console.c: 167: {
 22825                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22826                           
 22827                           ; BSR set to: 0
 22828  013604  0100               	movlb	0	; () banked
 22829  013606  51B5               	movf	Console_Init@y& (0+255),w,b
 22830  013608  0D14               	mullw	20
 22831  01360A  0E46               	movlw	low _lBuffer
 22832  01360C  0100               	movlb	0	; () banked
 22833  01360E  6FB2               	movwf	??_Console_Init& (0+255),b
 22834  013610  0E02               	movlw	high _lBuffer
 22835  013612  0100               	movlb	0	; () banked
 22836  013614  6FB3               	movwf	(??_Console_Init+1)& (0+255),b
 22837  013616  50F3               	movf	prodl,w,c
 22838  013618  0100               	movlb	0	; () banked
 22839  01361A  27B2               	addwf	??_Console_Init& (0+255),f,b
 22840  01361C  50F4               	movf	prodh,w,c
 22841  01361E  0100               	movlb	0	; () banked
 22842  013620  23B3               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22843  013622  0100               	movlb	0	; () banked
 22844  013624  51B4               	movf	Console_Init@x& (0+255),w,b
 22845  013626  0D01               	mullw	1
 22846  013628  50F3               	movf	prodl,w,c
 22847  01362A  0100               	movlb	0	; () banked
 22848  01362C  25B2               	addwf	??_Console_Init& (0+255),w,b
 22849  01362E  6ED9               	movwf	fsr2l,c
 22850  013630  50F4               	movf	prodh,w,c
 22851  013632  0100               	movlb	0	; () banked
 22852  013634  21B3               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22853  013636  6EDA               	movwf	fsr2h,c
 22854  013638  0E00               	movlw	0
 22855  01363A  6EDF               	movwf	indf2,c
 22856                           
 22857                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22858  01363C  0100               	movlb	0	; () banked
 22859  01363E  51B5               	movf	Console_Init@y& (0+255),w,b
 22860  013640  0D02               	mullw	2
 22861  013642  0E00               	movlw	low _lCBuffer
 22862  013644  24F3               	addwf	prodl,w,c
 22863  013646  6ED9               	movwf	fsr2l,c
 22864  013648  0E01               	movlw	high _lCBuffer
 22865  01364A  20F4               	addwfc	prodh,w,c
 22866  01364C  6EDA               	movwf	fsr2h,c
 22867  01364E  0EFF               	movlw	255
 22868  013650  6EDE               	movwf	postinc2,c
 22869  013652  0EFF               	movlw	255
 22870  013654  6EDD               	movwf	postdec2,c
 22871                           
 22872                           ; BSR set to: 0
 22873  013656  0100               	movlb	0	; () banked
 22874  013658  2BB5               	incf	Console_Init@y& (0+255),f,b
 22875  01365A  D7CF               	goto	l11804
 22876  01365C                     u8120:
 22877                           
 22878                           ; BSR set to: 0
 22879                           
 22880                           ; BSR set to: 0
 22881  01365C  0100               	movlb	0	; () banked
 22882  01365E  2BB4               	incf	Console_Init@x& (0+255),f,b
 22883  013660  D7C4               	goto	l11798
 22884  013662                     __end_of_Console_Init:
 22885                           	opt stack 0
 22886                           tosu	equ	0xFFF
 22887                           tosh	equ	0xFFE
 22888                           tosl	equ	0xFFD
 22889                           pclath	equ	0xFFA
 22890                           tblptru	equ	0xFF8
 22891                           tblptrh	equ	0xFF7
 22892                           tblptrl	equ	0xFF6
 22893                           tablat	equ	0xFF5
 22894                           prodh	equ	0xFF4
 22895                           prodl	equ	0xFF3
 22896                           intcon	equ	0xFF2
 22897                           indf0	equ	0xFEF
 22898                           postinc0	equ	0xFEE
 22899                           plusw0	equ	0xFEB
 22900                           fsr0h	equ	0xFEA
 22901                           fsr0l	equ	0xFE9
 22902                           wreg	equ	0xFE8
 22903                           indf1	equ	0xFE7
 22904                           postdec1	equ	0xFE5
 22905                           fsr1h	equ	0xFE2
 22906                           fsr1l	equ	0xFE1
 22907                           indf2	equ	0xFDF
 22908                           postinc2	equ	0xFDE
 22909                           postdec2	equ	0xFDD
 22910                           plusw2	equ	0xFDB
 22911                           fsr2h	equ	0xFDA
 22912                           fsr2l	equ	0xFD9
 22913                           status	equ	0xFD8
 22914                           
 22915 ;; *************** function _ISR_Function *****************
 22916 ;; Defined at:
 22917 ;;		line 38 in file "Library/ISR.c"
 22918 ;; Parameters:    Size  Location     Type
 22919 ;;		None
 22920 ;; Auto vars:     Size  Location     Type
 22921 ;;		None
 22922 ;; Return value:  Size  Location     Type
 22923 ;;                  1    wreg      void 
 22924 ;; Registers used:
 22925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22926 ;; Tracked objects:
 22927 ;;		On entry : 0/0
 22928 ;;		On exit  : 0/0
 22929 ;;		Unchanged: 0/0
 22930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22933 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22934 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22935 ;;Total ram usage:       18 bytes
 22936 ;; Hardware stack levels used:    1
 22937 ;; Hardware stack levels required when called:    6
 22938 ;; This function calls:
 22939 ;;		_Timer0_ISR
 22940 ;; This function is called by:
 22941 ;;		Interrupt level 2
 22942 ;; This function uses a non-reentrant model
 22943 ;;
 22944                           
 22945                           	psect	intcode
 22946  001408                     __pintcode:
 22947                           	opt stack 0
 22948  001408                     _ISR_Function:
 22949                           	opt stack 10
 22950                           
 22951                           ; BSR set to: 0
 22952                           ;incstack = 0
 22953  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22954  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 22955  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 22956  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 22957  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 22958  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 22959  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 22960  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 22961  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 22962  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 22963  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 22964  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 22965  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 22966  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 22967  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 22968  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 22969  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 22970  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 22971  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 22972                           
 22973                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22974  001452  92F2               	bcf	intcon,1,c	;volatile
 22975                           
 22976                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22977  001454  B4F2               	btfsc	intcon,2,c	;volatile
 22978  001456  AAF2               	btfss	intcon,5,c	;volatile
 22979  001458  D002               	goto	i2l1598
 22980                           
 22981                           ;ISR.c: 68: Timer0_ISR();
 22982  00145A  ECAE  F0A3         	call	_Timer0_ISR	;wreg free
 22983  00145E                     i2l1598:
 22984  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 22985  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 22986  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 22987  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 22988  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 22989  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 22990  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 22991  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 22992  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 22993  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 22994  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 22995  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 22996  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 22997  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 22998  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 22999  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 23000  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 23001  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 23002  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23003  0014A8  0011               	retfie		f
 23004  0014AA                     __end_of_ISR_Function:
 23005                           	opt stack 0
 23006                           tosu	equ	0xFFF
 23007                           tosh	equ	0xFFE
 23008                           tosl	equ	0xFFD
 23009                           pclatu	equ	0xFFB
 23010                           pclath	equ	0xFFA
 23011                           tblptru	equ	0xFF8
 23012                           tblptrh	equ	0xFF7
 23013                           tblptrl	equ	0xFF6
 23014                           tablat	equ	0xFF5
 23015                           prodh	equ	0xFF4
 23016                           prodl	equ	0xFF3
 23017                           intcon	equ	0xFF2
 23018                           indf0	equ	0xFEF
 23019                           postinc0	equ	0xFEE
 23020                           plusw0	equ	0xFEB
 23021                           fsr0h	equ	0xFEA
 23022                           fsr0l	equ	0xFE9
 23023                           wreg	equ	0xFE8
 23024                           indf1	equ	0xFE7
 23025                           postdec1	equ	0xFE5
 23026                           fsr1h	equ	0xFE2
 23027                           fsr1l	equ	0xFE1
 23028                           indf2	equ	0xFDF
 23029                           postinc2	equ	0xFDE
 23030                           postdec2	equ	0xFDD
 23031                           plusw2	equ	0xFDB
 23032                           fsr2h	equ	0xFDA
 23033                           fsr2l	equ	0xFD9
 23034                           status	equ	0xFD8
 23035                           
 23036 ;; *************** function _Timer0_ISR *****************
 23037 ;; Defined at:
 23038 ;;		line 94 in file "Library/Timer0.c"
 23039 ;; Parameters:    Size  Location     Type
 23040 ;;		None
 23041 ;; Auto vars:     Size  Location     Type
 23042 ;;		None
 23043 ;; Return value:  Size  Location     Type
 23044 ;;                  1    wreg      void 
 23045 ;; Registers used:
 23046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23047 ;; Tracked objects:
 23048 ;;		On entry : 0/0
 23049 ;;		On exit  : 0/0
 23050 ;;		Unchanged: 0/0
 23051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23056 ;;Total ram usage:        0 bytes
 23057 ;; Hardware stack levels used:    1
 23058 ;; Hardware stack levels required when called:    5
 23059 ;; This function calls:
 23060 ;;		Absolute function
 23061 ;;		i2_Motor_Step
 23062 ;;		i2_Timer0_Stop
 23063 ;; This function is called by:
 23064 ;;		_ISR_Function
 23065 ;; This function uses a non-reentrant model
 23066 ;;
 23067                           
 23068                           	psect	text131
 23069  01475C                     __ptext131:
 23070                           	opt stack 0
 23071  01475C                     _Timer0_ISR:
 23072                           	opt stack 10
 23073                           
 23074                           ;Timer0.c: 96: Timer0_Stop();
 23075                           
 23076                           ;incstack = 0
 23077  01475C  EC62  F0A5         	call	i2_Timer0_Stop	;wreg free
 23078                           
 23079                           ;Timer0.c: 99: if (gISR != 0)
 23080  014760  5029               	movf	_gISR,w,c
 23081  014762  102A               	iorwf	_gISR+1,w,c
 23082  014764  102B               	iorwf	_gISR+2,w,c
 23083  014766  B4D8               	btfsc	status,2,c
 23084  014768  0012               	return	
 23085                           
 23086                           ;Timer0.c: 100: gISR();
 23087  01476A  D801               	call	i2u928_48
 23088  01476C  0012               	return	
 23089  01476E                     i2u928_48:
 23090  01476E  0005               	push	
 23091  014770  6EFA               	movwf	pclath,c
 23092  014772  5029               	movf	_gISR,w,c
 23093  014774  6EFD               	movwf	tosl,c
 23094  014776  502A               	movf	_gISR+1,w,c
 23095  014778  6EFE               	movwf	tosh,c
 23096  01477A  502B               	movf	_gISR+2,w,c
 23097  01477C  6EFF               	movwf	tosu,c
 23098  01477E  50FA               	movf	pclath,w,c
 23099  014780  0012               	return		;indir
 23100  014782                     __end_of_Timer0_ISR:
 23101                           	opt stack 0
 23102                           tosu	equ	0xFFF
 23103                           tosh	equ	0xFFE
 23104                           tosl	equ	0xFFD
 23105                           pclatu	equ	0xFFB
 23106                           pclath	equ	0xFFA
 23107                           tblptru	equ	0xFF8
 23108                           tblptrh	equ	0xFF7
 23109                           tblptrl	equ	0xFF6
 23110                           tablat	equ	0xFF5
 23111                           prodh	equ	0xFF4
 23112                           prodl	equ	0xFF3
 23113                           intcon	equ	0xFF2
 23114                           indf0	equ	0xFEF
 23115                           postinc0	equ	0xFEE
 23116                           plusw0	equ	0xFEB
 23117                           fsr0h	equ	0xFEA
 23118                           fsr0l	equ	0xFE9
 23119                           wreg	equ	0xFE8
 23120                           indf1	equ	0xFE7
 23121                           postdec1	equ	0xFE5
 23122                           fsr1h	equ	0xFE2
 23123                           fsr1l	equ	0xFE1
 23124                           indf2	equ	0xFDF
 23125                           postinc2	equ	0xFDE
 23126                           postdec2	equ	0xFDD
 23127                           plusw2	equ	0xFDB
 23128                           fsr2h	equ	0xFDA
 23129                           fsr2l	equ	0xFD9
 23130                           status	equ	0xFD8
 23131                           
 23132 ;; *************** function i2_Motor_Step *****************
 23133 ;; Defined at:
 23134 ;;		line 75 in file "Library/Motor.c"
 23135 ;; Parameters:    Size  Location     Type
 23136 ;;		None
 23137 ;; Auto vars:     Size  Location     Type
 23138 ;;		None
 23139 ;; Return value:  Size  Location     Type
 23140 ;;                  1    wreg      void 
 23141 ;; Registers used:
 23142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23143 ;; Tracked objects:
 23144 ;;		On entry : 0/0
 23145 ;;		On exit  : 0/0
 23146 ;;		Unchanged: 0/0
 23147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23152 ;;Total ram usage:        2 bytes
 23153 ;; Hardware stack levels used:    1
 23154 ;; Hardware stack levels required when called:    4
 23155 ;; This function calls:
 23156 ;;		i2_MXK_Queue
 23157 ;;		i2_MXK_Release
 23158 ;;		i2_MXK_SwitchTo
 23159 ;;		i2_Port_SetPin
 23160 ;;		i2_Timer0_Restart
 23161 ;;		i2_Timer0_Stop
 23162 ;; This function is called by:
 23163 ;; This function uses a non-reentrant model
 23164 ;;
 23165                           
 23166                           	psect	text132
 23167  012468                     __ptext132:
 23168                           	opt stack 0
 23169  012468                     i2_Motor_Step:
 23170                           	opt stack 10
 23171                           
 23172                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 23173                           
 23174                           ;incstack = 0
 23175  012468  0100               	movlb	0	; () banked
 23176  01246A  EE20 F004          	lfsr	2,4
 23177  01246E  516F               	movf	_lMotor& (0+255),w,b
 23178  012470  26D9               	addwf	fsr2l,f,c
 23179  012472  5170               	movf	(_lMotor+1)& (0+255),w,b
 23180  012474  22DA               	addwfc	fsr2h,f,c
 23181  012476  50DF               	movf	indf2,w,c
 23182  012478  EC6E  F0A2         	call	i2_MXK_SwitchTo
 23183  01247C  0900               	iorlw	0
 23184  01247E  B4D8               	btfsc	status,2,c
 23185  012480  D06A               	goto	i2l1635
 23186                           
 23187                           ;Motor.c: 78: {
 23188                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 23189  012482  C06F  FFD9         	movff	_lMotor,fsr2l
 23190  012486  C070  FFDA         	movff	_lMotor+1,fsr2h
 23191  01248A  50DE               	movf	postinc2,w,c
 23192  01248C  10DE               	iorwf	postinc2,w,c
 23193  01248E  B4D8               	btfsc	status,2,c
 23194  012490  D05D               	goto	i2l1636
 23195                           
 23196                           ;Motor.c: 80: {
 23197                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 23198  012492  C06F  FFD9         	movff	_lMotor,fsr2l
 23199  012496  C070  FFDA         	movff	_lMotor+1,fsr2h
 23200  01249A  0E01               	movlw	1
 23201  01249C  BEDB               	btfsc	plusw2,7,c
 23202  01249E  D022               	goto	i2l1637
 23203  0124A0  0E01               	movlw	1
 23204  0124A2  50DB               	movf	plusw2,w,c
 23205  0124A4  E103               	bnz	i2u549_40
 23206  0124A6  04DE               	decf	postinc2,w,c
 23207  0124A8  A0D8               	btfss	status,0,c
 23208  0124AA  D01C               	goto	i2l1637
 23209  0124AC                     i2u549_40:
 23210                           
 23211                           ;Motor.c: 83: {
 23212                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 23213  0124AC  C06F  FFD9         	movff	_lMotor,fsr2l
 23214  0124B0  C070  FFDA         	movff	_lMotor+1,fsr2h
 23215  0124B4  28DE               	incf	postinc2,w,c
 23216  0124B6  E104               	bnz	i2u550_40
 23217  0124B8  0E7F               	movlw	127
 23218  0124BA  18DE               	xorwf	postinc2,w,c
 23219  0124BC  B4D8               	btfsc	status,2,c
 23220  0124BE  D007               	goto	i2l1638
 23221  0124C0                     i2u550_40:
 23222                           
 23223                           ;Motor.c: 85: lMotor->mDelta --;
 23224  0124C0  C06F  FFD9         	movff	_lMotor,fsr2l
 23225  0124C4  C070  FFDA         	movff	_lMotor+1,fsr2h
 23226  0124C8  06DE               	decf	postinc2,f,c
 23227  0124CA  0E00               	movlw	0
 23228  0124CC  5ADD               	subwfb	postdec2,f,c
 23229  0124CE                     i2l1638:
 23230                           
 23231                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 23232  0124CE  0E7D               	movlw	low _PortE
 23233  0124D0  6E10               	movwf	i2Port_SetPin@pInput,c
 23234  0124D2  0E00               	movlw	high _PortE
 23235  0124D4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23236  0124D6  0E00               	movlw	0
 23237  0124D8  6E12               	movwf	i2Port_SetPin@pPin,c
 23238  0124DA  0E01               	movlw	1
 23239  0124DC  6E13               	movwf	i2Port_SetPin@pValue,c
 23240  0124DE  EC3E  F097         	call	i2_Port_SetPin	;wreg free
 23241                           
 23242                           ;Motor.c: 88: }
 23243  0124E2  D01B               	goto	i2l1639
 23244  0124E4                     i2l1637:
 23245                           
 23246                           ;Motor.c: 89: else
 23247                           ;Motor.c: 90: {
 23248                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 23249  0124E4  C06F  FFD9         	movff	_lMotor,fsr2l
 23250  0124E8  C070  FFDA         	movff	_lMotor+1,fsr2h
 23251  0124EC  04DE               	decf	postinc2,w,c
 23252  0124EE  E104               	bnz	i2u551_40
 23253  0124F0  0E80               	movlw	128
 23254  0124F2  18DE               	xorwf	postinc2,w,c
 23255  0124F4  B4D8               	btfsc	status,2,c
 23256  0124F6  D007               	goto	i2l1640
 23257  0124F8                     i2u551_40:
 23258                           
 23259                           ;Motor.c: 92: lMotor->mDelta ++;
 23260  0124F8  C06F  FFD9         	movff	_lMotor,fsr2l
 23261  0124FC  C070  FFDA         	movff	_lMotor+1,fsr2h
 23262  012500  2ADE               	incf	postinc2,f,c
 23263  012502  0E00               	movlw	0
 23264  012504  22DD               	addwfc	postdec2,f,c
 23265  012506                     i2l1640:
 23266                           
 23267                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 23268  012506  0E7D               	movlw	low _PortE
 23269  012508  6E10               	movwf	i2Port_SetPin@pInput,c
 23270  01250A  0E00               	movlw	high _PortE
 23271  01250C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23272  01250E  0E00               	movlw	0
 23273  012510  6E12               	movwf	i2Port_SetPin@pPin,c
 23274  012512  0E00               	movlw	0
 23275  012514  6E13               	movwf	i2Port_SetPin@pValue,c
 23276  012516  EC3E  F097         	call	i2_Port_SetPin	;wreg free
 23277  01251A                     i2l1639:
 23278                           
 23279                           ;Motor.c: 95: }
 23280                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 23281  01251A  0E7D               	movlw	low _PortE
 23282  01251C  6E10               	movwf	i2Port_SetPin@pInput,c
 23283  01251E  0E00               	movlw	high _PortE
 23284  012520  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23285  012522  0E01               	movlw	1
 23286  012524  6E12               	movwf	i2Port_SetPin@pPin,c
 23287  012526  0E01               	movlw	1
 23288  012528  6E13               	movwf	i2Port_SetPin@pValue,c
 23289  01252A  EC3E  F097         	call	i2_Port_SetPin	;wreg free
 23290                           
 23291                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 23292  01252E  0E7D               	movlw	low _PortE
 23293  012530  6E10               	movwf	i2Port_SetPin@pInput,c
 23294  012532  0E00               	movlw	high _PortE
 23295  012534  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23296  012536  0E01               	movlw	1
 23297  012538  6E12               	movwf	i2Port_SetPin@pPin,c
 23298  01253A  0E00               	movlw	0
 23299  01253C  6E13               	movwf	i2Port_SetPin@pValue,c
 23300  01253E  EC3E  F097         	call	i2_Port_SetPin	;wreg free
 23301                           
 23302                           ;Motor.c: 101: MXK_Release();
 23303  012542  EC65  F0A5         	call	i2_MXK_Release	;wreg free
 23304                           
 23305                           ;Motor.c: 102: Timer0_Restart();
 23306  012546  EC39  F0A5         	call	i2_Timer0_Restart	;wreg free
 23307                           
 23308                           ;Motor.c: 103: return;
 23309  01254A  0012               	return	
 23310  01254C                     i2l1636:
 23311                           
 23312                           ;Motor.c: 104: }
 23313                           ;Motor.c: 105: MXK_Release();
 23314  01254C  EC65  F0A5         	call	i2_MXK_Release	;wreg free
 23315                           
 23316                           ;Motor.c: 106: Timer0_Stop();
 23317  012550  EC62  F0A5         	call	i2_Timer0_Stop	;wreg free
 23318                           
 23319                           ;Motor.c: 107: return;
 23320  012554  0012               	return	
 23321  012556                     i2l1635:
 23322                           
 23323                           ;Motor.c: 108: }
 23324                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23325  012556  C02C  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 23326  01255A  C02D  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23327  01255E  C02E  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23328  012562  EC26  F0A5         	call	i2_MXK_Queue	;wreg free
 23329  012566  0012               	return		;funcret
 23330  012568                     __end_ofi2_Motor_Step:
 23331                           	opt stack 0
 23332                           tosu	equ	0xFFF
 23333                           tosh	equ	0xFFE
 23334                           tosl	equ	0xFFD
 23335                           pclatu	equ	0xFFB
 23336                           pclath	equ	0xFFA
 23337                           tblptru	equ	0xFF8
 23338                           tblptrh	equ	0xFF7
 23339                           tblptrl	equ	0xFF6
 23340                           tablat	equ	0xFF5
 23341                           prodh	equ	0xFF4
 23342                           prodl	equ	0xFF3
 23343                           intcon	equ	0xFF2
 23344                           indf0	equ	0xFEF
 23345                           postinc0	equ	0xFEE
 23346                           plusw0	equ	0xFEB
 23347                           fsr0h	equ	0xFEA
 23348                           fsr0l	equ	0xFE9
 23349                           wreg	equ	0xFE8
 23350                           indf1	equ	0xFE7
 23351                           postdec1	equ	0xFE5
 23352                           fsr1h	equ	0xFE2
 23353                           fsr1l	equ	0xFE1
 23354                           indf2	equ	0xFDF
 23355                           postinc2	equ	0xFDE
 23356                           postdec2	equ	0xFDD
 23357                           plusw2	equ	0xFDB
 23358                           fsr2h	equ	0xFDA
 23359                           fsr2l	equ	0xFD9
 23360                           status	equ	0xFD8
 23361                           
 23362 ;; *************** function i2_Timer0_Stop *****************
 23363 ;; Defined at:
 23364 ;;		line 89 in file "Library/Timer0.c"
 23365 ;; Parameters:    Size  Location     Type
 23366 ;;		None
 23367 ;; Auto vars:     Size  Location     Type
 23368 ;;		None
 23369 ;; Return value:  Size  Location     Type
 23370 ;;                  1    wreg      void 
 23371 ;; Registers used:
 23372 ;;		None
 23373 ;; Tracked objects:
 23374 ;;		On entry : 0/0
 23375 ;;		On exit  : 0/0
 23376 ;;		Unchanged: 0/0
 23377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23382 ;;Total ram usage:        0 bytes
 23383 ;; Hardware stack levels used:    1
 23384 ;; This function calls:
 23385 ;;		Nothing
 23386 ;; This function is called by:
 23387 ;;		_Timer0_ISR
 23388 ;;		i2_Motor_Step
 23389 ;; This function uses a non-reentrant model
 23390 ;;
 23391                           
 23392                           	psect	text133
 23393  014AC4                     __ptext133:
 23394                           	opt stack 0
 23395  014AC4                     i2_Timer0_Stop:
 23396                           	opt stack 14
 23397                           
 23398                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23399                           
 23400                           ;incstack = 0
 23401  014AC4  9AF2               	bcf	intcon,5,c	;volatile
 23402                           
 23403                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23404  014AC6  94F2               	bcf	intcon,2,c	;volatile
 23405  014AC8  0012               	return		;funcret
 23406  014ACA                     __end_ofi2_Timer0_Stop:
 23407                           	opt stack 0
 23408                           tosu	equ	0xFFF
 23409                           tosh	equ	0xFFE
 23410                           tosl	equ	0xFFD
 23411                           pclatu	equ	0xFFB
 23412                           pclath	equ	0xFFA
 23413                           tblptru	equ	0xFF8
 23414                           tblptrh	equ	0xFF7
 23415                           tblptrl	equ	0xFF6
 23416                           tablat	equ	0xFF5
 23417                           prodh	equ	0xFF4
 23418                           prodl	equ	0xFF3
 23419                           intcon	equ	0xFF2
 23420                           indf0	equ	0xFEF
 23421                           postinc0	equ	0xFEE
 23422                           plusw0	equ	0xFEB
 23423                           fsr0h	equ	0xFEA
 23424                           fsr0l	equ	0xFE9
 23425                           wreg	equ	0xFE8
 23426                           indf1	equ	0xFE7
 23427                           postdec1	equ	0xFE5
 23428                           fsr1h	equ	0xFE2
 23429                           fsr1l	equ	0xFE1
 23430                           indf2	equ	0xFDF
 23431                           postinc2	equ	0xFDE
 23432                           postdec2	equ	0xFDD
 23433                           plusw2	equ	0xFDB
 23434                           fsr2h	equ	0xFDA
 23435                           fsr2l	equ	0xFD9
 23436                           status	equ	0xFD8
 23437                           
 23438 ;; *************** function i2_Timer0_Restart *****************
 23439 ;; Defined at:
 23440 ;;		line 83 in file "Library/Timer0.c"
 23441 ;; Parameters:    Size  Location     Type
 23442 ;;		None
 23443 ;; Auto vars:     Size  Location     Type
 23444 ;;		None
 23445 ;; Return value:  Size  Location     Type
 23446 ;;                  1    wreg      void 
 23447 ;; Registers used:
 23448 ;;		None
 23449 ;; Tracked objects:
 23450 ;;		On entry : 0/0
 23451 ;;		On exit  : 0/0
 23452 ;;		Unchanged: 0/0
 23453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23458 ;;Total ram usage:        0 bytes
 23459 ;; Hardware stack levels used:    1
 23460 ;; This function calls:
 23461 ;;		Nothing
 23462 ;; This function is called by:
 23463 ;;		i2_Motor_Step
 23464 ;; This function uses a non-reentrant model
 23465 ;;
 23466                           
 23467                           	psect	text134
 23468  014A72                     __ptext134:
 23469                           	opt stack 0
 23470  014A72                     i2_Timer0_Restart:
 23471                           	opt stack 13
 23472                           
 23473                           ;Timer0.c: 85: TMR0 = COUNTER;
 23474                           
 23475                           ;incstack = 0
 23476  014A72  C031  FFD6         	movff	_COUNTER,4054	;volatile
 23477  014A76  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 23478                           
 23479                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23480  014A7A  8AF2               	bsf	intcon,5,c	;volatile
 23481  014A7C  0012               	return		;funcret
 23482  014A7E                     __end_ofi2_Timer0_Restart:
 23483                           	opt stack 0
 23484                           tosu	equ	0xFFF
 23485                           tosh	equ	0xFFE
 23486                           tosl	equ	0xFFD
 23487                           pclatu	equ	0xFFB
 23488                           pclath	equ	0xFFA
 23489                           tblptru	equ	0xFF8
 23490                           tblptrh	equ	0xFF7
 23491                           tblptrl	equ	0xFF6
 23492                           tablat	equ	0xFF5
 23493                           prodh	equ	0xFF4
 23494                           prodl	equ	0xFF3
 23495                           intcon	equ	0xFF2
 23496                           indf0	equ	0xFEF
 23497                           postinc0	equ	0xFEE
 23498                           plusw0	equ	0xFEB
 23499                           fsr0h	equ	0xFEA
 23500                           fsr0l	equ	0xFE9
 23501                           wreg	equ	0xFE8
 23502                           indf1	equ	0xFE7
 23503                           postdec1	equ	0xFE5
 23504                           fsr1h	equ	0xFE2
 23505                           fsr1l	equ	0xFE1
 23506                           indf2	equ	0xFDF
 23507                           postinc2	equ	0xFDE
 23508                           postdec2	equ	0xFDD
 23509                           plusw2	equ	0xFDB
 23510                           fsr2h	equ	0xFDA
 23511                           fsr2l	equ	0xFD9
 23512                           status	equ	0xFD8
 23513                           
 23514 ;; *************** function i2_Port_SetPin *****************
 23515 ;; Defined at:
 23516 ;;		line 247 in file "Library/Port.c"
 23517 ;; Parameters:    Size  Location     Type
 23518 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23519 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23520 ;;  pPin            1   17[COMRAM] enum E6750
 23521 ;;  pValue          1   18[COMRAM] unsigned char 
 23522 ;; Auto vars:     Size  Location     Type
 23523 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23524 ;; Return value:  Size  Location     Type
 23525 ;;                  1    wreg      void 
 23526 ;; Registers used:
 23527 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23528 ;; Tracked objects:
 23529 ;;		On entry : 0/0
 23530 ;;		On exit  : 0/0
 23531 ;;		Unchanged: 0/0
 23532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23533 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;Total ram usage:        5 bytes
 23538 ;; Hardware stack levels used:    1
 23539 ;; Hardware stack levels required when called:    3
 23540 ;; This function calls:
 23541 ;;		i2_Byte_SetBit
 23542 ;;		i2_Word_GetPair
 23543 ;; This function is called by:
 23544 ;;		i2_Motor_Step
 23545 ;; This function uses a non-reentrant model
 23546 ;;
 23547                           
 23548                           	psect	text135
 23549  012E7C                     __ptext135:
 23550                           	opt stack 0
 23551  012E7C                     i2_Port_SetPin:
 23552                           	opt stack 10
 23553                           
 23554                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23555                           
 23556                           ;incstack = 0
 23557  012E7C  0E08               	movlw	8
 23558  012E7E  2410               	addwf	i2Port_SetPin@pInput,w,c
 23559  012E80  6E0D               	movwf	i2Word_GetPair@pInput,c
 23560  012E82  0E00               	movlw	0
 23561  012E84  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23562  012E86  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23563  012E88  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23564  012E8C  EC04  F0A3         	call	i2_Word_GetPair	;wreg free
 23565  012E90  6E14               	movwf	i2Port_SetPin@Type,c
 23566                           
 23567                           ;Port.c: 250: switch (Type)
 23568  012E92  D03B               	goto	i2l427
 23569  012E94                     
 23570                           ;Port.c: 256: pValue &= 1;
 23571  012E94  0E01               	movlw	1
 23572  012E96  1613               	andwf	i2Port_SetPin@pValue,f,c
 23573                           
 23574                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23575  012E98  EE20 F002          	lfsr	2,2
 23576  012E9C  5010               	movf	i2Port_SetPin@pInput,w,c
 23577  012E9E  26D9               	addwf	fsr2l,f,c
 23578  012EA0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23579  012EA2  22DA               	addwfc	fsr2h,f,c
 23580  012EA4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23581  012EA8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23582  012EAC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23583  012EB0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23584  012EB4  EC25  F0A0         	call	i2_Byte_SetBit	;wreg free
 23585                           
 23586                           ;Port.c: 258: break;
 23587  012EB8  0012               	return	
 23588  012EBA                     
 23589                           ;Port.c: 261: pValue &= 1;
 23590  012EBA  0E01               	movlw	1
 23591  012EBC  1613               	andwf	i2Port_SetPin@pValue,f,c
 23592                           
 23593                           ;Port.c: 262: pValue ^= 1;
 23594  012EBE  0E01               	movlw	1
 23595  012EC0  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23596                           
 23597                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23598  012EC2  EE20 F002          	lfsr	2,2
 23599  012EC6  5010               	movf	i2Port_SetPin@pInput,w,c
 23600  012EC8  26D9               	addwf	fsr2l,f,c
 23601  012ECA  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23602  012ECC  22DA               	addwfc	fsr2h,f,c
 23603  012ECE  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23604  012ED2  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23605  012ED6  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23606  012EDA  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23607  012EDE  EC25  F0A0         	call	i2_Byte_SetBit	;wreg free
 23608                           
 23609                           ;Port.c: 264: break;
 23610  012EE2  0012               	return	
 23611  012EE4                     
 23612                           ;Port.c: 266: pValue &= 1;
 23613  012EE4  0E01               	movlw	1
 23614  012EE6  1613               	andwf	i2Port_SetPin@pValue,f,c
 23615                           
 23616                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23617  012EE8  EE20 F004          	lfsr	2,4
 23618  012EEC  5010               	movf	i2Port_SetPin@pInput,w,c
 23619  012EEE  26D9               	addwf	fsr2l,f,c
 23620  012EF0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23621  012EF2  22DA               	addwfc	fsr2h,f,c
 23622  012EF4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23623  012EF8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23624  012EFC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23625  012F00  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23626  012F04  EC25  F0A0         	call	i2_Byte_SetBit	;wreg free
 23627                           
 23628                           ;Port.c: 269: }
 23629                           
 23630                           ;Port.c: 268: break;
 23631  012F08  0012               	return	
 23632  012F0A                     i2l427:
 23633  012F0A  5014               	movf	i2Port_SetPin@Type,w,c
 23634                           
 23635                           ; Switch size 1, requested type "space"
 23636                           ; Number of cases is 4, Range of values is 0 to 3
 23637                           ; switch strategies available:
 23638                           ; Name         Instructions Cycles
 23639                           ; simple_byte           13     7 (average)
 23640                           ;	Chosen strategy is simple_byte
 23641  012F0C  0A00               	xorlw	0	; case 0
 23642  012F0E  B4D8               	btfsc	status,2,c
 23643  012F10  0012               	return	
 23644  012F12  0A01               	xorlw	1	; case 1
 23645  012F14  B4D8               	btfsc	status,2,c
 23646  012F16  D7BE               	goto	i2l430
 23647  012F18  0A03               	xorlw	3	; case 2
 23648  012F1A  B4D8               	btfsc	status,2,c
 23649  012F1C  D7CE               	goto	i2l432
 23650  012F1E  0A01               	xorlw	1	; case 3
 23651  012F20  A4D8               	btfss	status,2,c
 23652  012F22  0012               	return	
 23653  012F24  D7DF               	goto	i2l433
 23654  012F26                     __end_ofi2_Port_SetPin:
 23655                           	opt stack 0
 23656                           tosu	equ	0xFFF
 23657                           tosh	equ	0xFFE
 23658                           tosl	equ	0xFFD
 23659                           pclatu	equ	0xFFB
 23660                           pclath	equ	0xFFA
 23661                           tblptru	equ	0xFF8
 23662                           tblptrh	equ	0xFF7
 23663                           tblptrl	equ	0xFF6
 23664                           tablat	equ	0xFF5
 23665                           prodh	equ	0xFF4
 23666                           prodl	equ	0xFF3
 23667                           intcon	equ	0xFF2
 23668                           indf0	equ	0xFEF
 23669                           postinc0	equ	0xFEE
 23670                           plusw0	equ	0xFEB
 23671                           fsr0h	equ	0xFEA
 23672                           fsr0l	equ	0xFE9
 23673                           wreg	equ	0xFE8
 23674                           indf1	equ	0xFE7
 23675                           postdec1	equ	0xFE5
 23676                           fsr1h	equ	0xFE2
 23677                           fsr1l	equ	0xFE1
 23678                           indf2	equ	0xFDF
 23679                           postinc2	equ	0xFDE
 23680                           postdec2	equ	0xFDD
 23681                           plusw2	equ	0xFDB
 23682                           fsr2h	equ	0xFDA
 23683                           fsr2l	equ	0xFD9
 23684                           status	equ	0xFD8
 23685                           
 23686 ;; *************** function i2_Word_GetPair *****************
 23687 ;; Defined at:
 23688 ;;		line 156 in file "Library/Types.c"
 23689 ;; Parameters:    Size  Location     Type
 23690 ;;  pInput          2   12[COMRAM] PTR struct Word
 23691 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23692 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23693 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23694 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23695 ;;  pPair           1   14[COMRAM] unsigned char 
 23696 ;; Auto vars:     Size  Location     Type
 23697 ;;		None
 23698 ;; Return value:  Size  Location     Type
 23699 ;;                  1    wreg      unsigned char 
 23700 ;; Registers used:
 23701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23702 ;; Tracked objects:
 23703 ;;		On entry : 0/0
 23704 ;;		On exit  : 0/0
 23705 ;;		Unchanged: 0/0
 23706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23707 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23710 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23711 ;;Total ram usage:        3 bytes
 23712 ;; Hardware stack levels used:    1
 23713 ;; Hardware stack levels required when called:    2
 23714 ;; This function calls:
 23715 ;;		i2_Byte_GetPair
 23716 ;; This function is called by:
 23717 ;;		i2_Port_SetPin
 23718 ;; This function uses a non-reentrant model
 23719 ;;
 23720                           
 23721                           	psect	text136
 23722  014608                     __ptext136:
 23723                           	opt stack 0
 23724  014608                     i2_Word_GetPair:
 23725                           	opt stack 10
 23726                           
 23727                           ;Types.c: 158: if (pPair >= 4)
 23728                           
 23729                           ;incstack = 0
 23730  014608  0E03               	movlw	3
 23731  01460A  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23732  01460C  D00C               	goto	i2l781
 23733                           
 23734                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23735  01460E  0E01               	movlw	1
 23736  014610  240D               	addwf	i2Word_GetPair@pInput,w,c
 23737  014612  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23738  014614  0E00               	movlw	0
 23739  014616  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23740  014618  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23741  01461A  500F               	movf	i2Word_GetPair@pPair,w,c
 23742  01461C  0FFC               	addlw	252
 23743  01461E  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23744  014620  EC7B  F0A4         	call	i2_Byte_GetPair	;wreg free
 23745  014624  0012               	return	
 23746  014626                     i2l781:
 23747                           
 23748                           ;Types.c: 160: else
 23749                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23750  014626  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23751  01462A  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23752  01462E  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23753  014632  EC7B  F0A4         	call	i2_Byte_GetPair	;wreg free
 23754  014636  0012               	return	
 23755  014638                     __end_ofi2_Word_GetPair:
 23756                           	opt stack 0
 23757                           tosu	equ	0xFFF
 23758                           tosh	equ	0xFFE
 23759                           tosl	equ	0xFFD
 23760                           pclatu	equ	0xFFB
 23761                           pclath	equ	0xFFA
 23762                           tblptru	equ	0xFF8
 23763                           tblptrh	equ	0xFF7
 23764                           tblptrl	equ	0xFF6
 23765                           tablat	equ	0xFF5
 23766                           prodh	equ	0xFF4
 23767                           prodl	equ	0xFF3
 23768                           intcon	equ	0xFF2
 23769                           indf0	equ	0xFEF
 23770                           postinc0	equ	0xFEE
 23771                           plusw0	equ	0xFEB
 23772                           fsr0h	equ	0xFEA
 23773                           fsr0l	equ	0xFE9
 23774                           wreg	equ	0xFE8
 23775                           indf1	equ	0xFE7
 23776                           postdec1	equ	0xFE5
 23777                           fsr1h	equ	0xFE2
 23778                           fsr1l	equ	0xFE1
 23779                           indf2	equ	0xFDF
 23780                           postinc2	equ	0xFDE
 23781                           postdec2	equ	0xFDD
 23782                           plusw2	equ	0xFDB
 23783                           fsr2h	equ	0xFDA
 23784                           fsr2l	equ	0xFD9
 23785                           status	equ	0xFD8
 23786                           
 23787 ;; *************** function i2_Byte_GetPair *****************
 23788 ;; Defined at:
 23789 ;;		line 87 in file "Library/Types.c"
 23790 ;; Parameters:    Size  Location     Type
 23791 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23792 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23793 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23794 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23795 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23796 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23797 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23798 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23799 ;;		 -> NULL(0), 
 23800 ;;  pPair           1   11[COMRAM] unsigned char 
 23801 ;; Auto vars:     Size  Location     Type
 23802 ;;		None
 23803 ;; Return value:  Size  Location     Type
 23804 ;;                  1    wreg      unsigned char 
 23805 ;; Registers used:
 23806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23807 ;; Tracked objects:
 23808 ;;		On entry : 0/0
 23809 ;;		On exit  : 0/0
 23810 ;;		Unchanged: 0/0
 23811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23815 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23816 ;;Total ram usage:        3 bytes
 23817 ;; Hardware stack levels used:    1
 23818 ;; Hardware stack levels required when called:    1
 23819 ;; This function calls:
 23820 ;;		i2_Byte_GetZone
 23821 ;; This function is called by:
 23822 ;;		i2_Word_GetPair
 23823 ;; This function uses a non-reentrant model
 23824 ;;
 23825                           
 23826                           	psect	text137
 23827  0148F6                     __ptext137:
 23828                           	opt stack 0
 23829  0148F6                     i2_Byte_GetPair:
 23830                           	opt stack 10
 23831                           
 23832                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23833                           
 23834                           ;incstack = 0
 23835  0148F6  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23836  0148FA  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23837  0148FE  0E04               	movlw	4
 23838  014900  6E03               	movwf	i2Byte_GetZone@pMax,c
 23839  014902  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23840  014906  0E02               	movlw	2
 23841  014908  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23842  01490A  ECAB  F09B         	call	i2_Byte_GetZone	;wreg free
 23843  01490E  0012               	return	
 23844  014910                     __end_ofi2_Byte_GetPair:
 23845                           	opt stack 0
 23846                           tosu	equ	0xFFF
 23847                           tosh	equ	0xFFE
 23848                           tosl	equ	0xFFD
 23849                           pclatu	equ	0xFFB
 23850                           pclath	equ	0xFFA
 23851                           tblptru	equ	0xFF8
 23852                           tblptrh	equ	0xFF7
 23853                           tblptrl	equ	0xFF6
 23854                           tablat	equ	0xFF5
 23855                           prodh	equ	0xFF4
 23856                           prodl	equ	0xFF3
 23857                           intcon	equ	0xFF2
 23858                           indf0	equ	0xFEF
 23859                           postinc0	equ	0xFEE
 23860                           plusw0	equ	0xFEB
 23861                           fsr0h	equ	0xFEA
 23862                           fsr0l	equ	0xFE9
 23863                           wreg	equ	0xFE8
 23864                           indf1	equ	0xFE7
 23865                           postdec1	equ	0xFE5
 23866                           fsr1h	equ	0xFE2
 23867                           fsr1l	equ	0xFE1
 23868                           indf2	equ	0xFDF
 23869                           postinc2	equ	0xFDE
 23870                           postdec2	equ	0xFDD
 23871                           plusw2	equ	0xFDB
 23872                           fsr2h	equ	0xFDA
 23873                           fsr2l	equ	0xFD9
 23874                           status	equ	0xFD8
 23875                           
 23876 ;; *************** function i2_Byte_GetZone *****************
 23877 ;; Defined at:
 23878 ;;		line 64 in file "Library/Types.c"
 23879 ;; Parameters:    Size  Location     Type
 23880 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23881 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23882 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23883 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23884 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23885 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23886 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23887 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23888 ;;		 -> NULL(0), 
 23889 ;;  pMax            1    2[COMRAM] unsigned char 
 23890 ;;  pChunk          1    3[COMRAM] unsigned char 
 23891 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23892 ;; Auto vars:     Size  Location     Type
 23893 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23894 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23895 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23896 ;; Return value:  Size  Location     Type
 23897 ;;                  1    wreg      unsigned char 
 23898 ;; Registers used:
 23899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23900 ;; Tracked objects:
 23901 ;;		On entry : 0/0
 23902 ;;		On exit  : 0/0
 23903 ;;		Unchanged: 0/0
 23904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23905 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23906 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23908 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23909 ;;Total ram usage:        9 bytes
 23910 ;; Hardware stack levels used:    1
 23911 ;; This function calls:
 23912 ;;		Nothing
 23913 ;; This function is called by:
 23914 ;;		i2_Byte_GetPair
 23915 ;; This function uses a non-reentrant model
 23916 ;;
 23917                           
 23918                           	psect	text138
 23919  013756                     __ptext138:
 23920                           	opt stack 0
 23921  013756                     i2_Byte_GetZone:
 23922                           	opt stack 10
 23923                           
 23924                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23925                           
 23926                           ;incstack = 0
 23927  013756  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23928  01375A  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23929  01375E  0E00               	movlw	low (__mediumconst shr (0+16))
 23930  013760  6EF8               	movwf	tblptru,c
 23931  013762  0E0F               	movlw	(high __ramtop+-1)
 23932  013764  64F7               	cpfsgt	tblptrh,c
 23933  013766  D003               	bra	i2u405_47
 23934  013768  0008               	tblrd		*
 23935  01376A  50F5               	movf	tablat,w,c
 23936  01376C  D005               	bra	i2u405_40
 23937  01376E                     i2u405_47:
 23938  01376E  CFF6 FFE9          	movff	tblptrl,fsr0l
 23939  013772  CFF7 FFEA          	movff	tblptrh,fsr0h
 23940  013776  50EF               	movf	indf0,w,c
 23941  013778                     i2u405_40:
 23942  013778  6E09               	movwf	i2Byte_GetZone@Output,c
 23943                           
 23944                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23945  01377A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23946  01377C  0D01               	mullw	1
 23947  01377E  0E75               	movlw	low _MASKS
 23948  013780  24F3               	addwf	prodl,w,c
 23949  013782  6EF6               	movwf	tblptrl,c
 23950  013784  0EFD               	movlw	high _MASKS
 23951  013786  20F4               	addwfc	prodh,w,c
 23952  013788  6EF7               	movwf	tblptrh,c
 23953  01378A                     	if	1	;There are 3 active tblptr bytes
 23954  01378A  6AF8               	clrf	tblptru,c
 23955  01378C  0E00               	movlw	low (__mediumconst shr (0+16))
 23956  01378E  22F8               	addwfc	tblptru,f,c
 23957  013790                     	endif
 23958  013790  0008               	tblrd		*
 23959  013792  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 23960                           
 23961                           ;Types.c: 68: UINT8 Offset = 0;
 23962  013796  0E00               	movlw	0
 23963  013798  6E08               	movwf	i2Byte_GetZone@Offset,c
 23964                           
 23965                           ;Types.c: 70: while (pChunk >= pMax)
 23966  01379A  D003               	goto	i2l732
 23967  01379C                     
 23968                           ;Types.c: 71: {
 23969                           ;Types.c: 72: pChunk -= pMax;
 23970  01379C  5003               	movf	i2Byte_GetZone@pMax,w,c
 23971  01379E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 23972                           
 23973                           ;Types.c: 73: Offset += 1;
 23974  0137A0  2A08               	incf	i2Byte_GetZone@Offset,f,c
 23975  0137A2                     i2l732:
 23976  0137A2  5003               	movf	i2Byte_GetZone@pMax,w,c
 23977  0137A4  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 23978  0137A6  B0D8               	btfsc	status,0,c
 23979  0137A8  D7F9               	goto	i2l733
 23980                           
 23981                           ;Types.c: 74: }
 23982                           ;Types.c: 75: pChunk *= pChunkSize;
 23983  0137AA  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23984  0137AC  0204               	mulwf	i2Byte_GetZone@pChunk,c
 23985  0137AE  50F3               	movf	prodl,w,c
 23986  0137B0  6E04               	movwf	i2Byte_GetZone@pChunk,c
 23987                           
 23988                           ;Types.c: 76: pChunk += Offset;
 23989  0137B2  5008               	movf	i2Byte_GetZone@Offset,w,c
 23990  0137B4  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 23991                           
 23992                           ;Types.c: 78: Output >>= pChunk;
 23993  0137B6  2804               	incf	i2Byte_GetZone@pChunk,w,c
 23994  0137B8  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 23995  0137BA  D002               	goto	i2u407_40
 23996  0137BC                     i2u407_45:
 23997  0137BC  90D8               	bcf	status,0,c
 23998  0137BE  3209               	rrcf	i2Byte_GetZone@Output,f,c
 23999  0137C0                     i2u407_40:
 24000  0137C0  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 24001  0137C2  D7FC               	goto	i2u407_45
 24002                           
 24003                           ;Types.c: 79: Output &= MASK;
 24004  0137C4  5007               	movf	i2Byte_GetZone@MASK,w,c
 24005  0137C6  1609               	andwf	i2Byte_GetZone@Output,f,c
 24006                           
 24007                           ;Types.c: 80: return Output;
 24008  0137C8  5009               	movf	i2Byte_GetZone@Output,w,c
 24009  0137CA  0012               	return	
 24010  0137CC                     __end_ofi2_Byte_GetZone:
 24011                           	opt stack 0
 24012                           tosu	equ	0xFFF
 24013                           tosh	equ	0xFFE
 24014                           tosl	equ	0xFFD
 24015                           pclatu	equ	0xFFB
 24016                           pclath	equ	0xFFA
 24017                           tblptru	equ	0xFF8
 24018                           tblptrh	equ	0xFF7
 24019                           tblptrl	equ	0xFF6
 24020                           tablat	equ	0xFF5
 24021                           prodh	equ	0xFF4
 24022                           prodl	equ	0xFF3
 24023                           intcon	equ	0xFF2
 24024                           indf0	equ	0xFEF
 24025                           postinc0	equ	0xFEE
 24026                           plusw0	equ	0xFEB
 24027                           fsr0h	equ	0xFEA
 24028                           fsr0l	equ	0xFE9
 24029                           wreg	equ	0xFE8
 24030                           indf1	equ	0xFE7
 24031                           postdec1	equ	0xFE5
 24032                           fsr1h	equ	0xFE2
 24033                           fsr1l	equ	0xFE1
 24034                           indf2	equ	0xFDF
 24035                           postinc2	equ	0xFDE
 24036                           postdec2	equ	0xFDD
 24037                           plusw2	equ	0xFDB
 24038                           fsr2h	equ	0xFDA
 24039                           fsr2l	equ	0xFD9
 24040                           status	equ	0xFD8
 24041                           
 24042 ;; *************** function i2_Byte_SetBit *****************
 24043 ;; Defined at:
 24044 ;;		line 32 in file "Library/Types.c"
 24045 ;; Parameters:    Size  Location     Type
 24046 ;;  pInput          2    0[COMRAM] PTR struct Byte
 24047 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24048 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24049 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24050 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24051 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24052 ;;		 -> NULL(0), 
 24053 ;;  pBit            1    2[COMRAM] unsigned char 
 24054 ;;  pValue          1    3[COMRAM] unsigned char 
 24055 ;; Auto vars:     Size  Location     Type
 24056 ;;		None
 24057 ;; Return value:  Size  Location     Type
 24058 ;;                  1    wreg      void 
 24059 ;; Registers used:
 24060 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24061 ;; Tracked objects:
 24062 ;;		On entry : 0/0
 24063 ;;		On exit  : 0/0
 24064 ;;		Unchanged: 0/0
 24065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24069 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24070 ;;Total ram usage:        7 bytes
 24071 ;; Hardware stack levels used:    1
 24072 ;; This function calls:
 24073 ;;		Nothing
 24074 ;; This function is called by:
 24075 ;;		i2_Port_SetPin
 24076 ;; This function uses a non-reentrant model
 24077 ;;
 24078                           
 24079                           	psect	text139
 24080  01404A                     __ptext139:
 24081                           	opt stack 0
 24082  01404A                     i2_Byte_SetBit:
 24083                           	opt stack 12
 24084                           
 24085                           ;Types.c: 34: pValue &= 1;
 24086                           
 24087                           ;incstack = 0
 24088  01404A  0E01               	movlw	1
 24089  01404C  1604               	andwf	i2Byte_SetBit@pValue,f,c
 24090                           
 24091                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24092  01404E  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24093  014052  0E01               	movlw	1
 24094  014054  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 24095  014056  2A05               	incf	??i2_Byte_SetBit,f,c
 24096  014058  D002               	goto	i2u471_44
 24097  01405A                     i2u471_45:
 24098  01405A  90D8               	bcf	status,0,c
 24099  01405C  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24100  01405E                     i2u471_44:
 24101  01405E  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24102  014060  D7FC               	goto	i2u471_45
 24103  014062  5006               	movf	??i2_Byte_SetBit+1,w,c
 24104  014064  0AFF               	xorlw	255
 24105  014066  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 24106  014068  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24107  01406C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24108  014070  5007               	movf	??i2_Byte_SetBit+2,w,c
 24109  014072  16DF               	andwf	indf2,f,c
 24110                           
 24111                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24112  014074  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24113  014078  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 24114  01407C  2A05               	incf	??i2_Byte_SetBit,f,c
 24115  01407E  D002               	goto	i2u472_44
 24116  014080                     i2u472_45:
 24117  014080  90D8               	bcf	status,0,c
 24118  014082  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24119  014084                     i2u472_44:
 24120  014084  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24121  014086  D7FC               	goto	i2u472_45
 24122  014088  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24123  01408C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24124  014090  5006               	movf	??i2_Byte_SetBit+1,w,c
 24125  014092  12DF               	iorwf	indf2,f,c
 24126  014094  0012               	return		;funcret
 24127  014096                     __end_ofi2_Byte_SetBit:
 24128                           	opt stack 0
 24129                           tosu	equ	0xFFF
 24130                           tosh	equ	0xFFE
 24131                           tosl	equ	0xFFD
 24132                           pclatu	equ	0xFFB
 24133                           pclath	equ	0xFFA
 24134                           tblptru	equ	0xFF8
 24135                           tblptrh	equ	0xFF7
 24136                           tblptrl	equ	0xFF6
 24137                           tablat	equ	0xFF5
 24138                           prodh	equ	0xFF4
 24139                           prodl	equ	0xFF3
 24140                           intcon	equ	0xFF2
 24141                           indf0	equ	0xFEF
 24142                           postinc0	equ	0xFEE
 24143                           plusw0	equ	0xFEB
 24144                           fsr0h	equ	0xFEA
 24145                           fsr0l	equ	0xFE9
 24146                           wreg	equ	0xFE8
 24147                           indf1	equ	0xFE7
 24148                           postdec1	equ	0xFE5
 24149                           fsr1h	equ	0xFE2
 24150                           fsr1l	equ	0xFE1
 24151                           indf2	equ	0xFDF
 24152                           postinc2	equ	0xFDE
 24153                           postdec2	equ	0xFDD
 24154                           plusw2	equ	0xFDB
 24155                           fsr2h	equ	0xFDA
 24156                           fsr2l	equ	0xFD9
 24157                           status	equ	0xFD8
 24158                           
 24159 ;; *************** function i2_MXK_SwitchTo *****************
 24160 ;; Defined at:
 24161 ;;		line 105 in file "Library/MXK.c"
 24162 ;; Parameters:    Size  Location     Type
 24163 ;;  pModule         1    wreg     enum E6925
 24164 ;; Auto vars:     Size  Location     Type
 24165 ;;  pModule         1    7[COMRAM] enum E6925
 24166 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 24167 ;; Return value:  Size  Location     Type
 24168 ;;                  1    wreg      unsigned char 
 24169 ;; Registers used:
 24170 ;;		wreg, status,2, status,0, cstack
 24171 ;; Tracked objects:
 24172 ;;		On entry : 0/0
 24173 ;;		On exit  : 0/0
 24174 ;;		Unchanged: 0/0
 24175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24180 ;;Total ram usage:        2 bytes
 24181 ;; Hardware stack levels used:    1
 24182 ;; Hardware stack levels required when called:    1
 24183 ;; This function calls:
 24184 ;;		i2_delay_us
 24185 ;; This function is called by:
 24186 ;;		i2_Motor_Step
 24187 ;; This function uses a non-reentrant model
 24188 ;;
 24189                           
 24190                           	psect	text140
 24191  0144DC                     __ptext140:
 24192                           	opt stack 0
 24193  0144DC                     i2_MXK_SwitchTo:
 24194                           	opt stack 12
 24195                           
 24196                           ;incstack = 0
 24197                           ;i2MXK_SwitchTo@pModule stored from wreg
 24198  0144DC  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 24199                           
 24200                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 24201  0144DE  5086               	movf	3974,w,c	;volatile
 24202  0144E0  0B0F               	andlw	15
 24203  0144E2  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 24204                           
 24205                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 24206  0144E4  504B               	movf	_Bus_State,w,c
 24207  0144E6  A4D8               	btfss	status,2,c
 24208  0144E8  D002               	goto	i2l1738
 24209                           
 24210                           ;MXK.c: 110: return 0;
 24211  0144EA  0E00               	movlw	0
 24212  0144EC  0012               	return	
 24213  0144EE                     i2l1738:
 24214                           
 24215                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 24216  0144EE  0E00               	movlw	0
 24217  0144F0  6E4B               	movwf	_Bus_State,c
 24218                           
 24219                           ;MXK.c: 114: if (CUR != pModule)
 24220  0144F2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24221  0144F4  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 24222  0144F6  B4D8               	btfsc	status,2,c
 24223  0144F8  D00A               	goto	i2l1740
 24224                           
 24225                           ;MXK.c: 115: {
 24226                           ;MXK.c: 116: PORTG &= ~(0xF);
 24227  0144FA  0EF0               	movlw	240
 24228  0144FC  1686               	andwf	3974,f,c	;volatile
 24229                           
 24230                           ;MXK.c: 117: PORTG |= pModule;
 24231  0144FE  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24232  014500  1286               	iorwf	3974,f,c	;volatile
 24233                           
 24234                           ;MXK.c: 120: delay_us(10);
 24235  014502  0E00               	movlw	0
 24236  014504  6E02               	movwf	i2delay_us@us+1,c
 24237  014506  0E0A               	movlw	10
 24238  014508  6E01               	movwf	i2delay_us@us,c
 24239  01450A  EC61  F0A1         	call	i2_delay_us	;wreg free
 24240  01450E                     i2l1740:
 24241                           
 24242                           ;MXK.c: 121: }
 24243                           ;MXK.c: 122: return 1;
 24244  01450E  0E01               	movlw	1
 24245  014510  0012               	return	
 24246  014512                     __end_ofi2_MXK_SwitchTo:
 24247                           	opt stack 0
 24248                           tosu	equ	0xFFF
 24249                           tosh	equ	0xFFE
 24250                           tosl	equ	0xFFD
 24251                           pclatu	equ	0xFFB
 24252                           pclath	equ	0xFFA
 24253                           tblptru	equ	0xFF8
 24254                           tblptrh	equ	0xFF7
 24255                           tblptrl	equ	0xFF6
 24256                           tablat	equ	0xFF5
 24257                           prodh	equ	0xFF4
 24258                           prodl	equ	0xFF3
 24259                           intcon	equ	0xFF2
 24260                           indf0	equ	0xFEF
 24261                           postinc0	equ	0xFEE
 24262                           plusw0	equ	0xFEB
 24263                           fsr0h	equ	0xFEA
 24264                           fsr0l	equ	0xFE9
 24265                           wreg	equ	0xFE8
 24266                           indf1	equ	0xFE7
 24267                           postdec1	equ	0xFE5
 24268                           fsr1h	equ	0xFE2
 24269                           fsr1l	equ	0xFE1
 24270                           indf2	equ	0xFDF
 24271                           postinc2	equ	0xFDE
 24272                           postdec2	equ	0xFDD
 24273                           plusw2	equ	0xFDB
 24274                           fsr2h	equ	0xFDA
 24275                           fsr2l	equ	0xFD9
 24276                           status	equ	0xFD8
 24277                           
 24278 ;; *************** function i2_delay_us *****************
 24279 ;; Defined at:
 24280 ;;		line 255 in file "Library/Types.c"
 24281 ;; Parameters:    Size  Location     Type
 24282 ;;  us              2    0[COMRAM] unsigned short 
 24283 ;; Auto vars:     Size  Location     Type
 24284 ;;  delay_us        4    2[COMRAM] unsigned long 
 24285 ;; Return value:  Size  Location     Type
 24286 ;;                  1    wreg      void 
 24287 ;; Registers used:
 24288 ;;		wreg, status,2, status,0
 24289 ;; Tracked objects:
 24290 ;;		On entry : 0/0
 24291 ;;		On exit  : 0/0
 24292 ;;		Unchanged: 0/0
 24293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24295 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24297 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24298 ;;Total ram usage:        6 bytes
 24299 ;; Hardware stack levels used:    1
 24300 ;; This function calls:
 24301 ;;		Nothing
 24302 ;; This function is called by:
 24303 ;;		i2_MXK_SwitchTo
 24304 ;; This function uses a non-reentrant model
 24305 ;;
 24306                           
 24307                           	psect	text141
 24308  0142C2                     __ptext141:
 24309                           	opt stack 0
 24310  0142C2                     i2_delay_us:
 24311                           	opt stack 12
 24312                           
 24313                           ;Types.c: 256: unsigned long u;
 24314                           ;Types.c: 257: while (us--) {
 24315                           
 24316                           ;incstack = 0
 24317  0142C2  D016               	goto	i2u475_40
 24318  0142C4                     i2l8170:
 24319                           
 24320                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24321  0142C4  0E00               	movlw	0
 24322  0142C6  6E03               	movwf	i2delay_us@u,c
 24323  0142C8  0E00               	movlw	0
 24324  0142CA  6E04               	movwf	i2delay_us@u+1,c
 24325  0142CC  0E00               	movlw	0
 24326  0142CE  6E05               	movwf	i2delay_us@u+2,c
 24327  0142D0  0E00               	movlw	0
 24328  0142D2  6E06               	movwf	i2delay_us@u+3,c
 24329  0142D4                     i2l8172:
 24330  0142D4  5003               	movf	i2delay_us@u,w,c
 24331  0142D6  1004               	iorwf	i2delay_us@u+1,w,c
 24332  0142D8  1005               	iorwf	i2delay_us@u+2,w,c
 24333  0142DA  1006               	iorwf	i2delay_us@u+3,w,c
 24334  0142DC  A4D8               	btfss	status,2,c
 24335  0142DE  D008               	goto	i2u475_40
 24336  0142E0  F000               	nop		; ;# 
 24337  0142E2  0E01               	movlw	1
 24338  0142E4  2603               	addwf	i2delay_us@u,f,c
 24339  0142E6  0E00               	movlw	0
 24340  0142E8  2204               	addwfc	i2delay_us@u+1,f,c
 24341  0142EA  2205               	addwfc	i2delay_us@u+2,f,c
 24342  0142EC  2206               	addwfc	i2delay_us@u+3,f,c
 24343  0142EE  D7F2               	goto	i2l8172
 24344  0142F0                     i2u475_40:
 24345  0142F0  0601               	decf	i2delay_us@us,f,c
 24346  0142F2  A0D8               	btfss	status,0,c
 24347  0142F4  0602               	decf	i2delay_us@us+1,f,c
 24348  0142F6  2801               	incf	i2delay_us@us,w,c
 24349  0142F8  E1E5               	bnz	i2l8170
 24350  0142FA  2802               	incf	i2delay_us@us+1,w,c
 24351  0142FC  B4D8               	btfsc	status,2,c
 24352  0142FE  0012               	return	
 24353  014300  D7E1               	goto	i2l832
 24354  014302                     __end_ofi2_delay_us:
 24355                           	opt stack 0
 24356                           tosu	equ	0xFFF
 24357                           tosh	equ	0xFFE
 24358                           tosl	equ	0xFFD
 24359                           pclatu	equ	0xFFB
 24360                           pclath	equ	0xFFA
 24361                           tblptru	equ	0xFF8
 24362                           tblptrh	equ	0xFF7
 24363                           tblptrl	equ	0xFF6
 24364                           tablat	equ	0xFF5
 24365                           prodh	equ	0xFF4
 24366                           prodl	equ	0xFF3
 24367                           intcon	equ	0xFF2
 24368                           indf0	equ	0xFEF
 24369                           postinc0	equ	0xFEE
 24370                           plusw0	equ	0xFEB
 24371                           fsr0h	equ	0xFEA
 24372                           fsr0l	equ	0xFE9
 24373                           wreg	equ	0xFE8
 24374                           indf1	equ	0xFE7
 24375                           postdec1	equ	0xFE5
 24376                           fsr1h	equ	0xFE2
 24377                           fsr1l	equ	0xFE1
 24378                           indf2	equ	0xFDF
 24379                           postinc2	equ	0xFDE
 24380                           postdec2	equ	0xFDD
 24381                           plusw2	equ	0xFDB
 24382                           fsr2h	equ	0xFDA
 24383                           fsr2l	equ	0xFD9
 24384                           status	equ	0xFD8
 24385                           
 24386 ;; *************** function i2_MXK_Release *****************
 24387 ;; Defined at:
 24388 ;;		line 130 in file "Library/MXK.c"
 24389 ;; Parameters:    Size  Location     Type
 24390 ;;		None
 24391 ;; Auto vars:     Size  Location     Type
 24392 ;;		None
 24393 ;; Return value:  Size  Location     Type
 24394 ;;                  1    wreg      unsigned char 
 24395 ;; Registers used:
 24396 ;;		wreg, status,2, status,0
 24397 ;; Tracked objects:
 24398 ;;		On entry : 0/0
 24399 ;;		On exit  : 0/0
 24400 ;;		Unchanged: 0/0
 24401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24406 ;;Total ram usage:        0 bytes
 24407 ;; Hardware stack levels used:    1
 24408 ;; This function calls:
 24409 ;;		Nothing
 24410 ;; This function is called by:
 24411 ;;		i2_Motor_Step
 24412 ;; This function uses a non-reentrant model
 24413 ;;
 24414                           
 24415                           	psect	text142
 24416  014ACA                     __ptext142:
 24417                           	opt stack 0
 24418  014ACA                     i2_MXK_Release:
 24419                           	opt stack 13
 24420                           
 24421                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24422                           
 24423                           ;incstack = 0
 24424  014ACA  0E01               	movlw	1
 24425  014ACC  6E4B               	movwf	_Bus_State,c
 24426                           
 24427                           ;MXK.c: 135: return 1;
 24428                           ;	Return value of i2_MXK_Release is never used
 24429  014ACE  0012               	return	
 24430  014AD0                     __end_ofi2_MXK_Release:
 24431                           	opt stack 0
 24432                           tosu	equ	0xFFF
 24433                           tosh	equ	0xFFE
 24434                           tosl	equ	0xFFD
 24435                           pclatu	equ	0xFFB
 24436                           pclath	equ	0xFFA
 24437                           tblptru	equ	0xFF8
 24438                           tblptrh	equ	0xFF7
 24439                           tblptrl	equ	0xFF6
 24440                           tablat	equ	0xFF5
 24441                           prodh	equ	0xFF4
 24442                           prodl	equ	0xFF3
 24443                           intcon	equ	0xFF2
 24444                           indf0	equ	0xFEF
 24445                           postinc0	equ	0xFEE
 24446                           plusw0	equ	0xFEB
 24447                           fsr0h	equ	0xFEA
 24448                           fsr0l	equ	0xFE9
 24449                           wreg	equ	0xFE8
 24450                           indf1	equ	0xFE7
 24451                           postdec1	equ	0xFE5
 24452                           fsr1h	equ	0xFE2
 24453                           fsr1l	equ	0xFE1
 24454                           indf2	equ	0xFDF
 24455                           postinc2	equ	0xFDE
 24456                           postdec2	equ	0xFDD
 24457                           plusw2	equ	0xFDB
 24458                           fsr2h	equ	0xFDA
 24459                           fsr2l	equ	0xFD9
 24460                           status	equ	0xFD8
 24461                           
 24462 ;; *************** function i2_MXK_Queue *****************
 24463 ;; Defined at:
 24464 ;;		line 144 in file "Library/MXK.c"
 24465 ;; Parameters:    Size  Location     Type
 24466 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24467 ;;		 -> Absolute function(1), Motor_Step(1), 
 24468 ;; Auto vars:     Size  Location     Type
 24469 ;;		None
 24470 ;; Return value:  Size  Location     Type
 24471 ;;                  1    wreg      void 
 24472 ;; Registers used:
 24473 ;;		wreg, status,2, status,0
 24474 ;; Tracked objects:
 24475 ;;		On entry : 0/0
 24476 ;;		On exit  : 0/0
 24477 ;;		Unchanged: 0/0
 24478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24479 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24482 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24483 ;;Total ram usage:        3 bytes
 24484 ;; Hardware stack levels used:    1
 24485 ;; This function calls:
 24486 ;;		Nothing
 24487 ;; This function is called by:
 24488 ;;		i2_Motor_Step
 24489 ;; This function uses a non-reentrant model
 24490 ;;
 24491                           
 24492                           	psect	text143
 24493  014A4C                     __ptext143:
 24494                           	opt stack 0
 24495  014A4C                     i2_MXK_Queue:
 24496                           	opt stack 13
 24497                           
 24498                           ;MXK.c: 146: lQueue = pCallback;
 24499                           
 24500                           ;incstack = 0
 24501  014A4C  C001  F068         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24502  014A50  C002  F069         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24503  014A54  C003  F06A         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24504  014A58  0012               	return		;funcret
 24505  014A5A                     __end_ofi2_MXK_Queue:
 24506                           	opt stack 0
 24507                           tosu	equ	0xFFF
 24508                           tosh	equ	0xFFE
 24509                           tosl	equ	0xFFD
 24510                           pclatu	equ	0xFFB
 24511                           pclath	equ	0xFFA
 24512                           tblptru	equ	0xFF8
 24513                           tblptrh	equ	0xFF7
 24514                           tblptrl	equ	0xFF6
 24515                           tablat	equ	0xFF5
 24516                           prodh	equ	0xFF4
 24517                           prodl	equ	0xFF3
 24518                           intcon	equ	0xFF2
 24519                           indf0	equ	0xFEF
 24520                           postinc0	equ	0xFEE
 24521                           plusw0	equ	0xFEB
 24522                           fsr0h	equ	0xFEA
 24523                           fsr0l	equ	0xFE9
 24524                           wreg	equ	0xFE8
 24525                           indf1	equ	0xFE7
 24526                           postdec1	equ	0xFE5
 24527                           fsr1h	equ	0xFE2
 24528                           fsr1l	equ	0xFE1
 24529                           indf2	equ	0xFDF
 24530                           postinc2	equ	0xFDE
 24531                           postdec2	equ	0xFDD
 24532                           plusw2	equ	0xFDB
 24533                           fsr2h	equ	0xFDA
 24534                           fsr2l	equ	0xFD9
 24535                           status	equ	0xFD8
 24536                           tosu	equ	0xFFF
 24537                           tosh	equ	0xFFE
 24538                           tosl	equ	0xFFD
 24539                           pclatu	equ	0xFFB
 24540                           pclath	equ	0xFFA
 24541                           tblptru	equ	0xFF8
 24542                           tblptrh	equ	0xFF7
 24543                           tblptrl	equ	0xFF6
 24544                           tablat	equ	0xFF5
 24545                           prodh	equ	0xFF4
 24546                           prodl	equ	0xFF3
 24547                           intcon	equ	0xFF2
 24548                           indf0	equ	0xFEF
 24549                           postinc0	equ	0xFEE
 24550                           plusw0	equ	0xFEB
 24551                           fsr0h	equ	0xFEA
 24552                           fsr0l	equ	0xFE9
 24553                           wreg	equ	0xFE8
 24554                           indf1	equ	0xFE7
 24555                           postdec1	equ	0xFE5
 24556                           fsr1h	equ	0xFE2
 24557                           fsr1l	equ	0xFE1
 24558                           indf2	equ	0xFDF
 24559                           postinc2	equ	0xFDE
 24560                           postdec2	equ	0xFDD
 24561                           plusw2	equ	0xFDB
 24562                           fsr2h	equ	0xFDA
 24563                           fsr2l	equ	0xFD9
 24564                           status	equ	0xFD8
 24565                           
 24566                           	psect	text144
 24567  000000                     __ptext144:
 24568                           	opt stack 0
 24569                           tosu	equ	0xFFF
 24570                           tosh	equ	0xFFE
 24571                           tosl	equ	0xFFD
 24572                           pclatu	equ	0xFFB
 24573                           pclath	equ	0xFFA
 24574                           tblptru	equ	0xFF8
 24575                           tblptrh	equ	0xFF7
 24576                           tblptrl	equ	0xFF6
 24577                           tablat	equ	0xFF5
 24578                           prodh	equ	0xFF4
 24579                           prodl	equ	0xFF3
 24580                           intcon	equ	0xFF2
 24581                           indf0	equ	0xFEF
 24582                           postinc0	equ	0xFEE
 24583                           plusw0	equ	0xFEB
 24584                           fsr0h	equ	0xFEA
 24585                           fsr0l	equ	0xFE9
 24586                           wreg	equ	0xFE8
 24587                           indf1	equ	0xFE7
 24588                           postdec1	equ	0xFE5
 24589                           fsr1h	equ	0xFE2
 24590                           fsr1l	equ	0xFE1
 24591                           indf2	equ	0xFDF
 24592                           postinc2	equ	0xFDE
 24593                           postdec2	equ	0xFDD
 24594                           plusw2	equ	0xFDB
 24595                           fsr2h	equ	0xFDA
 24596                           fsr2l	equ	0xFD9
 24597                           status	equ	0xFD8
 24598                           
 24599                           	psect	rparam
 24600  0000                     tosu	equ	0xFFF
 24601                           tosh	equ	0xFFE
 24602                           tosl	equ	0xFFD
 24603                           pclatu	equ	0xFFB
 24604                           pclath	equ	0xFFA
 24605                           tblptru	equ	0xFF8
 24606                           tblptrh	equ	0xFF7
 24607                           tblptrl	equ	0xFF6
 24608                           tablat	equ	0xFF5
 24609                           prodh	equ	0xFF4
 24610                           prodl	equ	0xFF3
 24611                           intcon	equ	0xFF2
 24612                           indf0	equ	0xFEF
 24613                           postinc0	equ	0xFEE
 24614                           plusw0	equ	0xFEB
 24615                           fsr0h	equ	0xFEA
 24616                           fsr0l	equ	0xFE9
 24617                           wreg	equ	0xFE8
 24618                           indf1	equ	0xFE7
 24619                           postdec1	equ	0xFE5
 24620                           fsr1h	equ	0xFE2
 24621                           fsr1l	equ	0xFE1
 24622                           indf2	equ	0xFDF
 24623                           postinc2	equ	0xFDE
 24624                           postdec2	equ	0xFDD
 24625                           plusw2	equ	0xFDB
 24626                           fsr2h	equ	0xFDA
 24627                           fsr2l	equ	0xFD9
 24628                           status	equ	0xFD8
 24629                           
 24630                           	psect	temp
 24631  000051                     btemp:
 24632                           	opt stack 0
 24633  000051                     	ds	1
 24634  0000                     int$flags	set	btemp
 24635  0000                     wtemp6	set	btemp+1
 24636                           tosu	equ	0xFFF
 24637                           tosh	equ	0xFFE
 24638                           tosl	equ	0xFFD
 24639                           pclatu	equ	0xFFB
 24640                           pclath	equ	0xFFA
 24641                           tblptru	equ	0xFF8
 24642                           tblptrh	equ	0xFF7
 24643                           tblptrl	equ	0xFF6
 24644                           tablat	equ	0xFF5
 24645                           prodh	equ	0xFF4
 24646                           prodl	equ	0xFF3
 24647                           intcon	equ	0xFF2
 24648                           indf0	equ	0xFEF
 24649                           postinc0	equ	0xFEE
 24650                           plusw0	equ	0xFEB
 24651                           fsr0h	equ	0xFEA
 24652                           fsr0l	equ	0xFE9
 24653                           wreg	equ	0xFE8
 24654                           indf1	equ	0xFE7
 24655                           postdec1	equ	0xFE5
 24656                           fsr1h	equ	0xFE2
 24657                           fsr1l	equ	0xFE1
 24658                           indf2	equ	0xFDF
 24659                           postinc2	equ	0xFDE
 24660                           postdec2	equ	0xFDD
 24661                           plusw2	equ	0xFDB
 24662                           fsr2h	equ	0xFDA
 24663                           fsr2l	equ	0xFD9
 24664                           status	equ	0xFD8


Data Sizes:
    Strings     137
    Constant    732
    Data        29
    BSS         682
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     67     160
    BANK1           256     19     227
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_12(CODE[24]), STR_11(CODE[24]), STR_10(CODE[24]), STR_9(CODE[15]), 
		 -> STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[14]), STR_5(CODE[8]), 
		 -> STR_4(CODE[12]), STR_3(CODE[15]), STR_2(CODE[3]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _setMode->_continuousMode
    _displayText->_displayMode
    _displaySID->_printf
    _displayMode->_getMode
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 2919394
                                             13 BANK1      6     6      0
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                        _displayText
                         _initialise
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _setMode                                             10     4      6 1573931
                                             54 BANK0     10     4      6
                     _continuousMode
                            _getMode
                           _nullMode
                       _positionMode
                           _stepMode
 ---------------------------------------------------------------------------------
 (2) _stepMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _positionMode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nullMode                                             0     0      0  364928
                     _Console_Render
                        _displayText
                             _printf
 ---------------------------------------------------------------------------------
 (2) _continuousMode                                       8     8      0  940167
                                             46 BANK0      8     8      0
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                         _LED_Toggle
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
                         _Motor_Move
                        _Motor_Speed
                        _displayText
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _displayText                                          0     0      0  323485
                     _Console_Render
                        _displayMode
                         _displaySID
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displaySID                                           0     0      0    6603
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displayMode                                          4     4      0  275439
                                             42 BANK0      4     4      0
              _Console_SetForecolour
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    6116
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (5) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (6) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (8) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (7) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _getMode                                              6     4      2  268802
                                             36 BANK0      6     4      2
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _HMI_Poll                                             0     0      0  257110
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (7) _Button_Poll                                          9     6      3  257110
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (7) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (8) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_UpButton                                   1     1      0   36892
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DownButton                                 1     1      0   36892
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (10) _itos                                               10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (11) _reverse                                             7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) _HMI_SetSegments                                     5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (11) _ToSegment                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (8) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_SetForecolour                                2     0      2     487
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (5) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (6) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    3535
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4     611
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0  990596
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      3     0      3
                                              0 BANK1      3     3      0
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (6) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (7) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (8) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (8) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (9) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (10) _Port_TogglePin                                      4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (11) _Port_SetPin                                         5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (12) _Byte_SetBit                                         7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (12) _Word_GetPair                                        3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (13) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (14) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (16) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (21) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (19) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (18) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (19) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _displayText
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _displayMode
       _Console_SetForecolour
       _getMode
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _displaySID
       _Console_SetForecolour
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _initialise
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _setMode
     _continuousMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Console_SetForecolour
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _LED_Toggle *
         _Port_TogglePin
           _Port_GetPin
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
       _Motor_Move *
         _Timer0_Start
       _Motor_Speed *
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       _displayText *
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _getMode *
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _getMode
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
     _nullMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _displayText
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _positionMode
     _stepMode

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      E3       7       88.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     43      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     219      12        0.0%
DATA                 0      0     345       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Aug 11 13:14:39 2017

                   i2_Timer0_Stop 4AC4                  SPI_Init@pChannel 00E3  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 2468  
                               _A 004C                                 l8 2692  
                               _a 004D                                 _i 003A  
                               _j 0039                                 _k 0037  
                               _l 004F                                 _u 0038  
                               _w 0050                      ?_displayMode 0001  
                    ?_displayText 0001                                l11 1F9A  
                              l12 1F84                                l90 1ED0  
                              l85 1DCC                                l87 1E3A  
                              l89 1EA6                                _Hz 00FB  
                    ___awdiv@sign 00B7               ___wmul@multiplicand 00B4  
                   _HMI_DIPSwitch 4928                LCD_DrawField@pSize 00CA  
              LCD_DrawField@count 00D0                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 4A72                               l120 33D0  
                             l121 33E6                               l122 33FC  
                             l220 3D24                               l117 3412  
                             l221 3CE8                               l118 33BA  
                             l230 3FCC                               l222 3D34  
                             l223 3D06                       ?_LED_Toggle 0001  
                             l234 415E                               l235 412E  
                             l227 3FE8                               l403 1BE0  
                             l412 172A                               l228 3FB0  
                             l340 2FE0                               l404 1B80  
                             l421 16BE                               l413 15C0  
                             l237 4146                               l341 2FEE  
                             l405 1C10                     ??_Console_Tab 00BA  
                             l414 1746                               l430 28D6  
                             l350 30E8                               l342 2FFC  
                             l510 0F7C                               l406 1B98  
                             l415 15E6                               l351 3078  
                             l343 300A                               l511 108C  
                             l407 1BB0                               l183 319C  
                             l600 000C                               l432 2900  
                             l344 3018                               l512 0F9E  
                             l408 1BC8                               l184 3176  
                             l417 1652                               l601 01A0  
                             l433 2930                               l353 3086  
                             l337 3042                               l345 3026  
                             l610 0228                               l602 003E  
                             l354 3094                               l346 3034  
                             l338 2FD2                               l370 2F72  
                             l611 0276                               l603 01B2  
                             l427 295A                               l355 30A2  
                             l363 2F9C                               l371 2F80  
                             l531 0774                       ?_HMI_GetBar 0001  
                             l612 02C4                               l604 00EC  
                             l356 30B0                               l372 2F8E  
                             l364 2F2C                               l532 0798  
                             l516 0FE6                               l357 30BE  
                             l509 1070                               l614 03A6  
                             l358 30CC                               l366 2F3A  
                             l526 07B8                               l615 039E  
                             l607 0312                               l359 30DA  
                             l367 2F48                               l519 102E  
                             l616 03B8                               l608 01DA  
                             l368 2F56                               l528 07D6  
                             l393 3E52                               l617 03A2  
                             l609 0330                               l369 2F64  
                             l529 0754                               l483 0DDC  
                             l732 3354                               l476 0EB4  
                             l900 0B54                               l733 3348  
                             l389 3BB0                               l477 0D26  
                             l397 4122                               l901 0B58  
                             l726 2CA0                               l478 0ED0  
                             l486 0E48                               l654 4718  
                             l910 0B7C                               l902 0B5C  
                             l727 2C94                               l479 0D70  
                             l655 4710                               l911 0B80  
                             l903 0B60                               l824 3AE4  
                             l832 3F0A                               l912 0B84  
                             l904 0B64                               l673 45FA  
                             l657 4714                               l681 3A88  
                             l913 0B88                               l905 0B68  
                             l921 3A58                               l914 0B8C  
                             l906 0B6C                               l922 3A24  
                             l930 25A6                               l819 36DA  
                             l915 0B90                               l907 0B70  
                             l684 3A9E                               l916 0B94  
                             l908 0B74                               l860 0AB4  
                             l781 43AA                               l597 001A  
                             l853 0B9C                               l917 0B98  
                             l909 0B78                               l861 0AB8  
                             l598 0002                               l678 3AC4  
                             l686 3AAE                               l870 0ADC  
                             l862 0ABC                               l854 0AA0  
                             l599 002A                               l679 3A78  
                             l871 0AE0                               l863 0AC0  
                             l776 41E6                               l880 0B04  
                             l872 0AE4                               l864 0AC4  
                             l856 0AA4                               l928 2626  
                             l881 0B08                               l873 0AE8  
                             l865 0AC8                               l857 0AA8  
                             l929 25F6                               l890 0B2C  
                             l882 0B0C                               l874 0AEC  
                             l866 0ACC                               l858 0AAC  
                             l891 0B30                               l883 0B10  
                             l875 0AF0                               l867 0AD0  
                             l859 0AB0                               l892 0B34  
                             l884 0B14                               l876 0AF4  
                             l868 0AD4                               l893 0B38  
                             l885 0B18                               l877 0AF8  
                             l869 0AD8                               l894 0B3C  
                             l886 0B1C                               l878 0AFC  
                             l990 34DC                               l895 0B40  
                             l887 0B20                               l879 0B00  
                             l983 323A                               l976 35F4  
                             l896 0B44                               l888 0B24  
                             l992 34EC                               l984 31BE  
                             l897 0B48                               l889 0B28  
                             l985 3236                               l978 3604  
                             l898 0B4C                               l899 0B50  
                             l997 3DB8                               l999 3DDC  
                             _PR2 000FCB                       main@Stepper 01D5  
                             _val 006D                       ?_HMI_SetBar 0001  
              ??_Event_TestButton 00CB                      _Word_GetPair 437E  
                             prod 000FF3               MXK_SwitchTo@pModule 00B9  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 00C2                Console_MakeField@y 00C3  
                    Console_Tab@c 00C1                      Console_Tab@i 00C0  
             LCD_DrawField@pField 00C4                      Console_Tab@t 00BF  
    __end_of_Event_HMI_LeftButton 3EB0                        i2_delay_us 42C2  
            Port_Set@TypeRequired 00D4                 Console_FormFeed@x 00B4  
               Console_FormFeed@y 00B5               LCD_DrawField@pPoint 00C6  
    __end_of_Event_HMI_DownButton 4578                    ?_LCD_DrawField 00C4  
           Port_SetPinType@Output 00DC                   Port_SetPin@Type 00C5  
                 Port_SetPin@pPin 00C3                     ?_Byte_GetPair 00BB  
                 __end_of_LED_Set 3FFA           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 2E7C                      _Word_SetPair 41B6  
                            l1000 3DF8                              l1010 29CA  
                            l1004 3BEA                     ?_Byte_GetZone 00B2  
                            l1005 3C18                              l1040 1774  
                            l1009 29D6                              l1041 177A  
                            l1210 2C30                              l1042 1780  
                            l1043 1786                              l1212 2C5A  
                            l2020 357E                              l1036 18D0  
                            l1044 178C                              l2100 1948  
                            l1213 2C40                              l1045 1792  
                            l1037 176E                              l2101 19B6  
                            l1062 1338                              l2022 358A  
                            l2007 3D6C                              l1063 1366  
                            l1215 2C6C                              l2023 3596  
                            l1047 1838                              l2031 329C  
                            l1056 11C8                              l1208 2BC0  
                            l2024 35A2                              l2032 32AE  
                            l1161 15A6                              l1057 138E  
                            l1209 2C14                              l2105 1A0C  
                            l2033 32C0                              l1082 2780  
                            l1058 11D0                              l2106 1A6A  
                            l2050 0A3C                              l1059 11FA  
                            l2019 35AE                              l2107 1A12  
                            l2043 08FE                              l1084 2788  
                            l2028 32D2                              l1077 2750  
                            l2029 328A                              l2037 0A8C  
                            l2038 07FA                              l1079 2760  
                            l2047 094C                              l2039 087C  
                            l2048 0996                              l2064 3F80  
                            l2049 0A7C                              l2065 3F68  
                            l2091 1914                              l2067 3F6E  
                            l2075 43FC                              l2092 1928  
                            l2068 3F74                              l2093 1952  
                            l2069 3F7A                              l1640 23EE  
                            l2281 2A96                              l2514 3708  
                            l2282 2A8A                              l2098 1986  
                            l1635 2456                              l2515 36FC  
                            l2099 1930                              l1732 434C  
                            l1740 427E                              l1636 244C  
                            l2524 3CA0                              l1900 4570  
                            l2461 2B36                              l1637 23CC  
                            l2525 3C94                              l2285 2ACC  
                            l2462 2B26                              l1734 437A  
                            l1638 23AE                              l2518 373E  
                            l2286 2ADA                              l2278 2A56  
                            l1743 48F2                              l1639 240A  
                            l2519 374C                              l2287 2AEE  
                            l2279 2A6C                              l2528 3CCA  
                            l2465 2B90                              l2529 3CD8  
                            l2466 2BA2                              l1738 4256  
                            l1835 224E                              l1836 226E  
                            l1792 20E8                              l1793 20F6  
                            l1795 2100                              l1891 4238  
                            l1884 3EA8                              l1892 4228  
                            l1885 3E8E                              l1878 43F0  
                            l1887 3EA0                              l1896 45A0  
                  ??_Console_Init 00B2             Port_SetPinType@pInput 00D8  
                            STR_1 FF8D                              STR_2 FFFB  
                            STR_3 FFA3                              STR_4 FFDC  
                            STR_5 FFF3                              STR_6 FFC1  
                            STR_7 FFCF                              STR_8 FFE8  
                            STR_9 FFB2                              _DIST 00F9  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 3118                              u7200 4534  
                            u7220 2B3C                              u8020 238C  
                            u7205 452E                              u8030 23A0  
                            u8120 365C                              u8040 23E0  
                            u7320 383A                              _PIR1 000F9E  
                            u6514 3C38                              u7410 22BA  
                            u6530 41A4                              u8050 1DCA  
                            u7138 206A                              _PIR2 000FA1  
                            u6515 3C32                              _PIR3 000FA4  
                            u6524 3C6A                              u7500 27D6  
                            u6525 3C64                              u6470 331E  
                            u6630 2612                              u8310 08D4  
                            u6535 419E                              u7280 3B22  
                            u7440 3F42               __end_of_GetPortTRIS 2FCC  
                            u6560 370E                              u7088 1F2E  
                            u8240 0854                              u8208 0802  
                            u7089 1F42                              u8209 0816  
                            u6490 3384                              u8090 1EDE  
                            u6740 40CE                              u8228 0824  
                            u6477 3314                              u6805 4A0A  
                            u8229 0838                              u6910 3674  
                            u6806 4A0E                              u6590 3CA6  
                            u6814 348C                              u6750 3BE6  
                            u7550 19F8                              u6495 337E  
                            u6815 3486                              u6680 3530  
                            u6760 3C10                              u8408 0976  
                            u8328 08DC                              u7705 0720  
                            u6745 40C8                              u8409 098A  
                            u8329 08F0                              u7490 27CA  
                            u6690 3536                              u6850 2A9C  
                            u7570 1A76                              u8258 085C  
                            u7395 2206                              u7635 044C  
                            u8259 0870                              u8348 0906  
                            u7645 0464                              u8349 091A  
                            u7830 2154                              u8278 0884  
                            u7655 047C                              u6775 49F4  
                            u8279 0898                              u6776 49F8  
                            u8368 0928                              u7665 049E  
                            u6785 49DE                              u8369 093C  
                            u9361 4416                              u6954 2CDC  
                            u7770 1376                              u6786 49E2  
                            u8298 08A6                              u6955 2CD6  
                            u7675 061E                              u6795 49C8  
                            u8299 08BA                              u6964 2D0E  
                            u9268 4316                              u6796 49CC  
                            u8388 0954                              u6965 2D08  
                            u6885 4A1E                              u9269 432C  
                            u7685 069C                              u8389 0968  
                            u6886 4A20                              u7950 3F02  
                            u7598 355A                              u7695 06DE  
                            u7599 356E                              u7928 26FE  
                            _SPI1 0164                              u7980 1C16  
                            _SPI2 016F                              _TMR0 000FD6  
                            _gISR 0029                Event_DIPSwitch@Bar 00CC  
                   ??_Byte_GetBit 00B5                SPI_MaxSpeed@pInput 00C1  
                   ?_Byte_SetByte 00B2                     ?_Byte_SetPair 00BD  
                 __end_of_SPI_DCS 4608                              _main 43F8  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 00BD  
                            _itos 2568                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00B2                              btemp 0051  
                            _zero 004E                     ??_Byte_SetBit 00B6  
                    ?_HMI_SetLeft 0001                __size_of_LCD_Reset 0050  
                    ?_HMI_SetDown 0001                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 00B7  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                 Timer0_Init@DIVIDE 00C9  
                 ?_SPI_DisableISR 00B2                  Motor_Move@pMotor 00B5  
             HMI_SetButton@pValue 00B8                     Console_Init@x 00B4  
                   Console_Init@y 00B5                    ?i2_Timer0_Stop 0001  
              __size_of_HMI_SetUp 0016                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FF67  
            Set_Rotation@rotation 00B8            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A      __size_of_Console_ClearCursor 0040  
                __end_of_LCD_Fill 3F08                  __end_of_LCD_Init 1F1C  
                 getMode@dipState 00DA                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3D44  
                   ??_Button_Init 00ED           GetPortProperties@pInput 00B4  
                   ??_Button_Poll 00D0                             l11000 3F0A  
                           l11002 3F1C                  __end_of_HMI_Init 15A8  
                           l11020 2746                             l10240 2612  
                           l11026 2756                             l10314 2C5A  
                           l10272 34E2                             l11080 19BC  
                           l10602 3EA0                             l10266 34D2  
                           l11414 11F0                             l11460 20E8  
                           l11634 3ED8                             l11804 35FA  
                           l11638 3EE6                             l10864 3AE4  
                           l10872 3B22                             l10962 224E  
                           l11826 157A                             l10866 3AF6  
                           l11674 1B76                             l10882 3810  
                           l10886 381E                             l11950 08D4  
                           l11942 087C                             l11776 1E3A  
                           l11786 1EDE                             l11798 35EA  
                __end_of_HMI_Poll 399A                             _I2C1T 0040  
                           _I2C2T 01B6                             ?_main 0001  
                 __end_of___awdiv 2AF8                             ?_itos 00BE  
                           STR_10 FF75                             STR_11 FF75  
                           STR_12 FF75                   _Event_DIPSwitch 4638  
                 __end_of___lldiv 2BB4           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 00B4                             _INDEX 0079  
                 __end_of___lwdiv 3756                             _MASKS FD75  
                 __end_of___lwmod 3CE2                             i2l430 2E94  
                           i2l432 2EBA                             i2l433 2EE4  
                           i2l427 2F0A                             i2l732 37A2  
                           i2l733 379C                             i2l832 42C4  
                           i2l781 4626                   ___awdiv@counter 00B6  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                           _HzInc FD85                             _HzOld 002F  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00C8  
                 __end_of_getMode 35D8                    __CFG_FCMEN$OFF 000000  
                           _PortA 01A2                             _PortB 0198  
                           _PortC 0091                             _PortD 0087  
                           _PortE 007D                             _PortF 01AC  
                           _PortG 018E           __end_of_Port_SetPinType 1768  
                 _ADC_Initialised 003C                    ??_Byte_GetPair 00BE  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 00C7  
                 __end_of_dpowers FD75                    ??_Byte_GetZone 00B7  
                  Button_Poll@Pin 00D5          __size_of_Set_Addr_Window 00AA  
             __end_of_Console_Tab 2A3A                  __end_of_MXK_Init 1DAA  
            i2Byte_GetPair@pInput 000A                             _putch 4A22  
                __end_of_SPI_Init 041E                  __end_of_SPI_Send 3AE2  
                 __end_of_setMode 3FAA             __end_ofi2_MXK_Release 4AD0  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 3A76                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 00B5                    ??_Byte_SetPair 00C1  
                  ??_Byte_SetQuad 00C1                             plusw0 000FEB  
                           plusw2 000FDB                    ??_Byte_SetZone 00B8  
                   ?_HMI_SetRight 0001                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 399A  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 4826               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
     __size_of_Port_CheckPairType 006A               __size_of_HMI_SetBar 000A  
                 __initialization 2D24               __end_of_Byte_GetBit 4546  
                    __end_of_main 4432                      __end_of_itos 2640  
            HMI_SetButton@reindex 00B4                      SPI_Send9@dat 0035  
             __end_of_Byte_SetBit 3C80                  __end_of_InitList FD4B  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 4A22  
     __size_of_Port_CheckPortType 0048                            ??_main 00F5  
                          ??_itos 00C2           _Console_MakeField$10974 00C0  
                   __activetblptr 000003                 Port_SetPin@pInput 00C1  
               __end_of_LCD_Reset 404A                 Port_SetPin@pValue 00C4  
                       ??_LED_Set 00C7                 _MXK_InitDIPSwitch 4880  
               GetPortPORT@pInput 00B4            Port_CheckPairType@Pin1 00DC  
          Port_CheckPairType@Pin2 00DD                 __end_of_LCD_Write 47A4  
                     _GetPortPORT 3072                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 2F26                   ??_LCD_DrawField 00CE  
      __end_of_PortProperty_Valid 36DE                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0066  
             __end_of_Button_Init 2714               __end_of_Button_Poll 2082  
               Word_GetPair@pPair 00C0           LCD_FillRectangle@pPoint 00BD  
               __end_of_HMI_SetUp 49CE                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 3430                         ??_SPI_DCS 00B4  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 4692            Port_SetQuadType@Output 00EC  
                          _ANCON0 000FC1                  ___awdiv@dividend 00B2  
                  _continuousMode 07D8                            ?_putch 0001  
                ??_Console_Render 00D5                     ToSegment@pCHR 00B2  
           _Console_SetForecolour 4A9E                  _Console_FormFeed 34C0  
          Port_SetQuadType@pInput 00E8                            i2l1640 2506  
                          i2l1635 2556                            i2l1740 450E  
                          i2l1636 254C                            i2l1637 24E4  
                          i2l1638 24CE                    __CFG_WDTEN$OFF 000000  
                          i2l1639 251A                            i2l1738 44EE  
                          i2l1598 145E                            i2l8170 42C4  
                          i2l8172 42D4                    ??_HMI_SetRight 00B2  
          __end_of_LCD_Word_Write 4844                    _Timer0_Restart 4A66  
             ??_MXK_InitDIPSwitch 00ED                    i2_MXK_SwitchTo 44DC  
                 Byte_GetBit@pBit 00B4      Console_SetForecolour@pColour 00B2  
                      _Reset_High 4862                Console_Render@temp 00D7  
                  ??_HMI_UpSwitch 00B8                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 00C9                  __end_of_delay_ms 3B4C  
                    LED_Init@pLED 00DF                  __end_of_delay_us 3F5A  
                   ??_Timer0_Init 00C3                     ??_Timer2_Init 00C3  
                   ??_Timer0_Stop 00B2                        _Timer0_ISR 475C  
        __size_of_Console_NewLine 00A2                 Timer2_Init@DIVIDE 00CC  
                  __CFG_XINST$OFF 000000          __size_of_HMI_InitButtons 0004  
                      _Motor_Init 27E4       __size_of_Event_HMI_UpButton 0030  
                      _Motor_Move 446C                     ??_Motor_Speed 00D1  
                      _Motor_Step 2342              _Event_HMI_LeftButton 3E58  
         __end_of_Event_DIPSwitch 4666    __size_of_Event_HMI_RightButton 0044  
                          ___wmul 44A6                   ??_HMI_DIPSwitch 00B8  
                       ??___awdiv 00B6                    __CFG_STVREN$ON 000000  
                          _change 00FF     __end_of_Event_HMI_RightButton 4240  
                          _lMotor 006F                         ??___lldiv 00BA  
                          _lQueue 0068                        _TestButton 0184  
            _Event_HMI_DownButton 4546                         ??___lwdiv 00B6  
              __size_of_ToSegment 0284                         ??___lwmod 00BD  
        __end_of_Port_SetQuadType 0F74          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 0033              __end_of_Console_Init 3662  
               GetPortTRIS@pInput 00B4                __size_of_Reset_Low 001E  
                          clear_0 2D8C                            clear_1 2D9E  
                          clear_2 2DAA                            clear_3 2DB6  
                          clear_4 2DC2                  ___awdiv@quotient 00B8  
                      Port_Init@i 01CA                 __end_of_MXK_Queue 4A4C  
      __end_ofHMI_SetButton@F7211 FD82                         ??_getMode 00D8  
                          _printf 1906              __size_of_displayMode 009E  
            __size_of_displayText 0028         __end_of_MXK_InitDIPSwitch 489E  
                  HMI_SetButton@v 00B9            HMI_SetSegments@pString 00B3  
                     _Console_Tab 2978               LCD_Word_Write@value 00B7  
                    __pdataCOMRAM 0047                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00B5          Port_CheckPortType@Output 00EB  
                __end_of_nullMode 446C                   ??i2_Port_SetPin 0014  
                       ??_setMode 00EE                      __mediumconst FC98  
     __end_ofTimer2_Init@PRESCALE FD85          Port_CheckPortType@pDrive 00EA  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 00E8  
                   ??_Port_SetPin 00C5                         ??_reverse 00B6  
          __end_of_continuousMode 0A9A                  __end_of_stepMode 1406  
           Console_MakeField@Fill 0200                  ?_Port_SetPinType 00D8  
                          putch@c 00C6                 Motor_Speed@pMotor 00CD  
                  ?_HMI_SetNumber 00C8                    i2_Word_GetPair 4608  
         __end_of_Configure_GPIOs 3A0A                  ??_MXK_TestButton 00B8  
          __end_of_Timer0_Restart 4A72                     Set_Rotation@m 00B7  
         continuousMode@direction 00E4                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 4512                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00CB                   ?_LCD_Word_Write 00B7  
                      __accesstop 0060           __end_of__initialization 2DC8  
                       ?_LCD_Fill 00BB                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00E4                       _Byte_GetBit 4512  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 4A7E  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00BA  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
              continuousMode@mode 00E2                       _Byte_SetBit 3C1C  
                   __end_of_MASKS FD7E                    _PortA_Property FF73  
                       LCD_Fill@i 00BD                         LCD_Fill@j 00BE  
                       LCD_Init@i 00E9                     __end_of_HzInc FD87  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FF71               __size_ofi2_delay_us 0040  
                    __pidataBANK0 4A7E                      __pidataBANK1 4AA8  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 48DA                   Console_Render@x 00DC  
                 Console_Render@y 00DD               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD4B  
            __end_of_Byte_GetZone 3398       Event_HMI_RightButton@pState 00CB  
                  _PortC_Property FF6F               __end_of_Timer0_Init 21E2  
                   __end_of_putch 4A30                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 2342               __end_of_Timer0_Stop 4AC4  
                       ?_SPI_Init 00DF                         ?_SPI_Send 00B2  
                     _Button_Init 2640                 Port_SetType@pType 00EE  
                     _Button_Poll 1F1C              __end_of_Byte_SetByte 4A3E  
            __end_of_Byte_SetPair 47C6                    _HMI_LeftSwitch 4988  
                  _PortD_Property FF6D              __end_of_Byte_SetQuad 47E8  
                    ??_LED_Toggle 00CA                      ??_HMI_GetBar 00B2  
            __end_of_Byte_SetZone 2D24               __end_of_Motor_Speed 46E6  
                  _HMI_DownSwitch 4940                     SPI_Send@pData 00B4  
           __end_of_MXK_DIPSwitch 4928                      ??_HMI_SetBar 00B2  
                  _PortE_Property FF6B          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 4638                   ?_continuousMode 0001  
                  _PortF_Property FF69           Port_CheckQuadType@Pair1 00E5  
         Port_CheckQuadType@Pair2 00E6          MXK_BlockSwitchTo@pModule 00B9  
          ?_Console_SetForecolour 00B2                 _Console_Backspace 3DA2  
                 ?_Timer0_Restart 0001                           ??_putch 00C6  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 4282  
               __end_of_ToSegment 0D1E                    _PortG_Property FF67  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 41B6  
         Port_CheckQuadType@pQuad 00E3                   reverse@iterator 00B7  
                ??_SPI_DisableISR 00B4                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 4862  
       __size_of_Event_TestButton 003C           __size_of_Port_TogglePin 0030  
                      ??_LCD_Fill 00BD                        ??_LCD_Init 00E7  
             __end_of_Port_SetPin 2978            __end_of_PortA_Property FF75  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 00B2  
                      ??_LED_Init 00DF                Byte_SetByte@pValue 00B4  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
                   ?_Timer0_Clear 0001                        ??_HMI_Init 00ED  
                      ??_HMI_Poll 00D6                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00DF            __end_of_PortB_Property FF73  
                   ?_Timer0_Start 00B2                 __end_of_Port_Init 1C2A  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00DA  
              __end_of_LED_Toggle 4170                __end_of_HMI_GetBar 4ABE  
        LCD_FillRectangle@pColour 00BB               ??_Console_Backspace 00B4  
               Set_Addr_Window@xe 00B8                 Set_Addr_Window@ye 00B9  
               Set_Addr_Window@xs 00BA                 Set_Addr_Window@ys 00B7  
                     ?_Motor_Init 00DF                Byte_SetPair@pInput 00BD  
                     ?_Motor_Move 00B5                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 00C0                __end_of_HMI_SetBar 4A9E  
          __end_of_PortC_Property FF71                Word_GetPair@pInput 00BE  
                  ??_Set_Rotation 00B7                         ?_Port_Set 00C1  
                         ?___wmul 00B2                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 00B7      __size_of_Console_ResetCursor 001E  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 49A0  
          __end_of_PortD_Property FF6F                           _ADC_AN0 00A5  
                         _ADC_AN1 00A0                           _ADC_AN2 009B  
                         _ADC_AN3 01C3        Event_HMI_DownButton@pState 00CB  
                      ??_MXK_Init 00F5                 Port_GetPin@pInput 00B2  
               _Console_MakeField 2714                 ??_Console_NewLine 00B2  
          __end_of_HMI_DownSwitch 4958                        ??_SPI_Init 00E5  
          Event_TestButton@pState 00CB                       setMode@mode 00F0  
                      ??_SPI_Send 00B5              __end_of_HMI_SetRight 49E4  
                         ?_printf 00C7                 ??_HMI_InitButtons 00B2  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FF6D  
             Console_Render@F6956 01DB                ?_Console_MakeField 00B7  
                         _COUNTER 0031                   ??_HMI_SetButton 00B2  
            __end_of_HMI_UpSwitch 4970                           _LED_Set 3FAA  
         _Console_IncrementCursor 3BB6            __end_of_PortF_Property FF6B  
                     _gBackcolour 0073                   ??_HMI_SetNumber 00CA  
                       _I2C1_Done 0127                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0124                         _I2C1_More 0121  
                       _I2C2_More 011E                         ?_delay_ms 00B2  
       __end_of_Console_Backspace 3DFE                         ?_delay_us 00B2  
      __end_of_MXK_InitTestButton 48BC                           _SSP1ADD 000FC8  
                      _displaySID 47E8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF69  
             ??_Console_MakeField 00B9                           _SPI_DCS 45D8  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
            i2Byte_GetZone@Offset 0008                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 00B2  
               Event_TestButton@j 0075                        ??_Mode_Set 00B2  
                  ??_Timer2_Clear 00B2                           _Font5x7 FD87  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 00B5              SPI_DisableISR@pInput 00B2  
                   ?_Port_GetQuad 00B2                   Byte_SetBit@pBit 00B4  
            Port_TogglePin@pInput 00C6             __end_ofi2_Byte_SetBit 4096  
          ??_Event_HMI_LeftButton 00CB                           __Hparam 0000  
               Port_GetQuad@pQuad 00B4                       _Timer0_Init 2082  
                     _Timer2_Init 21E2                           __Lparam 0000  
                     _Timer0_Stop 4ABE             __size_of_Console_Init 008A  
                         OutSeg@a 003D   __end_ofPortProperty_Valid@F6830 FD6B  
          ??_Event_HMI_DownButton 00CB                     LCD_Write@mode 00B5  
                       ?_nullMode 0001                        ??_Port_Set 00C4  
       __end_of_Console_MakeField 27E4                 _Console_PrintChar 1768  
                     _Motor_Speed 46BC                           _Stepper 01BD  
                   ?_Port_SetType 00EC                           _gCursor 0047  
                         ___awdiv 2A3A             ??_Console_ClearCursor 00B2  
                         _lBuffer 0246                           ___lldiv 2AF8  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                         ___lwdiv 36DE                           ___lwmod 3C80  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 354E  
              ?_Console_PrintChar 0001                           __pcinit 2D24  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                      _initialise 3D44                           _getMode 354E  
                         __ptext0 43F8                           __ptext1 3F5A  
                         __ptext2 1404                           __ptext3 4AD4  
                         __ptext4 4432                           __ptext5 07D8  
                         __ptext6 46E6                           __ptext7 47E8  
                         __ptext8 325E                           __ptext9 1906  
                 __size_of_printf 0192                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD6B  
                       _T2CONbits 000FCA                     LED_Set@pValue 00C6  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 00CB  
                    ?_GetPortPORT 00B2                      ?_GetPortTRIS 00B2  
             ??_Console_PrintChar 00C2                       _Port_GetPin 4170  
                         _setMode 3F5A                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00AE               LCD_DrawRectangle@p4 00AA  
                    ??i2_delay_us 0003                        ??_delay_ms 00B4  
                      ??_delay_us 00B4                           _reverse 3A0A  
                       _DIPSwitch 017A               __size_of_Timer0_ISR 0026  
                     _Port_SetPin 28B4                    LCD_DrawField@i 00D4  
                       _LCD_Reset 3FFA               __size_of_Motor_Init 00D0  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0126  
                       _LCD_Write 4782              __size_of_MXK_Dequeue 003E  
                      delay_ms@ms 00B2              end_of_initialization 2DC8  
                      delay_us@us 00B2                 ??_HMI_SetSegments 00B5  
         Console_PrintChar@pInput 00C5                         _HMI_SetUp 49B8  
                    _Console_Init 35D8                   HMI_SetUp@pValue 00B2  
            __size_of_MXK_Release 001C        __end_of_Port_CheckPairType 3BB6  
                         itos@Out 00C6                    ??_Port_GetQuad 00B5  
              _PortProperty_Valid 3662                Byte_SetQuad@pInput 00BD  
              SPI_MinSpeed@pInput 00C1                Byte_SetQuad@pValue 00C0  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 00B6  
           __size_of_Byte_GetZone 009C                 ??_HMI_RightSwitch 00B8  
                 ___lldiv@counter 00BE         __end_of_Console_PrintChar 1906  
                      ??_nullMode 00E0                    ??_Port_SetType 00EF  
      __end_of_Port_CheckQuadType 3E58                           printf@c 00D2  
                         printf@f 00C7                    Port_Init@pPort 00F4  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 00BB                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00C1  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 4128  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 4302  
                      ??_stepMode 00B2                Button_Init@pInitIO 01CC  
           Timer0_Init@pFrequency 00BF               _Event_HMI_DIPSwitch 4666  
               ?_Port_SetQuadType 00E8                       _gForecolour 00FD  
       ??_Console_IncrementCursor 00B6            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00EC  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00B8  
           Console_Render@lCursor 00D8                         _MXK_Queue 4A3E  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00B4  
      __size_of_Console_Backspace 005C                   _Set_Addr_Window 2DD2  
                  SPI_Init@pClock 00DF                  ??_LCD_Word_Write 00B9  
                     ?_displaySID 0001             __end_of_LCD_DrawField 31BC  
                  Port_Set@pInput 00C1                    SPI_Init@pInput 00E5  
            ??_PortProperty_Valid 00C5                    Port_Set@pValue 00C3  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 3430  
                      ?_LCD_Write 00B5                      _Byte_GetPair 48BC  
              HMI_SetButton@F7211 FD7E                      _Byte_GetZone 32FC  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00D2  
               LCD_DrawField@ymax 00D3              ?_Event_HMI_DIPSwitch 0001  
                  _Port_TogglePin 45A8                        ?_HMI_SetUp 0001  
                _Event_TestButton 43BC              Port_SetPinType@Props 00DD  
             continuousMode@speed 00E6                      ?_Byte_GetBit 00B2  
         __size_ofi2_Byte_GetPair 001A                     ?_positionMode 0001  
                    _Byte_SetByte 4A30                      _Byte_SetPair 47A4  
                    _Byte_SetQuad 47C6           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2C6E              Port_SetPinType@pType 00DB  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00B2  
      __end_of_Event_HMI_UpButton 45A8                     ?_SPI_MaxSpeed 00C1  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00C1  
           __end_ofi2_Timer0_Stop 4ACA                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0072  
                   ?i2_Motor_Step 0001             __size_of_HMI_SetRight 0016  
      __size_of_Console_MakeField 00D0                     ??_displayMode 00DC  
                   ??_displayText 00E0             __size_of_HMI_UpSwitch 0018  
                  __end_of___wmul 44DC             __end_of_HMI_DIPSwitch 4940  
                   __pidataCOMRAM 4A89                       ?_initialise 0001  
           _Event_HMI_RightButton 41FC                      ?_Button_Init 01C8  
                    ?_Button_Poll 00CD                         _Bus_State 004B  
                ??_continuousMode 00E0               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 4A66  
               __size_of_MXK_Init 0180              __end_of_Timer2_Clear 4AB8  
                  __end_of_printf 1A98                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00BE  
                ??_Timer0_Restart 00B2              __end_of_Timer0_Start 475C  
         ??_Console_SetForecolour 00B4                Port_SetType@Output 00F1  
             start_initialization 2D24                        ?_MXK_Queue 00B2  
        PortProperty_Valid@Errors 00C7                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 37CC                Port_SetType@pInput 00EC  
                      HMI_Init@in 00ED               HMI_SetNumber@pInput 00C8  
           __end_ofi2_Port_SetPin 2F26            __end_of_Port_TogglePin 45D8  
                   ?_Word_SetPair 00C1                 Byte_SetBit@pInput 00B2  
                  ??_MXK_SwitchTo 00B8                 Byte_SetBit@pValue 00B5  
              ?_LCD_FillRectangle 00BB             ??_Event_HMI_DIPSwitch 00CB  
             _Console_ResetCursor 4808       PortProperty_Valid@pPinDrive 00C3  
            MXK_BlockSwitchTo@CUR 00B8          PortProperty_Valid@pInput 00C1  
                   i2_MXK_Release 4ACA                    ??_positionMode 00B2  
          LCD_FillRectangle@pSize 00C1                    SPI_Send@pInput 00B2  
                    _HMI_SetRight 49CE                      ??_Reset_High 00C6  
        __size_of_Port_SetPinType 01C0                     ??_HMI_SetLeft 00B2  
                   ??_HMI_SetDown 00B2                    ??_SPI_MaxSpeed 00C3  
           Port_SetQuadType@pQuad 00EA                         _ToSegment 0A9A  
             ??_LCD_FillRectangle 00C5             Port_SetQuadType@pType 00EB  
                 _Console_NewLine 31BC                    ??_SPI_MinSpeed 00C3  
                    _HMI_UpSwitch 4958                         _Reset_Low 4844  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 4AD0  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 019E  
                       _gCharSize 00F5                  Timer2_Init@INDEX 0077  
                       OutSeg@cur 003F                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00E3           __size_of_Console_Render 0210  
                    ??_Motor_Move 00B9                      ??_Motor_Step 00C6  
              Byte_SetZone@Offset 00BB                          ??___wmul 00B6  
             __size_of_displaySID 0020              ?_Console_ResetCursor 0001  
                       _Port_Init 1A98                       __pdataBANK0 00F5  
                     __pdataBANK1 01DB                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00B5                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B2                Byte_SetZone@pValue 00B7  
                   Mode_Set@pMode 00B2                          ??_printf 00CB  
         __end_of_Set_Addr_Window 2E7C          Port_CheckQuadType@Output 00E7  
                       _gLineSize 01DF          Port_CheckQuadType@pDrive 00E4  
                  ??_Word_GetPair 00C1          Port_CheckQuadType@pInput 00E1  
             __end_of_displayMode 32FC              __end_of_Port_GetQuad 40E0  
       __end_of_LCD_FillRectangle 3840                       __pbssBIGRAM 0246  
             __end_of_displayText 470E                          ?_LED_Set 00C6  
                     __pbssCOMRAM 0029                __end_of_Reset_High 4880  
                   __pcstackBANK0 00B2                     __pcstackBANK1 01C8  
                      itos@Length 00C4                    ??_Word_SetPair 00C5  
              __end_of_Timer0_ISR 4782              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00CB              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 119E                          ?_SPI_DCS 00B2  
                 ?_Port_TogglePin 00C6                       ??_LCD_Write 00B6  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 28B4               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 44A6                __end_of_Motor_Step 2468  
           Timer2_Init@pFrequency 00BF                    ?i2_MXK_Release 0001  
                     ??_HMI_SetUp 00B2               __size_of_initialise 005E  
        Port_CheckPairType@Output 00DE                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00DB          Port_CheckPairType@pInput 00D8  
                  reverse@tempVar 00B6                _MXK_InitTestButton 489E  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00BF  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 00BF  
                ??_HMI_LeftSwitch 00B8                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B2                     _lStepFunction 002C  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 00BF  
                ??_HMI_DownSwitch 00B8                         __pintcode 1408  
                   __pmediumconst FC98                      ?_Motor_Speed 00CD  
           ??_Console_ResetCursor 00B2                          ?___awdiv 00B2  
                       __ptext100 4128                         __ptext101 45A8  
                       __ptext110 470E                         __ptext102 28B4  
                       __ptext111 45D8                         __ptext103 4170  
                       __ptext120 47A4                         __ptext112 2640  
                       __ptext104 13AE                         __ptext121 3DFE  
                       __ptext113 4880                         __ptext105 38B4  
                       __ptext122 3B4C                         __ptext114 4AD0  
                       __ptext106 0000                         __ptext131 475C  
                       __ptext123 3662                         __ptext115 489E  
                       __ptext107 21E2                         __ptext140 44DC  
                       __ptext132 2468                         __ptext124 437E  
                       __ptext116 15A8                         __ptext108 2AF8  
                       __ptext141 42C2                         __ptext133 4AC4  
                       __ptext125 48BC                         __ptext117 3C1C  
                       __ptext109 4AB0                         __ptext142 4ACA  
                       __ptext134 4A72                         __ptext126 32FC  
                       __ptext118 0D1E                         __ptext143 4A4C  
                       __ptext135 2E7C                         __ptext127 47C6  
                       __ptext119 41B6                         __ptext144 0000  
                       __ptext136 4608                         __ptext128 2C6E  
                       __ptext137 48F6                         __ptext129 35D8  
                       __ptext138 3756                         __ptext139 404A  
                       _pShiftVal 006B               __end_of_HMI_SetLeft 49FA  
             __end_of_HMI_SetDown 4A10                          ?___lldiv 00B2  
                      ?_Port_Init 00F2              Timer0_Init@pCPUClock 00C5  
                        ?___lwdiv 00B2                          ?___lwmod 00B9  
          ?_Event_HMI_RightButton 0001               ?_MXK_InitTestButton 0001  
               __size_of_nullMode 003A                 ?_Console_FormFeed 0001  
               _GetPortProperties 2FCC                 __size_of_stepMode 0002  
                        ?_getMode 00D6       __end_ofTimer0_Init@PRESCALE FD5B  
              ??_Console_FormFeed 00B2                   _HMI_SetSegments 2BB4  
              ?_GetPortProperties 00B2                HMI_SetRight@pValue 00B2  
        __size_of_Event_DIPSwitch 002E             __size_of_Set_Rotation 0098  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00B5  
                    ?_Port_GetPin 00B2                          ?_setMode 00E8  
               HMI_SetLeft@pValue 00B2             __end_of_HMI_SetButton 34C0  
            __size_of_Console_Tab 00C2                          ?_reverse 00B2  
                    ?_Port_SetPin 00C1             __end_of_HMI_SetNumber 46BC  
                ___lwdiv@quotient 00B7                   _HMI_RightSwitch 4970  
               HMI_SetDown@pValue 00B2               ??_GetPortProperties 00B4  
         __end_of_Console_NewLine 325E              ??_MXK_InitTestButton 00DF  
              Byte_GetPair@pInput 00BB                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 4AD4                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 48F6  
                        _LCD_Fill 3EB0                          _LCD_Init 1DAA  
                  ___wmul@product 00B6                          _HMIBoard 012A  
                  i2_Byte_GetZone 3756                          _LED_Init 3CE2  
                       delay_ms@u 00B4                Button_Poll@pButton 00CD  
                       delay_us@u 00B4                          _HMI_Init 13AE  
                        _HMI_Poll 3928                MXK_Queue@pCallback 00B2  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 42C2          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00BF  
                        i2u405_40 3778                          i2u405_47 376E  
                        i2u407_40 37C0                          i2u407_45 37BC  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        i2u550_40 24C0                          i2u551_40 24F8  
                        i2u471_44 405E                          i2u471_45 405A  
                        i2u472_44 4084                          i2u472_45 4080  
                        i2u475_40 42F0                          i2u549_40 24AC  
                        i2u928_48 476E              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000     __size_of_Event_HMI_LeftButton 0058  
                HMI_SetBar@pValue 00B2                 Button_Init@pInput 01C8  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00DC                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2     __size_of_Event_HMI_DownButton 0032  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 3072                          _SSP2STAT 000F6D  
                     _displayMode 325E                      _Set_Rotation 3398  
           __size_of_Timer2_Clear 0008                       _displayText 46E6  
            __end_of_MXK_SwitchTo 4282                _Port_CheckPairType 3B4C  
                        _MXK_Init 1C2A             __size_of_Timer0_Start 0026  
                 MXK_SwitchTo@CUR 00B8                          _SPI_Init 0000  
        __end_of_Event_TestButton 43F8                          _SPI_Send 3A76  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 00B7                 ___wmul@multiplier 00B2  
            __end_of_positionMode 4AD6                 Byte_GetBit@Output 00B6  
                      printf@flag 00CC              Timer2_Init@pCPUClock 00C8  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 38B4                        printf@prec 00CD  
           Motor_Speed@pFrequency 00CF                 Byte_GetBit@pInput 00B2  
             Port_SetPinType@pPin 00DA              __size_of_Button_Poll 0166  
              _Port_CheckQuadType 3DFE                     _MXK_DIPSwitch 4910  
             ?_Port_CheckPairType 00D8              __end_of_SPI_MinSpeed 3928  
                   ??_MXK_Dequeue 00C8                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 40E0  
           Button_Poll@pIncrement 00CF                      ??_displaySID 00D3  
         PortProperty_Valid@F6830 FD5B              __end_ofi2_Motor_Step 2568  
                 ??i2_MXK_Release 0001                         copy_data0 2D38  
                       copy_data1 2D58                         copy_data2 2D78  
                   ??_MXK_Release 00B2            __end_ofi2_Byte_GetPair 4910  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00E1            __end_ofi2_Byte_GetZone 37CC  
             __end_ofi2_MXK_Queue 4A5A               ?_Port_CheckPortType 00E8  
                 itos@destination 00C0                          _InitList FC99  
            _Motor_Step$intlevel0 2348                          _Mode_Set 4A10  
              Port_GetQuad@Output 00B7                       ??_ToSegment 00B2  
                    _ISR_Function 1408                      _Timer0_Clear 4A5A  
                     _HMI_SetLeft 49E4                       _HMI_SetDown 49FA  
              Port_GetQuad@pInput 00B2                      _Timer2_Clear 4AB0  
            __end_of_Word_GetPair 43BC                          _lCBuffer 0100  
            ??_Port_CheckPairType 00DC                       ??_Reset_Low 00C6  
                        __Hrparam 0000                      _Timer0_Start 4736  
                  _Console_Render 119E                          __Lrparam 0000  
                 Timer2_Init@RDIV 00C4        Event_HMI_LeftButton@pState 00CB  
                  LCD_Write@value 00B6                          _Port_Set 041E  
                    OutSeg@segset 003E                         rand@screw 003B  
            __end_of_Word_SetPair 41FC                       ??_Port_Init 01C8  
         __end_of_HMI_SetSegments 2C6E              ??_Port_CheckQuadType 00E5  
              __end_of_displaySID 4808             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 4340                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00EB                  __size_of___lwmod 0062  
                    ??_initialise 00F5                          _lBufferX 007B  
                        _lBufferY 007A               Timer2_Init@PRESCALE FD82  
              _Event_HMI_UpButton 4578                   LCD_Fill@pColour 00BB  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 0071                  __size_of_getMode 008A  
         __end_of_HMI_RightSwitch 4988            Byte_GetZone@pChunkSize 00B6  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00B6  
           __size_of_Port_SetType 022A                     reverse@length 00B4  
                       itos@input 00BE             i2MXK_SwitchTo@pModule 0008  
              Motor_Init@pAddress 00E1                          _delay_ms 3AE2  
                        _delay_us 3F08                          _clearall 007C  
                 ___lwdiv@divisor 00B4    __size_of_Console_SetForecolour 000A  
             ?_Event_HMI_UpButton 0001                  __size_of_setMode 0050  
                 ___lwdiv@counter 00B6     __end_of_Console_SetForecolour 4AA8  
                 Port_GetPin@pPin 00B4                          __ptext10 4A22  
                        __ptext11 1768                          __ptext20 354E  
                        __ptext12 2978                          __ptext21 3928  
                        __ptext13 2A3A                          __ptext30 4096  
                        __ptext22 1F1C                          __ptext14 3BB6  
                        __ptext31 4638                          __ptext23 4910  
                        __ptext15 31BC                          __ptext40 49CE  
                        __ptext32 4546                          __ptext24 4928  
                        __ptext16 34C0                          __ptext41 49E4  
                        __ptext33 4578                          __ptext25 4940  
                        __ptext17 4808                          __ptext50 4A94  
                        __ptext42 4692                          __ptext34 41FC  
                        __ptext26 4958                          __ptext18 3DA2  
                        __ptext51 4AB8                          __ptext43 2568  
                        __ptext35 3E58                          __ptext27 4970  
                        __ptext19 4282                          __ptext60 446C  
                        __ptext52 4A9E                          __ptext44 3A0A  
                        __ptext36 4666                          __ptext28 4988  
                        __ptext61 4736                          __ptext53 119E  
                        __ptext45 3C80                          __ptext37 43BC  
                        __ptext29 49A0                          __ptext70 041E  
                        __ptext62 3D44                          __ptext54 37CC  
                        __ptext46 36DE                          __ptext38 3430  
                        __ptext71 4A30                          __ptext63 27E4  
                        __ptext55 3118                          __ptext47 2BB4  
                        __ptext39 49B8               ??_MXK_BlockSwitchTo 00B8  
                        __ptext80 4A66                          __ptext72 2F26  
                        __ptext64 2082                          __ptext56 44A6  
                        __ptext48 0A9A                          __ptext81 4240  
                        __ptext73 2FCC                          __ptext65 4A5A  
                        __ptext57 2714                          __ptext49 49FA  
                        __ptext90 4826                          __ptext82 48DA  
                        __ptext74 3072                          __ptext66 1C2A  
                        __ptext58 4512                          __ptext91 4782  
                        __ptext83 4A3E                          __ptext75 3CE2  
                        __ptext67 1A98                          __ptext59 46BC  
                        __ptext92 3A76                          __ptext84 4340  
                        __ptext76 3FAA                          __ptext68 0F74  
                        __ptext93 4A10                          __ptext85 3F08  
                        __ptext77 4302                          __ptext69 40E0  
                        __ptext94 399A                          __ptext86 1DAA  
                        __ptext78 2342                          __ptext95 3840  
                        __ptext87 3398                          __ptext79 4ABE  
                        __ptext96 3FFA                          __ptext88 3EB0  
                        __ptext97 3AE2                          __ptext89 2DD2  
                        __ptext98 4844                          __ptext99 4862  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 00CB  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 4340  
               HMI_SetSegments@in 00B6             Button_Init@pThreshold 01CA  
                 displayMode@mode 00DE                     __size_of_main 003A  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00BD  
          __end_of_Console_Render 13AE                __end_of_initialise 3DA2  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 4096               __end_of_MXK_Release 48F6  
                  _MXK_TestButton 49A0                     i2_Byte_SetBit 404A  
            ??_Event_HMI_UpButton 00CB               i2Word_GetPair@pPair 000F  
                        _nullMode 4432         __end_of_MXK_BlockSwitchTo 437E  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0160  
            __size_of_Timer2_Init 0160                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0F74  
                    Port_Set@Type 00D8                          _stepMode 1404  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 00E7                         printf@val 00D0  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0064                    Timer0_Init@PRE 0078  
                    _SSP2STATbits 000F6D                        _LED_Toggle 4128  
                      _HMI_GetBar 4AB8              Button_Init@pGetState 01CF  
          PortProperty_Valid@Pair 00D7                  ??_Port_TogglePin 00C9  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
     __end_of_Event_HMI_DIPSwitch 4692            PortProperty_Valid@pPin 00C4  
                      _HMI_SetBar 4A94                  Byte_SetZone@MASK 00BC  
                     i2_MXK_Queue 4A4C                    Timer2_Init@DIV 0060  
                  Timer2_Init@PRE 0076                  Byte_SetZone@pMax 00B4  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 01D2                          itos@Data 00C2  
              LCD_FillRectangle@i 00C7                LCD_FillRectangle@j 00C8  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 00B2            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 00B9                  ___lldiv@dividend 00B2  
          __end_of_MXK_TestButton 49B8                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042           ??_Event_HMI_RightButton 00CB  
                  _SPI_DisableISR 470E                   Port_Init@pInput 00F2  
                        printf@ap 00CE             __size_of_positionMode 0002  
        Event_HMI_UpButton@pState 00CB            __size_ofi2_Port_SetPin 00AA  
                ?_HMI_SetSegments 00B3           Console_MakeField@Column 00BE  
           __size_of_SPI_MaxSpeed 0074                     SPI_DCS@pInput 00B2  
           __size_of_SPI_MinSpeed 0074                   ??_MXK_DIPSwitch 00B8  
          Event_HMI_DIPSwitch@Bar 00CC             __size_ofi2_Motor_Step 0100  
         Console_MakeField@pInput 00BD                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 00BA                     ??_GetPortPORT 00B4  
                 ___lwmod@divisor 00BB                     ??_GetPortTRIS 00B4  
           Timer0_Start@pFunction 00B2                Word_SetPair@pInput 00C1  
                 ___lwmod@counter 00BD                Word_SetPair@pValue 00C4  
                Motor_Init@pMotor 00DF                       _MXK_Dequeue 4302  
                  LED_Toggle@pLED 00CA                     _LCD_DrawField 3118  
                _Port_SetQuadType 0D1E           __size_of_continuousMode 02C2  
                     _MXK_Release 48DA         __size_of_Console_FormFeed 008E  
                    _MXK_SwitchTo 4240             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 00B9                     ?_Console_Init 0001  
               Word_SetPair@pPair 00C3                   _Port_SetPinType 15A8  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 00BA  
              Byte_GetZone@pChunk 00B5                      _positionMode 4AD4  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 4826  
              Byte_GetZone@pInput 00B2           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 3C1C             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 4736                      _SPI_MaxSpeed 3840  
                    _SPI_MinSpeed 38B4                Port_Set@TypeActual 00D6  
