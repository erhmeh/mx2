

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Aug 26 14:58:05 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1,inline
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1,inline
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1,inline
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1,inline
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1,group=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1,group=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1,group=1
   178                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	text158,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1
   183                           	psect	text161,global,reloc=2,class=CODE,delta=1
   184                           	psect	text162,global,reloc=2,class=CODE,delta=1
   185                           	psect	text163,global,reloc=2,class=CODE,delta=1
   186                           	psect	text164,global,reloc=2,class=CODE,delta=1,inline
   187                           	psect	text165,global,reloc=2,class=CODE,delta=1
   188                           	psect	text166,global,reloc=2,class=CODE,delta=1
   189                           	psect	text167,global,reloc=2,class=CODE,delta=1
   190                           	psect	text168,global,reloc=2,class=CODE,delta=1
   191                           	psect	text169,global,reloc=2,class=CODE,delta=1
   192                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   195                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   196  0000                     
   197                           ; Version 1.43
   198                           ; Generated 25/07/2017 GMT
   199                           ; 
   200                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   201                           ; All rights reserved.
   202                           ; 
   203                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   204                           ; 
   205                           ; Redistribution and use in source and binary forms, with or without modification, are
   206                           ; permitted provided that the following conditions are met:
   207                           ; 
   208                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   209                           ;        conditions and the following disclaimer.
   210                           ; 
   211                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   212                           ;        of conditions and the following disclaimer in the documentation and/or other
   213                           ;        materials provided with the distribution.
   214                           ; 
   215                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   216                           ;        software without specific prior written permission.
   217                           ; 
   218                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   219                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   220                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   221                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   222                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   223                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   224                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   225                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   226                           ; 
   227                           ; 
   228                           ; Code-generator required, PIC18F67J50 Definitions
   229                           ; 
   230                           ; SFR Addresses
   231  0000                     
   232                           	psect	idataCOMRAM
   233  016CEA                     __pidataCOMRAM:
   234                           	opt stack 0
   235                           
   236                           ;initializer for _gCursor
   237  016CEA  0006               	dw	6
   238  016CEC  0006               	dw	6
   239                           
   240                           ;initializer for _Bus_State
   241  016CEE  01                 	db	1
   242                           
   243                           ;initializer for _A
   244  016CEF  41                 	db	65
   245                           
   246                           ;initializer for _a
   247  016CF0  61                 	db	97
   248                           
   249                           ;initializer for _zero
   250  016CF1  30                 	db	48
   251                           
   252                           ;initializer for _l
   253  016CF2  80                 	db	128
   254                           
   255                           ;initializer for _w
   256  016CF3  80                 	db	128
   257                           
   258                           	psect	idataBANK0
   259  016D46                     __pidataBANK0:
   260                           	opt stack 0
   261                           
   262                           ;initializer for _gForecolour
   263  016D46  FFFF               	dw	65535
   264                           
   265                           ;initializer for _change
   266  016D48  01                 	db	1
   267                           
   268                           	psect	idataBANK1
   269  016C7E                     __pidataBANK1:
   270                           	opt stack 0
   271                           
   272                           ;initializer for Console_Render@F6956
   273  016C7E  0006               	dw	6
   274  016C80  0006               	dw	6
   275                           
   276                           ;initializer for _gLineSize
   277  016C82  0080               	dw	128
   278  016C84  0007               	dw	7
   279                           
   280                           ;initializer for _gCharSize
   281  016C86  0005               	dw	5
   282  016C88  0007               	dw	7
   283                           
   284                           ;initializer for _currentPos
   285  016C8A  00C8               	dw	200
   286                           
   287                           ;initializer for _direction
   288  016C8C  00C8               	dw	200
   289                           
   290                           	psect	mediumconst
   291  00FBE2                     __pmediumconst:
   292                           	opt stack 0
   293  00FBE2  00                 	db	0
   294  00FBE3                     _InitList:
   295                           	opt stack 0
   296  00FBE3  1100               	dw	4352
   297  00FBE5  0080               	dw	128
   298  00FBE7  012C               	dw	300
   299  00FBE9  B100               	dw	45312
   300  00FBEB  0002               	dw	2
   301  00FBED  0035               	dw	53
   302  00FBEF  0036               	dw	54
   303  00FBF1  B200               	dw	45568
   304  00FBF3  0002               	dw	2
   305  00FBF5  0035               	dw	53
   306  00FBF7  0036               	dw	54
   307  00FBF9  B300               	dw	45824
   308  00FBFB  0002               	dw	2
   309  00FBFD  0035               	dw	53
   310  00FBFF  0036               	dw	54
   311  00FC01  0002               	dw	2
   312  00FC03  0035               	dw	53
   313  00FC05  0036               	dw	54
   314  00FC07  B400               	dw	46080
   315  00FC09  0000               	dw	0
   316  00FC0B  C000               	dw	49152
   317  00FC0D  00A2               	dw	162
   318  00FC0F  0002               	dw	2
   319  00FC11  0084               	dw	132
   320  00FC13  C100               	dw	49408
   321  00FC15  00C5               	dw	197
   322  00FC17  C200               	dw	49664
   323  00FC19  000D               	dw	13
   324  00FC1B  0000               	dw	0
   325  00FC1D  C300               	dw	49920
   326  00FC1F  008D               	dw	141
   327  00FC21  002A               	dw	42
   328  00FC23  C400               	dw	50176
   329  00FC25  008D               	dw	141
   330  00FC27  00EE               	dw	238
   331  00FC29  C500               	dw	50432
   332  00FC2B  000A               	dw	10
   333  00FC2D  3600               	dw	13824
   334  00FC2F  00C8               	dw	200
   335  00FC31  E000               	dw	57344
   336  00FC33  0012               	dw	18
   337  00FC35  001C               	dw	28
   338  00FC37  0010               	dw	16
   339  00FC39  0018               	dw	24
   340  00FC3B  0033               	dw	51
   341  00FC3D  002C               	dw	44
   342  00FC3F  0025               	dw	37
   343  00FC41  0028               	dw	40
   344  00FC43  0028               	dw	40
   345  00FC45  0027               	dw	39
   346  00FC47  002F               	dw	47
   347  00FC49  003C               	dw	60
   348  00FC4B  0000               	dw	0
   349  00FC4D  0003               	dw	3
   350  00FC4F  0003               	dw	3
   351  00FC51  0010               	dw	16
   352  00FC53  0080               	dw	128
   353  00FC55  0078               	dw	120
   354  00FC57  E100               	dw	57600
   355  00FC59  0012               	dw	18
   356  00FC5B  001C               	dw	28
   357  00FC5D  0010               	dw	16
   358  00FC5F  0018               	dw	24
   359  00FC61  002D               	dw	45
   360  00FC63  0028               	dw	40
   361  00FC65  0023               	dw	35
   362  00FC67  0028               	dw	40
   363  00FC69  0028               	dw	40
   364  00FC6B  0026               	dw	38
   365  00FC6D  002F               	dw	47
   366  00FC6F  003B               	dw	59
   367  00FC71  0000               	dw	0
   368  00FC73  0003               	dw	3
   369  00FC75  0003               	dw	3
   370  00FC77  0010               	dw	16
   371  00FC79  3A00               	dw	14848
   372  00FC7B  0005               	dw	5
   373  00FC7D  2A00               	dw	10752
   374  00FC7F  0000               	dw	0
   375  00FC81  0002               	dw	2
   376  00FC83  0000               	dw	0
   377  00FC85  0081               	dw	129
   378  00FC87  2B00               	dw	11008
   379  00FC89  0000               	dw	0
   380  00FC8B  0003               	dw	3
   381  00FC8D  0000               	dw	0
   382  00FC8F  00A2               	dw	162
   383  00FC91  2900               	dw	10496
   384  00FC93  2C00               	dw	11264
   385  00FC95                     __end_of_InitList:
   386                           	opt stack 0
   387  00FC95                     Timer0_Init@PRESCALE:
   388                           	opt stack 0
   389  00FC95  0002               	dw	2
   390  00FC97  0004               	dw	4
   391  00FC99  0008               	dw	8
   392  00FC9B  0010               	dw	16
   393  00FC9D  0020               	dw	32
   394  00FC9F  0040               	dw	64
   395  00FCA1  0080               	dw	128
   396  00FCA3  0100               	dw	256
   397  00FCA5                     __end_ofTimer0_Init@PRESCALE:
   398                           	opt stack 0
   399  00FCA5                     PortProperty_Valid@F6830:
   400                           	opt stack 0
   401  00FCA5  00                 	db	0
   402  00FCA6  01                 	db	1
   403  00FCA7  02                 	db	2
   404  00FCA8  00                 	db	0
   405  00FCA9  01                 	db	1
   406  00FCAA  00                 	db	0
   407  00FCAB  01                 	db	1
   408  00FCAC  00                 	db	0
   409  00FCAD  02                 	db	2
   410  00FCAE  02                 	db	2
   411  00FCAF  00                 	db	0
   412  00FCB0  00                 	db	0
   413  00FCB1  03                 	db	3
   414  00FCB2  03                 	db	3
   415  00FCB3  03                 	db	3
   416  00FCB4  00                 	db	0
   417  00FCB5                     __end_ofPortProperty_Valid@F6830:
   418                           	opt stack 0
   419  00FCB5                     _dpowers:
   420                           	opt stack 0
   421  00FCB5  0001               	dw	1
   422  00FCB7  000A               	dw	10
   423  00FCB9  0064               	dw	100
   424  00FCBB  03E8               	dw	1000
   425  00FCBD  2710               	dw	10000
   426  00FCBF                     __end_of_dpowers:
   427                           	opt stack 0
   428  00FCBF                     _MASKS:
   429                           	opt stack 0
   430  00FCBF  00                 	db	0
   431  00FCC0  01                 	db	1
   432  00FCC1  03                 	db	3
   433  00FCC2  07                 	db	7
   434  00FCC3  0F                 	db	15
   435  00FCC4  1F                 	db	31
   436  00FCC5  3F                 	db	63
   437  00FCC6  7F                 	db	127
   438  00FCC7  FF                 	db	255
   439  00FCC8                     __end_of_MASKS:
   440                           	opt stack 0
   441  00FCC8                     HMI_SetButton@F7213:
   442                           	opt stack 0
   443  00FCC8  00                 	db	0
   444  00FCC9  02                 	db	2
   445  00FCCA  01                 	db	1
   446  00FCCB  03                 	db	3
   447  00FCCC                     __end_ofHMI_SetButton@F7213:
   448                           	opt stack 0
   449  00FCCC                     Timer2_Init@PRESCALE:
   450                           	opt stack 0
   451  00FCCC  01                 	db	1
   452  00FCCD  04                 	db	4
   453  00FCCE  10                 	db	16
   454  00FCCF                     __end_ofTimer2_Init@PRESCALE:
   455                           	opt stack 0
   456  00FCCF                     _Font5x7:
   457                           	opt stack 0
   458  00FCCF  00                 	db	0
   459  00FCD0  00                 	db	0
   460  00FCD1  00                 	db	0
   461  00FCD2  00                 	db	0
   462  00FCD3  00                 	db	0
   463  00FCD4  00                 	db	0
   464  00FCD5  00                 	db	0
   465  00FCD6  5F                 	db	95
   466  00FCD7  00                 	db	0
   467  00FCD8  00                 	db	0
   468  00FCD9  00                 	db	0
   469  00FCDA  07                 	db	7
   470  00FCDB  00                 	db	0
   471  00FCDC  07                 	db	7
   472  00FCDD  00                 	db	0
   473  00FCDE  14                 	db	20
   474  00FCDF  7F                 	db	127
   475  00FCE0  14                 	db	20
   476  00FCE1  7F                 	db	127
   477  00FCE2  14                 	db	20
   478  00FCE3  24                 	db	36
   479  00FCE4  2A                 	db	42
   480  00FCE5  7F                 	db	127
   481  00FCE6  2A                 	db	42
   482  00FCE7  12                 	db	18
   483  00FCE8  23                 	db	35
   484  00FCE9  13                 	db	19
   485  00FCEA  08                 	db	8
   486  00FCEB  64                 	db	100
   487  00FCEC  62                 	db	98
   488  00FCED  36                 	db	54
   489  00FCEE  49                 	db	73
   490  00FCEF  55                 	db	85
   491  00FCF0  22                 	db	34
   492  00FCF1  50                 	db	80
   493  00FCF2  00                 	db	0
   494  00FCF3  05                 	db	5
   495  00FCF4  03                 	db	3
   496  00FCF5  00                 	db	0
   497  00FCF6  00                 	db	0
   498  00FCF7  00                 	db	0
   499  00FCF8  1C                 	db	28
   500  00FCF9  22                 	db	34
   501  00FCFA  41                 	db	65
   502  00FCFB  00                 	db	0
   503  00FCFC  00                 	db	0
   504  00FCFD  41                 	db	65
   505  00FCFE  22                 	db	34
   506  00FCFF  1C                 	db	28
   507  00FD00  00                 	db	0
   508  00FD01  08                 	db	8
   509  00FD02  2A                 	db	42
   510  00FD03  1C                 	db	28
   511  00FD04  2A                 	db	42
   512  00FD05  08                 	db	8
   513  00FD06  08                 	db	8
   514  00FD07  08                 	db	8
   515  00FD08  3E                 	db	62
   516  00FD09  08                 	db	8
   517  00FD0A  08                 	db	8
   518  00FD0B  00                 	db	0
   519  00FD0C  50                 	db	80
   520  00FD0D  30                 	db	48
   521  00FD0E  00                 	db	0
   522  00FD0F  00                 	db	0
   523  00FD10  08                 	db	8
   524  00FD11  08                 	db	8
   525  00FD12  08                 	db	8
   526  00FD13  08                 	db	8
   527  00FD14  08                 	db	8
   528  00FD15  00                 	db	0
   529  00FD16  60                 	db	96
   530  00FD17  60                 	db	96
   531  00FD18  00                 	db	0
   532  00FD19  00                 	db	0
   533  00FD1A  20                 	db	32
   534  00FD1B  10                 	db	16
   535  00FD1C  08                 	db	8
   536  00FD1D  04                 	db	4
   537  00FD1E  02                 	db	2
   538  00FD1F  3E                 	db	62
   539  00FD20  51                 	db	81
   540  00FD21  49                 	db	73
   541  00FD22  45                 	db	69
   542  00FD23  3E                 	db	62
   543  00FD24  00                 	db	0
   544  00FD25  42                 	db	66
   545  00FD26  7F                 	db	127
   546  00FD27  40                 	db	64
   547  00FD28  00                 	db	0
   548  00FD29  42                 	db	66
   549  00FD2A  61                 	db	97
   550  00FD2B  51                 	db	81
   551  00FD2C  49                 	db	73
   552  00FD2D  46                 	db	70
   553  00FD2E  21                 	db	33
   554  00FD2F  41                 	db	65
   555  00FD30  45                 	db	69
   556  00FD31  4B                 	db	75
   557  00FD32  31                 	db	49
   558  00FD33  18                 	db	24
   559  00FD34  14                 	db	20
   560  00FD35  12                 	db	18
   561  00FD36  7F                 	db	127
   562  00FD37  10                 	db	16
   563  00FD38  27                 	db	39
   564  00FD39  45                 	db	69
   565  00FD3A  45                 	db	69
   566  00FD3B  45                 	db	69
   567  00FD3C  39                 	db	57
   568  00FD3D  3C                 	db	60
   569  00FD3E  4A                 	db	74
   570  00FD3F  49                 	db	73
   571  00FD40  49                 	db	73
   572  00FD41  30                 	db	48
   573  00FD42  01                 	db	1
   574  00FD43  71                 	db	113
   575  00FD44  09                 	db	9
   576  00FD45  05                 	db	5
   577  00FD46  03                 	db	3
   578  00FD47  36                 	db	54
   579  00FD48  49                 	db	73
   580  00FD49  49                 	db	73
   581  00FD4A  49                 	db	73
   582  00FD4B  36                 	db	54
   583  00FD4C  06                 	db	6
   584  00FD4D  49                 	db	73
   585  00FD4E  49                 	db	73
   586  00FD4F  29                 	db	41
   587  00FD50  1E                 	db	30
   588  00FD51  00                 	db	0
   589  00FD52  36                 	db	54
   590  00FD53  36                 	db	54
   591  00FD54  00                 	db	0
   592  00FD55  00                 	db	0
   593  00FD56  00                 	db	0
   594  00FD57  56                 	db	86
   595  00FD58  36                 	db	54
   596  00FD59  00                 	db	0
   597  00FD5A  00                 	db	0
   598  00FD5B  00                 	db	0
   599  00FD5C  08                 	db	8
   600  00FD5D  14                 	db	20
   601  00FD5E  22                 	db	34
   602  00FD5F  41                 	db	65
   603  00FD60  14                 	db	20
   604  00FD61  14                 	db	20
   605  00FD62  14                 	db	20
   606  00FD63  14                 	db	20
   607  00FD64  14                 	db	20
   608  00FD65  41                 	db	65
   609  00FD66  22                 	db	34
   610  00FD67  14                 	db	20
   611  00FD68  08                 	db	8
   612  00FD69  00                 	db	0
   613  00FD6A  02                 	db	2
   614  00FD6B  01                 	db	1
   615  00FD6C  51                 	db	81
   616  00FD6D  09                 	db	9
   617  00FD6E  06                 	db	6
   618  00FD6F  32                 	db	50
   619  00FD70  49                 	db	73
   620  00FD71  79                 	db	121
   621  00FD72  41                 	db	65
   622  00FD73  3E                 	db	62
   623  00FD74  7E                 	db	126
   624  00FD75  11                 	db	17
   625  00FD76  11                 	db	17
   626  00FD77  11                 	db	17
   627  00FD78  7E                 	db	126
   628  00FD79  7F                 	db	127
   629  00FD7A  49                 	db	73
   630  00FD7B  49                 	db	73
   631  00FD7C  49                 	db	73
   632  00FD7D  36                 	db	54
   633  00FD7E  3E                 	db	62
   634  00FD7F  41                 	db	65
   635  00FD80  41                 	db	65
   636  00FD81  41                 	db	65
   637  00FD82  22                 	db	34
   638  00FD83  7F                 	db	127
   639  00FD84  41                 	db	65
   640  00FD85  41                 	db	65
   641  00FD86  22                 	db	34
   642  00FD87  1C                 	db	28
   643  00FD88  7F                 	db	127
   644  00FD89  49                 	db	73
   645  00FD8A  49                 	db	73
   646  00FD8B  49                 	db	73
   647  00FD8C  41                 	db	65
   648  00FD8D  7F                 	db	127
   649  00FD8E  09                 	db	9
   650  00FD8F  09                 	db	9
   651  00FD90  01                 	db	1
   652  00FD91  01                 	db	1
   653  00FD92  3E                 	db	62
   654  00FD93  41                 	db	65
   655  00FD94  41                 	db	65
   656  00FD95  51                 	db	81
   657  00FD96  32                 	db	50
   658  00FD97  7F                 	db	127
   659  00FD98  08                 	db	8
   660  00FD99  08                 	db	8
   661  00FD9A  08                 	db	8
   662  00FD9B  7F                 	db	127
   663  00FD9C  00                 	db	0
   664  00FD9D  41                 	db	65
   665  00FD9E  7F                 	db	127
   666  00FD9F  41                 	db	65
   667  00FDA0  00                 	db	0
   668  00FDA1  20                 	db	32
   669  00FDA2  40                 	db	64
   670  00FDA3  41                 	db	65
   671  00FDA4  3F                 	db	63
   672  00FDA5  01                 	db	1
   673  00FDA6  7F                 	db	127
   674  00FDA7  08                 	db	8
   675  00FDA8  14                 	db	20
   676  00FDA9  22                 	db	34
   677  00FDAA  41                 	db	65
   678  00FDAB  7F                 	db	127
   679  00FDAC  40                 	db	64
   680  00FDAD  40                 	db	64
   681  00FDAE  40                 	db	64
   682  00FDAF  40                 	db	64
   683  00FDB0  7F                 	db	127
   684  00FDB1  02                 	db	2
   685  00FDB2  04                 	db	4
   686  00FDB3  02                 	db	2
   687  00FDB4  7F                 	db	127
   688  00FDB5  7F                 	db	127
   689  00FDB6  04                 	db	4
   690  00FDB7  08                 	db	8
   691  00FDB8  10                 	db	16
   692  00FDB9  7F                 	db	127
   693  00FDBA  3E                 	db	62
   694  00FDBB  41                 	db	65
   695  00FDBC  41                 	db	65
   696  00FDBD  41                 	db	65
   697  00FDBE  3E                 	db	62
   698  00FDBF  7F                 	db	127
   699  00FDC0  09                 	db	9
   700  00FDC1  09                 	db	9
   701  00FDC2  09                 	db	9
   702  00FDC3  06                 	db	6
   703  00FDC4  3E                 	db	62
   704  00FDC5  41                 	db	65
   705  00FDC6  51                 	db	81
   706  00FDC7  21                 	db	33
   707  00FDC8  5E                 	db	94
   708  00FDC9  7F                 	db	127
   709  00FDCA  09                 	db	9
   710  00FDCB  19                 	db	25
   711  00FDCC  29                 	db	41
   712  00FDCD  46                 	db	70
   713  00FDCE  46                 	db	70
   714  00FDCF  49                 	db	73
   715  00FDD0  49                 	db	73
   716  00FDD1  49                 	db	73
   717  00FDD2  31                 	db	49
   718  00FDD3  01                 	db	1
   719  00FDD4  01                 	db	1
   720  00FDD5  7F                 	db	127
   721  00FDD6  01                 	db	1
   722  00FDD7  01                 	db	1
   723  00FDD8  3F                 	db	63
   724  00FDD9  40                 	db	64
   725  00FDDA  40                 	db	64
   726  00FDDB  40                 	db	64
   727  00FDDC  3F                 	db	63
   728  00FDDD  1F                 	db	31
   729  00FDDE  20                 	db	32
   730  00FDDF  40                 	db	64
   731  00FDE0  20                 	db	32
   732  00FDE1  1F                 	db	31
   733  00FDE2  7F                 	db	127
   734  00FDE3  20                 	db	32
   735  00FDE4  18                 	db	24
   736  00FDE5  20                 	db	32
   737  00FDE6  7F                 	db	127
   738  00FDE7  63                 	db	99
   739  00FDE8  14                 	db	20
   740  00FDE9  08                 	db	8
   741  00FDEA  14                 	db	20
   742  00FDEB  63                 	db	99
   743  00FDEC  03                 	db	3
   744  00FDED  04                 	db	4
   745  00FDEE  78                 	db	120
   746  00FDEF  04                 	db	4
   747  00FDF0  03                 	db	3
   748  00FDF1  61                 	db	97
   749  00FDF2  51                 	db	81
   750  00FDF3  49                 	db	73
   751  00FDF4  45                 	db	69
   752  00FDF5  43                 	db	67
   753  00FDF6  00                 	db	0
   754  00FDF7  00                 	db	0
   755  00FDF8  7F                 	db	127
   756  00FDF9  41                 	db	65
   757  00FDFA  41                 	db	65
   758  00FDFB  02                 	db	2
   759  00FDFC  04                 	db	4
   760  00FDFD  08                 	db	8
   761  00FDFE  10                 	db	16
   762  00FDFF  20                 	db	32
   763  00FE00  41                 	db	65
   764  00FE01  41                 	db	65
   765  00FE02  7F                 	db	127
   766  00FE03  00                 	db	0
   767  00FE04  00                 	db	0
   768  00FE05  04                 	db	4
   769  00FE06  02                 	db	2
   770  00FE07  01                 	db	1
   771  00FE08  02                 	db	2
   772  00FE09  04                 	db	4
   773  00FE0A  40                 	db	64
   774  00FE0B  40                 	db	64
   775  00FE0C  40                 	db	64
   776  00FE0D  40                 	db	64
   777  00FE0E  40                 	db	64
   778  00FE0F  00                 	db	0
   779  00FE10  01                 	db	1
   780  00FE11  02                 	db	2
   781  00FE12  04                 	db	4
   782  00FE13  00                 	db	0
   783  00FE14  20                 	db	32
   784  00FE15  54                 	db	84
   785  00FE16  54                 	db	84
   786  00FE17  54                 	db	84
   787  00FE18  78                 	db	120
   788  00FE19  7F                 	db	127
   789  00FE1A  48                 	db	72
   790  00FE1B  44                 	db	68
   791  00FE1C  44                 	db	68
   792  00FE1D  38                 	db	56
   793  00FE1E  38                 	db	56
   794  00FE1F  44                 	db	68
   795  00FE20  44                 	db	68
   796  00FE21  44                 	db	68
   797  00FE22  20                 	db	32
   798  00FE23  38                 	db	56
   799  00FE24  44                 	db	68
   800  00FE25  44                 	db	68
   801  00FE26  48                 	db	72
   802  00FE27  7F                 	db	127
   803  00FE28  38                 	db	56
   804  00FE29  54                 	db	84
   805  00FE2A  54                 	db	84
   806  00FE2B  54                 	db	84
   807  00FE2C  18                 	db	24
   808  00FE2D  08                 	db	8
   809  00FE2E  7E                 	db	126
   810  00FE2F  09                 	db	9
   811  00FE30  01                 	db	1
   812  00FE31  02                 	db	2
   813  00FE32  08                 	db	8
   814  00FE33  14                 	db	20
   815  00FE34  54                 	db	84
   816  00FE35  54                 	db	84
   817  00FE36  3C                 	db	60
   818  00FE37  7F                 	db	127
   819  00FE38  08                 	db	8
   820  00FE39  04                 	db	4
   821  00FE3A  04                 	db	4
   822  00FE3B  78                 	db	120
   823  00FE3C  00                 	db	0
   824  00FE3D  44                 	db	68
   825  00FE3E  7D                 	db	125
   826  00FE3F  40                 	db	64
   827  00FE40  00                 	db	0
   828  00FE41  20                 	db	32
   829  00FE42  40                 	db	64
   830  00FE43  44                 	db	68
   831  00FE44  3D                 	db	61
   832  00FE45  00                 	db	0
   833  00FE46  00                 	db	0
   834  00FE47  7F                 	db	127
   835  00FE48  10                 	db	16
   836  00FE49  28                 	db	40
   837  00FE4A  44                 	db	68
   838  00FE4B  00                 	db	0
   839  00FE4C  41                 	db	65
   840  00FE4D  7F                 	db	127
   841  00FE4E  40                 	db	64
   842  00FE4F  00                 	db	0
   843  00FE50  7C                 	db	124
   844  00FE51  04                 	db	4
   845  00FE52  18                 	db	24
   846  00FE53  04                 	db	4
   847  00FE54  78                 	db	120
   848  00FE55  7C                 	db	124
   849  00FE56  08                 	db	8
   850  00FE57  04                 	db	4
   851  00FE58  04                 	db	4
   852  00FE59  78                 	db	120
   853  00FE5A  38                 	db	56
   854  00FE5B  44                 	db	68
   855  00FE5C  44                 	db	68
   856  00FE5D  44                 	db	68
   857  00FE5E  38                 	db	56
   858  00FE5F  7C                 	db	124
   859  00FE60  14                 	db	20
   860  00FE61  14                 	db	20
   861  00FE62  14                 	db	20
   862  00FE63  08                 	db	8
   863  00FE64  08                 	db	8
   864  00FE65  14                 	db	20
   865  00FE66  14                 	db	20
   866  00FE67  18                 	db	24
   867  00FE68  7C                 	db	124
   868  00FE69  7C                 	db	124
   869  00FE6A  08                 	db	8
   870  00FE6B  04                 	db	4
   871  00FE6C  04                 	db	4
   872  00FE6D  08                 	db	8
   873  00FE6E  48                 	db	72
   874  00FE6F  54                 	db	84
   875  00FE70  54                 	db	84
   876  00FE71  54                 	db	84
   877  00FE72  20                 	db	32
   878  00FE73  04                 	db	4
   879  00FE74  3F                 	db	63
   880  00FE75  44                 	db	68
   881  00FE76  40                 	db	64
   882  00FE77  20                 	db	32
   883  00FE78  3C                 	db	60
   884  00FE79  40                 	db	64
   885  00FE7A  40                 	db	64
   886  00FE7B  20                 	db	32
   887  00FE7C  7C                 	db	124
   888  00FE7D  1C                 	db	28
   889  00FE7E  20                 	db	32
   890  00FE7F  40                 	db	64
   891  00FE80  20                 	db	32
   892  00FE81  1C                 	db	28
   893  00FE82  3C                 	db	60
   894  00FE83  40                 	db	64
   895  00FE84  30                 	db	48
   896  00FE85  40                 	db	64
   897  00FE86  3C                 	db	60
   898  00FE87  44                 	db	68
   899  00FE88  28                 	db	40
   900  00FE89  10                 	db	16
   901  00FE8A  28                 	db	40
   902  00FE8B  44                 	db	68
   903  00FE8C  0C                 	db	12
   904  00FE8D  50                 	db	80
   905  00FE8E  50                 	db	80
   906  00FE8F  50                 	db	80
   907  00FE90  3C                 	db	60
   908  00FE91  44                 	db	68
   909  00FE92  64                 	db	100
   910  00FE93  54                 	db	84
   911  00FE94  4C                 	db	76
   912  00FE95  44                 	db	68
   913  00FE96  00                 	db	0
   914  00FE97  08                 	db	8
   915  00FE98  36                 	db	54
   916  00FE99  41                 	db	65
   917  00FE9A  00                 	db	0
   918  00FE9B  00                 	db	0
   919  00FE9C  00                 	db	0
   920  00FE9D  7F                 	db	127
   921  00FE9E  00                 	db	0
   922  00FE9F  00                 	db	0
   923  00FEA0  00                 	db	0
   924  00FEA1  41                 	db	65
   925  00FEA2  36                 	db	54
   926  00FEA3  08                 	db	8
   927  00FEA4  00                 	db	0
   928  00FEA5  08                 	db	8
   929  00FEA6  08                 	db	8
   930  00FEA7  2A                 	db	42
   931  00FEA8  1C                 	db	28
   932  00FEA9  08                 	db	8
   933  00FEAA  08                 	db	8
   934  00FEAB  1C                 	db	28
   935  00FEAC  2A                 	db	42
   936  00FEAD  08                 	db	8
   937  00FEAE  08                 	db	8
   938  00FEAF                     __end_of_Font5x7:
   939                           	opt stack 0
   940  00FEAF                     exp@coeff:
   941                           	opt stack 0
   942  00FEAF  0000               	dw	0
   943  00FEB1  3F80               	dw	16256
   944  00FEB3  7218               	dw	29208
   945  00FEB5  3F31               	dw	16177
   946  00FEB7  FDF0               	dw	65008
   947  00FEB9  3E75               	dw	15989
   948  00FEBB  5847               	dw	22599
   949  00FEBD  3D63               	dw	15715
   950  00FEBF  9558               	dw	38232
   951  00FEC1  3C1D               	dw	15389
   952  00FEC3  C482               	dw	50306
   953  00FEC5  3AAE               	dw	15022
   954  00FEC7  78A8               	dw	30888
   955  00FEC9  3921               	dw	14625
   956  00FECB  93EF               	dw	37871
   957  00FECD  3780               	dw	14208
   958  00FECF  92A0               	dw	37536
   959  00FED1  35A7               	dw	13735
   960  00FED3  5646               	dw	22086
   961  00FED5  3415               	dw	13333
   962  00FED7                     __end_ofexp@coeff:
   963                           	opt stack 0
   964  00FED7                     log@coeff:
   965                           	opt stack 0
   966  00FED7  0000               	dw	0
   967  00FED9  0000               	dw	0
   968  00FEDB  FFC4               	dw	65476
   969  00FEDD  3F7F               	dw	16255
   970  00FEDF  EF80               	dw	61312
   971  00FEE1  BEFF               	dw	48895
   972  00FEE3  E190               	dw	57744
   973  00FEE5  3EA9               	dw	16041
   974  00FEE7  82EC               	dw	33516
   975  00FEE9  BE76               	dw	48758
   976  00FEEB  AD82               	dw	44418
   977  00FEED  3E2B               	dw	15915
   978  00FEEF  3C0E               	dw	15374
   979  00FEF1  BDC3               	dw	48579
   980  00FEF3  D187               	dw	53639
   981  00FEF5  3D13               	dw	15635
   982  00FEF7  7841               	dw	30785
   983  00FEF9  BBD3               	dw	48083
   984  00FEFB                     __end_oflog@coeff:
   985                           	opt stack 0
   986  00FEFB                     _PortG_Property:
   987                           	opt stack 0
   988  00FEFB  FC00               	dw	64512
   989  00FEFD                     __end_of_PortG_Property:
   990                           	opt stack 0
   991  00FEFD                     _PortF_Property:
   992                           	opt stack 0
   993  00FEFD  0FFF               	dw	4095
   994  00FEFF                     __end_of_PortF_Property:
   995                           	opt stack 0
   996  00FEFF                     _PortE_Property:
   997                           	opt stack 0
   998  00FEFF  0000               	dw	0
   999  00FF01                     __end_of_PortE_Property:
  1000                           	opt stack 0
  1001  00FF01                     _PortD_Property:
  1002                           	opt stack 0
  1003  00FF01  FFFF               	dw	65535
  1004  00FF03                     __end_of_PortD_Property:
  1005                           	opt stack 0
  1006  00FF03                     _PortC_Property:
  1007                           	opt stack 0
  1008  00FF03  FFF0               	dw	65520
  1009  00FF05                     __end_of_PortC_Property:
  1010                           	opt stack 0
  1011  00FF05                     _PortB_Property:
  1012                           	opt stack 0
  1013  00FF05  FF00               	dw	65280
  1014  00FF07                     __end_of_PortB_Property:
  1015                           	opt stack 0
  1016  00FF07                     _PortA_Property:
  1017                           	opt stack 0
  1018  00FF07  00FF               	dw	255
  1019  00FF09                     __end_of_PortA_Property:
  1020                           	opt stack 0
  1021  0000                     _TMR0	set	4054
  1022  0000                     _PR2	set	4043
  1023  0000                     _T2CONbits	set	4042
  1024  0000                     _T0CONbits	set	4053
  1025  0000                     _RCONbits	set	4048
  1026  0000                     _OSCTUNEbits	set	3995
  1027  0000                     _PIR3	set	4004
  1028  0000                     _PIR2	set	4001
  1029  0000                     _PIR1	set	3998
  1030  0000                     _INTCONbits	set	4082
  1031  0000                     _SSP2CON2bits	set	3947
  1032  0000                     _SSP1CON2bits	set	4037
  1033  0000                     _SSP1ADD	set	4040
  1034  0000                     _ANCON0	set	4033
  1035  0000                     _ADRESL	set	4035
  1036  0000                     _ADRESH	set	4036
  1037  0000                     _ADCON1bits	set	4033
  1038  0000                     _ADCON0bits	set	4034
  1039  0000                     _SSP2CON1bits	set	3948
  1040  0000                     _SSP1CON1bits	set	4038
  1041  0000                     _SSP2STATbits	set	3949
  1042  0000                     _SSP1STATbits	set	4039
  1043  0000                     _PIE3bits	set	4003
  1044  0000                     _PIE1bits	set	3997
  1045  0000                     _PIR3bits	set	4004
  1046  0000                     _PIR1bits	set	3998
  1047  0000                     _IPR3bits	set	4005
  1048  0000                     _IPR1bits	set	3999
  1049  0000                     _PORTFbits	set	3973
  1050  0000                     _SSP2CON2	set	3947
  1051  0000                     _SSP1CON2	set	4037
  1052  0000                     _SSP2BUF	set	3951
  1053  0000                     _SSP2CON1	set	3948
  1054  0000                     _SSP2STAT	set	3949
  1055  0000                     _SSP1BUF	set	4041
  1056  0000                     _SSP1CON1	set	4038
  1057  0000                     _SSP1STAT	set	4039
  1058  0000                     _LATG	set	3983
  1059  0000                     _LATF	set	3982
  1060  0000                     _LATE	set	3981
  1061  0000                     _LATD	set	3980
  1062  0000                     _LATC	set	3979
  1063  0000                     _LATB	set	3978
  1064  0000                     _LATA	set	3977
  1065  0000                     _TRISG	set	3992
  1066  0000                     _TRISF	set	3991
  1067  0000                     _TRISE	set	3990
  1068  0000                     _TRISD	set	3989
  1069  0000                     _TRISC	set	3988
  1070  0000                     _TRISB	set	3987
  1071  0000                     _TRISA	set	3986
  1072  0000                     _PORTG	set	3974
  1073  0000                     _PORTF	set	3973
  1074  0000                     _PORTE	set	3972
  1075  0000                     _PORTD	set	3971
  1076  0000                     _PORTC	set	3970
  1077  0000                     _PORTB	set	3969
  1078  0000                     _PORTA	set	3968
  1079  00FF09                     STR_2:
  1080  00FF09  43                 	db	67	;'C'
  1081  00FF0A  75                 	db	117	;'u'
  1082  00FF0B  72                 	db	114	;'r'
  1083  00FF0C  72                 	db	114	;'r'
  1084  00FF0D  65                 	db	101	;'e'
  1085  00FF0E  6E                 	db	110	;'n'
  1086  00FF0F  74                 	db	116	;'t'
  1087  00FF10  20                 	db	32
  1088  00FF11  4D                 	db	77	;'M'
  1089  00FF12  6F                 	db	111	;'o'
  1090  00FF13  64                 	db	100	;'d'
  1091  00FF14  65                 	db	101	;'e'
  1092  00FF15  3A                 	db	58	;':'
  1093  00FF16  0A                 	db	10
  1094  00FF17  20                 	db	32
  1095  00FF18  43                 	db	67	;'C'
  1096  00FF19  6F                 	db	111	;'o'
  1097  00FF1A  6E                 	db	110	;'n'
  1098  00FF1B  74                 	db	116	;'t'
  1099  00FF1C  69                 	db	105	;'i'
  1100  00FF1D  6E                 	db	110	;'n'
  1101  00FF1E  75                 	db	117	;'u'
  1102  00FF1F  6F                 	db	111	;'o'
  1103  00FF20  75                 	db	117	;'u'
  1104  00FF21  73                 	db	115	;'s'
  1105  00FF22  20                 	db	32
  1106  00FF23  4D                 	db	77	;'M'
  1107  00FF24  6F                 	db	111	;'o'
  1108  00FF25  64                 	db	100	;'d'
  1109  00FF26  65                 	db	101	;'e'
  1110  00FF27  0A                 	db	10
  1111  00FF28  00                 	db	0
  1112  00FF29                     STR_10:
  1113  00FF29  43                 	db	67	;'C'
  1114  00FF2A  75                 	db	117	;'u'
  1115  00FF2B  72                 	db	114	;'r'
  1116  00FF2C  72                 	db	114	;'r'
  1117  00FF2D  65                 	db	101	;'e'
  1118  00FF2E  6E                 	db	110	;'n'
  1119  00FF2F  74                 	db	116	;'t'
  1120  00FF30  20                 	db	32
  1121  00FF31  4D                 	db	77	;'M'
  1122  00FF32  6F                 	db	111	;'o'
  1123  00FF33  64                 	db	100	;'d'
  1124  00FF34  65                 	db	101	;'e'
  1125  00FF35  3A                 	db	58	;':'
  1126  00FF36  0A                 	db	10
  1127  00FF37  20                 	db	32
  1128  00FF38  50                 	db	80	;'P'
  1129  00FF39  6F                 	db	111	;'o'
  1130  00FF3A  73                 	db	115	;'s'
  1131  00FF3B  69                 	db	105	;'i'
  1132  00FF3C  74                 	db	116	;'t'
  1133  00FF3D  69                 	db	105	;'i'
  1134  00FF3E  6F                 	db	111	;'o'
  1135  00FF3F  6E                 	db	110	;'n'
  1136  00FF40  20                 	db	32
  1137  00FF41  4D                 	db	77	;'M'
  1138  00FF42  6F                 	db	111	;'o'
  1139  00FF43  64                 	db	100	;'d'
  1140  00FF44  65                 	db	101	;'e'
  1141  00FF45  0A                 	db	10
  1142  00FF46  0A                 	db	10
  1143  00FF47  00                 	db	0
  1144  00FF48                     STR_12:
  1145  00FF48  43                 	db	67	;'C'
  1146  00FF49  75                 	db	117	;'u'
  1147  00FF4A  72                 	db	114	;'r'
  1148  00FF4B  72                 	db	114	;'r'
  1149  00FF4C  65                 	db	101	;'e'
  1150  00FF4D  6E                 	db	110	;'n'
  1151  00FF4E  74                 	db	116	;'t'
  1152  00FF4F  20                 	db	32
  1153  00FF50  4D                 	db	77	;'M'
  1154  00FF51  6F                 	db	111	;'o'
  1155  00FF52  64                 	db	100	;'d'
  1156  00FF53  65                 	db	101	;'e'
  1157  00FF54  3A                 	db	58	;':'
  1158  00FF55  0A                 	db	10
  1159  00FF56  20                 	db	32
  1160  00FF57  55                 	db	85	;'U'
  1161  00FF58  6E                 	db	110	;'n'
  1162  00FF59  64                 	db	100	;'d'
  1163  00FF5A  65                 	db	101	;'e'
  1164  00FF5B  66                 	db	102	;'f'
  1165  00FF5C  69                 	db	105	;'i'
  1166  00FF5D  6E                 	db	110	;'n'
  1167  00FF5E  65                 	db	101	;'e'
  1168  00FF5F  64                 	db	100	;'d'
  1169  00FF60  0A                 	db	10
  1170  00FF61  00                 	db	0
  1171  00FF62                     STR_7:
  1172  00FF62  43                 	db	67	;'C'
  1173  00FF63  75                 	db	117	;'u'
  1174  00FF64  72                 	db	114	;'r'
  1175  00FF65  72                 	db	114	;'r'
  1176  00FF66  65                 	db	101	;'e'
  1177  00FF67  6E                 	db	110	;'n'
  1178  00FF68  74                 	db	116	;'t'
  1179  00FF69  20                 	db	32
  1180  00FF6A  4D                 	db	77	;'M'
  1181  00FF6B  6F                 	db	111	;'o'
  1182  00FF6C  64                 	db	100	;'d'
  1183  00FF6D  65                 	db	101	;'e'
  1184  00FF6E  3A                 	db	58	;':'
  1185  00FF6F  0A                 	db	10
  1186  00FF70  20                 	db	32
  1187  00FF71  53                 	db	83	;'S'
  1188  00FF72  74                 	db	116	;'t'
  1189  00FF73  65                 	db	101	;'e'
  1190  00FF74  70                 	db	112	;'p'
  1191  00FF75  20                 	db	32
  1192  00FF76  4D                 	db	77	;'M'
  1193  00FF77  6F                 	db	111	;'o'
  1194  00FF78  64                 	db	100	;'d'
  1195  00FF79  65                 	db	101	;'e'
  1196  00FF7A  0A                 	db	10
  1197  00FF7B  00                 	db	0
  1198  00FF7C                     STR_13:
  1199  00FF7C  20                 	db	32
  1200  00FF7D  20                 	db	32
  1201  00FF7E  20                 	db	32
  1202  00FF7F  20                 	db	32
  1203  00FF80  20                 	db	32
  1204  00FF81  20                 	db	32
  1205  00FF82  20                 	db	32
  1206  00FF83  20                 	db	32
  1207  00FF84  20                 	db	32
  1208  00FF85  20                 	db	32
  1209  00FF86  20                 	db	32
  1210  00FF87  20                 	db	32
  1211  00FF88  20                 	db	32
  1212  00FF89  20                 	db	32
  1213  00FF8A  20                 	db	32
  1214  00FF8B  20                 	db	32
  1215  00FF8C  20                 	db	32
  1216  00FF8D  20                 	db	32
  1217  00FF8E  20                 	db	32
  1218  00FF8F  20                 	db	32
  1219  00FF90  20                 	db	32
  1220  00FF91  20                 	db	32
  1221  00FF92  0A                 	db	10
  1222  00FF93  00                 	db	0
  1223  00FF94                     STR_1:
  1224  00FF94  4A                 	db	74	;'J'
  1225  00FF95  61                 	db	97	;'a'
  1226  00FF96  6D                 	db	109	;'m'
  1227  00FF97  69                 	db	105	;'i'
  1228  00FF98  6E                 	db	110	;'n'
  1229  00FF99  20                 	db	32
  1230  00FF9A  45                 	db	69	;'E'
  1231  00FF9B  61                 	db	97	;'a'
  1232  00FF9C  72                 	db	114	;'r'
  1233  00FF9D  6C                 	db	108	;'l'
  1234  00FF9E  79                 	db	121	;'y'
  1235  00FF9F  20                 	db	32
  1236  00FFA0  39                 	db	57	;'9'
  1237  00FFA1  39                 	db	57	;'9'
  1238  00FFA2  31                 	db	49	;'1'
  1239  00FFA3  33                 	db	51	;'3'
  1240  00FFA4  33                 	db	51	;'3'
  1241  00FFA5  33                 	db	51	;'3'
  1242  00FFA6  39                 	db	57	;'9'
  1243  00FFA7  31                 	db	49	;'1'
  1244  00FFA8  0A                 	db	10
  1245  00FFA9  0A                 	db	10
  1246  00FFAA  00                 	db	0
  1247  00FFAB                     STR_9:
  1248  00FFAB  52                 	db	82	;'R'
  1249  00FFAC  65                 	db	101	;'e'
  1250  00FFAD  6D                 	db	109	;'m'
  1251  00FFAE  61                 	db	97	;'a'
  1252  00FFAF  69                 	db	105	;'i'
  1253  00FFB0  6E                 	db	110	;'n'
  1254  00FFB1  69                 	db	105	;'i'
  1255  00FFB2  6E                 	db	110	;'n'
  1256  00FFB3  67                 	db	103	;'g'
  1257  00FFB4  20                 	db	32
  1258  00FFB5  53                 	db	83	;'S'
  1259  00FFB6  74                 	db	116	;'t'
  1260  00FFB7  65                 	db	101	;'e'
  1261  00FFB8  70                 	db	112	;'p'
  1262  00FFB9  73                 	db	115	;'s'
  1263  00FFBA  3A                 	db	58	;':'
  1264  00FFBB  20                 	db	32
  1265  00FFBC  25                 	db	37
  1266  00FFBD  64                 	db	100	;'d'
  1267  00FFBE  0A                 	db	10
  1268  00FFBF  0A                 	db	10
  1269  00FFC0  00                 	db	0
  1270  00FFC1                     STR_11:
  1271  00FFC1  54                 	db	84	;'T'
  1272  00FFC2  61                 	db	97	;'a'
  1273  00FFC3  72                 	db	114	;'r'
  1274  00FFC4  67                 	db	103	;'g'
  1275  00FFC5  65                 	db	101	;'e'
  1276  00FFC6  74                 	db	116	;'t'
  1277  00FFC7  20                 	db	32
  1278  00FFC8  41                 	db	65	;'A'
  1279  00FFC9  6E                 	db	110	;'n'
  1280  00FFCA  67                 	db	103	;'g'
  1281  00FFCB  6C                 	db	108	;'l'
  1282  00FFCC  65                 	db	101	;'e'
  1283  00FFCD  3A                 	db	58	;':'
  1284  00FFCE  0A                 	db	10
  1285  00FFCF  20                 	db	32
  1286  00FFD0  25                 	db	37
  1287  00FFD1  64                 	db	100	;'d'
  1288  00FFD2  20                 	db	32
  1289  00FFD3  0A                 	db	10
  1290  00FFD4  00                 	db	0
  1291  00FFD5                     STR_3:
  1292  00FFD5  44                 	db	68	;'D'
  1293  00FFD6  69                 	db	105	;'i'
  1294  00FFD7  72                 	db	114	;'r'
  1295  00FFD8  65                 	db	101	;'e'
  1296  00FFD9  63                 	db	99	;'c'
  1297  00FFDA  74                 	db	116	;'t'
  1298  00FFDB  69                 	db	105	;'i'
  1299  00FFDC  6F                 	db	111	;'o'
  1300  00FFDD  6E                 	db	110	;'n'
  1301  00FFDE  3A                 	db	58	;':'
  1302  00FFDF  20                 	db	32
  1303  00FFE0  00                 	db	0
  1304  00FFE1                     STR_6:
  1305  00FFE1  53                 	db	83	;'S'
  1306  00FFE2  70                 	db	112	;'p'
  1307  00FFE3  65                 	db	101	;'e'
  1308  00FFE4  65                 	db	101	;'e'
  1309  00FFE5  64                 	db	100	;'d'
  1310  00FFE6  3A                 	db	58	;':'
  1311  00FFE7  20                 	db	32
  1312  00FFE8  25                 	db	37
  1313  00FFE9  64                 	db	100	;'d'
  1314  00FFEA  0A                 	db	10
  1315  00FFEB  00                 	db	0
  1316  00FFEC                     STR_8:
  1317  00FFEC  53                 	db	83	;'S'
  1318  00FFED  74                 	db	116	;'t'
  1319  00FFEE  65                 	db	101	;'e'
  1320  00FFEF  70                 	db	112	;'p'
  1321  00FFF0  73                 	db	115	;'s'
  1322  00FFF1  3A                 	db	58	;':'
  1323  00FFF2  20                 	db	32
  1324  00FFF3  25                 	db	37
  1325  00FFF4  64                 	db	100	;'d'
  1326  00FFF5  0A                 	db	10
  1327  00FFF6  00                 	db	0
  1328  00FFF7                     STR_5:
  1329  00FFF7  43                 	db	67	;'C'
  1330  00FFF8  43                 	db	67	;'C'
  1331  00FFF9  57                 	db	87	;'W'
  1332  00FFFA  0A                 	db	10
  1333  00FFFB  00                 	db	0
  1334  00FFFC                     STR_16:
  1335  00FFFC  25                 	db	37
  1336  00FFFD  63                 	db	99	;'c'
  1337  00FFFE  00                 	db	0
  1338  0000                     
  1339                           ; #config settings
  1340  00FFFF  00                 	db	0	; dummy byte at the end
  1341  0000                     
  1342                           	psect	cinit
  1343  014CB6                     __pcinit:
  1344                           	opt stack 0
  1345  014CB6                     start_initialization:
  1346                           	opt stack 0
  1347  014CB6                     __initialization:
  1348                           	opt stack 0
  1349                           
  1350                           ; Initialize objects allocated to BANK1 (16 bytes)
  1351                           ; load TBLPTR registers with __pidataBANK1
  1352  014CB6  0E7E               	movlw	low __pidataBANK1
  1353  014CB8  6EF6               	movwf	tblptrl,c
  1354  014CBA  0E6C               	movlw	high __pidataBANK1
  1355  014CBC  6EF7               	movwf	tblptrh,c
  1356  014CBE  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1357  014CC0  6EF8               	movwf	tblptru,c
  1358  014CC2  EE01  F0EC         	lfsr	0,__pdataBANK1
  1359  014CC6  EE10 F010          	lfsr	1,16
  1360  014CCA                     copy_data0:
  1361  014CCA  0009               	tblrd		*+
  1362  014CCC  CFF5 FFEE          	movff	tablat,postinc0
  1363  014CD0  50E5               	movf	postdec1,w,c
  1364  014CD2  50E1               	movf	fsr1l,w,c
  1365  014CD4  E1FA               	bnz	copy_data0
  1366                           
  1367                           ; Initialize objects allocated to BANK0 (3 bytes)
  1368                           ; load TBLPTR registers with __pidataBANK0
  1369  014CD6  0E46               	movlw	low __pidataBANK0
  1370  014CD8  6EF6               	movwf	tblptrl,c
  1371  014CDA  0E6D               	movlw	high __pidataBANK0
  1372  014CDC  6EF7               	movwf	tblptrh,c
  1373  014CDE  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1374  014CE0  6EF8               	movwf	tblptru,c
  1375  014CE2  0009               	tblrd		*+	;fetch initializer
  1376  014CE4  CFF5 F0FA          	movff	tablat,__pdataBANK0
  1377  014CE8  0009               	tblrd		*+	;fetch initializer
  1378  014CEA  CFF5 F0FB          	movff	tablat,__pdataBANK0+1
  1379  014CEE  0009               	tblrd		*+	;fetch initializer
  1380  014CF0  CFF5 F0FC          	movff	tablat,__pdataBANK0+2
  1381                           
  1382                           ; Initialize objects allocated to COMRAM (10 bytes)
  1383                           ; load TBLPTR registers with __pidataCOMRAM
  1384  014CF4  0EEA               	movlw	low __pidataCOMRAM
  1385  014CF6  6EF6               	movwf	tblptrl,c
  1386  014CF8  0E6C               	movlw	high __pidataCOMRAM
  1387  014CFA  6EF7               	movwf	tblptrh,c
  1388  014CFC  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1389  014CFE  6EF8               	movwf	tblptru,c
  1390  014D00  EE00  F046         	lfsr	0,__pdataCOMRAM
  1391  014D04  EE10 F00A          	lfsr	1,10
  1392  014D08                     copy_data1:
  1393  014D08  0009               	tblrd		*+
  1394  014D0A  CFF5 FFEE          	movff	tablat,postinc0
  1395  014D0E  50E5               	movf	postdec1,w,c
  1396  014D10  50E1               	movf	fsr1l,w,c
  1397  014D12  E1FA               	bnz	copy_data1
  1398                           
  1399                           ; Clear objects allocated to BIGRAM (300 bytes)
  1400  014D14  EE02  F07B         	lfsr	0,__pbssBIGRAM
  1401  014D18  EE11 F02C          	lfsr	1,300
  1402  014D1C                     clear_0:
  1403  014D1C  6AEE               	clrf	postinc0,c
  1404  014D1E  50E5               	movf	postdec1,w,c
  1405  014D20  50E1               	movf	fsr1l,w,c
  1406  014D22  E1FC               	bnz	clear_0
  1407  014D24  50E2               	movf	fsr1h,w,c
  1408  014D26  E1FA               	bnz	clear_0
  1409                           
  1410                           ; Clear objects allocated to BANK2 (110 bytes)
  1411  014D28  EE02  F000         	lfsr	0,__pbssBANK2
  1412  014D2C  0E6E               	movlw	110
  1413  014D2E                     clear_1:
  1414  014D2E  6AEE               	clrf	postinc0,c
  1415  014D30  06E8               	decf	wreg,f,c
  1416  014D32  E1FD               	bnz	clear_1
  1417                           
  1418                           ; Clear objects allocated to BANK1 (236 bytes)
  1419  014D34  EE01  F000         	lfsr	0,__pbssBANK1
  1420  014D38  0EEC               	movlw	236
  1421  014D3A                     clear_2:
  1422  014D3A  6AEE               	clrf	postinc0,c
  1423  014D3C  06E8               	decf	wreg,f,c
  1424  014D3E  E1FD               	bnz	clear_2
  1425                           
  1426                           ; Clear objects allocated to BANK0 (36 bytes)
  1427  014D40  EE00  F0D6         	lfsr	0,__pbssBANK0
  1428  014D44  0E24               	movlw	36
  1429  014D46                     clear_3:
  1430  014D46  6AEE               	clrf	postinc0,c
  1431  014D48  06E8               	decf	wreg,f,c
  1432  014D4A  E1FD               	bnz	clear_3
  1433                           
  1434                           ; Clear objects allocated to COMRAM (29 bytes)
  1435  014D4C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1436  014D50  0E1D               	movlw	29
  1437  014D52                     clear_4:
  1438  014D52  6AEE               	clrf	postinc0,c
  1439  014D54  06E8               	decf	wreg,f,c
  1440  014D56  E1FD               	bnz	clear_4
  1441  014D58                     end_of_initialization:
  1442                           	opt stack 0
  1443  014D58                     __end_of__initialization:
  1444                           	opt stack 0
  1445  014D58  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1446  014D5A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1447  014D5C  0100               	movlb	0
  1448  014D5E  EF0E  F094         	goto	_main	;jump to C main() function
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec1	equ	0xFE5
  1456                           fsr1h	equ	0xFE2
  1457                           fsr1l	equ	0xFE1
  1458                           
  1459                           	psect	bssCOMRAM
  1460  000029                     __pbssCOMRAM:
  1461                           	opt stack 0
  1462  000029                     _COUNTER:
  1463                           	opt stack 0
  1464  000029                     	ds	2
  1465  00002B                     HMI_GRender@a:
  1466                           	opt stack 0
  1467  00002B                     	ds	2
  1468  00002D                     _u:
  1469                           	opt stack 0
  1470  00002D                     	ds	1
  1471  00002E                     _j:
  1472                           	opt stack 0
  1473  00002E                     	ds	1
  1474  00002F                     _i:
  1475                           	opt stack 0
  1476  00002F                     	ds	1
  1477  000030                     rand@screw:
  1478                           	opt stack 0
  1479  000030                     	ds	1
  1480  000031                     _ADC_Initialised:
  1481                           	opt stack 0
  1482  000031                     	ds	1
  1483  000032                     OutSeg@a:
  1484                           	opt stack 0
  1485  000032                     	ds	1
  1486  000033                     OutSeg@segset:
  1487                           	opt stack 0
  1488  000033                     	ds	1
  1489  000034                     OutSeg@cur:
  1490                           	opt stack 0
  1491  000034                     	ds	1
  1492  000035                     _PortC:
  1493                           	opt stack 0
  1494  000035                     	ds	10
  1495  00003F                     _I2C1T:
  1496                           	opt stack 0
  1497  00003F                     	ds	7
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1h	equ	0xFE2
  1506                           fsr1l	equ	0xFE1
  1507                           
  1508                           	psect	dataCOMRAM
  1509  000046                     __pdataCOMRAM:
  1510                           	opt stack 0
  1511  000046                     _gCursor:
  1512                           	opt stack 0
  1513  000046                     	ds	4
  1514  00004A                     _Bus_State:
  1515                           	opt stack 0
  1516  00004A                     	ds	1
  1517  00004B                     	ds	1
  1518  00004C                     	ds	1
  1519  00004D                     	ds	1
  1520  00004E                     _l:
  1521                           	opt stack 0
  1522  00004E                     	ds	1
  1523  00004F                     _w:
  1524                           	opt stack 0
  1525  00004F                     	ds	1
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1h	equ	0xFE2
  1534                           fsr1l	equ	0xFE1
  1535                           
  1536                           	psect	bssBANK0
  1537  0000D6                     __pbssBANK0:
  1538                           	opt stack 0
  1539  0000D6                     _angle:
  1540                           	opt stack 0
  1541  0000D6                     	ds	4
  1542  0000DA                     _lQueue:
  1543                           	opt stack 0
  1544  0000DA                     	ds	3
  1545  0000DD                     _lStepFunction:
  1546                           	opt stack 0
  1547  0000DD                     	ds	3
  1548  0000E0                     _steps:
  1549                           	opt stack 0
  1550  0000E0                     	ds	2
  1551  0000E2                     _speed:
  1552                           	opt stack 0
  1553  0000E2                     	ds	2
  1554  0000E4                     _pShiftVal:
  1555                           	opt stack 0
  1556  0000E4                     	ds	2
  1557  0000E6                     _val:
  1558                           	opt stack 0
  1559  0000E6                     	ds	2
  1560  0000E8                     _lMotor:
  1561                           	opt stack 0
  1562  0000E8                     	ds	2
  1563  0000EA                     _lCurrent:
  1564                           	opt stack 0
  1565  0000EA                     	ds	2
  1566  0000EC                     _gBackcolour:
  1567                           	opt stack 0
  1568  0000EC                     	ds	2
  1569  0000EE                     _rightState:
  1570                           	opt stack 0
  1571  0000EE                     	ds	1
  1572  0000EF                     _leftState:
  1573                           	opt stack 0
  1574  0000EF                     	ds	1
  1575  0000F0                     _downState:
  1576                           	opt stack 0
  1577  0000F0                     	ds	1
  1578  0000F1                     _upState:
  1579                           	opt stack 0
  1580  0000F1                     	ds	1
  1581  0000F2                     Event_TestButton@j:
  1582                           	opt stack 0
  1583  0000F2                     	ds	1
  1584  0000F3                     Timer2_Init@PRE:
  1585                           	opt stack 0
  1586  0000F3                     	ds	1
  1587  0000F4                     Timer2_Init@INDEX:
  1588                           	opt stack 0
  1589  0000F4                     	ds	1
  1590  0000F5                     Timer0_Init@PRE:
  1591                           	opt stack 0
  1592  0000F5                     	ds	1
  1593  0000F6                     _INDEX:
  1594                           	opt stack 0
  1595  0000F6                     	ds	1
  1596  0000F7                     _lBufferY:
  1597                           	opt stack 0
  1598  0000F7                     	ds	1
  1599  0000F8                     _lBufferX:
  1600                           	opt stack 0
  1601  0000F8                     	ds	1
  1602  0000F9                     _clearall:
  1603                           	opt stack 0
  1604  0000F9                     	ds	1
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postdec1	equ	0xFE5
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	dataBANK0
  1616  0000FA                     __pdataBANK0:
  1617                           	opt stack 0
  1618  0000FA                     _gForecolour:
  1619                           	opt stack 0
  1620  0000FA                     	ds	2
  1621  0000FC                     _change:
  1622                           	opt stack 0
  1623  0000FC                     	ds	1
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	bssBANK1
  1635  000100                     __pbssBANK1:
  1636                           	opt stack 0
  1637  000100                     _ADCVoltage:
  1638                           	opt stack 0
  1639  000100                     	ds	4
  1640  000104                     Timer2_Init@DIV:
  1641                           	opt stack 0
  1642  000104                     	ds	4
  1643  000108                     Timer0_Init@DIV:
  1644                           	opt stack 0
  1645  000108                     	ds	4
  1646  00010C                     _gISR:
  1647                           	opt stack 0
  1648  00010C                     	ds	3
  1649  00010F                     _I2C2_More:
  1650                           	opt stack 0
  1651  00010F                     	ds	3
  1652  000112                     _I2C1_More:
  1653                           	opt stack 0
  1654  000112                     	ds	3
  1655  000115                     _I2C2_Done:
  1656                           	opt stack 0
  1657  000115                     	ds	3
  1658  000118                     _I2C1_Done:
  1659                           	opt stack 0
  1660  000118                     	ds	3
  1661  00011B                     _errno:
  1662                           	opt stack 0
  1663  00011B                     	ds	2
  1664  00011D                     _mDelta:
  1665                           	opt stack 0
  1666  00011D                     	ds	2
  1667  00011F                     _locked:
  1668                           	opt stack 0
  1669  00011F                     	ds	2
  1670  000121                     _remainingSteps:
  1671                           	opt stack 0
  1672  000121                     	ds	2
  1673  000123                     _diff:
  1674                           	opt stack 0
  1675  000123                     	ds	2
  1676  000125                     _IRDistance:
  1677                           	opt stack 0
  1678  000125                     	ds	2
  1679  000127                     _dip:
  1680                           	opt stack 0
  1681  000127                     	ds	2
  1682  000129                     _mode:
  1683                           	opt stack 0
  1684  000129                     	ds	2
  1685  00012B                     SPI_Send9@dat:
  1686                           	opt stack 0
  1687  00012B                     	ds	2
  1688  00012D                     _HMIBoard:
  1689                           	opt stack 0
  1690  00012D                     	ds	58
  1691  000167                     _SPI1:
  1692                           	opt stack 0
  1693  000167                     	ds	11
  1694  000172                     _SPI2:
  1695                           	opt stack 0
  1696  000172                     	ds	11
  1697  00017D                     _DIPSwitch:
  1698                           	opt stack 0
  1699  00017D                     	ds	10
  1700  000187                     _TestButton:
  1701                           	opt stack 0
  1702  000187                     	ds	10
  1703  000191                     _PortG:
  1704                           	opt stack 0
  1705  000191                     	ds	10
  1706  00019B                     _PortE:
  1707                           	opt stack 0
  1708  00019B                     	ds	10
  1709  0001A5                     _PortD:
  1710                           	opt stack 0
  1711  0001A5                     	ds	10
  1712  0001AF                     _PortB:
  1713                           	opt stack 0
  1714  0001AF                     	ds	10
  1715  0001B9                     _PortF:
  1716                           	opt stack 0
  1717  0001B9                     	ds	10
  1718  0001C3                     _I2C2T:
  1719                           	opt stack 0
  1720  0001C3                     	ds	7
  1721  0001CA                     _Stepper:
  1722                           	opt stack 0
  1723  0001CA                     	ds	6
  1724  0001D0                     _ADC_AN3:
  1725                           	opt stack 0
  1726  0001D0                     	ds	5
  1727  0001D5                     _ADC_AN2:
  1728                           	opt stack 0
  1729  0001D5                     	ds	5
  1730  0001DA                     _ADC_AN1:
  1731                           	opt stack 0
  1732  0001DA                     	ds	5
  1733  0001DF                     _ADC_AN0:
  1734                           	opt stack 0
  1735  0001DF                     	ds	5
  1736  0001E4                     LCD_DrawRectangle@p4:
  1737                           	opt stack 0
  1738  0001E4                     	ds	4
  1739  0001E8                     LCD_DrawRectangle@p2:
  1740                           	opt stack 0
  1741  0001E8                     	ds	4
  1742                           tblptru	equ	0xFF8
  1743                           tblptrh	equ	0xFF7
  1744                           tblptrl	equ	0xFF6
  1745                           tablat	equ	0xFF5
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postdec1	equ	0xFE5
  1749                           fsr1h	equ	0xFE2
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	dataBANK1
  1753  0001EC                     __pdataBANK1:
  1754                           	opt stack 0
  1755  0001EC                     Console_Render@F6956:
  1756                           	opt stack 0
  1757  0001EC                     	ds	4
  1758  0001F0                     _gLineSize:
  1759                           	opt stack 0
  1760  0001F0                     	ds	4
  1761  0001F4                     _gCharSize:
  1762                           	opt stack 0
  1763  0001F4                     	ds	4
  1764  0001F8                     _currentPos:
  1765                           	opt stack 0
  1766  0001F8                     	ds	2
  1767  0001FA                     _direction:
  1768                           	opt stack 0
  1769  0001FA                     	ds	2
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           postdec1	equ	0xFE5
  1777                           fsr1h	equ	0xFE2
  1778                           fsr1l	equ	0xFE1
  1779                           
  1780                           	psect	bssBANK2
  1781  000200                     __pbssBANK2:
  1782                           	opt stack 0
  1783  000200                     _lCBuffer:
  1784                           	opt stack 0
  1785  000200                     	ds	30
  1786  00021E                     Console_MakeField@Fill:
  1787                           	opt stack 0
  1788  00021E                     	ds	70
  1789  000264                     _PortA:
  1790                           	opt stack 0
  1791  000264                     	ds	10
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1h	equ	0xFE2
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           	psect	bssBIGRAM
  1803  00027B                     __pbssBIGRAM:
  1804                           	opt stack 0
  1805  00027B                     _lBuffer:
  1806                           	opt stack 0
  1807  00027B                     	ds	300
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK2
  1819  00026E                     __pcstackBANK2:
  1820                           	opt stack 0
  1821  00026E                     _pow$15222:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0x0
  1825  00026E                     	ds	4
  1826  000272                     _pow$15223:
  1827                           	opt stack 0
  1828                           
  1829                           ; 4 bytes @ 0x4
  1830  000272                     	ds	4
  1831  000276                     pow@sign:
  1832                           	opt stack 0
  1833                           
  1834                           ; 1 bytes @ 0x8
  1835  000276                     	ds	1
  1836  000277                     pow@yi:
  1837                           	opt stack 0
  1838                           
  1839                           ; 4 bytes @ 0x9
  1840  000277                     	ds	4
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1h	equ	0xFE2
  1849                           fsr1l	equ	0xFE1
  1850                           
  1851                           	psect	cstackBANK1
  1852  0001FC                     __pcstackBANK1:
  1853                           	opt stack 0
  1854  0001FC                     _main$15221:
  1855                           	opt stack 0
  1856                           
  1857                           ; 4 bytes @ 0x0
  1858  0001FC                     	ds	4
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           postdec1	equ	0xFE5
  1866                           fsr1h	equ	0xFE2
  1867                           fsr1l	equ	0xFE1
  1868                           
  1869                           	psect	cstackBANK0
  1870  000060                     __pcstackBANK0:
  1871                           	opt stack 0
  1872  000060                     ??_Console_ClearCursor:
  1873  000060                     ??_ADC_SetChannel:
  1874  000060                     ??_ADC_ConversionTime:
  1875  000060                     ??_ADC_SetupIO:
  1876  000060                     ??_Console_Init:
  1877  000060                     ??_Console_NewLine:
  1878  000060                     ??_Console_FormFeed:
  1879  000060                     ??_HMI_SetButton:
  1880  000060                     ??_getMode:
  1881  000060                     ?_GetPortProperties:
  1882                           	opt stack 0
  1883  000060                     ?_GetPortPORT:
  1884                           	opt stack 0
  1885  000060                     ?_GetPortTRIS:
  1886                           	opt stack 0
  1887  000060                     ?___wmul:
  1888                           	opt stack 0
  1889  000060                     ?___lwdiv:
  1890                           	opt stack 0
  1891  000060                     ?___fldiv:
  1892                           	opt stack 0
  1893  000060                     ?_frexp:
  1894                           	opt stack 0
  1895  000060                     ?___lldiv:
  1896                           	opt stack 0
  1897  000060                     Mode_Set@pMode:
  1898                           	opt stack 0
  1899  000060                     ToSegment@pCHR:
  1900                           	opt stack 0
  1901  000060                     HMI_SetBar@pValue:
  1902                           	opt stack 0
  1903  000060                     ADC_ClockDivision@pDivide:
  1904                           	opt stack 0
  1905  000060                     Port_GetPin@pInput:
  1906                           	opt stack 0
  1907  000060                     Port_GetQuad@pInput:
  1908                           	opt stack 0
  1909  000060                     SPI_DisableISR@pInput:
  1910                           	opt stack 0
  1911  000060                     SPI_DCS@pInput:
  1912                           	opt stack 0
  1913  000060                     SPI_Send@pInput:
  1914                           	opt stack 0
  1915  000060                     Byte_SetBit@pInput:
  1916                           	opt stack 0
  1917  000060                     Byte_GetBit@pInput:
  1918                           	opt stack 0
  1919  000060                     Byte_SetZone@pInput:
  1920                           	opt stack 0
  1921  000060                     Byte_GetZone@pInput:
  1922                           	opt stack 0
  1923  000060                     Byte_SetByte@pInput:
  1924                           	opt stack 0
  1925  000060                     delay_ms@ms:
  1926                           	opt stack 0
  1927  000060                     delay_us@us:
  1928                           	opt stack 0
  1929  000060                     reverse@input:
  1930                           	opt stack 0
  1931  000060                     Console_SetForecolour@pColour:
  1932                           	opt stack 0
  1933  000060                     ADC_Sequence@pItemA:
  1934                           	opt stack 0
  1935  000060                     ___wmul@multiplier:
  1936                           	opt stack 0
  1937  000060                     ___lwdiv@dividend:
  1938                           	opt stack 0
  1939  000060                     MXK_Queue@pCallback:
  1940                           	opt stack 0
  1941  000060                     Timer0_Start@pFunction:
  1942                           	opt stack 0
  1943  000060                     ___flge@ff1:
  1944                           	opt stack 0
  1945  000060                     ___lldiv@dividend:
  1946                           	opt stack 0
  1947  000060                     ___fldiv@b:
  1948                           	opt stack 0
  1949  000060                     frexp@value:
  1950                           	opt stack 0
  1951                           
  1952                           ; 4 bytes @ 0x0
  1953  000060                     	ds	1
  1954  000061                     ADC_SetChannel@pChannel:
  1955                           	opt stack 0
  1956  000061                     ADC_ClockDivision@reg:
  1957                           	opt stack 0
  1958  000061                     ADC_ConversionTime@pCount:
  1959                           	opt stack 0
  1960  000061                     HMI_SetSegments@pString:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x1
  1964  000061                     	ds	1
  1965  000062                     GetPortProperties@pInput:
  1966                           	opt stack 0
  1967  000062                     GetPortPORT@pInput:
  1968                           	opt stack 0
  1969  000062                     GetPortTRIS@pInput:
  1970                           	opt stack 0
  1971  000062                     Port_GetPin@pPin:
  1972                           	opt stack 0
  1973  000062                     Port_GetQuad@pQuad:
  1974                           	opt stack 0
  1975  000062                     SPI_Send@pData:
  1976                           	opt stack 0
  1977  000062                     Byte_SetBit@pBit:
  1978                           	opt stack 0
  1979  000062                     Byte_GetBit@pBit:
  1980                           	opt stack 0
  1981  000062                     Byte_SetZone@pMax:
  1982                           	opt stack 0
  1983  000062                     Byte_GetZone@pMax:
  1984                           	opt stack 0
  1985  000062                     Byte_SetByte@pValue:
  1986                           	opt stack 0
  1987  000062                     Console_Init@x:
  1988                           	opt stack 0
  1989  000062                     Console_FormFeed@x:
  1990                           	opt stack 0
  1991  000062                     ADC_SetupIO@pChannel:
  1992                           	opt stack 0
  1993  000062                     ADC_ClockDivision@unfound:
  1994                           	opt stack 0
  1995  000062                     reverse@length:
  1996                           	opt stack 0
  1997  000062                     ADC_Sequence@pItemB:
  1998                           	opt stack 0
  1999  000062                     ADC_Start@pInput:
  2000                           	opt stack 0
  2001  000062                     ___wmul@multiplicand:
  2002                           	opt stack 0
  2003  000062                     ___lwdiv@divisor:
  2004                           	opt stack 0
  2005  000062                     delay_ms@u:
  2006                           	opt stack 0
  2007  000062                     delay_us@u:
  2008                           	opt stack 0
  2009  000062                     HMI_SetButton@reindex:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x2
  2013  000062                     	ds	1
  2014  000063                     ??_Port_GetPin:
  2015  000063                     ??_Port_GetQuad:
  2016  000063                     ??_Byte_GetBit:
  2017  000063                     LCD_Write@mode:
  2018                           	opt stack 0
  2019  000063                     Byte_SetBit@pValue:
  2020                           	opt stack 0
  2021  000063                     Byte_SetZone@pChunk:
  2022                           	opt stack 0
  2023  000063                     Byte_GetZone@pChunk:
  2024                           	opt stack 0
  2025  000063                     Console_Init@y:
  2026                           	opt stack 0
  2027  000063                     Console_FormFeed@y:
  2028                           	opt stack 0
  2029  000063                     OutSeg@pSegment:
  2030                           	opt stack 0
  2031  000063                     ADC_SetupIO@MASK:
  2032                           	opt stack 0
  2033  000063                     Motor_Move@pMotor:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x3
  2037  000063                     	ds	1
  2038  000064                     ??_Byte_SetBit:
  2039  000064                     ??_Console_IncrementCursor:
  2040  000064                     ??_OutSeg:
  2041  000064                     ??_ADC_Start:
  2042  000064                     LCD_Write@value:
  2043                           	opt stack 0
  2044  000064                     Byte_GetBit@Output:
  2045                           	opt stack 0
  2046  000064                     Byte_SetZone@pChunkSize:
  2047                           	opt stack 0
  2048  000064                     Byte_GetZone@pChunkSize:
  2049                           	opt stack 0
  2050  000064                     reverse@tempVar:
  2051                           	opt stack 0
  2052  000064                     ___lwdiv@counter:
  2053                           	opt stack 0
  2054  000064                     HMI_SetSegments@in:
  2055                           	opt stack 0
  2056  000064                     ADC_Init@pInput:
  2057                           	opt stack 0
  2058  000064                     ___wmul@product:
  2059                           	opt stack 0
  2060  000064                     frexp@eptr:
  2061                           	opt stack 0
  2062  000064                     ___flge@ff2:
  2063                           	opt stack 0
  2064  000064                     ___lldiv@divisor:
  2065                           	opt stack 0
  2066  000064                     ___fldiv@a:
  2067                           	opt stack 0
  2068                           
  2069                           ; 4 bytes @ 0x4
  2070  000064                     	ds	1
  2071  000065                     ??_Byte_GetZone:
  2072  000065                     ?_Console_MakeField:
  2073                           	opt stack 0
  2074  000065                     Set_Addr_Window@ys:
  2075                           	opt stack 0
  2076  000065                     Set_Rotation@m:
  2077                           	opt stack 0
  2078  000065                     Port_GetPin@Output:
  2079                           	opt stack 0
  2080  000065                     Port_GetQuad@Output:
  2081                           	opt stack 0
  2082  000065                     Byte_SetZone@pValue:
  2083                           	opt stack 0
  2084  000065                     LCD_Word_Write@value:
  2085                           	opt stack 0
  2086  000065                     reverse@iterator:
  2087                           	opt stack 0
  2088  000065                     Motor_Move@pDelta:
  2089                           	opt stack 0
  2090  000065                     ___lwdiv@quotient:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x5
  2094  000065                     	ds	1
  2095  000066                     ??_frexp:
  2096  000066                     ??_Byte_SetZone:
  2097  000066                     ?___awdiv:
  2098                           	opt stack 0
  2099  000066                     Set_Addr_Window@xe:
  2100                           	opt stack 0
  2101  000066                     Set_Rotation@rotation:
  2102                           	opt stack 0
  2103  000066                     Byte_GetZone@MASK:
  2104                           	opt stack 0
  2105  000066                     OutSeg@pInput:
  2106                           	opt stack 0
  2107  000066                     HMI_SetButton@pValue:
  2108                           	opt stack 0
  2109  000066                     ADC_Init@pChannel:
  2110                           	opt stack 0
  2111  000066                     MXK_BlockSwitchTo@CUR:
  2112                           	opt stack 0
  2113  000066                     MXK_SwitchTo@CUR:
  2114                           	opt stack 0
  2115  000066                     ___awdiv@dividend:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x6
  2119  000066                     	ds	1
  2120  000067                     ??_Console_MakeField:
  2121  000067                     ?___lwmod:
  2122                           	opt stack 0
  2123  000067                     Set_Addr_Window@ye:
  2124                           	opt stack 0
  2125  000067                     Byte_GetZone@Offset:
  2126                           	opt stack 0
  2127  000067                     OutSeg@out:
  2128                           	opt stack 0
  2129  000067                     HMI_SetButton@v:
  2130                           	opt stack 0
  2131  000067                     MXK_BlockSwitchTo@pModule:
  2132                           	opt stack 0
  2133  000067                     MXK_SwitchTo@pModule:
  2134                           	opt stack 0
  2135  000067                     ___lwmod@dividend:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x7
  2139  000067                     	ds	1
  2140  000068                     ??___fldiv:
  2141  000068                     ??___flge:
  2142  000068                     Set_Addr_Window@xs:
  2143                           	opt stack 0
  2144  000068                     Byte_GetZone@Output:
  2145                           	opt stack 0
  2146  000068                     HMI_Render@a:
  2147                           	opt stack 0
  2148  000068                     ___awdiv@divisor:
  2149                           	opt stack 0
  2150  000068                     ___lldiv@quotient:
  2151                           	opt stack 0
  2152                           
  2153                           ; 4 bytes @ 0x8
  2154  000068                     	ds	1
  2155  000069                     Byte_SetZone@Offset:
  2156                           	opt stack 0
  2157  000069                     LCD_Fill@pColour:
  2158                           	opt stack 0
  2159  000069                     LCD_FillRectangle@pColour:
  2160                           	opt stack 0
  2161  000069                     Byte_GetPair@pInput:
  2162                           	opt stack 0
  2163  000069                     Console_MakeField@Index:
  2164                           	opt stack 0
  2165  000069                     ___lwmod@divisor:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x9
  2169  000069                     	ds	1
  2170  00006A                     Byte_SetZone@MASK:
  2171                           	opt stack 0
  2172  00006A                     ___awdiv@counter:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0xA
  2176  00006A                     	ds	1
  2177  00006B                     LCD_Fill@i:
  2178                           	opt stack 0
  2179  00006B                     Byte_GetPair@pPair:
  2180                           	opt stack 0
  2181  00006B                     Console_MakeField@pInput:
  2182                           	opt stack 0
  2183  00006B                     ___awdiv@sign:
  2184                           	opt stack 0
  2185  00006B                     ___lwmod@counter:
  2186                           	opt stack 0
  2187  00006B                     Byte_SetPair@pInput:
  2188                           	opt stack 0
  2189  00006B                     Byte_SetQuad@pInput:
  2190                           	opt stack 0
  2191  00006B                     LCD_FillRectangle@pPoint:
  2192                           	opt stack 0
  2193                           
  2194                           ; 4 bytes @ 0xB
  2195  00006B                     	ds	1
  2196  00006C                     LCD_Fill@j:
  2197                           	opt stack 0
  2198  00006C                     ___lldiv@counter:
  2199                           	opt stack 0
  2200  00006C                     ___fldiv@sign:
  2201                           	opt stack 0
  2202  00006C                     Word_GetPair@pInput:
  2203                           	opt stack 0
  2204  00006C                     itos@input:
  2205                           	opt stack 0
  2206  00006C                     Console_MakeField@Column:
  2207                           	opt stack 0
  2208  00006C                     ___awdiv@quotient:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0xC
  2212  00006C                     	ds	1
  2213  00006D                     Byte_SetPair@pPair:
  2214                           	opt stack 0
  2215  00006D                     Byte_SetQuad@pQuad:
  2216                           	opt stack 0
  2217  00006D                     Timer0_Init@pFrequency:
  2218                           	opt stack 0
  2219  00006D                     Timer2_Init@pFrequency:
  2220                           	opt stack 0
  2221  00006D                     ___fldiv@rem:
  2222                           	opt stack 0
  2223                           
  2224                           ; 4 bytes @ 0xD
  2225  00006D                     	ds	1
  2226  00006E                     ??_Console_Tab:
  2227  00006E                     ?___xxtofl:
  2228                           	opt stack 0
  2229  00006E                     Byte_SetPair@pValue:
  2230                           	opt stack 0
  2231  00006E                     Byte_SetQuad@pValue:
  2232                           	opt stack 0
  2233  00006E                     Word_GetPair@pPair:
  2234                           	opt stack 0
  2235  00006E                     itos@destination:
  2236                           	opt stack 0
  2237  00006E                     _Console_MakeField$10974:
  2238                           	opt stack 0
  2239  00006E                     ___xxtofl@val:
  2240                           	opt stack 0
  2241                           
  2242                           ; 4 bytes @ 0xE
  2243  00006E                     	ds	1
  2244  00006F                     Port_SetPin@pInput:
  2245                           	opt stack 0
  2246  00006F                     Port_Set@pInput:
  2247                           	opt stack 0
  2248  00006F                     SPI_MinSpeed@pInput:
  2249                           	opt stack 0
  2250  00006F                     SPI_MaxSpeed@pInput:
  2251                           	opt stack 0
  2252  00006F                     Word_SetPair@pInput:
  2253                           	opt stack 0
  2254  00006F                     PortProperty_Valid@pInput:
  2255                           	opt stack 0
  2256  00006F                     LCD_FillRectangle@pSize:
  2257                           	opt stack 0
  2258                           
  2259                           ; 4 bytes @ 0xF
  2260  00006F                     	ds	1
  2261  000070                     Console_MakeField@x:
  2262                           	opt stack 0
  2263  000070                     itos@Data:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x10
  2267  000070                     	ds	1
  2268  000071                     ??_Timer2_Init:
  2269  000071                     ??_Timer0_Init:
  2270  000071                     Port_SetPin@pPin:
  2271                           	opt stack 0
  2272  000071                     Port_Set@pValue:
  2273                           	opt stack 0
  2274  000071                     Word_SetPair@pPair:
  2275                           	opt stack 0
  2276  000071                     PortProperty_Valid@pPinDrive:
  2277                           	opt stack 0
  2278  000071                     Console_MakeField@y:
  2279                           	opt stack 0
  2280  000071                     ___fldiv@new_exp:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x11
  2284  000071                     	ds	1
  2285  000072                     ??_Port_Set:
  2286  000072                     ??___xxtofl:
  2287  000072                     Port_SetPin@pValue:
  2288                           	opt stack 0
  2289  000072                     Word_SetPair@pValue:
  2290                           	opt stack 0
  2291  000072                     PortProperty_Valid@pPin:
  2292                           	opt stack 0
  2293  000072                     LCD_DrawField@pField:
  2294                           	opt stack 0
  2295  000072                     itos@Length:
  2296                           	opt stack 0
  2297  000072                     Timer2_Init@RDIV:
  2298                           	opt stack 0
  2299                           
  2300                           ; 4 bytes @ 0x12
  2301  000072                     	ds	1
  2302  000073                     ??_PortProperty_Valid:
  2303  000073                     ??_LCD_FillRectangle:
  2304  000073                     Port_SetPin@Type:
  2305                           	opt stack 0
  2306  000073                     Console_Tab@t:
  2307                           	opt stack 0
  2308  000073                     Timer0_Init@pCPUClock:
  2309                           	opt stack 0
  2310  000073                     ___fldiv@grs:
  2311                           	opt stack 0
  2312                           
  2313                           ; 4 bytes @ 0x13
  2314  000073                     	ds	1
  2315  000074                     LED_Set@pValue:
  2316                           	opt stack 0
  2317  000074                     Console_Tab@i:
  2318                           	opt stack 0
  2319  000074                     Port_TogglePin@pInput:
  2320                           	opt stack 0
  2321  000074                     itos@Out:
  2322                           	opt stack 0
  2323  000074                     LCD_DrawField@pPoint:
  2324                           	opt stack 0
  2325                           
  2326                           ; 4 bytes @ 0x14
  2327  000074                     	ds	1
  2328  000075                     LCD_FillRectangle@i:
  2329                           	opt stack 0
  2330  000075                     LED_Set@pLED:
  2331                           	opt stack 0
  2332  000075                     Console_Tab@c:
  2333                           	opt stack 0
  2334  000075                     PortProperty_Valid@Errors:
  2335                           	opt stack 0
  2336                           
  2337                           ; 16 bytes @ 0x15
  2338  000075                     	ds	1
  2339  000076                     ??_Console_PrintChar:
  2340  000076                     LCD_FillRectangle@j:
  2341                           	opt stack 0
  2342  000076                     Port_TogglePin@pPin:
  2343                           	opt stack 0
  2344  000076                     ___xxtofl@sign:
  2345                           	opt stack 0
  2346  000076                     HMI_SetNumber@pInput:
  2347                           	opt stack 0
  2348  000076                     Timer2_Init@pCPUClock:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0x16
  2352  000076                     	ds	1
  2353  000077                     Port_TogglePin@Value:
  2354                           	opt stack 0
  2355  000077                     ___fldiv@bexp:
  2356                           	opt stack 0
  2357  000077                     ___xxtofl@exp:
  2358                           	opt stack 0
  2359  000077                     Timer0_Init@DIVIDE:
  2360                           	opt stack 0
  2361                           
  2362                           ; 4 bytes @ 0x17
  2363  000077                     	ds	1
  2364  000078                     LED_Toggle@pLED:
  2365                           	opt stack 0
  2366  000078                     ___fldiv@aexp:
  2367                           	opt stack 0
  2368  000078                     LCD_DrawField@pSize:
  2369                           	opt stack 0
  2370  000078                     ___xxtofl@arg:
  2371                           	opt stack 0
  2372                           
  2373                           ; 4 bytes @ 0x18
  2374  000078                     	ds	1
  2375  000079                     Console_PrintChar@pInput:
  2376                           	opt stack 0
  2377  000079                     Event_DIPSwitch@pState:
  2378                           	opt stack 0
  2379  000079                     Event_TestButton@pState:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x19
  2383  000079                     	ds	1
  2384  00007A                     putch@c:
  2385                           	opt stack 0
  2386  00007A                     Event_DIPSwitch@Bar:
  2387                           	opt stack 0
  2388  00007A                     Timer2_Init@DIVIDE:
  2389                           	opt stack 0
  2390                           
  2391                           ; 4 bytes @ 0x1A
  2392  00007A                     	ds	1
  2393  00007B                     ?_printf:
  2394                           	opt stack 0
  2395  00007B                     Button_Poll@pButton:
  2396                           	opt stack 0
  2397  00007B                     Motor_Speed@pMotor:
  2398                           	opt stack 0
  2399  00007B                     printf@f:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x1B
  2403  00007B                     	ds	1
  2404  00007C                     ??_LCD_DrawField:
  2405  00007C                     ?___flmul:
  2406                           	opt stack 0
  2407  00007C                     ?___flneg:
  2408                           	opt stack 0
  2409  00007C                     ___flneg@f1:
  2410                           	opt stack 0
  2411  00007C                     ___flmul@b:
  2412                           	opt stack 0
  2413                           
  2414                           ; 4 bytes @ 0x1C
  2415  00007C                     	ds	1
  2416  00007D                     Button_Poll@pIncrement:
  2417                           	opt stack 0
  2418  00007D                     Motor_Speed@pFrequency:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x1D
  2422  00007D                     	ds	1
  2423  00007E                     ??_Button_Poll:
  2424  00007E                     LCD_DrawField@count:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x1E
  2428  00007E                     	ds	1
  2429  00007F                     ??_printf:
  2430  00007F                     
  2431                           ; 1 bytes @ 0x1F
  2432  00007F                     	ds	1
  2433  000080                     LCD_DrawField@xmax:
  2434                           	opt stack 0
  2435  000080                     printf@flag:
  2436                           	opt stack 0
  2437  000080                     ___flmul@a:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0x20
  2441  000080                     	ds	1
  2442  000081                     LCD_DrawField@ymax:
  2443                           	opt stack 0
  2444  000081                     printf@prec:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x21
  2448  000081                     	ds	1
  2449  000082                     LCD_DrawField@i:
  2450                           	opt stack 0
  2451  000082                     Port_Set@TypeRequired:
  2452                           	opt stack 0
  2453  000082                     printf@ap:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x22
  2457  000082                     	ds	1
  2458  000083                     ??_Console_Render:
  2459  000083                     Button_Poll@Pin:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x23
  2463  000083                     	ds	1
  2464  000084                     ??___flmul:
  2465  000084                     ??_inputVar:
  2466  000084                     Port_Set@TypeActual:
  2467                           	opt stack 0
  2468  000084                     printf@val:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x24
  2472  000084                     	ds	1
  2473  000085                     PortProperty_Valid@Pair:
  2474                           	opt stack 0
  2475  000085                     Console_Render@temp:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x25
  2479  000085                     	ds	1
  2480  000086                     Port_Set@Type:
  2481                           	opt stack 0
  2482  000086                     printf@c:
  2483                           	opt stack 0
  2484  000086                     Port_CheckPairType@pInput:
  2485                           	opt stack 0
  2486  000086                     Port_SetPinType@pInput:
  2487                           	opt stack 0
  2488  000086                     Console_Render@lCursor:
  2489                           	opt stack 0
  2490                           
  2491                           ; 4 bytes @ 0x26
  2492  000086                     	ds	1
  2493  000087                     
  2494                           ; 1 bytes @ 0x27
  2495  000087                     	ds	1
  2496  000088                     Port_CheckPairType@pPair:
  2497                           	opt stack 0
  2498  000088                     Port_SetPinType@pPin:
  2499                           	opt stack 0
  2500  000088                     ___flmul@sign:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x28
  2504  000088                     	ds	1
  2505  000089                     Port_CheckPairType@pDrive:
  2506                           	opt stack 0
  2507  000089                     Port_SetPinType@pType:
  2508                           	opt stack 0
  2509  000089                     ___flmul@aexp:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x29
  2513  000089                     	ds	1
  2514  00008A                     Port_CheckPairType@Pin1:
  2515                           	opt stack 0
  2516  00008A                     Port_SetPinType@Output:
  2517                           	opt stack 0
  2518  00008A                     Console_Render@x:
  2519                           	opt stack 0
  2520  00008A                     ___flmul@grs:
  2521                           	opt stack 0
  2522                           
  2523                           ; 4 bytes @ 0x2A
  2524  00008A                     	ds	1
  2525  00008B                     Port_CheckPairType@Pin2:
  2526                           	opt stack 0
  2527  00008B                     Console_Render@y:
  2528                           	opt stack 0
  2529  00008B                     Port_SetPinType@Props:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x2B
  2533  00008B                     	ds	1
  2534  00008C                     Port_CheckPairType@Output:
  2535                           	opt stack 0
  2536                           
  2537                           ; 1 bytes @ 0x2C
  2538  00008C                     	ds	1
  2539  00008D                     LED_Init@pLED:
  2540                           	opt stack 0
  2541  00008D                     Port_CheckPairType@Props:
  2542                           	opt stack 0
  2543  00008D                     Motor_Init@pMotor:
  2544                           	opt stack 0
  2545  00008D                     SPI_Init@pClock:
  2546                           	opt stack 0
  2547                           
  2548                           ; 4 bytes @ 0x2D
  2549  00008D                     	ds	1
  2550  00008E                     ___flmul@bexp:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x2E
  2554  00008E                     	ds	1
  2555  00008F                     Port_CheckQuadType@pInput:
  2556                           	opt stack 0
  2557  00008F                     Motor_Init@pAddress:
  2558                           	opt stack 0
  2559  00008F                     ___flmul@prod:
  2560                           	opt stack 0
  2561                           
  2562                           ; 4 bytes @ 0x2F
  2563  00008F                     	ds	2
  2564  000091                     Port_CheckQuadType@pQuad:
  2565                           	opt stack 0
  2566  000091                     SPI_Init@pChannel:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x31
  2570  000091                     	ds	1
  2571  000092                     Port_CheckQuadType@pDrive:
  2572                           	opt stack 0
  2573  000092                     SPI_Init@pMode:
  2574                           	opt stack 0
  2575                           
  2576                           ; 1 bytes @ 0x32
  2577  000092                     	ds	1
  2578  000093                     Port_CheckQuadType@Pair1:
  2579                           	opt stack 0
  2580  000093                     SPI_Init@pInput:
  2581                           	opt stack 0
  2582  000093                     ___flmul@temp:
  2583                           	opt stack 0
  2584                           
  2585                           ; 2 bytes @ 0x33
  2586  000093                     	ds	1
  2587  000094                     Port_CheckQuadType@Pair2:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x34
  2591  000094                     	ds	1
  2592  000095                     ??_LCD_Init:
  2593  000095                     ?___fladd:
  2594                           	opt stack 0
  2595  000095                     ?_ADC_Voltage:
  2596                           	opt stack 0
  2597  000095                     Port_CheckQuadType@Output:
  2598                           	opt stack 0
  2599  000095                     ADC_Voltage@pInput:
  2600                           	opt stack 0
  2601  000095                     ___fladd@b:
  2602                           	opt stack 0
  2603                           
  2604                           ; 4 bytes @ 0x35
  2605  000095                     	ds	1
  2606  000096                     Port_CheckPortType@pInput:
  2607                           	opt stack 0
  2608  000096                     Port_SetQuadType@pInput:
  2609                           	opt stack 0
  2610                           
  2611                           ; 2 bytes @ 0x36
  2612  000096                     	ds	1
  2613  000097                     LCD_Init@i:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x37
  2617  000097                     	ds	1
  2618  000098                     Port_CheckPortType@pDrive:
  2619                           	opt stack 0
  2620  000098                     Port_SetQuadType@pQuad:
  2621                           	opt stack 0
  2622                           
  2623                           ; 1 bytes @ 0x38
  2624  000098                     	ds	1
  2625  000099                     ??_ADC_Voltage:
  2626  000099                     Port_CheckPortType@Output:
  2627                           	opt stack 0
  2628  000099                     Port_SetQuadType@pType:
  2629                           	opt stack 0
  2630  000099                     ___fladd@a:
  2631                           	opt stack 0
  2632                           
  2633                           ; 4 bytes @ 0x39
  2634  000099                     	ds	1
  2635  00009A                     Port_SetQuadType@Output:
  2636                           	opt stack 0
  2637  00009A                     Port_SetType@pInput:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x3A
  2641  00009A                     	ds	1
  2642  00009B                     Button_Init@pInput:
  2643                           	opt stack 0
  2644  00009B                     ADC_Voltage@max:
  2645                           	opt stack 0
  2646                           
  2647                           ; 4 bytes @ 0x3B
  2648  00009B                     	ds	1
  2649  00009C                     Port_SetType@pType:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x3C
  2653  00009C                     	ds	1
  2654  00009D                     ??_Port_SetType:
  2655  00009D                     ??___fladd:
  2656  00009D                     Button_Init@pThreshold:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x3D
  2660  00009D                     	ds	2
  2661  00009F                     Port_SetType@Output:
  2662                           	opt stack 0
  2663  00009F                     Button_Init@pInitIO:
  2664                           	opt stack 0
  2665  00009F                     ADC_Voltage@ref:
  2666                           	opt stack 0
  2667                           
  2668                           ; 4 bytes @ 0x3F
  2669  00009F                     	ds	1
  2670  0000A0                     Port_Init@pInput:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x40
  2674  0000A0                     	ds	2
  2675  0000A2                     Port_Init@pPort:
  2676                           	opt stack 0
  2677  0000A2                     Button_Init@pGetState:
  2678                           	opt stack 0
  2679                           
  2680                           ; 3 bytes @ 0x42
  2681  0000A2                     	ds	1
  2682  0000A3                     ??_Port_Init:
  2683  0000A3                     ADC_Voltage@output:
  2684                           	opt stack 0
  2685                           
  2686                           ; 4 bytes @ 0x43
  2687  0000A3                     	ds	2
  2688  0000A5                     Port_Init@i:
  2689                           	opt stack 0
  2690  0000A5                     ___fladd@signs:
  2691                           	opt stack 0
  2692  0000A5                     Button_Init@pFunction:
  2693                           	opt stack 0
  2694                           
  2695                           ; 3 bytes @ 0x45
  2696  0000A5                     	ds	1
  2697  0000A6                     ___fladd@aexp:
  2698                           	opt stack 0
  2699                           
  2700                           ; 1 bytes @ 0x46
  2701  0000A6                     	ds	1
  2702  0000A7                     ___fladd@bexp:
  2703                           	opt stack 0
  2704                           
  2705                           ; 1 bytes @ 0x47
  2706  0000A7                     	ds	1
  2707  0000A8                     ___fladd@grs:
  2708                           	opt stack 0
  2709  0000A8                     HMI_Init@in:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x48
  2713  0000A8                     	ds	1
  2714  0000A9                     ?___flsub:
  2715                           	opt stack 0
  2716  0000A9                     ?_eval_poly:
  2717                           	opt stack 0
  2718  0000A9                     ?___fltol:
  2719                           	opt stack 0
  2720  0000A9                     ___fltol@f1:
  2721                           	opt stack 0
  2722  0000A9                     ___flsub@b:
  2723                           	opt stack 0
  2724  0000A9                     eval_poly@x:
  2725                           	opt stack 0
  2726                           
  2727                           ; 4 bytes @ 0x49
  2728  0000A9                     	ds	1
  2729  0000AA                     
  2730                           ; 1 bytes @ 0x4A
  2731  0000AA                     	ds	3
  2732  0000AD                     ??___fltol:
  2733  0000AD                     eval_poly@d:
  2734                           	opt stack 0
  2735  0000AD                     ___flsub@a:
  2736                           	opt stack 0
  2737                           
  2738                           ; 4 bytes @ 0x4D
  2739  0000AD                     	ds	2
  2740  0000AF                     eval_poly@n:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x4F
  2744  0000AF                     	ds	2
  2745  0000B1                     ??_eval_poly:
  2746  0000B1                     ___fltol@sign1:
  2747                           	opt stack 0
  2748                           
  2749                           ; 1 bytes @ 0x51
  2750  0000B1                     	ds	1
  2751  0000B2                     ___fltol@exp1:
  2752                           	opt stack 0
  2753                           
  2754                           ; 1 bytes @ 0x52
  2755  0000B2                     	ds	1
  2756  0000B3                     ?_floor:
  2757                           	opt stack 0
  2758  0000B3                     displayPositionMode@angleDegrees:
  2759                           	opt stack 0
  2760  0000B3                     floor@x:
  2761                           	opt stack 0
  2762                           
  2763                           ; 4 bytes @ 0x53
  2764  0000B3                     	ds	2
  2765  0000B5                     eval_poly@res:
  2766                           	opt stack 0
  2767                           
  2768                           ; 4 bytes @ 0x55
  2769  0000B5                     	ds	2
  2770  0000B7                     floor@i:
  2771                           	opt stack 0
  2772                           
  2773                           ; 4 bytes @ 0x57
  2774  0000B7                     	ds	2
  2775  0000B9                     ?_log:
  2776                           	opt stack 0
  2777  0000B9                     ?_ldexp:
  2778                           	opt stack 0
  2779  0000B9                     ldexp@value:
  2780                           	opt stack 0
  2781  0000B9                     log@x:
  2782                           	opt stack 0
  2783                           
  2784                           ; 4 bytes @ 0x59
  2785  0000B9                     	ds	2
  2786  0000BB                     floor@expon:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x5B
  2790  0000BB                     	ds	2
  2791  0000BD                     ldexp@newexp:
  2792                           	opt stack 0
  2793  0000BD                     log@exponent:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0x5D
  2797  0000BD                     	ds	2
  2798  0000BF                     ??_ldexp:
  2799                           
  2800                           ; 1 bytes @ 0x5F
  2801  0000BF                     	ds	2
  2802  0000C1                     ?_exp:
  2803                           	opt stack 0
  2804  0000C1                     exp@x:
  2805                           	opt stack 0
  2806                           
  2807                           ; 4 bytes @ 0x61
  2808  0000C1                     	ds	4
  2809  0000C5                     _exp$15224:
  2810                           	opt stack 0
  2811                           
  2812                           ; 4 bytes @ 0x65
  2813  0000C5                     	ds	4
  2814  0000C9                     exp@exponent:
  2815                           	opt stack 0
  2816                           
  2817                           ; 2 bytes @ 0x69
  2818  0000C9                     	ds	2
  2819  0000CB                     exp@sign:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x6B
  2823  0000CB                     	ds	1
  2824  0000CC                     ?_pow:
  2825                           	opt stack 0
  2826  0000CC                     pow@x:
  2827                           	opt stack 0
  2828                           
  2829                           ; 4 bytes @ 0x6C
  2830  0000CC                     	ds	4
  2831  0000D0                     pow@y:
  2832                           	opt stack 0
  2833                           
  2834                           ; 4 bytes @ 0x70
  2835  0000D0                     	ds	4
  2836  0000D4                     ??_main:
  2837                           
  2838                           ; 1 bytes @ 0x74
  2839  0000D4                     	ds	2
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1h	equ	0xFE2
  2848                           fsr1l	equ	0xFE1
  2849                           
  2850                           	psect	cstackCOMRAM
  2851  000001                     __pcstackCOMRAM:
  2852                           	opt stack 0
  2853  000001                     i2Byte_SetBit@pInput:
  2854                           	opt stack 0
  2855  000001                     i2Byte_GetZone@pInput:
  2856                           	opt stack 0
  2857  000001                     i2delay_us@us:
  2858                           	opt stack 0
  2859  000001                     i2MXK_Queue@pCallback:
  2860                           	opt stack 0
  2861                           
  2862                           ; 3 bytes @ 0x0
  2863  000001                     	ds	2
  2864  000003                     i2Byte_SetBit@pBit:
  2865                           	opt stack 0
  2866  000003                     i2Byte_GetZone@pMax:
  2867                           	opt stack 0
  2868  000003                     i2delay_us@u:
  2869                           	opt stack 0
  2870                           
  2871                           ; 4 bytes @ 0x2
  2872  000003                     	ds	1
  2873  000004                     i2Byte_SetBit@pValue:
  2874                           	opt stack 0
  2875  000004                     i2Byte_GetZone@pChunk:
  2876                           	opt stack 0
  2877                           
  2878                           ; 1 bytes @ 0x3
  2879  000004                     	ds	1
  2880  000005                     ??i2_Byte_SetBit:
  2881  000005                     i2Byte_GetZone@pChunkSize:
  2882                           	opt stack 0
  2883                           
  2884                           ; 1 bytes @ 0x4
  2885  000005                     	ds	1
  2886  000006                     ??i2_Byte_GetZone:
  2887                           
  2888                           ; 1 bytes @ 0x5
  2889  000006                     	ds	1
  2890  000007                     i2Byte_GetZone@MASK:
  2891                           	opt stack 0
  2892  000007                     i2MXK_SwitchTo@CUR:
  2893                           	opt stack 0
  2894                           
  2895                           ; 1 bytes @ 0x6
  2896  000007                     	ds	1
  2897  000008                     i2Byte_GetZone@Offset:
  2898                           	opt stack 0
  2899  000008                     i2MXK_SwitchTo@pModule:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0x7
  2903  000008                     	ds	1
  2904  000009                     i2Byte_GetZone@Output:
  2905                           	opt stack 0
  2906                           
  2907                           ; 1 bytes @ 0x8
  2908  000009                     	ds	1
  2909  00000A                     i2Byte_GetPair@pInput:
  2910                           	opt stack 0
  2911                           
  2912                           ; 2 bytes @ 0x9
  2913  00000A                     	ds	2
  2914  00000C                     i2Byte_GetPair@pPair:
  2915                           	opt stack 0
  2916                           
  2917                           ; 1 bytes @ 0xB
  2918  00000C                     	ds	1
  2919  00000D                     i2Word_GetPair@pInput:
  2920                           	opt stack 0
  2921                           
  2922                           ; 2 bytes @ 0xC
  2923  00000D                     	ds	2
  2924  00000F                     i2Word_GetPair@pPair:
  2925                           	opt stack 0
  2926                           
  2927                           ; 1 bytes @ 0xE
  2928  00000F                     	ds	1
  2929  000010                     i2Port_SetPin@pInput:
  2930                           	opt stack 0
  2931                           
  2932                           ; 2 bytes @ 0xF
  2933  000010                     	ds	2
  2934  000012                     i2Port_SetPin@pPin:
  2935                           	opt stack 0
  2936                           
  2937                           ; 1 bytes @ 0x11
  2938  000012                     	ds	1
  2939  000013                     i2Port_SetPin@pValue:
  2940                           	opt stack 0
  2941                           
  2942                           ; 1 bytes @ 0x12
  2943  000013                     	ds	1
  2944  000014                     i2Port_SetPin@Type:
  2945                           	opt stack 0
  2946                           
  2947                           ; 1 bytes @ 0x13
  2948  000014                     	ds	1
  2949  000015                     
  2950                           ; 1 bytes @ 0x14
  2951  000015                     	ds	2
  2952  000017                     ??_ISR_Function:
  2953                           
  2954                           ; 1 bytes @ 0x16
  2955  000017                     	ds	18
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           
  2966 ;;
  2967 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2968 ;;
  2969 ;; *************** function _main *****************
  2970 ;; Defined at:
  2971 ;;		line 266 in file "main.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;Total ram usage:        6 bytes
  2990 ;; Hardware stack levels required when called:   18
  2991 ;; This function calls:
  2992 ;;		_ADC_Voltage
  2993 ;;		_Console_Render
  2994 ;;		_Console_SetForecolour
  2995 ;;		_HMI_Render
  2996 ;;		_HMI_SetNumber
  2997 ;;		_MXK_BlockSwitchTo
  2998 ;;		_MXK_Dequeue
  2999 ;;		_MXK_Release
  3000 ;;		___flmul
  3001 ;;		___fltol
  3002 ;;		_continuousMode
  3003 ;;		_displayContinuousMode
  3004 ;;		_displayNullMode
  3005 ;;		_displayPositionMode
  3006 ;;		_displaySID
  3007 ;;		_displayStepMode
  3008 ;;		_getMode
  3009 ;;		_initialise
  3010 ;;		_inputVar
  3011 ;;		_nullMode
  3012 ;;		_positionMode
  3013 ;;		_pow
  3014 ;;		_printf
  3015 ;;		_stepMode
  3016 ;; This function is called by:
  3017 ;;		Startup code after reset
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text0
  3022  01281C                     __ptext0:
  3023                           	opt stack 0
  3024  01281C                     _main:
  3025                           	opt stack 13
  3026                           
  3027                           ;main.c: 267: initialise();
  3028                           
  3029                           ;incstack = 0
  3030  01281C  EC75  F0AE         	call	_initialise	;wreg free
  3031  012820                     
  3032                           ;main.c: 270: inputVar();
  3033  012820  ECAA  F0A5         	call	_inputVar	;wreg free
  3034                           
  3035                           ;main.c: 272: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3036  012824  0E01               	movlw	1
  3037  012826  ECE9  F0B2         	call	_MXK_BlockSwitchTo
  3038  01282A  0900               	iorlw	0
  3039  01282C  B4D8               	btfsc	status,2,c
  3040  01282E  D096               	goto	l2116
  3041                           
  3042                           ;main.c: 273: getMode();
  3043  012830  ECD6  F0AF         	call	_getMode	;wreg free
  3044                           
  3045                           ;main.c: 274: printf("%c", (char)35);
  3046  012834  0EFC               	movlw	low STR_16
  3047  012836  0100               	movlb	0	; () banked
  3048  012838  6F7B               	movwf	printf@f& (0+255),b
  3049  01283A  0EFF               	movlw	high STR_16
  3050  01283C  0100               	movlb	0	; () banked
  3051  01283E  6F7C               	movwf	(printf@f+1)& (0+255),b
  3052  012840  0E00               	movlw	0
  3053  012842  0100               	movlb	0	; () banked
  3054  012844  6F7E               	movwf	(?_printf+3)& (0+255),b
  3055  012846  0E23               	movlw	35
  3056  012848  6F7D               	movwf	(?_printf+2)& (0+255),b
  3057  01284A  EC78  F096         	call	_printf	;wreg free
  3058                           
  3059                           ;main.c: 275: displaySID();
  3060  01284E  EC2D  F0B5         	call	_displaySID	;wreg free
  3061                           
  3062                           ;main.c: 276: Console_SetForecolour(0xF800);
  3063  012852  0EF8               	movlw	248
  3064  012854  0100               	movlb	0	; () banked
  3065  012856  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3066  012858  0E00               	movlw	0
  3067  01285A  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
  3068  01285C  EC84  F0B6         	call	_Console_SetForecolour	;wreg free
  3069                           
  3070                           ;main.c: 277: switch (mode) {
  3071  012860  D00C               	goto	l2110
  3072  012862                     
  3073                           ;main.c: 279: displayContinuousMode();
  3074  012862  EC4C  F0A2         	call	_displayContinuousMode	;wreg free
  3075                           
  3076                           ;main.c: 280: break;
  3077  012866  D01E               	goto	l2112
  3078  012868                     
  3079                           ;main.c: 282: displayStepMode();
  3080  012868  ECFB  F0AA         	call	_displayStepMode	;wreg free
  3081                           
  3082                           ;main.c: 283: break;
  3083  01286C  D01B               	goto	l2112
  3084  01286E                     
  3085                           ;main.c: 285: displayPositionMode();
  3086  01286E  EC5A  F09C         	call	_displayPositionMode	;wreg free
  3087                           
  3088                           ;main.c: 286: break;
  3089  012872  D018               	goto	l2112
  3090  012874                     
  3091                           ;main.c: 288: displayNullMode();
  3092  012874  EC69  F0B2         	call	_displayNullMode	;wreg free
  3093                           
  3094                           ;main.c: 290: }
  3095                           
  3096                           ;main.c: 289: break;
  3097  012878  D015               	goto	l2112
  3098  01287A                     l2110:
  3099  01287A  C129  F0D4         	movff	_mode,??_main
  3100  01287E  C12A  F0D5         	movff	_mode+1,??_main+1
  3101                           
  3102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3103                           ; Switch size 1, requested type "space"
  3104                           ; Number of cases is 1, Range of values is 0 to 0
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte            4     3 (average)
  3108                           ;	Chosen strategy is simple_byte
  3109  012882  0100               	movlb	0	; () banked
  3110  012884  51D5               	movf	(??_main+1)& (0+255),w,b
  3111  012886  0A00               	xorlw	0	; case 0
  3112  012888  A4D8               	btfss	status,2,c
  3113  01288A  D7F4               	goto	l2115
  3114                           
  3115                           ; BSR set to: 0
  3116                           ; Switch size 1, requested type "space"
  3117                           ; Number of cases is 3, Range of values is 1 to 3
  3118                           ; switch strategies available:
  3119                           ; Name         Instructions Cycles
  3120                           ; simple_byte           10     6 (average)
  3121                           ;	Chosen strategy is simple_byte
  3122  01288C  0100               	movlb	0	; () banked
  3123  01288E  51D4               	movf	??_main& (0+255),w,b
  3124  012890  0A01               	xorlw	1	; case 1
  3125  012892  B4D8               	btfsc	status,2,c
  3126  012894  D7E6               	goto	l2111
  3127  012896  0A03               	xorlw	3	; case 2
  3128  012898  B4D8               	btfsc	status,2,c
  3129  01289A  D7E6               	goto	l2113
  3130  01289C  0A01               	xorlw	1	; case 3
  3131  01289E  B4D8               	btfsc	status,2,c
  3132  0128A0  D7E6               	goto	l2114
  3133  0128A2  D7E8               	goto	l2115
  3134  0128A4                     l2112:
  3135                           
  3136                           ;main.c: 291: Console_Render();
  3137                           
  3138                           ; BSR set to: 0
  3139  0128A4  EC42  F08F         	call	_Console_Render	;wreg free
  3140                           
  3141                           ;main.c: 292: ADCVoltage = ADC_Voltage(&ADC_AN0);
  3142  0128A8  0EDF               	movlw	low _ADC_AN0
  3143  0128AA  0100               	movlb	0	; () banked
  3144  0128AC  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  3145  0128AE  0E01               	movlw	high _ADC_AN0
  3146  0128B0  0100               	movlb	0	; () banked
  3147  0128B2  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3148  0128B4  ECA3  F0A0         	call	_ADC_Voltage	;wreg free
  3149  0128B8  C095  F100         	movff	?_ADC_Voltage,_ADCVoltage
  3150  0128BC  C096  F101         	movff	?_ADC_Voltage+1,_ADCVoltage+1
  3151  0128C0  C097  F102         	movff	?_ADC_Voltage+2,_ADCVoltage+2
  3152  0128C4  C098  F103         	movff	?_ADC_Voltage+3,_ADCVoltage+3
  3153                           
  3154                           ;main.c: 293: IRDistance = 63 * pow(ADCVoltage, -1.10);
  3155  0128C8  0ECD               	movlw	205
  3156  0128CA  0100               	movlb	0	; () banked
  3157  0128CC  6FD0               	movwf	pow@y& (0+255),b
  3158  0128CE  0ECC               	movlw	204
  3159  0128D0  6FD1               	movwf	(pow@y+1)& (0+255),b
  3160  0128D2  0E8C               	movlw	140
  3161  0128D4  6FD2               	movwf	(pow@y+2)& (0+255),b
  3162  0128D6  0EBF               	movlw	191
  3163  0128D8  6FD3               	movwf	(pow@y+3)& (0+255),b
  3164  0128DA  C100  F0CC         	movff	_ADCVoltage,pow@x
  3165  0128DE  C101  F0CD         	movff	_ADCVoltage+1,pow@x+1
  3166  0128E2  C102  F0CE         	movff	_ADCVoltage+2,pow@x+2
  3167  0128E6  C103  F0CF         	movff	_ADCVoltage+3,pow@x+3
  3168  0128EA  EC4A  F090         	call	_pow	;wreg free
  3169  0128EE  C0CC  F1FC         	movff	?_pow,_main$15221
  3170  0128F2  C0CD  F1FD         	movff	?_pow+1,_main$15221+1
  3171  0128F6  C0CE  F1FE         	movff	?_pow+2,_main$15221+2
  3172  0128FA  C0CF  F1FF         	movff	?_pow+3,_main$15221+3
  3173                           
  3174                           ;main.c: 293: IRDistance = 63 * pow(ADCVoltage, -1.10);
  3175  0128FE  0E00               	movlw	0
  3176  012900  0100               	movlb	0	; () banked
  3177  012902  6F80               	movwf	___flmul@a& (0+255),b
  3178  012904  0E00               	movlw	0
  3179  012906  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3180  012908  0E7C               	movlw	124
  3181  01290A  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3182  01290C  0E42               	movlw	66
  3183  01290E  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3184  012910  C1FC  F07C         	movff	_main$15221,___flmul@b
  3185  012914  C1FD  F07D         	movff	_main$15221+1,___flmul@b+1
  3186  012918  C1FE  F07E         	movff	_main$15221+2,___flmul@b+2
  3187  01291C  C1FF  F07F         	movff	_main$15221+3,___flmul@b+3
  3188  012920  EC54  F082         	call	___flmul	;wreg free
  3189  012924  C07C  F0A9         	movff	?___flmul,___fltol@f1
  3190  012928  C07D  F0AA         	movff	?___flmul+1,___fltol@f1+1
  3191  01292C  C07E  F0AB         	movff	?___flmul+2,___fltol@f1+2
  3192  012930  C07F  F0AC         	movff	?___flmul+3,___fltol@f1+3
  3193  012934  EC31  F09F         	call	___fltol	;wreg free
  3194  012938  C0A9  F125         	movff	?___fltol,_IRDistance
  3195  01293C  C0AA  F126         	movff	?___fltol+1,_IRDistance+1
  3196                           
  3197                           ;main.c: 294: HMI_SetNumber(IRDistance);
  3198  012940  C125  F076         	movff	_IRDistance,HMI_SetNumber@pInput
  3199  012944  C126  F077         	movff	_IRDistance+1,HMI_SetNumber@pInput+1
  3200  012948  ECA9  F0B4         	call	_HMI_SetNumber	;wreg free
  3201                           
  3202                           ;main.c: 295: HMI_Render();
  3203  01294C  EC27  F0B3         	call	_HMI_Render	;wreg free
  3204                           
  3205                           ;main.c: 296: if (MXK_Release())
  3206  012950  ECA6  F0B5         	call	_MXK_Release	;wreg free
  3207  012954  0900               	iorlw	0
  3208  012956  A4D8               	btfss	status,2,c
  3209                           
  3210                           ;main.c: 297: MXK_Dequeue();
  3211  012958  ECCA  F0B2         	call	_MXK_Dequeue	;wreg free
  3212  01295C                     l2116:
  3213                           
  3214                           ;main.c: 298: }
  3215                           ;main.c: 301: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3216  01295C  0E08               	movlw	8
  3217  01295E  ECE9  F0B2         	call	_MXK_BlockSwitchTo
  3218  012962  0900               	iorlw	0
  3219  012964  A4D8               	btfss	status,2,c
  3220  012966  D00D               	goto	l2118
  3221  012968  D75B               	goto	l2108
  3222  01296A                     
  3223                           ;main.c: 304: nullMode();
  3224  01296A  EC94  F0B4         	call	_nullMode	;wreg free
  3225                           
  3226                           ;main.c: 305: break;
  3227  01296E  D020               	goto	l2120
  3228  012970                     
  3229                           ;main.c: 307: continuousMode();
  3230  012970  EC06  F0B4         	call	_continuousMode	;wreg free
  3231                           
  3232                           ;main.c: 308: break;
  3233  012974  D01D               	goto	l2120
  3234  012976                     
  3235                           ;main.c: 310: stepMode();
  3236  012976  EC10  F0AF         	call	_stepMode	;wreg free
  3237                           
  3238                           ;main.c: 311: break;
  3239  01297A  D01A               	goto	l2120
  3240  01297C                     
  3241                           ;main.c: 313: positionMode();
  3242  01297C  ECB2  F0A2         	call	_positionMode	;wreg free
  3243                           
  3244                           ;main.c: 315: }
  3245                           
  3246                           ;main.c: 314: break;
  3247  012980  D017               	goto	l2120
  3248  012982                     l2118:
  3249  012982  C129  F0D4         	movff	_mode,??_main
  3250  012986  C12A  F0D5         	movff	_mode+1,??_main+1
  3251                           
  3252                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3253                           ; Switch size 1, requested type "space"
  3254                           ; Number of cases is 1, Range of values is 0 to 0
  3255                           ; switch strategies available:
  3256                           ; Name         Instructions Cycles
  3257                           ; simple_byte            4     3 (average)
  3258                           ;	Chosen strategy is simple_byte
  3259  01298A  0100               	movlb	0	; () banked
  3260  01298C  51D5               	movf	(??_main+1)& (0+255),w,b
  3261  01298E  0A00               	xorlw	0	; case 0
  3262  012990  A4D8               	btfss	status,2,c
  3263  012992  D00E               	goto	l2120
  3264                           
  3265                           ; BSR set to: 0
  3266                           ; Switch size 1, requested type "space"
  3267                           ; Number of cases is 4, Range of values is 0 to 3
  3268                           ; switch strategies available:
  3269                           ; Name         Instructions Cycles
  3270                           ; simple_byte           13     7 (average)
  3271                           ;	Chosen strategy is simple_byte
  3272  012994  0100               	movlb	0	; () banked
  3273  012996  51D4               	movf	??_main& (0+255),w,b
  3274  012998  0A00               	xorlw	0	; case 0
  3275  01299A  B4D8               	btfsc	status,2,c
  3276  01299C  D7E6               	goto	l2119
  3277  01299E  0A01               	xorlw	1	; case 1
  3278  0129A0  B4D8               	btfsc	status,2,c
  3279  0129A2  D7E6               	goto	l2121
  3280  0129A4  0A03               	xorlw	3	; case 2
  3281  0129A6  B4D8               	btfsc	status,2,c
  3282  0129A8  D7E6               	goto	l2122
  3283  0129AA  0A01               	xorlw	1	; case 3
  3284  0129AC  B4D8               	btfsc	status,2,c
  3285  0129AE  D7E6               	goto	l2123
  3286  0129B0                     l2120:
  3287                           
  3288                           ;main.c: 316: if (MXK_Release())
  3289                           
  3290                           ; BSR set to: 0
  3291  0129B0  ECA6  F0B5         	call	_MXK_Release	;wreg free
  3292  0129B4  0900               	iorlw	0
  3293  0129B6  B4D8               	btfsc	status,2,c
  3294  0129B8  D733               	goto	l2108
  3295                           
  3296                           ;main.c: 317: MXK_Dequeue();
  3297  0129BA  ECCA  F0B2         	call	_MXK_Dequeue	;wreg free
  3298                           
  3299                           ;main.c: 318: }
  3300                           ;main.c: 319: }
  3301  0129BE  D730               	goto	l2108
  3302  0129C0                     __end_of_main:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1h	equ	0xFE2
  3312                           fsr1l	equ	0xFE1
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _stepMode *****************
  3316 ;; Defined at:
  3317 ;;		line 244 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:   10
  3338 ;; This function calls:
  3339 ;;		_Motor_Move
  3340 ;;		_Motor_Speed
  3341 ;; This function is called by:
  3342 ;;		_main
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text1
  3347  015E20                     __ptext1:
  3348                           	opt stack 0
  3349  015E20                     _stepMode:
  3350                           	opt stack 20
  3351                           
  3352                           ;main.c: 245: if (downState && Stepper.mDelta == 0) {
  3353                           
  3354                           ;incstack = 0
  3355  015E20  0100               	movlb	0	; () banked
  3356  015E22  51F0               	movf	_downState& (0+255),w,b
  3357  015E24  B4D8               	btfsc	status,2,c
  3358  015E26  D023               	goto	l2097
  3359                           
  3360                           ; BSR set to: 0
  3361  015E28  0101               	movlb	1	; () banked
  3362  015E2A  51CA               	movf	_Stepper& (0+255),w,b
  3363  015E2C  0101               	movlb	1	; () banked
  3364  015E2E  11CB               	iorwf	(_Stepper+1)& (0+255),w,b
  3365  015E30  A4D8               	btfss	status,2,c
  3366  015E32  D01D               	goto	l2097
  3367                           
  3368                           ; BSR set to: 1
  3369                           ;main.c: 246: Motor_Speed(&Stepper, (1*1000L));
  3370  015E34  0ECA               	movlw	low _Stepper
  3371  015E36  0100               	movlb	0	; () banked
  3372  015E38  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3373  015E3A  0E01               	movlw	high _Stepper
  3374  015E3C  0100               	movlb	0	; () banked
  3375  015E3E  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3376  015E40  0E03               	movlw	3
  3377  015E42  0100               	movlb	0	; () banked
  3378  015E44  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3379  015E46  0EE8               	movlw	232
  3380  015E48  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3381  015E4A  ECBE  F0B4         	call	_Motor_Speed	;wreg free
  3382                           
  3383                           ;main.c: 247: Motor_Move(&Stepper, steps);
  3384  015E4E  0ECA               	movlw	low _Stepper
  3385  015E50  0100               	movlb	0	; () banked
  3386  015E52  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3387  015E54  0E01               	movlw	high _Stepper
  3388  015E56  0100               	movlb	0	; () banked
  3389  015E58  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3390  015E5A  C0E0  F065         	movff	_steps,Motor_Move@pDelta
  3391  015E5E  C0E1  F066         	movff	_steps+1,Motor_Move@pDelta+1
  3392  015E62  EC64  F0B3         	call	_Motor_Move	;wreg free
  3393                           
  3394                           ;main.c: 248: remainingSteps = steps;
  3395  015E66  C0E0  F121         	movff	_steps,_remainingSteps
  3396  015E6A  C0E1  F122         	movff	_steps+1,_remainingSteps+1
  3397  015E6E                     l2097:
  3398                           
  3399                           ;main.c: 249: }
  3400                           ;main.c: 250: if (Stepper.mDelta != 0) {
  3401  015E6E  0101               	movlb	1	; () banked
  3402  015E70  51CA               	movf	_Stepper& (0+255),w,b
  3403  015E72  0101               	movlb	1	; () banked
  3404  015E74  11CB               	iorwf	(_Stepper+1)& (0+255),w,b
  3405  015E76  B4D8               	btfsc	status,2,c
  3406  015E78  0012               	return	
  3407                           
  3408                           ; BSR set to: 1
  3409                           ;main.c: 251: remainingSteps--;
  3410  015E7A  0101               	movlb	1	; () banked
  3411  015E7C  0721               	decf	_remainingSteps& (0+255),f,b
  3412  015E7E  A0D8               	btfss	status,0,c
  3413  015E80  0722               	decf	(_remainingSteps+1)& (0+255),f,b
  3414  015E82  0012               	return	
  3415  015E84                     __end_of_stepMode:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           postinc0	equ	0xFEE
  3422                           wreg	equ	0xFE8
  3423                           postdec1	equ	0xFE5
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _pow *****************
  3429 ;; Defined at:
  3430 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  x               4  108[BANK0 ] void 
  3433 ;;  y               4  112[BANK0 ] void 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  yi              4    9[BANK2 ] unsigned long 
  3436 ;;  sign            1    8[BANK2 ] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  4  108[BANK0 ] unsigned char 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3446 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Locals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Totals:         0       8       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;Total ram usage:       21 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:   10
  3453 ;; This function calls:
  3454 ;;		___flge
  3455 ;;		___flmul
  3456 ;;		___flneg
  3457 ;;		___fltol
  3458 ;;		___xxtofl
  3459 ;;		_exp
  3460 ;;		_log
  3461 ;; This function is called by:
  3462 ;;		_main
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text2
  3467  012094                     __ptext2:
  3468                           	opt stack 0
  3469  012094                     _pow:
  3470                           	opt stack 20
  3471                           
  3472                           ; BSR set to: 1
  3473                           ;incstack = 0
  3474  012094  0E00               	movlw	0
  3475  012096  0102               	movlb	2	; () banked
  3476  012098  6F76               	movwf	pow@sign& (0+255),b
  3477                           
  3478                           ; BSR set to: 2
  3479  01209A  0100               	movlb	0	; () banked
  3480  01209C  51CC               	movf	pow@x& (0+255),w,b
  3481  01209E  0100               	movlb	0	; () banked
  3482  0120A0  11CD               	iorwf	(pow@x+1)& (0+255),w,b
  3483  0120A2  0100               	movlb	0	; () banked
  3484  0120A4  11CE               	iorwf	(pow@x+2)& (0+255),w,b
  3485  0120A6  0100               	movlb	0	; () banked
  3486  0120A8  11CF               	iorwf	(pow@x+3)& (0+255),w,b
  3487  0120AA  A4D8               	btfss	status,2,c
  3488  0120AC  D025               	goto	l2591
  3489                           
  3490                           ; BSR set to: 0
  3491  0120AE  0E00               	movlw	0
  3492  0120B0  0100               	movlb	0	; () banked
  3493  0120B2  6F60               	movwf	___flge@ff1& (0+255),b
  3494  0120B4  0E00               	movlw	0
  3495  0120B6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3496  0120B8  0E00               	movlw	0
  3497  0120BA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3498  0120BC  0E00               	movlw	0
  3499  0120BE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3500  0120C0  C0D0  F064         	movff	pow@y,___flge@ff2
  3501  0120C4  C0D1  F065         	movff	pow@y+1,___flge@ff2+1
  3502  0120C8  C0D2  F066         	movff	pow@y+2,___flge@ff2+2
  3503  0120CC  C0D3  F067         	movff	pow@y+3,___flge@ff2+3
  3504  0120D0  EC41  F097         	call	___flge	;wreg free
  3505  0120D4  0100               	movlb	0	; () banked
  3506  0120D6  A0D8               	btfss	status,0,c
  3507  0120D8  D005               	goto	l2592
  3508                           
  3509                           ; BSR set to: 0
  3510  0120DA  0E00               	movlw	0
  3511  0120DC  0101               	movlb	1	; () banked
  3512  0120DE  6F1C               	movwf	(_errno+1)& (0+255),b
  3513  0120E0  0E21               	movlw	33
  3514  0120E2  6F1B               	movwf	_errno& (0+255),b
  3515  0120E4                     l2592:
  3516  0120E4  0E00               	movlw	0
  3517  0120E6  0100               	movlb	0	; () banked
  3518  0120E8  6FCC               	movwf	?_pow& (0+255),b
  3519  0120EA  0E00               	movlw	0
  3520  0120EC  6FCD               	movwf	(?_pow+1)& (0+255),b
  3521  0120EE  0E00               	movlw	0
  3522  0120F0  6FCE               	movwf	(?_pow+2)& (0+255),b
  3523  0120F2  0E00               	movlw	0
  3524  0120F4  6FCF               	movwf	(?_pow+3)& (0+255),b
  3525                           
  3526                           ; BSR set to: 0
  3527  0120F6  0012               	return	
  3528  0120F8                     l2591:
  3529                           
  3530                           ; BSR set to: 0
  3531                           
  3532                           ; BSR set to: 0
  3533  0120F8  0100               	movlb	0	; () banked
  3534  0120FA  51D0               	movf	pow@y& (0+255),w,b
  3535  0120FC  0100               	movlb	0	; () banked
  3536  0120FE  11D1               	iorwf	(pow@y+1)& (0+255),w,b
  3537  012100  0100               	movlb	0	; () banked
  3538  012102  11D2               	iorwf	(pow@y+2)& (0+255),w,b
  3539  012104  0100               	movlb	0	; () banked
  3540  012106  11D3               	iorwf	(pow@y+3)& (0+255),w,b
  3541  012108  A4D8               	btfss	status,2,c
  3542  01210A  D00A               	goto	l2594
  3543                           
  3544                           ; BSR set to: 0
  3545  01210C  0E00               	movlw	0
  3546  01210E  0100               	movlb	0	; () banked
  3547  012110  6FCC               	movwf	?_pow& (0+255),b
  3548  012112  0E00               	movlw	0
  3549  012114  6FCD               	movwf	(?_pow+1)& (0+255),b
  3550  012116  0E80               	movlw	128
  3551  012118  6FCE               	movwf	(?_pow+2)& (0+255),b
  3552  01211A  0E3F               	movlw	63
  3553  01211C  6FCF               	movwf	(?_pow+3)& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556  01211E  0012               	return	
  3557  012120                     l2594:
  3558                           
  3559                           ; BSR set to: 0
  3560                           
  3561                           ; BSR set to: 0
  3562  012120  0100               	movlb	0	; () banked
  3563  012122  AFCF               	btfss	(pow@x+3)& (0+255),7,b
  3564  012124  D058               	goto	l2595
  3565                           
  3566                           ; BSR set to: 0
  3567  012126  C0D0  F0A9         	movff	pow@y,___fltol@f1
  3568  01212A  C0D1  F0AA         	movff	pow@y+1,___fltol@f1+1
  3569  01212E  C0D2  F0AB         	movff	pow@y+2,___fltol@f1+2
  3570  012132  C0D3  F0AC         	movff	pow@y+3,___fltol@f1+3
  3571  012136  EC31  F09F         	call	___fltol	;wreg free
  3572  01213A  C0A9  F277         	movff	?___fltol,pow@yi
  3573  01213E  C0AA  F278         	movff	?___fltol+1,pow@yi+1
  3574  012142  C0AB  F279         	movff	?___fltol+2,pow@yi+2
  3575  012146  C0AC  F27A         	movff	?___fltol+3,pow@yi+3
  3576  01214A  C277  F06E         	movff	pow@yi,___xxtofl@val
  3577  01214E  C278  F06F         	movff	pow@yi+1,___xxtofl@val+1
  3578  012152  C279  F070         	movff	pow@yi+2,___xxtofl@val+2
  3579  012156  C27A  F071         	movff	pow@yi+3,___xxtofl@val+3
  3580  01215A  0E00               	movlw	0
  3581  01215C  EC47  F092         	call	___xxtofl
  3582  012160  0100               	movlb	0	; () banked
  3583  012162  51D0               	movf	pow@y& (0+255),w,b
  3584  012164  0100               	movlb	0	; () banked
  3585  012166  196E               	xorwf	?___xxtofl& (0+255),w,b
  3586  012168  E110               	bnz	u12620
  3587  01216A  0100               	movlb	0	; () banked
  3588  01216C  51D1               	movf	(pow@y+1)& (0+255),w,b
  3589  01216E  0100               	movlb	0	; () banked
  3590  012170  196F               	xorwf	(?___xxtofl+1)& (0+255),w,b
  3591  012172  E10B               	bnz	u12620
  3592  012174  0100               	movlb	0	; () banked
  3593  012176  51D2               	movf	(pow@y+2)& (0+255),w,b
  3594  012178  0100               	movlb	0	; () banked
  3595  01217A  1970               	xorwf	(?___xxtofl+2)& (0+255),w,b
  3596  01217C  E106               	bnz	u12620
  3597  01217E  0100               	movlb	0	; () banked
  3598  012180  51D3               	movf	(pow@y+3)& (0+255),w,b
  3599  012182  0100               	movlb	0	; () banked
  3600  012184  1971               	xorwf	(?___xxtofl+3)& (0+255),w,b
  3601  012186  B4D8               	btfsc	status,2,c
  3602  012188  D00F               	goto	l2596
  3603  01218A                     u12620:
  3604                           
  3605                           ; BSR set to: 0
  3606  01218A  0E00               	movlw	0
  3607  01218C  0101               	movlb	1	; () banked
  3608  01218E  6F1C               	movwf	(_errno+1)& (0+255),b
  3609  012190  0E21               	movlw	33
  3610  012192  6F1B               	movwf	_errno& (0+255),b
  3611  012194  0E00               	movlw	0
  3612  012196  0100               	movlb	0	; () banked
  3613  012198  6FCC               	movwf	?_pow& (0+255),b
  3614  01219A  0E00               	movlw	0
  3615  01219C  6FCD               	movwf	(?_pow+1)& (0+255),b
  3616  01219E  0E00               	movlw	0
  3617  0121A0  6FCE               	movwf	(?_pow+2)& (0+255),b
  3618  0121A2  0E00               	movlw	0
  3619  0121A4  6FCF               	movwf	(?_pow+3)& (0+255),b
  3620                           
  3621                           ; BSR set to: 0
  3622  0121A6  0012               	return	
  3623  0121A8                     l2596:
  3624                           
  3625                           ; BSR set to: 0
  3626                           
  3627                           ; BSR set to: 0
  3628  0121A8  0102               	movlb	2	; () banked
  3629  0121AA  5177               	movf	pow@yi& (0+255),w,b
  3630  0121AC  0B01               	andlw	1
  3631  0121AE  0102               	movlb	2	; () banked
  3632  0121B0  6F76               	movwf	pow@sign& (0+255),b
  3633                           
  3634                           ; BSR set to: 2
  3635  0121B2  C0CC  F07C         	movff	pow@x,___flneg@f1
  3636  0121B6  C0CD  F07D         	movff	pow@x+1,___flneg@f1+1
  3637  0121BA  C0CE  F07E         	movff	pow@x+2,___flneg@f1+2
  3638  0121BE  C0CF  F07F         	movff	pow@x+3,___flneg@f1+3
  3639  0121C2  EC81  F0B3         	call	___flneg	;wreg free
  3640  0121C6  C07C  F0CC         	movff	?___flneg,pow@x
  3641  0121CA  C07D  F0CD         	movff	?___flneg+1,pow@x+1
  3642  0121CE  C07E  F0CE         	movff	?___flneg+2,pow@x+2
  3643  0121D2  C07F  F0CF         	movff	?___flneg+3,pow@x+3
  3644  0121D6                     l2595:
  3645  0121D6  C0CC  F0B9         	movff	pow@x,log@x
  3646  0121DA  C0CD  F0BA         	movff	pow@x+1,log@x+1
  3647  0121DE  C0CE  F0BB         	movff	pow@x+2,log@x+2
  3648  0121E2  C0CF  F0BC         	movff	pow@x+3,log@x+3
  3649  0121E6  EC09  F098         	call	_log	;wreg free
  3650  0121EA  C0B9  F26E         	movff	?_log,_pow$15222
  3651  0121EE  C0BA  F26F         	movff	?_log+1,_pow$15222+1
  3652  0121F2  C0BB  F270         	movff	?_log+2,_pow$15222+2
  3653  0121F6  C0BC  F271         	movff	?_log+3,_pow$15222+3
  3654  0121FA  C26E  F07C         	movff	_pow$15222,___flmul@b
  3655  0121FE  C26F  F07D         	movff	_pow$15222+1,___flmul@b+1
  3656  012202  C270  F07E         	movff	_pow$15222+2,___flmul@b+2
  3657  012206  C271  F07F         	movff	_pow$15222+3,___flmul@b+3
  3658  01220A  C0D0  F080         	movff	pow@y,___flmul@a
  3659  01220E  C0D1  F081         	movff	pow@y+1,___flmul@a+1
  3660  012212  C0D2  F082         	movff	pow@y+2,___flmul@a+2
  3661  012216  C0D3  F083         	movff	pow@y+3,___flmul@a+3
  3662  01221A  EC54  F082         	call	___flmul	;wreg free
  3663  01221E  C07C  F272         	movff	?___flmul,_pow$15223
  3664  012222  C07D  F273         	movff	?___flmul+1,_pow$15223+1
  3665  012226  C07E  F274         	movff	?___flmul+2,_pow$15223+2
  3666  01222A  C07F  F275         	movff	?___flmul+3,_pow$15223+3
  3667  01222E  C272  F0C1         	movff	_pow$15223,exp@x
  3668  012232  C273  F0C2         	movff	_pow$15223+1,exp@x+1
  3669  012236  C274  F0C3         	movff	_pow$15223+2,exp@x+2
  3670  01223A  C275  F0C4         	movff	_pow$15223+3,exp@x+3
  3671  01223E  EC73  F08A         	call	_exp	;wreg free
  3672  012242  C0C1  F0CC         	movff	?_exp,pow@x
  3673  012246  C0C2  F0CD         	movff	?_exp+1,pow@x+1
  3674  01224A  C0C3  F0CE         	movff	?_exp+2,pow@x+2
  3675  01224E  C0C4  F0CF         	movff	?_exp+3,pow@x+3
  3676  012252  0102               	movlb	2	; () banked
  3677  012254  5176               	movf	pow@sign& (0+255),w,b
  3678  012256  0102               	movlb	2	; () banked
  3679  012258  B4D8               	btfsc	status,2,c
  3680  01225A  D013               	goto	l2597
  3681                           
  3682                           ; BSR set to: 2
  3683  01225C  C0CC  F07C         	movff	pow@x,___flneg@f1
  3684  012260  C0CD  F07D         	movff	pow@x+1,___flneg@f1+1
  3685  012264  C0CE  F07E         	movff	pow@x+2,___flneg@f1+2
  3686  012268  C0CF  F07F         	movff	pow@x+3,___flneg@f1+3
  3687  01226C  EC81  F0B3         	call	___flneg	;wreg free
  3688  012270  C07C  F0CC         	movff	?___flneg,?_pow
  3689  012274  C07D  F0CD         	movff	?___flneg+1,?_pow+1
  3690  012278  C07E  F0CE         	movff	?___flneg+2,?_pow+2
  3691  01227C  C07F  F0CF         	movff	?___flneg+3,?_pow+3
  3692  012280  0012               	return	
  3693  012282                     l2597:
  3694                           
  3695                           ; BSR set to: 2
  3696  012282  C0CC  F0CC         	movff	pow@x,?_pow
  3697  012286  C0CD  F0CD         	movff	pow@x+1,?_pow+1
  3698  01228A  C0CE  F0CE         	movff	pow@x+2,?_pow+2
  3699  01228E  C0CF  F0CF         	movff	pow@x+3,?_pow+3
  3700  012292  0012               	return		;funcret
  3701  012294                     __end_of_pow:
  3702                           	opt stack 0
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           postinc0	equ	0xFEE
  3708                           wreg	equ	0xFE8
  3709                           postdec1	equ	0xFE5
  3710                           fsr1h	equ	0xFE2
  3711                           fsr1l	equ	0xFE1
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _log *****************
  3715 ;; Defined at:
  3716 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  x               4   89[BANK0 ] unsigned char 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  exponent        2   93[BANK0 ] int 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  4   89[BANK0 ] int 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;Total ram usage:        6 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    9
  3737 ;; This function calls:
  3738 ;;		___fladd
  3739 ;;		___flmul
  3740 ;;		___xxtofl
  3741 ;;		_eval_poly
  3742 ;;		_frexp
  3743 ;; This function is called by:
  3744 ;;		_pow
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text3
  3749  013012                     __ptext3:
  3750                           	opt stack 0
  3751  013012                     _log:
  3752                           	opt stack 20
  3753                           
  3754                           ;incstack = 0
  3755  013012  0100               	movlb	0	; () banked
  3756  013014  AFBC               	btfss	(log@x+3)& (0+255),7,b
  3757  013016  D00F               	goto	l2793
  3758                           
  3759                           ; BSR set to: 0
  3760  013018  0E00               	movlw	0
  3761  01301A  0101               	movlb	1	; () banked
  3762  01301C  6F1C               	movwf	(_errno+1)& (0+255),b
  3763  01301E  0E21               	movlw	33
  3764  013020  6F1B               	movwf	_errno& (0+255),b
  3765  013022  0E00               	movlw	0
  3766  013024  0100               	movlb	0	; () banked
  3767  013026  6FB9               	movwf	?_log& (0+255),b
  3768  013028  0E00               	movlw	0
  3769  01302A  6FBA               	movwf	(?_log+1)& (0+255),b
  3770  01302C  0E00               	movlw	0
  3771  01302E  6FBB               	movwf	(?_log+2)& (0+255),b
  3772  013030  0E00               	movlw	0
  3773  013032  6FBC               	movwf	(?_log+3)& (0+255),b
  3774                           
  3775                           ; BSR set to: 0
  3776  013034  0012               	return	
  3777  013036                     l2793:
  3778                           
  3779                           ; BSR set to: 0
  3780                           
  3781                           ; BSR set to: 0
  3782  013036  0100               	movlb	0	; () banked
  3783  013038  51B9               	movf	log@x& (0+255),w,b
  3784  01303A  0100               	movlb	0	; () banked
  3785  01303C  11BA               	iorwf	(log@x+1)& (0+255),w,b
  3786  01303E  0100               	movlb	0	; () banked
  3787  013040  11BB               	iorwf	(log@x+2)& (0+255),w,b
  3788  013042  0100               	movlb	0	; () banked
  3789  013044  11BC               	iorwf	(log@x+3)& (0+255),w,b
  3790  013046  A4D8               	btfss	status,2,c
  3791  013048  D00F               	goto	l2795
  3792                           
  3793                           ; BSR set to: 0
  3794  01304A  0E00               	movlw	0
  3795  01304C  0101               	movlb	1	; () banked
  3796  01304E  6F1C               	movwf	(_errno+1)& (0+255),b
  3797  013050  0E22               	movlw	34
  3798  013052  6F1B               	movwf	_errno& (0+255),b
  3799  013054  0E00               	movlw	0
  3800  013056  0100               	movlb	0	; () banked
  3801  013058  6FB9               	movwf	?_log& (0+255),b
  3802  01305A  0E00               	movlw	0
  3803  01305C  6FBA               	movwf	(?_log+1)& (0+255),b
  3804  01305E  0E00               	movlw	0
  3805  013060  6FBB               	movwf	(?_log+2)& (0+255),b
  3806  013062  0E00               	movlw	0
  3807  013064  6FBC               	movwf	(?_log+3)& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810  013066  0012               	return	
  3811  013068                     l2795:
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  013068  0E00               	movlw	0
  3817  01306A  0100               	movlb	0	; () banked
  3818  01306C  6F80               	movwf	___flmul@a& (0+255),b
  3819  01306E  0E00               	movlw	0
  3820  013070  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3821  013072  0E00               	movlw	0
  3822  013074  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3823  013076  0E40               	movlw	64
  3824  013078  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3825  01307A  0EBD               	movlw	low log@exponent
  3826  01307C  0100               	movlb	0	; () banked
  3827  01307E  6F64               	movwf	frexp@eptr& (0+255),b
  3828  013080  0E00               	movlw	high log@exponent
  3829  013082  0100               	movlb	0	; () banked
  3830  013084  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  3831  013086  C0B9  F060         	movff	log@x,frexp@value
  3832  01308A  C0BA  F061         	movff	log@x+1,frexp@value+1
  3833  01308E  C0BB  F062         	movff	log@x+2,frexp@value+2
  3834  013092  C0BC  F063         	movff	log@x+3,frexp@value+3
  3835  013096  ECF4  F0A4         	call	_frexp	;wreg free
  3836  01309A  C060  F07C         	movff	?_frexp,___flmul@b
  3837  01309E  C061  F07D         	movff	?_frexp+1,___flmul@b+1
  3838  0130A2  C062  F07E         	movff	?_frexp+2,___flmul@b+2
  3839  0130A6  C063  F07F         	movff	?_frexp+3,___flmul@b+3
  3840  0130AA  EC54  F082         	call	___flmul	;wreg free
  3841  0130AE  C07C  F095         	movff	?___flmul,___fladd@b
  3842  0130B2  C07D  F096         	movff	?___flmul+1,___fladd@b+1
  3843  0130B6  C07E  F097         	movff	?___flmul+2,___fladd@b+2
  3844  0130BA  C07F  F098         	movff	?___flmul+3,___fladd@b+3
  3845  0130BE  0E00               	movlw	0
  3846  0130C0  0100               	movlb	0	; () banked
  3847  0130C2  6F99               	movwf	___fladd@a& (0+255),b
  3848  0130C4  0E00               	movlw	0
  3849  0130C6  6F9A               	movwf	(___fladd@a+1)& (0+255),b
  3850  0130C8  0E80               	movlw	128
  3851  0130CA  6F9B               	movwf	(___fladd@a+2)& (0+255),b
  3852  0130CC  0EBF               	movlw	191
  3853  0130CE  6F9C               	movwf	(___fladd@a+3)& (0+255),b
  3854  0130D0  EC00  F080         	call	___fladd	;wreg free
  3855  0130D4  C095  F0B9         	movff	?___fladd,log@x
  3856  0130D8  C096  F0BA         	movff	?___fladd+1,log@x+1
  3857  0130DC  C097  F0BB         	movff	?___fladd+2,log@x+2
  3858  0130E0  C098  F0BC         	movff	?___fladd+3,log@x+3
  3859  0130E4  0100               	movlb	0	; () banked
  3860  0130E6  07BD               	decf	log@exponent& (0+255),f,b
  3861  0130E8  A0D8               	btfss	status,0,c
  3862  0130EA  07BE               	decf	(log@exponent+1)& (0+255),f,b
  3863                           
  3864                           ; BSR set to: 0
  3865  0130EC  C0B9  F0A9         	movff	log@x,eval_poly@x
  3866  0130F0  C0BA  F0AA         	movff	log@x+1,eval_poly@x+1
  3867  0130F4  C0BB  F0AB         	movff	log@x+2,eval_poly@x+2
  3868  0130F8  C0BC  F0AC         	movff	log@x+3,eval_poly@x+3
  3869  0130FC  0ED7               	movlw	low log@coeff
  3870  0130FE  0100               	movlb	0	; () banked
  3871  013100  6FAD               	movwf	eval_poly@d& (0+255),b
  3872  013102  0EFE               	movlw	high log@coeff
  3873  013104  0100               	movlb	0	; () banked
  3874  013106  6FAE               	movwf	(eval_poly@d+1)& (0+255),b
  3875  013108  0E00               	movlw	0
  3876  01310A  0100               	movlb	0	; () banked
  3877  01310C  6FB0               	movwf	(eval_poly@n+1)& (0+255),b
  3878  01310E  0E08               	movlw	8
  3879  013110  6FAF               	movwf	eval_poly@n& (0+255),b
  3880  013112  ECA5  F09E         	call	_eval_poly	;wreg free
  3881  013116  C0A9  F0B9         	movff	?_eval_poly,log@x
  3882  01311A  C0AA  F0BA         	movff	?_eval_poly+1,log@x+1
  3883  01311E  C0AB  F0BB         	movff	?_eval_poly+2,log@x+2
  3884  013122  C0AC  F0BC         	movff	?_eval_poly+3,log@x+3
  3885  013126  0E18               	movlw	24
  3886  013128  0100               	movlb	0	; () banked
  3887  01312A  6F80               	movwf	___flmul@a& (0+255),b
  3888  01312C  0E72               	movlw	114
  3889  01312E  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3890  013130  0E31               	movlw	49
  3891  013132  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3892  013134  0E3F               	movlw	63
  3893  013136  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3894  013138  C0BD  F06E         	movff	log@exponent,___xxtofl@val
  3895  01313C  C0BE  F06F         	movff	log@exponent+1,___xxtofl@val+1
  3896  013140  0100               	movlb	0	; () banked
  3897  013142  0E00               	movlw	0
  3898  013144  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3899  013146  0EFF               	movlw	-1
  3900  013148  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  3901  01314A  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  3902  01314C  0E01               	movlw	1
  3903  01314E  EC47  F092         	call	___xxtofl
  3904  013152  C06E  F07C         	movff	?___xxtofl,___flmul@b
  3905  013156  C06F  F07D         	movff	?___xxtofl+1,___flmul@b+1
  3906  01315A  C070  F07E         	movff	?___xxtofl+2,___flmul@b+2
  3907  01315E  C071  F07F         	movff	?___xxtofl+3,___flmul@b+3
  3908  013162  EC54  F082         	call	___flmul	;wreg free
  3909  013166  C07C  F095         	movff	?___flmul,___fladd@b
  3910  01316A  C07D  F096         	movff	?___flmul+1,___fladd@b+1
  3911  01316E  C07E  F097         	movff	?___flmul+2,___fladd@b+2
  3912  013172  C07F  F098         	movff	?___flmul+3,___fladd@b+3
  3913  013176  C0B9  F099         	movff	log@x,___fladd@a
  3914  01317A  C0BA  F09A         	movff	log@x+1,___fladd@a+1
  3915  01317E  C0BB  F09B         	movff	log@x+2,___fladd@a+2
  3916  013182  C0BC  F09C         	movff	log@x+3,___fladd@a+3
  3917  013186  EC00  F080         	call	___fladd	;wreg free
  3918  01318A  C095  F0B9         	movff	?___fladd,?_log
  3919  01318E  C096  F0BA         	movff	?___fladd+1,?_log+1
  3920  013192  C097  F0BB         	movff	?___fladd+2,?_log+2
  3921  013196  C098  F0BC         	movff	?___fladd+3,?_log+3
  3922  01319A  0012               	return	
  3923  01319C                     __end_of_log:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           postdec1	equ	0xFE5
  3932                           fsr1h	equ	0xFE2
  3933                           fsr1l	equ	0xFE1
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _exp *****************
  3937 ;; Defined at:
  3938 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  x               4   97[BANK0 ] int 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  exponent        2  105[BANK0 ] int 
  3943 ;;  sign            1  107[BANK0 ] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  4   97[BANK0 ] unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:       11 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    9
  3960 ;; This function calls:
  3961 ;;		___fldiv
  3962 ;;		___flge
  3963 ;;		___flmul
  3964 ;;		___flneg
  3965 ;;		___flsub
  3966 ;;		___fltol
  3967 ;;		___xxtofl
  3968 ;;		_eval_poly
  3969 ;;		_floor
  3970 ;;		_ldexp
  3971 ;; This function is called by:
  3972 ;;		_pow
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text4
  3977  0114E6                     __ptext4:
  3978                           	opt stack 0
  3979  0114E6                     _exp:
  3980                           	opt stack 20
  3981                           
  3982                           ;incstack = 0
  3983  0114E6  0100               	movlb	0	; () banked
  3984  0114E8  51C1               	movf	exp@x& (0+255),w,b
  3985  0114EA  0100               	movlb	0	; () banked
  3986  0114EC  11C2               	iorwf	(exp@x+1)& (0+255),w,b
  3987  0114EE  0100               	movlb	0	; () banked
  3988  0114F0  11C3               	iorwf	(exp@x+2)& (0+255),w,b
  3989  0114F2  0100               	movlb	0	; () banked
  3990  0114F4  11C4               	iorwf	(exp@x+3)& (0+255),w,b
  3991  0114F6  A4D8               	btfss	status,2,c
  3992  0114F8  D00A               	goto	l2751
  3993                           
  3994                           ; BSR set to: 0
  3995  0114FA  0E00               	movlw	0
  3996  0114FC  0100               	movlb	0	; () banked
  3997  0114FE  6FC1               	movwf	?_exp& (0+255),b
  3998  011500  0E00               	movlw	0
  3999  011502  6FC2               	movwf	(?_exp+1)& (0+255),b
  4000  011504  0E80               	movlw	128
  4001  011506  6FC3               	movwf	(?_exp+2)& (0+255),b
  4002  011508  0E3F               	movlw	63
  4003  01150A  6FC4               	movwf	(?_exp+3)& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006  01150C  0012               	return	
  4007  01150E                     l2751:
  4008                           
  4009                           ; BSR set to: 0
  4010                           
  4011                           ; BSR set to: 0
  4012  01150E  0E18               	movlw	24
  4013  011510  0100               	movlb	0	; () banked
  4014  011512  6F60               	movwf	___flge@ff1& (0+255),b
  4015  011514  0E72               	movlw	114
  4016  011516  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4017  011518  0E31               	movlw	49
  4018  01151A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4019  01151C  0E44               	movlw	68
  4020  01151E  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4021  011520  C0C1  F064         	movff	exp@x,___flge@ff2
  4022  011524  C0C2  F065         	movff	exp@x+1,___flge@ff2+1
  4023  011528  C0C3  F066         	movff	exp@x+2,___flge@ff2+2
  4024  01152C  C0C4  F067         	movff	exp@x+3,___flge@ff2+3
  4025  011530  EC41  F097         	call	___flge	;wreg free
  4026  011534  0100               	movlb	0	; () banked
  4027  011536  B0D8               	btfsc	status,0,c
  4028  011538  D00F               	goto	l2753
  4029                           
  4030                           ; BSR set to: 0
  4031  01153A  0E00               	movlw	0
  4032  01153C  0101               	movlb	1	; () banked
  4033  01153E  6F1C               	movwf	(_errno+1)& (0+255),b
  4034  011540  0E22               	movlw	34
  4035  011542  6F1B               	movwf	_errno& (0+255),b
  4036  011544  0EFF               	movlw	255
  4037  011546  0100               	movlb	0	; () banked
  4038  011548  6FC1               	movwf	?_exp& (0+255),b
  4039  01154A  0EFF               	movlw	255
  4040  01154C  6FC2               	movwf	(?_exp+1)& (0+255),b
  4041  01154E  0E7F               	movlw	127
  4042  011550  6FC3               	movwf	(?_exp+2)& (0+255),b
  4043  011552  0E7F               	movlw	127
  4044  011554  6FC4               	movwf	(?_exp+3)& (0+255),b
  4045                           
  4046                           ; BSR set to: 0
  4047  011556  0012               	return	
  4048  011558                     l2753:
  4049                           
  4050                           ; BSR set to: 0
  4051                           
  4052                           ; BSR set to: 0
  4053  011558  C0C1  F060         	movff	exp@x,___flge@ff1
  4054  01155C  C0C2  F061         	movff	exp@x+1,___flge@ff1+1
  4055  011560  C0C3  F062         	movff	exp@x+2,___flge@ff1+2
  4056  011564  C0C4  F063         	movff	exp@x+3,___flge@ff1+3
  4057  011568  0E87               	movlw	135
  4058  01156A  0100               	movlb	0	; () banked
  4059  01156C  6F64               	movwf	___flge@ff2& (0+255),b
  4060  01156E  0E48               	movlw	72
  4061  011570  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  4062  011572  0E3A               	movlw	58
  4063  011574  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  4064  011576  0EC4               	movlw	196
  4065  011578  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  4066  01157A  EC41  F097         	call	___flge	;wreg free
  4067  01157E  0100               	movlb	0	; () banked
  4068  011580  B0D8               	btfsc	status,0,c
  4069  011582  D00F               	goto	l2754
  4070                           
  4071                           ; BSR set to: 0
  4072  011584  0E00               	movlw	0
  4073  011586  0101               	movlb	1	; () banked
  4074  011588  6F1C               	movwf	(_errno+1)& (0+255),b
  4075  01158A  0E22               	movlw	34
  4076  01158C  6F1B               	movwf	_errno& (0+255),b
  4077  01158E  0E00               	movlw	0
  4078  011590  0100               	movlb	0	; () banked
  4079  011592  6FC1               	movwf	?_exp& (0+255),b
  4080  011594  0E00               	movlw	0
  4081  011596  6FC2               	movwf	(?_exp+1)& (0+255),b
  4082  011598  0E00               	movlw	0
  4083  01159A  6FC3               	movwf	(?_exp+2)& (0+255),b
  4084  01159C  0E00               	movlw	0
  4085  01159E  6FC4               	movwf	(?_exp+3)& (0+255),b
  4086                           
  4087                           ; BSR set to: 0
  4088  0115A0  0012               	return	
  4089  0115A2                     l2754:
  4090                           
  4091                           ; BSR set to: 0
  4092                           
  4093                           ; BSR set to: 0
  4094  0115A2  0100               	movlb	0	; () banked
  4095  0115A4  AFC4               	btfss	(exp@x+3)& (0+255),7,b
  4096  0115A6  D002               	goto	u11950
  4097  0115A8  0E01               	movlw	1
  4098  0115AA  D001               	goto	u11960
  4099  0115AC                     u11950:
  4100  0115AC  0E00               	movlw	0
  4101  0115AE                     u11960:
  4102  0115AE  0100               	movlb	0	; () banked
  4103  0115B0  6FCB               	movwf	exp@sign& (0+255),b
  4104                           
  4105                           ; BSR set to: 0
  4106  0115B2  0100               	movlb	0	; () banked
  4107  0115B4  51CB               	movf	exp@sign& (0+255),w,b
  4108  0115B6  0100               	movlb	0	; () banked
  4109  0115B8  B4D8               	btfsc	status,2,c
  4110  0115BA  D012               	goto	l2755
  4111                           
  4112                           ; BSR set to: 0
  4113  0115BC  C0C1  F07C         	movff	exp@x,___flneg@f1
  4114  0115C0  C0C2  F07D         	movff	exp@x+1,___flneg@f1+1
  4115  0115C4  C0C3  F07E         	movff	exp@x+2,___flneg@f1+2
  4116  0115C8  C0C4  F07F         	movff	exp@x+3,___flneg@f1+3
  4117  0115CC  EC81  F0B3         	call	___flneg	;wreg free
  4118  0115D0  C07C  F0C1         	movff	?___flneg,exp@x
  4119  0115D4  C07D  F0C2         	movff	?___flneg+1,exp@x+1
  4120  0115D8  C07E  F0C3         	movff	?___flneg+2,exp@x+2
  4121  0115DC  C07F  F0C4         	movff	?___flneg+3,exp@x+3
  4122  0115E0                     l2755:
  4123  0115E0  C0C1  F07C         	movff	exp@x,___flmul@b
  4124  0115E4  C0C2  F07D         	movff	exp@x+1,___flmul@b+1
  4125  0115E8  C0C3  F07E         	movff	exp@x+2,___flmul@b+2
  4126  0115EC  C0C4  F07F         	movff	exp@x+3,___flmul@b+3
  4127  0115F0  0E3B               	movlw	59
  4128  0115F2  0100               	movlb	0	; () banked
  4129  0115F4  6F80               	movwf	___flmul@a& (0+255),b
  4130  0115F6  0EAA               	movlw	170
  4131  0115F8  6F81               	movwf	(___flmul@a+1)& (0+255),b
  4132  0115FA  0EB8               	movlw	184
  4133  0115FC  6F82               	movwf	(___flmul@a+2)& (0+255),b
  4134  0115FE  0E3F               	movlw	63
  4135  011600  6F83               	movwf	(___flmul@a+3)& (0+255),b
  4136  011602  EC54  F082         	call	___flmul	;wreg free
  4137  011606  C07C  F0C1         	movff	?___flmul,exp@x
  4138  01160A  C07D  F0C2         	movff	?___flmul+1,exp@x+1
  4139  01160E  C07E  F0C3         	movff	?___flmul+2,exp@x+2
  4140  011612  C07F  F0C4         	movff	?___flmul+3,exp@x+3
  4141  011616  C0C1  F0B3         	movff	exp@x,floor@x
  4142  01161A  C0C2  F0B4         	movff	exp@x+1,floor@x+1
  4143  01161E  C0C3  F0B5         	movff	exp@x+2,floor@x+2
  4144  011622  C0C4  F0B6         	movff	exp@x+3,floor@x+3
  4145  011626  EC13  F09E         	call	_floor	;wreg free
  4146  01162A  C0B3  F0C5         	movff	?_floor,_exp$15224
  4147  01162E  C0B4  F0C6         	movff	?_floor+1,_exp$15224+1
  4148  011632  C0B5  F0C7         	movff	?_floor+2,_exp$15224+2
  4149  011636  C0B6  F0C8         	movff	?_floor+3,_exp$15224+3
  4150  01163A  C0C5  F0A9         	movff	_exp$15224,___fltol@f1
  4151  01163E  C0C6  F0AA         	movff	_exp$15224+1,___fltol@f1+1
  4152  011642  C0C7  F0AB         	movff	_exp$15224+2,___fltol@f1+2
  4153  011646  C0C8  F0AC         	movff	_exp$15224+3,___fltol@f1+3
  4154  01164A  EC31  F09F         	call	___fltol	;wreg free
  4155  01164E  C0A9  F0C9         	movff	?___fltol,exp@exponent
  4156  011652  C0AA  F0CA         	movff	?___fltol+1,exp@exponent+1
  4157  011656  C0C1  F0A9         	movff	exp@x,___flsub@b
  4158  01165A  C0C2  F0AA         	movff	exp@x+1,___flsub@b+1
  4159  01165E  C0C3  F0AB         	movff	exp@x+2,___flsub@b+2
  4160  011662  C0C4  F0AC         	movff	exp@x+3,___flsub@b+3
  4161  011666  C0C9  F06E         	movff	exp@exponent,___xxtofl@val
  4162  01166A  C0CA  F06F         	movff	exp@exponent+1,___xxtofl@val+1
  4163  01166E  0100               	movlb	0	; () banked
  4164  011670  0E00               	movlw	0
  4165  011672  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4166  011674  0EFF               	movlw	-1
  4167  011676  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  4168  011678  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  4169  01167A  0E01               	movlw	1
  4170  01167C  EC47  F092         	call	___xxtofl
  4171  011680  C06E  F0AD         	movff	?___xxtofl,___flsub@a
  4172  011684  C06F  F0AE         	movff	?___xxtofl+1,___flsub@a+1
  4173  011688  C070  F0AF         	movff	?___xxtofl+2,___flsub@a+2
  4174  01168C  C071  F0B0         	movff	?___xxtofl+3,___flsub@a+3
  4175  011690  EC4F  F0B1         	call	___flsub	;wreg free
  4176  011694  C0A9  F0C1         	movff	?___flsub,exp@x
  4177  011698  C0AA  F0C2         	movff	?___flsub+1,exp@x+1
  4178  01169C  C0AB  F0C3         	movff	?___flsub+2,exp@x+2
  4179  0116A0  C0AC  F0C4         	movff	?___flsub+3,exp@x+3
  4180  0116A4  C0C1  F0A9         	movff	exp@x,eval_poly@x
  4181  0116A8  C0C2  F0AA         	movff	exp@x+1,eval_poly@x+1
  4182  0116AC  C0C3  F0AB         	movff	exp@x+2,eval_poly@x+2
  4183  0116B0  C0C4  F0AC         	movff	exp@x+3,eval_poly@x+3
  4184  0116B4  0EAF               	movlw	low exp@coeff
  4185  0116B6  0100               	movlb	0	; () banked
  4186  0116B8  6FAD               	movwf	eval_poly@d& (0+255),b
  4187  0116BA  0EFE               	movlw	high exp@coeff
  4188  0116BC  0100               	movlb	0	; () banked
  4189  0116BE  6FAE               	movwf	(eval_poly@d+1)& (0+255),b
  4190  0116C0  0E00               	movlw	0
  4191  0116C2  0100               	movlb	0	; () banked
  4192  0116C4  6FB0               	movwf	(eval_poly@n+1)& (0+255),b
  4193  0116C6  0E09               	movlw	9
  4194  0116C8  6FAF               	movwf	eval_poly@n& (0+255),b
  4195  0116CA  ECA5  F09E         	call	_eval_poly	;wreg free
  4196  0116CE  C0A9  F0B9         	movff	?_eval_poly,ldexp@value
  4197  0116D2  C0AA  F0BA         	movff	?_eval_poly+1,ldexp@value+1
  4198  0116D6  C0AB  F0BB         	movff	?_eval_poly+2,ldexp@value+2
  4199  0116DA  C0AC  F0BC         	movff	?_eval_poly+3,ldexp@value+3
  4200  0116DE  C0C9  F0BD         	movff	exp@exponent,ldexp@newexp
  4201  0116E2  C0CA  F0BE         	movff	exp@exponent+1,ldexp@newexp+1
  4202  0116E6  EC81  F09D         	call	_ldexp	;wreg free
  4203  0116EA  C0B9  F0C1         	movff	?_ldexp,exp@x
  4204  0116EE  C0BA  F0C2         	movff	?_ldexp+1,exp@x+1
  4205  0116F2  C0BB  F0C3         	movff	?_ldexp+2,exp@x+2
  4206  0116F6  C0BC  F0C4         	movff	?_ldexp+3,exp@x+3
  4207  0116FA  0100               	movlb	0	; () banked
  4208  0116FC  51CB               	movf	exp@sign& (0+255),w,b
  4209  0116FE  0100               	movlb	0	; () banked
  4210  011700  B4D8               	btfsc	status,2,c
  4211  011702  D035               	goto	l2756
  4212                           
  4213                           ; BSR set to: 0
  4214  011704  0100               	movlb	0	; () banked
  4215  011706  29C1               	incf	exp@x& (0+255),w,b
  4216  011708  E116               	bnz	l14480
  4217  01170A  0100               	movlb	0	; () banked
  4218  01170C  29C2               	incf	(exp@x+1)& (0+255),w,b
  4219  01170E  E113               	bnz	l14480
  4220  011710  0E7F               	movlw	127
  4221  011712  0100               	movlb	0	; () banked
  4222  011714  19C3               	xorwf	(exp@x+2)& (0+255),w,b
  4223  011716  E10F               	bnz	l14480
  4224  011718  0E7F               	movlw	127
  4225  01171A  0100               	movlb	0	; () banked
  4226  01171C  19C4               	xorwf	(exp@x+3)& (0+255),w,b
  4227  01171E  A4D8               	btfss	status,2,c
  4228  011720  D00A               	goto	l2757
  4229                           
  4230                           ; BSR set to: 0
  4231  011722  0E00               	movlw	0
  4232  011724  0100               	movlb	0	; () banked
  4233  011726  6FC1               	movwf	?_exp& (0+255),b
  4234  011728  0E00               	movlw	0
  4235  01172A  6FC2               	movwf	(?_exp+1)& (0+255),b
  4236  01172C  0E00               	movlw	0
  4237  01172E  6FC3               	movwf	(?_exp+2)& (0+255),b
  4238  011730  0E00               	movlw	0
  4239  011732  6FC4               	movwf	(?_exp+3)& (0+255),b
  4240                           
  4241                           ; BSR set to: 0
  4242  011734  0012               	return	
  4243  011736                     l2757:
  4244  011736                     l14480:
  4245                           
  4246                           ; BSR set to: 0
  4247  011736  0E00               	movlw	0
  4248  011738  0100               	movlb	0	; () banked
  4249  01173A  6F60               	movwf	___fldiv@b& (0+255),b
  4250  01173C  0E00               	movlw	0
  4251  01173E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  4252  011740  0E80               	movlw	128
  4253  011742  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  4254  011744  0E3F               	movlw	63
  4255  011746  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  4256  011748  C0C1  F064         	movff	exp@x,___fldiv@a
  4257  01174C  C0C2  F065         	movff	exp@x+1,___fldiv@a+1
  4258  011750  C0C3  F066         	movff	exp@x+2,___fldiv@a+2
  4259  011754  C0C4  F067         	movff	exp@x+3,___fldiv@a+3
  4260  011758  ECB6  F086         	call	___fldiv	;wreg free
  4261  01175C  C060  F0C1         	movff	?___fldiv,?_exp
  4262  011760  C061  F0C2         	movff	?___fldiv+1,?_exp+1
  4263  011764  C062  F0C3         	movff	?___fldiv+2,?_exp+2
  4264  011768  C063  F0C4         	movff	?___fldiv+3,?_exp+3
  4265  01176C  0012               	return	
  4266  01176E                     l2756:
  4267                           
  4268                           ; BSR set to: 0
  4269  01176E  C0C1  F0C1         	movff	exp@x,?_exp
  4270  011772  C0C2  F0C2         	movff	exp@x+1,?_exp+1
  4271  011776  C0C3  F0C3         	movff	exp@x+2,?_exp+2
  4272  01177A  C0C4  F0C4         	movff	exp@x+3,?_exp+3
  4273  01177E  0012               	return		;funcret
  4274  011780                     __end_of_exp:
  4275                           	opt stack 0
  4276                           tblptru	equ	0xFF8
  4277                           tblptrh	equ	0xFF7
  4278                           tblptrl	equ	0xFF6
  4279                           tablat	equ	0xFF5
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function _ldexp *****************
  4288 ;; Defined at:
  4289 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  value           4   89[BANK0 ] unsigned char 
  4292 ;;  newexp          2   93[BANK0 ] int 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  4   89[BANK0 ] int 
  4297 ;; Registers used:
  4298 ;;		wreg, status,2, status,0
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4304 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;Total ram usage:        8 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    7
  4311 ;; This function calls:
  4312 ;;		Nothing
  4313 ;; This function is called by:
  4314 ;;		_exp
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text5
  4319  013B02                     __ptext5:
  4320                           	opt stack 0
  4321  013B02                     _ldexp:
  4322                           	opt stack 21
  4323                           
  4324                           ;incstack = 0
  4325  013B02  0100               	movlb	0	; () banked
  4326  013B04  51B9               	movf	ldexp@value& (0+255),w,b
  4327  013B06  0100               	movlb	0	; () banked
  4328  013B08  11BA               	iorwf	(ldexp@value+1)& (0+255),w,b
  4329  013B0A  0100               	movlb	0	; () banked
  4330  013B0C  11BB               	iorwf	(ldexp@value+2)& (0+255),w,b
  4331  013B0E  0100               	movlb	0	; () banked
  4332  013B10  11BC               	iorwf	(ldexp@value+3)& (0+255),w,b
  4333  013B12  A4D8               	btfss	status,2,c
  4334  013B14  D00A               	goto	l2775
  4335                           
  4336                           ; BSR set to: 0
  4337  013B16  0E00               	movlw	0
  4338  013B18  0100               	movlb	0	; () banked
  4339  013B1A  6FB9               	movwf	?_ldexp& (0+255),b
  4340  013B1C  0E00               	movlw	0
  4341  013B1E  6FBA               	movwf	(?_ldexp+1)& (0+255),b
  4342  013B20  0E00               	movlw	0
  4343  013B22  6FBB               	movwf	(?_ldexp+2)& (0+255),b
  4344  013B24  0E00               	movlw	0
  4345  013B26  6FBC               	movwf	(?_ldexp+3)& (0+255),b
  4346                           
  4347                           ; BSR set to: 0
  4348  013B28  0012               	return	
  4349  013B2A                     l2775:
  4350                           
  4351                           ; BSR set to: 0
  4352                           
  4353                           ; BSR set to: 0
  4354  013B2A  0100               	movlb	0	; () banked
  4355  013B2C  51BC               	movf	(ldexp@value+3)& (0+255),w,b
  4356  013B2E  0B7F               	andlw	127
  4357  013B30  0100               	movlb	0	; () banked
  4358  013B32  6FBF               	movwf	??_ldexp& (0+255),b
  4359  013B34  6BC0               	clrf	(??_ldexp+1)& (0+255),b
  4360  013B36  90D8               	bcf	status,0,c
  4361  013B38  0100               	movlb	0	; () banked
  4362  013B3A  37BF               	rlcf	??_ldexp& (0+255),f,b
  4363  013B3C  37C0               	rlcf	(??_ldexp+1)& (0+255),f,b
  4364  013B3E  0100               	movlb	0	; () banked
  4365  013B40  51BF               	movf	??_ldexp& (0+255),w,b
  4366  013B42  0100               	movlb	0	; () banked
  4367  013B44  27BD               	addwf	ldexp@newexp& (0+255),f,b
  4368  013B46  0100               	movlb	0	; () banked
  4369  013B48  51C0               	movf	(??_ldexp+1)& (0+255),w,b
  4370  013B4A  0100               	movlb	0	; () banked
  4371  013B4C  23BE               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4372  013B4E  0100               	movlb	0	; () banked
  4373  013B50  AFBB               	btfss	(ldexp@value+2)& (0+255),7,b
  4374  013B52  D004               	goto	u11470
  4375  013B54  0100               	movlb	0	; () banked
  4376  013B56  6BBF               	clrf	??_ldexp& (0+255),b
  4377  013B58  2BBF               	incf	??_ldexp& (0+255),f,b
  4378  013B5A  D002               	goto	u11478
  4379  013B5C                     u11470:
  4380  013B5C  0100               	movlb	0	; () banked
  4381  013B5E  6BBF               	clrf	??_ldexp& (0+255),b
  4382  013B60                     u11478:
  4383  013B60  0100               	movlb	0	; () banked
  4384  013B62  51BF               	movf	??_ldexp& (0+255),w,b
  4385  013B64  0100               	movlb	0	; () banked
  4386  013B66  27BD               	addwf	ldexp@newexp& (0+255),f,b
  4387  013B68  0E00               	movlw	0
  4388  013B6A  23BE               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4389  013B6C  0100               	movlb	0	; () banked
  4390  013B6E  AFBE               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4391  013B70  D00F               	goto	l2777
  4392                           
  4393                           ; BSR set to: 0
  4394  013B72  0E00               	movlw	0
  4395  013B74  0101               	movlb	1	; () banked
  4396  013B76  6F1C               	movwf	(_errno+1)& (0+255),b
  4397  013B78  0E22               	movlw	34
  4398  013B7A  6F1B               	movwf	_errno& (0+255),b
  4399  013B7C  0E00               	movlw	0
  4400  013B7E  0100               	movlb	0	; () banked
  4401  013B80  6FB9               	movwf	?_ldexp& (0+255),b
  4402  013B82  0E00               	movlw	0
  4403  013B84  6FBA               	movwf	(?_ldexp+1)& (0+255),b
  4404  013B86  0E00               	movlw	0
  4405  013B88  6FBB               	movwf	(?_ldexp+2)& (0+255),b
  4406  013B8A  0E00               	movlw	0
  4407  013B8C                     L1:
  4408  013B8C  6FBC               	movwf	(?_ldexp+3)& (0+255),b
  4409                           
  4410                           ; BSR set to: 0
  4411  013B8E  0012               	return	
  4412  013B90                     l2777:
  4413                           
  4414                           ; BSR set to: 0
  4415                           
  4416                           ; BSR set to: 0
  4417  013B90  0100               	movlb	0	; () banked
  4418  013B92  BFBE               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  4419  013B94  D01E               	goto	l2779
  4420  013B96  0100               	movlb	0	; () banked
  4421  013B98  05BE               	decf	(ldexp@newexp+1)& (0+255),w,b
  4422  013B9A  A0D8               	btfss	status,0,c
  4423  013B9C  D01A               	goto	l2779
  4424                           
  4425                           ; BSR set to: 0
  4426  013B9E  0E00               	movlw	0
  4427  013BA0  0101               	movlb	1	; () banked
  4428  013BA2  6F1C               	movwf	(_errno+1)& (0+255),b
  4429  013BA4  0E22               	movlw	34
  4430  013BA6  6F1B               	movwf	_errno& (0+255),b
  4431                           
  4432                           ; BSR set to: 1
  4433  013BA8  0100               	movlb	0	; () banked
  4434  013BAA  AFBC               	btfss	(ldexp@value+3)& (0+255),7,b
  4435  013BAC  D009               	goto	l2780
  4436                           
  4437                           ; BSR set to: 0
  4438  013BAE  0EFF               	movlw	255
  4439  013BB0  0100               	movlb	0	; () banked
  4440  013BB2  6FB9               	movwf	?_ldexp& (0+255),b
  4441  013BB4  0EFF               	movlw	255
  4442  013BB6  6FBA               	movwf	(?_ldexp+1)& (0+255),b
  4443  013BB8  0E7F               	movlw	127
  4444  013BBA  6FBB               	movwf	(?_ldexp+2)& (0+255),b
  4445  013BBC  0EFF               	movlw	255
  4446  013BBE  D7E6               	goto	L1
  4447  013BC0                     l2780:
  4448                           
  4449                           ; BSR set to: 0
  4450                           
  4451                           ; BSR set to: 0
  4452  013BC0  0EFF               	movlw	255
  4453  013BC2  0100               	movlb	0	; () banked
  4454  013BC4  6FB9               	movwf	?_ldexp& (0+255),b
  4455  013BC6  0EFF               	movlw	255
  4456  013BC8  6FBA               	movwf	(?_ldexp+1)& (0+255),b
  4457  013BCA  0E7F               	movlw	127
  4458  013BCC  6FBB               	movwf	(?_ldexp+2)& (0+255),b
  4459  013BCE  0E7F               	movlw	127
  4460  013BD0  D7DD               	goto	L1
  4461  013BD2                     l2779:
  4462                           
  4463                           ; BSR set to: 0
  4464                           
  4465                           ; BSR set to: 0
  4466  013BD2  0100               	movlb	0	; () banked
  4467  013BD4  35BE               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4468  013BD6  31BE               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4469  013BD8  0100               	movlb	0	; () banked
  4470  013BDA  6FC0               	movwf	(??_ldexp+1)& (0+255),b
  4471  013BDC  0100               	movlb	0	; () banked
  4472  013BDE  31BD               	rrcf	ldexp@newexp& (0+255),w,b
  4473  013BE0  0100               	movlb	0	; () banked
  4474  013BE2  6FBF               	movwf	??_ldexp& (0+255),b
  4475  013BE4  0100               	movlb	0	; () banked
  4476  013BE6  51BC               	movf	(ldexp@value+3)& (0+255),w,b
  4477  013BE8  0100               	movlb	0	; () banked
  4478  013BEA  19BF               	xorwf	??_ldexp& (0+255),w,b
  4479  013BEC  0B80               	andlw	-128
  4480  013BEE  19BF               	xorwf	??_ldexp& (0+255),w,b
  4481  013BF0  0100               	movlb	0	; () banked
  4482  013BF2  6FBC               	movwf	(ldexp@value+3)& (0+255),b
  4483  013BF4  C0BD  F0BF         	movff	ldexp@newexp,??_ldexp
  4484  013BF8  0E01               	movlw	1
  4485  013BFA  0100               	movlb	0	; () banked
  4486  013BFC  17BF               	andwf	??_ldexp& (0+255),f,b
  4487  013BFE  0100               	movlb	0	; () banked
  4488  013C00  33BF               	rrcf	??_ldexp& (0+255),f,b
  4489  013C02  33BF               	rrcf	??_ldexp& (0+255),f,b
  4490  013C04  0100               	movlb	0	; () banked
  4491  013C06  51BB               	movf	(ldexp@value+2)& (0+255),w,b
  4492  013C08  0100               	movlb	0	; () banked
  4493  013C0A  19BF               	xorwf	??_ldexp& (0+255),w,b
  4494  013C0C  0B7F               	andlw	-129
  4495  013C0E  19BF               	xorwf	??_ldexp& (0+255),w,b
  4496  013C10  0100               	movlb	0	; () banked
  4497  013C12  6FBB               	movwf	(ldexp@value+2)& (0+255),b
  4498                           
  4499                           ; BSR set to: 0
  4500                           
  4501                           ; BSR set to: 0
  4502                           
  4503                           ; BSR set to: 0
  4504  013C14  C0B9  F0B9         	movff	ldexp@value,?_ldexp
  4505  013C18  C0BA  F0BA         	movff	ldexp@value+1,?_ldexp+1
  4506  013C1C  C0BB  F0BB         	movff	ldexp@value+2,?_ldexp+2
  4507  013C20  C0BC  F0BC         	movff	ldexp@value+3,?_ldexp+3
  4508  013C24  0012               	return	
  4509  013C26                     __end_of_ldexp:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           postdec1	equ	0xFE5
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function _floor *****************
  4523 ;; Defined at:
  4524 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  x               4   83[BANK0 ] int 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  i               4   87[BANK0 ] int 
  4529 ;;  expon           2   91[BANK0 ] int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  4   83[BANK0 ] int 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:       10 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    8
  4546 ;; This function calls:
  4547 ;;		___fladd
  4548 ;;		___flge
  4549 ;;		___fltol
  4550 ;;		___xxtofl
  4551 ;;		_frexp
  4552 ;; This function is called by:
  4553 ;;		_exp
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text6
  4558  013C26                     __ptext6:
  4559                           	opt stack 0
  4560  013C26                     _floor:
  4561                           	opt stack 20
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;incstack = 0
  4565  013C26  C0B3  F060         	movff	floor@x,frexp@value
  4566  013C2A  C0B4  F061         	movff	floor@x+1,frexp@value+1
  4567  013C2E  C0B5  F062         	movff	floor@x+2,frexp@value+2
  4568  013C32  C0B6  F063         	movff	floor@x+3,frexp@value+3
  4569  013C36  0EBB               	movlw	low floor@expon
  4570  013C38  0100               	movlb	0	; () banked
  4571  013C3A  6F64               	movwf	frexp@eptr& (0+255),b
  4572  013C3C  0E00               	movlw	high floor@expon
  4573  013C3E  0100               	movlb	0	; () banked
  4574  013C40  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  4575  013C42  ECF4  F0A4         	call	_frexp	;wreg free
  4576  013C46  0100               	movlb	0	; () banked
  4577  013C48  AFBC               	btfss	(floor@expon+1)& (0+255),7,b
  4578  013C4A  D017               	goto	l2762
  4579                           
  4580                           ; BSR set to: 0
  4581  013C4C  0100               	movlb	0	; () banked
  4582  013C4E  AFB6               	btfss	(floor@x+3)& (0+255),7,b
  4583  013C50  D00A               	goto	l2763
  4584                           
  4585                           ; BSR set to: 0
  4586  013C52  0E00               	movlw	0
  4587  013C54  0100               	movlb	0	; () banked
  4588  013C56  6FB3               	movwf	?_floor& (0+255),b
  4589  013C58  0E00               	movlw	0
  4590  013C5A  6FB4               	movwf	(?_floor+1)& (0+255),b
  4591  013C5C  0E80               	movlw	128
  4592  013C5E  6FB5               	movwf	(?_floor+2)& (0+255),b
  4593  013C60  0EBF               	movlw	191
  4594  013C62  6FB6               	movwf	(?_floor+3)& (0+255),b
  4595                           
  4596                           ; BSR set to: 0
  4597  013C64  0012               	return	
  4598  013C66                     l2763:
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  013C66  0E00               	movlw	0
  4604  013C68  0100               	movlb	0	; () banked
  4605  013C6A  6FB3               	movwf	?_floor& (0+255),b
  4606  013C6C  0E00               	movlw	0
  4607  013C6E  6FB4               	movwf	(?_floor+1)& (0+255),b
  4608  013C70  0E00               	movlw	0
  4609  013C72  6FB5               	movwf	(?_floor+2)& (0+255),b
  4610  013C74  0E00               	movlw	0
  4611  013C76  6FB6               	movwf	(?_floor+3)& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614  013C78  0012               	return	
  4615  013C7A                     l2762:
  4616                           
  4617                           ; BSR set to: 0
  4618                           
  4619                           ; BSR set to: 0
  4620  013C7A  0100               	movlb	0	; () banked
  4621  013C7C  51BC               	movf	(floor@expon+1)& (0+255),w,b
  4622  013C7E  E105               	bnz	u11430
  4623  013C80  0E1D               	movlw	29
  4624  013C82  0100               	movlb	0	; () banked
  4625  013C84  5DBB               	subwf	floor@expon& (0+255),w,b
  4626  013C86  A0D8               	btfss	status,0,c
  4627  013C88  D009               	goto	l2765
  4628  013C8A                     u11430:
  4629                           
  4630                           ; BSR set to: 0
  4631  013C8A  C0B3  F0B3         	movff	floor@x,?_floor
  4632  013C8E  C0B4  F0B4         	movff	floor@x+1,?_floor+1
  4633  013C92  C0B5  F0B5         	movff	floor@x+2,?_floor+2
  4634  013C96  C0B6  F0B6         	movff	floor@x+3,?_floor+3
  4635  013C9A  0012               	return	
  4636  013C9C                     l2765:
  4637                           
  4638                           ; BSR set to: 0
  4639                           
  4640                           ; BSR set to: 0
  4641  013C9C  C0B3  F0A9         	movff	floor@x,___fltol@f1
  4642  013CA0  C0B4  F0AA         	movff	floor@x+1,___fltol@f1+1
  4643  013CA4  C0B5  F0AB         	movff	floor@x+2,___fltol@f1+2
  4644  013CA8  C0B6  F0AC         	movff	floor@x+3,___fltol@f1+3
  4645  013CAC  EC31  F09F         	call	___fltol	;wreg free
  4646  013CB0  C0A9  F06E         	movff	?___fltol,___xxtofl@val
  4647  013CB4  C0AA  F06F         	movff	?___fltol+1,___xxtofl@val+1
  4648  013CB8  C0AB  F070         	movff	?___fltol+2,___xxtofl@val+2
  4649  013CBC  C0AC  F071         	movff	?___fltol+3,___xxtofl@val+3
  4650  013CC0  0E01               	movlw	1
  4651  013CC2  EC47  F092         	call	___xxtofl
  4652  013CC6  C06E  F0B7         	movff	?___xxtofl,floor@i
  4653  013CCA  C06F  F0B8         	movff	?___xxtofl+1,floor@i+1
  4654  013CCE  C070  F0B9         	movff	?___xxtofl+2,floor@i+2
  4655  013CD2  C071  F0BA         	movff	?___xxtofl+3,floor@i+3
  4656  013CD6  C0B3  F060         	movff	floor@x,___flge@ff1
  4657  013CDA  C0B4  F061         	movff	floor@x+1,___flge@ff1+1
  4658  013CDE  C0B5  F062         	movff	floor@x+2,___flge@ff1+2
  4659  013CE2  C0B6  F063         	movff	floor@x+3,___flge@ff1+3
  4660  013CE6  C0B7  F064         	movff	floor@i,___flge@ff2
  4661  013CEA  C0B8  F065         	movff	floor@i+1,___flge@ff2+1
  4662  013CEE  C0B9  F066         	movff	floor@i+2,___flge@ff2+2
  4663  013CF2  C0BA  F067         	movff	floor@i+3,___flge@ff2+3
  4664  013CF6  EC41  F097         	call	___flge	;wreg free
  4665  013CFA  0100               	movlb	0	; () banked
  4666  013CFC  B0D8               	btfsc	status,0,c
  4667  013CFE  D01C               	goto	l2766
  4668                           
  4669                           ; BSR set to: 0
  4670  013D00  C0B7  F095         	movff	floor@i,___fladd@b
  4671  013D04  C0B8  F096         	movff	floor@i+1,___fladd@b+1
  4672  013D08  C0B9  F097         	movff	floor@i+2,___fladd@b+2
  4673  013D0C  C0BA  F098         	movff	floor@i+3,___fladd@b+3
  4674  013D10  0E00               	movlw	0
  4675  013D12  0100               	movlb	0	; () banked
  4676  013D14  6F99               	movwf	___fladd@a& (0+255),b
  4677  013D16  0E00               	movlw	0
  4678  013D18  6F9A               	movwf	(___fladd@a+1)& (0+255),b
  4679  013D1A  0E80               	movlw	128
  4680  013D1C  6F9B               	movwf	(___fladd@a+2)& (0+255),b
  4681  013D1E  0EBF               	movlw	191
  4682  013D20  6F9C               	movwf	(___fladd@a+3)& (0+255),b
  4683  013D22  EC00  F080         	call	___fladd	;wreg free
  4684  013D26  C095  F0B3         	movff	?___fladd,?_floor
  4685  013D2A  C096  F0B4         	movff	?___fladd+1,?_floor+1
  4686  013D2E  C097  F0B5         	movff	?___fladd+2,?_floor+2
  4687  013D32  C098  F0B6         	movff	?___fladd+3,?_floor+3
  4688  013D36  0012               	return	
  4689  013D38                     l2766:
  4690                           
  4691                           ; BSR set to: 0
  4692  013D38  C0B7  F0B3         	movff	floor@i,?_floor
  4693  013D3C  C0B8  F0B4         	movff	floor@i+1,?_floor+1
  4694  013D40  C0B9  F0B5         	movff	floor@i+2,?_floor+2
  4695  013D44  C0BA  F0B6         	movff	floor@i+3,?_floor+3
  4696  013D48  0012               	return		;funcret
  4697  013D4A                     __end_of_floor:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           fsr1h	equ	0xFE2
  4707                           fsr1l	equ	0xFE1
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _frexp *****************
  4711 ;; Defined at:
  4712 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  value           4    0[BANK0 ] int 
  4715 ;;  eptr            2    4[BANK0 ] PTR int 
  4716 ;;		 -> log@exponent(2), floor@expon(2), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  4    0[BANK0 ] PTR int 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4728 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;Total ram usage:        8 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    7
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_floor
  4739 ;;		_log
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text7
  4744  0149E8                     __ptext7:
  4745                           	opt stack 0
  4746  0149E8                     _frexp:
  4747                           	opt stack 21
  4748                           
  4749                           ;incstack = 0
  4750  0149E8  0100               	movlb	0	; () banked
  4751  0149EA  5160               	movf	frexp@value& (0+255),w,b
  4752  0149EC  0100               	movlb	0	; () banked
  4753  0149EE  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  4754  0149F0  0100               	movlb	0	; () banked
  4755  0149F2  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  4756  0149F4  0100               	movlb	0	; () banked
  4757  0149F6  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  4758  0149F8  A4D8               	btfss	status,2,c
  4759  0149FA  D012               	goto	l2771
  4760                           
  4761                           ; BSR set to: 0
  4762  0149FC  C064  FFD9         	movff	frexp@eptr,fsr2l
  4763  014A00  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4764  014A04  0E00               	movlw	0
  4765  014A06  6EDE               	movwf	postinc2,c
  4766  014A08  0E00               	movlw	0
  4767  014A0A  6EDD               	movwf	postdec2,c
  4768                           
  4769                           ; BSR set to: 0
  4770  014A0C  0E00               	movlw	0
  4771  014A0E  0100               	movlb	0	; () banked
  4772  014A10  6F60               	movwf	?_frexp& (0+255),b
  4773  014A12  0E00               	movlw	0
  4774  014A14  6F61               	movwf	(?_frexp+1)& (0+255),b
  4775  014A16  0E00               	movlw	0
  4776  014A18  6F62               	movwf	(?_frexp+2)& (0+255),b
  4777  014A1A  0E00               	movlw	0
  4778  014A1C  6F63               	movwf	(?_frexp+3)& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781  014A1E  0012               	return	
  4782  014A20                     l2771:
  4783                           
  4784                           ; BSR set to: 0
  4785                           
  4786                           ; BSR set to: 0
  4787  014A20  0100               	movlb	0	; () banked
  4788  014A22  5163               	movf	(frexp@value+3)& (0+255),w,b
  4789  014A24  0B7F               	andlw	127
  4790  014A26  0100               	movlb	0	; () banked
  4791  014A28  6F66               	movwf	??_frexp& (0+255),b
  4792  014A2A  6B67               	clrf	(??_frexp+1)& (0+255),b
  4793  014A2C  90D8               	bcf	status,0,c
  4794  014A2E  0100               	movlb	0	; () banked
  4795  014A30  3766               	rlcf	??_frexp& (0+255),f,b
  4796  014A32  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  4797  014A34  C064  FFD9         	movff	frexp@eptr,fsr2l
  4798  014A38  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4799  014A3C  C066  FFDE         	movff	??_frexp,postinc2
  4800  014A40  C067  FFDD         	movff	??_frexp+1,postdec2
  4801  014A44  0100               	movlb	0	; () banked
  4802  014A46  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  4803  014A48  D004               	goto	u10820
  4804  014A4A  0100               	movlb	0	; () banked
  4805  014A4C  6B66               	clrf	??_frexp& (0+255),b
  4806  014A4E  2B66               	incf	??_frexp& (0+255),f,b
  4807  014A50  D002               	goto	u10828
  4808  014A52                     u10820:
  4809  014A52  0100               	movlb	0	; () banked
  4810  014A54  6B66               	clrf	??_frexp& (0+255),b
  4811  014A56                     u10828:
  4812  014A56  0100               	movlb	0	; () banked
  4813  014A58  5166               	movf	??_frexp& (0+255),w,b
  4814  014A5A  C064  FFD9         	movff	frexp@eptr,fsr2l
  4815  014A5E  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4816  014A62  12DE               	iorwf	postinc2,f,c
  4817  014A64  0E00               	movlw	0
  4818  014A66  12DD               	iorwf	postdec2,f,c
  4819                           
  4820                           ; BSR set to: 0
  4821  014A68  C064  FFD9         	movff	frexp@eptr,fsr2l
  4822  014A6C  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4823  014A70  0E82               	movlw	130
  4824  014A72  26DE               	addwf	postinc2,f,c
  4825  014A74  0EFF               	movlw	255
  4826  014A76  22DD               	addwfc	postdec2,f,c
  4827                           
  4828                           ; BSR set to: 0
  4829  014A78  0100               	movlb	0	; () banked
  4830  014A7A  8163               	bsf	(frexp@value+3)& (0+255),0,b
  4831  014A7C  8363               	bsf	(frexp@value+3)& (0+255),1,b
  4832  014A7E  8563               	bsf	(frexp@value+3)& (0+255),2,b
  4833  014A80  8763               	bsf	(frexp@value+3)& (0+255),3,b
  4834  014A82  8963               	bsf	(frexp@value+3)& (0+255),4,b
  4835  014A84  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  4836  014A86  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  4837                           
  4838                           ; BSR set to: 0
  4839  014A88  0100               	movlb	0	; () banked
  4840  014A8A  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  4841                           
  4842                           ; BSR set to: 0
  4843  014A8C  C060  F060         	movff	frexp@value,?_frexp
  4844  014A90  C061  F061         	movff	frexp@value+1,?_frexp+1
  4845  014A94  C062  F062         	movff	frexp@value+2,?_frexp+2
  4846  014A98  C063  F063         	movff	frexp@value+3,?_frexp+3
  4847  014A9C  0012               	return	
  4848  014A9E                     __end_of_frexp:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           postdec1	equ	0xFE5
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _eval_poly *****************
  4866 ;; Defined at:
  4867 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  x               4   73[BANK0 ] PTR int 
  4870 ;;  d               2   77[BANK0 ] PTR const 
  4871 ;;		 -> log@coeff(36), exp@coeff(40), 
  4872 ;;  n               2   79[BANK0 ] int 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  res             4   85[BANK0 ] int 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  4   73[BANK0 ] int 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:       16 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    8
  4891 ;; This function calls:
  4892 ;;		___fladd
  4893 ;;		___flmul
  4894 ;; This function is called by:
  4895 ;;		_exp
  4896 ;;		_log
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text8
  4901  013D4A                     __ptext8:
  4902                           	opt stack 0
  4903  013D4A                     _eval_poly:
  4904                           	opt stack 20
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;incstack = 0
  4908  013D4A  C0AF  F0B1         	movff	eval_poly@n,??_eval_poly
  4909  013D4E  C0B0  F0B2         	movff	eval_poly@n+1,??_eval_poly+1
  4910  013D52  0100               	movlb	0	; () banked
  4911  013D54  90D8               	bcf	status,0,c
  4912  013D56  37B1               	rlcf	??_eval_poly& (0+255),f,b
  4913  013D58  37B2               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4914  013D5A  0100               	movlb	0	; () banked
  4915  013D5C  90D8               	bcf	status,0,c
  4916  013D5E  37B1               	rlcf	??_eval_poly& (0+255),f,b
  4917  013D60  37B2               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4918  013D62  C0AD  F0B3         	movff	eval_poly@d,??_eval_poly+2
  4919  013D66  C0AE  F0B4         	movff	eval_poly@d+1,??_eval_poly+3
  4920  013D6A  0100               	movlb	0	; () banked
  4921  013D6C  51B1               	movf	??_eval_poly& (0+255),w,b
  4922  013D6E  0100               	movlb	0	; () banked
  4923  013D70  27B3               	addwf	(??_eval_poly+2)& (0+255),f,b
  4924  013D72  0100               	movlb	0	; () banked
  4925  013D74  51B2               	movf	(??_eval_poly+1)& (0+255),w,b
  4926  013D76  0100               	movlb	0	; () banked
  4927  013D78  23B4               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4928  013D7A  C0B3  FFF6         	movff	??_eval_poly+2,tblptrl
  4929  013D7E  C0B4  FFF7         	movff	??_eval_poly+3,tblptrh
  4930  013D82                     	if	0	;tblptru may be non-zero
  4931  013D82                     	endif
  4932  013D82                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4933  013D82  0E00               	movlw	low (__mediumconst shr (0+16))
  4934  013D84  6EF8               	movwf	tblptru,c
  4935  013D86                     	endif
  4936  013D86  0009               	tblrd		*+
  4937  013D88  CFF5 F0B5          	movff	tablat,eval_poly@res
  4938  013D8C  0009               	tblrd		*+
  4939  013D8E  CFF5 F0B6          	movff	tablat,eval_poly@res+1
  4940  013D92  0009               	tblrd		*+
  4941  013D94  CFF5 F0B7          	movff	tablat,eval_poly@res+2
  4942  013D98  000A               	tblrd		*-
  4943  013D9A  CFF5 F0B8          	movff	tablat,eval_poly@res+3
  4944  013D9E  D052               	goto	l2801
  4945  013DA0                     
  4946                           ; BSR set to: 0
  4947                           
  4948                           ; BSR set to: 0
  4949  013DA0  C0B5  F080         	movff	eval_poly@res,___flmul@a
  4950  013DA4  C0B6  F081         	movff	eval_poly@res+1,___flmul@a+1
  4951  013DA8  C0B7  F082         	movff	eval_poly@res+2,___flmul@a+2
  4952  013DAC  C0B8  F083         	movff	eval_poly@res+3,___flmul@a+3
  4953  013DB0  C0A9  F07C         	movff	eval_poly@x,___flmul@b
  4954  013DB4  C0AA  F07D         	movff	eval_poly@x+1,___flmul@b+1
  4955  013DB8  C0AB  F07E         	movff	eval_poly@x+2,___flmul@b+2
  4956  013DBC  C0AC  F07F         	movff	eval_poly@x+3,___flmul@b+3
  4957  013DC0  EC54  F082         	call	___flmul	;wreg free
  4958  013DC4  C07C  F095         	movff	?___flmul,___fladd@b
  4959  013DC8  C07D  F096         	movff	?___flmul+1,___fladd@b+1
  4960  013DCC  C07E  F097         	movff	?___flmul+2,___fladd@b+2
  4961  013DD0  C07F  F098         	movff	?___flmul+3,___fladd@b+3
  4962  013DD4  0100               	movlb	0	; () banked
  4963  013DD6  07AF               	decf	eval_poly@n& (0+255),f,b
  4964  013DD8  A0D8               	btfss	status,0,c
  4965  013DDA  07B0               	decf	(eval_poly@n+1)& (0+255),f,b
  4966  013DDC  C0AF  F0B1         	movff	eval_poly@n,??_eval_poly
  4967  013DE0  C0B0  F0B2         	movff	eval_poly@n+1,??_eval_poly+1
  4968  013DE4  0100               	movlb	0	; () banked
  4969  013DE6  90D8               	bcf	status,0,c
  4970  013DE8  37B1               	rlcf	??_eval_poly& (0+255),f,b
  4971  013DEA  37B2               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4972  013DEC  0100               	movlb	0	; () banked
  4973  013DEE  90D8               	bcf	status,0,c
  4974  013DF0  37B1               	rlcf	??_eval_poly& (0+255),f,b
  4975  013DF2  37B2               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4976  013DF4  C0AD  F0B3         	movff	eval_poly@d,??_eval_poly+2
  4977  013DF8  C0AE  F0B4         	movff	eval_poly@d+1,??_eval_poly+3
  4978  013DFC  0100               	movlb	0	; () banked
  4979  013DFE  51B1               	movf	??_eval_poly& (0+255),w,b
  4980  013E00  0100               	movlb	0	; () banked
  4981  013E02  27B3               	addwf	(??_eval_poly+2)& (0+255),f,b
  4982  013E04  0100               	movlb	0	; () banked
  4983  013E06  51B2               	movf	(??_eval_poly+1)& (0+255),w,b
  4984  013E08  0100               	movlb	0	; () banked
  4985  013E0A  23B4               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4986  013E0C  C0B3  FFF6         	movff	??_eval_poly+2,tblptrl
  4987  013E10  C0B4  FFF7         	movff	??_eval_poly+3,tblptrh
  4988  013E14                     	if	0	;tblptru may be non-zero
  4989  013E14                     	endif
  4990  013E14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4991  013E14  0E00               	movlw	low (__mediumconst shr (0+16))
  4992  013E16  6EF8               	movwf	tblptru,c
  4993  013E18                     	endif
  4994  013E18  0009               	tblrd		*+
  4995  013E1A  CFF5 F099          	movff	tablat,___fladd@a
  4996  013E1E  0009               	tblrd		*+
  4997  013E20  CFF5 F09A          	movff	tablat,___fladd@a+1
  4998  013E24  0009               	tblrd		*+
  4999  013E26  CFF5 F09B          	movff	tablat,___fladd@a+2
  5000  013E2A  000A               	tblrd		*-
  5001  013E2C  CFF5 F09C          	movff	tablat,___fladd@a+3
  5002  013E30  EC00  F080         	call	___fladd	;wreg free
  5003  013E34  C095  F0B5         	movff	?___fladd,eval_poly@res
  5004  013E38  C096  F0B6         	movff	?___fladd+1,eval_poly@res+1
  5005  013E3C  C097  F0B7         	movff	?___fladd+2,eval_poly@res+2
  5006  013E40  C098  F0B8         	movff	?___fladd+3,eval_poly@res+3
  5007  013E44                     l2801:
  5008  013E44  0100               	movlb	0	; () banked
  5009  013E46  51AF               	movf	eval_poly@n& (0+255),w,b
  5010  013E48  0100               	movlb	0	; () banked
  5011  013E4A  11B0               	iorwf	(eval_poly@n+1)& (0+255),w,b
  5012  013E4C  A4D8               	btfss	status,2,c
  5013  013E4E  D7A8               	goto	l2802
  5014                           
  5015                           ; BSR set to: 0
  5016  013E50  C0B5  F0A9         	movff	eval_poly@res,?_eval_poly
  5017  013E54  C0B6  F0AA         	movff	eval_poly@res+1,?_eval_poly+1
  5018  013E58  C0B7  F0AB         	movff	eval_poly@res+2,?_eval_poly+2
  5019  013E5C  C0B8  F0AC         	movff	eval_poly@res+3,?_eval_poly+3
  5020                           
  5021                           ; BSR set to: 0
  5022  013E60  0012               	return		;funcret
  5023  013E62                     __end_of_eval_poly:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function ___flsub *****************
  5041 ;; Defined at:
  5042 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  b               4   73[BANK0 ] int 
  5045 ;;  a               4   77[BANK0 ] int 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;		None
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  4   73[BANK0 ] int 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:        8 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    8
  5064 ;; This function calls:
  5065 ;;		___fladd
  5066 ;; This function is called by:
  5067 ;;		_exp
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text9
  5072  01629E                     __ptext9:
  5073                           	opt stack 0
  5074  01629E                     ___flsub:
  5075                           	opt stack 20
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;incstack = 0
  5079  01629E  0E00               	movlw	0
  5080  0162A0  0100               	movlb	0	; () banked
  5081  0162A2  1BAD               	xorwf	___flsub@a& (0+255),f,b
  5082  0162A4  0E00               	movlw	0
  5083  0162A6  1BAE               	xorwf	(___flsub@a+1)& (0+255),f,b
  5084  0162A8  0E00               	movlw	0
  5085  0162AA  1BAF               	xorwf	(___flsub@a+2)& (0+255),f,b
  5086  0162AC  0E80               	movlw	128
  5087  0162AE  1BB0               	xorwf	(___flsub@a+3)& (0+255),f,b
  5088                           
  5089                           ; BSR set to: 0
  5090  0162B0  C0A9  F095         	movff	___flsub@b,___fladd@b
  5091  0162B4  C0AA  F096         	movff	___flsub@b+1,___fladd@b+1
  5092  0162B8  C0AB  F097         	movff	___flsub@b+2,___fladd@b+2
  5093  0162BC  C0AC  F098         	movff	___flsub@b+3,___fladd@b+3
  5094  0162C0  C0AD  F099         	movff	___flsub@a,___fladd@a
  5095  0162C4  C0AE  F09A         	movff	___flsub@a+1,___fladd@a+1
  5096  0162C8  C0AF  F09B         	movff	___flsub@a+2,___fladd@a+2
  5097  0162CC  C0B0  F09C         	movff	___flsub@a+3,___fladd@a+3
  5098  0162D0  EC00  F080         	call	___fladd	;wreg free
  5099  0162D4  C095  F0A9         	movff	?___fladd,?___flsub
  5100  0162D8  C096  F0AA         	movff	?___fladd+1,?___flsub+1
  5101  0162DC  C097  F0AB         	movff	?___fladd+2,?___flsub+2
  5102  0162E0  C098  F0AC         	movff	?___fladd+3,?___flsub+3
  5103  0162E4  0012               	return	
  5104  0162E6                     __end_of___flsub:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1h	equ	0xFE2
  5114                           fsr1l	equ	0xFE1
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _positionMode *****************
  5122 ;; Defined at:
  5123 ;;		line 257 in file "main.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:        0 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:   10
  5144 ;; This function calls:
  5145 ;;		_Motor_Move
  5146 ;;		_Motor_Speed
  5147 ;;		___fladd
  5148 ;;		___flneg
  5149 ;;		___fltol
  5150 ;;		___xxtofl
  5151 ;; This function is called by:
  5152 ;;		_main
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text10
  5157  014564                     __ptext10:
  5158                           	opt stack 0
  5159  014564                     _positionMode:
  5160                           	opt stack 20
  5161                           
  5162                           ;main.c: 258: diff = angle - currentPos;
  5163                           
  5164                           ;incstack = 0
  5165  014564  C0D6  F099         	movff	_angle,___fladd@a
  5166  014568  C0D7  F09A         	movff	_angle+1,___fladd@a+1
  5167  01456C  C0D8  F09B         	movff	_angle+2,___fladd@a+2
  5168  014570  C0D9  F09C         	movff	_angle+3,___fladd@a+3
  5169  014574  C1F8  F06E         	movff	_currentPos,___xxtofl@val
  5170  014578  C1F9  F06F         	movff	_currentPos+1,___xxtofl@val+1
  5171  01457C  0100               	movlb	0	; () banked
  5172  01457E  0E00               	movlw	0
  5173  014580  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  5174  014582  0EFF               	movlw	-1
  5175  014584  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  5176  014586  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  5177  014588  0E01               	movlw	1
  5178  01458A  EC47  F092         	call	___xxtofl
  5179  01458E  C06E  F07C         	movff	?___xxtofl,___flneg@f1
  5180  014592  C06F  F07D         	movff	?___xxtofl+1,___flneg@f1+1
  5181  014596  C070  F07E         	movff	?___xxtofl+2,___flneg@f1+2
  5182  01459A  C071  F07F         	movff	?___xxtofl+3,___flneg@f1+3
  5183  01459E  EC81  F0B3         	call	___flneg	;wreg free
  5184  0145A2  C07C  F095         	movff	?___flneg,___fladd@b
  5185  0145A6  C07D  F096         	movff	?___flneg+1,___fladd@b+1
  5186  0145AA  C07E  F097         	movff	?___flneg+2,___fladd@b+2
  5187  0145AE  C07F  F098         	movff	?___flneg+3,___fladd@b+3
  5188  0145B2  EC00  F080         	call	___fladd	;wreg free
  5189  0145B6  C095  F0A9         	movff	?___fladd,___fltol@f1
  5190  0145BA  C096  F0AA         	movff	?___fladd+1,___fltol@f1+1
  5191  0145BE  C097  F0AB         	movff	?___fladd+2,___fltol@f1+2
  5192  0145C2  C098  F0AC         	movff	?___fladd+3,___fltol@f1+3
  5193  0145C6  EC31  F09F         	call	___fltol	;wreg free
  5194  0145CA  C0A9  F123         	movff	?___fltol,_diff
  5195  0145CE  C0AA  F124         	movff	?___fltol+1,_diff+1
  5196                           
  5197                           ;main.c: 259: if (Stepper.mDelta == 0) {
  5198  0145D2  0101               	movlb	1	; () banked
  5199  0145D4  51CA               	movf	_Stepper& (0+255),w,b
  5200  0145D6  0101               	movlb	1	; () banked
  5201  0145D8  11CB               	iorwf	(_Stepper+1)& (0+255),w,b
  5202  0145DA  A4D8               	btfss	status,2,c
  5203  0145DC  0012               	return	
  5204                           
  5205                           ; BSR set to: 1
  5206                           ;main.c: 260: Motor_Speed(&Stepper, 200);
  5207  0145DE  0ECA               	movlw	low _Stepper
  5208  0145E0  0100               	movlb	0	; () banked
  5209  0145E2  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  5210  0145E4  0E01               	movlw	high _Stepper
  5211  0145E6  0100               	movlb	0	; () banked
  5212  0145E8  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5213  0145EA  0E00               	movlw	0
  5214  0145EC  0100               	movlb	0	; () banked
  5215  0145EE  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5216  0145F0  0EC8               	movlw	200
  5217  0145F2  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  5218  0145F4  ECBE  F0B4         	call	_Motor_Speed	;wreg free
  5219                           
  5220                           ;main.c: 261: Motor_Move(&Stepper, diff);
  5221  0145F8  0ECA               	movlw	low _Stepper
  5222  0145FA  0100               	movlb	0	; () banked
  5223  0145FC  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  5224  0145FE  0E01               	movlw	high _Stepper
  5225  014600  0100               	movlb	0	; () banked
  5226  014602  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5227  014604  C123  F065         	movff	_diff,Motor_Move@pDelta
  5228  014608  C124  F066         	movff	_diff+1,Motor_Move@pDelta+1
  5229  01460C  EC64  F0B3         	call	_Motor_Move	;wreg free
  5230                           
  5231                           ;main.c: 262: currentPos = angle;
  5232  014610  C0D6  F0A9         	movff	_angle,___fltol@f1
  5233  014614  C0D7  F0AA         	movff	_angle+1,___fltol@f1+1
  5234  014618  C0D8  F0AB         	movff	_angle+2,___fltol@f1+2
  5235  01461C  C0D9  F0AC         	movff	_angle+3,___fltol@f1+3
  5236  014620  EC31  F09F         	call	___fltol	;wreg free
  5237  014624  C0A9  F1F8         	movff	?___fltol,_currentPos
  5238  014628  C0AA  F1F9         	movff	?___fltol+1,_currentPos+1
  5239  01462C  0012               	return	
  5240  01462E                     __end_of_positionMode:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           postinc0	equ	0xFEE
  5247                           wreg	equ	0xFE8
  5248                           postdec1	equ	0xFE5
  5249                           fsr1h	equ	0xFE2
  5250                           fsr1l	equ	0xFE1
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function ___flneg *****************
  5258 ;; Defined at:
  5259 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flneg.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  f1              4   28[BANK0 ] void 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  4   28[BANK0 ] void 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;Total ram usage:        4 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    7
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_positionMode
  5284 ;;		_pow
  5285 ;;		_exp
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text11
  5290  016702                     __ptext11:
  5291                           	opt stack 0
  5292  016702                     ___flneg:
  5293                           	opt stack 21
  5294                           
  5295                           ;incstack = 0
  5296  016702  0100               	movlb	0	; () banked
  5297  016704  517C               	movf	___flneg@f1& (0+255),w,b
  5298  016706  0100               	movlb	0	; () banked
  5299  016708  117D               	iorwf	(___flneg@f1+1)& (0+255),w,b
  5300  01670A  0100               	movlb	0	; () banked
  5301  01670C  117E               	iorwf	(___flneg@f1+2)& (0+255),w,b
  5302  01670E  0100               	movlb	0	; () banked
  5303  016710  117F               	iorwf	(___flneg@f1+3)& (0+255),w,b
  5304  016712  B4D8               	btfsc	status,2,c
  5305  016714  D009               	goto	l2364
  5306                           
  5307                           ; BSR set to: 0
  5308  016716  0E00               	movlw	0
  5309  016718  0100               	movlb	0	; () banked
  5310  01671A  1B7C               	xorwf	___flneg@f1& (0+255),f,b
  5311  01671C  0E00               	movlw	0
  5312  01671E  1B7D               	xorwf	(___flneg@f1+1)& (0+255),f,b
  5313  016720  0E00               	movlw	0
  5314  016722  1B7E               	xorwf	(___flneg@f1+2)& (0+255),f,b
  5315  016724  0E80               	movlw	128
  5316  016726  1B7F               	xorwf	(___flneg@f1+3)& (0+255),f,b
  5317  016728                     l2364:
  5318                           
  5319                           ; BSR set to: 0
  5320                           
  5321                           ; BSR set to: 0
  5322  016728  C07C  F07C         	movff	___flneg@f1,?___flneg
  5323  01672C  C07D  F07D         	movff	___flneg@f1+1,?___flneg+1
  5324  016730  C07E  F07E         	movff	___flneg@f1+2,?___flneg+2
  5325  016734  C07F  F07F         	movff	___flneg@f1+3,?___flneg+3
  5326  016738  0012               	return	
  5327  01673A                     __end_of___flneg:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec1	equ	0xFE5
  5336                           fsr1h	equ	0xFE2
  5337                           fsr1l	equ	0xFE1
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function ___fladd *****************
  5345 ;; Defined at:
  5346 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  b               4   53[BANK0 ] void 
  5349 ;;  a               4   57[BANK0 ] void 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  grs             1   72[BANK0 ] unsigned char 
  5352 ;;  bexp            1   71[BANK0 ] unsigned char 
  5353 ;;  aexp            1   70[BANK0 ] unsigned char 
  5354 ;;  signs           1   69[BANK0 ] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  4   53[BANK0 ] unsigned char 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5364 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;Total ram usage:       20 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    7
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_positionMode
  5375 ;;		___flsub
  5376 ;;		_floor
  5377 ;;		_log
  5378 ;;		_eval_poly
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text12
  5383  010000                     __ptext12:
  5384                           	opt stack 0
  5385  010000                     ___fladd:
  5386                           	opt stack 20
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;incstack = 0
  5390  010000  0100               	movlb	0	; () banked
  5391  010002  5198               	movf	(___fladd@b+3)& (0+255),w,b
  5392  010004  0B80               	andlw	128
  5393  010006  0100               	movlb	0	; () banked
  5394  010008  6FA5               	movwf	___fladd@signs& (0+255),b
  5395  01000A  0100               	movlb	0	; () banked
  5396  01000C  5198               	movf	(___fladd@b+3)& (0+255),w,b
  5397  01000E  2598               	addwf	(___fladd@b+3)& (0+255),w,b
  5398  010010  0100               	movlb	0	; () banked
  5399  010012  6FA7               	movwf	___fladd@bexp& (0+255),b
  5400                           
  5401                           ; BSR set to: 0
  5402  010014  0100               	movlb	0	; () banked
  5403  010016  AF97               	btfss	(___fladd@b+2)& (0+255),7,b
  5404  010018  D002               	goto	l2600
  5405                           
  5406                           ; BSR set to: 0
  5407  01001A  0100               	movlb	0	; () banked
  5408  01001C  81A7               	bsf	___fladd@bexp& (0+255),0,b
  5409  01001E                     l2600:
  5410                           
  5411                           ; BSR set to: 0
  5412                           
  5413                           ; BSR set to: 0
  5414  01001E  0100               	movlb	0	; () banked
  5415  010020  51A7               	movf	___fladd@bexp& (0+255),w,b
  5416  010022  0100               	movlb	0	; () banked
  5417  010024  B4D8               	btfsc	status,2,c
  5418  010026  D012               	goto	l2601
  5419                           
  5420                           ; BSR set to: 0
  5421  010028  0100               	movlb	0	; () banked
  5422  01002A  29A7               	incf	___fladd@bexp& (0+255),w,b
  5423  01002C  A4D8               	btfss	status,2,c
  5424  01002E  D009               	goto	l2602
  5425                           
  5426                           ; BSR set to: 0
  5427  010030  0E00               	movlw	0
  5428  010032  0100               	movlb	0	; () banked
  5429  010034  6F95               	movwf	___fladd@b& (0+255),b
  5430  010036  0E00               	movlw	0
  5431  010038  6F96               	movwf	(___fladd@b+1)& (0+255),b
  5432  01003A  0E00               	movlw	0
  5433  01003C  6F97               	movwf	(___fladd@b+2)& (0+255),b
  5434  01003E  0E00               	movlw	0
  5435  010040  6F98               	movwf	(___fladd@b+3)& (0+255),b
  5436  010042                     l2602:
  5437                           
  5438                           ; BSR set to: 0
  5439                           
  5440                           ; BSR set to: 0
  5441  010042  0100               	movlb	0	; () banked
  5442  010044  8F97               	bsf	(___fladd@b+2)& (0+255),7,b
  5443                           
  5444                           ; BSR set to: 0
  5445  010046  0E00               	movlw	0
  5446  010048  0100               	movlb	0	; () banked
  5447  01004A  D008               	goto	L2
  5448  01004C                     l2601:
  5449                           
  5450                           ; BSR set to: 0
  5451                           
  5452                           ; BSR set to: 0
  5453  01004C  0E00               	movlw	0
  5454  01004E  0100               	movlb	0	; () banked
  5455  010050  6F95               	movwf	___fladd@b& (0+255),b
  5456  010052  0E00               	movlw	0
  5457  010054  6F96               	movwf	(___fladd@b+1)& (0+255),b
  5458  010056  0E00               	movlw	0
  5459  010058  6F97               	movwf	(___fladd@b+2)& (0+255),b
  5460  01005A  0E00               	movlw	0
  5461  01005C                     L2:
  5462  01005C  6F98               	movwf	(___fladd@b+3)& (0+255),b
  5463                           
  5464                           ; BSR set to: 0
  5465                           
  5466                           ; BSR set to: 0
  5467  01005E  0100               	movlb	0	; () banked
  5468  010060  519C               	movf	(___fladd@a+3)& (0+255),w,b
  5469  010062  0B80               	andlw	128
  5470  010064  0100               	movlb	0	; () banked
  5471  010066  6FA6               	movwf	___fladd@aexp& (0+255),b
  5472                           
  5473                           ; BSR set to: 0
  5474  010068  0100               	movlb	0	; () banked
  5475  01006A  51A5               	movf	___fladd@signs& (0+255),w,b
  5476  01006C  0100               	movlb	0	; () banked
  5477  01006E  19A6               	xorwf	___fladd@aexp& (0+255),w,b
  5478  010070  B4D8               	btfsc	status,2,c
  5479  010072  D002               	goto	l2604
  5480                           
  5481                           ; BSR set to: 0
  5482  010074  0100               	movlb	0	; () banked
  5483  010076  8DA5               	bsf	___fladd@signs& (0+255),6,b
  5484  010078                     l2604:
  5485                           
  5486                           ; BSR set to: 0
  5487                           
  5488                           ; BSR set to: 0
  5489  010078  0100               	movlb	0	; () banked
  5490  01007A  519C               	movf	(___fladd@a+3)& (0+255),w,b
  5491  01007C  259C               	addwf	(___fladd@a+3)& (0+255),w,b
  5492  01007E  0100               	movlb	0	; () banked
  5493  010080  6FA6               	movwf	___fladd@aexp& (0+255),b
  5494                           
  5495                           ; BSR set to: 0
  5496  010082  0100               	movlb	0	; () banked
  5497  010084  AF9B               	btfss	(___fladd@a+2)& (0+255),7,b
  5498  010086  D002               	goto	l2605
  5499                           
  5500                           ; BSR set to: 0
  5501  010088  0100               	movlb	0	; () banked
  5502  01008A  81A6               	bsf	___fladd@aexp& (0+255),0,b
  5503  01008C                     l2605:
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ; BSR set to: 0
  5508  01008C  0100               	movlb	0	; () banked
  5509  01008E  51A6               	movf	___fladd@aexp& (0+255),w,b
  5510  010090  0100               	movlb	0	; () banked
  5511  010092  B4D8               	btfsc	status,2,c
  5512  010094  D012               	goto	l2606
  5513                           
  5514                           ; BSR set to: 0
  5515  010096  0100               	movlb	0	; () banked
  5516  010098  29A6               	incf	___fladd@aexp& (0+255),w,b
  5517  01009A  A4D8               	btfss	status,2,c
  5518  01009C  D009               	goto	l2607
  5519                           
  5520                           ; BSR set to: 0
  5521  01009E  0E00               	movlw	0
  5522  0100A0  0100               	movlb	0	; () banked
  5523  0100A2  6F99               	movwf	___fladd@a& (0+255),b
  5524  0100A4  0E00               	movlw	0
  5525  0100A6  6F9A               	movwf	(___fladd@a+1)& (0+255),b
  5526  0100A8  0E00               	movlw	0
  5527  0100AA  6F9B               	movwf	(___fladd@a+2)& (0+255),b
  5528  0100AC  0E00               	movlw	0
  5529  0100AE  6F9C               	movwf	(___fladd@a+3)& (0+255),b
  5530  0100B0                     l2607:
  5531                           
  5532                           ; BSR set to: 0
  5533                           
  5534                           ; BSR set to: 0
  5535  0100B0  0100               	movlb	0	; () banked
  5536  0100B2  8F9B               	bsf	(___fladd@a+2)& (0+255),7,b
  5537                           
  5538                           ; BSR set to: 0
  5539  0100B4  0E00               	movlw	0
  5540  0100B6  0100               	movlb	0	; () banked
  5541  0100B8  D008               	goto	L3
  5542  0100BA                     l2606:
  5543                           
  5544                           ; BSR set to: 0
  5545                           
  5546                           ; BSR set to: 0
  5547  0100BA  0E00               	movlw	0
  5548  0100BC  0100               	movlb	0	; () banked
  5549  0100BE  6F99               	movwf	___fladd@a& (0+255),b
  5550  0100C0  0E00               	movlw	0
  5551  0100C2  6F9A               	movwf	(___fladd@a+1)& (0+255),b
  5552  0100C4  0E00               	movlw	0
  5553  0100C6  6F9B               	movwf	(___fladd@a+2)& (0+255),b
  5554  0100C8  0E00               	movlw	0
  5555  0100CA                     L3:
  5556  0100CA  6F9C               	movwf	(___fladd@a+3)& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           
  5560                           ; BSR set to: 0
  5561  0100CC  0100               	movlb	0	; () banked
  5562  0100CE  51A7               	movf	___fladd@bexp& (0+255),w,b
  5563  0100D0  0100               	movlb	0	; () banked
  5564  0100D2  5DA6               	subwf	___fladd@aexp& (0+255),w,b
  5565  0100D4  B0D8               	btfsc	status,0,c
  5566  0100D6  D024               	goto	l2609
  5567                           
  5568                           ; BSR set to: 0
  5569  0100D8  0100               	movlb	0	; () banked
  5570  0100DA  ADA5               	btfss	___fladd@signs& (0+255),6,b
  5571  0100DC  D003               	goto	l2610
  5572                           
  5573                           ; BSR set to: 0
  5574  0100DE  0E80               	movlw	128
  5575  0100E0  0100               	movlb	0	; () banked
  5576  0100E2  1BA5               	xorwf	___fladd@signs& (0+255),f,b
  5577  0100E4                     l2610:
  5578                           
  5579                           ; BSR set to: 0
  5580                           
  5581                           ; BSR set to: 0
  5582  0100E4  C0A7  F0A8         	movff	___fladd@bexp,___fladd@grs
  5583                           
  5584                           ; BSR set to: 0
  5585  0100E8  C0A6  F0A7         	movff	___fladd@aexp,___fladd@bexp
  5586                           
  5587                           ; BSR set to: 0
  5588  0100EC  C0A8  F0A6         	movff	___fladd@grs,___fladd@aexp
  5589                           
  5590                           ; BSR set to: 0
  5591  0100F0  C095  F0A8         	movff	___fladd@b,___fladd@grs
  5592                           
  5593                           ; BSR set to: 0
  5594  0100F4  C099  F095         	movff	___fladd@a,___fladd@b
  5595                           
  5596                           ; BSR set to: 0
  5597  0100F8  C0A8  F099         	movff	___fladd@grs,___fladd@a
  5598                           
  5599                           ; BSR set to: 0
  5600  0100FC  C096  F0A8         	movff	___fladd@b+1,___fladd@grs
  5601                           
  5602                           ; BSR set to: 0
  5603  010100  C09A  F096         	movff	___fladd@a+1,___fladd@b+1
  5604                           
  5605                           ; BSR set to: 0
  5606  010104  C0A8  F09A         	movff	___fladd@grs,___fladd@a+1
  5607                           
  5608                           ; BSR set to: 0
  5609  010108  C097  F0A8         	movff	___fladd@b+2,___fladd@grs
  5610                           
  5611                           ; BSR set to: 0
  5612  01010C  C09B  F097         	movff	___fladd@a+2,___fladd@b+2
  5613                           
  5614                           ; BSR set to: 0
  5615  010110  C0A8  F09B         	movff	___fladd@grs,___fladd@a+2
  5616                           
  5617                           ; BSR set to: 0
  5618  010114  C098  F0A8         	movff	___fladd@b+3,___fladd@grs
  5619                           
  5620                           ; BSR set to: 0
  5621  010118  C09C  F098         	movff	___fladd@a+3,___fladd@b+3
  5622                           
  5623                           ; BSR set to: 0
  5624  01011C  C0A8  F09C         	movff	___fladd@grs,___fladd@a+3
  5625  010120                     l2609:
  5626                           
  5627                           ; BSR set to: 0
  5628                           
  5629                           ; BSR set to: 0
  5630  010120  0E00               	movlw	0
  5631  010122  0100               	movlb	0	; () banked
  5632  010124  6FA8               	movwf	___fladd@grs& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635  010126  0100               	movlb	0	; () banked
  5636  010128  51A7               	movf	___fladd@bexp& (0+255),w,b
  5637  01012A  0100               	movlb	0	; () banked
  5638  01012C  6F9D               	movwf	??___fladd& (0+255),b
  5639  01012E  6B9E               	clrf	(??___fladd+1)& (0+255),b
  5640  010130  0100               	movlb	0	; () banked
  5641  010132  1F9D               	comf	??___fladd& (0+255),f,b
  5642  010134  1F9E               	comf	(??___fladd+1)& (0+255),f,b
  5643  010136  4B9D               	infsnz	??___fladd& (0+255),f,b
  5644  010138  2B9E               	incf	(??___fladd+1)& (0+255),f,b
  5645  01013A  0100               	movlb	0	; () banked
  5646  01013C  51A6               	movf	___fladd@aexp& (0+255),w,b
  5647  01013E  0100               	movlb	0	; () banked
  5648  010140  6F9F               	movwf	(??___fladd+2)& (0+255),b
  5649  010142  6BA0               	clrf	(??___fladd+3)& (0+255),b
  5650  010144  0100               	movlb	0	; () banked
  5651  010146  519D               	movf	??___fladd& (0+255),w,b
  5652  010148  0100               	movlb	0	; () banked
  5653  01014A  279F               	addwf	(??___fladd+2)& (0+255),f,b
  5654  01014C  0100               	movlb	0	; () banked
  5655  01014E  519E               	movf	(??___fladd+1)& (0+255),w,b
  5656  010150  0100               	movlb	0	; () banked
  5657  010152  23A0               	addwfc	(??___fladd+3)& (0+255),f,b
  5658  010154  0100               	movlb	0	; () banked
  5659  010156  BFA0               	btfsc	(??___fladd+3)& (0+255),7,b
  5660  010158  D03D               	goto	l2613
  5661  01015A  0100               	movlb	0	; () banked
  5662  01015C  51A0               	movf	(??___fladd+3)& (0+255),w,b
  5663  01015E  E105               	bnz	u10100
  5664  010160  0E1A               	movlw	26
  5665  010162  0100               	movlb	0	; () banked
  5666  010164  5D9F               	subwf	(??___fladd+2)& (0+255),w,b
  5667  010166  A0D8               	btfss	status,0,c
  5668  010168  D035               	goto	l2613
  5669  01016A                     u10100:
  5670                           
  5671                           ; BSR set to: 0
  5672  01016A  0100               	movlb	0	; () banked
  5673  01016C  5195               	movf	___fladd@b& (0+255),w,b
  5674  01016E  0100               	movlb	0	; () banked
  5675  010170  1196               	iorwf	(___fladd@b+1)& (0+255),w,b
  5676  010172  0100               	movlb	0	; () banked
  5677  010174  1197               	iorwf	(___fladd@b+2)& (0+255),w,b
  5678  010176  0100               	movlb	0	; () banked
  5679  010178  1198               	iorwf	(___fladd@b+3)& (0+255),w,b
  5680  01017A  B4D8               	btfsc	status,2,c
  5681  01017C  D002               	goto	u10110
  5682  01017E  0E01               	movlw	1
  5683  010180  D001               	goto	u10120
  5684  010182                     u10110:
  5685  010182  0E00               	movlw	0
  5686  010184                     u10120:
  5687  010184  0100               	movlb	0	; () banked
  5688  010186  6FA8               	movwf	___fladd@grs& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691  010188  0E00               	movlw	0
  5692  01018A  0100               	movlb	0	; () banked
  5693  01018C  6F95               	movwf	___fladd@b& (0+255),b
  5694  01018E  0E00               	movlw	0
  5695  010190  6F96               	movwf	(___fladd@b+1)& (0+255),b
  5696  010192  0E00               	movlw	0
  5697  010194  6F97               	movwf	(___fladd@b+2)& (0+255),b
  5698  010196  0E00               	movlw	0
  5699  010198  6F98               	movwf	(___fladd@b+3)& (0+255),b
  5700                           
  5701                           ; BSR set to: 0
  5702  01019A  C0A6  F0A7         	movff	___fladd@aexp,___fladd@bexp
  5703  01019E  D020               	goto	u10150
  5704  0101A0                     l2614:
  5705                           
  5706                           ; BSR set to: 0
  5707  0101A0  0100               	movlb	0	; () banked
  5708  0101A2  A1A8               	btfss	___fladd@grs& (0+255),0,b
  5709  0101A4  D007               	goto	l2615
  5710                           
  5711                           ; BSR set to: 0
  5712  0101A6  0100               	movlb	0	; () banked
  5713  0101A8  90D8               	bcf	status,0,c
  5714  0101AA  31A8               	rrcf	___fladd@grs& (0+255),w,b
  5715  0101AC  0901               	iorlw	1
  5716  0101AE  0100               	movlb	0	; () banked
  5717  0101B0  6FA8               	movwf	___fladd@grs& (0+255),b
  5718  0101B2  D003               	goto	l2616
  5719  0101B4                     l2615:
  5720                           
  5721                           ; BSR set to: 0
  5722                           
  5723                           ; BSR set to: 0
  5724  0101B4  0100               	movlb	0	; () banked
  5725  0101B6  90D8               	bcf	status,0,c
  5726  0101B8  33A8               	rrcf	___fladd@grs& (0+255),f,b
  5727  0101BA                     l2616:
  5728                           
  5729                           ; BSR set to: 0
  5730                           
  5731                           ; BSR set to: 0
  5732  0101BA  0100               	movlb	0	; () banked
  5733  0101BC  A195               	btfss	___fladd@b& (0+255),0,b
  5734  0101BE  D002               	goto	l2617
  5735                           
  5736                           ; BSR set to: 0
  5737  0101C0  0100               	movlb	0	; () banked
  5738  0101C2  8FA8               	bsf	___fladd@grs& (0+255),7,b
  5739  0101C4                     l2617:
  5740                           
  5741                           ; BSR set to: 0
  5742                           
  5743                           ; BSR set to: 0
  5744  0101C4  0100               	movlb	0	; () banked
  5745  0101C6  3598               	rlcf	(___fladd@b+3)& (0+255),w,b
  5746  0101C8  3398               	rrcf	(___fladd@b+3)& (0+255),f,b
  5747  0101CA  3397               	rrcf	(___fladd@b+2)& (0+255),f,b
  5748  0101CC  3396               	rrcf	(___fladd@b+1)& (0+255),f,b
  5749  0101CE  3395               	rrcf	___fladd@b& (0+255),f,b
  5750                           
  5751                           ; BSR set to: 0
  5752  0101D0  0100               	movlb	0	; () banked
  5753  0101D2  2BA7               	incf	___fladd@bexp& (0+255),f,b
  5754  0101D4                     l2613:
  5755                           
  5756                           ; BSR set to: 0
  5757  0101D4  0100               	movlb	0	; () banked
  5758  0101D6  51A6               	movf	___fladd@aexp& (0+255),w,b
  5759  0101D8  0100               	movlb	0	; () banked
  5760  0101DA  5DA7               	subwf	___fladd@bexp& (0+255),w,b
  5761  0101DC  A0D8               	btfss	status,0,c
  5762  0101DE  D7E0               	goto	l2614
  5763  0101E0                     u10150:
  5764                           
  5765                           ; BSR set to: 0
  5766                           
  5767                           ; BSR set to: 0
  5768  0101E0  0100               	movlb	0	; () banked
  5769  0101E2  BDA5               	btfsc	___fladd@signs& (0+255),6,b
  5770  0101E4  D03F               	goto	l2619
  5771                           
  5772                           ; BSR set to: 0
  5773  0101E6  0100               	movlb	0	; () banked
  5774  0101E8  51A7               	movf	___fladd@bexp& (0+255),w,b
  5775  0101EA  0100               	movlb	0	; () banked
  5776  0101EC  A4D8               	btfss	status,2,c
  5777  0101EE  D00A               	goto	l2620
  5778                           
  5779                           ; BSR set to: 0
  5780  0101F0  0E00               	movlw	0
  5781  0101F2  0100               	movlb	0	; () banked
  5782  0101F4  6F95               	movwf	?___fladd& (0+255),b
  5783  0101F6  0E00               	movlw	0
  5784  0101F8  6F96               	movwf	(?___fladd+1)& (0+255),b
  5785  0101FA  0E00               	movlw	0
  5786  0101FC  6F97               	movwf	(?___fladd+2)& (0+255),b
  5787  0101FE  0E00               	movlw	0
  5788  010200  6F98               	movwf	(?___fladd+3)& (0+255),b
  5789                           
  5790                           ; BSR set to: 0
  5791  010202  0012               	return	
  5792  010204                     l2620:
  5793                           
  5794                           ; BSR set to: 0
  5795                           
  5796                           ; BSR set to: 0
  5797  010204  0100               	movlb	0	; () banked
  5798  010206  5199               	movf	___fladd@a& (0+255),w,b
  5799  010208  0100               	movlb	0	; () banked
  5800  01020A  2795               	addwf	___fladd@b& (0+255),f,b
  5801  01020C  0100               	movlb	0	; () banked
  5802  01020E  519A               	movf	(___fladd@a+1)& (0+255),w,b
  5803  010210  0100               	movlb	0	; () banked
  5804  010212  2396               	addwfc	(___fladd@b+1)& (0+255),f,b
  5805  010214  0100               	movlb	0	; () banked
  5806  010216  519B               	movf	(___fladd@a+2)& (0+255),w,b
  5807  010218  0100               	movlb	0	; () banked
  5808  01021A  2397               	addwfc	(___fladd@b+2)& (0+255),f,b
  5809  01021C  0100               	movlb	0	; () banked
  5810  01021E  519C               	movf	(___fladd@a+3)& (0+255),w,b
  5811  010220  0100               	movlb	0	; () banked
  5812  010222  2398               	addwfc	(___fladd@b+3)& (0+255),f,b
  5813                           
  5814                           ; BSR set to: 0
  5815  010224  0100               	movlb	0	; () banked
  5816  010226  A198               	btfss	(___fladd@b+3)& (0+255),0,b
  5817  010228  D0CC               	goto	u10280
  5818                           
  5819                           ; BSR set to: 0
  5820  01022A  0100               	movlb	0	; () banked
  5821  01022C  A1A8               	btfss	___fladd@grs& (0+255),0,b
  5822  01022E  D009               	goto	l2623
  5823                           
  5824                           ; BSR set to: 0
  5825  010230  0100               	movlb	0	; () banked
  5826  010232  90D8               	bcf	status,0,c
  5827  010234  33A8               	rrcf	___fladd@grs& (0+255),f,b
  5828  010236  0100               	movlb	0	; () banked
  5829  010238  51A8               	movf	___fladd@grs& (0+255),w,b
  5830  01023A  0901               	iorlw	1
  5831  01023C  0100               	movlb	0	; () banked
  5832  01023E  6FA8               	movwf	___fladd@grs& (0+255),b
  5833  010240  D003               	goto	l2624
  5834  010242                     l2623:
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839  010242  0100               	movlb	0	; () banked
  5840  010244  90D8               	bcf	status,0,c
  5841  010246  33A8               	rrcf	___fladd@grs& (0+255),f,b
  5842  010248                     l2624:
  5843                           
  5844                           ; BSR set to: 0
  5845                           
  5846                           ; BSR set to: 0
  5847  010248  0100               	movlb	0	; () banked
  5848  01024A  A195               	btfss	___fladd@b& (0+255),0,b
  5849  01024C  D002               	goto	l2625
  5850                           
  5851                           ; BSR set to: 0
  5852  01024E  0100               	movlb	0	; () banked
  5853  010250  8FA8               	bsf	___fladd@grs& (0+255),7,b
  5854  010252                     l2625:
  5855                           
  5856                           ; BSR set to: 0
  5857                           
  5858                           ; BSR set to: 0
  5859  010252  0100               	movlb	0	; () banked
  5860  010254  3598               	rlcf	(___fladd@b+3)& (0+255),w,b
  5861  010256  3398               	rrcf	(___fladd@b+3)& (0+255),f,b
  5862  010258  3397               	rrcf	(___fladd@b+2)& (0+255),f,b
  5863  01025A  3396               	rrcf	(___fladd@b+1)& (0+255),f,b
  5864  01025C  3395               	rrcf	___fladd@b& (0+255),f,b
  5865                           
  5866                           ; BSR set to: 0
  5867  01025E  0100               	movlb	0	; () banked
  5868  010260  2BA7               	incf	___fladd@bexp& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 0
  5871  010262  D0AF               	goto	u10280
  5872  010264                     l2619:
  5873                           
  5874                           ; BSR set to: 0
  5875                           
  5876                           ; BSR set to: 0
  5877  010264  0100               	movlb	0	; () banked
  5878  010266  5199               	movf	___fladd@a& (0+255),w,b
  5879  010268  0100               	movlb	0	; () banked
  5880  01026A  5D95               	subwf	___fladd@b& (0+255),w,b
  5881  01026C  0100               	movlb	0	; () banked
  5882  01026E  519A               	movf	(___fladd@a+1)& (0+255),w,b
  5883  010270  0100               	movlb	0	; () banked
  5884  010272  5996               	subwfb	(___fladd@b+1)& (0+255),w,b
  5885  010274  0100               	movlb	0	; () banked
  5886  010276  519B               	movf	(___fladd@a+2)& (0+255),w,b
  5887  010278  0100               	movlb	0	; () banked
  5888  01027A  5997               	subwfb	(___fladd@b+2)& (0+255),w,b
  5889  01027C  0100               	movlb	0	; () banked
  5890  01027E  5198               	movf	(___fladd@b+3)& (0+255),w,b
  5891  010280  0A80               	xorlw	128
  5892  010282  0100               	movlb	0	; () banked
  5893  010284  6F9D               	movwf	??___fladd& (0+255),b
  5894  010286  0100               	movlb	0	; () banked
  5895  010288  519C               	movf	(___fladd@a+3)& (0+255),w,b
  5896  01028A  0A80               	xorlw	128
  5897  01028C  0100               	movlb	0	; () banked
  5898  01028E  599D               	subwfb	??___fladd& (0+255),w,b
  5899  010290  B0D8               	btfsc	status,0,c
  5900  010292  D050               	goto	l2627
  5901                           
  5902                           ; BSR set to: 0
  5903  010294  C095  F09D         	movff	___fladd@b,??___fladd
  5904  010298  C096  F09E         	movff	___fladd@b+1,??___fladd+1
  5905  01029C  C097  F09F         	movff	___fladd@b+2,??___fladd+2
  5906  0102A0  C098  F0A0         	movff	___fladd@b+3,??___fladd+3
  5907  0102A4  0100               	movlb	0	; () banked
  5908  0102A6  1F9D               	comf	??___fladd& (0+255),f,b
  5909  0102A8  1F9E               	comf	(??___fladd+1)& (0+255),f,b
  5910  0102AA  1F9F               	comf	(??___fladd+2)& (0+255),f,b
  5911  0102AC  1FA0               	comf	(??___fladd+3)& (0+255),f,b
  5912  0102AE  2B9D               	incf	??___fladd& (0+255),f,b
  5913  0102B0  0E00               	movlw	0
  5914  0102B2  239E               	addwfc	(??___fladd+1)& (0+255),f,b
  5915  0102B4  239F               	addwfc	(??___fladd+2)& (0+255),f,b
  5916  0102B6  23A0               	addwfc	(??___fladd+3)& (0+255),f,b
  5917  0102B8  0100               	movlb	0	; () banked
  5918  0102BA  5199               	movf	___fladd@a& (0+255),w,b
  5919  0102BC  0100               	movlb	0	; () banked
  5920  0102BE  259D               	addwf	??___fladd& (0+255),w,b
  5921  0102C0  0100               	movlb	0	; () banked
  5922  0102C2  6FA1               	movwf	(??___fladd+4)& (0+255),b
  5923  0102C4  0100               	movlb	0	; () banked
  5924  0102C6  519A               	movf	(___fladd@a+1)& (0+255),w,b
  5925  0102C8  0100               	movlb	0	; () banked
  5926  0102CA  219E               	addwfc	(??___fladd+1)& (0+255),w,b
  5927  0102CC  0100               	movlb	0	; () banked
  5928  0102CE  6FA2               	movwf	(??___fladd+5)& (0+255),b
  5929  0102D0  0100               	movlb	0	; () banked
  5930  0102D2  519B               	movf	(___fladd@a+2)& (0+255),w,b
  5931  0102D4  0100               	movlb	0	; () banked
  5932  0102D6  219F               	addwfc	(??___fladd+2)& (0+255),w,b
  5933  0102D8  0100               	movlb	0	; () banked
  5934  0102DA  6FA3               	movwf	(??___fladd+6)& (0+255),b
  5935  0102DC  0100               	movlb	0	; () banked
  5936  0102DE  519C               	movf	(___fladd@a+3)& (0+255),w,b
  5937  0102E0  0100               	movlb	0	; () banked
  5938  0102E2  21A0               	addwfc	(??___fladd+3)& (0+255),w,b
  5939  0102E4  0100               	movlb	0	; () banked
  5940  0102E6  6FA4               	movwf	(??___fladd+7)& (0+255),b
  5941  0102E8  0EFF               	movlw	255
  5942  0102EA  0100               	movlb	0	; () banked
  5943  0102EC  25A1               	addwf	(??___fladd+4)& (0+255),w,b
  5944  0102EE  0100               	movlb	0	; () banked
  5945  0102F0  6F95               	movwf	___fladd@b& (0+255),b
  5946  0102F2  0EFF               	movlw	255
  5947  0102F4  0100               	movlb	0	; () banked
  5948  0102F6  21A2               	addwfc	(??___fladd+5)& (0+255),w,b
  5949  0102F8  0100               	movlb	0	; () banked
  5950  0102FA  6F96               	movwf	(___fladd@b+1)& (0+255),b
  5951  0102FC  0EFF               	movlw	255
  5952  0102FE  0100               	movlb	0	; () banked
  5953  010300  21A3               	addwfc	(??___fladd+6)& (0+255),w,b
  5954  010302  0100               	movlb	0	; () banked
  5955  010304  6F97               	movwf	(___fladd@b+2)& (0+255),b
  5956  010306  0EFF               	movlw	255
  5957  010308  0100               	movlb	0	; () banked
  5958  01030A  21A4               	addwfc	(??___fladd+7)& (0+255),w,b
  5959  01030C  0100               	movlb	0	; () banked
  5960  01030E  6F98               	movwf	(___fladd@b+3)& (0+255),b
  5961  010310  0E80               	movlw	128
  5962  010312  0100               	movlb	0	; () banked
  5963  010314  1BA5               	xorwf	___fladd@signs& (0+255),f,b
  5964                           
  5965                           ; BSR set to: 0
  5966  010316  0100               	movlb	0	; () banked
  5967  010318  6DA8               	negf	___fladd@grs& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970  01031A  0100               	movlb	0	; () banked
  5971  01031C  51A8               	movf	___fladd@grs& (0+255),w,b
  5972  01031E  0100               	movlb	0	; () banked
  5973  010320  A4D8               	btfss	status,2,c
  5974  010322  D018               	goto	l2629
  5975                           
  5976                           ; BSR set to: 0
  5977  010324  0E01               	movlw	1
  5978  010326  0100               	movlb	0	; () banked
  5979  010328  2795               	addwf	___fladd@b& (0+255),f,b
  5980  01032A  0E00               	movlw	0
  5981  01032C  2396               	addwfc	(___fladd@b+1)& (0+255),f,b
  5982  01032E  2397               	addwfc	(___fladd@b+2)& (0+255),f,b
  5983  010330  2398               	addwfc	(___fladd@b+3)& (0+255),f,b
  5984                           
  5985                           ; BSR set to: 0
  5986  010332  D010               	goto	l2629
  5987  010334                     l2627:
  5988                           
  5989                           ; BSR set to: 0
  5990                           
  5991                           ; BSR set to: 0
  5992  010334  0100               	movlb	0	; () banked
  5993  010336  5199               	movf	___fladd@a& (0+255),w,b
  5994  010338  0100               	movlb	0	; () banked
  5995  01033A  5F95               	subwf	___fladd@b& (0+255),f,b
  5996  01033C  0100               	movlb	0	; () banked
  5997  01033E  519A               	movf	(___fladd@a+1)& (0+255),w,b
  5998  010340  0100               	movlb	0	; () banked
  5999  010342  5B96               	subwfb	(___fladd@b+1)& (0+255),f,b
  6000  010344  0100               	movlb	0	; () banked
  6001  010346  519B               	movf	(___fladd@a+2)& (0+255),w,b
  6002  010348  0100               	movlb	0	; () banked
  6003  01034A  5B97               	subwfb	(___fladd@b+2)& (0+255),f,b
  6004  01034C  0100               	movlb	0	; () banked
  6005  01034E  519C               	movf	(___fladd@a+3)& (0+255),w,b
  6006  010350  0100               	movlb	0	; () banked
  6007  010352  5B98               	subwfb	(___fladd@b+3)& (0+255),f,b
  6008  010354                     l2629:
  6009                           
  6010                           ; BSR set to: 0
  6011  010354  0100               	movlb	0	; () banked
  6012  010356  5195               	movf	___fladd@b& (0+255),w,b
  6013  010358  0100               	movlb	0	; () banked
  6014  01035A  1196               	iorwf	(___fladd@b+1)& (0+255),w,b
  6015  01035C  0100               	movlb	0	; () banked
  6016  01035E  1197               	iorwf	(___fladd@b+2)& (0+255),w,b
  6017  010360  0100               	movlb	0	; () banked
  6018  010362  1198               	iorwf	(___fladd@b+3)& (0+255),w,b
  6019  010364  A4D8               	btfss	status,2,c
  6020  010366  D02A               	goto	l2636
  6021                           
  6022                           ; BSR set to: 0
  6023  010368  0100               	movlb	0	; () banked
  6024  01036A  51A8               	movf	___fladd@grs& (0+255),w,b
  6025  01036C  0100               	movlb	0	; () banked
  6026  01036E  A4D8               	btfss	status,2,c
  6027  010370  D025               	goto	l2636
  6028                           
  6029                           ; BSR set to: 0
  6030  010372  0E00               	movlw	0
  6031  010374  0100               	movlb	0	; () banked
  6032  010376  6F95               	movwf	?___fladd& (0+255),b
  6033  010378  0E00               	movlw	0
  6034  01037A  6F96               	movwf	(?___fladd+1)& (0+255),b
  6035  01037C  0E00               	movlw	0
  6036  01037E  6F97               	movwf	(?___fladd+2)& (0+255),b
  6037  010380  0E00               	movlw	0
  6038  010382  6F98               	movwf	(?___fladd+3)& (0+255),b
  6039                           
  6040                           ; BSR set to: 0
  6041  010384  0012               	return	
  6042  010386                     
  6043                           ; BSR set to: 0
  6044                           
  6045                           ; BSR set to: 0
  6046  010386  0100               	movlb	0	; () banked
  6047  010388  90D8               	bcf	status,0,c
  6048  01038A  3795               	rlcf	___fladd@b& (0+255),f,b
  6049  01038C  3796               	rlcf	(___fladd@b+1)& (0+255),f,b
  6050  01038E  3797               	rlcf	(___fladd@b+2)& (0+255),f,b
  6051  010390  3798               	rlcf	(___fladd@b+3)& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054  010392  0100               	movlb	0	; () banked
  6055  010394  AFA8               	btfss	___fladd@grs& (0+255),7,b
  6056  010396  D002               	goto	l2633
  6057                           
  6058                           ; BSR set to: 0
  6059  010398  0100               	movlb	0	; () banked
  6060  01039A  8195               	bsf	___fladd@b& (0+255),0,b
  6061  01039C                     l2633:
  6062                           
  6063                           ; BSR set to: 0
  6064                           
  6065                           ; BSR set to: 0
  6066  01039C  0100               	movlb	0	; () banked
  6067  01039E  A1A8               	btfss	___fladd@grs& (0+255),0,b
  6068  0103A0  D003               	goto	l2634
  6069                           
  6070                           ; BSR set to: 0
  6071  0103A2  80D8               	bsf	status,0,c
  6072  0103A4  0100               	movlb	0	; () banked
  6073  0103A6  D002               	goto	L4
  6074  0103A8                     l2634:
  6075                           
  6076                           ; BSR set to: 0
  6077                           
  6078                           ; BSR set to: 0
  6079  0103A8  0100               	movlb	0	; () banked
  6080  0103AA  90D8               	bcf	status,0,c
  6081  0103AC                     L4:
  6082  0103AC  37A8               	rlcf	___fladd@grs& (0+255),f,b
  6083                           
  6084                           ; BSR set to: 0
  6085                           
  6086                           ; BSR set to: 0
  6087  0103AE  0100               	movlb	0	; () banked
  6088  0103B0  51A7               	movf	___fladd@bexp& (0+255),w,b
  6089  0103B2  0100               	movlb	0	; () banked
  6090  0103B4  B4D8               	btfsc	status,2,c
  6091  0103B6  D002               	goto	l2636
  6092                           
  6093                           ; BSR set to: 0
  6094  0103B8  0100               	movlb	0	; () banked
  6095  0103BA  07A7               	decf	___fladd@bexp& (0+255),f,b
  6096  0103BC                     l2636:
  6097                           
  6098                           ; BSR set to: 0
  6099                           
  6100                           ; BSR set to: 0
  6101                           
  6102                           ; BSR set to: 0
  6103  0103BC  0100               	movlb	0	; () banked
  6104  0103BE  AF97               	btfss	(___fladd@b+2)& (0+255),7,b
  6105  0103C0  D7E2               	goto	l2632
  6106  0103C2                     u10280:
  6107                           
  6108                           ; BSR set to: 0
  6109                           
  6110                           ; BSR set to: 0
  6111                           
  6112                           ; BSR set to: 0
  6113  0103C2  0E00               	movlw	0
  6114  0103C4  0100               	movlb	0	; () banked
  6115  0103C6  6FA6               	movwf	___fladd@aexp& (0+255),b
  6116                           
  6117                           ; BSR set to: 0
  6118  0103C8  0100               	movlb	0	; () banked
  6119  0103CA  AFA8               	btfss	___fladd@grs& (0+255),7,b
  6120  0103CC  D00D               	goto	l2641
  6121                           
  6122                           ; BSR set to: 0
  6123  0103CE  C0A8  F09D         	movff	___fladd@grs,??___fladd
  6124  0103D2  0E7F               	movlw	127
  6125  0103D4  0100               	movlb	0	; () banked
  6126  0103D6  179D               	andwf	??___fladd& (0+255),f,b
  6127  0103D8  A4D8               	btfss	status,2,c
  6128  0103DA  D003               	goto	u10310
  6129                           
  6130                           ; BSR set to: 0
  6131                           
  6132                           ; BSR set to: 0
  6133  0103DC  0100               	movlb	0	; () banked
  6134  0103DE  A195               	btfss	___fladd@b& (0+255),0,b
  6135  0103E0  D003               	goto	l2641
  6136  0103E2                     u10310:
  6137                           
  6138                           ; BSR set to: 0
  6139  0103E2  0E01               	movlw	1
  6140  0103E4  0100               	movlb	0	; () banked
  6141  0103E6  6FA6               	movwf	___fladd@aexp& (0+255),b
  6142  0103E8                     l2641:
  6143                           
  6144                           ; BSR set to: 0
  6145                           
  6146                           ; BSR set to: 0
  6147                           
  6148                           ; BSR set to: 0
  6149  0103E8  0100               	movlb	0	; () banked
  6150  0103EA  51A6               	movf	___fladd@aexp& (0+255),w,b
  6151  0103EC  0100               	movlb	0	; () banked
  6152  0103EE  B4D8               	btfsc	status,2,c
  6153  0103F0  D026               	goto	l2644
  6154                           
  6155                           ; BSR set to: 0
  6156  0103F2  0E01               	movlw	1
  6157  0103F4  0100               	movlb	0	; () banked
  6158  0103F6  2795               	addwf	___fladd@b& (0+255),f,b
  6159  0103F8  0E00               	movlw	0
  6160  0103FA  2396               	addwfc	(___fladd@b+1)& (0+255),f,b
  6161  0103FC  2397               	addwfc	(___fladd@b+2)& (0+255),f,b
  6162  0103FE  2398               	addwfc	(___fladd@b+3)& (0+255),f,b
  6163                           
  6164                           ; BSR set to: 0
  6165  010400  0100               	movlb	0	; () banked
  6166  010402  A198               	btfss	(___fladd@b+3)& (0+255),0,b
  6167  010404  D01C               	goto	l2644
  6168                           
  6169                           ; BSR set to: 0
  6170  010406  C095  F09D         	movff	___fladd@b,??___fladd
  6171  01040A  C096  F09E         	movff	___fladd@b+1,??___fladd+1
  6172  01040E  C097  F09F         	movff	___fladd@b+2,??___fladd+2
  6173  010412  C098  F0A0         	movff	___fladd@b+3,??___fladd+3
  6174  010416  0100               	movlb	0	; () banked
  6175  010418  35A0               	rlcf	(??___fladd+3)& (0+255),w,b
  6176  01041A  33A0               	rrcf	(??___fladd+3)& (0+255),f,b
  6177  01041C  339F               	rrcf	(??___fladd+2)& (0+255),f,b
  6178  01041E  339E               	rrcf	(??___fladd+1)& (0+255),f,b
  6179  010420  339D               	rrcf	??___fladd& (0+255),f,b
  6180  010422  C09D  F095         	movff	??___fladd,___fladd@b
  6181  010426  C09E  F096         	movff	??___fladd+1,___fladd@b+1
  6182  01042A  C09F  F097         	movff	??___fladd+2,___fladd@b+2
  6183  01042E  C0A0  F098         	movff	??___fladd+3,___fladd@b+3
  6184  010432  0100               	movlb	0	; () banked
  6185  010434  29A7               	incf	___fladd@bexp& (0+255),w,b
  6186  010436  B4D8               	btfsc	status,2,c
  6187  010438  D002               	goto	l2644
  6188                           
  6189                           ; BSR set to: 0
  6190  01043A  0100               	movlb	0	; () banked
  6191  01043C  2BA7               	incf	___fladd@bexp& (0+255),f,b
  6192  01043E                     l2644:
  6193                           
  6194                           ; BSR set to: 0
  6195                           
  6196                           ; BSR set to: 0
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  01043E  0100               	movlb	0	; () banked
  6202  010440  29A7               	incf	___fladd@bexp& (0+255),w,b
  6203  010442  B4D8               	btfsc	status,2,c
  6204  010444  D005               	goto	u10360
  6205                           
  6206                           ; BSR set to: 0
  6207  010446  0100               	movlb	0	; () banked
  6208  010448  51A7               	movf	___fladd@bexp& (0+255),w,b
  6209  01044A  0100               	movlb	0	; () banked
  6210  01044C  A4D8               	btfss	status,2,c
  6211  01044E  D011               	goto	l2648
  6212  010450                     u10360:
  6213                           
  6214                           ; BSR set to: 0
  6215                           
  6216                           ; BSR set to: 0
  6217  010450  0E00               	movlw	0
  6218  010452  0100               	movlb	0	; () banked
  6219  010454  6F95               	movwf	___fladd@b& (0+255),b
  6220  010456  0E00               	movlw	0
  6221  010458  6F96               	movwf	(___fladd@b+1)& (0+255),b
  6222  01045A  0E00               	movlw	0
  6223  01045C  6F97               	movwf	(___fladd@b+2)& (0+255),b
  6224  01045E  0E00               	movlw	0
  6225  010460  6F98               	movwf	(___fladd@b+3)& (0+255),b
  6226  010462  0100               	movlb	0	; () banked
  6227  010464  51A7               	movf	___fladd@bexp& (0+255),w,b
  6228  010466  0100               	movlb	0	; () banked
  6229  010468  A4D8               	btfss	status,2,c
  6230  01046A  D003               	goto	l2648
  6231                           
  6232                           ; BSR set to: 0
  6233  01046C  0E00               	movlw	0
  6234  01046E  0100               	movlb	0	; () banked
  6235  010470  6FA5               	movwf	___fladd@signs& (0+255),b
  6236  010472                     l2648:
  6237                           
  6238                           ; BSR set to: 0
  6239                           
  6240                           ; BSR set to: 0
  6241                           
  6242                           ; BSR set to: 0
  6243  010472  0100               	movlb	0	; () banked
  6244  010474  A1A7               	btfss	___fladd@bexp& (0+255),0,b
  6245  010476  D003               	goto	l2649
  6246                           
  6247                           ; BSR set to: 0
  6248  010478  0100               	movlb	0	; () banked
  6249  01047A  8F97               	bsf	(___fladd@b+2)& (0+255),7,b
  6250  01047C  D002               	goto	l2650
  6251  01047E                     l2649:
  6252                           
  6253                           ; BSR set to: 0
  6254                           
  6255                           ; BSR set to: 0
  6256  01047E  0100               	movlb	0	; () banked
  6257  010480  9F97               	bcf	(___fladd@b+2)& (0+255),7,b
  6258  010482                     l2650:
  6259                           
  6260                           ; BSR set to: 0
  6261                           
  6262                           ; BSR set to: 0
  6263  010482  0100               	movlb	0	; () banked
  6264  010484  90D8               	bcf	status,0,c
  6265  010486  31A7               	rrcf	___fladd@bexp& (0+255),w,b
  6266  010488  0100               	movlb	0	; () banked
  6267  01048A  6F98               	movwf	(___fladd@b+3)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270  01048C  0100               	movlb	0	; () banked
  6271  01048E  AFA5               	btfss	___fladd@signs& (0+255),7,b
  6272  010490  D002               	goto	l2651
  6273                           
  6274                           ; BSR set to: 0
  6275  010492  0100               	movlb	0	; () banked
  6276  010494  8F98               	bsf	(___fladd@b+3)& (0+255),7,b
  6277  010496                     l2651:
  6278                           
  6279                           ; BSR set to: 0
  6280                           
  6281                           ; BSR set to: 0
  6282  010496  C095  F095         	movff	___fladd@b,?___fladd
  6283  01049A  C096  F096         	movff	___fladd@b+1,?___fladd+1
  6284  01049E  C097  F097         	movff	___fladd@b+2,?___fladd+2
  6285  0104A2  C098  F098         	movff	___fladd@b+3,?___fladd+3
  6286  0104A6  0012               	return	
  6287  0104A8                     __end_of___fladd:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           postinc0	equ	0xFEE
  6294                           wreg	equ	0xFE8
  6295                           postdec1	equ	0xFE5
  6296                           fsr1h	equ	0xFE2
  6297                           fsr1l	equ	0xFE1
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _nullMode *****************
  6305 ;; Defined at:
  6306 ;;		line 228 in file "main.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;Total ram usage:        0 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    7
  6327 ;; This function calls:
  6328 ;;		Nothing
  6329 ;; This function is called by:
  6330 ;;		_main
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text13
  6335  016928                     __ptext13:
  6336                           	opt stack 0
  6337  016928                     _nullMode:
  6338                           	opt stack 23
  6339                           
  6340                           ;main.c: 229: steps = 0;
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;incstack = 0
  6344  016928  0E00               	movlw	0
  6345  01692A  0100               	movlb	0	; () banked
  6346  01692C  6FE1               	movwf	(_steps+1)& (0+255),b
  6347  01692E  0E00               	movlw	0
  6348  016930  6FE0               	movwf	_steps& (0+255),b
  6349                           
  6350                           ;main.c: 230: remainingSteps = 0;
  6351  016932  0E00               	movlw	0
  6352  016934  0101               	movlb	1	; () banked
  6353  016936  6F22               	movwf	(_remainingSteps+1)& (0+255),b
  6354  016938  0E00               	movlw	0
  6355  01693A  6F21               	movwf	_remainingSteps& (0+255),b
  6356                           
  6357                           ;main.c: 231: speed = 0;
  6358  01693C  0E00               	movlw	0
  6359  01693E  0100               	movlb	0	; () banked
  6360  016940  6FE3               	movwf	(_speed+1)& (0+255),b
  6361  016942  0E00               	movlw	0
  6362  016944  6FE2               	movwf	_speed& (0+255),b
  6363                           
  6364                           ;main.c: 232: direction = 0;
  6365  016946  0E00               	movlw	0
  6366  016948  0101               	movlb	1	; () banked
  6367  01694A  6FFB               	movwf	(_direction+1)& (0+255),b
  6368  01694C  0E00               	movlw	0
  6369  01694E  6FFA               	movwf	_direction& (0+255),b
  6370                           
  6371                           ; BSR set to: 1
  6372  016950  0012               	return		;funcret
  6373  016952                     __end_of_nullMode:
  6374                           	opt stack 0
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           postinc0	equ	0xFEE
  6380                           wreg	equ	0xFE8
  6381                           postdec1	equ	0xFE5
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _inputVar *****************
  6391 ;; Defined at:
  6392 ;;		line 95 in file "main.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      void 
  6399 ;; Registers used:
  6400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;Total ram usage:        1 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:   16
  6413 ;; This function calls:
  6414 ;;		_FunctADC
  6415 ;;		_HMI_DIPSwitch
  6416 ;;		_HMI_DownSwitch
  6417 ;;		_HMI_LeftSwitch
  6418 ;;		_HMI_Poll
  6419 ;;		_HMI_RightSwitch
  6420 ;;		_HMI_UpSwitch
  6421 ;;		_MXK_DIPSwitch
  6422 ;;		_MXK_TestButton
  6423 ;; This function is called by:
  6424 ;;		_main
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text14
  6429  014B54                     __ptext14:
  6430                           	opt stack 0
  6431  014B54                     _inputVar:
  6432                           	opt stack 14
  6433                           
  6434                           ;main.c: 96: FunctADC();
  6435                           
  6436                           ; BSR set to: 1
  6437                           ;incstack = 0
  6438  014B54  EC2D  F0B6         	call	_FunctADC	;wreg free
  6439                           
  6440                           ;main.c: 97: HMI_Poll();
  6441  014B58  ECB5  F0AC         	call	_HMI_Poll	;wreg free
  6442                           
  6443                           ;main.c: 100: dip = DIPSwitch.mGetState();
  6444  014B5C  EE21  F084         	lfsr	2,_DIPSwitch+7
  6445  014B60  D801               	call	u12378
  6446  014B62  D00A               	goto	u12379
  6447  014B64                     u12378:
  6448  014B64  0005               	push	
  6449  014B66  6EFA               	movwf	pclath,c
  6450  014B68  50DE               	movf	postinc2,w,c
  6451  014B6A  6EFD               	movwf	tosl,c
  6452  014B6C  50DE               	movf	postinc2,w,c
  6453  014B6E  6EFE               	movwf	tosh,c
  6454  014B70  50DE               	movf	postinc2,w,c
  6455  014B72  6EFF               	movwf	tosu,c
  6456  014B74  50FA               	movf	pclath,w,c
  6457  014B76  0012               	return		;indir
  6458  014B78                     u12379:
  6459  014B78  0100               	movlb	0	; () banked
  6460  014B7A  6F84               	movwf	??_inputVar& (0+255),b
  6461  014B7C  0100               	movlb	0	; () banked
  6462  014B7E  5184               	movf	??_inputVar& (0+255),w,b
  6463  014B80  0101               	movlb	1	; () banked
  6464  014B82  6F27               	movwf	_dip& (0+255),b
  6465  014B84  6B28               	clrf	(_dip+1)& (0+255),b
  6466                           
  6467                           ; BSR set to: 1
  6468                           ;main.c: 103: upState = HMIBoard.mUp.mGetState();
  6469  014B86  EE21  F050         	lfsr	2,_HMIBoard+35
  6470  014B8A  D801               	call	u12388
  6471  014B8C  D00A               	goto	u12389
  6472  014B8E                     u12388:
  6473  014B8E  0005               	push	
  6474  014B90  6EFA               	movwf	pclath,c
  6475  014B92  50DE               	movf	postinc2,w,c
  6476  014B94  6EFD               	movwf	tosl,c
  6477  014B96  50DE               	movf	postinc2,w,c
  6478  014B98  6EFE               	movwf	tosh,c
  6479  014B9A  50DE               	movf	postinc2,w,c
  6480  014B9C  6EFF               	movwf	tosu,c
  6481  014B9E  50FA               	movf	pclath,w,c
  6482  014BA0  0012               	return		;indir
  6483  014BA2                     u12389:
  6484  014BA2  0100               	movlb	0	; () banked
  6485  014BA4  6FF1               	movwf	_upState& (0+255),b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;main.c: 104: downState = HMIBoard.mDown.mGetState();
  6489  014BA6  EE21  F05A         	lfsr	2,_HMIBoard+45
  6490  014BAA  D801               	call	u12398
  6491  014BAC  D00A               	goto	u12399
  6492  014BAE                     u12398:
  6493  014BAE  0005               	push	
  6494  014BB0  6EFA               	movwf	pclath,c
  6495  014BB2  50DE               	movf	postinc2,w,c
  6496  014BB4  6EFD               	movwf	tosl,c
  6497  014BB6  50DE               	movf	postinc2,w,c
  6498  014BB8  6EFE               	movwf	tosh,c
  6499  014BBA  50DE               	movf	postinc2,w,c
  6500  014BBC  6EFF               	movwf	tosu,c
  6501  014BBE  50FA               	movf	pclath,w,c
  6502  014BC0  0012               	return		;indir
  6503  014BC2                     u12399:
  6504  014BC2  0100               	movlb	0	; () banked
  6505  014BC4  6FF0               	movwf	_downState& (0+255),b
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;main.c: 105: leftState = HMIBoard.mLeft.mGetState();
  6509  014BC6  EE21  F046         	lfsr	2,_HMIBoard+25
  6510  014BCA  D801               	call	u12408
  6511  014BCC  D00A               	goto	u12409
  6512  014BCE                     u12408:
  6513  014BCE  0005               	push	
  6514  014BD0  6EFA               	movwf	pclath,c
  6515  014BD2  50DE               	movf	postinc2,w,c
  6516  014BD4  6EFD               	movwf	tosl,c
  6517  014BD6  50DE               	movf	postinc2,w,c
  6518  014BD8  6EFE               	movwf	tosh,c
  6519  014BDA  50DE               	movf	postinc2,w,c
  6520  014BDC  6EFF               	movwf	tosu,c
  6521  014BDE  50FA               	movf	pclath,w,c
  6522  014BE0  0012               	return		;indir
  6523  014BE2                     u12409:
  6524  014BE2  0100               	movlb	0	; () banked
  6525  014BE4  6FEF               	movwf	_leftState& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;main.c: 106: rightState = HMIBoard.mRight.mGetState();
  6529  014BE6  EE21  F03C         	lfsr	2,_HMIBoard+15
  6530  014BEA  D801               	call	u12418
  6531  014BEC  D00A               	goto	u12419
  6532  014BEE                     u12418:
  6533  014BEE  0005               	push	
  6534  014BF0  6EFA               	movwf	pclath,c
  6535  014BF2  50DE               	movf	postinc2,w,c
  6536  014BF4  6EFD               	movwf	tosl,c
  6537  014BF6  50DE               	movf	postinc2,w,c
  6538  014BF8  6EFE               	movwf	tosh,c
  6539  014BFA  50DE               	movf	postinc2,w,c
  6540  014BFC  6EFF               	movwf	tosu,c
  6541  014BFE  50FA               	movf	pclath,w,c
  6542  014C00  0012               	return		;indir
  6543  014C02                     u12419:
  6544  014C02  0100               	movlb	0	; () banked
  6545  014C04  6FEE               	movwf	_rightState& (0+255),b
  6546                           
  6547                           ; BSR set to: 0
  6548  014C06  0012               	return		;funcret
  6549  014C08                     __end_of_inputVar:
  6550                           	opt stack 0
  6551                           tosu	equ	0xFFF
  6552                           tosh	equ	0xFFE
  6553                           tosl	equ	0xFFD
  6554                           pclath	equ	0xFFA
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function _HMI_Poll *****************
  6571 ;; Defined at:
  6572 ;;		line 252 in file "HMI.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;		None
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;Total ram usage:        0 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:   15
  6593 ;; This function calls:
  6594 ;;		_Button_Poll
  6595 ;; This function is called by:
  6596 ;;		_inputVar
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text15
  6601  01596A                     __ptext15:
  6602                           	opt stack 0
  6603  01596A                     _HMI_Poll:
  6604                           	opt stack 14
  6605                           
  6606                           ;HMI.c: 254: TRISE = 0xFC;
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;incstack = 0
  6610  01596A  0EFC               	movlw	252
  6611  01596C  6E96               	movwf	3990,c	;volatile
  6612                           
  6613                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6614  01596E  0E5D               	movlw	low (_HMIBoard+48)
  6615  015970  0100               	movlb	0	; () banked
  6616  015972  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  6617  015974  0E01               	movlw	high (_HMIBoard+48)
  6618  015976  0100               	movlb	0	; () banked
  6619  015978  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6620  01597A  0E01               	movlw	1
  6621  01597C  0100               	movlb	0	; () banked
  6622  01597E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  6623  015980  EC47  F09A         	call	_Button_Poll	;wreg free
  6624                           
  6625                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6626  015984  0E3F               	movlw	low (_HMIBoard+18)
  6627  015986  0100               	movlb	0	; () banked
  6628  015988  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  6629  01598A  0E01               	movlw	high (_HMIBoard+18)
  6630  01598C  0100               	movlb	0	; () banked
  6631  01598E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6632  015990  0E01               	movlw	1
  6633  015992  0100               	movlb	0	; () banked
  6634  015994  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  6635  015996  EC47  F09A         	call	_Button_Poll	;wreg free
  6636                           
  6637                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6638  01599A  0E35               	movlw	low (_HMIBoard+8)
  6639  01599C  0100               	movlb	0	; () banked
  6640  01599E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  6641  0159A0  0E01               	movlw	high (_HMIBoard+8)
  6642  0159A2  0100               	movlb	0	; () banked
  6643  0159A4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6644  0159A6  0E01               	movlw	1
  6645  0159A8  0100               	movlb	0	; () banked
  6646  0159AA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  6647  0159AC  EC47  F09A         	call	_Button_Poll	;wreg free
  6648                           
  6649                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6650  0159B0  0E49               	movlw	low (_HMIBoard+28)
  6651  0159B2  0100               	movlb	0	; () banked
  6652  0159B4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  6653  0159B6  0E01               	movlw	high (_HMIBoard+28)
  6654  0159B8  0100               	movlb	0	; () banked
  6655  0159BA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6656  0159BC  0E01               	movlw	1
  6657  0159BE  0100               	movlb	0	; () banked
  6658  0159C0  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  6659  0159C2  EC47  F09A         	call	_Button_Poll	;wreg free
  6660                           
  6661                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6662  0159C6  0E53               	movlw	low (_HMIBoard+38)
  6663  0159C8  0100               	movlb	0	; () banked
  6664  0159CA  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  6665  0159CC  0E01               	movlw	high (_HMIBoard+38)
  6666  0159CE  0100               	movlb	0	; () banked
  6667  0159D0  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6668  0159D2  0E01               	movlw	1
  6669  0159D4  0100               	movlb	0	; () banked
  6670  0159D6  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  6671  0159D8  EC47  F09A         	call	_Button_Poll	;wreg free
  6672  0159DC  0012               	return		;funcret
  6673  0159DE                     __end_of_HMI_Poll:
  6674                           	opt stack 0
  6675                           tosu	equ	0xFFF
  6676                           tosh	equ	0xFFE
  6677                           tosl	equ	0xFFD
  6678                           pclath	equ	0xFFA
  6679                           tblptru	equ	0xFF8
  6680                           tblptrh	equ	0xFF7
  6681                           tblptrl	equ	0xFF6
  6682                           tablat	equ	0xFF5
  6683                           postinc0	equ	0xFEE
  6684                           wreg	equ	0xFE8
  6685                           postdec1	equ	0xFE5
  6686                           fsr1h	equ	0xFE2
  6687                           fsr1l	equ	0xFE1
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _Button_Poll *****************
  6695 ;; Defined at:
  6696 ;;		line 57 in file "Library/Button.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6699 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6700 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  Pin             1   35[BANK0 ] unsigned char 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      unsigned char 
  6705 ;; Registers used:
  6706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6712 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;Total ram usage:        9 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:   14
  6719 ;; This function calls:
  6720 ;;		_Event_DIPSwitch
  6721 ;;		_Event_NULL
  6722 ;;		_Event_TestButton
  6723 ;;		_HMI_DIPSwitch
  6724 ;;		_HMI_DownSwitch
  6725 ;;		_HMI_LeftSwitch
  6726 ;;		_HMI_RightSwitch
  6727 ;;		_HMI_UpSwitch
  6728 ;;		_MXK_DIPSwitch
  6729 ;;		_MXK_TestButton
  6730 ;; This function is called by:
  6731 ;;		_HMI_Poll
  6732 ;;		_MXK_Poll
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           	psect	text16
  6737  01348E                     __ptext16:
  6738                           	opt stack 0
  6739  01348E                     _Button_Poll:
  6740                           	opt stack 14
  6741                           
  6742                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6743                           
  6744                           ;incstack = 0
  6745  01348E  0100               	movlb	0	; () banked
  6746  013490  EE20 F007          	lfsr	2,7
  6747  013494  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6748  013496  26D9               	addwf	fsr2l,f,c
  6749  013498  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6750  01349A  22DA               	addwfc	fsr2h,f,c
  6751  01349C  D801               	call	u10898
  6752  01349E  D00A               	goto	u10899
  6753  0134A0                     u10898:
  6754  0134A0  0005               	push	
  6755  0134A2  6EFA               	movwf	pclath,c
  6756  0134A4  50DE               	movf	postinc2,w,c
  6757  0134A6  6EFD               	movwf	tosl,c
  6758  0134A8  50DE               	movf	postinc2,w,c
  6759  0134AA  6EFE               	movwf	tosh,c
  6760  0134AC  50DE               	movf	postinc2,w,c
  6761  0134AE  6EFF               	movwf	tosu,c
  6762  0134B0  50FA               	movf	pclath,w,c
  6763  0134B2  0012               	return		;indir
  6764  0134B4                     u10899:
  6765  0134B4  0100               	movlb	0	; () banked
  6766  0134B6  6F83               	movwf	Button_Poll@Pin& (0+255),b
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;Button.c: 61: if (pButton->mState == Pin)
  6770  0134B8  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  6771  0134BC  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6772  0134C0  0100               	movlb	0	; () banked
  6773  0134C2  5183               	movf	Button_Poll@Pin& (0+255),w,b
  6774  0134C4  18DE               	xorwf	postinc2,w,c
  6775  0134C6  A4D8               	btfss	status,2,c
  6776  0134C8  D021               	goto	l11
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;Button.c: 62: {
  6780                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6781  0134CA  0100               	movlb	0	; () banked
  6782  0134CC  EE20 F001          	lfsr	2,1
  6783  0134D0  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6784  0134D2  26D9               	addwf	fsr2l,f,c
  6785  0134D4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6786  0134D6  22DA               	addwfc	fsr2h,f,c
  6787  0134D8  0100               	movlb	0	; () banked
  6788  0134DA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  6789  0134DC  5CDE               	subwf	postinc2,w,c
  6790  0134DE  B0D8               	btfsc	status,0,c
  6791  0134E0  D00A               	goto	l12
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;Button.c: 66: pButton->mCount = 0;
  6795  0134E2  0100               	movlb	0	; () banked
  6796  0134E4  EE20 F001          	lfsr	2,1
  6797  0134E8  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6798  0134EA  26D9               	addwf	fsr2l,f,c
  6799  0134EC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6800  0134EE  22DA               	addwfc	fsr2h,f,c
  6801  0134F0  0E00               	movlw	0
  6802  0134F2  6EDF               	movwf	indf2,c
  6803  0134F4  0012               	return	
  6804  0134F6                     l12:
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;Button.c: 67: else
  6808                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6809                           
  6810                           ; BSR set to: 0
  6811  0134F6  0100               	movlb	0	; () banked
  6812  0134F8  EE20 F001          	lfsr	2,1
  6813  0134FC  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6814  0134FE  26D9               	addwf	fsr2l,f,c
  6815  013500  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6816  013502  22DA               	addwfc	fsr2h,f,c
  6817  013504  0100               	movlb	0	; () banked
  6818  013506  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  6819  013508  5EDF               	subwf	indf2,f,c
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;Button.c: 69: }
  6823  01350A  0012               	return	
  6824  01350C                     l11:
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6828                           
  6829                           ; BSR set to: 0
  6830  01350C  0100               	movlb	0	; () banked
  6831  01350E  EE20 F001          	lfsr	2,1
  6832  013512  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6833  013514  26D9               	addwf	fsr2l,f,c
  6834  013516  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6835  013518  22DA               	addwfc	fsr2h,f,c
  6836  01351A  50DF               	movf	indf2,w,c
  6837  01351C  0100               	movlb	0	; () banked
  6838  01351E  6F7E               	movwf	??_Button_Poll& (0+255),b
  6839  013520  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  6840  013522  0100               	movlb	0	; () banked
  6841  013524  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  6842  013526  0100               	movlb	0	; () banked
  6843  013528  277E               	addwf	??_Button_Poll& (0+255),f,b
  6844  01352A  0E00               	movlw	0
  6845  01352C  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6846  01352E  0100               	movlb	0	; () banked
  6847  013530  EE20 F001          	lfsr	2,1
  6848  013534  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6849  013536  26D9               	addwf	fsr2l,f,c
  6850  013538  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6851  01353A  22DA               	addwfc	fsr2h,f,c
  6852  01353C  50DF               	movf	indf2,w,c
  6853  01353E  0100               	movlb	0	; () banked
  6854  013540  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  6855  013542  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  6856  013544  0100               	movlb	0	; () banked
  6857  013546  517E               	movf	??_Button_Poll& (0+255),w,b
  6858  013548  0100               	movlb	0	; () banked
  6859  01354A  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6860  01354C  0100               	movlb	0	; () banked
  6861  01354E  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  6862  013550  0A80               	xorlw	128
  6863  013552  0100               	movlb	0	; () banked
  6864  013554  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  6865  013556  0100               	movlb	0	; () banked
  6866  013558  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  6867  01355A  0A80               	xorlw	128
  6868  01355C  0100               	movlb	0	; () banked
  6869  01355E  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6870  013560  B0D8               	btfsc	status,0,c
  6871  013562  0012               	return	
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;Button.c: 73: {
  6875                           ;Button.c: 75: pButton->mCount += pIncrement;
  6876  013564  0100               	movlb	0	; () banked
  6877  013566  EE20 F001          	lfsr	2,1
  6878  01356A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6879  01356C  26D9               	addwf	fsr2l,f,c
  6880  01356E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6881  013570  22DA               	addwfc	fsr2h,f,c
  6882  013572  0100               	movlb	0	; () banked
  6883  013574  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  6884  013576  26DF               	addwf	indf2,f,c
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6888  013578  0100               	movlb	0	; () banked
  6889  01357A  EE20 F002          	lfsr	2,2
  6890  01357E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6891  013580  26D9               	addwf	fsr2l,f,c
  6892  013582  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6893  013584  22DA               	addwfc	fsr2h,f,c
  6894  013586  0100               	movlb	0	; () banked
  6895  013588  EE10 F001          	lfsr	1,1
  6896  01358C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6897  01358E  26E1               	addwf	fsr1l,f,c
  6898  013590  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6899  013592  22E2               	addwfc	fsr1h,f,c
  6900  013594  50E7               	movf	indf1,w,c
  6901  013596  0100               	movlb	0	; () banked
  6902  013598  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  6903  01359A  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  6904  01359C  50DE               	movf	postinc2,w,c
  6905  01359E  0100               	movlb	0	; () banked
  6906  0135A0  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6907  0135A2  50DE               	movf	postinc2,w,c
  6908  0135A4  0100               	movlb	0	; () banked
  6909  0135A6  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6910  0135A8  A0D8               	btfss	status,0,c
  6911  0135AA  0012               	return	
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;Button.c: 77: {
  6915                           ;Button.c: 79: pButton->mState = Pin;
  6916  0135AC  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  6917  0135B0  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6918  0135B4  C083  FFDF         	movff	Button_Poll@Pin,indf2
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;Button.c: 80: pButton->mCount = 0;
  6922  0135B8  0100               	movlb	0	; () banked
  6923  0135BA  EE20 F001          	lfsr	2,1
  6924  0135BE  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6925  0135C0  26D9               	addwf	fsr2l,f,c
  6926  0135C2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6927  0135C4  22DA               	addwfc	fsr2h,f,c
  6928  0135C6  0E00               	movlw	0
  6929  0135C8  6EDF               	movwf	indf2,c
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;Button.c: 83: pButton->mFunction(Pin);
  6933  0135CA  0100               	movlb	0	; () banked
  6934  0135CC  EE20 F004          	lfsr	2,4
  6935  0135D0  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6936  0135D2  26D9               	addwf	fsr2l,f,c
  6937  0135D4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6938  0135D6  22DA               	addwfc	fsr2h,f,c
  6939  0135D8  D801               	call	u10948
  6940  0135DA  0012               	return	
  6941  0135DC                     u10948:
  6942  0135DC  0005               	push	
  6943  0135DE  6EFA               	movwf	pclath,c
  6944  0135E0  50DE               	movf	postinc2,w,c
  6945  0135E2  6EFD               	movwf	tosl,c
  6946  0135E4  50DE               	movf	postinc2,w,c
  6947  0135E6  6EFE               	movwf	tosh,c
  6948  0135E8  50DE               	movf	postinc2,w,c
  6949  0135EA  6EFF               	movwf	tosu,c
  6950  0135EC  50FA               	movf	pclath,w,c
  6951  0135EE  0100               	movlb	0	; () banked
  6952  0135F0  5183               	movf	Button_Poll@Pin& (0+255),w,b
  6953  0135F2  0012               	return		;indir
  6954  0135F4                     __end_of_Button_Poll:
  6955                           	opt stack 0
  6956                           tosu	equ	0xFFF
  6957                           tosh	equ	0xFFE
  6958                           tosl	equ	0xFFD
  6959                           pclath	equ	0xFFA
  6960                           tblptru	equ	0xFF8
  6961                           tblptrh	equ	0xFF7
  6962                           tblptrl	equ	0xFF6
  6963                           tablat	equ	0xFF5
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           indf1	equ	0xFE7
  6967                           postdec1	equ	0xFE5
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _MXK_DIPSwitch *****************
  6978 ;; Defined at:
  6979 ;;		line 24 in file "Library/MXK.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      unsigned char 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;Total ram usage:        0 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    8
  7000 ;; This function calls:
  7001 ;;		_Port_GetQuad
  7002 ;; This function is called by:
  7003 ;;		_FunctInitButton
  7004 ;;		_Button_Poll
  7005 ;;		_inputVar
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text17
  7010  016B9E                     __ptext17:
  7011                           	opt stack 0
  7012  016B9E                     _MXK_DIPSwitch:
  7013                           	opt stack 21
  7014                           
  7015                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  7016                           
  7017                           ;incstack = 0
  7018  016B9E  0EA5               	movlw	low _PortD
  7019  016BA0  0100               	movlb	0	; () banked
  7020  016BA2  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  7021  016BA4  0E01               	movlw	high _PortD
  7022  016BA6  0100               	movlb	0	; () banked
  7023  016BA8  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  7024  016BAA  0E00               	movlw	0
  7025  016BAC  0100               	movlb	0	; () banked
  7026  016BAE  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  7027  016BB0  EC2A  F0B1         	call	_Port_GetQuad
  7028  016BB4  0012               	return	
  7029  016BB6                     __end_of_MXK_DIPSwitch:
  7030                           	opt stack 0
  7031                           tosu	equ	0xFFF
  7032                           tosh	equ	0xFFE
  7033                           tosl	equ	0xFFD
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           indf1	equ	0xFE7
  7042                           postdec1	equ	0xFE5
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _HMI_DIPSwitch *****************
  7053 ;; Defined at:
  7054 ;;		line 47 in file "HMI.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;		None
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      unsigned char 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    8
  7075 ;; This function calls:
  7076 ;;		_Port_GetQuad
  7077 ;; This function is called by:
  7078 ;;		_HMI_Init
  7079 ;;		_Button_Poll
  7080 ;;		_inputVar
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text18
  7085  016BB6                     __ptext18:
  7086                           	opt stack 0
  7087  016BB6                     _HMI_DIPSwitch:
  7088                           	opt stack 19
  7089                           
  7090                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  7091                           
  7092                           ;incstack = 0
  7093  016BB6  0E9B               	movlw	low _PortE
  7094  016BB8  0100               	movlb	0	; () banked
  7095  016BBA  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  7096  016BBC  0E01               	movlw	high _PortE
  7097  016BBE  0100               	movlb	0	; () banked
  7098  016BC0  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  7099  016BC2  0E00               	movlw	0
  7100  016BC4  0100               	movlb	0	; () banked
  7101  016BC6  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  7102  016BC8  EC2A  F0B1         	call	_Port_GetQuad	;wreg free
  7103  016BCC  0012               	return	
  7104  016BCE                     __end_of_HMI_DIPSwitch:
  7105                           	opt stack 0
  7106                           tosu	equ	0xFFF
  7107                           tosh	equ	0xFFE
  7108                           tosl	equ	0xFFD
  7109                           pclath	equ	0xFFA
  7110                           tblptru	equ	0xFF8
  7111                           tblptrh	equ	0xFF7
  7112                           tblptrl	equ	0xFF6
  7113                           tablat	equ	0xFF5
  7114                           postinc0	equ	0xFEE
  7115                           wreg	equ	0xFE8
  7116                           indf1	equ	0xFE7
  7117                           postdec1	equ	0xFE5
  7118                           fsr1h	equ	0xFE2
  7119                           fsr1l	equ	0xFE1
  7120                           indf2	equ	0xFDF
  7121                           postinc2	equ	0xFDE
  7122                           postdec2	equ	0xFDD
  7123                           fsr2h	equ	0xFDA
  7124                           fsr2l	equ	0xFD9
  7125                           status	equ	0xFD8
  7126                           
  7127 ;; *************** function _HMI_DownSwitch *****************
  7128 ;; Defined at:
  7129 ;;		line 42 in file "HMI.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;		None
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1    wreg      unsigned char 
  7136 ;; Registers used:
  7137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;Total ram usage:        0 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    8
  7150 ;; This function calls:
  7151 ;;		_Port_GetPin
  7152 ;; This function is called by:
  7153 ;;		_HMI_Init
  7154 ;;		_Button_Poll
  7155 ;;		_inputVar
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           	psect	text19
  7160  016BCE                     __ptext19:
  7161                           	opt stack 0
  7162  016BCE                     _HMI_DownSwitch:
  7163                           	opt stack 19
  7164                           
  7165                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  7166                           
  7167                           ;incstack = 0
  7168  016BCE  0E9B               	movlw	low _PortE
  7169  016BD0  0100               	movlb	0	; () banked
  7170  016BD2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  7171  016BD4  0E01               	movlw	high _PortE
  7172  016BD6  0100               	movlb	0	; () banked
  7173  016BD8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7174  016BDA  0E06               	movlw	6
  7175  016BDC  0100               	movlb	0	; () banked
  7176  016BDE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  7177  016BE0  ECDF  F0B1         	call	_Port_GetPin	;wreg free
  7178  016BE4  0012               	return	
  7179  016BE6                     __end_of_HMI_DownSwitch:
  7180                           	opt stack 0
  7181                           tosu	equ	0xFFF
  7182                           tosh	equ	0xFFE
  7183                           tosl	equ	0xFFD
  7184                           pclath	equ	0xFFA
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           postinc0	equ	0xFEE
  7190                           wreg	equ	0xFE8
  7191                           indf1	equ	0xFE7
  7192                           postdec1	equ	0xFE5
  7193                           fsr1h	equ	0xFE2
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _HMI_UpSwitch *****************
  7203 ;; Defined at:
  7204 ;;		line 37 in file "HMI.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      unsigned char 
  7211 ;; Registers used:
  7212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;Total ram usage:        0 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    8
  7225 ;; This function calls:
  7226 ;;		_Port_GetPin
  7227 ;; This function is called by:
  7228 ;;		_HMI_Init
  7229 ;;		_Button_Poll
  7230 ;;		_inputVar
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text20
  7235  016BE6                     __ptext20:
  7236                           	opt stack 0
  7237  016BE6                     _HMI_UpSwitch:
  7238                           	opt stack 21
  7239                           
  7240                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  7241                           
  7242                           ;incstack = 0
  7243  016BE6  0E9B               	movlw	low _PortE
  7244  016BE8  0100               	movlb	0	; () banked
  7245  016BEA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  7246  016BEC  0E01               	movlw	high _PortE
  7247  016BEE  0100               	movlb	0	; () banked
  7248  016BF0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7249  016BF2  0E07               	movlw	7
  7250  016BF4  0100               	movlb	0	; () banked
  7251  016BF6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  7252  016BF8  ECDF  F0B1         	call	_Port_GetPin	;wreg free
  7253  016BFC  0012               	return	
  7254  016BFE                     __end_of_HMI_UpSwitch:
  7255                           	opt stack 0
  7256                           tosu	equ	0xFFF
  7257                           tosh	equ	0xFFE
  7258                           tosl	equ	0xFFD
  7259                           pclath	equ	0xFFA
  7260                           tblptru	equ	0xFF8
  7261                           tblptrh	equ	0xFF7
  7262                           tblptrl	equ	0xFF6
  7263                           tablat	equ	0xFF5
  7264                           postinc0	equ	0xFEE
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postdec1	equ	0xFE5
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           
  7277 ;; *************** function _HMI_RightSwitch *****************
  7278 ;; Defined at:
  7279 ;;		line 32 in file "HMI.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      unsigned char 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;Total ram usage:        0 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    8
  7300 ;; This function calls:
  7301 ;;		_Port_GetPin
  7302 ;; This function is called by:
  7303 ;;		_HMI_Init
  7304 ;;		_Button_Poll
  7305 ;;		_inputVar
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text21
  7310  016BFE                     __ptext21:
  7311                           	opt stack 0
  7312  016BFE                     _HMI_RightSwitch:
  7313                           	opt stack 21
  7314                           
  7315                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  7316                           
  7317                           ;incstack = 0
  7318  016BFE  0E9B               	movlw	low _PortE
  7319  016C00  0100               	movlb	0	; () banked
  7320  016C02  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  7321  016C04  0E01               	movlw	high _PortE
  7322  016C06  0100               	movlb	0	; () banked
  7323  016C08  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7324  016C0A  0E04               	movlw	4
  7325  016C0C  0100               	movlb	0	; () banked
  7326  016C0E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  7327  016C10  ECDF  F0B1         	call	_Port_GetPin	;wreg free
  7328  016C14  0012               	return	
  7329  016C16                     __end_of_HMI_RightSwitch:
  7330                           	opt stack 0
  7331                           tosu	equ	0xFFF
  7332                           tosh	equ	0xFFE
  7333                           tosl	equ	0xFFD
  7334                           pclath	equ	0xFFA
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           indf1	equ	0xFE7
  7342                           postdec1	equ	0xFE5
  7343                           fsr1h	equ	0xFE2
  7344                           fsr1l	equ	0xFE1
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _HMI_LeftSwitch *****************
  7353 ;; Defined at:
  7354 ;;		line 27 in file "HMI.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      unsigned char 
  7361 ;; Registers used:
  7362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        0 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    8
  7375 ;; This function calls:
  7376 ;;		_Port_GetPin
  7377 ;; This function is called by:
  7378 ;;		_HMI_Init
  7379 ;;		_Button_Poll
  7380 ;;		_inputVar
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text22
  7385  016C16                     __ptext22:
  7386                           	opt stack 0
  7387  016C16                     _HMI_LeftSwitch:
  7388                           	opt stack 19
  7389                           
  7390                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  7391                           
  7392                           ;incstack = 0
  7393  016C16  0E9B               	movlw	low _PortE
  7394  016C18  0100               	movlb	0	; () banked
  7395  016C1A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  7396  016C1C  0E01               	movlw	high _PortE
  7397  016C1E  0100               	movlb	0	; () banked
  7398  016C20  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7399  016C22  0E05               	movlw	5
  7400  016C24  0100               	movlb	0	; () banked
  7401  016C26  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  7402  016C28  ECDF  F0B1         	call	_Port_GetPin	;wreg free
  7403  016C2C  0012               	return	
  7404  016C2E                     __end_of_HMI_LeftSwitch:
  7405                           	opt stack 0
  7406                           tosu	equ	0xFFF
  7407                           tosh	equ	0xFFE
  7408                           tosl	equ	0xFFD
  7409                           pclath	equ	0xFFA
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           postinc0	equ	0xFEE
  7415                           wreg	equ	0xFE8
  7416                           indf1	equ	0xFE7
  7417                           postdec1	equ	0xFE5
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function _MXK_TestButton *****************
  7428 ;; Defined at:
  7429 ;;		line 14 in file "Library/MXK.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      unsigned char 
  7436 ;; Registers used:
  7437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;Total ram usage:        0 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    8
  7450 ;; This function calls:
  7451 ;;		_Port_GetPin
  7452 ;; This function is called by:
  7453 ;;		_FunctInitButton
  7454 ;;		_Button_Poll
  7455 ;;		_inputVar
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text23
  7460  016C2E                     __ptext23:
  7461                           	opt stack 0
  7462  016C2E                     _MXK_TestButton:
  7463                           	opt stack 21
  7464                           
  7465                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  7466                           
  7467                           ;incstack = 0
  7468  016C2E  0EAF               	movlw	low _PortB
  7469  016C30  0100               	movlb	0	; () banked
  7470  016C32  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  7471  016C34  0E01               	movlw	high _PortB
  7472  016C36  0100               	movlb	0	; () banked
  7473  016C38  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7474  016C3A  0E04               	movlw	4
  7475  016C3C  0100               	movlb	0	; () banked
  7476  016C3E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  7477  016C40  ECDF  F0B1         	call	_Port_GetPin	;wreg free
  7478  016C44  0012               	return	
  7479  016C46                     __end_of_MXK_TestButton:
  7480                           	opt stack 0
  7481                           tosu	equ	0xFFF
  7482                           tosh	equ	0xFFE
  7483                           tosl	equ	0xFFD
  7484                           pclath	equ	0xFFA
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           indf1	equ	0xFE7
  7492                           postdec1	equ	0xFE5
  7493                           fsr1h	equ	0xFE2
  7494                           fsr1l	equ	0xFE1
  7495                           indf2	equ	0xFDF
  7496                           postinc2	equ	0xFDE
  7497                           postdec2	equ	0xFDD
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _Port_GetQuad *****************
  7503 ;; Defined at:
  7504 ;;		line 498 in file "Library/Port.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7507 ;;		 -> PortE(10), PortD(10), 
  7508 ;;  pQuad           1    2[BANK0 ] enum E6776
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  Output          1    5[BANK0 ] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      unsigned char 
  7513 ;; Registers used:
  7514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7520 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;Total ram usage:        6 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    7
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_HMI_DIPSwitch
  7531 ;;		_MXK_DIPSwitch
  7532 ;;		_Port_ToggleQuad
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text24
  7537  016254                     __ptext24:
  7538                           	opt stack 0
  7539  016254                     _Port_GetQuad:
  7540                           	opt stack 21
  7541                           
  7542                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7543                           
  7544                           ;incstack = 0
  7545  016254  0100               	movlb	0	; () banked
  7546  016256  EE20 F006          	lfsr	2,6
  7547  01625A  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
  7548  01625C  26D9               	addwf	fsr2l,f,c
  7549  01625E  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7550  016260  22DA               	addwfc	fsr2h,f,c
  7551  016262  CFDE F063          	movff	postinc2,??_Port_GetQuad
  7552  016266  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
  7553  01626A  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
  7554  01626E  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7555  016272  50DF               	movf	indf2,w,c
  7556  016274  0100               	movlb	0	; () banked
  7557  016276  6F65               	movwf	Port_GetQuad@Output& (0+255),b
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7561  016278  0100               	movlb	0	; () banked
  7562  01627A  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7563  01627C  0D04               	mullw	4
  7564  01627E  28F3               	incf	prodl,w,c
  7565  016280  0100               	movlb	0	; () banked
  7566  016282  6F63               	movwf	??_Port_GetQuad& (0+255),b
  7567  016284  D003               	goto	u9630
  7568  016286                     u9635:
  7569  016286  0100               	movlb	0	; () banked
  7570  016288  90D8               	bcf	status,0,c
  7571  01628A  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7572  01628C                     u9630:
  7573  01628C  0100               	movlb	0	; () banked
  7574  01628E  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
  7575  016290  D7FA               	goto	u9635
  7576                           
  7577                           ;Port.c: 502: Output &= 0xF;
  7578  016292  0E0F               	movlw	15
  7579  016294  0100               	movlb	0	; () banked
  7580  016296  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;Port.c: 503: return Output;
  7584  016298  0100               	movlb	0	; () banked
  7585  01629A  5165               	movf	Port_GetQuad@Output& (0+255),w,b
  7586  01629C  0012               	return	
  7587  01629E                     __end_of_Port_GetQuad:
  7588                           	opt stack 0
  7589                           tosu	equ	0xFFF
  7590                           tosh	equ	0xFFE
  7591                           tosl	equ	0xFFD
  7592                           pclath	equ	0xFFA
  7593                           tblptru	equ	0xFF8
  7594                           tblptrh	equ	0xFF7
  7595                           tblptrl	equ	0xFF6
  7596                           tablat	equ	0xFF5
  7597                           prodl	equ	0xFF3
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           postdec1	equ	0xFE5
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           fsr2h	equ	0xFDA
  7608                           fsr2l	equ	0xFD9
  7609                           status	equ	0xFD8
  7610                           
  7611 ;; *************** function _Event_DIPSwitch *****************
  7612 ;; Defined at:
  7613 ;;		line 22 in file "Events.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  pState          1    wreg     unsigned char 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  pState          1   25[BANK0 ] unsigned char 
  7618 ;;  Bar             1   26[BANK0 ] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;Total ram usage:        2 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:   13
  7635 ;; This function calls:
  7636 ;;		_HMI_GetBar
  7637 ;;		_HMI_SetBar
  7638 ;;		_LED_Toggle
  7639 ;; This function is called by:
  7640 ;;		_FunctInitButton
  7641 ;;		_Button_Poll
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text25
  7646  01689E                     __ptext25:
  7647                           	opt stack 0
  7648  01689E                     _Event_DIPSwitch:
  7649                           	opt stack 14
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;incstack = 0
  7653                           ;Event_DIPSwitch@pState stored from wreg
  7654  01689E  0100               	movlb	0	; () banked
  7655  0168A0  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  7656                           
  7657                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  7658  0168A2  EC91  F0B6         	call	_HMI_GetBar	;wreg free
  7659  0168A6  0100               	movlb	0	; () banked
  7660  0168A8  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;Events.c: 25: Bar &= 0x0F;
  7664  0168AA  0E0F               	movlw	15
  7665  0168AC  0100               	movlb	0	; () banked
  7666  0168AE  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;Events.c: 26: pState <<= 4;
  7670  0168B0  0100               	movlb	0	; () banked
  7671  0168B2  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7672  0168B4  0EF0               	movlw	240
  7673  0168B6  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  7677  0168B8  0100               	movlb	0	; () banked
  7678  0168BA  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7679  0168BC  0100               	movlb	0	; () banked
  7680  0168BE  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7681  0168C0  EC7A  F0B6         	call	_HMI_SetBar
  7682                           
  7683                           ;Events.c: 32: LED_Toggle(eLED1);
  7684  0168C4  0E00               	movlw	0
  7685  0168C6  EC97  F0B1         	call	_LED_Toggle
  7686  0168CA  0012               	return		;funcret
  7687  0168CC                     __end_of_Event_DIPSwitch:
  7688                           	opt stack 0
  7689                           tosu	equ	0xFFF
  7690                           tosh	equ	0xFFE
  7691                           tosl	equ	0xFFD
  7692                           pclath	equ	0xFFA
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodl	equ	0xFF3
  7698                           postinc0	equ	0xFEE
  7699                           wreg	equ	0xFE8
  7700                           indf1	equ	0xFE7
  7701                           postdec1	equ	0xFE5
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _Event_NULL *****************
  7712 ;; Defined at:
  7713 ;;		line 9 in file "Events.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  pState          1    wreg     unsigned char 
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  pState          1    0[COMRAM] unsigned char 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  1    wreg      void 
  7720 ;; Registers used:
  7721 ;;		wreg
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    7
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_HMI_Init
  7738 ;;		_Button_Poll
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text26
  7743  001404                     __ptext26:
  7744                           	opt stack 0
  7745  001404                     _Event_NULL:
  7746                           	opt stack 20
  7747                           
  7748                           ;incstack = 0
  7749  001404  0012               	return		;funcret
  7750  001406                     __end_of_Event_NULL:
  7751                           	opt stack 0
  7752                           tosu	equ	0xFFF
  7753                           tosh	equ	0xFFE
  7754                           tosl	equ	0xFFD
  7755                           pclath	equ	0xFFA
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodl	equ	0xFF3
  7761                           postinc0	equ	0xFEE
  7762                           wreg	equ	0xFE8
  7763                           indf1	equ	0xFE7
  7764                           postdec1	equ	0xFE5
  7765                           fsr1h	equ	0xFE2
  7766                           fsr1l	equ	0xFE1
  7767                           indf2	equ	0xFDF
  7768                           postinc2	equ	0xFDE
  7769                           postdec2	equ	0xFDD
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function _Event_TestButton *****************
  7775 ;; Defined at:
  7776 ;;		line 52 in file "Events.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  pState          1    wreg     unsigned char 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  pState          1   25[BANK0 ] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;Total ram usage:        1 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:   13
  7797 ;; This function calls:
  7798 ;;		_HMI_SetButton
  7799 ;;		_HMI_SetNumber
  7800 ;;		_LED_Toggle
  7801 ;; This function is called by:
  7802 ;;		_FunctInitButton
  7803 ;;		_Button_Poll
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text27
  7808  01668C                     __ptext27:
  7809                           	opt stack 0
  7810  01668C                     _Event_TestButton:
  7811                           	opt stack 14
  7812                           
  7813                           ;incstack = 0
  7814                           ;Event_TestButton@pState stored from wreg
  7815  01668C  0100               	movlb	0	; () banked
  7816  01668E  6F79               	movwf	Event_TestButton@pState& (0+255),b
  7817                           
  7818                           ;Events.c: 56: static UINT8 j = 0;
  7819                           ;Events.c: 60: if (pState == 0)
  7820  016690  0100               	movlb	0	; () banked
  7821  016692  5179               	movf	Event_TestButton@pState& (0+255),w,b
  7822  016694  0100               	movlb	0	; () banked
  7823  016696  A4D8               	btfss	status,2,c
  7824  016698  D013               	goto	l1873
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;Events.c: 61: {
  7828                           ;Events.c: 62: j++;
  7829  01669A  0100               	movlb	0	; () banked
  7830  01669C  2BF2               	incf	Event_TestButton@j& (0+255),f,b
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;Events.c: 63: val += j;
  7834  01669E  0100               	movlb	0	; () banked
  7835  0166A0  51F2               	movf	Event_TestButton@j& (0+255),w,b
  7836  0166A2  0100               	movlb	0	; () banked
  7837  0166A4  27E6               	addwf	_val& (0+255),f,b
  7838  0166A6  0E00               	movlw	0
  7839  0166A8  23E7               	addwfc	(_val+1)& (0+255),f,b
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;Events.c: 64: HMI_SetNumber( val );
  7843  0166AA  C0E6  F076         	movff	_val,HMI_SetNumber@pInput
  7844  0166AE  C0E7  F077         	movff	_val+1,HMI_SetNumber@pInput+1
  7845  0166B2  ECA9  F0B4         	call	_HMI_SetNumber	;wreg free
  7846                           
  7847                           ;Events.c: 67: HMI_SetButton( j & 3 );
  7848  0166B6  0100               	movlb	0	; () banked
  7849  0166B8  51F2               	movf	Event_TestButton@j& (0+255),w,b
  7850  0166BA  0B03               	andlw	3
  7851  0166BC  ECE2  F0A9         	call	_HMI_SetButton
  7852  0166C0                     l1873:
  7853                           
  7854                           ;Events.c: 68: }
  7855                           ;Events.c: 72: LED_Toggle(eLED1);
  7856  0166C0  0E00               	movlw	0
  7857  0166C2  EC97  F0B1         	call	_LED_Toggle
  7858  0166C6  0012               	return		;funcret
  7859  0166C8                     __end_of_Event_TestButton:
  7860                           	opt stack 0
  7861                           tosu	equ	0xFFF
  7862                           tosh	equ	0xFFE
  7863                           tosl	equ	0xFFD
  7864                           pclath	equ	0xFFA
  7865                           tblptru	equ	0xFF8
  7866                           tblptrh	equ	0xFF7
  7867                           tblptrl	equ	0xFF6
  7868                           tablat	equ	0xFF5
  7869                           prodl	equ	0xFF3
  7870                           postinc0	equ	0xFEE
  7871                           wreg	equ	0xFE8
  7872                           indf1	equ	0xFE7
  7873                           postdec1	equ	0xFE5
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _HMI_SetNumber *****************
  7884 ;; Defined at:
  7885 ;;		line 221 in file "HMI.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  pInput          2   22[BANK0 ] int 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;		None
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  1    wreg      void 
  7892 ;; Registers used:
  7893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        2 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    9
  7906 ;; This function calls:
  7907 ;;		_HMI_SetSegments
  7908 ;;		_itos
  7909 ;; This function is called by:
  7910 ;;		_Event_TestButton
  7911 ;;		_main
  7912 ;;		_Event_HMI_UpButton
  7913 ;;		_Event_HMI_DownButton
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text28
  7918  016952                     __ptext28:
  7919                           	opt stack 0
  7920  016952                     _HMI_SetNumber:
  7921                           	opt stack 17
  7922                           
  7923                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  7924                           
  7925                           ;incstack = 0
  7926  016952  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
  7927  016956  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
  7928  01695A  0E2D               	movlw	low _HMIBoard
  7929  01695C  0100               	movlb	0	; () banked
  7930  01695E  6F6E               	movwf	itos@destination& (0+255),b
  7931  016960  0E01               	movlw	high _HMIBoard
  7932  016962  0100               	movlb	0	; () banked
  7933  016964  6F6F               	movwf	(itos@destination+1)& (0+255),b
  7934  016966  EC37  F0A0         	call	_itos	;wreg free
  7935                           
  7936                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  7937  01696A  0E2D               	movlw	low _HMIBoard
  7938  01696C  0100               	movlb	0	; () banked
  7939  01696E  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
  7940  016970  0E01               	movlw	high _HMIBoard
  7941  016972  0100               	movlb	0	; () banked
  7942  016974  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  7943  016976  EC97  F0A4         	call	_HMI_SetSegments	;wreg free
  7944  01697A  0012               	return		;funcret
  7945  01697C                     __end_of_HMI_SetNumber:
  7946                           	opt stack 0
  7947                           tosu	equ	0xFFF
  7948                           tosh	equ	0xFFE
  7949                           tosl	equ	0xFFD
  7950                           pclath	equ	0xFFA
  7951                           tblptru	equ	0xFF8
  7952                           tblptrh	equ	0xFF7
  7953                           tblptrl	equ	0xFF6
  7954                           tablat	equ	0xFF5
  7955                           prodl	equ	0xFF3
  7956                           postinc0	equ	0xFEE
  7957                           wreg	equ	0xFE8
  7958                           indf1	equ	0xFE7
  7959                           postdec1	equ	0xFE5
  7960                           fsr1h	equ	0xFE2
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function _itos *****************
  7970 ;; Defined at:
  7971 ;;		line 369 in file "Library/Types.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  input           2   12[BANK0 ] unsigned short 
  7974 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  7975 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  Out             2   20[BANK0 ] unsigned short 
  7978 ;;  Length          2   18[BANK0 ] unsigned short 
  7979 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  7980 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      void 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;Total ram usage:       10 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    8
  7997 ;; This function calls:
  7998 ;;		___lwdiv
  7999 ;;		___lwmod
  8000 ;;		_reverse
  8001 ;; This function is called by:
  8002 ;;		_HMI_SetNumber
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text29
  8007  01406E                     __ptext29:
  8008                           	opt stack 0
  8009  01406E                     _itos:
  8010                           	opt stack 17
  8011                           
  8012                           ;Types.c: 371: UINT16 Out = input;
  8013                           
  8014                           ;incstack = 0
  8015  01406E  C06C  F074         	movff	itos@input,itos@Out
  8016  014072  C06D  F075         	movff	itos@input+1,itos@Out+1
  8017                           
  8018                           ;Types.c: 372: UINT16 Length = 0;
  8019  014076  0E00               	movlw	0
  8020  014078  0100               	movlb	0	; () banked
  8021  01407A  6F73               	movwf	(itos@Length+1)& (0+255),b
  8022  01407C  0E00               	movlw	0
  8023  01407E  6F72               	movwf	itos@Length& (0+255),b
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;Types.c: 373: char *Data = destination;
  8027  014080  C06E  F070         	movff	itos@destination,itos@Data
  8028  014084  C06F  F071         	movff	itos@destination+1,itos@Data+1
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;Types.c: 374: if(Out == 0)
  8032  014088  0100               	movlb	0	; () banked
  8033  01408A  5174               	movf	itos@Out& (0+255),w,b
  8034  01408C  0100               	movlb	0	; () banked
  8035  01408E  1175               	iorwf	(itos@Out+1)& (0+255),w,b
  8036  014090  A4D8               	btfss	status,2,c
  8037  014092  D034               	goto	l929
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;Types.c: 375: {
  8041                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8042  014094  C070  FFD9         	movff	itos@Data,fsr2l
  8043  014098  C071  FFDA         	movff	itos@Data+1,fsr2h
  8044  01409C  0E30               	movlw	48
  8045  01409E  6EDF               	movwf	indf2,c
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;Types.c: 377: Length = 1;
  8049  0140A0  0E00               	movlw	0
  8050  0140A2  0100               	movlb	0	; () banked
  8051  0140A4  6F73               	movwf	(itos@Length+1)& (0+255),b
  8052  0140A6  0E01               	movlw	1
  8053  0140A8  6F72               	movwf	itos@Length& (0+255),b
  8054                           
  8055                           ;Types.c: 378: }
  8056  0140AA  D040               	goto	l928
  8057  0140AC                     
  8058                           ; BSR set to: 0
  8059                           ;Types.c: 382: {
  8060                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8061                           
  8062                           ; BSR set to: 0
  8063  0140AC  C074  F067         	movff	itos@Out,___lwmod@dividend
  8064  0140B0  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
  8065  0140B4  0E00               	movlw	0
  8066  0140B6  0100               	movlb	0	; () banked
  8067  0140B8  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8068  0140BA  0E0A               	movlw	10
  8069  0140BC  6F69               	movwf	___lwmod@divisor& (0+255),b
  8070  0140BE  ECA5  F0AF         	call	___lwmod	;wreg free
  8071  0140C2  0100               	movlb	0	; () banked
  8072  0140C4  5167               	movf	?___lwmod& (0+255),w,b
  8073  0140C6  0F30               	addlw	48
  8074  0140C8  C070  FFD9         	movff	itos@Data,fsr2l
  8075  0140CC  C071  FFDA         	movff	itos@Data+1,fsr2h
  8076  0140D0  6EDF               	movwf	indf2,c
  8077                           
  8078                           ; BSR set to: 0
  8079                           ;Types.c: 384: Out /= 10;
  8080  0140D2  C074  F060         	movff	itos@Out,___lwdiv@dividend
  8081  0140D6  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
  8082  0140DA  0E00               	movlw	0
  8083  0140DC  0100               	movlb	0	; () banked
  8084  0140DE  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8085  0140E0  0E0A               	movlw	10
  8086  0140E2  6F62               	movwf	___lwdiv@divisor& (0+255),b
  8087  0140E4  EC3E  F0AC         	call	___lwdiv	;wreg free
  8088  0140E8  C060  F074         	movff	?___lwdiv,itos@Out
  8089  0140EC  C061  F075         	movff	?___lwdiv+1,itos@Out+1
  8090                           
  8091                           ;Types.c: 385: Length ++;
  8092  0140F0  0100               	movlb	0	; () banked
  8093  0140F2  4B72               	infsnz	itos@Length& (0+255),f,b
  8094  0140F4  2B73               	incf	(itos@Length+1)& (0+255),f,b
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;Types.c: 386: Data++;
  8098  0140F6  0100               	movlb	0	; () banked
  8099  0140F8  4B70               	infsnz	itos@Data& (0+255),f,b
  8100  0140FA  2B71               	incf	(itos@Data+1)& (0+255),f,b
  8101  0140FC                     l929:
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106  0140FC  0100               	movlb	0	; () banked
  8107  0140FE  5174               	movf	itos@Out& (0+255),w,b
  8108  014100  0100               	movlb	0	; () banked
  8109  014102  1175               	iorwf	(itos@Out+1)& (0+255),w,b
  8110  014104  B4D8               	btfsc	status,2,c
  8111  014106  D008               	goto	u9370
  8112                           
  8113                           ; BSR set to: 0
  8114  014108  0100               	movlb	0	; () banked
  8115  01410A  5173               	movf	(itos@Length+1)& (0+255),w,b
  8116  01410C  E105               	bnz	l12220
  8117  01410E  0E06               	movlw	6
  8118  014110  0100               	movlb	0	; () banked
  8119  014112  5D72               	subwf	itos@Length& (0+255),w,b
  8120  014114  A0D8               	btfss	status,0,c
  8121  014116  D7CA               	goto	l930
  8122  014118                     u9370:
  8123  014118                     l12220:
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;Types.c: 387: }
  8127                           ;Types.c: 388: reverse(destination, Length);
  8128  014118  C06E  F060         	movff	itos@destination,reverse@input
  8129  01411C  C06F  F061         	movff	itos@destination+1,reverse@input+1
  8130  014120  C072  F062         	movff	itos@Length,reverse@length
  8131  014124  C073  F063         	movff	itos@Length+1,reverse@length+1
  8132  014128  ECD5  F0AD         	call	_reverse	;wreg free
  8133  01412C                     l928:
  8134                           
  8135                           ;Types.c: 389: }
  8136                           ;Types.c: 390: destination[Length] = '\0';
  8137  01412C  0100               	movlb	0	; () banked
  8138  01412E  5172               	movf	itos@Length& (0+255),w,b
  8139  014130  0100               	movlb	0	; () banked
  8140  014132  256E               	addwf	itos@destination& (0+255),w,b
  8141  014134  6ED9               	movwf	fsr2l,c
  8142  014136  0100               	movlb	0	; () banked
  8143  014138  5173               	movf	(itos@Length+1)& (0+255),w,b
  8144  01413A  0100               	movlb	0	; () banked
  8145  01413C  216F               	addwfc	(itos@destination+1)& (0+255),w,b
  8146  01413E  6EDA               	movwf	fsr2h,c
  8147  014140  0E00               	movlw	0
  8148  014142  6EDF               	movwf	indf2,c
  8149                           
  8150                           ; BSR set to: 0
  8151  014144  0012               	return		;funcret
  8152  014146                     __end_of_itos:
  8153                           	opt stack 0
  8154                           tosu	equ	0xFFF
  8155                           tosh	equ	0xFFE
  8156                           tosl	equ	0xFFD
  8157                           pclath	equ	0xFFA
  8158                           tblptru	equ	0xFF8
  8159                           tblptrh	equ	0xFF7
  8160                           tblptrl	equ	0xFF6
  8161                           tablat	equ	0xFF5
  8162                           prodl	equ	0xFF3
  8163                           postinc0	equ	0xFEE
  8164                           wreg	equ	0xFE8
  8165                           indf1	equ	0xFE7
  8166                           postdec1	equ	0xFE5
  8167                           fsr1h	equ	0xFE2
  8168                           fsr1l	equ	0xFE1
  8169                           indf2	equ	0xFDF
  8170                           postinc2	equ	0xFDE
  8171                           postdec2	equ	0xFDD
  8172                           fsr2h	equ	0xFDA
  8173                           fsr2l	equ	0xFD9
  8174                           status	equ	0xFD8
  8175                           
  8176 ;; *************** function _reverse *****************
  8177 ;; Defined at:
  8178 ;;		line 357 in file "Library/Types.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8181 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8182 ;;  length          2    2[BANK0 ] unsigned short 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8185 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8186 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8196 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;Total ram usage:        7 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    7
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_itos
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text30
  8211  015BAA                     __ptext30:
  8212                           	opt stack 0
  8213  015BAA                     _reverse:
  8214                           	opt stack 17
  8215                           
  8216                           ;Types.c: 359: char tempVar,
  8217                           ;Types.c: 360: *iterator = input + length;
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;incstack = 0
  8221  015BAA  0100               	movlb	0	; () banked
  8222  015BAC  5162               	movf	reverse@length& (0+255),w,b
  8223  015BAE  0100               	movlb	0	; () banked
  8224  015BB0  2560               	addwf	reverse@input& (0+255),w,b
  8225  015BB2  0100               	movlb	0	; () banked
  8226  015BB4  6F65               	movwf	reverse@iterator& (0+255),b
  8227  015BB6  0100               	movlb	0	; () banked
  8228  015BB8  5163               	movf	(reverse@length+1)& (0+255),w,b
  8229  015BBA  0100               	movlb	0	; () banked
  8230  015BBC  2161               	addwfc	(reverse@input+1)& (0+255),w,b
  8231  015BBE  0100               	movlb	0	; () banked
  8232  015BC0  6F66               	movwf	(reverse@iterator+1)& (0+255),b
  8233                           
  8234                           ;Types.c: 362: while ( --iterator > input )
  8235  015BC2  D01A               	goto	l921
  8236  015BC4                     
  8237                           ; BSR set to: 0
  8238                           ;Types.c: 363: {
  8239                           ;Types.c: 364: tempVar = *input;
  8240                           
  8241                           ; BSR set to: 0
  8242  015BC4  C060  FFD9         	movff	reverse@input,fsr2l
  8243  015BC8  C061  FFDA         	movff	reverse@input+1,fsr2h
  8244  015BCC  50DF               	movf	indf2,w,c
  8245  015BCE  0100               	movlb	0	; () banked
  8246  015BD0  6F64               	movwf	reverse@tempVar& (0+255),b
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;Types.c: 365: *input++=*iterator;
  8250  015BD2  C065  FFD9         	movff	reverse@iterator,fsr2l
  8251  015BD6  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  8252  015BDA  C060  FFE1         	movff	reverse@input,fsr1l
  8253  015BDE  C061  FFE2         	movff	reverse@input+1,fsr1h
  8254  015BE2  CFDF FFE7          	movff	indf2,indf1
  8255                           
  8256                           ; BSR set to: 0
  8257  015BE6  0100               	movlb	0	; () banked
  8258  015BE8  4B60               	infsnz	reverse@input& (0+255),f,b
  8259  015BEA  2B61               	incf	(reverse@input+1)& (0+255),f,b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;Types.c: 366: *iterator=tempVar;
  8263  015BEC  C065  FFD9         	movff	reverse@iterator,fsr2l
  8264  015BF0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  8265  015BF4  C064  FFDF         	movff	reverse@tempVar,indf2
  8266  015BF8                     l921:
  8267                           
  8268                           ; BSR set to: 0
  8269                           
  8270                           ; BSR set to: 0
  8271  015BF8  0100               	movlb	0	; () banked
  8272  015BFA  0765               	decf	reverse@iterator& (0+255),f,b
  8273  015BFC  A0D8               	btfss	status,0,c
  8274  015BFE  0766               	decf	(reverse@iterator+1)& (0+255),f,b
  8275  015C00  0100               	movlb	0	; () banked
  8276  015C02  5165               	movf	reverse@iterator& (0+255),w,b
  8277  015C04  0100               	movlb	0	; () banked
  8278  015C06  5D60               	subwf	reverse@input& (0+255),w,b
  8279  015C08  0100               	movlb	0	; () banked
  8280  015C0A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
  8281  015C0C  0100               	movlb	0	; () banked
  8282  015C0E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
  8283  015C10  B0D8               	btfsc	status,0,c
  8284  015C12  0012               	return	
  8285  015C14  D7D7               	goto	l922
  8286  015C16                     __end_of_reverse:
  8287                           	opt stack 0
  8288                           tosu	equ	0xFFF
  8289                           tosh	equ	0xFFE
  8290                           tosl	equ	0xFFD
  8291                           pclath	equ	0xFFA
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodl	equ	0xFF3
  8297                           postinc0	equ	0xFEE
  8298                           wreg	equ	0xFE8
  8299                           indf1	equ	0xFE7
  8300                           postdec1	equ	0xFE5
  8301                           fsr1h	equ	0xFE2
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           fsr2h	equ	0xFDA
  8307                           fsr2l	equ	0xFD9
  8308                           status	equ	0xFD8
  8309                           
  8310 ;; *************** function _HMI_SetSegments *****************
  8311 ;; Defined at:
  8312 ;;		line 226 in file "HMI.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  8315 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  in              2    4[BANK0 ] unsigned short 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;Total ram usage:        5 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    8
  8334 ;; This function calls:
  8335 ;;		_ToSegment
  8336 ;; This function is called by:
  8337 ;;		_HMI_SetNumber
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text31
  8342  01492E                     __ptext31:
  8343                           	opt stack 0
  8344  01492E                     _HMI_SetSegments:
  8345                           	opt stack 17
  8346                           
  8347                           ;HMI.c: 228: UINT16 in=0;
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;incstack = 0
  8351  01492E  0E00               	movlw	0
  8352  014930  0100               	movlb	0	; () banked
  8353  014932  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  8354  014934  0E00               	movlw	0
  8355  014936  6F64               	movwf	HMI_SetSegments@in& (0+255),b
  8356                           
  8357                           ;HMI.c: 229: while(*pString)
  8358  014938  D038               	goto	l1202
  8359  01493A                     
  8360                           ; BSR set to: 0
  8361                           ;HMI.c: 230: {
  8362                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  8363                           
  8364                           ; BSR set to: 0
  8365  01493A  0E2D               	movlw	low _HMIBoard
  8366  01493C  0100               	movlb	0	; () banked
  8367  01493E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  8368  014940  6ED9               	movwf	fsr2l,c
  8369  014942  0E01               	movlw	high _HMIBoard
  8370  014944  0100               	movlb	0	; () banked
  8371  014946  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8372  014948  6EDA               	movwf	fsr2h,c
  8373  01494A  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  8374  01494E  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  8375  014952  50E7               	movf	indf1,w,c
  8376  014954  ECC0  F08B         	call	_ToSegment
  8377  014958  6EDF               	movwf	indf2,c
  8378                           
  8379                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  8380  01495A  0E2D               	movlw	low _HMIBoard
  8381  01495C  0100               	movlb	0	; () banked
  8382  01495E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  8383  014960  6ED9               	movwf	fsr2l,c
  8384  014962  0E01               	movlw	high _HMIBoard
  8385  014964  0100               	movlb	0	; () banked
  8386  014966  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8387  014968  6EDA               	movwf	fsr2h,c
  8388  01496A  0E80               	movlw	128
  8389  01496C  18DE               	xorwf	postinc2,w,c
  8390  01496E  A4D8               	btfss	status,2,c
  8391  014970  D00E               	goto	l1201
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;HMI.c: 234: {
  8395                           ;HMI.c: 235: in--;
  8396  014972  0100               	movlb	0	; () banked
  8397  014974  0764               	decf	HMI_SetSegments@in& (0+255),f,b
  8398  014976  A0D8               	btfss	status,0,c
  8399  014978  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  8403  01497A  0E2D               	movlw	low _HMIBoard
  8404  01497C  0100               	movlb	0	; () banked
  8405  01497E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  8406  014980  6ED9               	movwf	fsr2l,c
  8407  014982  0E01               	movlw	high _HMIBoard
  8408  014984  0100               	movlb	0	; () banked
  8409  014986  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8410  014988  6EDA               	movwf	fsr2h,c
  8411  01498A  0E00               	movlw	0
  8412  01498C  8EDB               	bsf	plusw2,7,c
  8413  01498E                     l1201:
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;HMI.c: 237: }
  8417                           ;HMI.c: 239: pString++;
  8418                           
  8419                           ; BSR set to: 0
  8420  01498E  0100               	movlb	0	; () banked
  8421  014990  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  8422  014992  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;HMI.c: 240: in++;
  8426  014994  0100               	movlb	0	; () banked
  8427  014996  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8428  014998  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;HMI.c: 241: if (in>=6)
  8432  01499A  0100               	movlb	0	; () banked
  8433  01499C  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8434  01499E  E11A               	bnz	l12272
  8435  0149A0  0E06               	movlw	6
  8436  0149A2  0100               	movlb	0	; () banked
  8437  0149A4  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  8438  0149A6  B0D8               	btfsc	status,0,c
  8439  0149A8  D015               	goto	l1204
  8440  0149AA                     l1202:
  8441                           
  8442                           ; BSR set to: 0
  8443                           
  8444                           ; BSR set to: 0
  8445                           
  8446                           ; BSR set to: 0
  8447  0149AA  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  8448  0149AE  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  8449  0149B2  50DF               	movf	indf2,w,c
  8450  0149B4  B4D8               	btfsc	status,2,c
  8451  0149B6  D00E               	goto	l1204
  8452  0149B8  D7C0               	goto	l1200
  8453  0149BA                     
  8454                           ; BSR set to: 0
  8455                           ;HMI.c: 245: {
  8456                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  8457                           
  8458                           ; BSR set to: 0
  8459  0149BA  0E2D               	movlw	low _HMIBoard
  8460  0149BC  0100               	movlb	0	; () banked
  8461  0149BE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  8462  0149C0  6ED9               	movwf	fsr2l,c
  8463  0149C2  0E01               	movlw	high _HMIBoard
  8464  0149C4  0100               	movlb	0	; () banked
  8465  0149C6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8466  0149C8  6EDA               	movwf	fsr2h,c
  8467  0149CA  0E00               	movlw	0
  8468  0149CC  6EDF               	movwf	indf2,c
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;HMI.c: 247: in++;
  8472  0149CE  0100               	movlb	0	; () banked
  8473  0149D0  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8474  0149D2  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8475  0149D4                     l1204:
  8476  0149D4                     l12272:
  8477                           
  8478                           ; BSR set to: 0
  8479  0149D4  0100               	movlb	0	; () banked
  8480  0149D6  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8481  0149D8  E106               	bnz	l1207
  8482  0149DA  0E06               	movlw	6
  8483  0149DC  0100               	movlb	0	; () banked
  8484  0149DE  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  8485  0149E0  B0D8               	btfsc	status,0,c
  8486  0149E2  0012               	return	
  8487  0149E4  D7EA               	goto	l1205
  8488  0149E6                     l1207:
  8489                           
  8490                           ; BSR set to: 0
  8491  0149E6  0012               	return		;funcret
  8492  0149E8                     __end_of_HMI_SetSegments:
  8493                           	opt stack 0
  8494                           tosu	equ	0xFFF
  8495                           tosh	equ	0xFFE
  8496                           tosl	equ	0xFFD
  8497                           pclath	equ	0xFFA
  8498                           tblptru	equ	0xFF8
  8499                           tblptrh	equ	0xFF7
  8500                           tblptrl	equ	0xFF6
  8501                           tablat	equ	0xFF5
  8502                           prodl	equ	0xFF3
  8503                           postinc0	equ	0xFEE
  8504                           wreg	equ	0xFE8
  8505                           indf1	equ	0xFE7
  8506                           postdec1	equ	0xFE5
  8507                           fsr1h	equ	0xFE2
  8508                           fsr1l	equ	0xFE1
  8509                           indf2	equ	0xFDF
  8510                           postinc2	equ	0xFDE
  8511                           postdec2	equ	0xFDD
  8512                           plusw2	equ	0xFDB
  8513                           fsr2h	equ	0xFDA
  8514                           fsr2l	equ	0xFD9
  8515                           status	equ	0xFD8
  8516                           
  8517 ;; *************** function _ToSegment *****************
  8518 ;; Defined at:
  8519 ;;		line 284 in file "Library/Types.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;  pCHR            1    wreg     unsigned char 
  8522 ;; Auto vars:     Size  Location     Type
  8523 ;;  pCHR            1    0[BANK0 ] unsigned char 
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  1    wreg      unsigned char 
  8526 ;; Registers used:
  8527 ;;		wreg, status,2, status,0
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;Total ram usage:        1 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    7
  8540 ;; This function calls:
  8541 ;;		Nothing
  8542 ;; This function is called by:
  8543 ;;		_HMI_SetSegments
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           	psect	text32
  8548  011780                     __ptext32:
  8549                           	opt stack 0
  8550  011780                     _ToSegment:
  8551                           	opt stack 17
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;incstack = 0
  8555                           ;ToSegment@pCHR stored from wreg
  8556  011780  0100               	movlb	0	; () banked
  8557  011782  6F60               	movwf	ToSegment@pCHR& (0+255),b
  8558                           
  8559                           ;Types.c: 286: switch(pCHR)
  8560  011784  D07E               	goto	l853
  8561  011786  0E3F               	movlw	63
  8562  011788  0012               	return	
  8563  01178A  0E06               	movlw	6
  8564  01178C  0012               	return	
  8565  01178E  0E5B               	movlw	91
  8566  011790  0012               	return	
  8567  011792  0E4F               	movlw	79
  8568  011794  0012               	return	
  8569  011796  0E66               	movlw	102
  8570  011798  0012               	return	
  8571  01179A  0E6D               	movlw	109
  8572  01179C  0012               	return	
  8573  01179E  0E7D               	movlw	125
  8574  0117A0  0012               	return	
  8575  0117A2  0E07               	movlw	7
  8576  0117A4  0012               	return	
  8577  0117A6  0E7F               	movlw	127
  8578  0117A8  0012               	return	
  8579  0117AA  0E6F               	movlw	111
  8580  0117AC  0012               	return	
  8581  0117AE  0E5F               	movlw	95
  8582  0117B0  0012               	return	
  8583  0117B2  0E7C               	movlw	124
  8584  0117B4  0012               	return	
  8585  0117B6  0E58               	movlw	88
  8586  0117B8  0012               	return	
  8587  0117BA  0E5E               	movlw	94
  8588  0117BC  0012               	return	
  8589  0117BE  0E7B               	movlw	123
  8590  0117C0  0012               	return	
  8591  0117C2  0E71               	movlw	113
  8592  0117C4  0012               	return	
  8593  0117C6  0E6F               	movlw	111
  8594  0117C8  0012               	return	
  8595  0117CA  0E74               	movlw	116
  8596  0117CC  0012               	return	
  8597  0117CE  0E04               	movlw	4
  8598  0117D0  0012               	return	
  8599  0117D2  0E0E               	movlw	14
  8600  0117D4  0012               	return	
  8601  0117D6  0E7A               	movlw	122
  8602  0117D8  0012               	return	
  8603  0117DA  0E06               	movlw	6
  8604  0117DC  0012               	return	
  8605  0117DE  0E14               	movlw	20
  8606  0117E0  0012               	return	
  8607  0117E2  0E54               	movlw	84
  8608  0117E4  0012               	return	
  8609  0117E6  0E5C               	movlw	92
  8610  0117E8  0012               	return	
  8611  0117EA  0E73               	movlw	115
  8612  0117EC  0012               	return	
  8613  0117EE  0E67               	movlw	103
  8614  0117F0  0012               	return	
  8615  0117F2  0E50               	movlw	80
  8616  0117F4  0012               	return	
  8617  0117F6  0E6D               	movlw	109
  8618  0117F8  0012               	return	
  8619  0117FA  0E78               	movlw	120
  8620  0117FC  0012               	return	
  8621  0117FE  0E1C               	movlw	28
  8622  011800  0012               	return	
  8623  011802  0E62               	movlw	98
  8624  011804  0012               	return	
  8625  011806  0E2A               	movlw	42
  8626  011808  0012               	return	
  8627  01180A  0E64               	movlw	100
  8628  01180C  0012               	return	
  8629  01180E  0E6E               	movlw	110
  8630  011810  0012               	return	
  8631  011812  0E5B               	movlw	91
  8632  011814  0012               	return	
  8633  011816  0E77               	movlw	119
  8634  011818  0012               	return	
  8635  01181A  0E7F               	movlw	127
  8636  01181C  0012               	return	
  8637  01181E  0E39               	movlw	57
  8638  011820  0012               	return	
  8639  011822  0E3F               	movlw	63
  8640  011824  0012               	return	
  8641  011826  0E79               	movlw	121
  8642  011828  0012               	return	
  8643  01182A  0E71               	movlw	113
  8644  01182C  0012               	return	
  8645  01182E  0E3D               	movlw	61
  8646  011830  0012               	return	
  8647  011832  0E76               	movlw	118
  8648  011834  0012               	return	
  8649  011836  0E06               	movlw	6
  8650  011838  0012               	return	
  8651  01183A  0E1E               	movlw	30
  8652  01183C  0012               	return	
  8653  01183E  0E57               	movlw	87
  8654  011840  0012               	return	
  8655  011842  0E38               	movlw	56
  8656  011844  0012               	return	
  8657  011846  0E76               	movlw	118
  8658  011848  0012               	return	
  8659  01184A  0E76               	movlw	118
  8660  01184C  0012               	return	
  8661  01184E  0E3F               	movlw	63
  8662  011850  0012               	return	
  8663  011852  0E73               	movlw	115
  8664  011854  0012               	return	
  8665  011856  0E3F               	movlw	63
  8666  011858  0012               	return	
  8667  01185A  0E77               	movlw	119
  8668  01185C  0012               	return	
  8669  01185E  0E6D               	movlw	109
  8670  011860  0012               	return	
  8671  011862  0E31               	movlw	49
  8672  011864  0012               	return	
  8673  011866  0E3E               	movlw	62
  8674  011868  0012               	return	
  8675  01186A  0E3E               	movlw	62
  8676  01186C  0012               	return	
  8677  01186E  0E7E               	movlw	126
  8678  011870  0012               	return	
  8679  011872  0E76               	movlw	118
  8680  011874  0012               	return	
  8681  011876  0E66               	movlw	102
  8682  011878  0012               	return	
  8683  01187A  0E5B               	movlw	91
  8684  01187C  0012               	return	
  8685  01187E  0E80               	movlw	128
  8686  011880  0012               	return	
  8687  011882                     l853:
  8688  011882  0100               	movlb	0	; () banked
  8689  011884  5160               	movf	ToSegment@pCHR& (0+255),w,b
  8690                           
  8691                           ; Switch size 1, requested type "space"
  8692                           ; Number of cases is 63, Range of values is 46 to 122
  8693                           ; switch strategies available:
  8694                           ; Name         Instructions Cycles
  8695                           ; simple_byte          190    96 (average)
  8696                           ;	Chosen strategy is simple_byte
  8697  011886  0A2E               	xorlw	46	; case 46
  8698  011888  B4D8               	btfsc	status,2,c
  8699  01188A  D7F9               	goto	l917
  8700  01188C  0A1E               	xorlw	30	; case 48
  8701  01188E  B4D8               	btfsc	status,2,c
  8702  011890  D77A               	goto	l854
  8703  011892  0A01               	xorlw	1	; case 49
  8704  011894  B4D8               	btfsc	status,2,c
  8705  011896  D779               	goto	l856
  8706  011898  0A03               	xorlw	3	; case 50
  8707  01189A  B4D8               	btfsc	status,2,c
  8708  01189C  D778               	goto	l857
  8709  01189E  0A01               	xorlw	1	; case 51
  8710  0118A0  B4D8               	btfsc	status,2,c
  8711  0118A2  D777               	goto	l858
  8712  0118A4  0A07               	xorlw	7	; case 52
  8713  0118A6  B4D8               	btfsc	status,2,c
  8714  0118A8  D776               	goto	l859
  8715  0118AA  0A01               	xorlw	1	; case 53
  8716  0118AC  B4D8               	btfsc	status,2,c
  8717  0118AE  D775               	goto	l860
  8718  0118B0  0A03               	xorlw	3	; case 54
  8719  0118B2  B4D8               	btfsc	status,2,c
  8720  0118B4  D774               	goto	l861
  8721  0118B6  0A01               	xorlw	1	; case 55
  8722  0118B8  B4D8               	btfsc	status,2,c
  8723  0118BA  D773               	goto	l862
  8724  0118BC  0A0F               	xorlw	15	; case 56
  8725  0118BE  B4D8               	btfsc	status,2,c
  8726  0118C0  D772               	goto	l863
  8727  0118C2  0A01               	xorlw	1	; case 57
  8728  0118C4  B4D8               	btfsc	status,2,c
  8729  0118C6  D771               	goto	l864
  8730  0118C8  0A78               	xorlw	120	; case 65
  8731  0118CA  B4D8               	btfsc	status,2,c
  8732  0118CC  D7A4               	goto	l891
  8733  0118CE  0A03               	xorlw	3	; case 66
  8734  0118D0  B4D8               	btfsc	status,2,c
  8735  0118D2  D7A3               	goto	l892
  8736  0118D4  0A01               	xorlw	1	; case 67
  8737  0118D6  B4D8               	btfsc	status,2,c
  8738  0118D8  D7A2               	goto	l893
  8739  0118DA  0A07               	xorlw	7	; case 68
  8740  0118DC  B4D8               	btfsc	status,2,c
  8741  0118DE  D7A1               	goto	l894
  8742  0118E0  0A01               	xorlw	1	; case 69
  8743  0118E2  B4D8               	btfsc	status,2,c
  8744  0118E4  D7A0               	goto	l895
  8745  0118E6  0A03               	xorlw	3	; case 70
  8746  0118E8  B4D8               	btfsc	status,2,c
  8747  0118EA  D79F               	goto	l896
  8748  0118EC  0A01               	xorlw	1	; case 71
  8749  0118EE  B4D8               	btfsc	status,2,c
  8750  0118F0  D79E               	goto	l897
  8751  0118F2  0A0F               	xorlw	15	; case 72
  8752  0118F4  B4D8               	btfsc	status,2,c
  8753  0118F6  D79D               	goto	l898
  8754  0118F8  0A01               	xorlw	1	; case 73
  8755  0118FA  B4D8               	btfsc	status,2,c
  8756  0118FC  D79C               	goto	l899
  8757  0118FE  0A03               	xorlw	3	; case 74
  8758  011900  B4D8               	btfsc	status,2,c
  8759  011902  D79B               	goto	l900
  8760  011904  0A01               	xorlw	1	; case 75
  8761  011906  B4D8               	btfsc	status,2,c
  8762  011908  D79A               	goto	l901
  8763  01190A  0A07               	xorlw	7	; case 76
  8764  01190C  B4D8               	btfsc	status,2,c
  8765  01190E  D799               	goto	l902
  8766  011910  0A01               	xorlw	1	; case 77
  8767  011912  B4D8               	btfsc	status,2,c
  8768  011914  D798               	goto	l903
  8769  011916  0A03               	xorlw	3	; case 78
  8770  011918  B4D8               	btfsc	status,2,c
  8771  01191A  D797               	goto	l904
  8772  01191C  0A01               	xorlw	1	; case 79
  8773  01191E  B4D8               	btfsc	status,2,c
  8774  011920  D796               	goto	l905
  8775  011922  0A1F               	xorlw	31	; case 80
  8776  011924  B4D8               	btfsc	status,2,c
  8777  011926  D795               	goto	l906
  8778  011928  0A01               	xorlw	1	; case 81
  8779  01192A  B4D8               	btfsc	status,2,c
  8780  01192C  D794               	goto	l907
  8781  01192E  0A03               	xorlw	3	; case 82
  8782  011930  B4D8               	btfsc	status,2,c
  8783  011932  D793               	goto	l908
  8784  011934  0A01               	xorlw	1	; case 83
  8785  011936  B4D8               	btfsc	status,2,c
  8786  011938  D792               	goto	l909
  8787  01193A  0A07               	xorlw	7	; case 84
  8788  01193C  B4D8               	btfsc	status,2,c
  8789  01193E  D791               	goto	l910
  8790  011940  0A01               	xorlw	1	; case 85
  8791  011942  B4D8               	btfsc	status,2,c
  8792  011944  D790               	goto	l911
  8793  011946  0A03               	xorlw	3	; case 86
  8794  011948  B4D8               	btfsc	status,2,c
  8795  01194A  D78F               	goto	l912
  8796  01194C  0A01               	xorlw	1	; case 87
  8797  01194E  B4D8               	btfsc	status,2,c
  8798  011950  D78E               	goto	l913
  8799  011952  0A0F               	xorlw	15	; case 88
  8800  011954  B4D8               	btfsc	status,2,c
  8801  011956  D78D               	goto	l914
  8802  011958  0A01               	xorlw	1	; case 89
  8803  01195A  B4D8               	btfsc	status,2,c
  8804  01195C  D78C               	goto	l915
  8805  01195E  0A03               	xorlw	3	; case 90
  8806  011960  B4D8               	btfsc	status,2,c
  8807  011962  D78B               	goto	l916
  8808  011964  0A3B               	xorlw	59	; case 97
  8809  011966  B4D8               	btfsc	status,2,c
  8810  011968  D722               	goto	l865
  8811  01196A  0A03               	xorlw	3	; case 98
  8812  01196C  B4D8               	btfsc	status,2,c
  8813  01196E  D721               	goto	l866
  8814  011970  0A01               	xorlw	1	; case 99
  8815  011972  B4D8               	btfsc	status,2,c
  8816  011974  D720               	goto	l867
  8817  011976  0A07               	xorlw	7	; case 100
  8818  011978  B4D8               	btfsc	status,2,c
  8819  01197A  D71F               	goto	l868
  8820  01197C  0A01               	xorlw	1	; case 101
  8821  01197E  B4D8               	btfsc	status,2,c
  8822  011980  D71E               	goto	l869
  8823  011982  0A03               	xorlw	3	; case 102
  8824  011984  B4D8               	btfsc	status,2,c
  8825  011986  D71D               	goto	l870
  8826  011988  0A01               	xorlw	1	; case 103
  8827  01198A  B4D8               	btfsc	status,2,c
  8828  01198C  D71C               	goto	l871
  8829  01198E  0A0F               	xorlw	15	; case 104
  8830  011990  B4D8               	btfsc	status,2,c
  8831  011992  D71B               	goto	l872
  8832  011994  0A01               	xorlw	1	; case 105
  8833  011996  B4D8               	btfsc	status,2,c
  8834  011998  D71A               	goto	l873
  8835  01199A  0A03               	xorlw	3	; case 106
  8836  01199C  B4D8               	btfsc	status,2,c
  8837  01199E  D719               	goto	l874
  8838  0119A0  0A01               	xorlw	1	; case 107
  8839  0119A2  B4D8               	btfsc	status,2,c
  8840  0119A4  D718               	goto	l875
  8841  0119A6  0A07               	xorlw	7	; case 108
  8842  0119A8  B4D8               	btfsc	status,2,c
  8843  0119AA  D717               	goto	l876
  8844  0119AC  0A01               	xorlw	1	; case 109
  8845  0119AE  B4D8               	btfsc	status,2,c
  8846  0119B0  D716               	goto	l877
  8847  0119B2  0A03               	xorlw	3	; case 110
  8848  0119B4  B4D8               	btfsc	status,2,c
  8849  0119B6  D715               	goto	l878
  8850  0119B8  0A01               	xorlw	1	; case 111
  8851  0119BA  B4D8               	btfsc	status,2,c
  8852  0119BC  D714               	goto	l879
  8853  0119BE  0A1F               	xorlw	31	; case 112
  8854  0119C0  B4D8               	btfsc	status,2,c
  8855  0119C2  D713               	goto	l880
  8856  0119C4  0A01               	xorlw	1	; case 113
  8857  0119C6  B4D8               	btfsc	status,2,c
  8858  0119C8  D712               	goto	l881
  8859  0119CA  0A03               	xorlw	3	; case 114
  8860  0119CC  B4D8               	btfsc	status,2,c
  8861  0119CE  D711               	goto	l882
  8862  0119D0  0A01               	xorlw	1	; case 115
  8863  0119D2  B4D8               	btfsc	status,2,c
  8864  0119D4  D710               	goto	l883
  8865  0119D6  0A07               	xorlw	7	; case 116
  8866  0119D8  B4D8               	btfsc	status,2,c
  8867  0119DA  D70F               	goto	l884
  8868  0119DC  0A01               	xorlw	1	; case 117
  8869  0119DE  B4D8               	btfsc	status,2,c
  8870  0119E0  D70E               	goto	l885
  8871  0119E2  0A03               	xorlw	3	; case 118
  8872  0119E4  B4D8               	btfsc	status,2,c
  8873  0119E6  D70D               	goto	l886
  8874  0119E8  0A01               	xorlw	1	; case 119
  8875  0119EA  B4D8               	btfsc	status,2,c
  8876  0119EC  D70C               	goto	l887
  8877  0119EE  0A0F               	xorlw	15	; case 120
  8878  0119F0  B4D8               	btfsc	status,2,c
  8879  0119F2  D70B               	goto	l888
  8880  0119F4  0A01               	xorlw	1	; case 121
  8881  0119F6  B4D8               	btfsc	status,2,c
  8882  0119F8  D70A               	goto	l889
  8883  0119FA  0A03               	xorlw	3	; case 122
  8884  0119FC  B4D8               	btfsc	status,2,c
  8885  0119FE  D709               	goto	l890
  8886                           
  8887                           ;Types.c: 354: return 0;
  8888                           
  8889                           ; BSR set to: 0
  8890  011A00  0E00               	movlw	0
  8891  011A02  0012               	return	
  8892  011A04                     __end_of_ToSegment:
  8893                           	opt stack 0
  8894                           tosu	equ	0xFFF
  8895                           tosh	equ	0xFFE
  8896                           tosl	equ	0xFFD
  8897                           pclath	equ	0xFFA
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodl	equ	0xFF3
  8903                           postinc0	equ	0xFEE
  8904                           wreg	equ	0xFE8
  8905                           indf1	equ	0xFE7
  8906                           postdec1	equ	0xFE5
  8907                           fsr1h	equ	0xFE2
  8908                           fsr1l	equ	0xFE1
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           postdec2	equ	0xFDD
  8912                           plusw2	equ	0xFDB
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _HMI_SetButton *****************
  8918 ;; Defined at:
  8919 ;;		line 186 in file "HMI.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  pValue          1    wreg     unsigned char 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  pValue          1    6[BANK0 ] unsigned char 
  8924 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  8925 ;;  v               1    7[BANK0 ] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8936 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;Total ram usage:        8 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    7
  8942 ;; This function calls:
  8943 ;;		Nothing
  8944 ;; This function is called by:
  8945 ;;		_Event_TestButton
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           	psect	text33
  8950  0153C4                     __ptext33:
  8951                           	opt stack 0
  8952  0153C4                     _HMI_SetButton:
  8953                           	opt stack 19
  8954                           
  8955                           ;incstack = 0
  8956                           ;HMI_SetButton@pValue stored from wreg
  8957  0153C4  0100               	movlb	0	; () banked
  8958  0153C6  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
  8959                           
  8960                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  8961  0153C8  0EC8               	movlw	low HMI_SetButton@F7213
  8962  0153CA  6EF6               	movwf	tblptrl,c
  8963  0153CC                     	if	1	;There is more than 1 active tblptr byte
  8964  0153CC  0EFC               	movlw	high HMI_SetButton@F7213
  8965  0153CE  6EF7               	movwf	tblptrh,c
  8966  0153D0                     	endif
  8967  0153D0                     	if	1	;There are 3 active tblptr bytes
  8968  0153D0  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
  8969  0153D2  6EF8               	movwf	tblptru,c
  8970  0153D4                     	endif
  8971  0153D4  0009               	tblrd		*+
  8972  0153D6  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
  8973  0153DA  0009               	tblrd		*+
  8974  0153DC  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
  8975  0153E0  0009               	tblrd		*+
  8976  0153E2  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
  8977  0153E6  000A               	tblrd		*-
  8978  0153E8  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
  8979                           
  8980                           ;HMI.c: 189: UINT8 v = 0b00010001;
  8981  0153EC  0E11               	movlw	17
  8982  0153EE  0100               	movlb	0	; () banked
  8983  0153F0  6F67               	movwf	HMI_SetButton@v& (0+255),b
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;HMI.c: 190: pValue &= 3;
  8987  0153F2  0E03               	movlw	3
  8988  0153F4  0100               	movlb	0	; () banked
  8989  0153F6  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;HMI.c: 191: v = v << reindex[pValue];
  8993  0153F8  0100               	movlb	0	; () banked
  8994  0153FA  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
  8995  0153FC  0D01               	mullw	1
  8996  0153FE  0E62               	movlw	low HMI_SetButton@reindex
  8997  015400  24F3               	addwf	prodl,w,c
  8998  015402  6ED9               	movwf	fsr2l,c
  8999  015404  0E00               	movlw	high HMI_SetButton@reindex
  9000  015406  20F4               	addwfc	prodh,w,c
  9001  015408  6EDA               	movwf	fsr2h,c
  9002  01540A  50DF               	movf	indf2,w,c
  9003  01540C  0100               	movlb	0	; () banked
  9004  01540E  6F60               	movwf	??_HMI_SetButton& (0+255),b
  9005  015410  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  9006  015414  0100               	movlb	0	; () banked
  9007  015416  2B60               	incf	??_HMI_SetButton& (0+255),f,b
  9008  015418  D003               	goto	u9744
  9009  01541A                     u9745:
  9010  01541A  0100               	movlb	0	; () banked
  9011  01541C  90D8               	bcf	status,0,c
  9012  01541E  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  9013  015420                     u9744:
  9014  015420  0100               	movlb	0	; () banked
  9015  015422  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
  9016  015424  D7FA               	goto	u9745
  9017  015426  0100               	movlb	0	; () banked
  9018  015428  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  9019  01542A  0100               	movlb	0	; () banked
  9020  01542C  6F67               	movwf	HMI_SetButton@v& (0+255),b
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;HMI.c: 192: v = v >> 4;
  9024  01542E  0100               	movlb	0	; () banked
  9025  015430  3967               	swapf	HMI_SetButton@v& (0+255),w,b
  9026  015432  0B0F               	andlw	15
  9027  015434  0100               	movlb	0	; () banked
  9028  015436  6F67               	movwf	HMI_SetButton@v& (0+255),b
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;HMI.c: 193: v = v & 0x0F;
  9032  015438  0100               	movlb	0	; () banked
  9033  01543A  5167               	movf	HMI_SetButton@v& (0+255),w,b
  9034  01543C  0B0F               	andlw	15
  9035  01543E  0100               	movlb	0	; () banked
  9036  015440  6F67               	movwf	HMI_SetButton@v& (0+255),b
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;HMI.c: 194: HMIBoard.pButton = v;
  9040  015442  0101               	movlb	1	; () banked
  9041  015444  5133               	movf	(_HMIBoard+6)& (0+255),w,b
  9042  015446  0100               	movlb	0	; () banked
  9043  015448  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  9044  01544A  0BF0               	andlw	-16
  9045  01544C  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  9046  01544E  0101               	movlb	1	; () banked
  9047  015450  6F33               	movwf	(_HMIBoard+6)& (0+255),b
  9048                           
  9049                           ; BSR set to: 1
  9050  015452  0012               	return		;funcret
  9051  015454                     __end_of_HMI_SetButton:
  9052                           	opt stack 0
  9053                           tosu	equ	0xFFF
  9054                           tosh	equ	0xFFE
  9055                           tosl	equ	0xFFD
  9056                           pclath	equ	0xFFA
  9057                           tblptru	equ	0xFF8
  9058                           tblptrh	equ	0xFF7
  9059                           tblptrl	equ	0xFF6
  9060                           tablat	equ	0xFF5
  9061                           prodh	equ	0xFF4
  9062                           prodl	equ	0xFF3
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           indf1	equ	0xFE7
  9066                           postdec1	equ	0xFE5
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           plusw2	equ	0xFDB
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function _HMI_SetBar *****************
  9078 ;; Defined at:
  9079 ;;		line 205 in file "HMI.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  pValue          1    wreg     unsigned char 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  pValue          1    0[BANK0 ] unsigned char 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      void 
  9086 ;; Registers used:
  9087 ;;		wreg
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;Total ram usage:        1 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    7
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_Event_DIPSwitch
  9104 ;;		_Event_HMI_DIPSwitch
  9105 ;;		_Event_HMI_LeftButton
  9106 ;;		_Event_HMI_RightButton
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text34
  9111  016CF4                     __ptext34:
  9112                           	opt stack 0
  9113  016CF4                     _HMI_SetBar:
  9114                           	opt stack 19
  9115                           
  9116                           ; BSR set to: 1
  9117                           ;incstack = 0
  9118                           ;HMI_SetBar@pValue stored from wreg
  9119  016CF4  0100               	movlb	0	; () banked
  9120  016CF6  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
  9121                           
  9122                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9123  016CF8  C060  F134         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9124  016CFC  0012               	return		;funcret
  9125  016CFE                     __end_of_HMI_SetBar:
  9126                           	opt stack 0
  9127                           tosu	equ	0xFFF
  9128                           tosh	equ	0xFFE
  9129                           tosl	equ	0xFFD
  9130                           pclath	equ	0xFFA
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           postinc0	equ	0xFEE
  9138                           wreg	equ	0xFE8
  9139                           indf1	equ	0xFE7
  9140                           postdec1	equ	0xFE5
  9141                           fsr1h	equ	0xFE2
  9142                           fsr1l	equ	0xFE1
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           plusw2	equ	0xFDB
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151 ;; *************** function _HMI_GetBar *****************
  9152 ;; Defined at:
  9153 ;;		line 209 in file "HMI.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;		None
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;		None
  9158 ;; Return value:  Size  Location     Type
  9159 ;;                  1    wreg      unsigned char 
  9160 ;; Registers used:
  9161 ;;		wreg, status,2
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;Total ram usage:        0 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    7
  9174 ;; This function calls:
  9175 ;;		Nothing
  9176 ;; This function is called by:
  9177 ;;		_Event_DIPSwitch
  9178 ;;		_Event_HMI_DIPSwitch
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           	psect	text35
  9183  016D22                     __ptext35:
  9184                           	opt stack 0
  9185  016D22                     _HMI_GetBar:
  9186                           	opt stack 19
  9187                           
  9188                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9189                           
  9190                           ;incstack = 0
  9191  016D22  0101               	movlb	1	; () banked
  9192  016D24  5134               	movf	(_HMIBoard+7)& (0+255),w,b
  9193  016D26  0012               	return	
  9194  016D28                     __end_of_HMI_GetBar:
  9195                           	opt stack 0
  9196                           tosu	equ	0xFFF
  9197                           tosh	equ	0xFFE
  9198                           tosl	equ	0xFFD
  9199                           pclath	equ	0xFFA
  9200                           tblptru	equ	0xFF8
  9201                           tblptrh	equ	0xFF7
  9202                           tblptrl	equ	0xFF6
  9203                           tablat	equ	0xFF5
  9204                           prodh	equ	0xFF4
  9205                           prodl	equ	0xFF3
  9206                           postinc0	equ	0xFEE
  9207                           wreg	equ	0xFE8
  9208                           indf1	equ	0xFE7
  9209                           postdec1	equ	0xFE5
  9210                           fsr1h	equ	0xFE2
  9211                           fsr1l	equ	0xFE1
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           postdec2	equ	0xFDD
  9215                           plusw2	equ	0xFDB
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function _FunctADC *****************
  9221 ;; Defined at:
  9222 ;;		line 57 in file "Functions.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    9
  9243 ;; This function calls:
  9244 ;;		_ADC_Start
  9245 ;; This function is called by:
  9246 ;;		_inputVar
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text36
  9251  016C5A                     __ptext36:
  9252                           	opt stack 0
  9253  016C5A                     _FunctADC:
  9254                           	opt stack 20
  9255                           
  9256                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
  9257                           
  9258                           ; BSR set to: 1
  9259                           ;incstack = 0
  9260  016C5A  0EDF               	movlw	low _ADC_AN0
  9261  016C5C  0100               	movlb	0	; () banked
  9262  016C5E  6F62               	movwf	ADC_Start@pInput& (0+255),b
  9263  016C60  0E01               	movlw	high _ADC_AN0
  9264  016C62  0100               	movlb	0	; () banked
  9265  016C64  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  9266  016C66  EC40  F0AB         	call	_ADC_Start	;wreg free
  9267  016C6A  0012               	return		;funcret
  9268  016C6C                     __end_of_FunctADC:
  9269                           	opt stack 0
  9270                           tosu	equ	0xFFF
  9271                           tosh	equ	0xFFE
  9272                           tosl	equ	0xFFD
  9273                           pclath	equ	0xFFA
  9274                           tblptru	equ	0xFF8
  9275                           tblptrh	equ	0xFF7
  9276                           tblptrl	equ	0xFF6
  9277                           tablat	equ	0xFF5
  9278                           prodh	equ	0xFF4
  9279                           prodl	equ	0xFF3
  9280                           postinc0	equ	0xFEE
  9281                           wreg	equ	0xFE8
  9282                           indf1	equ	0xFE7
  9283                           postdec1	equ	0xFE5
  9284                           fsr1h	equ	0xFE2
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           plusw2	equ	0xFDB
  9290                           fsr2h	equ	0xFDA
  9291                           fsr2l	equ	0xFD9
  9292                           status	equ	0xFD8
  9293                           
  9294 ;; *************** function _ADC_Start *****************
  9295 ;; Defined at:
  9296 ;;		line 114 in file "Library/ADC.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;  pInput          2    2[BANK0 ] PTR struct ADC
  9299 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
  9300 ;;		 -> NULL(0), 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;		None
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  1    wreg      void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;Total ram usage:        4 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    8
  9319 ;; This function calls:
  9320 ;;		_ADC_Off
  9321 ;;		_ADC_On
  9322 ;;		_ADC_SetChannel
  9323 ;; This function is called by:
  9324 ;;		_FunctADC
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	text37
  9329  015680                     __ptext37:
  9330                           	opt stack 0
  9331  015680                     _ADC_Start:
  9332                           	opt stack 20
  9333                           
  9334                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
  9335                           
  9336                           ;incstack = 0
  9337  015680  B2C2               	btfsc	4034,1,c	;volatile
  9338  015682  0012               	return	
  9339  015684                     
  9340                           ;ADC.c: 128: {
  9341                           ;ADC.c: 129: ADC_Off();
  9342                           
  9343                           ;ADC.c: 127: for(;;)
  9344  015684  EC8D  F0B6         	call	_ADC_Off	;wreg free
  9345                           
  9346                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
  9347  015688  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
  9348  01568C  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
  9349  015690  50DF               	movf	indf2,w,c
  9350  015692  ECB4  F0B5         	call	_ADC_SetChannel
  9351                           
  9352                           ;ADC.c: 131: ADC_On();
  9353  015696  EC9A  F0B6         	call	_ADC_On	;wreg free
  9354                           
  9355                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
  9356  01569A  82C2               	bsf	4034,1,c	;volatile
  9357  01569C  B2C2               	btfsc	4034,1,c	;volatile
  9358  01569E  D7FE               	goto	l1280
  9359                           
  9360                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
  9361  0156A0  50C3               	movf	4035,w,c	;volatile
  9362  0156A2  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
  9363  0156A6  0100               	movlb	0	; () banked
  9364  0156A8  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
  9365  0156AA  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
  9366  0156AE  0100               	movlb	0	; () banked
  9367  0156B0  6B64               	clrf	??_ADC_Start& (0+255),b
  9368  0156B2  0100               	movlb	0	; () banked
  9369  0156B4  1364               	iorwf	??_ADC_Start& (0+255),f,b
  9370  0156B6  0E00               	movlw	0
  9371  0156B8  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
  9372  0156BA  0100               	movlb	0	; () banked
  9373  0156BC  EE20 F001          	lfsr	2,1
  9374  0156C0  5162               	movf	ADC_Start@pInput& (0+255),w,b
  9375  0156C2  26D9               	addwf	fsr2l,f,c
  9376  0156C4  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  9377  0156C6  22DA               	addwfc	fsr2h,f,c
  9378  0156C8  C064  FFDE         	movff	??_ADC_Start,postinc2
  9379  0156CC  C065  FFDD         	movff	??_ADC_Start+1,postdec2
  9380                           
  9381                           ;ADC.c: 141: if (pInput->mNext == 0)
  9382  0156D0  0100               	movlb	0	; () banked
  9383  0156D2  EE20 F003          	lfsr	2,3
  9384  0156D6  5162               	movf	ADC_Start@pInput& (0+255),w,b
  9385  0156D8  26D9               	addwf	fsr2l,f,c
  9386  0156DA  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  9387  0156DC  22DA               	addwfc	fsr2h,f,c
  9388  0156DE  50DE               	movf	postinc2,w,c
  9389  0156E0  10DE               	iorwf	postinc2,w,c
  9390  0156E2  B4D8               	btfsc	status,2,c
  9391  0156E4  D00C               	goto	l1283
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;ADC.c: 145: pInput = pInput->mNext;
  9395                           
  9396                           ; BSR set to: 0
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;ADC.c: 142: break;
  9400  0156E6  0100               	movlb	0	; () banked
  9401  0156E8  EE20 F003          	lfsr	2,3
  9402  0156EC  5162               	movf	ADC_Start@pInput& (0+255),w,b
  9403  0156EE  26D9               	addwf	fsr2l,f,c
  9404  0156F0  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  9405  0156F2  22DA               	addwfc	fsr2h,f,c
  9406  0156F4  CFDE F062          	movff	postinc2,ADC_Start@pInput
  9407  0156F8  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
  9408                           
  9409                           ;ADC.c: 146: }
  9410  0156FC  D7C3               	goto	l1276
  9411  0156FE                     l1283:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;ADC.c: 147: ADC_Off();
  9415                           
  9416                           ; BSR set to: 0
  9417  0156FE  EC8D  F0B6         	call	_ADC_Off	;wreg free
  9418  015702  0012               	return		;funcret
  9419  015704                     __end_of_ADC_Start:
  9420                           	opt stack 0
  9421                           tosu	equ	0xFFF
  9422                           tosh	equ	0xFFE
  9423                           tosl	equ	0xFFD
  9424                           pclath	equ	0xFFA
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           postinc0	equ	0xFEE
  9432                           wreg	equ	0xFE8
  9433                           indf1	equ	0xFE7
  9434                           postdec1	equ	0xFE5
  9435                           fsr1h	equ	0xFE2
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           postdec2	equ	0xFDD
  9440                           plusw2	equ	0xFDB
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _initialise *****************
  9446 ;; Defined at:
  9447 ;;		line 63 in file "main.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:   17
  9468 ;; This function calls:
  9469 ;;		_Console_Init
  9470 ;;		_FunctInitADC
  9471 ;;		_FunctInitButton
  9472 ;;		_HMI_Init
  9473 ;;		_ISR_Enable
  9474 ;;		_LCD_Init
  9475 ;;		_MXK_BlockSwitchTo
  9476 ;;		_MXK_Dequeue
  9477 ;;		_MXK_Init
  9478 ;;		_MXK_Release
  9479 ;;		_Motor_Init
  9480 ;; This function is called by:
  9481 ;;		_main
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           	psect	text38
  9486  015CEA                     __ptext38:
  9487                           	opt stack 0
  9488  015CEA                     _initialise:
  9489                           	opt stack 13
  9490                           
  9491                           ;main.c: 65: MXK_Init();
  9492                           
  9493                           ;incstack = 0
  9494  015CEA  ECCE  F098         	call	_MXK_Init	;wreg free
  9495                           
  9496                           ;main.c: 68: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  9497  015CEE  0E01               	movlw	1
  9498  015CF0  ECE9  F0B2         	call	_MXK_BlockSwitchTo
  9499  015CF4  0900               	iorlw	0
  9500  015CF6  B4D8               	btfsc	status,2,c
  9501  015CF8  D00C               	goto	l2042
  9502                           
  9503                           ;main.c: 69: HMI_Init();
  9504  015CFA  EC4A  F091         	call	_HMI_Init	;wreg free
  9505                           
  9506                           ;main.c: 70: LCD_Init();
  9507  015CFE  EC8E  F099         	call	_LCD_Init	;wreg free
  9508                           
  9509                           ;main.c: 71: Console_Init();
  9510  015D02  ECB6  F0AA         	call	_Console_Init	;wreg free
  9511                           
  9512                           ;main.c: 72: if (MXK_Release())
  9513  015D06  ECA6  F0B5         	call	_MXK_Release	;wreg free
  9514  015D0A  0900               	iorlw	0
  9515  015D0C  A4D8               	btfss	status,2,c
  9516                           
  9517                           ;main.c: 73: MXK_Dequeue();
  9518  015D0E  ECCA  F0B2         	call	_MXK_Dequeue	;wreg free
  9519  015D12                     l2042:
  9520                           
  9521                           ;main.c: 74: }
  9522                           ;main.c: 77: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  9523  015D12  0E08               	movlw	8
  9524  015D14  ECE9  F0B2         	call	_MXK_BlockSwitchTo
  9525  015D18  0900               	iorlw	0
  9526  015D1A  B4D8               	btfsc	status,2,c
  9527  015D1C  D013               	goto	l2044
  9528                           
  9529                           ;main.c: 78: Motor_Init(&Stepper, 0b1000);
  9530  015D1E  0ECA               	movlw	low _Stepper
  9531  015D20  0100               	movlb	0	; () banked
  9532  015D22  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
  9533  015D24  0E01               	movlw	high _Stepper
  9534  015D26  0100               	movlb	0	; () banked
  9535  015D28  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  9536  015D2A  0E00               	movlw	0
  9537  015D2C  0100               	movlb	0	; () banked
  9538  015D2E  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  9539  015D30  0E08               	movlw	8
  9540  015D32  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
  9541  015D34  EC0F  F0A1         	call	_Motor_Init	;wreg free
  9542                           
  9543                           ;main.c: 79: if (MXK_Release())
  9544  015D38  ECA6  F0B5         	call	_MXK_Release	;wreg free
  9545  015D3C  0900               	iorlw	0
  9546  015D3E  A4D8               	btfss	status,2,c
  9547                           
  9548                           ;main.c: 80: MXK_Dequeue();
  9549  015D40  ECCA  F0B2         	call	_MXK_Dequeue	;wreg free
  9550  015D44                     l2044:
  9551                           
  9552                           ;main.c: 81: }
  9553                           ;main.c: 84: ISR_Enable();
  9554  015D44  EC7F  F0B6         	call	_ISR_Enable	;wreg free
  9555                           
  9556                           ;main.c: 87: FunctInitADC();
  9557  015D48  EC04  F0A6         	call	_FunctInitADC	;wreg free
  9558                           
  9559                           ;main.c: 90: FunctInitButton();
  9560  015D4C  ECA6  F0A8         	call	_FunctInitButton	;wreg free
  9561  015D50  0012               	return		;funcret
  9562  015D52                     __end_of_initialise:
  9563                           	opt stack 0
  9564                           tosu	equ	0xFFF
  9565                           tosh	equ	0xFFE
  9566                           tosl	equ	0xFFD
  9567                           pclath	equ	0xFFA
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           indf1	equ	0xFE7
  9577                           postdec1	equ	0xFE5
  9578                           fsr1h	equ	0xFE2
  9579                           fsr1l	equ	0xFE1
  9580                           indf2	equ	0xFDF
  9581                           postinc2	equ	0xFDE
  9582                           postdec2	equ	0xFDD
  9583                           plusw2	equ	0xFDB
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _Motor_Init *****************
  9589 ;; Defined at:
  9590 ;;		line 26 in file "Library/Motor.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  9593 ;;		 -> Stepper(6), 
  9594 ;;  pAddress        2   47[BANK0 ] unsigned short 
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9606 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;Total ram usage:        4 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:   12
  9613 ;; This function calls:
  9614 ;;		_Port_SetPin
  9615 ;;		_Port_SetPinType
  9616 ;;		_Timer0_Init
  9617 ;; This function is called by:
  9618 ;;		_initialise
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           	psect	text39
  9623  01421E                     __ptext39:
  9624                           	opt stack 0
  9625  01421E                     _Motor_Init:
  9626                           	opt stack 17
  9627                           
  9628                           ;Motor.c: 28: pMotor->mDelta = 0;
  9629                           
  9630                           ;incstack = 0
  9631  01421E  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
  9632  014222  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  9633  014226  0E00               	movlw	0
  9634  014228  6EDE               	movwf	postinc2,c
  9635  01422A  0E00               	movlw	0
  9636  01422C  6EDD               	movwf	postdec2,c
  9637                           
  9638                           ;Motor.c: 29: pMotor->mFrequency = 0;
  9639  01422E  0100               	movlb	0	; () banked
  9640  014230  EE20 F002          	lfsr	2,2
  9641  014234  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9642  014236  26D9               	addwf	fsr2l,f,c
  9643  014238  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9644  01423A  22DA               	addwfc	fsr2h,f,c
  9645  01423C  0E00               	movlw	0
  9646  01423E  6EDE               	movwf	postinc2,c
  9647  014240  0E00               	movlw	0
  9648  014242  6EDD               	movwf	postdec2,c
  9649                           
  9650                           ; BSR set to: 0
  9651                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  9652  014244  0100               	movlb	0	; () banked
  9653  014246  EE20 F004          	lfsr	2,4
  9654  01424A  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9655  01424C  26D9               	addwf	fsr2l,f,c
  9656  01424E  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9657  014250  22DA               	addwfc	fsr2h,f,c
  9658  014252  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
  9659  014256  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  9663  01425A  0E9B               	movlw	low _PortE
  9664  01425C  0100               	movlb	0	; () banked
  9665  01425E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9666  014260  0E01               	movlw	high _PortE
  9667  014262  0100               	movlb	0	; () banked
  9668  014264  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9669  014266  0E00               	movlw	0
  9670  014268  0100               	movlb	0	; () banked
  9671  01426A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9672  01426C  0E03               	movlw	3
  9673  01426E  0100               	movlb	0	; () banked
  9674  014270  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9675  014272  EC2E  F093         	call	_Port_SetPinType	;wreg free
  9676                           
  9677                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  9678  014276  0E9B               	movlw	low _PortE
  9679  014278  0100               	movlb	0	; () banked
  9680  01427A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9681  01427C  0E01               	movlw	high _PortE
  9682  01427E  0100               	movlb	0	; () banked
  9683  014280  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9684  014282  0E01               	movlw	1
  9685  014284  0100               	movlb	0	; () banked
  9686  014286  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9687  014288  0E03               	movlw	3
  9688  01428A  0100               	movlb	0	; () banked
  9689  01428C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9690  01428E  EC2E  F093         	call	_Port_SetPinType	;wreg free
  9691                           
  9692                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  9693  014292  0E9B               	movlw	low _PortE
  9694  014294  0100               	movlb	0	; () banked
  9695  014296  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9696  014298  0E01               	movlw	high _PortE
  9697  01429A  0100               	movlb	0	; () banked
  9698  01429C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9699  01429E  0E00               	movlw	0
  9700  0142A0  0100               	movlb	0	; () banked
  9701  0142A2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9702  0142A4  0E00               	movlw	0
  9703  0142A6  0100               	movlb	0	; () banked
  9704  0142A8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9705  0142AA  EC17  F0A3         	call	_Port_SetPin	;wreg free
  9706                           
  9707                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  9708  0142AE  0E9B               	movlw	low _PortE
  9709  0142B0  0100               	movlb	0	; () banked
  9710  0142B2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9711  0142B4  0E01               	movlw	high _PortE
  9712  0142B6  0100               	movlb	0	; () banked
  9713  0142B8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9714  0142BA  0E01               	movlw	1
  9715  0142BC  0100               	movlb	0	; () banked
  9716  0142BE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9717  0142C0  0E00               	movlw	0
  9718  0142C2  0100               	movlb	0	; () banked
  9719  0142C4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9720  0142C6  EC17  F0A3         	call	_Port_SetPin	;wreg free
  9721                           
  9722                           ;Motor.c: 38: lStepFunction = Motor_Step;
  9723  0142CA  0EDC               	movlw	low _Motor_Step
  9724  0142CC  0100               	movlb	0	; () banked
  9725  0142CE  6FDD               	movwf	_lStepFunction& (0+255),b
  9726  0142D0  0E39               	movlw	high _Motor_Step
  9727  0142D2  0100               	movlb	0	; () banked
  9728  0142D4  6FDE               	movwf	(_lStepFunction+1)& (0+255),b
  9729  0142D6  0E01               	movlw	low (_Motor_Step shr (0+16))
  9730  0142D8  0100               	movlb	0	; () banked
  9731  0142DA  6FDF               	movwf	(_lStepFunction+2)& (0+255),b
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;Motor.c: 39: Timer0_Init(1000);
  9735  0142DC  0EE8               	movlw	232
  9736  0142DE  0100               	movlb	0	; () banked
  9737  0142E0  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
  9738  0142E2  0E03               	movlw	3
  9739  0142E4  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  9740  0142E6  0E00               	movlw	0
  9741  0142E8  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  9742  0142EA  0E00               	movlw	0
  9743  0142EC  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  9744  0142EE  ECAA  F09B         	call	_Timer0_Init	;wreg free
  9745  0142F2  0012               	return		;funcret
  9746  0142F4                     __end_of_Motor_Init:
  9747                           	opt stack 0
  9748                           tosu	equ	0xFFF
  9749                           tosh	equ	0xFFE
  9750                           tosl	equ	0xFFD
  9751                           pclath	equ	0xFFA
  9752                           tblptru	equ	0xFF8
  9753                           tblptrh	equ	0xFF7
  9754                           tblptrl	equ	0xFF6
  9755                           tablat	equ	0xFF5
  9756                           prodh	equ	0xFF4
  9757                           prodl	equ	0xFF3
  9758                           postinc0	equ	0xFEE
  9759                           wreg	equ	0xFE8
  9760                           indf1	equ	0xFE7
  9761                           postdec1	equ	0xFE5
  9762                           fsr1h	equ	0xFE2
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           plusw2	equ	0xFDB
  9768                           fsr2h	equ	0xFDA
  9769                           fsr2l	equ	0xFD9
  9770                           status	equ	0xFD8
  9771                           
  9772 ;; *************** function _MXK_Init *****************
  9773 ;; Defined at:
  9774 ;;		line 33 in file "Library/MXK.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;		None
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;                  1    wreg      void 
  9781 ;; Registers used:
  9782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;Total ram usage:        0 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:   16
  9795 ;; This function calls:
  9796 ;;		_LED_Init
  9797 ;;		_Port_Init
  9798 ;;		_Port_SetPin
  9799 ;;		_Port_SetPinType
  9800 ;;		_Port_SetQuadType
  9801 ;;		_Port_SetType
  9802 ;;		_delay_ms
  9803 ;; This function is called by:
  9804 ;;		_initialise
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text40
  9809  01319C                     __ptext40:
  9810                           	opt stack 0
  9811  01319C                     _MXK_Init:
  9812                           	opt stack 13
  9813                           
  9814                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  9815                           
  9816                           ;incstack = 0
  9817  01319C  0E01               	movlw	1
  9818  01319E  6E4A               	movwf	_Bus_State,c
  9819                           
  9820                           ;MXK.c: 36: lQueue = (Function)0;
  9821  0131A0  0E00               	movlw	0
  9822  0131A2  0100               	movlb	0	; () banked
  9823  0131A4  6FDA               	movwf	_lQueue& (0+255),b	;volatile
  9824  0131A6  0E00               	movlw	0
  9825  0131A8  0100               	movlb	0	; () banked
  9826  0131AA  6FDB               	movwf	(_lQueue+1)& (0+255),b	;volatile
  9827  0131AC  0E00               	movlw	0
  9828  0131AE  0100               	movlb	0	; () banked
  9829  0131B0  6FDC               	movwf	(_lQueue+2)& (0+255),b	;volatile
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  9833  0131B2  0E64               	movlw	low _PortA
  9834  0131B4  0100               	movlb	0	; () banked
  9835  0131B6  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9836  0131B8  0E02               	movlw	high _PortA
  9837  0131BA  0100               	movlb	0	; () banked
  9838  0131BC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9839  0131BE  0E00               	movlw	0
  9840  0131C0  0100               	movlb	0	; () banked
  9841  0131C2  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9842  0131C4  ECAF  F095         	call	_Port_Init	;wreg free
  9843                           
  9844                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  9845  0131C8  0EAF               	movlw	low _PortB
  9846  0131CA  0100               	movlb	0	; () banked
  9847  0131CC  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9848  0131CE  0E01               	movlw	high _PortB
  9849  0131D0  0100               	movlb	0	; () banked
  9850  0131D2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9851  0131D4  0E01               	movlw	1
  9852  0131D6  0100               	movlb	0	; () banked
  9853  0131D8  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9854  0131DA  ECAF  F095         	call	_Port_Init	;wreg free
  9855                           
  9856                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  9857  0131DE  0E35               	movlw	low _PortC
  9858  0131E0  0100               	movlb	0	; () banked
  9859  0131E2  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9860  0131E4  0E00               	movlw	high _PortC
  9861  0131E6  0100               	movlb	0	; () banked
  9862  0131E8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9863  0131EA  0E02               	movlw	2
  9864  0131EC  0100               	movlb	0	; () banked
  9865  0131EE  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9866  0131F0  ECAF  F095         	call	_Port_Init	;wreg free
  9867                           
  9868                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  9869  0131F4  0EA5               	movlw	low _PortD
  9870  0131F6  0100               	movlb	0	; () banked
  9871  0131F8  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9872  0131FA  0E01               	movlw	high _PortD
  9873  0131FC  0100               	movlb	0	; () banked
  9874  0131FE  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9875  013200  0E03               	movlw	3
  9876  013202  0100               	movlb	0	; () banked
  9877  013204  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9878  013206  ECAF  F095         	call	_Port_Init	;wreg free
  9879                           
  9880                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  9881  01320A  0E9B               	movlw	low _PortE
  9882  01320C  0100               	movlb	0	; () banked
  9883  01320E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9884  013210  0E01               	movlw	high _PortE
  9885  013212  0100               	movlb	0	; () banked
  9886  013214  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9887  013216  0E04               	movlw	4
  9888  013218  0100               	movlb	0	; () banked
  9889  01321A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9890  01321C  ECAF  F095         	call	_Port_Init	;wreg free
  9891                           
  9892                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  9893  013220  0EB9               	movlw	low _PortF
  9894  013222  0100               	movlb	0	; () banked
  9895  013224  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9896  013226  0E01               	movlw	high _PortF
  9897  013228  0100               	movlb	0	; () banked
  9898  01322A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9899  01322C  0E05               	movlw	5
  9900  01322E  0100               	movlb	0	; () banked
  9901  013230  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9902  013232  ECAF  F095         	call	_Port_Init	;wreg free
  9903                           
  9904                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  9905  013236  0E91               	movlw	low _PortG
  9906  013238  0100               	movlb	0	; () banked
  9907  01323A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9908  01323C  0E01               	movlw	high _PortG
  9909  01323E  0100               	movlb	0	; () banked
  9910  013240  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9911  013242  0E06               	movlw	6
  9912  013244  0100               	movlb	0	; () banked
  9913  013246  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9914  013248  ECAF  F095         	call	_Port_Init	;wreg free
  9915                           
  9916                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  9917  01324C  0EB9               	movlw	low _PortF
  9918  01324E  0100               	movlb	0	; () banked
  9919  013250  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9920  013252  0E01               	movlw	high _PortF
  9921  013254  0100               	movlb	0	; () banked
  9922  013256  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9923  013258  0E05               	movlw	5
  9924  01325A  0100               	movlb	0	; () banked
  9925  01325C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9926  01325E  0E00               	movlw	0
  9927  013260  0100               	movlb	0	; () banked
  9928  013262  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9929  013264  EC2E  F093         	call	_Port_SetPinType	;wreg free
  9930                           
  9931                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  9932  013268  0EAF               	movlw	low _PortB
  9933  01326A  0100               	movlb	0	; () banked
  9934  01326C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  9935  01326E  0E01               	movlw	high _PortB
  9936  013270  0100               	movlb	0	; () banked
  9937  013272  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  9938  013274  0E00               	movlw	0
  9939  013276  0100               	movlb	0	; () banked
  9940  013278  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  9941  01327A  0E00               	movlw	0
  9942  01327C  0100               	movlb	0	; () banked
  9943  01327E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  9944  013280  EC02  F08D         	call	_Port_SetQuadType	;wreg free
  9945                           
  9946                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  9947  013284  0EB9               	movlw	low _PortF
  9948  013286  0100               	movlb	0	; () banked
  9949  013288  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9950  01328A  0E01               	movlw	high _PortF
  9951  01328C  0100               	movlb	0	; () banked
  9952  01328E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9953  013290  0E06               	movlw	6
  9954  013292  0100               	movlb	0	; () banked
  9955  013294  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9956  013296  0E03               	movlw	3
  9957  013298  0100               	movlb	0	; () banked
  9958  01329A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9959  01329C  EC2E  F093         	call	_Port_SetPinType	;wreg free
  9960                           
  9961                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  9962  0132A0  0E91               	movlw	low _PortG
  9963  0132A2  0100               	movlb	0	; () banked
  9964  0132A4  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  9965  0132A6  0E01               	movlw	high _PortG
  9966  0132A8  0100               	movlb	0	; () banked
  9967  0132AA  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  9968  0132AC  0E03               	movlw	3
  9969  0132AE  0100               	movlb	0	; () banked
  9970  0132B0  6F9C               	movwf	Port_SetType@pType& (0+255),b
  9971  0132B2  EC2D  F08E         	call	_Port_SetType	;wreg free
  9972                           
  9973                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  9974  0132B6  0E91               	movlw	low _PortG
  9975  0132B8  0100               	movlb	0	; () banked
  9976  0132BA  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9977  0132BC  0E01               	movlw	high _PortG
  9978  0132BE  0100               	movlb	0	; () banked
  9979  0132C0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9980  0132C2  0E04               	movlw	4
  9981  0132C4  0100               	movlb	0	; () banked
  9982  0132C6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9983  0132C8  0E00               	movlw	0
  9984  0132CA  0100               	movlb	0	; () banked
  9985  0132CC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9986  0132CE  EC17  F0A3         	call	_Port_SetPin	;wreg free
  9987                           
  9988                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  9989  0132D2  0EB9               	movlw	low _PortF
  9990  0132D4  0100               	movlb	0	; () banked
  9991  0132D6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9992  0132D8  0E01               	movlw	high _PortF
  9993  0132DA  0100               	movlb	0	; () banked
  9994  0132DC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9995  0132DE  0E06               	movlw	6
  9996  0132E0  0100               	movlb	0	; () banked
  9997  0132E2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9998  0132E4  0E01               	movlw	1
  9999  0132E6  0100               	movlb	0	; () banked
 10000  0132E8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10001  0132EA  EC17  F0A3         	call	_Port_SetPin	;wreg free
 10002                           
 10003                           ;MXK.c: 55: LED_Init(eLED1);
 10004  0132EE  0E00               	movlw	0
 10005  0132F0  EC74  F0AF         	call	_LED_Init
 10006                           
 10007                           ;MXK.c: 56: LED_Init(eLED2);
 10008  0132F4  0E01               	movlw	1
 10009  0132F6  EC74  F0AF         	call	_LED_Init
 10010                           
 10011                           ;MXK.c: 58: PIR1 = 0;
 10012  0132FA  0E00               	movlw	0
 10013  0132FC  6E9E               	movwf	3998,c	;volatile
 10014                           
 10015                           ;MXK.c: 59: PIR2 = 0;
 10016  0132FE  0E00               	movlw	0
 10017  013300  6EA1               	movwf	4001,c	;volatile
 10018                           
 10019                           ;MXK.c: 60: PIR3 = 0;
 10020  013302  0E00               	movlw	0
 10021  013304  6EA4               	movwf	4004,c	;volatile
 10022                           
 10023                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 10024  013306  8E9B               	bsf	3995,7,c	;volatile
 10025                           
 10026                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 10027  013308  8C9B               	bsf	3995,6,c	;volatile
 10028                           
 10029                           ;MXK.c: 66: delay_ms(100);
 10030  01330A  0E00               	movlw	0
 10031  01330C  0100               	movlb	0	; () banked
 10032  01330E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 10033  013310  0E64               	movlw	100
 10034  013312  6F60               	movwf	delay_ms@ms& (0+255),b
 10035  013314  EC0B  F0AE         	call	_delay_ms	;wreg free
 10036                           
 10037                           ;MXK.c: 68: RCONbits.IPEN = 1;
 10038  013318  8ED0               	bsf	4048,7,c	;volatile
 10039  01331A  0012               	return		;funcret
 10040  01331C                     __end_of_MXK_Init:
 10041                           	opt stack 0
 10042                           tosu	equ	0xFFF
 10043                           tosh	equ	0xFFE
 10044                           tosl	equ	0xFFD
 10045                           pclath	equ	0xFFA
 10046                           tblptru	equ	0xFF8
 10047                           tblptrh	equ	0xFF7
 10048                           tblptrl	equ	0xFF6
 10049                           tablat	equ	0xFF5
 10050                           prodh	equ	0xFF4
 10051                           prodl	equ	0xFF3
 10052                           postinc0	equ	0xFEE
 10053                           wreg	equ	0xFE8
 10054                           indf1	equ	0xFE7
 10055                           postdec1	equ	0xFE5
 10056                           fsr1h	equ	0xFE2
 10057                           fsr1l	equ	0xFE1
 10058                           indf2	equ	0xFDF
 10059                           postinc2	equ	0xFDE
 10060                           postdec2	equ	0xFDD
 10061                           plusw2	equ	0xFDB
 10062                           fsr2h	equ	0xFDA
 10063                           fsr2l	equ	0xFD9
 10064                           status	equ	0xFD8
 10065                           
 10066 ;; *************** function _Port_Init *****************
 10067 ;; Defined at:
 10068 ;;		line 150 in file "Library/Port.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 10071 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10072 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10073 ;;  pPort           1   66[BANK0 ] enum E6786
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;  i               1   69[BANK0 ] unsigned char 
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      void 
 10078 ;; Registers used:
 10079 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10085 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10088 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10089 ;;Total ram usage:        6 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:   15
 10092 ;; This function calls:
 10093 ;;		_GetPortPORT
 10094 ;;		_GetPortProperties
 10095 ;;		_GetPortTRIS
 10096 ;;		_Port_Set
 10097 ;;		_Port_SetPinType
 10098 ;;		_Port_SetType
 10099 ;;		_Word_GetPair
 10100 ;; This function is called by:
 10101 ;;		_MXK_Init
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text41
 10106  012B5E                     __ptext41:
 10107                           	opt stack 0
 10108  012B5E                     _Port_Init:
 10109                           	opt stack 13
 10110                           
 10111                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 10112                           
 10113                           ;incstack = 0
 10114  012B5E  0100               	movlb	0	; () banked
 10115  012B60  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10116  012B62  ECAE  F0A7         	call	_GetPortProperties
 10117  012B66  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 10118  012B6A  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 10119  012B6E  0100               	movlb	0	; () banked
 10120  012B70  C060  FFDE         	movff	?_GetPortProperties,postinc2
 10121  012B74  0100               	movlb	0	; () banked
 10122  012B76  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 10123                           
 10124                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 10125  012B7A  0100               	movlb	0	; () banked
 10126  012B7C  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10127  012B7E  EC01  F0A8         	call	_GetPortPORT
 10128  012B82  0100               	movlb	0	; () banked
 10129  012B84  EE20 F006          	lfsr	2,6
 10130  012B88  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10131  012B8A  26D9               	addwf	fsr2l,f,c
 10132  012B8C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10133  012B8E  22DA               	addwfc	fsr2h,f,c
 10134  012B90  0100               	movlb	0	; () banked
 10135  012B92  C060  FFDE         	movff	?_GetPortPORT,postinc2
 10136  012B96  0100               	movlb	0	; () banked
 10137  012B98  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 10138                           
 10139                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 10140  012B9C  0100               	movlb	0	; () banked
 10141  012B9E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10142  012BA0  EC01  F0A8         	call	_GetPortPORT
 10143  012BA4  0100               	movlb	0	; () banked
 10144  012BA6  EE20 F004          	lfsr	2,4
 10145  012BAA  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10146  012BAC  26D9               	addwf	fsr2l,f,c
 10147  012BAE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10148  012BB0  22DA               	addwfc	fsr2h,f,c
 10149  012BB2  0100               	movlb	0	; () banked
 10150  012BB4  C060  FFDE         	movff	?_GetPortPORT,postinc2
 10151  012BB8  0100               	movlb	0	; () banked
 10152  012BBA  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 10153                           
 10154                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 10155  012BBE  0100               	movlb	0	; () banked
 10156  012BC0  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10157  012BC2  EC5B  F0A7         	call	_GetPortTRIS
 10158  012BC6  0100               	movlb	0	; () banked
 10159  012BC8  EE20 F002          	lfsr	2,2
 10160  012BCC  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10161  012BCE  26D9               	addwf	fsr2l,f,c
 10162  012BD0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10163  012BD2  22DA               	addwfc	fsr2h,f,c
 10164  012BD4  0100               	movlb	0	; () banked
 10165  012BD6  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 10166  012BDA  0100               	movlb	0	; () banked
 10167  012BDC  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 10171  012BE0  0100               	movlb	0	; () banked
 10172  012BE2  EE20 F004          	lfsr	2,4
 10173  012BE6  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10174  012BE8  26D9               	addwf	fsr2l,f,c
 10175  012BEA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10176  012BEC  22DA               	addwfc	fsr2h,f,c
 10177  012BEE  CFDE F0A3          	movff	postinc2,??_Port_Init
 10178  012BF2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 10179  012BF6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 10180  012BFA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 10181  012BFE  0E00               	movlw	0
 10182  012C00  6EDF               	movwf	indf2,c
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 10186  012C02  0100               	movlb	0	; () banked
 10187  012C04  EE20 F002          	lfsr	2,2
 10188  012C08  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10189  012C0A  26D9               	addwf	fsr2l,f,c
 10190  012C0C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10191  012C0E  22DA               	addwfc	fsr2h,f,c
 10192  012C10  CFDE F0A3          	movff	postinc2,??_Port_Init
 10193  012C14  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 10194  012C18  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 10195  012C1C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 10196  012C20  0EFF               	movlw	255
 10197  012C22  6EDF               	movwf	indf2,c
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 10201  012C24  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 10202  012C28  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 10203  012C2C  0E00               	movlw	0
 10204  012C2E  0100               	movlb	0	; () banked
 10205  012C30  6F9C               	movwf	Port_SetType@pType& (0+255),b
 10206  012C32  EC2D  F08E         	call	_Port_SetType	;wreg free
 10207                           
 10208                           ;Port.c: 166: UINT8 i;
 10209                           ;Port.c: 167: for (i=0; i<8; i++)
 10210  012C36  0E00               	movlw	0
 10211  012C38  0100               	movlb	0	; () banked
 10212  012C3A  6FA5               	movwf	Port_Init@i& (0+255),b
 10213  012C3C                     l13652:
 10214                           
 10215                           ; BSR set to: 0
 10216  012C3C  0E07               	movlw	7
 10217  012C3E  0100               	movlb	0	; () banked
 10218  012C40  65A5               	cpfsgt	Port_Init@i& (0+255),b
 10219  012C42  D031               	goto	l403
 10220  012C44  D04B               	goto	u11000
 10221  012C46                     
 10222                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 10223                           
 10224                           ; BSR set to: 0
 10225  012C46  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10226  012C4A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10227  012C4E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10228  012C52  0E03               	movlw	3
 10229  012C54  0100               	movlb	0	; () banked
 10230  012C56  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10231  012C58  EC2E  F093         	call	_Port_SetPinType	;wreg free
 10232                           
 10233                           ;Port.c: 173: break;
 10234  012C5C  D03C               	goto	l405
 10235  012C5E                     
 10236                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 10237  012C5E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10238  012C62  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10239  012C66  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10240  012C6A  0E02               	movlw	2
 10241  012C6C  0100               	movlb	0	; () banked
 10242  012C6E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10243  012C70  EC2E  F093         	call	_Port_SetPinType	;wreg free
 10244                           
 10245                           ;Port.c: 176: break;
 10246  012C74  D030               	goto	l405
 10247  012C76                     
 10248                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 10249  012C76  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10250  012C7A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10251  012C7E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10252  012C82  0E01               	movlw	1
 10253  012C84  0100               	movlb	0	; () banked
 10254  012C86  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10255  012C88  EC2E  F093         	call	_Port_SetPinType	;wreg free
 10256                           
 10257                           ;Port.c: 179: break;
 10258  012C8C  D024               	goto	l405
 10259  012C8E                     
 10260                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 10261  012C8E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10262  012C92  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10263  012C96  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10264  012C9A  0E00               	movlw	0
 10265  012C9C  0100               	movlb	0	; () banked
 10266  012C9E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10267  012CA0  EC2E  F093         	call	_Port_SetPinType	;wreg free
 10268                           
 10269                           ;Port.c: 183: }
 10270                           
 10271                           ;Port.c: 182: break;
 10272  012CA4  D018               	goto	l405
 10273  012CA6                     l403:
 10274  012CA6  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 10275  012CAA  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 10276  012CAE  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 10277  012CB2  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 10278  012CB6  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 10279  012CBA  EC08  F0B3         	call	_Word_GetPair	;wreg free
 10280                           
 10281                           ; Switch size 1, requested type "space"
 10282                           ; Number of cases is 4, Range of values is 0 to 3
 10283                           ; switch strategies available:
 10284                           ; Name         Instructions Cycles
 10285                           ; simple_byte           13     7 (average)
 10286                           ;	Chosen strategy is simple_byte
 10287  012CBE  0A00               	xorlw	0	; case 0
 10288  012CC0  B4D8               	btfsc	status,2,c
 10289  012CC2  D7C1               	goto	l404
 10290  012CC4  0A01               	xorlw	1	; case 1
 10291  012CC6  B4D8               	btfsc	status,2,c
 10292  012CC8  D7D6               	goto	l407
 10293  012CCA  0A03               	xorlw	3	; case 2
 10294  012CCC  B4D8               	btfsc	status,2,c
 10295  012CCE  D7C7               	goto	l406
 10296  012CD0  0A01               	xorlw	1	; case 3
 10297  012CD2  B4D8               	btfsc	status,2,c
 10298  012CD4  D7DC               	goto	l408
 10299  012CD6                     l405:
 10300  012CD6  0100               	movlb	0	; () banked
 10301  012CD8  2BA5               	incf	Port_Init@i& (0+255),f,b
 10302  012CDA  D7B0               	goto	l13652
 10303  012CDC                     u11000:
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;Port.c: 184: }
 10307                           ;Port.c: 185: Port_Set(pInput, 0x00);
 10308                           
 10309                           ; BSR set to: 0
 10310  012CDC  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 10311  012CE0  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 10312  012CE4  0E00               	movlw	0
 10313  012CE6  0100               	movlb	0	; () banked
 10314  012CE8  6F71               	movwf	Port_Set@pValue& (0+255),b
 10315  012CEA  EC96  F088         	call	_Port_Set	;wreg free
 10316  012CEE  0012               	return		;funcret
 10317  012CF0                     __end_of_Port_Init:
 10318                           	opt stack 0
 10319                           tosu	equ	0xFFF
 10320                           tosh	equ	0xFFE
 10321                           tosl	equ	0xFFD
 10322                           pclath	equ	0xFFA
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           postinc0	equ	0xFEE
 10330                           wreg	equ	0xFE8
 10331                           indf1	equ	0xFE7
 10332                           postdec1	equ	0xFE5
 10333                           fsr1h	equ	0xFE2
 10334                           fsr1l	equ	0xFE1
 10335                           indf2	equ	0xFDF
 10336                           postinc2	equ	0xFDE
 10337                           postdec2	equ	0xFDD
 10338                           plusw2	equ	0xFDB
 10339                           fsr2h	equ	0xFDA
 10340                           fsr2l	equ	0xFD9
 10341                           status	equ	0xFD8
 10342                           
 10343 ;; *************** function _Port_SetType *****************
 10344 ;; Defined at:
 10345 ;;		line 513 in file "Library/Port.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 10348 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10349 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10350 ;;  pType           1   60[BANK0 ] enum E6795
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  Output          1   63[BANK0 ] enum E6475
 10353 ;; Return value:  Size  Location     Type
 10354 ;;                  1    wreg      enum E6475
 10355 ;; Registers used:
 10356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10357 ;; Tracked objects:
 10358 ;;		On entry : 0/0
 10359 ;;		On exit  : 0/0
 10360 ;;		Unchanged: 0/0
 10361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10362 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;Total ram usage:        6 bytes
 10367 ;; Hardware stack levels used:    1
 10368 ;; Hardware stack levels required when called:   14
 10369 ;; This function calls:
 10370 ;;		_Port_CheckPortType
 10371 ;;		_Word_SetPair
 10372 ;; This function is called by:
 10373 ;;		_Port_Init
 10374 ;;		_MXK_Init
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text42
 10379  011C5A                     __ptext42:
 10380                           	opt stack 0
 10381  011C5A                     _Port_SetType:
 10382                           	opt stack 14
 10383                           
 10384                           ;Port.c: 515: ePinError Output = ePinErrorState;
 10385                           
 10386                           ;incstack = 0
 10387  011C5A  0E05               	movlw	5
 10388  011C5C  0100               	movlb	0	; () banked
 10389  011C5E  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10390                           
 10391                           ;Port.c: 517: switch (pType)
 10392  011C60  D07A               	goto	l509
 10393  011C62                     
 10394                           ; BSR set to: 0
 10395                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 10396                           
 10397                           ; BSR set to: 0
 10398  011C62  0100               	movlb	0	; () banked
 10399  011C64  EE20 F002          	lfsr	2,2
 10400  011C68  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10401  011C6A  26D9               	addwf	fsr2l,f,c
 10402  011C6C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10403  011C6E  22DA               	addwfc	fsr2h,f,c
 10404  011C70  CFDE F09D          	movff	postinc2,??_Port_SetType
 10405  011C74  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10406  011C78  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10407  011C7C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10408  011C80  0EFF               	movlw	255
 10409  011C82  D067               	goto	L7
 10410  011C84                     
 10411                           ; BSR set to: 0
 10412                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 10413                           
 10414                           ; BSR set to: 0
 10415  011C84  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10416  011C88  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10417  011C8C  0E01               	movlw	1
 10418  011C8E  0100               	movlb	0	; () banked
 10419  011C90  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10420  011C92  EC73  F0B1         	call	_Port_CheckPortType	;wreg free
 10421  011C96  0100               	movlb	0	; () banked
 10422  011C98  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10423  011C9A  0100               	movlb	0	; () banked
 10424  011C9C  519F               	movf	Port_SetType@Output& (0+255),w,b
 10425  011C9E  A4D8               	btfss	status,2,c
 10426  011CA0  0012               	return	
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;Port.c: 527: {
 10430                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 10431  011CA2  0100               	movlb	0	; () banked
 10432  011CA4  EE20 F002          	lfsr	2,2
 10433  011CA8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10434  011CAA  26D9               	addwf	fsr2l,f,c
 10435  011CAC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10436  011CAE  22DA               	addwfc	fsr2h,f,c
 10437  011CB0  CFDE F09D          	movff	postinc2,??_Port_SetType
 10438  011CB4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10439  011CB8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10440  011CBC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10441  011CC0  0E00               	movlw	0
 10442  011CC2  6EDF               	movwf	indf2,c
 10443                           
 10444                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 10445  011CC4  0100               	movlb	0	; () banked
 10446  011CC6  EE20 F004          	lfsr	2,4
 10447  011CCA  D036               	goto	L21
 10448  011CCC                     
 10449                           ; BSR set to: 0
 10450                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 10451                           
 10452                           ; BSR set to: 0
 10453  011CCC  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10454  011CD0  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10455  011CD4  0E02               	movlw	2
 10456  011CD6  0100               	movlb	0	; () banked
 10457  011CD8  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10458  011CDA  EC73  F0B1         	call	_Port_CheckPortType	;wreg free
 10459  011CDE  0100               	movlb	0	; () banked
 10460  011CE0  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10461  011CE2  0100               	movlb	0	; () banked
 10462  011CE4  519F               	movf	Port_SetType@Output& (0+255),w,b
 10463  011CE6  A4D8               	btfss	status,2,c
 10464  011CE8  0012               	return	
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;Port.c: 538: {
 10468                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 10469  011CEA  0100               	movlb	0	; () banked
 10470  011CEC  EE20 F002          	lfsr	2,2
 10471  011CF0  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10472  011CF2  26D9               	addwf	fsr2l,f,c
 10473  011CF4  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10474  011CF6  22DA               	addwfc	fsr2h,f,c
 10475  011CF8  CFDE F09D          	movff	postinc2,??_Port_SetType
 10476  011CFC  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10477  011D00  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10478  011D04  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10479  011D08  0EFF               	movlw	255
 10480  011D0A  6EDF               	movwf	indf2,c
 10481                           
 10482                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 10483  011D0C  0100               	movlb	0	; () banked
 10484  011D0E  EE20 F004          	lfsr	2,4
 10485  011D12  D7AA               	goto	L8
 10486  011D14                     
 10487                           ; BSR set to: 0
 10488                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 10489                           
 10490                           ; BSR set to: 0
 10491  011D14  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10492  011D18  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10493  011D1C  0E00               	movlw	0
 10494  011D1E  0100               	movlb	0	; () banked
 10495  011D20  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10496  011D22  EC73  F0B1         	call	_Port_CheckPortType	;wreg free
 10497  011D26  0100               	movlb	0	; () banked
 10498  011D28  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10499  011D2A  0100               	movlb	0	; () banked
 10500  011D2C  519F               	movf	Port_SetType@Output& (0+255),w,b
 10501  011D2E  A4D8               	btfss	status,2,c
 10502  011D30  0012               	return	
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;Port.c: 549: {
 10506                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 10507  011D32  0100               	movlb	0	; () banked
 10508  011D34  EE20 F002          	lfsr	2,2
 10509  011D38                     L21:
 10510  011D38  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10511  011D3A  26D9               	addwf	fsr2l,f,c
 10512  011D3C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10513  011D3E  22DA               	addwfc	fsr2h,f,c
 10514  011D40  CFDE F09D          	movff	postinc2,??_Port_SetType
 10515  011D44  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10516  011D48  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10517  011D4C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10518  011D50  0E00               	movlw	0
 10519  011D52                     L7:
 10520  011D52  6EDF               	movwf	indf2,c
 10521                           
 10522                           ;Port.c: 552: }
 10523  011D54  D00E               	goto	l511
 10524  011D56                     l509:
 10525                           
 10526                           ; BSR set to: 0
 10527                           
 10528                           ; BSR set to: 0
 10529  011D56  0100               	movlb	0	; () banked
 10530  011D58  519C               	movf	Port_SetType@pType& (0+255),w,b
 10531                           
 10532                           ; Switch size 1, requested type "space"
 10533                           ; Number of cases is 4, Range of values is 0 to 3
 10534                           ; switch strategies available:
 10535                           ; Name         Instructions Cycles
 10536                           ; simple_byte           13     7 (average)
 10537                           ;	Chosen strategy is simple_byte
 10538  011D5A  0A00               	xorlw	0	; case 0
 10539  011D5C  B4D8               	btfsc	status,2,c
 10540  011D5E  D781               	goto	l510
 10541  011D60  0A01               	xorlw	1	; case 1
 10542  011D62  B4D8               	btfsc	status,2,c
 10543  011D64  D78F               	goto	l512
 10544  011D66  0A03               	xorlw	3	; case 2
 10545  011D68  B4D8               	btfsc	status,2,c
 10546  011D6A  D7B0               	goto	l516
 10547  011D6C  0A01               	xorlw	1	; case 3
 10548  011D6E  B4D8               	btfsc	status,2,c
 10549  011D70  D7D1               	goto	l519
 10550  011D72                     l511:
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 10554                           
 10555                           ; BSR set to: 0
 10556  011D72  0E08               	movlw	8
 10557  011D74  0100               	movlb	0	; () banked
 10558  011D76  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10559  011D78  0100               	movlb	0	; () banked
 10560  011D7A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10561  011D7C  0E00               	movlw	0
 10562  011D7E  0100               	movlb	0	; () banked
 10563  011D80  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10564  011D82  0100               	movlb	0	; () banked
 10565  011D84  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10566  011D86  0E00               	movlw	0
 10567  011D88  0100               	movlb	0	; () banked
 10568  011D8A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10569  011D8C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10570  011D90  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10571                           
 10572                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 10573  011D94  0E08               	movlw	8
 10574  011D96  0100               	movlb	0	; () banked
 10575  011D98  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10576  011D9A  0100               	movlb	0	; () banked
 10577  011D9C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10578  011D9E  0E00               	movlw	0
 10579  011DA0  0100               	movlb	0	; () banked
 10580  011DA2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10581  011DA4  0100               	movlb	0	; () banked
 10582  011DA6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10583  011DA8  0E01               	movlw	1
 10584  011DAA  0100               	movlb	0	; () banked
 10585  011DAC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10586  011DAE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10587  011DB2  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10588                           
 10589                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 10590  011DB6  0E08               	movlw	8
 10591  011DB8  0100               	movlb	0	; () banked
 10592  011DBA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10593  011DBC  0100               	movlb	0	; () banked
 10594  011DBE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10595  011DC0  0E00               	movlw	0
 10596  011DC2  0100               	movlb	0	; () banked
 10597  011DC4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10598  011DC6  0100               	movlb	0	; () banked
 10599  011DC8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10600  011DCA  0E02               	movlw	2
 10601  011DCC  0100               	movlb	0	; () banked
 10602  011DCE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10603  011DD0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10604  011DD4  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10605                           
 10606                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 10607  011DD8  0E08               	movlw	8
 10608  011DDA  0100               	movlb	0	; () banked
 10609  011DDC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10610  011DDE  0100               	movlb	0	; () banked
 10611  011DE0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10612  011DE2  0E00               	movlw	0
 10613  011DE4  0100               	movlb	0	; () banked
 10614  011DE6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10615  011DE8  0100               	movlb	0	; () banked
 10616  011DEA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10617  011DEC  0E03               	movlw	3
 10618  011DEE  0100               	movlb	0	; () banked
 10619  011DF0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10620  011DF2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10621  011DF6  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10622                           
 10623                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 10624  011DFA  0E08               	movlw	8
 10625  011DFC  0100               	movlb	0	; () banked
 10626  011DFE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10627  011E00  0100               	movlb	0	; () banked
 10628  011E02  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10629  011E04  0E00               	movlw	0
 10630  011E06  0100               	movlb	0	; () banked
 10631  011E08  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10632  011E0A  0100               	movlb	0	; () banked
 10633  011E0C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10634  011E0E  0E04               	movlw	4
 10635  011E10  0100               	movlb	0	; () banked
 10636  011E12  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10637  011E14  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10638  011E18  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10639                           
 10640                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 10641  011E1C  0E08               	movlw	8
 10642  011E1E  0100               	movlb	0	; () banked
 10643  011E20  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10644  011E22  0100               	movlb	0	; () banked
 10645  011E24  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10646  011E26  0E00               	movlw	0
 10647  011E28  0100               	movlb	0	; () banked
 10648  011E2A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10649  011E2C  0100               	movlb	0	; () banked
 10650  011E2E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10651  011E30  0E05               	movlw	5
 10652  011E32  0100               	movlb	0	; () banked
 10653  011E34  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10654  011E36  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10655  011E3A  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10656                           
 10657                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 10658  011E3E  0E08               	movlw	8
 10659  011E40  0100               	movlb	0	; () banked
 10660  011E42  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10661  011E44  0100               	movlb	0	; () banked
 10662  011E46  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10663  011E48  0E00               	movlw	0
 10664  011E4A  0100               	movlb	0	; () banked
 10665  011E4C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10666  011E4E  0100               	movlb	0	; () banked
 10667  011E50  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10668  011E52  0E06               	movlw	6
 10669  011E54  0100               	movlb	0	; () banked
 10670  011E56  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10671  011E58  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10672  011E5C  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10673                           
 10674                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 10675  011E60  0E08               	movlw	8
 10676  011E62  0100               	movlb	0	; () banked
 10677  011E64  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10678  011E66  0100               	movlb	0	; () banked
 10679  011E68  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10680  011E6A  0E00               	movlw	0
 10681  011E6C  0100               	movlb	0	; () banked
 10682  011E6E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10683  011E70  0100               	movlb	0	; () banked
 10684  011E72  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10685  011E74  0E07               	movlw	7
 10686  011E76  0100               	movlb	0	; () banked
 10687  011E78  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10688  011E7A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10689  011E7E  EC02  F0B2         	call	_Word_SetPair	;wreg free
 10690  011E82  0012               	return	
 10691  011E84                     __end_of_Port_SetType:
 10692                           	opt stack 0
 10693                           tosu	equ	0xFFF
 10694                           tosh	equ	0xFFE
 10695                           tosl	equ	0xFFD
 10696                           pclath	equ	0xFFA
 10697                           tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           postinc0	equ	0xFEE
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postdec1	equ	0xFE5
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _Port_CheckPortType *****************
 10718 ;; Defined at:
 10719 ;;		line 138 in file "Library/Port.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 10722 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10723 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10724 ;;  pDrive          1   56[BANK0 ] enum E6469
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  Output          1   57[BANK0 ] enum E6475
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      enum E6475
 10729 ;; Registers used:
 10730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10736 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;Total ram usage:        4 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:   13
 10743 ;; This function calls:
 10744 ;;		_Port_CheckQuadType
 10745 ;; This function is called by:
 10746 ;;		_Port_SetType
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           	psect	text43
 10751  0162E6                     __ptext43:
 10752                           	opt stack 0
 10753  0162E6                     _Port_CheckPortType:
 10754                           	opt stack 14
 10755                           
 10756                           ;Port.c: 140: ePinError Output = ePinErrorState;
 10757                           
 10758                           ;incstack = 0
 10759  0162E6  0E05               	movlw	5
 10760  0162E8  0100               	movlb	0	; () banked
 10761  0162EA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 10765  0162EC  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 10766  0162F0  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 10767  0162F4  0E00               	movlw	0
 10768  0162F6  0100               	movlb	0	; () banked
 10769  0162F8  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 10770  0162FA  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 10771  0162FE  EC32  F0B0         	call	_Port_CheckQuadType	;wreg free
 10772  016302  0100               	movlb	0	; () banked
 10773  016304  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10774  016306  0100               	movlb	0	; () banked
 10775  016308  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 10776  01630A  A4D8               	btfss	status,2,c
 10777  01630C  D00D               	goto	l397
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 10781  01630E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 10782  016312  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 10783  016316  0E01               	movlw	1
 10784  016318  0100               	movlb	0	; () banked
 10785  01631A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 10786  01631C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 10787  016320  EC32  F0B0         	call	_Port_CheckQuadType	;wreg free
 10788  016324  0100               	movlb	0	; () banked
 10789  016326  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10790  016328                     l397:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;Port.c: 146: return Output;
 10794                           
 10795                           ; BSR set to: 0
 10796  016328  0100               	movlb	0	; () banked
 10797  01632A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 10798  01632C  0012               	return	
 10799  01632E                     __end_of_Port_CheckPortType:
 10800                           	opt stack 0
 10801                           tosu	equ	0xFFF
 10802                           tosh	equ	0xFFE
 10803                           tosl	equ	0xFFD
 10804                           pclath	equ	0xFFA
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           indf1	equ	0xFE7
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           plusw2	equ	0xFDB
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _Port_Set *****************
 10826 ;; Defined at:
 10827 ;;		line 570 in file "Library/Port.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 10830 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10831 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10832 ;;  pValue          1   17[BANK0 ] unsigned char 
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 10835 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 10836 ;;  Type            1   38[BANK0 ] enum E6795
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:       24 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:   10
 10853 ;; This function calls:
 10854 ;;		_Byte_SetByte
 10855 ;;		_Word_GetPair
 10856 ;; This function is called by:
 10857 ;;		_Port_Init
 10858 ;;		_Port_Toggle
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text44
 10863  01112C                     __ptext44:
 10864                           	opt stack 0
 10865  01112C                     _Port_Set:
 10866                           	opt stack 17
 10867                           
 10868                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;incstack = 0
 10872  01112C  0E08               	movlw	8
 10873  01112E  0100               	movlb	0	; () banked
 10874  011130  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10875  011132  0100               	movlb	0	; () banked
 10876  011134  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10877  011136  0E00               	movlw	0
 10878  011138  0100               	movlb	0	; () banked
 10879  01113A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10880  01113C  0100               	movlb	0	; () banked
 10881  01113E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10882  011140  0E00               	movlw	0
 10883  011142  0100               	movlb	0	; () banked
 10884  011144  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10885  011146  EC08  F0B3         	call	_Word_GetPair	;wreg free
 10886  01114A  0100               	movlb	0	; () banked
 10887  01114C  6F86               	movwf	Port_Set@Type& (0+255),b
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 10891  01114E  0100               	movlb	0	; () banked
 10892  011150  5186               	movf	Port_Set@Type& (0+255),w,b
 10893  011152  0100               	movlb	0	; () banked
 10894  011154  6F72               	movwf	??_Port_Set& (0+255),b
 10895  011156  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10896  011158  0E0E               	movlw	14
 10897  01115A                     u9785:
 10898  01115A  90D8               	bcf	status,0,c
 10899  01115C  0100               	movlb	0	; () banked
 10900  01115E  3772               	rlcf	??_Port_Set& (0+255),f,b
 10901  011160  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10902  011162  2EE8               	decfsz	wreg,f,c
 10903  011164  D7FA               	goto	u9785
 10904  011166  0100               	movlb	0	; () banked
 10905  011168  5186               	movf	Port_Set@Type& (0+255),w,b
 10906  01116A  0100               	movlb	0	; () banked
 10907  01116C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 10908  01116E  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 10909  011170  0E0C               	movlw	12
 10910  011172                     u9795:
 10911  011172  90D8               	bcf	status,0,c
 10912  011174  0100               	movlb	0	; () banked
 10913  011176  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 10914  011178  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 10915  01117A  2EE8               	decfsz	wreg,f,c
 10916  01117C  D7FA               	goto	u9795
 10917  01117E  0100               	movlb	0	; () banked
 10918  011180  5186               	movf	Port_Set@Type& (0+255),w,b
 10919  011182  0100               	movlb	0	; () banked
 10920  011184  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 10921  011186  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 10922  011188  0E0A               	movlw	10
 10923  01118A                     u9805:
 10924  01118A  90D8               	bcf	status,0,c
 10925  01118C  0100               	movlb	0	; () banked
 10926  01118E  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 10927  011190  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 10928  011192  2EE8               	decfsz	wreg,f,c
 10929  011194  D7FA               	goto	u9805
 10930  011196  0100               	movlb	0	; () banked
 10931  011198  5186               	movf	Port_Set@Type& (0+255),w,b
 10932  01119A  0100               	movlb	0	; () banked
 10933  01119C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 10934  01119E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 10935  0111A0  0100               	movlb	0	; () banked
 10936  0111A2  5186               	movf	Port_Set@Type& (0+255),w,b
 10937  0111A4  0100               	movlb	0	; () banked
 10938  0111A6  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 10939  0111A8  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 10940  0111AA  0E06               	movlw	6
 10941  0111AC                     u9815:
 10942  0111AC  90D8               	bcf	status,0,c
 10943  0111AE  0100               	movlb	0	; () banked
 10944  0111B0  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 10945  0111B2  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 10946  0111B4  2EE8               	decfsz	wreg,f,c
 10947  0111B6  D7FA               	goto	u9815
 10948  0111B8  0100               	movlb	0	; () banked
 10949  0111BA  5186               	movf	Port_Set@Type& (0+255),w,b
 10950  0111BC  0100               	movlb	0	; () banked
 10951  0111BE  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 10952  0111C0  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 10953  0111C2  0100               	movlb	0	; () banked
 10954  0111C4  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 10955  0111C6  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 10956  0111C8  0EF0               	movlw	240
 10957  0111CA  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 10958  0111CC  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 10959  0111CE  0B0F               	andlw	15
 10960  0111D0  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 10961  0111D2  0EF0               	movlw	240
 10962  0111D4  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 10963  0111D6  0100               	movlb	0	; () banked
 10964  0111D8  5186               	movf	Port_Set@Type& (0+255),w,b
 10965  0111DA  0100               	movlb	0	; () banked
 10966  0111DC  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 10967  0111DE  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 10968  0111E0  0100               	movlb	0	; () banked
 10969  0111E2  90D8               	bcf	status,0,c
 10970  0111E4  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 10971  0111E6  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 10972  0111E8  0100               	movlb	0	; () banked
 10973  0111EA  90D8               	bcf	status,0,c
 10974  0111EC  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 10975  0111EE  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 10976  0111F0  0100               	movlb	0	; () banked
 10977  0111F2  5186               	movf	Port_Set@Type& (0+255),w,b
 10978  0111F4  0100               	movlb	0	; () banked
 10979  0111F6  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 10980  0111F8  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 10981  0111FA  0100               	movlb	0	; () banked
 10982  0111FC  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 10983  0111FE  0100               	movlb	0	; () banked
 10984  011200  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10985  011202  0100               	movlb	0	; () banked
 10986  011204  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 10987  011206  0100               	movlb	0	; () banked
 10988  011208  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10989  01120A  0100               	movlb	0	; () banked
 10990  01120C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 10991  01120E  0100               	movlb	0	; () banked
 10992  011210  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10993  011212  0100               	movlb	0	; () banked
 10994  011214  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 10995  011216  0100               	movlb	0	; () banked
 10996  011218  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10997  01121A  0100               	movlb	0	; () banked
 10998  01121C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 10999  01121E  0100               	movlb	0	; () banked
 11000  011220  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11001  011222  0100               	movlb	0	; () banked
 11002  011224  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 11003  011226  0100               	movlb	0	; () banked
 11004  011228  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11005  01122A  0100               	movlb	0	; () banked
 11006  01122C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 11007  01122E  0100               	movlb	0	; () banked
 11008  011230  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11009  011232  0100               	movlb	0	; () banked
 11010  011234  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 11011  011236  0100               	movlb	0	; () banked
 11012  011238  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11013  01123A  0100               	movlb	0	; () banked
 11014  01123C  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 11015  01123E  0100               	movlb	0	; () banked
 11016  011240  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11017  011242  0100               	movlb	0	; () banked
 11018  011244  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 11019  011246  0100               	movlb	0	; () banked
 11020  011248  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11021  01124A  0100               	movlb	0	; () banked
 11022  01124C  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 11023  01124E  0100               	movlb	0	; () banked
 11024  011250  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11025  011252  0100               	movlb	0	; () banked
 11026  011254  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 11027  011256  0100               	movlb	0	; () banked
 11028  011258  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11029  01125A  0100               	movlb	0	; () banked
 11030  01125C  5172               	movf	??_Port_Set& (0+255),w,b
 11031  01125E  0100               	movlb	0	; () banked
 11032  011260  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 11033  011262  0100               	movlb	0	; () banked
 11034  011264  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 11035  011266  0100               	movlb	0	; () banked
 11036  011268  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11037  01126A  0100               	movlb	0	; () banked
 11038  01126C  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 11039  01126E  0100               	movlb	0	; () banked
 11040  011270  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;Port.c: 574: UINT16 TypeActual = Type;
 11044  011272  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 11045  011276  0100               	movlb	0	; () banked
 11046  011278  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 11050  01127A  0E08               	movlw	8
 11051  01127C  0100               	movlb	0	; () banked
 11052  01127E  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11053  011280  0100               	movlb	0	; () banked
 11054  011282  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11055  011284  0E00               	movlw	0
 11056  011286  0100               	movlb	0	; () banked
 11057  011288  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11058  01128A  0100               	movlb	0	; () banked
 11059  01128C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11060  01128E  0E01               	movlw	1
 11061  011290  0100               	movlb	0	; () banked
 11062  011292  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11063  011294  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11064  011298  0100               	movlb	0	; () banked
 11065  01129A  6F72               	movwf	??_Port_Set& (0+255),b
 11066  01129C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11067  01129E  0100               	movlb	0	; () banked
 11068  0112A0  90D8               	bcf	status,0,c
 11069  0112A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 11070  0112A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11071  0112A6  0100               	movlb	0	; () banked
 11072  0112A8  90D8               	bcf	status,0,c
 11073  0112AA  3772               	rlcf	??_Port_Set& (0+255),f,b
 11074  0112AC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11075  0112AE  0100               	movlb	0	; () banked
 11076  0112B0  5172               	movf	??_Port_Set& (0+255),w,b
 11077  0112B2  0100               	movlb	0	; () banked
 11078  0112B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11079  0112B6  0100               	movlb	0	; () banked
 11080  0112B8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11081  0112BA  0100               	movlb	0	; () banked
 11082  0112BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 11086  0112BE  0E08               	movlw	8
 11087  0112C0  0100               	movlb	0	; () banked
 11088  0112C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11089  0112C4  0100               	movlb	0	; () banked
 11090  0112C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11091  0112C8  0E00               	movlw	0
 11092  0112CA  0100               	movlb	0	; () banked
 11093  0112CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11094  0112CE  0100               	movlb	0	; () banked
 11095  0112D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11096  0112D2  0E02               	movlw	2
 11097  0112D4  0100               	movlb	0	; () banked
 11098  0112D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11099  0112D8  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11100  0112DC  0100               	movlb	0	; () banked
 11101  0112DE  6F72               	movwf	??_Port_Set& (0+255),b
 11102  0112E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11103  0112E2  0100               	movlb	0	; () banked
 11104  0112E4  3B72               	swapf	??_Port_Set& (0+255),f,b
 11105  0112E6  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 11106  0112E8  0EF0               	movlw	240
 11107  0112EA  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 11108  0112EC  5172               	movf	??_Port_Set& (0+255),w,b
 11109  0112EE  0B0F               	andlw	15
 11110  0112F0  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 11111  0112F2  0EF0               	movlw	240
 11112  0112F4  1772               	andwf	??_Port_Set& (0+255),f,b
 11113  0112F6  0100               	movlb	0	; () banked
 11114  0112F8  5172               	movf	??_Port_Set& (0+255),w,b
 11115  0112FA  0100               	movlb	0	; () banked
 11116  0112FC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11117  0112FE  0100               	movlb	0	; () banked
 11118  011300  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11119  011302  0100               	movlb	0	; () banked
 11120  011304  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 11124  011306  0E08               	movlw	8
 11125  011308  0100               	movlb	0	; () banked
 11126  01130A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11127  01130C  0100               	movlb	0	; () banked
 11128  01130E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11129  011310  0E00               	movlw	0
 11130  011312  0100               	movlb	0	; () banked
 11131  011314  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11132  011316  0100               	movlb	0	; () banked
 11133  011318  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11134  01131A  0E03               	movlw	3
 11135  01131C  0100               	movlb	0	; () banked
 11136  01131E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11137  011320  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11138  011324  0100               	movlb	0	; () banked
 11139  011326  6F72               	movwf	??_Port_Set& (0+255),b
 11140  011328  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11141  01132A  0E06               	movlw	6
 11142  01132C                     u9825:
 11143  01132C  90D8               	bcf	status,0,c
 11144  01132E  0100               	movlb	0	; () banked
 11145  011330  3772               	rlcf	??_Port_Set& (0+255),f,b
 11146  011332  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11147  011334  2EE8               	decfsz	wreg,f,c
 11148  011336  D7FA               	goto	u9825
 11149  011338  0100               	movlb	0	; () banked
 11150  01133A  5172               	movf	??_Port_Set& (0+255),w,b
 11151  01133C  0100               	movlb	0	; () banked
 11152  01133E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11153  011340  0100               	movlb	0	; () banked
 11154  011342  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11155  011344  0100               	movlb	0	; () banked
 11156  011346  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 11160  011348  0E08               	movlw	8
 11161  01134A  0100               	movlb	0	; () banked
 11162  01134C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11163  01134E  0100               	movlb	0	; () banked
 11164  011350  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11165  011352  0E00               	movlw	0
 11166  011354  0100               	movlb	0	; () banked
 11167  011356  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11168  011358  0100               	movlb	0	; () banked
 11169  01135A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11170  01135C  0E04               	movlw	4
 11171  01135E  0100               	movlb	0	; () banked
 11172  011360  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11173  011362  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11174  011366  0100               	movlb	0	; () banked
 11175  011368  6F72               	movwf	??_Port_Set& (0+255),b
 11176  01136A  0100               	movlb	0	; () banked
 11177  01136C  5172               	movf	??_Port_Set& (0+255),w,b
 11178  01136E  0100               	movlb	0	; () banked
 11179  011370  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 11180  011372  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11181  011374  0100               	movlb	0	; () banked
 11182  011376  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11183  011378  0100               	movlb	0	; () banked
 11184  01137A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11185  01137C  0100               	movlb	0	; () banked
 11186  01137E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 11187  011380  0100               	movlb	0	; () banked
 11188  011382  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11189                           
 11190                           ; BSR set to: 0
 11191                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 11192  011384  0E08               	movlw	8
 11193  011386  0100               	movlb	0	; () banked
 11194  011388  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11195  01138A  0100               	movlb	0	; () banked
 11196  01138C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11197  01138E  0E00               	movlw	0
 11198  011390  0100               	movlb	0	; () banked
 11199  011392  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11200  011394  0100               	movlb	0	; () banked
 11201  011396  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11202  011398  0E05               	movlw	5
 11203  01139A  0100               	movlb	0	; () banked
 11204  01139C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11205  01139E  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11206  0113A2  0100               	movlb	0	; () banked
 11207  0113A4  6F72               	movwf	??_Port_Set& (0+255),b
 11208  0113A6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11209  0113A8  0E0A               	movlw	10
 11210  0113AA                     u9835:
 11211  0113AA  90D8               	bcf	status,0,c
 11212  0113AC  0100               	movlb	0	; () banked
 11213  0113AE  3772               	rlcf	??_Port_Set& (0+255),f,b
 11214  0113B0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11215  0113B2  2EE8               	decfsz	wreg,f,c
 11216  0113B4  D7FA               	goto	u9835
 11217  0113B6  0100               	movlb	0	; () banked
 11218  0113B8  5172               	movf	??_Port_Set& (0+255),w,b
 11219  0113BA  0100               	movlb	0	; () banked
 11220  0113BC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11221  0113BE  0100               	movlb	0	; () banked
 11222  0113C0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11223  0113C2  0100               	movlb	0	; () banked
 11224  0113C4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 11228  0113C6  0E08               	movlw	8
 11229  0113C8  0100               	movlb	0	; () banked
 11230  0113CA  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11231  0113CC  0100               	movlb	0	; () banked
 11232  0113CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11233  0113D0  0E00               	movlw	0
 11234  0113D2  0100               	movlb	0	; () banked
 11235  0113D4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11236  0113D6  0100               	movlb	0	; () banked
 11237  0113D8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11238  0113DA  0E06               	movlw	6
 11239  0113DC  0100               	movlb	0	; () banked
 11240  0113DE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11241  0113E0  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11242  0113E4  0100               	movlb	0	; () banked
 11243  0113E6  6F72               	movwf	??_Port_Set& (0+255),b
 11244  0113E8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11245  0113EA  0E0C               	movlw	12
 11246  0113EC                     u9845:
 11247  0113EC  90D8               	bcf	status,0,c
 11248  0113EE  0100               	movlb	0	; () banked
 11249  0113F0  3772               	rlcf	??_Port_Set& (0+255),f,b
 11250  0113F2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11251  0113F4  2EE8               	decfsz	wreg,f,c
 11252  0113F6  D7FA               	goto	u9845
 11253  0113F8  0100               	movlb	0	; () banked
 11254  0113FA  5172               	movf	??_Port_Set& (0+255),w,b
 11255  0113FC  0100               	movlb	0	; () banked
 11256  0113FE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11257  011400  0100               	movlb	0	; () banked
 11258  011402  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11259  011404  0100               	movlb	0	; () banked
 11260  011406  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 11264  011408  0E08               	movlw	8
 11265  01140A  0100               	movlb	0	; () banked
 11266  01140C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11267  01140E  0100               	movlb	0	; () banked
 11268  011410  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11269  011412  0E00               	movlw	0
 11270  011414  0100               	movlb	0	; () banked
 11271  011416  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11272  011418  0100               	movlb	0	; () banked
 11273  01141A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11274  01141C  0E07               	movlw	7
 11275  01141E  0100               	movlb	0	; () banked
 11276  011420  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11277  011422  EC08  F0B3         	call	_Word_GetPair	;wreg free
 11278  011426  0100               	movlb	0	; () banked
 11279  011428  6F72               	movwf	??_Port_Set& (0+255),b
 11280  01142A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11281  01142C  0E0E               	movlw	14
 11282  01142E                     u9855:
 11283  01142E  90D8               	bcf	status,0,c
 11284  011430  0100               	movlb	0	; () banked
 11285  011432  3772               	rlcf	??_Port_Set& (0+255),f,b
 11286  011434  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11287  011436  2EE8               	decfsz	wreg,f,c
 11288  011438  D7FA               	goto	u9855
 11289  01143A  0100               	movlb	0	; () banked
 11290  01143C  5172               	movf	??_Port_Set& (0+255),w,b
 11291  01143E  0100               	movlb	0	; () banked
 11292  011440  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11293  011442  0100               	movlb	0	; () banked
 11294  011444  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11295  011446  0100               	movlb	0	; () banked
 11296  011448  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11297                           
 11298                           ;Port.c: 584: if (TypeRequired == TypeActual)
 11299  01144A  0100               	movlb	0	; () banked
 11300  01144C  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 11301  01144E  0100               	movlb	0	; () banked
 11302  011450  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 11303  011452  E148               	bnz	l528
 11304  011454  0100               	movlb	0	; () banked
 11305  011456  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 11306  011458  0100               	movlb	0	; () banked
 11307  01145A  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 11308  01145C  A4D8               	btfss	status,2,c
 11309  01145E  0012               	return	
 11310  011460  D032               	goto	l526
 11311  011462                     
 11312                           ; BSR set to: 0
 11313                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 11314                           
 11315                           ; BSR set to: 0
 11316  011462  0100               	movlb	0	; () banked
 11317  011464  EE20 F002          	lfsr	2,2
 11318  011468  516F               	movf	Port_Set@pInput& (0+255),w,b
 11319  01146A  26D9               	addwf	fsr2l,f,c
 11320  01146C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11321  01146E  22DA               	addwfc	fsr2h,f,c
 11322  011470  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11323  011474  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11324  011478  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11325  01147C  EC47  F0B6         	call	_Byte_SetByte	;wreg free
 11326                           
 11327                           ;Port.c: 594: break;
 11328  011480  0012               	return	
 11329  011482                     
 11330                           ;Port.c: 597: pValue = ~pValue;
 11331  011482  0100               	movlb	0	; () banked
 11332  011484  1F71               	comf	Port_Set@pValue& (0+255),f,b
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 11336  011486  0100               	movlb	0	; () banked
 11337  011488  EE20 F002          	lfsr	2,2
 11338  01148C  516F               	movf	Port_Set@pInput& (0+255),w,b
 11339  01148E  26D9               	addwf	fsr2l,f,c
 11340  011490  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11341  011492  22DA               	addwfc	fsr2h,f,c
 11342  011494  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11343  011498  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11344  01149C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11345  0114A0  EC47  F0B6         	call	_Byte_SetByte	;wreg free
 11346                           
 11347                           ;Port.c: 599: break;
 11348  0114A4  0012               	return	
 11349  0114A6                     
 11350                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 11351  0114A6  0100               	movlb	0	; () banked
 11352  0114A8  EE20 F004          	lfsr	2,4
 11353  0114AC  516F               	movf	Port_Set@pInput& (0+255),w,b
 11354  0114AE  26D9               	addwf	fsr2l,f,c
 11355  0114B0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11356  0114B2  22DA               	addwfc	fsr2h,f,c
 11357  0114B4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11358  0114B8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11359  0114BC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11360  0114C0  EC47  F0B6         	call	_Byte_SetByte	;wreg free
 11361                           
 11362                           ;Port.c: 606: }
 11363                           
 11364                           ;Port.c: 605: break;
 11365                           
 11366                           ;Port.c: 604: default:
 11367                           
 11368                           ;Port.c: 603: break;
 11369  0114C4  0012               	return	
 11370  0114C6                     l526:
 11371  0114C6  0100               	movlb	0	; () banked
 11372  0114C8  5186               	movf	Port_Set@Type& (0+255),w,b
 11373                           
 11374                           ; Switch size 1, requested type "space"
 11375                           ; Number of cases is 4, Range of values is 0 to 3
 11376                           ; switch strategies available:
 11377                           ; Name         Instructions Cycles
 11378                           ; simple_byte           13     7 (average)
 11379                           ;	Chosen strategy is simple_byte
 11380  0114CA  0A00               	xorlw	0	; case 0
 11381  0114CC  B4D8               	btfsc	status,2,c
 11382  0114CE  0012               	return	
 11383  0114D0  0A01               	xorlw	1	; case 1
 11384  0114D2  B4D8               	btfsc	status,2,c
 11385  0114D4  D7C6               	goto	l529
 11386  0114D6  0A03               	xorlw	3	; case 2
 11387  0114D8  B4D8               	btfsc	status,2,c
 11388  0114DA  D7D3               	goto	l531
 11389  0114DC  0A01               	xorlw	1	; case 3
 11390  0114DE  A4D8               	btfss	status,2,c
 11391                           
 11392                           ; BSR set to: 0
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;Port.c: 607: }
 11396  0114E0  0012               	return	
 11397  0114E2  D7E1               	goto	l532
 11398  0114E4                     l528:
 11399  0114E4  0012               	return		;funcret
 11400  0114E6                     __end_of_Port_Set:
 11401                           	opt stack 0
 11402                           tosu	equ	0xFFF
 11403                           tosh	equ	0xFFE
 11404                           tosl	equ	0xFFD
 11405                           pclath	equ	0xFFA
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           postinc0	equ	0xFEE
 11413                           wreg	equ	0xFE8
 11414                           indf1	equ	0xFE7
 11415                           postdec1	equ	0xFE5
 11416                           fsr1h	equ	0xFE2
 11417                           fsr1l	equ	0xFE1
 11418                           indf2	equ	0xFDF
 11419                           postinc2	equ	0xFDE
 11420                           postdec2	equ	0xFDD
 11421                           plusw2	equ	0xFDB
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _Byte_SetByte *****************
 11427 ;; Defined at:
 11428 ;;		line 110 in file "Library/Types.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11431 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 11432 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 11433 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 11434 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 11435 ;;		 -> NULL(0), 
 11436 ;;  pValue          1    2[BANK0 ] unsigned char 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;		None
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      void 
 11441 ;; Registers used:
 11442 ;;		fsr2l, fsr2h
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11448 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;Total ram usage:        3 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    7
 11455 ;; This function calls:
 11456 ;;		Nothing
 11457 ;; This function is called by:
 11458 ;;		_Port_Set
 11459 ;;		_I2C_Init
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           	psect	text45
 11464  016C8E                     __ptext45:
 11465                           	opt stack 0
 11466  016C8E                     _Byte_SetByte:
 11467                           	opt stack 19
 11468                           
 11469                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 11470                           
 11471                           ;incstack = 0
 11472  016C8E  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 11473  016C92  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 11474  016C96  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 11475  016C9A  0012               	return		;funcret
 11476  016C9C                     __end_of_Byte_SetByte:
 11477                           	opt stack 0
 11478                           tosu	equ	0xFFF
 11479                           tosh	equ	0xFFE
 11480                           tosl	equ	0xFFD
 11481                           pclath	equ	0xFFA
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           postinc0	equ	0xFEE
 11489                           wreg	equ	0xFE8
 11490                           indf1	equ	0xFE7
 11491                           postdec1	equ	0xFE5
 11492                           fsr1h	equ	0xFE2
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           plusw2	equ	0xFDB
 11498                           fsr2h	equ	0xFDA
 11499                           fsr2l	equ	0xFD9
 11500                           status	equ	0xFD8
 11501                           
 11502 ;; *************** function _GetPortTRIS *****************
 11503 ;; Defined at:
 11504 ;;		line 67 in file "Library/Port.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  pInput          1    wreg     enum E6786
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;  pInput          1    2[BANK0 ] enum E6786
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  2    0[BANK0 ] PTR struct Byte
 11511 ;; Registers used:
 11512 ;;		wreg, status,2, status,0
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11518 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;Total ram usage:        3 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    7
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_Port_Init
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           	psect	text46
 11533  014EB6                     __ptext46:
 11534                           	opt stack 0
 11535  014EB6                     _GetPortTRIS:
 11536                           	opt stack 20
 11537                           
 11538                           ;incstack = 0
 11539                           ;GetPortTRIS@pInput stored from wreg
 11540  014EB6  0100               	movlb	0	; () banked
 11541  014EB8  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 11542                           
 11543                           ;Port.c: 69: switch (pInput)
 11544  014EBA  D038               	goto	l363
 11545  014EBC                     
 11546                           ;Port.c: 72: return (BytePtr)&TRISA;
 11547  014EBC  0E92               	movlw	146
 11548  014EBE  0100               	movlb	0	; () banked
 11549  014EC0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11550  014EC2  0E0F               	movlw	15
 11551  014EC4  0100               	movlb	0	; () banked
 11552  014EC6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11553                           
 11554                           ; BSR set to: 0
 11555  014EC8  0012               	return	
 11556  014ECA                     
 11557                           ; BSR set to: 0
 11558                           ;Port.c: 74: return (BytePtr)&TRISB;
 11559                           
 11560                           ; BSR set to: 0
 11561  014ECA  0E93               	movlw	147
 11562  014ECC  0100               	movlb	0	; () banked
 11563  014ECE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11564  014ED0  0E0F               	movlw	15
 11565  014ED2  0100               	movlb	0	; () banked
 11566  014ED4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11567                           
 11568                           ; BSR set to: 0
 11569  014ED6  0012               	return	
 11570  014ED8                     
 11571                           ; BSR set to: 0
 11572                           ;Port.c: 76: return (BytePtr)&TRISC;
 11573                           
 11574                           ; BSR set to: 0
 11575  014ED8  0E94               	movlw	148
 11576  014EDA  0100               	movlb	0	; () banked
 11577  014EDC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11578  014EDE  0E0F               	movlw	15
 11579  014EE0  0100               	movlb	0	; () banked
 11580  014EE2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11581                           
 11582                           ; BSR set to: 0
 11583  014EE4  0012               	return	
 11584  014EE6                     
 11585                           ; BSR set to: 0
 11586                           ;Port.c: 78: return (BytePtr)&TRISD;
 11587                           
 11588                           ; BSR set to: 0
 11589  014EE6  0E95               	movlw	149
 11590  014EE8  0100               	movlb	0	; () banked
 11591  014EEA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11592  014EEC  0E0F               	movlw	15
 11593  014EEE  0100               	movlb	0	; () banked
 11594  014EF0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11595                           
 11596                           ; BSR set to: 0
 11597  014EF2  0012               	return	
 11598  014EF4                     
 11599                           ; BSR set to: 0
 11600                           ;Port.c: 80: return (BytePtr)&TRISE;
 11601                           
 11602                           ; BSR set to: 0
 11603  014EF4  0E96               	movlw	150
 11604  014EF6  0100               	movlb	0	; () banked
 11605  014EF8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11606  014EFA  0E0F               	movlw	15
 11607  014EFC  0100               	movlb	0	; () banked
 11608  014EFE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11609                           
 11610                           ; BSR set to: 0
 11611  014F00  0012               	return	
 11612  014F02                     
 11613                           ; BSR set to: 0
 11614                           ;Port.c: 82: return (BytePtr)&TRISF;
 11615                           
 11616                           ; BSR set to: 0
 11617  014F02  0E97               	movlw	151
 11618  014F04  0100               	movlb	0	; () banked
 11619  014F06  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11620  014F08  0E0F               	movlw	15
 11621  014F0A  0100               	movlb	0	; () banked
 11622  014F0C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11623                           
 11624                           ; BSR set to: 0
 11625  014F0E  0012               	return	
 11626  014F10                     
 11627                           ; BSR set to: 0
 11628                           ;Port.c: 84: return (BytePtr)&TRISG;
 11629                           
 11630                           ; BSR set to: 0
 11631  014F10  0E98               	movlw	152
 11632  014F12  0100               	movlb	0	; () banked
 11633  014F14  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11634  014F16  0E0F               	movlw	15
 11635  014F18  0100               	movlb	0	; () banked
 11636  014F1A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11637                           
 11638                           ; BSR set to: 0
 11639  014F1C  0012               	return	
 11640  014F1E                     
 11641                           ; BSR set to: 0
 11642                           ;Port.c: 86: return (void*)0;
 11643                           
 11644                           ; BSR set to: 0
 11645  014F1E  0E00               	movlw	0
 11646  014F20  0100               	movlb	0	; () banked
 11647  014F22  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11648  014F24  0E00               	movlw	0
 11649  014F26  0100               	movlb	0	; () banked
 11650  014F28  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;Port.c: 87: }
 11654                           
 11655                           ; BSR set to: 0
 11656  014F2A  0012               	return	
 11657  014F2C                     l363:
 11658                           
 11659                           ; BSR set to: 0
 11660  014F2C  0100               	movlb	0	; () banked
 11661  014F2E  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 11662                           
 11663                           ; Switch size 1, requested type "space"
 11664                           ; Number of cases is 7, Range of values is 0 to 6
 11665                           ; switch strategies available:
 11666                           ; Name         Instructions Cycles
 11667                           ; simple_byte           22    12 (average)
 11668                           ;	Chosen strategy is simple_byte
 11669  014F30  0A00               	xorlw	0	; case 0
 11670  014F32  B4D8               	btfsc	status,2,c
 11671  014F34  D7C3               	goto	l364
 11672  014F36  0A01               	xorlw	1	; case 1
 11673  014F38  B4D8               	btfsc	status,2,c
 11674  014F3A  D7C7               	goto	l366
 11675  014F3C  0A03               	xorlw	3	; case 2
 11676  014F3E  B4D8               	btfsc	status,2,c
 11677  014F40  D7CB               	goto	l367
 11678  014F42  0A01               	xorlw	1	; case 3
 11679  014F44  B4D8               	btfsc	status,2,c
 11680  014F46  D7CF               	goto	l368
 11681  014F48  0A07               	xorlw	7	; case 4
 11682  014F4A  B4D8               	btfsc	status,2,c
 11683  014F4C  D7D3               	goto	l369
 11684  014F4E  0A01               	xorlw	1	; case 5
 11685  014F50  B4D8               	btfsc	status,2,c
 11686  014F52  D7D7               	goto	l370
 11687  014F54  0A03               	xorlw	3	; case 6
 11688  014F56  B4D8               	btfsc	status,2,c
 11689  014F58  D7DB               	goto	l371
 11690  014F5A  D7E1               	goto	l372
 11691  014F5C                     __end_of_GetPortTRIS:
 11692                           	opt stack 0
 11693                           tosu	equ	0xFFF
 11694                           tosh	equ	0xFFE
 11695                           tosl	equ	0xFFD
 11696                           pclath	equ	0xFFA
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           postinc0	equ	0xFEE
 11704                           wreg	equ	0xFE8
 11705                           indf1	equ	0xFE7
 11706                           postdec1	equ	0xFE5
 11707                           fsr1h	equ	0xFE2
 11708                           fsr1l	equ	0xFE1
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           plusw2	equ	0xFDB
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _GetPortProperties *****************
 11718 ;; Defined at:
 11719 ;;		line 21 in file "Library/Port.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;  pInput          1    wreg     enum E6786
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  pInput          1    2[BANK0 ] enum E6786
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  2    0[BANK0 ] PTR struct PortProperty
 11726 ;; Registers used:
 11727 ;;		wreg, status,2, status,0
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;Total ram usage:        3 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    7
 11740 ;; This function calls:
 11741 ;;		Nothing
 11742 ;; This function is called by:
 11743 ;;		_Port_Init
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           	psect	text47
 11748  014F5C                     __ptext47:
 11749                           	opt stack 0
 11750  014F5C                     _GetPortProperties:
 11751                           	opt stack 20
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;incstack = 0
 11755                           ;GetPortProperties@pInput stored from wreg
 11756  014F5C  0100               	movlb	0	; () banked
 11757  014F5E  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 11758                           
 11759                           ;Port.c: 23: switch (pInput)
 11760  014F60  D038               	goto	l337
 11761  014F62                     
 11762                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 11763  014F62  0E07               	movlw	low _PortA_Property
 11764  014F64  0100               	movlb	0	; () banked
 11765  014F66  6F60               	movwf	?_GetPortProperties& (0+255),b
 11766  014F68  0EFF               	movlw	high _PortA_Property
 11767  014F6A  0100               	movlb	0	; () banked
 11768  014F6C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11769                           
 11770                           ; BSR set to: 0
 11771  014F6E  0012               	return	
 11772  014F70                     
 11773                           ; BSR set to: 0
 11774                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 11775                           
 11776                           ; BSR set to: 0
 11777  014F70  0E05               	movlw	low _PortB_Property
 11778  014F72  0100               	movlb	0	; () banked
 11779  014F74  6F60               	movwf	?_GetPortProperties& (0+255),b
 11780  014F76  0EFF               	movlw	high _PortB_Property
 11781  014F78  0100               	movlb	0	; () banked
 11782  014F7A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11783                           
 11784                           ; BSR set to: 0
 11785  014F7C  0012               	return	
 11786  014F7E                     
 11787                           ; BSR set to: 0
 11788                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 11789                           
 11790                           ; BSR set to: 0
 11791  014F7E  0E03               	movlw	low _PortC_Property
 11792  014F80  0100               	movlb	0	; () banked
 11793  014F82  6F60               	movwf	?_GetPortProperties& (0+255),b
 11794  014F84  0EFF               	movlw	high _PortC_Property
 11795  014F86  0100               	movlb	0	; () banked
 11796  014F88  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11797                           
 11798                           ; BSR set to: 0
 11799  014F8A  0012               	return	
 11800  014F8C                     
 11801                           ; BSR set to: 0
 11802                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 11803                           
 11804                           ; BSR set to: 0
 11805  014F8C  0E01               	movlw	low _PortD_Property
 11806  014F8E  0100               	movlb	0	; () banked
 11807  014F90  6F60               	movwf	?_GetPortProperties& (0+255),b
 11808  014F92  0EFF               	movlw	high _PortD_Property
 11809  014F94  0100               	movlb	0	; () banked
 11810  014F96  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11811                           
 11812                           ; BSR set to: 0
 11813  014F98  0012               	return	
 11814  014F9A                     
 11815                           ; BSR set to: 0
 11816                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 11817                           
 11818                           ; BSR set to: 0
 11819  014F9A  0EFF               	movlw	low _PortE_Property
 11820  014F9C  0100               	movlb	0	; () banked
 11821  014F9E  6F60               	movwf	?_GetPortProperties& (0+255),b
 11822  014FA0  0EFE               	movlw	high _PortE_Property
 11823  014FA2  0100               	movlb	0	; () banked
 11824  014FA4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11825                           
 11826                           ; BSR set to: 0
 11827  014FA6  0012               	return	
 11828  014FA8                     
 11829                           ; BSR set to: 0
 11830                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 11831                           
 11832                           ; BSR set to: 0
 11833  014FA8  0EFD               	movlw	low _PortF_Property
 11834  014FAA  0100               	movlb	0	; () banked
 11835  014FAC  6F60               	movwf	?_GetPortProperties& (0+255),b
 11836  014FAE  0EFE               	movlw	high _PortF_Property
 11837  014FB0  0100               	movlb	0	; () banked
 11838  014FB2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841  014FB4  0012               	return	
 11842  014FB6                     
 11843                           ; BSR set to: 0
 11844                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 11845                           
 11846                           ; BSR set to: 0
 11847  014FB6  0EFB               	movlw	low _PortG_Property
 11848  014FB8  0100               	movlb	0	; () banked
 11849  014FBA  6F60               	movwf	?_GetPortProperties& (0+255),b
 11850  014FBC  0EFE               	movlw	high _PortG_Property
 11851  014FBE  0100               	movlb	0	; () banked
 11852  014FC0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11853                           
 11854                           ; BSR set to: 0
 11855  014FC2  0012               	return	
 11856  014FC4                     
 11857                           ; BSR set to: 0
 11858                           ;Port.c: 40: return (void*)0;
 11859                           
 11860                           ; BSR set to: 0
 11861  014FC4  0E00               	movlw	0
 11862  014FC6  0100               	movlb	0	; () banked
 11863  014FC8  6F60               	movwf	?_GetPortProperties& (0+255),b
 11864  014FCA  0E00               	movlw	0
 11865  014FCC  0100               	movlb	0	; () banked
 11866  014FCE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;Port.c: 41: }
 11870                           
 11871                           ; BSR set to: 0
 11872  014FD0  0012               	return	
 11873  014FD2                     l337:
 11874                           
 11875                           ; BSR set to: 0
 11876  014FD2  0100               	movlb	0	; () banked
 11877  014FD4  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 11878                           
 11879                           ; Switch size 1, requested type "space"
 11880                           ; Number of cases is 7, Range of values is 0 to 6
 11881                           ; switch strategies available:
 11882                           ; Name         Instructions Cycles
 11883                           ; simple_byte           22    12 (average)
 11884                           ;	Chosen strategy is simple_byte
 11885  014FD6  0A00               	xorlw	0	; case 0
 11886  014FD8  B4D8               	btfsc	status,2,c
 11887  014FDA  D7C3               	goto	l338
 11888  014FDC  0A01               	xorlw	1	; case 1
 11889  014FDE  B4D8               	btfsc	status,2,c
 11890  014FE0  D7C7               	goto	l340
 11891  014FE2  0A03               	xorlw	3	; case 2
 11892  014FE4  B4D8               	btfsc	status,2,c
 11893  014FE6  D7CB               	goto	l341
 11894  014FE8  0A01               	xorlw	1	; case 3
 11895  014FEA  B4D8               	btfsc	status,2,c
 11896  014FEC  D7CF               	goto	l342
 11897  014FEE  0A07               	xorlw	7	; case 4
 11898  014FF0  B4D8               	btfsc	status,2,c
 11899  014FF2  D7D3               	goto	l343
 11900  014FF4  0A01               	xorlw	1	; case 5
 11901  014FF6  B4D8               	btfsc	status,2,c
 11902  014FF8  D7D7               	goto	l344
 11903  014FFA  0A03               	xorlw	3	; case 6
 11904  014FFC  B4D8               	btfsc	status,2,c
 11905  014FFE  D7DB               	goto	l345
 11906  015000  D7E1               	goto	l346
 11907  015002                     __end_of_GetPortProperties:
 11908                           	opt stack 0
 11909                           tosu	equ	0xFFF
 11910                           tosh	equ	0xFFE
 11911                           tosl	equ	0xFFD
 11912                           pclath	equ	0xFFA
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           postinc0	equ	0xFEE
 11920                           wreg	equ	0xFE8
 11921                           indf1	equ	0xFE7
 11922                           postdec1	equ	0xFE5
 11923                           fsr1h	equ	0xFE2
 11924                           fsr1l	equ	0xFE1
 11925                           indf2	equ	0xFDF
 11926                           postinc2	equ	0xFDE
 11927                           postdec2	equ	0xFDD
 11928                           plusw2	equ	0xFDB
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function _GetPortPORT *****************
 11934 ;; Defined at:
 11935 ;;		line 44 in file "Library/Port.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  pInput          1    wreg     enum E6786
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  pInput          1    2[BANK0 ] enum E6786
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  2    0[BANK0 ] PTR struct Byte
 11942 ;; Registers used:
 11943 ;;		wreg, status,2, status,0
 11944 ;; Tracked objects:
 11945 ;;		On entry : 0/0
 11946 ;;		On exit  : 0/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;Total ram usage:        3 bytes
 11954 ;; Hardware stack levels used:    1
 11955 ;; Hardware stack levels required when called:    7
 11956 ;; This function calls:
 11957 ;;		Nothing
 11958 ;; This function is called by:
 11959 ;;		_Port_Init
 11960 ;; This function uses a non-reentrant model
 11961 ;;
 11962                           
 11963                           	psect	text48
 11964  015002                     __ptext48:
 11965                           	opt stack 0
 11966  015002                     _GetPortPORT:
 11967                           	opt stack 20
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;incstack = 0
 11971                           ;GetPortPORT@pInput stored from wreg
 11972  015002  0100               	movlb	0	; () banked
 11973  015004  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 11974                           
 11975                           ;Port.c: 46: switch (pInput)
 11976  015006  D038               	goto	l350
 11977  015008                     
 11978                           ;Port.c: 49: return (BytePtr)&PORTA;
 11979  015008  0E80               	movlw	128
 11980  01500A  0100               	movlb	0	; () banked
 11981  01500C  6F60               	movwf	?_GetPortPORT& (0+255),b
 11982  01500E  0E0F               	movlw	15
 11983  015010  0100               	movlb	0	; () banked
 11984  015012  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11985                           
 11986                           ; BSR set to: 0
 11987  015014  0012               	return	
 11988  015016                     
 11989                           ; BSR set to: 0
 11990                           ;Port.c: 51: return (BytePtr)&PORTB;
 11991                           
 11992                           ; BSR set to: 0
 11993  015016  0E81               	movlw	129
 11994  015018  0100               	movlb	0	; () banked
 11995  01501A  6F60               	movwf	?_GetPortPORT& (0+255),b
 11996  01501C  0E0F               	movlw	15
 11997  01501E  0100               	movlb	0	; () banked
 11998  015020  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11999                           
 12000                           ; BSR set to: 0
 12001  015022  0012               	return	
 12002  015024                     
 12003                           ; BSR set to: 0
 12004                           ;Port.c: 53: return (BytePtr)&PORTC;
 12005                           
 12006                           ; BSR set to: 0
 12007  015024  0E82               	movlw	130
 12008  015026  0100               	movlb	0	; () banked
 12009  015028  6F60               	movwf	?_GetPortPORT& (0+255),b
 12010  01502A  0E0F               	movlw	15
 12011  01502C  0100               	movlb	0	; () banked
 12012  01502E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12013                           
 12014                           ; BSR set to: 0
 12015  015030  0012               	return	
 12016  015032                     
 12017                           ; BSR set to: 0
 12018                           ;Port.c: 55: return (BytePtr)&PORTD;
 12019                           
 12020                           ; BSR set to: 0
 12021  015032  0E83               	movlw	131
 12022  015034  0100               	movlb	0	; () banked
 12023  015036  6F60               	movwf	?_GetPortPORT& (0+255),b
 12024  015038  0E0F               	movlw	15
 12025  01503A  0100               	movlb	0	; () banked
 12026  01503C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12027                           
 12028                           ; BSR set to: 0
 12029  01503E  0012               	return	
 12030  015040                     
 12031                           ; BSR set to: 0
 12032                           ;Port.c: 57: return (BytePtr)&PORTE;
 12033                           
 12034                           ; BSR set to: 0
 12035  015040  0E84               	movlw	132
 12036  015042  0100               	movlb	0	; () banked
 12037  015044  6F60               	movwf	?_GetPortPORT& (0+255),b
 12038  015046  0E0F               	movlw	15
 12039  015048  0100               	movlb	0	; () banked
 12040  01504A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12041                           
 12042                           ; BSR set to: 0
 12043  01504C  0012               	return	
 12044  01504E                     
 12045                           ; BSR set to: 0
 12046                           ;Port.c: 59: return (BytePtr)&PORTF;
 12047                           
 12048                           ; BSR set to: 0
 12049  01504E  0E85               	movlw	133
 12050  015050  0100               	movlb	0	; () banked
 12051  015052  6F60               	movwf	?_GetPortPORT& (0+255),b
 12052  015054  0E0F               	movlw	15
 12053  015056  0100               	movlb	0	; () banked
 12054  015058  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12055                           
 12056                           ; BSR set to: 0
 12057  01505A  0012               	return	
 12058  01505C                     
 12059                           ; BSR set to: 0
 12060                           ;Port.c: 61: return (BytePtr)&PORTG;
 12061                           
 12062                           ; BSR set to: 0
 12063  01505C  0E86               	movlw	134
 12064  01505E  0100               	movlb	0	; () banked
 12065  015060  6F60               	movwf	?_GetPortPORT& (0+255),b
 12066  015062  0E0F               	movlw	15
 12067  015064  0100               	movlb	0	; () banked
 12068  015066  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12069                           
 12070                           ; BSR set to: 0
 12071  015068  0012               	return	
 12072  01506A                     
 12073                           ; BSR set to: 0
 12074                           ;Port.c: 63: return (void*)0;
 12075                           
 12076                           ; BSR set to: 0
 12077  01506A  0E00               	movlw	0
 12078  01506C  0100               	movlb	0	; () banked
 12079  01506E  6F60               	movwf	?_GetPortPORT& (0+255),b
 12080  015070  0E00               	movlw	0
 12081  015072  0100               	movlb	0	; () banked
 12082  015074  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;Port.c: 64: }
 12086                           
 12087                           ; BSR set to: 0
 12088  015076  0012               	return	
 12089  015078                     l350:
 12090                           
 12091                           ; BSR set to: 0
 12092  015078  0100               	movlb	0	; () banked
 12093  01507A  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 12094                           
 12095                           ; Switch size 1, requested type "space"
 12096                           ; Number of cases is 7, Range of values is 0 to 6
 12097                           ; switch strategies available:
 12098                           ; Name         Instructions Cycles
 12099                           ; simple_byte           22    12 (average)
 12100                           ;	Chosen strategy is simple_byte
 12101  01507C  0A00               	xorlw	0	; case 0
 12102  01507E  B4D8               	btfsc	status,2,c
 12103  015080  D7C3               	goto	l351
 12104  015082  0A01               	xorlw	1	; case 1
 12105  015084  B4D8               	btfsc	status,2,c
 12106  015086  D7C7               	goto	l353
 12107  015088  0A03               	xorlw	3	; case 2
 12108  01508A  B4D8               	btfsc	status,2,c
 12109  01508C  D7CB               	goto	l354
 12110  01508E  0A01               	xorlw	1	; case 3
 12111  015090  B4D8               	btfsc	status,2,c
 12112  015092  D7CF               	goto	l355
 12113  015094  0A07               	xorlw	7	; case 4
 12114  015096  B4D8               	btfsc	status,2,c
 12115  015098  D7D3               	goto	l356
 12116  01509A  0A01               	xorlw	1	; case 5
 12117  01509C  B4D8               	btfsc	status,2,c
 12118  01509E  D7D7               	goto	l357
 12119  0150A0  0A03               	xorlw	3	; case 6
 12120  0150A2  B4D8               	btfsc	status,2,c
 12121  0150A4  D7DB               	goto	l358
 12122  0150A6  D7E1               	goto	l359
 12123  0150A8                     __end_of_GetPortPORT:
 12124                           	opt stack 0
 12125                           tosu	equ	0xFFF
 12126                           tosh	equ	0xFFE
 12127                           tosl	equ	0xFFD
 12128                           pclath	equ	0xFFA
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           postinc0	equ	0xFEE
 12136                           wreg	equ	0xFE8
 12137                           indf1	equ	0xFE7
 12138                           postdec1	equ	0xFE5
 12139                           fsr1h	equ	0xFE2
 12140                           fsr1l	equ	0xFE1
 12141                           indf2	equ	0xFDF
 12142                           postinc2	equ	0xFDE
 12143                           postdec2	equ	0xFDD
 12144                           plusw2	equ	0xFDB
 12145                           fsr2h	equ	0xFDA
 12146                           fsr2l	equ	0xFD9
 12147                           status	equ	0xFD8
 12148                           
 12149 ;; *************** function _LED_Init *****************
 12150 ;; Defined at:
 12151 ;;		line 15 in file "Library/LED.c"
 12152 ;; Parameters:    Size  Location     Type
 12153 ;;  pLED            1    wreg     enum E6739
 12154 ;; Auto vars:     Size  Location     Type
 12155 ;;  pLED            1   45[BANK0 ] enum E6739
 12156 ;; Return value:  Size  Location     Type
 12157 ;;                  1    wreg      void 
 12158 ;; Registers used:
 12159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12160 ;; Tracked objects:
 12161 ;;		On entry : 0/0
 12162 ;;		On exit  : 0/0
 12163 ;;		Unchanged: 0/0
 12164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;Total ram usage:        1 bytes
 12170 ;; Hardware stack levels used:    1
 12171 ;; Hardware stack levels required when called:   12
 12172 ;; This function calls:
 12173 ;;		_LED_Set
 12174 ;;		_Port_SetPinType
 12175 ;; This function is called by:
 12176 ;;		_MXK_Init
 12177 ;; This function uses a non-reentrant model
 12178 ;;
 12179                           
 12180                           	psect	text49
 12181  015EE8                     __ptext49:
 12182                           	opt stack 0
 12183  015EE8                     _LED_Init:
 12184                           	opt stack 16
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;incstack = 0
 12188                           ;LED_Init@pLED stored from wreg
 12189  015EE8  0100               	movlb	0	; () banked
 12190  015EEA  6F8D               	movwf	LED_Init@pLED& (0+255),b
 12191                           
 12192                           ;LED.c: 17: switch (pLED)
 12193  015EEC  D01E               	goto	l220
 12194  015EEE                     
 12195                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 12196  015EEE  0E35               	movlw	low _PortC
 12197  015EF0  0100               	movlb	0	; () banked
 12198  015EF2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12199  015EF4  0E00               	movlw	high _PortC
 12200  015EF6  0100               	movlb	0	; () banked
 12201  015EF8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12202  015EFA  0E00               	movlw	0
 12203  015EFC  0100               	movlb	0	; () banked
 12204  015EFE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12205  015F00  0E03               	movlw	3
 12206  015F02  0100               	movlb	0	; () banked
 12207  015F04  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12208  015F06  EC2E  F093         	call	_Port_SetPinType	;wreg free
 12209                           
 12210                           ;LED.c: 21: break;
 12211  015F0A  D017               	goto	l222
 12212  015F0C                     
 12213                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 12214  015F0C  0E35               	movlw	low _PortC
 12215  015F0E  0100               	movlb	0	; () banked
 12216  015F10  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12217  015F12  0E00               	movlw	high _PortC
 12218  015F14  0100               	movlb	0	; () banked
 12219  015F16  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12220  015F18  0E01               	movlw	1
 12221  015F1A  0100               	movlb	0	; () banked
 12222  015F1C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12223  015F1E  0E03               	movlw	3
 12224  015F20  0100               	movlb	0	; () banked
 12225  015F22  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12226  015F24  EC2E  F093         	call	_Port_SetPinType	;wreg free
 12227                           
 12228                           ;LED.c: 25: }
 12229                           
 12230                           ;LED.c: 24: break;
 12231  015F28  D008               	goto	l222
 12232  015F2A                     l220:
 12233  015F2A  0100               	movlb	0	; () banked
 12234  015F2C  518D               	movf	LED_Init@pLED& (0+255),w,b
 12235                           
 12236                           ; Switch size 1, requested type "space"
 12237                           ; Number of cases is 2, Range of values is 0 to 1
 12238                           ; switch strategies available:
 12239                           ; Name         Instructions Cycles
 12240                           ; simple_byte            7     4 (average)
 12241                           ;	Chosen strategy is simple_byte
 12242  015F2E  0A00               	xorlw	0	; case 0
 12243  015F30  B4D8               	btfsc	status,2,c
 12244  015F32  D7DD               	goto	l221
 12245  015F34  0A01               	xorlw	1	; case 1
 12246  015F36  B4D8               	btfsc	status,2,c
 12247  015F38  D7E9               	goto	l223
 12248  015F3A                     l222:
 12249                           
 12250                           ;LED.c: 26: LED_Set(pLED, 0);
 12251                           
 12252                           ; BSR set to: 0
 12253  015F3A  0E00               	movlw	0
 12254  015F3C  0100               	movlb	0	; () banked
 12255  015F3E  6F74               	movwf	LED_Set@pValue& (0+255),b
 12256  015F40  0100               	movlb	0	; () banked
 12257  015F42  518D               	movf	LED_Init@pLED& (0+255),w,b
 12258  015F44  ECB4  F0B0         	call	_LED_Set
 12259  015F48  0012               	return		;funcret
 12260  015F4A                     __end_of_LED_Init:
 12261                           	opt stack 0
 12262                           tosu	equ	0xFFF
 12263                           tosh	equ	0xFFE
 12264                           tosl	equ	0xFFD
 12265                           pclath	equ	0xFFA
 12266                           tblptru	equ	0xFF8
 12267                           tblptrh	equ	0xFF7
 12268                           tblptrl	equ	0xFF6
 12269                           tablat	equ	0xFF5
 12270                           prodh	equ	0xFF4
 12271                           prodl	equ	0xFF3
 12272                           postinc0	equ	0xFEE
 12273                           wreg	equ	0xFE8
 12274                           indf1	equ	0xFE7
 12275                           postdec1	equ	0xFE5
 12276                           fsr1h	equ	0xFE2
 12277                           fsr1l	equ	0xFE1
 12278                           indf2	equ	0xFDF
 12279                           postinc2	equ	0xFDE
 12280                           postdec2	equ	0xFDD
 12281                           plusw2	equ	0xFDB
 12282                           fsr2h	equ	0xFDA
 12283                           fsr2l	equ	0xFD9
 12284                           status	equ	0xFD8
 12285                           
 12286 ;; *************** function _LED_Set *****************
 12287 ;; Defined at:
 12288 ;;		line 33 in file "Library/LED.c"
 12289 ;; Parameters:    Size  Location     Type
 12290 ;;  pLED            1    wreg     enum E6739
 12291 ;;  pValue          1   20[BANK0 ] unsigned char 
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;  pLED            1   21[BANK0 ] enum E6739
 12294 ;; Return value:  Size  Location     Type
 12295 ;;                  1    wreg      void 
 12296 ;; Registers used:
 12297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12298 ;; Tracked objects:
 12299 ;;		On entry : 0/0
 12300 ;;		On exit  : 0/0
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;Total ram usage:        2 bytes
 12308 ;; Hardware stack levels used:    1
 12309 ;; Hardware stack levels required when called:   11
 12310 ;; This function calls:
 12311 ;;		_Port_SetPin
 12312 ;; This function is called by:
 12313 ;;		_LED_Init
 12314 ;;		_SYSTEM_Initialize
 12315 ;; This function uses a non-reentrant model
 12316 ;;
 12317                           
 12318                           	psect	text50
 12319  016168                     __ptext50:
 12320                           	opt stack 0
 12321  016168                     _LED_Set:
 12322                           	opt stack 16
 12323                           
 12324                           ;incstack = 0
 12325                           ;LED_Set@pLED stored from wreg
 12326  016168  0100               	movlb	0	; () banked
 12327  01616A  6F75               	movwf	LED_Set@pLED& (0+255),b
 12328                           
 12329                           ;LED.c: 35: switch (pLED)
 12330  01616C  D01C               	goto	l227
 12331  01616E                     
 12332                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 12333  01616E  0E35               	movlw	low _PortC
 12334  016170  0100               	movlb	0	; () banked
 12335  016172  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12336  016174  0E00               	movlw	high _PortC
 12337  016176  0100               	movlb	0	; () banked
 12338  016178  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12339  01617A  0E00               	movlw	0
 12340  01617C  0100               	movlb	0	; () banked
 12341  01617E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12342  016180  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 12343  016184  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12344                           
 12345                           ;LED.c: 39: break;
 12346  016188  0012               	return	
 12347  01618A                     
 12348                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 12349  01618A  0E35               	movlw	low _PortC
 12350  01618C  0100               	movlb	0	; () banked
 12351  01618E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12352  016190  0E00               	movlw	high _PortC
 12353  016192  0100               	movlb	0	; () banked
 12354  016194  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12355  016196  0E01               	movlw	1
 12356  016198  0100               	movlb	0	; () banked
 12357  01619A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12358  01619C  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 12359  0161A0  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12360                           
 12361                           ;LED.c: 43: }
 12362                           
 12363                           ;LED.c: 42: break;
 12364  0161A4  0012               	return	
 12365  0161A6                     l227:
 12366  0161A6  0100               	movlb	0	; () banked
 12367  0161A8  5175               	movf	LED_Set@pLED& (0+255),w,b
 12368                           
 12369                           ; Switch size 1, requested type "space"
 12370                           ; Number of cases is 2, Range of values is 0 to 1
 12371                           ; switch strategies available:
 12372                           ; Name         Instructions Cycles
 12373                           ; simple_byte            7     4 (average)
 12374                           ;	Chosen strategy is simple_byte
 12375  0161AA  0A00               	xorlw	0	; case 0
 12376  0161AC  B4D8               	btfsc	status,2,c
 12377  0161AE  D7DF               	goto	l228
 12378  0161B0  0A01               	xorlw	1	; case 1
 12379  0161B2  A4D8               	btfss	status,2,c
 12380  0161B4  0012               	return	
 12381  0161B6  D7E9               	goto	l230
 12382  0161B8                     __end_of_LED_Set:
 12383                           	opt stack 0
 12384                           tosu	equ	0xFFF
 12385                           tosh	equ	0xFFE
 12386                           tosl	equ	0xFFD
 12387                           pclath	equ	0xFFA
 12388                           tblptru	equ	0xFF8
 12389                           tblptrh	equ	0xFF7
 12390                           tblptrl	equ	0xFF6
 12391                           tablat	equ	0xFF5
 12392                           prodh	equ	0xFF4
 12393                           prodl	equ	0xFF3
 12394                           postinc0	equ	0xFEE
 12395                           wreg	equ	0xFE8
 12396                           indf1	equ	0xFE7
 12397                           postdec1	equ	0xFE5
 12398                           fsr1h	equ	0xFE2
 12399                           fsr1l	equ	0xFE1
 12400                           indf2	equ	0xFDF
 12401                           postinc2	equ	0xFDE
 12402                           postdec2	equ	0xFDD
 12403                           plusw2	equ	0xFDB
 12404                           fsr2h	equ	0xFDA
 12405                           fsr2l	equ	0xFD9
 12406                           status	equ	0xFD8
 12407                           
 12408 ;; *************** function _MXK_Dequeue *****************
 12409 ;; Defined at:
 12410 ;;		line 153 in file "Library/MXK.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;		None
 12413 ;; Auto vars:     Size  Location     Type
 12414 ;;		None
 12415 ;; Return value:  Size  Location     Type
 12416 ;;                  1    wreg      void 
 12417 ;; Registers used:
 12418 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12419 ;; Tracked objects:
 12420 ;;		On entry : 0/0
 12421 ;;		On exit  : 0/0
 12422 ;;		Unchanged: 0/0
 12423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12428 ;;Total ram usage:        0 bytes
 12429 ;; Hardware stack levels used:    1
 12430 ;; Hardware stack levels required when called:   12
 12431 ;; This function calls:
 12432 ;;		Absolute function
 12433 ;;		_Motor_Step
 12434 ;; This function is called by:
 12435 ;;		_initialise
 12436 ;;		_main
 12437 ;; This function uses a non-reentrant model
 12438 ;;
 12439                           
 12440                           	psect	text51
 12441  016594                     __ptext51:
 12442                           	opt stack 0
 12443  016594                     _MXK_Dequeue:
 12444                           	opt stack 17
 12445                           
 12446                           ;MXK.c: 155: if (lQueue)
 12447                           
 12448                           ;incstack = 0
 12449  016594  0100               	movlb	0	; () banked
 12450  016596  51DA               	movf	_lQueue& (0+255),w,b	;volatile
 12451  016598  0100               	movlb	0	; () banked
 12452  01659A  11DB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 12453  01659C  0100               	movlb	0	; () banked
 12454  01659E  11DC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 12455  0165A0  B4D8               	btfsc	status,2,c
 12456  0165A2  D00D               	goto	u13249
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;MXK.c: 156: lQueue();
 12460  0165A4  D801               	call	u13248
 12461  0165A6  D00B               	goto	u13249
 12462  0165A8                     u13248:
 12463  0165A8  0005               	push	
 12464  0165AA  6EFA               	movwf	pclath,c
 12465  0165AC  0100               	movlb	0	; () banked
 12466  0165AE  51DA               	movf	_lQueue& (0+255),w,b	;volatile
 12467  0165B0  6EFD               	movwf	tosl,c
 12468  0165B2  51DB               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 12469  0165B4  6EFE               	movwf	tosh,c
 12470  0165B6  51DC               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 12471  0165B8  6EFF               	movwf	tosu,c
 12472  0165BA  50FA               	movf	pclath,w,c
 12473  0165BC  0012               	return		;indir
 12474  0165BE                     u13249:
 12475                           
 12476                           ;MXK.c: 157: lQueue = 0;
 12477  0165BE  0E00               	movlw	0
 12478  0165C0  0100               	movlb	0	; () banked
 12479  0165C2  6FDA               	movwf	_lQueue& (0+255),b	;volatile
 12480  0165C4  0E00               	movlw	0
 12481  0165C6  0100               	movlb	0	; () banked
 12482  0165C8  6FDB               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12483  0165CA  0E00               	movlw	0
 12484  0165CC  0100               	movlb	0	; () banked
 12485  0165CE  6FDC               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12486                           
 12487                           ; BSR set to: 0
 12488  0165D0  0012               	return		;funcret
 12489  0165D2                     __end_of_MXK_Dequeue:
 12490                           	opt stack 0
 12491                           tosu	equ	0xFFF
 12492                           tosh	equ	0xFFE
 12493                           tosl	equ	0xFFD
 12494                           pclath	equ	0xFFA
 12495                           tblptru	equ	0xFF8
 12496                           tblptrh	equ	0xFF7
 12497                           tblptrl	equ	0xFF6
 12498                           tablat	equ	0xFF5
 12499                           prodh	equ	0xFF4
 12500                           prodl	equ	0xFF3
 12501                           postinc0	equ	0xFEE
 12502                           wreg	equ	0xFE8
 12503                           indf1	equ	0xFE7
 12504                           postdec1	equ	0xFE5
 12505                           fsr1h	equ	0xFE2
 12506                           fsr1l	equ	0xFE1
 12507                           indf2	equ	0xFDF
 12508                           postinc2	equ	0xFDE
 12509                           postdec2	equ	0xFDD
 12510                           plusw2	equ	0xFDB
 12511                           fsr2h	equ	0xFDA
 12512                           fsr2l	equ	0xFD9
 12513                           status	equ	0xFD8
 12514                           
 12515 ;; *************** function _Motor_Step *****************
 12516 ;; Defined at:
 12517 ;;		line 75 in file "Library/Motor.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;		None
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;		None
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      void 
 12524 ;; Registers used:
 12525 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;Total ram usage:        2 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:   11
 12538 ;; This function calls:
 12539 ;;		_MXK_Queue
 12540 ;;		_MXK_Release
 12541 ;;		_MXK_SwitchTo
 12542 ;;		_Port_SetPin
 12543 ;;		_Timer0_Restart
 12544 ;;		_Timer0_Stop
 12545 ;; This function is called by:
 12546 ;;		_Motor_Init
 12547 ;;		_MXK_Dequeue
 12548 ;;		_Timer0_ISR
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           	psect	text52
 12553  0139DC                     __ptext52:
 12554                           	opt stack 0
 12555  0139DC                     _Motor_Step:
 12556                           	opt stack 0
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;Skip over the trampoline to the duplicate function for level 2
 12560  0139DC  B250               	btfsc	btemp,1,c
 12561  0139DE  EFB7  F09F         	goto	i2_Motor_Step
 12562  0139E2                     _Motor_Step$intlevel0:
 12563                           	opt stack 17
 12564                           
 12565                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 12566                           
 12567                           ;incstack = 0
 12568  0139E2  0100               	movlb	0	; () banked
 12569  0139E4  EE20 F004          	lfsr	2,4
 12570  0139E8  51E8               	movf	_lMotor& (0+255),w,b
 12571  0139EA  26D9               	addwf	fsr2l,f,c
 12572  0139EC  51E9               	movf	(_lMotor+1)& (0+255),w,b
 12573  0139EE  22DA               	addwfc	fsr2h,f,c
 12574  0139F0  50DF               	movf	indf2,w,c
 12575  0139F2  EC48  F0B2         	call	_MXK_SwitchTo
 12576  0139F6  0900               	iorlw	0
 12577  0139F8  B4D8               	btfsc	status,2,c
 12578  0139FA  D07A               	goto	l1627
 12579                           
 12580                           ;Motor.c: 78: {
 12581                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 12582  0139FC  C0E8  FFD9         	movff	_lMotor,fsr2l
 12583  013A00  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12584  013A04  50DE               	movf	postinc2,w,c
 12585  013A06  10DE               	iorwf	postinc2,w,c
 12586  013A08  B4D8               	btfsc	status,2,c
 12587  013A0A  D06D               	goto	l1628
 12588                           
 12589                           ;Motor.c: 80: {
 12590                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 12591  013A0C  C0E8  FFD9         	movff	_lMotor,fsr2l
 12592  013A10  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12593  013A14  0E01               	movlw	1
 12594  013A16  BEDB               	btfsc	plusw2,7,c
 12595  013A18  D026               	goto	l1629
 12596  013A1A  0E01               	movlw	1
 12597  013A1C  50DB               	movf	plusw2,w,c
 12598  013A1E  E103               	bnz	u11140
 12599  013A20  04DE               	decf	postinc2,w,c
 12600  013A22  A0D8               	btfss	status,0,c
 12601  013A24  D020               	goto	l1629
 12602  013A26                     u11140:
 12603                           
 12604                           ;Motor.c: 83: {
 12605                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 12606  013A26  C0E8  FFD9         	movff	_lMotor,fsr2l
 12607  013A2A  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12608  013A2E  28DE               	incf	postinc2,w,c
 12609  013A30  E104               	bnz	u11150
 12610  013A32  0E7F               	movlw	127
 12611  013A34  18DE               	xorwf	postinc2,w,c
 12612  013A36  B4D8               	btfsc	status,2,c
 12613  013A38  D007               	goto	l1630
 12614  013A3A                     u11150:
 12615                           
 12616                           ;Motor.c: 85: lMotor->mDelta --;
 12617  013A3A  C0E8  FFD9         	movff	_lMotor,fsr2l
 12618  013A3E  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12619  013A42  06DE               	decf	postinc2,f,c
 12620  013A44  0E00               	movlw	0
 12621  013A46  5ADD               	subwfb	postdec2,f,c
 12622  013A48                     l1630:
 12623                           
 12624                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 12625  013A48  0E9B               	movlw	low _PortE
 12626  013A4A  0100               	movlb	0	; () banked
 12627  013A4C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12628  013A4E  0E01               	movlw	high _PortE
 12629  013A50  0100               	movlb	0	; () banked
 12630  013A52  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12631  013A54  0E00               	movlw	0
 12632  013A56  0100               	movlb	0	; () banked
 12633  013A58  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12634  013A5A  0E01               	movlw	1
 12635  013A5C  0100               	movlb	0	; () banked
 12636  013A5E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12637  013A60  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12638                           
 12639                           ;Motor.c: 88: }
 12640  013A64  D01F               	goto	l1631
 12641  013A66                     l1629:
 12642                           
 12643                           ;Motor.c: 89: else
 12644                           ;Motor.c: 90: {
 12645                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 12646  013A66  C0E8  FFD9         	movff	_lMotor,fsr2l
 12647  013A6A  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12648  013A6E  04DE               	decf	postinc2,w,c
 12649  013A70  E104               	bnz	u11160
 12650  013A72  0E80               	movlw	128
 12651  013A74  18DE               	xorwf	postinc2,w,c
 12652  013A76  B4D8               	btfsc	status,2,c
 12653  013A78  D007               	goto	l1632
 12654  013A7A                     u11160:
 12655                           
 12656                           ;Motor.c: 92: lMotor->mDelta ++;
 12657  013A7A  C0E8  FFD9         	movff	_lMotor,fsr2l
 12658  013A7E  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 12659  013A82  2ADE               	incf	postinc2,f,c
 12660  013A84  0E00               	movlw	0
 12661  013A86  22DD               	addwfc	postdec2,f,c
 12662  013A88                     l1632:
 12663                           
 12664                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 12665  013A88  0E9B               	movlw	low _PortE
 12666  013A8A  0100               	movlb	0	; () banked
 12667  013A8C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12668  013A8E  0E01               	movlw	high _PortE
 12669  013A90  0100               	movlb	0	; () banked
 12670  013A92  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12671  013A94  0E00               	movlw	0
 12672  013A96  0100               	movlb	0	; () banked
 12673  013A98  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12674  013A9A  0E00               	movlw	0
 12675  013A9C  0100               	movlb	0	; () banked
 12676  013A9E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12677  013AA0  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12678  013AA4                     l1631:
 12679                           
 12680                           ;Motor.c: 95: }
 12681                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 12682  013AA4  0E9B               	movlw	low _PortE
 12683  013AA6  0100               	movlb	0	; () banked
 12684  013AA8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12685  013AAA  0E01               	movlw	high _PortE
 12686  013AAC  0100               	movlb	0	; () banked
 12687  013AAE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12688  013AB0  0E01               	movlw	1
 12689  013AB2  0100               	movlb	0	; () banked
 12690  013AB4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12691  013AB6  0E01               	movlw	1
 12692  013AB8  0100               	movlb	0	; () banked
 12693  013ABA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12694  013ABC  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12695                           
 12696                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 12697  013AC0  0E9B               	movlw	low _PortE
 12698  013AC2  0100               	movlb	0	; () banked
 12699  013AC4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12700  013AC6  0E01               	movlw	high _PortE
 12701  013AC8  0100               	movlb	0	; () banked
 12702  013ACA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12703  013ACC  0E01               	movlw	1
 12704  013ACE  0100               	movlb	0	; () banked
 12705  013AD0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12706  013AD2  0E00               	movlw	0
 12707  013AD4  0100               	movlb	0	; () banked
 12708  013AD6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12709  013AD8  EC17  F0A3         	call	_Port_SetPin	;wreg free
 12710                           
 12711                           ;Motor.c: 101: MXK_Release();
 12712  013ADC  ECA6  F0B5         	call	_MXK_Release	;wreg free
 12713                           
 12714                           ;Motor.c: 102: Timer0_Restart();
 12715  013AE0  EC63  F0B6         	call	_Timer0_Restart	;wreg free
 12716                           
 12717                           ;Motor.c: 103: return;
 12718  013AE4  0012               	return	
 12719  013AE6                     l1628:
 12720                           
 12721                           ;Motor.c: 104: }
 12722                           ;Motor.c: 105: MXK_Release();
 12723  013AE6  ECA6  F0B5         	call	_MXK_Release	;wreg free
 12724                           
 12725                           ;Motor.c: 106: Timer0_Stop();
 12726  013AEA  EC94  F0B6         	call	_Timer0_Stop	;wreg free
 12727                           
 12728                           ;Motor.c: 107: return;
 12729  013AEE  0012               	return	
 12730  013AF0                     l1627:
 12731                           
 12732                           ;Motor.c: 108: }
 12733                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 12734  013AF0  C0DD  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 12735  013AF4  C0DE  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 12736  013AF8  C0DF  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 12737  013AFC  EC4E  F0B6         	call	_MXK_Queue	;wreg free
 12738  013B00  0012               	return		;funcret
 12739  013B02                     __end_of_Motor_Step:
 12740                           	opt stack 0
 12741                           tosu	equ	0xFFF
 12742                           tosh	equ	0xFFE
 12743                           tosl	equ	0xFFD
 12744                           pclath	equ	0xFFA
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           postinc0	equ	0xFEE
 12752                           wreg	equ	0xFE8
 12753                           indf1	equ	0xFE7
 12754                           postdec1	equ	0xFE5
 12755                           fsr1h	equ	0xFE2
 12756                           fsr1l	equ	0xFE1
 12757                           indf2	equ	0xFDF
 12758                           postinc2	equ	0xFDE
 12759                           postdec2	equ	0xFDD
 12760                           plusw2	equ	0xFDB
 12761                           fsr2h	equ	0xFDA
 12762                           fsr2l	equ	0xFD9
 12763                           status	equ	0xFD8
 12764                           
 12765 ;; *************** function _Timer0_Stop *****************
 12766 ;; Defined at:
 12767 ;;		line 89 in file "Library/Timer0.c"
 12768 ;; Parameters:    Size  Location     Type
 12769 ;;		None
 12770 ;; Auto vars:     Size  Location     Type
 12771 ;;		None
 12772 ;; Return value:  Size  Location     Type
 12773 ;;                  1    wreg      void 
 12774 ;; Registers used:
 12775 ;;		None
 12776 ;; Tracked objects:
 12777 ;;		On entry : 0/0
 12778 ;;		On exit  : 0/0
 12779 ;;		Unchanged: 0/0
 12780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12785 ;;Total ram usage:        0 bytes
 12786 ;; Hardware stack levels used:    1
 12787 ;; Hardware stack levels required when called:    7
 12788 ;; This function calls:
 12789 ;;		Nothing
 12790 ;; This function is called by:
 12791 ;;		_Motor_Step
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text53
 12796  016D28                     __ptext53:
 12797                           	opt stack 0
 12798  016D28                     _Timer0_Stop:
 12799                           	opt stack 20
 12800                           
 12801                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 12802                           
 12803                           ;incstack = 0
 12804  016D28  9AF2               	bcf	intcon,5,c	;volatile
 12805                           
 12806                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 12807  016D2A  94F2               	bcf	intcon,2,c	;volatile
 12808  016D2C  0012               	return		;funcret
 12809  016D2E                     __end_of_Timer0_Stop:
 12810                           	opt stack 0
 12811                           tosu	equ	0xFFF
 12812                           tosh	equ	0xFFE
 12813                           tosl	equ	0xFFD
 12814                           pclath	equ	0xFFA
 12815                           tblptru	equ	0xFF8
 12816                           tblptrh	equ	0xFF7
 12817                           tblptrl	equ	0xFF6
 12818                           tablat	equ	0xFF5
 12819                           prodh	equ	0xFF4
 12820                           prodl	equ	0xFF3
 12821                           intcon	equ	0xFF2
 12822                           postinc0	equ	0xFEE
 12823                           wreg	equ	0xFE8
 12824                           indf1	equ	0xFE7
 12825                           postdec1	equ	0xFE5
 12826                           fsr1h	equ	0xFE2
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           postdec2	equ	0xFDD
 12831                           plusw2	equ	0xFDB
 12832                           fsr2h	equ	0xFDA
 12833                           fsr2l	equ	0xFD9
 12834                           status	equ	0xFD8
 12835                           
 12836 ;; *************** function _Timer0_Restart *****************
 12837 ;; Defined at:
 12838 ;;		line 83 in file "Library/Timer0.c"
 12839 ;; Parameters:    Size  Location     Type
 12840 ;;		None
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;		None
 12843 ;; Return value:  Size  Location     Type
 12844 ;;                  1    wreg      void 
 12845 ;; Registers used:
 12846 ;;		None
 12847 ;; Tracked objects:
 12848 ;;		On entry : 0/0
 12849 ;;		On exit  : 0/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12856 ;;Total ram usage:        0 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    7
 12859 ;; This function calls:
 12860 ;;		Nothing
 12861 ;; This function is called by:
 12862 ;;		_Motor_Step
 12863 ;; This function uses a non-reentrant model
 12864 ;;
 12865                           
 12866                           	psect	text54
 12867  016CC6                     __ptext54:
 12868                           	opt stack 0
 12869  016CC6                     _Timer0_Restart:
 12870                           	opt stack 20
 12871                           
 12872                           ;Timer0.c: 85: TMR0 = COUNTER;
 12873                           
 12874                           ;incstack = 0
 12875  016CC6  C029  FFD6         	movff	_COUNTER,4054	;volatile
 12876  016CCA  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 12877                           
 12878                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 12879  016CCE  8AF2               	bsf	intcon,5,c	;volatile
 12880  016CD0  0012               	return		;funcret
 12881  016CD2                     __end_of_Timer0_Restart:
 12882                           	opt stack 0
 12883                           tosu	equ	0xFFF
 12884                           tosh	equ	0xFFE
 12885                           tosl	equ	0xFFD
 12886                           pclath	equ	0xFFA
 12887                           tblptru	equ	0xFF8
 12888                           tblptrh	equ	0xFF7
 12889                           tblptrl	equ	0xFF6
 12890                           tablat	equ	0xFF5
 12891                           prodh	equ	0xFF4
 12892                           prodl	equ	0xFF3
 12893                           intcon	equ	0xFF2
 12894                           postinc0	equ	0xFEE
 12895                           wreg	equ	0xFE8
 12896                           indf1	equ	0xFE7
 12897                           postdec1	equ	0xFE5
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           indf2	equ	0xFDF
 12901                           postinc2	equ	0xFDE
 12902                           postdec2	equ	0xFDD
 12903                           plusw2	equ	0xFDB
 12904                           fsr2h	equ	0xFDA
 12905                           fsr2l	equ	0xFD9
 12906                           status	equ	0xFD8
 12907                           
 12908 ;; *************** function _MXK_SwitchTo *****************
 12909 ;; Defined at:
 12910 ;;		line 105 in file "Library/MXK.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;  pModule         1    wreg     enum E6927
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;  pModule         1    7[BANK0 ] enum E6927
 12915 ;;  CUR             1    6[BANK0 ] unsigned char 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;                  1    wreg      unsigned char 
 12918 ;; Registers used:
 12919 ;;		wreg, status,2, status,0, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;Total ram usage:        2 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    8
 12932 ;; This function calls:
 12933 ;;		_delay_us
 12934 ;; This function is called by:
 12935 ;;		_Motor_Step
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           	psect	text55
 12940  016490                     __ptext55:
 12941                           	opt stack 0
 12942  016490                     _MXK_SwitchTo:
 12943                           	opt stack 19
 12944                           
 12945                           ;incstack = 0
 12946                           ;MXK_SwitchTo@pModule stored from wreg
 12947  016490  0100               	movlb	0	; () banked
 12948  016492  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 12949                           
 12950                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 12951  016494  5086               	movf	3974,w,c	;volatile
 12952  016496  0B0F               	andlw	15
 12953  016498  0100               	movlb	0	; () banked
 12954  01649A  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 12958  01649C  504A               	movf	_Bus_State,w,c
 12959  01649E  A4D8               	btfss	status,2,c
 12960  0164A0  D002               	goto	l1730
 12961                           
 12962                           ; BSR set to: 0
 12963                           ;MXK.c: 110: return 0;
 12964  0164A2  0E00               	movlw	0
 12965                           
 12966                           ; BSR set to: 0
 12967  0164A4  0012               	return	
 12968  0164A6                     l1730:
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 12972                           
 12973                           ; BSR set to: 0
 12974  0164A6  0E00               	movlw	0
 12975  0164A8  6E4A               	movwf	_Bus_State,c
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;MXK.c: 114: if (CUR != pModule)
 12979  0164AA  0100               	movlb	0	; () banked
 12980  0164AC  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 12981  0164AE  0100               	movlb	0	; () banked
 12982  0164B0  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 12983  0164B2  B4D8               	btfsc	status,2,c
 12984  0164B4  D00C               	goto	l1732
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;MXK.c: 115: {
 12988                           ;MXK.c: 116: PORTG &= ~(0xF);
 12989  0164B6  0EF0               	movlw	240
 12990  0164B8  1686               	andwf	3974,f,c	;volatile
 12991                           
 12992                           ;MXK.c: 117: PORTG |= pModule;
 12993  0164BA  0100               	movlb	0	; () banked
 12994  0164BC  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 12995  0164BE  1286               	iorwf	3974,f,c	;volatile
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;MXK.c: 120: delay_us(10);
 12999  0164C0  0E00               	movlw	0
 13000  0164C2  0100               	movlb	0	; () banked
 13001  0164C4  6F61               	movwf	(delay_us@us+1)& (0+255),b
 13002  0164C6  0E0A               	movlw	10
 13003  0164C8  6F60               	movwf	delay_us@us& (0+255),b
 13004  0164CA  EC8B  F0B0         	call	_delay_us	;wreg free
 13005  0164CE                     l1732:
 13006                           
 13007                           ;MXK.c: 121: }
 13008                           ;MXK.c: 122: return 1;
 13009  0164CE  0E01               	movlw	1
 13010  0164D0  0012               	return	
 13011  0164D2                     __end_of_MXK_SwitchTo:
 13012                           	opt stack 0
 13013                           tosu	equ	0xFFF
 13014                           tosh	equ	0xFFE
 13015                           tosl	equ	0xFFD
 13016                           pclath	equ	0xFFA
 13017                           tblptru	equ	0xFF8
 13018                           tblptrh	equ	0xFF7
 13019                           tblptrl	equ	0xFF6
 13020                           tablat	equ	0xFF5
 13021                           prodh	equ	0xFF4
 13022                           prodl	equ	0xFF3
 13023                           intcon	equ	0xFF2
 13024                           postinc0	equ	0xFEE
 13025                           wreg	equ	0xFE8
 13026                           indf1	equ	0xFE7
 13027                           postdec1	equ	0xFE5
 13028                           fsr1h	equ	0xFE2
 13029                           fsr1l	equ	0xFE1
 13030                           indf2	equ	0xFDF
 13031                           postinc2	equ	0xFDE
 13032                           postdec2	equ	0xFDD
 13033                           plusw2	equ	0xFDB
 13034                           fsr2h	equ	0xFDA
 13035                           fsr2l	equ	0xFD9
 13036                           status	equ	0xFD8
 13037                           
 13038 ;; *************** function _MXK_Release *****************
 13039 ;; Defined at:
 13040 ;;		line 130 in file "Library/MXK.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;		None
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;		None
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      unsigned char 
 13047 ;; Registers used:
 13048 ;;		wreg, status,2, status,0
 13049 ;; Tracked objects:
 13050 ;;		On entry : 0/0
 13051 ;;		On exit  : 0/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13058 ;;Total ram usage:        0 bytes
 13059 ;; Hardware stack levels used:    1
 13060 ;; Hardware stack levels required when called:    7
 13061 ;; This function calls:
 13062 ;;		Nothing
 13063 ;; This function is called by:
 13064 ;;		_Motor_Step
 13065 ;;		_initialise
 13066 ;;		_main
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text56
 13071  016B4C                     __ptext56:
 13072                           	opt stack 0
 13073  016B4C                     _MXK_Release:
 13074                           	opt stack 22
 13075                           
 13076                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 13077                           
 13078                           ;incstack = 0
 13079  016B4C  0E01               	movlw	1
 13080  016B4E  6E4A               	movwf	_Bus_State,c
 13081                           
 13082                           ;MXK.c: 134: if (lQueue != 0)
 13083  016B50  0100               	movlb	0	; () banked
 13084  016B52  51DA               	movf	_lQueue& (0+255),w,b	;volatile
 13085  016B54  0100               	movlb	0	; () banked
 13086  016B56  11DB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 13087  016B58  0100               	movlb	0	; () banked
 13088  016B5A  11DC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 13089  016B5C  B4D8               	btfsc	status,2,c
 13090  016B5E  D002               	goto	l1735
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;MXK.c: 135: return 1;
 13094  016B60  0E01               	movlw	1
 13095                           
 13096                           ; BSR set to: 0
 13097  016B62  0012               	return	
 13098  016B64                     l1735:
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;MXK.c: 137: return 0;
 13102                           
 13103                           ; BSR set to: 0
 13104  016B64  0E00               	movlw	0
 13105  016B66  0012               	return	
 13106  016B68                     __end_of_MXK_Release:
 13107                           	opt stack 0
 13108                           tosu	equ	0xFFF
 13109                           tosh	equ	0xFFE
 13110                           tosl	equ	0xFFD
 13111                           pclath	equ	0xFFA
 13112                           tblptru	equ	0xFF8
 13113                           tblptrh	equ	0xFF7
 13114                           tblptrl	equ	0xFF6
 13115                           tablat	equ	0xFF5
 13116                           prodh	equ	0xFF4
 13117                           prodl	equ	0xFF3
 13118                           intcon	equ	0xFF2
 13119                           postinc0	equ	0xFEE
 13120                           wreg	equ	0xFE8
 13121                           indf1	equ	0xFE7
 13122                           postdec1	equ	0xFE5
 13123                           fsr1h	equ	0xFE2
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           plusw2	equ	0xFDB
 13129                           fsr2h	equ	0xFDA
 13130                           fsr2l	equ	0xFD9
 13131                           status	equ	0xFD8
 13132                           
 13133 ;; *************** function _MXK_Queue *****************
 13134 ;; Defined at:
 13135 ;;		line 144 in file "Library/MXK.c"
 13136 ;; Parameters:    Size  Location     Type
 13137 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 13138 ;;		 -> Absolute function(1), Motor_Step(1), 
 13139 ;; Auto vars:     Size  Location     Type
 13140 ;;		None
 13141 ;; Return value:  Size  Location     Type
 13142 ;;                  1    wreg      void 
 13143 ;; Registers used:
 13144 ;;		wreg, status,2, status,0
 13145 ;; Tracked objects:
 13146 ;;		On entry : 0/0
 13147 ;;		On exit  : 0/0
 13148 ;;		Unchanged: 0/0
 13149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13150 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13154 ;;Total ram usage:        3 bytes
 13155 ;; Hardware stack levels used:    1
 13156 ;; Hardware stack levels required when called:    7
 13157 ;; This function calls:
 13158 ;;		Nothing
 13159 ;; This function is called by:
 13160 ;;		_Motor_Step
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text57
 13165  016C9C                     __ptext57:
 13166                           	opt stack 0
 13167  016C9C                     _MXK_Queue:
 13168                           	opt stack 20
 13169                           
 13170                           ;MXK.c: 146: lQueue = pCallback;
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;incstack = 0
 13174  016C9C  C060  F0DA         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 13175  016CA0  C061  F0DB         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 13176  016CA4  C062  F0DC         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 13177  016CA8  0012               	return		;funcret
 13178  016CAA                     __end_of_MXK_Queue:
 13179                           	opt stack 0
 13180                           tosu	equ	0xFFF
 13181                           tosh	equ	0xFFE
 13182                           tosl	equ	0xFFD
 13183                           pclath	equ	0xFFA
 13184                           tblptru	equ	0xFF8
 13185                           tblptrh	equ	0xFF7
 13186                           tblptrl	equ	0xFF6
 13187                           tablat	equ	0xFF5
 13188                           prodh	equ	0xFF4
 13189                           prodl	equ	0xFF3
 13190                           intcon	equ	0xFF2
 13191                           postinc0	equ	0xFEE
 13192                           wreg	equ	0xFE8
 13193                           indf1	equ	0xFE7
 13194                           postdec1	equ	0xFE5
 13195                           fsr1h	equ	0xFE2
 13196                           fsr1l	equ	0xFE1
 13197                           indf2	equ	0xFDF
 13198                           postinc2	equ	0xFDE
 13199                           postdec2	equ	0xFDD
 13200                           plusw2	equ	0xFDB
 13201                           fsr2h	equ	0xFDA
 13202                           fsr2l	equ	0xFD9
 13203                           status	equ	0xFD8
 13204                           
 13205 ;; *************** function _MXK_BlockSwitchTo *****************
 13206 ;; Defined at:
 13207 ;;		line 82 in file "Library/MXK.c"
 13208 ;; Parameters:    Size  Location     Type
 13209 ;;  pModule         1    wreg     enum E6927
 13210 ;; Auto vars:     Size  Location     Type
 13211 ;;  pModule         1    7[BANK0 ] enum E6927
 13212 ;;  CUR             1    6[BANK0 ] unsigned char 
 13213 ;; Return value:  Size  Location     Type
 13214 ;;                  1    wreg      unsigned char 
 13215 ;; Registers used:
 13216 ;;		wreg, status,2, status,0, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13223 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;Total ram usage:        2 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    8
 13229 ;; This function calls:
 13230 ;;		_delay_us
 13231 ;; This function is called by:
 13232 ;;		_initialise
 13233 ;;		_main
 13234 ;; This function uses a non-reentrant model
 13235 ;;
 13236                           
 13237                           	psect	text58
 13238  0165D2                     __ptext58:
 13239                           	opt stack 0
 13240  0165D2                     _MXK_BlockSwitchTo:
 13241                           	opt stack 21
 13242                           
 13243                           ;incstack = 0
 13244                           ;MXK_BlockSwitchTo@pModule stored from wreg
 13245  0165D2  0100               	movlb	0	; () banked
 13246  0165D4  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 13247                           
 13248                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 13249  0165D6  5086               	movf	3974,w,c	;volatile
 13250  0165D8  0B0F               	andlw	15
 13251  0165DA  0100               	movlb	0	; () banked
 13252  0165DC  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 13253  0165DE                     
 13254                           ; BSR set to: 0
 13255                           
 13256                           ; BSR set to: 0
 13257  0165DE  504A               	movf	_Bus_State,w,c
 13258  0165E0  B4D8               	btfsc	status,2,c
 13259  0165E2  D7FD               	goto	l1724
 13260                           
 13261                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 13262  0165E4  0E00               	movlw	0
 13263  0165E6  6E4A               	movwf	_Bus_State,c
 13264                           
 13265                           ;MXK.c: 90: if (CUR != pModule)
 13266  0165E8  0100               	movlb	0	; () banked
 13267  0165EA  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 13268  0165EC  0100               	movlb	0	; () banked
 13269  0165EE  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 13270  0165F0  B4D8               	btfsc	status,2,c
 13271  0165F2  D00C               	goto	l1726
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;MXK.c: 91: {
 13275                           ;MXK.c: 92: PORTG &= ~(0xF);
 13276  0165F4  0EF0               	movlw	240
 13277  0165F6  1686               	andwf	3974,f,c	;volatile
 13278                           
 13279                           ;MXK.c: 93: PORTG |= pModule;
 13280  0165F8  0100               	movlb	0	; () banked
 13281  0165FA  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 13282  0165FC  1286               	iorwf	3974,f,c	;volatile
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;MXK.c: 96: delay_us(10);
 13286  0165FE  0E00               	movlw	0
 13287  016600  0100               	movlb	0	; () banked
 13288  016602  6F61               	movwf	(delay_us@us+1)& (0+255),b
 13289  016604  0E0A               	movlw	10
 13290  016606  6F60               	movwf	delay_us@us& (0+255),b
 13291  016608  EC8B  F0B0         	call	_delay_us	;wreg free
 13292  01660C                     l1726:
 13293                           
 13294                           ;MXK.c: 97: }
 13295                           ;MXK.c: 98: return 1;
 13296  01660C  0E01               	movlw	1
 13297  01660E  0012               	return	
 13298  016610                     __end_of_MXK_BlockSwitchTo:
 13299                           	opt stack 0
 13300                           tosu	equ	0xFFF
 13301                           tosh	equ	0xFFE
 13302                           tosl	equ	0xFFD
 13303                           pclath	equ	0xFFA
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           postinc0	equ	0xFEE
 13312                           wreg	equ	0xFE8
 13313                           indf1	equ	0xFE7
 13314                           postdec1	equ	0xFE5
 13315                           fsr1h	equ	0xFE2
 13316                           fsr1l	equ	0xFE1
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           postdec2	equ	0xFDD
 13320                           plusw2	equ	0xFDB
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function _delay_us *****************
 13326 ;; Defined at:
 13327 ;;		line 255 in file "Library/Types.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;  us              2    0[BANK0 ] unsigned short 
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  u               4    2[BANK0 ] unsigned long 
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;Total ram usage:        6 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    7
 13348 ;; This function calls:
 13349 ;;		Nothing
 13350 ;; This function is called by:
 13351 ;;		_MXK_BlockSwitchTo
 13352 ;;		_MXK_SwitchTo
 13353 ;; This function uses a non-reentrant model
 13354 ;;
 13355                           
 13356                           	psect	text59
 13357  016116                     __ptext59:
 13358                           	opt stack 0
 13359  016116                     _delay_us:
 13360                           	opt stack 19
 13361                           
 13362                           ;Types.c: 256: unsigned long u;
 13363                           ;Types.c: 257: while (us--) {
 13364                           
 13365                           ;incstack = 0
 13366  016116  D01C               	goto	u9690
 13367  016118                     l12496:
 13368                           
 13369                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 13370  016118  0E00               	movlw	0
 13371  01611A  0100               	movlb	0	; () banked
 13372  01611C  6F62               	movwf	delay_us@u& (0+255),b
 13373  01611E  0E00               	movlw	0
 13374  016120  6F63               	movwf	(delay_us@u+1)& (0+255),b
 13375  016122  0E00               	movlw	0
 13376  016124  6F64               	movwf	(delay_us@u+2)& (0+255),b
 13377  016126  0E00               	movlw	0
 13378  016128  6F65               	movwf	(delay_us@u+3)& (0+255),b
 13379  01612A                     l12498:
 13380                           
 13381                           ; BSR set to: 0
 13382  01612A  0100               	movlb	0	; () banked
 13383  01612C  5162               	movf	delay_us@u& (0+255),w,b
 13384  01612E  0100               	movlb	0	; () banked
 13385  016130  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 13386  016132  0100               	movlb	0	; () banked
 13387  016134  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 13388  016136  0100               	movlb	0	; () banked
 13389  016138  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 13390  01613A  A4D8               	btfss	status,2,c
 13391  01613C  D009               	goto	u9690
 13392                           
 13393                           ; BSR set to: 0
 13394                           
 13395                           ; BSR set to: 0
 13396  01613E  F000               	nop		; ;# 
 13397  016140  0E01               	movlw	1
 13398  016142  0100               	movlb	0	; () banked
 13399  016144  2762               	addwf	delay_us@u& (0+255),f,b
 13400  016146  0E00               	movlw	0
 13401  016148  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 13402  01614A  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 13403  01614C  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 13404  01614E  D7ED               	goto	l12498
 13405  016150                     u9690:
 13406                           
 13407                           ; BSR set to: 0
 13408                           
 13409                           ; BSR set to: 0
 13410  016150  0100               	movlb	0	; () banked
 13411  016152  0760               	decf	delay_us@us& (0+255),f,b
 13412  016154  A0D8               	btfss	status,0,c
 13413  016156  0761               	decf	(delay_us@us+1)& (0+255),f,b
 13414  016158  0100               	movlb	0	; () banked
 13415  01615A  2960               	incf	delay_us@us& (0+255),w,b
 13416  01615C  E1DD               	bnz	l12496
 13417  01615E  0100               	movlb	0	; () banked
 13418  016160  2961               	incf	(delay_us@us+1)& (0+255),w,b
 13419  016162  B4D8               	btfsc	status,2,c
 13420  016164  0012               	return	
 13421  016166  D7D8               	goto	l832
 13422  016168                     __end_of_delay_us:
 13423                           	opt stack 0
 13424                           tosu	equ	0xFFF
 13425                           tosh	equ	0xFFE
 13426                           tosl	equ	0xFFD
 13427                           pclath	equ	0xFFA
 13428                           tblptru	equ	0xFF8
 13429                           tblptrh	equ	0xFF7
 13430                           tblptrl	equ	0xFF6
 13431                           tablat	equ	0xFF5
 13432                           prodh	equ	0xFF4
 13433                           prodl	equ	0xFF3
 13434                           intcon	equ	0xFF2
 13435                           postinc0	equ	0xFEE
 13436                           wreg	equ	0xFE8
 13437                           indf1	equ	0xFE7
 13438                           postdec1	equ	0xFE5
 13439                           fsr1h	equ	0xFE2
 13440                           fsr1l	equ	0xFE1
 13441                           indf2	equ	0xFDF
 13442                           postinc2	equ	0xFDE
 13443                           postdec2	equ	0xFDD
 13444                           plusw2	equ	0xFDB
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449 ;; *************** function _LCD_Init *****************
 13450 ;; Defined at:
 13451 ;;		line 172 in file "Library/LCD.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;		None
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  i               2   55[BANK0 ] unsigned short 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  1    wreg      void 
 13458 ;; Registers used:
 13459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;Total ram usage:        4 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:   15
 13472 ;; This function calls:
 13473 ;;		_Configure_GPIOs
 13474 ;;		_LCD_Fill
 13475 ;;		_LCD_Write
 13476 ;;		_Set_Rotation
 13477 ;;		_delay_ms
 13478 ;; This function is called by:
 13479 ;;		_initialise
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           	psect	text60
 13484  01331C                     __ptext60:
 13485                           	opt stack 0
 13486  01331C                     _LCD_Init:
 13487                           	opt stack 14
 13488                           
 13489                           ;LCD.c: 174: UINT16 i;
 13490                           ;LCD.c: 175: Configure_GPIOs();
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;incstack = 0
 13494  01331C  EC9D  F0AD         	call	_Configure_GPIOs	;wreg free
 13495                           
 13496                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 13497  013320  0E00               	movlw	0
 13498  013322  0100               	movlb	0	; () banked
 13499  013324  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 13500  013326  0E00               	movlw	0
 13501  013328  6F97               	movwf	LCD_Init@i& (0+255),b
 13502                           
 13503                           ; BSR set to: 0
 13504  01332A  0100               	movlb	0	; () banked
 13505  01332C  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13506  01332E  E106               	bnz	u11510
 13507  013330  0E59               	movlw	89
 13508  013332  0100               	movlb	0	; () banked
 13509  013334  5D97               	subwf	LCD_Init@i& (0+255),w,b
 13510  013336  B0D8               	btfsc	status,0,c
 13511  013338  D08B               	goto	u11550
 13512  01333A  D001               	goto	l85
 13513  01333C                     u11510:
 13514                           
 13515                           ; BSR set to: 0
 13516  01333C  D089               	goto	u11550
 13517  01333E                     l85:
 13518                           
 13519                           ; BSR set to: 0
 13520                           ;LCD.c: 178: {
 13521                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 13522                           
 13523                           ; BSR set to: 0
 13524  01333E  90D8               	bcf	status,0,c
 13525  013340  0100               	movlb	0	; () banked
 13526  013342  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13527  013344  6EF6               	movwf	tblptrl,c
 13528  013346  0100               	movlb	0	; () banked
 13529  013348  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13530  01334A  6EF7               	movwf	tblptrh,c
 13531  01334C  0EE3               	movlw	low _InitList
 13532  01334E  26F6               	addwf	tblptrl,f,c
 13533  013350  0EFB               	movlw	high _InitList
 13534  013352  22F7               	addwfc	tblptrh,f,c
 13535  013354                     	if	1	;There are 3 active tblptr bytes
 13536  013354  6AF8               	clrf	tblptru,c
 13537  013356  0E00               	movlw	low (__mediumconst shr (0+16))
 13538  013358  22F8               	addwfc	tblptru,f,c
 13539  01335A                     	endif
 13540  01335A  0009               	tblrd		*+
 13541  01335C  0E80               	movlw	128
 13542  01335E  18F5               	xorwf	tablat,w,c
 13543  013360  0009               	tblrd		*+
 13544  013362  10F5               	iorwf	tablat,w,c
 13545  013364  A4D8               	btfss	status,2,c
 13546  013366  D022               	goto	l87
 13547                           
 13548                           ; BSR set to: 0
 13549  013368  0100               	movlb	0	; () banked
 13550  01336A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13551  01336C  E11F               	bnz	l14062
 13552  01336E  0E58               	movlw	88
 13553  013370  0100               	movlb	0	; () banked
 13554  013372  5D97               	subwf	LCD_Init@i& (0+255),w,b
 13555  013374  B0D8               	btfsc	status,0,c
 13556  013376  D01A               	goto	l87
 13557                           
 13558                           ; BSR set to: 0
 13559                           ;LCD.c: 180: delay_ms(InitList[++i]);
 13560  013378  0100               	movlb	0	; () banked
 13561  01337A  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 13562  01337C  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 13563  01337E  90D8               	bcf	status,0,c
 13564  013380  0100               	movlb	0	; () banked
 13565  013382  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13566  013384  6EF6               	movwf	tblptrl,c
 13567  013386  0100               	movlb	0	; () banked
 13568  013388  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13569  01338A  6EF7               	movwf	tblptrh,c
 13570  01338C  0EE3               	movlw	low _InitList
 13571  01338E  26F6               	addwf	tblptrl,f,c
 13572  013390  0EFB               	movlw	high _InitList
 13573  013392  22F7               	addwfc	tblptrh,f,c
 13574  013394                     	if	1	;There are 3 active tblptr bytes
 13575  013394  6AF8               	clrf	tblptru,c
 13576  013396  0E00               	movlw	low (__mediumconst shr (0+16))
 13577  013398  22F8               	addwfc	tblptru,f,c
 13578  01339A                     	endif
 13579  01339A  0009               	tblrd		*+
 13580  01339C  CFF5 F060          	movff	tablat,delay_ms@ms
 13581  0133A0  000A               	tblrd		*-
 13582  0133A2  CFF5 F061          	movff	tablat,delay_ms@ms+1
 13583  0133A6  EC0B  F0AE         	call	_delay_ms	;wreg free
 13584  0133AA  D04B               	goto	l90
 13585  0133AC                     l87:
 13586  0133AC                     l14062:
 13587                           
 13588                           ;LCD.c: 181: else
 13589                           ;LCD.c: 182: {
 13590                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 13591  0133AC  90D8               	bcf	status,0,c
 13592  0133AE  0100               	movlb	0	; () banked
 13593  0133B0  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13594  0133B2  6EF6               	movwf	tblptrl,c
 13595  0133B4  0100               	movlb	0	; () banked
 13596  0133B6  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13597  0133B8  6EF7               	movwf	tblptrh,c
 13598  0133BA  0EE3               	movlw	low _InitList
 13599  0133BC  26F6               	addwf	tblptrl,f,c
 13600  0133BE  0EFB               	movlw	high _InitList
 13601  0133C0  22F7               	addwfc	tblptrh,f,c
 13602  0133C2                     	if	1	;There are 3 active tblptr bytes
 13603  0133C2  6AF8               	clrf	tblptru,c
 13604  0133C4  0E00               	movlw	low (__mediumconst shr (0+16))
 13605  0133C6  22F8               	addwfc	tblptru,f,c
 13606  0133C8                     	endif
 13607  0133C8  0009               	tblrd		*+
 13608  0133CA  0E00               	movlw	0
 13609  0133CC  5EF5               	subwf	tablat,f,c
 13610  0133CE  0009               	tblrd		*+
 13611  0133D0  0E01               	movlw	1
 13612  0133D2  5AF5               	subwfb	tablat,f,c
 13613  0133D4  A0D8               	btfss	status,0,c
 13614  0133D6  D020               	goto	l89
 13615                           
 13616                           ; BSR set to: 0
 13617  0133D8  0E00               	movlw	0
 13618  0133DA  0100               	movlb	0	; () banked
 13619  0133DC  6F63               	movwf	LCD_Write@mode& (0+255),b
 13620  0133DE  90D8               	bcf	status,0,c
 13621  0133E0  0100               	movlb	0	; () banked
 13622  0133E2  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13623  0133E4  6EF6               	movwf	tblptrl,c
 13624  0133E6  0100               	movlb	0	; () banked
 13625  0133E8  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13626  0133EA  6EF7               	movwf	tblptrh,c
 13627  0133EC  0EE3               	movlw	low _InitList
 13628  0133EE  26F6               	addwf	tblptrl,f,c
 13629  0133F0  0EFB               	movlw	high _InitList
 13630  0133F2  22F7               	addwfc	tblptrh,f,c
 13631  0133F4                     	if	1	;There are 3 active tblptr bytes
 13632  0133F4  6AF8               	clrf	tblptru,c
 13633  0133F6  0E00               	movlw	low (__mediumconst shr (0+16))
 13634  0133F8  22F8               	addwfc	tblptru,f,c
 13635  0133FA                     	endif
 13636  0133FA  0009               	tblrd		*+
 13637  0133FC  CFF5 F095          	movff	tablat,??_LCD_Init
 13638  013400  0009               	tblrd		*+
 13639  013402  CFF5 F096          	movff	tablat,??_LCD_Init+1
 13640  013406  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 13641  01340A  0100               	movlb	0	; () banked
 13642  01340C  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 13643  01340E  0100               	movlb	0	; () banked
 13644  013410  5195               	movf	??_LCD_Init& (0+255),w,b
 13645  013412  EC1C  F0B5         	call	_LCD_Write
 13646  013416  D015               	goto	l90
 13647  013418                     l89:
 13648                           
 13649                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 13650  013418  0E01               	movlw	1
 13651  01341A  0100               	movlb	0	; () banked
 13652  01341C  6F63               	movwf	LCD_Write@mode& (0+255),b
 13653  01341E  90D8               	bcf	status,0,c
 13654  013420  0100               	movlb	0	; () banked
 13655  013422  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13656  013424  6EF6               	movwf	tblptrl,c
 13657  013426  0100               	movlb	0	; () banked
 13658  013428  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13659  01342A  6EF7               	movwf	tblptrh,c
 13660  01342C  0EE3               	movlw	low _InitList
 13661  01342E  26F6               	addwf	tblptrl,f,c
 13662  013430  0EFB               	movlw	high _InitList
 13663  013432  22F7               	addwfc	tblptrh,f,c
 13664  013434                     	if	1	;There are 3 active tblptr bytes
 13665  013434  6AF8               	clrf	tblptru,c
 13666  013436  0E00               	movlw	low (__mediumconst shr (0+16))
 13667  013438  22F8               	addwfc	tblptru,f,c
 13668  01343A                     	endif
 13669  01343A  0008               	tblrd		*
 13670  01343C  50F5               	movf	tablat,w,c
 13671  01343E  EC1C  F0B5         	call	_LCD_Write
 13672  013442                     l90:
 13673  013442  0100               	movlb	0	; () banked
 13674  013444  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 13675  013446  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 13676                           
 13677                           ; BSR set to: 0
 13678  013448  0100               	movlb	0	; () banked
 13679  01344A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13680  01344C  E101               	bnz	l14072
 13681  01344E  D770               	goto	L9
 13682  013450                     u11550:
 13683  013450                     l14072:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;LCD.c: 185: }
 13687                           ;LCD.c: 186: }
 13688                           ;LCD.c: 187: delay_ms(100);
 13689  013450  0E00               	movlw	0
 13690  013452  0100               	movlb	0	; () banked
 13691  013454  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13692  013456  0E64               	movlw	100
 13693  013458  6F60               	movwf	delay_ms@ms& (0+255),b
 13694  01345A  EC0B  F0AE         	call	_delay_ms	;wreg free
 13695                           
 13696                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 13697  01345E  0E00               	movlw	0
 13698  013460  0100               	movlb	0	; () banked
 13699  013462  6F63               	movwf	LCD_Write@mode& (0+255),b
 13700  013464  0E29               	movlw	41
 13701  013466  EC1C  F0B5         	call	_LCD_Write
 13702                           
 13703                           ;LCD.c: 189: Set_Rotation(1);
 13704  01346A  0E01               	movlw	1
 13705  01346C  EC96  F0A9         	call	_Set_Rotation
 13706                           
 13707                           ;LCD.c: 191: delay_ms(100);
 13708  013470  0E00               	movlw	0
 13709  013472  0100               	movlb	0	; () banked
 13710  013474  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13711  013476  0E64               	movlw	100
 13712  013478  6F60               	movwf	delay_ms@ms& (0+255),b
 13713  01347A  EC0B  F0AE         	call	_delay_ms	;wreg free
 13714                           
 13715                           ;LCD.c: 192: LCD_Fill(0x0000);
 13716  01347E  0E00               	movlw	0
 13717  013480  0100               	movlb	0	; () banked
 13718  013482  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 13719  013484  0E00               	movlw	0
 13720  013486  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 13721  013488  EC5F  F0B0         	call	_LCD_Fill	;wreg free
 13722  01348C  0012               	return		;funcret
 13723  01348E                     __end_of_LCD_Init:
 13724                           	opt stack 0
 13725                           tosu	equ	0xFFF
 13726                           tosh	equ	0xFFE
 13727                           tosl	equ	0xFFD
 13728                           pclath	equ	0xFFA
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           postinc0	equ	0xFEE
 13737                           wreg	equ	0xFE8
 13738                           indf1	equ	0xFE7
 13739                           postdec1	equ	0xFE5
 13740                           fsr1h	equ	0xFE2
 13741                           fsr1l	equ	0xFE1
 13742                           indf2	equ	0xFDF
 13743                           postinc2	equ	0xFDE
 13744                           postdec2	equ	0xFDD
 13745                           plusw2	equ	0xFDB
 13746                           fsr2h	equ	0xFDA
 13747                           fsr2l	equ	0xFD9
 13748                           status	equ	0xFD8
 13749                           
 13750 ;; *************** function _Set_Rotation *****************
 13751 ;; Defined at:
 13752 ;;		line 248 in file "Library/LCD.c"
 13753 ;; Parameters:    Size  Location     Type
 13754 ;;  m               1    wreg     unsigned char 
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;  m               1    5[BANK0 ] unsigned char 
 13757 ;;  rotation        1    6[BANK0 ] unsigned char 
 13758 ;; Return value:  Size  Location     Type
 13759 ;;                  1    wreg      void 
 13760 ;; Registers used:
 13761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13762 ;; Tracked objects:
 13763 ;;		On entry : 0/0
 13764 ;;		On exit  : 0/0
 13765 ;;		Unchanged: 0/0
 13766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;Total ram usage:        2 bytes
 13772 ;; Hardware stack levels used:    1
 13773 ;; Hardware stack levels required when called:    9
 13774 ;; This function calls:
 13775 ;;		_LCD_Write
 13776 ;; This function is called by:
 13777 ;;		_LCD_Init
 13778 ;; This function uses a non-reentrant model
 13779 ;;
 13780                           
 13781                           	psect	text61
 13782  01532C                     __ptext61:
 13783                           	opt stack 0
 13784  01532C                     _Set_Rotation:
 13785                           	opt stack 19
 13786                           
 13787                           ;incstack = 0
 13788                           ;Set_Rotation@m stored from wreg
 13789  01532C  0100               	movlb	0	; () banked
 13790  01532E  6F65               	movwf	Set_Rotation@m& (0+255),b
 13791                           
 13792                           ;LCD.c: 250: UINT8 rotation = 0x00;
 13793  015330  0E00               	movlw	0
 13794  015332  0100               	movlb	0	; () banked
 13795  015334  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 13799  015336  0E00               	movlw	0
 13800  015338  0100               	movlb	0	; () banked
 13801  01533A  6F63               	movwf	LCD_Write@mode& (0+255),b
 13802  01533C  0E36               	movlw	54
 13803  01533E  EC1C  F0B5         	call	_LCD_Write
 13804                           
 13805                           ;LCD.c: 253: rotation = (m % 4);
 13806  015342  0100               	movlb	0	; () banked
 13807  015344  5165               	movf	Set_Rotation@m& (0+255),w,b
 13808  015346  0B03               	andlw	3
 13809  015348  0100               	movlb	0	; () banked
 13810  01534A  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 13811                           
 13812                           ;LCD.c: 255: switch(rotation)
 13813  01534C  D02C               	goto	l117
 13814  01534E                     
 13815                           ; BSR set to: 0
 13816                           ;LCD.c: 258: {
 13817                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 13818                           
 13819                           ; BSR set to: 0
 13820  01534E  0E01               	movlw	1
 13821  015350  0100               	movlb	0	; () banked
 13822  015352  6F63               	movwf	LCD_Write@mode& (0+255),b
 13823  015354  0EC8               	movlw	200
 13824  015356  EC1C  F0B5         	call	_LCD_Write
 13825                           
 13826                           ;LCD.c: 260: w = 128;
 13827  01535A  0E80               	movlw	128
 13828  01535C  6E4F               	movwf	_w,c
 13829                           
 13830                           ;LCD.c: 261: l = 128;
 13831  01535E  0E80               	movlw	128
 13832  015360  6E4E               	movwf	_l,c
 13833                           
 13834                           ;LCD.c: 262: break;
 13835  015362  0012               	return	
 13836  015364                     
 13837                           ;LCD.c: 265: {
 13838                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 13839  015364  0E01               	movlw	1
 13840  015366  0100               	movlb	0	; () banked
 13841  015368  6F63               	movwf	LCD_Write@mode& (0+255),b
 13842  01536A  0EA8               	movlw	168
 13843  01536C  EC1C  F0B5         	call	_LCD_Write
 13844                           
 13845                           ;LCD.c: 267: w = 128;
 13846  015370  0E80               	movlw	128
 13847  015372  6E4F               	movwf	_w,c
 13848                           
 13849                           ;LCD.c: 268: l = 128;
 13850  015374  0E80               	movlw	128
 13851  015376  6E4E               	movwf	_l,c
 13852                           
 13853                           ;LCD.c: 269: break;
 13854  015378  0012               	return	
 13855  01537A                     
 13856                           ;LCD.c: 272: {
 13857                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 13858  01537A  0E01               	movlw	1
 13859  01537C  0100               	movlb	0	; () banked
 13860  01537E  6F63               	movwf	LCD_Write@mode& (0+255),b
 13861  015380  0E08               	movlw	8
 13862  015382  EC1C  F0B5         	call	_LCD_Write
 13863                           
 13864                           ;LCD.c: 274: w = 128;
 13865  015386  0E80               	movlw	128
 13866  015388  6E4F               	movwf	_w,c
 13867                           
 13868                           ;LCD.c: 275: l = 128;
 13869  01538A  0E80               	movlw	128
 13870  01538C  6E4E               	movwf	_l,c
 13871                           
 13872                           ;LCD.c: 276: break;
 13873  01538E  0012               	return	
 13874  015390                     
 13875                           ;LCD.c: 279: {
 13876                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 13877  015390  0E01               	movlw	1
 13878  015392  0100               	movlb	0	; () banked
 13879  015394  6F63               	movwf	LCD_Write@mode& (0+255),b
 13880  015396  0E68               	movlw	104
 13881  015398  EC1C  F0B5         	call	_LCD_Write
 13882                           
 13883                           ;LCD.c: 281: w = 128;
 13884  01539C  0E80               	movlw	128
 13885  01539E  6E4F               	movwf	_w,c
 13886                           
 13887                           ;LCD.c: 282: l = 128;
 13888  0153A0  0E80               	movlw	128
 13889  0153A2  6E4E               	movwf	_l,c
 13890                           
 13891                           ;LCD.c: 284: }
 13892                           ;LCD.c: 285: }
 13893                           
 13894                           ;LCD.c: 283: break;
 13895  0153A4  0012               	return	
 13896  0153A6                     l117:
 13897  0153A6  0100               	movlb	0	; () banked
 13898  0153A8  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 13899                           
 13900                           ; Switch size 1, requested type "space"
 13901                           ; Number of cases is 4, Range of values is 0 to 3
 13902                           ; switch strategies available:
 13903                           ; Name         Instructions Cycles
 13904                           ; simple_byte           13     7 (average)
 13905                           ;	Chosen strategy is simple_byte
 13906  0153AA  0A00               	xorlw	0	; case 0
 13907  0153AC  B4D8               	btfsc	status,2,c
 13908  0153AE  D7CF               	goto	l118
 13909  0153B0  0A01               	xorlw	1	; case 1
 13910  0153B2  B4D8               	btfsc	status,2,c
 13911  0153B4  D7D7               	goto	l120
 13912  0153B6  0A03               	xorlw	3	; case 2
 13913  0153B8  B4D8               	btfsc	status,2,c
 13914  0153BA  D7DF               	goto	l121
 13915  0153BC  0A01               	xorlw	1	; case 3
 13916  0153BE  A4D8               	btfss	status,2,c
 13917  0153C0  0012               	return	
 13918  0153C2  D7E6               	goto	l122
 13919  0153C4                     __end_of_Set_Rotation:
 13920                           	opt stack 0
 13921                           tosu	equ	0xFFF
 13922                           tosh	equ	0xFFE
 13923                           tosl	equ	0xFFD
 13924                           pclath	equ	0xFFA
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           intcon	equ	0xFF2
 13932                           postinc0	equ	0xFEE
 13933                           wreg	equ	0xFE8
 13934                           indf1	equ	0xFE7
 13935                           postdec1	equ	0xFE5
 13936                           fsr1h	equ	0xFE2
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           plusw2	equ	0xFDB
 13942                           fsr2h	equ	0xFDA
 13943                           fsr2l	equ	0xFD9
 13944                           status	equ	0xFD8
 13945                           
 13946 ;; *************** function _LCD_Fill *****************
 13947 ;; Defined at:
 13948 ;;		line 287 in file "Library/LCD.c"
 13949 ;; Parameters:    Size  Location     Type
 13950 ;;  pColour         2    9[BANK0 ] unsigned short 
 13951 ;; Auto vars:     Size  Location     Type
 13952 ;;  j               1   12[BANK0 ] unsigned char 
 13953 ;;  i               1   11[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;                  1    wreg      void 
 13956 ;; Registers used:
 13957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13963 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;Total ram usage:        4 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:   10
 13970 ;; This function calls:
 13971 ;;		_LCD_Word_Write
 13972 ;;		_Set_Addr_Window
 13973 ;; This function is called by:
 13974 ;;		_LCD_Init
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text62
 13979  0160BE                     __ptext62:
 13980                           	opt stack 0
 13981  0160BE                     _LCD_Fill:
 13982                           	opt stack 18
 13983                           
 13984                           ;LCD.c: 296: UINT8 i = 0x00;
 13985                           
 13986                           ;incstack = 0
 13987  0160BE  0E00               	movlw	0
 13988  0160C0  0100               	movlb	0	; () banked
 13989  0160C2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 13990                           
 13991                           ;LCD.c: 297: UINT8 j = 0x00;
 13992  0160C4  0E00               	movlw	0
 13993  0160C6  0100               	movlb	0	; () banked
 13994  0160C8  6F6C               	movwf	LCD_Fill@j& (0+255),b
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 13998  0160CA  0E00               	movlw	0
 13999  0160CC  0100               	movlb	0	; () banked
 14000  0160CE  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 14001  0160D0  044F               	decf	_w,w,c
 14002  0160D2  0100               	movlb	0	; () banked
 14003  0160D4  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 14004  0160D6  044E               	decf	_l,w,c
 14005  0160D8  0100               	movlb	0	; () banked
 14006  0160DA  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 14007  0160DC  0E00               	movlw	0
 14008  0160DE  ECB1  F0A6         	call	_Set_Addr_Window
 14009                           
 14010                           ;LCD.c: 299: for (j = l; j > 0; j--)
 14011  0160E2  C04E  F06C         	movff	_l,LCD_Fill@j
 14012  0160E6                     l13612:
 14013  0160E6  0100               	movlb	0	; () banked
 14014  0160E8  516C               	movf	LCD_Fill@j& (0+255),w,b
 14015  0160EA  0100               	movlb	0	; () banked
 14016  0160EC  B4D8               	btfsc	status,2,c
 14017  0160EE  0012               	return	
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;LCD.c: 300: for (i = w; i > 0; i--)
 14021                           
 14022                           ; BSR set to: 0
 14023  0160F0  C04F  F06B         	movff	_w,LCD_Fill@i
 14024  0160F4                     l13616:
 14025                           
 14026                           ; BSR set to: 0
 14027  0160F4  0100               	movlb	0	; () banked
 14028  0160F6  516B               	movf	LCD_Fill@i& (0+255),w,b
 14029  0160F8  0100               	movlb	0	; () banked
 14030  0160FA  B4D8               	btfsc	status,2,c
 14031  0160FC  D009               	goto	u10970
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;LCD.c: 301: LCD_Word_Write(pColour);
 14035                           
 14036                           ; BSR set to: 0
 14037                           
 14038                           ; BSR set to: 0
 14039  0160FE  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 14040  016102  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 14041  016106  EC97  F0B5         	call	_LCD_Word_Write	;wreg free
 14042  01610A  0100               	movlb	0	; () banked
 14043  01610C  076B               	decf	LCD_Fill@i& (0+255),f,b
 14044  01610E  D7F2               	goto	l13616
 14045  016110                     u10970:
 14046                           
 14047                           ; BSR set to: 0
 14048                           
 14049                           ; BSR set to: 0
 14050  016110  0100               	movlb	0	; () banked
 14051  016112  076C               	decf	LCD_Fill@j& (0+255),f,b
 14052  016114  D7E8               	goto	l13612
 14053  016116                     __end_of_LCD_Fill:
 14054                           	opt stack 0
 14055                           tosu	equ	0xFFF
 14056                           tosh	equ	0xFFE
 14057                           tosl	equ	0xFFD
 14058                           pclath	equ	0xFFA
 14059                           tblptru	equ	0xFF8
 14060                           tblptrh	equ	0xFF7
 14061                           tblptrl	equ	0xFF6
 14062                           tablat	equ	0xFF5
 14063                           prodh	equ	0xFF4
 14064                           prodl	equ	0xFF3
 14065                           intcon	equ	0xFF2
 14066                           postinc0	equ	0xFEE
 14067                           wreg	equ	0xFE8
 14068                           indf1	equ	0xFE7
 14069                           postdec1	equ	0xFE5
 14070                           fsr1h	equ	0xFE2
 14071                           fsr1l	equ	0xFE1
 14072                           indf2	equ	0xFDF
 14073                           postinc2	equ	0xFDE
 14074                           postdec2	equ	0xFDD
 14075                           plusw2	equ	0xFDB
 14076                           fsr2h	equ	0xFDA
 14077                           fsr2l	equ	0xFD9
 14078                           status	equ	0xFD8
 14079                           
 14080 ;; *************** function _Configure_GPIOs *****************
 14081 ;; Defined at:
 14082 ;;		line 46 in file "Library/LCD.c"
 14083 ;; Parameters:    Size  Location     Type
 14084 ;;		None
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;		None
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  1    wreg      void 
 14089 ;; Registers used:
 14090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14100 ;;Total ram usage:        0 bytes
 14101 ;; Hardware stack levels used:    1
 14102 ;; Hardware stack levels required when called:   14
 14103 ;; This function calls:
 14104 ;;		_LCD_Reset
 14105 ;;		_Port_SetPinType
 14106 ;;		_SPI_Init
 14107 ;;		_SPI_MaxSpeed
 14108 ;; This function is called by:
 14109 ;;		_LCD_Init
 14110 ;; This function uses a non-reentrant model
 14111 ;;
 14112                           
 14113                           	psect	text63
 14114  015B3A                     __ptext63:
 14115                           	opt stack 0
 14116  015B3A                     _Configure_GPIOs:
 14117                           	opt stack 14
 14118                           
 14119                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;incstack = 0
 14123  015B3A  0EB9               	movlw	low _PortF
 14124  015B3C  0100               	movlb	0	; () banked
 14125  015B3E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14126  015B40  0E01               	movlw	high _PortF
 14127  015B42  0100               	movlb	0	; () banked
 14128  015B44  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14129  015B46  0E07               	movlw	7
 14130  015B48  0100               	movlb	0	; () banked
 14131  015B4A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14132  015B4C  0E03               	movlw	3
 14133  015B4E  0100               	movlb	0	; () banked
 14134  015B50  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14135  015B52  EC2E  F093         	call	_Port_SetPinType	;wreg free
 14136                           
 14137                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 14138  015B56  0EB9               	movlw	low _PortF
 14139  015B58  0100               	movlb	0	; () banked
 14140  015B5A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14141  015B5C  0E01               	movlw	high _PortF
 14142  015B5E  0100               	movlb	0	; () banked
 14143  015B60  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14144  015B62  0E06               	movlw	6
 14145  015B64  0100               	movlb	0	; () banked
 14146  015B66  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14147  015B68  0E03               	movlw	3
 14148  015B6A  0100               	movlb	0	; () banked
 14149  015B6C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14150  015B6E  EC2E  F093         	call	_Port_SetPinType	;wreg free
 14151                           
 14152                           ;LCD.c: 55: LCD_Reset();
 14153  015B72  ECDC  F0B0         	call	_LCD_Reset	;wreg free
 14154                           
 14155                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 14156  015B76  0EC0               	movlw	192
 14157  015B78  0100               	movlb	0	; () banked
 14158  015B7A  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 14159  015B7C  0EC6               	movlw	198
 14160  015B7E  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14161  015B80  0E2D               	movlw	45
 14162  015B82  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14163  015B84  0E00               	movlw	0
 14164  015B86  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14165  015B88  0E01               	movlw	1
 14166  015B8A  0100               	movlb	0	; () banked
 14167  015B8C  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 14168  015B8E  0E01               	movlw	1
 14169  015B90  0100               	movlb	0	; () banked
 14170  015B92  6F92               	movwf	SPI_Init@pMode& (0+255),b
 14171  015B94  ECA7  F084         	call	_SPI_Init	;wreg free
 14172                           
 14173                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 14174  015B98  0E72               	movlw	low _SPI2
 14175  015B9A  0100               	movlb	0	; () banked
 14176  015B9C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 14177  015B9E  0E01               	movlw	high _SPI2
 14178  015BA0  0100               	movlb	0	; () banked
 14179  015BA2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 14180  015BA4  ECEF  F0AC         	call	_SPI_MaxSpeed	;wreg free
 14181  015BA8  0012               	return		;funcret
 14182  015BAA                     __end_of_Configure_GPIOs:
 14183                           	opt stack 0
 14184                           tosu	equ	0xFFF
 14185                           tosh	equ	0xFFE
 14186                           tosl	equ	0xFFD
 14187                           pclath	equ	0xFFA
 14188                           tblptru	equ	0xFF8
 14189                           tblptrh	equ	0xFF7
 14190                           tblptrl	equ	0xFF6
 14191                           tablat	equ	0xFF5
 14192                           prodh	equ	0xFF4
 14193                           prodl	equ	0xFF3
 14194                           intcon	equ	0xFF2
 14195                           postinc0	equ	0xFEE
 14196                           wreg	equ	0xFE8
 14197                           indf1	equ	0xFE7
 14198                           postdec1	equ	0xFE5
 14199                           fsr1h	equ	0xFE2
 14200                           fsr1l	equ	0xFE1
 14201                           indf2	equ	0xFDF
 14202                           postinc2	equ	0xFDE
 14203                           postdec2	equ	0xFDD
 14204                           plusw2	equ	0xFDB
 14205                           fsr2h	equ	0xFDA
 14206                           fsr2l	equ	0xFD9
 14207                           status	equ	0xFD8
 14208                           
 14209 ;; *************** function _SPI_MaxSpeed *****************
 14210 ;; Defined at:
 14211 ;;		line 201 in file "Library/SPI.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14214 ;;		 -> SPI2(11), 
 14215 ;; Auto vars:     Size  Location     Type
 14216 ;;		None
 14217 ;; Return value:  Size  Location     Type
 14218 ;;                  1    wreg      void 
 14219 ;; Registers used:
 14220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14221 ;; Tracked objects:
 14222 ;;		On entry : 0/0
 14223 ;;		On exit  : 0/0
 14224 ;;		Unchanged: 0/0
 14225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14226 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;Total ram usage:        2 bytes
 14231 ;; Hardware stack levels used:    1
 14232 ;; Hardware stack levels required when called:    9
 14233 ;; This function calls:
 14234 ;;		_Byte_SetBit
 14235 ;;		_Byte_SetQuad
 14236 ;; This function is called by:
 14237 ;;		_Configure_GPIOs
 14238 ;; This function uses a non-reentrant model
 14239 ;;
 14240                           
 14241                           	psect	text64
 14242  0159DE                     __ptext64:
 14243                           	opt stack 0
 14244  0159DE                     _SPI_MaxSpeed:
 14245                           	opt stack 18
 14246                           
 14247                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14248                           
 14249                           ;incstack = 0
 14250  0159DE  0100               	movlb	0	; () banked
 14251  0159E0  EE20 F006          	lfsr	2,6
 14252  0159E4  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14253  0159E6  26D9               	addwf	fsr2l,f,c
 14254  0159E8  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14255  0159EA  22DA               	addwfc	fsr2h,f,c
 14256  0159EC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14257  0159F0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14258  0159F4  0E05               	movlw	5
 14259  0159F6  0100               	movlb	0	; () banked
 14260  0159F8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14261  0159FA  0E00               	movlw	0
 14262  0159FC  0100               	movlb	0	; () banked
 14263  0159FE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14264  015A00  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 14265                           
 14266                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 14267  015A04  0100               	movlb	0	; () banked
 14268  015A06  EE20 F006          	lfsr	2,6
 14269  015A0A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14270  015A0C  26D9               	addwf	fsr2l,f,c
 14271  015A0E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14272  015A10  22DA               	addwfc	fsr2h,f,c
 14273  015A12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14274  015A16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14275  015A1A  0E00               	movlw	0
 14276  015A1C  0100               	movlb	0	; () banked
 14277  015A1E  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14278  015A20  0E00               	movlw	0
 14279  015A22  0100               	movlb	0	; () banked
 14280  015A24  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14281  015A26  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 14282                           
 14283                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14284  015A2A  0100               	movlb	0	; () banked
 14285  015A2C  EE20 F006          	lfsr	2,6
 14286  015A30  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14287  015A32  26D9               	addwf	fsr2l,f,c
 14288  015A34  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14289  015A36  22DA               	addwfc	fsr2h,f,c
 14290  015A38  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14291  015A3C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14292  015A40  0E05               	movlw	5
 14293  015A42  0100               	movlb	0	; () banked
 14294  015A44  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14295  015A46  0E01               	movlw	1
 14296  015A48  0100               	movlb	0	; () banked
 14297  015A4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14298  015A4C  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 14299  015A50  0012               	return		;funcret
 14300  015A52                     __end_of_SPI_MaxSpeed:
 14301                           	opt stack 0
 14302                           tosu	equ	0xFFF
 14303                           tosh	equ	0xFFE
 14304                           tosl	equ	0xFFD
 14305                           pclath	equ	0xFFA
 14306                           tblptru	equ	0xFF8
 14307                           tblptrh	equ	0xFF7
 14308                           tblptrl	equ	0xFF6
 14309                           tablat	equ	0xFF5
 14310                           prodh	equ	0xFF4
 14311                           prodl	equ	0xFF3
 14312                           intcon	equ	0xFF2
 14313                           postinc0	equ	0xFEE
 14314                           wreg	equ	0xFE8
 14315                           indf1	equ	0xFE7
 14316                           postdec1	equ	0xFE5
 14317                           fsr1h	equ	0xFE2
 14318                           fsr1l	equ	0xFE1
 14319                           indf2	equ	0xFDF
 14320                           postinc2	equ	0xFDE
 14321                           postdec2	equ	0xFDD
 14322                           plusw2	equ	0xFDB
 14323                           fsr2h	equ	0xFDA
 14324                           fsr2l	equ	0xFD9
 14325                           status	equ	0xFD8
 14326                           
 14327 ;; *************** function _LCD_Reset *****************
 14328 ;; Defined at:
 14329 ;;		line 95 in file "Library/LCD.c"
 14330 ;; Parameters:    Size  Location     Type
 14331 ;;		None
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;		None
 14334 ;; Return value:  Size  Location     Type
 14335 ;;                  1    wreg      void 
 14336 ;; Registers used:
 14337 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14338 ;; Tracked objects:
 14339 ;;		On entry : 0/0
 14340 ;;		On exit  : 0/0
 14341 ;;		Unchanged: 0/0
 14342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;Total ram usage:        0 bytes
 14348 ;; Hardware stack levels used:    1
 14349 ;; Hardware stack levels required when called:   13
 14350 ;; This function calls:
 14351 ;;		_LED_Toggle
 14352 ;;		_Reset_High
 14353 ;;		_Reset_Low
 14354 ;;		_delay_ms
 14355 ;; This function is called by:
 14356 ;;		_Configure_GPIOs
 14357 ;; This function uses a non-reentrant model
 14358 ;;
 14359                           
 14360                           	psect	text65
 14361  0161B8                     __ptext65:
 14362                           	opt stack 0
 14363  0161B8                     _LCD_Reset:
 14364                           	opt stack 14
 14365                           
 14366                           ;LCD.c: 97: Reset_High();
 14367                           
 14368                           ;incstack = 0
 14369  0161B8  EC4C  F0B5         	call	_Reset_High	;wreg free
 14370                           
 14371                           ;LCD.c: 98: LED_Toggle(eLED2);
 14372  0161BC  0E01               	movlw	1
 14373  0161BE  EC97  F0B1         	call	_LED_Toggle
 14374                           
 14375                           ;LCD.c: 99: delay_ms(0x80);
 14376  0161C2  0E00               	movlw	0
 14377  0161C4  0100               	movlb	0	; () banked
 14378  0161C6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14379  0161C8  0E80               	movlw	128
 14380  0161CA  6F60               	movwf	delay_ms@ms& (0+255),b
 14381  0161CC  EC0B  F0AE         	call	_delay_ms	;wreg free
 14382                           
 14383                           ;LCD.c: 100: LED_Toggle(eLED2);
 14384  0161D0  0E01               	movlw	1
 14385  0161D2  EC97  F0B1         	call	_LED_Toggle
 14386                           
 14387                           ;LCD.c: 101: Reset_Low();
 14388  0161D6  EC3D  F0B5         	call	_Reset_Low	;wreg free
 14389                           
 14390                           ;LCD.c: 102: delay_ms(0x80);
 14391  0161DA  0E00               	movlw	0
 14392  0161DC  0100               	movlb	0	; () banked
 14393  0161DE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14394  0161E0  0E80               	movlw	128
 14395  0161E2  6F60               	movwf	delay_ms@ms& (0+255),b
 14396  0161E4  EC0B  F0AE         	call	_delay_ms	;wreg free
 14397                           
 14398                           ;LCD.c: 103: LED_Toggle(eLED2);
 14399  0161E8  0E01               	movlw	1
 14400  0161EA  EC97  F0B1         	call	_LED_Toggle
 14401                           
 14402                           ;LCD.c: 104: Reset_High();
 14403  0161EE  EC4C  F0B5         	call	_Reset_High	;wreg free
 14404                           
 14405                           ;LCD.c: 105: delay_ms(0x80);
 14406  0161F2  0E00               	movlw	0
 14407  0161F4  0100               	movlb	0	; () banked
 14408  0161F6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14409  0161F8  0E80               	movlw	128
 14410  0161FA  6F60               	movwf	delay_ms@ms& (0+255),b
 14411  0161FC  EC0B  F0AE         	call	_delay_ms	;wreg free
 14412                           
 14413                           ;LCD.c: 106: LED_Toggle(eLED2);
 14414  016200  0E01               	movlw	1
 14415  016202  EC97  F0B1         	call	_LED_Toggle
 14416  016206  0012               	return		;funcret
 14417  016208                     __end_of_LCD_Reset:
 14418                           	opt stack 0
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           postinc0	equ	0xFEE
 14431                           wreg	equ	0xFE8
 14432                           indf1	equ	0xFE7
 14433                           postdec1	equ	0xFE5
 14434                           fsr1h	equ	0xFE2
 14435                           fsr1l	equ	0xFE1
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           plusw2	equ	0xFDB
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444 ;; *************** function _delay_ms *****************
 14445 ;; Defined at:
 14446 ;;		line 240 in file "Library/Types.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;  ms              2    0[BANK0 ] unsigned short 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  u               4    2[BANK0 ] volatile unsigned long 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		wreg, status,2, status,0
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14460 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14463 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;Total ram usage:        6 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    7
 14467 ;; This function calls:
 14468 ;;		Nothing
 14469 ;; This function is called by:
 14470 ;;		_LCD_Reset
 14471 ;;		_LCD_Init
 14472 ;;		_MXK_Init
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           	psect	text66
 14477  015C16                     __ptext66:
 14478                           	opt stack 0
 14479  015C16                     _delay_ms:
 14480                           	opt stack 21
 14481                           
 14482                           ;Types.c: 242: volatile unsigned long u;
 14483                           ;Types.c: 243: while (ms--)
 14484                           
 14485                           ;incstack = 0
 14486  015C16  D01F               	goto	u9570
 14487  015C18                     l12392:
 14488                           
 14489                           ;Types.c: 244: {
 14490                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 14491  015C18  0E00               	movlw	0
 14492  015C1A  0100               	movlb	0	; () banked
 14493  015C1C  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 14494  015C1E  0E00               	movlw	0
 14495  015C20  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 14496  015C22  0E00               	movlw	0
 14497  015C24  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 14498  015C26  0E00               	movlw	0
 14499  015C28  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 14500  015C2A                     l12394:
 14501                           
 14502                           ; BSR set to: 0
 14503  015C2A  0100               	movlb	0	; () banked
 14504  015C2C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 14505  015C2E  0100               	movlb	0	; () banked
 14506  015C30  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 14507  015C32  E111               	bnz	l12400
 14508  015C34  0EB0               	movlw	176
 14509  015C36  0100               	movlb	0	; () banked
 14510  015C38  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 14511  015C3A  0E04               	movlw	4
 14512  015C3C  0100               	movlb	0	; () banked
 14513  015C3E  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 14514  015C40  B0D8               	btfsc	status,0,c
 14515  015C42  D009               	goto	u9570
 14516                           
 14517                           ; BSR set to: 0
 14518                           
 14519                           ; BSR set to: 0
 14520  015C44  F000               	nop		; ;# 
 14521  015C46  0E01               	movlw	1
 14522  015C48  0100               	movlb	0	; () banked
 14523  015C4A  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 14524  015C4C  0E00               	movlw	0
 14525  015C4E  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 14526  015C50  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 14527  015C52  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 14528  015C54  D7EA               	goto	l12394
 14529  015C56                     u9570:
 14530  015C56                     l12400:
 14531  015C56  0100               	movlb	0	; () banked
 14532  015C58  0760               	decf	delay_ms@ms& (0+255),f,b
 14533  015C5A  A0D8               	btfss	status,0,c
 14534  015C5C  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 14535  015C5E  0100               	movlb	0	; () banked
 14536  015C60  2960               	incf	delay_ms@ms& (0+255),w,b
 14537  015C62  E1DA               	bnz	l12392
 14538  015C64  0100               	movlb	0	; () banked
 14539  015C66  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 14540  015C68  A4D8               	btfss	status,2,c
 14541  015C6A  D7D6               	goto	l824
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;Types.c: 251: }
 14545                           ;Types.c: 252: }
 14546                           ;Types.c: 253: u = 0x8008;
 14547                           
 14548                           ; BSR set to: 0
 14549  015C6C  0E08               	movlw	8
 14550  015C6E  0100               	movlb	0	; () banked
 14551  015C70  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 14552  015C72  0E80               	movlw	128
 14553  015C74  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 14554  015C76  0E00               	movlw	0
 14555  015C78  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 14556  015C7A  0E00               	movlw	0
 14557  015C7C  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 14558                           
 14559                           ; BSR set to: 0
 14560  015C7E  0012               	return		;funcret
 14561  015C80                     __end_of_delay_ms:
 14562                           	opt stack 0
 14563                           tosu	equ	0xFFF
 14564                           tosh	equ	0xFFE
 14565                           tosl	equ	0xFFD
 14566                           pclath	equ	0xFFA
 14567                           tblptru	equ	0xFF8
 14568                           tblptrh	equ	0xFF7
 14569                           tblptrl	equ	0xFF6
 14570                           tablat	equ	0xFF5
 14571                           prodh	equ	0xFF4
 14572                           prodl	equ	0xFF3
 14573                           intcon	equ	0xFF2
 14574                           postinc0	equ	0xFEE
 14575                           wreg	equ	0xFE8
 14576                           indf1	equ	0xFE7
 14577                           postdec1	equ	0xFE5
 14578                           fsr1h	equ	0xFE2
 14579                           fsr1l	equ	0xFE1
 14580                           indf2	equ	0xFDF
 14581                           postinc2	equ	0xFDE
 14582                           postdec2	equ	0xFDD
 14583                           plusw2	equ	0xFDB
 14584                           fsr2h	equ	0xFDA
 14585                           fsr2l	equ	0xFD9
 14586                           status	equ	0xFD8
 14587                           
 14588 ;; *************** function _Reset_Low *****************
 14589 ;; Defined at:
 14590 ;;		line 32 in file "Library/LCD.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;		None
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;		None
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  1    wreg      void 
 14597 ;; Registers used:
 14598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;Total ram usage:        0 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:   11
 14611 ;; This function calls:
 14612 ;;		_Port_SetPin
 14613 ;; This function is called by:
 14614 ;;		_LCD_Reset
 14615 ;; This function uses a non-reentrant model
 14616 ;;
 14617                           
 14618                           	psect	text67
 14619  016A7A                     __ptext67:
 14620                           	opt stack 0
 14621  016A7A                     _Reset_Low:
 14622                           	opt stack 15
 14623                           
 14624                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;incstack = 0
 14628  016A7A  0EB9               	movlw	low _PortF
 14629  016A7C  0100               	movlb	0	; () banked
 14630  016A7E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14631  016A80  0E01               	movlw	high _PortF
 14632  016A82  0100               	movlb	0	; () banked
 14633  016A84  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14634  016A86  0E06               	movlw	6
 14635  016A88  0100               	movlb	0	; () banked
 14636  016A8A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14637  016A8C  0E01               	movlw	1
 14638  016A8E  0100               	movlb	0	; () banked
 14639  016A90  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14640  016A92  EC17  F0A3         	call	_Port_SetPin	;wreg free
 14641  016A96  0012               	return		;funcret
 14642  016A98                     __end_of_Reset_Low:
 14643                           	opt stack 0
 14644                           tosu	equ	0xFFF
 14645                           tosh	equ	0xFFE
 14646                           tosl	equ	0xFFD
 14647                           pclath	equ	0xFFA
 14648                           tblptru	equ	0xFF8
 14649                           tblptrh	equ	0xFF7
 14650                           tblptrl	equ	0xFF6
 14651                           tablat	equ	0xFF5
 14652                           prodh	equ	0xFF4
 14653                           prodl	equ	0xFF3
 14654                           intcon	equ	0xFF2
 14655                           postinc0	equ	0xFEE
 14656                           wreg	equ	0xFE8
 14657                           indf1	equ	0xFE7
 14658                           postdec1	equ	0xFE5
 14659                           fsr1h	equ	0xFE2
 14660                           fsr1l	equ	0xFE1
 14661                           indf2	equ	0xFDF
 14662                           postinc2	equ	0xFDE
 14663                           postdec2	equ	0xFDD
 14664                           plusw2	equ	0xFDB
 14665                           fsr2h	equ	0xFDA
 14666                           fsr2l	equ	0xFD9
 14667                           status	equ	0xFD8
 14668                           
 14669 ;; *************** function _Reset_High *****************
 14670 ;; Defined at:
 14671 ;;		line 36 in file "Library/LCD.c"
 14672 ;; Parameters:    Size  Location     Type
 14673 ;;		None
 14674 ;; Auto vars:     Size  Location     Type
 14675 ;;		None
 14676 ;; Return value:  Size  Location     Type
 14677 ;;                  1    wreg      void 
 14678 ;; Registers used:
 14679 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14680 ;; Tracked objects:
 14681 ;;		On entry : 0/0
 14682 ;;		On exit  : 0/0
 14683 ;;		Unchanged: 0/0
 14684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14689 ;;Total ram usage:        0 bytes
 14690 ;; Hardware stack levels used:    1
 14691 ;; Hardware stack levels required when called:   11
 14692 ;; This function calls:
 14693 ;;		_Port_SetPin
 14694 ;; This function is called by:
 14695 ;;		_LCD_Reset
 14696 ;; This function uses a non-reentrant model
 14697 ;;
 14698                           
 14699                           	psect	text68
 14700  016A98                     __ptext68:
 14701                           	opt stack 0
 14702  016A98                     _Reset_High:
 14703                           	opt stack 15
 14704                           
 14705                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 14706                           
 14707                           ;incstack = 0
 14708  016A98  0EB9               	movlw	low _PortF
 14709  016A9A  0100               	movlb	0	; () banked
 14710  016A9C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14711  016A9E  0E01               	movlw	high _PortF
 14712  016AA0  0100               	movlb	0	; () banked
 14713  016AA2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14714  016AA4  0E06               	movlw	6
 14715  016AA6  0100               	movlb	0	; () banked
 14716  016AA8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14717  016AAA  0E00               	movlw	0
 14718  016AAC  0100               	movlb	0	; () banked
 14719  016AAE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14720  016AB0  EC17  F0A3         	call	_Port_SetPin	;wreg free
 14721  016AB4  0012               	return		;funcret
 14722  016AB6                     __end_of_Reset_High:
 14723                           	opt stack 0
 14724                           tosu	equ	0xFFF
 14725                           tosh	equ	0xFFE
 14726                           tosl	equ	0xFFD
 14727                           pclath	equ	0xFFA
 14728                           tblptru	equ	0xFF8
 14729                           tblptrh	equ	0xFF7
 14730                           tblptrl	equ	0xFF6
 14731                           tablat	equ	0xFF5
 14732                           prodh	equ	0xFF4
 14733                           prodl	equ	0xFF3
 14734                           intcon	equ	0xFF2
 14735                           postinc0	equ	0xFEE
 14736                           wreg	equ	0xFE8
 14737                           indf1	equ	0xFE7
 14738                           postdec1	equ	0xFE5
 14739                           fsr1h	equ	0xFE2
 14740                           fsr1l	equ	0xFE1
 14741                           indf2	equ	0xFDF
 14742                           postinc2	equ	0xFDE
 14743                           postdec2	equ	0xFDD
 14744                           plusw2	equ	0xFDB
 14745                           fsr2h	equ	0xFDA
 14746                           fsr2l	equ	0xFD9
 14747                           status	equ	0xFD8
 14748                           
 14749 ;; *************** function _LED_Toggle *****************
 14750 ;; Defined at:
 14751 ;;		line 50 in file "Library/LED.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;  pLED            1    wreg     enum E6739
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;  pLED            1   24[BANK0 ] enum E6739
 14756 ;; Return value:  Size  Location     Type
 14757 ;;                  1    wreg      void 
 14758 ;; Registers used:
 14759 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14760 ;; Tracked objects:
 14761 ;;		On entry : 0/0
 14762 ;;		On exit  : 0/0
 14763 ;;		Unchanged: 0/0
 14764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;Total ram usage:        1 bytes
 14770 ;; Hardware stack levels used:    1
 14771 ;; Hardware stack levels required when called:   12
 14772 ;; This function calls:
 14773 ;;		_Port_TogglePin
 14774 ;; This function is called by:
 14775 ;;		_LCD_Reset
 14776 ;;		_Event_DIPSwitch
 14777 ;;		_Event_TestButton
 14778 ;;		_Event_ADCSequenceComplete
 14779 ;;		_Event_HMI_DIPSwitch
 14780 ;;		_Event_HMI_LeftButton
 14781 ;;		_Event_HMI_RightButton
 14782 ;;		_Event_HMI_UpButton
 14783 ;;		_Event_HMI_DownButton
 14784 ;; This function uses a non-reentrant model
 14785 ;;
 14786                           
 14787                           	psect	text69
 14788  01632E                     __ptext69:
 14789                           	opt stack 0
 14790  01632E                     _LED_Toggle:
 14791                           	opt stack 14
 14792                           
 14793                           ;incstack = 0
 14794                           ;LED_Toggle@pLED stored from wreg
 14795  01632E  0100               	movlb	0	; () banked
 14796  016330  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 14797                           
 14798                           ;LED.c: 52: switch (pLED)
 14799  016332  D018               	goto	l234
 14800  016334                     
 14801                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 14802  016334  0E35               	movlw	low _PortC
 14803  016336  0100               	movlb	0	; () banked
 14804  016338  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14805  01633A  0E00               	movlw	high _PortC
 14806  01633C  0100               	movlb	0	; () banked
 14807  01633E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14808  016340  0E00               	movlw	0
 14809  016342  0100               	movlb	0	; () banked
 14810  016344  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14811  016346  EC1F  F0B4         	call	_Port_TogglePin	;wreg free
 14812                           
 14813                           ;LED.c: 56: break;
 14814  01634A  0012               	return	
 14815  01634C                     
 14816                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 14817  01634C  0E35               	movlw	low _PortC
 14818  01634E  0100               	movlb	0	; () banked
 14819  016350  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14820  016352  0E00               	movlw	high _PortC
 14821  016354  0100               	movlb	0	; () banked
 14822  016356  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14823  016358  0E01               	movlw	1
 14824  01635A  0100               	movlb	0	; () banked
 14825  01635C  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14826  01635E  EC1F  F0B4         	call	_Port_TogglePin	;wreg free
 14827                           
 14828                           ;LED.c: 60: }
 14829                           
 14830                           ;LED.c: 59: break;
 14831  016362  0012               	return	
 14832  016364                     l234:
 14833  016364  0100               	movlb	0	; () banked
 14834  016366  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 14835                           
 14836                           ; Switch size 1, requested type "space"
 14837                           ; Number of cases is 2, Range of values is 0 to 1
 14838                           ; switch strategies available:
 14839                           ; Name         Instructions Cycles
 14840                           ; simple_byte            7     4 (average)
 14841                           ;	Chosen strategy is simple_byte
 14842  016368  0A00               	xorlw	0	; case 0
 14843  01636A  B4D8               	btfsc	status,2,c
 14844  01636C  D7E3               	goto	l235
 14845  01636E  0A01               	xorlw	1	; case 1
 14846  016370  A4D8               	btfss	status,2,c
 14847  016372  0012               	return	
 14848  016374  D7EB               	goto	l237
 14849  016376                     __end_of_LED_Toggle:
 14850                           	opt stack 0
 14851                           tosu	equ	0xFFF
 14852                           tosh	equ	0xFFE
 14853                           tosl	equ	0xFFD
 14854                           pclath	equ	0xFFA
 14855                           tblptru	equ	0xFF8
 14856                           tblptrh	equ	0xFF7
 14857                           tblptrl	equ	0xFF6
 14858                           tablat	equ	0xFF5
 14859                           prodh	equ	0xFF4
 14860                           prodl	equ	0xFF3
 14861                           intcon	equ	0xFF2
 14862                           postinc0	equ	0xFEE
 14863                           wreg	equ	0xFE8
 14864                           indf1	equ	0xFE7
 14865                           postdec1	equ	0xFE5
 14866                           fsr1h	equ	0xFE2
 14867                           fsr1l	equ	0xFE1
 14868                           indf2	equ	0xFDF
 14869                           postinc2	equ	0xFDE
 14870                           postdec2	equ	0xFDD
 14871                           plusw2	equ	0xFDB
 14872                           fsr2h	equ	0xFDA
 14873                           fsr2l	equ	0xFD9
 14874                           status	equ	0xFD8
 14875                           
 14876 ;; *************** function _Port_TogglePin *****************
 14877 ;; Defined at:
 14878 ;;		line 278 in file "Library/Port.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 14881 ;;		 -> PortC(10), 
 14882 ;;  pPin            1   22[BANK0 ] enum E6750
 14883 ;; Auto vars:     Size  Location     Type
 14884 ;;  Value           1   23[BANK0 ] unsigned char 
 14885 ;; Return value:  Size  Location     Type
 14886 ;;                  1    wreg      void 
 14887 ;; Registers used:
 14888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14889 ;; Tracked objects:
 14890 ;;		On entry : 0/0
 14891 ;;		On exit  : 0/0
 14892 ;;		Unchanged: 0/0
 14893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14894 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;Total ram usage:        4 bytes
 14899 ;; Hardware stack levels used:    1
 14900 ;; Hardware stack levels required when called:   11
 14901 ;; This function calls:
 14902 ;;		_Port_GetPin
 14903 ;;		_Port_SetPin
 14904 ;; This function is called by:
 14905 ;;		_LED_Toggle
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           	psect	text70
 14910  01683E                     __ptext70:
 14911                           	opt stack 0
 14912  01683E                     _Port_TogglePin:
 14913                           	opt stack 14
 14914                           
 14915                           ;Port.c: 280: UINT8 Value;
 14916                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14917                           
 14918                           ;incstack = 0
 14919  01683E  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14920  016842  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14921  016846  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14922  01684A  ECDF  F0B1         	call	_Port_GetPin	;wreg free
 14923  01684E  0100               	movlb	0	; () banked
 14924  016850  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;Port.c: 282: Value ^= 0x01;
 14928  016852  0E01               	movlw	1
 14929  016854  0100               	movlb	0	; () banked
 14930  016856  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14934  016858  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14935  01685C  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14936  016860  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14937  016864  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14938  016868  EC17  F0A3         	call	_Port_SetPin	;wreg free
 14939  01686C  0012               	return		;funcret
 14940  01686E                     __end_of_Port_TogglePin:
 14941                           	opt stack 0
 14942                           tosu	equ	0xFFF
 14943                           tosh	equ	0xFFE
 14944                           tosl	equ	0xFFD
 14945                           pclath	equ	0xFFA
 14946                           tblptru	equ	0xFF8
 14947                           tblptrh	equ	0xFF7
 14948                           tblptrl	equ	0xFF6
 14949                           tablat	equ	0xFF5
 14950                           prodh	equ	0xFF4
 14951                           prodl	equ	0xFF3
 14952                           intcon	equ	0xFF2
 14953                           postinc0	equ	0xFEE
 14954                           wreg	equ	0xFE8
 14955                           indf1	equ	0xFE7
 14956                           postdec1	equ	0xFE5
 14957                           fsr1h	equ	0xFE2
 14958                           fsr1l	equ	0xFE1
 14959                           indf2	equ	0xFDF
 14960                           postinc2	equ	0xFDE
 14961                           postdec2	equ	0xFDD
 14962                           plusw2	equ	0xFDB
 14963                           fsr2h	equ	0xFDA
 14964                           fsr2l	equ	0xFD9
 14965                           status	equ	0xFD8
 14966                           
 14967 ;; *************** function _Port_SetPin *****************
 14968 ;; Defined at:
 14969 ;;		line 247 in file "Library/Port.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14972 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14973 ;;  pPin            1   17[BANK0 ] enum E6750
 14974 ;;  pValue          1   18[BANK0 ] unsigned char 
 14975 ;; Auto vars:     Size  Location     Type
 14976 ;;  Type            1   19[BANK0 ] enum E6795
 14977 ;; Return value:  Size  Location     Type
 14978 ;;                  1    wreg      void 
 14979 ;; Registers used:
 14980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14981 ;; Tracked objects:
 14982 ;;		On entry : 0/0
 14983 ;;		On exit  : 0/0
 14984 ;;		Unchanged: 0/0
 14985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14989 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14990 ;;Total ram usage:        5 bytes
 14991 ;; Hardware stack levels used:    1
 14992 ;; Hardware stack levels required when called:   10
 14993 ;; This function calls:
 14994 ;;		_Byte_SetBit
 14995 ;;		_Word_GetPair
 14996 ;; This function is called by:
 14997 ;;		_Reset_Low
 14998 ;;		_Reset_High
 14999 ;;		_LED_Set
 15000 ;;		_Port_TogglePin
 15001 ;;		_Motor_Init
 15002 ;;		_Motor_Step
 15003 ;;		_MXK_Init
 15004 ;; This function uses a non-reentrant model
 15005 ;;
 15006                           
 15007                           	psect	text71
 15008  01462E                     __ptext71:
 15009                           	opt stack 0
 15010  01462E                     _Port_SetPin:
 15011                           	opt stack 14
 15012                           
 15013                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 15014                           
 15015                           ;incstack = 0
 15016  01462E  0E08               	movlw	8
 15017  014630  0100               	movlb	0	; () banked
 15018  014632  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 15019  014634  0100               	movlb	0	; () banked
 15020  014636  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15021  014638  0E00               	movlw	0
 15022  01463A  0100               	movlb	0	; () banked
 15023  01463C  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 15024  01463E  0100               	movlb	0	; () banked
 15025  014640  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15026  014642  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 15027  014646  EC08  F0B3         	call	_Word_GetPair	;wreg free
 15028  01464A  0100               	movlb	0	; () banked
 15029  01464C  6F73               	movwf	Port_SetPin@Type& (0+255),b
 15030                           
 15031                           ;Port.c: 250: switch (Type)
 15032  01464E  D042               	goto	l427
 15033  014650                     
 15034                           ; BSR set to: 0
 15035                           ;Port.c: 256: pValue &= 1;
 15036                           
 15037                           ; BSR set to: 0
 15038  014650  0E01               	movlw	1
 15039  014652  0100               	movlb	0	; () banked
 15040  014654  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15044  014656  0100               	movlb	0	; () banked
 15045  014658  EE20 F002          	lfsr	2,2
 15046  01465C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 15047  01465E  26D9               	addwf	fsr2l,f,c
 15048  014660  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15049  014662  22DA               	addwfc	fsr2h,f,c
 15050  014664  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15051  014668  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15052  01466C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15053  014670  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15054  014674  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 15055                           
 15056                           ;Port.c: 258: break;
 15057  014678  0012               	return	
 15058  01467A                     
 15059                           ;Port.c: 261: pValue &= 1;
 15060  01467A  0E01               	movlw	1
 15061  01467C  0100               	movlb	0	; () banked
 15062  01467E  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 15063                           
 15064                           ;Port.c: 262: pValue ^= 1;
 15065  014680  0E01               	movlw	1
 15066  014682  0100               	movlb	0	; () banked
 15067  014684  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15071  014686  0100               	movlb	0	; () banked
 15072  014688  EE20 F002          	lfsr	2,2
 15073  01468C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 15074  01468E  26D9               	addwf	fsr2l,f,c
 15075  014690  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15076  014692  22DA               	addwfc	fsr2h,f,c
 15077  014694  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15078  014698  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15079  01469C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15080  0146A0  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15081  0146A4  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 15082                           
 15083                           ;Port.c: 264: break;
 15084  0146A8  0012               	return	
 15085  0146AA                     
 15086                           ;Port.c: 266: pValue &= 1;
 15087  0146AA  0E01               	movlw	1
 15088  0146AC  0100               	movlb	0	; () banked
 15089  0146AE  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 15093  0146B0  0100               	movlb	0	; () banked
 15094  0146B2  EE20 F004          	lfsr	2,4
 15095  0146B6  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 15096  0146B8  26D9               	addwf	fsr2l,f,c
 15097  0146BA  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15098  0146BC  22DA               	addwfc	fsr2h,f,c
 15099  0146BE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15100  0146C2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15101  0146C6  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15102  0146CA  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15103  0146CE  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 15104                           
 15105                           ;Port.c: 269: }
 15106                           
 15107                           ;Port.c: 268: break;
 15108  0146D2  0012               	return	
 15109  0146D4                     l427:
 15110  0146D4  0100               	movlb	0	; () banked
 15111  0146D6  5173               	movf	Port_SetPin@Type& (0+255),w,b
 15112                           
 15113                           ; Switch size 1, requested type "space"
 15114                           ; Number of cases is 4, Range of values is 0 to 3
 15115                           ; switch strategies available:
 15116                           ; Name         Instructions Cycles
 15117                           ; simple_byte           13     7 (average)
 15118                           ;	Chosen strategy is simple_byte
 15119  0146D8  0A00               	xorlw	0	; case 0
 15120  0146DA  B4D8               	btfsc	status,2,c
 15121  0146DC  0012               	return	
 15122  0146DE  0A01               	xorlw	1	; case 1
 15123  0146E0  B4D8               	btfsc	status,2,c
 15124  0146E2  D7B6               	goto	l430
 15125  0146E4  0A03               	xorlw	3	; case 2
 15126  0146E6  B4D8               	btfsc	status,2,c
 15127  0146E8  D7C8               	goto	l432
 15128  0146EA  0A01               	xorlw	1	; case 3
 15129  0146EC  A4D8               	btfss	status,2,c
 15130  0146EE  0012               	return	
 15131  0146F0  D7DC               	goto	l433
 15132  0146F2                     __end_of_Port_SetPin:
 15133                           	opt stack 0
 15134                           tosu	equ	0xFFF
 15135                           tosh	equ	0xFFE
 15136                           tosl	equ	0xFFD
 15137                           pclath	equ	0xFFA
 15138                           tblptru	equ	0xFF8
 15139                           tblptrh	equ	0xFF7
 15140                           tblptrl	equ	0xFF6
 15141                           tablat	equ	0xFF5
 15142                           prodh	equ	0xFF4
 15143                           prodl	equ	0xFF3
 15144                           intcon	equ	0xFF2
 15145                           postinc0	equ	0xFEE
 15146                           wreg	equ	0xFE8
 15147                           indf1	equ	0xFE7
 15148                           postdec1	equ	0xFE5
 15149                           fsr1h	equ	0xFE2
 15150                           fsr1l	equ	0xFE1
 15151                           indf2	equ	0xFDF
 15152                           postinc2	equ	0xFDE
 15153                           postdec2	equ	0xFDD
 15154                           plusw2	equ	0xFDB
 15155                           fsr2h	equ	0xFDA
 15156                           fsr2l	equ	0xFD9
 15157                           status	equ	0xFD8
 15158                           
 15159 ;; *************** function _Port_GetPin *****************
 15160 ;; Defined at:
 15161 ;;		line 271 in file "Library/Port.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 15164 ;;		 -> PortB(10), PortE(10), PortC(10), 
 15165 ;;  pPin            1    2[BANK0 ] enum E6750
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;  Output          1    5[BANK0 ] unsigned char 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      unsigned char 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15177 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;Total ram usage:        6 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    7
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_Port_TogglePin
 15188 ;;		_HMI_LeftSwitch
 15189 ;;		_HMI_RightSwitch
 15190 ;;		_HMI_UpSwitch
 15191 ;;		_HMI_DownSwitch
 15192 ;;		_MXK_TestButton
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           	psect	text72
 15197  0163BE                     __ptext72:
 15198                           	opt stack 0
 15199  0163BE                     _Port_GetPin:
 15200                           	opt stack 21
 15201                           
 15202                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 15203                           
 15204                           ;incstack = 0
 15205  0163BE  0100               	movlb	0	; () banked
 15206  0163C0  EE20 F006          	lfsr	2,6
 15207  0163C4  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 15208  0163C6  26D9               	addwf	fsr2l,f,c
 15209  0163C8  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 15210  0163CA  22DA               	addwfc	fsr2h,f,c
 15211  0163CC  CFDE F063          	movff	postinc2,??_Port_GetPin
 15212  0163D0  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 15213  0163D4  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 15214  0163D8  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 15215  0163DC  50DF               	movf	indf2,w,c
 15216  0163DE  0100               	movlb	0	; () banked
 15217  0163E0  6F65               	movwf	Port_GetPin@Output& (0+255),b
 15218                           
 15219                           ; BSR set to: 0
 15220                           ;Port.c: 274: Output >>= (UINT8)pPin;
 15221  0163E2  0100               	movlb	0	; () banked
 15222  0163E4  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 15223  0163E6  0100               	movlb	0	; () banked
 15224  0163E8  6F63               	movwf	??_Port_GetPin& (0+255),b
 15225  0163EA  D003               	goto	u9160
 15226  0163EC                     u9165:
 15227  0163EC  0100               	movlb	0	; () banked
 15228  0163EE  90D8               	bcf	status,0,c
 15229  0163F0  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 15230  0163F2                     u9160:
 15231  0163F2  0100               	movlb	0	; () banked
 15232  0163F4  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 15233  0163F6  D7FA               	goto	u9165
 15234                           
 15235                           ;Port.c: 275: Output &= 1;
 15236  0163F8  0E01               	movlw	1
 15237  0163FA  0100               	movlb	0	; () banked
 15238  0163FC  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;Port.c: 276: return Output;
 15242  0163FE  0100               	movlb	0	; () banked
 15243  016400  5165               	movf	Port_GetPin@Output& (0+255),w,b
 15244  016402  0012               	return	
 15245  016404                     __end_of_Port_GetPin:
 15246                           	opt stack 0
 15247                           tosu	equ	0xFFF
 15248                           tosh	equ	0xFFE
 15249                           tosl	equ	0xFFD
 15250                           pclath	equ	0xFFA
 15251                           tblptru	equ	0xFF8
 15252                           tblptrh	equ	0xFF7
 15253                           tblptrl	equ	0xFF6
 15254                           tablat	equ	0xFF5
 15255                           prodh	equ	0xFF4
 15256                           prodl	equ	0xFF3
 15257                           intcon	equ	0xFF2
 15258                           postinc0	equ	0xFEE
 15259                           wreg	equ	0xFE8
 15260                           indf1	equ	0xFE7
 15261                           postdec1	equ	0xFE5
 15262                           fsr1h	equ	0xFE2
 15263                           fsr1l	equ	0xFE1
 15264                           indf2	equ	0xFDF
 15265                           postinc2	equ	0xFDE
 15266                           postdec2	equ	0xFDD
 15267                           plusw2	equ	0xFDB
 15268                           fsr2h	equ	0xFDA
 15269                           fsr2l	equ	0xFD9
 15270                           status	equ	0xFD8
 15271                           
 15272 ;; *************** function _ISR_Enable *****************
 15273 ;; Defined at:
 15274 ;;		line 27 in file "Library/ISR.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;		None
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;		None
 15279 ;; Return value:  Size  Location     Type
 15280 ;;                  1    wreg      void 
 15281 ;; Registers used:
 15282 ;;		None
 15283 ;; Tracked objects:
 15284 ;;		On entry : 0/0
 15285 ;;		On exit  : 0/0
 15286 ;;		Unchanged: 0/0
 15287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15292 ;;Total ram usage:        0 bytes
 15293 ;; Hardware stack levels used:    1
 15294 ;; Hardware stack levels required when called:    7
 15295 ;; This function calls:
 15296 ;;		Nothing
 15297 ;; This function is called by:
 15298 ;;		_initialise
 15299 ;; This function uses a non-reentrant model
 15300 ;;
 15301                           
 15302                           	psect	text73
 15303  016CFE                     __ptext73:
 15304                           	opt stack 0
 15305  016CFE                     _ISR_Enable:
 15306                           	opt stack 22
 15307                           
 15308                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;incstack = 0
 15312  016CFE  8CF2               	bsf	intcon,6,c	;volatile
 15313                           
 15314                           ;ISR.c: 30: INTCONbits.GIE = 1;
 15315  016D00  8EF2               	bsf	intcon,7,c	;volatile
 15316                           
 15317                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 15318  016D02  88F2               	bsf	intcon,4,c	;volatile
 15319                           
 15320                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 15321  016D04  92F2               	bcf	intcon,1,c	;volatile
 15322  016D06  0012               	return		;funcret
 15323  016D08                     __end_of_ISR_Enable:
 15324                           	opt stack 0
 15325                           tosu	equ	0xFFF
 15326                           tosh	equ	0xFFE
 15327                           tosl	equ	0xFFD
 15328                           pclath	equ	0xFFA
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           postinc0	equ	0xFEE
 15337                           wreg	equ	0xFE8
 15338                           indf1	equ	0xFE7
 15339                           postdec1	equ	0xFE5
 15340                           fsr1h	equ	0xFE2
 15341                           fsr1l	equ	0xFE1
 15342                           indf2	equ	0xFDF
 15343                           postinc2	equ	0xFDE
 15344                           postdec2	equ	0xFDD
 15345                           plusw2	equ	0xFDB
 15346                           fsr2h	equ	0xFDA
 15347                           fsr2l	equ	0xFD9
 15348                           status	equ	0xFD8
 15349                           
 15350 ;; *************** function _HMI_Init *****************
 15351 ;; Defined at:
 15352 ;;		line 104 in file "HMI.c"
 15353 ;; Parameters:    Size  Location     Type
 15354 ;;		None
 15355 ;; Auto vars:     Size  Location     Type
 15356 ;;  in              2   72[BANK0 ] unsigned short 
 15357 ;; Return value:  Size  Location     Type
 15358 ;;                  1    wreg      void 
 15359 ;; Registers used:
 15360 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15361 ;; Tracked objects:
 15362 ;;		On entry : 0/0
 15363 ;;		On exit  : 0/0
 15364 ;;		Unchanged: 0/0
 15365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15370 ;;Total ram usage:        2 bytes
 15371 ;; Hardware stack levels used:    1
 15372 ;; Hardware stack levels required when called:   16
 15373 ;; This function calls:
 15374 ;;		_Button_Init
 15375 ;;		_SPI_Init
 15376 ;;		_SPI_MinSpeed
 15377 ;; This function is called by:
 15378 ;;		_initialise
 15379 ;; This function uses a non-reentrant model
 15380 ;;
 15381                           
 15382                           	psect	text74
 15383  012294                     __ptext74:
 15384                           	opt stack 0
 15385  012294                     _HMI_Init:
 15386                           	opt stack 13
 15387                           
 15388                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 15389                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 15390                           
 15391                           ;incstack = 0
 15392  012294  0E5D               	movlw	low (_HMIBoard+48)
 15393  012296  0100               	movlb	0	; () banked
 15394  012298  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15395  01229A  0E01               	movlw	high (_HMIBoard+48)
 15396  01229C  0100               	movlb	0	; () banked
 15397  01229E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15398  0122A0  0E00               	movlw	0
 15399  0122A2  0100               	movlb	0	; () banked
 15400  0122A4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15401  0122A6  0E02               	movlw	2
 15402  0122A8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15403  0122AA  0E2E               	movlw	low _HMI_InitButtons
 15404  0122AC  0100               	movlb	0	; () banked
 15405  0122AE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15406  0122B0  0E6D               	movlw	high _HMI_InitButtons
 15407  0122B2  0100               	movlb	0	; () banked
 15408  0122B4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15409  0122B6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15410  0122B8  0100               	movlb	0	; () banked
 15411  0122BA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15412  0122BC  0EB6               	movlw	low _HMI_DIPSwitch
 15413  0122BE  0100               	movlb	0	; () banked
 15414  0122C0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15415  0122C2  0E6B               	movlw	high _HMI_DIPSwitch
 15416  0122C4  0100               	movlb	0	; () banked
 15417  0122C6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15418  0122C8  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 15419  0122CA  0100               	movlb	0	; () banked
 15420  0122CC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15421  0122CE  0E04               	movlw	low _Event_NULL
 15422  0122D0  0100               	movlb	0	; () banked
 15423  0122D2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15424  0122D4  0E14               	movlw	high _Event_NULL
 15425  0122D6  0100               	movlb	0	; () banked
 15426  0122D8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15427  0122DA  0E00               	movlw	low (_Event_NULL shr (0+16))
 15428  0122DC  0100               	movlb	0	; () banked
 15429  0122DE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15430  0122E0  EC7A  F0A1         	call	_Button_Init	;wreg free
 15431                           
 15432                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 15433                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 15434  0122E4  0E3F               	movlw	low (_HMIBoard+18)
 15435  0122E6  0100               	movlb	0	; () banked
 15436  0122E8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15437  0122EA  0E01               	movlw	high (_HMIBoard+18)
 15438  0122EC  0100               	movlb	0	; () banked
 15439  0122EE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15440  0122F0  0E00               	movlw	0
 15441  0122F2  0100               	movlb	0	; () banked
 15442  0122F4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15443  0122F6  0E02               	movlw	2
 15444  0122F8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15445  0122FA  0E2E               	movlw	low _HMI_InitButtons
 15446  0122FC  0100               	movlb	0	; () banked
 15447  0122FE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15448  012300  0E6D               	movlw	high _HMI_InitButtons
 15449  012302  0100               	movlb	0	; () banked
 15450  012304  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15451  012306  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15452  012308  0100               	movlb	0	; () banked
 15453  01230A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15454  01230C  0E16               	movlw	low _HMI_LeftSwitch
 15455  01230E  0100               	movlb	0	; () banked
 15456  012310  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15457  012312  0E6C               	movlw	high _HMI_LeftSwitch
 15458  012314  0100               	movlb	0	; () banked
 15459  012316  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15460  012318  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 15461  01231A  0100               	movlb	0	; () banked
 15462  01231C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15463  01231E  0E04               	movlw	low _Event_NULL
 15464  012320  0100               	movlb	0	; () banked
 15465  012322  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15466  012324  0E14               	movlw	high _Event_NULL
 15467  012326  0100               	movlb	0	; () banked
 15468  012328  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15469  01232A  0E00               	movlw	low (_Event_NULL shr (0+16))
 15470  01232C  0100               	movlb	0	; () banked
 15471  01232E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15472  012330  EC7A  F0A1         	call	_Button_Init	;wreg free
 15473                           
 15474                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 15475                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 15476  012334  0E35               	movlw	low (_HMIBoard+8)
 15477  012336  0100               	movlb	0	; () banked
 15478  012338  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15479  01233A  0E01               	movlw	high (_HMIBoard+8)
 15480  01233C  0100               	movlb	0	; () banked
 15481  01233E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15482  012340  0E00               	movlw	0
 15483  012342  0100               	movlb	0	; () banked
 15484  012344  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15485  012346  0E02               	movlw	2
 15486  012348  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15487  01234A  0E2E               	movlw	low _HMI_InitButtons
 15488  01234C  0100               	movlb	0	; () banked
 15489  01234E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15490  012350  0E6D               	movlw	high _HMI_InitButtons
 15491  012352  0100               	movlb	0	; () banked
 15492  012354  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15493  012356  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15494  012358  0100               	movlb	0	; () banked
 15495  01235A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15496  01235C  0EFE               	movlw	low _HMI_RightSwitch
 15497  01235E  0100               	movlb	0	; () banked
 15498  012360  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15499  012362  0E6B               	movlw	high _HMI_RightSwitch
 15500  012364  0100               	movlb	0	; () banked
 15501  012366  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15502  012368  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 15503  01236A  0100               	movlb	0	; () banked
 15504  01236C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15505  01236E  0E04               	movlw	low _Event_NULL
 15506  012370  0100               	movlb	0	; () banked
 15507  012372  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15508  012374  0E14               	movlw	high _Event_NULL
 15509  012376  0100               	movlb	0	; () banked
 15510  012378  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15511  01237A  0E00               	movlw	low (_Event_NULL shr (0+16))
 15512  01237C  0100               	movlb	0	; () banked
 15513  01237E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15514  012380  EC7A  F0A1         	call	_Button_Init	;wreg free
 15515                           
 15516                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 15517                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 15518  012384  0E49               	movlw	low (_HMIBoard+28)
 15519  012386  0100               	movlb	0	; () banked
 15520  012388  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15521  01238A  0E01               	movlw	high (_HMIBoard+28)
 15522  01238C  0100               	movlb	0	; () banked
 15523  01238E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15524  012390  0E00               	movlw	0
 15525  012392  0100               	movlb	0	; () banked
 15526  012394  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15527  012396  0E02               	movlw	2
 15528  012398  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15529  01239A  0E2E               	movlw	low _HMI_InitButtons
 15530  01239C  0100               	movlb	0	; () banked
 15531  01239E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15532  0123A0  0E6D               	movlw	high _HMI_InitButtons
 15533  0123A2  0100               	movlb	0	; () banked
 15534  0123A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15535  0123A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15536  0123A8  0100               	movlb	0	; () banked
 15537  0123AA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15538  0123AC  0EE6               	movlw	low _HMI_UpSwitch
 15539  0123AE  0100               	movlb	0	; () banked
 15540  0123B0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15541  0123B2  0E6B               	movlw	high _HMI_UpSwitch
 15542  0123B4  0100               	movlb	0	; () banked
 15543  0123B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15544  0123B8  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 15545  0123BA  0100               	movlb	0	; () banked
 15546  0123BC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15547  0123BE  0E04               	movlw	low _Event_NULL
 15548  0123C0  0100               	movlb	0	; () banked
 15549  0123C2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15550  0123C4  0E14               	movlw	high _Event_NULL
 15551  0123C6  0100               	movlb	0	; () banked
 15552  0123C8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15553  0123CA  0E00               	movlw	low (_Event_NULL shr (0+16))
 15554  0123CC  0100               	movlb	0	; () banked
 15555  0123CE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15556  0123D0  EC7A  F0A1         	call	_Button_Init	;wreg free
 15557                           
 15558                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 15559                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 15560  0123D4  0E53               	movlw	low (_HMIBoard+38)
 15561  0123D6  0100               	movlb	0	; () banked
 15562  0123D8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15563  0123DA  0E01               	movlw	high (_HMIBoard+38)
 15564  0123DC  0100               	movlb	0	; () banked
 15565  0123DE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15566  0123E0  0E00               	movlw	0
 15567  0123E2  0100               	movlb	0	; () banked
 15568  0123E4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15569  0123E6  0E02               	movlw	2
 15570  0123E8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15571  0123EA  0E2E               	movlw	low _HMI_InitButtons
 15572  0123EC  0100               	movlb	0	; () banked
 15573  0123EE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15574  0123F0  0E6D               	movlw	high _HMI_InitButtons
 15575  0123F2  0100               	movlb	0	; () banked
 15576  0123F4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15577  0123F6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15578  0123F8  0100               	movlb	0	; () banked
 15579  0123FA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15580  0123FC  0ECE               	movlw	low _HMI_DownSwitch
 15581  0123FE  0100               	movlb	0	; () banked
 15582  012400  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15583  012402  0E6B               	movlw	high _HMI_DownSwitch
 15584  012404  0100               	movlb	0	; () banked
 15585  012406  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15586  012408  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 15587  01240A  0100               	movlb	0	; () banked
 15588  01240C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15589  01240E  0E04               	movlw	low _Event_NULL
 15590  012410  0100               	movlb	0	; () banked
 15591  012412  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15592  012414  0E14               	movlw	high _Event_NULL
 15593  012416  0100               	movlb	0	; () banked
 15594  012418  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15595  01241A  0E00               	movlw	low (_Event_NULL shr (0+16))
 15596  01241C  0100               	movlb	0	; () banked
 15597  01241E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15598  012420  EC7A  F0A1         	call	_Button_Init	;wreg free
 15599                           
 15600                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 15601  012424  0EA0               	movlw	160
 15602  012426  0100               	movlb	0	; () banked
 15603  012428  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 15604  01242A  0E86               	movlw	134
 15605  01242C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15606  01242E  0E01               	movlw	1
 15607  012430  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15608  012432  0E00               	movlw	0
 15609  012434  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15610  012436  0E00               	movlw	0
 15611  012438  0100               	movlb	0	; () banked
 15612  01243A  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 15613  01243C  0E02               	movlw	2
 15614  01243E  0100               	movlb	0	; () banked
 15615  012440  6F92               	movwf	SPI_Init@pMode& (0+255),b
 15616  012442  ECA7  F084         	call	_SPI_Init	;wreg free
 15617                           
 15618                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 15619  012446  0E67               	movlw	low _SPI1
 15620  012448  0100               	movlb	0	; () banked
 15621  01244A  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 15622  01244C  0E01               	movlw	high _SPI1
 15623  01244E  0100               	movlb	0	; () banked
 15624  012450  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 15625  012452  EC29  F0AD         	call	_SPI_MinSpeed	;wreg free
 15626                           
 15627                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 15628  012456  0E00               	movlw	0
 15629  012458  0100               	movlb	0	; () banked
 15630  01245A  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 15631  01245C  0E00               	movlw	0
 15632  01245E  6FA8               	movwf	HMI_Init@in& (0+255),b
 15633  012460                     l14212:
 15634                           
 15635                           ; BSR set to: 0
 15636  012460  0100               	movlb	0	; () banked
 15637  012462  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 15638  012464  E113               	bnz	l1153
 15639  012466  0E08               	movlw	8
 15640  012468  0100               	movlb	0	; () banked
 15641  01246A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 15642  01246C  B0D8               	btfsc	status,0,c
 15643  01246E  0012               	return	
 15644                           
 15645                           ; BSR set to: 0
 15646                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 15647                           
 15648                           ; BSR set to: 0
 15649                           
 15650                           ; BSR set to: 0
 15651  012470  0E2D               	movlw	low _HMIBoard
 15652  012472  0100               	movlb	0	; () banked
 15653  012474  25A8               	addwf	HMI_Init@in& (0+255),w,b
 15654  012476  6ED9               	movwf	fsr2l,c
 15655  012478  0E01               	movlw	high _HMIBoard
 15656  01247A  0100               	movlb	0	; () banked
 15657  01247C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 15658  01247E  6EDA               	movwf	fsr2h,c
 15659  012480  0E00               	movlw	0
 15660  012482  6EDF               	movwf	indf2,c
 15661                           
 15662                           ; BSR set to: 0
 15663  012484  0100               	movlb	0	; () banked
 15664  012486  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 15665  012488  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 15666  01248A  D7EA               	goto	l14212
 15667  01248C                     l1153:
 15668                           
 15669                           ; BSR set to: 0
 15670  01248C  0012               	return		;funcret
 15671  01248E                     __end_of_HMI_Init:
 15672                           	opt stack 0
 15673                           tosu	equ	0xFFF
 15674                           tosh	equ	0xFFE
 15675                           tosl	equ	0xFFD
 15676                           pclath	equ	0xFFA
 15677                           tblptru	equ	0xFF8
 15678                           tblptrh	equ	0xFF7
 15679                           tblptrl	equ	0xFF6
 15680                           tablat	equ	0xFF5
 15681                           prodh	equ	0xFF4
 15682                           prodl	equ	0xFF3
 15683                           intcon	equ	0xFF2
 15684                           postinc0	equ	0xFEE
 15685                           wreg	equ	0xFE8
 15686                           indf1	equ	0xFE7
 15687                           postdec1	equ	0xFE5
 15688                           fsr1h	equ	0xFE2
 15689                           fsr1l	equ	0xFE1
 15690                           indf2	equ	0xFDF
 15691                           postinc2	equ	0xFDE
 15692                           postdec2	equ	0xFDD
 15693                           plusw2	equ	0xFDB
 15694                           fsr2h	equ	0xFDA
 15695                           fsr2l	equ	0xFD9
 15696                           status	equ	0xFD8
 15697                           
 15698 ;; *************** function _SPI_MinSpeed *****************
 15699 ;; Defined at:
 15700 ;;		line 190 in file "Library/SPI.c"
 15701 ;; Parameters:    Size  Location     Type
 15702 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15703 ;;		 -> SPI1(11), 
 15704 ;; Auto vars:     Size  Location     Type
 15705 ;;		None
 15706 ;; Return value:  Size  Location     Type
 15707 ;;                  1    wreg      void 
 15708 ;; Registers used:
 15709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15719 ;;Total ram usage:        2 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:    9
 15722 ;; This function calls:
 15723 ;;		_Byte_SetBit
 15724 ;;		_Byte_SetQuad
 15725 ;; This function is called by:
 15726 ;;		_HMI_Init
 15727 ;; This function uses a non-reentrant model
 15728 ;;
 15729                           
 15730                           	psect	text75
 15731  015A52                     __ptext75:
 15732                           	opt stack 0
 15733  015A52                     _SPI_MinSpeed:
 15734                           	opt stack 19
 15735                           
 15736                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;incstack = 0
 15740  015A52  0100               	movlb	0	; () banked
 15741  015A54  EE20 F006          	lfsr	2,6
 15742  015A58  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15743  015A5A  26D9               	addwf	fsr2l,f,c
 15744  015A5C  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15745  015A5E  22DA               	addwfc	fsr2h,f,c
 15746  015A60  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15747  015A64  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15748  015A68  0E05               	movlw	5
 15749  015A6A  0100               	movlb	0	; () banked
 15750  015A6C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15751  015A6E  0E00               	movlw	0
 15752  015A70  0100               	movlb	0	; () banked
 15753  015A72  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15754  015A74  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 15755                           
 15756                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 15757  015A78  0100               	movlb	0	; () banked
 15758  015A7A  EE20 F006          	lfsr	2,6
 15759  015A7E  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15760  015A80  26D9               	addwf	fsr2l,f,c
 15761  015A82  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15762  015A84  22DA               	addwfc	fsr2h,f,c
 15763  015A86  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15764  015A8A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15765  015A8E  0E00               	movlw	0
 15766  015A90  0100               	movlb	0	; () banked
 15767  015A92  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15768  015A94  0E02               	movlw	2
 15769  015A96  0100               	movlb	0	; () banked
 15770  015A98  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15771  015A9A  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 15772                           
 15773                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15774  015A9E  0100               	movlb	0	; () banked
 15775  015AA0  EE20 F006          	lfsr	2,6
 15776  015AA4  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15777  015AA6  26D9               	addwf	fsr2l,f,c
 15778  015AA8  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15779  015AAA  22DA               	addwfc	fsr2h,f,c
 15780  015AAC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15781  015AB0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15782  015AB4  0E05               	movlw	5
 15783  015AB6  0100               	movlb	0	; () banked
 15784  015AB8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15785  015ABA  0E01               	movlw	1
 15786  015ABC  0100               	movlb	0	; () banked
 15787  015ABE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15788  015AC0  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 15789  015AC4  0012               	return		;funcret
 15790  015AC6                     __end_of_SPI_MinSpeed:
 15791                           	opt stack 0
 15792                           tosu	equ	0xFFF
 15793                           tosh	equ	0xFFE
 15794                           tosl	equ	0xFFD
 15795                           pclath	equ	0xFFA
 15796                           tblptru	equ	0xFF8
 15797                           tblptrh	equ	0xFF7
 15798                           tblptrl	equ	0xFF6
 15799                           tablat	equ	0xFF5
 15800                           prodh	equ	0xFF4
 15801                           prodl	equ	0xFF3
 15802                           intcon	equ	0xFF2
 15803                           postinc0	equ	0xFEE
 15804                           wreg	equ	0xFE8
 15805                           indf1	equ	0xFE7
 15806                           postdec1	equ	0xFE5
 15807                           fsr1h	equ	0xFE2
 15808                           fsr1l	equ	0xFE1
 15809                           indf2	equ	0xFDF
 15810                           postinc2	equ	0xFDE
 15811                           postdec2	equ	0xFDD
 15812                           plusw2	equ	0xFDB
 15813                           fsr2h	equ	0xFDA
 15814                           fsr2l	equ	0xFD9
 15815                           status	equ	0xFD8
 15816                           
 15817 ;; *************** function _SPI_Init *****************
 15818 ;; Defined at:
 15819 ;;		line 12 in file "Library/SPI.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;  pClock          4   45[BANK0 ] unsigned long 
 15822 ;;  pChannel        1   49[BANK0 ] enum E6744
 15823 ;;  pMode           1   50[BANK0 ] enum E6748
 15824 ;; Auto vars:     Size  Location     Type
 15825 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 15826 ;;		 -> SPI1(11), SPI2(11), 
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      void 
 15829 ;; Registers used:
 15830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15836 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;Total ram usage:        8 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; Hardware stack levels required when called:   12
 15843 ;; This function calls:
 15844 ;;		_Byte_SetBit
 15845 ;;		_Byte_SetQuad
 15846 ;;		_Port_SetPinType
 15847 ;;		_SPI_DCS
 15848 ;;		_SPI_DisableISR
 15849 ;;		_Timer2_Init
 15850 ;; This function is called by:
 15851 ;;		_Configure_GPIOs
 15852 ;;		_HMI_Init
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           	psect	text76
 15857  01094E                     __ptext76:
 15858                           	opt stack 0
 15859  01094E                     _SPI_Init:
 15860                           	opt stack 15
 15861                           
 15862                           ;SPI.c: 14: SPIPtr pInput;
 15863                           ;SPI.c: 16: switch (pChannel)
 15864                           
 15865                           ;incstack = 0
 15866  01094E  D00C               	goto	l597
 15867  010950                     
 15868                           ;SPI.c: 19: pInput = &SPI1;
 15869  010950  0E67               	movlw	low _SPI1
 15870  010952  0100               	movlb	0	; () banked
 15871  010954  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15872  010956  0E01               	movlw	high _SPI1
 15873  010958  D004               	goto	L10
 15874  01095A                     
 15875                           ; BSR set to: 0
 15876                           ;SPI.c: 22: pInput = &SPI2;
 15877                           
 15878                           ; BSR set to: 0
 15879  01095A  0E72               	movlw	low _SPI2
 15880  01095C  0100               	movlb	0	; () banked
 15881  01095E  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15882  010960  0E01               	movlw	high _SPI2
 15883  010962                     L10:
 15884  010962  0100               	movlb	0	; () banked
 15885  010964  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;SPI.c: 24: };
 15889                           
 15890                           ;SPI.c: 23: break;
 15891  010966  D008               	goto	l599
 15892  010968                     l597:
 15893                           
 15894                           ; BSR set to: 0
 15895  010968  0100               	movlb	0	; () banked
 15896  01096A  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15897                           
 15898                           ; Switch size 1, requested type "space"
 15899                           ; Number of cases is 2, Range of values is 0 to 1
 15900                           ; switch strategies available:
 15901                           ; Name         Instructions Cycles
 15902                           ; simple_byte            7     4 (average)
 15903                           ;	Chosen strategy is simple_byte
 15904  01096C  0A00               	xorlw	0	; case 0
 15905  01096E  B4D8               	btfsc	status,2,c
 15906  010970  D7EF               	goto	l598
 15907  010972  0A01               	xorlw	1	; case 1
 15908  010974  B4D8               	btfsc	status,2,c
 15909  010976  D7F1               	goto	l600
 15910  010978                     l599:
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;SPI.c: 26: pInput->mChannel = pChannel;
 15914                           
 15915                           ; BSR set to: 0
 15916  010978  0100               	movlb	0	; () banked
 15917  01097A  EE20 F002          	lfsr	2,2
 15918  01097E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15919  010980  26D9               	addwf	fsr2l,f,c
 15920  010982  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15921  010984  22DA               	addwfc	fsr2h,f,c
 15922  010986  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 15923                           
 15924                           ;SPI.c: 35: switch (pChannel)
 15925  01098A  D0B1               	goto	l601
 15926  01098C                     
 15927                           ; BSR set to: 0
 15928                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15929                           
 15930                           ; BSR set to: 0
 15931  01098C  0E35               	movlw	low _PortC
 15932  01098E  0100               	movlb	0	; () banked
 15933  010990  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15934  010992  0E00               	movlw	high _PortC
 15935  010994  0100               	movlb	0	; () banked
 15936  010996  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15937  010998  0E02               	movlw	2
 15938  01099A  0100               	movlb	0	; () banked
 15939  01099C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15940  01099E  0E03               	movlw	3
 15941  0109A0  0100               	movlb	0	; () banked
 15942  0109A2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15943  0109A4  EC2E  F093         	call	_Port_SetPinType	;wreg free
 15944                           
 15945                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15946  0109A8  0E35               	movlw	low _PortC
 15947  0109AA  0100               	movlb	0	; () banked
 15948  0109AC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15949  0109AE  0E00               	movlw	high _PortC
 15950  0109B0  0100               	movlb	0	; () banked
 15951  0109B2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15952  0109B4  0E03               	movlw	3
 15953  0109B6  0100               	movlb	0	; () banked
 15954  0109B8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15955  0109BA  0E03               	movlw	3
 15956  0109BC  0100               	movlb	0	; () banked
 15957  0109BE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15958  0109C0  EC2E  F093         	call	_Port_SetPinType	;wreg free
 15959                           
 15960                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15961  0109C4  0E35               	movlw	low _PortC
 15962  0109C6  0100               	movlb	0	; () banked
 15963  0109C8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15964  0109CA  0E00               	movlw	high _PortC
 15965  0109CC  0100               	movlb	0	; () banked
 15966  0109CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15967  0109D0  0E05               	movlw	5
 15968  0109D2  0100               	movlb	0	; () banked
 15969  0109D4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15970  0109D6  0E03               	movlw	3
 15971  0109D8  0100               	movlb	0	; () banked
 15972  0109DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15973  0109DC  EC2E  F093         	call	_Port_SetPinType	;wreg free
 15974                           
 15975                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15976  0109E0  0E35               	movlw	low _PortC
 15977  0109E2  0100               	movlb	0	; () banked
 15978  0109E4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15979  0109E6  0E00               	movlw	high _PortC
 15980  0109E8  0100               	movlb	0	; () banked
 15981  0109EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15982  0109EC  0E04               	movlw	4
 15983  0109EE  0100               	movlb	0	; () banked
 15984  0109F0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15985  0109F2  0E00               	movlw	0
 15986  0109F4  0100               	movlb	0	; () banked
 15987  0109F6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15988  0109F8  EC2E  F093         	call	_Port_SetPinType	;wreg free
 15989                           
 15990                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15991  0109FC  0100               	movlb	0	; () banked
 15992  0109FE  EE20 F003          	lfsr	2,3
 15993  010A02  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15994  010A04  26D9               	addwf	fsr2l,f,c
 15995  010A06  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15996  010A08  22DA               	addwfc	fsr2h,f,c
 15997  010A0A  0EC7               	movlw	199
 15998  010A0C  6EDE               	movwf	postinc2,c
 15999  010A0E  0E0F               	movlw	15
 16000  010A10  6EDD               	movwf	postdec2,c
 16001                           
 16002                           ; BSR set to: 0
 16003                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 16004  010A12  0100               	movlb	0	; () banked
 16005  010A14  EE20 F006          	lfsr	2,6
 16006  010A18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16007  010A1A  26D9               	addwf	fsr2l,f,c
 16008  010A1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16009  010A1E  22DA               	addwfc	fsr2h,f,c
 16010  010A20  0EC6               	movlw	198
 16011  010A22  6EDE               	movwf	postinc2,c
 16012  010A24  0E0F               	movlw	15
 16013  010A26  6EDD               	movwf	postdec2,c
 16014                           
 16015                           ; BSR set to: 0
 16016                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 16017  010A28  0100               	movlb	0	; () banked
 16018  010A2A  EE20 F009          	lfsr	2,9
 16019  010A2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16020  010A30  26D9               	addwf	fsr2l,f,c
 16021  010A32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16022  010A34  22DA               	addwfc	fsr2h,f,c
 16023  010A36  0EC9               	movlw	201
 16024  010A38  D056               	goto	L11
 16025  010A3A                     
 16026                           ; BSR set to: 0
 16027                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 16028                           
 16029                           ; BSR set to: 0
 16030  010A3A  0EA5               	movlw	low _PortD
 16031  010A3C  0100               	movlb	0	; () banked
 16032  010A3E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16033  010A40  0E01               	movlw	high _PortD
 16034  010A42  0100               	movlb	0	; () banked
 16035  010A44  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16036  010A46  0E07               	movlw	7
 16037  010A48  0100               	movlb	0	; () banked
 16038  010A4A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16039  010A4C  0E03               	movlw	3
 16040  010A4E  0100               	movlb	0	; () banked
 16041  010A50  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16042  010A52  EC2E  F093         	call	_Port_SetPinType	;wreg free
 16043                           
 16044                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 16045  010A56  0EA5               	movlw	low _PortD
 16046  010A58  0100               	movlb	0	; () banked
 16047  010A5A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16048  010A5C  0E01               	movlw	high _PortD
 16049  010A5E  0100               	movlb	0	; () banked
 16050  010A60  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16051  010A62  0E06               	movlw	6
 16052  010A64  0100               	movlb	0	; () banked
 16053  010A66  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16054  010A68  0E03               	movlw	3
 16055  010A6A  0100               	movlb	0	; () banked
 16056  010A6C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16057  010A6E  EC2E  F093         	call	_Port_SetPinType	;wreg free
 16058                           
 16059                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 16060  010A72  0EA5               	movlw	low _PortD
 16061  010A74  0100               	movlb	0	; () banked
 16062  010A76  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16063  010A78  0E01               	movlw	high _PortD
 16064  010A7A  0100               	movlb	0	; () banked
 16065  010A7C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16066  010A7E  0E04               	movlw	4
 16067  010A80  0100               	movlb	0	; () banked
 16068  010A82  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16069  010A84  0E03               	movlw	3
 16070  010A86  0100               	movlb	0	; () banked
 16071  010A88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16072  010A8A  EC2E  F093         	call	_Port_SetPinType	;wreg free
 16073                           
 16074                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 16075  010A8E  0EA5               	movlw	low _PortD
 16076  010A90  0100               	movlb	0	; () banked
 16077  010A92  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16078  010A94  0E01               	movlw	high _PortD
 16079  010A96  0100               	movlb	0	; () banked
 16080  010A98  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16081  010A9A  0E05               	movlw	5
 16082  010A9C  0100               	movlb	0	; () banked
 16083  010A9E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16084  010AA0  0E00               	movlw	0
 16085  010AA2  0100               	movlb	0	; () banked
 16086  010AA4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16087  010AA6  EC2E  F093         	call	_Port_SetPinType	;wreg free
 16088                           
 16089                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 16090  010AAA  0100               	movlb	0	; () banked
 16091  010AAC  EE20 F003          	lfsr	2,3
 16092  010AB0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16093  010AB2  26D9               	addwf	fsr2l,f,c
 16094  010AB4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16095  010AB6  22DA               	addwfc	fsr2h,f,c
 16096  010AB8  0E6D               	movlw	109
 16097  010ABA  6EDE               	movwf	postinc2,c
 16098  010ABC  0E0F               	movlw	15
 16099  010ABE  6EDD               	movwf	postdec2,c
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 16103  010AC0  0100               	movlb	0	; () banked
 16104  010AC2  EE20 F006          	lfsr	2,6
 16105  010AC6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16106  010AC8  26D9               	addwf	fsr2l,f,c
 16107  010ACA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16108  010ACC  22DA               	addwfc	fsr2h,f,c
 16109  010ACE  0E6C               	movlw	108
 16110  010AD0  6EDE               	movwf	postinc2,c
 16111  010AD2  0E0F               	movlw	15
 16112  010AD4  6EDD               	movwf	postdec2,c
 16113                           
 16114                           ; BSR set to: 0
 16115                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 16116  010AD6  0100               	movlb	0	; () banked
 16117  010AD8  EE20 F009          	lfsr	2,9
 16118  010ADC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16119  010ADE  26D9               	addwf	fsr2l,f,c
 16120  010AE0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16121  010AE2  22DA               	addwfc	fsr2h,f,c
 16122  010AE4  0E6F               	movlw	111
 16123  010AE6                     L11:
 16124  010AE6  6EDE               	movwf	postinc2,c
 16125  010AE8  0E0F               	movlw	15
 16126  010AEA  6EDD               	movwf	postdec2,c
 16127                           
 16128                           ;SPI.c: 68: break;
 16129  010AEC  D009               	goto	l603
 16130  010AEE                     l601:
 16131                           
 16132                           ; BSR set to: 0
 16133                           
 16134                           ; BSR set to: 0
 16135  010AEE  0100               	movlb	0	; () banked
 16136  010AF0  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 16137                           
 16138                           ; Switch size 1, requested type "space"
 16139                           ; Number of cases is 2, Range of values is 0 to 1
 16140                           ; switch strategies available:
 16141                           ; Name         Instructions Cycles
 16142                           ; simple_byte            7     4 (average)
 16143                           ;	Chosen strategy is simple_byte
 16144  010AF2  0A00               	xorlw	0	; case 0
 16145  010AF4  B4D8               	btfsc	status,2,c
 16146  010AF6  D74A               	goto	l602
 16147  010AF8  0A01               	xorlw	1	; case 1
 16148  010AFA  A4D8               	btfss	status,2,c
 16149  010AFC  0012               	return	
 16150  010AFE  D79D               	goto	l604
 16151  010B00                     l603:
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16155                           
 16156                           ; BSR set to: 0
 16157  010B00  0100               	movlb	0	; () banked
 16158  010B02  EE20 F006          	lfsr	2,6
 16159  010B06  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16160  010B08  26D9               	addwf	fsr2l,f,c
 16161  010B0A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16162  010B0C  22DA               	addwfc	fsr2h,f,c
 16163  010B0E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16164  010B12  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16165  010B16  0E05               	movlw	5
 16166  010B18  0100               	movlb	0	; () banked
 16167  010B1A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16168  010B1C  0E00               	movlw	0
 16169  010B1E  0100               	movlb	0	; () banked
 16170  010B20  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16171  010B22  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16172                           
 16173                           ;SPI.c: 77: switch(pMode)
 16174  010B26  D09C               	goto	l607
 16175  010B28                     
 16176                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16177  010B28  0100               	movlb	0	; () banked
 16178  010B2A  EE20 F006          	lfsr	2,6
 16179  010B2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16180  010B30  26D9               	addwf	fsr2l,f,c
 16181  010B32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16182  010B34  22DA               	addwfc	fsr2h,f,c
 16183  010B36  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16184  010B3A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16185  010B3E  0E04               	movlw	4
 16186  010B40  0100               	movlb	0	; () banked
 16187  010B42  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16188  010B44  0E00               	movlw	0
 16189  010B46  0100               	movlb	0	; () banked
 16190  010B48  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16191  010B4A  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16192                           
 16193                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16194  010B4E  0100               	movlb	0	; () banked
 16195  010B50  EE20 F003          	lfsr	2,3
 16196  010B54  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16197  010B56  26D9               	addwf	fsr2l,f,c
 16198  010B58  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16199  010B5A  22DA               	addwfc	fsr2h,f,c
 16200  010B5C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16201  010B60  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16202  010B64  0E06               	movlw	6
 16203  010B66  0100               	movlb	0	; () banked
 16204  010B68  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16205  010B6A  0E00               	movlw	0
 16206  010B6C  0100               	movlb	0	; () banked
 16207  010B6E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16208  010B70  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16209                           
 16210                           ;SPI.c: 82: break;
 16211  010B74  D084               	goto	l609
 16212  010B76                     
 16213                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16214  010B76  0100               	movlb	0	; () banked
 16215  010B78  EE20 F006          	lfsr	2,6
 16216  010B7C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16217  010B7E  26D9               	addwf	fsr2l,f,c
 16218  010B80  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16219  010B82  22DA               	addwfc	fsr2h,f,c
 16220  010B84  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16221  010B88  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16222  010B8C  0E04               	movlw	4
 16223  010B8E  0100               	movlb	0	; () banked
 16224  010B90  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16225  010B92  0E00               	movlw	0
 16226  010B94  0100               	movlb	0	; () banked
 16227  010B96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16228  010B98  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16229                           
 16230                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16231  010B9C  0100               	movlb	0	; () banked
 16232  010B9E  EE20 F003          	lfsr	2,3
 16233  010BA2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16234  010BA4  26D9               	addwf	fsr2l,f,c
 16235  010BA6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16236  010BA8  22DA               	addwfc	fsr2h,f,c
 16237  010BAA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16238  010BAE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16239  010BB2  0E06               	movlw	6
 16240  010BB4  0100               	movlb	0	; () banked
 16241  010BB6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16242  010BB8  0E01               	movlw	1
 16243  010BBA  0100               	movlb	0	; () banked
 16244  010BBC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16245  010BBE  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16246                           
 16247                           ;SPI.c: 86: break;
 16248  010BC2  D05D               	goto	l609
 16249  010BC4                     
 16250                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16251  010BC4  0100               	movlb	0	; () banked
 16252  010BC6  EE20 F006          	lfsr	2,6
 16253  010BCA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16254  010BCC  26D9               	addwf	fsr2l,f,c
 16255  010BCE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16256  010BD0  22DA               	addwfc	fsr2h,f,c
 16257  010BD2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16258  010BD6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16259  010BDA  0E04               	movlw	4
 16260  010BDC  0100               	movlb	0	; () banked
 16261  010BDE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16262  010BE0  0E01               	movlw	1
 16263  010BE2  0100               	movlb	0	; () banked
 16264  010BE4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16265  010BE6  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16266                           
 16267                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16268  010BEA  0100               	movlb	0	; () banked
 16269  010BEC  EE20 F003          	lfsr	2,3
 16270  010BF0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16271  010BF2  26D9               	addwf	fsr2l,f,c
 16272  010BF4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16273  010BF6  22DA               	addwfc	fsr2h,f,c
 16274  010BF8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16275  010BFC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16276  010C00  0E06               	movlw	6
 16277  010C02  0100               	movlb	0	; () banked
 16278  010C04  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16279  010C06  0E00               	movlw	0
 16280  010C08  0100               	movlb	0	; () banked
 16281  010C0A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16282  010C0C  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16283                           
 16284                           ;SPI.c: 90: break;
 16285  010C10  D036               	goto	l609
 16286  010C12                     
 16287                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16288  010C12  0100               	movlb	0	; () banked
 16289  010C14  EE20 F006          	lfsr	2,6
 16290  010C18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16291  010C1A  26D9               	addwf	fsr2l,f,c
 16292  010C1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16293  010C1E  22DA               	addwfc	fsr2h,f,c
 16294  010C20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16295  010C24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16296  010C28  0E04               	movlw	4
 16297  010C2A  0100               	movlb	0	; () banked
 16298  010C2C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16299  010C2E  0E01               	movlw	1
 16300  010C30  0100               	movlb	0	; () banked
 16301  010C32  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16302  010C34  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16303                           
 16304                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16305  010C38  0100               	movlb	0	; () banked
 16306  010C3A  EE20 F003          	lfsr	2,3
 16307  010C3E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16308  010C40  26D9               	addwf	fsr2l,f,c
 16309  010C42  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16310  010C44  22DA               	addwfc	fsr2h,f,c
 16311  010C46  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16312  010C4A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16313  010C4E  0E06               	movlw	6
 16314  010C50  0100               	movlb	0	; () banked
 16315  010C52  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16316  010C54  0E01               	movlw	1
 16317  010C56  0100               	movlb	0	; () banked
 16318  010C58  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16319  010C5A  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16320                           
 16321                           ;SPI.c: 94: break;
 16322  010C5E  D00F               	goto	l609
 16323  010C60                     l607:
 16324  010C60  0100               	movlb	0	; () banked
 16325  010C62  5192               	movf	SPI_Init@pMode& (0+255),w,b
 16326                           
 16327                           ; Switch size 1, requested type "space"
 16328                           ; Number of cases is 4, Range of values is 0 to 3
 16329                           ; switch strategies available:
 16330                           ; Name         Instructions Cycles
 16331                           ; simple_byte           13     7 (average)
 16332                           ;	Chosen strategy is simple_byte
 16333  010C64  0A00               	xorlw	0	; case 0
 16334  010C66  B4D8               	btfsc	status,2,c
 16335  010C68  D75F               	goto	l608
 16336  010C6A  0A01               	xorlw	1	; case 1
 16337  010C6C  B4D8               	btfsc	status,2,c
 16338  010C6E  D783               	goto	l610
 16339  010C70  0A03               	xorlw	3	; case 2
 16340  010C72  B4D8               	btfsc	status,2,c
 16341  010C74  D7A7               	goto	l611
 16342  010C76  0A01               	xorlw	1	; case 3
 16343  010C78  A4D8               	btfss	status,2,c
 16344  010C7A  0012               	return	
 16345  010C7C  D7CA               	goto	l612
 16346  010C7E                     l609:
 16347                           
 16348                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 16349                           
 16350                           ; BSR set to: 0
 16351  010C7E  0100               	movlb	0	; () banked
 16352  010C80  EE20 F006          	lfsr	2,6
 16353  010C84  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16354  010C86  26D9               	addwf	fsr2l,f,c
 16355  010C88  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16356  010C8A  22DA               	addwfc	fsr2h,f,c
 16357  010C8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16358  010C90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16359  010C94  0E07               	movlw	7
 16360  010C96  0100               	movlb	0	; () banked
 16361  010C98  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16362  010C9A  0E00               	movlw	0
 16363  010C9C  0100               	movlb	0	; () banked
 16364  010C9E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16365  010CA0  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16366                           
 16367                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 16368  010CA4  0100               	movlb	0	; () banked
 16369  010CA6  EE20 F006          	lfsr	2,6
 16370  010CAA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16371  010CAC  26D9               	addwf	fsr2l,f,c
 16372  010CAE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16373  010CB0  22DA               	addwfc	fsr2h,f,c
 16374  010CB2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16375  010CB6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16376  010CBA  0E06               	movlw	6
 16377  010CBC  0100               	movlb	0	; () banked
 16378  010CBE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16379  010CC0  0E00               	movlw	0
 16380  010CC2  0100               	movlb	0	; () banked
 16381  010CC4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16382  010CC6  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16383                           
 16384                           ;SPI.c: 106: Timer2_Init(pClock);
 16385  010CCA  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 16386  010CCE  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 16387  010CD2  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 16388  010CD6  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 16389  010CDA  ECFA  F09A         	call	_Timer2_Init	;wreg free
 16390                           
 16391                           ;SPI.c: 112: SPI_DisableISR(pInput);
 16392  010CDE  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 16393  010CE2  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 16394  010CE6  ECD3  F0B4         	call	_SPI_DisableISR	;wreg free
 16395                           
 16396                           ;SPI.c: 116: switch (pChannel)
 16397  010CEA  D004               	goto	l614
 16398  010CEC                     l615:
 16399                           
 16400                           ; BSR set to: 0
 16401  010CEC  869F               	bsf	3999,3,c	;volatile
 16402  010CEE  D00B               	goto	l616
 16403  010CF0                     l617:
 16404                           
 16405                           ; BSR set to: 0
 16406  010CF0  8EA5               	bsf	4005,7,c	;volatile
 16407  010CF2  D009               	goto	l616
 16408  010CF4                     l614:
 16409                           
 16410                           ; BSR set to: 0
 16411  010CF4  0100               	movlb	0	; () banked
 16412  010CF6  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 16413                           
 16414                           ; Switch size 1, requested type "space"
 16415                           ; Number of cases is 2, Range of values is 0 to 1
 16416                           ; switch strategies available:
 16417                           ; Name         Instructions Cycles
 16418                           ; simple_byte            7     4 (average)
 16419                           ;	Chosen strategy is simple_byte
 16420  010CF8  0A00               	xorlw	0	; case 0
 16421  010CFA  B4D8               	btfsc	status,2,c
 16422  010CFC  D7F7               	goto	l615
 16423  010CFE  0A01               	xorlw	1	; case 1
 16424  010D00  A4D8               	btfss	status,2,c
 16425  010D02  0012               	return	
 16426  010D04  D7F5               	goto	l617
 16427  010D06                     l616:
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;SPI.c: 124: SPI_DCS(pInput);
 16431                           
 16432                           ; BSR set to: 0
 16433  010D06  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 16434  010D0A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 16435  010D0E  EC66  F0B4         	call	_SPI_DCS	;wreg free
 16436                           
 16437                           ;SPI.c: 126: pInput->mBusy = 0;
 16438  010D12  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 16439  010D16  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 16440  010D1A  0E00               	movlw	0
 16441  010D1C  6EDF               	movwf	indf2,c
 16442                           
 16443                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 16444  010D1E  0100               	movlb	0	; () banked
 16445  010D20  EE20 F006          	lfsr	2,6
 16446  010D24  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16447  010D26  26D9               	addwf	fsr2l,f,c
 16448  010D28  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16449  010D2A  22DA               	addwfc	fsr2h,f,c
 16450  010D2C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16451  010D30  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16452  010D34  0E00               	movlw	0
 16453  010D36  0100               	movlb	0	; () banked
 16454  010D38  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16455  010D3A  0E03               	movlw	3
 16456  010D3C  0100               	movlb	0	; () banked
 16457  010D3E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16458  010D40  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 16459                           
 16460                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16461  010D44  0100               	movlb	0	; () banked
 16462  010D46  EE20 F006          	lfsr	2,6
 16463  010D4A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16464  010D4C  26D9               	addwf	fsr2l,f,c
 16465  010D4E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16466  010D50  22DA               	addwfc	fsr2h,f,c
 16467  010D52  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16468  010D56  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16469  010D5A  0E05               	movlw	5
 16470  010D5C  0100               	movlb	0	; () banked
 16471  010D5E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16472  010D60  0E01               	movlw	1
 16473  010D62  0100               	movlb	0	; () banked
 16474  010D64  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16475  010D66  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 16476  010D6A  0012               	return		;funcret
 16477  010D6C                     __end_of_SPI_Init:
 16478                           	opt stack 0
 16479                           tosu	equ	0xFFF
 16480                           tosh	equ	0xFFE
 16481                           tosl	equ	0xFFD
 16482                           pclath	equ	0xFFA
 16483                           tblptru	equ	0xFF8
 16484                           tblptrh	equ	0xFF7
 16485                           tblptrl	equ	0xFF6
 16486                           tablat	equ	0xFF5
 16487                           prodh	equ	0xFF4
 16488                           prodl	equ	0xFF3
 16489                           intcon	equ	0xFF2
 16490                           postinc0	equ	0xFEE
 16491                           wreg	equ	0xFE8
 16492                           indf1	equ	0xFE7
 16493                           postdec1	equ	0xFE5
 16494                           fsr1h	equ	0xFE2
 16495                           fsr1l	equ	0xFE1
 16496                           indf2	equ	0xFDF
 16497                           postinc2	equ	0xFDE
 16498                           postdec2	equ	0xFDD
 16499                           plusw2	equ	0xFDB
 16500                           fsr2h	equ	0xFDA
 16501                           fsr2l	equ	0xFD9
 16502                           status	equ	0xFD8
 16503                           
 16504 ;; *************** function _Timer2_Init *****************
 16505 ;; Defined at:
 16506 ;;		line 10 in file "Library/Timer2.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 16509 ;; Auto vars:     Size  Location     Type
 16510 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 16511 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 16512 ;;  RDIV            4   18[BANK0 ] unsigned long 
 16513 ;; Return value:  Size  Location     Type
 16514 ;;                  1    wreg      void 
 16515 ;; Registers used:
 16516 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16517 ;; Tracked objects:
 16518 ;;		On entry : 0/0
 16519 ;;		On exit  : 0/0
 16520 ;;		Unchanged: 0/0
 16521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16522 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16523 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16525 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;Total ram usage:       17 bytes
 16527 ;; Hardware stack levels used:    1
 16528 ;; Hardware stack levels required when called:    8
 16529 ;; This function calls:
 16530 ;;		_Timer2_Clear
 16531 ;;		___lldiv
 16532 ;; This function is called by:
 16533 ;;		_SPI_Init
 16534 ;; This function uses a non-reentrant model
 16535 ;;
 16536                           
 16537                           	psect	text77
 16538  0135F4                     __ptext77:
 16539                           	opt stack 0
 16540  0135F4                     _Timer2_Init:
 16541                           	opt stack 18
 16542                           
 16543                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 16544                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 16545                           ;Timer2.c: 14: static UINT8 PRE = 0;
 16546                           ;Timer2.c: 15: static UINT32 DIV = 0;
 16547                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 16548                           
 16549                           ;incstack = 0
 16550  0135F4  0E00               	movlw	0
 16551  0135F6  0100               	movlb	0	; () banked
 16552  0135F8  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 16553  0135FA  0E6C               	movlw	108
 16554  0135FC  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 16555  0135FE  0EDC               	movlw	220
 16556  013600  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 16557  013602  0E02               	movlw	2
 16558  013604  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 16562                           ;Timer2.c: 20: pFrequency *= 2;
 16563  013606  0100               	movlb	0	; () banked
 16564  013608  90D8               	bcf	status,0,c
 16565  01360A  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 16566  01360C  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 16567  01360E  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 16568  013610  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 16569                           
 16570                           ; BSR set to: 0
 16571                           ;Timer2.c: 23: pCPUClock /= 4;
 16572  013612  0E02               	movlw	2
 16573  013614  0100               	movlb	0	; () banked
 16574  013616  6F71               	movwf	??_Timer2_Init& (0+255),b
 16575  013618                     u9645:
 16576  013618  90D8               	bcf	status,0,c
 16577  01361A  0100               	movlb	0	; () banked
 16578  01361C  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 16579  01361E  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 16580  013620  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 16581  013622  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 16582  013624  0100               	movlb	0	; () banked
 16583  013626  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 16584  013628  D7F7               	goto	u9645
 16585                           
 16586                           ; BSR set to: 0
 16587                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 16588  01362A  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 16589  01362E  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 16590  013632  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 16591  013636  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 16592  01363A  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 16593  01363E  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 16594  013642  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 16595  013646  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 16596  01364A  EC39  F0A4         	call	___lldiv	;wreg free
 16597  01364E  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 16598  013652  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 16599  013656  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 16600  01365A  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 16601                           
 16602                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 16603  01365E  D010               	goto	l1828
 16604  013660                     l12458:
 16605                           
 16606                           ;Timer2.c: 28: {
 16607                           ;Timer2.c: 29: RDIV = 0;
 16608  013660  0E00               	movlw	0
 16609  013662  0100               	movlb	0	; () banked
 16610  013664  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 16611  013666  0E00               	movlw	0
 16612  013668  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 16613  01366A  0E00               	movlw	0
 16614  01366C  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 16615  01366E  0E00               	movlw	0
 16616  013670  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;Timer2.c: 30: INDEX ++;
 16620  013672  0100               	movlb	0	; () banked
 16621  013674  2BF4               	incf	Timer2_Init@INDEX& (0+255),f,b
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;Timer2.c: 31: if (INDEX >= 3)
 16625  013676  0E02               	movlw	2
 16626  013678  0100               	movlb	0	; () banked
 16627  01367A  65F4               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 16628  01367C  D001               	goto	l1828
 16629  01367E  D026               	goto	u9660
 16630  013680                     l1828:
 16631                           
 16632                           ; BSR set to: 0
 16633                           
 16634                           ; BSR set to: 0
 16635  013680  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 16636  013684  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 16637  013688  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 16638  01368C  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 16639  013690  0100               	movlb	0	; () banked
 16640  013692  51F4               	movf	Timer2_Init@INDEX& (0+255),w,b
 16641  013694  0D01               	mullw	1
 16642  013696  0ECC               	movlw	low Timer2_Init@PRESCALE
 16643  013698  24F3               	addwf	prodl,w,c
 16644  01369A  6EF6               	movwf	tblptrl,c
 16645  01369C  0EFC               	movlw	high Timer2_Init@PRESCALE
 16646  01369E  20F4               	addwfc	prodh,w,c
 16647  0136A0  6EF7               	movwf	tblptrh,c
 16648  0136A2                     	if	1	;There are 3 active tblptr bytes
 16649  0136A2  6AF8               	clrf	tblptru,c
 16650  0136A4  0E00               	movlw	low (__mediumconst shr (0+16))
 16651  0136A6  22F8               	addwfc	tblptru,f,c
 16652  0136A8                     	endif
 16653  0136A8  0008               	tblrd		*
 16654  0136AA  50F5               	movf	tablat,w,c
 16655  0136AC  0100               	movlb	0	; () banked
 16656  0136AE  6F64               	movwf	___lldiv@divisor& (0+255),b
 16657  0136B0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16658  0136B2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16659  0136B4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16660  0136B6  EC39  F0A4         	call	___lldiv	;wreg free
 16661  0136BA  0100               	movlb	0	; () banked
 16662  0136BC  5163               	movf	(?___lldiv+3)& (0+255),w,b
 16663  0136BE  0100               	movlb	0	; () banked
 16664  0136C0  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 16665  0136C2  E1CE               	bnz	l12458
 16666  0136C4  0100               	movlb	0	; () banked
 16667  0136C6  0561               	decf	(?___lldiv+1)& (0+255),w,b
 16668  0136C8  B0D8               	btfsc	status,0,c
 16669  0136CA  D7CA               	goto	l1827
 16670  0136CC                     u9660:
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;Timer2.c: 33: }
 16674                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 16675                           
 16676                           ; BSR set to: 0
 16677  0136CC  50CA               	movf	4042,w,c	;volatile
 16678  0136CE  0100               	movlb	0	; () banked
 16679  0136D0  19F4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 16680  0136D2  0BFC               	andlw	-4
 16681  0136D4  19F4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 16682  0136D6  6ECA               	movwf	4042,c	;volatile
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 16686  0136D8  84CA               	bsf	4042,2,c	;volatile
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;Timer2.c: 44: Timer2_Clear();
 16690  0136DA  EC89  F0B6         	call	_Timer2_Clear	;wreg free
 16691                           
 16692                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 16693  0136DE  0100               	movlb	0	; () banked
 16694  0136E0  51F4               	movf	Timer2_Init@INDEX& (0+255),w,b
 16695  0136E2  0D01               	mullw	1
 16696  0136E4  0ECC               	movlw	low Timer2_Init@PRESCALE
 16697  0136E6  24F3               	addwf	prodl,w,c
 16698  0136E8  6EF6               	movwf	tblptrl,c
 16699  0136EA  0EFC               	movlw	high Timer2_Init@PRESCALE
 16700  0136EC  20F4               	addwfc	prodh,w,c
 16701  0136EE  6EF7               	movwf	tblptrh,c
 16702  0136F0                     	if	1	;There are 3 active tblptr bytes
 16703  0136F0  6AF8               	clrf	tblptru,c
 16704  0136F2  0E00               	movlw	low (__mediumconst shr (0+16))
 16705  0136F4  22F8               	addwfc	tblptru,f,c
 16706  0136F6                     	endif
 16707  0136F6  0008               	tblrd		*
 16708  0136F8  CFF5 F0F3          	movff	tablat,Timer2_Init@PRE
 16709                           
 16710                           ; BSR set to: 0
 16711                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 16712  0136FC  0EFF               	movlw	255
 16713  0136FE  0100               	movlb	0	; () banked
 16714  013700  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 16715  013702  0101               	movlb	1	; () banked
 16716  013704  6F04               	movwf	Timer2_Init@DIV& (0+255),b
 16717  013706  0EFF               	movlw	255
 16718  013708  0100               	movlb	0	; () banked
 16719  01370A  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 16720  01370C  0101               	movlb	1	; () banked
 16721  01370E  6F05               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 16722  013710  0EFF               	movlw	255
 16723  013712  0100               	movlb	0	; () banked
 16724  013714  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 16725  013716  0101               	movlb	1	; () banked
 16726  013718  6F06               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 16727  01371A  0EFF               	movlw	255
 16728  01371C  0100               	movlb	0	; () banked
 16729  01371E  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 16730  013720  0101               	movlb	1	; () banked
 16731  013722  6F07               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 16732                           
 16733                           ; BSR set to: 1
 16734                           ;Timer2.c: 48: INDEX = DIV/PRE;
 16735  013724  C104  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 16736  013728  C105  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 16737  01372C  C106  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 16738  013730  C107  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 16739  013734  0100               	movlb	0	; () banked
 16740  013736  51F3               	movf	Timer2_Init@PRE& (0+255),w,b
 16741  013738  0100               	movlb	0	; () banked
 16742  01373A  6F64               	movwf	___lldiv@divisor& (0+255),b
 16743  01373C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16744  01373E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16745  013740  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16746  013742  EC39  F0A4         	call	___lldiv	;wreg free
 16747  013746  0100               	movlb	0	; () banked
 16748  013748  5160               	movf	?___lldiv& (0+255),w,b
 16749  01374A  0100               	movlb	0	; () banked
 16750  01374C  6FF4               	movwf	Timer2_Init@INDEX& (0+255),b
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;Timer2.c: 49: PR2 = INDEX;
 16754  01374E  C0F4  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 16755                           
 16756                           ; BSR set to: 0
 16757  013752  0012               	return		;funcret
 16758  013754                     __end_of_Timer2_Init:
 16759                           	opt stack 0
 16760                           tosu	equ	0xFFF
 16761                           tosh	equ	0xFFE
 16762                           tosl	equ	0xFFD
 16763                           pclath	equ	0xFFA
 16764                           tblptru	equ	0xFF8
 16765                           tblptrh	equ	0xFF7
 16766                           tblptrl	equ	0xFF6
 16767                           tablat	equ	0xFF5
 16768                           prodh	equ	0xFF4
 16769                           prodl	equ	0xFF3
 16770                           intcon	equ	0xFF2
 16771                           postinc0	equ	0xFEE
 16772                           wreg	equ	0xFE8
 16773                           indf1	equ	0xFE7
 16774                           postdec1	equ	0xFE5
 16775                           fsr1h	equ	0xFE2
 16776                           fsr1l	equ	0xFE1
 16777                           indf2	equ	0xFDF
 16778                           postinc2	equ	0xFDE
 16779                           postdec2	equ	0xFDD
 16780                           plusw2	equ	0xFDB
 16781                           fsr2h	equ	0xFDA
 16782                           fsr2l	equ	0xFD9
 16783                           status	equ	0xFD8
 16784                           
 16785 ;; *************** function _Timer2_Clear *****************
 16786 ;; Defined at:
 16787 ;;		line 3 in file "Library/Timer2.c"
 16788 ;; Parameters:    Size  Location     Type
 16789 ;;		None
 16790 ;; Auto vars:     Size  Location     Type
 16791 ;;		None
 16792 ;; Return value:  Size  Location     Type
 16793 ;;                  1    wreg      void 
 16794 ;; Registers used:
 16795 ;;		None
 16796 ;; Tracked objects:
 16797 ;;		On entry : 0/0
 16798 ;;		On exit  : 0/0
 16799 ;;		Unchanged: 0/0
 16800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;Total ram usage:        0 bytes
 16806 ;; Hardware stack levels used:    1
 16807 ;; Hardware stack levels required when called:    7
 16808 ;; This function calls:
 16809 ;;		Nothing
 16810 ;; This function is called by:
 16811 ;;		_Timer2_Init
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           	psect	text78
 16816  016D12                     __ptext78:
 16817                           	opt stack 0
 16818  016D12                     _Timer2_Clear:
 16819                           	opt stack 18
 16820                           
 16821                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;incstack = 0
 16825  016D12  929E               	bcf	3998,1,c	;volatile
 16826                           
 16827                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16828  016D14  929D               	bcf	3997,1,c	;volatile
 16829                           
 16830                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16831  016D16  929F               	bcf	3999,1,c	;volatile
 16832  016D18  0012               	return		;funcret
 16833  016D1A                     __end_of_Timer2_Clear:
 16834                           	opt stack 0
 16835                           tosu	equ	0xFFF
 16836                           tosh	equ	0xFFE
 16837                           tosl	equ	0xFFD
 16838                           pclath	equ	0xFFA
 16839                           tblptru	equ	0xFF8
 16840                           tblptrh	equ	0xFF7
 16841                           tblptrl	equ	0xFF6
 16842                           tablat	equ	0xFF5
 16843                           prodh	equ	0xFF4
 16844                           prodl	equ	0xFF3
 16845                           intcon	equ	0xFF2
 16846                           postinc0	equ	0xFEE
 16847                           wreg	equ	0xFE8
 16848                           indf1	equ	0xFE7
 16849                           postdec1	equ	0xFE5
 16850                           fsr1h	equ	0xFE2
 16851                           fsr1l	equ	0xFE1
 16852                           indf2	equ	0xFDF
 16853                           postinc2	equ	0xFDE
 16854                           postdec2	equ	0xFDD
 16855                           plusw2	equ	0xFDB
 16856                           fsr2h	equ	0xFDA
 16857                           fsr2l	equ	0xFD9
 16858                           status	equ	0xFD8
 16859                           
 16860 ;; *************** function _SPI_DisableISR *****************
 16861 ;; Defined at:
 16862 ;;		line 181 in file "Library/SPI.c"
 16863 ;; Parameters:    Size  Location     Type
 16864 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16865 ;;		 -> SPI1(11), SPI2(11), 
 16866 ;; Auto vars:     Size  Location     Type
 16867 ;;		None
 16868 ;; Return value:  Size  Location     Type
 16869 ;;                  1    wreg      void 
 16870 ;; Registers used:
 16871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16872 ;; Tracked objects:
 16873 ;;		On entry : 0/0
 16874 ;;		On exit  : 0/0
 16875 ;;		Unchanged: 0/0
 16876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16877 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16881 ;;Total ram usage:        2 bytes
 16882 ;; Hardware stack levels used:    1
 16883 ;; Hardware stack levels required when called:    7
 16884 ;; This function calls:
 16885 ;;		Nothing
 16886 ;; This function is called by:
 16887 ;;		_SPI_Init
 16888 ;; This function uses a non-reentrant model
 16889 ;;
 16890                           
 16891                           	psect	text79
 16892  0169A6                     __ptext79:
 16893                           	opt stack 0
 16894  0169A6                     _SPI_DisableISR:
 16895                           	opt stack 19
 16896                           
 16897                           ;SPI.c: 183: switch (pInput->mChannel)
 16898                           
 16899                           ;incstack = 0
 16900  0169A6  D004               	goto	l654
 16901  0169A8                     l655:
 16902                           
 16903                           ; BSR set to: 0
 16904  0169A8  969D               	bcf	3997,3,c	;volatile
 16905  0169AA  0012               	return	
 16906  0169AC                     l657:
 16907                           
 16908                           ; BSR set to: 0
 16909  0169AC  9EA3               	bcf	4003,7,c	;volatile
 16910                           
 16911                           ; BSR set to: 0
 16912                           ;SPI.c: 188: };
 16913                           
 16914                           ; BSR set to: 0
 16915                           
 16916                           ;SPI.c: 187: default: return;
 16917  0169AE  0012               	return	
 16918  0169B0                     l654:
 16919                           
 16920                           ; BSR set to: 0
 16921  0169B0  0100               	movlb	0	; () banked
 16922  0169B2  EE20 F002          	lfsr	2,2
 16923  0169B6  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16924  0169B8  26D9               	addwf	fsr2l,f,c
 16925  0169BA  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16926  0169BC  22DA               	addwfc	fsr2h,f,c
 16927  0169BE  50DF               	movf	indf2,w,c
 16928                           
 16929                           ; Switch size 1, requested type "space"
 16930                           ; Number of cases is 2, Range of values is 0 to 1
 16931                           ; switch strategies available:
 16932                           ; Name         Instructions Cycles
 16933                           ; simple_byte            7     4 (average)
 16934                           ;	Chosen strategy is simple_byte
 16935  0169C0  0A00               	xorlw	0	; case 0
 16936  0169C2  B4D8               	btfsc	status,2,c
 16937  0169C4  D7F1               	goto	l655
 16938  0169C6  0A01               	xorlw	1	; case 1
 16939  0169C8  A4D8               	btfss	status,2,c
 16940  0169CA  0012               	return	
 16941  0169CC  D7EF               	goto	l657
 16942  0169CE                     __end_of_SPI_DisableISR:
 16943                           	opt stack 0
 16944                           tosu	equ	0xFFF
 16945                           tosh	equ	0xFFE
 16946                           tosl	equ	0xFFD
 16947                           pclath	equ	0xFFA
 16948                           tblptru	equ	0xFF8
 16949                           tblptrh	equ	0xFF7
 16950                           tblptrl	equ	0xFF6
 16951                           tablat	equ	0xFF5
 16952                           prodh	equ	0xFF4
 16953                           prodl	equ	0xFF3
 16954                           intcon	equ	0xFF2
 16955                           postinc0	equ	0xFEE
 16956                           wreg	equ	0xFE8
 16957                           indf1	equ	0xFE7
 16958                           postdec1	equ	0xFE5
 16959                           fsr1h	equ	0xFE2
 16960                           fsr1l	equ	0xFE1
 16961                           indf2	equ	0xFDF
 16962                           postinc2	equ	0xFDE
 16963                           postdec2	equ	0xFDD
 16964                           plusw2	equ	0xFDB
 16965                           fsr2h	equ	0xFDA
 16966                           fsr2l	equ	0xFD9
 16967                           status	equ	0xFD8
 16968                           
 16969 ;; *************** function _SPI_DCS *****************
 16970 ;; Defined at:
 16971 ;;		line 219 in file "Library/SPI.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16974 ;;		 -> SPI1(11), SPI2(11), 
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;		None
 16977 ;; Return value:  Size  Location     Type
 16978 ;;                  1    wreg      void 
 16979 ;; Registers used:
 16980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16986 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;Total ram usage:        2 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    7
 16993 ;; This function calls:
 16994 ;;		Nothing
 16995 ;; This function is called by:
 16996 ;;		_SPI_Init
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           	psect	text80
 17001  0168CC                     __ptext80:
 17002                           	opt stack 0
 17003  0168CC                     _SPI_DCS:
 17004                           	opt stack 19
 17005                           
 17006                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 17007                           
 17008                           ; BSR set to: 0
 17009                           ;incstack = 0
 17010  0168CC  0100               	movlb	0	; () banked
 17011  0168CE  EE20 F002          	lfsr	2,2
 17012  0168D2  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 17013  0168D4  26D9               	addwf	fsr2l,f,c
 17014  0168D6  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 17015  0168D8  22DA               	addwfc	fsr2h,f,c
 17016  0168DA  50DF               	movf	indf2,w,c
 17017  0168DC  A4D8               	btfss	status,2,c
 17018  0168DE  D006               	goto	l673
 17019                           
 17020                           ; BSR set to: 0
 17021                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 17022  0168E0  C039  FFD9         	movff	_PortC+4,fsr2l
 17023  0168E4  C03A  FFDA         	movff	_PortC+5,fsr2h
 17024  0168E8  84DF               	bsf	indf2,2,c
 17025  0168EA  0012               	return	
 17026  0168EC                     l673:
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;SPI.c: 223: else
 17030                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 17031                           
 17032                           ; BSR set to: 0
 17033  0168EC  C1A9  FFD9         	movff	_PortD+4,fsr2l
 17034  0168F0  C1AA  FFDA         	movff	_PortD+5,fsr2h
 17035  0168F4  0101               	movlb	1	; () banked
 17036  0168F6  8EDF               	bsf	indf2,7,c
 17037  0168F8  0012               	return	
 17038  0168FA                     __end_of_SPI_DCS:
 17039                           	opt stack 0
 17040                           tosu	equ	0xFFF
 17041                           tosh	equ	0xFFE
 17042                           tosl	equ	0xFFD
 17043                           pclath	equ	0xFFA
 17044                           tblptru	equ	0xFF8
 17045                           tblptrh	equ	0xFF7
 17046                           tblptrl	equ	0xFF6
 17047                           tablat	equ	0xFF5
 17048                           prodh	equ	0xFF4
 17049                           prodl	equ	0xFF3
 17050                           intcon	equ	0xFF2
 17051                           postinc0	equ	0xFEE
 17052                           wreg	equ	0xFE8
 17053                           indf1	equ	0xFE7
 17054                           postdec1	equ	0xFE5
 17055                           fsr1h	equ	0xFE2
 17056                           fsr1l	equ	0xFE1
 17057                           indf2	equ	0xFDF
 17058                           postinc2	equ	0xFDE
 17059                           postdec2	equ	0xFDD
 17060                           plusw2	equ	0xFDB
 17061                           fsr2h	equ	0xFDA
 17062                           fsr2l	equ	0xFD9
 17063                           status	equ	0xFD8
 17064                           
 17065 ;; *************** function _FunctInitButton *****************
 17066 ;; Defined at:
 17067 ;;		line 16 in file "Functions.c"
 17068 ;; Parameters:    Size  Location     Type
 17069 ;;		None
 17070 ;; Auto vars:     Size  Location     Type
 17071 ;;		None
 17072 ;; Return value:  Size  Location     Type
 17073 ;;                  1    wreg      void 
 17074 ;; Registers used:
 17075 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17076 ;; Tracked objects:
 17077 ;;		On entry : 0/0
 17078 ;;		On exit  : 0/0
 17079 ;;		Unchanged: 0/0
 17080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;Total ram usage:        0 bytes
 17086 ;; Hardware stack levels used:    1
 17087 ;; Hardware stack levels required when called:   16
 17088 ;; This function calls:
 17089 ;;		_Button_Init
 17090 ;; This function is called by:
 17091 ;;		_initialise
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text81
 17096  01514C                     __ptext81:
 17097                           	opt stack 0
 17098  01514C                     _FunctInitButton:
 17099                           	opt stack 13
 17100                           
 17101                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 17102                           
 17103                           ;incstack = 0
 17104  01514C  0E87               	movlw	low _TestButton
 17105  01514E  0100               	movlb	0	; () banked
 17106  015150  6F9B               	movwf	Button_Init@pInput& (0+255),b
 17107  015152  0E01               	movlw	high _TestButton
 17108  015154  0100               	movlb	0	; () banked
 17109  015156  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 17110  015158  0E00               	movlw	0
 17111  01515A  0100               	movlb	0	; () banked
 17112  01515C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17113  01515E  0E02               	movlw	2
 17114  015160  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 17115  015162  0ED4               	movlw	low _MXK_InitTestButton
 17116  015164  0100               	movlb	0	; () banked
 17117  015166  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 17118  015168  0E6A               	movlw	high _MXK_InitTestButton
 17119  01516A  0100               	movlb	0	; () banked
 17120  01516C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 17121  01516E  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 17122  015170  0100               	movlb	0	; () banked
 17123  015172  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 17124  015174  0E2E               	movlw	low _MXK_TestButton
 17125  015176  0100               	movlb	0	; () banked
 17126  015178  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 17127  01517A  0E6C               	movlw	high _MXK_TestButton
 17128  01517C  0100               	movlb	0	; () banked
 17129  01517E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 17130  015180  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 17131  015182  0100               	movlb	0	; () banked
 17132  015184  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 17133  015186  0E8C               	movlw	low _Event_TestButton
 17134  015188  0100               	movlb	0	; () banked
 17135  01518A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 17136  01518C  0E66               	movlw	high _Event_TestButton
 17137  01518E  0100               	movlb	0	; () banked
 17138  015190  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 17139  015192  0E01               	movlw	low (_Event_TestButton shr (0+16))
 17140  015194  0100               	movlb	0	; () banked
 17141  015196  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 17142  015198  EC7A  F0A1         	call	_Button_Init	;wreg free
 17143                           
 17144                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 17145  01519C  0E7D               	movlw	low _DIPSwitch
 17146  01519E  0100               	movlb	0	; () banked
 17147  0151A0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 17148  0151A2  0E01               	movlw	high _DIPSwitch
 17149  0151A4  0100               	movlb	0	; () banked
 17150  0151A6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 17151  0151A8  0E00               	movlw	0
 17152  0151AA  0100               	movlb	0	; () banked
 17153  0151AC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17154  0151AE  0E02               	movlw	2
 17155  0151B0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 17156  0151B2  0EB6               	movlw	low _MXK_InitDIPSwitch
 17157  0151B4  0100               	movlb	0	; () banked
 17158  0151B6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 17159  0151B8  0E6A               	movlw	high _MXK_InitDIPSwitch
 17160  0151BA  0100               	movlb	0	; () banked
 17161  0151BC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 17162  0151BE  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 17163  0151C0  0100               	movlb	0	; () banked
 17164  0151C2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 17165  0151C4  0E9E               	movlw	low _MXK_DIPSwitch
 17166  0151C6  0100               	movlb	0	; () banked
 17167  0151C8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 17168  0151CA  0E6B               	movlw	high _MXK_DIPSwitch
 17169  0151CC  0100               	movlb	0	; () banked
 17170  0151CE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 17171  0151D0  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 17172  0151D2  0100               	movlb	0	; () banked
 17173  0151D4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 17174  0151D6  0E9E               	movlw	low _Event_DIPSwitch
 17175  0151D8  0100               	movlb	0	; () banked
 17176  0151DA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 17177  0151DC  0E68               	movlw	high _Event_DIPSwitch
 17178  0151DE  0100               	movlb	0	; () banked
 17179  0151E0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 17180  0151E2  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 17181  0151E4  0100               	movlb	0	; () banked
 17182  0151E6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 17183  0151E8  EC7A  F0A1         	call	_Button_Init	;wreg free
 17184  0151EC  0012               	return		;funcret
 17185  0151EE                     __end_of_FunctInitButton:
 17186                           	opt stack 0
 17187                           tosu	equ	0xFFF
 17188                           tosh	equ	0xFFE
 17189                           tosl	equ	0xFFD
 17190                           pclath	equ	0xFFA
 17191                           tblptru	equ	0xFF8
 17192                           tblptrh	equ	0xFF7
 17193                           tblptrl	equ	0xFF6
 17194                           tablat	equ	0xFF5
 17195                           prodh	equ	0xFF4
 17196                           prodl	equ	0xFF3
 17197                           intcon	equ	0xFF2
 17198                           postinc0	equ	0xFEE
 17199                           wreg	equ	0xFE8
 17200                           indf1	equ	0xFE7
 17201                           postdec1	equ	0xFE5
 17202                           fsr1h	equ	0xFE2
 17203                           fsr1l	equ	0xFE1
 17204                           indf2	equ	0xFDF
 17205                           postinc2	equ	0xFDE
 17206                           postdec2	equ	0xFDD
 17207                           plusw2	equ	0xFDB
 17208                           fsr2h	equ	0xFDA
 17209                           fsr2l	equ	0xFD9
 17210                           status	equ	0xFD8
 17211                           
 17212 ;; *************** function _Button_Init *****************
 17213 ;; Defined at:
 17214 ;;		line 18 in file "Library/Button.c"
 17215 ;; Parameters:    Size  Location     Type
 17216 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 17217 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17218 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 17219 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 17220 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17221 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 17222 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17223 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17224 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 17225 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 17226 ;; Auto vars:     Size  Location     Type
 17227 ;;		None
 17228 ;; Return value:  Size  Location     Type
 17229 ;;                  1    wreg      void 
 17230 ;; Registers used:
 17231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17232 ;; Tracked objects:
 17233 ;;		On entry : 0/0
 17234 ;;		On exit  : 0/0
 17235 ;;		Unchanged: 0/0
 17236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17237 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;Total ram usage:       13 bytes
 17242 ;; Hardware stack levels used:    1
 17243 ;; Hardware stack levels required when called:   15
 17244 ;; This function calls:
 17245 ;;		_HMI_InitButtons
 17246 ;;		_MXK_InitDIPSwitch
 17247 ;;		_MXK_InitTestButton
 17248 ;; This function is called by:
 17249 ;;		_HMI_Init
 17250 ;;		_FunctInitButton
 17251 ;; This function uses a non-reentrant model
 17252 ;;
 17253                           
 17254                           	psect	text82
 17255  0142F4                     __ptext82:
 17256                           	opt stack 0
 17257  0142F4                     _Button_Init:
 17258                           	opt stack 13
 17259                           
 17260                           ;Button.c: 21: if(pInput==(void*)0)
 17261                           
 17262                           ;incstack = 0
 17263  0142F4  0100               	movlb	0	; () banked
 17264  0142F6  519B               	movf	Button_Init@pInput& (0+255),w,b
 17265  0142F8  0100               	movlb	0	; () banked
 17266  0142FA  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17267  0142FC  B4D8               	btfsc	status,2,c
 17268  0142FE  0012               	return	
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;Button.c: 23: if(pInitIO==(void*)0)
 17272                           
 17273                           ; BSR set to: 0
 17274                           
 17275                           ; BSR set to: 0
 17276                           ;Button.c: 22: return;
 17277  014300  0100               	movlb	0	; () banked
 17278  014302  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 17279  014304  0100               	movlb	0	; () banked
 17280  014306  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17281  014308  0100               	movlb	0	; () banked
 17282  01430A  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17283  01430C  B4D8               	btfsc	status,2,c
 17284  01430E  0012               	return	
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;Button.c: 25: if(pGetState==(void*)0)
 17288                           
 17289                           ; BSR set to: 0
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;Button.c: 24: return;
 17293  014310  0100               	movlb	0	; () banked
 17294  014312  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 17295  014314  0100               	movlb	0	; () banked
 17296  014316  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 17297  014318  0100               	movlb	0	; () banked
 17298  01431A  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 17299  01431C  B4D8               	btfsc	status,2,c
 17300  01431E  0012               	return	
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;Button.c: 27: if(pFunction==(void*)0)
 17304                           
 17305                           ; BSR set to: 0
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;Button.c: 26: return;
 17309  014320  0100               	movlb	0	; () banked
 17310  014322  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 17311  014324  0100               	movlb	0	; () banked
 17312  014326  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 17313  014328  0100               	movlb	0	; () banked
 17314  01432A  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 17315  01432C  B4D8               	btfsc	status,2,c
 17316  01432E  0012               	return	
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;Button.c: 30: if(pThreshold == 0)
 17320                           
 17321                           ; BSR set to: 0
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;Button.c: 28: return;
 17325  014330  0100               	movlb	0	; () banked
 17326  014332  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 17327  014334  0100               	movlb	0	; () banked
 17328  014336  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 17329  014338  A4D8               	btfss	status,2,c
 17330  01433A  D005               	goto	l8
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;Button.c: 31: pThreshold = 1;
 17334  01433C  0E00               	movlw	0
 17335  01433E  0100               	movlb	0	; () banked
 17336  014340  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17337  014342  0E01               	movlw	1
 17338  014344  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 17339  014346                     l8:
 17340                           
 17341                           ; BSR set to: 0
 17342                           ;Button.c: 34: pInput->mState = 0;
 17343                           
 17344                           ; BSR set to: 0
 17345  014346  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 17346  01434A  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 17347  01434E  0E00               	movlw	0
 17348  014350  6EDF               	movwf	indf2,c
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;Button.c: 35: pInput->mCount = 0;
 17352  014352  0100               	movlb	0	; () banked
 17353  014354  EE20 F001          	lfsr	2,1
 17354  014358  519B               	movf	Button_Init@pInput& (0+255),w,b
 17355  01435A  26D9               	addwf	fsr2l,f,c
 17356  01435C  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17357  01435E  22DA               	addwfc	fsr2h,f,c
 17358  014360  0E00               	movlw	0
 17359  014362  6EDF               	movwf	indf2,c
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 17363  014364  0100               	movlb	0	; () banked
 17364  014366  EE20 F002          	lfsr	2,2
 17365  01436A  519B               	movf	Button_Init@pInput& (0+255),w,b
 17366  01436C  26D9               	addwf	fsr2l,f,c
 17367  01436E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17368  014370  22DA               	addwfc	fsr2h,f,c
 17369  014372  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 17370  014376  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;Button.c: 37: pInput->mFunction = pFunction;
 17374  01437A  0100               	movlb	0	; () banked
 17375  01437C  EE20 F004          	lfsr	2,4
 17376  014380  519B               	movf	Button_Init@pInput& (0+255),w,b
 17377  014382  26D9               	addwf	fsr2l,f,c
 17378  014384  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17379  014386  22DA               	addwfc	fsr2h,f,c
 17380  014388  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 17381  01438C  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 17382  014390  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;Button.c: 38: pInput->mGetState = pGetState;
 17386  014394  0100               	movlb	0	; () banked
 17387  014396  EE20 F007          	lfsr	2,7
 17388  01439A  519B               	movf	Button_Init@pInput& (0+255),w,b
 17389  01439C  26D9               	addwf	fsr2l,f,c
 17390  01439E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17391  0143A0  22DA               	addwfc	fsr2h,f,c
 17392  0143A2  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 17393  0143A6  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 17394  0143AA  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 17395                           
 17396                           ; BSR set to: 0
 17397                           ;Button.c: 41: pInitIO();
 17398  0143AE  D801               	call	u10888
 17399  0143B0  0012               	return	
 17400  0143B2                     u10888:
 17401  0143B2  0005               	push	
 17402  0143B4  6EFA               	movwf	pclath,c
 17403  0143B6  0100               	movlb	0	; () banked
 17404  0143B8  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 17405  0143BA  6EFD               	movwf	tosl,c
 17406  0143BC  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 17407  0143BE  6EFE               	movwf	tosh,c
 17408  0143C0  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 17409  0143C2  6EFF               	movwf	tosu,c
 17410  0143C4  50FA               	movf	pclath,w,c
 17411  0143C6  0012               	return		;indir
 17412  0143C8                     __end_of_Button_Init:
 17413                           	opt stack 0
 17414                           tosu	equ	0xFFF
 17415                           tosh	equ	0xFFE
 17416                           tosl	equ	0xFFD
 17417                           pclath	equ	0xFFA
 17418                           tblptru	equ	0xFF8
 17419                           tblptrh	equ	0xFF7
 17420                           tblptrl	equ	0xFF6
 17421                           tablat	equ	0xFF5
 17422                           prodh	equ	0xFF4
 17423                           prodl	equ	0xFF3
 17424                           intcon	equ	0xFF2
 17425                           postinc0	equ	0xFEE
 17426                           wreg	equ	0xFE8
 17427                           indf1	equ	0xFE7
 17428                           postdec1	equ	0xFE5
 17429                           fsr1h	equ	0xFE2
 17430                           fsr1l	equ	0xFE1
 17431                           indf2	equ	0xFDF
 17432                           postinc2	equ	0xFDE
 17433                           postdec2	equ	0xFDD
 17434                           plusw2	equ	0xFDB
 17435                           fsr2h	equ	0xFDA
 17436                           fsr2l	equ	0xFD9
 17437                           status	equ	0xFD8
 17438                           
 17439 ;; *************** function _MXK_InitDIPSwitch *****************
 17440 ;; Defined at:
 17441 ;;		line 20 in file "Library/MXK.c"
 17442 ;; Parameters:    Size  Location     Type
 17443 ;;		None
 17444 ;; Auto vars:     Size  Location     Type
 17445 ;;		None
 17446 ;; Return value:  Size  Location     Type
 17447 ;;                  1    wreg      void 
 17448 ;; Registers used:
 17449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17450 ;; Tracked objects:
 17451 ;;		On entry : 0/0
 17452 ;;		On exit  : 0/0
 17453 ;;		Unchanged: 0/0
 17454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17459 ;;Total ram usage:        0 bytes
 17460 ;; Hardware stack levels used:    1
 17461 ;; Hardware stack levels required when called:   14
 17462 ;; This function calls:
 17463 ;;		_Port_SetQuadType
 17464 ;; This function is called by:
 17465 ;;		_FunctInitButton
 17466 ;;		_Button_Init
 17467 ;; This function uses a non-reentrant model
 17468 ;;
 17469                           
 17470                           	psect	text83
 17471  016AB6                     __ptext83:
 17472                           	opt stack 0
 17473  016AB6                     _MXK_InitDIPSwitch:
 17474                           	opt stack 13
 17475                           
 17476                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 17477                           
 17478                           ;incstack = 0
 17479  016AB6  0EA5               	movlw	low _PortD
 17480  016AB8  0100               	movlb	0	; () banked
 17481  016ABA  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 17482  016ABC  0E01               	movlw	high _PortD
 17483  016ABE  0100               	movlb	0	; () banked
 17484  016AC0  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 17485  016AC2  0E00               	movlw	0
 17486  016AC4  0100               	movlb	0	; () banked
 17487  016AC6  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 17488  016AC8  0E00               	movlw	0
 17489  016ACA  0100               	movlb	0	; () banked
 17490  016ACC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 17491  016ACE  EC02  F08D         	call	_Port_SetQuadType	;wreg free
 17492  016AD2  0012               	return		;funcret
 17493  016AD4                     __end_of_MXK_InitDIPSwitch:
 17494                           	opt stack 0
 17495                           tosu	equ	0xFFF
 17496                           tosh	equ	0xFFE
 17497                           tosl	equ	0xFFD
 17498                           pclath	equ	0xFFA
 17499                           tblptru	equ	0xFF8
 17500                           tblptrh	equ	0xFF7
 17501                           tblptrl	equ	0xFF6
 17502                           tablat	equ	0xFF5
 17503                           prodh	equ	0xFF4
 17504                           prodl	equ	0xFF3
 17505                           intcon	equ	0xFF2
 17506                           postinc0	equ	0xFEE
 17507                           wreg	equ	0xFE8
 17508                           indf1	equ	0xFE7
 17509                           postdec1	equ	0xFE5
 17510                           fsr1h	equ	0xFE2
 17511                           fsr1l	equ	0xFE1
 17512                           indf2	equ	0xFDF
 17513                           postinc2	equ	0xFDE
 17514                           postdec2	equ	0xFDD
 17515                           plusw2	equ	0xFDB
 17516                           fsr2h	equ	0xFDA
 17517                           fsr2l	equ	0xFD9
 17518                           status	equ	0xFD8
 17519                           
 17520 ;; *************** function _HMI_InitButtons *****************
 17521 ;; Defined at:
 17522 ;;		line 21 in file "HMI.c"
 17523 ;; Parameters:    Size  Location     Type
 17524 ;;		None
 17525 ;; Auto vars:     Size  Location     Type
 17526 ;;		None
 17527 ;; Return value:  Size  Location     Type
 17528 ;;                  1    wreg      void 
 17529 ;; Registers used:
 17530 ;;		wreg, status,2
 17531 ;; Tracked objects:
 17532 ;;		On entry : 0/0
 17533 ;;		On exit  : 0/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17540 ;;Total ram usage:        0 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    7
 17543 ;; This function calls:
 17544 ;;		Nothing
 17545 ;; This function is called by:
 17546 ;;		_HMI_Init
 17547 ;;		_Button_Init
 17548 ;; This function uses a non-reentrant model
 17549 ;;
 17550                           
 17551                           	psect	text84
 17552  016D2E                     __ptext84:
 17553                           	opt stack 0
 17554  016D2E                     _HMI_InitButtons:
 17555                           	opt stack 20
 17556                           
 17557                           ;HMI.c: 23: TRISE = 0xFC;
 17558                           
 17559                           ;incstack = 0
 17560  016D2E  0EFC               	movlw	252
 17561  016D30  6E96               	movwf	3990,c	;volatile
 17562  016D32  0012               	return		;funcret
 17563  016D34                     __end_of_HMI_InitButtons:
 17564                           	opt stack 0
 17565                           tosu	equ	0xFFF
 17566                           tosh	equ	0xFFE
 17567                           tosl	equ	0xFFD
 17568                           pclath	equ	0xFFA
 17569                           tblptru	equ	0xFF8
 17570                           tblptrh	equ	0xFF7
 17571                           tblptrl	equ	0xFF6
 17572                           tablat	equ	0xFF5
 17573                           prodh	equ	0xFF4
 17574                           prodl	equ	0xFF3
 17575                           intcon	equ	0xFF2
 17576                           postinc0	equ	0xFEE
 17577                           wreg	equ	0xFE8
 17578                           indf1	equ	0xFE7
 17579                           postdec1	equ	0xFE5
 17580                           fsr1h	equ	0xFE2
 17581                           fsr1l	equ	0xFE1
 17582                           indf2	equ	0xFDF
 17583                           postinc2	equ	0xFDE
 17584                           postdec2	equ	0xFDD
 17585                           plusw2	equ	0xFDB
 17586                           fsr2h	equ	0xFDA
 17587                           fsr2l	equ	0xFD9
 17588                           status	equ	0xFD8
 17589                           
 17590 ;; *************** function _MXK_InitTestButton *****************
 17591 ;; Defined at:
 17592 ;;		line 10 in file "Library/MXK.c"
 17593 ;; Parameters:    Size  Location     Type
 17594 ;;		None
 17595 ;; Auto vars:     Size  Location     Type
 17596 ;;		None
 17597 ;; Return value:  Size  Location     Type
 17598 ;;                  1    wreg      void 
 17599 ;; Registers used:
 17600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17601 ;; Tracked objects:
 17602 ;;		On entry : 0/0
 17603 ;;		On exit  : 0/0
 17604 ;;		Unchanged: 0/0
 17605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17610 ;;Total ram usage:        0 bytes
 17611 ;; Hardware stack levels used:    1
 17612 ;; Hardware stack levels required when called:   12
 17613 ;; This function calls:
 17614 ;;		_Port_SetPinType
 17615 ;; This function is called by:
 17616 ;;		_FunctInitButton
 17617 ;;		_Button_Init
 17618 ;; This function uses a non-reentrant model
 17619 ;;
 17620                           
 17621                           	psect	text85
 17622  016AD4                     __ptext85:
 17623                           	opt stack 0
 17624  016AD4                     _MXK_InitTestButton:
 17625                           	opt stack 15
 17626                           
 17627                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 17628                           
 17629                           ;incstack = 0
 17630  016AD4  0EAF               	movlw	low _PortB
 17631  016AD6  0100               	movlb	0	; () banked
 17632  016AD8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17633  016ADA  0E01               	movlw	high _PortB
 17634  016ADC  0100               	movlb	0	; () banked
 17635  016ADE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17636  016AE0  0E04               	movlw	4
 17637  016AE2  0100               	movlb	0	; () banked
 17638  016AE4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17639  016AE6  0E00               	movlw	0
 17640  016AE8  0100               	movlb	0	; () banked
 17641  016AEA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17642  016AEC  EC2E  F093         	call	_Port_SetPinType	;wreg free
 17643  016AF0  0012               	return		;funcret
 17644  016AF2                     __end_of_MXK_InitTestButton:
 17645                           	opt stack 0
 17646                           tosu	equ	0xFFF
 17647                           tosh	equ	0xFFE
 17648                           tosl	equ	0xFFD
 17649                           pclath	equ	0xFFA
 17650                           tblptru	equ	0xFF8
 17651                           tblptrh	equ	0xFF7
 17652                           tblptrl	equ	0xFF6
 17653                           tablat	equ	0xFF5
 17654                           prodh	equ	0xFF4
 17655                           prodl	equ	0xFF3
 17656                           intcon	equ	0xFF2
 17657                           postinc0	equ	0xFEE
 17658                           wreg	equ	0xFE8
 17659                           indf1	equ	0xFE7
 17660                           postdec1	equ	0xFE5
 17661                           fsr1h	equ	0xFE2
 17662                           fsr1l	equ	0xFE1
 17663                           indf2	equ	0xFDF
 17664                           postinc2	equ	0xFDE
 17665                           postdec2	equ	0xFDD
 17666                           plusw2	equ	0xFDB
 17667                           fsr2h	equ	0xFDA
 17668                           fsr2l	equ	0xFD9
 17669                           status	equ	0xFD8
 17670                           
 17671 ;; *************** function _Port_SetPinType *****************
 17672 ;; Defined at:
 17673 ;;		line 189 in file "Library/Port.c"
 17674 ;; Parameters:    Size  Location     Type
 17675 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17676 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17677 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17678 ;;  pPin            1   40[BANK0 ] enum E6750
 17679 ;;  pType           1   41[BANK0 ] enum E6795
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 17682 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 17683 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 17684 ;;  Output          1   42[BANK0 ] enum E6475
 17685 ;; Return value:  Size  Location     Type
 17686 ;;                  1    wreg      enum E6475
 17687 ;; Registers used:
 17688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17695 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17697 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17698 ;;Total ram usage:        7 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:   11
 17701 ;; This function calls:
 17702 ;;		_Byte_SetBit
 17703 ;;		_PortProperty_Valid
 17704 ;;		_Word_SetPair
 17705 ;; This function is called by:
 17706 ;;		_Configure_GPIOs
 17707 ;;		_LED_Init
 17708 ;;		_Port_Init
 17709 ;;		_SPI_Init
 17710 ;;		_Motor_Init
 17711 ;;		_MXK_InitTestButton
 17712 ;;		_MXK_Init
 17713 ;;		_I2C_Init
 17714 ;; This function uses a non-reentrant model
 17715 ;;
 17716                           
 17717                           	psect	text86
 17718  01265C                     __ptext86:
 17719                           	opt stack 0
 17720  01265C                     _Port_SetPinType:
 17721                           	opt stack 17
 17722                           
 17723                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17724                           
 17725                           ;incstack = 0
 17726  01265C  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17727  012660  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17728  012664  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 17729  012668  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 17730                           
 17731                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17732  01266C  0E05               	movlw	5
 17733  01266E  0100               	movlb	0	; () banked
 17734  012670  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17735                           
 17736                           ;Port.c: 193: switch (pType)
 17737  012672  D0B5               	goto	l412
 17738  012674                     
 17739                           ; BSR set to: 0
 17740                           ;Port.c: 197: {
 17741                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17742                           
 17743                           ; BSR set to: 0
 17744  012674  0100               	movlb	0	; () banked
 17745  012676  EE20 F002          	lfsr	2,2
 17746  01267A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17747  01267C  26D9               	addwf	fsr2l,f,c
 17748  01267E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17749  012680  22DA               	addwfc	fsr2h,f,c
 17750  012682  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17751  012686  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17752  01268A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17753  01268E  0E01               	movlw	1
 17754  012690  0100               	movlb	0	; () banked
 17755  012692  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17756  012694  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17757                           
 17758                           ;Port.c: 203: break;
 17759  012698  D0B0               	goto	l414
 17760  01269A                     
 17761                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17762  01269A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17763  01269E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17764  0126A2  0E01               	movlw	1
 17765  0126A4  0100               	movlb	0	; () banked
 17766  0126A6  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17767  0126A8  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17768  0126AC  ECC3  F0AB         	call	_PortProperty_Valid	;wreg free
 17769  0126B0  0100               	movlb	0	; () banked
 17770  0126B2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17771  0126B4  0100               	movlb	0	; () banked
 17772  0126B6  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17773  0126B8  A4D8               	btfss	status,2,c
 17774  0126BA  0012               	return	
 17775                           
 17776                           ; BSR set to: 0
 17777                           ;Port.c: 208: {
 17778                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17779  0126BC  0100               	movlb	0	; () banked
 17780  0126BE  EE20 F002          	lfsr	2,2
 17781  0126C2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17782  0126C4  26D9               	addwf	fsr2l,f,c
 17783  0126C6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17784  0126C8  22DA               	addwfc	fsr2h,f,c
 17785  0126CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17786  0126CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17787  0126D2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17788  0126D6  0E00               	movlw	0
 17789  0126D8  0100               	movlb	0	; () banked
 17790  0126DA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17791  0126DC  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17792                           
 17793                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17794  0126E0  0100               	movlb	0	; () banked
 17795  0126E2  EE20 F004          	lfsr	2,4
 17796  0126E6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17797  0126E8  26D9               	addwf	fsr2l,f,c
 17798  0126EA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17799  0126EC  22DA               	addwfc	fsr2h,f,c
 17800  0126EE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17801  0126F2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17802  0126F6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17803  0126FA  0E00               	movlw	0
 17804  0126FC  0100               	movlb	0	; () banked
 17805  0126FE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17806  012700  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17807                           
 17808                           ;Port.c: 214: break;
 17809  012704  D07A               	goto	l414
 17810  012706                     
 17811                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17812                           
 17813                           ;Port.c: 218: case eTypeOutputOpenSource:
 17814  012706  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17815  01270A  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17816  01270E  0E02               	movlw	2
 17817  012710  0100               	movlb	0	; () banked
 17818  012712  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17819  012714  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17820  012718  ECC3  F0AB         	call	_PortProperty_Valid	;wreg free
 17821  01271C  0100               	movlb	0	; () banked
 17822  01271E  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17823  012720  0100               	movlb	0	; () banked
 17824  012722  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17825  012724  A4D8               	btfss	status,2,c
 17826  012726  0012               	return	
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;Port.c: 220: {
 17830                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17831  012728  0100               	movlb	0	; () banked
 17832  01272A  EE20 F002          	lfsr	2,2
 17833  01272E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17834  012730  26D9               	addwf	fsr2l,f,c
 17835  012732  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17836  012734  22DA               	addwfc	fsr2h,f,c
 17837  012736  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17838  01273A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17839  01273E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17840  012742  0E01               	movlw	1
 17841  012744  0100               	movlb	0	; () banked
 17842  012746  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17843  012748  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17844                           
 17845                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17846  01274C  0100               	movlb	0	; () banked
 17847  01274E  EE20 F004          	lfsr	2,4
 17848  012752  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17849  012754  26D9               	addwf	fsr2l,f,c
 17850  012756  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17851  012758  22DA               	addwfc	fsr2h,f,c
 17852  01275A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17853  01275E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17854  012762  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17855  012766  0E01               	movlw	1
 17856  012768  0100               	movlb	0	; () banked
 17857  01276A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17858  01276C  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17859                           
 17860                           ;Port.c: 226: break;
 17861  012770  D044               	goto	l414
 17862  012772                     
 17863                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17864                           
 17865                           ;Port.c: 230: case eTypeOutputPushPull:
 17866  012772  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17867  012776  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17868  01277A  0E00               	movlw	0
 17869  01277C  0100               	movlb	0	; () banked
 17870  01277E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17871  012780  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17872  012784  ECC3  F0AB         	call	_PortProperty_Valid	;wreg free
 17873  012788  0100               	movlb	0	; () banked
 17874  01278A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17875  01278C  0100               	movlb	0	; () banked
 17876  01278E  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17877  012790  A4D8               	btfss	status,2,c
 17878  012792  0012               	return	
 17879                           
 17880                           ; BSR set to: 0
 17881                           ;Port.c: 232: {
 17882                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17883  012794  0100               	movlb	0	; () banked
 17884  012796  EE20 F002          	lfsr	2,2
 17885  01279A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17886  01279C  26D9               	addwf	fsr2l,f,c
 17887  01279E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17888  0127A0  22DA               	addwfc	fsr2h,f,c
 17889  0127A2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17890  0127A6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17891  0127AA  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17892  0127AE  0E00               	movlw	0
 17893  0127B0  0100               	movlb	0	; () banked
 17894  0127B2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17895  0127B4  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17896                           
 17897                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17898  0127B8  0100               	movlb	0	; () banked
 17899  0127BA  EE20 F004          	lfsr	2,4
 17900  0127BE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17901  0127C0  26D9               	addwf	fsr2l,f,c
 17902  0127C2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17903  0127C4  22DA               	addwfc	fsr2h,f,c
 17904  0127C6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17905  0127CA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17906  0127CE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17907  0127D2  0E00               	movlw	0
 17908  0127D4  0100               	movlb	0	; () banked
 17909  0127D6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17910  0127D8  EC42  F0AF         	call	_Byte_SetBit	;wreg free
 17911                           
 17912                           ;Port.c: 239: }
 17913                           
 17914                           ;Port.c: 238: break;
 17915  0127DC  D00E               	goto	l414
 17916  0127DE                     l412:
 17917  0127DE  0100               	movlb	0	; () banked
 17918  0127E0  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17919                           
 17920                           ; Switch size 1, requested type "space"
 17921                           ; Number of cases is 4, Range of values is 0 to 3
 17922                           ; switch strategies available:
 17923                           ; Name         Instructions Cycles
 17924                           ; simple_byte           13     7 (average)
 17925                           ;	Chosen strategy is simple_byte
 17926  0127E2  0A00               	xorlw	0	; case 0
 17927  0127E4  B4D8               	btfsc	status,2,c
 17928  0127E6  D746               	goto	l413
 17929  0127E8  0A01               	xorlw	1	; case 1
 17930  0127EA  B4D8               	btfsc	status,2,c
 17931  0127EC  D756               	goto	l415
 17932  0127EE  0A03               	xorlw	3	; case 2
 17933  0127F0  B4D8               	btfsc	status,2,c
 17934  0127F2  D789               	goto	l417
 17935  0127F4  0A01               	xorlw	1	; case 3
 17936  0127F6  B4D8               	btfsc	status,2,c
 17937  0127F8  D7BC               	goto	l421
 17938  0127FA                     l414:
 17939                           
 17940                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17941                           
 17942                           ; BSR set to: 0
 17943  0127FA  0E08               	movlw	8
 17944  0127FC  0100               	movlb	0	; () banked
 17945  0127FE  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17946  012800  0100               	movlb	0	; () banked
 17947  012802  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17948  012804  0E00               	movlw	0
 17949  012806  0100               	movlb	0	; () banked
 17950  012808  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17951  01280A  0100               	movlb	0	; () banked
 17952  01280C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17953  01280E  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17954  012812  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17955  012816  EC02  F0B2         	call	_Word_SetPair	;wreg free
 17956  01281A  0012               	return	
 17957  01281C                     __end_of_Port_SetPinType:
 17958                           	opt stack 0
 17959                           tosu	equ	0xFFF
 17960                           tosh	equ	0xFFE
 17961                           tosl	equ	0xFFD
 17962                           pclath	equ	0xFFA
 17963                           tblptru	equ	0xFF8
 17964                           tblptrh	equ	0xFF7
 17965                           tblptrl	equ	0xFF6
 17966                           tablat	equ	0xFF5
 17967                           prodh	equ	0xFF4
 17968                           prodl	equ	0xFF3
 17969                           intcon	equ	0xFF2
 17970                           postinc0	equ	0xFEE
 17971                           wreg	equ	0xFE8
 17972                           indf1	equ	0xFE7
 17973                           postdec1	equ	0xFE5
 17974                           fsr1h	equ	0xFE2
 17975                           fsr1l	equ	0xFE1
 17976                           indf2	equ	0xFDF
 17977                           postinc2	equ	0xFDE
 17978                           postdec2	equ	0xFDD
 17979                           plusw2	equ	0xFDB
 17980                           fsr2h	equ	0xFDA
 17981                           fsr2l	equ	0xFD9
 17982                           status	equ	0xFD8
 17983                           
 17984 ;; *************** function _Byte_SetBit *****************
 17985 ;; Defined at:
 17986 ;;		line 32 in file "Library/Types.c"
 17987 ;; Parameters:    Size  Location     Type
 17988 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17989 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17990 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17991 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17992 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17993 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17994 ;;		 -> NULL(0), 
 17995 ;;  pBit            1    2[BANK0 ] unsigned char 
 17996 ;;  pValue          1    3[BANK0 ] unsigned char 
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;		None
 17999 ;; Return value:  Size  Location     Type
 18000 ;;                  1    wreg      void 
 18001 ;; Registers used:
 18002 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18003 ;; Tracked objects:
 18004 ;;		On entry : 0/0
 18005 ;;		On exit  : 0/0
 18006 ;;		Unchanged: 0/0
 18007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;Total ram usage:        7 bytes
 18013 ;; Hardware stack levels used:    1
 18014 ;; Hardware stack levels required when called:    7
 18015 ;; This function calls:
 18016 ;;		Nothing
 18017 ;; This function is called by:
 18018 ;;		_Port_SetPinType
 18019 ;;		_Port_SetPin
 18020 ;;		_SPI_Init
 18021 ;;		_SPI_MinSpeed
 18022 ;;		_SPI_MaxSpeed
 18023 ;;		_Word_SetBit
 18024 ;;		_I2C_Init
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text87
 18029  015E84                     __ptext87:
 18030                           	opt stack 0
 18031  015E84                     _Byte_SetBit:
 18032                           	opt stack 16
 18033                           
 18034                           ;Types.c: 34: pValue &= 1;
 18035                           
 18036                           ;incstack = 0
 18037  015E84  0E01               	movlw	1
 18038  015E86  0100               	movlb	0	; () banked
 18039  015E88  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 18043  015E8A  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18044  015E8E  0E01               	movlw	1
 18045  015E90  0100               	movlb	0	; () banked
 18046  015E92  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 18047  015E94  0100               	movlb	0	; () banked
 18048  015E96  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 18049  015E98  D003               	goto	u9104
 18050  015E9A                     u9105:
 18051  015E9A  0100               	movlb	0	; () banked
 18052  015E9C  90D8               	bcf	status,0,c
 18053  015E9E  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18054  015EA0                     u9104:
 18055  015EA0  0100               	movlb	0	; () banked
 18056  015EA2  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 18057  015EA4  D7FA               	goto	u9105
 18058  015EA6  0100               	movlb	0	; () banked
 18059  015EA8  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18060  015EAA  0AFF               	xorlw	255
 18061  015EAC  0100               	movlb	0	; () banked
 18062  015EAE  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 18063  015EB0  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18064  015EB4  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18065  015EB8  0100               	movlb	0	; () banked
 18066  015EBA  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 18067  015EBC  16DF               	andwf	indf2,f,c
 18068                           
 18069                           ; BSR set to: 0
 18070                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 18071  015EBE  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18072  015EC2  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 18073  015EC6  0100               	movlb	0	; () banked
 18074  015EC8  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 18075  015ECA  D003               	goto	u9114
 18076  015ECC                     u9115:
 18077  015ECC  0100               	movlb	0	; () banked
 18078  015ECE  90D8               	bcf	status,0,c
 18079  015ED0  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18080  015ED2                     u9114:
 18081  015ED2  0100               	movlb	0	; () banked
 18082  015ED4  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 18083  015ED6  D7FA               	goto	u9115
 18084  015ED8  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18085  015EDC  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18086  015EE0  0100               	movlb	0	; () banked
 18087  015EE2  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18088  015EE4  12DF               	iorwf	indf2,f,c
 18089                           
 18090                           ; BSR set to: 0
 18091  015EE6  0012               	return		;funcret
 18092  015EE8                     __end_of_Byte_SetBit:
 18093                           	opt stack 0
 18094                           tosu	equ	0xFFF
 18095                           tosh	equ	0xFFE
 18096                           tosl	equ	0xFFD
 18097                           pclath	equ	0xFFA
 18098                           tblptru	equ	0xFF8
 18099                           tblptrh	equ	0xFF7
 18100                           tblptrl	equ	0xFF6
 18101                           tablat	equ	0xFF5
 18102                           prodh	equ	0xFF4
 18103                           prodl	equ	0xFF3
 18104                           intcon	equ	0xFF2
 18105                           postinc0	equ	0xFEE
 18106                           wreg	equ	0xFE8
 18107                           indf1	equ	0xFE7
 18108                           postdec1	equ	0xFE5
 18109                           fsr1h	equ	0xFE2
 18110                           fsr1l	equ	0xFE1
 18111                           indf2	equ	0xFDF
 18112                           postinc2	equ	0xFDE
 18113                           postdec2	equ	0xFDD
 18114                           plusw2	equ	0xFDB
 18115                           fsr2h	equ	0xFDA
 18116                           fsr2l	equ	0xFD9
 18117                           status	equ	0xFD8
 18118                           
 18119 ;; *************** function _Port_SetQuadType *****************
 18120 ;; Defined at:
 18121 ;;		line 399 in file "Library/Port.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 18124 ;;		 -> PortB(10), PortD(10), 
 18125 ;;  pQuad           1   56[BANK0 ] enum E6776
 18126 ;;  pType           1   57[BANK0 ] enum E6795
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;  Output          1   58[BANK0 ] enum E6475
 18129 ;; Return value:  Size  Location     Type
 18130 ;;                  1    wreg      enum E6475
 18131 ;; Registers used:
 18132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18141 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18142 ;;Total ram usage:        5 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:   13
 18145 ;; This function calls:
 18146 ;;		_Byte_SetQuad
 18147 ;;		_Port_CheckQuadType
 18148 ;;		_Word_SetPair
 18149 ;; This function is called by:
 18150 ;;		_MXK_InitDIPSwitch
 18151 ;;		_MXK_Init
 18152 ;; This function uses a non-reentrant model
 18153 ;;
 18154                           
 18155                           	psect	text88
 18156  011A04                     __ptext88:
 18157                           	opt stack 0
 18158  011A04                     _Port_SetQuadType:
 18159                           	opt stack 15
 18160                           
 18161                           ;Port.c: 401: ePinError Output = ePinErrorState;
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;incstack = 0
 18165  011A04  0E05               	movlw	5
 18166  011A06  0100               	movlb	0	; () banked
 18167  011A08  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18168                           
 18169                           ;Port.c: 403: switch (pType)
 18170  011A0A  D0C7               	goto	l476
 18171  011A0C                     
 18172                           ; BSR set to: 0
 18173                           ;Port.c: 407: {
 18174                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18175                           
 18176                           ; BSR set to: 0
 18177  011A0C  0100               	movlb	0	; () banked
 18178  011A0E  EE20 F002          	lfsr	2,2
 18179  011A12  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18180  011A14  26D9               	addwf	fsr2l,f,c
 18181  011A16  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18182  011A18  22DA               	addwfc	fsr2h,f,c
 18183  011A1A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18184  011A1E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18185  011A22  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18186  011A26  0E0F               	movlw	15
 18187  011A28  0100               	movlb	0	; () banked
 18188  011A2A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18189  011A2C  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18190                           
 18191                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18192  011A30  0100               	movlb	0	; () banked
 18193  011A32  EE20 F004          	lfsr	2,4
 18194  011A36  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18195  011A38  26D9               	addwf	fsr2l,f,c
 18196  011A3A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18197  011A3C  22DA               	addwfc	fsr2h,f,c
 18198  011A3E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18199  011A42  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18200  011A46  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18201  011A4A  0E00               	movlw	0
 18202  011A4C  0100               	movlb	0	; () banked
 18203  011A4E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18204  011A50  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18205                           
 18206                           ;Port.c: 413: }
 18207                           ;Port.c: 415: break;
 18208  011A54  D0B0               	goto	l478
 18209  011A56                     
 18210                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18211  011A56  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18212  011A5A  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18213  011A5E  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18214  011A62  0E03               	movlw	3
 18215  011A64  0100               	movlb	0	; () banked
 18216  011A66  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18217  011A68  EC32  F0B0         	call	_Port_CheckQuadType	;wreg free
 18218  011A6C  0100               	movlb	0	; () banked
 18219  011A6E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18220  011A70  0100               	movlb	0	; () banked
 18221  011A72  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 18222  011A74  A4D8               	btfss	status,2,c
 18223  011A76  0012               	return	
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;Port.c: 418: {
 18227                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18228  011A78  0100               	movlb	0	; () banked
 18229  011A7A  EE20 F002          	lfsr	2,2
 18230  011A7E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18231  011A80  26D9               	addwf	fsr2l,f,c
 18232  011A82  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18233  011A84  22DA               	addwfc	fsr2h,f,c
 18234  011A86  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18235  011A8A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18236  011A8E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18237  011A92  0E00               	movlw	0
 18238  011A94  0100               	movlb	0	; () banked
 18239  011A96  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18240  011A98  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18241                           
 18242                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18243  011A9C  0100               	movlb	0	; () banked
 18244  011A9E  EE20 F004          	lfsr	2,4
 18245  011AA2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18246  011AA4  26D9               	addwf	fsr2l,f,c
 18247  011AA6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18248  011AA8  22DA               	addwfc	fsr2h,f,c
 18249  011AAA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18250  011AAE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18251  011AB2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18252  011AB6  0E00               	movlw	0
 18253  011AB8  0100               	movlb	0	; () banked
 18254  011ABA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18255  011ABC  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18256                           
 18257                           ;Port.c: 424: }
 18258  011AC0  D07A               	goto	l478
 18259  011AC2                     
 18260                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18261  011AC2  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18262  011AC6  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18263  011ACA  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18264  011ACE  0E03               	movlw	3
 18265  011AD0  0100               	movlb	0	; () banked
 18266  011AD2  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18267  011AD4  EC32  F0B0         	call	_Port_CheckQuadType	;wreg free
 18268  011AD8  0100               	movlb	0	; () banked
 18269  011ADA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18270  011ADC  0100               	movlb	0	; () banked
 18271  011ADE  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 18272  011AE0  A4D8               	btfss	status,2,c
 18273  011AE2  0012               	return	
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;Port.c: 429: {
 18277                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18278  011AE4  0100               	movlb	0	; () banked
 18279  011AE6  EE20 F002          	lfsr	2,2
 18280  011AEA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18281  011AEC  26D9               	addwf	fsr2l,f,c
 18282  011AEE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18283  011AF0  22DA               	addwfc	fsr2h,f,c
 18284  011AF2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18285  011AF6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18286  011AFA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18287  011AFE  0E0F               	movlw	15
 18288  011B00  0100               	movlb	0	; () banked
 18289  011B02  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18290  011B04  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18291                           
 18292                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 18293  011B08  0100               	movlb	0	; () banked
 18294  011B0A  EE20 F004          	lfsr	2,4
 18295  011B0E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18296  011B10  26D9               	addwf	fsr2l,f,c
 18297  011B12  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18298  011B14  22DA               	addwfc	fsr2h,f,c
 18299  011B16  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18300  011B1A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18301  011B1E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18302  011B22  0E0F               	movlw	15
 18303  011B24  0100               	movlb	0	; () banked
 18304  011B26  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18305  011B28  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18306                           
 18307                           ;Port.c: 435: }
 18308  011B2C  D044               	goto	l478
 18309  011B2E                     
 18310                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18311  011B2E  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18312  011B32  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18313  011B36  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18314  011B3A  0E03               	movlw	3
 18315  011B3C  0100               	movlb	0	; () banked
 18316  011B3E  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18317  011B40  EC32  F0B0         	call	_Port_CheckQuadType	;wreg free
 18318  011B44  0100               	movlb	0	; () banked
 18319  011B46  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18320  011B48  0100               	movlb	0	; () banked
 18321  011B4A  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 18322  011B4C  A4D8               	btfss	status,2,c
 18323  011B4E  0012               	return	
 18324                           
 18325                           ; BSR set to: 0
 18326                           ;Port.c: 440: {
 18327                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18328  011B50  0100               	movlb	0	; () banked
 18329  011B52  EE20 F002          	lfsr	2,2
 18330  011B56  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18331  011B58  26D9               	addwf	fsr2l,f,c
 18332  011B5A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18333  011B5C  22DA               	addwfc	fsr2h,f,c
 18334  011B5E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18335  011B62  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18336  011B66  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18337  011B6A  0E00               	movlw	0
 18338  011B6C  0100               	movlb	0	; () banked
 18339  011B6E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18340  011B70  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18341                           
 18342                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18343  011B74  0100               	movlb	0	; () banked
 18344  011B76  EE20 F004          	lfsr	2,4
 18345  011B7A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18346  011B7C  26D9               	addwf	fsr2l,f,c
 18347  011B7E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18348  011B80  22DA               	addwfc	fsr2h,f,c
 18349  011B82  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18350  011B86  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18351  011B8A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18352  011B8E  0E00               	movlw	0
 18353  011B90  0100               	movlb	0	; () banked
 18354  011B92  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18355  011B94  EC0B  F0B5         	call	_Byte_SetQuad	;wreg free
 18356                           
 18357                           ;Port.c: 446: }
 18358  011B98  D00E               	goto	l478
 18359  011B9A                     l476:
 18360  011B9A  0100               	movlb	0	; () banked
 18361  011B9C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 18362                           
 18363                           ; Switch size 1, requested type "space"
 18364                           ; Number of cases is 4, Range of values is 0 to 3
 18365                           ; switch strategies available:
 18366                           ; Name         Instructions Cycles
 18367                           ; simple_byte           13     7 (average)
 18368                           ;	Chosen strategy is simple_byte
 18369  011B9E  0A00               	xorlw	0	; case 0
 18370  011BA0  B4D8               	btfsc	status,2,c
 18371  011BA2  D734               	goto	l477
 18372  011BA4  0A01               	xorlw	1	; case 1
 18373  011BA6  B4D8               	btfsc	status,2,c
 18374  011BA8  D756               	goto	l479
 18375  011BAA  0A03               	xorlw	3	; case 2
 18376  011BAC  B4D8               	btfsc	status,2,c
 18377  011BAE  D789               	goto	l483
 18378  011BB0  0A01               	xorlw	1	; case 3
 18379  011BB2  B4D8               	btfsc	status,2,c
 18380  011BB4  D7BC               	goto	l486
 18381  011BB6                     l478:
 18382                           
 18383                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 18384                           
 18385                           ; BSR set to: 0
 18386  011BB6  0E08               	movlw	8
 18387  011BB8  0100               	movlb	0	; () banked
 18388  011BBA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18389  011BBC  0100               	movlb	0	; () banked
 18390  011BBE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18391  011BC0  0E00               	movlw	0
 18392  011BC2  0100               	movlb	0	; () banked
 18393  011BC4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18394  011BC6  0100               	movlb	0	; () banked
 18395  011BC8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18396  011BCA  0100               	movlb	0	; () banked
 18397  011BCC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18398  011BCE  0D04               	mullw	4
 18399  011BD0  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 18400  011BD4  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18401  011BD8  EC02  F0B2         	call	_Word_SetPair	;wreg free
 18402                           
 18403                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 18404  011BDC  0E08               	movlw	8
 18405  011BDE  0100               	movlb	0	; () banked
 18406  011BE0  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18407  011BE2  0100               	movlb	0	; () banked
 18408  011BE4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18409  011BE6  0E00               	movlw	0
 18410  011BE8  0100               	movlb	0	; () banked
 18411  011BEA  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18412  011BEC  0100               	movlb	0	; () banked
 18413  011BEE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18414  011BF0  0100               	movlb	0	; () banked
 18415  011BF2  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18416  011BF4  0D04               	mullw	4
 18417  011BF6  28F3               	incf	prodl,w,c
 18418  011BF8  0100               	movlb	0	; () banked
 18419  011BFA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18420  011BFC  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18421  011C00  EC02  F0B2         	call	_Word_SetPair	;wreg free
 18422                           
 18423                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 18424  011C04  0E08               	movlw	8
 18425  011C06  0100               	movlb	0	; () banked
 18426  011C08  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18427  011C0A  0100               	movlb	0	; () banked
 18428  011C0C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18429  011C0E  0E00               	movlw	0
 18430  011C10  0100               	movlb	0	; () banked
 18431  011C12  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18432  011C14  0100               	movlb	0	; () banked
 18433  011C16  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18434  011C18  0100               	movlb	0	; () banked
 18435  011C1A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18436  011C1C  0D04               	mullw	4
 18437  011C1E  50F3               	movf	prodl,w,c
 18438  011C20  0F02               	addlw	2
 18439  011C22  0100               	movlb	0	; () banked
 18440  011C24  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18441  011C26  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18442  011C2A  EC02  F0B2         	call	_Word_SetPair	;wreg free
 18443                           
 18444                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 18445  011C2E  0E08               	movlw	8
 18446  011C30  0100               	movlb	0	; () banked
 18447  011C32  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18448  011C34  0100               	movlb	0	; () banked
 18449  011C36  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18450  011C38  0E00               	movlw	0
 18451  011C3A  0100               	movlb	0	; () banked
 18452  011C3C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18453  011C3E  0100               	movlb	0	; () banked
 18454  011C40  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18455  011C42  0100               	movlb	0	; () banked
 18456  011C44  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18457  011C46  0D04               	mullw	4
 18458  011C48  50F3               	movf	prodl,w,c
 18459  011C4A  0F03               	addlw	3
 18460  011C4C  0100               	movlb	0	; () banked
 18461  011C4E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18462  011C50  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18463  011C54  EC02  F0B2         	call	_Word_SetPair	;wreg free
 18464  011C58  0012               	return	
 18465  011C5A                     __end_of_Port_SetQuadType:
 18466                           	opt stack 0
 18467                           tosu	equ	0xFFF
 18468                           tosh	equ	0xFFE
 18469                           tosl	equ	0xFFD
 18470                           pclath	equ	0xFFA
 18471                           tblptru	equ	0xFF8
 18472                           tblptrh	equ	0xFF7
 18473                           tblptrl	equ	0xFF6
 18474                           tablat	equ	0xFF5
 18475                           prodh	equ	0xFF4
 18476                           prodl	equ	0xFF3
 18477                           intcon	equ	0xFF2
 18478                           postinc0	equ	0xFEE
 18479                           wreg	equ	0xFE8
 18480                           indf1	equ	0xFE7
 18481                           postdec1	equ	0xFE5
 18482                           fsr1h	equ	0xFE2
 18483                           fsr1l	equ	0xFE1
 18484                           indf2	equ	0xFDF
 18485                           postinc2	equ	0xFDE
 18486                           postdec2	equ	0xFDD
 18487                           plusw2	equ	0xFDB
 18488                           fsr2h	equ	0xFDA
 18489                           fsr2l	equ	0xFD9
 18490                           status	equ	0xFD8
 18491                           
 18492 ;; *************** function _Word_SetPair *****************
 18493 ;; Defined at:
 18494 ;;		line 149 in file "Library/Types.c"
 18495 ;; Parameters:    Size  Location     Type
 18496 ;;  pInput          2   15[BANK0 ] PTR struct Word
 18497 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18498 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18499 ;;  pPair           1   17[BANK0 ] unsigned char 
 18500 ;;  pValue          1   18[BANK0 ] unsigned char 
 18501 ;; Auto vars:     Size  Location     Type
 18502 ;;		None
 18503 ;; Return value:  Size  Location     Type
 18504 ;;                  1    wreg      void 
 18505 ;; Registers used:
 18506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18507 ;; Tracked objects:
 18508 ;;		On entry : 0/0
 18509 ;;		On exit  : 0/0
 18510 ;;		Unchanged: 0/0
 18511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18515 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18516 ;;Total ram usage:        4 bytes
 18517 ;; Hardware stack levels used:    1
 18518 ;; Hardware stack levels required when called:    9
 18519 ;; This function calls:
 18520 ;;		_Byte_SetPair
 18521 ;; This function is called by:
 18522 ;;		_Port_SetPinType
 18523 ;;		_Port_SetQuadType
 18524 ;;		_Port_SetType
 18525 ;;		_Port_SetPairType
 18526 ;;		_PortProperty_Init
 18527 ;; This function uses a non-reentrant model
 18528 ;;
 18529                           
 18530                           	psect	text89
 18531  016404                     __ptext89:
 18532                           	opt stack 0
 18533  016404                     _Word_SetPair:
 18534                           	opt stack 18
 18535                           
 18536                           ;Types.c: 151: if (pPair >= 4)
 18537                           
 18538                           ;incstack = 0
 18539  016404  0E03               	movlw	3
 18540  016406  0100               	movlb	0	; () banked
 18541  016408  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 18542  01640A  D014               	goto	l776
 18543                           
 18544                           ; BSR set to: 0
 18545                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 18546  01640C  0E01               	movlw	1
 18547  01640E  0100               	movlb	0	; () banked
 18548  016410  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 18549  016412  0100               	movlb	0	; () banked
 18550  016414  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 18551  016416  0E00               	movlw	0
 18552  016418  0100               	movlb	0	; () banked
 18553  01641A  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 18554  01641C  0100               	movlb	0	; () banked
 18555  01641E  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 18556  016420  0100               	movlb	0	; () banked
 18557  016422  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 18558  016424  0FFC               	addlw	252
 18559  016426  0100               	movlb	0	; () banked
 18560  016428  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 18561  01642A  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18562  01642E  ECFA  F0B4         	call	_Byte_SetPair	;wreg free
 18563  016432  0012               	return	
 18564  016434                     l776:
 18565                           
 18566                           ;Types.c: 153: else
 18567                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 18568  016434  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 18569  016438  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 18570  01643C  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 18571  016440  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18572  016444  ECFA  F0B4         	call	_Byte_SetPair	;wreg free
 18573  016448  0012               	return	
 18574  01644A                     __end_of_Word_SetPair:
 18575                           	opt stack 0
 18576                           tosu	equ	0xFFF
 18577                           tosh	equ	0xFFE
 18578                           tosl	equ	0xFFD
 18579                           pclath	equ	0xFFA
 18580                           tblptru	equ	0xFF8
 18581                           tblptrh	equ	0xFF7
 18582                           tblptrl	equ	0xFF6
 18583                           tablat	equ	0xFF5
 18584                           prodh	equ	0xFF4
 18585                           prodl	equ	0xFF3
 18586                           intcon	equ	0xFF2
 18587                           postinc0	equ	0xFEE
 18588                           wreg	equ	0xFE8
 18589                           indf1	equ	0xFE7
 18590                           postdec1	equ	0xFE5
 18591                           fsr1h	equ	0xFE2
 18592                           fsr1l	equ	0xFE1
 18593                           indf2	equ	0xFDF
 18594                           postinc2	equ	0xFDE
 18595                           postdec2	equ	0xFDD
 18596                           plusw2	equ	0xFDB
 18597                           fsr2h	equ	0xFDA
 18598                           fsr2l	equ	0xFD9
 18599                           status	equ	0xFD8
 18600                           
 18601 ;; *************** function _Byte_SetPair *****************
 18602 ;; Defined at:
 18603 ;;		line 83 in file "Library/Types.c"
 18604 ;; Parameters:    Size  Location     Type
 18605 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18606 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18607 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18608 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 18609 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 18610 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 18611 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 18612 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 18613 ;;		 -> NULL(0), 
 18614 ;;  pPair           1   13[BANK0 ] unsigned char 
 18615 ;;  pValue          1   14[BANK0 ] unsigned char 
 18616 ;; Auto vars:     Size  Location     Type
 18617 ;;		None
 18618 ;; Return value:  Size  Location     Type
 18619 ;;                  1    wreg      void 
 18620 ;; Registers used:
 18621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18622 ;; Tracked objects:
 18623 ;;		On entry : 0/0
 18624 ;;		On exit  : 0/0
 18625 ;;		Unchanged: 0/0
 18626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18630 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18631 ;;Total ram usage:        4 bytes
 18632 ;; Hardware stack levels used:    1
 18633 ;; Hardware stack levels required when called:    8
 18634 ;; This function calls:
 18635 ;;		_Byte_SetZone
 18636 ;; This function is called by:
 18637 ;;		_Word_SetPair
 18638 ;;		_Port_SetPairType
 18639 ;;		_Port_SetPair
 18640 ;; This function uses a non-reentrant model
 18641 ;;
 18642                           
 18643                           	psect	text90
 18644  0169F4                     __ptext90:
 18645                           	opt stack 0
 18646  0169F4                     _Byte_SetPair:
 18647                           	opt stack 18
 18648                           
 18649                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 18650                           
 18651                           ;incstack = 0
 18652  0169F4  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 18653  0169F8  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 18654  0169FC  0E04               	movlw	4
 18655  0169FE  0100               	movlb	0	; () banked
 18656  016A00  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18657  016A02  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 18658  016A06  0E02               	movlw	2
 18659  016A08  0100               	movlb	0	; () banked
 18660  016A0A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18661  016A0C  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 18662  016A10  EC4F  F0A5         	call	_Byte_SetZone	;wreg free
 18663  016A14  0012               	return		;funcret
 18664  016A16                     __end_of_Byte_SetPair:
 18665                           	opt stack 0
 18666                           tosu	equ	0xFFF
 18667                           tosh	equ	0xFFE
 18668                           tosl	equ	0xFFD
 18669                           pclath	equ	0xFFA
 18670                           tblptru	equ	0xFF8
 18671                           tblptrh	equ	0xFF7
 18672                           tblptrl	equ	0xFF6
 18673                           tablat	equ	0xFF5
 18674                           prodh	equ	0xFF4
 18675                           prodl	equ	0xFF3
 18676                           intcon	equ	0xFF2
 18677                           postinc0	equ	0xFEE
 18678                           wreg	equ	0xFE8
 18679                           indf1	equ	0xFE7
 18680                           postdec1	equ	0xFE5
 18681                           fsr1h	equ	0xFE2
 18682                           fsr1l	equ	0xFE1
 18683                           indf2	equ	0xFDF
 18684                           postinc2	equ	0xFDE
 18685                           postdec2	equ	0xFDD
 18686                           plusw2	equ	0xFDB
 18687                           fsr2h	equ	0xFDA
 18688                           fsr2l	equ	0xFD9
 18689                           status	equ	0xFD8
 18690                           
 18691 ;; *************** function _Port_CheckQuadType *****************
 18692 ;; Defined at:
 18693 ;;		line 126 in file "Library/Port.c"
 18694 ;; Parameters:    Size  Location     Type
 18695 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 18696 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18697 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18698 ;;  pQuad           1   49[BANK0 ] enum E6776
 18699 ;;  pDrive          1   50[BANK0 ] enum E6469
 18700 ;; Auto vars:     Size  Location     Type
 18701 ;;  Output          1   53[BANK0 ] enum E6475
 18702 ;;  Pair2           1   52[BANK0 ] enum E6760
 18703 ;;  Pair1           1   51[BANK0 ] enum E6760
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      enum E6475
 18706 ;; Registers used:
 18707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;Total ram usage:        7 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:   12
 18720 ;; This function calls:
 18721 ;;		_Port_CheckPairType
 18722 ;; This function is called by:
 18723 ;;		_Port_CheckPortType
 18724 ;;		_Port_SetQuadType
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           	psect	text91
 18729  016064                     __ptext91:
 18730                           	opt stack 0
 18731  016064                     _Port_CheckQuadType:
 18732                           	opt stack 14
 18733                           
 18734                           ;Port.c: 128: ePinError Output = ePinErrorState;
 18735                           
 18736                           ;incstack = 0
 18737  016064  0E05               	movlw	5
 18738  016066  0100               	movlb	0	; () banked
 18739  016068  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18740                           
 18741                           ; BSR set to: 0
 18742                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 18743  01606A  0100               	movlb	0	; () banked
 18744  01606C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18745  01606E  0D02               	mullw	2
 18746  016070  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 18747                           
 18748                           ; BSR set to: 0
 18749                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 18750  016074  0100               	movlb	0	; () banked
 18751  016076  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18752  016078  0D02               	mullw	2
 18753  01607A  28F3               	incf	prodl,w,c
 18754  01607C  0100               	movlb	0	; () banked
 18755  01607E  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 18756                           
 18757                           ; BSR set to: 0
 18758                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 18759  016080  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18760  016084  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18761  016088  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18762  01608C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18763  016090  EC40  F0AE         	call	_Port_CheckPairType	;wreg free
 18764  016094  0100               	movlb	0	; () banked
 18765  016096  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18766  016098  0100               	movlb	0	; () banked
 18767  01609A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18768  01609C  A4D8               	btfss	status,2,c
 18769  01609E  D00C               	goto	l393
 18770                           
 18771                           ; BSR set to: 0
 18772                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18773  0160A0  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18774  0160A4  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18775  0160A8  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18776  0160AC  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18777  0160B0  EC40  F0AE         	call	_Port_CheckPairType	;wreg free
 18778  0160B4  0100               	movlb	0	; () banked
 18779  0160B6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18780  0160B8                     l393:
 18781                           
 18782                           ; BSR set to: 0
 18783                           ;Port.c: 136: return Output;
 18784                           
 18785                           ; BSR set to: 0
 18786  0160B8  0100               	movlb	0	; () banked
 18787  0160BA  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18788  0160BC  0012               	return	
 18789  0160BE                     __end_of_Port_CheckQuadType:
 18790                           	opt stack 0
 18791                           tosu	equ	0xFFF
 18792                           tosh	equ	0xFFE
 18793                           tosl	equ	0xFFD
 18794                           pclath	equ	0xFFA
 18795                           tblptru	equ	0xFF8
 18796                           tblptrh	equ	0xFF7
 18797                           tblptrl	equ	0xFF6
 18798                           tablat	equ	0xFF5
 18799                           prodh	equ	0xFF4
 18800                           prodl	equ	0xFF3
 18801                           intcon	equ	0xFF2
 18802                           postinc0	equ	0xFEE
 18803                           wreg	equ	0xFE8
 18804                           indf1	equ	0xFE7
 18805                           postdec1	equ	0xFE5
 18806                           fsr1h	equ	0xFE2
 18807                           fsr1l	equ	0xFE1
 18808                           indf2	equ	0xFDF
 18809                           postinc2	equ	0xFDE
 18810                           postdec2	equ	0xFDD
 18811                           plusw2	equ	0xFDB
 18812                           fsr2h	equ	0xFDA
 18813                           fsr2l	equ	0xFD9
 18814                           status	equ	0xFD8
 18815                           
 18816 ;; *************** function _Port_CheckPairType *****************
 18817 ;; Defined at:
 18818 ;;		line 112 in file "Library/Port.c"
 18819 ;; Parameters:    Size  Location     Type
 18820 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18821 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18822 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18823 ;;  pPair           1   40[BANK0 ] enum E6760
 18824 ;;  pDrive          1   41[BANK0 ] enum E6469
 18825 ;; Auto vars:     Size  Location     Type
 18826 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18827 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18828 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18829 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18830 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18831 ;;  Output          1   44[BANK0 ] enum E6475
 18832 ;;  Pin2            1   43[BANK0 ] enum E6750
 18833 ;;  Pin1            1   42[BANK0 ] enum E6750
 18834 ;; Return value:  Size  Location     Type
 18835 ;;                  1    wreg      enum E6475
 18836 ;; Registers used:
 18837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18838 ;; Tracked objects:
 18839 ;;		On entry : 0/0
 18840 ;;		On exit  : 0/0
 18841 ;;		Unchanged: 0/0
 18842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18843 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18847 ;;Total ram usage:        9 bytes
 18848 ;; Hardware stack levels used:    1
 18849 ;; Hardware stack levels required when called:   11
 18850 ;; This function calls:
 18851 ;;		_PortProperty_Valid
 18852 ;; This function is called by:
 18853 ;;		_Port_CheckQuadType
 18854 ;;		_Port_SetPairType
 18855 ;; This function uses a non-reentrant model
 18856 ;;
 18857                           
 18858                           	psect	text92
 18859  015C80                     __ptext92:
 18860                           	opt stack 0
 18861  015C80                     _Port_CheckPairType:
 18862                           	opt stack 14
 18863                           
 18864                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18865                           
 18866                           ; BSR set to: 0
 18867                           ;incstack = 0
 18868  015C80  0E05               	movlw	5
 18869  015C82  0100               	movlb	0	; () banked
 18870  015C84  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18871                           
 18872                           ; BSR set to: 0
 18873                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18874  015C86  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18875  015C8A  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18876  015C8E  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 18877  015C92  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18881  015C96  0100               	movlb	0	; () banked
 18882  015C98  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18883  015C9A  0D02               	mullw	2
 18884  015C9C  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 18885                           
 18886                           ; BSR set to: 0
 18887                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18888  015CA0  0100               	movlb	0	; () banked
 18889  015CA2  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18890  015CA4  0D02               	mullw	2
 18891  015CA6  28F3               	incf	prodl,w,c
 18892  015CA8  0100               	movlb	0	; () banked
 18893  015CAA  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18897  015CAC  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18898  015CB0  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18899  015CB4  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18900  015CB8  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18901  015CBC  ECC3  F0AB         	call	_PortProperty_Valid	;wreg free
 18902  015CC0  0100               	movlb	0	; () banked
 18903  015CC2  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18904  015CC4  0100               	movlb	0	; () banked
 18905  015CC6  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18906  015CC8  A4D8               	btfss	status,2,c
 18907  015CCA  D00C               	goto	l389
 18908                           
 18909                           ; BSR set to: 0
 18910                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18911  015CCC  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18912  015CD0  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18913  015CD4  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18914  015CD8  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18915  015CDC  ECC3  F0AB         	call	_PortProperty_Valid	;wreg free
 18916  015CE0  0100               	movlb	0	; () banked
 18917  015CE2  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18918  015CE4                     l389:
 18919                           
 18920                           ; BSR set to: 0
 18921                           ;Port.c: 124: return Output;
 18922                           
 18923                           ; BSR set to: 0
 18924  015CE4  0100               	movlb	0	; () banked
 18925  015CE6  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18926  015CE8  0012               	return	
 18927  015CEA                     __end_of_Port_CheckPairType:
 18928                           	opt stack 0
 18929                           tosu	equ	0xFFF
 18930                           tosh	equ	0xFFE
 18931                           tosl	equ	0xFFD
 18932                           pclath	equ	0xFFA
 18933                           tblptru	equ	0xFF8
 18934                           tblptrh	equ	0xFF7
 18935                           tblptrl	equ	0xFF6
 18936                           tablat	equ	0xFF5
 18937                           prodh	equ	0xFF4
 18938                           prodl	equ	0xFF3
 18939                           intcon	equ	0xFF2
 18940                           postinc0	equ	0xFEE
 18941                           wreg	equ	0xFE8
 18942                           indf1	equ	0xFE7
 18943                           postdec1	equ	0xFE5
 18944                           fsr1h	equ	0xFE2
 18945                           fsr1l	equ	0xFE1
 18946                           indf2	equ	0xFDF
 18947                           postinc2	equ	0xFDE
 18948                           postdec2	equ	0xFDD
 18949                           plusw2	equ	0xFDB
 18950                           fsr2h	equ	0xFDA
 18951                           fsr2l	equ	0xFD9
 18952                           status	equ	0xFD8
 18953                           
 18954 ;; *************** function _PortProperty_Valid *****************
 18955 ;; Defined at:
 18956 ;;		line 220 in file "Library/Types.c"
 18957 ;; Parameters:    Size  Location     Type
 18958 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18959 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18960 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18961 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18962 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18963 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18964 ;;  pPin            1   18[BANK0 ] unsigned char 
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18967 ;;  Pair            1   37[BANK0 ] enum E6469
 18968 ;; Return value:  Size  Location     Type
 18969 ;;                  1    wreg      enum E6475
 18970 ;; Registers used:
 18971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18972 ;; Tracked objects:
 18973 ;;		On entry : 0/0
 18974 ;;		On exit  : 0/0
 18975 ;;		Unchanged: 0/0
 18976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18978 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18980 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18981 ;;Total ram usage:       23 bytes
 18982 ;; Hardware stack levels used:    1
 18983 ;; Hardware stack levels required when called:   10
 18984 ;; This function calls:
 18985 ;;		_Word_GetPair
 18986 ;; This function is called by:
 18987 ;;		_Port_CheckPairType
 18988 ;;		_Port_SetPinType
 18989 ;; This function uses a non-reentrant model
 18990 ;;
 18991                           
 18992                           	psect	text93
 18993  015786                     __ptext93:
 18994                           	opt stack 0
 18995  015786                     _PortProperty_Valid:
 18996                           	opt stack 17
 18997                           
 18998                           ;Types.c: 222: ePinDrive Pair;
 18999                           ;Types.c: 223: const ePinError Errors[4][4] =
 19000                           ;Types.c: 224: {
 19001                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 19002                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 19003                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 19004                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 19005                           ;Types.c: 230: };
 19006                           
 19007                           ; BSR set to: 0
 19008                           ;incstack = 0
 19009  015786  0EA5               	movlw	low PortProperty_Valid@F6830
 19010  015788  6EF6               	movwf	tblptrl,c
 19011  01578A                     	if	1	;There is more than 1 active tblptr byte
 19012  01578A  0EFC               	movlw	high PortProperty_Valid@F6830
 19013  01578C  6EF7               	movwf	tblptrh,c
 19014  01578E                     	endif
 19015  01578E                     	if	1	;There are 3 active tblptr bytes
 19016  01578E  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 19017  015790  6EF8               	movwf	tblptru,c
 19018  015792                     	endif
 19019  015792  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 19020  015796  0E0F               	movlw	15
 19021  015798                     u9070:
 19022  015798  0009               	tblrd		*+
 19023  01579A  CFF5 FFDE          	movff	tablat,postinc2
 19024  01579E  06E8               	decf	wreg,f,c
 19025  0157A0  E2FB               	bc	u9070
 19026                           
 19027                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 19028  0157A2  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 19029  0157A6  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 19030  0157AA  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 19031  0157AE  EC08  F0B3         	call	_Word_GetPair	;wreg free
 19032  0157B2  0100               	movlb	0	; () banked
 19033  0157B4  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 19037  0157B6  0E04               	movlw	4
 19038  0157B8  0100               	movlb	0	; () banked
 19039  0157BA  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 19040  0157BC  D020               	goto	l819
 19041                           
 19042                           ; BSR set to: 0
 19043  0157BE  0E04               	movlw	4
 19044  0157C0  0100               	movlb	0	; () banked
 19045  0157C2  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 19046  0157C4  D01C               	goto	l819
 19047                           
 19048                           ; BSR set to: 0
 19049                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 19050  0157C6  0100               	movlb	0	; () banked
 19051  0157C8  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 19052  0157CA  0D04               	mullw	4
 19053  0157CC  0E75               	movlw	low PortProperty_Valid@Errors
 19054  0157CE  0100               	movlb	0	; () banked
 19055  0157D0  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 19056  0157D2  0E00               	movlw	high PortProperty_Valid@Errors
 19057  0157D4  0100               	movlb	0	; () banked
 19058  0157D6  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 19059  0157D8  50F3               	movf	prodl,w,c
 19060  0157DA  0100               	movlb	0	; () banked
 19061  0157DC  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 19062  0157DE  50F4               	movf	prodh,w,c
 19063  0157E0  0100               	movlb	0	; () banked
 19064  0157E2  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 19065  0157E4  0100               	movlb	0	; () banked
 19066  0157E6  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 19067  0157E8  0D01               	mullw	1
 19068  0157EA  50F3               	movf	prodl,w,c
 19069  0157EC  0100               	movlb	0	; () banked
 19070  0157EE  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 19071  0157F0  6ED9               	movwf	fsr2l,c
 19072  0157F2  50F4               	movf	prodh,w,c
 19073  0157F4  0100               	movlb	0	; () banked
 19074  0157F6  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 19075  0157F8  6EDA               	movwf	fsr2h,c
 19076  0157FA  50DF               	movf	indf2,w,c
 19077                           
 19078                           ; BSR set to: 0
 19079  0157FC  0012               	return	
 19080  0157FE                     l819:
 19081                           
 19082                           ; BSR set to: 0
 19083                           ;Types.c: 237: return ePinErrorState;
 19084                           
 19085                           ; BSR set to: 0
 19086  0157FE  0E05               	movlw	5
 19087  015800  0012               	return	
 19088  015802                     __end_of_PortProperty_Valid:
 19089                           	opt stack 0
 19090                           tosu	equ	0xFFF
 19091                           tosh	equ	0xFFE
 19092                           tosl	equ	0xFFD
 19093                           pclath	equ	0xFFA
 19094                           tblptru	equ	0xFF8
 19095                           tblptrh	equ	0xFF7
 19096                           tblptrl	equ	0xFF6
 19097                           tablat	equ	0xFF5
 19098                           prodh	equ	0xFF4
 19099                           prodl	equ	0xFF3
 19100                           intcon	equ	0xFF2
 19101                           postinc0	equ	0xFEE
 19102                           wreg	equ	0xFE8
 19103                           indf1	equ	0xFE7
 19104                           postdec1	equ	0xFE5
 19105                           fsr1h	equ	0xFE2
 19106                           fsr1l	equ	0xFE1
 19107                           indf2	equ	0xFDF
 19108                           postinc2	equ	0xFDE
 19109                           postdec2	equ	0xFDD
 19110                           plusw2	equ	0xFDB
 19111                           fsr2h	equ	0xFDA
 19112                           fsr2l	equ	0xFD9
 19113                           status	equ	0xFD8
 19114                           
 19115 ;; *************** function _Word_GetPair *****************
 19116 ;; Defined at:
 19117 ;;		line 156 in file "Library/Types.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;  pInput          2   12[BANK0 ] PTR struct Word
 19120 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19121 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19122 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19123 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19124 ;;  pPair           1   14[BANK0 ] unsigned char 
 19125 ;; Auto vars:     Size  Location     Type
 19126 ;;		None
 19127 ;; Return value:  Size  Location     Type
 19128 ;;                  1    wreg      unsigned char 
 19129 ;; Registers used:
 19130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19131 ;; Tracked objects:
 19132 ;;		On entry : 0/0
 19133 ;;		On exit  : 0/0
 19134 ;;		Unchanged: 0/0
 19135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19136 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19140 ;;Total ram usage:        3 bytes
 19141 ;; Hardware stack levels used:    1
 19142 ;; Hardware stack levels required when called:    9
 19143 ;; This function calls:
 19144 ;;		_Byte_GetPair
 19145 ;; This function is called by:
 19146 ;;		_Port_Init
 19147 ;;		_Port_SetPin
 19148 ;;		_Port_Set
 19149 ;;		_PortProperty_Valid
 19150 ;;		_Port_SetPair
 19151 ;;		_Port_SetQuad
 19152 ;; This function uses a non-reentrant model
 19153 ;;
 19154                           
 19155                           	psect	text94
 19156  016610                     __ptext94:
 19157                           	opt stack 0
 19158  016610                     _Word_GetPair:
 19159                           	opt stack 14
 19160                           
 19161                           ;Types.c: 158: if (pPair >= 4)
 19162                           
 19163                           ; BSR set to: 0
 19164                           ;incstack = 0
 19165  016610  0E03               	movlw	3
 19166  016612  0100               	movlb	0	; () banked
 19167  016614  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 19168  016616  D012               	goto	l781
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 19172  016618  0E01               	movlw	1
 19173  01661A  0100               	movlb	0	; () banked
 19174  01661C  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 19175  01661E  0100               	movlb	0	; () banked
 19176  016620  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 19177  016622  0E00               	movlw	0
 19178  016624  0100               	movlb	0	; () banked
 19179  016626  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 19180  016628  0100               	movlb	0	; () banked
 19181  01662A  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 19182  01662C  0100               	movlb	0	; () banked
 19183  01662E  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 19184  016630  0FFC               	addlw	252
 19185  016632  0100               	movlb	0	; () banked
 19186  016634  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 19187  016636  EC79  F0B5         	call	_Byte_GetPair	;wreg free
 19188  01663A  0012               	return	
 19189  01663C                     l781:
 19190                           
 19191                           ;Types.c: 160: else
 19192                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 19193  01663C  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 19194  016640  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 19195  016644  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 19196  016648  EC79  F0B5         	call	_Byte_GetPair	;wreg free
 19197  01664C  0012               	return	
 19198  01664E                     __end_of_Word_GetPair:
 19199                           	opt stack 0
 19200                           tosu	equ	0xFFF
 19201                           tosh	equ	0xFFE
 19202                           tosl	equ	0xFFD
 19203                           pclath	equ	0xFFA
 19204                           tblptru	equ	0xFF8
 19205                           tblptrh	equ	0xFF7
 19206                           tblptrl	equ	0xFF6
 19207                           tablat	equ	0xFF5
 19208                           prodh	equ	0xFF4
 19209                           prodl	equ	0xFF3
 19210                           intcon	equ	0xFF2
 19211                           postinc0	equ	0xFEE
 19212                           wreg	equ	0xFE8
 19213                           indf1	equ	0xFE7
 19214                           postdec1	equ	0xFE5
 19215                           fsr1h	equ	0xFE2
 19216                           fsr1l	equ	0xFE1
 19217                           indf2	equ	0xFDF
 19218                           postinc2	equ	0xFDE
 19219                           postdec2	equ	0xFDD
 19220                           plusw2	equ	0xFDB
 19221                           fsr2h	equ	0xFDA
 19222                           fsr2l	equ	0xFD9
 19223                           status	equ	0xFD8
 19224                           
 19225 ;; *************** function _Byte_GetPair *****************
 19226 ;; Defined at:
 19227 ;;		line 87 in file "Library/Types.c"
 19228 ;; Parameters:    Size  Location     Type
 19229 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 19230 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19231 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19232 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19233 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19234 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19235 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19236 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19237 ;;		 -> NULL(0), 
 19238 ;;  pPair           1   11[BANK0 ] unsigned char 
 19239 ;; Auto vars:     Size  Location     Type
 19240 ;;		None
 19241 ;; Return value:  Size  Location     Type
 19242 ;;                  1    wreg      unsigned char 
 19243 ;; Registers used:
 19244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19245 ;; Tracked objects:
 19246 ;;		On entry : 0/0
 19247 ;;		On exit  : 0/0
 19248 ;;		Unchanged: 0/0
 19249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19254 ;;Total ram usage:        3 bytes
 19255 ;; Hardware stack levels used:    1
 19256 ;; Hardware stack levels required when called:    8
 19257 ;; This function calls:
 19258 ;;		_Byte_GetZone
 19259 ;; This function is called by:
 19260 ;;		_Word_GetPair
 19261 ;; This function uses a non-reentrant model
 19262 ;;
 19263                           
 19264                           	psect	text95
 19265  016AF2                     __ptext95:
 19266                           	opt stack 0
 19267  016AF2                     _Byte_GetPair:
 19268                           	opt stack 14
 19269                           
 19270                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 19271                           
 19272                           ;incstack = 0
 19273  016AF2  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 19274  016AF6  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 19275  016AFA  0E04               	movlw	4
 19276  016AFC  0100               	movlb	0	; () banked
 19277  016AFE  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 19278  016B00  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 19279  016B04  0E02               	movlw	2
 19280  016B06  0100               	movlb	0	; () banked
 19281  016B08  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 19282  016B0A  EC48  F0A9         	call	_Byte_GetZone	;wreg free
 19283  016B0E  0012               	return	
 19284  016B10                     __end_of_Byte_GetPair:
 19285                           	opt stack 0
 19286                           tosu	equ	0xFFF
 19287                           tosh	equ	0xFFE
 19288                           tosl	equ	0xFFD
 19289                           pclath	equ	0xFFA
 19290                           tblptru	equ	0xFF8
 19291                           tblptrh	equ	0xFF7
 19292                           tblptrl	equ	0xFF6
 19293                           tablat	equ	0xFF5
 19294                           prodh	equ	0xFF4
 19295                           prodl	equ	0xFF3
 19296                           intcon	equ	0xFF2
 19297                           postinc0	equ	0xFEE
 19298                           wreg	equ	0xFE8
 19299                           indf1	equ	0xFE7
 19300                           postdec1	equ	0xFE5
 19301                           fsr1h	equ	0xFE2
 19302                           fsr1l	equ	0xFE1
 19303                           indf2	equ	0xFDF
 19304                           postinc2	equ	0xFDE
 19305                           postdec2	equ	0xFDD
 19306                           plusw2	equ	0xFDB
 19307                           fsr2h	equ	0xFDA
 19308                           fsr2l	equ	0xFD9
 19309                           status	equ	0xFD8
 19310                           
 19311 ;; *************** function _Byte_GetZone *****************
 19312 ;; Defined at:
 19313 ;;		line 64 in file "Library/Types.c"
 19314 ;; Parameters:    Size  Location     Type
 19315 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19316 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19317 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19318 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19319 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19320 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19321 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19322 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19323 ;;		 -> NULL(0), 
 19324 ;;  pMax            1    2[BANK0 ] unsigned char 
 19325 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19326 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19327 ;; Auto vars:     Size  Location     Type
 19328 ;;  Output          1    8[BANK0 ] unsigned char 
 19329 ;;  Offset          1    7[BANK0 ] unsigned char 
 19330 ;;  MASK            1    6[BANK0 ] unsigned char 
 19331 ;; Return value:  Size  Location     Type
 19332 ;;                  1    wreg      unsigned char 
 19333 ;; Registers used:
 19334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19335 ;; Tracked objects:
 19336 ;;		On entry : 0/0
 19337 ;;		On exit  : 0/0
 19338 ;;		Unchanged: 0/0
 19339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19340 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;Total ram usage:        9 bytes
 19345 ;; Hardware stack levels used:    1
 19346 ;; Hardware stack levels required when called:    7
 19347 ;; This function calls:
 19348 ;;		Nothing
 19349 ;; This function is called by:
 19350 ;;		_Byte_GetPair
 19351 ;;		_Byte_GetTriple
 19352 ;;		_Byte_GetQuad
 19353 ;; This function uses a non-reentrant model
 19354 ;;
 19355                           
 19356                           	psect	text96
 19357  015290                     __ptext96:
 19358                           	opt stack 0
 19359  015290                     _Byte_GetZone:
 19360                           	opt stack 14
 19361                           
 19362                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 19363                           
 19364                           ;incstack = 0
 19365  015290  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 19366  015294  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 19367  015298  0E00               	movlw	low (__mediumconst shr (0+16))
 19368  01529A  6EF8               	movwf	tblptru,c
 19369  01529C  0E0F               	movlw	(high __ramtop+-1)
 19370  01529E  64F7               	cpfsgt	tblptrh,c
 19371  0152A0  D003               	bra	u9037
 19372  0152A2  0008               	tblrd		*
 19373  0152A4  50F5               	movf	tablat,w,c
 19374  0152A6  D005               	bra	u9030
 19375  0152A8                     u9037:
 19376  0152A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 19377  0152AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 19378  0152B0  50EF               	movf	indf0,w,c
 19379  0152B2                     u9030:
 19380  0152B2  0100               	movlb	0	; () banked
 19381  0152B4  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 19382                           
 19383                           ; BSR set to: 0
 19384                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 19385  0152B6  0100               	movlb	0	; () banked
 19386  0152B8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19387  0152BA  0D01               	mullw	1
 19388  0152BC  0EBF               	movlw	low _MASKS
 19389  0152BE  24F3               	addwf	prodl,w,c
 19390  0152C0  6EF6               	movwf	tblptrl,c
 19391  0152C2  0EFC               	movlw	high _MASKS
 19392  0152C4  20F4               	addwfc	prodh,w,c
 19393  0152C6  6EF7               	movwf	tblptrh,c
 19394  0152C8                     	if	1	;There are 3 active tblptr bytes
 19395  0152C8  6AF8               	clrf	tblptru,c
 19396  0152CA  0E00               	movlw	low (__mediumconst shr (0+16))
 19397  0152CC  22F8               	addwfc	tblptru,f,c
 19398  0152CE                     	endif
 19399  0152CE  0008               	tblrd		*
 19400  0152D0  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;Types.c: 68: UINT8 Offset = 0;
 19404  0152D4  0E00               	movlw	0
 19405  0152D6  0100               	movlb	0	; () banked
 19406  0152D8  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 19407                           
 19408                           ;Types.c: 70: while (pChunk >= pMax)
 19409  0152DA  D006               	goto	l732
 19410  0152DC                     
 19411                           ; BSR set to: 0
 19412                           ;Types.c: 71: {
 19413                           ;Types.c: 72: pChunk -= pMax;
 19414                           
 19415                           ; BSR set to: 0
 19416  0152DC  0100               	movlb	0	; () banked
 19417  0152DE  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 19418  0152E0  0100               	movlb	0	; () banked
 19419  0152E2  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 19420                           
 19421                           ; BSR set to: 0
 19422                           ;Types.c: 73: Offset += 1;
 19423  0152E4  0100               	movlb	0	; () banked
 19424  0152E6  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 19425  0152E8                     l732:
 19426                           
 19427                           ; BSR set to: 0
 19428                           
 19429                           ; BSR set to: 0
 19430  0152E8  0100               	movlb	0	; () banked
 19431  0152EA  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 19432  0152EC  0100               	movlb	0	; () banked
 19433  0152EE  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 19434  0152F0  B0D8               	btfsc	status,0,c
 19435  0152F2  D7F4               	goto	l733
 19436                           
 19437                           ; BSR set to: 0
 19438                           ;Types.c: 74: }
 19439                           ;Types.c: 75: pChunk *= pChunkSize;
 19440                           
 19441                           ; BSR set to: 0
 19442  0152F4  0100               	movlb	0	; () banked
 19443  0152F6  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19444  0152F8  0100               	movlb	0	; () banked
 19445  0152FA  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 19446  0152FC  50F3               	movf	prodl,w,c
 19447  0152FE  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 19448                           
 19449                           ; BSR set to: 0
 19450                           ;Types.c: 76: pChunk += Offset;
 19451  015300  0100               	movlb	0	; () banked
 19452  015302  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 19453  015304  0100               	movlb	0	; () banked
 19454  015306  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 19455                           
 19456                           ; BSR set to: 0
 19457                           ;Types.c: 78: Output >>= pChunk;
 19458  015308  0100               	movlb	0	; () banked
 19459  01530A  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 19460  01530C  0100               	movlb	0	; () banked
 19461  01530E  6F65               	movwf	??_Byte_GetZone& (0+255),b
 19462  015310  D003               	goto	u9050
 19463  015312                     u9055:
 19464  015312  0100               	movlb	0	; () banked
 19465  015314  90D8               	bcf	status,0,c
 19466  015316  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 19467  015318                     u9050:
 19468  015318  0100               	movlb	0	; () banked
 19469  01531A  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 19470  01531C  D7FA               	goto	u9055
 19471                           
 19472                           ;Types.c: 79: Output &= MASK;
 19473  01531E  0100               	movlb	0	; () banked
 19474  015320  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 19475  015322  0100               	movlb	0	; () banked
 19476  015324  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 19477                           
 19478                           ; BSR set to: 0
 19479                           ;Types.c: 80: return Output;
 19480  015326  0100               	movlb	0	; () banked
 19481  015328  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 19482  01532A  0012               	return	
 19483  01532C                     __end_of_Byte_GetZone:
 19484                           	opt stack 0
 19485                           tosu	equ	0xFFF
 19486                           tosh	equ	0xFFE
 19487                           tosl	equ	0xFFD
 19488                           pclath	equ	0xFFA
 19489                           tblptru	equ	0xFF8
 19490                           tblptrh	equ	0xFF7
 19491                           tblptrl	equ	0xFF6
 19492                           tablat	equ	0xFF5
 19493                           prodh	equ	0xFF4
 19494                           prodl	equ	0xFF3
 19495                           intcon	equ	0xFF2
 19496                           indf0	equ	0xFEF
 19497                           postinc0	equ	0xFEE
 19498                           fsr0h	equ	0xFEA
 19499                           fsr0l	equ	0xFE9
 19500                           wreg	equ	0xFE8
 19501                           indf1	equ	0xFE7
 19502                           postdec1	equ	0xFE5
 19503                           fsr1h	equ	0xFE2
 19504                           fsr1l	equ	0xFE1
 19505                           indf2	equ	0xFDF
 19506                           postinc2	equ	0xFDE
 19507                           postdec2	equ	0xFDD
 19508                           plusw2	equ	0xFDB
 19509                           fsr2h	equ	0xFDA
 19510                           fsr2l	equ	0xFD9
 19511                           status	equ	0xFD8
 19512                           
 19513 ;; *************** function _Byte_SetQuad *****************
 19514 ;; Defined at:
 19515 ;;		line 101 in file "Library/Types.c"
 19516 ;; Parameters:    Size  Location     Type
 19517 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19518 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 19519 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19520 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19521 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19522 ;;		 -> NULL(0), 
 19523 ;;  pQuad           1   13[BANK0 ] unsigned char 
 19524 ;;  pValue          1   14[BANK0 ] unsigned char 
 19525 ;; Auto vars:     Size  Location     Type
 19526 ;;		None
 19527 ;; Return value:  Size  Location     Type
 19528 ;;                  1    wreg      void 
 19529 ;; Registers used:
 19530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19531 ;; Tracked objects:
 19532 ;;		On entry : 0/0
 19533 ;;		On exit  : 0/0
 19534 ;;		Unchanged: 0/0
 19535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19539 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19540 ;;Total ram usage:        4 bytes
 19541 ;; Hardware stack levels used:    1
 19542 ;; Hardware stack levels required when called:    8
 19543 ;; This function calls:
 19544 ;;		_Byte_SetZone
 19545 ;; This function is called by:
 19546 ;;		_Port_SetQuadType
 19547 ;;		_SPI_Init
 19548 ;;		_SPI_MinSpeed
 19549 ;;		_SPI_MaxSpeed
 19550 ;;		_Port_SetQuad
 19551 ;;		_Word_SetQuad
 19552 ;;		_I2C_Init
 19553 ;; This function uses a non-reentrant model
 19554 ;;
 19555                           
 19556                           	psect	text97
 19557  016A16                     __ptext97:
 19558                           	opt stack 0
 19559  016A16                     _Byte_SetQuad:
 19560                           	opt stack 19
 19561                           
 19562                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 19563                           
 19564                           ; BSR set to: 0
 19565                           ;incstack = 0
 19566  016A16  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 19567  016A1A  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 19568  016A1E  0E02               	movlw	2
 19569  016A20  0100               	movlb	0	; () banked
 19570  016A22  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 19571  016A24  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 19572  016A28  0E04               	movlw	4
 19573  016A2A  0100               	movlb	0	; () banked
 19574  016A2C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19575  016A2E  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 19576  016A32  EC4F  F0A5         	call	_Byte_SetZone	;wreg free
 19577  016A36  0012               	return		;funcret
 19578  016A38                     __end_of_Byte_SetQuad:
 19579                           	opt stack 0
 19580                           tosu	equ	0xFFF
 19581                           tosh	equ	0xFFE
 19582                           tosl	equ	0xFFD
 19583                           pclath	equ	0xFFA
 19584                           tblptru	equ	0xFF8
 19585                           tblptrh	equ	0xFF7
 19586                           tblptrl	equ	0xFF6
 19587                           tablat	equ	0xFF5
 19588                           prodh	equ	0xFF4
 19589                           prodl	equ	0xFF3
 19590                           intcon	equ	0xFF2
 19591                           indf0	equ	0xFEF
 19592                           postinc0	equ	0xFEE
 19593                           fsr0h	equ	0xFEA
 19594                           fsr0l	equ	0xFE9
 19595                           wreg	equ	0xFE8
 19596                           indf1	equ	0xFE7
 19597                           postdec1	equ	0xFE5
 19598                           fsr1h	equ	0xFE2
 19599                           fsr1l	equ	0xFE1
 19600                           indf2	equ	0xFDF
 19601                           postinc2	equ	0xFDE
 19602                           postdec2	equ	0xFDD
 19603                           plusw2	equ	0xFDB
 19604                           fsr2h	equ	0xFDA
 19605                           fsr2l	equ	0xFD9
 19606                           status	equ	0xFD8
 19607                           
 19608 ;; *************** function _Byte_SetZone *****************
 19609 ;; Defined at:
 19610 ;;		line 47 in file "Library/Types.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19613 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19614 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19615 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 19616 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 19617 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19618 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19619 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19620 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19621 ;;  pMax            1    2[BANK0 ] unsigned char 
 19622 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19623 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19624 ;;  pValue          1    5[BANK0 ] unsigned char 
 19625 ;; Auto vars:     Size  Location     Type
 19626 ;;  MASK            1   10[BANK0 ] unsigned char 
 19627 ;;  Offset          1    9[BANK0 ] unsigned char 
 19628 ;; Return value:  Size  Location     Type
 19629 ;;                  1    wreg      void 
 19630 ;; Registers used:
 19631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19632 ;; Tracked objects:
 19633 ;;		On entry : 0/0
 19634 ;;		On exit  : 0/0
 19635 ;;		Unchanged: 0/0
 19636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19637 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19639 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19640 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19641 ;;Total ram usage:       11 bytes
 19642 ;; Hardware stack levels used:    1
 19643 ;; Hardware stack levels required when called:    7
 19644 ;; This function calls:
 19645 ;;		Nothing
 19646 ;; This function is called by:
 19647 ;;		_Byte_SetPair
 19648 ;;		_Byte_SetQuad
 19649 ;;		_Byte_SetTriple
 19650 ;; This function uses a non-reentrant model
 19651 ;;
 19652                           
 19653                           	psect	text98
 19654  014A9E                     __ptext98:
 19655                           	opt stack 0
 19656  014A9E                     _Byte_SetZone:
 19657                           	opt stack 18
 19658                           
 19659                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 19660                           
 19661                           ;incstack = 0
 19662  014A9E  0100               	movlb	0	; () banked
 19663  014AA0  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19664  014AA2  0D01               	mullw	1
 19665  014AA4  0EBF               	movlw	low _MASKS
 19666  014AA6  24F3               	addwf	prodl,w,c
 19667  014AA8  6EF6               	movwf	tblptrl,c
 19668  014AAA  0EFC               	movlw	high _MASKS
 19669  014AAC  20F4               	addwfc	prodh,w,c
 19670  014AAE  6EF7               	movwf	tblptrh,c
 19671  014AB0                     	if	1	;There are 3 active tblptr bytes
 19672  014AB0  6AF8               	clrf	tblptru,c
 19673  014AB2  0E00               	movlw	low (__mediumconst shr (0+16))
 19674  014AB4  22F8               	addwfc	tblptru,f,c
 19675  014AB6                     	endif
 19676  014AB6  0008               	tblrd		*
 19677  014AB8  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;Types.c: 50: UINT8 Offset = 0;
 19681  014ABC  0E00               	movlw	0
 19682  014ABE  0100               	movlb	0	; () banked
 19683  014AC0  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 19684                           
 19685                           ;Types.c: 52: while (pChunk >= pMax)
 19686  014AC2  D006               	goto	l726
 19687  014AC4                     
 19688                           ; BSR set to: 0
 19689                           ;Types.c: 53: {
 19690                           ;Types.c: 54: pChunk -= pMax;
 19691                           
 19692                           ; BSR set to: 0
 19693  014AC4  0100               	movlb	0	; () banked
 19694  014AC6  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 19695  014AC8  0100               	movlb	0	; () banked
 19696  014ACA  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;Types.c: 55: Offset += 1;
 19700  014ACC  0100               	movlb	0	; () banked
 19701  014ACE  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 19702  014AD0                     l726:
 19703                           
 19704                           ; BSR set to: 0
 19705                           
 19706                           ; BSR set to: 0
 19707  014AD0  0100               	movlb	0	; () banked
 19708  014AD2  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 19709  014AD4  0100               	movlb	0	; () banked
 19710  014AD6  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 19711  014AD8  B0D8               	btfsc	status,0,c
 19712  014ADA  D7F4               	goto	l727
 19713                           
 19714                           ; BSR set to: 0
 19715                           ;Types.c: 56: }
 19716                           ;Types.c: 57: pChunk *= pChunkSize;
 19717                           
 19718                           ; BSR set to: 0
 19719  014ADC  0100               	movlb	0	; () banked
 19720  014ADE  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19721  014AE0  0100               	movlb	0	; () banked
 19722  014AE2  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 19723  014AE4  50F3               	movf	prodl,w,c
 19724  014AE6  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 19725                           
 19726                           ; BSR set to: 0
 19727                           ;Types.c: 58: pChunk += Offset;
 19728  014AE8  0100               	movlb	0	; () banked
 19729  014AEA  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 19730  014AEC  0100               	movlb	0	; () banked
 19731  014AEE  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;Types.c: 60: pValue &= MASK;
 19735  014AF0  0100               	movlb	0	; () banked
 19736  014AF2  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 19737  014AF4  0100               	movlb	0	; () banked
 19738  014AF6  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 19739                           
 19740                           ; BSR set to: 0
 19741                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 19742  014AF8  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19743  014AFC  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 19744  014B00  0100               	movlb	0	; () banked
 19745  014B02  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19746  014B04  D003               	goto	u9134
 19747  014B06                     u9135:
 19748  014B06  0100               	movlb	0	; () banked
 19749  014B08  90D8               	bcf	status,0,c
 19750  014B0A  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19751  014B0C                     u9134:
 19752  014B0C  0100               	movlb	0	; () banked
 19753  014B0E  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19754  014B10  D7FA               	goto	u9135
 19755  014B12  0100               	movlb	0	; () banked
 19756  014B14  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19757  014B16  0AFF               	xorlw	255
 19758  014B18  0100               	movlb	0	; () banked
 19759  014B1A  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 19760  014B1C  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19761  014B20  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19762  014B24  0100               	movlb	0	; () banked
 19763  014B26  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 19764  014B28  16DF               	andwf	indf2,f,c
 19765                           
 19766                           ; BSR set to: 0
 19767                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 19768  014B2A  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19769  014B2E  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 19770  014B32  0100               	movlb	0	; () banked
 19771  014B34  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19772  014B36  D003               	goto	u9144
 19773  014B38                     u9145:
 19774  014B38  0100               	movlb	0	; () banked
 19775  014B3A  90D8               	bcf	status,0,c
 19776  014B3C  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19777  014B3E                     u9144:
 19778  014B3E  0100               	movlb	0	; () banked
 19779  014B40  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19780  014B42  D7FA               	goto	u9145
 19781  014B44  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19782  014B48  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19783  014B4C  0100               	movlb	0	; () banked
 19784  014B4E  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19785  014B50  12DF               	iorwf	indf2,f,c
 19786                           
 19787                           ; BSR set to: 0
 19788  014B52  0012               	return		;funcret
 19789  014B54                     __end_of_Byte_SetZone:
 19790                           	opt stack 0
 19791                           tosu	equ	0xFFF
 19792                           tosh	equ	0xFFE
 19793                           tosl	equ	0xFFD
 19794                           pclath	equ	0xFFA
 19795                           tblptru	equ	0xFF8
 19796                           tblptrh	equ	0xFF7
 19797                           tblptrl	equ	0xFF6
 19798                           tablat	equ	0xFF5
 19799                           prodh	equ	0xFF4
 19800                           prodl	equ	0xFF3
 19801                           intcon	equ	0xFF2
 19802                           indf0	equ	0xFEF
 19803                           postinc0	equ	0xFEE
 19804                           fsr0h	equ	0xFEA
 19805                           fsr0l	equ	0xFE9
 19806                           wreg	equ	0xFE8
 19807                           indf1	equ	0xFE7
 19808                           postdec1	equ	0xFE5
 19809                           fsr1h	equ	0xFE2
 19810                           fsr1l	equ	0xFE1
 19811                           indf2	equ	0xFDF
 19812                           postinc2	equ	0xFDE
 19813                           postdec2	equ	0xFDD
 19814                           plusw2	equ	0xFDB
 19815                           fsr2h	equ	0xFDA
 19816                           fsr2l	equ	0xFD9
 19817                           status	equ	0xFD8
 19818                           
 19819 ;; *************** function _FunctInitADC *****************
 19820 ;; Defined at:
 19821 ;;		line 31 in file "Functions.c"
 19822 ;; Parameters:    Size  Location     Type
 19823 ;;		None
 19824 ;; Auto vars:     Size  Location     Type
 19825 ;;		None
 19826 ;; Return value:  Size  Location     Type
 19827 ;;                  1    wreg      void 
 19828 ;; Registers used:
 19829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19830 ;; Tracked objects:
 19831 ;;		On entry : 0/0
 19832 ;;		On exit  : 0/0
 19833 ;;		Unchanged: 0/0
 19834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19839 ;;Total ram usage:        0 bytes
 19840 ;; Hardware stack levels used:    1
 19841 ;; Hardware stack levels required when called:   10
 19842 ;; This function calls:
 19843 ;;		_ADC_Init
 19844 ;;		_ADC_Sequence
 19845 ;; This function is called by:
 19846 ;;		_initialise
 19847 ;; This function uses a non-reentrant model
 19848 ;;
 19849                           
 19850                           	psect	text99
 19851  014C08                     __ptext99:
 19852                           	opt stack 0
 19853  014C08                     _FunctInitADC:
 19854                           	opt stack 19
 19855                           
 19856                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;incstack = 0
 19860  014C08  0EDF               	movlw	low _ADC_AN0
 19861  014C0A  0100               	movlb	0	; () banked
 19862  014C0C  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19863  014C0E  0E01               	movlw	high _ADC_AN0
 19864  014C10  0100               	movlb	0	; () banked
 19865  014C12  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19866  014C14  0E00               	movlw	0
 19867  014C16  0100               	movlb	0	; () banked
 19868  014C18  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19869  014C1A  EC01  F0AC         	call	_ADC_Init	;wreg free
 19870                           
 19871                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 19872  014C1E  0EDA               	movlw	low _ADC_AN1
 19873  014C20  0100               	movlb	0	; () banked
 19874  014C22  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19875  014C24  0E01               	movlw	high _ADC_AN1
 19876  014C26  0100               	movlb	0	; () banked
 19877  014C28  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19878  014C2A  0E01               	movlw	1
 19879  014C2C  0100               	movlb	0	; () banked
 19880  014C2E  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19881  014C30  EC01  F0AC         	call	_ADC_Init	;wreg free
 19882                           
 19883                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 19884  014C34  0ED5               	movlw	low _ADC_AN2
 19885  014C36  0100               	movlb	0	; () banked
 19886  014C38  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19887  014C3A  0E01               	movlw	high _ADC_AN2
 19888  014C3C  0100               	movlb	0	; () banked
 19889  014C3E  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19890  014C40  0E02               	movlw	2
 19891  014C42  0100               	movlb	0	; () banked
 19892  014C44  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19893  014C46  EC01  F0AC         	call	_ADC_Init	;wreg free
 19894                           
 19895                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 19896  014C4A  0ED0               	movlw	low _ADC_AN3
 19897  014C4C  0100               	movlb	0	; () banked
 19898  014C4E  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19899  014C50  0E01               	movlw	high _ADC_AN3
 19900  014C52  0100               	movlb	0	; () banked
 19901  014C54  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19902  014C56  0E03               	movlw	3
 19903  014C58  0100               	movlb	0	; () banked
 19904  014C5A  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19905  014C5C  EC01  F0AC         	call	_ADC_Init	;wreg free
 19906                           
 19907                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 19908  014C60  0EDF               	movlw	low _ADC_AN0
 19909  014C62  0100               	movlb	0	; () banked
 19910  014C64  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19911  014C66  0E01               	movlw	high _ADC_AN0
 19912  014C68  0100               	movlb	0	; () banked
 19913  014C6A  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19914  014C6C  0EDA               	movlw	low _ADC_AN1
 19915  014C6E  0100               	movlb	0	; () banked
 19916  014C70  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19917  014C72  0E01               	movlw	high _ADC_AN1
 19918  014C74  0100               	movlb	0	; () banked
 19919  014C76  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19920  014C78  EC25  F0B2         	call	_ADC_Sequence	;wreg free
 19921                           
 19922                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 19923  014C7C  0EDA               	movlw	low _ADC_AN1
 19924  014C7E  0100               	movlb	0	; () banked
 19925  014C80  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19926  014C82  0E01               	movlw	high _ADC_AN1
 19927  014C84  0100               	movlb	0	; () banked
 19928  014C86  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19929  014C88  0ED5               	movlw	low _ADC_AN2
 19930  014C8A  0100               	movlb	0	; () banked
 19931  014C8C  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19932  014C8E  0E01               	movlw	high _ADC_AN2
 19933  014C90  0100               	movlb	0	; () banked
 19934  014C92  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19935  014C94  EC25  F0B2         	call	_ADC_Sequence	;wreg free
 19936                           
 19937                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 19938  014C98  0ED5               	movlw	low _ADC_AN2
 19939  014C9A  0100               	movlb	0	; () banked
 19940  014C9C  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19941  014C9E  0E01               	movlw	high _ADC_AN2
 19942  014CA0  0100               	movlb	0	; () banked
 19943  014CA2  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19944  014CA4  0ED0               	movlw	low _ADC_AN3
 19945  014CA6  0100               	movlb	0	; () banked
 19946  014CA8  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19947  014CAA  0E01               	movlw	high _ADC_AN3
 19948  014CAC  0100               	movlb	0	; () banked
 19949  014CAE  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19950  014CB0  EC25  F0B2         	call	_ADC_Sequence	;wreg free
 19951  014CB4  0012               	return		;funcret
 19952  014CB6                     __end_of_FunctInitADC:
 19953                           	opt stack 0
 19954                           tosu	equ	0xFFF
 19955                           tosh	equ	0xFFE
 19956                           tosl	equ	0xFFD
 19957                           pclath	equ	0xFFA
 19958                           tblptru	equ	0xFF8
 19959                           tblptrh	equ	0xFF7
 19960                           tblptrl	equ	0xFF6
 19961                           tablat	equ	0xFF5
 19962                           prodh	equ	0xFF4
 19963                           prodl	equ	0xFF3
 19964                           intcon	equ	0xFF2
 19965                           indf0	equ	0xFEF
 19966                           postinc0	equ	0xFEE
 19967                           fsr0h	equ	0xFEA
 19968                           fsr0l	equ	0xFE9
 19969                           wreg	equ	0xFE8
 19970                           indf1	equ	0xFE7
 19971                           postdec1	equ	0xFE5
 19972                           fsr1h	equ	0xFE2
 19973                           fsr1l	equ	0xFE1
 19974                           indf2	equ	0xFDF
 19975                           postinc2	equ	0xFDE
 19976                           postdec2	equ	0xFDD
 19977                           plusw2	equ	0xFDB
 19978                           fsr2h	equ	0xFDA
 19979                           fsr2l	equ	0xFD9
 19980                           status	equ	0xFD8
 19981                           
 19982 ;; *************** function _ADC_Sequence *****************
 19983 ;; Defined at:
 19984 ;;		line 101 in file "Library/ADC.c"
 19985 ;; Parameters:    Size  Location     Type
 19986 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 19987 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 19988 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 19989 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 19990 ;; Auto vars:     Size  Location     Type
 19991 ;;		None
 19992 ;; Return value:  Size  Location     Type
 19993 ;;                  1    wreg      void 
 19994 ;; Registers used:
 19995 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19996 ;; Tracked objects:
 19997 ;;		On entry : 0/0
 19998 ;;		On exit  : 0/0
 19999 ;;		Unchanged: 0/0
 20000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20005 ;;Total ram usage:        4 bytes
 20006 ;; Hardware stack levels used:    1
 20007 ;; Hardware stack levels required when called:    7
 20008 ;; This function calls:
 20009 ;;		Nothing
 20010 ;; This function is called by:
 20011 ;;		_FunctInitADC
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           	psect	text100
 20016  01644A                     __ptext100:
 20017                           	opt stack 0
 20018  01644A                     _ADC_Sequence:
 20019                           	opt stack 21
 20020                           
 20021                           ;ADC.c: 103: if(pItemA==(void*)0)
 20022                           
 20023                           ;incstack = 0
 20024  01644A  0100               	movlb	0	; () banked
 20025  01644C  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 20026  01644E  0100               	movlb	0	; () banked
 20027  016450  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 20028  016452  B4D8               	btfsc	status,2,c
 20029  016454  0012               	return	
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;ADC.c: 105: if(pItemB==(void*)0)
 20033                           
 20034                           ; BSR set to: 0
 20035                           
 20036                           ; BSR set to: 0
 20037                           ;ADC.c: 104: return;
 20038  016456  0100               	movlb	0	; () banked
 20039  016458  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 20040  01645A  0100               	movlb	0	; () banked
 20041  01645C  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 20042  01645E  B4D8               	btfsc	status,2,c
 20043  016460  0012               	return	
 20044                           
 20045                           ; BSR set to: 0
 20046                           ;ADC.c: 109: pItemA->mNext = pItemB;
 20047                           
 20048                           ; BSR set to: 0
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;ADC.c: 106: return;
 20052  016462  0100               	movlb	0	; () banked
 20053  016464  EE20 F003          	lfsr	2,3
 20054  016468  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 20055  01646A  26D9               	addwf	fsr2l,f,c
 20056  01646C  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 20057  01646E  22DA               	addwfc	fsr2h,f,c
 20058  016470  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 20059  016474  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 20060                           
 20061                           ;ADC.c: 110: pItemB->mNext = 0;
 20062  016478  0100               	movlb	0	; () banked
 20063  01647A  EE20 F003          	lfsr	2,3
 20064  01647E  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 20065  016480  26D9               	addwf	fsr2l,f,c
 20066  016482  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 20067  016484  22DA               	addwfc	fsr2h,f,c
 20068  016486  0E00               	movlw	0
 20069  016488  6EDE               	movwf	postinc2,c
 20070  01648A  0E00               	movlw	0
 20071  01648C  6EDD               	movwf	postdec2,c
 20072                           
 20073                           ; BSR set to: 0
 20074  01648E  0012               	return		;funcret
 20075  016490                     __end_of_ADC_Sequence:
 20076                           	opt stack 0
 20077                           tosu	equ	0xFFF
 20078                           tosh	equ	0xFFE
 20079                           tosl	equ	0xFFD
 20080                           pclath	equ	0xFFA
 20081                           tblptru	equ	0xFF8
 20082                           tblptrh	equ	0xFF7
 20083                           tblptrl	equ	0xFF6
 20084                           tablat	equ	0xFF5
 20085                           prodh	equ	0xFF4
 20086                           prodl	equ	0xFF3
 20087                           intcon	equ	0xFF2
 20088                           indf0	equ	0xFEF
 20089                           postinc0	equ	0xFEE
 20090                           fsr0h	equ	0xFEA
 20091                           fsr0l	equ	0xFE9
 20092                           wreg	equ	0xFE8
 20093                           indf1	equ	0xFE7
 20094                           postdec1	equ	0xFE5
 20095                           fsr1h	equ	0xFE2
 20096                           fsr1l	equ	0xFE1
 20097                           indf2	equ	0xFDF
 20098                           postinc2	equ	0xFDE
 20099                           postdec2	equ	0xFDD
 20100                           plusw2	equ	0xFDB
 20101                           fsr2h	equ	0xFDA
 20102                           fsr2l	equ	0xFD9
 20103                           status	equ	0xFD8
 20104                           
 20105 ;; *************** function _ADC_Init *****************
 20106 ;; Defined at:
 20107 ;;		line 19 in file "Library/ADC.c"
 20108 ;; Parameters:    Size  Location     Type
 20109 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 20110 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 20111 ;;  pChannel        1    6[BANK0 ] enum E6742
 20112 ;; Auto vars:     Size  Location     Type
 20113 ;;		None
 20114 ;; Return value:  Size  Location     Type
 20115 ;;                  1    wreg      void 
 20116 ;; Registers used:
 20117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20118 ;; Tracked objects:
 20119 ;;		On entry : 0/0
 20120 ;;		On exit  : 0/0
 20121 ;;		Unchanged: 0/0
 20122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20123 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20127 ;;Total ram usage:        3 bytes
 20128 ;; Hardware stack levels used:    1
 20129 ;; Hardware stack levels required when called:    9
 20130 ;; This function calls:
 20131 ;;		_ADC_Calibrate
 20132 ;;		_ADC_ClockDivision
 20133 ;;		_ADC_ConversionTime
 20134 ;;		_ADC_SetChannel
 20135 ;;		_ADC_SetupIO
 20136 ;; This function is called by:
 20137 ;;		_FunctInitADC
 20138 ;; This function uses a non-reentrant model
 20139 ;;
 20140                           
 20141                           	psect	text101
 20142  015802                     __ptext101:
 20143                           	opt stack 0
 20144  015802                     _ADC_Init:
 20145                           	opt stack 19
 20146                           
 20147                           ;ADC.c: 21: if(pInput==(void*)0)
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;incstack = 0
 20151  015802  0100               	movlb	0	; () banked
 20152  015804  5164               	movf	ADC_Init@pInput& (0+255),w,b
 20153  015806  0100               	movlb	0	; () banked
 20154  015808  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 20155  01580A  B4D8               	btfsc	status,2,c
 20156  01580C  0012               	return	
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;ADC.c: 25: lCurrent = pInput;
 20160                           
 20161                           ; BSR set to: 0
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;ADC.c: 22: return;
 20165  01580E  C064  F0EA         	movff	ADC_Init@pInput,_lCurrent
 20166  015812  C065  F0EB         	movff	ADC_Init@pInput+1,_lCurrent+1
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;ADC.c: 27: pInput->mChannel = pChannel;
 20170  015816  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 20171  01581A  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 20172  01581E  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 20173                           
 20174                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 20175  015822  0100               	movlb	0	; () banked
 20176  015824  EE20 F003          	lfsr	2,3
 20177  015828  5164               	movf	ADC_Init@pInput& (0+255),w,b
 20178  01582A  26D9               	addwf	fsr2l,f,c
 20179  01582C  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 20180  01582E  22DA               	addwfc	fsr2h,f,c
 20181  015830  0E00               	movlw	0
 20182  015832  6EDE               	movwf	postinc2,c
 20183  015834  0E00               	movlw	0
 20184  015836  6EDD               	movwf	postdec2,c
 20185                           
 20186                           ;ADC.c: 29: pInput->mValue = 0;
 20187  015838  0100               	movlb	0	; () banked
 20188  01583A  EE20 F001          	lfsr	2,1
 20189  01583E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 20190  015840  26D9               	addwf	fsr2l,f,c
 20191  015842  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 20192  015844  22DA               	addwfc	fsr2h,f,c
 20193  015846  0E00               	movlw	0
 20194  015848  6EDE               	movwf	postinc2,c
 20195  01584A  0E00               	movlw	0
 20196  01584C  6EDD               	movwf	postdec2,c
 20197                           
 20198                           ; BSR set to: 0
 20199                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 20200  01584E  0100               	movlb	0	; () banked
 20201  015850  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 20202  015852  ECB4  F0B5         	call	_ADC_SetChannel
 20203                           
 20204                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 20205  015856  9EC2               	bcf	4034,7,c	;volatile
 20206                           
 20207                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 20208  015858  9CC2               	bcf	4034,6,c	;volatile
 20209                           
 20210                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 20211  01585A  8EC1               	bsf	4033,7,c	;volatile
 20212                           
 20213                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 20214  01585C  8CC1               	bsf	4033,6,c	;volatile
 20215                           
 20216                           ;ADC.c: 43: ADC_ConversionTime(12);
 20217  01585E  0E0C               	movlw	12
 20218  015860  ECBB  F0B1         	call	_ADC_ConversionTime
 20219                           
 20220                           ;ADC.c: 47: ADC_ClockDivision(16);
 20221  015864  0E10               	movlw	16
 20222  015866  EC71  F0AA         	call	_ADC_ClockDivision
 20223                           
 20224                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 20225  01586A  0100               	movlb	0	; () banked
 20226  01586C  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 20227  01586E  ECED  F0B3         	call	_ADC_SetupIO
 20228                           
 20229                           ;ADC.c: 58: ADC_Initialised = 1;
 20230  015872  0E01               	movlw	1
 20231  015874  6E31               	movwf	_ADC_Initialised,c
 20232                           
 20233                           ;ADC.c: 61: ADC_Calibrate();
 20234  015876  EC23  F0B6         	call	_ADC_Calibrate	;wreg free
 20235  01587A  0012               	return		;funcret
 20236  01587C                     __end_of_ADC_Init:
 20237                           	opt stack 0
 20238                           tosu	equ	0xFFF
 20239                           tosh	equ	0xFFE
 20240                           tosl	equ	0xFFD
 20241                           pclath	equ	0xFFA
 20242                           tblptru	equ	0xFF8
 20243                           tblptrh	equ	0xFF7
 20244                           tblptrl	equ	0xFF6
 20245                           tablat	equ	0xFF5
 20246                           prodh	equ	0xFF4
 20247                           prodl	equ	0xFF3
 20248                           intcon	equ	0xFF2
 20249                           indf0	equ	0xFEF
 20250                           postinc0	equ	0xFEE
 20251                           fsr0h	equ	0xFEA
 20252                           fsr0l	equ	0xFE9
 20253                           wreg	equ	0xFE8
 20254                           indf1	equ	0xFE7
 20255                           postdec1	equ	0xFE5
 20256                           fsr1h	equ	0xFE2
 20257                           fsr1l	equ	0xFE1
 20258                           indf2	equ	0xFDF
 20259                           postinc2	equ	0xFDE
 20260                           postdec2	equ	0xFDD
 20261                           plusw2	equ	0xFDB
 20262                           fsr2h	equ	0xFDA
 20263                           fsr2l	equ	0xFD9
 20264                           status	equ	0xFD8
 20265                           
 20266 ;; *************** function _ADC_SetupIO *****************
 20267 ;; Defined at:
 20268 ;;		line 150 in file "Library/ADC.c"
 20269 ;; Parameters:    Size  Location     Type
 20270 ;;  pChannel        1    wreg     enum E6742
 20271 ;; Auto vars:     Size  Location     Type
 20272 ;;  pChannel        1    2[BANK0 ] enum E6742
 20273 ;;  MASK            1    3[BANK0 ] unsigned char 
 20274 ;; Return value:  Size  Location     Type
 20275 ;;                  1    wreg      void 
 20276 ;; Registers used:
 20277 ;;		wreg, status,2, status,0
 20278 ;; Tracked objects:
 20279 ;;		On entry : 0/0
 20280 ;;		On exit  : 0/0
 20281 ;;		Unchanged: 0/0
 20282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20286 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20287 ;;Total ram usage:        4 bytes
 20288 ;; Hardware stack levels used:    1
 20289 ;; Hardware stack levels required when called:    7
 20290 ;; This function calls:
 20291 ;;		Nothing
 20292 ;; This function is called by:
 20293 ;;		_ADC_Init
 20294 ;; This function uses a non-reentrant model
 20295 ;;
 20296                           
 20297                           	psect	text102
 20298  0167DA                     __ptext102:
 20299                           	opt stack 0
 20300  0167DA                     _ADC_SetupIO:
 20301                           	opt stack 20
 20302                           
 20303                           ;incstack = 0
 20304                           ;ADC_SetupIO@pChannel stored from wreg
 20305  0167DA  0100               	movlb	0	; () banked
 20306  0167DC  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 20307                           
 20308                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 20309  0167DE  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 20310  0167E2  0E01               	movlw	1
 20311  0167E4  0100               	movlb	0	; () banked
 20312  0167E6  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 20313  0167E8  0100               	movlb	0	; () banked
 20314  0167EA  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 20315  0167EC  D003               	goto	u9954
 20316  0167EE                     u9955:
 20317  0167EE  0100               	movlb	0	; () banked
 20318  0167F0  90D8               	bcf	status,0,c
 20319  0167F2  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 20320  0167F4                     u9954:
 20321  0167F4  0100               	movlb	0	; () banked
 20322  0167F6  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 20323  0167F8  D7FA               	goto	u9955
 20324  0167FA  0100               	movlb	0	; () banked
 20325  0167FC  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 20326  0167FE  0AFF               	xorlw	255
 20327  016800  0100               	movlb	0	; () banked
 20328  016802  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 20329                           
 20330                           ;ADC.c: 153: ANCON0 &= MASK;
 20331  016804  0100               	movlb	0	; () banked
 20332  016806  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 20333  016808  16C1               	andwf	4033,f,c	;volatile
 20334                           
 20335                           ; BSR set to: 0
 20336  01680A  0012               	return		;funcret
 20337  01680C                     __end_of_ADC_SetupIO:
 20338                           	opt stack 0
 20339                           tosu	equ	0xFFF
 20340                           tosh	equ	0xFFE
 20341                           tosl	equ	0xFFD
 20342                           pclath	equ	0xFFA
 20343                           tblptru	equ	0xFF8
 20344                           tblptrh	equ	0xFF7
 20345                           tblptrl	equ	0xFF6
 20346                           tablat	equ	0xFF5
 20347                           prodh	equ	0xFF4
 20348                           prodl	equ	0xFF3
 20349                           intcon	equ	0xFF2
 20350                           indf0	equ	0xFEF
 20351                           postinc0	equ	0xFEE
 20352                           fsr0h	equ	0xFEA
 20353                           fsr0l	equ	0xFE9
 20354                           wreg	equ	0xFE8
 20355                           indf1	equ	0xFE7
 20356                           postdec1	equ	0xFE5
 20357                           fsr1h	equ	0xFE2
 20358                           fsr1l	equ	0xFE1
 20359                           indf2	equ	0xFDF
 20360                           postinc2	equ	0xFDE
 20361                           postdec2	equ	0xFDD
 20362                           plusw2	equ	0xFDB
 20363                           fsr2h	equ	0xFDA
 20364                           fsr2l	equ	0xFD9
 20365                           status	equ	0xFD8
 20366                           
 20367 ;; *************** function _ADC_SetChannel *****************
 20368 ;; Defined at:
 20369 ;;		line 155 in file "Library/ADC.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;  pChannel        1    wreg     enum E6742
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;  pChannel        1    1[BANK0 ] enum E6742
 20374 ;; Return value:  Size  Location     Type
 20375 ;;                  1    wreg      void 
 20376 ;; Registers used:
 20377 ;;		wreg, status,2, status,0
 20378 ;; Tracked objects:
 20379 ;;		On entry : 0/0
 20380 ;;		On exit  : 0/0
 20381 ;;		Unchanged: 0/0
 20382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20387 ;;Total ram usage:        2 bytes
 20388 ;; Hardware stack levels used:    1
 20389 ;; Hardware stack levels required when called:    7
 20390 ;; This function calls:
 20391 ;;		Nothing
 20392 ;; This function is called by:
 20393 ;;		_ADC_Init
 20394 ;;		_ADC_Start
 20395 ;;		_ADC_ISR
 20396 ;;		_ADC_Sample
 20397 ;; This function uses a non-reentrant model
 20398 ;;
 20399                           
 20400                           	psect	text103
 20401  016B68                     __ptext103:
 20402                           	opt stack 0
 20403  016B68                     _ADC_SetChannel:
 20404                           	opt stack 20
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;incstack = 0
 20408                           ;ADC_SetChannel@pChannel stored from wreg
 20409  016B68  0100               	movlb	0	; () banked
 20410  016B6A  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 20411                           
 20412                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 20413  016B6C  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 20414  016B70  0100               	movlb	0	; () banked
 20415  016B72  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 20416  016B74  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 20417  016B76  50C2               	movf	4034,w,c	;volatile
 20418  016B78  0100               	movlb	0	; () banked
 20419  016B7A  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 20420  016B7C  0BC3               	andlw	-61
 20421  016B7E  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 20422  016B80  6EC2               	movwf	4034,c	;volatile
 20423                           
 20424                           ; BSR set to: 0
 20425  016B82  0012               	return		;funcret
 20426  016B84                     __end_of_ADC_SetChannel:
 20427                           	opt stack 0
 20428                           tosu	equ	0xFFF
 20429                           tosh	equ	0xFFE
 20430                           tosl	equ	0xFFD
 20431                           pclath	equ	0xFFA
 20432                           tblptru	equ	0xFF8
 20433                           tblptrh	equ	0xFF7
 20434                           tblptrl	equ	0xFF6
 20435                           tablat	equ	0xFF5
 20436                           prodh	equ	0xFF4
 20437                           prodl	equ	0xFF3
 20438                           intcon	equ	0xFF2
 20439                           indf0	equ	0xFEF
 20440                           postinc0	equ	0xFEE
 20441                           fsr0h	equ	0xFEA
 20442                           fsr0l	equ	0xFE9
 20443                           wreg	equ	0xFE8
 20444                           indf1	equ	0xFE7
 20445                           postdec1	equ	0xFE5
 20446                           fsr1h	equ	0xFE2
 20447                           fsr1l	equ	0xFE1
 20448                           indf2	equ	0xFDF
 20449                           postinc2	equ	0xFDE
 20450                           postdec2	equ	0xFDD
 20451                           plusw2	equ	0xFDB
 20452                           fsr2h	equ	0xFDA
 20453                           fsr2l	equ	0xFD9
 20454                           status	equ	0xFD8
 20455                           
 20456 ;; *************** function _ADC_ConversionTime *****************
 20457 ;; Defined at:
 20458 ;;		line 199 in file "Library/ADC.c"
 20459 ;; Parameters:    Size  Location     Type
 20460 ;;  pCount          1    wreg     unsigned char 
 20461 ;; Auto vars:     Size  Location     Type
 20462 ;;  pCount          1    1[BANK0 ] unsigned char 
 20463 ;; Return value:  Size  Location     Type
 20464 ;;                  1    wreg      void 
 20465 ;; Registers used:
 20466 ;;		wreg, status,2, status,0
 20467 ;; Tracked objects:
 20468 ;;		On entry : 0/0
 20469 ;;		On exit  : 0/0
 20470 ;;		Unchanged: 0/0
 20471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20476 ;;Total ram usage:        2 bytes
 20477 ;; Hardware stack levels used:    1
 20478 ;; Hardware stack levels required when called:    7
 20479 ;; This function calls:
 20480 ;;		Nothing
 20481 ;; This function is called by:
 20482 ;;		_ADC_Init
 20483 ;; This function uses a non-reentrant model
 20484 ;;
 20485                           
 20486                           	psect	text104
 20487  016376                     __ptext104:
 20488                           	opt stack 0
 20489  016376                     _ADC_ConversionTime:
 20490                           	opt stack 20
 20491                           
 20492                           ; BSR set to: 0
 20493                           ;incstack = 0
 20494                           ;ADC_ConversionTime@pCount stored from wreg
 20495  016376  0100               	movlb	0	; () banked
 20496  016378  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 20497                           
 20498                           ;ADC.c: 201: if (pCount == 10)
 20499  01637A  0E0A               	movlw	10
 20500  01637C  0100               	movlb	0	; () banked
 20501  01637E  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 20502  016380  B4D8               	btfsc	status,2,c
 20503  016382  D00A               	goto	u9920
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;ADC.c: 203: else if (pCount == 14)
 20507                           
 20508                           ; BSR set to: 0
 20509                           
 20510                           ; BSR set to: 0
 20511                           ;ADC.c: 202: pCount -= 2;
 20512  016384  0E0E               	movlw	14
 20513  016386  0100               	movlb	0	; () banked
 20514  016388  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 20515  01638A  B4D8               	btfsc	status,2,c
 20516  01638C  D005               	goto	u9920
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;ADC.c: 205: else if (pCount == 18)
 20520                           
 20521                           ; BSR set to: 0
 20522                           
 20523                           ; BSR set to: 0
 20524                           ;ADC.c: 204: pCount -= 2;
 20525  01638E  0E12               	movlw	18
 20526  016390  0100               	movlb	0	; () banked
 20527  016392  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 20528  016394  A4D8               	btfss	status,2,c
 20529  016396  D003               	goto	l1313
 20530  016398                     u9920:
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;ADC.c: 206: pCount -= 2;
 20534  016398  0E02               	movlw	2
 20535  01639A  0100               	movlb	0	; () banked
 20536  01639C  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 20537  01639E                     l1313:
 20538                           
 20539                           ; BSR set to: 0
 20540                           ;ADC.c: 208: pCount <<= 1;
 20541                           
 20542                           ; BSR set to: 0
 20543                           
 20544                           ; BSR set to: 0
 20545  01639E  0100               	movlb	0	; () banked
 20546  0163A0  90D8               	bcf	status,0,c
 20547  0163A2  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 20548                           
 20549                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 20550  0163A4  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 20551  0163A8  0100               	movlb	0	; () banked
 20552  0163AA  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 20553  0163AC  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 20554  0163AE  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 20555  0163B0  50C1               	movf	4033,w,c	;volatile
 20556  0163B2  0100               	movlb	0	; () banked
 20557  0163B4  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 20558  0163B6  0BC7               	andlw	-57
 20559  0163B8  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 20560  0163BA  6EC1               	movwf	4033,c	;volatile
 20561                           
 20562                           ; BSR set to: 0
 20563  0163BC  0012               	return		;funcret
 20564  0163BE                     __end_of_ADC_ConversionTime:
 20565                           	opt stack 0
 20566                           tosu	equ	0xFFF
 20567                           tosh	equ	0xFFE
 20568                           tosl	equ	0xFFD
 20569                           pclath	equ	0xFFA
 20570                           tblptru	equ	0xFF8
 20571                           tblptrh	equ	0xFF7
 20572                           tblptrl	equ	0xFF6
 20573                           tablat	equ	0xFF5
 20574                           prodh	equ	0xFF4
 20575                           prodl	equ	0xFF3
 20576                           intcon	equ	0xFF2
 20577                           indf0	equ	0xFEF
 20578                           postinc0	equ	0xFEE
 20579                           fsr0h	equ	0xFEA
 20580                           fsr0l	equ	0xFE9
 20581                           wreg	equ	0xFE8
 20582                           indf1	equ	0xFE7
 20583                           postdec1	equ	0xFE5
 20584                           fsr1h	equ	0xFE2
 20585                           fsr1l	equ	0xFE1
 20586                           indf2	equ	0xFDF
 20587                           postinc2	equ	0xFDE
 20588                           postdec2	equ	0xFDD
 20589                           plusw2	equ	0xFDB
 20590                           fsr2h	equ	0xFDA
 20591                           fsr2l	equ	0xFD9
 20592                           status	equ	0xFD8
 20593                           
 20594 ;; *************** function _ADC_ClockDivision *****************
 20595 ;; Defined at:
 20596 ;;		line 159 in file "Library/ADC.c"
 20597 ;; Parameters:    Size  Location     Type
 20598 ;;  pDivide         1    wreg     unsigned char 
 20599 ;; Auto vars:     Size  Location     Type
 20600 ;;  pDivide         1    0[BANK0 ] unsigned char 
 20601 ;;  unfound         1    2[BANK0 ] unsigned char 
 20602 ;;  reg             1    1[BANK0 ] unsigned char 
 20603 ;; Return value:  Size  Location     Type
 20604 ;;                  1    wreg      void 
 20605 ;; Registers used:
 20606 ;;		wreg, status,2, status,0
 20607 ;; Tracked objects:
 20608 ;;		On entry : 0/0
 20609 ;;		On exit  : 0/0
 20610 ;;		Unchanged: 0/0
 20611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20615 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20616 ;;Total ram usage:        3 bytes
 20617 ;; Hardware stack levels used:    1
 20618 ;; Hardware stack levels required when called:    7
 20619 ;; This function calls:
 20620 ;;		Nothing
 20621 ;; This function is called by:
 20622 ;;		_ADC_Init
 20623 ;; This function uses a non-reentrant model
 20624 ;;
 20625                           
 20626                           	psect	text105
 20627  0154E2                     __ptext105:
 20628                           	opt stack 0
 20629  0154E2                     _ADC_ClockDivision:
 20630                           	opt stack 20
 20631                           
 20632                           ; BSR set to: 0
 20633                           ;incstack = 0
 20634                           ;ADC_ClockDivision@pDivide stored from wreg
 20635  0154E2  0100               	movlb	0	; () banked
 20636  0154E4  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 20637                           
 20638                           ;ADC.c: 161: UINT8 reg = 0;
 20639  0154E6  0E00               	movlw	0
 20640  0154E8  0100               	movlb	0	; () banked
 20641  0154EA  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 20642                           
 20643                           ;ADC.c: 162: bool unfound = 1;
 20644  0154EC  0E01               	movlw	1
 20645  0154EE  D002               	goto	L12
 20646  0154F0                     
 20647                           ; BSR set to: 0
 20648                           ;ADC.c: 167: reg = 0;
 20649                           
 20650                           ; BSR set to: 0
 20651  0154F0  0E00               	movlw	0
 20652  0154F2  D00C               	goto	L17
 20653  0154F4                     L12:
 20654  0154F4  0100               	movlb	0	; () banked
 20655  0154F6  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 20656                           
 20657                           ;ADC.c: 169: break;
 20658  0154F8  D02D               	goto	l1296
 20659  0154FA                     
 20660                           ; BSR set to: 0
 20661                           ;ADC.c: 171: reg = 0b100;
 20662                           
 20663                           ; BSR set to: 0
 20664  0154FA  0E04               	movlw	4
 20665  0154FC  D007               	goto	L17
 20666  0154FE                     
 20667                           ; BSR set to: 0
 20668                           ;ADC.c: 175: reg = 0b001;
 20669                           
 20670                           ; BSR set to: 0
 20671  0154FE  0E01               	movlw	1
 20672  015500  D005               	goto	L17
 20673  015502                     
 20674                           ; BSR set to: 0
 20675                           ;ADC.c: 179: reg = 0b101;
 20676                           
 20677                           ; BSR set to: 0
 20678  015502  0E05               	movlw	5
 20679  015504  D003               	goto	L17
 20680  015506                     
 20681                           ; BSR set to: 0
 20682                           ;ADC.c: 183: reg = 0b010;
 20683                           
 20684                           ; BSR set to: 0
 20685  015506  0E02               	movlw	2
 20686  015508  D001               	goto	L17
 20687  01550A                     
 20688                           ; BSR set to: 0
 20689                           ;ADC.c: 187: reg = 0b110;
 20690                           
 20691                           ; BSR set to: 0
 20692  01550A  0E06               	movlw	6
 20693  01550C                     L17:
 20694  01550C  0100               	movlb	0	; () banked
 20695  01550E  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 20696                           
 20697                           ;ADC.c: 188: unfound = 0;
 20698  015510  0E00               	movlw	0
 20699  015512  D7F0               	goto	L12
 20700  015514                     
 20701                           ; BSR set to: 0
 20702                           ;ADC.c: 191: if (pDivide > 2)
 20703                           
 20704                           ; BSR set to: 0
 20705  015514  0E02               	movlw	2
 20706  015516  0100               	movlb	0	; () banked
 20707  015518  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 20708  01551A  D003               	goto	l1303
 20709                           
 20710                           ; BSR set to: 0
 20711                           ;ADC.c: 192: pDivide --;
 20712  01551C  0100               	movlb	0	; () banked
 20713  01551E  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 20714  015520  D019               	goto	l1296
 20715  015522                     l1303:
 20716                           
 20717                           ; BSR set to: 0
 20718                           ;ADC.c: 193: else
 20719                           ;ADC.c: 194: pDivide = 2;
 20720                           
 20721                           ; BSR set to: 0
 20722  015522  0E02               	movlw	2
 20723  015524  0100               	movlb	0	; () banked
 20724  015526  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 20725                           
 20726                           ; BSR set to: 0
 20727                           ;ADC.c: 195: };
 20728  015528  D015               	goto	l1296
 20729  01552A                     
 20730                           ; BSR set to: 0
 20731                           
 20732                           ; BSR set to: 0
 20733  01552A  0100               	movlb	0	; () banked
 20734  01552C  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 20735                           
 20736                           ; Switch size 1, requested type "space"
 20737                           ; Number of cases is 6, Range of values is 2 to 64
 20738                           ; switch strategies available:
 20739                           ; Name         Instructions Cycles
 20740                           ; simple_byte           19    10 (average)
 20741                           ;	Chosen strategy is simple_byte
 20742  01552E  0A02               	xorlw	2	; case 2
 20743  015530  B4D8               	btfsc	status,2,c
 20744  015532  D7DE               	goto	l1295
 20745  015534  0A06               	xorlw	6	; case 4
 20746  015536  B4D8               	btfsc	status,2,c
 20747  015538  D7E0               	goto	l1297
 20748  01553A  0A0C               	xorlw	12	; case 8
 20749  01553C  B4D8               	btfsc	status,2,c
 20750  01553E  D7DF               	goto	l1298
 20751  015540  0A18               	xorlw	24	; case 16
 20752  015542  B4D8               	btfsc	status,2,c
 20753  015544  D7DE               	goto	l1299
 20754  015546  0A30               	xorlw	48	; case 32
 20755  015548  B4D8               	btfsc	status,2,c
 20756  01554A  D7DD               	goto	l1300
 20757  01554C  0A60               	xorlw	96	; case 64
 20758  01554E  B4D8               	btfsc	status,2,c
 20759  015550  D7DC               	goto	l1301
 20760  015552  D7E0               	goto	l1302
 20761  015554                     l1296:
 20762                           
 20763                           ; BSR set to: 0
 20764                           
 20765                           ; BSR set to: 0
 20766                           
 20767                           ; BSR set to: 0
 20768  015554  0100               	movlb	0	; () banked
 20769  015556  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 20770  015558  0100               	movlb	0	; () banked
 20771  01555A  A4D8               	btfss	status,2,c
 20772  01555C  D7E6               	goto	l1294
 20773                           
 20774                           ; BSR set to: 0
 20775                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 20776                           
 20777                           ; BSR set to: 0
 20778  01555E  50C1               	movf	4033,w,c	;volatile
 20779  015560  0100               	movlb	0	; () banked
 20780  015562  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 20781  015564  0BF8               	andlw	-8
 20782  015566  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 20783  015568  6EC1               	movwf	4033,c	;volatile
 20784                           
 20785                           ; BSR set to: 0
 20786  01556A  0012               	return		;funcret
 20787  01556C                     __end_of_ADC_ClockDivision:
 20788                           	opt stack 0
 20789                           tosu	equ	0xFFF
 20790                           tosh	equ	0xFFE
 20791                           tosl	equ	0xFFD
 20792                           pclath	equ	0xFFA
 20793                           tblptru	equ	0xFF8
 20794                           tblptrh	equ	0xFF7
 20795                           tblptrl	equ	0xFF6
 20796                           tablat	equ	0xFF5
 20797                           prodh	equ	0xFF4
 20798                           prodl	equ	0xFF3
 20799                           intcon	equ	0xFF2
 20800                           indf0	equ	0xFEF
 20801                           postinc0	equ	0xFEE
 20802                           fsr0h	equ	0xFEA
 20803                           fsr0l	equ	0xFE9
 20804                           wreg	equ	0xFE8
 20805                           indf1	equ	0xFE7
 20806                           postdec1	equ	0xFE5
 20807                           fsr1h	equ	0xFE2
 20808                           fsr1l	equ	0xFE1
 20809                           indf2	equ	0xFDF
 20810                           postinc2	equ	0xFDE
 20811                           postdec2	equ	0xFDD
 20812                           plusw2	equ	0xFDB
 20813                           fsr2h	equ	0xFDA
 20814                           fsr2l	equ	0xFD9
 20815                           status	equ	0xFD8
 20816                           
 20817 ;; *************** function _ADC_Calibrate *****************
 20818 ;; Defined at:
 20819 ;;		line 63 in file "Library/ADC.c"
 20820 ;; Parameters:    Size  Location     Type
 20821 ;;		None
 20822 ;; Auto vars:     Size  Location     Type
 20823 ;;		None
 20824 ;; Return value:  Size  Location     Type
 20825 ;;                  1    wreg      void 
 20826 ;; Registers used:
 20827 ;;		cstack
 20828 ;; Tracked objects:
 20829 ;;		On entry : 0/0
 20830 ;;		On exit  : 0/0
 20831 ;;		Unchanged: 0/0
 20832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;Total ram usage:        0 bytes
 20838 ;; Hardware stack levels used:    1
 20839 ;; Hardware stack levels required when called:    8
 20840 ;; This function calls:
 20841 ;;		_ADC_Off
 20842 ;;		_ADC_On
 20843 ;; This function is called by:
 20844 ;;		_ADC_Init
 20845 ;; This function uses a non-reentrant model
 20846 ;;
 20847                           
 20848                           	psect	text106
 20849  016C46                     __ptext106:
 20850                           	opt stack 0
 20851  016C46                     _ADC_Calibrate:
 20852                           	opt stack 19
 20853                           
 20854                           ;ADC.c: 65: ADC_On();
 20855                           
 20856                           ; BSR set to: 0
 20857                           ;incstack = 0
 20858  016C46  EC9A  F0B6         	call	_ADC_On	;wreg free
 20859                           
 20860                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 20861  016C4A  8CC1               	bsf	4033,6,c	;volatile
 20862                           
 20863                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 20864  016C4C  82C2               	bsf	4034,1,c	;volatile
 20865  016C4E  B2C2               	btfsc	4034,1,c	;volatile
 20866  016C50  D7FE               	goto	l1254
 20867                           
 20868                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 20869  016C52  9CC1               	bcf	4033,6,c	;volatile
 20870                           
 20871                           ;ADC.c: 73: ADC_Off();
 20872  016C54  EC8D  F0B6         	call	_ADC_Off	;wreg free
 20873  016C58  0012               	return		;funcret
 20874  016C5A                     __end_of_ADC_Calibrate:
 20875                           	opt stack 0
 20876                           tosu	equ	0xFFF
 20877                           tosh	equ	0xFFE
 20878                           tosl	equ	0xFFD
 20879                           pclath	equ	0xFFA
 20880                           tblptru	equ	0xFF8
 20881                           tblptrh	equ	0xFF7
 20882                           tblptrl	equ	0xFF6
 20883                           tablat	equ	0xFF5
 20884                           prodh	equ	0xFF4
 20885                           prodl	equ	0xFF3
 20886                           intcon	equ	0xFF2
 20887                           indf0	equ	0xFEF
 20888                           postinc0	equ	0xFEE
 20889                           fsr0h	equ	0xFEA
 20890                           fsr0l	equ	0xFE9
 20891                           wreg	equ	0xFE8
 20892                           indf1	equ	0xFE7
 20893                           postdec1	equ	0xFE5
 20894                           fsr1h	equ	0xFE2
 20895                           fsr1l	equ	0xFE1
 20896                           indf2	equ	0xFDF
 20897                           postinc2	equ	0xFDE
 20898                           postdec2	equ	0xFDD
 20899                           plusw2	equ	0xFDB
 20900                           fsr2h	equ	0xFDA
 20901                           fsr2l	equ	0xFD9
 20902                           status	equ	0xFD8
 20903                           
 20904 ;; *************** function _ADC_On *****************
 20905 ;; Defined at:
 20906 ;;		line 85 in file "Library/ADC.c"
 20907 ;; Parameters:    Size  Location     Type
 20908 ;;		None
 20909 ;; Auto vars:     Size  Location     Type
 20910 ;;		None
 20911 ;; Return value:  Size  Location     Type
 20912 ;;                  1    wreg      void 
 20913 ;; Registers used:
 20914 ;;		None
 20915 ;; Tracked objects:
 20916 ;;		On entry : 0/0
 20917 ;;		On exit  : 0/0
 20918 ;;		Unchanged: 0/0
 20919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;Total ram usage:        0 bytes
 20925 ;; Hardware stack levels used:    1
 20926 ;; Hardware stack levels required when called:    7
 20927 ;; This function calls:
 20928 ;;		Nothing
 20929 ;; This function is called by:
 20930 ;;		_ADC_Calibrate
 20931 ;;		_ADC_Start
 20932 ;;		_ADC_ISR
 20933 ;;		_ADC_Sample
 20934 ;; This function uses a non-reentrant model
 20935 ;;
 20936                           
 20937                           	psect	text107
 20938  016D34                     __ptext107:
 20939                           	opt stack 0
 20940  016D34                     _ADC_On:
 20941                           	opt stack 20
 20942                           
 20943                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 20944                           
 20945                           ;incstack = 0
 20946  016D34  80C2               	bsf	4034,0,c	;volatile
 20947                           
 20948                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 20949  016D36  9C9E               	bcf	3998,6,c	;volatile
 20950  016D38  0012               	return		;funcret
 20951  016D3A                     __end_of_ADC_On:
 20952                           	opt stack 0
 20953                           tosu	equ	0xFFF
 20954                           tosh	equ	0xFFE
 20955                           tosl	equ	0xFFD
 20956                           pclath	equ	0xFFA
 20957                           tblptru	equ	0xFF8
 20958                           tblptrh	equ	0xFF7
 20959                           tblptrl	equ	0xFF6
 20960                           tablat	equ	0xFF5
 20961                           prodh	equ	0xFF4
 20962                           prodl	equ	0xFF3
 20963                           intcon	equ	0xFF2
 20964                           indf0	equ	0xFEF
 20965                           postinc0	equ	0xFEE
 20966                           fsr0h	equ	0xFEA
 20967                           fsr0l	equ	0xFE9
 20968                           wreg	equ	0xFE8
 20969                           indf1	equ	0xFE7
 20970                           postdec1	equ	0xFE5
 20971                           fsr1h	equ	0xFE2
 20972                           fsr1l	equ	0xFE1
 20973                           indf2	equ	0xFDF
 20974                           postinc2	equ	0xFDE
 20975                           postdec2	equ	0xFDD
 20976                           plusw2	equ	0xFDB
 20977                           fsr2h	equ	0xFDA
 20978                           fsr2l	equ	0xFD9
 20979                           status	equ	0xFD8
 20980                           
 20981 ;; *************** function _ADC_Off *****************
 20982 ;; Defined at:
 20983 ;;		line 94 in file "Library/ADC.c"
 20984 ;; Parameters:    Size  Location     Type
 20985 ;;		None
 20986 ;; Auto vars:     Size  Location     Type
 20987 ;;		None
 20988 ;; Return value:  Size  Location     Type
 20989 ;;                  1    wreg      void 
 20990 ;; Registers used:
 20991 ;;		None
 20992 ;; Tracked objects:
 20993 ;;		On entry : 0/0
 20994 ;;		On exit  : 0/0
 20995 ;;		Unchanged: 0/0
 20996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;Total ram usage:        0 bytes
 21002 ;; Hardware stack levels used:    1
 21003 ;; Hardware stack levels required when called:    7
 21004 ;; This function calls:
 21005 ;;		Nothing
 21006 ;; This function is called by:
 21007 ;;		_ADC_Calibrate
 21008 ;;		_ADC_Start
 21009 ;;		_ADC_ISR
 21010 ;;		_ADC_Sample
 21011 ;; This function uses a non-reentrant model
 21012 ;;
 21013                           
 21014                           	psect	text108
 21015  016D1A                     __ptext108:
 21016                           	opt stack 0
 21017  016D1A                     _ADC_Off:
 21018                           	opt stack 20
 21019                           
 21020                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 21021                           
 21022                           ;incstack = 0
 21023  016D1A  90C2               	bcf	4034,0,c	;volatile
 21024                           
 21025                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 21026  016D1C  9C9E               	bcf	3998,6,c	;volatile
 21027                           
 21028                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 21029  016D1E  9C9D               	bcf	3997,6,c	;volatile
 21030  016D20  0012               	return		;funcret
 21031  016D22                     __end_of_ADC_Off:
 21032                           	opt stack 0
 21033                           tosu	equ	0xFFF
 21034                           tosh	equ	0xFFE
 21035                           tosl	equ	0xFFD
 21036                           pclath	equ	0xFFA
 21037                           tblptru	equ	0xFF8
 21038                           tblptrh	equ	0xFF7
 21039                           tblptrl	equ	0xFF6
 21040                           tablat	equ	0xFF5
 21041                           prodh	equ	0xFF4
 21042                           prodl	equ	0xFF3
 21043                           intcon	equ	0xFF2
 21044                           indf0	equ	0xFEF
 21045                           postinc0	equ	0xFEE
 21046                           fsr0h	equ	0xFEA
 21047                           fsr0l	equ	0xFE9
 21048                           wreg	equ	0xFE8
 21049                           indf1	equ	0xFE7
 21050                           postdec1	equ	0xFE5
 21051                           fsr1h	equ	0xFE2
 21052                           fsr1l	equ	0xFE1
 21053                           indf2	equ	0xFDF
 21054                           postinc2	equ	0xFDE
 21055                           postdec2	equ	0xFDD
 21056                           plusw2	equ	0xFDB
 21057                           fsr2h	equ	0xFDA
 21058                           fsr2l	equ	0xFD9
 21059                           status	equ	0xFD8
 21060                           
 21061 ;; *************** function _Console_Init *****************
 21062 ;; Defined at:
 21063 ;;		line 157 in file "Library/Console.c"
 21064 ;; Parameters:    Size  Location     Type
 21065 ;;		None
 21066 ;; Auto vars:     Size  Location     Type
 21067 ;;  y               1    3[BANK0 ] unsigned char 
 21068 ;;  x               1    2[BANK0 ] unsigned char 
 21069 ;; Return value:  Size  Location     Type
 21070 ;;                  1    wreg      void 
 21071 ;; Registers used:
 21072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;Total ram usage:        4 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    7
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_initialise
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text109
 21093  01556C                     __ptext109:
 21094                           	opt stack 0
 21095  01556C                     _Console_Init:
 21096                           	opt stack 22
 21097                           
 21098                           ;Console.c: 160: lBufferX = 0;
 21099                           
 21100                           ;incstack = 0
 21101  01556C  0E00               	movlw	0
 21102  01556E  0100               	movlb	0	; () banked
 21103  015570  6FF8               	movwf	_lBufferX& (0+255),b
 21104                           
 21105                           ;Console.c: 161: lBufferY = 0;
 21106  015572  0E00               	movlw	0
 21107  015574  0100               	movlb	0	; () banked
 21108  015576  6FF7               	movwf	_lBufferY& (0+255),b
 21109                           
 21110                           ;Console.c: 163: UINT8 x, y;
 21111                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 21112  015578  0E00               	movlw	0
 21113  01557A  0100               	movlb	0	; () banked
 21114  01557C  6F62               	movwf	Console_Init@x& (0+255),b
 21115  01557E                     l14126:
 21116                           
 21117                           ; BSR set to: 0
 21118  01557E  0E13               	movlw	19
 21119  015580  0100               	movlb	0	; () banked
 21120  015582  6562               	cpfsgt	Console_Init@x& (0+255),b
 21121  015584  D001               	goto	l976
 21122  015586  0012               	return	
 21123  015588                     l976:
 21124                           
 21125                           ; BSR set to: 0
 21126                           ;Console.c: 165: {
 21127                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 21128                           
 21129                           ; BSR set to: 0
 21130  015588  0E00               	movlw	0
 21131  01558A  0100               	movlb	0	; () banked
 21132  01558C  6F63               	movwf	Console_Init@y& (0+255),b
 21133  01558E                     l14132:
 21134                           
 21135                           ; BSR set to: 0
 21136  01558E  0E0E               	movlw	14
 21137  015590  0100               	movlb	0	; () banked
 21138  015592  6563               	cpfsgt	Console_Init@y& (0+255),b
 21139  015594  D001               	goto	l978
 21140  015596  D02C               	goto	u11630
 21141  015598                     l978:
 21142                           
 21143                           ; BSR set to: 0
 21144                           ;Console.c: 167: {
 21145                           ;Console.c: 168: lBuffer[y][x] = '\0';
 21146                           
 21147                           ; BSR set to: 0
 21148  015598  0100               	movlb	0	; () banked
 21149  01559A  5163               	movf	Console_Init@y& (0+255),w,b
 21150  01559C  0D14               	mullw	20
 21151  01559E  0E7B               	movlw	low _lBuffer
 21152  0155A0  0100               	movlb	0	; () banked
 21153  0155A2  6F60               	movwf	??_Console_Init& (0+255),b
 21154  0155A4  0E02               	movlw	high _lBuffer
 21155  0155A6  0100               	movlb	0	; () banked
 21156  0155A8  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 21157  0155AA  50F3               	movf	prodl,w,c
 21158  0155AC  0100               	movlb	0	; () banked
 21159  0155AE  2760               	addwf	??_Console_Init& (0+255),f,b
 21160  0155B0  50F4               	movf	prodh,w,c
 21161  0155B2  0100               	movlb	0	; () banked
 21162  0155B4  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 21163  0155B6  0100               	movlb	0	; () banked
 21164  0155B8  5162               	movf	Console_Init@x& (0+255),w,b
 21165  0155BA  0D01               	mullw	1
 21166  0155BC  50F3               	movf	prodl,w,c
 21167  0155BE  0100               	movlb	0	; () banked
 21168  0155C0  2560               	addwf	??_Console_Init& (0+255),w,b
 21169  0155C2  6ED9               	movwf	fsr2l,c
 21170  0155C4  50F4               	movf	prodh,w,c
 21171  0155C6  0100               	movlb	0	; () banked
 21172  0155C8  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 21173  0155CA  6EDA               	movwf	fsr2h,c
 21174  0155CC  0E00               	movlw	0
 21175  0155CE  6EDF               	movwf	indf2,c
 21176                           
 21177                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 21178  0155D0  0100               	movlb	0	; () banked
 21179  0155D2  5163               	movf	Console_Init@y& (0+255),w,b
 21180  0155D4  0D02               	mullw	2
 21181  0155D6  0E00               	movlw	low _lCBuffer
 21182  0155D8  24F3               	addwf	prodl,w,c
 21183  0155DA  6ED9               	movwf	fsr2l,c
 21184  0155DC  0E02               	movlw	high _lCBuffer
 21185  0155DE  20F4               	addwfc	prodh,w,c
 21186  0155E0  6EDA               	movwf	fsr2h,c
 21187  0155E2  0EFF               	movlw	255
 21188  0155E4  6EDE               	movwf	postinc2,c
 21189  0155E6  0EFF               	movlw	255
 21190  0155E8  6EDD               	movwf	postdec2,c
 21191                           
 21192                           ; BSR set to: 0
 21193  0155EA  0100               	movlb	0	; () banked
 21194  0155EC  2B63               	incf	Console_Init@y& (0+255),f,b
 21195  0155EE  D7CF               	goto	l14132
 21196  0155F0                     u11630:
 21197                           
 21198                           ; BSR set to: 0
 21199                           
 21200                           ; BSR set to: 0
 21201  0155F0  0100               	movlb	0	; () banked
 21202  0155F2  2B62               	incf	Console_Init@x& (0+255),f,b
 21203  0155F4  D7C4               	goto	l14126
 21204  0155F6                     __end_of_Console_Init:
 21205                           	opt stack 0
 21206                           tosu	equ	0xFFF
 21207                           tosh	equ	0xFFE
 21208                           tosl	equ	0xFFD
 21209                           pclath	equ	0xFFA
 21210                           tblptru	equ	0xFF8
 21211                           tblptrh	equ	0xFF7
 21212                           tblptrl	equ	0xFF6
 21213                           tablat	equ	0xFF5
 21214                           prodh	equ	0xFF4
 21215                           prodl	equ	0xFF3
 21216                           intcon	equ	0xFF2
 21217                           indf0	equ	0xFEF
 21218                           postinc0	equ	0xFEE
 21219                           fsr0h	equ	0xFEA
 21220                           fsr0l	equ	0xFE9
 21221                           wreg	equ	0xFE8
 21222                           indf1	equ	0xFE7
 21223                           postdec1	equ	0xFE5
 21224                           fsr1h	equ	0xFE2
 21225                           fsr1l	equ	0xFE1
 21226                           indf2	equ	0xFDF
 21227                           postinc2	equ	0xFDE
 21228                           postdec2	equ	0xFDD
 21229                           plusw2	equ	0xFDB
 21230                           fsr2h	equ	0xFDA
 21231                           fsr2l	equ	0xFD9
 21232                           status	equ	0xFD8
 21233                           
 21234 ;; *************** function _getMode *****************
 21235 ;; Defined at:
 21236 ;;		line 121 in file "main.c"
 21237 ;; Parameters:    Size  Location     Type
 21238 ;;		None
 21239 ;; Auto vars:     Size  Location     Type
 21240 ;;		None
 21241 ;; Return value:  Size  Location     Type
 21242 ;;                  1    wreg      void 
 21243 ;; Registers used:
 21244 ;;		wreg, status,2, status,0
 21245 ;; Tracked objects:
 21246 ;;		On entry : 0/0
 21247 ;;		On exit  : 0/0
 21248 ;;		Unchanged: 0/0
 21249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21254 ;;Total ram usage:        2 bytes
 21255 ;; Hardware stack levels used:    1
 21256 ;; Hardware stack levels required when called:    7
 21257 ;; This function calls:
 21258 ;;		Nothing
 21259 ;; This function is called by:
 21260 ;;		_main
 21261 ;; This function uses a non-reentrant model
 21262 ;;
 21263                           
 21264                           	psect	text110
 21265  015FAC                     __ptext110:
 21266                           	opt stack 0
 21267  015FAC                     _getMode:
 21268                           	opt stack 23
 21269                           
 21270                           ;main.c: 122: switch (dip) {
 21271                           
 21272                           ; BSR set to: 0
 21273                           ;incstack = 0
 21274  015FAC  D018               	goto	l2051
 21275  015FAE                     
 21276                           ;main.c: 124: mode = 1;
 21277  015FAE  0E00               	movlw	0
 21278  015FB0  0101               	movlb	1	; () banked
 21279  015FB2  6F2A               	movwf	(_mode+1)& (0+255),b
 21280  015FB4  0E01               	movlw	1
 21281  015FB6  6F29               	movwf	_mode& (0+255),b
 21282                           
 21283                           ; BSR set to: 1
 21284                           ;main.c: 125: return;
 21285  015FB8  0012               	return	
 21286  015FBA                     
 21287                           ;main.c: 127: mode = 2;
 21288                           
 21289                           ; BSR set to: 1
 21290  015FBA  0E00               	movlw	0
 21291  015FBC  0101               	movlb	1	; () banked
 21292  015FBE  6F2A               	movwf	(_mode+1)& (0+255),b
 21293  015FC0  0E02               	movlw	2
 21294  015FC2  6F29               	movwf	_mode& (0+255),b
 21295                           
 21296                           ; BSR set to: 1
 21297                           ;main.c: 128: return;
 21298  015FC4  0012               	return	
 21299  015FC6                     
 21300                           ;main.c: 130: mode = 3;
 21301                           
 21302                           ; BSR set to: 1
 21303  015FC6  0E00               	movlw	0
 21304  015FC8  0101               	movlb	1	; () banked
 21305  015FCA  6F2A               	movwf	(_mode+1)& (0+255),b
 21306  015FCC  0E03               	movlw	3
 21307  015FCE  6F29               	movwf	_mode& (0+255),b
 21308                           
 21309                           ; BSR set to: 1
 21310                           ;main.c: 131: return;
 21311  015FD0  0012               	return	
 21312  015FD2                     
 21313                           ;main.c: 133: mode = 0;
 21314                           
 21315                           ; BSR set to: 1
 21316  015FD2  0E00               	movlw	0
 21317  015FD4  0101               	movlb	1	; () banked
 21318  015FD6  6F2A               	movwf	(_mode+1)& (0+255),b
 21319  015FD8  0E00               	movlw	0
 21320  015FDA  6F29               	movwf	_mode& (0+255),b
 21321                           
 21322                           ; BSR set to: 1
 21323                           ;main.c: 135: }
 21324                           
 21325                           ; BSR set to: 1
 21326                           ;main.c: 134: return;
 21327  015FDC  0012               	return	
 21328  015FDE                     l2051:
 21329                           
 21330                           ; BSR set to: 1
 21331  015FDE  C127  F060         	movff	_dip,??_getMode
 21332  015FE2  C128  F061         	movff	_dip+1,??_getMode+1
 21333                           
 21334                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21335                           ; Switch size 1, requested type "space"
 21336                           ; Number of cases is 1, Range of values is 0 to 0
 21337                           ; switch strategies available:
 21338                           ; Name         Instructions Cycles
 21339                           ; simple_byte            4     3 (average)
 21340                           ;	Chosen strategy is simple_byte
 21341  015FE6  0100               	movlb	0	; () banked
 21342  015FE8  5161               	movf	(??_getMode+1)& (0+255),w,b
 21343  015FEA  0A00               	xorlw	0	; case 0
 21344  015FEC  A4D8               	btfss	status,2,c
 21345  015FEE  D7F1               	goto	l2056
 21346                           
 21347                           ; BSR set to: 0
 21348                           ; Switch size 1, requested type "space"
 21349                           ; Number of cases is 3, Range of values is 1 to 4
 21350                           ; switch strategies available:
 21351                           ; Name         Instructions Cycles
 21352                           ; simple_byte           10     6 (average)
 21353                           ;	Chosen strategy is simple_byte
 21354  015FF0  0100               	movlb	0	; () banked
 21355  015FF2  5160               	movf	??_getMode& (0+255),w,b
 21356  015FF4  0A01               	xorlw	1	; case 1
 21357  015FF6  B4D8               	btfsc	status,2,c
 21358  015FF8  D7DA               	goto	l2052
 21359  015FFA  0A03               	xorlw	3	; case 2
 21360  015FFC  B4D8               	btfsc	status,2,c
 21361  015FFE  D7DD               	goto	l2054
 21362  016000  0A06               	xorlw	6	; case 4
 21363  016002  B4D8               	btfsc	status,2,c
 21364  016004  D7E0               	goto	l2055
 21365  016006  D7E5               	goto	l2056
 21366  016008                     __end_of_getMode:
 21367                           	opt stack 0
 21368                           tosu	equ	0xFFF
 21369                           tosh	equ	0xFFE
 21370                           tosl	equ	0xFFD
 21371                           pclath	equ	0xFFA
 21372                           tblptru	equ	0xFF8
 21373                           tblptrh	equ	0xFF7
 21374                           tblptrl	equ	0xFF6
 21375                           tablat	equ	0xFF5
 21376                           prodh	equ	0xFF4
 21377                           prodl	equ	0xFF3
 21378                           intcon	equ	0xFF2
 21379                           indf0	equ	0xFEF
 21380                           postinc0	equ	0xFEE
 21381                           fsr0h	equ	0xFEA
 21382                           fsr0l	equ	0xFE9
 21383                           wreg	equ	0xFE8
 21384                           indf1	equ	0xFE7
 21385                           postdec1	equ	0xFE5
 21386                           fsr1h	equ	0xFE2
 21387                           fsr1l	equ	0xFE1
 21388                           indf2	equ	0xFDF
 21389                           postinc2	equ	0xFDE
 21390                           postdec2	equ	0xFDD
 21391                           plusw2	equ	0xFDB
 21392                           fsr2h	equ	0xFDA
 21393                           fsr2l	equ	0xFD9
 21394                           status	equ	0xFD8
 21395                           
 21396 ;; *************** function _displayStepMode *****************
 21397 ;; Defined at:
 21398 ;;		line 183 in file "main.c"
 21399 ;; Parameters:    Size  Location     Type
 21400 ;;		None
 21401 ;; Auto vars:     Size  Location     Type
 21402 ;;		None
 21403 ;; Return value:  Size  Location     Type
 21404 ;;                  1    wreg      void 
 21405 ;; Registers used:
 21406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21407 ;; Tracked objects:
 21408 ;;		On entry : 0/0
 21409 ;;		On exit  : 0/0
 21410 ;;		Unchanged: 0/0
 21411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21416 ;;Total ram usage:        0 bytes
 21417 ;; Hardware stack levels used:    1
 21418 ;; Hardware stack levels required when called:   13
 21419 ;; This function calls:
 21420 ;;		_printf
 21421 ;; This function is called by:
 21422 ;;		_main
 21423 ;; This function uses a non-reentrant model
 21424 ;;
 21425                           
 21426                           	psect	text111
 21427  0155F6                     __ptext111:
 21428                           	opt stack 0
 21429  0155F6                     _displayStepMode:
 21430                           	opt stack 17
 21431                           
 21432                           ;main.c: 187: printf("Current Mode:\n Step Mode\n");
 21433                           
 21434                           ;incstack = 0
 21435  0155F6  0E62               	movlw	low STR_7
 21436  0155F8  0100               	movlb	0	; () banked
 21437  0155FA  6F7B               	movwf	printf@f& (0+255),b
 21438  0155FC  0EFF               	movlw	high STR_7
 21439  0155FE  0100               	movlb	0	; () banked
 21440  015600  6F7C               	movwf	(printf@f+1)& (0+255),b
 21441  015602  EC78  F096         	call	_printf	;wreg free
 21442                           
 21443                           ;main.c: 188: printf("Steps: %d\n", steps);
 21444  015606  0EEC               	movlw	low STR_8
 21445  015608  0100               	movlb	0	; () banked
 21446  01560A  6F7B               	movwf	printf@f& (0+255),b
 21447  01560C  0EFF               	movlw	high STR_8
 21448  01560E  0100               	movlb	0	; () banked
 21449  015610  6F7C               	movwf	(printf@f+1)& (0+255),b
 21450  015612  C0E0  F07D         	movff	_steps,?_printf+2
 21451  015616  C0E1  F07E         	movff	_steps+1,?_printf+3
 21452  01561A  EC78  F096         	call	_printf	;wreg free
 21453                           
 21454                           ;main.c: 189: printf("Remaining Steps: %d\n\n", remainingSteps);
 21455  01561E  0EAB               	movlw	low STR_9
 21456  015620  0100               	movlb	0	; () banked
 21457  015622  6F7B               	movwf	printf@f& (0+255),b
 21458  015624  0EFF               	movlw	high STR_9
 21459  015626  0100               	movlb	0	; () banked
 21460  015628  6F7C               	movwf	(printf@f+1)& (0+255),b
 21461  01562A  C121  F07D         	movff	_remainingSteps,?_printf+2
 21462  01562E  C122  F07E         	movff	_remainingSteps+1,?_printf+3
 21463  015632  EC78  F096         	call	_printf	;wreg free
 21464                           
 21465                           ;main.c: 190: if (leftState == 1 && steps > 0) {
 21466  015636  0100               	movlb	0	; () banked
 21467  015638  05EF               	decf	_leftState& (0+255),w,b
 21468  01563A  A4D8               	btfss	status,2,c
 21469  01563C  D00F               	goto	l2075
 21470                           
 21471                           ; BSR set to: 0
 21472  01563E  0100               	movlb	0	; () banked
 21473  015640  BFE1               	btfsc	(_steps+1)& (0+255),7,b
 21474  015642  D00C               	goto	l2075
 21475  015644  0100               	movlb	0	; () banked
 21476  015646  51E1               	movf	(_steps+1)& (0+255),w,b
 21477  015648  E104               	bnz	u12490
 21478  01564A  0100               	movlb	0	; () banked
 21479  01564C  05E0               	decf	_steps& (0+255),w,b
 21480  01564E  A0D8               	btfss	status,0,c
 21481  015650  D005               	goto	l2075
 21482  015652                     u12490:
 21483                           
 21484                           ; BSR set to: 0
 21485                           ;main.c: 191: steps--;
 21486  015652  0100               	movlb	0	; () banked
 21487  015654  07E0               	decf	_steps& (0+255),f,b
 21488  015656  A0D8               	btfss	status,0,c
 21489  015658  07E1               	decf	(_steps+1)& (0+255),f,b
 21490                           
 21491                           ;main.c: 192: } else if (rightState) {
 21492  01565A  0012               	return	
 21493  01565C                     l2075:
 21494                           
 21495                           ; BSR set to: 0
 21496                           
 21497                           ; BSR set to: 0
 21498  01565C  0100               	movlb	0	; () banked
 21499  01565E  51EE               	movf	_rightState& (0+255),w,b
 21500  015660  B4D8               	btfsc	status,2,c
 21501  015662  D004               	goto	l2077
 21502                           
 21503                           ; BSR set to: 0
 21504                           ;main.c: 193: steps++;
 21505  015664  0100               	movlb	0	; () banked
 21506  015666  4BE0               	infsnz	_steps& (0+255),f,b
 21507  015668  2BE1               	incf	(_steps+1)& (0+255),f,b
 21508                           
 21509                           ;main.c: 194: } else if (upState) {
 21510  01566A  0012               	return	
 21511  01566C                     l2077:
 21512                           
 21513                           ; BSR set to: 0
 21514                           
 21515                           ; BSR set to: 0
 21516  01566C  0100               	movlb	0	; () banked
 21517  01566E  51F1               	movf	_upState& (0+255),w,b
 21518  015670  B4D8               	btfsc	status,2,c
 21519  015672  0012               	return	
 21520                           
 21521                           ; BSR set to: 0
 21522                           ;main.c: 195: steps = 0;
 21523  015674  0E00               	movlw	0
 21524  015676  0100               	movlb	0	; () banked
 21525  015678  6FE1               	movwf	(_steps+1)& (0+255),b
 21526  01567A  0E00               	movlw	0
 21527  01567C  6FE0               	movwf	_steps& (0+255),b
 21528                           
 21529                           ; BSR set to: 0
 21530                           
 21531                           ; BSR set to: 0
 21532  01567E  0012               	return	
 21533  015680                     __end_of_displayStepMode:
 21534                           	opt stack 0
 21535                           tosu	equ	0xFFF
 21536                           tosh	equ	0xFFE
 21537                           tosl	equ	0xFFD
 21538                           pclath	equ	0xFFA
 21539                           tblptru	equ	0xFF8
 21540                           tblptrh	equ	0xFF7
 21541                           tblptrl	equ	0xFF6
 21542                           tablat	equ	0xFF5
 21543                           prodh	equ	0xFF4
 21544                           prodl	equ	0xFF3
 21545                           intcon	equ	0xFF2
 21546                           indf0	equ	0xFEF
 21547                           postinc0	equ	0xFEE
 21548                           fsr0h	equ	0xFEA
 21549                           fsr0l	equ	0xFE9
 21550                           wreg	equ	0xFE8
 21551                           indf1	equ	0xFE7
 21552                           postdec1	equ	0xFE5
 21553                           fsr1h	equ	0xFE2
 21554                           fsr1l	equ	0xFE1
 21555                           indf2	equ	0xFDF
 21556                           postinc2	equ	0xFDE
 21557                           postdec2	equ	0xFDD
 21558                           plusw2	equ	0xFDB
 21559                           fsr2h	equ	0xFDA
 21560                           fsr2l	equ	0xFD9
 21561                           status	equ	0xFD8
 21562                           
 21563 ;; *************** function _displaySID *****************
 21564 ;; Defined at:
 21565 ;;		line 140 in file "main.c"
 21566 ;; Parameters:    Size  Location     Type
 21567 ;;		None
 21568 ;; Auto vars:     Size  Location     Type
 21569 ;;		None
 21570 ;; Return value:  Size  Location     Type
 21571 ;;                  1    wreg      void 
 21572 ;; Registers used:
 21573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21574 ;; Tracked objects:
 21575 ;;		On entry : 0/0
 21576 ;;		On exit  : 0/0
 21577 ;;		Unchanged: 0/0
 21578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21583 ;;Total ram usage:        0 bytes
 21584 ;; Hardware stack levels used:    1
 21585 ;; Hardware stack levels required when called:   13
 21586 ;; This function calls:
 21587 ;;		_Console_SetForecolour
 21588 ;;		_printf
 21589 ;; This function is called by:
 21590 ;;		_main
 21591 ;; This function uses a non-reentrant model
 21592 ;;
 21593                           
 21594                           	psect	text112
 21595  016A5A                     __ptext112:
 21596                           	opt stack 0
 21597  016A5A                     _displaySID:
 21598                           	opt stack 17
 21599                           
 21600                           ;main.c: 141: Console_SetForecolour(0x07E0);
 21601                           
 21602                           ; BSR set to: 0
 21603                           ;incstack = 0
 21604  016A5A  0E07               	movlw	7
 21605  016A5C  0100               	movlb	0	; () banked
 21606  016A5E  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 21607  016A60  0EE0               	movlw	224
 21608  016A62  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
 21609  016A64  EC84  F0B6         	call	_Console_SetForecolour	;wreg free
 21610                           
 21611                           ;main.c: 142: printf("Jamin Early 99133391\n\n");
 21612  016A68  0E94               	movlw	low STR_1
 21613  016A6A  0100               	movlb	0	; () banked
 21614  016A6C  6F7B               	movwf	printf@f& (0+255),b
 21615  016A6E  0EFF               	movlw	high STR_1
 21616  016A70  0100               	movlb	0	; () banked
 21617  016A72  6F7C               	movwf	(printf@f+1)& (0+255),b
 21618  016A74  EC78  F096         	call	_printf	;wreg free
 21619  016A78  0012               	return		;funcret
 21620  016A7A                     __end_of_displaySID:
 21621                           	opt stack 0
 21622                           tosu	equ	0xFFF
 21623                           tosh	equ	0xFFE
 21624                           tosl	equ	0xFFD
 21625                           pclath	equ	0xFFA
 21626                           tblptru	equ	0xFF8
 21627                           tblptrh	equ	0xFF7
 21628                           tblptrl	equ	0xFF6
 21629                           tablat	equ	0xFF5
 21630                           prodh	equ	0xFF4
 21631                           prodl	equ	0xFF3
 21632                           intcon	equ	0xFF2
 21633                           indf0	equ	0xFEF
 21634                           postinc0	equ	0xFEE
 21635                           fsr0h	equ	0xFEA
 21636                           fsr0l	equ	0xFE9
 21637                           wreg	equ	0xFE8
 21638                           indf1	equ	0xFE7
 21639                           postdec1	equ	0xFE5
 21640                           fsr1h	equ	0xFE2
 21641                           fsr1l	equ	0xFE1
 21642                           indf2	equ	0xFDF
 21643                           postinc2	equ	0xFDE
 21644                           postdec2	equ	0xFDD
 21645                           plusw2	equ	0xFDB
 21646                           fsr2h	equ	0xFDA
 21647                           fsr2l	equ	0xFD9
 21648                           status	equ	0xFD8
 21649                           
 21650 ;; *************** function _Console_SetForecolour *****************
 21651 ;; Defined at:
 21652 ;;		line 286 in file "Library/Console.c"
 21653 ;; Parameters:    Size  Location     Type
 21654 ;;  pColour         2    0[BANK0 ] unsigned short 
 21655 ;; Auto vars:     Size  Location     Type
 21656 ;;		None
 21657 ;; Return value:  Size  Location     Type
 21658 ;;                  1    wreg      void 
 21659 ;; Registers used:
 21660 ;;		None
 21661 ;; Tracked objects:
 21662 ;;		On entry : 0/0
 21663 ;;		On exit  : 0/0
 21664 ;;		Unchanged: 0/0
 21665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21666 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;Total ram usage:        2 bytes
 21671 ;; Hardware stack levels used:    1
 21672 ;; Hardware stack levels required when called:    7
 21673 ;; This function calls:
 21674 ;;		Nothing
 21675 ;; This function is called by:
 21676 ;;		_displaySID
 21677 ;;		_main
 21678 ;; This function uses a non-reentrant model
 21679 ;;
 21680                           
 21681                           	psect	text113
 21682  016D08                     __ptext113:
 21683                           	opt stack 0
 21684  016D08                     _Console_SetForecolour:
 21685                           	opt stack 22
 21686                           
 21687                           ;Console.c: 289: gForecolour = pColour;
 21688                           
 21689                           ;incstack = 0
 21690  016D08  C060  F0FA         	movff	Console_SetForecolour@pColour,_gForecolour
 21691  016D0C  C061  F0FB         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 21692  016D10  0012               	return		;funcret
 21693  016D12                     __end_of_Console_SetForecolour:
 21694                           	opt stack 0
 21695                           tosu	equ	0xFFF
 21696                           tosh	equ	0xFFE
 21697                           tosl	equ	0xFFD
 21698                           pclath	equ	0xFFA
 21699                           tblptru	equ	0xFF8
 21700                           tblptrh	equ	0xFF7
 21701                           tblptrl	equ	0xFF6
 21702                           tablat	equ	0xFF5
 21703                           prodh	equ	0xFF4
 21704                           prodl	equ	0xFF3
 21705                           intcon	equ	0xFF2
 21706                           indf0	equ	0xFEF
 21707                           postinc0	equ	0xFEE
 21708                           fsr0h	equ	0xFEA
 21709                           fsr0l	equ	0xFE9
 21710                           wreg	equ	0xFE8
 21711                           indf1	equ	0xFE7
 21712                           postdec1	equ	0xFE5
 21713                           fsr1h	equ	0xFE2
 21714                           fsr1l	equ	0xFE1
 21715                           indf2	equ	0xFDF
 21716                           postinc2	equ	0xFDE
 21717                           postdec2	equ	0xFDD
 21718                           plusw2	equ	0xFDB
 21719                           fsr2h	equ	0xFDA
 21720                           fsr2l	equ	0xFD9
 21721                           status	equ	0xFD8
 21722                           
 21723 ;; *************** function _displayPositionMode *****************
 21724 ;; Defined at:
 21725 ;;		line 201 in file "main.c"
 21726 ;; Parameters:    Size  Location     Type
 21727 ;;		None
 21728 ;; Auto vars:     Size  Location     Type
 21729 ;;  angleDegrees    2   83[BANK0 ] int 
 21730 ;; Return value:  Size  Location     Type
 21731 ;;                  1    wreg      void 
 21732 ;; Registers used:
 21733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21734 ;; Tracked objects:
 21735 ;;		On entry : 0/0
 21736 ;;		On exit  : 0/0
 21737 ;;		Unchanged: 0/0
 21738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21743 ;;Total ram usage:        2 bytes
 21744 ;; Hardware stack levels used:    1
 21745 ;; Hardware stack levels required when called:   13
 21746 ;; This function calls:
 21747 ;;		___awdiv
 21748 ;;		___flge
 21749 ;;		___flmul
 21750 ;;		___fltol
 21751 ;;		___wmul
 21752 ;;		___xxtofl
 21753 ;;		_printf
 21754 ;; This function is called by:
 21755 ;;		_main
 21756 ;; This function uses a non-reentrant model
 21757 ;;
 21758                           
 21759                           	psect	text114
 21760  0138B4                     __ptext114:
 21761                           	opt stack 0
 21762  0138B4                     _displayPositionMode:
 21763                           	opt stack 17
 21764                           
 21765                           ;main.c: 202: angle = ((IRDistance - 17) * (200) / (117 - 17));
 21766                           
 21767                           ;incstack = 0
 21768  0138B4  0E00               	movlw	0
 21769  0138B6  0100               	movlb	0	; () banked
 21770  0138B8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 21771  0138BA  0E64               	movlw	100
 21772  0138BC  6F68               	movwf	___awdiv@divisor& (0+255),b
 21773  0138BE  0EEF               	movlw	239
 21774  0138C0  0101               	movlb	1	; () banked
 21775  0138C2  2525               	addwf	_IRDistance& (0+255),w,b
 21776  0138C4  0100               	movlb	0	; () banked
 21777  0138C6  6F60               	movwf	___wmul@multiplier& (0+255),b
 21778  0138C8  0EFF               	movlw	255
 21779  0138CA  0101               	movlb	1	; () banked
 21780  0138CC  2126               	addwfc	(_IRDistance+1)& (0+255),w,b
 21781  0138CE  0100               	movlb	0	; () banked
 21782  0138D0  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 21783  0138D2  0E00               	movlw	0
 21784  0138D4  0100               	movlb	0	; () banked
 21785  0138D6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21786  0138D8  0EC8               	movlw	200
 21787  0138DA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21788  0138DC  EC9D  F0B3         	call	___wmul	;wreg free
 21789  0138E0  C060  F066         	movff	?___wmul,___awdiv@dividend
 21790  0138E4  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
 21791  0138E8  ECDA  F0A3         	call	___awdiv	;wreg free
 21792  0138EC  0100               	movlb	0	; () banked
 21793  0138EE  C066  F06E         	movff	?___awdiv,___xxtofl@val
 21794  0138F2  0100               	movlb	0	; () banked
 21795  0138F4  C067  F06F         	movff	?___awdiv+1,___xxtofl@val+1
 21796  0138F8  0100               	movlb	0	; () banked
 21797  0138FA  0E00               	movlw	0
 21798  0138FC  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21799  0138FE  0EFF               	movlw	-1
 21800  013900  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
 21801  013902  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
 21802  013904  0E01               	movlw	1
 21803  013906  EC47  F092         	call	___xxtofl
 21804  01390A  C06E  F0D6         	movff	?___xxtofl,_angle
 21805  01390E  C06F  F0D7         	movff	?___xxtofl+1,_angle+1
 21806  013912  C070  F0D8         	movff	?___xxtofl+2,_angle+2
 21807  013916  C071  F0D9         	movff	?___xxtofl+3,_angle+3
 21808                           
 21809                           ;main.c: 203: if (angle >= 180) {
 21810  01391A  C0D6  F060         	movff	_angle,___flge@ff1
 21811  01391E  C0D7  F061         	movff	_angle+1,___flge@ff1+1
 21812  013922  C0D8  F062         	movff	_angle+2,___flge@ff1+2
 21813  013926  C0D9  F063         	movff	_angle+3,___flge@ff1+3
 21814  01392A  0E00               	movlw	0
 21815  01392C  0100               	movlb	0	; () banked
 21816  01392E  6F64               	movwf	___flge@ff2& (0+255),b
 21817  013930  0E00               	movlw	0
 21818  013932  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 21819  013934  0E34               	movlw	52
 21820  013936  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 21821  013938  0E43               	movlw	67
 21822  01393A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 21823  01393C  EC41  F097         	call	___flge	;wreg free
 21824  013940  0100               	movlb	0	; () banked
 21825  013942  A0D8               	btfss	status,0,c
 21826  013944  D009               	goto	l2083
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;main.c: 204: angle = 200;
 21830  013946  0E00               	movlw	0
 21831  013948  0100               	movlb	0	; () banked
 21832  01394A  6FD6               	movwf	_angle& (0+255),b
 21833  01394C  0E00               	movlw	0
 21834  01394E  6FD7               	movwf	(_angle+1)& (0+255),b
 21835  013950  0E48               	movlw	72
 21836  013952  6FD8               	movwf	(_angle+2)& (0+255),b
 21837  013954  0E43               	movlw	67
 21838  013956  6FD9               	movwf	(_angle+3)& (0+255),b
 21839  013958                     l2083:
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;main.c: 205: }
 21843                           ;main.c: 206: if (angle < 0) {
 21844                           
 21845                           ; BSR set to: 0
 21846  013958  0100               	movlb	0	; () banked
 21847  01395A  AFD9               	btfss	(_angle+3)& (0+255),7,b
 21848  01395C  D009               	goto	l2084
 21849                           
 21850                           ; BSR set to: 0
 21851                           ;main.c: 207: angle = 200;
 21852  01395E  0E00               	movlw	0
 21853  013960  0100               	movlb	0	; () banked
 21854  013962  6FD6               	movwf	_angle& (0+255),b
 21855  013964  0E00               	movlw	0
 21856  013966  6FD7               	movwf	(_angle+1)& (0+255),b
 21857  013968  0E48               	movlw	72
 21858  01396A  6FD8               	movwf	(_angle+2)& (0+255),b
 21859  01396C  0E43               	movlw	67
 21860  01396E  6FD9               	movwf	(_angle+3)& (0+255),b
 21861  013970                     l2084:
 21862                           
 21863                           ; BSR set to: 0
 21864                           ;main.c: 208: }
 21865                           ;main.c: 209: printf("Current Mode:\n Position Mode\n\n");
 21866                           
 21867                           ; BSR set to: 0
 21868  013970  0E29               	movlw	low STR_10
 21869  013972  0100               	movlb	0	; () banked
 21870  013974  6F7B               	movwf	printf@f& (0+255),b
 21871  013976  0EFF               	movlw	high STR_10
 21872  013978  0100               	movlb	0	; () banked
 21873  01397A  6F7C               	movwf	(printf@f+1)& (0+255),b
 21874  01397C  EC78  F096         	call	_printf	;wreg free
 21875                           
 21876                           ;main.c: 210: int angleDegrees = angle * 1.8;
 21877  013980  0E66               	movlw	102
 21878  013982  0100               	movlb	0	; () banked
 21879  013984  6F80               	movwf	___flmul@a& (0+255),b
 21880  013986  0E66               	movlw	102
 21881  013988  6F81               	movwf	(___flmul@a+1)& (0+255),b
 21882  01398A  0EE6               	movlw	230
 21883  01398C  6F82               	movwf	(___flmul@a+2)& (0+255),b
 21884  01398E  0E3F               	movlw	63
 21885  013990  6F83               	movwf	(___flmul@a+3)& (0+255),b
 21886  013992  C0D6  F07C         	movff	_angle,___flmul@b
 21887  013996  C0D7  F07D         	movff	_angle+1,___flmul@b+1
 21888  01399A  C0D8  F07E         	movff	_angle+2,___flmul@b+2
 21889  01399E  C0D9  F07F         	movff	_angle+3,___flmul@b+3
 21890  0139A2  EC54  F082         	call	___flmul	;wreg free
 21891  0139A6  C07C  F0A9         	movff	?___flmul,___fltol@f1
 21892  0139AA  C07D  F0AA         	movff	?___flmul+1,___fltol@f1+1
 21893  0139AE  C07E  F0AB         	movff	?___flmul+2,___fltol@f1+2
 21894  0139B2  C07F  F0AC         	movff	?___flmul+3,___fltol@f1+3
 21895  0139B6  EC31  F09F         	call	___fltol	;wreg free
 21896  0139BA  C0A9  F0B3         	movff	?___fltol,displayPositionMode@angleDegrees
 21897  0139BE  C0AA  F0B4         	movff	?___fltol+1,displayPositionMode@angleDegrees+1
 21898                           
 21899                           ;main.c: 211: printf("Target Angle:\n %d \n", angleDegrees);
 21900  0139C2  0EC1               	movlw	low STR_11
 21901  0139C4  0100               	movlb	0	; () banked
 21902  0139C6  6F7B               	movwf	printf@f& (0+255),b
 21903  0139C8  0EFF               	movlw	high STR_11
 21904  0139CA  0100               	movlb	0	; () banked
 21905  0139CC  6F7C               	movwf	(printf@f+1)& (0+255),b
 21906  0139CE  C0B3  F07D         	movff	displayPositionMode@angleDegrees,?_printf+2
 21907  0139D2  C0B4  F07E         	movff	displayPositionMode@angleDegrees+1,?_printf+3
 21908  0139D6  EC78  F096         	call	_printf	;wreg free
 21909  0139DA  0012               	return		;funcret
 21910  0139DC                     __end_of_displayPositionMode:
 21911                           	opt stack 0
 21912                           tosu	equ	0xFFF
 21913                           tosh	equ	0xFFE
 21914                           tosl	equ	0xFFD
 21915                           pclath	equ	0xFFA
 21916                           tblptru	equ	0xFF8
 21917                           tblptrh	equ	0xFF7
 21918                           tblptrl	equ	0xFF6
 21919                           tablat	equ	0xFF5
 21920                           prodh	equ	0xFF4
 21921                           prodl	equ	0xFF3
 21922                           intcon	equ	0xFF2
 21923                           indf0	equ	0xFEF
 21924                           postinc0	equ	0xFEE
 21925                           fsr0h	equ	0xFEA
 21926                           fsr0l	equ	0xFE9
 21927                           wreg	equ	0xFE8
 21928                           indf1	equ	0xFE7
 21929                           postdec1	equ	0xFE5
 21930                           fsr1h	equ	0xFE2
 21931                           fsr1l	equ	0xFE1
 21932                           indf2	equ	0xFDF
 21933                           postinc2	equ	0xFDE
 21934                           postdec2	equ	0xFDD
 21935                           plusw2	equ	0xFDB
 21936                           fsr2h	equ	0xFDA
 21937                           fsr2l	equ	0xFD9
 21938                           status	equ	0xFD8
 21939                           
 21940 ;; *************** function ___fltol *****************
 21941 ;; Defined at:
 21942 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 21943 ;; Parameters:    Size  Location     Type
 21944 ;;  f1              4   73[BANK0 ] void 
 21945 ;; Auto vars:     Size  Location     Type
 21946 ;;  exp1            1   82[BANK0 ] unsigned char 
 21947 ;;  sign1           1   81[BANK0 ] unsigned char 
 21948 ;; Return value:  Size  Location     Type
 21949 ;;                  4   73[BANK0 ] long 
 21950 ;; Registers used:
 21951 ;;		wreg, status,2, status,0
 21952 ;; Tracked objects:
 21953 ;;		On entry : 0/0
 21954 ;;		On exit  : 0/0
 21955 ;;		Unchanged: 0/0
 21956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21957 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21959 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21960 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21961 ;;Total ram usage:       10 bytes
 21962 ;; Hardware stack levels used:    1
 21963 ;; Hardware stack levels required when called:    7
 21964 ;; This function calls:
 21965 ;;		Nothing
 21966 ;; This function is called by:
 21967 ;;		_displayPositionMode
 21968 ;;		_positionMode
 21969 ;;		_main
 21970 ;;		_pow
 21971 ;;		_exp
 21972 ;;		_floor
 21973 ;; This function uses a non-reentrant model
 21974 ;;
 21975                           
 21976                           	psect	text115
 21977  013E62                     __ptext115:
 21978                           	opt stack 0
 21979  013E62                     ___fltol:
 21980                           	opt stack 20
 21981                           
 21982                           ;incstack = 0
 21983  013E62  0100               	movlb	0	; () banked
 21984  013E64  35AB               	rlcf	(___fltol@f1+2)& (0+255),w,b
 21985  013E66  35AC               	rlcf	(___fltol@f1+3)& (0+255),w,b
 21986  013E68  0100               	movlb	0	; () banked
 21987  013E6A  6FB2               	movwf	___fltol@exp1& (0+255),b
 21988  013E6C  0100               	movlb	0	; () banked
 21989  013E6E  51B2               	movf	___fltol@exp1& (0+255),w,b
 21990  013E70  A4D8               	btfss	status,2,c
 21991  013E72  D00A               	goto	l2387
 21992                           
 21993                           ; BSR set to: 0
 21994  013E74  0E00               	movlw	0
 21995  013E76  0100               	movlb	0	; () banked
 21996  013E78  6FA9               	movwf	?___fltol& (0+255),b
 21997  013E7A  0E00               	movlw	0
 21998  013E7C  6FAA               	movwf	(?___fltol+1)& (0+255),b
 21999  013E7E  0E00               	movlw	0
 22000  013E80  6FAB               	movwf	(?___fltol+2)& (0+255),b
 22001  013E82  0E00               	movlw	0
 22002  013E84  6FAC               	movwf	(?___fltol+3)& (0+255),b
 22003                           
 22004                           ; BSR set to: 0
 22005  013E86  0012               	return	
 22006  013E88                     l2387:
 22007                           
 22008                           ; BSR set to: 0
 22009                           
 22010                           ; BSR set to: 0
 22011  013E88  C0A9  F0AD         	movff	___fltol@f1,??___fltol
 22012  013E8C  C0AA  F0AE         	movff	___fltol@f1+1,??___fltol+1
 22013  013E90  C0AB  F0AF         	movff	___fltol@f1+2,??___fltol+2
 22014  013E94  C0AC  F0B0         	movff	___fltol@f1+3,??___fltol+3
 22015  013E98  0E20               	movlw	32
 22016  013E9A  D006               	goto	u10650
 22017  013E9C                     u10655:
 22018  013E9C  0100               	movlb	0	; () banked
 22019  013E9E  90D8               	bcf	status,0,c
 22020  013EA0  33B0               	rrcf	(??___fltol+3)& (0+255),f,b
 22021  013EA2  33AF               	rrcf	(??___fltol+2)& (0+255),f,b
 22022  013EA4  33AE               	rrcf	(??___fltol+1)& (0+255),f,b
 22023  013EA6  33AD               	rrcf	??___fltol& (0+255),f,b
 22024  013EA8                     u10650:
 22025  013EA8  2EE8               	decfsz	wreg,f,c
 22026  013EAA  D7F8               	goto	u10655
 22027  013EAC  0100               	movlb	0	; () banked
 22028  013EAE  51AD               	movf	??___fltol& (0+255),w,b
 22029  013EB0  0100               	movlb	0	; () banked
 22030  013EB2  6FB1               	movwf	___fltol@sign1& (0+255),b
 22031                           
 22032                           ; BSR set to: 0
 22033  013EB4  0100               	movlb	0	; () banked
 22034  013EB6  8FAB               	bsf	(___fltol@f1+2)& (0+255),7,b
 22035                           
 22036                           ; BSR set to: 0
 22037  013EB8  0EFF               	movlw	255
 22038  013EBA  0100               	movlb	0	; () banked
 22039  013EBC  17A9               	andwf	___fltol@f1& (0+255),f,b
 22040  013EBE  0EFF               	movlw	255
 22041  013EC0  17AA               	andwf	(___fltol@f1+1)& (0+255),f,b
 22042  013EC2  0EFF               	movlw	255
 22043  013EC4  17AB               	andwf	(___fltol@f1+2)& (0+255),f,b
 22044  013EC6  0E00               	movlw	0
 22045  013EC8  17AC               	andwf	(___fltol@f1+3)& (0+255),f,b
 22046                           
 22047                           ; BSR set to: 0
 22048  013ECA  0E96               	movlw	150
 22049  013ECC  0100               	movlb	0	; () banked
 22050  013ECE  5FB2               	subwf	___fltol@exp1& (0+255),f,b
 22051                           
 22052                           ; BSR set to: 0
 22053  013ED0  0100               	movlb	0	; () banked
 22054  013ED2  AFB2               	btfss	___fltol@exp1& (0+255),7,b
 22055  013ED4  D01A               	goto	l2389
 22056                           
 22057                           ; BSR set to: 0
 22058  013ED6  0100               	movlb	0	; () banked
 22059  013ED8  51B2               	movf	___fltol@exp1& (0+255),w,b
 22060  013EDA  0A80               	xorlw	128
 22061  013EDC  0F97               	addlw	151
 22062  013EDE  B0D8               	btfsc	status,0,c
 22063  013EE0  D00A               	goto	l2390
 22064                           
 22065                           ; BSR set to: 0
 22066  013EE2  0E00               	movlw	0
 22067  013EE4  0100               	movlb	0	; () banked
 22068  013EE6  6FA9               	movwf	?___fltol& (0+255),b
 22069  013EE8  0E00               	movlw	0
 22070  013EEA  6FAA               	movwf	(?___fltol+1)& (0+255),b
 22071  013EEC  0E00               	movlw	0
 22072  013EEE  6FAB               	movwf	(?___fltol+2)& (0+255),b
 22073  013EF0  0E00               	movlw	0
 22074  013EF2  6FAC               	movwf	(?___fltol+3)& (0+255),b
 22075                           
 22076                           ; BSR set to: 0
 22077  013EF4  0012               	return	
 22078  013EF6                     l2390:
 22079                           
 22080                           ; BSR set to: 0
 22081                           
 22082                           ; BSR set to: 0
 22083                           
 22084                           ; BSR set to: 0
 22085  013EF6  0100               	movlb	0	; () banked
 22086  013EF8  90D8               	bcf	status,0,c
 22087  013EFA  33AC               	rrcf	(___fltol@f1+3)& (0+255),f,b
 22088  013EFC  33AB               	rrcf	(___fltol@f1+2)& (0+255),f,b
 22089  013EFE  33AA               	rrcf	(___fltol@f1+1)& (0+255),f,b
 22090  013F00  33A9               	rrcf	___fltol@f1& (0+255),f,b
 22091                           
 22092                           ; BSR set to: 0
 22093  013F02  0100               	movlb	0	; () banked
 22094  013F04  3FB2               	incfsz	___fltol@exp1& (0+255),f,b
 22095  013F06  D7F7               	goto	l2390
 22096                           
 22097                           ; BSR set to: 0
 22098  013F08  D01B               	goto	u10690
 22099  013F0A                     l2389:
 22100                           
 22101                           ; BSR set to: 0
 22102                           
 22103                           ; BSR set to: 0
 22104  013F0A  0E1F               	movlw	31
 22105  013F0C  0100               	movlb	0	; () banked
 22106  013F0E  65B2               	cpfsgt	___fltol@exp1& (0+255),b
 22107  013F10  D012               	goto	l2395
 22108                           
 22109                           ; BSR set to: 0
 22110  013F12  0E00               	movlw	0
 22111  013F14  0100               	movlb	0	; () banked
 22112  013F16  6FA9               	movwf	?___fltol& (0+255),b
 22113  013F18  0E00               	movlw	0
 22114  013F1A  6FAA               	movwf	(?___fltol+1)& (0+255),b
 22115  013F1C  0E00               	movlw	0
 22116  013F1E  6FAB               	movwf	(?___fltol+2)& (0+255),b
 22117  013F20  0E00               	movlw	0
 22118  013F22  6FAC               	movwf	(?___fltol+3)& (0+255),b
 22119                           
 22120                           ; BSR set to: 0
 22121  013F24  0012               	return	
 22122  013F26                     
 22123                           ; BSR set to: 0
 22124                           
 22125                           ; BSR set to: 0
 22126  013F26  0100               	movlb	0	; () banked
 22127  013F28  90D8               	bcf	status,0,c
 22128  013F2A  37A9               	rlcf	___fltol@f1& (0+255),f,b
 22129  013F2C  37AA               	rlcf	(___fltol@f1+1)& (0+255),f,b
 22130  013F2E  37AB               	rlcf	(___fltol@f1+2)& (0+255),f,b
 22131  013F30  37AC               	rlcf	(___fltol@f1+3)& (0+255),f,b
 22132  013F32  0100               	movlb	0	; () banked
 22133  013F34  07B2               	decf	___fltol@exp1& (0+255),f,b
 22134  013F36                     l2395:
 22135                           
 22136                           ; BSR set to: 0
 22137                           
 22138                           ; BSR set to: 0
 22139  013F36  0100               	movlb	0	; () banked
 22140  013F38  51B2               	movf	___fltol@exp1& (0+255),w,b
 22141  013F3A  0100               	movlb	0	; () banked
 22142  013F3C  A4D8               	btfss	status,2,c
 22143  013F3E  D7F3               	goto	l2396
 22144  013F40                     u10690:
 22145                           
 22146                           ; BSR set to: 0
 22147                           
 22148                           ; BSR set to: 0
 22149                           
 22150                           ; BSR set to: 0
 22151  013F40  0100               	movlb	0	; () banked
 22152  013F42  51B1               	movf	___fltol@sign1& (0+255),w,b
 22153  013F44  0100               	movlb	0	; () banked
 22154  013F46  B4D8               	btfsc	status,2,c
 22155  013F48  D009               	goto	l2398
 22156                           
 22157                           ; BSR set to: 0
 22158  013F4A  0100               	movlb	0	; () banked
 22159  013F4C  1FAC               	comf	(___fltol@f1+3)& (0+255),f,b
 22160  013F4E  1FAB               	comf	(___fltol@f1+2)& (0+255),f,b
 22161  013F50  1FAA               	comf	(___fltol@f1+1)& (0+255),f,b
 22162  013F52  6DA9               	negf	___fltol@f1& (0+255),b
 22163  013F54  0E00               	movlw	0
 22164  013F56  23AA               	addwfc	(___fltol@f1+1)& (0+255),f,b
 22165  013F58  23AB               	addwfc	(___fltol@f1+2)& (0+255),f,b
 22166  013F5A  23AC               	addwfc	(___fltol@f1+3)& (0+255),f,b
 22167  013F5C                     l2398:
 22168                           
 22169                           ; BSR set to: 0
 22170                           
 22171                           ; BSR set to: 0
 22172  013F5C  C0A9  F0A9         	movff	___fltol@f1,?___fltol
 22173  013F60  C0AA  F0AA         	movff	___fltol@f1+1,?___fltol+1
 22174  013F64  C0AB  F0AB         	movff	___fltol@f1+2,?___fltol+2
 22175  013F68  C0AC  F0AC         	movff	___fltol@f1+3,?___fltol+3
 22176  013F6C  0012               	return	
 22177  013F6E                     __end_of___fltol:
 22178                           	opt stack 0
 22179                           tosu	equ	0xFFF
 22180                           tosh	equ	0xFFE
 22181                           tosl	equ	0xFFD
 22182                           pclath	equ	0xFFA
 22183                           tblptru	equ	0xFF8
 22184                           tblptrh	equ	0xFF7
 22185                           tblptrl	equ	0xFF6
 22186                           tablat	equ	0xFF5
 22187                           prodh	equ	0xFF4
 22188                           prodl	equ	0xFF3
 22189                           intcon	equ	0xFF2
 22190                           indf0	equ	0xFEF
 22191                           postinc0	equ	0xFEE
 22192                           fsr0h	equ	0xFEA
 22193                           fsr0l	equ	0xFE9
 22194                           wreg	equ	0xFE8
 22195                           indf1	equ	0xFE7
 22196                           postdec1	equ	0xFE5
 22197                           fsr1h	equ	0xFE2
 22198                           fsr1l	equ	0xFE1
 22199                           indf2	equ	0xFDF
 22200                           postinc2	equ	0xFDE
 22201                           postdec2	equ	0xFDD
 22202                           plusw2	equ	0xFDB
 22203                           fsr2h	equ	0xFDA
 22204                           fsr2l	equ	0xFD9
 22205                           status	equ	0xFD8
 22206                           
 22207 ;; *************** function ___flge *****************
 22208 ;; Defined at:
 22209 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flge.c"
 22210 ;; Parameters:    Size  Location     Type
 22211 ;;  ff1             4    0[BANK0 ] long 
 22212 ;;  ff2             4    4[BANK0 ] long 
 22213 ;; Auto vars:     Size  Location     Type
 22214 ;;		None
 22215 ;; Return value:  Size  Location     Type
 22216 ;;		None               void
 22217 ;; Registers used:
 22218 ;;		wreg, status,2, status,0
 22219 ;; Tracked objects:
 22220 ;;		On entry : 0/0
 22221 ;;		On exit  : 0/0
 22222 ;;		Unchanged: 0/0
 22223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22224 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22227 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22228 ;;Total ram usage:       12 bytes
 22229 ;; Hardware stack levels used:    1
 22230 ;; Hardware stack levels required when called:    7
 22231 ;; This function calls:
 22232 ;;		Nothing
 22233 ;; This function is called by:
 22234 ;;		_displayPositionMode
 22235 ;;		_pow
 22236 ;;		_exp
 22237 ;;		_floor
 22238 ;; This function uses a non-reentrant model
 22239 ;;
 22240                           
 22241                           	psect	text116
 22242  012E82                     __ptext116:
 22243                           	opt stack 0
 22244  012E82                     ___flge:
 22245                           	opt stack 20
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;incstack = 0
 22249  012E82  0E00               	movlw	0
 22250  012E84  0100               	movlb	0	; () banked
 22251  012E86  1560               	andwf	___flge@ff1& (0+255),w,b
 22252  012E88  0100               	movlb	0	; () banked
 22253  012E8A  6F68               	movwf	??___flge& (0+255),b
 22254  012E8C  0E00               	movlw	0
 22255  012E8E  0100               	movlb	0	; () banked
 22256  012E90  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 22257  012E92  0100               	movlb	0	; () banked
 22258  012E94  6F69               	movwf	(??___flge+1)& (0+255),b
 22259  012E96  0E80               	movlw	128
 22260  012E98  0100               	movlb	0	; () banked
 22261  012E9A  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 22262  012E9C  0100               	movlb	0	; () banked
 22263  012E9E  6F6A               	movwf	(??___flge+2)& (0+255),b
 22264  012EA0  0E7F               	movlw	127
 22265  012EA2  0100               	movlb	0	; () banked
 22266  012EA4  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 22267  012EA6  0100               	movlb	0	; () banked
 22268  012EA8  6F6B               	movwf	(??___flge+3)& (0+255),b
 22269  012EAA  0100               	movlb	0	; () banked
 22270  012EAC  5168               	movf	??___flge& (0+255),w,b
 22271  012EAE  0100               	movlb	0	; () banked
 22272  012EB0  1169               	iorwf	(??___flge+1)& (0+255),w,b
 22273  012EB2  0100               	movlb	0	; () banked
 22274  012EB4  116A               	iorwf	(??___flge+2)& (0+255),w,b
 22275  012EB6  0100               	movlb	0	; () banked
 22276  012EB8  116B               	iorwf	(??___flge+3)& (0+255),w,b
 22277  012EBA  A4D8               	btfss	status,2,c
 22278  012EBC  D009               	goto	l2357
 22279                           
 22280                           ; BSR set to: 0
 22281  012EBE  0E00               	movlw	0
 22282  012EC0  0100               	movlb	0	; () banked
 22283  012EC2  6F60               	movwf	___flge@ff1& (0+255),b
 22284  012EC4  0E00               	movlw	0
 22285  012EC6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22286  012EC8  0E00               	movlw	0
 22287  012ECA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22288  012ECC  0E00               	movlw	0
 22289  012ECE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22290  012ED0                     l2357:
 22291                           
 22292                           ; BSR set to: 0
 22293                           
 22294                           ; BSR set to: 0
 22295  012ED0  0E00               	movlw	0
 22296  012ED2  0100               	movlb	0	; () banked
 22297  012ED4  1564               	andwf	___flge@ff2& (0+255),w,b
 22298  012ED6  0100               	movlb	0	; () banked
 22299  012ED8  6F68               	movwf	??___flge& (0+255),b
 22300  012EDA  0E00               	movlw	0
 22301  012EDC  0100               	movlb	0	; () banked
 22302  012EDE  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 22303  012EE0  0100               	movlb	0	; () banked
 22304  012EE2  6F69               	movwf	(??___flge+1)& (0+255),b
 22305  012EE4  0E80               	movlw	128
 22306  012EE6  0100               	movlb	0	; () banked
 22307  012EE8  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 22308  012EEA  0100               	movlb	0	; () banked
 22309  012EEC  6F6A               	movwf	(??___flge+2)& (0+255),b
 22310  012EEE  0E7F               	movlw	127
 22311  012EF0  0100               	movlb	0	; () banked
 22312  012EF2  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 22313  012EF4  0100               	movlb	0	; () banked
 22314  012EF6  6F6B               	movwf	(??___flge+3)& (0+255),b
 22315  012EF8  0100               	movlb	0	; () banked
 22316  012EFA  5168               	movf	??___flge& (0+255),w,b
 22317  012EFC  0100               	movlb	0	; () banked
 22318  012EFE  1169               	iorwf	(??___flge+1)& (0+255),w,b
 22319  012F00  0100               	movlb	0	; () banked
 22320  012F02  116A               	iorwf	(??___flge+2)& (0+255),w,b
 22321  012F04  0100               	movlb	0	; () banked
 22322  012F06  116B               	iorwf	(??___flge+3)& (0+255),w,b
 22323  012F08  A4D8               	btfss	status,2,c
 22324  012F0A  D009               	goto	l2358
 22325                           
 22326                           ; BSR set to: 0
 22327  012F0C  0E00               	movlw	0
 22328  012F0E  0100               	movlb	0	; () banked
 22329  012F10  6F64               	movwf	___flge@ff2& (0+255),b
 22330  012F12  0E00               	movlw	0
 22331  012F14  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22332  012F16  0E00               	movlw	0
 22333  012F18  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22334  012F1A  0E00               	movlw	0
 22335  012F1C  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22336  012F1E                     l2358:
 22337                           
 22338                           ; BSR set to: 0
 22339                           
 22340                           ; BSR set to: 0
 22341  012F1E  0100               	movlb	0	; () banked
 22342  012F20  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 22343  012F22  D026               	goto	l2359
 22344                           
 22345                           ; BSR set to: 0
 22346  012F24  C060  F068         	movff	___flge@ff1,??___flge
 22347  012F28  C061  F069         	movff	___flge@ff1+1,??___flge+1
 22348  012F2C  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 22349  012F30  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 22350  012F34  0100               	movlb	0	; () banked
 22351  012F36  1F68               	comf	??___flge& (0+255),f,b
 22352  012F38  1F69               	comf	(??___flge+1)& (0+255),f,b
 22353  012F3A  1F6A               	comf	(??___flge+2)& (0+255),f,b
 22354  012F3C  1F6B               	comf	(??___flge+3)& (0+255),f,b
 22355  012F3E  2B68               	incf	??___flge& (0+255),f,b
 22356  012F40  0E00               	movlw	0
 22357  012F42  2369               	addwfc	(??___flge+1)& (0+255),f,b
 22358  012F44  236A               	addwfc	(??___flge+2)& (0+255),f,b
 22359  012F46  236B               	addwfc	(??___flge+3)& (0+255),f,b
 22360  012F48  0E00               	movlw	0
 22361  012F4A  0100               	movlb	0	; () banked
 22362  012F4C  2568               	addwf	??___flge& (0+255),w,b
 22363  012F4E  0100               	movlb	0	; () banked
 22364  012F50  6F60               	movwf	___flge@ff1& (0+255),b
 22365  012F52  0E00               	movlw	0
 22366  012F54  0100               	movlb	0	; () banked
 22367  012F56  2169               	addwfc	(??___flge+1)& (0+255),w,b
 22368  012F58  0100               	movlb	0	; () banked
 22369  012F5A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22370  012F5C  0E00               	movlw	0
 22371  012F5E  0100               	movlb	0	; () banked
 22372  012F60  216A               	addwfc	(??___flge+2)& (0+255),w,b
 22373  012F62  0100               	movlb	0	; () banked
 22374  012F64  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22375  012F66  0E80               	movlw	128
 22376  012F68  0100               	movlb	0	; () banked
 22377  012F6A  216B               	addwfc	(??___flge+3)& (0+255),w,b
 22378  012F6C  0100               	movlb	0	; () banked
 22379  012F6E  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22380  012F70                     l2359:
 22381                           
 22382                           ; BSR set to: 0
 22383                           
 22384                           ; BSR set to: 0
 22385  012F70  0100               	movlb	0	; () banked
 22386  012F72  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 22387  012F74  D026               	goto	l2360
 22388                           
 22389                           ; BSR set to: 0
 22390  012F76  C064  F068         	movff	___flge@ff2,??___flge
 22391  012F7A  C065  F069         	movff	___flge@ff2+1,??___flge+1
 22392  012F7E  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 22393  012F82  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 22394  012F86  0100               	movlb	0	; () banked
 22395  012F88  1F68               	comf	??___flge& (0+255),f,b
 22396  012F8A  1F69               	comf	(??___flge+1)& (0+255),f,b
 22397  012F8C  1F6A               	comf	(??___flge+2)& (0+255),f,b
 22398  012F8E  1F6B               	comf	(??___flge+3)& (0+255),f,b
 22399  012F90  2B68               	incf	??___flge& (0+255),f,b
 22400  012F92  0E00               	movlw	0
 22401  012F94  2369               	addwfc	(??___flge+1)& (0+255),f,b
 22402  012F96  236A               	addwfc	(??___flge+2)& (0+255),f,b
 22403  012F98  236B               	addwfc	(??___flge+3)& (0+255),f,b
 22404  012F9A  0E00               	movlw	0
 22405  012F9C  0100               	movlb	0	; () banked
 22406  012F9E  2568               	addwf	??___flge& (0+255),w,b
 22407  012FA0  0100               	movlb	0	; () banked
 22408  012FA2  6F64               	movwf	___flge@ff2& (0+255),b
 22409  012FA4  0E00               	movlw	0
 22410  012FA6  0100               	movlb	0	; () banked
 22411  012FA8  2169               	addwfc	(??___flge+1)& (0+255),w,b
 22412  012FAA  0100               	movlb	0	; () banked
 22413  012FAC  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22414  012FAE  0E00               	movlw	0
 22415  012FB0  0100               	movlb	0	; () banked
 22416  012FB2  216A               	addwfc	(??___flge+2)& (0+255),w,b
 22417  012FB4  0100               	movlb	0	; () banked
 22418  012FB6  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22419  012FB8  0E80               	movlw	128
 22420  012FBA  0100               	movlb	0	; () banked
 22421  012FBC  216B               	addwfc	(??___flge+3)& (0+255),w,b
 22422  012FBE  0100               	movlb	0	; () banked
 22423  012FC0  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22424  012FC2                     l2360:
 22425                           
 22426                           ; BSR set to: 0
 22427  012FC2  0E00               	movlw	0
 22428  012FC4  0100               	movlb	0	; () banked
 22429  012FC6  1B60               	xorwf	___flge@ff1& (0+255),f,b
 22430  012FC8  0E00               	movlw	0
 22431  012FCA  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 22432  012FCC  0E00               	movlw	0
 22433  012FCE  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 22434  012FD0  0E80               	movlw	128
 22435  012FD2  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 22436  012FD4  0E00               	movlw	0
 22437  012FD6  0100               	movlb	0	; () banked
 22438  012FD8  1B64               	xorwf	___flge@ff2& (0+255),f,b
 22439  012FDA  0E00               	movlw	0
 22440  012FDC  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 22441  012FDE  0E00               	movlw	0
 22442  012FE0  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 22443  012FE2  0E80               	movlw	128
 22444  012FE4  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 22445  012FE6  0100               	movlb	0	; () banked
 22446  012FE8  5164               	movf	___flge@ff2& (0+255),w,b
 22447  012FEA  0100               	movlb	0	; () banked
 22448  012FEC  5D60               	subwf	___flge@ff1& (0+255),w,b
 22449  012FEE  0100               	movlb	0	; () banked
 22450  012FF0  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 22451  012FF2  0100               	movlb	0	; () banked
 22452  012FF4  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 22453  012FF6  0100               	movlb	0	; () banked
 22454  012FF8  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 22455  012FFA  0100               	movlb	0	; () banked
 22456  012FFC  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 22457  012FFE  0100               	movlb	0	; () banked
 22458  013000  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 22459  013002  0100               	movlb	0	; () banked
 22460  013004  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 22461  013006  B0D8               	btfsc	status,0,c
 22462  013008  D002               	goto	l11654
 22463                           
 22464                           ; BSR set to: 0
 22465  01300A  90D8               	bcf	status,0,c
 22466  01300C  0012               	return	
 22467  01300E                     l11654:
 22468                           
 22469                           ; BSR set to: 0
 22470                           
 22471                           ; BSR set to: 0
 22472  01300E  80D8               	bsf	status,0,c
 22473                           
 22474                           ; BSR set to: 0
 22475  013010  0012               	return	
 22476  013012                     __end_of___flge:
 22477                           	opt stack 0
 22478                           tosu	equ	0xFFF
 22479                           tosh	equ	0xFFE
 22480                           tosl	equ	0xFFD
 22481                           pclath	equ	0xFFA
 22482                           tblptru	equ	0xFF8
 22483                           tblptrh	equ	0xFF7
 22484                           tblptrl	equ	0xFF6
 22485                           tablat	equ	0xFF5
 22486                           prodh	equ	0xFF4
 22487                           prodl	equ	0xFF3
 22488                           intcon	equ	0xFF2
 22489                           indf0	equ	0xFEF
 22490                           postinc0	equ	0xFEE
 22491                           fsr0h	equ	0xFEA
 22492                           fsr0l	equ	0xFE9
 22493                           wreg	equ	0xFE8
 22494                           indf1	equ	0xFE7
 22495                           postdec1	equ	0xFE5
 22496                           fsr1h	equ	0xFE2
 22497                           fsr1l	equ	0xFE1
 22498                           indf2	equ	0xFDF
 22499                           postinc2	equ	0xFDE
 22500                           postdec2	equ	0xFDD
 22501                           plusw2	equ	0xFDB
 22502                           fsr2h	equ	0xFDA
 22503                           fsr2l	equ	0xFD9
 22504                           status	equ	0xFD8
 22505                           
 22506 ;; *************** function _displayNullMode *****************
 22507 ;; Defined at:
 22508 ;;		line 217 in file "main.c"
 22509 ;; Parameters:    Size  Location     Type
 22510 ;;		None
 22511 ;; Auto vars:     Size  Location     Type
 22512 ;;		None
 22513 ;; Return value:  Size  Location     Type
 22514 ;;                  1    wreg      void 
 22515 ;; Registers used:
 22516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22517 ;; Tracked objects:
 22518 ;;		On entry : 0/0
 22519 ;;		On exit  : 0/0
 22520 ;;		Unchanged: 0/0
 22521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22526 ;;Total ram usage:        0 bytes
 22527 ;; Hardware stack levels used:    1
 22528 ;; Hardware stack levels required when called:   13
 22529 ;; This function calls:
 22530 ;;		_printf
 22531 ;; This function is called by:
 22532 ;;		_main
 22533 ;; This function uses a non-reentrant model
 22534 ;;
 22535                           
 22536                           	psect	text117
 22537  0164D2                     __ptext117:
 22538                           	opt stack 0
 22539  0164D2                     _displayNullMode:
 22540                           	opt stack 17
 22541                           
 22542                           ;main.c: 218: printf("Current Mode:\n Undefined\n");
 22543                           
 22544                           ; BSR set to: 0
 22545                           ;incstack = 0
 22546  0164D2  0E48               	movlw	low STR_12
 22547  0164D4  0100               	movlb	0	; () banked
 22548  0164D6  6F7B               	movwf	printf@f& (0+255),b
 22549  0164D8  0EFF               	movlw	high STR_12
 22550  0164DA  0100               	movlb	0	; () banked
 22551  0164DC  6F7C               	movwf	(printf@f+1)& (0+255),b
 22552  0164DE  EC78  F096         	call	_printf	;wreg free
 22553                           
 22554                           ;main.c: 219: printf("                      \n");
 22555  0164E2  0E7C               	movlw	low STR_13
 22556  0164E4  0100               	movlb	0	; () banked
 22557  0164E6  6F7B               	movwf	printf@f& (0+255),b
 22558  0164E8  0EFF               	movlw	high STR_13
 22559  0164EA  0100               	movlb	0	; () banked
 22560  0164EC  6F7C               	movwf	(printf@f+1)& (0+255),b
 22561  0164EE  EC78  F096         	call	_printf	;wreg free
 22562                           
 22563                           ;main.c: 220: printf("                      \n");
 22564  0164F2  0E7C               	movlw	low STR_13
 22565  0164F4  0100               	movlb	0	; () banked
 22566  0164F6  6F7B               	movwf	printf@f& (0+255),b
 22567  0164F8  0EFF               	movlw	high STR_13
 22568  0164FA  0100               	movlb	0	; () banked
 22569  0164FC  6F7C               	movwf	(printf@f+1)& (0+255),b
 22570  0164FE  EC78  F096         	call	_printf	;wreg free
 22571                           
 22572                           ;main.c: 221: printf("                      \n");
 22573  016502  0E7C               	movlw	low STR_13
 22574  016504  0100               	movlb	0	; () banked
 22575  016506  6F7B               	movwf	printf@f& (0+255),b
 22576  016508  0EFF               	movlw	high STR_13
 22577  01650A  0100               	movlb	0	; () banked
 22578  01650C  6F7C               	movwf	(printf@f+1)& (0+255),b
 22579  01650E  EC78  F096         	call	_printf	;wreg free
 22580  016512  0012               	return		;funcret
 22581  016514                     __end_of_displayNullMode:
 22582                           	opt stack 0
 22583                           tosu	equ	0xFFF
 22584                           tosh	equ	0xFFE
 22585                           tosl	equ	0xFFD
 22586                           pclath	equ	0xFFA
 22587                           tblptru	equ	0xFF8
 22588                           tblptrh	equ	0xFF7
 22589                           tblptrl	equ	0xFF6
 22590                           tablat	equ	0xFF5
 22591                           prodh	equ	0xFF4
 22592                           prodl	equ	0xFF3
 22593                           intcon	equ	0xFF2
 22594                           indf0	equ	0xFEF
 22595                           postinc0	equ	0xFEE
 22596                           fsr0h	equ	0xFEA
 22597                           fsr0l	equ	0xFE9
 22598                           wreg	equ	0xFE8
 22599                           indf1	equ	0xFE7
 22600                           postdec1	equ	0xFE5
 22601                           fsr1h	equ	0xFE2
 22602                           fsr1l	equ	0xFE1
 22603                           indf2	equ	0xFDF
 22604                           postinc2	equ	0xFDE
 22605                           postdec2	equ	0xFDD
 22606                           plusw2	equ	0xFDB
 22607                           fsr2h	equ	0xFDA
 22608                           fsr2l	equ	0xFD9
 22609                           status	equ	0xFD8
 22610                           
 22611 ;; *************** function _displayContinuousMode *****************
 22612 ;; Defined at:
 22613 ;;		line 149 in file "main.c"
 22614 ;; Parameters:    Size  Location     Type
 22615 ;;		None
 22616 ;; Auto vars:     Size  Location     Type
 22617 ;;		None
 22618 ;; Return value:  Size  Location     Type
 22619 ;;                  1    wreg      void 
 22620 ;; Registers used:
 22621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22622 ;; Tracked objects:
 22623 ;;		On entry : 0/0
 22624 ;;		On exit  : 0/0
 22625 ;;		Unchanged: 0/0
 22626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22631 ;;Total ram usage:        0 bytes
 22632 ;; Hardware stack levels used:    1
 22633 ;; Hardware stack levels required when called:   13
 22634 ;; This function calls:
 22635 ;;		_printf
 22636 ;; This function is called by:
 22637 ;;		_main
 22638 ;; This function uses a non-reentrant model
 22639 ;;
 22640                           
 22641                           	psect	text118
 22642  014498                     __ptext118:
 22643                           	opt stack 0
 22644  014498                     _displayContinuousMode:
 22645                           	opt stack 17
 22646                           
 22647                           ;main.c: 151: printf("Current Mode:\n Continuous Mode\n");
 22648                           
 22649                           ;incstack = 0
 22650  014498  0E09               	movlw	low STR_2
 22651  01449A  0100               	movlb	0	; () banked
 22652  01449C  6F7B               	movwf	printf@f& (0+255),b
 22653  01449E  0EFF               	movlw	high STR_2
 22654  0144A0  0100               	movlb	0	; () banked
 22655  0144A2  6F7C               	movwf	(printf@f+1)& (0+255),b
 22656  0144A4  EC78  F096         	call	_printf	;wreg free
 22657                           
 22658                           ;main.c: 152: printf("Direction: ");
 22659  0144A8  0ED5               	movlw	low STR_3
 22660  0144AA  0100               	movlb	0	; () banked
 22661  0144AC  6F7B               	movwf	printf@f& (0+255),b
 22662  0144AE  0EFF               	movlw	high STR_3
 22663  0144B0  0100               	movlb	0	; () banked
 22664  0144B2  6F7C               	movwf	(printf@f+1)& (0+255),b
 22665  0144B4  EC78  F096         	call	_printf	;wreg free
 22666                           
 22667                           ;main.c: 157: if (direction > 0) {
 22668  0144B8  0101               	movlb	1	; () banked
 22669  0144BA  BFFB               	btfsc	(_direction+1)& (0+255),7,b
 22670  0144BC  D010               	goto	l2063
 22671  0144BE  0101               	movlb	1	; () banked
 22672  0144C0  51FB               	movf	(_direction+1)& (0+255),w,b
 22673  0144C2  E104               	bnz	u12420
 22674  0144C4  0101               	movlb	1	; () banked
 22675  0144C6  05FA               	decf	_direction& (0+255),w,b
 22676  0144C8  A0D8               	btfss	status,0,c
 22677  0144CA  D009               	goto	l2063
 22678  0144CC                     u12420:
 22679                           
 22680                           ; BSR set to: 1
 22681                           ;main.c: 158: printf("CW\n");
 22682  0144CC  0EF8               	movlw	low (STR_5+1)
 22683  0144CE  0100               	movlb	0	; () banked
 22684  0144D0  6F7B               	movwf	printf@f& (0+255),b
 22685  0144D2  0EFF               	movlw	high (STR_5+1)
 22686  0144D4  0100               	movlb	0	; () banked
 22687  0144D6  6F7C               	movwf	(printf@f+1)& (0+255),b
 22688  0144D8  EC78  F096         	call	_printf	;wreg free
 22689                           
 22690                           ;main.c: 159: } else {
 22691  0144DC  D008               	goto	l2064
 22692  0144DE                     l2063:
 22693                           
 22694                           ;main.c: 160: printf("CCW\n");
 22695  0144DE  0EF7               	movlw	low STR_5
 22696  0144E0  0100               	movlb	0	; () banked
 22697  0144E2  6F7B               	movwf	printf@f& (0+255),b
 22698  0144E4  0EFF               	movlw	high STR_5
 22699  0144E6  0100               	movlb	0	; () banked
 22700  0144E8  6F7C               	movwf	(printf@f+1)& (0+255),b
 22701  0144EA  EC78  F096         	call	_printf	;wreg free
 22702  0144EE                     l2064:
 22703                           
 22704                           ;main.c: 161: }
 22705                           ;main.c: 163: printf("Speed: %d\n", speed);
 22706  0144EE  0EE1               	movlw	low STR_6
 22707  0144F0  0100               	movlb	0	; () banked
 22708  0144F2  6F7B               	movwf	printf@f& (0+255),b
 22709  0144F4  0EFF               	movlw	high STR_6
 22710  0144F6  0100               	movlb	0	; () banked
 22711  0144F8  6F7C               	movwf	(printf@f+1)& (0+255),b
 22712  0144FA  C0E2  F07D         	movff	_speed,?_printf+2
 22713  0144FE  C0E3  F07E         	movff	_speed+1,?_printf+3
 22714  014502  EC78  F096         	call	_printf	;wreg free
 22715                           
 22716                           ;main.c: 170: if (rightState) {
 22717  014506  0100               	movlb	0	; () banked
 22718  014508  51EE               	movf	_rightState& (0+255),w,b
 22719  01450A  B4D8               	btfsc	status,2,c
 22720  01450C  D006               	goto	l2065
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;main.c: 171: direction = 200;
 22724  01450E  0E00               	movlw	0
 22725  014510  0101               	movlb	1	; () banked
 22726  014512  6FFB               	movwf	(_direction+1)& (0+255),b
 22727  014514  0EC8               	movlw	200
 22728  014516  6FFA               	movwf	_direction& (0+255),b
 22729                           
 22730                           ;main.c: 172: } else if (leftState) {
 22731  014518  0012               	return	
 22732  01451A                     l2065:
 22733                           
 22734                           ; BSR set to: 1
 22735  01451A  0100               	movlb	0	; () banked
 22736  01451C  51EF               	movf	_leftState& (0+255),w,b
 22737  01451E  B4D8               	btfsc	status,2,c
 22738  014520  D006               	goto	l2067
 22739                           
 22740                           ; BSR set to: 0
 22741                           ;main.c: 173: direction = -200;
 22742  014522  0EFF               	movlw	255
 22743  014524  0101               	movlb	1	; () banked
 22744  014526  6FFB               	movwf	(_direction+1)& (0+255),b
 22745  014528  0E38               	movlw	56
 22746  01452A  6FFA               	movwf	_direction& (0+255),b
 22747                           
 22748                           ;main.c: 174: } else if (upState) {
 22749  01452C  0012               	return	
 22750  01452E                     l2067:
 22751                           
 22752                           ; BSR set to: 1
 22753  01452E  0100               	movlb	0	; () banked
 22754  014530  51F1               	movf	_upState& (0+255),w,b
 22755  014532  B4D8               	btfsc	status,2,c
 22756  014534  D004               	goto	l2069
 22757                           
 22758                           ; BSR set to: 0
 22759                           ;main.c: 175: speed++;
 22760  014536  0100               	movlb	0	; () banked
 22761  014538  4BE2               	infsnz	_speed& (0+255),f,b
 22762  01453A  2BE3               	incf	(_speed+1)& (0+255),f,b
 22763                           
 22764                           ;main.c: 176: } else if (downState && speed > 0) {
 22765  01453C  0012               	return	
 22766  01453E                     l2069:
 22767                           
 22768                           ; BSR set to: 0
 22769                           
 22770                           ; BSR set to: 0
 22771  01453E  0100               	movlb	0	; () banked
 22772  014540  51F0               	movf	_downState& (0+255),w,b
 22773  014542  B4D8               	btfsc	status,2,c
 22774  014544  0012               	return	
 22775                           
 22776                           ; BSR set to: 0
 22777  014546  0100               	movlb	0	; () banked
 22778  014548  BFE3               	btfsc	(_speed+1)& (0+255),7,b
 22779  01454A  0012               	return	
 22780  01454C  0100               	movlb	0	; () banked
 22781  01454E  51E3               	movf	(_speed+1)& (0+255),w,b
 22782  014550  E104               	bnz	u12470
 22783  014552  0100               	movlb	0	; () banked
 22784  014554  05E2               	decf	_speed& (0+255),w,b
 22785  014556  A0D8               	btfss	status,0,c
 22786  014558  0012               	return	
 22787  01455A                     u12470:
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;main.c: 177: speed--;
 22791  01455A  0100               	movlb	0	; () banked
 22792  01455C  07E2               	decf	_speed& (0+255),f,b
 22793  01455E  A0D8               	btfss	status,0,c
 22794  014560  07E3               	decf	(_speed+1)& (0+255),f,b
 22795                           
 22796                           ; BSR set to: 0
 22797                           
 22798                           ; BSR set to: 0
 22799                           
 22800                           ; BSR set to: 0
 22801  014562  0012               	return	
 22802  014564                     __end_of_displayContinuousMode:
 22803                           	opt stack 0
 22804                           tosu	equ	0xFFF
 22805                           tosh	equ	0xFFE
 22806                           tosl	equ	0xFFD
 22807                           pclath	equ	0xFFA
 22808                           tblptru	equ	0xFF8
 22809                           tblptrh	equ	0xFF7
 22810                           tblptrl	equ	0xFF6
 22811                           tablat	equ	0xFF5
 22812                           prodh	equ	0xFF4
 22813                           prodl	equ	0xFF3
 22814                           intcon	equ	0xFF2
 22815                           indf0	equ	0xFEF
 22816                           postinc0	equ	0xFEE
 22817                           fsr0h	equ	0xFEA
 22818                           fsr0l	equ	0xFE9
 22819                           wreg	equ	0xFE8
 22820                           indf1	equ	0xFE7
 22821                           postdec1	equ	0xFE5
 22822                           fsr1h	equ	0xFE2
 22823                           fsr1l	equ	0xFE1
 22824                           indf2	equ	0xFDF
 22825                           postinc2	equ	0xFDE
 22826                           postdec2	equ	0xFDD
 22827                           plusw2	equ	0xFDB
 22828                           fsr2h	equ	0xFDA
 22829                           fsr2l	equ	0xFD9
 22830                           status	equ	0xFD8
 22831                           
 22832 ;; *************** function _printf *****************
 22833 ;; Defined at:
 22834 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 22835 ;; Parameters:    Size  Location     Type
 22836 ;;  f               2   27[BANK0 ] PTR const unsigned char 
 22837 ;;		 -> STR_16(3), STR_15(24), STR_14(24), STR_13(24), 
 22838 ;;		 -> STR_12(26), STR_11(20), STR_10(31), STR_9(22), 
 22839 ;;		 -> STR_8(11), STR_7(26), STR_6(11), STR_5(5), 
 22840 ;;		 -> STR_4(4), STR_3(12), STR_2(32), STR_1(23), 
 22841 ;; Auto vars:     Size  Location     Type
 22842 ;;  tmpval          4    0        struct .
 22843 ;;  cp              3    0        PTR const unsigned char 
 22844 ;;  val             2   36[BANK0 ] unsigned int 
 22845 ;;  ap              2   34[BANK0 ] PTR void [1]
 22846 ;;		 -> ?_printf(2), 
 22847 ;;  len             2    0        unsigned int 
 22848 ;;  c               1   38[BANK0 ] char 
 22849 ;;  prec            1   33[BANK0 ] char 
 22850 ;;  flag            1   32[BANK0 ] unsigned char 
 22851 ;; Return value:  Size  Location     Type
 22852 ;;                  2   27[BANK0 ] int 
 22853 ;; Registers used:
 22854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22855 ;; Tracked objects:
 22856 ;;		On entry : 0/0
 22857 ;;		On exit  : 0/0
 22858 ;;		Unchanged: 0/0
 22859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22861 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22863 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;Total ram usage:       12 bytes
 22865 ;; Hardware stack levels used:    1
 22866 ;; Hardware stack levels required when called:   12
 22867 ;; This function calls:
 22868 ;;		___lwdiv
 22869 ;;		___lwmod
 22870 ;;		_putch
 22871 ;; This function is called by:
 22872 ;;		_displaySID
 22873 ;;		_displayContinuousMode
 22874 ;;		_displayStepMode
 22875 ;;		_displayPositionMode
 22876 ;;		_displayNullMode
 22877 ;;		_main
 22878 ;; This function uses a non-reentrant model
 22879 ;;
 22880                           
 22881                           	psect	text119
 22882  012CF0                     __ptext119:
 22883                           	opt stack 0
 22884  012CF0                     _printf:
 22885                           	opt stack 18
 22886                           
 22887                           ;doprnt.c: 466: va_list ap;
 22888                           ;doprnt.c: 499: signed char c;
 22889                           ;doprnt.c: 506: signed char prec;
 22890                           ;doprnt.c: 508: unsigned char flag;
 22891                           ;doprnt.c: 523: union {
 22892                           ;doprnt.c: 524: unsigned long vd;
 22893                           ;doprnt.c: 525: double integ;
 22894                           ;doprnt.c: 526: } tmpval;
 22895                           ;doprnt.c: 528: unsigned int val;
 22896                           ;doprnt.c: 529: unsigned len;
 22897                           ;doprnt.c: 530: const char * cp;
 22898                           ;doprnt.c: 533: *ap = __va_start();
 22899                           
 22900                           ;incstack = 0
 22901  012CF0  0E7D               	movlw	low (?_printf+2)
 22902  012CF2  0100               	movlb	0	; () banked
 22903  012CF4  6F82               	movwf	printf@ap& (0+255),b
 22904  012CF6  0E00               	movlw	high (?_printf+2)
 22905  012CF8  0100               	movlb	0	; () banked
 22906  012CFA  6F83               	movwf	(printf@ap+1)& (0+255),b
 22907                           
 22908                           ;doprnt.c: 536: while(c = *f++) {
 22909  012CFC  D0B1               	goto	u11880
 22910  012CFE                     
 22911                           ; BSR set to: 0
 22912                           ;doprnt.c: 538: if(c != '%')
 22913                           
 22914                           ; BSR set to: 0
 22915  012CFE  0E25               	movlw	37
 22916  012D00  0100               	movlb	0	; () banked
 22917  012D02  1986               	xorwf	printf@c& (0+255),w,b
 22918  012D04  B4D8               	btfsc	status,2,c
 22919  012D06  D005               	goto	l2139
 22920                           
 22921                           ; BSR set to: 0
 22922                           ;doprnt.c: 540: {
 22923                           ;doprnt.c: 541: (putch(c) );
 22924  012D08  0100               	movlb	0	; () banked
 22925  012D0A  5186               	movf	printf@c& (0+255),w,b
 22926  012D0C  EC55  F0B6         	call	_putch
 22927                           
 22928                           ;doprnt.c: 542: continue;
 22929  012D10  D0A7               	goto	u11880
 22930  012D12                     l2139:
 22931                           
 22932                           ;doprnt.c: 543: }
 22933                           ;doprnt.c: 548: flag = 0;
 22934  012D12  0E00               	movlw	0
 22935  012D14  0100               	movlb	0	; () banked
 22936  012D16  6F80               	movwf	printf@flag& (0+255),b
 22937                           
 22938                           ;doprnt.c: 635: switch(c = *f++) {
 22939  012D18  D011               	goto	l2140
 22940  012D1A                     
 22941                           ; BSR set to: 0
 22942                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22943                           
 22944                           ; BSR set to: 0
 22945  012D1A  C082  FFD9         	movff	printf@ap,fsr2l
 22946  012D1E  C083  FFDA         	movff	printf@ap+1,fsr2h
 22947  012D22  50DF               	movf	indf2,w,c
 22948  012D24  0100               	movlb	0	; () banked
 22949  012D26  6F86               	movwf	printf@c& (0+255),b
 22950                           
 22951                           ; BSR set to: 0
 22952  012D28  0E02               	movlw	2
 22953  012D2A  0100               	movlb	0	; () banked
 22954  012D2C  2782               	addwf	printf@ap& (0+255),f,b
 22955  012D2E  0E00               	movlw	0
 22956  012D30  2383               	addwfc	(printf@ap+1)& (0+255),f,b
 22957  012D32                     
 22958                           ; BSR set to: 0
 22959                           ;doprnt.c: 809: (putch(c) );
 22960                           
 22961                           ; BSR set to: 0
 22962  012D32  0100               	movlb	0	; () banked
 22963  012D34  5186               	movf	printf@c& (0+255),w,b
 22964  012D36  EC55  F0B6         	call	_putch
 22965                           
 22966                           ;doprnt.c: 810: continue;
 22967  012D3A  D092               	goto	u11880
 22968  012D3C                     l2140:
 22969  012D3C  C07B  FFF6         	movff	printf@f,tblptrl
 22970  012D40  C07C  FFF7         	movff	printf@f+1,tblptrh
 22971  012D44  0100               	movlb	0	; () banked
 22972  012D46  4B7B               	infsnz	printf@f& (0+255),f,b
 22973  012D48  2B7C               	incf	(printf@f+1)& (0+255),f,b
 22974  012D4A                     	if	0	;tblptru may be non-zero
 22975  012D4A                     	endif
 22976  012D4A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22977  012D4A  0E00               	movlw	low (__mediumconst shr (0+16))
 22978  012D4C  6EF8               	movwf	tblptru,c
 22979  012D4E                     	endif
 22980  012D4E  0008               	tblrd		*
 22981  012D50  CFF5 F086          	movff	tablat,printf@c
 22982  012D54  0100               	movlb	0	; () banked
 22983  012D56  5186               	movf	printf@c& (0+255),w,b
 22984                           
 22985                           ; Switch size 1, requested type "space"
 22986                           ; Number of cases is 4, Range of values is 0 to 105
 22987                           ; switch strategies available:
 22988                           ; Name         Instructions Cycles
 22989                           ; simple_byte           13     7 (average)
 22990                           ;	Chosen strategy is simple_byte
 22991  012D58  0A00               	xorlw	0	; case 0
 22992  012D5A  B4D8               	btfsc	status,2,c
 22993  012D5C  0012               	return	
 22994  012D5E  0A63               	xorlw	99	; case 99
 22995  012D60  B4D8               	btfsc	status,2,c
 22996  012D62  D7DB               	goto	l2146
 22997  012D64  0A07               	xorlw	7	; case 100
 22998  012D66  B4D8               	btfsc	status,2,c
 22999  012D68  D003               	goto	l2145
 23000  012D6A  0A0D               	xorlw	13	; case 105
 23001  012D6C  A4D8               	btfss	status,2,c
 23002  012D6E  D7E1               	goto	l2147
 23003  012D70                     l2145:
 23004                           
 23005                           ;doprnt.c: 1253: {
 23006                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23007                           
 23008                           ; BSR set to: 0
 23009  012D70  C082  FFD9         	movff	printf@ap,fsr2l
 23010  012D74  C083  FFDA         	movff	printf@ap+1,fsr2h
 23011  012D78  CFDE F084          	movff	postinc2,printf@val
 23012  012D7C  CFDD F085          	movff	postdec2,printf@val+1
 23013  012D80  0E02               	movlw	2
 23014  012D82  0100               	movlb	0	; () banked
 23015  012D84  2782               	addwf	printf@ap& (0+255),f,b
 23016  012D86  0E00               	movlw	0
 23017  012D88  2383               	addwfc	(printf@ap+1)& (0+255),f,b
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;doprnt.c: 1261: if((int)val < 0) {
 23021  012D8A  0100               	movlb	0	; () banked
 23022  012D8C  AF85               	btfss	(printf@val+1)& (0+255),7,b
 23023  012D8E  D008               	goto	l2148
 23024                           
 23025                           ; BSR set to: 0
 23026                           ;doprnt.c: 1262: flag |= 0x03;
 23027  012D90  0E03               	movlw	3
 23028  012D92  0100               	movlb	0	; () banked
 23029  012D94  1380               	iorwf	printf@flag& (0+255),f,b
 23030                           
 23031                           ; BSR set to: 0
 23032                           ;doprnt.c: 1263: val = -val;
 23033  012D96  0100               	movlb	0	; () banked
 23034  012D98  6D84               	negf	printf@val& (0+255),b
 23035  012D9A  1F85               	comf	(printf@val+1)& (0+255),f,b
 23036  012D9C  B0D8               	btfsc	status,0,c
 23037  012D9E  2B85               	incf	(printf@val+1)& (0+255),f,b
 23038  012DA0                     l2148:
 23039                           
 23040                           ; BSR set to: 0
 23041                           ;doprnt.c: 1264: }
 23042                           ;doprnt.c: 1266: }
 23043                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23044                           
 23045                           ; BSR set to: 0
 23046  012DA0  0E01               	movlw	1
 23047  012DA2  0100               	movlb	0	; () banked
 23048  012DA4  6F86               	movwf	printf@c& (0+255),b
 23049  012DA6                     l14390:
 23050                           
 23051                           ; BSR set to: 0
 23052  012DA6  0E05               	movlw	5
 23053  012DA8  0100               	movlb	0	; () banked
 23054  012DAA  1986               	xorwf	printf@c& (0+255),w,b
 23055  012DAC  B4D8               	btfsc	status,2,c
 23056  012DAE  D019               	goto	u11860
 23057                           
 23058                           ; BSR set to: 0
 23059                           ;doprnt.c: 1306: if(val < dpowers[c])
 23060                           
 23061                           ; BSR set to: 0
 23062                           
 23063                           ; BSR set to: 0
 23064  012DB0  0100               	movlb	0	; () banked
 23065  012DB2  5186               	movf	printf@c& (0+255),w,b
 23066  012DB4  0D02               	mullw	2
 23067  012DB6  0EB5               	movlw	low _dpowers
 23068  012DB8  24F3               	addwf	prodl,w,c
 23069  012DBA  6EF6               	movwf	tblptrl,c
 23070  012DBC  0EFC               	movlw	high _dpowers
 23071  012DBE  20F4               	addwfc	prodh,w,c
 23072  012DC0  6EF7               	movwf	tblptrh,c
 23073  012DC2                     	if	1	;There are 3 active tblptr bytes
 23074  012DC2  6AF8               	clrf	tblptru,c
 23075  012DC4  0E00               	movlw	low (__mediumconst shr (0+16))
 23076  012DC6  22F8               	addwfc	tblptru,f,c
 23077  012DC8                     	endif
 23078  012DC8  0009               	tblrd		*+
 23079  012DCA  50F5               	movf	tablat,w,c
 23080  012DCC  0100               	movlb	0	; () banked
 23081  012DCE  5D84               	subwf	printf@val& (0+255),w,b
 23082  012DD0  0009               	tblrd		*+
 23083  012DD2  50F5               	movf	tablat,w,c
 23084  012DD4  0100               	movlb	0	; () banked
 23085  012DD6  5985               	subwfb	(printf@val+1)& (0+255),w,b
 23086  012DD8  A0D8               	btfss	status,0,c
 23087  012DDA  D003               	goto	u11860
 23088                           
 23089                           ; BSR set to: 0
 23090                           
 23091                           ; BSR set to: 0
 23092                           
 23093                           ; BSR set to: 0
 23094                           ;doprnt.c: 1307: break;
 23095  012DDC  0100               	movlb	0	; () banked
 23096  012DDE  2B86               	incf	printf@c& (0+255),f,b
 23097  012DE0  D7E2               	goto	l14390
 23098  012DE2                     u11860:
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;doprnt.c: 1422: {
 23102                           ;doprnt.c: 1438: if(flag & 0x03)
 23103                           
 23104                           ; BSR set to: 0
 23105  012DE2  C080  F07F         	movff	printf@flag,??_printf
 23106  012DE6  0E03               	movlw	3
 23107  012DE8  0100               	movlb	0	; () banked
 23108  012DEA  177F               	andwf	??_printf& (0+255),f,b
 23109  012DEC  B4D8               	btfsc	status,2,c
 23110  012DEE  D003               	goto	l2152
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;doprnt.c: 1439: (putch('-') );
 23114  012DF0  0E2D               	movlw	45
 23115  012DF2  EC55  F0B6         	call	_putch
 23116  012DF6                     l2152:
 23117                           
 23118                           ;doprnt.c: 1469: }
 23119                           ;doprnt.c: 1472: prec = c;
 23120  012DF6  C086  F081         	movff	printf@c,printf@prec
 23121                           
 23122                           ;doprnt.c: 1474: while(prec--) {
 23123  012DFA  D02C               	goto	l2153
 23124  012DFC                     
 23125                           ;doprnt.c: 1478: {
 23126                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23127  012DFC  0100               	movlb	0	; () banked
 23128  012DFE  5181               	movf	printf@prec& (0+255),w,b
 23129  012E00  0D02               	mullw	2
 23130  012E02  0EB5               	movlw	low _dpowers
 23131  012E04  24F3               	addwf	prodl,w,c
 23132  012E06  6EF6               	movwf	tblptrl,c
 23133  012E08  0EFC               	movlw	high _dpowers
 23134  012E0A  20F4               	addwfc	prodh,w,c
 23135  012E0C  6EF7               	movwf	tblptrh,c
 23136  012E0E                     	if	1	;There are 3 active tblptr bytes
 23137  012E0E  6AF8               	clrf	tblptru,c
 23138  012E10  0E00               	movlw	low (__mediumconst shr (0+16))
 23139  012E12  22F8               	addwfc	tblptru,f,c
 23140  012E14                     	endif
 23141  012E14  0009               	tblrd		*+
 23142  012E16  CFF5 F062          	movff	tablat,___lwdiv@divisor
 23143  012E1A  000A               	tblrd		*-
 23144  012E1C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 23145  012E20  C084  F060         	movff	printf@val,___lwdiv@dividend
 23146  012E24  C085  F061         	movff	printf@val+1,___lwdiv@dividend+1
 23147  012E28  EC3E  F0AC         	call	___lwdiv	;wreg free
 23148  012E2C  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 23149  012E30  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 23150  012E34  0E00               	movlw	0
 23151  012E36  0100               	movlb	0	; () banked
 23152  012E38  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 23153  012E3A  0E0A               	movlw	10
 23154  012E3C  6F69               	movwf	___lwmod@divisor& (0+255),b
 23155  012E3E  ECA5  F0AF         	call	___lwmod	;wreg free
 23156  012E42  0100               	movlb	0	; () banked
 23157  012E44  5167               	movf	?___lwmod& (0+255),w,b
 23158  012E46  0F30               	addlw	48
 23159  012E48  0100               	movlb	0	; () banked
 23160  012E4A  6F86               	movwf	printf@c& (0+255),b
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;doprnt.c: 1523: }
 23164                           ;doprnt.c: 1524: (putch(c) );
 23165  012E4C  0100               	movlb	0	; () banked
 23166  012E4E  5186               	movf	printf@c& (0+255),w,b
 23167  012E50  EC55  F0B6         	call	_putch
 23168  012E54                     l2153:
 23169  012E54  0100               	movlb	0	; () banked
 23170  012E56  0781               	decf	printf@prec& (0+255),f,b
 23171  012E58  0100               	movlb	0	; () banked
 23172  012E5A  2981               	incf	printf@prec& (0+255),w,b
 23173  012E5C  A4D8               	btfss	status,2,c
 23174  012E5E  D7CE               	goto	l2154
 23175  012E60                     u11880:
 23176                           
 23177                           ; BSR set to: 0
 23178                           
 23179                           ; BSR set to: 0
 23180  012E60  C07B  FFF6         	movff	printf@f,tblptrl
 23181  012E64  C07C  FFF7         	movff	printf@f+1,tblptrh
 23182  012E68  0100               	movlb	0	; () banked
 23183  012E6A  4B7B               	infsnz	printf@f& (0+255),f,b
 23184  012E6C  2B7C               	incf	(printf@f+1)& (0+255),f,b
 23185  012E6E                     	if	0	;tblptru may be non-zero
 23186  012E6E                     	endif
 23187  012E6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 23188  012E6E  0E00               	movlw	low (__mediumconst shr (0+16))
 23189  012E70  6EF8               	movwf	tblptru,c
 23190  012E72                     	endif
 23191  012E72  0008               	tblrd		*
 23192  012E74  CFF5 F086          	movff	tablat,printf@c
 23193  012E78  0100               	movlb	0	; () banked
 23194  012E7A  5186               	movf	printf@c& (0+255),w,b
 23195  012E7C  B4D8               	btfsc	status,2,c
 23196  012E7E  0012               	return	
 23197  012E80  D73E               	goto	l2138
 23198  012E82                     __end_of_printf:
 23199                           	opt stack 0
 23200                           tosu	equ	0xFFF
 23201                           tosh	equ	0xFFE
 23202                           tosl	equ	0xFFD
 23203                           pclath	equ	0xFFA
 23204                           tblptru	equ	0xFF8
 23205                           tblptrh	equ	0xFF7
 23206                           tblptrl	equ	0xFF6
 23207                           tablat	equ	0xFF5
 23208                           prodh	equ	0xFF4
 23209                           prodl	equ	0xFF3
 23210                           intcon	equ	0xFF2
 23211                           indf0	equ	0xFEF
 23212                           postinc0	equ	0xFEE
 23213                           fsr0h	equ	0xFEA
 23214                           fsr0l	equ	0xFE9
 23215                           wreg	equ	0xFE8
 23216                           indf1	equ	0xFE7
 23217                           postdec1	equ	0xFE5
 23218                           fsr1h	equ	0xFE2
 23219                           fsr1l	equ	0xFE1
 23220                           indf2	equ	0xFDF
 23221                           postinc2	equ	0xFDE
 23222                           postdec2	equ	0xFDD
 23223                           plusw2	equ	0xFDB
 23224                           fsr2h	equ	0xFDA
 23225                           fsr2l	equ	0xFD9
 23226                           status	equ	0xFD8
 23227                           
 23228 ;; *************** function _putch *****************
 23229 ;; Defined at:
 23230 ;;		line 454 in file "Library/Console.c"
 23231 ;; Parameters:    Size  Location     Type
 23232 ;;  c               1    wreg     unsigned char 
 23233 ;; Auto vars:     Size  Location     Type
 23234 ;;  c               1   26[BANK0 ] unsigned char 
 23235 ;; Return value:  Size  Location     Type
 23236 ;;                  1    wreg      void 
 23237 ;; Registers used:
 23238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23239 ;; Tracked objects:
 23240 ;;		On entry : 0/0
 23241 ;;		On exit  : 0/0
 23242 ;;		Unchanged: 0/0
 23243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23247 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23248 ;;Total ram usage:        1 bytes
 23249 ;; Hardware stack levels used:    1
 23250 ;; Hardware stack levels required when called:   11
 23251 ;; This function calls:
 23252 ;;		_Console_PrintChar
 23253 ;; This function is called by:
 23254 ;;		_printf
 23255 ;; This function uses a non-reentrant model
 23256 ;;
 23257                           
 23258                           	psect	text120
 23259  016CAA                     __ptext120:
 23260                           	opt stack 0
 23261  016CAA                     _putch:
 23262                           	opt stack 18
 23263                           
 23264                           ; BSR set to: 0
 23265                           ;incstack = 0
 23266                           ;putch@c stored from wreg
 23267  016CAA  0100               	movlb	0	; () banked
 23268  016CAC  6F7A               	movwf	putch@c& (0+255),b
 23269                           
 23270                           ;Console.c: 456: Console_PrintChar(c);
 23271  016CAE  0100               	movlb	0	; () banked
 23272  016CB0  517A               	movf	putch@c& (0+255),w,b
 23273  016CB2  ECE0  F094         	call	_Console_PrintChar
 23274  016CB6  0012               	return		;funcret
 23275  016CB8                     __end_of_putch:
 23276                           	opt stack 0
 23277                           tosu	equ	0xFFF
 23278                           tosh	equ	0xFFE
 23279                           tosl	equ	0xFFD
 23280                           pclath	equ	0xFFA
 23281                           tblptru	equ	0xFF8
 23282                           tblptrh	equ	0xFF7
 23283                           tblptrl	equ	0xFF6
 23284                           tablat	equ	0xFF5
 23285                           prodh	equ	0xFF4
 23286                           prodl	equ	0xFF3
 23287                           intcon	equ	0xFF2
 23288                           indf0	equ	0xFEF
 23289                           postinc0	equ	0xFEE
 23290                           fsr0h	equ	0xFEA
 23291                           fsr0l	equ	0xFE9
 23292                           wreg	equ	0xFE8
 23293                           indf1	equ	0xFE7
 23294                           postdec1	equ	0xFE5
 23295                           fsr1h	equ	0xFE2
 23296                           fsr1l	equ	0xFE1
 23297                           indf2	equ	0xFDF
 23298                           postinc2	equ	0xFDE
 23299                           postdec2	equ	0xFDD
 23300                           plusw2	equ	0xFDB
 23301                           fsr2h	equ	0xFDA
 23302                           fsr2l	equ	0xFD9
 23303                           status	equ	0xFD8
 23304                           
 23305 ;; *************** function _Console_PrintChar *****************
 23306 ;; Defined at:
 23307 ;;		line 322 in file "Library/Console.c"
 23308 ;; Parameters:    Size  Location     Type
 23309 ;;  pInput          1    wreg     unsigned char 
 23310 ;; Auto vars:     Size  Location     Type
 23311 ;;  pInput          1   25[BANK0 ] unsigned char 
 23312 ;; Return value:  Size  Location     Type
 23313 ;;                  1    wreg      void 
 23314 ;; Registers used:
 23315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23316 ;; Tracked objects:
 23317 ;;		On entry : 0/0
 23318 ;;		On exit  : 0/0
 23319 ;;		Unchanged: 0/0
 23320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23323 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23325 ;;Total ram usage:        4 bytes
 23326 ;; Hardware stack levels used:    1
 23327 ;; Hardware stack levels required when called:   10
 23328 ;; This function calls:
 23329 ;;		_Console_Backspace
 23330 ;;		_Console_FormFeed
 23331 ;;		_Console_IncrementCursor
 23332 ;;		_Console_NewLine
 23333 ;;		_Console_ResetCursor
 23334 ;;		_Console_Tab
 23335 ;; This function is called by:
 23336 ;;		_putch
 23337 ;;		_Console_PrintString
 23338 ;; This function uses a non-reentrant model
 23339 ;;
 23340                           
 23341                           	psect	text121
 23342  0129C0                     __ptext121:
 23343                           	opt stack 0
 23344  0129C0                     _Console_PrintChar:
 23345                           	opt stack 18
 23346                           
 23347                           ;incstack = 0
 23348                           ;Console_PrintChar@pInput stored from wreg
 23349  0129C0  0100               	movlb	0	; () banked
 23350  0129C2  6F79               	movwf	Console_PrintChar@pInput& (0+255),b
 23351                           
 23352                           ;Console.c: 324: switch(pInput)
 23353  0129C4  D0B1               	goto	l1036
 23354  0129C6                     
 23355                           ;Console.c: 327: case '\n':
 23356                           ;Console.c: 328: Console_NewLine();
 23357  0129C6  ECF7  F0A8         	call	_Console_NewLine	;wreg free
 23358                           
 23359                           ;Console.c: 329: return;
 23360  0129CA  0012               	return	
 23361  0129CC                     
 23362                           ;Console.c: 331: Console_Backspace();
 23363  0129CC  EC04  F0B0         	call	_Console_Backspace	;wreg free
 23364                           
 23365                           ;Console.c: 332: return;
 23366  0129D0  0012               	return	
 23367  0129D2                     
 23368                           ;Console.c: 334: Console_FormFeed();
 23369  0129D2  EC2A  F0AA         	call	_Console_FormFeed	;wreg free
 23370                           
 23371                           ;Console.c: 335: return;
 23372  0129D6  0012               	return	
 23373  0129D8                     
 23374                           ;Console.c: 337: Console_Tab();
 23375  0129D8  EC79  F0A3         	call	_Console_Tab	;wreg free
 23376                           
 23377                           ;Console.c: 338: return;
 23378  0129DC  0012               	return	
 23379  0129DE                     
 23380                           ;Console.c: 340: Console_IncrementCursor();
 23381  0129DE  ECDD  F0AE         	call	_Console_IncrementCursor	;wreg free
 23382                           
 23383                           ;Console.c: 341: return;
 23384  0129E2  0012               	return	
 23385  0129E4                     
 23386                           ;Console.c: 343: Console_ResetCursor();
 23387  0129E4  EC88  F0B5         	call	_Console_ResetCursor	;wreg free
 23388                           
 23389                           ;Console.c: 344: return;
 23390  0129E8  0012               	return	
 23391  0129EA                     
 23392                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 23393                           
 23394                           ;Console.c: 349: default:
 23395  0129EA  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 23396  0129EE  0E7F               	movlw	127
 23397  0129F0  0100               	movlb	0	; () banked
 23398  0129F2  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 23399  0129F4  0100               	movlb	0	; () banked
 23400  0129F6  51F7               	movf	_lBufferY& (0+255),w,b
 23401  0129F8  0D14               	mullw	20
 23402  0129FA  0E7B               	movlw	low _lBuffer
 23403  0129FC  0100               	movlb	0	; () banked
 23404  0129FE  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23405  012A00  0E02               	movlw	high _lBuffer
 23406  012A02  0100               	movlb	0	; () banked
 23407  012A04  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 23408  012A06  50F3               	movf	prodl,w,c
 23409  012A08  0100               	movlb	0	; () banked
 23410  012A0A  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 23411  012A0C  50F4               	movf	prodh,w,c
 23412  012A0E  0100               	movlb	0	; () banked
 23413  012A10  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 23414  012A12  0100               	movlb	0	; () banked
 23415  012A14  51F8               	movf	_lBufferX& (0+255),w,b
 23416  012A16  0D01               	mullw	1
 23417  012A18  50F3               	movf	prodl,w,c
 23418  012A1A  0100               	movlb	0	; () banked
 23419  012A1C  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 23420  012A1E  6ED9               	movwf	fsr2l,c
 23421  012A20  50F4               	movf	prodh,w,c
 23422  012A22  0100               	movlb	0	; () banked
 23423  012A24  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 23424  012A26  6EDA               	movwf	fsr2h,c
 23425  012A28  50DF               	movf	indf2,w,c
 23426  012A2A  0B7F               	andlw	127
 23427  012A2C  0100               	movlb	0	; () banked
 23428  012A2E  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 23429  012A30  B4D8               	btfsc	status,2,c
 23430  012A32  D02E               	goto	l1047
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;Console.c: 351: {
 23434                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 23435  012A34  0E01               	movlw	1
 23436  012A36  0100               	movlb	0	; () banked
 23437  012A38  6FFC               	movwf	_change& (0+255),b
 23438                           
 23439                           ; BSR set to: 0
 23440  012A3A  0100               	movlb	0	; () banked
 23441  012A3C  51F7               	movf	_lBufferY& (0+255),w,b
 23442  012A3E  0D14               	mullw	20
 23443  012A40  0E7B               	movlw	low _lBuffer
 23444  012A42  0100               	movlb	0	; () banked
 23445  012A44  6F76               	movwf	??_Console_PrintChar& (0+255),b
 23446  012A46  0E02               	movlw	high _lBuffer
 23447  012A48  0100               	movlb	0	; () banked
 23448  012A4A  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23449  012A4C  50F3               	movf	prodl,w,c
 23450  012A4E  0100               	movlb	0	; () banked
 23451  012A50  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 23452  012A52  50F4               	movf	prodh,w,c
 23453  012A54  0100               	movlb	0	; () banked
 23454  012A56  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 23455  012A58  0100               	movlb	0	; () banked
 23456  012A5A  51F8               	movf	_lBufferX& (0+255),w,b
 23457  012A5C  0D01               	mullw	1
 23458  012A5E  50F3               	movf	prodl,w,c
 23459  012A60  0100               	movlb	0	; () banked
 23460  012A62  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 23461  012A64  6ED9               	movwf	fsr2l,c
 23462  012A66  50F4               	movf	prodh,w,c
 23463  012A68  0100               	movlb	0	; () banked
 23464  012A6A  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 23465  012A6C  6EDA               	movwf	fsr2h,c
 23466  012A6E  0100               	movlb	0	; () banked
 23467  012A70  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23468  012A72  0980               	iorlw	128
 23469  012A74  6EDF               	movwf	indf2,c
 23470                           
 23471                           ; BSR set to: 0
 23472                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 23473  012A76  0100               	movlb	0	; () banked
 23474  012A78  51F7               	movf	_lBufferY& (0+255),w,b
 23475  012A7A  0D02               	mullw	2
 23476  012A7C  0E00               	movlw	low _lCBuffer
 23477  012A7E  24F3               	addwf	prodl,w,c
 23478  012A80  6ED9               	movwf	fsr2l,c
 23479  012A82  0E02               	movlw	high _lCBuffer
 23480  012A84  20F4               	addwfc	prodh,w,c
 23481  012A86  6EDA               	movwf	fsr2h,c
 23482  012A88  C0FA  FFDE         	movff	_gForecolour,postinc2
 23483  012A8C  C0FB  FFDD         	movff	_gForecolour+1,postdec2
 23484  012A90                     l1047:
 23485                           
 23486                           ; BSR set to: 0
 23487                           ;Console.c: 354: }
 23488                           ;Console.c: 368: if(Console_IncrementCursor())
 23489                           
 23490                           ; BSR set to: 0
 23491  012A90  ECDD  F0AE         	call	_Console_IncrementCursor	;wreg free
 23492  012A94  0900               	iorlw	0
 23493  012A96  B4D8               	btfsc	status,2,c
 23494  012A98  0012               	return	
 23495                           
 23496                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 23497  012A9A  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 23498  012A9E  0E7F               	movlw	127
 23499  012AA0  0100               	movlb	0	; () banked
 23500  012AA2  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 23501  012AA4  0100               	movlb	0	; () banked
 23502  012AA6  51F7               	movf	_lBufferY& (0+255),w,b
 23503  012AA8  0D14               	mullw	20
 23504  012AAA  0E7B               	movlw	low _lBuffer
 23505  012AAC  0100               	movlb	0	; () banked
 23506  012AAE  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23507  012AB0  0E02               	movlw	high _lBuffer
 23508  012AB2  0100               	movlb	0	; () banked
 23509  012AB4  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 23510  012AB6  50F3               	movf	prodl,w,c
 23511  012AB8  0100               	movlb	0	; () banked
 23512  012ABA  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 23513  012ABC  50F4               	movf	prodh,w,c
 23514  012ABE  0100               	movlb	0	; () banked
 23515  012AC0  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 23516  012AC2  0100               	movlb	0	; () banked
 23517  012AC4  51F8               	movf	_lBufferX& (0+255),w,b
 23518  012AC6  0D01               	mullw	1
 23519  012AC8  50F3               	movf	prodl,w,c
 23520  012ACA  0100               	movlb	0	; () banked
 23521  012ACC  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 23522  012ACE  6ED9               	movwf	fsr2l,c
 23523  012AD0  50F4               	movf	prodh,w,c
 23524  012AD2  0100               	movlb	0	; () banked
 23525  012AD4  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 23526  012AD6  6EDA               	movwf	fsr2h,c
 23527  012AD8  50DF               	movf	indf2,w,c
 23528  012ADA  0B7F               	andlw	127
 23529  012ADC  0100               	movlb	0	; () banked
 23530  012ADE  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 23531  012AE0  B4D8               	btfsc	status,2,c
 23532  012AE2  0012               	return	
 23533                           
 23534                           ; BSR set to: 0
 23535                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 23536  012AE4  0E01               	movlw	1
 23537  012AE6  0100               	movlb	0	; () banked
 23538  012AE8  6FFC               	movwf	_change& (0+255),b
 23539                           
 23540                           ; BSR set to: 0
 23541  012AEA  0100               	movlb	0	; () banked
 23542  012AEC  51F7               	movf	_lBufferY& (0+255),w,b
 23543  012AEE  0D14               	mullw	20
 23544  012AF0  0E7B               	movlw	low _lBuffer
 23545  012AF2  0100               	movlb	0	; () banked
 23546  012AF4  6F76               	movwf	??_Console_PrintChar& (0+255),b
 23547  012AF6  0E02               	movlw	high _lBuffer
 23548  012AF8  0100               	movlb	0	; () banked
 23549  012AFA  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23550  012AFC  50F3               	movf	prodl,w,c
 23551  012AFE  0100               	movlb	0	; () banked
 23552  012B00  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 23553  012B02  50F4               	movf	prodh,w,c
 23554  012B04  0100               	movlb	0	; () banked
 23555  012B06  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 23556  012B08  0100               	movlb	0	; () banked
 23557  012B0A  51F8               	movf	_lBufferX& (0+255),w,b
 23558  012B0C  0D01               	mullw	1
 23559  012B0E  50F3               	movf	prodl,w,c
 23560  012B10  0100               	movlb	0	; () banked
 23561  012B12  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 23562  012B14  6ED9               	movwf	fsr2l,c
 23563  012B16  50F4               	movf	prodh,w,c
 23564  012B18  0100               	movlb	0	; () banked
 23565  012B1A  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 23566  012B1C  6EDA               	movwf	fsr2h,c
 23567  012B1E  0100               	movlb	0	; () banked
 23568  012B20  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23569  012B22  0980               	iorlw	128
 23570  012B24  6EDF               	movwf	indf2,c
 23571                           
 23572                           ; BSR set to: 0
 23573                           ;Console.c: 372: };
 23574                           
 23575                           ; BSR set to: 0
 23576                           ;Console.c: 371: return;
 23577                           
 23578                           ; BSR set to: 0
 23579                           
 23580                           ; BSR set to: 0
 23581  012B26  0012               	return	
 23582  012B28                     l1036:
 23583                           
 23584                           ; BSR set to: 0
 23585  012B28  0100               	movlb	0	; () banked
 23586  012B2A  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23587                           
 23588                           ; Switch size 1, requested type "space"
 23589                           ; Number of cases is 8, Range of values is 7 to 35
 23590                           ; switch strategies available:
 23591                           ; Name         Instructions Cycles
 23592                           ; simple_byte           25    13 (average)
 23593                           ;	Chosen strategy is simple_byte
 23594  012B2C  0A07               	xorlw	7	; case 7
 23595  012B2E  B4D8               	btfsc	status,2,c
 23596  012B30  D756               	goto	l1043
 23597  012B32  0A0F               	xorlw	15	; case 8
 23598  012B34  B4D8               	btfsc	status,2,c
 23599  012B36  D74A               	goto	l1040
 23600  012B38  0A01               	xorlw	1	; case 9
 23601  012B3A  B4D8               	btfsc	status,2,c
 23602  012B3C  D74D               	goto	l1042
 23603  012B3E  0A03               	xorlw	3	; case 10
 23604  012B40  B4D8               	btfsc	status,2,c
 23605  012B42  D741               	goto	l1037
 23606  012B44  0A06               	xorlw	6	; case 12
 23607  012B46  B4D8               	btfsc	status,2,c
 23608  012B48  D744               	goto	l1041
 23609  012B4A  0A01               	xorlw	1	; case 13
 23610  012B4C  B4D8               	btfsc	status,2,c
 23611  012B4E  D73B               	goto	l1037
 23612  012B50  0A2D               	xorlw	45	; case 32
 23613  012B52  B4D8               	btfsc	status,2,c
 23614  012B54  D74A               	goto	l1045
 23615  012B56  0A03               	xorlw	3	; case 35
 23616  012B58  B4D8               	btfsc	status,2,c
 23617  012B5A  D744               	goto	l1044
 23618  012B5C  D746               	goto	l1045
 23619  012B5E                     __end_of_Console_PrintChar:
 23620                           	opt stack 0
 23621                           tosu	equ	0xFFF
 23622                           tosh	equ	0xFFE
 23623                           tosl	equ	0xFFD
 23624                           pclath	equ	0xFFA
 23625                           tblptru	equ	0xFF8
 23626                           tblptrh	equ	0xFF7
 23627                           tblptrl	equ	0xFF6
 23628                           tablat	equ	0xFF5
 23629                           prodh	equ	0xFF4
 23630                           prodl	equ	0xFF3
 23631                           intcon	equ	0xFF2
 23632                           indf0	equ	0xFEF
 23633                           postinc0	equ	0xFEE
 23634                           fsr0h	equ	0xFEA
 23635                           fsr0l	equ	0xFE9
 23636                           wreg	equ	0xFE8
 23637                           indf1	equ	0xFE7
 23638                           postdec1	equ	0xFE5
 23639                           fsr1h	equ	0xFE2
 23640                           fsr1l	equ	0xFE1
 23641                           indf2	equ	0xFDF
 23642                           postinc2	equ	0xFDE
 23643                           postdec2	equ	0xFDD
 23644                           plusw2	equ	0xFDB
 23645                           fsr2h	equ	0xFDA
 23646                           fsr2l	equ	0xFD9
 23647                           status	equ	0xFD8
 23648                           
 23649 ;; *************** function _Console_Tab *****************
 23650 ;; Defined at:
 23651 ;;		line 260 in file "Library/Console.c"
 23652 ;; Parameters:    Size  Location     Type
 23653 ;;		None
 23654 ;; Auto vars:     Size  Location     Type
 23655 ;;  c               1   21[BANK0 ] unsigned char 
 23656 ;;  i               1   20[BANK0 ] unsigned char 
 23657 ;;  t               1   19[BANK0 ] unsigned char 
 23658 ;; Return value:  Size  Location     Type
 23659 ;;                  1    wreg      void 
 23660 ;; Registers used:
 23661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23662 ;; Tracked objects:
 23663 ;;		On entry : 0/0
 23664 ;;		On exit  : 0/0
 23665 ;;		Unchanged: 0/0
 23666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23669 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23670 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23671 ;;Total ram usage:        8 bytes
 23672 ;; Hardware stack levels used:    1
 23673 ;; Hardware stack levels required when called:    9
 23674 ;; This function calls:
 23675 ;;		_Console_ClearCursor
 23676 ;;		_Console_IncrementCursor
 23677 ;;		___awdiv
 23678 ;; This function is called by:
 23679 ;;		_Console_PrintChar
 23680 ;; This function uses a non-reentrant model
 23681 ;;
 23682                           
 23683                           	psect	text122
 23684  0146F2                     __ptext122:
 23685                           	opt stack 0
 23686  0146F2                     _Console_Tab:
 23687                           	opt stack 18
 23688                           
 23689                           ;Console.c: 262: UINT8 i = 0;
 23690                           
 23691                           ;incstack = 0
 23692  0146F2  0E00               	movlw	0
 23693  0146F4  0100               	movlb	0	; () banked
 23694  0146F6  6F74               	movwf	Console_Tab@i& (0+255),b
 23695                           
 23696                           ; BSR set to: 0
 23697                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 23698  0146F8  0EFA               	movlw	250
 23699  0146FA  2446               	addwf	_gCursor,w,c
 23700  0146FC  0100               	movlb	0	; () banked
 23701  0146FE  6F66               	movwf	___awdiv@dividend& (0+255),b
 23702  014700  0EFF               	movlw	255
 23703  014702  2047               	addwfc	_gCursor+1,w,c
 23704  014704  0100               	movlb	0	; () banked
 23705  014706  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
 23706  014708  0E00               	movlw	0
 23707  01470A  0100               	movlb	0	; () banked
 23708  01470C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23709  01470E  0E06               	movlw	6
 23710  014710  6F68               	movwf	___awdiv@divisor& (0+255),b
 23711  014712  ECDA  F0A3         	call	___awdiv	;wreg free
 23712  014716  0100               	movlb	0	; () banked
 23713  014718  5166               	movf	?___awdiv& (0+255),w,b
 23714  01471A  0100               	movlb	0	; () banked
 23715  01471C  6F75               	movwf	Console_Tab@c& (0+255),b
 23716                           
 23717                           ; BSR set to: 0
 23718                           ;Console.c: 264: UINT8 t = c/4;
 23719  01471E  C075  F066         	movff	Console_Tab@c,___awdiv@dividend
 23720  014722  0100               	movlb	0	; () banked
 23721  014724  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 23722  014726  0E00               	movlw	0
 23723  014728  0100               	movlb	0	; () banked
 23724  01472A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23725  01472C  0E04               	movlw	4
 23726  01472E  6F68               	movwf	___awdiv@divisor& (0+255),b
 23727  014730  ECDA  F0A3         	call	___awdiv	;wreg free
 23728  014734  0100               	movlb	0	; () banked
 23729  014736  5166               	movf	?___awdiv& (0+255),w,b
 23730  014738  0100               	movlb	0	; () banked
 23731  01473A  6F73               	movwf	Console_Tab@t& (0+255),b
 23732                           
 23733                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 23734  01473C  0E00               	movlw	0
 23735  01473E  0100               	movlb	0	; () banked
 23736  014740  6F74               	movwf	Console_Tab@i& (0+255),b
 23737  014742  D006               	goto	l1009
 23738  014744                     
 23739                           ; BSR set to: 0
 23740                           ;Console.c: 266: {
 23741                           ;Console.c: 267: Console_ClearCursor();
 23742                           
 23743                           ; BSR set to: 0
 23744  014744  EC8A  F0B2         	call	_Console_ClearCursor	;wreg free
 23745                           
 23746                           ;Console.c: 268: Console_IncrementCursor();
 23747  014748  ECDD  F0AE         	call	_Console_IncrementCursor	;wreg free
 23748  01474C  0100               	movlb	0	; () banked
 23749  01474E  2B74               	incf	Console_Tab@i& (0+255),f,b
 23750  014750                     l1009:
 23751                           
 23752                           ; BSR set to: 0
 23753                           
 23754                           ; BSR set to: 0
 23755  014750  0100               	movlb	0	; () banked
 23756  014752  5173               	movf	Console_Tab@t& (0+255),w,b
 23757  014754  0D04               	mullw	4
 23758  014756  1EF3               	comf	prodl,f,c
 23759  014758  1EF4               	comf	prodh,f,c
 23760  01475A  4AF3               	infsnz	prodl,f,c
 23761  01475C  2AF4               	incf	prodh,f,c
 23762  01475E  0100               	movlb	0	; () banked
 23763  014760  5175               	movf	Console_Tab@c& (0+255),w,b
 23764  014762  0100               	movlb	0	; () banked
 23765  014764  6F6E               	movwf	??_Console_Tab& (0+255),b
 23766  014766  6B6F               	clrf	(??_Console_Tab+1)& (0+255),b
 23767  014768  50F3               	movf	prodl,w,c
 23768  01476A  0100               	movlb	0	; () banked
 23769  01476C  276E               	addwf	??_Console_Tab& (0+255),f,b
 23770  01476E  50F4               	movf	prodh,w,c
 23771  014770  0100               	movlb	0	; () banked
 23772  014772  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 23773  014774  0100               	movlb	0	; () banked
 23774  014776  1F6E               	comf	??_Console_Tab& (0+255),f,b
 23775  014778  1F6F               	comf	(??_Console_Tab+1)& (0+255),f,b
 23776  01477A  4B6E               	infsnz	??_Console_Tab& (0+255),f,b
 23777  01477C  2B6F               	incf	(??_Console_Tab+1)& (0+255),f,b
 23778  01477E  0E04               	movlw	4
 23779  014780  0100               	movlb	0	; () banked
 23780  014782  276E               	addwf	??_Console_Tab& (0+255),f,b
 23781  014784  0E00               	movlw	0
 23782  014786  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 23783  014788  0100               	movlb	0	; () banked
 23784  01478A  5174               	movf	Console_Tab@i& (0+255),w,b
 23785  01478C  0100               	movlb	0	; () banked
 23786  01478E  6F70               	movwf	(??_Console_Tab+2)& (0+255),b
 23787  014790  6B71               	clrf	(??_Console_Tab+3)& (0+255),b
 23788  014792  0100               	movlb	0	; () banked
 23789  014794  516E               	movf	??_Console_Tab& (0+255),w,b
 23790  014796  0100               	movlb	0	; () banked
 23791  014798  5D70               	subwf	(??_Console_Tab+2)& (0+255),w,b
 23792  01479A  0100               	movlb	0	; () banked
 23793  01479C  5171               	movf	(??_Console_Tab+3)& (0+255),w,b
 23794  01479E  0A80               	xorlw	128
 23795  0147A0  0100               	movlb	0	; () banked
 23796  0147A2  6F72               	movwf	(??_Console_Tab+4)& (0+255),b
 23797  0147A4  0100               	movlb	0	; () banked
 23798  0147A6  516F               	movf	(??_Console_Tab+1)& (0+255),w,b
 23799  0147A8  0A80               	xorlw	128
 23800  0147AA  0100               	movlb	0	; () banked
 23801  0147AC  5972               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 23802  0147AE  B0D8               	btfsc	status,0,c
 23803  0147B0  0012               	return	
 23804  0147B2  D7C8               	goto	l1010
 23805  0147B4                     __end_of_Console_Tab:
 23806                           	opt stack 0
 23807                           tosu	equ	0xFFF
 23808                           tosh	equ	0xFFE
 23809                           tosl	equ	0xFFD
 23810                           pclath	equ	0xFFA
 23811                           tblptru	equ	0xFF8
 23812                           tblptrh	equ	0xFF7
 23813                           tblptrl	equ	0xFF6
 23814                           tablat	equ	0xFF5
 23815                           prodh	equ	0xFF4
 23816                           prodl	equ	0xFF3
 23817                           intcon	equ	0xFF2
 23818                           indf0	equ	0xFEF
 23819                           postinc0	equ	0xFEE
 23820                           fsr0h	equ	0xFEA
 23821                           fsr0l	equ	0xFE9
 23822                           wreg	equ	0xFE8
 23823                           indf1	equ	0xFE7
 23824                           postdec1	equ	0xFE5
 23825                           fsr1h	equ	0xFE2
 23826                           fsr1l	equ	0xFE1
 23827                           indf2	equ	0xFDF
 23828                           postinc2	equ	0xFDE
 23829                           postdec2	equ	0xFDD
 23830                           plusw2	equ	0xFDB
 23831                           fsr2h	equ	0xFDA
 23832                           fsr2l	equ	0xFD9
 23833                           status	equ	0xFD8
 23834                           
 23835 ;; *************** function ___awdiv *****************
 23836 ;; Defined at:
 23837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 23838 ;; Parameters:    Size  Location     Type
 23839 ;;  dividend        2    6[BANK0 ] int 
 23840 ;;  divisor         2    8[BANK0 ] int 
 23841 ;; Auto vars:     Size  Location     Type
 23842 ;;  quotient        2   12[BANK0 ] int 
 23843 ;;  sign            1   11[BANK0 ] unsigned char 
 23844 ;;  counter         1   10[BANK0 ] unsigned char 
 23845 ;; Return value:  Size  Location     Type
 23846 ;;                  2    6[BANK0 ] int 
 23847 ;; Registers used:
 23848 ;;		wreg, status,2, status,0
 23849 ;; Tracked objects:
 23850 ;;		On entry : 0/0
 23851 ;;		On exit  : 0/0
 23852 ;;		Unchanged: 0/0
 23853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23855 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23857 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23858 ;;Total ram usage:        8 bytes
 23859 ;; Hardware stack levels used:    1
 23860 ;; Hardware stack levels required when called:    7
 23861 ;; This function calls:
 23862 ;;		Nothing
 23863 ;; This function is called by:
 23864 ;;		_Console_Tab
 23865 ;;		_displayPositionMode
 23866 ;; This function uses a non-reentrant model
 23867 ;;
 23868                           
 23869                           	psect	text123
 23870  0147B4                     __ptext123:
 23871                           	opt stack 0
 23872  0147B4                     ___awdiv:
 23873                           	opt stack 19
 23874                           
 23875                           ; BSR set to: 0
 23876                           ;incstack = 0
 23877  0147B4  0E00               	movlw	0
 23878  0147B6  0100               	movlb	0	; () banked
 23879  0147B8  6F6B               	movwf	___awdiv@sign& (0+255),b
 23880                           
 23881                           ; BSR set to: 0
 23882  0147BA  0100               	movlb	0	; () banked
 23883  0147BC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23884  0147BE  D008               	goto	l2325
 23885                           
 23886                           ; BSR set to: 0
 23887  0147C0  0100               	movlb	0	; () banked
 23888  0147C2  6D68               	negf	___awdiv@divisor& (0+255),b
 23889  0147C4  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 23890  0147C6  B0D8               	btfsc	status,0,c
 23891  0147C8  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 23892                           
 23893                           ; BSR set to: 0
 23894  0147CA  0E01               	movlw	1
 23895  0147CC  0100               	movlb	0	; () banked
 23896  0147CE  6F6B               	movwf	___awdiv@sign& (0+255),b
 23897  0147D0                     l2325:
 23898                           
 23899                           ; BSR set to: 0
 23900                           
 23901                           ; BSR set to: 0
 23902  0147D0  0100               	movlb	0	; () banked
 23903  0147D2  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 23904  0147D4  D008               	goto	l2326
 23905                           
 23906                           ; BSR set to: 0
 23907  0147D6  0100               	movlb	0	; () banked
 23908  0147D8  6D66               	negf	___awdiv@dividend& (0+255),b
 23909  0147DA  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 23910  0147DC  B0D8               	btfsc	status,0,c
 23911  0147DE  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 23912                           
 23913                           ; BSR set to: 0
 23914  0147E0  0E01               	movlw	1
 23915  0147E2  0100               	movlb	0	; () banked
 23916  0147E4  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 23917  0147E6                     l2326:
 23918                           
 23919                           ; BSR set to: 0
 23920                           
 23921                           ; BSR set to: 0
 23922  0147E6  0E00               	movlw	0
 23923  0147E8  0100               	movlb	0	; () banked
 23924  0147EA  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 23925  0147EC  0E00               	movlw	0
 23926  0147EE  6F6C               	movwf	___awdiv@quotient& (0+255),b
 23927                           
 23928                           ; BSR set to: 0
 23929  0147F0  0100               	movlb	0	; () banked
 23930  0147F2  5168               	movf	___awdiv@divisor& (0+255),w,b
 23931  0147F4  0100               	movlb	0	; () banked
 23932  0147F6  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 23933  0147F8  B4D8               	btfsc	status,2,c
 23934  0147FA  D02C               	goto	l2333
 23935                           
 23936                           ; BSR set to: 0
 23937  0147FC  0E01               	movlw	1
 23938  0147FE  0100               	movlb	0	; () banked
 23939  014800  6F6A               	movwf	___awdiv@counter& (0+255),b
 23940  014802  D006               	goto	l2328
 23941  014804                     
 23942                           ; BSR set to: 0
 23943                           
 23944                           ; BSR set to: 0
 23945  014804  0100               	movlb	0	; () banked
 23946  014806  90D8               	bcf	status,0,c
 23947  014808  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 23948  01480A  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 23949  01480C  0100               	movlb	0	; () banked
 23950  01480E  2B6A               	incf	___awdiv@counter& (0+255),f,b
 23951  014810                     l2328:
 23952                           
 23953                           ; BSR set to: 0
 23954                           
 23955                           ; BSR set to: 0
 23956  014810  0100               	movlb	0	; () banked
 23957  014812  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23958  014814  D7F7               	goto	l2329
 23959  014816                     u9470:
 23960                           
 23961                           ; BSR set to: 0
 23962                           
 23963                           ; BSR set to: 0
 23964                           
 23965                           ; BSR set to: 0
 23966  014816  0100               	movlb	0	; () banked
 23967  014818  90D8               	bcf	status,0,c
 23968  01481A  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 23969  01481C  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 23970                           
 23971                           ; BSR set to: 0
 23972  01481E  0100               	movlb	0	; () banked
 23973  014820  5168               	movf	___awdiv@divisor& (0+255),w,b
 23974  014822  0100               	movlb	0	; () banked
 23975  014824  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 23976  014826  0100               	movlb	0	; () banked
 23977  014828  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23978  01482A  0100               	movlb	0	; () banked
 23979  01482C  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 23980  01482E  A0D8               	btfss	status,0,c
 23981  014830  D00A               	goto	l2332
 23982                           
 23983                           ; BSR set to: 0
 23984  014832  0100               	movlb	0	; () banked
 23985  014834  5168               	movf	___awdiv@divisor& (0+255),w,b
 23986  014836  0100               	movlb	0	; () banked
 23987  014838  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 23988  01483A  0100               	movlb	0	; () banked
 23989  01483C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23990  01483E  0100               	movlb	0	; () banked
 23991  014840  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 23992                           
 23993                           ; BSR set to: 0
 23994  014842  0100               	movlb	0	; () banked
 23995  014844  816C               	bsf	___awdiv@quotient& (0+255),0,b
 23996  014846                     l2332:
 23997                           
 23998                           ; BSR set to: 0
 23999                           
 24000                           ; BSR set to: 0
 24001  014846  0100               	movlb	0	; () banked
 24002  014848  90D8               	bcf	status,0,c
 24003  01484A  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 24004  01484C  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 24005                           
 24006                           ; BSR set to: 0
 24007  01484E  0100               	movlb	0	; () banked
 24008  014850  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 24009  014852  D7E1               	goto	u9470
 24010  014854                     l2333:
 24011                           
 24012                           ; BSR set to: 0
 24013                           
 24014                           ; BSR set to: 0
 24015                           
 24016                           ; BSR set to: 0
 24017  014854  0100               	movlb	0	; () banked
 24018  014856  516B               	movf	___awdiv@sign& (0+255),w,b
 24019  014858  0100               	movlb	0	; () banked
 24020  01485A  B4D8               	btfsc	status,2,c
 24021  01485C  D005               	goto	l2334
 24022                           
 24023                           ; BSR set to: 0
 24024  01485E  0100               	movlb	0	; () banked
 24025  014860  6D6C               	negf	___awdiv@quotient& (0+255),b
 24026  014862  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 24027  014864  B0D8               	btfsc	status,0,c
 24028  014866  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 24029  014868                     l2334:
 24030                           
 24031                           ; BSR set to: 0
 24032                           
 24033                           ; BSR set to: 0
 24034  014868  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 24035  01486C  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 24036  014870  0012               	return	
 24037  014872                     __end_of___awdiv:
 24038                           	opt stack 0
 24039                           tosu	equ	0xFFF
 24040                           tosh	equ	0xFFE
 24041                           tosl	equ	0xFFD
 24042                           pclath	equ	0xFFA
 24043                           tblptru	equ	0xFF8
 24044                           tblptrh	equ	0xFF7
 24045                           tblptrl	equ	0xFF6
 24046                           tablat	equ	0xFF5
 24047                           prodh	equ	0xFF4
 24048                           prodl	equ	0xFF3
 24049                           intcon	equ	0xFF2
 24050                           indf0	equ	0xFEF
 24051                           postinc0	equ	0xFEE
 24052                           fsr0h	equ	0xFEA
 24053                           fsr0l	equ	0xFE9
 24054                           wreg	equ	0xFE8
 24055                           indf1	equ	0xFE7
 24056                           postdec1	equ	0xFE5
 24057                           fsr1h	equ	0xFE2
 24058                           fsr1l	equ	0xFE1
 24059                           indf2	equ	0xFDF
 24060                           postinc2	equ	0xFDE
 24061                           postdec2	equ	0xFDD
 24062                           plusw2	equ	0xFDB
 24063                           fsr2h	equ	0xFDA
 24064                           fsr2l	equ	0xFD9
 24065                           status	equ	0xFD8
 24066                           
 24067 ;; *************** function _Console_IncrementCursor *****************
 24068 ;; Defined at:
 24069 ;;		line 243 in file "Library/Console.c"
 24070 ;; Parameters:    Size  Location     Type
 24071 ;;		None
 24072 ;; Auto vars:     Size  Location     Type
 24073 ;;		None
 24074 ;; Return value:  Size  Location     Type
 24075 ;;                  1    wreg      unsigned char 
 24076 ;; Registers used:
 24077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24078 ;; Tracked objects:
 24079 ;;		On entry : 0/0
 24080 ;;		On exit  : 0/0
 24081 ;;		Unchanged: 0/0
 24082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24087 ;;Total ram usage:        2 bytes
 24088 ;; Hardware stack levels used:    1
 24089 ;; Hardware stack levels required when called:    8
 24090 ;; This function calls:
 24091 ;;		_Console_FormFeed
 24092 ;;		_Console_NewLine
 24093 ;; This function is called by:
 24094 ;;		_Console_Tab
 24095 ;;		_Console_PrintChar
 24096 ;; This function uses a non-reentrant model
 24097 ;;
 24098                           
 24099                           	psect	text124
 24100  015DBA                     __ptext124:
 24101                           	opt stack 0
 24102  015DBA                     _Console_IncrementCursor:
 24103                           	opt stack 18
 24104                           
 24105                           ;Console.c: 246: lBufferX += 1;
 24106                           
 24107                           ; BSR set to: 0
 24108                           ;incstack = 0
 24109  015DBA  0100               	movlb	0	; () banked
 24110  015DBC  2BF8               	incf	_lBufferX& (0+255),f,b
 24111                           
 24112                           ; BSR set to: 0
 24113                           ;Console.c: 248: gCursor.x += 6;
 24114  015DBE  0E06               	movlw	6
 24115  015DC0  2646               	addwf	_gCursor,f,c
 24116  015DC2  0E00               	movlw	0
 24117  015DC4  2247               	addwfc	_gCursor+1,f,c
 24118                           
 24119                           ; BSR set to: 0
 24120                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 24121  015DC6  0E06               	movlw	6
 24122  015DC8  2446               	addwf	_gCursor,w,c
 24123  015DCA  0100               	movlb	0	; () banked
 24124  015DCC  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24125  015DCE  0E00               	movlw	0
 24126  015DD0  2047               	addwfc	_gCursor+1,w,c
 24127  015DD2  0100               	movlb	0	; () banked
 24128  015DD4  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24129  015DD6  0100               	movlb	0	; () banked
 24130  015DD8  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24131  015DDA  D009               	goto	l1004
 24132  015DDC  0100               	movlb	0	; () banked
 24133  015DDE  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24134  015DE0  E104               	bnz	u9380
 24135  015DE2  0E80               	movlw	128
 24136  015DE4  0100               	movlb	0	; () banked
 24137  015DE6  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24138  015DE8  B0D8               	btfsc	status,0,c
 24139  015DEA                     u9380:
 24140                           
 24141                           ; BSR set to: 0
 24142                           ;Console.c: 250: Console_NewLine();
 24143  015DEA  ECF7  F0A8         	call	_Console_NewLine	;wreg free
 24144  015DEE                     l1004:
 24145                           
 24146                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 24147  015DEE  0E08               	movlw	8
 24148  015DF0  2448               	addwf	_gCursor+2,w,c
 24149  015DF2  0100               	movlb	0	; () banked
 24150  015DF4  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24151  015DF6  0E00               	movlw	0
 24152  015DF8  2049               	addwfc	_gCursor+3,w,c
 24153  015DFA  0100               	movlb	0	; () banked
 24154  015DFC  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24155  015DFE  0100               	movlb	0	; () banked
 24156  015E00  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24157  015E02  D00C               	goto	l1005
 24158  015E04  0100               	movlb	0	; () banked
 24159  015E06  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24160  015E08  E105               	bnz	u9390
 24161  015E0A  0E80               	movlw	128
 24162  015E0C  0100               	movlb	0	; () banked
 24163  015E0E  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24164  015E10  A0D8               	btfss	status,0,c
 24165  015E12  D004               	goto	l1005
 24166  015E14                     u9390:
 24167                           
 24168                           ; BSR set to: 0
 24169                           ;Console.c: 252: {
 24170                           ;Console.c: 253: Console_FormFeed();
 24171  015E14  EC2A  F0AA         	call	_Console_FormFeed	;wreg free
 24172                           
 24173                           ;Console.c: 254: return 1;
 24174  015E18  0E01               	movlw	1
 24175  015E1A  0012               	return	
 24176  015E1C                     l1005:
 24177                           
 24178                           ;Console.c: 255: }
 24179                           ;Console.c: 257: return 0;
 24180  015E1C  0E00               	movlw	0
 24181  015E1E  0012               	return	
 24182  015E20                     __end_of_Console_IncrementCursor:
 24183                           	opt stack 0
 24184                           tosu	equ	0xFFF
 24185                           tosh	equ	0xFFE
 24186                           tosl	equ	0xFFD
 24187                           pclath	equ	0xFFA
 24188                           tblptru	equ	0xFF8
 24189                           tblptrh	equ	0xFF7
 24190                           tblptrl	equ	0xFF6
 24191                           tablat	equ	0xFF5
 24192                           prodh	equ	0xFF4
 24193                           prodl	equ	0xFF3
 24194                           intcon	equ	0xFF2
 24195                           indf0	equ	0xFEF
 24196                           postinc0	equ	0xFEE
 24197                           fsr0h	equ	0xFEA
 24198                           fsr0l	equ	0xFE9
 24199                           wreg	equ	0xFE8
 24200                           indf1	equ	0xFE7
 24201                           postdec1	equ	0xFE5
 24202                           fsr1h	equ	0xFE2
 24203                           fsr1l	equ	0xFE1
 24204                           indf2	equ	0xFDF
 24205                           postinc2	equ	0xFDE
 24206                           postdec2	equ	0xFDD
 24207                           plusw2	equ	0xFDB
 24208                           fsr2h	equ	0xFDA
 24209                           fsr2l	equ	0xFD9
 24210                           status	equ	0xFD8
 24211                           
 24212 ;; *************** function _Console_NewLine *****************
 24213 ;; Defined at:
 24214 ;;		line 175 in file "Library/Console.c"
 24215 ;; Parameters:    Size  Location     Type
 24216 ;;		None
 24217 ;; Auto vars:     Size  Location     Type
 24218 ;;		None
 24219 ;; Return value:  Size  Location     Type
 24220 ;;                  1    wreg      void 
 24221 ;; Registers used:
 24222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24223 ;; Tracked objects:
 24224 ;;		On entry : 0/0
 24225 ;;		On exit  : 0/0
 24226 ;;		Unchanged: 0/0
 24227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24232 ;;Total ram usage:        2 bytes
 24233 ;; Hardware stack levels used:    1
 24234 ;; Hardware stack levels required when called:    7
 24235 ;; This function calls:
 24236 ;;		Nothing
 24237 ;; This function is called by:
 24238 ;;		_Console_IncrementCursor
 24239 ;;		_Console_PrintChar
 24240 ;; This function uses a non-reentrant model
 24241 ;;
 24242                           
 24243                           	psect	text125
 24244  0151EE                     __ptext125:
 24245                           	opt stack 0
 24246  0151EE                     _Console_NewLine:
 24247                           	opt stack 18
 24248                           
 24249                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 24250                           
 24251                           ;incstack = 0
 24252  0151EE  D03E               	goto	l983
 24253  0151F0                     
 24254                           ;Console.c: 179: {
 24255                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 24256  0151F0  0100               	movlb	0	; () banked
 24257  0151F2  51F7               	movf	_lBufferY& (0+255),w,b
 24258  0151F4  0D14               	mullw	20
 24259  0151F6  0E7B               	movlw	low _lBuffer
 24260  0151F8  0100               	movlb	0	; () banked
 24261  0151FA  6F60               	movwf	??_Console_NewLine& (0+255),b
 24262  0151FC  0E02               	movlw	high _lBuffer
 24263  0151FE  0100               	movlb	0	; () banked
 24264  015200  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 24265  015202  50F3               	movf	prodl,w,c
 24266  015204  0100               	movlb	0	; () banked
 24267  015206  2760               	addwf	??_Console_NewLine& (0+255),f,b
 24268  015208  50F4               	movf	prodh,w,c
 24269  01520A  0100               	movlb	0	; () banked
 24270  01520C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 24271  01520E  0100               	movlb	0	; () banked
 24272  015210  51F8               	movf	_lBufferX& (0+255),w,b
 24273  015212  0D01               	mullw	1
 24274  015214  50F3               	movf	prodl,w,c
 24275  015216  0100               	movlb	0	; () banked
 24276  015218  2560               	addwf	??_Console_NewLine& (0+255),w,b
 24277  01521A  6ED9               	movwf	fsr2l,c
 24278  01521C  50F4               	movf	prodh,w,c
 24279  01521E  0100               	movlb	0	; () banked
 24280  015220  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 24281  015222  6EDA               	movwf	fsr2h,c
 24282  015224  50DF               	movf	indf2,w,c
 24283  015226  B4D8               	btfsc	status,2,c
 24284  015228  D01F               	goto	l985
 24285                           
 24286                           ; BSR set to: 0
 24287                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 24288  01522A  0E01               	movlw	1
 24289  01522C  0100               	movlb	0	; () banked
 24290  01522E  6FFC               	movwf	_change& (0+255),b
 24291                           
 24292                           ; BSR set to: 0
 24293  015230  0100               	movlb	0	; () banked
 24294  015232  51F7               	movf	_lBufferY& (0+255),w,b
 24295  015234  0D14               	mullw	20
 24296  015236  0E7B               	movlw	low _lBuffer
 24297  015238  0100               	movlb	0	; () banked
 24298  01523A  6F60               	movwf	??_Console_NewLine& (0+255),b
 24299  01523C  0E02               	movlw	high _lBuffer
 24300  01523E  0100               	movlb	0	; () banked
 24301  015240  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 24302  015242  50F3               	movf	prodl,w,c
 24303  015244  0100               	movlb	0	; () banked
 24304  015246  2760               	addwf	??_Console_NewLine& (0+255),f,b
 24305  015248  50F4               	movf	prodh,w,c
 24306  01524A  0100               	movlb	0	; () banked
 24307  01524C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 24308  01524E  0100               	movlb	0	; () banked
 24309  015250  51F8               	movf	_lBufferX& (0+255),w,b
 24310  015252  0D01               	mullw	1
 24311  015254  50F3               	movf	prodl,w,c
 24312  015256  0100               	movlb	0	; () banked
 24313  015258  2560               	addwf	??_Console_NewLine& (0+255),w,b
 24314  01525A  6ED9               	movwf	fsr2l,c
 24315  01525C  50F4               	movf	prodh,w,c
 24316  01525E  0100               	movlb	0	; () banked
 24317  015260  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 24318  015262  6EDA               	movwf	fsr2h,c
 24319  015264  0E80               	movlw	128
 24320  015266  6EDF               	movwf	indf2,c
 24321  015268                     l985:
 24322                           
 24323                           ; BSR set to: 0
 24324                           ;Console.c: 182: lBufferX ++;
 24325                           
 24326                           ; BSR set to: 0
 24327  015268  0100               	movlb	0	; () banked
 24328  01526A  2BF8               	incf	_lBufferX& (0+255),f,b
 24329  01526C                     l983:
 24330                           
 24331                           ; BSR set to: 0
 24332  01526C  0E13               	movlw	19
 24333  01526E  0100               	movlb	0	; () banked
 24334  015270  65F8               	cpfsgt	_lBufferX& (0+255),b
 24335  015272  D7BE               	goto	l984
 24336                           
 24337                           ; BSR set to: 0
 24338                           ;Console.c: 183: }
 24339                           ;Console.c: 185: lBufferX = 0;
 24340                           
 24341                           ; BSR set to: 0
 24342  015274  0E00               	movlw	0
 24343  015276  0100               	movlb	0	; () banked
 24344  015278  6FF8               	movwf	_lBufferX& (0+255),b
 24345                           
 24346                           ; BSR set to: 0
 24347                           ;Console.c: 186: lBufferY ++;
 24348  01527A  0100               	movlb	0	; () banked
 24349  01527C  2BF7               	incf	_lBufferY& (0+255),f,b
 24350                           
 24351                           ; BSR set to: 0
 24352                           ;Console.c: 188: gCursor.y += 8;
 24353  01527E  0E08               	movlw	8
 24354  015280  2648               	addwf	_gCursor+2,f,c
 24355  015282  0E00               	movlw	0
 24356  015284  2249               	addwfc	_gCursor+3,f,c
 24357                           
 24358                           ; BSR set to: 0
 24359                           ;Console.c: 189: gCursor.x = 6;
 24360  015286  0E00               	movlw	0
 24361  015288  6E47               	movwf	_gCursor+1,c
 24362  01528A  0E06               	movlw	6
 24363  01528C  6E46               	movwf	_gCursor,c
 24364                           
 24365                           ; BSR set to: 0
 24366  01528E  0012               	return		;funcret
 24367  015290                     __end_of_Console_NewLine:
 24368                           	opt stack 0
 24369                           tosu	equ	0xFFF
 24370                           tosh	equ	0xFFE
 24371                           tosl	equ	0xFFD
 24372                           pclath	equ	0xFFA
 24373                           tblptru	equ	0xFF8
 24374                           tblptrh	equ	0xFF7
 24375                           tblptrl	equ	0xFF6
 24376                           tablat	equ	0xFF5
 24377                           prodh	equ	0xFF4
 24378                           prodl	equ	0xFF3
 24379                           intcon	equ	0xFF2
 24380                           indf0	equ	0xFEF
 24381                           postinc0	equ	0xFEE
 24382                           fsr0h	equ	0xFEA
 24383                           fsr0l	equ	0xFE9
 24384                           wreg	equ	0xFE8
 24385                           indf1	equ	0xFE7
 24386                           postdec1	equ	0xFE5
 24387                           fsr1h	equ	0xFE2
 24388                           fsr1l	equ	0xFE1
 24389                           indf2	equ	0xFDF
 24390                           postinc2	equ	0xFDE
 24391                           postdec2	equ	0xFDD
 24392                           plusw2	equ	0xFDB
 24393                           fsr2h	equ	0xFDA
 24394                           fsr2l	equ	0xFD9
 24395                           status	equ	0xFD8
 24396                           
 24397 ;; *************** function _Console_FormFeed *****************
 24398 ;; Defined at:
 24399 ;;		line 192 in file "Library/Console.c"
 24400 ;; Parameters:    Size  Location     Type
 24401 ;;		None
 24402 ;; Auto vars:     Size  Location     Type
 24403 ;;  y               1    3[BANK0 ] unsigned char 
 24404 ;;  x               1    2[BANK0 ] unsigned char 
 24405 ;; Return value:  Size  Location     Type
 24406 ;;                  1    wreg      void 
 24407 ;; Registers used:
 24408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24409 ;; Tracked objects:
 24410 ;;		On entry : 0/0
 24411 ;;		On exit  : 0/0
 24412 ;;		Unchanged: 0/0
 24413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24417 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24418 ;;Total ram usage:        4 bytes
 24419 ;; Hardware stack levels used:    1
 24420 ;; Hardware stack levels required when called:    7
 24421 ;; This function calls:
 24422 ;;		Nothing
 24423 ;; This function is called by:
 24424 ;;		_Console_IncrementCursor
 24425 ;;		_Console_PrintChar
 24426 ;; This function uses a non-reentrant model
 24427 ;;
 24428                           
 24429                           	psect	text126
 24430  015454                     __ptext126:
 24431                           	opt stack 0
 24432  015454                     _Console_FormFeed:
 24433                           	opt stack 18
 24434                           
 24435                           ;Console.c: 195: lBufferX = 0;
 24436                           
 24437                           ; BSR set to: 0
 24438                           ;incstack = 0
 24439  015454  0E00               	movlw	0
 24440  015456  0100               	movlb	0	; () banked
 24441  015458  6FF8               	movwf	_lBufferX& (0+255),b
 24442                           
 24443                           ;Console.c: 196: lBufferY = 0;
 24444  01545A  0E00               	movlw	0
 24445  01545C  0100               	movlb	0	; () banked
 24446  01545E  6FF7               	movwf	_lBufferY& (0+255),b
 24447                           
 24448                           ;Console.c: 197: UINT8 x, y;
 24449                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24450  015460  0E00               	movlw	0
 24451  015462  0100               	movlb	0	; () banked
 24452  015464  6F63               	movwf	Console_FormFeed@y& (0+255),b
 24453  015466                     l12082:
 24454                           
 24455                           ; BSR set to: 0
 24456  015466  0E0E               	movlw	14
 24457  015468  0100               	movlb	0	; () banked
 24458  01546A  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 24459  01546C  D001               	goto	l990
 24460  01546E  D02D               	goto	u9230
 24461  015470                     l990:
 24462                           
 24463                           ; BSR set to: 0
 24464                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24465                           
 24466                           ; BSR set to: 0
 24467  015470  0E00               	movlw	0
 24468  015472  0100               	movlb	0	; () banked
 24469  015474  6F62               	movwf	Console_FormFeed@x& (0+255),b
 24470  015476                     l12088:
 24471                           
 24472                           ; BSR set to: 0
 24473  015476  0E13               	movlw	19
 24474  015478  0100               	movlb	0	; () banked
 24475  01547A  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 24476  01547C  D001               	goto	l992
 24477  01547E  D022               	goto	u9220
 24478  015480                     l992:
 24479                           
 24480                           ; BSR set to: 0
 24481                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 24482                           
 24483                           ; BSR set to: 0
 24484  015480  0E01               	movlw	1
 24485  015482  0100               	movlb	0	; () banked
 24486  015484  6FFC               	movwf	_change& (0+255),b
 24487                           
 24488                           ; BSR set to: 0
 24489  015486  0100               	movlb	0	; () banked
 24490  015488  5163               	movf	Console_FormFeed@y& (0+255),w,b
 24491  01548A  0D14               	mullw	20
 24492  01548C  0E7B               	movlw	low _lBuffer
 24493  01548E  0100               	movlb	0	; () banked
 24494  015490  6F60               	movwf	??_Console_FormFeed& (0+255),b
 24495  015492  0E02               	movlw	high _lBuffer
 24496  015494  0100               	movlb	0	; () banked
 24497  015496  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 24498  015498  50F3               	movf	prodl,w,c
 24499  01549A  0100               	movlb	0	; () banked
 24500  01549C  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 24501  01549E  50F4               	movf	prodh,w,c
 24502  0154A0  0100               	movlb	0	; () banked
 24503  0154A2  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 24504  0154A4  0100               	movlb	0	; () banked
 24505  0154A6  5162               	movf	Console_FormFeed@x& (0+255),w,b
 24506  0154A8  0D01               	mullw	1
 24507  0154AA  50F3               	movf	prodl,w,c
 24508  0154AC  0100               	movlb	0	; () banked
 24509  0154AE  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 24510  0154B0  6ED9               	movwf	fsr2l,c
 24511  0154B2  50F4               	movf	prodh,w,c
 24512  0154B4  0100               	movlb	0	; () banked
 24513  0154B6  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 24514  0154B8  6EDA               	movwf	fsr2h,c
 24515  0154BA  0E80               	movlw	128
 24516  0154BC  6EDF               	movwf	indf2,c
 24517                           
 24518                           ; BSR set to: 0
 24519  0154BE  0100               	movlb	0	; () banked
 24520  0154C0  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 24521  0154C2  D7D9               	goto	l12088
 24522  0154C4                     u9220:
 24523                           
 24524                           ; BSR set to: 0
 24525                           
 24526                           ; BSR set to: 0
 24527  0154C4  0100               	movlb	0	; () banked
 24528  0154C6  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 24529  0154C8  D7CE               	goto	l12082
 24530  0154CA                     u9230:
 24531                           
 24532                           ; BSR set to: 0
 24533                           ;Console.c: 204: clearall = 1;
 24534                           
 24535                           ; BSR set to: 0
 24536  0154CA  0E01               	movlw	1
 24537  0154CC  0100               	movlb	0	; () banked
 24538  0154CE  6FF9               	movwf	_clearall& (0+255),b
 24539                           
 24540                           ;Console.c: 205: gCursor.x = 6;
 24541  0154D0  0E00               	movlw	0
 24542  0154D2  6E47               	movwf	_gCursor+1,c
 24543  0154D4  0E06               	movlw	6
 24544  0154D6  6E46               	movwf	_gCursor,c
 24545                           
 24546                           ;Console.c: 206: gCursor.y = 6;
 24547  0154D8  0E00               	movlw	0
 24548  0154DA  6E49               	movwf	_gCursor+3,c
 24549  0154DC  0E06               	movlw	6
 24550  0154DE  6E48               	movwf	_gCursor+2,c
 24551                           
 24552                           ; BSR set to: 0
 24553  0154E0  0012               	return		;funcret
 24554  0154E2                     __end_of_Console_FormFeed:
 24555                           	opt stack 0
 24556                           tosu	equ	0xFFF
 24557                           tosh	equ	0xFFE
 24558                           tosl	equ	0xFFD
 24559                           pclath	equ	0xFFA
 24560                           tblptru	equ	0xFF8
 24561                           tblptrh	equ	0xFF7
 24562                           tblptrl	equ	0xFF6
 24563                           tablat	equ	0xFF5
 24564                           prodh	equ	0xFF4
 24565                           prodl	equ	0xFF3
 24566                           intcon	equ	0xFF2
 24567                           indf0	equ	0xFEF
 24568                           postinc0	equ	0xFEE
 24569                           fsr0h	equ	0xFEA
 24570                           fsr0l	equ	0xFE9
 24571                           wreg	equ	0xFE8
 24572                           indf1	equ	0xFE7
 24573                           postdec1	equ	0xFE5
 24574                           fsr1h	equ	0xFE2
 24575                           fsr1l	equ	0xFE1
 24576                           indf2	equ	0xFDF
 24577                           postinc2	equ	0xFDE
 24578                           postdec2	equ	0xFDD
 24579                           plusw2	equ	0xFDB
 24580                           fsr2h	equ	0xFDA
 24581                           fsr2l	equ	0xFD9
 24582                           status	equ	0xFD8
 24583                           
 24584 ;; *************** function _Console_ResetCursor *****************
 24585 ;; Defined at:
 24586 ;;		line 297 in file "Library/Console.c"
 24587 ;; Parameters:    Size  Location     Type
 24588 ;;		None
 24589 ;; Auto vars:     Size  Location     Type
 24590 ;;		None
 24591 ;; Return value:  Size  Location     Type
 24592 ;;                  1    wreg      void 
 24593 ;; Registers used:
 24594 ;;		wreg, status,2
 24595 ;; Tracked objects:
 24596 ;;		On entry : 0/0
 24597 ;;		On exit  : 0/0
 24598 ;;		Unchanged: 0/0
 24599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24604 ;;Total ram usage:        0 bytes
 24605 ;; Hardware stack levels used:    1
 24606 ;; Hardware stack levels required when called:    7
 24607 ;; This function calls:
 24608 ;;		Nothing
 24609 ;; This function is called by:
 24610 ;;		_Console_PrintChar
 24611 ;; This function uses a non-reentrant model
 24612 ;;
 24613                           
 24614                           	psect	text127
 24615  016B10                     __ptext127:
 24616                           	opt stack 0
 24617  016B10                     _Console_ResetCursor:
 24618                           	opt stack 20
 24619                           
 24620                           ;Console.c: 299: gCursor.x = 6;
 24621                           
 24622                           ; BSR set to: 0
 24623                           ;incstack = 0
 24624  016B10  0E00               	movlw	0
 24625  016B12  6E47               	movwf	_gCursor+1,c
 24626  016B14  0E06               	movlw	6
 24627  016B16  6E46               	movwf	_gCursor,c
 24628                           
 24629                           ;Console.c: 300: gCursor.y = 6;
 24630  016B18  0E00               	movlw	0
 24631  016B1A  6E49               	movwf	_gCursor+3,c
 24632  016B1C  0E06               	movlw	6
 24633  016B1E  6E48               	movwf	_gCursor+2,c
 24634                           
 24635                           ;Console.c: 303: lBufferX = 0;
 24636  016B20  0E00               	movlw	0
 24637  016B22  0100               	movlb	0	; () banked
 24638  016B24  6FF8               	movwf	_lBufferX& (0+255),b
 24639                           
 24640                           ;Console.c: 304: lBufferY = 0;
 24641  016B26  0E00               	movlw	0
 24642  016B28  0100               	movlb	0	; () banked
 24643  016B2A  6FF7               	movwf	_lBufferY& (0+255),b
 24644                           
 24645                           ; BSR set to: 0
 24646  016B2C  0012               	return		;funcret
 24647  016B2E                     __end_of_Console_ResetCursor:
 24648                           	opt stack 0
 24649                           tosu	equ	0xFFF
 24650                           tosh	equ	0xFFE
 24651                           tosl	equ	0xFFD
 24652                           pclath	equ	0xFFA
 24653                           tblptru	equ	0xFF8
 24654                           tblptrh	equ	0xFF7
 24655                           tblptrl	equ	0xFF6
 24656                           tablat	equ	0xFF5
 24657                           prodh	equ	0xFF4
 24658                           prodl	equ	0xFF3
 24659                           intcon	equ	0xFF2
 24660                           indf0	equ	0xFEF
 24661                           postinc0	equ	0xFEE
 24662                           fsr0h	equ	0xFEA
 24663                           fsr0l	equ	0xFE9
 24664                           wreg	equ	0xFE8
 24665                           indf1	equ	0xFE7
 24666                           postdec1	equ	0xFE5
 24667                           fsr1h	equ	0xFE2
 24668                           fsr1l	equ	0xFE1
 24669                           indf2	equ	0xFDF
 24670                           postinc2	equ	0xFDE
 24671                           postdec2	equ	0xFDD
 24672                           plusw2	equ	0xFDB
 24673                           fsr2h	equ	0xFDA
 24674                           fsr2l	equ	0xFD9
 24675                           status	equ	0xFD8
 24676                           
 24677 ;; *************** function _Console_Backspace *****************
 24678 ;; Defined at:
 24679 ;;		line 209 in file "Library/Console.c"
 24680 ;; Parameters:    Size  Location     Type
 24681 ;;		None
 24682 ;; Auto vars:     Size  Location     Type
 24683 ;;		None
 24684 ;; Return value:  Size  Location     Type
 24685 ;;                  1    wreg      void 
 24686 ;; Registers used:
 24687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24688 ;; Tracked objects:
 24689 ;;		On entry : 0/0
 24690 ;;		On exit  : 0/0
 24691 ;;		Unchanged: 0/0
 24692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24697 ;;Total ram usage:        0 bytes
 24698 ;; Hardware stack levels used:    1
 24699 ;; Hardware stack levels required when called:    8
 24700 ;; This function calls:
 24701 ;;		_Console_ClearCursor
 24702 ;; This function is called by:
 24703 ;;		_Console_PrintChar
 24704 ;; This function uses a non-reentrant model
 24705 ;;
 24706                           
 24707                           	psect	text128
 24708  016008                     __ptext128:
 24709                           	opt stack 0
 24710  016008                     _Console_Backspace:
 24711                           	opt stack 19
 24712                           
 24713                           ;Console.c: 211: if (lBufferX > 0)
 24714                           
 24715                           ; BSR set to: 0
 24716                           ;incstack = 0
 24717  016008  0100               	movlb	0	; () banked
 24718  01600A  51F8               	movf	_lBufferX& (0+255),w,b
 24719  01600C  B4D8               	btfsc	status,2,c
 24720  01600E  D007               	goto	l997
 24721                           
 24722                           ; BSR set to: 0
 24723                           ;Console.c: 212: {
 24724                           ;Console.c: 213: gCursor.x -= 6;
 24725  016010  0EFA               	movlw	250
 24726  016012  2646               	addwf	_gCursor,f,c
 24727  016014  0EFF               	movlw	255
 24728  016016  2247               	addwfc	_gCursor+1,f,c
 24729                           
 24730                           ; BSR set to: 0
 24731                           ;Console.c: 216: lBufferX --;
 24732  016018  0100               	movlb	0	; () banked
 24733  01601A  07F8               	decf	_lBufferX& (0+255),f,b
 24734                           
 24735                           ;Console.c: 218: }
 24736  01601C  D020               	goto	l1000
 24737  01601E                     l997:
 24738                           
 24739                           ; BSR set to: 0
 24740                           ;Console.c: 219: else if (lBufferY > 0)
 24741                           
 24742                           ; BSR set to: 0
 24743  01601E  0100               	movlb	0	; () banked
 24744  016020  51F7               	movf	_lBufferY& (0+255),w,b
 24745  016022  B4D8               	btfsc	status,2,c
 24746  016024  D00E               	goto	l999
 24747                           
 24748                           ; BSR set to: 0
 24749                           ;Console.c: 220: {
 24750                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 24751  016026  0E00               	movlw	0
 24752  016028  6E47               	movwf	_gCursor+1,c
 24753  01602A  0E72               	movlw	114
 24754  01602C  6E46               	movwf	_gCursor,c
 24755                           
 24756                           ; BSR set to: 0
 24757                           ;Console.c: 222: gCursor.y -= 8;
 24758  01602E  0EF8               	movlw	248
 24759  016030  2648               	addwf	_gCursor+2,f,c
 24760  016032  0EFF               	movlw	255
 24761  016034  2249               	addwfc	_gCursor+3,f,c
 24762                           
 24763                           ; BSR set to: 0
 24764                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 24765  016036  0E13               	movlw	19
 24766  016038  0100               	movlb	0	; () banked
 24767  01603A  6FF8               	movwf	_lBufferX& (0+255),b
 24768                           
 24769                           ; BSR set to: 0
 24770                           ;Console.c: 226: lBufferY --;
 24771  01603C  0100               	movlb	0	; () banked
 24772  01603E  07F7               	decf	_lBufferY& (0+255),f,b
 24773                           
 24774                           ;Console.c: 228: }
 24775  016040  D00E               	goto	l1000
 24776  016042                     l999:
 24777                           
 24778                           ; BSR set to: 0
 24779                           ;Console.c: 229: else
 24780                           ;Console.c: 230: {
 24781                           ;Console.c: 231: gCursor.x = 6;
 24782                           
 24783                           ; BSR set to: 0
 24784  016042  0E00               	movlw	0
 24785  016044  6E47               	movwf	_gCursor+1,c
 24786  016046  0E06               	movlw	6
 24787  016048  6E46               	movwf	_gCursor,c
 24788                           
 24789                           ;Console.c: 232: gCursor.y = 6;
 24790  01604A  0E00               	movlw	0
 24791  01604C  6E49               	movwf	_gCursor+3,c
 24792  01604E  0E06               	movlw	6
 24793  016050  6E48               	movwf	_gCursor+2,c
 24794                           
 24795                           ;Console.c: 235: lBufferX = 0;
 24796  016052  0E00               	movlw	0
 24797  016054  0100               	movlb	0	; () banked
 24798  016056  6FF8               	movwf	_lBufferX& (0+255),b
 24799                           
 24800                           ;Console.c: 236: lBufferY = 0;
 24801  016058  0E00               	movlw	0
 24802  01605A  0100               	movlb	0	; () banked
 24803  01605C  6FF7               	movwf	_lBufferY& (0+255),b
 24804  01605E                     l1000:
 24805                           
 24806                           ; BSR set to: 0
 24807                           ;Console.c: 238: }
 24808                           ;Console.c: 240: Console_ClearCursor();
 24809                           
 24810                           ; BSR set to: 0
 24811                           
 24812                           ; BSR set to: 0
 24813  01605E  EC8A  F0B2         	call	_Console_ClearCursor	;wreg free
 24814  016062  0012               	return		;funcret
 24815  016064                     __end_of_Console_Backspace:
 24816                           	opt stack 0
 24817                           tosu	equ	0xFFF
 24818                           tosh	equ	0xFFE
 24819                           tosl	equ	0xFFD
 24820                           pclath	equ	0xFFA
 24821                           tblptru	equ	0xFF8
 24822                           tblptrh	equ	0xFF7
 24823                           tblptrl	equ	0xFF6
 24824                           tablat	equ	0xFF5
 24825                           prodh	equ	0xFF4
 24826                           prodl	equ	0xFF3
 24827                           intcon	equ	0xFF2
 24828                           indf0	equ	0xFEF
 24829                           postinc0	equ	0xFEE
 24830                           fsr0h	equ	0xFEA
 24831                           fsr0l	equ	0xFE9
 24832                           wreg	equ	0xFE8
 24833                           indf1	equ	0xFE7
 24834                           postdec1	equ	0xFE5
 24835                           fsr1h	equ	0xFE2
 24836                           fsr1l	equ	0xFE1
 24837                           indf2	equ	0xFDF
 24838                           postinc2	equ	0xFDE
 24839                           postdec2	equ	0xFDD
 24840                           plusw2	equ	0xFDB
 24841                           fsr2h	equ	0xFDA
 24842                           fsr2l	equ	0xFD9
 24843                           status	equ	0xFD8
 24844                           
 24845 ;; *************** function _Console_ClearCursor *****************
 24846 ;; Defined at:
 24847 ;;		line 308 in file "Library/Console.c"
 24848 ;; Parameters:    Size  Location     Type
 24849 ;;		None
 24850 ;; Auto vars:     Size  Location     Type
 24851 ;;		None
 24852 ;; Return value:  Size  Location     Type
 24853 ;;                  1    wreg      void 
 24854 ;; Registers used:
 24855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24856 ;; Tracked objects:
 24857 ;;		On entry : 0/0
 24858 ;;		On exit  : 0/0
 24859 ;;		Unchanged: 0/0
 24860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24865 ;;Total ram usage:        2 bytes
 24866 ;; Hardware stack levels used:    1
 24867 ;; Hardware stack levels required when called:    7
 24868 ;; This function calls:
 24869 ;;		Nothing
 24870 ;; This function is called by:
 24871 ;;		_Console_Backspace
 24872 ;;		_Console_Tab
 24873 ;; This function uses a non-reentrant model
 24874 ;;
 24875                           
 24876                           	psect	text129
 24877  016514                     __ptext129:
 24878                           	opt stack 0
 24879  016514                     _Console_ClearCursor:
 24880                           	opt stack 19
 24881                           
 24882                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 24883                           
 24884                           ;incstack = 0
 24885  016514  0E01               	movlw	1
 24886  016516  0100               	movlb	0	; () banked
 24887  016518  6FFC               	movwf	_change& (0+255),b
 24888                           
 24889                           ; BSR set to: 0
 24890  01651A  0100               	movlb	0	; () banked
 24891  01651C  51F7               	movf	_lBufferY& (0+255),w,b
 24892  01651E  0D14               	mullw	20
 24893  016520  0E7B               	movlw	low _lBuffer
 24894  016522  0100               	movlb	0	; () banked
 24895  016524  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 24896  016526  0E02               	movlw	high _lBuffer
 24897  016528  0100               	movlb	0	; () banked
 24898  01652A  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 24899  01652C  50F3               	movf	prodl,w,c
 24900  01652E  0100               	movlb	0	; () banked
 24901  016530  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 24902  016532  50F4               	movf	prodh,w,c
 24903  016534  0100               	movlb	0	; () banked
 24904  016536  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 24905  016538  0100               	movlb	0	; () banked
 24906  01653A  51F8               	movf	_lBufferX& (0+255),w,b
 24907  01653C  0D01               	mullw	1
 24908  01653E  50F3               	movf	prodl,w,c
 24909  016540  0100               	movlb	0	; () banked
 24910  016542  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 24911  016544  6ED9               	movwf	fsr2l,c
 24912  016546  50F4               	movf	prodh,w,c
 24913  016548  0100               	movlb	0	; () banked
 24914  01654A  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 24915  01654C  6EDA               	movwf	fsr2h,c
 24916  01654E  0E80               	movlw	128
 24917  016550  6EDF               	movwf	indf2,c
 24918                           
 24919                           ; BSR set to: 0
 24920  016552  0012               	return		;funcret
 24921  016554                     __end_of_Console_ClearCursor:
 24922                           	opt stack 0
 24923                           tosu	equ	0xFFF
 24924                           tosh	equ	0xFFE
 24925                           tosl	equ	0xFFD
 24926                           pclath	equ	0xFFA
 24927                           tblptru	equ	0xFF8
 24928                           tblptrh	equ	0xFF7
 24929                           tblptrl	equ	0xFF6
 24930                           tablat	equ	0xFF5
 24931                           prodh	equ	0xFF4
 24932                           prodl	equ	0xFF3
 24933                           intcon	equ	0xFF2
 24934                           indf0	equ	0xFEF
 24935                           postinc0	equ	0xFEE
 24936                           fsr0h	equ	0xFEA
 24937                           fsr0l	equ	0xFE9
 24938                           wreg	equ	0xFE8
 24939                           indf1	equ	0xFE7
 24940                           postdec1	equ	0xFE5
 24941                           fsr1h	equ	0xFE2
 24942                           fsr1l	equ	0xFE1
 24943                           indf2	equ	0xFDF
 24944                           postinc2	equ	0xFDE
 24945                           postdec2	equ	0xFDD
 24946                           plusw2	equ	0xFDB
 24947                           fsr2h	equ	0xFDA
 24948                           fsr2l	equ	0xFD9
 24949                           status	equ	0xFD8
 24950                           
 24951 ;; *************** function ___lwmod *****************
 24952 ;; Defined at:
 24953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 24954 ;; Parameters:    Size  Location     Type
 24955 ;;  dividend        2    7[BANK0 ] unsigned int 
 24956 ;;  divisor         2    9[BANK0 ] unsigned int 
 24957 ;; Auto vars:     Size  Location     Type
 24958 ;;  counter         1   11[BANK0 ] unsigned char 
 24959 ;; Return value:  Size  Location     Type
 24960 ;;                  2    7[BANK0 ] unsigned int 
 24961 ;; Registers used:
 24962 ;;		wreg, status,2, status,0
 24963 ;; Tracked objects:
 24964 ;;		On entry : 0/0
 24965 ;;		On exit  : 0/0
 24966 ;;		Unchanged: 0/0
 24967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24968 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24971 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24972 ;;Total ram usage:        5 bytes
 24973 ;; Hardware stack levels used:    1
 24974 ;; Hardware stack levels required when called:    7
 24975 ;; This function calls:
 24976 ;;		Nothing
 24977 ;; This function is called by:
 24978 ;;		_itos
 24979 ;;		_printf
 24980 ;; This function uses a non-reentrant model
 24981 ;;
 24982                           
 24983                           	psect	text130
 24984  015F4A                     __ptext130:
 24985                           	opt stack 0
 24986  015F4A                     ___lwmod:
 24987                           	opt stack 22
 24988                           
 24989                           ; BSR set to: 0
 24990                           ;incstack = 0
 24991  015F4A  0100               	movlb	0	; () banked
 24992  015F4C  5169               	movf	___lwmod@divisor& (0+255),w,b
 24993  015F4E  0100               	movlb	0	; () banked
 24994  015F50  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 24995  015F52  B4D8               	btfsc	status,2,c
 24996  015F54  D026               	goto	l2576
 24997                           
 24998                           ; BSR set to: 0
 24999  015F56  0E01               	movlw	1
 25000  015F58  0100               	movlb	0	; () banked
 25001  015F5A  6F6B               	movwf	___lwmod@counter& (0+255),b
 25002  015F5C  D006               	goto	l2571
 25003  015F5E                     
 25004                           ; BSR set to: 0
 25005                           
 25006                           ; BSR set to: 0
 25007  015F5E  0100               	movlb	0	; () banked
 25008  015F60  90D8               	bcf	status,0,c
 25009  015F62  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 25010  015F64  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 25011  015F66  0100               	movlb	0	; () banked
 25012  015F68  2B6B               	incf	___lwmod@counter& (0+255),f,b
 25013  015F6A                     l2571:
 25014                           
 25015                           ; BSR set to: 0
 25016                           
 25017                           ; BSR set to: 0
 25018  015F6A  0100               	movlb	0	; () banked
 25019  015F6C  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 25020  015F6E  D7F7               	goto	l2572
 25021  015F70                     u9280:
 25022                           
 25023                           ; BSR set to: 0
 25024                           
 25025                           ; BSR set to: 0
 25026                           
 25027                           ; BSR set to: 0
 25028  015F70  0100               	movlb	0	; () banked
 25029  015F72  5169               	movf	___lwmod@divisor& (0+255),w,b
 25030  015F74  0100               	movlb	0	; () banked
 25031  015F76  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 25032  015F78  0100               	movlb	0	; () banked
 25033  015F7A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25034  015F7C  0100               	movlb	0	; () banked
 25035  015F7E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 25036  015F80  A0D8               	btfss	status,0,c
 25037  015F82  D008               	goto	l2575
 25038                           
 25039                           ; BSR set to: 0
 25040  015F84  0100               	movlb	0	; () banked
 25041  015F86  5169               	movf	___lwmod@divisor& (0+255),w,b
 25042  015F88  0100               	movlb	0	; () banked
 25043  015F8A  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 25044  015F8C  0100               	movlb	0	; () banked
 25045  015F8E  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25046  015F90  0100               	movlb	0	; () banked
 25047  015F92  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 25048  015F94                     l2575:
 25049                           
 25050                           ; BSR set to: 0
 25051                           
 25052                           ; BSR set to: 0
 25053  015F94  0100               	movlb	0	; () banked
 25054  015F96  90D8               	bcf	status,0,c
 25055  015F98  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 25056  015F9A  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 25057                           
 25058                           ; BSR set to: 0
 25059  015F9C  0100               	movlb	0	; () banked
 25060  015F9E  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 25061  015FA0  D7E7               	goto	u9280
 25062  015FA2                     l2576:
 25063                           
 25064                           ; BSR set to: 0
 25065                           
 25066                           ; BSR set to: 0
 25067  015FA2  C067  F067         	movff	___lwmod@dividend,?___lwmod
 25068  015FA6  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 25069                           
 25070                           ; BSR set to: 0
 25071  015FAA  0012               	return		;funcret
 25072  015FAC                     __end_of___lwmod:
 25073                           	opt stack 0
 25074                           tosu	equ	0xFFF
 25075                           tosh	equ	0xFFE
 25076                           tosl	equ	0xFFD
 25077                           pclath	equ	0xFFA
 25078                           tblptru	equ	0xFF8
 25079                           tblptrh	equ	0xFF7
 25080                           tblptrl	equ	0xFF6
 25081                           tablat	equ	0xFF5
 25082                           prodh	equ	0xFF4
 25083                           prodl	equ	0xFF3
 25084                           intcon	equ	0xFF2
 25085                           indf0	equ	0xFEF
 25086                           postinc0	equ	0xFEE
 25087                           fsr0h	equ	0xFEA
 25088                           fsr0l	equ	0xFE9
 25089                           wreg	equ	0xFE8
 25090                           indf1	equ	0xFE7
 25091                           postdec1	equ	0xFE5
 25092                           fsr1h	equ	0xFE2
 25093                           fsr1l	equ	0xFE1
 25094                           indf2	equ	0xFDF
 25095                           postinc2	equ	0xFDE
 25096                           postdec2	equ	0xFDD
 25097                           plusw2	equ	0xFDB
 25098                           fsr2h	equ	0xFDA
 25099                           fsr2l	equ	0xFD9
 25100                           status	equ	0xFD8
 25101                           
 25102 ;; *************** function ___lwdiv *****************
 25103 ;; Defined at:
 25104 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 25105 ;; Parameters:    Size  Location     Type
 25106 ;;  dividend        2    0[BANK0 ] unsigned int 
 25107 ;;  divisor         2    2[BANK0 ] unsigned int 
 25108 ;; Auto vars:     Size  Location     Type
 25109 ;;  quotient        2    5[BANK0 ] unsigned int 
 25110 ;;  counter         1    4[BANK0 ] unsigned char 
 25111 ;; Return value:  Size  Location     Type
 25112 ;;                  2    0[BANK0 ] unsigned int 
 25113 ;; Registers used:
 25114 ;;		wreg, status,2, status,0
 25115 ;; Tracked objects:
 25116 ;;		On entry : 0/0
 25117 ;;		On exit  : 0/0
 25118 ;;		Unchanged: 0/0
 25119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25121 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25123 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25124 ;;Total ram usage:        7 bytes
 25125 ;; Hardware stack levels used:    1
 25126 ;; Hardware stack levels required when called:    7
 25127 ;; This function calls:
 25128 ;;		Nothing
 25129 ;; This function is called by:
 25130 ;;		_itos
 25131 ;;		_printf
 25132 ;; This function uses a non-reentrant model
 25133 ;;
 25134                           
 25135                           	psect	text131
 25136  01587C                     __ptext131:
 25137                           	opt stack 0
 25138  01587C                     ___lwdiv:
 25139                           	opt stack 22
 25140                           
 25141                           ; BSR set to: 0
 25142                           ;incstack = 0
 25143  01587C  0E00               	movlw	0
 25144  01587E  0100               	movlb	0	; () banked
 25145  015880  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 25146  015882  0E00               	movlw	0
 25147  015884  6F65               	movwf	___lwdiv@quotient& (0+255),b
 25148                           
 25149                           ; BSR set to: 0
 25150  015886  0100               	movlb	0	; () banked
 25151  015888  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25152  01588A  0100               	movlb	0	; () banked
 25153  01588C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 25154  01588E  B4D8               	btfsc	status,2,c
 25155  015890  D02C               	goto	l2566
 25156                           
 25157                           ; BSR set to: 0
 25158  015892  0E01               	movlw	1
 25159  015894  0100               	movlb	0	; () banked
 25160  015896  6F64               	movwf	___lwdiv@counter& (0+255),b
 25161  015898  D006               	goto	l2561
 25162  01589A                     
 25163                           ; BSR set to: 0
 25164                           
 25165                           ; BSR set to: 0
 25166  01589A  0100               	movlb	0	; () banked
 25167  01589C  90D8               	bcf	status,0,c
 25168  01589E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 25169  0158A0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 25170  0158A2  0100               	movlb	0	; () banked
 25171  0158A4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 25172  0158A6                     l2561:
 25173                           
 25174                           ; BSR set to: 0
 25175                           
 25176                           ; BSR set to: 0
 25177  0158A6  0100               	movlb	0	; () banked
 25178  0158A8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 25179  0158AA  D7F7               	goto	l2562
 25180  0158AC                     u9250:
 25181                           
 25182                           ; BSR set to: 0
 25183                           
 25184                           ; BSR set to: 0
 25185                           
 25186                           ; BSR set to: 0
 25187  0158AC  0100               	movlb	0	; () banked
 25188  0158AE  90D8               	bcf	status,0,c
 25189  0158B0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 25190  0158B2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 25191                           
 25192                           ; BSR set to: 0
 25193  0158B4  0100               	movlb	0	; () banked
 25194  0158B6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25195  0158B8  0100               	movlb	0	; () banked
 25196  0158BA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 25197  0158BC  0100               	movlb	0	; () banked
 25198  0158BE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25199  0158C0  0100               	movlb	0	; () banked
 25200  0158C2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 25201  0158C4  A0D8               	btfss	status,0,c
 25202  0158C6  D00A               	goto	l2565
 25203                           
 25204                           ; BSR set to: 0
 25205  0158C8  0100               	movlb	0	; () banked
 25206  0158CA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25207  0158CC  0100               	movlb	0	; () banked
 25208  0158CE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 25209  0158D0  0100               	movlb	0	; () banked
 25210  0158D2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25211  0158D4  0100               	movlb	0	; () banked
 25212  0158D6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 25213                           
 25214                           ; BSR set to: 0
 25215  0158D8  0100               	movlb	0	; () banked
 25216  0158DA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 25217  0158DC                     l2565:
 25218                           
 25219                           ; BSR set to: 0
 25220                           
 25221                           ; BSR set to: 0
 25222  0158DC  0100               	movlb	0	; () banked
 25223  0158DE  90D8               	bcf	status,0,c
 25224  0158E0  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 25225  0158E2  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 25226                           
 25227                           ; BSR set to: 0
 25228  0158E4  0100               	movlb	0	; () banked
 25229  0158E6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 25230  0158E8  D7E1               	goto	u9250
 25231  0158EA                     l2566:
 25232                           
 25233                           ; BSR set to: 0
 25234                           
 25235                           ; BSR set to: 0
 25236  0158EA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 25237  0158EE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 25238                           
 25239                           ; BSR set to: 0
 25240  0158F2  0012               	return		;funcret
 25241  0158F4                     __end_of___lwdiv:
 25242                           	opt stack 0
 25243                           tosu	equ	0xFFF
 25244                           tosh	equ	0xFFE
 25245                           tosl	equ	0xFFD
 25246                           pclath	equ	0xFFA
 25247                           tblptru	equ	0xFF8
 25248                           tblptrh	equ	0xFF7
 25249                           tblptrl	equ	0xFF6
 25250                           tablat	equ	0xFF5
 25251                           prodh	equ	0xFF4
 25252                           prodl	equ	0xFF3
 25253                           intcon	equ	0xFF2
 25254                           indf0	equ	0xFEF
 25255                           postinc0	equ	0xFEE
 25256                           fsr0h	equ	0xFEA
 25257                           fsr0l	equ	0xFE9
 25258                           wreg	equ	0xFE8
 25259                           indf1	equ	0xFE7
 25260                           postdec1	equ	0xFE5
 25261                           fsr1h	equ	0xFE2
 25262                           fsr1l	equ	0xFE1
 25263                           indf2	equ	0xFDF
 25264                           postinc2	equ	0xFDE
 25265                           postdec2	equ	0xFDD
 25266                           plusw2	equ	0xFDB
 25267                           fsr2h	equ	0xFDA
 25268                           fsr2l	equ	0xFD9
 25269                           status	equ	0xFD8
 25270                           
 25271 ;; *************** function _continuousMode *****************
 25272 ;; Defined at:
 25273 ;;		line 237 in file "main.c"
 25274 ;; Parameters:    Size  Location     Type
 25275 ;;		None
 25276 ;; Auto vars:     Size  Location     Type
 25277 ;;		None
 25278 ;; Return value:  Size  Location     Type
 25279 ;;                  1    wreg      void 
 25280 ;; Registers used:
 25281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25282 ;; Tracked objects:
 25283 ;;		On entry : 0/0
 25284 ;;		On exit  : 0/0
 25285 ;;		Unchanged: 0/0
 25286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25291 ;;Total ram usage:        0 bytes
 25292 ;; Hardware stack levels used:    1
 25293 ;; Hardware stack levels required when called:   10
 25294 ;; This function calls:
 25295 ;;		_Motor_Move
 25296 ;;		_Motor_Speed
 25297 ;; This function is called by:
 25298 ;;		_main
 25299 ;; This function uses a non-reentrant model
 25300 ;;
 25301                           
 25302                           	psect	text132
 25303  01680C                     __ptext132:
 25304                           	opt stack 0
 25305  01680C                     _continuousMode:
 25306                           	opt stack 20
 25307                           
 25308                           ;main.c: 238: Motor_Speed(&Stepper, speed);
 25309                           
 25310                           ; BSR set to: 0
 25311                           ;incstack = 0
 25312  01680C  0ECA               	movlw	low _Stepper
 25313  01680E  0100               	movlb	0	; () banked
 25314  016810  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
 25315  016812  0E01               	movlw	high _Stepper
 25316  016814  0100               	movlb	0	; () banked
 25317  016816  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
 25318  016818  C0E2  F07D         	movff	_speed,Motor_Speed@pFrequency
 25319  01681C  C0E3  F07E         	movff	_speed+1,Motor_Speed@pFrequency+1
 25320  016820  ECBE  F0B4         	call	_Motor_Speed	;wreg free
 25321                           
 25322                           ;main.c: 239: Motor_Move(&Stepper, direction);
 25323  016824  0ECA               	movlw	low _Stepper
 25324  016826  0100               	movlb	0	; () banked
 25325  016828  6F63               	movwf	Motor_Move@pMotor& (0+255),b
 25326  01682A  0E01               	movlw	high _Stepper
 25327  01682C  0100               	movlb	0	; () banked
 25328  01682E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 25329  016830  C1FA  F065         	movff	_direction,Motor_Move@pDelta
 25330  016834  C1FB  F066         	movff	_direction+1,Motor_Move@pDelta+1
 25331  016838  EC64  F0B3         	call	_Motor_Move	;wreg free
 25332  01683C  0012               	return		;funcret
 25333  01683E                     __end_of_continuousMode:
 25334                           	opt stack 0
 25335                           tosu	equ	0xFFF
 25336                           tosh	equ	0xFFE
 25337                           tosl	equ	0xFFD
 25338                           pclath	equ	0xFFA
 25339                           tblptru	equ	0xFF8
 25340                           tblptrh	equ	0xFF7
 25341                           tblptrl	equ	0xFF6
 25342                           tablat	equ	0xFF5
 25343                           prodh	equ	0xFF4
 25344                           prodl	equ	0xFF3
 25345                           intcon	equ	0xFF2
 25346                           indf0	equ	0xFEF
 25347                           postinc0	equ	0xFEE
 25348                           fsr0h	equ	0xFEA
 25349                           fsr0l	equ	0xFE9
 25350                           wreg	equ	0xFE8
 25351                           indf1	equ	0xFE7
 25352                           postdec1	equ	0xFE5
 25353                           fsr1h	equ	0xFE2
 25354                           fsr1l	equ	0xFE1
 25355                           indf2	equ	0xFDF
 25356                           postinc2	equ	0xFDE
 25357                           postdec2	equ	0xFDD
 25358                           plusw2	equ	0xFDB
 25359                           fsr2h	equ	0xFDA
 25360                           fsr2l	equ	0xFD9
 25361                           status	equ	0xFD8
 25362                           
 25363 ;; *************** function _Motor_Speed *****************
 25364 ;; Defined at:
 25365 ;;		line 117 in file "Library/Motor.c"
 25366 ;; Parameters:    Size  Location     Type
 25367 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 25368 ;;		 -> Stepper(6), 
 25369 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 25370 ;; Auto vars:     Size  Location     Type
 25371 ;;		None
 25372 ;; Return value:  Size  Location     Type
 25373 ;;                  1    wreg      unsigned char 
 25374 ;; Registers used:
 25375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25376 ;; Tracked objects:
 25377 ;;		On entry : 0/0
 25378 ;;		On exit  : 0/0
 25379 ;;		Unchanged: 0/0
 25380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25384 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25385 ;;Total ram usage:        4 bytes
 25386 ;; Hardware stack levels used:    1
 25387 ;; Hardware stack levels required when called:    9
 25388 ;; This function calls:
 25389 ;;		_Timer0_Init
 25390 ;; This function is called by:
 25391 ;;		_continuousMode
 25392 ;;		_stepMode
 25393 ;;		_positionMode
 25394 ;; This function uses a non-reentrant model
 25395 ;;
 25396                           
 25397                           	psect	text133
 25398  01697C                     __ptext133:
 25399                           	opt stack 0
 25400  01697C                     _Motor_Speed:
 25401                           	opt stack 20
 25402                           
 25403                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 25404                           
 25405                           ;incstack = 0
 25406  01697C  0100               	movlb	0	; () banked
 25407  01697E  EE20 F002          	lfsr	2,2
 25408  016982  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 25409  016984  26D9               	addwf	fsr2l,f,c
 25410  016986  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 25411  016988  22DA               	addwfc	fsr2h,f,c
 25412  01698A  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 25413  01698E  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 25414                           
 25415                           ; BSR set to: 0
 25416                           ;Motor.c: 120: Timer0_Init(pFrequency);
 25417  016992  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 25418  016996  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 25419  01699A  0100               	movlb	0	; () banked
 25420  01699C  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 25421  01699E  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 25422  0169A0  ECAA  F09B         	call	_Timer0_Init	;wreg free
 25423  0169A4  0012               	return	
 25424  0169A6                     __end_of_Motor_Speed:
 25425                           	opt stack 0
 25426                           tosu	equ	0xFFF
 25427                           tosh	equ	0xFFE
 25428                           tosl	equ	0xFFD
 25429                           pclath	equ	0xFFA
 25430                           tblptru	equ	0xFF8
 25431                           tblptrh	equ	0xFF7
 25432                           tblptrl	equ	0xFF6
 25433                           tablat	equ	0xFF5
 25434                           prodh	equ	0xFF4
 25435                           prodl	equ	0xFF3
 25436                           intcon	equ	0xFF2
 25437                           indf0	equ	0xFEF
 25438                           postinc0	equ	0xFEE
 25439                           fsr0h	equ	0xFEA
 25440                           fsr0l	equ	0xFE9
 25441                           wreg	equ	0xFE8
 25442                           indf1	equ	0xFE7
 25443                           postdec1	equ	0xFE5
 25444                           fsr1h	equ	0xFE2
 25445                           fsr1l	equ	0xFE1
 25446                           indf2	equ	0xFDF
 25447                           postinc2	equ	0xFDE
 25448                           postdec2	equ	0xFDD
 25449                           plusw2	equ	0xFDB
 25450                           fsr2h	equ	0xFDA
 25451                           fsr2l	equ	0xFD9
 25452                           status	equ	0xFD8
 25453                           
 25454 ;; *************** function _Timer0_Init *****************
 25455 ;; Defined at:
 25456 ;;		line 25 in file "Library/Timer0.c"
 25457 ;; Parameters:    Size  Location     Type
 25458 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 25459 ;; Auto vars:     Size  Location     Type
 25460 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 25461 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 25462 ;; Return value:  Size  Location     Type
 25463 ;;                  1    wreg      void 
 25464 ;; Registers used:
 25465 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25466 ;; Tracked objects:
 25467 ;;		On entry : 0/0
 25468 ;;		On exit  : 0/0
 25469 ;;		Unchanged: 0/0
 25470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25472 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25474 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25475 ;;Total ram usage:       14 bytes
 25476 ;; Hardware stack levels used:    1
 25477 ;; Hardware stack levels required when called:    8
 25478 ;; This function calls:
 25479 ;;		_Timer0_Clear
 25480 ;;		___lldiv
 25481 ;; This function is called by:
 25482 ;;		_Motor_Init
 25483 ;;		_Motor_Speed
 25484 ;; This function uses a non-reentrant model
 25485 ;;
 25486                           
 25487                           	psect	text134
 25488  013754                     __ptext134:
 25489                           	opt stack 0
 25490  013754                     _Timer0_Init:
 25491                           	opt stack 20
 25492                           
 25493                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 25494                           
 25495                           ;incstack = 0
 25496  013754  0E80               	movlw	128
 25497  013756  0100               	movlb	0	; () banked
 25498  013758  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 25499  01375A  0E8D               	movlw	141
 25500  01375C  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 25501  01375E  0E5B               	movlw	91
 25502  013760  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 25503  013762  0E00               	movlw	0
 25504  013764  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 25505                           
 25506                           ; BSR set to: 0
 25507                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 25508                           ;Timer0.c: 31: static UINT8 PRE = 0;
 25509                           ;Timer0.c: 32: static UINT32 DIV = 0;
 25510                           ;Timer0.c: 34: UINT32 DIVIDE;
 25511                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 25512  013766  9ED5               	bcf	4053,7,c	;volatile
 25513                           
 25514                           ; BSR set to: 0
 25515                           ;Timer0.c: 38: if (pFrequency == 0)
 25516  013768  0100               	movlb	0	; () banked
 25517  01376A  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 25518  01376C  0100               	movlb	0	; () banked
 25519  01376E  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 25520  013770  0100               	movlb	0	; () banked
 25521  013772  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 25522  013774  0100               	movlb	0	; () banked
 25523  013776  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 25524  013778  B4D8               	btfsc	status,2,c
 25525  01377A  0012               	return	
 25526                           
 25527                           ; BSR set to: 0
 25528                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 25529                           
 25530                           ; BSR set to: 0
 25531                           ;Timer0.c: 39: return;
 25532  01377C  96D5               	bcf	4053,3,c	;volatile
 25533                           
 25534                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 25535  01377E  9CD5               	bcf	4053,6,c	;volatile
 25536                           
 25537                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 25538  013780  9AD5               	bcf	4053,5,c	;volatile
 25539                           
 25540                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 25541  013782  98D5               	bcf	4053,4,c	;volatile
 25542                           
 25543                           ; BSR set to: 0
 25544                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 25545  013784  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 25546  013788  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 25547  01378C  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 25548  013790  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 25549  013794  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 25550  013798  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 25551  01379C  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 25552  0137A0  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 25553  0137A4  EC39  F0A4         	call	___lldiv	;wreg free
 25554  0137A8  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 25555  0137AC  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 25556  0137B0  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 25557  0137B4  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 25558                           
 25559                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 25560  0137B8  D00C               	goto	l1787
 25561  0137BA                     l13760:
 25562                           
 25563                           ;Timer0.c: 50: {
 25564                           ;Timer0.c: 51: INDEX ++;
 25565  0137BA  0100               	movlb	0	; () banked
 25566  0137BC  2BF6               	incf	_INDEX& (0+255),f,b
 25567                           
 25568                           ; BSR set to: 0
 25569                           ;Timer0.c: 52: if (INDEX >= 3)
 25570  0137BE  0E02               	movlw	2
 25571  0137C0  0100               	movlb	0	; () banked
 25572  0137C2  65F6               	cpfsgt	_INDEX& (0+255),b
 25573  0137C4  D001               	goto	l1785
 25574  0137C6  D02F               	goto	u11110
 25575  0137C8                     l1785:
 25576                           
 25577                           ; BSR set to: 0
 25578                           ;Timer0.c: 56: if (INDEX >= 8)
 25579                           
 25580                           ; BSR set to: 0
 25581  0137C8  0E07               	movlw	7
 25582  0137CA  0100               	movlb	0	; () banked
 25583  0137CC  65F6               	cpfsgt	_INDEX& (0+255),b
 25584  0137CE  D001               	goto	l1787
 25585  0137D0  0012               	return	
 25586  0137D2                     l1787:
 25587                           
 25588                           ; BSR set to: 0
 25589                           
 25590                           ; BSR set to: 0
 25591  0137D2  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 25592  0137D6  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 25593  0137DA  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 25594  0137DE  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 25595  0137E2  0100               	movlb	0	; () banked
 25596  0137E4  51F6               	movf	_INDEX& (0+255),w,b
 25597  0137E6  0D02               	mullw	2
 25598  0137E8  0E95               	movlw	low Timer0_Init@PRESCALE
 25599  0137EA  24F3               	addwf	prodl,w,c
 25600  0137EC  6EF6               	movwf	tblptrl,c
 25601  0137EE  0EFC               	movlw	high Timer0_Init@PRESCALE
 25602  0137F0  20F4               	addwfc	prodh,w,c
 25603  0137F2  6EF7               	movwf	tblptrh,c
 25604  0137F4                     	if	1	;There are 3 active tblptr bytes
 25605  0137F4  6AF8               	clrf	tblptru,c
 25606  0137F6  0E00               	movlw	low (__mediumconst shr (0+16))
 25607  0137F8  22F8               	addwfc	tblptru,f,c
 25608  0137FA                     	endif
 25609  0137FA  0009               	tblrd		*+
 25610  0137FC  CFF5 F071          	movff	tablat,??_Timer0_Init
 25611  013800  0009               	tblrd		*+
 25612  013802  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 25613  013806  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 25614  01380A  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 25615  01380E  0100               	movlb	0	; () banked
 25616  013810  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 25617  013812  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 25618  013814  EC39  F0A4         	call	___lldiv	;wreg free
 25619  013818  0100               	movlb	0	; () banked
 25620  01381A  5163               	movf	(?___lldiv+3)& (0+255),w,b
 25621  01381C  E1CE               	bnz	l13760
 25622  01381E  0100               	movlb	0	; () banked
 25623  013820  0562               	decf	(?___lldiv+2)& (0+255),w,b
 25624  013822  B0D8               	btfsc	status,0,c
 25625  013824  D7CA               	goto	l1784
 25626  013826                     u11110:
 25627                           
 25628                           ; BSR set to: 0
 25629                           ;Timer0.c: 58: }
 25630                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 25631                           
 25632                           ; BSR set to: 0
 25633  013826  0100               	movlb	0	; () banked
 25634  013828  51F6               	movf	_INDEX& (0+255),w,b
 25635  01382A  0D02               	mullw	2
 25636  01382C  0E95               	movlw	low Timer0_Init@PRESCALE
 25637  01382E  24F3               	addwf	prodl,w,c
 25638  013830  6EF6               	movwf	tblptrl,c
 25639  013832  0EFC               	movlw	high Timer0_Init@PRESCALE
 25640  013834  20F4               	addwfc	prodh,w,c
 25641  013836  6EF7               	movwf	tblptrh,c
 25642  013838                     	if	1	;There are 3 active tblptr bytes
 25643  013838  6AF8               	clrf	tblptru,c
 25644  01383A  0E00               	movlw	low (__mediumconst shr (0+16))
 25645  01383C  22F8               	addwfc	tblptru,f,c
 25646  01383E                     	endif
 25647  01383E  0008               	tblrd		*
 25648  013840  CFF5 F0F5          	movff	tablat,Timer0_Init@PRE
 25649                           
 25650                           ; BSR set to: 0
 25651                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 25652  013844  0EFF               	movlw	255
 25653  013846  0100               	movlb	0	; () banked
 25654  013848  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 25655  01384A  0101               	movlb	1	; () banked
 25656  01384C  6F08               	movwf	Timer0_Init@DIV& (0+255),b
 25657  01384E  0EFF               	movlw	255
 25658  013850  0100               	movlb	0	; () banked
 25659  013852  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 25660  013854  0101               	movlb	1	; () banked
 25661  013856  6F09               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 25662  013858  0EFF               	movlw	255
 25663  01385A  0100               	movlb	0	; () banked
 25664  01385C  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 25665  01385E  0101               	movlb	1	; () banked
 25666  013860  6F0A               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 25667  013862  0EFF               	movlw	255
 25668  013864  0100               	movlb	0	; () banked
 25669  013866  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 25670  013868  0101               	movlb	1	; () banked
 25671  01386A  6F0B               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 25672                           
 25673                           ; BSR set to: 1
 25674                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 25675  01386C  C108  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 25676  013870  C109  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 25677  013874  C10A  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 25678  013878  C10B  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 25679  01387C  0100               	movlb	0	; () banked
 25680  01387E  51F5               	movf	Timer0_Init@PRE& (0+255),w,b
 25681  013880  0100               	movlb	0	; () banked
 25682  013882  6F64               	movwf	___lldiv@divisor& (0+255),b
 25683  013884  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 25684  013886  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 25685  013888  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 25686  01388A  EC39  F0A4         	call	___lldiv	;wreg free
 25687  01388E  0100               	movlb	0	; () banked
 25688  013890  1F60               	comf	?___lldiv& (0+255),f,b
 25689  013892  0100               	movlb	0	; () banked
 25690  013894  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 25691  013896  0100               	movlb	0	; () banked
 25692  013898  4B60               	infsnz	?___lldiv& (0+255),f,b
 25693  01389A  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 25694  01389C  0EFF               	movlw	255
 25695  01389E  0100               	movlb	0	; () banked
 25696  0138A0  2560               	addwf	?___lldiv& (0+255),w,b
 25697  0138A2  6E29               	movwf	_COUNTER,c
 25698  0138A4  0EFF               	movlw	255
 25699  0138A6  0100               	movlb	0	; () banked
 25700  0138A8  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 25701  0138AA  6E2A               	movwf	_COUNTER+1,c
 25702                           
 25703                           ; BSR set to: 0
 25704                           ;Timer0.c: 68: Timer0_Clear();
 25705  0138AC  EC69  F0B6         	call	_Timer0_Clear	;wreg free
 25706                           
 25707                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 25708  0138B0  8ED5               	bsf	4053,7,c	;volatile
 25709  0138B2  0012               	return		;funcret
 25710  0138B4                     __end_of_Timer0_Init:
 25711                           	opt stack 0
 25712                           tosu	equ	0xFFF
 25713                           tosh	equ	0xFFE
 25714                           tosl	equ	0xFFD
 25715                           pclath	equ	0xFFA
 25716                           tblptru	equ	0xFF8
 25717                           tblptrh	equ	0xFF7
 25718                           tblptrl	equ	0xFF6
 25719                           tablat	equ	0xFF5
 25720                           prodh	equ	0xFF4
 25721                           prodl	equ	0xFF3
 25722                           intcon	equ	0xFF2
 25723                           indf0	equ	0xFEF
 25724                           postinc0	equ	0xFEE
 25725                           fsr0h	equ	0xFEA
 25726                           fsr0l	equ	0xFE9
 25727                           wreg	equ	0xFE8
 25728                           indf1	equ	0xFE7
 25729                           postdec1	equ	0xFE5
 25730                           fsr1h	equ	0xFE2
 25731                           fsr1l	equ	0xFE1
 25732                           indf2	equ	0xFDF
 25733                           postinc2	equ	0xFDE
 25734                           postdec2	equ	0xFDD
 25735                           plusw2	equ	0xFDB
 25736                           fsr2h	equ	0xFDA
 25737                           fsr2l	equ	0xFD9
 25738                           status	equ	0xFD8
 25739                           
 25740 ;; *************** function ___lldiv *****************
 25741 ;; Defined at:
 25742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 25743 ;; Parameters:    Size  Location     Type
 25744 ;;  dividend        4    0[BANK0 ] unsigned long 
 25745 ;;  divisor         4    4[BANK0 ] unsigned long 
 25746 ;; Auto vars:     Size  Location     Type
 25747 ;;  quotient        4    8[BANK0 ] unsigned long 
 25748 ;;  counter         1   12[BANK0 ] unsigned char 
 25749 ;; Return value:  Size  Location     Type
 25750 ;;                  4    0[BANK0 ] unsigned long 
 25751 ;; Registers used:
 25752 ;;		wreg, status,2, status,0
 25753 ;; Tracked objects:
 25754 ;;		On entry : 0/0
 25755 ;;		On exit  : 0/0
 25756 ;;		Unchanged: 0/0
 25757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25758 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25759 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25761 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25762 ;;Total ram usage:       13 bytes
 25763 ;; Hardware stack levels used:    1
 25764 ;; Hardware stack levels required when called:    7
 25765 ;; This function calls:
 25766 ;;		Nothing
 25767 ;; This function is called by:
 25768 ;;		_Timer0_Init
 25769 ;;		_Timer2_Init
 25770 ;;		_rand_between
 25771 ;;		_I2C_Init
 25772 ;; This function uses a non-reentrant model
 25773 ;;
 25774                           
 25775                           	psect	text135
 25776  014872                     __ptext135:
 25777                           	opt stack 0
 25778  014872                     ___lldiv:
 25779                           	opt stack 20
 25780                           
 25781                           ;incstack = 0
 25782  014872  0E00               	movlw	0
 25783  014874  0100               	movlb	0	; () banked
 25784  014876  6F68               	movwf	___lldiv@quotient& (0+255),b
 25785  014878  0E00               	movlw	0
 25786  01487A  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 25787  01487C  0E00               	movlw	0
 25788  01487E  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 25789  014880  0E00               	movlw	0
 25790  014882  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 25791                           
 25792                           ; BSR set to: 0
 25793  014884  0100               	movlb	0	; () banked
 25794  014886  5164               	movf	___lldiv@divisor& (0+255),w,b
 25795  014888  0100               	movlb	0	; () banked
 25796  01488A  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 25797  01488C  0100               	movlb	0	; () banked
 25798  01488E  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 25799  014890  0100               	movlb	0	; () banked
 25800  014892  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 25801  014894  B4D8               	btfsc	status,2,c
 25802  014896  D042               	goto	l2513
 25803                           
 25804                           ; BSR set to: 0
 25805  014898  0E01               	movlw	1
 25806  01489A  0100               	movlb	0	; () banked
 25807  01489C  6F6C               	movwf	___lldiv@counter& (0+255),b
 25808  01489E  D008               	goto	l2508
 25809  0148A0                     
 25810                           ; BSR set to: 0
 25811                           
 25812                           ; BSR set to: 0
 25813  0148A0  0100               	movlb	0	; () banked
 25814  0148A2  90D8               	bcf	status,0,c
 25815  0148A4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 25816  0148A6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 25817  0148A8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 25818  0148AA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 25819  0148AC  0100               	movlb	0	; () banked
 25820  0148AE  2B6C               	incf	___lldiv@counter& (0+255),f,b
 25821  0148B0                     l2508:
 25822                           
 25823                           ; BSR set to: 0
 25824                           
 25825                           ; BSR set to: 0
 25826  0148B0  0100               	movlb	0	; () banked
 25827  0148B2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 25828  0148B4  D7F5               	goto	l2509
 25829  0148B6                     u9510:
 25830                           
 25831                           ; BSR set to: 0
 25832                           
 25833                           ; BSR set to: 0
 25834                           
 25835                           ; BSR set to: 0
 25836  0148B6  0100               	movlb	0	; () banked
 25837  0148B8  90D8               	bcf	status,0,c
 25838  0148BA  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 25839  0148BC  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 25840  0148BE  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 25841  0148C0  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 25842                           
 25843                           ; BSR set to: 0
 25844  0148C2  0100               	movlb	0	; () banked
 25845  0148C4  5164               	movf	___lldiv@divisor& (0+255),w,b
 25846  0148C6  0100               	movlb	0	; () banked
 25847  0148C8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 25848  0148CA  0100               	movlb	0	; () banked
 25849  0148CC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25850  0148CE  0100               	movlb	0	; () banked
 25851  0148D0  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 25852  0148D2  0100               	movlb	0	; () banked
 25853  0148D4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25854  0148D6  0100               	movlb	0	; () banked
 25855  0148D8  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 25856  0148DA  0100               	movlb	0	; () banked
 25857  0148DC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25858  0148DE  0100               	movlb	0	; () banked
 25859  0148E0  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 25860  0148E2  A0D8               	btfss	status,0,c
 25861  0148E4  D012               	goto	l2512
 25862                           
 25863                           ; BSR set to: 0
 25864  0148E6  0100               	movlb	0	; () banked
 25865  0148E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 25866  0148EA  0100               	movlb	0	; () banked
 25867  0148EC  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 25868  0148EE  0100               	movlb	0	; () banked
 25869  0148F0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25870  0148F2  0100               	movlb	0	; () banked
 25871  0148F4  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 25872  0148F6  0100               	movlb	0	; () banked
 25873  0148F8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25874  0148FA  0100               	movlb	0	; () banked
 25875  0148FC  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 25876  0148FE  0100               	movlb	0	; () banked
 25877  014900  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25878  014902  0100               	movlb	0	; () banked
 25879  014904  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 25880                           
 25881                           ; BSR set to: 0
 25882  014906  0100               	movlb	0	; () banked
 25883  014908  8168               	bsf	___lldiv@quotient& (0+255),0,b
 25884  01490A                     l2512:
 25885                           
 25886                           ; BSR set to: 0
 25887                           
 25888                           ; BSR set to: 0
 25889  01490A  0100               	movlb	0	; () banked
 25890  01490C  90D8               	bcf	status,0,c
 25891  01490E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 25892  014910  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 25893  014912  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 25894  014914  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 25895                           
 25896                           ; BSR set to: 0
 25897  014916  0100               	movlb	0	; () banked
 25898  014918  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 25899  01491A  D7CD               	goto	u9510
 25900  01491C                     l2513:
 25901                           
 25902                           ; BSR set to: 0
 25903                           
 25904                           ; BSR set to: 0
 25905  01491C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 25906  014920  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 25907  014924  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 25908  014928  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 25909                           
 25910                           ; BSR set to: 0
 25911  01492C  0012               	return		;funcret
 25912  01492E                     __end_of___lldiv:
 25913                           	opt stack 0
 25914                           tosu	equ	0xFFF
 25915                           tosh	equ	0xFFE
 25916                           tosl	equ	0xFFD
 25917                           pclath	equ	0xFFA
 25918                           tblptru	equ	0xFF8
 25919                           tblptrh	equ	0xFF7
 25920                           tblptrl	equ	0xFF6
 25921                           tablat	equ	0xFF5
 25922                           prodh	equ	0xFF4
 25923                           prodl	equ	0xFF3
 25924                           intcon	equ	0xFF2
 25925                           indf0	equ	0xFEF
 25926                           postinc0	equ	0xFEE
 25927                           fsr0h	equ	0xFEA
 25928                           fsr0l	equ	0xFE9
 25929                           wreg	equ	0xFE8
 25930                           indf1	equ	0xFE7
 25931                           postdec1	equ	0xFE5
 25932                           fsr1h	equ	0xFE2
 25933                           fsr1l	equ	0xFE1
 25934                           indf2	equ	0xFDF
 25935                           postinc2	equ	0xFDE
 25936                           postdec2	equ	0xFDD
 25937                           plusw2	equ	0xFDB
 25938                           fsr2h	equ	0xFDA
 25939                           fsr2l	equ	0xFD9
 25940                           status	equ	0xFD8
 25941                           
 25942 ;; *************** function _Timer0_Clear *****************
 25943 ;; Defined at:
 25944 ;;		line 20 in file "Library/Timer0.c"
 25945 ;; Parameters:    Size  Location     Type
 25946 ;;		None
 25947 ;; Auto vars:     Size  Location     Type
 25948 ;;		None
 25949 ;; Return value:  Size  Location     Type
 25950 ;;                  1    wreg      void 
 25951 ;; Registers used:
 25952 ;;		None
 25953 ;; Tracked objects:
 25954 ;;		On entry : 0/0
 25955 ;;		On exit  : 0/0
 25956 ;;		Unchanged: 0/0
 25957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25962 ;;Total ram usage:        0 bytes
 25963 ;; Hardware stack levels used:    1
 25964 ;; Hardware stack levels required when called:    7
 25965 ;; This function calls:
 25966 ;;		Nothing
 25967 ;; This function is called by:
 25968 ;;		_Timer0_Init
 25969 ;; This function uses a non-reentrant model
 25970 ;;
 25971                           
 25972                           	psect	text136
 25973  016CD2                     __ptext136:
 25974                           	opt stack 0
 25975  016CD2                     _Timer0_Clear:
 25976                           	opt stack 20
 25977                           
 25978                           ;Timer0.c: 22: TMR0 = COUNTER;
 25979                           
 25980                           ; BSR set to: 0
 25981                           ;incstack = 0
 25982  016CD2  C029  FFD6         	movff	_COUNTER,4054	;volatile
 25983  016CD6  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 25984                           
 25985                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 25986  016CDA  94F2               	bcf	intcon,2,c	;volatile
 25987  016CDC  0012               	return		;funcret
 25988  016CDE                     __end_of_Timer0_Clear:
 25989                           	opt stack 0
 25990                           tosu	equ	0xFFF
 25991                           tosh	equ	0xFFE
 25992                           tosl	equ	0xFFD
 25993                           pclath	equ	0xFFA
 25994                           tblptru	equ	0xFF8
 25995                           tblptrh	equ	0xFF7
 25996                           tblptrl	equ	0xFF6
 25997                           tablat	equ	0xFF5
 25998                           prodh	equ	0xFF4
 25999                           prodl	equ	0xFF3
 26000                           intcon	equ	0xFF2
 26001                           indf0	equ	0xFEF
 26002                           postinc0	equ	0xFEE
 26003                           fsr0h	equ	0xFEA
 26004                           fsr0l	equ	0xFE9
 26005                           wreg	equ	0xFE8
 26006                           indf1	equ	0xFE7
 26007                           postdec1	equ	0xFE5
 26008                           fsr1h	equ	0xFE2
 26009                           fsr1l	equ	0xFE1
 26010                           indf2	equ	0xFDF
 26011                           postinc2	equ	0xFDE
 26012                           postdec2	equ	0xFDD
 26013                           plusw2	equ	0xFDB
 26014                           fsr2h	equ	0xFDA
 26015                           fsr2l	equ	0xFD9
 26016                           status	equ	0xFD8
 26017                           
 26018 ;; *************** function _Motor_Move *****************
 26019 ;; Defined at:
 26020 ;;		line 51 in file "Library/Motor.c"
 26021 ;; Parameters:    Size  Location     Type
 26022 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 26023 ;;		 -> Stepper(6), 
 26024 ;;  pDelta          2    5[BANK0 ] short 
 26025 ;; Auto vars:     Size  Location     Type
 26026 ;;		None
 26027 ;; Return value:  Size  Location     Type
 26028 ;;                  1    wreg      unsigned char 
 26029 ;; Registers used:
 26030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26031 ;; Tracked objects:
 26032 ;;		On entry : 0/0
 26033 ;;		On exit  : 0/0
 26034 ;;		Unchanged: 0/0
 26035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26039 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26040 ;;Total ram usage:        6 bytes
 26041 ;; Hardware stack levels used:    1
 26042 ;; Hardware stack levels required when called:    8
 26043 ;; This function calls:
 26044 ;;		_Timer0_Start
 26045 ;; This function is called by:
 26046 ;;		_continuousMode
 26047 ;;		_stepMode
 26048 ;;		_positionMode
 26049 ;; This function uses a non-reentrant model
 26050 ;;
 26051                           
 26052                           	psect	text137
 26053  0166C8                     __ptext137:
 26054                           	opt stack 0
 26055  0166C8                     _Motor_Move:
 26056                           	opt stack 21
 26057                           
 26058                           ;Motor.c: 54: lMotor = pMotor;
 26059                           
 26060                           ;incstack = 0
 26061  0166C8  C063  F0E8         	movff	Motor_Move@pMotor,_lMotor
 26062  0166CC  C064  F0E9         	movff	Motor_Move@pMotor+1,_lMotor+1
 26063                           
 26064                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 26065  0166D0  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 26066  0166D4  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 26067  0166D8  50DE               	movf	postinc2,w,c
 26068  0166DA  10DE               	iorwf	postinc2,w,c
 26069  0166DC  A4D8               	btfss	status,2,c
 26070  0166DE  0012               	return	
 26071                           
 26072                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 26073                           
 26074                           ;Motor.c: 59: return 0;
 26075                           ;	Return value of _Motor_Move is never used
 26076  0166E0  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 26077  0166E4  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 26078  0166E8  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 26079  0166EC  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 26080                           
 26081                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 26082  0166F0  C0DD  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 26083  0166F4  C0DE  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 26084  0166F8  C0DF  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 26085  0166FC  ECE7  F0B4         	call	_Timer0_Start	;wreg free
 26086  016700  0012               	return	
 26087  016702                     __end_of_Motor_Move:
 26088                           	opt stack 0
 26089                           tosu	equ	0xFFF
 26090                           tosh	equ	0xFFE
 26091                           tosl	equ	0xFFD
 26092                           pclath	equ	0xFFA
 26093                           tblptru	equ	0xFF8
 26094                           tblptrh	equ	0xFF7
 26095                           tblptrl	equ	0xFF6
 26096                           tablat	equ	0xFF5
 26097                           prodh	equ	0xFF4
 26098                           prodl	equ	0xFF3
 26099                           intcon	equ	0xFF2
 26100                           indf0	equ	0xFEF
 26101                           postinc0	equ	0xFEE
 26102                           fsr0h	equ	0xFEA
 26103                           fsr0l	equ	0xFE9
 26104                           wreg	equ	0xFE8
 26105                           indf1	equ	0xFE7
 26106                           postdec1	equ	0xFE5
 26107                           fsr1h	equ	0xFE2
 26108                           fsr1l	equ	0xFE1
 26109                           indf2	equ	0xFDF
 26110                           postinc2	equ	0xFDE
 26111                           postdec2	equ	0xFDD
 26112                           plusw2	equ	0xFDB
 26113                           fsr2h	equ	0xFDA
 26114                           fsr2l	equ	0xFD9
 26115                           status	equ	0xFD8
 26116                           
 26117 ;; *************** function _Timer0_Start *****************
 26118 ;; Defined at:
 26119 ;;		line 75 in file "Library/Timer0.c"
 26120 ;; Parameters:    Size  Location     Type
 26121 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 26122 ;;		 -> Absolute function(1), Motor_Step(1), 
 26123 ;; Auto vars:     Size  Location     Type
 26124 ;;		None
 26125 ;; Return value:  Size  Location     Type
 26126 ;;                  1    wreg      void 
 26127 ;; Registers used:
 26128 ;;		wreg, status,2, status,0
 26129 ;; Tracked objects:
 26130 ;;		On entry : 0/0
 26131 ;;		On exit  : 0/0
 26132 ;;		Unchanged: 0/0
 26133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26134 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26137 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26138 ;;Total ram usage:        3 bytes
 26139 ;; Hardware stack levels used:    1
 26140 ;; Hardware stack levels required when called:    7
 26141 ;; This function calls:
 26142 ;;		Nothing
 26143 ;; This function is called by:
 26144 ;;		_Motor_Move
 26145 ;; This function uses a non-reentrant model
 26146 ;;
 26147                           
 26148                           	psect	text138
 26149  0169CE                     __ptext138:
 26150                           	opt stack 0
 26151  0169CE                     _Timer0_Start:
 26152                           	opt stack 21
 26153                           
 26154                           ;Timer0.c: 77: gISR = pFunction;
 26155                           
 26156                           ;incstack = 0
 26157  0169CE  C060  F10C         	movff	Timer0_Start@pFunction,_gISR
 26158  0169D2  C061  F10D         	movff	Timer0_Start@pFunction+1,_gISR+1
 26159  0169D6  C062  F10E         	movff	Timer0_Start@pFunction+2,_gISR+2
 26160                           
 26161                           ;Timer0.c: 78: TMR0 = COUNTER;
 26162  0169DA  C029  FFD6         	movff	_COUNTER,4054	;volatile
 26163  0169DE  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 26164                           
 26165                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 26166  0169E2  50D5               	movf	4053,w,c	;volatile
 26167  0169E4  0100               	movlb	0	; () banked
 26168  0169E6  19F6               	xorwf	_INDEX& (0+255),w,b
 26169  0169E8  0BF8               	andlw	-8
 26170  0169EA  19F6               	xorwf	_INDEX& (0+255),w,b
 26171  0169EC  6ED5               	movwf	4053,c	;volatile
 26172                           
 26173                           ; BSR set to: 0
 26174                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 26175  0169EE  94F2               	bcf	intcon,2,c	;volatile
 26176                           
 26177                           ; BSR set to: 0
 26178                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 26179  0169F0  8AF2               	bsf	intcon,5,c	;volatile
 26180                           
 26181                           ; BSR set to: 0
 26182  0169F2  0012               	return		;funcret
 26183  0169F4                     __end_of_Timer0_Start:
 26184                           	opt stack 0
 26185                           tosu	equ	0xFFF
 26186                           tosh	equ	0xFFE
 26187                           tosl	equ	0xFFD
 26188                           pclath	equ	0xFFA
 26189                           tblptru	equ	0xFF8
 26190                           tblptrh	equ	0xFF7
 26191                           tblptrl	equ	0xFF6
 26192                           tablat	equ	0xFF5
 26193                           prodh	equ	0xFF4
 26194                           prodl	equ	0xFF3
 26195                           intcon	equ	0xFF2
 26196                           indf0	equ	0xFEF
 26197                           postinc0	equ	0xFEE
 26198                           fsr0h	equ	0xFEA
 26199                           fsr0l	equ	0xFE9
 26200                           wreg	equ	0xFE8
 26201                           indf1	equ	0xFE7
 26202                           postdec1	equ	0xFE5
 26203                           fsr1h	equ	0xFE2
 26204                           fsr1l	equ	0xFE1
 26205                           indf2	equ	0xFDF
 26206                           postinc2	equ	0xFDE
 26207                           postdec2	equ	0xFDD
 26208                           plusw2	equ	0xFDB
 26209                           fsr2h	equ	0xFDA
 26210                           fsr2l	equ	0xFD9
 26211                           status	equ	0xFD8
 26212                           
 26213 ;; *************** function _HMI_Render *****************
 26214 ;; Defined at:
 26215 ;;		line 138 in file "HMI.c"
 26216 ;; Parameters:    Size  Location     Type
 26217 ;;		None
 26218 ;; Auto vars:     Size  Location     Type
 26219 ;;  a               2    8[BANK0 ] unsigned short 
 26220 ;; Return value:  Size  Location     Type
 26221 ;;                  1    wreg      void 
 26222 ;; Registers used:
 26223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26224 ;; Tracked objects:
 26225 ;;		On entry : 0/0
 26226 ;;		On exit  : 0/0
 26227 ;;		Unchanged: 0/0
 26228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26233 ;;Total ram usage:        2 bytes
 26234 ;; Hardware stack levels used:    1
 26235 ;; Hardware stack levels required when called:    9
 26236 ;; This function calls:
 26237 ;;		_OutSeg
 26238 ;; This function is called by:
 26239 ;;		_main
 26240 ;; This function uses a non-reentrant model
 26241 ;;
 26242                           
 26243                           	psect	text139
 26244  01664E                     __ptext139:
 26245                           	opt stack 0
 26246  01664E                     _HMI_Render:
 26247                           	opt stack 21
 26248                           
 26249                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 26250                           
 26251                           ; BSR set to: 0
 26252                           ;incstack = 0
 26253  01664E  0E00               	movlw	0
 26254  016650  0100               	movlb	0	; () banked
 26255  016652  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 26256  016654  0E00               	movlw	0
 26257  016656  6F68               	movwf	HMI_Render@a& (0+255),b
 26258  016658                     l14670:
 26259                           
 26260                           ; BSR set to: 0
 26261  016658  0100               	movlb	0	; () banked
 26262  01665A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 26263  01665C  E116               	bnz	l1158
 26264  01665E  0E08               	movlw	8
 26265  016660  0100               	movlb	0	; () banked
 26266  016662  5D68               	subwf	HMI_Render@a& (0+255),w,b
 26267  016664  B0D8               	btfsc	status,0,c
 26268  016666  0012               	return	
 26269                           
 26270                           ; BSR set to: 0
 26271                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 26272                           
 26273                           ; BSR set to: 0
 26274                           
 26275                           ; BSR set to: 0
 26276  016668  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 26277  01666C  0E2D               	movlw	low _HMIBoard
 26278  01666E  0100               	movlb	0	; () banked
 26279  016670  2568               	addwf	HMI_Render@a& (0+255),w,b
 26280  016672  6ED9               	movwf	fsr2l,c
 26281  016674  0E01               	movlw	high _HMIBoard
 26282  016676  0100               	movlb	0	; () banked
 26283  016678  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 26284  01667A  6EDA               	movwf	fsr2h,c
 26285  01667C  50DF               	movf	indf2,w,c
 26286  01667E  EC82  F0AB         	call	_OutSeg
 26287  016682  0100               	movlb	0	; () banked
 26288  016684  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 26289  016686  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 26290  016688  D7E7               	goto	l14670
 26291  01668A                     l1158:
 26292                           
 26293                           ; BSR set to: 0
 26294  01668A  0012               	return		;funcret
 26295  01668C                     __end_of_HMI_Render:
 26296                           	opt stack 0
 26297                           tosu	equ	0xFFF
 26298                           tosh	equ	0xFFE
 26299                           tosl	equ	0xFFD
 26300                           pclath	equ	0xFFA
 26301                           tblptru	equ	0xFF8
 26302                           tblptrh	equ	0xFF7
 26303                           tblptrl	equ	0xFF6
 26304                           tablat	equ	0xFF5
 26305                           prodh	equ	0xFF4
 26306                           prodl	equ	0xFF3
 26307                           intcon	equ	0xFF2
 26308                           indf0	equ	0xFEF
 26309                           postinc0	equ	0xFEE
 26310                           fsr0h	equ	0xFEA
 26311                           fsr0l	equ	0xFE9
 26312                           wreg	equ	0xFE8
 26313                           indf1	equ	0xFE7
 26314                           postdec1	equ	0xFE5
 26315                           fsr1h	equ	0xFE2
 26316                           fsr1l	equ	0xFE1
 26317                           indf2	equ	0xFDF
 26318                           postinc2	equ	0xFDE
 26319                           postdec2	equ	0xFDD
 26320                           plusw2	equ	0xFDB
 26321                           fsr2h	equ	0xFDA
 26322                           fsr2l	equ	0xFD9
 26323                           status	equ	0xFD8
 26324                           
 26325 ;; *************** function _OutSeg *****************
 26326 ;; Defined at:
 26327 ;;		line 54 in file "HMI.c"
 26328 ;; Parameters:    Size  Location     Type
 26329 ;;  pInput          1    wreg     unsigned char 
 26330 ;;  pSegment        1    3[BANK0 ] unsigned char 
 26331 ;; Auto vars:     Size  Location     Type
 26332 ;;  pInput          1    6[BANK0 ] unsigned char 
 26333 ;;  out             1    7[BANK0 ] volatile unsigned char 
 26334 ;; Return value:  Size  Location     Type
 26335 ;;                  1    wreg      void 
 26336 ;; Registers used:
 26337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26338 ;; Tracked objects:
 26339 ;;		On entry : 0/0
 26340 ;;		On exit  : 0/0
 26341 ;;		Unchanged: 0/0
 26342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26346 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26347 ;;Total ram usage:        5 bytes
 26348 ;; Hardware stack levels used:    1
 26349 ;; Hardware stack levels required when called:    8
 26350 ;; This function calls:
 26351 ;;		_SPI_Send
 26352 ;; This function is called by:
 26353 ;;		_HMI_Render
 26354 ;;		_HMI_GRender
 26355 ;; This function uses a non-reentrant model
 26356 ;;
 26357                           
 26358                           	psect	text140
 26359  015704                     __ptext140:
 26360                           	opt stack 0
 26361  015704                     _OutSeg:
 26362                           	opt stack 21
 26363                           
 26364                           ; BSR set to: 0
 26365                           ;incstack = 0
 26366                           ;OutSeg@pInput stored from wreg
 26367  015704  0100               	movlb	0	; () banked
 26368  015706  6F66               	movwf	OutSeg@pInput& (0+255),b
 26369                           
 26370                           ;HMI.c: 58: static UINT8 cur;
 26371                           ;HMI.c: 59: volatile UINT8 out;
 26372                           ;HMI.c: 60: static UINT8 segset;
 26373                           ;HMI.c: 61: static UINT8 a;
 26374                           ;HMI.c: 83: if (pSegment <= 8)
 26375  015708  0E09               	movlw	9
 26376  01570A  0100               	movlb	0	; () banked
 26377  01570C  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 26378  01570E  0012               	return	
 26379                           
 26380                           ; BSR set to: 0
 26381                           ;HMI.c: 84: {
 26382                           ;HMI.c: 85: cur = pInput;
 26383  015710  C066  F034         	movff	OutSeg@pInput,OutSeg@cur
 26384                           
 26385                           ; BSR set to: 0
 26386                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 26387  015714  0E00               	movlw	0
 26388  015716  6E32               	movwf	OutSeg@a,c
 26389  015718                     l14190:
 26390                           
 26391                           ; BSR set to: 0
 26392  015718  0E07               	movlw	7
 26393  01571A  6432               	cpfsgt	OutSeg@a,c
 26394  01571C  D001               	goto	l1146
 26395  01571E  D027               	goto	u11730
 26396  015720                     l1146:
 26397                           
 26398                           ;HMI.c: 87: {
 26399                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 26400                           
 26401                           ; BSR set to: 0
 26402  015720  C034  F064         	movff	OutSeg@cur,??_OutSeg
 26403  015724  0E01               	movlw	1
 26404  015726  0100               	movlb	0	; () banked
 26405  015728  1764               	andwf	??_OutSeg& (0+255),f,b
 26406  01572A  0E06               	movlw	6
 26407  01572C  0100               	movlb	0	; () banked
 26408  01572E  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 26409  015730                     u11725:
 26410  015730  0100               	movlb	0	; () banked
 26411  015732  90D8               	bcf	status,0,c
 26412  015734  3764               	rlcf	??_OutSeg& (0+255),f,b
 26413  015736  0100               	movlb	0	; () banked
 26414  015738  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 26415  01573A  D7FA               	goto	u11725
 26416  01573C  0100               	movlb	0	; () banked
 26417  01573E  5164               	movf	??_OutSeg& (0+255),w,b
 26418  015740  6E33               	movwf	OutSeg@segset,c
 26419                           
 26420                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 26421  015742  0100               	movlb	0	; () banked
 26422  015744  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 26423  015746  42E8               	rrncf	wreg,f,c
 26424  015748  0BF8               	andlw	248
 26425  01574A  1032               	iorwf	OutSeg@a,w,c
 26426  01574C  1033               	iorwf	OutSeg@segset,w,c
 26427  01574E  0100               	movlb	0	; () banked
 26428  015750  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 26429                           
 26430                           ;HMI.c: 90: cur >>= 1;
 26431  015752  90D8               	bcf	status,0,c
 26432  015754  3234               	rrcf	OutSeg@cur,f,c
 26433                           
 26434                           ; BSR set to: 0
 26435                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 26436  015756  0E67               	movlw	low _SPI1
 26437  015758  0100               	movlb	0	; () banked
 26438  01575A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 26439  01575C  0E01               	movlw	high _SPI1
 26440  01575E  0100               	movlb	0	; () banked
 26441  015760  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 26442  015762  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 26443  015766  ECA9  F0AE         	call	_SPI_Send	;wreg free
 26444  01576A  2A32               	incf	OutSeg@a,f,c
 26445  01576C  D7D5               	goto	l14190
 26446  01576E                     u11730:
 26447                           
 26448                           ;HMI.c: 96: }
 26449                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 26450  01576E  0E67               	movlw	low _SPI1
 26451  015770  0100               	movlb	0	; () banked
 26452  015772  6F60               	movwf	SPI_Send@pInput& (0+255),b
 26453  015774  0E01               	movlw	high _SPI1
 26454  015776  0100               	movlb	0	; () banked
 26455  015778  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 26456  01577A  0E00               	movlw	0
 26457  01577C  0100               	movlb	0	; () banked
 26458  01577E  6F62               	movwf	SPI_Send@pData& (0+255),b
 26459  015780  ECA9  F0AE         	call	_SPI_Send	;wreg free
 26460  015784  0012               	return	
 26461  015786                     __end_of_OutSeg:
 26462                           	opt stack 0
 26463                           tosu	equ	0xFFF
 26464                           tosh	equ	0xFFE
 26465                           tosl	equ	0xFFD
 26466                           pclath	equ	0xFFA
 26467                           tblptru	equ	0xFF8
 26468                           tblptrh	equ	0xFF7
 26469                           tblptrl	equ	0xFF6
 26470                           tablat	equ	0xFF5
 26471                           prodh	equ	0xFF4
 26472                           prodl	equ	0xFF3
 26473                           intcon	equ	0xFF2
 26474                           indf0	equ	0xFEF
 26475                           postinc0	equ	0xFEE
 26476                           fsr0h	equ	0xFEA
 26477                           fsr0l	equ	0xFE9
 26478                           wreg	equ	0xFE8
 26479                           indf1	equ	0xFE7
 26480                           postdec1	equ	0xFE5
 26481                           fsr1h	equ	0xFE2
 26482                           fsr1l	equ	0xFE1
 26483                           indf2	equ	0xFDF
 26484                           postinc2	equ	0xFDE
 26485                           postdec2	equ	0xFDD
 26486                           plusw2	equ	0xFDB
 26487                           fsr2h	equ	0xFDA
 26488                           fsr2l	equ	0xFD9
 26489                           status	equ	0xFD8
 26490                           
 26491 ;; *************** function _Console_Render *****************
 26492 ;; Defined at:
 26493 ;;		line 377 in file "Library/Console.c"
 26494 ;; Parameters:    Size  Location     Type
 26495 ;;		None
 26496 ;; Auto vars:     Size  Location     Type
 26497 ;;  lCursor         4   38[BANK0 ] struct Point
 26498 ;;  y               1   43[BANK0 ] unsigned char 
 26499 ;;  x               1   42[BANK0 ] unsigned char 
 26500 ;;  temp            1   37[BANK0 ] unsigned char 
 26501 ;;  Temp            2    0        unsigned short 
 26502 ;; Return value:  Size  Location     Type
 26503 ;;                  1    wreg      void 
 26504 ;; Registers used:
 26505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26506 ;; Tracked objects:
 26507 ;;		On entry : 0/0
 26508 ;;		On exit  : 0/0
 26509 ;;		Unchanged: 0/0
 26510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26512 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26514 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26515 ;;Total ram usage:        9 bytes
 26516 ;; Hardware stack levels used:    1
 26517 ;; Hardware stack levels required when called:   11
 26518 ;; This function calls:
 26519 ;;		_Console_MakeField
 26520 ;;		_LCD_DrawField
 26521 ;;		_LCD_FillRectangle
 26522 ;; This function is called by:
 26523 ;;		_main
 26524 ;; This function uses a non-reentrant model
 26525 ;;
 26526                           
 26527                           	psect	text141
 26528  011E84                     __ptext141:
 26529                           	opt stack 0
 26530  011E84                     _Console_Render:
 26531                           	opt stack 19
 26532                           
 26533                           ;Console.c: 379: Colour Temp;
 26534                           ;Console.c: 380: if (change)
 26535                           
 26536                           ;incstack = 0
 26537  011E84  0100               	movlb	0	; () banked
 26538  011E86  51FC               	movf	_change& (0+255),w,b
 26539  011E88  B4D8               	btfsc	status,2,c
 26540  011E8A  0012               	return	
 26541                           
 26542                           ; BSR set to: 0
 26543                           ;Console.c: 381: {
 26544                           ;Console.c: 382: UINT8 x, y, temp;
 26545                           ;Console.c: 383: Point lCursor = {6,6};
 26546  011E8C  C1EC  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 26547  011E90  C1ED  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 26548  011E94  C1EE  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 26549  011E98  C1EF  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 26550                           
 26551                           ; BSR set to: 0
 26552                           ;Console.c: 385: if (clearall)
 26553  011E9C  0100               	movlb	0	; () banked
 26554  011E9E  51F9               	movf	_clearall& (0+255),w,b
 26555  011EA0  B4D8               	btfsc	status,2,c
 26556  011EA2  D005               	goto	l1056
 26557                           
 26558                           ; BSR set to: 0
 26559                           ;Console.c: 386: {
 26560                           ;Console.c: 389: temp = lBufferY;
 26561  011EA4  C0F7  F085         	movff	_lBufferY,Console_Render@temp
 26562                           
 26563                           ; BSR set to: 0
 26564                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 26565  011EA8  0E0F               	movlw	15
 26566  011EAA  0100               	movlb	0	; () banked
 26567  011EAC  6FF7               	movwf	_lBufferY& (0+255),b
 26568  011EAE                     l1056:
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;Console.c: 391: }
 26572                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 26573  011EAE  0E00               	movlw	0
 26574  011EB0  0100               	movlb	0	; () banked
 26575  011EB2  6F8B               	movwf	Console_Render@y& (0+255),b
 26576  011EB4  D0DF               	goto	l1057
 26577  011EB6                     
 26578                           ; BSR set to: 0
 26579                           ;Console.c: 394: {
 26580                           ;Console.c: 395: gForecolour = lCBuffer[y];
 26581                           
 26582                           ; BSR set to: 0
 26583  011EB6  0100               	movlb	0	; () banked
 26584  011EB8  518B               	movf	Console_Render@y& (0+255),w,b
 26585  011EBA  0D02               	mullw	2
 26586  011EBC  0E00               	movlw	low _lCBuffer
 26587  011EBE  24F3               	addwf	prodl,w,c
 26588  011EC0  6ED9               	movwf	fsr2l,c
 26589  011EC2  0E02               	movlw	high _lCBuffer
 26590  011EC4  20F4               	addwfc	prodh,w,c
 26591  011EC6  6EDA               	movwf	fsr2h,c
 26592  011EC8  CFDE F0FA          	movff	postinc2,_gForecolour
 26593  011ECC  CFDD F0FB          	movff	postdec2,_gForecolour+1
 26594                           
 26595                           ; BSR set to: 0
 26596                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26597  011ED0  0E00               	movlw	0
 26598  011ED2  0100               	movlb	0	; () banked
 26599  011ED4  6F8A               	movwf	Console_Render@x& (0+255),b
 26600  011ED6                     l14634:
 26601                           
 26602                           ; BSR set to: 0
 26603  011ED6  0E13               	movlw	19
 26604  011ED8  0100               	movlb	0	; () banked
 26605  011EDA  658A               	cpfsgt	Console_Render@x& (0+255),b
 26606  011EDC  D001               	goto	l1059
 26607  011EDE  D0BE               	goto	u12240
 26608  011EE0                     l1059:
 26609                           
 26610                           ; BSR set to: 0
 26611                           ;Console.c: 397: {
 26612                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 26613                           
 26614                           ; BSR set to: 0
 26615  011EE0  0100               	movlb	0	; () banked
 26616  011EE2  518B               	movf	Console_Render@y& (0+255),w,b
 26617  011EE4  0D14               	mullw	20
 26618  011EE6  0E7B               	movlw	low _lBuffer
 26619  011EE8  0100               	movlb	0	; () banked
 26620  011EEA  6F83               	movwf	??_Console_Render& (0+255),b
 26621  011EEC  0E02               	movlw	high _lBuffer
 26622  011EEE  0100               	movlb	0	; () banked
 26623  011EF0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26624  011EF2  50F3               	movf	prodl,w,c
 26625  011EF4  0100               	movlb	0	; () banked
 26626  011EF6  2783               	addwf	??_Console_Render& (0+255),f,b
 26627  011EF8  50F4               	movf	prodh,w,c
 26628  011EFA  0100               	movlb	0	; () banked
 26629  011EFC  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26630  011EFE  0100               	movlb	0	; () banked
 26631  011F00  518A               	movf	Console_Render@x& (0+255),w,b
 26632  011F02  0D01               	mullw	1
 26633  011F04  50F3               	movf	prodl,w,c
 26634  011F06  0100               	movlb	0	; () banked
 26635  011F08  2583               	addwf	??_Console_Render& (0+255),w,b
 26636  011F0A  6ED9               	movwf	fsr2l,c
 26637  011F0C  50F4               	movf	prodh,w,c
 26638  011F0E  0100               	movlb	0	; () banked
 26639  011F10  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26640  011F12  6EDA               	movwf	fsr2h,c
 26641  011F14  AEDF               	btfss	indf2,7,c
 26642  011F16  D09A               	goto	l1063
 26643                           
 26644                           ; BSR set to: 0
 26645                           ;Console.c: 399: {
 26646                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 26647  011F18  0100               	movlb	0	; () banked
 26648  011F1A  518B               	movf	Console_Render@y& (0+255),w,b
 26649  011F1C  0D14               	mullw	20
 26650  011F1E  0E7B               	movlw	low _lBuffer
 26651  011F20  0100               	movlb	0	; () banked
 26652  011F22  6F83               	movwf	??_Console_Render& (0+255),b
 26653  011F24  0E02               	movlw	high _lBuffer
 26654  011F26  0100               	movlb	0	; () banked
 26655  011F28  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26656  011F2A  50F3               	movf	prodl,w,c
 26657  011F2C  0100               	movlb	0	; () banked
 26658  011F2E  2783               	addwf	??_Console_Render& (0+255),f,b
 26659  011F30  50F4               	movf	prodh,w,c
 26660  011F32  0100               	movlb	0	; () banked
 26661  011F34  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26662  011F36  0100               	movlb	0	; () banked
 26663  011F38  518A               	movf	Console_Render@x& (0+255),w,b
 26664  011F3A  0D01               	mullw	1
 26665  011F3C  50F3               	movf	prodl,w,c
 26666  011F3E  0100               	movlb	0	; () banked
 26667  011F40  2583               	addwf	??_Console_Render& (0+255),w,b
 26668  011F42  6ED9               	movwf	fsr2l,c
 26669  011F44  50F4               	movf	prodh,w,c
 26670  011F46  0100               	movlb	0	; () banked
 26671  011F48  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26672  011F4A  6EDA               	movwf	fsr2h,c
 26673  011F4C  0E7F               	movlw	127
 26674  011F4E  16DF               	andwf	indf2,f,c
 26675                           
 26676                           ;Console.c: 401: if (lBuffer[y][x])
 26677  011F50  0100               	movlb	0	; () banked
 26678  011F52  518B               	movf	Console_Render@y& (0+255),w,b
 26679  011F54  0D14               	mullw	20
 26680  011F56  0E7B               	movlw	low _lBuffer
 26681  011F58  0100               	movlb	0	; () banked
 26682  011F5A  6F83               	movwf	??_Console_Render& (0+255),b
 26683  011F5C  0E02               	movlw	high _lBuffer
 26684  011F5E  0100               	movlb	0	; () banked
 26685  011F60  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26686  011F62  50F3               	movf	prodl,w,c
 26687  011F64  0100               	movlb	0	; () banked
 26688  011F66  2783               	addwf	??_Console_Render& (0+255),f,b
 26689  011F68  50F4               	movf	prodh,w,c
 26690  011F6A  0100               	movlb	0	; () banked
 26691  011F6C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26692  011F6E  0100               	movlb	0	; () banked
 26693  011F70  518A               	movf	Console_Render@x& (0+255),w,b
 26694  011F72  0D01               	mullw	1
 26695  011F74  50F3               	movf	prodl,w,c
 26696  011F76  0100               	movlb	0	; () banked
 26697  011F78  2583               	addwf	??_Console_Render& (0+255),w,b
 26698  011F7A  6ED9               	movwf	fsr2l,c
 26699  011F7C  50F4               	movf	prodh,w,c
 26700  011F7E  0100               	movlb	0	; () banked
 26701  011F80  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26702  011F82  6EDA               	movwf	fsr2h,c
 26703  011F84  50DF               	movf	indf2,w,c
 26704  011F86  B4D8               	btfsc	status,2,c
 26705  011F88  D04A               	goto	l1062
 26706                           
 26707                           ; BSR set to: 0
 26708                           ;Console.c: 402: {
 26709                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 26710  011F8A  C0EC  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 26711  011F8E  C0ED  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 26712  011F92  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26713  011F96  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26714  011F9A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26715  011F9E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26716  011FA2  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26717  011FA6  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26718  011FAA  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26719  011FAE  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26720  011FB2  EC63  F0AD         	call	_LCD_FillRectangle	;wreg free
 26721                           
 26722                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 26723  011FB6  0100               	movlb	0	; () banked
 26724  011FB8  518B               	movf	Console_Render@y& (0+255),w,b
 26725  011FBA  0D14               	mullw	20
 26726  011FBC  0E7B               	movlw	low _lBuffer
 26727  011FBE  0100               	movlb	0	; () banked
 26728  011FC0  6F83               	movwf	??_Console_Render& (0+255),b
 26729  011FC2  0E02               	movlw	high _lBuffer
 26730  011FC4  0100               	movlb	0	; () banked
 26731  011FC6  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26732  011FC8  50F3               	movf	prodl,w,c
 26733  011FCA  0100               	movlb	0	; () banked
 26734  011FCC  2783               	addwf	??_Console_Render& (0+255),f,b
 26735  011FCE  50F4               	movf	prodh,w,c
 26736  011FD0  0100               	movlb	0	; () banked
 26737  011FD2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26738  011FD4  0100               	movlb	0	; () banked
 26739  011FD6  518A               	movf	Console_Render@x& (0+255),w,b
 26740  011FD8  0D01               	mullw	1
 26741  011FDA  50F3               	movf	prodl,w,c
 26742  011FDC  0100               	movlb	0	; () banked
 26743  011FDE  2583               	addwf	??_Console_Render& (0+255),w,b
 26744  011FE0  6ED9               	movwf	fsr2l,c
 26745  011FE2  50F4               	movf	prodh,w,c
 26746  011FE4  0100               	movlb	0	; () banked
 26747  011FE6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26748  011FE8  6EDA               	movwf	fsr2h,c
 26749  011FEA  50DF               	movf	indf2,w,c
 26750  011FEC  ECE4  F0A1         	call	_Console_MakeField
 26751  011FF0  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 26752  011FF4  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 26753  011FF8  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 26754  011FFC  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 26755  012000  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 26756  012004  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 26757  012008  C1F4  F078         	movff	_gCharSize,LCD_DrawField@pSize
 26758  01200C  C1F5  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 26759  012010  C1F6  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 26760  012014  C1F7  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 26761  012018  EC54  F0A8         	call	_LCD_DrawField	;wreg free
 26762                           
 26763                           ;Console.c: 405: }
 26764  01201C  D017               	goto	l1063
 26765  01201E                     l1062:
 26766                           
 26767                           ;Console.c: 406: else
 26768                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 26769  01201E  0E00               	movlw	0
 26770  012020  0100               	movlb	0	; () banked
 26771  012022  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 26772  012024  0E00               	movlw	0
 26773  012026  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 26774  012028  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26775  01202C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26776  012030  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26777  012034  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26778  012038  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26779  01203C  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26780  012040  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26781  012044  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26782  012048  EC63  F0AD         	call	_LCD_FillRectangle	;wreg free
 26783  01204C                     l1063:
 26784                           
 26785                           ;Console.c: 408: }
 26786                           ;Console.c: 409: lCursor.x += (5 + 1);
 26787  01204C  0E06               	movlw	6
 26788  01204E  0100               	movlb	0	; () banked
 26789  012050  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 26790  012052  0E00               	movlw	0
 26791  012054  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 26792                           
 26793                           ; BSR set to: 0
 26794  012056  0100               	movlb	0	; () banked
 26795  012058  2B8A               	incf	Console_Render@x& (0+255),f,b
 26796  01205A  D73D               	goto	l14634
 26797  01205C                     u12240:
 26798                           
 26799                           ; BSR set to: 0
 26800                           ;Console.c: 410: }
 26801                           ;Console.c: 411: lCursor.y += (7 + 1);
 26802                           
 26803                           ; BSR set to: 0
 26804  01205C  0E08               	movlw	8
 26805  01205E  0100               	movlb	0	; () banked
 26806  012060  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 26807  012062  0E00               	movlw	0
 26808  012064  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 26809                           
 26810                           ; BSR set to: 0
 26811                           ;Console.c: 412: lCursor.x = 6;
 26812  012066  0E00               	movlw	0
 26813  012068  0100               	movlb	0	; () banked
 26814  01206A  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 26815  01206C  0E06               	movlw	6
 26816  01206E  6F86               	movwf	Console_Render@lCursor& (0+255),b
 26817                           
 26818                           ; BSR set to: 0
 26819  012070  0100               	movlb	0	; () banked
 26820  012072  2B8B               	incf	Console_Render@y& (0+255),f,b
 26821  012074                     l1057:
 26822                           
 26823                           ; BSR set to: 0
 26824                           
 26825                           ; BSR set to: 0
 26826  012074  0100               	movlb	0	; () banked
 26827  012076  518B               	movf	Console_Render@y& (0+255),w,b
 26828  012078  0100               	movlb	0	; () banked
 26829  01207A  5DF7               	subwf	_lBufferY& (0+255),w,b
 26830  01207C  B0D8               	btfsc	status,0,c
 26831  01207E  D71B               	goto	l1058
 26832                           
 26833                           ; BSR set to: 0
 26834                           ;Console.c: 413: }
 26835                           ;Console.c: 415: if (clearall)
 26836                           
 26837                           ; BSR set to: 0
 26838  012080  0100               	movlb	0	; () banked
 26839  012082  51F9               	movf	_clearall& (0+255),w,b
 26840  012084  B4D8               	btfsc	status,2,c
 26841  012086  0012               	return	
 26842                           
 26843                           ; BSR set to: 0
 26844                           ;Console.c: 416: {
 26845                           ;Console.c: 417: clearall = 0;
 26846  012088  0E00               	movlw	0
 26847  01208A  0100               	movlb	0	; () banked
 26848  01208C  6FF9               	movwf	_clearall& (0+255),b
 26849                           
 26850                           ; BSR set to: 0
 26851                           ;Console.c: 418: lBufferY = temp;
 26852  01208E  C085  F0F7         	movff	Console_Render@temp,_lBufferY
 26853                           
 26854                           ; BSR set to: 0
 26855  012092  0012               	return	
 26856  012094                     __end_of_Console_Render:
 26857                           	opt stack 0
 26858                           tosu	equ	0xFFF
 26859                           tosh	equ	0xFFE
 26860                           tosl	equ	0xFFD
 26861                           pclath	equ	0xFFA
 26862                           tblptru	equ	0xFF8
 26863                           tblptrh	equ	0xFF7
 26864                           tblptrl	equ	0xFF6
 26865                           tablat	equ	0xFF5
 26866                           prodh	equ	0xFF4
 26867                           prodl	equ	0xFF3
 26868                           intcon	equ	0xFF2
 26869                           indf0	equ	0xFEF
 26870                           postinc0	equ	0xFEE
 26871                           fsr0h	equ	0xFEA
 26872                           fsr0l	equ	0xFE9
 26873                           wreg	equ	0xFE8
 26874                           indf1	equ	0xFE7
 26875                           postdec1	equ	0xFE5
 26876                           fsr1h	equ	0xFE2
 26877                           fsr1l	equ	0xFE1
 26878                           indf2	equ	0xFDF
 26879                           postinc2	equ	0xFDE
 26880                           postdec2	equ	0xFDD
 26881                           plusw2	equ	0xFDB
 26882                           fsr2h	equ	0xFDA
 26883                           fsr2l	equ	0xFD9
 26884                           status	equ	0xFD8
 26885                           
 26886 ;; *************** function _LCD_FillRectangle *****************
 26887 ;; Defined at:
 26888 ;;		line 318 in file "Library/LCD.c"
 26889 ;; Parameters:    Size  Location     Type
 26890 ;;  pColour         2    9[BANK0 ] unsigned short 
 26891 ;;  pPoint          4   11[BANK0 ] struct Point
 26892 ;;  pSize           4   15[BANK0 ] struct Point
 26893 ;; Auto vars:     Size  Location     Type
 26894 ;;  j               1   22[BANK0 ] unsigned char 
 26895 ;;  i               1   21[BANK0 ] unsigned char 
 26896 ;; Return value:  Size  Location     Type
 26897 ;;                  1    wreg      void 
 26898 ;; Registers used:
 26899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26900 ;; Tracked objects:
 26901 ;;		On entry : 0/0
 26902 ;;		On exit  : 0/0
 26903 ;;		Unchanged: 0/0
 26904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26905 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26908 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26909 ;;Total ram usage:       14 bytes
 26910 ;; Hardware stack levels used:    1
 26911 ;; Hardware stack levels required when called:   10
 26912 ;; This function calls:
 26913 ;;		_LCD_Word_Write
 26914 ;;		_Set_Addr_Window
 26915 ;; This function is called by:
 26916 ;;		_Console_Render
 26917 ;;		_Console_ClearLine
 26918 ;; This function uses a non-reentrant model
 26919 ;;
 26920                           
 26921                           	psect	text142
 26922  015AC6                     __ptext142:
 26923                           	opt stack 0
 26924  015AC6                     _LCD_FillRectangle:
 26925                           	opt stack 19
 26926                           
 26927                           ;LCD.c: 320: UINT8 i = 0x00;
 26928                           
 26929                           ; BSR set to: 0
 26930                           ;incstack = 0
 26931  015AC6  0E00               	movlw	0
 26932  015AC8  0100               	movlb	0	; () banked
 26933  015ACA  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 26934                           
 26935                           ;LCD.c: 321: UINT8 j = 0x00;
 26936  015ACC  0E00               	movlw	0
 26937  015ACE  0100               	movlb	0	; () banked
 26938  015AD0  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 26939                           
 26940                           ; BSR set to: 0
 26941                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 26942  015AD2  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 26943  015AD6  0100               	movlb	0	; () banked
 26944  015AD8  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26945  015ADA  0100               	movlb	0	; () banked
 26946  015ADC  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 26947  015ADE  0100               	movlb	0	; () banked
 26948  015AE0  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 26949  015AE2  0100               	movlb	0	; () banked
 26950  015AE4  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 26951  015AE6  0100               	movlb	0	; () banked
 26952  015AE8  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 26953  015AEA  0100               	movlb	0	; () banked
 26954  015AEC  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 26955  015AEE  0100               	movlb	0	; () banked
 26956  015AF0  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 26957  015AF2  0100               	movlb	0	; () banked
 26958  015AF4  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 26959  015AF6  0100               	movlb	0	; () banked
 26960  015AF8  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 26961  015AFA  0100               	movlb	0	; () banked
 26962  015AFC  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 26963  015AFE  0100               	movlb	0	; () banked
 26964  015B00  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26965  015B02  ECB1  F0A6         	call	_Set_Addr_Window
 26966                           
 26967                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 26968  015B06  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 26969  015B0A                     l14086:
 26970  015B0A  0100               	movlb	0	; () banked
 26971  015B0C  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 26972  015B0E  0100               	movlb	0	; () banked
 26973  015B10  B4D8               	btfsc	status,2,c
 26974  015B12  0012               	return	
 26975                           
 26976                           ; BSR set to: 0
 26977                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 26978                           
 26979                           ; BSR set to: 0
 26980  015B14  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 26981  015B18                     l14090:
 26982                           
 26983                           ; BSR set to: 0
 26984  015B18  0100               	movlb	0	; () banked
 26985  015B1A  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 26986  015B1C  0100               	movlb	0	; () banked
 26987  015B1E  B4D8               	btfsc	status,2,c
 26988  015B20  D009               	goto	u11580
 26989                           
 26990                           ; BSR set to: 0
 26991                           ;LCD.c: 333: LCD_Word_Write(pColour);
 26992                           
 26993                           ; BSR set to: 0
 26994                           
 26995                           ; BSR set to: 0
 26996  015B22  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 26997  015B26  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 26998  015B2A  EC97  F0B5         	call	_LCD_Word_Write	;wreg free
 26999  015B2E  0100               	movlb	0	; () banked
 27000  015B30  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 27001  015B32  D7F2               	goto	l14090
 27002  015B34                     u11580:
 27003                           
 27004                           ; BSR set to: 0
 27005                           
 27006                           ; BSR set to: 0
 27007  015B34  0100               	movlb	0	; () banked
 27008  015B36  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 27009  015B38  D7E8               	goto	l14086
 27010  015B3A                     __end_of_LCD_FillRectangle:
 27011                           	opt stack 0
 27012                           tosu	equ	0xFFF
 27013                           tosh	equ	0xFFE
 27014                           tosl	equ	0xFFD
 27015                           pclath	equ	0xFFA
 27016                           tblptru	equ	0xFF8
 27017                           tblptrh	equ	0xFF7
 27018                           tblptrl	equ	0xFF6
 27019                           tablat	equ	0xFF5
 27020                           prodh	equ	0xFF4
 27021                           prodl	equ	0xFF3
 27022                           intcon	equ	0xFF2
 27023                           indf0	equ	0xFEF
 27024                           postinc0	equ	0xFEE
 27025                           fsr0h	equ	0xFEA
 27026                           fsr0l	equ	0xFE9
 27027                           wreg	equ	0xFE8
 27028                           indf1	equ	0xFE7
 27029                           postdec1	equ	0xFE5
 27030                           fsr1h	equ	0xFE2
 27031                           fsr1l	equ	0xFE1
 27032                           indf2	equ	0xFDF
 27033                           postinc2	equ	0xFDE
 27034                           postdec2	equ	0xFDD
 27035                           plusw2	equ	0xFDB
 27036                           fsr2h	equ	0xFDA
 27037                           fsr2l	equ	0xFD9
 27038                           status	equ	0xFD8
 27039                           
 27040 ;; *************** function _LCD_DrawField *****************
 27041 ;; Defined at:
 27042 ;;		line 393 in file "Library/LCD.c"
 27043 ;; Parameters:    Size  Location     Type
 27044 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 27045 ;;		 -> Console_MakeField@Fill(70), 
 27046 ;;  pPoint          4   20[BANK0 ] struct Point
 27047 ;;  pSize           4   24[BANK0 ] struct Point
 27048 ;; Auto vars:     Size  Location     Type
 27049 ;;  count           2   30[BANK0 ] unsigned short 
 27050 ;;  i               1   34[BANK0 ] unsigned char 
 27051 ;;  ymax            1   33[BANK0 ] unsigned char 
 27052 ;;  xmax            1   32[BANK0 ] unsigned char 
 27053 ;; Return value:  Size  Location     Type
 27054 ;;                  1    wreg      void 
 27055 ;; Registers used:
 27056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27057 ;; Tracked objects:
 27058 ;;		On entry : 0/0
 27059 ;;		On exit  : 0/0
 27060 ;;		Unchanged: 0/0
 27061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27062 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27063 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27065 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27066 ;;Total ram usage:       17 bytes
 27067 ;; Hardware stack levels used:    1
 27068 ;; Hardware stack levels required when called:   10
 27069 ;; This function calls:
 27070 ;;		_LCD_Word_Write
 27071 ;;		_Set_Addr_Window
 27072 ;;		___wmul
 27073 ;; This function is called by:
 27074 ;;		_Console_Render
 27075 ;; This function uses a non-reentrant model
 27076 ;;
 27077                           
 27078                           	psect	text143
 27079  0150A8                     __ptext143:
 27080                           	opt stack 0
 27081  0150A8                     _LCD_DrawField:
 27082                           	opt stack 19
 27083                           
 27084                           ;LCD.c: 396: UINT8 i = 0x00;
 27085                           
 27086                           ; BSR set to: 0
 27087                           ;incstack = 0
 27088  0150A8  0E00               	movlw	0
 27089  0150AA  0100               	movlb	0	; () banked
 27090  0150AC  6F82               	movwf	LCD_DrawField@i& (0+255),b
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 27094  0150AE  0100               	movlb	0	; () banked
 27095  0150B0  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 27096  0150B2  0100               	movlb	0	; () banked
 27097  0150B4  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 27098  0150B6  0100               	movlb	0	; () banked
 27099  0150B8  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 27100                           
 27101                           ; BSR set to: 0
 27102                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 27103  0150BA  0100               	movlb	0	; () banked
 27104  0150BC  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 27105  0150BE  0100               	movlb	0	; () banked
 27106  0150C0  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 27107  0150C2  0100               	movlb	0	; () banked
 27108  0150C4  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 27109                           
 27110                           ; BSR set to: 0
 27111                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 27112  0150C6  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 27113  0150CA  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 27114  0150CE  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 27115  0150D2  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 27116  0150D6  EC9D  F0B3         	call	___wmul	;wreg free
 27117  0150DA  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 27118  0150DE  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 27119                           
 27120                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 27121  0150E2  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 27122  0150E6  0100               	movlb	0	; () banked
 27123  0150E8  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 27124  0150EA  0100               	movlb	0	; () banked
 27125  0150EC  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 27126  0150EE  0100               	movlb	0	; () banked
 27127  0150F0  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 27128  0150F2  0100               	movlb	0	; () banked
 27129  0150F4  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 27130  0150F6  0100               	movlb	0	; () banked
 27131  0150F8  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 27132  0150FA  ECB1  F0A6         	call	_Set_Addr_Window
 27133                           
 27134                           ;LCD.c: 403: for(i = 0; i < count; i++)
 27135  0150FE  0E00               	movlw	0
 27136  015100  0100               	movlb	0	; () banked
 27137  015102  6F82               	movwf	LCD_DrawField@i& (0+255),b
 27138  015104  D013               	goto	l183
 27139  015106                     
 27140                           ; BSR set to: 0
 27141                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 27142                           
 27143                           ; BSR set to: 0
 27144  015106  0100               	movlb	0	; () banked
 27145  015108  5182               	movf	LCD_DrawField@i& (0+255),w,b
 27146  01510A  0D02               	mullw	2
 27147  01510C  50F3               	movf	prodl,w,c
 27148  01510E  0100               	movlb	0	; () banked
 27149  015110  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 27150  015112  6ED9               	movwf	fsr2l,c
 27151  015114  50F4               	movf	prodh,w,c
 27152  015116  0100               	movlb	0	; () banked
 27153  015118  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 27154  01511A  6EDA               	movwf	fsr2h,c
 27155  01511C  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 27156  015120  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 27157  015124  EC97  F0B5         	call	_LCD_Word_Write	;wreg free
 27158  015128  0100               	movlb	0	; () banked
 27159  01512A  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 27160  01512C                     l183:
 27161                           
 27162                           ; BSR set to: 0
 27163                           
 27164                           ; BSR set to: 0
 27165  01512C  0100               	movlb	0	; () banked
 27166  01512E  5182               	movf	LCD_DrawField@i& (0+255),w,b
 27167  015130  0100               	movlb	0	; () banked
 27168  015132  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 27169  015134  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 27170  015136  0100               	movlb	0	; () banked
 27171  015138  517E               	movf	LCD_DrawField@count& (0+255),w,b
 27172  01513A  0100               	movlb	0	; () banked
 27173  01513C  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 27174  01513E  0100               	movlb	0	; () banked
 27175  015140  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 27176  015142  0100               	movlb	0	; () banked
 27177  015144  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 27178  015146  B0D8               	btfsc	status,0,c
 27179  015148  0012               	return	
 27180  01514A  D7DD               	goto	l184
 27181  01514C                     __end_of_LCD_DrawField:
 27182                           	opt stack 0
 27183                           tosu	equ	0xFFF
 27184                           tosh	equ	0xFFE
 27185                           tosl	equ	0xFFD
 27186                           pclath	equ	0xFFA
 27187                           tblptru	equ	0xFF8
 27188                           tblptrh	equ	0xFF7
 27189                           tblptrl	equ	0xFF6
 27190                           tablat	equ	0xFF5
 27191                           prodh	equ	0xFF4
 27192                           prodl	equ	0xFF3
 27193                           intcon	equ	0xFF2
 27194                           indf0	equ	0xFEF
 27195                           postinc0	equ	0xFEE
 27196                           fsr0h	equ	0xFEA
 27197                           fsr0l	equ	0xFE9
 27198                           wreg	equ	0xFE8
 27199                           indf1	equ	0xFE7
 27200                           postdec1	equ	0xFE5
 27201                           fsr1h	equ	0xFE2
 27202                           fsr1l	equ	0xFE1
 27203                           indf2	equ	0xFDF
 27204                           postinc2	equ	0xFDE
 27205                           postdec2	equ	0xFDD
 27206                           plusw2	equ	0xFDB
 27207                           fsr2h	equ	0xFDA
 27208                           fsr2l	equ	0xFD9
 27209                           status	equ	0xFD8
 27210                           
 27211 ;; *************** function ___wmul *****************
 27212 ;; Defined at:
 27213 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 27214 ;; Parameters:    Size  Location     Type
 27215 ;;  multiplier      2    0[BANK0 ] unsigned int 
 27216 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 27217 ;; Auto vars:     Size  Location     Type
 27218 ;;  product         2    4[BANK0 ] unsigned int 
 27219 ;; Return value:  Size  Location     Type
 27220 ;;                  2    0[BANK0 ] unsigned int 
 27221 ;; Registers used:
 27222 ;;		wreg, status,2, status,0, prodl, prodh
 27223 ;; Tracked objects:
 27224 ;;		On entry : 0/0
 27225 ;;		On exit  : 0/0
 27226 ;;		Unchanged: 0/0
 27227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27232 ;;Total ram usage:        6 bytes
 27233 ;; Hardware stack levels used:    1
 27234 ;; Hardware stack levels required when called:    7
 27235 ;; This function calls:
 27236 ;;		Nothing
 27237 ;; This function is called by:
 27238 ;;		_LCD_DrawField
 27239 ;;		_displayPositionMode
 27240 ;; This function uses a non-reentrant model
 27241 ;;
 27242                           
 27243                           	psect	text144
 27244  01673A                     __ptext144:
 27245                           	opt stack 0
 27246  01673A                     ___wmul:
 27247                           	opt stack 22
 27248                           
 27249                           ; BSR set to: 0
 27250                           ;incstack = 0
 27251  01673A  0100               	movlb	0	; () banked
 27252  01673C  5160               	movf	___wmul@multiplier& (0+255),w,b
 27253  01673E  0100               	movlb	0	; () banked
 27254  016740  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27255  016742  CFF3 F064          	movff	prodl,___wmul@product
 27256  016746  CFF4 F065          	movff	prodh,___wmul@product+1
 27257  01674A  0100               	movlb	0	; () banked
 27258  01674C  5160               	movf	___wmul@multiplier& (0+255),w,b
 27259  01674E  0100               	movlb	0	; () banked
 27260  016750  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 27261  016752  50F3               	movf	prodl,w,c
 27262  016754  0100               	movlb	0	; () banked
 27263  016756  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27264  016758  0100               	movlb	0	; () banked
 27265  01675A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 27266  01675C  0100               	movlb	0	; () banked
 27267  01675E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27268  016760  50F3               	movf	prodl,w,c
 27269  016762  0100               	movlb	0	; () banked
 27270  016764  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27271                           
 27272                           ; BSR set to: 0
 27273  016766  C064  F060         	movff	___wmul@product,?___wmul
 27274  01676A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 27275  01676E  0012               	return	
 27276  016770                     __end_of___wmul:
 27277                           	opt stack 0
 27278                           tosu	equ	0xFFF
 27279                           tosh	equ	0xFFE
 27280                           tosl	equ	0xFFD
 27281                           pclath	equ	0xFFA
 27282                           tblptru	equ	0xFF8
 27283                           tblptrh	equ	0xFF7
 27284                           tblptrl	equ	0xFF6
 27285                           tablat	equ	0xFF5
 27286                           prodh	equ	0xFF4
 27287                           prodl	equ	0xFF3
 27288                           intcon	equ	0xFF2
 27289                           indf0	equ	0xFEF
 27290                           postinc0	equ	0xFEE
 27291                           fsr0h	equ	0xFEA
 27292                           fsr0l	equ	0xFE9
 27293                           wreg	equ	0xFE8
 27294                           indf1	equ	0xFE7
 27295                           postdec1	equ	0xFE5
 27296                           fsr1h	equ	0xFE2
 27297                           fsr1l	equ	0xFE1
 27298                           indf2	equ	0xFDF
 27299                           postinc2	equ	0xFDE
 27300                           postdec2	equ	0xFDD
 27301                           plusw2	equ	0xFDB
 27302                           fsr2h	equ	0xFDA
 27303                           fsr2l	equ	0xFD9
 27304                           status	equ	0xFD8
 27305                           
 27306 ;; *************** function _Set_Addr_Window *****************
 27307 ;; Defined at:
 27308 ;;		line 214 in file "Library/LCD.c"
 27309 ;; Parameters:    Size  Location     Type
 27310 ;;  xs              1    wreg     unsigned char 
 27311 ;;  ys              1    5[BANK0 ] unsigned char 
 27312 ;;  xe              1    6[BANK0 ] unsigned char 
 27313 ;;  ye              1    7[BANK0 ] unsigned char 
 27314 ;; Auto vars:     Size  Location     Type
 27315 ;;  xs              1    8[BANK0 ] unsigned char 
 27316 ;; Return value:  Size  Location     Type
 27317 ;;                  1    wreg      void 
 27318 ;; Registers used:
 27319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27320 ;; Tracked objects:
 27321 ;;		On entry : 0/0
 27322 ;;		On exit  : 0/0
 27323 ;;		Unchanged: 0/0
 27324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27325 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27328 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27329 ;;Total ram usage:        4 bytes
 27330 ;; Hardware stack levels used:    1
 27331 ;; Hardware stack levels required when called:    9
 27332 ;; This function calls:
 27333 ;;		_LCD_Write
 27334 ;; This function is called by:
 27335 ;;		_LCD_Fill
 27336 ;;		_LCD_FillRectangle
 27337 ;;		_LCD_DrawField
 27338 ;;		_RAM_Address_Set
 27339 ;;		_LCD_DrawPixel
 27340 ;; This function uses a non-reentrant model
 27341 ;;
 27342                           
 27343                           	psect	text145
 27344  014D62                     __ptext145:
 27345                           	opt stack 0
 27346  014D62                     _Set_Addr_Window:
 27347                           	opt stack 18
 27348                           
 27349                           ; BSR set to: 0
 27350                           ;incstack = 0
 27351                           ;Set_Addr_Window@xs stored from wreg
 27352  014D62  0100               	movlb	0	; () banked
 27353  014D64  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 27354                           
 27355                           ;LCD.c: 216: ys+=2;
 27356  014D66  0E02               	movlw	2
 27357  014D68  0100               	movlb	0	; () banked
 27358  014D6A  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 27359                           
 27360                           ;LCD.c: 217: ye+=2;
 27361  014D6C  0E02               	movlw	2
 27362  014D6E  0100               	movlb	0	; () banked
 27363  014D70  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 27364                           
 27365                           ;LCD.c: 218: xs+=3;
 27366  014D72  0E03               	movlw	3
 27367  014D74  0100               	movlb	0	; () banked
 27368  014D76  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 27369                           
 27370                           ;LCD.c: 219: xe+=3;
 27371  014D78  0E03               	movlw	3
 27372  014D7A  0100               	movlb	0	; () banked
 27373  014D7C  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 27374                           
 27375                           ; BSR set to: 0
 27376                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 27377  014D7E  0E00               	movlw	0
 27378  014D80  0100               	movlb	0	; () banked
 27379  014D82  6F63               	movwf	LCD_Write@mode& (0+255),b
 27380  014D84  0E2A               	movlw	42
 27381  014D86  EC1C  F0B5         	call	_LCD_Write
 27382                           
 27383                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 27384  014D8A  0E01               	movlw	1
 27385  014D8C  0100               	movlb	0	; () banked
 27386  014D8E  6F63               	movwf	LCD_Write@mode& (0+255),b
 27387  014D90  0E00               	movlw	0
 27388  014D92  EC1C  F0B5         	call	_LCD_Write
 27389                           
 27390                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 27391  014D96  0E01               	movlw	1
 27392  014D98  0100               	movlb	0	; () banked
 27393  014D9A  6F63               	movwf	LCD_Write@mode& (0+255),b
 27394  014D9C  0100               	movlb	0	; () banked
 27395  014D9E  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 27396  014DA0  EC1C  F0B5         	call	_LCD_Write
 27397                           
 27398                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 27399  014DA4  0E01               	movlw	1
 27400  014DA6  0100               	movlb	0	; () banked
 27401  014DA8  6F63               	movwf	LCD_Write@mode& (0+255),b
 27402  014DAA  0E00               	movlw	0
 27403  014DAC  EC1C  F0B5         	call	_LCD_Write
 27404                           
 27405                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 27406  014DB0  0E01               	movlw	1
 27407  014DB2  0100               	movlb	0	; () banked
 27408  014DB4  6F63               	movwf	LCD_Write@mode& (0+255),b
 27409  014DB6  0100               	movlb	0	; () banked
 27410  014DB8  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 27411  014DBA  EC1C  F0B5         	call	_LCD_Write
 27412                           
 27413                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 27414  014DBE  0E00               	movlw	0
 27415  014DC0  0100               	movlb	0	; () banked
 27416  014DC2  6F63               	movwf	LCD_Write@mode& (0+255),b
 27417  014DC4  0E2B               	movlw	43
 27418  014DC6  EC1C  F0B5         	call	_LCD_Write
 27419                           
 27420                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 27421  014DCA  0E01               	movlw	1
 27422  014DCC  0100               	movlb	0	; () banked
 27423  014DCE  6F63               	movwf	LCD_Write@mode& (0+255),b
 27424  014DD0  0E00               	movlw	0
 27425  014DD2  EC1C  F0B5         	call	_LCD_Write
 27426                           
 27427                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 27428  014DD6  0E01               	movlw	1
 27429  014DD8  0100               	movlb	0	; () banked
 27430  014DDA  6F63               	movwf	LCD_Write@mode& (0+255),b
 27431  014DDC  0100               	movlb	0	; () banked
 27432  014DDE  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 27433  014DE0  EC1C  F0B5         	call	_LCD_Write
 27434                           
 27435                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 27436  014DE4  0E01               	movlw	1
 27437  014DE6  0100               	movlb	0	; () banked
 27438  014DE8  6F63               	movwf	LCD_Write@mode& (0+255),b
 27439  014DEA  0E00               	movlw	0
 27440  014DEC  EC1C  F0B5         	call	_LCD_Write
 27441                           
 27442                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 27443  014DF0  0E01               	movlw	1
 27444  014DF2  0100               	movlb	0	; () banked
 27445  014DF4  6F63               	movwf	LCD_Write@mode& (0+255),b
 27446  014DF6  0100               	movlb	0	; () banked
 27447  014DF8  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 27448  014DFA  EC1C  F0B5         	call	_LCD_Write
 27449                           
 27450                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 27451  014DFE  0E00               	movlw	0
 27452  014E00  0100               	movlb	0	; () banked
 27453  014E02  6F63               	movwf	LCD_Write@mode& (0+255),b
 27454  014E04  0E2C               	movlw	44
 27455  014E06  EC1C  F0B5         	call	_LCD_Write
 27456  014E0A  0012               	return		;funcret
 27457  014E0C                     __end_of_Set_Addr_Window:
 27458                           	opt stack 0
 27459                           tosu	equ	0xFFF
 27460                           tosh	equ	0xFFE
 27461                           tosl	equ	0xFFD
 27462                           pclath	equ	0xFFA
 27463                           tblptru	equ	0xFF8
 27464                           tblptrh	equ	0xFF7
 27465                           tblptrl	equ	0xFF6
 27466                           tablat	equ	0xFF5
 27467                           prodh	equ	0xFF4
 27468                           prodl	equ	0xFF3
 27469                           intcon	equ	0xFF2
 27470                           indf0	equ	0xFEF
 27471                           postinc0	equ	0xFEE
 27472                           fsr0h	equ	0xFEA
 27473                           fsr0l	equ	0xFE9
 27474                           wreg	equ	0xFE8
 27475                           indf1	equ	0xFE7
 27476                           postdec1	equ	0xFE5
 27477                           fsr1h	equ	0xFE2
 27478                           fsr1l	equ	0xFE1
 27479                           indf2	equ	0xFDF
 27480                           postinc2	equ	0xFDE
 27481                           postdec2	equ	0xFDD
 27482                           plusw2	equ	0xFDB
 27483                           fsr2h	equ	0xFDA
 27484                           fsr2l	equ	0xFD9
 27485                           status	equ	0xFD8
 27486                           
 27487 ;; *************** function _LCD_Word_Write *****************
 27488 ;; Defined at:
 27489 ;;		line 198 in file "Library/LCD.c"
 27490 ;; Parameters:    Size  Location     Type
 27491 ;;  value           2    5[BANK0 ] unsigned short 
 27492 ;; Auto vars:     Size  Location     Type
 27493 ;;		None
 27494 ;; Return value:  Size  Location     Type
 27495 ;;                  1    wreg      void 
 27496 ;; Registers used:
 27497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27498 ;; Tracked objects:
 27499 ;;		On entry : 0/0
 27500 ;;		On exit  : 0/0
 27501 ;;		Unchanged: 0/0
 27502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27503 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27507 ;;Total ram usage:        2 bytes
 27508 ;; Hardware stack levels used:    1
 27509 ;; Hardware stack levels required when called:    9
 27510 ;; This function calls:
 27511 ;;		_LCD_Write
 27512 ;; This function is called by:
 27513 ;;		_LCD_Fill
 27514 ;;		_LCD_FillRectangle
 27515 ;;		_LCD_DrawField
 27516 ;;		_LCD_DrawPixel
 27517 ;; This function uses a non-reentrant model
 27518 ;;
 27519                           
 27520                           	psect	text146
 27521  016B2E                     __ptext146:
 27522                           	opt stack 0
 27523  016B2E                     _LCD_Word_Write:
 27524                           	opt stack 18
 27525                           
 27526                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 27527                           
 27528                           ;incstack = 0
 27529  016B2E  0E01               	movlw	1
 27530  016B30  0100               	movlb	0	; () banked
 27531  016B32  6F63               	movwf	LCD_Write@mode& (0+255),b
 27532  016B34  0100               	movlb	0	; () banked
 27533  016B36  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 27534  016B38  EC1C  F0B5         	call	_LCD_Write
 27535                           
 27536                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 27537  016B3C  0E01               	movlw	1
 27538  016B3E  0100               	movlb	0	; () banked
 27539  016B40  6F63               	movwf	LCD_Write@mode& (0+255),b
 27540  016B42  0100               	movlb	0	; () banked
 27541  016B44  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 27542  016B46  EC1C  F0B5         	call	_LCD_Write
 27543  016B4A  0012               	return		;funcret
 27544  016B4C                     __end_of_LCD_Word_Write:
 27545                           	opt stack 0
 27546                           tosu	equ	0xFFF
 27547                           tosh	equ	0xFFE
 27548                           tosl	equ	0xFFD
 27549                           pclath	equ	0xFFA
 27550                           tblptru	equ	0xFF8
 27551                           tblptrh	equ	0xFF7
 27552                           tblptrl	equ	0xFF6
 27553                           tablat	equ	0xFF5
 27554                           prodh	equ	0xFF4
 27555                           prodl	equ	0xFF3
 27556                           intcon	equ	0xFF2
 27557                           indf0	equ	0xFEF
 27558                           postinc0	equ	0xFEE
 27559                           fsr0h	equ	0xFEA
 27560                           fsr0l	equ	0xFE9
 27561                           wreg	equ	0xFE8
 27562                           indf1	equ	0xFE7
 27563                           postdec1	equ	0xFE5
 27564                           fsr1h	equ	0xFE2
 27565                           fsr1l	equ	0xFE1
 27566                           indf2	equ	0xFDF
 27567                           postinc2	equ	0xFDE
 27568                           postdec2	equ	0xFDD
 27569                           plusw2	equ	0xFDB
 27570                           fsr2h	equ	0xFDA
 27571                           fsr2l	equ	0xFD9
 27572                           status	equ	0xFD8
 27573                           
 27574 ;; *************** function _LCD_Write *****************
 27575 ;; Defined at:
 27576 ;;		line 67 in file "Library/LCD.c"
 27577 ;; Parameters:    Size  Location     Type
 27578 ;;  value           1    wreg     unsigned char 
 27579 ;;  mode            1    3[BANK0 ] enum E6761
 27580 ;; Auto vars:     Size  Location     Type
 27581 ;;  value           1    4[BANK0 ] unsigned char 
 27582 ;; Return value:  Size  Location     Type
 27583 ;;                  1    wreg      void 
 27584 ;; Registers used:
 27585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27586 ;; Tracked objects:
 27587 ;;		On entry : 0/0
 27588 ;;		On exit  : 0/0
 27589 ;;		Unchanged: 0/0
 27590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27595 ;;Total ram usage:        2 bytes
 27596 ;; Hardware stack levels used:    1
 27597 ;; Hardware stack levels required when called:    8
 27598 ;; This function calls:
 27599 ;;		_Mode_Set
 27600 ;;		_SPI_Send
 27601 ;; This function is called by:
 27602 ;;		_LCD_Init
 27603 ;;		_LCD_Word_Write
 27604 ;;		_Set_Addr_Window
 27605 ;;		_Set_Rotation
 27606 ;;		_LCD_WriteCMD
 27607 ;;		_LCD_WriteData
 27608 ;;		_LCD_Data_Write
 27609 ;;		_LCD_Data_Write_4k
 27610 ;;		_Invert_Display
 27611 ;; This function uses a non-reentrant model
 27612 ;;
 27613                           
 27614                           	psect	text147
 27615  016A38                     __ptext147:
 27616                           	opt stack 0
 27617  016A38                     _LCD_Write:
 27618                           	opt stack 19
 27619                           
 27620                           ;incstack = 0
 27621                           ;LCD_Write@value stored from wreg
 27622  016A38  0100               	movlb	0	; () banked
 27623  016A3A  6F64               	movwf	LCD_Write@value& (0+255),b
 27624                           
 27625                           ;LCD.c: 89: Mode_Set(mode);
 27626  016A3C  0100               	movlb	0	; () banked
 27627  016A3E  5163               	movf	LCD_Write@mode& (0+255),w,b
 27628  016A40  EC36  F0B6         	call	_Mode_Set
 27629                           
 27630                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 27631  016A44  0E72               	movlw	low _SPI2
 27632  016A46  0100               	movlb	0	; () banked
 27633  016A48  6F60               	movwf	SPI_Send@pInput& (0+255),b
 27634  016A4A  0E01               	movlw	high _SPI2
 27635  016A4C  0100               	movlb	0	; () banked
 27636  016A4E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 27637  016A50  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 27638  016A54  ECA9  F0AE         	call	_SPI_Send	;wreg free
 27639  016A58  0012               	return		;funcret
 27640  016A5A                     __end_of_LCD_Write:
 27641                           	opt stack 0
 27642                           tosu	equ	0xFFF
 27643                           tosh	equ	0xFFE
 27644                           tosl	equ	0xFFD
 27645                           pclath	equ	0xFFA
 27646                           tblptru	equ	0xFF8
 27647                           tblptrh	equ	0xFF7
 27648                           tblptrl	equ	0xFF6
 27649                           tablat	equ	0xFF5
 27650                           prodh	equ	0xFF4
 27651                           prodl	equ	0xFF3
 27652                           intcon	equ	0xFF2
 27653                           indf0	equ	0xFEF
 27654                           postinc0	equ	0xFEE
 27655                           fsr0h	equ	0xFEA
 27656                           fsr0l	equ	0xFE9
 27657                           wreg	equ	0xFE8
 27658                           indf1	equ	0xFE7
 27659                           postdec1	equ	0xFE5
 27660                           fsr1h	equ	0xFE2
 27661                           fsr1l	equ	0xFE1
 27662                           indf2	equ	0xFDF
 27663                           postinc2	equ	0xFDE
 27664                           postdec2	equ	0xFDD
 27665                           plusw2	equ	0xFDB
 27666                           fsr2h	equ	0xFDA
 27667                           fsr2l	equ	0xFD9
 27668                           status	equ	0xFD8
 27669                           
 27670 ;; *************** function _SPI_Send *****************
 27671 ;; Defined at:
 27672 ;;		line 226 in file "Library/SPI.c"
 27673 ;; Parameters:    Size  Location     Type
 27674 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 27675 ;;		 -> SPI1(11), SPI2(11), 
 27676 ;;  pData           1    2[BANK0 ] unsigned char 
 27677 ;; Auto vars:     Size  Location     Type
 27678 ;;		None
 27679 ;; Return value:  Size  Location     Type
 27680 ;;                  1    wreg      unsigned char 
 27681 ;; Registers used:
 27682 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27683 ;; Tracked objects:
 27684 ;;		On entry : 0/0
 27685 ;;		On exit  : 0/0
 27686 ;;		Unchanged: 0/0
 27687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27691 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27692 ;;Total ram usage:        3 bytes
 27693 ;; Hardware stack levels used:    1
 27694 ;; Hardware stack levels required when called:    7
 27695 ;; This function calls:
 27696 ;;		Nothing
 27697 ;; This function is called by:
 27698 ;;		_LCD_Write
 27699 ;;		_OutSeg
 27700 ;; This function uses a non-reentrant model
 27701 ;;
 27702                           
 27703                           	psect	text148
 27704  015D52                     __ptext148:
 27705                           	opt stack 0
 27706  015D52                     _SPI_Send:
 27707                           	opt stack 19
 27708                           
 27709                           ;SPI.c: 253: switch (pInput->mChannel)
 27710                           
 27711                           ;incstack = 0
 27712  015D52  D024               	goto	l678
 27713  015D54                     
 27714                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 27715  015D54  C039  FFD9         	movff	_PortC+4,fsr2l
 27716  015D58  C03A  FFDA         	movff	_PortC+5,fsr2h
 27717  015D5C  94DF               	bcf	indf2,2,c
 27718                           
 27719                           ;SPI.c: 257: SSP1BUF = pData;
 27720  015D5E  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 27721  015D62  A0C7               	btfss	4039,0,c	;volatile
 27722  015D64  D7FE               	goto	l681
 27723                           
 27724                           ;SPI.c: 259: pData = SSP1BUF;
 27725  015D66  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 27726                           
 27727                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 27728  015D6A  C039  FFD9         	movff	_PortC+4,fsr2l
 27729  015D6E  C03A  FFDA         	movff	_PortC+5,fsr2h
 27730  015D72  84DF               	bsf	indf2,2,c
 27731                           
 27732                           ;SPI.c: 261: return pData;
 27733                           ;	Return value of _SPI_Send is never used
 27734  015D74  0012               	return	
 27735  015D76                     
 27736                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 27737  015D76  C1A9  FFD9         	movff	_PortD+4,fsr2l
 27738  015D7A  C1AA  FFDA         	movff	_PortD+5,fsr2h
 27739  015D7E  0101               	movlb	1	; () banked
 27740  015D80  9EDF               	bcf	indf2,7,c
 27741                           
 27742                           ; BSR set to: 1
 27743                           ;SPI.c: 264: SSP2BUF = pData;
 27744  015D82  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 27745  015D86                     
 27746                           ; BSR set to: 1
 27747  015D86  A06D               	btfss	3949,0,c	;volatile
 27748  015D88  D7FE               	goto	l686
 27749                           
 27750                           ;SPI.c: 266: pData = SSP2BUF;
 27751  015D8A  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 27752                           
 27753                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 27754  015D8E  C1A9  FFD9         	movff	_PortD+4,fsr2l
 27755  015D92  C1AA  FFDA         	movff	_PortD+5,fsr2h
 27756  015D96  0101               	movlb	1	; () banked
 27757  015D98  8EDF               	bsf	indf2,7,c
 27758                           
 27759                           ; BSR set to: 1
 27760                           ;SPI.c: 269: };
 27761                           
 27762                           ; BSR set to: 1
 27763                           ;SPI.c: 268: return pData;
 27764                           ;	Return value of _SPI_Send is never used
 27765  015D9A  0012               	return	
 27766  015D9C                     l678:
 27767                           
 27768                           ; BSR set to: 1
 27769  015D9C  0100               	movlb	0	; () banked
 27770  015D9E  EE20 F002          	lfsr	2,2
 27771  015DA2  5160               	movf	SPI_Send@pInput& (0+255),w,b
 27772  015DA4  26D9               	addwf	fsr2l,f,c
 27773  015DA6  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 27774  015DA8  22DA               	addwfc	fsr2h,f,c
 27775  015DAA  50DF               	movf	indf2,w,c
 27776                           
 27777                           ; Switch size 1, requested type "space"
 27778                           ; Number of cases is 2, Range of values is 0 to 1
 27779                           ; switch strategies available:
 27780                           ; Name         Instructions Cycles
 27781                           ; simple_byte            7     4 (average)
 27782                           ;	Chosen strategy is simple_byte
 27783  015DAC  0A00               	xorlw	0	; case 0
 27784  015DAE  B4D8               	btfsc	status,2,c
 27785  015DB0  D7D1               	goto	l679
 27786  015DB2  0A01               	xorlw	1	; case 1
 27787  015DB4  A4D8               	btfss	status,2,c
 27788  015DB6  0012               	return	
 27789  015DB8  D7DE               	goto	l684
 27790  015DBA                     __end_of_SPI_Send:
 27791                           	opt stack 0
 27792                           tosu	equ	0xFFF
 27793                           tosh	equ	0xFFE
 27794                           tosl	equ	0xFFD
 27795                           pclath	equ	0xFFA
 27796                           tblptru	equ	0xFF8
 27797                           tblptrh	equ	0xFF7
 27798                           tblptrl	equ	0xFF6
 27799                           tablat	equ	0xFF5
 27800                           prodh	equ	0xFF4
 27801                           prodl	equ	0xFF3
 27802                           intcon	equ	0xFF2
 27803                           indf0	equ	0xFEF
 27804                           postinc0	equ	0xFEE
 27805                           fsr0h	equ	0xFEA
 27806                           fsr0l	equ	0xFE9
 27807                           wreg	equ	0xFE8
 27808                           indf1	equ	0xFE7
 27809                           postdec1	equ	0xFE5
 27810                           fsr1h	equ	0xFE2
 27811                           fsr1l	equ	0xFE1
 27812                           indf2	equ	0xFDF
 27813                           postinc2	equ	0xFDE
 27814                           postdec2	equ	0xFDD
 27815                           plusw2	equ	0xFDB
 27816                           fsr2h	equ	0xFDA
 27817                           fsr2l	equ	0xFD9
 27818                           status	equ	0xFD8
 27819                           
 27820 ;; *************** function _Mode_Set *****************
 27821 ;; Defined at:
 27822 ;;		line 40 in file "Library/LCD.c"
 27823 ;; Parameters:    Size  Location     Type
 27824 ;;  pMode           1    wreg     enum E6761
 27825 ;; Auto vars:     Size  Location     Type
 27826 ;;  pMode           1    0[BANK0 ] enum E6761
 27827 ;; Return value:  Size  Location     Type
 27828 ;;                  1    wreg      void 
 27829 ;; Registers used:
 27830 ;;		wreg
 27831 ;; Tracked objects:
 27832 ;;		On entry : 0/0
 27833 ;;		On exit  : 0/0
 27834 ;;		Unchanged: 0/0
 27835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27840 ;;Total ram usage:        1 bytes
 27841 ;; Hardware stack levels used:    1
 27842 ;; Hardware stack levels required when called:    7
 27843 ;; This function calls:
 27844 ;;		Nothing
 27845 ;; This function is called by:
 27846 ;;		_LCD_Write
 27847 ;; This function uses a non-reentrant model
 27848 ;;
 27849                           
 27850                           	psect	text149
 27851  016C6C                     __ptext149:
 27852                           	opt stack 0
 27853  016C6C                     _Mode_Set:
 27854                           	opt stack 19
 27855                           
 27856                           ;incstack = 0
 27857                           ;Mode_Set@pMode stored from wreg
 27858  016C6C  0100               	movlb	0	; () banked
 27859  016C6E  6F60               	movwf	Mode_Set@pMode& (0+255),b
 27860                           
 27861                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 27862  016C70  0100               	movlb	0	; () banked
 27863  016C72  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 27864  016C74  D002               	bra	u9305
 27865  016C76  9E85               	bcf	3973,7,c	;volatile
 27866  016C78  D001               	bra	u9306
 27867  016C7A                     u9305:
 27868  016C7A  8E85               	bsf	3973,7,c	;volatile
 27869  016C7C                     u9306:
 27870  016C7C  0012               	return		;funcret
 27871  016C7E                     __end_of_Mode_Set:
 27872                           	opt stack 0
 27873                           tosu	equ	0xFFF
 27874                           tosh	equ	0xFFE
 27875                           tosl	equ	0xFFD
 27876                           pclath	equ	0xFFA
 27877                           tblptru	equ	0xFF8
 27878                           tblptrh	equ	0xFF7
 27879                           tblptrl	equ	0xFF6
 27880                           tablat	equ	0xFF5
 27881                           prodh	equ	0xFF4
 27882                           prodl	equ	0xFF3
 27883                           intcon	equ	0xFF2
 27884                           indf0	equ	0xFEF
 27885                           postinc0	equ	0xFEE
 27886                           fsr0h	equ	0xFEA
 27887                           fsr0l	equ	0xFE9
 27888                           wreg	equ	0xFE8
 27889                           indf1	equ	0xFE7
 27890                           postdec1	equ	0xFE5
 27891                           fsr1h	equ	0xFE2
 27892                           fsr1l	equ	0xFE1
 27893                           indf2	equ	0xFDF
 27894                           postinc2	equ	0xFDE
 27895                           postdec2	equ	0xFDD
 27896                           plusw2	equ	0xFDB
 27897                           fsr2h	equ	0xFDA
 27898                           fsr2l	equ	0xFD9
 27899                           status	equ	0xFD8
 27900                           
 27901 ;; *************** function _Console_MakeField *****************
 27902 ;; Defined at:
 27903 ;;		line 435 in file "Library/Console.c"
 27904 ;; Parameters:    Size  Location     Type
 27905 ;;  pInput          1    wreg     unsigned char 
 27906 ;; Auto vars:     Size  Location     Type
 27907 ;;  pInput          1   11[BANK0 ] unsigned char 
 27908 ;;  y               1   17[BANK0 ] unsigned char 
 27909 ;;  x               1   16[BANK0 ] unsigned char 
 27910 ;;  Column          2   12[BANK0 ] PTR struct Byte
 27911 ;;		 -> Font5x7(480), 
 27912 ;;  Index           2    9[BANK0 ] unsigned short 
 27913 ;; Return value:  Size  Location     Type
 27914 ;;                  2    5[BANK0 ] PTR unsigned short 
 27915 ;; Registers used:
 27916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27917 ;; Tracked objects:
 27918 ;;		On entry : 0/0
 27919 ;;		On exit  : 0/0
 27920 ;;		Unchanged: 0/0
 27921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27923 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27925 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27926 ;;Total ram usage:       13 bytes
 27927 ;; Hardware stack levels used:    1
 27928 ;; Hardware stack levels required when called:    8
 27929 ;; This function calls:
 27930 ;;		_Byte_GetBit
 27931 ;; This function is called by:
 27932 ;;		_Console_Render
 27933 ;; This function uses a non-reentrant model
 27934 ;;
 27935                           
 27936                           	psect	text150
 27937  0143C8                     __ptext150:
 27938                           	opt stack 0
 27939  0143C8                     _Console_MakeField:
 27940                           	opt stack 21
 27941                           
 27942                           ;incstack = 0
 27943                           ;Console_MakeField@pInput stored from wreg
 27944  0143C8  0100               	movlb	0	; () banked
 27945  0143CA  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 27946                           
 27947                           ;Console.c: 437: static Colour Fill[7][5];
 27948                           ;Console.c: 438: pInput -= 32;
 27949  0143CC  0E20               	movlw	32
 27950  0143CE  0100               	movlb	0	; () banked
 27951  0143D0  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 27952                           
 27953                           ; BSR set to: 0
 27954                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 27955  0143D2  0100               	movlb	0	; () banked
 27956  0143D4  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 27957  0143D6  0D05               	mullw	5
 27958  0143D8  CFF3 F069          	movff	prodl,Console_MakeField@Index
 27959  0143DC  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 27960                           
 27961                           ; BSR set to: 0
 27962                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 27963  0143E0  0ECF               	movlw	low _Font5x7
 27964  0143E2  0100               	movlb	0	; () banked
 27965  0143E4  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 27966  0143E6  0100               	movlb	0	; () banked
 27967  0143E8  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 27968  0143EA  0EFC               	movlw	high _Font5x7
 27969  0143EC  0100               	movlb	0	; () banked
 27970  0143EE  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 27971  0143F0  0100               	movlb	0	; () banked
 27972  0143F2  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 27973                           
 27974                           ; BSR set to: 0
 27975                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 27976  0143F4  0E00               	movlw	0
 27977  0143F6  0100               	movlb	0	; () banked
 27978  0143F8  6F70               	movwf	Console_MakeField@x& (0+255),b
 27979  0143FA                     l14156:
 27980                           
 27981                           ; BSR set to: 0
 27982  0143FA  0E04               	movlw	4
 27983  0143FC  0100               	movlb	0	; () banked
 27984  0143FE  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 27985  014400  D001               	goto	l1077
 27986  014402  D043               	goto	u11690
 27987  014404                     l1077:
 27988                           
 27989                           ; BSR set to: 0
 27990                           ;Console.c: 444: {
 27991                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 27992                           
 27993                           ; BSR set to: 0
 27994  014404  0E00               	movlw	0
 27995  014406  0100               	movlb	0	; () banked
 27996  014408  6F71               	movwf	Console_MakeField@y& (0+255),b
 27997  01440A                     l14162:
 27998                           
 27999                           ; BSR set to: 0
 28000  01440A  0E06               	movlw	6
 28001  01440C  0100               	movlb	0	; () banked
 28002  01440E  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 28003  014410  D001               	goto	l1079
 28004  014412  D035               	goto	u11680
 28005  014414                     l1079:
 28006                           
 28007                           ; BSR set to: 0
 28008                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 28009                           
 28010                           ; BSR set to: 0
 28011  014414  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 28012  014418  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 28013  01441C  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 28014  014420  ECD3  F0B3         	call	_Byte_GetBit	;wreg free
 28015  014424  0900               	iorlw	0
 28016  014426  A4D8               	btfss	status,2,c
 28017  014428  D005               	goto	l1082
 28018  01442A  C0EC  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 28019  01442E  C0ED  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 28020  014432  D004               	goto	l1084
 28021  014434                     l1082:
 28022  014434  C0FA  F06E         	movff	_gForecolour,_Console_MakeField$10974
 28023  014438  C0FB  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 28024  01443C                     l1084:
 28025  01443C  0100               	movlb	0	; () banked
 28026  01443E  5171               	movf	Console_MakeField@y& (0+255),w,b
 28027  014440  0D0A               	mullw	10
 28028  014442  0E1E               	movlw	low Console_MakeField@Fill
 28029  014444  0100               	movlb	0	; () banked
 28030  014446  6F67               	movwf	??_Console_MakeField& (0+255),b
 28031  014448  0E02               	movlw	high Console_MakeField@Fill
 28032  01444A  0100               	movlb	0	; () banked
 28033  01444C  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 28034  01444E  50F3               	movf	prodl,w,c
 28035  014450  0100               	movlb	0	; () banked
 28036  014452  2767               	addwf	??_Console_MakeField& (0+255),f,b
 28037  014454  50F4               	movf	prodh,w,c
 28038  014456  0100               	movlb	0	; () banked
 28039  014458  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 28040  01445A  0100               	movlb	0	; () banked
 28041  01445C  5170               	movf	Console_MakeField@x& (0+255),w,b
 28042  01445E  0D02               	mullw	2
 28043  014460  50F3               	movf	prodl,w,c
 28044  014462  0100               	movlb	0	; () banked
 28045  014464  2567               	addwf	??_Console_MakeField& (0+255),w,b
 28046  014466  6ED9               	movwf	fsr2l,c
 28047  014468  50F4               	movf	prodh,w,c
 28048  01446A  0100               	movlb	0	; () banked
 28049  01446C  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 28050  01446E  6EDA               	movwf	fsr2h,c
 28051  014470  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 28052  014474  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 28053                           
 28054                           ; BSR set to: 0
 28055  014478  0100               	movlb	0	; () banked
 28056  01447A  2B71               	incf	Console_MakeField@y& (0+255),f,b
 28057  01447C  D7C6               	goto	l14162
 28058  01447E                     u11680:
 28059                           
 28060                           ; BSR set to: 0
 28061                           ;Console.c: 447: Column += 1;
 28062                           
 28063                           ; BSR set to: 0
 28064  01447E  0100               	movlb	0	; () banked
 28065  014480  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 28066  014482  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 28067  014484  0100               	movlb	0	; () banked
 28068  014486  2B70               	incf	Console_MakeField@x& (0+255),f,b
 28069  014488  D7B8               	goto	l14156
 28070  01448A                     u11690:
 28071                           
 28072                           ; BSR set to: 0
 28073                           ;Console.c: 448: }
 28074                           ;Console.c: 449: return (ColourPtr)Fill;
 28075                           
 28076                           ; BSR set to: 0
 28077  01448A  0E1E               	movlw	low Console_MakeField@Fill
 28078  01448C  0100               	movlb	0	; () banked
 28079  01448E  6F65               	movwf	?_Console_MakeField& (0+255),b
 28080  014490  0E02               	movlw	high Console_MakeField@Fill
 28081  014492  0100               	movlb	0	; () banked
 28082  014494  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 28083  014496  0012               	return	
 28084  014498                     __end_of_Console_MakeField:
 28085                           	opt stack 0
 28086                           tosu	equ	0xFFF
 28087                           tosh	equ	0xFFE
 28088                           tosl	equ	0xFFD
 28089                           pclath	equ	0xFFA
 28090                           tblptru	equ	0xFF8
 28091                           tblptrh	equ	0xFF7
 28092                           tblptrl	equ	0xFF6
 28093                           tablat	equ	0xFF5
 28094                           prodh	equ	0xFF4
 28095                           prodl	equ	0xFF3
 28096                           intcon	equ	0xFF2
 28097                           indf0	equ	0xFEF
 28098                           postinc0	equ	0xFEE
 28099                           fsr0h	equ	0xFEA
 28100                           fsr0l	equ	0xFE9
 28101                           wreg	equ	0xFE8
 28102                           indf1	equ	0xFE7
 28103                           postdec1	equ	0xFE5
 28104                           fsr1h	equ	0xFE2
 28105                           fsr1l	equ	0xFE1
 28106                           indf2	equ	0xFDF
 28107                           postinc2	equ	0xFDE
 28108                           postdec2	equ	0xFDD
 28109                           plusw2	equ	0xFDB
 28110                           fsr2h	equ	0xFDA
 28111                           fsr2l	equ	0xFD9
 28112                           status	equ	0xFD8
 28113                           
 28114 ;; *************** function _Byte_GetBit *****************
 28115 ;; Defined at:
 28116 ;;		line 38 in file "Library/Types.c"
 28117 ;; Parameters:    Size  Location     Type
 28118 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28119 ;;		 -> Font5x7(480), 
 28120 ;;  pBit            1    2[BANK0 ] unsigned char 
 28121 ;; Auto vars:     Size  Location     Type
 28122 ;;  Output          1    4[BANK0 ] unsigned char 
 28123 ;; Return value:  Size  Location     Type
 28124 ;;                  1    wreg      unsigned char 
 28125 ;; Registers used:
 28126 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 28127 ;; Tracked objects:
 28128 ;;		On entry : 0/0
 28129 ;;		On exit  : 0/0
 28130 ;;		Unchanged: 0/0
 28131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28132 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28135 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28136 ;;Total ram usage:        5 bytes
 28137 ;; Hardware stack levels used:    1
 28138 ;; Hardware stack levels required when called:    7
 28139 ;; This function calls:
 28140 ;;		Nothing
 28141 ;; This function is called by:
 28142 ;;		_Console_MakeField
 28143 ;;		_Word_GetBit
 28144 ;; This function uses a non-reentrant model
 28145 ;;
 28146                           
 28147                           	psect	text151
 28148  0167A6                     __ptext151:
 28149                           	opt stack 0
 28150  0167A6                     _Byte_GetBit:
 28151                           	opt stack 21
 28152                           
 28153                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 28154                           
 28155                           ; BSR set to: 0
 28156                           ;incstack = 0
 28157  0167A6  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 28158  0167AA  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 28159  0167AE                     	if	0	;tblptru may be non-zero
 28160  0167AE                     	endif
 28161  0167AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 28162  0167AE  0E00               	movlw	low (__mediumconst shr (0+16))
 28163  0167B0  6EF8               	movwf	tblptru,c
 28164  0167B2                     	endif
 28165  0167B2  0008               	tblrd		*
 28166  0167B4  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 28167                           
 28168                           ;Types.c: 42: Output >>= pBit;
 28169  0167B8  0100               	movlb	0	; () banked
 28170  0167BA  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 28171  0167BC  0100               	movlb	0	; () banked
 28172  0167BE  6F63               	movwf	??_Byte_GetBit& (0+255),b
 28173  0167C0  D003               	goto	u11010
 28174  0167C2                     u11015:
 28175  0167C2  0100               	movlb	0	; () banked
 28176  0167C4  90D8               	bcf	status,0,c
 28177  0167C6  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 28178  0167C8                     u11010:
 28179  0167C8  0100               	movlb	0	; () banked
 28180  0167CA  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 28181  0167CC  D7FA               	goto	u11015
 28182                           
 28183                           ;Types.c: 43: Output &= 1;
 28184  0167CE  0E01               	movlw	1
 28185  0167D0  0100               	movlb	0	; () banked
 28186  0167D2  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 28187                           
 28188                           ; BSR set to: 0
 28189                           ;Types.c: 44: return Output;
 28190  0167D4  0100               	movlb	0	; () banked
 28191  0167D6  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 28192  0167D8  0012               	return	
 28193  0167DA                     __end_of_Byte_GetBit:
 28194                           	opt stack 0
 28195                           tosu	equ	0xFFF
 28196                           tosh	equ	0xFFE
 28197                           tosl	equ	0xFFD
 28198                           pclath	equ	0xFFA
 28199                           tblptru	equ	0xFF8
 28200                           tblptrh	equ	0xFF7
 28201                           tblptrl	equ	0xFF6
 28202                           tablat	equ	0xFF5
 28203                           prodh	equ	0xFF4
 28204                           prodl	equ	0xFF3
 28205                           intcon	equ	0xFF2
 28206                           indf0	equ	0xFEF
 28207                           postinc0	equ	0xFEE
 28208                           fsr0h	equ	0xFEA
 28209                           fsr0l	equ	0xFE9
 28210                           wreg	equ	0xFE8
 28211                           indf1	equ	0xFE7
 28212                           postdec1	equ	0xFE5
 28213                           fsr1h	equ	0xFE2
 28214                           fsr1l	equ	0xFE1
 28215                           indf2	equ	0xFDF
 28216                           postinc2	equ	0xFDE
 28217                           postdec2	equ	0xFDD
 28218                           plusw2	equ	0xFDB
 28219                           fsr2h	equ	0xFDA
 28220                           fsr2l	equ	0xFD9
 28221                           status	equ	0xFD8
 28222                           
 28223 ;; *************** function _ADC_Voltage *****************
 28224 ;; Defined at:
 28225 ;;		line 259 in file "Library/ADC.c"
 28226 ;; Parameters:    Size  Location     Type
 28227 ;;  pInput          2   53[BANK0 ] PTR struct ADC
 28228 ;;		 -> ADC_AN0(5), 
 28229 ;; Auto vars:     Size  Location     Type
 28230 ;;  output          4   67[BANK0 ] float 
 28231 ;;  ref             4   63[BANK0 ] const float 
 28232 ;;  max             4   59[BANK0 ] const float 
 28233 ;; Return value:  Size  Location     Type
 28234 ;;                  4   53[BANK0 ] float 
 28235 ;; Registers used:
 28236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28237 ;; Tracked objects:
 28238 ;;		On entry : 0/0
 28239 ;;		On exit  : 0/0
 28240 ;;		Unchanged: 0/0
 28241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28242 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28243 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28245 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28246 ;;Total ram usage:       18 bytes
 28247 ;; Hardware stack levels used:    1
 28248 ;; Hardware stack levels required when called:    8
 28249 ;; This function calls:
 28250 ;;		___fldiv
 28251 ;;		___flmul
 28252 ;;		___xxtofl
 28253 ;; This function is called by:
 28254 ;;		_main
 28255 ;; This function uses a non-reentrant model
 28256 ;;
 28257                           
 28258                           	psect	text152
 28259  014146                     __ptext152:
 28260                           	opt stack 0
 28261  014146                     _ADC_Voltage:
 28262                           	opt stack 22
 28263                           
 28264                           ;ADC.c: 261: const float max = 1024;
 28265                           
 28266                           ; BSR set to: 0
 28267                           ;incstack = 0
 28268  014146  0E00               	movlw	0
 28269  014148  0100               	movlb	0	; () banked
 28270  01414A  6F9B               	movwf	ADC_Voltage@max& (0+255),b
 28271  01414C  0E00               	movlw	0
 28272  01414E  6F9C               	movwf	(ADC_Voltage@max+1)& (0+255),b
 28273  014150  0E80               	movlw	128
 28274  014152  6F9D               	movwf	(ADC_Voltage@max+2)& (0+255),b
 28275  014154  0E44               	movlw	68
 28276  014156  6F9E               	movwf	(ADC_Voltage@max+3)& (0+255),b
 28277                           
 28278                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 28279  014158  0E33               	movlw	51
 28280  01415A  0100               	movlb	0	; () banked
 28281  01415C  6F9F               	movwf	ADC_Voltage@ref& (0+255),b
 28282  01415E  0E33               	movlw	51
 28283  014160  6FA0               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 28284  014162  0E53               	movlw	83
 28285  014164  6FA1               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 28286  014166  0E40               	movlw	64
 28287  014168  6FA2               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 28288                           
 28289                           ; BSR set to: 0
 28290                           ;ADC.c: 263: float output = pInput->mValue;
 28291  01416A  0100               	movlb	0	; () banked
 28292  01416C  EE20 F001          	lfsr	2,1
 28293  014170  5195               	movf	ADC_Voltage@pInput& (0+255),w,b
 28294  014172  26D9               	addwf	fsr2l,f,c
 28295  014174  5196               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 28296  014176  22DA               	addwfc	fsr2h,f,c
 28297  014178  CFDE F099          	movff	postinc2,??_ADC_Voltage
 28298  01417C  CFDD F09A          	movff	postdec2,??_ADC_Voltage+1
 28299  014180  C099  F06E         	movff	??_ADC_Voltage,___xxtofl@val
 28300  014184  C09A  F06F         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 28301  014188  0100               	movlb	0	; () banked
 28302  01418A  6B70               	clrf	(___xxtofl@val+2)& (0+255),b
 28303  01418C  6B71               	clrf	(___xxtofl@val+3)& (0+255),b
 28304  01418E  0E00               	movlw	0
 28305  014190  EC47  F092         	call	___xxtofl
 28306  014194  C06E  F0A3         	movff	?___xxtofl,ADC_Voltage@output
 28307  014198  C06F  F0A4         	movff	?___xxtofl+1,ADC_Voltage@output+1
 28308  01419C  C070  F0A5         	movff	?___xxtofl+2,ADC_Voltage@output+2
 28309  0141A0  C071  F0A6         	movff	?___xxtofl+3,ADC_Voltage@output+3
 28310                           
 28311                           ;ADC.c: 265: output /= max;
 28312  0141A4  C0A3  F060         	movff	ADC_Voltage@output,___fldiv@b
 28313  0141A8  C0A4  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
 28314  0141AC  C0A5  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
 28315  0141B0  C0A6  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
 28316  0141B4  C09B  F064         	movff	ADC_Voltage@max,___fldiv@a
 28317  0141B8  C09C  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
 28318  0141BC  C09D  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
 28319  0141C0  C09E  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
 28320  0141C4  ECB6  F086         	call	___fldiv	;wreg free
 28321  0141C8  C060  F0A3         	movff	?___fldiv,ADC_Voltage@output
 28322  0141CC  C061  F0A4         	movff	?___fldiv+1,ADC_Voltage@output+1
 28323  0141D0  C062  F0A5         	movff	?___fldiv+2,ADC_Voltage@output+2
 28324  0141D4  C063  F0A6         	movff	?___fldiv+3,ADC_Voltage@output+3
 28325                           
 28326                           ;ADC.c: 266: output *= ref;
 28327  0141D8  C0A3  F07C         	movff	ADC_Voltage@output,___flmul@b
 28328  0141DC  C0A4  F07D         	movff	ADC_Voltage@output+1,___flmul@b+1
 28329  0141E0  C0A5  F07E         	movff	ADC_Voltage@output+2,___flmul@b+2
 28330  0141E4  C0A6  F07F         	movff	ADC_Voltage@output+3,___flmul@b+3
 28331  0141E8  C09F  F080         	movff	ADC_Voltage@ref,___flmul@a
 28332  0141EC  C0A0  F081         	movff	ADC_Voltage@ref+1,___flmul@a+1
 28333  0141F0  C0A1  F082         	movff	ADC_Voltage@ref+2,___flmul@a+2
 28334  0141F4  C0A2  F083         	movff	ADC_Voltage@ref+3,___flmul@a+3
 28335  0141F8  EC54  F082         	call	___flmul	;wreg free
 28336  0141FC  C07C  F0A3         	movff	?___flmul,ADC_Voltage@output
 28337  014200  C07D  F0A4         	movff	?___flmul+1,ADC_Voltage@output+1
 28338  014204  C07E  F0A5         	movff	?___flmul+2,ADC_Voltage@output+2
 28339  014208  C07F  F0A6         	movff	?___flmul+3,ADC_Voltage@output+3
 28340                           
 28341                           ;ADC.c: 268: return output + (float)0.000;
 28342  01420C  C0A3  F095         	movff	ADC_Voltage@output,?_ADC_Voltage
 28343  014210  C0A4  F096         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 28344  014214  C0A5  F097         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 28345  014218  C0A6  F098         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 28346  01421C  0012               	return	
 28347  01421E                     __end_of_ADC_Voltage:
 28348                           	opt stack 0
 28349                           tosu	equ	0xFFF
 28350                           tosh	equ	0xFFE
 28351                           tosl	equ	0xFFD
 28352                           pclath	equ	0xFFA
 28353                           tblptru	equ	0xFF8
 28354                           tblptrh	equ	0xFF7
 28355                           tblptrl	equ	0xFF6
 28356                           tablat	equ	0xFF5
 28357                           prodh	equ	0xFF4
 28358                           prodl	equ	0xFF3
 28359                           intcon	equ	0xFF2
 28360                           indf0	equ	0xFEF
 28361                           postinc0	equ	0xFEE
 28362                           fsr0h	equ	0xFEA
 28363                           fsr0l	equ	0xFE9
 28364                           wreg	equ	0xFE8
 28365                           indf1	equ	0xFE7
 28366                           postdec1	equ	0xFE5
 28367                           fsr1h	equ	0xFE2
 28368                           fsr1l	equ	0xFE1
 28369                           indf2	equ	0xFDF
 28370                           postinc2	equ	0xFDE
 28371                           postdec2	equ	0xFDD
 28372                           plusw2	equ	0xFDB
 28373                           fsr2h	equ	0xFDA
 28374                           fsr2l	equ	0xFD9
 28375                           status	equ	0xFD8
 28376                           
 28377 ;; *************** function ___xxtofl *****************
 28378 ;; Defined at:
 28379 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 28380 ;; Parameters:    Size  Location     Type
 28381 ;;  sign            1    wreg     unsigned char 
 28382 ;;  val             4   14[BANK0 ] long 
 28383 ;; Auto vars:     Size  Location     Type
 28384 ;;  sign            1   22[BANK0 ] unsigned char 
 28385 ;;  arg             4   24[BANK0 ] unsigned long 
 28386 ;;  exp             1   23[BANK0 ] unsigned char 
 28387 ;; Return value:  Size  Location     Type
 28388 ;;                  4   14[BANK0 ] unsigned char 
 28389 ;; Registers used:
 28390 ;;		wreg, status,2, status,0
 28391 ;; Tracked objects:
 28392 ;;		On entry : 0/0
 28393 ;;		On exit  : 0/0
 28394 ;;		Unchanged: 0/0
 28395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28397 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28398 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28399 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28400 ;;Total ram usage:       14 bytes
 28401 ;; Hardware stack levels used:    1
 28402 ;; Hardware stack levels required when called:    7
 28403 ;; This function calls:
 28404 ;;		Nothing
 28405 ;; This function is called by:
 28406 ;;		_ADC_Voltage
 28407 ;;		_displayPositionMode
 28408 ;;		_positionMode
 28409 ;;		_pow
 28410 ;;		_exp
 28411 ;;		_floor
 28412 ;;		_log
 28413 ;; This function uses a non-reentrant model
 28414 ;;
 28415                           
 28416                           	psect	text153
 28417  01248E                     __ptext153:
 28418                           	opt stack 0
 28419  01248E                     ___xxtofl:
 28420                           	opt stack 21
 28421                           
 28422                           ;incstack = 0
 28423                           ;___xxtofl@sign stored from wreg
 28424  01248E  0100               	movlb	0	; () banked
 28425  012490  6F76               	movwf	___xxtofl@sign& (0+255),b
 28426  012492  0100               	movlb	0	; () banked
 28427  012494  5176               	movf	___xxtofl@sign& (0+255),w,b
 28428  012496  0100               	movlb	0	; () banked
 28429  012498  B4D8               	btfsc	status,2,c
 28430  01249A  D01E               	goto	l2720
 28431                           
 28432                           ; BSR set to: 0
 28433  01249C  0100               	movlb	0	; () banked
 28434  01249E  AF71               	btfss	(___xxtofl@val+3)& (0+255),7,b
 28435  0124A0  D01B               	goto	l2720
 28436                           
 28437                           ; BSR set to: 0
 28438  0124A2  C06E  F072         	movff	___xxtofl@val,??___xxtofl
 28439  0124A6  C06F  F073         	movff	___xxtofl@val+1,??___xxtofl+1
 28440  0124AA  C070  F074         	movff	___xxtofl@val+2,??___xxtofl+2
 28441  0124AE  C071  F075         	movff	___xxtofl@val+3,??___xxtofl+3
 28442  0124B2  0100               	movlb	0	; () banked
 28443  0124B4  1F72               	comf	??___xxtofl& (0+255),f,b
 28444  0124B6  1F73               	comf	(??___xxtofl+1)& (0+255),f,b
 28445  0124B8  1F74               	comf	(??___xxtofl+2)& (0+255),f,b
 28446  0124BA  1F75               	comf	(??___xxtofl+3)& (0+255),f,b
 28447  0124BC  2B72               	incf	??___xxtofl& (0+255),f,b
 28448  0124BE  0E00               	movlw	0
 28449  0124C0  2373               	addwfc	(??___xxtofl+1)& (0+255),f,b
 28450  0124C2  2374               	addwfc	(??___xxtofl+2)& (0+255),f,b
 28451  0124C4  2375               	addwfc	(??___xxtofl+3)& (0+255),f,b
 28452  0124C6  C072  F078         	movff	??___xxtofl,___xxtofl@arg
 28453  0124CA  C073  F079         	movff	??___xxtofl+1,___xxtofl@arg+1
 28454  0124CE  C074  F07A         	movff	??___xxtofl+2,___xxtofl@arg+2
 28455  0124D2  C075  F07B         	movff	??___xxtofl+3,___xxtofl@arg+3
 28456  0124D6  D008               	goto	l2721
 28457  0124D8                     l2720:
 28458                           
 28459                           ; BSR set to: 0
 28460  0124D8  C06E  F078         	movff	___xxtofl@val,___xxtofl@arg
 28461  0124DC  C06F  F079         	movff	___xxtofl@val+1,___xxtofl@arg+1
 28462  0124E0  C070  F07A         	movff	___xxtofl@val+2,___xxtofl@arg+2
 28463  0124E4  C071  F07B         	movff	___xxtofl@val+3,___xxtofl@arg+3
 28464  0124E8                     l2721:
 28465                           
 28466                           ; BSR set to: 0
 28467                           
 28468                           ; BSR set to: 0
 28469  0124E8  0100               	movlb	0	; () banked
 28470  0124EA  516E               	movf	___xxtofl@val& (0+255),w,b
 28471  0124EC  0100               	movlb	0	; () banked
 28472  0124EE  116F               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 28473  0124F0  0100               	movlb	0	; () banked
 28474  0124F2  1170               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 28475  0124F4  0100               	movlb	0	; () banked
 28476  0124F6  1171               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 28477  0124F8  A4D8               	btfss	status,2,c
 28478  0124FA  D00A               	goto	l2722
 28479                           
 28480                           ; BSR set to: 0
 28481  0124FC  0E00               	movlw	0
 28482  0124FE  0100               	movlb	0	; () banked
 28483  012500  6F6E               	movwf	?___xxtofl& (0+255),b
 28484  012502  0E00               	movlw	0
 28485  012504  6F6F               	movwf	(?___xxtofl+1)& (0+255),b
 28486  012506  0E00               	movlw	0
 28487  012508  6F70               	movwf	(?___xxtofl+2)& (0+255),b
 28488  01250A  0E00               	movlw	0
 28489  01250C  6F71               	movwf	(?___xxtofl+3)& (0+255),b
 28490                           
 28491                           ; BSR set to: 0
 28492  01250E  0012               	return	
 28493  012510                     l2722:
 28494                           
 28495                           ; BSR set to: 0
 28496                           
 28497                           ; BSR set to: 0
 28498  012510  0E96               	movlw	150
 28499  012512  0100               	movlb	0	; () banked
 28500  012514  6F77               	movwf	___xxtofl@exp& (0+255),b
 28501  012516  D008               	goto	l2724
 28502  012518                     
 28503                           ; BSR set to: 0
 28504                           
 28505                           ; BSR set to: 0
 28506  012518  0100               	movlb	0	; () banked
 28507  01251A  2B77               	incf	___xxtofl@exp& (0+255),f,b
 28508  01251C  0100               	movlb	0	; () banked
 28509  01251E  90D8               	bcf	status,0,c
 28510  012520  337B               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 28511  012522  337A               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 28512  012524  3379               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 28513  012526  3378               	rrcf	___xxtofl@arg& (0+255),f,b
 28514  012528                     l2724:
 28515                           
 28516                           ; BSR set to: 0
 28517                           
 28518                           ; BSR set to: 0
 28519  012528  0E00               	movlw	0
 28520  01252A  0100               	movlb	0	; () banked
 28521  01252C  1578               	andwf	___xxtofl@arg& (0+255),w,b
 28522  01252E  0100               	movlb	0	; () banked
 28523  012530  6F72               	movwf	??___xxtofl& (0+255),b
 28524  012532  0E00               	movlw	0
 28525  012534  0100               	movlb	0	; () banked
 28526  012536  1579               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 28527  012538  0100               	movlb	0	; () banked
 28528  01253A  6F73               	movwf	(??___xxtofl+1)& (0+255),b
 28529  01253C  0E00               	movlw	0
 28530  01253E  0100               	movlb	0	; () banked
 28531  012540  157A               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 28532  012542  0100               	movlb	0	; () banked
 28533  012544  6F74               	movwf	(??___xxtofl+2)& (0+255),b
 28534  012546  0EFE               	movlw	254
 28535  012548  0100               	movlb	0	; () banked
 28536  01254A  157B               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 28537  01254C  0100               	movlb	0	; () banked
 28538  01254E  6F75               	movwf	(??___xxtofl+3)& (0+255),b
 28539  012550  0100               	movlb	0	; () banked
 28540  012552  5172               	movf	??___xxtofl& (0+255),w,b
 28541  012554  0100               	movlb	0	; () banked
 28542  012556  1173               	iorwf	(??___xxtofl+1)& (0+255),w,b
 28543  012558  0100               	movlb	0	; () banked
 28544  01255A  1174               	iorwf	(??___xxtofl+2)& (0+255),w,b
 28545  01255C  0100               	movlb	0	; () banked
 28546  01255E  1175               	iorwf	(??___xxtofl+3)& (0+255),w,b
 28547  012560  B4D8               	btfsc	status,2,c
 28548  012562  D010               	goto	l2727
 28549  012564  D7D9               	goto	l2725
 28550  012566                     
 28551                           ; BSR set to: 0
 28552                           
 28553                           ; BSR set to: 0
 28554  012566  0100               	movlb	0	; () banked
 28555  012568  2B77               	incf	___xxtofl@exp& (0+255),f,b
 28556                           
 28557                           ; BSR set to: 0
 28558  01256A  0E01               	movlw	1
 28559  01256C  0100               	movlb	0	; () banked
 28560  01256E  2778               	addwf	___xxtofl@arg& (0+255),f,b
 28561  012570  0E00               	movlw	0
 28562  012572  2379               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 28563  012574  237A               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 28564  012576  237B               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 28565                           
 28566                           ; BSR set to: 0
 28567  012578  0100               	movlb	0	; () banked
 28568  01257A  90D8               	bcf	status,0,c
 28569  01257C  337B               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 28570  01257E  337A               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 28571  012580  3379               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 28572  012582  3378               	rrcf	___xxtofl@arg& (0+255),f,b
 28573  012584                     l2727:
 28574                           
 28575                           ; BSR set to: 0
 28576  012584  0E00               	movlw	0
 28577  012586  0100               	movlb	0	; () banked
 28578  012588  1578               	andwf	___xxtofl@arg& (0+255),w,b
 28579  01258A  0100               	movlb	0	; () banked
 28580  01258C  6F72               	movwf	??___xxtofl& (0+255),b
 28581  01258E  0E00               	movlw	0
 28582  012590  0100               	movlb	0	; () banked
 28583  012592  1579               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 28584  012594  0100               	movlb	0	; () banked
 28585  012596  6F73               	movwf	(??___xxtofl+1)& (0+255),b
 28586  012598  0E00               	movlw	0
 28587  01259A  0100               	movlb	0	; () banked
 28588  01259C  157A               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 28589  01259E  0100               	movlb	0	; () banked
 28590  0125A0  6F74               	movwf	(??___xxtofl+2)& (0+255),b
 28591  0125A2  0EFF               	movlw	255
 28592  0125A4  0100               	movlb	0	; () banked
 28593  0125A6  157B               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 28594  0125A8  0100               	movlb	0	; () banked
 28595  0125AA  6F75               	movwf	(??___xxtofl+3)& (0+255),b
 28596  0125AC  0100               	movlb	0	; () banked
 28597  0125AE  5172               	movf	??___xxtofl& (0+255),w,b
 28598  0125B0  0100               	movlb	0	; () banked
 28599  0125B2  1173               	iorwf	(??___xxtofl+1)& (0+255),w,b
 28600  0125B4  0100               	movlb	0	; () banked
 28601  0125B6  1174               	iorwf	(??___xxtofl+2)& (0+255),w,b
 28602  0125B8  0100               	movlb	0	; () banked
 28603  0125BA  1175               	iorwf	(??___xxtofl+3)& (0+255),w,b
 28604  0125BC  B4D8               	btfsc	status,2,c
 28605  0125BE  D009               	goto	l2730
 28606  0125C0  D7D2               	goto	l2728
 28607  0125C2                     
 28608                           ; BSR set to: 0
 28609                           
 28610                           ; BSR set to: 0
 28611  0125C2  0100               	movlb	0	; () banked
 28612  0125C4  0777               	decf	___xxtofl@exp& (0+255),f,b
 28613  0125C6  0100               	movlb	0	; () banked
 28614  0125C8  90D8               	bcf	status,0,c
 28615  0125CA  3778               	rlcf	___xxtofl@arg& (0+255),f,b
 28616  0125CC  3779               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 28617  0125CE  377A               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 28618  0125D0  377B               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 28619  0125D2                     l2730:
 28620                           
 28621                           ; BSR set to: 0
 28622                           
 28623                           ; BSR set to: 0
 28624  0125D2  0100               	movlb	0	; () banked
 28625  0125D4  BF7A               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 28626  0125D6  D004               	goto	u10770
 28627                           
 28628                           ; BSR set to: 0
 28629  0125D8  0E02               	movlw	2
 28630  0125DA  0100               	movlb	0	; () banked
 28631  0125DC  6177               	cpfslt	___xxtofl@exp& (0+255),b
 28632  0125DE  D7F1               	goto	l2731
 28633  0125E0                     u10770:
 28634                           
 28635                           ; BSR set to: 0
 28636                           
 28637                           ; BSR set to: 0
 28638  0125E0  0100               	movlb	0	; () banked
 28639  0125E2  B177               	btfsc	___xxtofl@exp& (0+255),0,b
 28640  0125E4  D009               	goto	l2735
 28641                           
 28642                           ; BSR set to: 0
 28643  0125E6  0EFF               	movlw	255
 28644  0125E8  0100               	movlb	0	; () banked
 28645  0125EA  1778               	andwf	___xxtofl@arg& (0+255),f,b
 28646  0125EC  0EFF               	movlw	255
 28647  0125EE  1779               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 28648  0125F0  0E7F               	movlw	127
 28649  0125F2  177A               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 28650  0125F4  0EFF               	movlw	255
 28651  0125F6  177B               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 28652  0125F8                     l2735:
 28653                           
 28654                           ; BSR set to: 0
 28655  0125F8  0100               	movlb	0	; () banked
 28656  0125FA  90D8               	bcf	status,0,c
 28657  0125FC  3377               	rrcf	___xxtofl@exp& (0+255),f,b
 28658  0125FE  C077  F072         	movff	___xxtofl@exp,??___xxtofl
 28659  012602  0100               	movlb	0	; () banked
 28660  012604  6B73               	clrf	(??___xxtofl+1)& (0+255),b
 28661  012606  6B74               	clrf	(??___xxtofl+2)& (0+255),b
 28662  012608  6B75               	clrf	(??___xxtofl+3)& (0+255),b
 28663  01260A  C072  F075         	movff	??___xxtofl,??___xxtofl+3
 28664  01260E  0100               	movlb	0	; () banked
 28665  012610  6B74               	clrf	(??___xxtofl+2)& (0+255),b
 28666  012612  6B73               	clrf	(??___xxtofl+1)& (0+255),b
 28667  012614  6B72               	clrf	??___xxtofl& (0+255),b
 28668  012616  0100               	movlb	0	; () banked
 28669  012618  5172               	movf	??___xxtofl& (0+255),w,b
 28670  01261A  0100               	movlb	0	; () banked
 28671  01261C  1378               	iorwf	___xxtofl@arg& (0+255),f,b
 28672  01261E  0100               	movlb	0	; () banked
 28673  012620  5173               	movf	(??___xxtofl+1)& (0+255),w,b
 28674  012622  0100               	movlb	0	; () banked
 28675  012624  1379               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 28676  012626  0100               	movlb	0	; () banked
 28677  012628  5174               	movf	(??___xxtofl+2)& (0+255),w,b
 28678  01262A  0100               	movlb	0	; () banked
 28679  01262C  137A               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 28680  01262E  0100               	movlb	0	; () banked
 28681  012630  5175               	movf	(??___xxtofl+3)& (0+255),w,b
 28682  012632  0100               	movlb	0	; () banked
 28683  012634  137B               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 28684                           
 28685                           ; BSR set to: 0
 28686  012636  0100               	movlb	0	; () banked
 28687  012638  5176               	movf	___xxtofl@sign& (0+255),w,b
 28688  01263A  0100               	movlb	0	; () banked
 28689  01263C  B4D8               	btfsc	status,2,c
 28690  01263E  D005               	goto	l2736
 28691                           
 28692                           ; BSR set to: 0
 28693  012640  0100               	movlb	0	; () banked
 28694  012642  AF71               	btfss	(___xxtofl@val+3)& (0+255),7,b
 28695  012644  D002               	goto	l2736
 28696                           
 28697                           ; BSR set to: 0
 28698  012646  0100               	movlb	0	; () banked
 28699  012648  8F7B               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 28700  01264A                     l2736:
 28701                           
 28702                           ; BSR set to: 0
 28703                           
 28704                           ; BSR set to: 0
 28705  01264A  C078  F06E         	movff	___xxtofl@arg,?___xxtofl
 28706  01264E  C079  F06F         	movff	___xxtofl@arg+1,?___xxtofl+1
 28707  012652  C07A  F070         	movff	___xxtofl@arg+2,?___xxtofl+2
 28708  012656  C07B  F071         	movff	___xxtofl@arg+3,?___xxtofl+3
 28709  01265A  0012               	return	
 28710  01265C                     __end_of___xxtofl:
 28711                           	opt stack 0
 28712                           tosu	equ	0xFFF
 28713                           tosh	equ	0xFFE
 28714                           tosl	equ	0xFFD
 28715                           pclath	equ	0xFFA
 28716                           tblptru	equ	0xFF8
 28717                           tblptrh	equ	0xFF7
 28718                           tblptrl	equ	0xFF6
 28719                           tablat	equ	0xFF5
 28720                           prodh	equ	0xFF4
 28721                           prodl	equ	0xFF3
 28722                           intcon	equ	0xFF2
 28723                           indf0	equ	0xFEF
 28724                           postinc0	equ	0xFEE
 28725                           fsr0h	equ	0xFEA
 28726                           fsr0l	equ	0xFE9
 28727                           wreg	equ	0xFE8
 28728                           indf1	equ	0xFE7
 28729                           postdec1	equ	0xFE5
 28730                           fsr1h	equ	0xFE2
 28731                           fsr1l	equ	0xFE1
 28732                           indf2	equ	0xFDF
 28733                           postinc2	equ	0xFDE
 28734                           postdec2	equ	0xFDD
 28735                           plusw2	equ	0xFDB
 28736                           fsr2h	equ	0xFDA
 28737                           fsr2l	equ	0xFD9
 28738                           status	equ	0xFD8
 28739                           
 28740 ;; *************** function ___flmul *****************
 28741 ;; Defined at:
 28742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 28743 ;; Parameters:    Size  Location     Type
 28744 ;;  b               4   28[BANK0 ] unsigned char 
 28745 ;;  a               4   32[BANK0 ] unsigned char 
 28746 ;; Auto vars:     Size  Location     Type
 28747 ;;  prod            4   47[BANK0 ] struct .
 28748 ;;  grs             4   42[BANK0 ] unsigned long 
 28749 ;;  temp            2   51[BANK0 ] struct .
 28750 ;;  bexp            1   46[BANK0 ] unsigned char 
 28751 ;;  aexp            1   41[BANK0 ] unsigned char 
 28752 ;;  sign            1   40[BANK0 ] unsigned char 
 28753 ;; Return value:  Size  Location     Type
 28754 ;;                  4   28[BANK0 ] unsigned char 
 28755 ;; Registers used:
 28756 ;;		wreg, status,2, status,0, prodl, prodh
 28757 ;; Tracked objects:
 28758 ;;		On entry : 0/0
 28759 ;;		On exit  : 0/0
 28760 ;;		Unchanged: 0/0
 28761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28762 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28763 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28764 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28765 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28766 ;;Total ram usage:       25 bytes
 28767 ;; Hardware stack levels used:    1
 28768 ;; Hardware stack levels required when called:    7
 28769 ;; This function calls:
 28770 ;;		Nothing
 28771 ;; This function is called by:
 28772 ;;		_ADC_Voltage
 28773 ;;		_displayPositionMode
 28774 ;;		_main
 28775 ;;		_pow
 28776 ;;		_exp
 28777 ;;		_log
 28778 ;;		_eval_poly
 28779 ;; This function uses a non-reentrant model
 28780 ;;
 28781                           
 28782                           	psect	text154
 28783  0104A8                     __ptext154:
 28784                           	opt stack 0
 28785  0104A8                     ___flmul:
 28786                           	opt stack 20
 28787                           
 28788                           ; BSR set to: 0
 28789                           ;incstack = 0
 28790  0104A8  0100               	movlb	0	; () banked
 28791  0104AA  517F               	movf	(___flmul@b+3)& (0+255),w,b
 28792  0104AC  0B80               	andlw	128
 28793  0104AE  0100               	movlb	0	; () banked
 28794  0104B0  6F88               	movwf	___flmul@sign& (0+255),b
 28795  0104B2  0100               	movlb	0	; () banked
 28796  0104B4  517F               	movf	(___flmul@b+3)& (0+255),w,b
 28797  0104B6  257F               	addwf	(___flmul@b+3)& (0+255),w,b
 28798  0104B8  0100               	movlb	0	; () banked
 28799  0104BA  6F8E               	movwf	___flmul@bexp& (0+255),b
 28800                           
 28801                           ; BSR set to: 0
 28802  0104BC  0100               	movlb	0	; () banked
 28803  0104BE  AF7E               	btfss	(___flmul@b+2)& (0+255),7,b
 28804  0104C0  D002               	goto	l2691
 28805                           
 28806                           ; BSR set to: 0
 28807  0104C2  0100               	movlb	0	; () banked
 28808  0104C4  818E               	bsf	___flmul@bexp& (0+255),0,b
 28809  0104C6                     l2691:
 28810                           
 28811                           ; BSR set to: 0
 28812                           
 28813                           ; BSR set to: 0
 28814  0104C6  0100               	movlb	0	; () banked
 28815  0104C8  518E               	movf	___flmul@bexp& (0+255),w,b
 28816  0104CA  0100               	movlb	0	; () banked
 28817  0104CC  B4D8               	btfsc	status,2,c
 28818  0104CE  D010               	goto	l2692
 28819                           
 28820                           ; BSR set to: 0
 28821  0104D0  0100               	movlb	0	; () banked
 28822  0104D2  298E               	incf	___flmul@bexp& (0+255),w,b
 28823  0104D4  A4D8               	btfss	status,2,c
 28824  0104D6  D009               	goto	l2693
 28825                           
 28826                           ; BSR set to: 0
 28827  0104D8  0E00               	movlw	0
 28828  0104DA  0100               	movlb	0	; () banked
 28829  0104DC  6F7C               	movwf	___flmul@b& (0+255),b
 28830  0104DE  0E00               	movlw	0
 28831  0104E0  6F7D               	movwf	(___flmul@b+1)& (0+255),b
 28832  0104E2  0E00               	movlw	0
 28833  0104E4  6F7E               	movwf	(___flmul@b+2)& (0+255),b
 28834  0104E6  0E00               	movlw	0
 28835  0104E8  6F7F               	movwf	(___flmul@b+3)& (0+255),b
 28836  0104EA                     l2693:
 28837                           
 28838                           ; BSR set to: 0
 28839                           
 28840                           ; BSR set to: 0
 28841  0104EA  0100               	movlb	0	; () banked
 28842  0104EC  8F7E               	bsf	(___flmul@b+2)& (0+255),7,b
 28843  0104EE  D009               	goto	l2694
 28844  0104F0                     l2692:
 28845                           
 28846                           ; BSR set to: 0
 28847                           
 28848                           ; BSR set to: 0
 28849  0104F0  0E00               	movlw	0
 28850  0104F2  0100               	movlb	0	; () banked
 28851  0104F4  6F7C               	movwf	___flmul@b& (0+255),b
 28852  0104F6  0E00               	movlw	0
 28853  0104F8  6F7D               	movwf	(___flmul@b+1)& (0+255),b
 28854  0104FA  0E00               	movlw	0
 28855  0104FC  6F7E               	movwf	(___flmul@b+2)& (0+255),b
 28856  0104FE  0E00               	movlw	0
 28857  010500  6F7F               	movwf	(___flmul@b+3)& (0+255),b
 28858  010502                     l2694:
 28859                           
 28860                           ; BSR set to: 0
 28861                           
 28862                           ; BSR set to: 0
 28863  010502  0100               	movlb	0	; () banked
 28864  010504  5183               	movf	(___flmul@a+3)& (0+255),w,b
 28865  010506  0B80               	andlw	128
 28866  010508  0100               	movlb	0	; () banked
 28867  01050A  1B88               	xorwf	___flmul@sign& (0+255),f,b
 28868                           
 28869                           ; BSR set to: 0
 28870  01050C  0100               	movlb	0	; () banked
 28871  01050E  5183               	movf	(___flmul@a+3)& (0+255),w,b
 28872  010510  2583               	addwf	(___flmul@a+3)& (0+255),w,b
 28873  010512  0100               	movlb	0	; () banked
 28874  010514  6F89               	movwf	___flmul@aexp& (0+255),b
 28875                           
 28876                           ; BSR set to: 0
 28877  010516  0100               	movlb	0	; () banked
 28878  010518  AF82               	btfss	(___flmul@a+2)& (0+255),7,b
 28879  01051A  D002               	goto	l2695
 28880                           
 28881                           ; BSR set to: 0
 28882  01051C  0100               	movlb	0	; () banked
 28883  01051E  8189               	bsf	___flmul@aexp& (0+255),0,b
 28884  010520                     l2695:
 28885                           
 28886                           ; BSR set to: 0
 28887                           
 28888                           ; BSR set to: 0
 28889  010520  0100               	movlb	0	; () banked
 28890  010522  5189               	movf	___flmul@aexp& (0+255),w,b
 28891  010524  0100               	movlb	0	; () banked
 28892  010526  B4D8               	btfsc	status,2,c
 28893  010528  D010               	goto	l2696
 28894                           
 28895                           ; BSR set to: 0
 28896  01052A  0100               	movlb	0	; () banked
 28897  01052C  2989               	incf	___flmul@aexp& (0+255),w,b
 28898  01052E  A4D8               	btfss	status,2,c
 28899  010530  D009               	goto	l2697
 28900                           
 28901                           ; BSR set to: 0
 28902  010532  0E00               	movlw	0
 28903  010534  0100               	movlb	0	; () banked
 28904  010536  6F80               	movwf	___flmul@a& (0+255),b
 28905  010538  0E00               	movlw	0
 28906  01053A  6F81               	movwf	(___flmul@a+1)& (0+255),b
 28907  01053C  0E00               	movlw	0
 28908  01053E  6F82               	movwf	(___flmul@a+2)& (0+255),b
 28909  010540  0E00               	movlw	0
 28910  010542  6F83               	movwf	(___flmul@a+3)& (0+255),b
 28911  010544                     l2697:
 28912                           
 28913                           ; BSR set to: 0
 28914                           
 28915                           ; BSR set to: 0
 28916  010544  0100               	movlb	0	; () banked
 28917  010546  8F82               	bsf	(___flmul@a+2)& (0+255),7,b
 28918  010548  D009               	goto	l2698
 28919  01054A                     l2696:
 28920                           
 28921                           ; BSR set to: 0
 28922                           
 28923                           ; BSR set to: 0
 28924  01054A  0E00               	movlw	0
 28925  01054C  0100               	movlb	0	; () banked
 28926  01054E  6F80               	movwf	___flmul@a& (0+255),b
 28927  010550  0E00               	movlw	0
 28928  010552  6F81               	movwf	(___flmul@a+1)& (0+255),b
 28929  010554  0E00               	movlw	0
 28930  010556  6F82               	movwf	(___flmul@a+2)& (0+255),b
 28931  010558  0E00               	movlw	0
 28932  01055A  6F83               	movwf	(___flmul@a+3)& (0+255),b
 28933  01055C                     l2698:
 28934                           
 28935                           ; BSR set to: 0
 28936  01055C  0100               	movlb	0	; () banked
 28937  01055E  5189               	movf	___flmul@aexp& (0+255),w,b
 28938  010560  0100               	movlb	0	; () banked
 28939  010562  B4D8               	btfsc	status,2,c
 28940  010564  D005               	goto	u10470
 28941                           
 28942                           ; BSR set to: 0
 28943  010566  0100               	movlb	0	; () banked
 28944  010568  518E               	movf	___flmul@bexp& (0+255),w,b
 28945  01056A  0100               	movlb	0	; () banked
 28946  01056C  A4D8               	btfss	status,2,c
 28947  01056E  D00A               	goto	l2699
 28948  010570                     u10470:
 28949                           
 28950                           ; BSR set to: 0
 28951                           
 28952                           ; BSR set to: 0
 28953  010570  0E00               	movlw	0
 28954  010572  0100               	movlb	0	; () banked
 28955  010574  6F7C               	movwf	?___flmul& (0+255),b
 28956  010576  0E00               	movlw	0
 28957  010578  6F7D               	movwf	(?___flmul+1)& (0+255),b
 28958  01057A  0E00               	movlw	0
 28959  01057C  6F7E               	movwf	(?___flmul+2)& (0+255),b
 28960  01057E  0E00               	movlw	0
 28961  010580  6F7F               	movwf	(?___flmul+3)& (0+255),b
 28962                           
 28963                           ; BSR set to: 0
 28964  010582  0012               	return	
 28965  010584                     l2699:
 28966                           
 28967                           ; BSR set to: 0
 28968                           
 28969                           ; BSR set to: 0
 28970  010584  0100               	movlb	0	; () banked
 28971  010586  5182               	movf	(___flmul@a+2)& (0+255),w,b
 28972  010588  0100               	movlb	0	; () banked
 28973  01058A  037C               	mulwf	___flmul@b& (0+255),b
 28974  01058C  CFF3 F093          	movff	prodl,___flmul@temp
 28975  010590  CFF4 F094          	movff	prodh,___flmul@temp+1
 28976                           
 28977                           ; BSR set to: 0
 28978  010594  0100               	movlb	0	; () banked
 28979  010596  5193               	movf	___flmul@temp& (0+255),w,b
 28980  010598  0100               	movlb	0	; () banked
 28981  01059A  6F8A               	movwf	___flmul@grs& (0+255),b
 28982  01059C  6B8B               	clrf	(___flmul@grs+1)& (0+255),b
 28983  01059E  6B8C               	clrf	(___flmul@grs+2)& (0+255),b
 28984  0105A0  6B8D               	clrf	(___flmul@grs+3)& (0+255),b
 28985                           
 28986                           ; BSR set to: 0
 28987  0105A2  0100               	movlb	0	; () banked
 28988  0105A4  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 28989  0105A6  0100               	movlb	0	; () banked
 28990  0105A8  6F8F               	movwf	___flmul@prod& (0+255),b
 28991  0105AA  6B90               	clrf	(___flmul@prod+1)& (0+255),b
 28992  0105AC  6B91               	clrf	(___flmul@prod+2)& (0+255),b
 28993  0105AE  6B92               	clrf	(___flmul@prod+3)& (0+255),b
 28994  0105B0  0100               	movlb	0	; () banked
 28995  0105B2  5181               	movf	(___flmul@a+1)& (0+255),w,b
 28996  0105B4  0100               	movlb	0	; () banked
 28997  0105B6  037D               	mulwf	(___flmul@b+1)& (0+255),b
 28998  0105B8  CFF3 F093          	movff	prodl,___flmul@temp
 28999  0105BC  CFF4 F094          	movff	prodh,___flmul@temp+1
 29000                           
 29001                           ; BSR set to: 0
 29002  0105C0  0100               	movlb	0	; () banked
 29003  0105C2  5193               	movf	___flmul@temp& (0+255),w,b
 29004  0105C4  0100               	movlb	0	; () banked
 29005  0105C6  278A               	addwf	___flmul@grs& (0+255),f,b
 29006  0105C8  0E00               	movlw	0
 29007  0105CA  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 29008  0105CC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 29009  0105CE  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 29010                           
 29011                           ; BSR set to: 0
 29012  0105D0  0100               	movlb	0	; () banked
 29013  0105D2  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29014  0105D4  0100               	movlb	0	; () banked
 29015  0105D6  278F               	addwf	___flmul@prod& (0+255),f,b
 29016  0105D8  0E00               	movlw	0
 29017  0105DA  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29018  0105DC  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29019  0105DE  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29020  0105E0  0100               	movlb	0	; () banked
 29021  0105E2  5180               	movf	___flmul@a& (0+255),w,b
 29022  0105E4  0100               	movlb	0	; () banked
 29023  0105E6  037E               	mulwf	(___flmul@b+2)& (0+255),b
 29024  0105E8  CFF3 F093          	movff	prodl,___flmul@temp
 29025  0105EC  CFF4 F094          	movff	prodh,___flmul@temp+1
 29026                           
 29027                           ; BSR set to: 0
 29028  0105F0  0100               	movlb	0	; () banked
 29029  0105F2  5193               	movf	___flmul@temp& (0+255),w,b
 29030  0105F4  0100               	movlb	0	; () banked
 29031  0105F6  278A               	addwf	___flmul@grs& (0+255),f,b
 29032  0105F8  0E00               	movlw	0
 29033  0105FA  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 29034  0105FC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 29035  0105FE  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 29036                           
 29037                           ; BSR set to: 0
 29038  010600  0100               	movlb	0	; () banked
 29039  010602  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29040  010604  0100               	movlb	0	; () banked
 29041  010606  278F               	addwf	___flmul@prod& (0+255),f,b
 29042  010608  0E00               	movlw	0
 29043  01060A  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29044  01060C  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29045  01060E  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29046                           
 29047                           ; BSR set to: 0
 29048  010610  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 29049  010614  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 29050  010618  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 29051  01061C  0100               	movlb	0	; () banked
 29052  01061E  6B8A               	clrf	___flmul@grs& (0+255),b
 29053                           
 29054                           ; BSR set to: 0
 29055  010620  0100               	movlb	0	; () banked
 29056  010622  5180               	movf	___flmul@a& (0+255),w,b
 29057  010624  0100               	movlb	0	; () banked
 29058  010626  037D               	mulwf	(___flmul@b+1)& (0+255),b
 29059  010628  CFF3 F093          	movff	prodl,___flmul@temp
 29060  01062C  CFF4 F094          	movff	prodh,___flmul@temp+1
 29061                           
 29062                           ; BSR set to: 0
 29063  010630  0100               	movlb	0	; () banked
 29064  010632  5193               	movf	___flmul@temp& (0+255),w,b
 29065  010634  0100               	movlb	0	; () banked
 29066  010636  278A               	addwf	___flmul@grs& (0+255),f,b
 29067  010638  0100               	movlb	0	; () banked
 29068  01063A  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29069  01063C  0100               	movlb	0	; () banked
 29070  01063E  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 29071  010640  0E00               	movlw	0
 29072  010642  0100               	movlb	0	; () banked
 29073  010644  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 29074  010646  0E00               	movlw	0
 29075  010648  0100               	movlb	0	; () banked
 29076  01064A  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 29077                           
 29078                           ; BSR set to: 0
 29079  01064C  0100               	movlb	0	; () banked
 29080  01064E  5181               	movf	(___flmul@a+1)& (0+255),w,b
 29081  010650  0100               	movlb	0	; () banked
 29082  010652  037C               	mulwf	___flmul@b& (0+255),b
 29083  010654  CFF3 F093          	movff	prodl,___flmul@temp
 29084  010658  CFF4 F094          	movff	prodh,___flmul@temp+1
 29085                           
 29086                           ; BSR set to: 0
 29087  01065C  0100               	movlb	0	; () banked
 29088  01065E  5193               	movf	___flmul@temp& (0+255),w,b
 29089  010660  0100               	movlb	0	; () banked
 29090  010662  278A               	addwf	___flmul@grs& (0+255),f,b
 29091  010664  0100               	movlb	0	; () banked
 29092  010666  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29093  010668  0100               	movlb	0	; () banked
 29094  01066A  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 29095  01066C  0E00               	movlw	0
 29096  01066E  0100               	movlb	0	; () banked
 29097  010670  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 29098  010672  0E00               	movlw	0
 29099  010674  0100               	movlb	0	; () banked
 29100  010676  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 29101                           
 29102                           ; BSR set to: 0
 29103  010678  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 29104  01067C  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 29105  010680  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 29106  010684  0100               	movlb	0	; () banked
 29107  010686  6B8A               	clrf	___flmul@grs& (0+255),b
 29108  010688  0100               	movlb	0	; () banked
 29109  01068A  5180               	movf	___flmul@a& (0+255),w,b
 29110  01068C  0100               	movlb	0	; () banked
 29111  01068E  037C               	mulwf	___flmul@b& (0+255),b
 29112  010690  CFF3 F093          	movff	prodl,___flmul@temp
 29113  010694  CFF4 F094          	movff	prodh,___flmul@temp+1
 29114                           
 29115                           ; BSR set to: 0
 29116  010698  0100               	movlb	0	; () banked
 29117  01069A  5193               	movf	___flmul@temp& (0+255),w,b
 29118  01069C  0100               	movlb	0	; () banked
 29119  01069E  278A               	addwf	___flmul@grs& (0+255),f,b
 29120  0106A0  0100               	movlb	0	; () banked
 29121  0106A2  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29122  0106A4  0100               	movlb	0	; () banked
 29123  0106A6  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 29124  0106A8  0E00               	movlw	0
 29125  0106AA  0100               	movlb	0	; () banked
 29126  0106AC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 29127  0106AE  0E00               	movlw	0
 29128  0106B0  0100               	movlb	0	; () banked
 29129  0106B2  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 29130                           
 29131                           ; BSR set to: 0
 29132  0106B4  0100               	movlb	0	; () banked
 29133  0106B6  5182               	movf	(___flmul@a+2)& (0+255),w,b
 29134  0106B8  0100               	movlb	0	; () banked
 29135  0106BA  037D               	mulwf	(___flmul@b+1)& (0+255),b
 29136  0106BC  CFF3 F093          	movff	prodl,___flmul@temp
 29137  0106C0  CFF4 F094          	movff	prodh,___flmul@temp+1
 29138  0106C4  0100               	movlb	0	; () banked
 29139  0106C6  5193               	movf	___flmul@temp& (0+255),w,b
 29140  0106C8  0100               	movlb	0	; () banked
 29141  0106CA  278F               	addwf	___flmul@prod& (0+255),f,b
 29142  0106CC  0100               	movlb	0	; () banked
 29143  0106CE  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29144  0106D0  0100               	movlb	0	; () banked
 29145  0106D2  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29146  0106D4  0E00               	movlw	0
 29147  0106D6  0100               	movlb	0	; () banked
 29148  0106D8  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29149  0106DA  0E00               	movlw	0
 29150  0106DC  0100               	movlb	0	; () banked
 29151  0106DE  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29152                           
 29153                           ; BSR set to: 0
 29154  0106E0  0100               	movlb	0	; () banked
 29155  0106E2  5181               	movf	(___flmul@a+1)& (0+255),w,b
 29156  0106E4  0100               	movlb	0	; () banked
 29157  0106E6  037E               	mulwf	(___flmul@b+2)& (0+255),b
 29158  0106E8  CFF3 F093          	movff	prodl,___flmul@temp
 29159  0106EC  CFF4 F094          	movff	prodh,___flmul@temp+1
 29160                           
 29161                           ; BSR set to: 0
 29162  0106F0  0100               	movlb	0	; () banked
 29163  0106F2  5193               	movf	___flmul@temp& (0+255),w,b
 29164  0106F4  0100               	movlb	0	; () banked
 29165  0106F6  278F               	addwf	___flmul@prod& (0+255),f,b
 29166  0106F8  0100               	movlb	0	; () banked
 29167  0106FA  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29168  0106FC  0100               	movlb	0	; () banked
 29169  0106FE  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29170  010700  0E00               	movlw	0
 29171  010702  0100               	movlb	0	; () banked
 29172  010704  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29173  010706  0E00               	movlw	0
 29174  010708  0100               	movlb	0	; () banked
 29175  01070A  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29176  01070C  0100               	movlb	0	; () banked
 29177  01070E  5182               	movf	(___flmul@a+2)& (0+255),w,b
 29178  010710  0100               	movlb	0	; () banked
 29179  010712  037E               	mulwf	(___flmul@b+2)& (0+255),b
 29180  010714  CFF3 F093          	movff	prodl,___flmul@temp
 29181  010718  CFF4 F094          	movff	prodh,___flmul@temp+1
 29182                           
 29183                           ; BSR set to: 0
 29184  01071C  0100               	movlb	0	; () banked
 29185  01071E  5193               	movf	___flmul@temp& (0+255),w,b
 29186  010720  0100               	movlb	0	; () banked
 29187  010722  6F84               	movwf	??___flmul& (0+255),b
 29188  010724  0100               	movlb	0	; () banked
 29189  010726  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29190  010728  0100               	movlb	0	; () banked
 29191  01072A  6F85               	movwf	(??___flmul+1)& (0+255),b
 29192  01072C  0100               	movlb	0	; () banked
 29193  01072E  6B86               	clrf	(??___flmul+2)& (0+255),b
 29194  010730  0100               	movlb	0	; () banked
 29195  010732  6B87               	clrf	(??___flmul+3)& (0+255),b
 29196  010734  C086  F087         	movff	??___flmul+2,??___flmul+3
 29197  010738  C085  F086         	movff	??___flmul+1,??___flmul+2
 29198  01073C  C084  F085         	movff	??___flmul,??___flmul+1
 29199  010740  0100               	movlb	0	; () banked
 29200  010742  6B84               	clrf	??___flmul& (0+255),b
 29201  010744  0100               	movlb	0	; () banked
 29202  010746  5184               	movf	??___flmul& (0+255),w,b
 29203  010748  0100               	movlb	0	; () banked
 29204  01074A  278F               	addwf	___flmul@prod& (0+255),f,b
 29205  01074C  0100               	movlb	0	; () banked
 29206  01074E  5185               	movf	(??___flmul+1)& (0+255),w,b
 29207  010750  0100               	movlb	0	; () banked
 29208  010752  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29209  010754  0100               	movlb	0	; () banked
 29210  010756  5186               	movf	(??___flmul+2)& (0+255),w,b
 29211  010758  0100               	movlb	0	; () banked
 29212  01075A  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29213  01075C  0100               	movlb	0	; () banked
 29214  01075E  5187               	movf	(??___flmul+3)& (0+255),w,b
 29215  010760  0100               	movlb	0	; () banked
 29216  010762  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29217                           
 29218                           ; BSR set to: 0
 29219  010764  C08A  F084         	movff	___flmul@grs,??___flmul
 29220  010768  C08B  F085         	movff	___flmul@grs+1,??___flmul+1
 29221  01076C  C08C  F086         	movff	___flmul@grs+2,??___flmul+2
 29222  010770  C08D  F087         	movff	___flmul@grs+3,??___flmul+3
 29223  010774  0E19               	movlw	25
 29224  010776  D006               	goto	u10480
 29225  010778                     u10485:
 29226  010778  0100               	movlb	0	; () banked
 29227  01077A  90D8               	bcf	status,0,c
 29228  01077C  3387               	rrcf	(??___flmul+3)& (0+255),f,b
 29229  01077E  3386               	rrcf	(??___flmul+2)& (0+255),f,b
 29230  010780  3385               	rrcf	(??___flmul+1)& (0+255),f,b
 29231  010782  3384               	rrcf	??___flmul& (0+255),f,b
 29232  010784                     u10480:
 29233  010784  2EE8               	decfsz	wreg,f,c
 29234  010786  D7F8               	goto	u10485
 29235  010788  0100               	movlb	0	; () banked
 29236  01078A  5184               	movf	??___flmul& (0+255),w,b
 29237  01078C  0100               	movlb	0	; () banked
 29238  01078E  278F               	addwf	___flmul@prod& (0+255),f,b
 29239  010790  0100               	movlb	0	; () banked
 29240  010792  5185               	movf	(??___flmul+1)& (0+255),w,b
 29241  010794  0100               	movlb	0	; () banked
 29242  010796  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29243  010798  0100               	movlb	0	; () banked
 29244  01079A  5186               	movf	(??___flmul+2)& (0+255),w,b
 29245  01079C  0100               	movlb	0	; () banked
 29246  01079E  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29247  0107A0  0100               	movlb	0	; () banked
 29248  0107A2  5187               	movf	(??___flmul+3)& (0+255),w,b
 29249  0107A4  0100               	movlb	0	; () banked
 29250  0107A6  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29251                           
 29252                           ; BSR set to: 0
 29253  0107A8  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 29254  0107AC  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 29255  0107B0  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 29256  0107B4  0100               	movlb	0	; () banked
 29257  0107B6  6B8A               	clrf	___flmul@grs& (0+255),b
 29258                           
 29259                           ; BSR set to: 0
 29260  0107B8  0100               	movlb	0	; () banked
 29261  0107BA  5189               	movf	___flmul@aexp& (0+255),w,b
 29262  0107BC  C08E  F084         	movff	___flmul@bexp,??___flmul
 29263  0107C0  0100               	movlb	0	; () banked
 29264  0107C2  6B85               	clrf	(??___flmul+1)& (0+255),b
 29265  0107C4  0100               	movlb	0	; () banked
 29266  0107C6  2784               	addwf	??___flmul& (0+255),f,b
 29267  0107C8  0E00               	movlw	0
 29268  0107CA  2385               	addwfc	(??___flmul+1)& (0+255),f,b
 29269  0107CC  0E82               	movlw	130
 29270  0107CE  0100               	movlb	0	; () banked
 29271  0107D0  2584               	addwf	??___flmul& (0+255),w,b
 29272  0107D2  0100               	movlb	0	; () banked
 29273  0107D4  6F93               	movwf	___flmul@temp& (0+255),b
 29274  0107D6  0EFF               	movlw	255
 29275  0107D8  0100               	movlb	0	; () banked
 29276  0107DA  2185               	addwfc	(??___flmul+1)& (0+255),w,b
 29277  0107DC  0100               	movlb	0	; () banked
 29278  0107DE  6F94               	movwf	(___flmul@temp+1)& (0+255),b
 29279  0107E0  D015               	goto	l2703
 29280  0107E2                     
 29281                           ; BSR set to: 0
 29282                           
 29283                           ; BSR set to: 0
 29284  0107E2  0100               	movlb	0	; () banked
 29285  0107E4  90D8               	bcf	status,0,c
 29286  0107E6  378F               	rlcf	___flmul@prod& (0+255),f,b
 29287  0107E8  3790               	rlcf	(___flmul@prod+1)& (0+255),f,b
 29288  0107EA  3791               	rlcf	(___flmul@prod+2)& (0+255),f,b
 29289  0107EC  3792               	rlcf	(___flmul@prod+3)& (0+255),f,b
 29290                           
 29291                           ; BSR set to: 0
 29292  0107EE  0100               	movlb	0	; () banked
 29293  0107F0  AF8D               	btfss	(___flmul@grs+3)& (0+255),7,b
 29294  0107F2  D002               	goto	l2705
 29295                           
 29296                           ; BSR set to: 0
 29297  0107F4  0100               	movlb	0	; () banked
 29298  0107F6  818F               	bsf	___flmul@prod& (0+255),0,b
 29299  0107F8                     l2705:
 29300                           
 29301                           ; BSR set to: 0
 29302  0107F8  0100               	movlb	0	; () banked
 29303  0107FA  90D8               	bcf	status,0,c
 29304  0107FC  378A               	rlcf	___flmul@grs& (0+255),f,b
 29305  0107FE  378B               	rlcf	(___flmul@grs+1)& (0+255),f,b
 29306  010800  378C               	rlcf	(___flmul@grs+2)& (0+255),f,b
 29307  010802  378D               	rlcf	(___flmul@grs+3)& (0+255),f,b
 29308  010804  0100               	movlb	0	; () banked
 29309  010806  0793               	decf	___flmul@temp& (0+255),f,b
 29310  010808  A0D8               	btfss	status,0,c
 29311  01080A  0794               	decf	(___flmul@temp+1)& (0+255),f,b
 29312  01080C                     l2703:
 29313                           
 29314                           ; BSR set to: 0
 29315                           
 29316                           ; BSR set to: 0
 29317  01080C  0100               	movlb	0	; () banked
 29318  01080E  AF91               	btfss	(___flmul@prod+2)& (0+255),7,b
 29319  010810  D7E8               	goto	l2704
 29320                           
 29321                           ; BSR set to: 0
 29322                           
 29323                           ; BSR set to: 0
 29324  010812  0E00               	movlw	0
 29325  010814  0100               	movlb	0	; () banked
 29326  010816  6F89               	movwf	___flmul@aexp& (0+255),b
 29327                           
 29328                           ; BSR set to: 0
 29329  010818  0100               	movlb	0	; () banked
 29330  01081A  AF8D               	btfss	(___flmul@grs+3)& (0+255),7,b
 29331  01081C  D024               	goto	l2710
 29332                           
 29333                           ; BSR set to: 0
 29334  01081E  0EFF               	movlw	255
 29335  010820  0100               	movlb	0	; () banked
 29336  010822  158A               	andwf	___flmul@grs& (0+255),w,b
 29337  010824  0100               	movlb	0	; () banked
 29338  010826  6F84               	movwf	??___flmul& (0+255),b
 29339  010828  0EFF               	movlw	255
 29340  01082A  0100               	movlb	0	; () banked
 29341  01082C  158B               	andwf	(___flmul@grs+1)& (0+255),w,b
 29342  01082E  0100               	movlb	0	; () banked
 29343  010830  6F85               	movwf	(??___flmul+1)& (0+255),b
 29344  010832  0EFF               	movlw	255
 29345  010834  0100               	movlb	0	; () banked
 29346  010836  158C               	andwf	(___flmul@grs+2)& (0+255),w,b
 29347  010838  0100               	movlb	0	; () banked
 29348  01083A  6F86               	movwf	(??___flmul+2)& (0+255),b
 29349  01083C  0E7F               	movlw	127
 29350  01083E  0100               	movlb	0	; () banked
 29351  010840  158D               	andwf	(___flmul@grs+3)& (0+255),w,b
 29352  010842  0100               	movlb	0	; () banked
 29353  010844  6F87               	movwf	(??___flmul+3)& (0+255),b
 29354  010846  0100               	movlb	0	; () banked
 29355  010848  5184               	movf	??___flmul& (0+255),w,b
 29356  01084A  0100               	movlb	0	; () banked
 29357  01084C  1185               	iorwf	(??___flmul+1)& (0+255),w,b
 29358  01084E  0100               	movlb	0	; () banked
 29359  010850  1186               	iorwf	(??___flmul+2)& (0+255),w,b
 29360  010852  0100               	movlb	0	; () banked
 29361  010854  1187               	iorwf	(??___flmul+3)& (0+255),w,b
 29362  010856  A4D8               	btfss	status,2,c
 29363  010858  D003               	goto	u10530
 29364                           
 29365                           ; BSR set to: 0
 29366                           
 29367                           ; BSR set to: 0
 29368  01085A  0100               	movlb	0	; () banked
 29369  01085C  A18F               	btfss	___flmul@prod& (0+255),0,b
 29370  01085E  D003               	goto	l2710
 29371  010860                     u10530:
 29372                           
 29373                           ; BSR set to: 0
 29374  010860  0E01               	movlw	1
 29375  010862  0100               	movlb	0	; () banked
 29376  010864  6F89               	movwf	___flmul@aexp& (0+255),b
 29377  010866                     l2710:
 29378                           
 29379                           ; BSR set to: 0
 29380                           
 29381                           ; BSR set to: 0
 29382                           
 29383                           ; BSR set to: 0
 29384  010866  0100               	movlb	0	; () banked
 29385  010868  5189               	movf	___flmul@aexp& (0+255),w,b
 29386  01086A  0100               	movlb	0	; () banked
 29387  01086C  B4D8               	btfsc	status,2,c
 29388  01086E  D023               	goto	l2712
 29389                           
 29390                           ; BSR set to: 0
 29391  010870  0E01               	movlw	1
 29392  010872  0100               	movlb	0	; () banked
 29393  010874  278F               	addwf	___flmul@prod& (0+255),f,b
 29394  010876  0E00               	movlw	0
 29395  010878  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 29396  01087A  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 29397  01087C  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 29398                           
 29399                           ; BSR set to: 0
 29400  01087E  0100               	movlb	0	; () banked
 29401  010880  A192               	btfss	(___flmul@prod+3)& (0+255),0,b
 29402  010882  D019               	goto	l2712
 29403                           
 29404                           ; BSR set to: 0
 29405  010884  C08F  F084         	movff	___flmul@prod,??___flmul
 29406  010888  C090  F085         	movff	___flmul@prod+1,??___flmul+1
 29407  01088C  C091  F086         	movff	___flmul@prod+2,??___flmul+2
 29408  010890  C092  F087         	movff	___flmul@prod+3,??___flmul+3
 29409  010894  0100               	movlb	0	; () banked
 29410  010896  3587               	rlcf	(??___flmul+3)& (0+255),w,b
 29411  010898  3387               	rrcf	(??___flmul+3)& (0+255),f,b
 29412  01089A  3386               	rrcf	(??___flmul+2)& (0+255),f,b
 29413  01089C  3385               	rrcf	(??___flmul+1)& (0+255),f,b
 29414  01089E  3384               	rrcf	??___flmul& (0+255),f,b
 29415  0108A0  C084  F08F         	movff	??___flmul,___flmul@prod
 29416  0108A4  C085  F090         	movff	??___flmul+1,___flmul@prod+1
 29417  0108A8  C086  F091         	movff	??___flmul+2,___flmul@prod+2
 29418  0108AC  C087  F092         	movff	??___flmul+3,___flmul@prod+3
 29419                           
 29420                           ; BSR set to: 0
 29421  0108B0  0100               	movlb	0	; () banked
 29422  0108B2  4B93               	infsnz	___flmul@temp& (0+255),f,b
 29423  0108B4  2B94               	incf	(___flmul@temp+1)& (0+255),f,b
 29424  0108B6                     l2712:
 29425                           
 29426                           ; BSR set to: 0
 29427                           
 29428                           ; BSR set to: 0
 29429                           
 29430                           ; BSR set to: 0
 29431  0108B6  0100               	movlb	0	; () banked
 29432  0108B8  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
 29433  0108BA  D010               	goto	l2713
 29434  0108BC  0100               	movlb	0	; () banked
 29435  0108BE  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29436  0108C0  E104               	bnz	u10560
 29437  0108C2  0100               	movlb	0	; () banked
 29438  0108C4  2993               	incf	___flmul@temp& (0+255),w,b
 29439  0108C6  A0D8               	btfss	status,0,c
 29440  0108C8  D009               	goto	l2713
 29441  0108CA                     u10560:
 29442                           
 29443                           ; BSR set to: 0
 29444  0108CA  0E00               	movlw	0
 29445  0108CC  0100               	movlb	0	; () banked
 29446  0108CE  6F8F               	movwf	___flmul@prod& (0+255),b
 29447  0108D0  0E00               	movlw	0
 29448  0108D2  6F90               	movwf	(___flmul@prod+1)& (0+255),b
 29449  0108D4  0E80               	movlw	128
 29450  0108D6  6F91               	movwf	(___flmul@prod+2)& (0+255),b
 29451  0108D8  0E7F               	movlw	127
 29452  0108DA  D02B               	goto	L18
 29453  0108DC                     l2713:
 29454                           
 29455                           ; BSR set to: 0
 29456                           
 29457                           ; BSR set to: 0
 29458  0108DC  0100               	movlb	0	; () banked
 29459  0108DE  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
 29460  0108E0  D007               	goto	u10570
 29461  0108E2  0100               	movlb	0	; () banked
 29462  0108E4  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 29463  0108E6  E111               	bnz	l2715
 29464  0108E8  0100               	movlb	0	; () banked
 29465  0108EA  0593               	decf	___flmul@temp& (0+255),w,b
 29466  0108EC  B0D8               	btfsc	status,0,c
 29467  0108EE  D00D               	goto	l2715
 29468  0108F0                     u10570:
 29469                           
 29470                           ; BSR set to: 0
 29471  0108F0  0E00               	movlw	0
 29472  0108F2  0100               	movlb	0	; () banked
 29473  0108F4  6F8F               	movwf	___flmul@prod& (0+255),b
 29474  0108F6  0E00               	movlw	0
 29475  0108F8  6F90               	movwf	(___flmul@prod+1)& (0+255),b
 29476  0108FA  0E00               	movlw	0
 29477  0108FC  6F91               	movwf	(___flmul@prod+2)& (0+255),b
 29478  0108FE  0E00               	movlw	0
 29479  010900  6F92               	movwf	(___flmul@prod+3)& (0+255),b
 29480  010902  0E00               	movlw	0
 29481  010904  0100               	movlb	0	; () banked
 29482  010906  6F88               	movwf	___flmul@sign& (0+255),b
 29483  010908  D015               	goto	l2716
 29484  01090A                     l2715:
 29485                           
 29486                           ; BSR set to: 0
 29487  01090A  C093  F08E         	movff	___flmul@temp,___flmul@bexp
 29488                           
 29489                           ; BSR set to: 0
 29490  01090E  0EFF               	movlw	255
 29491  010910  0100               	movlb	0	; () banked
 29492  010912  178F               	andwf	___flmul@prod& (0+255),f,b
 29493  010914  0EFF               	movlw	255
 29494  010916  1790               	andwf	(___flmul@prod+1)& (0+255),f,b
 29495  010918  0E7F               	movlw	127
 29496  01091A  1791               	andwf	(___flmul@prod+2)& (0+255),f,b
 29497  01091C  0E00               	movlw	0
 29498  01091E  1792               	andwf	(___flmul@prod+3)& (0+255),f,b
 29499                           
 29500                           ; BSR set to: 0
 29501  010920  0100               	movlb	0	; () banked
 29502  010922  A18E               	btfss	___flmul@bexp& (0+255),0,b
 29503  010924  D002               	goto	l2717
 29504                           
 29505                           ; BSR set to: 0
 29506  010926  0100               	movlb	0	; () banked
 29507  010928  8F91               	bsf	(___flmul@prod+2)& (0+255),7,b
 29508  01092A                     l2717:
 29509                           
 29510                           ; BSR set to: 0
 29511                           
 29512                           ; BSR set to: 0
 29513  01092A  0100               	movlb	0	; () banked
 29514  01092C  90D8               	bcf	status,0,c
 29515  01092E  318E               	rrcf	___flmul@bexp& (0+255),w,b
 29516  010930  0100               	movlb	0	; () banked
 29517  010932                     L18:
 29518  010932  6F92               	movwf	(___flmul@prod+3)& (0+255),b
 29519  010934                     l2716:
 29520                           
 29521                           ; BSR set to: 0
 29522                           
 29523                           ; BSR set to: 0
 29524                           
 29525                           ; BSR set to: 0
 29526  010934  0100               	movlb	0	; () banked
 29527  010936  5188               	movf	___flmul@sign& (0+255),w,b
 29528  010938  0100               	movlb	0	; () banked
 29529  01093A  1392               	iorwf	(___flmul@prod+3)& (0+255),f,b
 29530                           
 29531                           ; BSR set to: 0
 29532  01093C  C08F  F07C         	movff	___flmul@prod,?___flmul
 29533  010940  C090  F07D         	movff	___flmul@prod+1,?___flmul+1
 29534  010944  C091  F07E         	movff	___flmul@prod+2,?___flmul+2
 29535  010948  C092  F07F         	movff	___flmul@prod+3,?___flmul+3
 29536  01094C  0012               	return	
 29537  01094E                     __end_of___flmul:
 29538                           	opt stack 0
 29539                           tosu	equ	0xFFF
 29540                           tosh	equ	0xFFE
 29541                           tosl	equ	0xFFD
 29542                           pclath	equ	0xFFA
 29543                           tblptru	equ	0xFF8
 29544                           tblptrh	equ	0xFF7
 29545                           tblptrl	equ	0xFF6
 29546                           tablat	equ	0xFF5
 29547                           prodh	equ	0xFF4
 29548                           prodl	equ	0xFF3
 29549                           intcon	equ	0xFF2
 29550                           indf0	equ	0xFEF
 29551                           postinc0	equ	0xFEE
 29552                           fsr0h	equ	0xFEA
 29553                           fsr0l	equ	0xFE9
 29554                           wreg	equ	0xFE8
 29555                           indf1	equ	0xFE7
 29556                           postdec1	equ	0xFE5
 29557                           fsr1h	equ	0xFE2
 29558                           fsr1l	equ	0xFE1
 29559                           indf2	equ	0xFDF
 29560                           postinc2	equ	0xFDE
 29561                           postdec2	equ	0xFDD
 29562                           plusw2	equ	0xFDB
 29563                           fsr2h	equ	0xFDA
 29564                           fsr2l	equ	0xFD9
 29565                           status	equ	0xFD8
 29566                           
 29567 ;; *************** function ___fldiv *****************
 29568 ;; Defined at:
 29569 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 29570 ;; Parameters:    Size  Location     Type
 29571 ;;  b               4    0[BANK0 ] unsigned char 
 29572 ;;  a               4    4[BANK0 ] unsigned char 
 29573 ;; Auto vars:     Size  Location     Type
 29574 ;;  grs             4   19[BANK0 ] unsigned long 
 29575 ;;  rem             4   13[BANK0 ] unsigned long 
 29576 ;;  new_exp         2   17[BANK0 ] int 
 29577 ;;  aexp            1   24[BANK0 ] unsigned char 
 29578 ;;  bexp            1   23[BANK0 ] unsigned char 
 29579 ;;  sign            1   12[BANK0 ] unsigned char 
 29580 ;; Return value:  Size  Location     Type
 29581 ;;                  4    0[BANK0 ] unsigned char 
 29582 ;; Registers used:
 29583 ;;		wreg, status,2, status,0
 29584 ;; Tracked objects:
 29585 ;;		On entry : 0/0
 29586 ;;		On exit  : 0/0
 29587 ;;		Unchanged: 0/0
 29588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29589 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29590 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29591 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29592 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29593 ;;Total ram usage:       25 bytes
 29594 ;; Hardware stack levels used:    1
 29595 ;; Hardware stack levels required when called:    7
 29596 ;; This function calls:
 29597 ;;		Nothing
 29598 ;; This function is called by:
 29599 ;;		_ADC_Voltage
 29600 ;;		_exp
 29601 ;; This function uses a non-reentrant model
 29602 ;;
 29603                           
 29604                           	psect	text155
 29605  010D6C                     __ptext155:
 29606                           	opt stack 0
 29607  010D6C                     ___fldiv:
 29608                           	opt stack 21
 29609                           
 29610                           ; BSR set to: 0
 29611                           ;incstack = 0
 29612  010D6C  0100               	movlb	0	; () banked
 29613  010D6E  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 29614  010D70  0B80               	andlw	128
 29615  010D72  0100               	movlb	0	; () banked
 29616  010D74  6F6C               	movwf	___fldiv@sign& (0+255),b
 29617  010D76  0100               	movlb	0	; () banked
 29618  010D78  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 29619  010D7A  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 29620  010D7C  0100               	movlb	0	; () banked
 29621  010D7E  6F77               	movwf	___fldiv@bexp& (0+255),b
 29622                           
 29623                           ; BSR set to: 0
 29624  010D80  0100               	movlb	0	; () banked
 29625  010D82  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 29626  010D84  D002               	goto	l2657
 29627                           
 29628                           ; BSR set to: 0
 29629  010D86  0100               	movlb	0	; () banked
 29630  010D88  8177               	bsf	___fldiv@bexp& (0+255),0,b
 29631  010D8A                     l2657:
 29632                           
 29633                           ; BSR set to: 0
 29634                           
 29635                           ; BSR set to: 0
 29636  010D8A  0100               	movlb	0	; () banked
 29637  010D8C  5177               	movf	___fldiv@bexp& (0+255),w,b
 29638  010D8E  0100               	movlb	0	; () banked
 29639  010D90  B4D8               	btfsc	status,2,c
 29640  010D92  D012               	goto	l2658
 29641                           
 29642                           ; BSR set to: 0
 29643  010D94  0100               	movlb	0	; () banked
 29644  010D96  2977               	incf	___fldiv@bexp& (0+255),w,b
 29645  010D98  A4D8               	btfss	status,2,c
 29646  010D9A  D009               	goto	l2659
 29647                           
 29648                           ; BSR set to: 0
 29649  010D9C  0E00               	movlw	0
 29650  010D9E  0100               	movlb	0	; () banked
 29651  010DA0  6F60               	movwf	___fldiv@b& (0+255),b
 29652  010DA2  0E00               	movlw	0
 29653  010DA4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29654  010DA6  0E00               	movlw	0
 29655  010DA8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29656  010DAA  0E00               	movlw	0
 29657  010DAC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29658  010DAE                     l2659:
 29659                           
 29660                           ; BSR set to: 0
 29661                           
 29662                           ; BSR set to: 0
 29663  010DAE  0100               	movlb	0	; () banked
 29664  010DB0  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 29665                           
 29666                           ; BSR set to: 0
 29667  010DB2  0E00               	movlw	0
 29668  010DB4  0100               	movlb	0	; () banked
 29669  010DB6  D008               	goto	L19
 29670  010DB8                     l2658:
 29671                           
 29672                           ; BSR set to: 0
 29673                           
 29674                           ; BSR set to: 0
 29675  010DB8  0E00               	movlw	0
 29676  010DBA  0100               	movlb	0	; () banked
 29677  010DBC  6F60               	movwf	___fldiv@b& (0+255),b
 29678  010DBE  0E00               	movlw	0
 29679  010DC0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29680  010DC2  0E00               	movlw	0
 29681  010DC4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29682  010DC6  0E00               	movlw	0
 29683  010DC8                     L19:
 29684  010DC8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29685                           
 29686                           ; BSR set to: 0
 29687                           
 29688                           ; BSR set to: 0
 29689  010DCA  0100               	movlb	0	; () banked
 29690  010DCC  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 29691  010DCE  0B80               	andlw	128
 29692  010DD0  0100               	movlb	0	; () banked
 29693  010DD2  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 29694                           
 29695                           ; BSR set to: 0
 29696  010DD4  0100               	movlb	0	; () banked
 29697  010DD6  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 29698  010DD8  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 29699  010DDA  0100               	movlb	0	; () banked
 29700  010DDC  6F78               	movwf	___fldiv@aexp& (0+255),b
 29701                           
 29702                           ; BSR set to: 0
 29703  010DDE  0100               	movlb	0	; () banked
 29704  010DE0  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
 29705  010DE2  D002               	goto	l2661
 29706                           
 29707                           ; BSR set to: 0
 29708  010DE4  0100               	movlb	0	; () banked
 29709  010DE6  8178               	bsf	___fldiv@aexp& (0+255),0,b
 29710  010DE8                     l2661:
 29711                           
 29712                           ; BSR set to: 0
 29713                           
 29714                           ; BSR set to: 0
 29715  010DE8  0100               	movlb	0	; () banked
 29716  010DEA  5178               	movf	___fldiv@aexp& (0+255),w,b
 29717  010DEC  0100               	movlb	0	; () banked
 29718  010DEE  B4D8               	btfsc	status,2,c
 29719  010DF0  D012               	goto	l2662
 29720                           
 29721                           ; BSR set to: 0
 29722  010DF2  0100               	movlb	0	; () banked
 29723  010DF4  2978               	incf	___fldiv@aexp& (0+255),w,b
 29724  010DF6  A4D8               	btfss	status,2,c
 29725  010DF8  D009               	goto	l2663
 29726                           
 29727                           ; BSR set to: 0
 29728  010DFA  0E00               	movlw	0
 29729  010DFC  0100               	movlb	0	; () banked
 29730  010DFE  6F64               	movwf	___fldiv@a& (0+255),b
 29731  010E00  0E00               	movlw	0
 29732  010E02  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 29733  010E04  0E00               	movlw	0
 29734  010E06  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 29735  010E08  0E00               	movlw	0
 29736  010E0A  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 29737  010E0C                     l2663:
 29738                           
 29739                           ; BSR set to: 0
 29740                           
 29741                           ; BSR set to: 0
 29742  010E0C  0100               	movlb	0	; () banked
 29743  010E0E  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 29744                           
 29745                           ; BSR set to: 0
 29746  010E10  0E00               	movlw	0
 29747  010E12  0100               	movlb	0	; () banked
 29748  010E14  D008               	goto	L20
 29749  010E16                     l2662:
 29750                           
 29751                           ; BSR set to: 0
 29752                           
 29753                           ; BSR set to: 0
 29754  010E16  0E00               	movlw	0
 29755  010E18  0100               	movlb	0	; () banked
 29756  010E1A  6F64               	movwf	___fldiv@a& (0+255),b
 29757  010E1C  0E00               	movlw	0
 29758  010E1E  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 29759  010E20  0E00               	movlw	0
 29760  010E22  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 29761  010E24  0E00               	movlw	0
 29762  010E26                     L20:
 29763  010E26  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 29764                           
 29765                           ; BSR set to: 0
 29766                           
 29767                           ; BSR set to: 0
 29768  010E28  0100               	movlb	0	; () banked
 29769  010E2A  5164               	movf	___fldiv@a& (0+255),w,b
 29770  010E2C  0100               	movlb	0	; () banked
 29771  010E2E  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 29772  010E30  0100               	movlb	0	; () banked
 29773  010E32  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 29774  010E34  0100               	movlb	0	; () banked
 29775  010E36  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 29776  010E38  A4D8               	btfss	status,2,c
 29777  010E3A  D017               	goto	l2665
 29778                           
 29779                           ; BSR set to: 0
 29780  010E3C  0E00               	movlw	0
 29781  010E3E  0100               	movlb	0	; () banked
 29782  010E40  6F60               	movwf	___fldiv@b& (0+255),b
 29783  010E42  0E00               	movlw	0
 29784  010E44  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29785  010E46  0E00               	movlw	0
 29786  010E48  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29787  010E4A  0E00               	movlw	0
 29788  010E4C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29789                           
 29790                           ; BSR set to: 0
 29791  010E4E  0100               	movlb	0	; () banked
 29792  010E50  0E80               	movlw	128
 29793  010E52  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 29794  010E54  0E7F               	movlw	127
 29795  010E56  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 29796                           
 29797                           ; BSR set to: 0
 29798  010E58  C060  F060         	movff	___fldiv@b,?___fldiv
 29799  010E5C  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 29800  010E60  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 29801  010E64  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 29802                           
 29803                           ; BSR set to: 0
 29804  010E68  0012               	return	
 29805  010E6A                     l2665:
 29806                           
 29807                           ; BSR set to: 0
 29808                           
 29809                           ; BSR set to: 0
 29810  010E6A  0100               	movlb	0	; () banked
 29811  010E6C  5177               	movf	___fldiv@bexp& (0+255),w,b
 29812  010E6E  0100               	movlb	0	; () banked
 29813  010E70  A4D8               	btfss	status,2,c
 29814  010E72  D012               	goto	l2667
 29815                           
 29816                           ; BSR set to: 0
 29817  010E74  0E00               	movlw	0
 29818  010E76  0100               	movlb	0	; () banked
 29819  010E78  6F60               	movwf	___fldiv@b& (0+255),b
 29820  010E7A  0E00               	movlw	0
 29821  010E7C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29822  010E7E  0E00               	movlw	0
 29823  010E80  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29824  010E82  0E00               	movlw	0
 29825  010E84  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29826                           
 29827                           ; BSR set to: 0
 29828  010E86  C060  F060         	movff	___fldiv@b,?___fldiv
 29829  010E8A  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 29830  010E8E  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 29831  010E92  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 29832                           
 29833                           ; BSR set to: 0
 29834  010E96  0012               	return	
 29835  010E98                     l2667:
 29836                           
 29837                           ; BSR set to: 0
 29838                           
 29839                           ; BSR set to: 0
 29840  010E98  0100               	movlb	0	; () banked
 29841  010E9A  5178               	movf	___fldiv@aexp& (0+255),w,b
 29842  010E9C  0100               	movlb	0	; () banked
 29843  010E9E  6F68               	movwf	??___fldiv& (0+255),b
 29844  010EA0  6B69               	clrf	(??___fldiv+1)& (0+255),b
 29845  010EA2  0100               	movlb	0	; () banked
 29846  010EA4  1F68               	comf	??___fldiv& (0+255),f,b
 29847  010EA6  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 29848  010EA8  4B68               	infsnz	??___fldiv& (0+255),f,b
 29849  010EAA  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 29850  010EAC  0100               	movlb	0	; () banked
 29851  010EAE  5177               	movf	___fldiv@bexp& (0+255),w,b
 29852  010EB0  0100               	movlb	0	; () banked
 29853  010EB2  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 29854  010EB4  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 29855  010EB6  0100               	movlb	0	; () banked
 29856  010EB8  5168               	movf	??___fldiv& (0+255),w,b
 29857  010EBA  0100               	movlb	0	; () banked
 29858  010EBC  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 29859  010EBE  0100               	movlb	0	; () banked
 29860  010EC0  5169               	movf	(??___fldiv+1)& (0+255),w,b
 29861  010EC2  0100               	movlb	0	; () banked
 29862  010EC4  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 29863  010EC6  0E7F               	movlw	127
 29864  010EC8  0100               	movlb	0	; () banked
 29865  010ECA  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 29866  010ECC  0100               	movlb	0	; () banked
 29867  010ECE  6F71               	movwf	___fldiv@new_exp& (0+255),b
 29868  010ED0  0E00               	movlw	0
 29869  010ED2  0100               	movlb	0	; () banked
 29870  010ED4  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 29871  010ED6  0100               	movlb	0	; () banked
 29872  010ED8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 29873                           
 29874                           ; BSR set to: 0
 29875  010EDA  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 29876  010EDE  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 29877  010EE2  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 29878  010EE6  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 29879                           
 29880                           ; BSR set to: 0
 29881  010EEA  0E00               	movlw	0
 29882  010EEC  0100               	movlb	0	; () banked
 29883  010EEE  6F60               	movwf	___fldiv@b& (0+255),b
 29884  010EF0  0E00               	movlw	0
 29885  010EF2  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29886  010EF4  0E00               	movlw	0
 29887  010EF6  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29888  010EF8  0E00               	movlw	0
 29889  010EFA  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29890                           
 29891                           ; BSR set to: 0
 29892  010EFC  0E00               	movlw	0
 29893  010EFE  0100               	movlb	0	; () banked
 29894  010F00  6F73               	movwf	___fldiv@grs& (0+255),b
 29895  010F02  0E00               	movlw	0
 29896  010F04  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 29897  010F06  0E00               	movlw	0
 29898  010F08  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 29899  010F0A  0E00               	movlw	0
 29900  010F0C  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 29901                           
 29902                           ; BSR set to: 0
 29903  010F0E  0E00               	movlw	0
 29904  010F10  0100               	movlb	0	; () banked
 29905  010F12  6F78               	movwf	___fldiv@aexp& (0+255),b
 29906  010F14  D042               	goto	l2668
 29907  010F16                     
 29908                           ; BSR set to: 0
 29909                           
 29910                           ; BSR set to: 0
 29911  010F16  0100               	movlb	0	; () banked
 29912  010F18  5178               	movf	___fldiv@aexp& (0+255),w,b
 29913  010F1A  0100               	movlb	0	; () banked
 29914  010F1C  B4D8               	btfsc	status,2,c
 29915  010F1E  D017               	goto	l2670
 29916                           
 29917                           ; BSR set to: 0
 29918  010F20  0100               	movlb	0	; () banked
 29919  010F22  90D8               	bcf	status,0,c
 29920  010F24  376D               	rlcf	___fldiv@rem& (0+255),f,b
 29921  010F26  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 29922  010F28  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 29923  010F2A  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 29924  010F2C  0100               	movlb	0	; () banked
 29925  010F2E  90D8               	bcf	status,0,c
 29926  010F30  3760               	rlcf	___fldiv@b& (0+255),f,b
 29927  010F32  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 29928  010F34  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 29929  010F36  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 29930                           
 29931                           ; BSR set to: 0
 29932  010F38  0100               	movlb	0	; () banked
 29933  010F3A  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 29934  010F3C  D002               	goto	l2671
 29935                           
 29936                           ; BSR set to: 0
 29937  010F3E  0100               	movlb	0	; () banked
 29938  010F40  8160               	bsf	___fldiv@b& (0+255),0,b
 29939  010F42                     l2671:
 29940                           
 29941                           ; BSR set to: 0
 29942  010F42  0100               	movlb	0	; () banked
 29943  010F44  90D8               	bcf	status,0,c
 29944  010F46  3773               	rlcf	___fldiv@grs& (0+255),f,b
 29945  010F48  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 29946  010F4A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 29947  010F4C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 29948  010F4E                     l2670:
 29949                           
 29950                           ; BSR set to: 0
 29951                           
 29952                           ; BSR set to: 0
 29953  010F4E  0100               	movlb	0	; () banked
 29954  010F50  5164               	movf	___fldiv@a& (0+255),w,b
 29955  010F52  0100               	movlb	0	; () banked
 29956  010F54  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 29957  010F56  0100               	movlb	0	; () banked
 29958  010F58  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 29959  010F5A  0100               	movlb	0	; () banked
 29960  010F5C  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 29961  010F5E  0100               	movlb	0	; () banked
 29962  010F60  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 29963  010F62  0100               	movlb	0	; () banked
 29964  010F64  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 29965  010F66  0100               	movlb	0	; () banked
 29966  010F68  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 29967  010F6A  0100               	movlb	0	; () banked
 29968  010F6C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 29969  010F6E  A0D8               	btfss	status,0,c
 29970  010F70  D012               	goto	l2672
 29971                           
 29972                           ; BSR set to: 0
 29973  010F72  0100               	movlb	0	; () banked
 29974  010F74  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 29975                           
 29976                           ; BSR set to: 0
 29977  010F76  0100               	movlb	0	; () banked
 29978  010F78  5164               	movf	___fldiv@a& (0+255),w,b
 29979  010F7A  0100               	movlb	0	; () banked
 29980  010F7C  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 29981  010F7E  0100               	movlb	0	; () banked
 29982  010F80  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 29983  010F82  0100               	movlb	0	; () banked
 29984  010F84  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 29985  010F86  0100               	movlb	0	; () banked
 29986  010F88  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 29987  010F8A  0100               	movlb	0	; () banked
 29988  010F8C  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 29989  010F8E  0100               	movlb	0	; () banked
 29990  010F90  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 29991  010F92  0100               	movlb	0	; () banked
 29992  010F94  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 29993  010F96                     l2672:
 29994                           
 29995                           ; BSR set to: 0
 29996                           
 29997                           ; BSR set to: 0
 29998  010F96  0100               	movlb	0	; () banked
 29999  010F98  2B78               	incf	___fldiv@aexp& (0+255),f,b
 30000  010F9A                     l2668:
 30001                           
 30002                           ; BSR set to: 0
 30003  010F9A  0E19               	movlw	25
 30004  010F9C  0100               	movlb	0	; () banked
 30005  010F9E  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 30006  010FA0  D7BA               	goto	l2669
 30007                           
 30008                           ; BSR set to: 0
 30009                           
 30010                           ; BSR set to: 0
 30011  010FA2  0100               	movlb	0	; () banked
 30012  010FA4  516D               	movf	___fldiv@rem& (0+255),w,b
 30013  010FA6  0100               	movlb	0	; () banked
 30014  010FA8  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 30015  010FAA  0100               	movlb	0	; () banked
 30016  010FAC  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 30017  010FAE  0100               	movlb	0	; () banked
 30018  010FB0  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 30019  010FB2  B4D8               	btfsc	status,2,c
 30020  010FB4  D018               	goto	l2675
 30021                           
 30022                           ; BSR set to: 0
 30023  010FB6  0100               	movlb	0	; () banked
 30024  010FB8  8173               	bsf	___fldiv@grs& (0+255),0,b
 30025                           
 30026                           ; BSR set to: 0
 30027  010FBA  D015               	goto	l2675
 30028  010FBC                     
 30029                           ; BSR set to: 0
 30030                           
 30031                           ; BSR set to: 0
 30032  010FBC  0100               	movlb	0	; () banked
 30033  010FBE  90D8               	bcf	status,0,c
 30034  010FC0  3760               	rlcf	___fldiv@b& (0+255),f,b
 30035  010FC2  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 30036  010FC4  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 30037  010FC6  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 30038                           
 30039                           ; BSR set to: 0
 30040  010FC8  0100               	movlb	0	; () banked
 30041  010FCA  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 30042  010FCC  D002               	goto	l2677
 30043                           
 30044                           ; BSR set to: 0
 30045  010FCE  0100               	movlb	0	; () banked
 30046  010FD0  8160               	bsf	___fldiv@b& (0+255),0,b
 30047  010FD2                     l2677:
 30048                           
 30049                           ; BSR set to: 0
 30050  010FD2  0100               	movlb	0	; () banked
 30051  010FD4  90D8               	bcf	status,0,c
 30052  010FD6  3773               	rlcf	___fldiv@grs& (0+255),f,b
 30053  010FD8  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 30054  010FDA  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 30055  010FDC  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 30056  010FDE  0100               	movlb	0	; () banked
 30057  010FE0  0771               	decf	___fldiv@new_exp& (0+255),f,b
 30058  010FE2  A0D8               	btfss	status,0,c
 30059  010FE4  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 30060  010FE6                     l2675:
 30061                           
 30062                           ; BSR set to: 0
 30063                           
 30064                           ; BSR set to: 0
 30065  010FE6  0100               	movlb	0	; () banked
 30066  010FE8  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 30067  010FEA  D7E8               	goto	l2676
 30068                           
 30069                           ; BSR set to: 0
 30070                           
 30071                           ; BSR set to: 0
 30072  010FEC  0E00               	movlw	0
 30073  010FEE  0100               	movlb	0	; () banked
 30074  010FF0  6F78               	movwf	___fldiv@aexp& (0+255),b
 30075                           
 30076                           ; BSR set to: 0
 30077  010FF2  0100               	movlb	0	; () banked
 30078  010FF4  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 30079  010FF6  D024               	goto	l2682
 30080                           
 30081                           ; BSR set to: 0
 30082  010FF8  0EFF               	movlw	255
 30083  010FFA  0100               	movlb	0	; () banked
 30084  010FFC  1573               	andwf	___fldiv@grs& (0+255),w,b
 30085  010FFE  0100               	movlb	0	; () banked
 30086  011000  6F68               	movwf	??___fldiv& (0+255),b
 30087  011002  0EFF               	movlw	255
 30088  011004  0100               	movlb	0	; () banked
 30089  011006  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 30090  011008  0100               	movlb	0	; () banked
 30091  01100A  6F69               	movwf	(??___fldiv+1)& (0+255),b
 30092  01100C  0EFF               	movlw	255
 30093  01100E  0100               	movlb	0	; () banked
 30094  011010  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 30095  011012  0100               	movlb	0	; () banked
 30096  011014  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 30097  011016  0E7F               	movlw	127
 30098  011018  0100               	movlb	0	; () banked
 30099  01101A  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 30100  01101C  0100               	movlb	0	; () banked
 30101  01101E  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 30102  011020  0100               	movlb	0	; () banked
 30103  011022  5168               	movf	??___fldiv& (0+255),w,b
 30104  011024  0100               	movlb	0	; () banked
 30105  011026  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 30106  011028  0100               	movlb	0	; () banked
 30107  01102A  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 30108  01102C  0100               	movlb	0	; () banked
 30109  01102E  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 30110  011030  A4D8               	btfss	status,2,c
 30111  011032  D003               	goto	u11340
 30112                           
 30113                           ; BSR set to: 0
 30114                           
 30115                           ; BSR set to: 0
 30116  011034  0100               	movlb	0	; () banked
 30117  011036  A160               	btfss	___fldiv@b& (0+255),0,b
 30118  011038  D003               	goto	l2682
 30119  01103A                     u11340:
 30120                           
 30121                           ; BSR set to: 0
 30122  01103A  0E01               	movlw	1
 30123  01103C  0100               	movlb	0	; () banked
 30124  01103E  6F78               	movwf	___fldiv@aexp& (0+255),b
 30125  011040                     l2682:
 30126                           
 30127                           ; BSR set to: 0
 30128                           
 30129                           ; BSR set to: 0
 30130                           
 30131                           ; BSR set to: 0
 30132  011040  0100               	movlb	0	; () banked
 30133  011042  5178               	movf	___fldiv@aexp& (0+255),w,b
 30134  011044  0100               	movlb	0	; () banked
 30135  011046  B4D8               	btfsc	status,2,c
 30136  011048  D023               	goto	l2684
 30137                           
 30138                           ; BSR set to: 0
 30139  01104A  0E01               	movlw	1
 30140  01104C  0100               	movlb	0	; () banked
 30141  01104E  2760               	addwf	___fldiv@b& (0+255),f,b
 30142  011050  0E00               	movlw	0
 30143  011052  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 30144  011054  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 30145  011056  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 30146                           
 30147                           ; BSR set to: 0
 30148  011058  0100               	movlb	0	; () banked
 30149  01105A  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 30150  01105C  D019               	goto	l2684
 30151                           
 30152                           ; BSR set to: 0
 30153  01105E  C060  F068         	movff	___fldiv@b,??___fldiv
 30154  011062  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 30155  011066  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 30156  01106A  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 30157  01106E  0100               	movlb	0	; () banked
 30158  011070  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 30159  011072  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 30160  011074  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 30161  011076  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 30162  011078  3368               	rrcf	??___fldiv& (0+255),f,b
 30163  01107A  C068  F060         	movff	??___fldiv,___fldiv@b
 30164  01107E  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 30165  011082  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 30166  011086  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 30167                           
 30168                           ; BSR set to: 0
 30169  01108A  0100               	movlb	0	; () banked
 30170  01108C  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 30171  01108E  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 30172  011090                     l2684:
 30173                           
 30174                           ; BSR set to: 0
 30175                           
 30176                           ; BSR set to: 0
 30177                           
 30178                           ; BSR set to: 0
 30179  011090  0100               	movlb	0	; () banked
 30180  011092  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 30181  011094  D014               	goto	l2685
 30182  011096  0100               	movlb	0	; () banked
 30183  011098  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 30184  01109A  E104               	bnz	u11370
 30185  01109C  0100               	movlb	0	; () banked
 30186  01109E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 30187  0110A0  A0D8               	btfss	status,0,c
 30188  0110A2  D00D               	goto	l2685
 30189  0110A4                     u11370:
 30190                           
 30191                           ; BSR set to: 0
 30192  0110A4  0E00               	movlw	0
 30193  0110A6  0100               	movlb	0	; () banked
 30194  0110A8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 30195  0110AA  6971               	setf	___fldiv@new_exp& (0+255),b
 30196  0110AC  0E00               	movlw	0
 30197  0110AE  0100               	movlb	0	; () banked
 30198  0110B0  6F60               	movwf	___fldiv@b& (0+255),b
 30199  0110B2  0E00               	movlw	0
 30200  0110B4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 30201  0110B6  0E00               	movlw	0
 30202  0110B8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 30203  0110BA  0E00               	movlw	0
 30204  0110BC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 30205  0110BE                     l2685:
 30206                           
 30207                           ; BSR set to: 0
 30208                           
 30209                           ; BSR set to: 0
 30210  0110BE  0100               	movlb	0	; () banked
 30211  0110C0  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 30212  0110C2  D007               	goto	u11380
 30213  0110C4  0100               	movlb	0	; () banked
 30214  0110C6  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 30215  0110C8  E115               	bnz	l13952
 30216  0110CA  0100               	movlb	0	; () banked
 30217  0110CC  0571               	decf	___fldiv@new_exp& (0+255),w,b
 30218  0110CE  B0D8               	btfsc	status,0,c
 30219  0110D0  D011               	goto	l2686
 30220  0110D2                     u11380:
 30221                           
 30222                           ; BSR set to: 0
 30223  0110D2  0E00               	movlw	0
 30224  0110D4  0100               	movlb	0	; () banked
 30225  0110D6  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 30226  0110D8  0E00               	movlw	0
 30227  0110DA  6F71               	movwf	___fldiv@new_exp& (0+255),b
 30228  0110DC  0E00               	movlw	0
 30229  0110DE  0100               	movlb	0	; () banked
 30230  0110E0  6F60               	movwf	___fldiv@b& (0+255),b
 30231  0110E2  0E00               	movlw	0
 30232  0110E4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 30233  0110E6  0E00               	movlw	0
 30234  0110E8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 30235  0110EA  0E00               	movlw	0
 30236  0110EC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 30237  0110EE  0E00               	movlw	0
 30238  0110F0  0100               	movlb	0	; () banked
 30239  0110F2  6F6C               	movwf	___fldiv@sign& (0+255),b
 30240  0110F4                     l2686:
 30241  0110F4                     l13952:
 30242                           
 30243                           ; BSR set to: 0
 30244  0110F4  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 30245                           
 30246                           ; BSR set to: 0
 30247  0110F8  0100               	movlb	0	; () banked
 30248  0110FA  A177               	btfss	___fldiv@bexp& (0+255),0,b
 30249  0110FC  D003               	goto	l2687
 30250                           
 30251                           ; BSR set to: 0
 30252  0110FE  0100               	movlb	0	; () banked
 30253  011100  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 30254  011102  D002               	goto	l2688
 30255  011104                     l2687:
 30256                           
 30257                           ; BSR set to: 0
 30258                           
 30259                           ; BSR set to: 0
 30260  011104  0100               	movlb	0	; () banked
 30261  011106  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 30262  011108                     l2688:
 30263                           
 30264                           ; BSR set to: 0
 30265                           
 30266                           ; BSR set to: 0
 30267  011108  0100               	movlb	0	; () banked
 30268  01110A  90D8               	bcf	status,0,c
 30269  01110C  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 30270  01110E  0100               	movlb	0	; () banked
 30271  011110  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 30272                           
 30273                           ; BSR set to: 0
 30274  011112  0100               	movlb	0	; () banked
 30275  011114  516C               	movf	___fldiv@sign& (0+255),w,b
 30276  011116  0100               	movlb	0	; () banked
 30277  011118  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 30278                           
 30279                           ; BSR set to: 0
 30280  01111A  C060  F060         	movff	___fldiv@b,?___fldiv
 30281  01111E  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 30282  011122  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 30283  011126  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 30284  01112A  0012               	return	
 30285  01112C                     __end_of___fldiv:
 30286                           	opt stack 0
 30287                           tosu	equ	0xFFF
 30288                           tosh	equ	0xFFE
 30289                           tosl	equ	0xFFD
 30290                           pclath	equ	0xFFA
 30291                           tblptru	equ	0xFF8
 30292                           tblptrh	equ	0xFF7
 30293                           tblptrl	equ	0xFF6
 30294                           tablat	equ	0xFF5
 30295                           prodh	equ	0xFF4
 30296                           prodl	equ	0xFF3
 30297                           intcon	equ	0xFF2
 30298                           indf0	equ	0xFEF
 30299                           postinc0	equ	0xFEE
 30300                           fsr0h	equ	0xFEA
 30301                           fsr0l	equ	0xFE9
 30302                           wreg	equ	0xFE8
 30303                           indf1	equ	0xFE7
 30304                           postdec1	equ	0xFE5
 30305                           fsr1h	equ	0xFE2
 30306                           fsr1l	equ	0xFE1
 30307                           indf2	equ	0xFDF
 30308                           postinc2	equ	0xFDE
 30309                           postdec2	equ	0xFDD
 30310                           plusw2	equ	0xFDB
 30311                           fsr2h	equ	0xFDA
 30312                           fsr2l	equ	0xFD9
 30313                           status	equ	0xFD8
 30314                           
 30315 ;; *************** function _ISR_Function *****************
 30316 ;; Defined at:
 30317 ;;		line 38 in file "Library/ISR.c"
 30318 ;; Parameters:    Size  Location     Type
 30319 ;;		None
 30320 ;; Auto vars:     Size  Location     Type
 30321 ;;		None
 30322 ;; Return value:  Size  Location     Type
 30323 ;;                  1    wreg      void 
 30324 ;; Registers used:
 30325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30326 ;; Tracked objects:
 30327 ;;		On entry : 0/0
 30328 ;;		On exit  : 0/0
 30329 ;;		Unchanged: 0/0
 30330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30333 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30334 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30335 ;;Total ram usage:       18 bytes
 30336 ;; Hardware stack levels used:    1
 30337 ;; Hardware stack levels required when called:    6
 30338 ;; This function calls:
 30339 ;;		_Timer0_ISR
 30340 ;; This function is called by:
 30341 ;;		Interrupt level 2
 30342 ;; This function uses a non-reentrant model
 30343 ;;
 30344                           
 30345                           	psect	intcode
 30346  001408                     __pintcode:
 30347                           	opt stack 0
 30348  001408                     _ISR_Function:
 30349                           	opt stack 13
 30350                           
 30351                           ; BSR set to: 0
 30352                           ;incstack = 0
 30353  001408  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 30354  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 30355  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 30356  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 30357  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 30358  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 30359  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 30360  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 30361  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 30362  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 30363  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 30364  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 30365  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 30366  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 30367  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 30368  001442  C050  F025         	movff	btemp,??_ISR_Function+14
 30369  001446  C051  F026         	movff	btemp+1,??_ISR_Function+15
 30370  00144A  C052  F027         	movff	btemp+2,??_ISR_Function+16
 30371  00144E  C053  F028         	movff	btemp+3,??_ISR_Function+17
 30372                           
 30373                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 30374  001452  92F2               	bcf	intcon,1,c	;volatile
 30375                           
 30376                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 30377  001454  B4F2               	btfsc	intcon,2,c	;volatile
 30378  001456  AAF2               	btfss	intcon,5,c	;volatile
 30379  001458  D002               	goto	i2l1590
 30380                           
 30381                           ;ISR.c: 68: Timer0_ISR();
 30382  00145A  EC7D  F0B4         	call	_Timer0_ISR	;wreg free
 30383  00145E                     i2l1590:
 30384  00145E  C028  F053         	movff	??_ISR_Function+17,btemp+3
 30385  001462  C027  F052         	movff	??_ISR_Function+16,btemp+2
 30386  001466  C026  F051         	movff	??_ISR_Function+15,btemp+1
 30387  00146A  C025  F050         	movff	??_ISR_Function+14,btemp
 30388  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 30389  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 30390  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 30391  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 30392  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 30393  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 30394  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 30395  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 30396  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 30397  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 30398  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 30399  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 30400  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 30401  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 30402  0014A6  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 30403  0014A8  0011               	retfie		f
 30404  0014AA                     __end_of_ISR_Function:
 30405                           	opt stack 0
 30406                           tosu	equ	0xFFF
 30407                           tosh	equ	0xFFE
 30408                           tosl	equ	0xFFD
 30409                           pclatu	equ	0xFFB
 30410                           pclath	equ	0xFFA
 30411                           tblptru	equ	0xFF8
 30412                           tblptrh	equ	0xFF7
 30413                           tblptrl	equ	0xFF6
 30414                           tablat	equ	0xFF5
 30415                           prodh	equ	0xFF4
 30416                           prodl	equ	0xFF3
 30417                           intcon	equ	0xFF2
 30418                           indf0	equ	0xFEF
 30419                           postinc0	equ	0xFEE
 30420                           fsr0h	equ	0xFEA
 30421                           fsr0l	equ	0xFE9
 30422                           wreg	equ	0xFE8
 30423                           indf1	equ	0xFE7
 30424                           postdec1	equ	0xFE5
 30425                           fsr1h	equ	0xFE2
 30426                           fsr1l	equ	0xFE1
 30427                           indf2	equ	0xFDF
 30428                           postinc2	equ	0xFDE
 30429                           postdec2	equ	0xFDD
 30430                           plusw2	equ	0xFDB
 30431                           fsr2h	equ	0xFDA
 30432                           fsr2l	equ	0xFD9
 30433                           status	equ	0xFD8
 30434                           
 30435 ;; *************** function _Timer0_ISR *****************
 30436 ;; Defined at:
 30437 ;;		line 94 in file "Library/Timer0.c"
 30438 ;; Parameters:    Size  Location     Type
 30439 ;;		None
 30440 ;; Auto vars:     Size  Location     Type
 30441 ;;		None
 30442 ;; Return value:  Size  Location     Type
 30443 ;;                  1    wreg      void 
 30444 ;; Registers used:
 30445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30446 ;; Tracked objects:
 30447 ;;		On entry : 0/0
 30448 ;;		On exit  : 0/0
 30449 ;;		Unchanged: 0/0
 30450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30455 ;;Total ram usage:        0 bytes
 30456 ;; Hardware stack levels used:    1
 30457 ;; Hardware stack levels required when called:    5
 30458 ;; This function calls:
 30459 ;;		Absolute function
 30460 ;;		i2_Motor_Step
 30461 ;;		i2_Timer0_Stop
 30462 ;; This function is called by:
 30463 ;;		_ISR_Function
 30464 ;; This function uses a non-reentrant model
 30465 ;;
 30466                           
 30467                           	psect	text157
 30468  0168FA                     __ptext157:
 30469                           	opt stack 0
 30470  0168FA                     _Timer0_ISR:
 30471                           	opt stack 13
 30472                           
 30473                           ;Timer0.c: 96: Timer0_Stop();
 30474                           
 30475                           ;incstack = 0
 30476  0168FA  EC9D  F0B6         	call	i2_Timer0_Stop	;wreg free
 30477                           
 30478                           ;Timer0.c: 99: if (gISR != 0)
 30479  0168FE  0101               	movlb	1	; () banked
 30480  016900  510C               	movf	_gISR& (0+255),w,b
 30481  016902  0101               	movlb	1	; () banked
 30482  016904  110D               	iorwf	(_gISR+1)& (0+255),w,b
 30483  016906  0101               	movlb	1	; () banked
 30484  016908  110E               	iorwf	(_gISR+2)& (0+255),w,b
 30485  01690A  B4D8               	btfsc	status,2,c
 30486  01690C  0012               	return	
 30487                           
 30488                           ; BSR set to: 1
 30489                           ;Timer0.c: 100: gISR();
 30490  01690E  D801               	call	i2u1326_48
 30491  016910  0012               	return	
 30492  016912                     i2u1326_48:
 30493  016912  0005               	push	
 30494  016914  6EFA               	movwf	pclath,c
 30495  016916  0101               	movlb	1	; () banked
 30496  016918  510C               	movf	_gISR& (0+255),w,b
 30497  01691A  6EFD               	movwf	tosl,c
 30498  01691C  510D               	movf	(_gISR+1)& (0+255),w,b
 30499  01691E  6EFE               	movwf	tosh,c
 30500  016920  510E               	movf	(_gISR+2)& (0+255),w,b
 30501  016922  6EFF               	movwf	tosu,c
 30502  016924  50FA               	movf	pclath,w,c
 30503  016926  0012               	return		;indir
 30504  016928                     __end_of_Timer0_ISR:
 30505                           	opt stack 0
 30506                           tosu	equ	0xFFF
 30507                           tosh	equ	0xFFE
 30508                           tosl	equ	0xFFD
 30509                           pclatu	equ	0xFFB
 30510                           pclath	equ	0xFFA
 30511                           tblptru	equ	0xFF8
 30512                           tblptrh	equ	0xFF7
 30513                           tblptrl	equ	0xFF6
 30514                           tablat	equ	0xFF5
 30515                           prodh	equ	0xFF4
 30516                           prodl	equ	0xFF3
 30517                           intcon	equ	0xFF2
 30518                           indf0	equ	0xFEF
 30519                           postinc0	equ	0xFEE
 30520                           fsr0h	equ	0xFEA
 30521                           fsr0l	equ	0xFE9
 30522                           wreg	equ	0xFE8
 30523                           indf1	equ	0xFE7
 30524                           postdec1	equ	0xFE5
 30525                           fsr1h	equ	0xFE2
 30526                           fsr1l	equ	0xFE1
 30527                           indf2	equ	0xFDF
 30528                           postinc2	equ	0xFDE
 30529                           postdec2	equ	0xFDD
 30530                           plusw2	equ	0xFDB
 30531                           fsr2h	equ	0xFDA
 30532                           fsr2l	equ	0xFD9
 30533                           status	equ	0xFD8
 30534                           
 30535 ;; *************** function i2_Motor_Step *****************
 30536 ;; Defined at:
 30537 ;;		line 75 in file "Library/Motor.c"
 30538 ;; Parameters:    Size  Location     Type
 30539 ;;		None
 30540 ;; Auto vars:     Size  Location     Type
 30541 ;;		None
 30542 ;; Return value:  Size  Location     Type
 30543 ;;                  1    wreg      void 
 30544 ;; Registers used:
 30545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30546 ;; Tracked objects:
 30547 ;;		On entry : 0/0
 30548 ;;		On exit  : 0/0
 30549 ;;		Unchanged: 0/0
 30550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30554 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30555 ;;Total ram usage:        2 bytes
 30556 ;; Hardware stack levels used:    1
 30557 ;; Hardware stack levels required when called:    4
 30558 ;; This function calls:
 30559 ;;		i2_MXK_Queue
 30560 ;;		i2_MXK_Release
 30561 ;;		i2_MXK_SwitchTo
 30562 ;;		i2_Port_SetPin
 30563 ;;		i2_Timer0_Restart
 30564 ;;		i2_Timer0_Stop
 30565 ;; This function is called by:
 30566 ;; This function uses a non-reentrant model
 30567 ;;
 30568                           
 30569                           	psect	text158
 30570  013F6E                     __ptext158:
 30571                           	opt stack 0
 30572  013F6E                     i2_Motor_Step:
 30573                           	opt stack 13
 30574                           
 30575                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 30576                           
 30577                           ;incstack = 0
 30578  013F6E  0100               	movlb	0	; () banked
 30579  013F70  EE20 F004          	lfsr	2,4
 30580  013F74  51E8               	movf	_lMotor& (0+255),w,b
 30581  013F76  26D9               	addwf	fsr2l,f,c
 30582  013F78  51E9               	movf	(_lMotor+1)& (0+255),w,b
 30583  013F7A  22DA               	addwfc	fsr2h,f,c
 30584  013F7C  50DF               	movf	indf2,w,c
 30585  013F7E  ECB8  F0B3         	call	i2_MXK_SwitchTo
 30586  013F82  0900               	iorlw	0
 30587  013F84  B4D8               	btfsc	status,2,c
 30588  013F86  D06A               	goto	i2l1627
 30589                           
 30590                           ;Motor.c: 78: {
 30591                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 30592  013F88  C0E8  FFD9         	movff	_lMotor,fsr2l
 30593  013F8C  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30594  013F90  50DE               	movf	postinc2,w,c
 30595  013F92  10DE               	iorwf	postinc2,w,c
 30596  013F94  B4D8               	btfsc	status,2,c
 30597  013F96  D05D               	goto	i2l1628
 30598                           
 30599                           ;Motor.c: 80: {
 30600                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 30601  013F98  C0E8  FFD9         	movff	_lMotor,fsr2l
 30602  013F9C  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30603  013FA0  0E01               	movlw	1
 30604  013FA2  BEDB               	btfsc	plusw2,7,c
 30605  013FA4  D022               	goto	i2l1629
 30606  013FA6  0E01               	movlw	1
 30607  013FA8  50DB               	movf	plusw2,w,c
 30608  013FAA  E103               	bnz	i2u768_40
 30609  013FAC  04DE               	decf	postinc2,w,c
 30610  013FAE  A0D8               	btfss	status,0,c
 30611  013FB0  D01C               	goto	i2l1629
 30612  013FB2                     i2u768_40:
 30613                           
 30614                           ;Motor.c: 83: {
 30615                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 30616  013FB2  C0E8  FFD9         	movff	_lMotor,fsr2l
 30617  013FB6  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30618  013FBA  28DE               	incf	postinc2,w,c
 30619  013FBC  E104               	bnz	i2u769_40
 30620  013FBE  0E7F               	movlw	127
 30621  013FC0  18DE               	xorwf	postinc2,w,c
 30622  013FC2  B4D8               	btfsc	status,2,c
 30623  013FC4  D007               	goto	i2l1630
 30624  013FC6                     i2u769_40:
 30625                           
 30626                           ;Motor.c: 85: lMotor->mDelta --;
 30627  013FC6  C0E8  FFD9         	movff	_lMotor,fsr2l
 30628  013FCA  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30629  013FCE  06DE               	decf	postinc2,f,c
 30630  013FD0  0E00               	movlw	0
 30631  013FD2  5ADD               	subwfb	postdec2,f,c
 30632  013FD4                     i2l1630:
 30633                           
 30634                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 30635  013FD4  0E9B               	movlw	low _PortE
 30636  013FD6  6E10               	movwf	i2Port_SetPin@pInput,c
 30637  013FD8  0E01               	movlw	high _PortE
 30638  013FDA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30639  013FDC  0E00               	movlw	0
 30640  013FDE  6E12               	movwf	i2Port_SetPin@pPin,c
 30641  013FE0  0E01               	movlw	1
 30642  013FE2  6E13               	movwf	i2Port_SetPin@pValue,c
 30643  013FE4  EC06  F0A7         	call	i2_Port_SetPin	;wreg free
 30644                           
 30645                           ;Motor.c: 88: }
 30646  013FE8  D01B               	goto	i2l1631
 30647  013FEA                     i2l1629:
 30648                           
 30649                           ;Motor.c: 89: else
 30650                           ;Motor.c: 90: {
 30651                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 30652  013FEA  C0E8  FFD9         	movff	_lMotor,fsr2l
 30653  013FEE  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30654  013FF2  04DE               	decf	postinc2,w,c
 30655  013FF4  E104               	bnz	i2u770_40
 30656  013FF6  0E80               	movlw	128
 30657  013FF8  18DE               	xorwf	postinc2,w,c
 30658  013FFA  B4D8               	btfsc	status,2,c
 30659  013FFC  D007               	goto	i2l1632
 30660  013FFE                     i2u770_40:
 30661                           
 30662                           ;Motor.c: 92: lMotor->mDelta ++;
 30663  013FFE  C0E8  FFD9         	movff	_lMotor,fsr2l
 30664  014002  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 30665  014006  2ADE               	incf	postinc2,f,c
 30666  014008  0E00               	movlw	0
 30667  01400A  22DD               	addwfc	postdec2,f,c
 30668  01400C                     i2l1632:
 30669                           
 30670                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 30671  01400C  0E9B               	movlw	low _PortE
 30672  01400E  6E10               	movwf	i2Port_SetPin@pInput,c
 30673  014010  0E01               	movlw	high _PortE
 30674  014012  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30675  014014  0E00               	movlw	0
 30676  014016  6E12               	movwf	i2Port_SetPin@pPin,c
 30677  014018  0E00               	movlw	0
 30678  01401A  6E13               	movwf	i2Port_SetPin@pValue,c
 30679  01401C  EC06  F0A7         	call	i2_Port_SetPin	;wreg free
 30680  014020                     i2l1631:
 30681                           
 30682                           ;Motor.c: 95: }
 30683                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 30684  014020  0E9B               	movlw	low _PortE
 30685  014022  6E10               	movwf	i2Port_SetPin@pInput,c
 30686  014024  0E01               	movlw	high _PortE
 30687  014026  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30688  014028  0E01               	movlw	1
 30689  01402A  6E12               	movwf	i2Port_SetPin@pPin,c
 30690  01402C  0E01               	movlw	1
 30691  01402E  6E13               	movwf	i2Port_SetPin@pValue,c
 30692  014030  EC06  F0A7         	call	i2_Port_SetPin	;wreg free
 30693                           
 30694                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 30695  014034  0E9B               	movlw	low _PortE
 30696  014036  6E10               	movwf	i2Port_SetPin@pInput,c
 30697  014038  0E01               	movlw	high _PortE
 30698  01403A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30699  01403C  0E01               	movlw	1
 30700  01403E  6E12               	movwf	i2Port_SetPin@pPin,c
 30701  014040  0E00               	movlw	0
 30702  014042  6E13               	movwf	i2Port_SetPin@pValue,c
 30703  014044  EC06  F0A7         	call	i2_Port_SetPin	;wreg free
 30704                           
 30705                           ;Motor.c: 101: MXK_Release();
 30706  014048  ECA0  F0B6         	call	i2_MXK_Release	;wreg free
 30707                           
 30708                           ;Motor.c: 102: Timer0_Restart();
 30709  01404C  EC6F  F0B6         	call	i2_Timer0_Restart	;wreg free
 30710                           
 30711                           ;Motor.c: 103: return;
 30712  014050  0012               	return	
 30713  014052                     i2l1628:
 30714                           
 30715                           ;Motor.c: 104: }
 30716                           ;Motor.c: 105: MXK_Release();
 30717  014052  ECA0  F0B6         	call	i2_MXK_Release	;wreg free
 30718                           
 30719                           ;Motor.c: 106: Timer0_Stop();
 30720  014056  EC9D  F0B6         	call	i2_Timer0_Stop	;wreg free
 30721                           
 30722                           ;Motor.c: 107: return;
 30723  01405A  0012               	return	
 30724  01405C                     i2l1627:
 30725                           
 30726                           ;Motor.c: 108: }
 30727                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 30728  01405C  C0DD  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 30729  014060  C0DE  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 30730  014064  C0DF  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 30731  014068  EC5C  F0B6         	call	i2_MXK_Queue	;wreg free
 30732  01406C  0012               	return		;funcret
 30733  01406E                     __end_ofi2_Motor_Step:
 30734                           	opt stack 0
 30735                           tosu	equ	0xFFF
 30736                           tosh	equ	0xFFE
 30737                           tosl	equ	0xFFD
 30738                           pclatu	equ	0xFFB
 30739                           pclath	equ	0xFFA
 30740                           tblptru	equ	0xFF8
 30741                           tblptrh	equ	0xFF7
 30742                           tblptrl	equ	0xFF6
 30743                           tablat	equ	0xFF5
 30744                           prodh	equ	0xFF4
 30745                           prodl	equ	0xFF3
 30746                           intcon	equ	0xFF2
 30747                           indf0	equ	0xFEF
 30748                           postinc0	equ	0xFEE
 30749                           fsr0h	equ	0xFEA
 30750                           fsr0l	equ	0xFE9
 30751                           wreg	equ	0xFE8
 30752                           indf1	equ	0xFE7
 30753                           postdec1	equ	0xFE5
 30754                           fsr1h	equ	0xFE2
 30755                           fsr1l	equ	0xFE1
 30756                           indf2	equ	0xFDF
 30757                           postinc2	equ	0xFDE
 30758                           postdec2	equ	0xFDD
 30759                           plusw2	equ	0xFDB
 30760                           fsr2h	equ	0xFDA
 30761                           fsr2l	equ	0xFD9
 30762                           status	equ	0xFD8
 30763                           
 30764 ;; *************** function i2_Timer0_Stop *****************
 30765 ;; Defined at:
 30766 ;;		line 89 in file "Library/Timer0.c"
 30767 ;; Parameters:    Size  Location     Type
 30768 ;;		None
 30769 ;; Auto vars:     Size  Location     Type
 30770 ;;		None
 30771 ;; Return value:  Size  Location     Type
 30772 ;;                  1    wreg      void 
 30773 ;; Registers used:
 30774 ;;		None
 30775 ;; Tracked objects:
 30776 ;;		On entry : 0/0
 30777 ;;		On exit  : 0/0
 30778 ;;		Unchanged: 0/0
 30779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30784 ;;Total ram usage:        0 bytes
 30785 ;; Hardware stack levels used:    1
 30786 ;; This function calls:
 30787 ;;		Nothing
 30788 ;; This function is called by:
 30789 ;;		_Timer0_ISR
 30790 ;;		i2_Motor_Step
 30791 ;; This function uses a non-reentrant model
 30792 ;;
 30793                           
 30794                           	psect	text159
 30795  016D3A                     __ptext159:
 30796                           	opt stack 0
 30797  016D3A                     i2_Timer0_Stop:
 30798                           	opt stack 17
 30799                           
 30800                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30801                           
 30802                           ;incstack = 0
 30803  016D3A  9AF2               	bcf	intcon,5,c	;volatile
 30804                           
 30805                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30806  016D3C  94F2               	bcf	intcon,2,c	;volatile
 30807  016D3E  0012               	return		;funcret
 30808  016D40                     __end_ofi2_Timer0_Stop:
 30809                           	opt stack 0
 30810                           tosu	equ	0xFFF
 30811                           tosh	equ	0xFFE
 30812                           tosl	equ	0xFFD
 30813                           pclatu	equ	0xFFB
 30814                           pclath	equ	0xFFA
 30815                           tblptru	equ	0xFF8
 30816                           tblptrh	equ	0xFF7
 30817                           tblptrl	equ	0xFF6
 30818                           tablat	equ	0xFF5
 30819                           prodh	equ	0xFF4
 30820                           prodl	equ	0xFF3
 30821                           intcon	equ	0xFF2
 30822                           indf0	equ	0xFEF
 30823                           postinc0	equ	0xFEE
 30824                           fsr0h	equ	0xFEA
 30825                           fsr0l	equ	0xFE9
 30826                           wreg	equ	0xFE8
 30827                           indf1	equ	0xFE7
 30828                           postdec1	equ	0xFE5
 30829                           fsr1h	equ	0xFE2
 30830                           fsr1l	equ	0xFE1
 30831                           indf2	equ	0xFDF
 30832                           postinc2	equ	0xFDE
 30833                           postdec2	equ	0xFDD
 30834                           plusw2	equ	0xFDB
 30835                           fsr2h	equ	0xFDA
 30836                           fsr2l	equ	0xFD9
 30837                           status	equ	0xFD8
 30838                           
 30839 ;; *************** function i2_Timer0_Restart *****************
 30840 ;; Defined at:
 30841 ;;		line 83 in file "Library/Timer0.c"
 30842 ;; Parameters:    Size  Location     Type
 30843 ;;		None
 30844 ;; Auto vars:     Size  Location     Type
 30845 ;;		None
 30846 ;; Return value:  Size  Location     Type
 30847 ;;                  1    wreg      void 
 30848 ;; Registers used:
 30849 ;;		None
 30850 ;; Tracked objects:
 30851 ;;		On entry : 0/0
 30852 ;;		On exit  : 0/0
 30853 ;;		Unchanged: 0/0
 30854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30859 ;;Total ram usage:        0 bytes
 30860 ;; Hardware stack levels used:    1
 30861 ;; This function calls:
 30862 ;;		Nothing
 30863 ;; This function is called by:
 30864 ;;		i2_Motor_Step
 30865 ;; This function uses a non-reentrant model
 30866 ;;
 30867                           
 30868                           	psect	text160
 30869  016CDE                     __ptext160:
 30870                           	opt stack 0
 30871  016CDE                     i2_Timer0_Restart:
 30872                           	opt stack 16
 30873                           
 30874                           ;Timer0.c: 85: TMR0 = COUNTER;
 30875                           
 30876                           ;incstack = 0
 30877  016CDE  C029  FFD6         	movff	_COUNTER,4054	;volatile
 30878  016CE2  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 30879                           
 30880                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 30881  016CE6  8AF2               	bsf	intcon,5,c	;volatile
 30882  016CE8  0012               	return		;funcret
 30883  016CEA                     __end_ofi2_Timer0_Restart:
 30884                           	opt stack 0
 30885                           tosu	equ	0xFFF
 30886                           tosh	equ	0xFFE
 30887                           tosl	equ	0xFFD
 30888                           pclatu	equ	0xFFB
 30889                           pclath	equ	0xFFA
 30890                           tblptru	equ	0xFF8
 30891                           tblptrh	equ	0xFF7
 30892                           tblptrl	equ	0xFF6
 30893                           tablat	equ	0xFF5
 30894                           prodh	equ	0xFF4
 30895                           prodl	equ	0xFF3
 30896                           intcon	equ	0xFF2
 30897                           indf0	equ	0xFEF
 30898                           postinc0	equ	0xFEE
 30899                           fsr0h	equ	0xFEA
 30900                           fsr0l	equ	0xFE9
 30901                           wreg	equ	0xFE8
 30902                           indf1	equ	0xFE7
 30903                           postdec1	equ	0xFE5
 30904                           fsr1h	equ	0xFE2
 30905                           fsr1l	equ	0xFE1
 30906                           indf2	equ	0xFDF
 30907                           postinc2	equ	0xFDE
 30908                           postdec2	equ	0xFDD
 30909                           plusw2	equ	0xFDB
 30910                           fsr2h	equ	0xFDA
 30911                           fsr2l	equ	0xFD9
 30912                           status	equ	0xFD8
 30913                           
 30914 ;; *************** function i2_Port_SetPin *****************
 30915 ;; Defined at:
 30916 ;;		line 247 in file "Library/Port.c"
 30917 ;; Parameters:    Size  Location     Type
 30918 ;;  pInput          2   15[COMRAM] const PTR struct Port
 30919 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 30920 ;;  pPin            1   17[COMRAM] enum E6750
 30921 ;;  pValue          1   18[COMRAM] unsigned char 
 30922 ;; Auto vars:     Size  Location     Type
 30923 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 30924 ;; Return value:  Size  Location     Type
 30925 ;;                  1    wreg      void 
 30926 ;; Registers used:
 30927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30928 ;; Tracked objects:
 30929 ;;		On entry : 0/0
 30930 ;;		On exit  : 0/0
 30931 ;;		Unchanged: 0/0
 30932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30933 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30936 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30937 ;;Total ram usage:        5 bytes
 30938 ;; Hardware stack levels used:    1
 30939 ;; Hardware stack levels required when called:    3
 30940 ;; This function calls:
 30941 ;;		i2_Byte_SetBit
 30942 ;;		i2_Word_GetPair
 30943 ;; This function is called by:
 30944 ;;		i2_Motor_Step
 30945 ;; This function uses a non-reentrant model
 30946 ;;
 30947                           
 30948                           	psect	text161
 30949  014E0C                     __ptext161:
 30950                           	opt stack 0
 30951  014E0C                     i2_Port_SetPin:
 30952                           	opt stack 13
 30953                           
 30954                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30955                           
 30956                           ;incstack = 0
 30957  014E0C  0E08               	movlw	8
 30958  014E0E  2410               	addwf	i2Port_SetPin@pInput,w,c
 30959  014E10  6E0D               	movwf	i2Word_GetPair@pInput,c
 30960  014E12  0E00               	movlw	0
 30961  014E14  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30962  014E16  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30963  014E18  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30964  014E1C  EC37  F0B4         	call	i2_Word_GetPair	;wreg free
 30965  014E20  6E14               	movwf	i2Port_SetPin@Type,c
 30966                           
 30967                           ;Port.c: 250: switch (Type)
 30968  014E22  D03B               	goto	i2l427
 30969  014E24                     
 30970                           ;Port.c: 256: pValue &= 1;
 30971  014E24  0E01               	movlw	1
 30972  014E26  1613               	andwf	i2Port_SetPin@pValue,f,c
 30973                           
 30974                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30975  014E28  EE20 F002          	lfsr	2,2
 30976  014E2C  5010               	movf	i2Port_SetPin@pInput,w,c
 30977  014E2E  26D9               	addwf	fsr2l,f,c
 30978  014E30  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30979  014E32  22DA               	addwfc	fsr2h,f,c
 30980  014E34  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30981  014E38  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30982  014E3C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30983  014E40  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30984  014E44  EC04  F0B1         	call	i2_Byte_SetBit	;wreg free
 30985                           
 30986                           ;Port.c: 258: break;
 30987  014E48  0012               	return	
 30988  014E4A                     
 30989                           ;Port.c: 261: pValue &= 1;
 30990  014E4A  0E01               	movlw	1
 30991  014E4C  1613               	andwf	i2Port_SetPin@pValue,f,c
 30992                           
 30993                           ;Port.c: 262: pValue ^= 1;
 30994  014E4E  0E01               	movlw	1
 30995  014E50  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30996                           
 30997                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30998  014E52  EE20 F002          	lfsr	2,2
 30999  014E56  5010               	movf	i2Port_SetPin@pInput,w,c
 31000  014E58  26D9               	addwf	fsr2l,f,c
 31001  014E5A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31002  014E5C  22DA               	addwfc	fsr2h,f,c
 31003  014E5E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31004  014E62  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31005  014E66  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31006  014E6A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31007  014E6E  EC04  F0B1         	call	i2_Byte_SetBit	;wreg free
 31008                           
 31009                           ;Port.c: 264: break;
 31010  014E72  0012               	return	
 31011  014E74                     
 31012                           ;Port.c: 266: pValue &= 1;
 31013  014E74  0E01               	movlw	1
 31014  014E76  1613               	andwf	i2Port_SetPin@pValue,f,c
 31015                           
 31016                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 31017  014E78  EE20 F004          	lfsr	2,4
 31018  014E7C  5010               	movf	i2Port_SetPin@pInput,w,c
 31019  014E7E  26D9               	addwf	fsr2l,f,c
 31020  014E80  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31021  014E82  22DA               	addwfc	fsr2h,f,c
 31022  014E84  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31023  014E88  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31024  014E8C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31025  014E90  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31026  014E94  EC04  F0B1         	call	i2_Byte_SetBit	;wreg free
 31027                           
 31028                           ;Port.c: 269: }
 31029                           
 31030                           ;Port.c: 268: break;
 31031  014E98  0012               	return	
 31032  014E9A                     i2l427:
 31033  014E9A  5014               	movf	i2Port_SetPin@Type,w,c
 31034                           
 31035                           ; Switch size 1, requested type "space"
 31036                           ; Number of cases is 4, Range of values is 0 to 3
 31037                           ; switch strategies available:
 31038                           ; Name         Instructions Cycles
 31039                           ; simple_byte           13     7 (average)
 31040                           ;	Chosen strategy is simple_byte
 31041  014E9C  0A00               	xorlw	0	; case 0
 31042  014E9E  B4D8               	btfsc	status,2,c
 31043  014EA0  0012               	return	
 31044  014EA2  0A01               	xorlw	1	; case 1
 31045  014EA4  B4D8               	btfsc	status,2,c
 31046  014EA6  D7BE               	goto	i2l430
 31047  014EA8  0A03               	xorlw	3	; case 2
 31048  014EAA  B4D8               	btfsc	status,2,c
 31049  014EAC  D7CE               	goto	i2l432
 31050  014EAE  0A01               	xorlw	1	; case 3
 31051  014EB0  A4D8               	btfss	status,2,c
 31052  014EB2  0012               	return	
 31053  014EB4  D7DF               	goto	i2l433
 31054  014EB6                     __end_ofi2_Port_SetPin:
 31055                           	opt stack 0
 31056                           tosu	equ	0xFFF
 31057                           tosh	equ	0xFFE
 31058                           tosl	equ	0xFFD
 31059                           pclatu	equ	0xFFB
 31060                           pclath	equ	0xFFA
 31061                           tblptru	equ	0xFF8
 31062                           tblptrh	equ	0xFF7
 31063                           tblptrl	equ	0xFF6
 31064                           tablat	equ	0xFF5
 31065                           prodh	equ	0xFF4
 31066                           prodl	equ	0xFF3
 31067                           intcon	equ	0xFF2
 31068                           indf0	equ	0xFEF
 31069                           postinc0	equ	0xFEE
 31070                           fsr0h	equ	0xFEA
 31071                           fsr0l	equ	0xFE9
 31072                           wreg	equ	0xFE8
 31073                           indf1	equ	0xFE7
 31074                           postdec1	equ	0xFE5
 31075                           fsr1h	equ	0xFE2
 31076                           fsr1l	equ	0xFE1
 31077                           indf2	equ	0xFDF
 31078                           postinc2	equ	0xFDE
 31079                           postdec2	equ	0xFDD
 31080                           plusw2	equ	0xFDB
 31081                           fsr2h	equ	0xFDA
 31082                           fsr2l	equ	0xFD9
 31083                           status	equ	0xFD8
 31084                           
 31085 ;; *************** function i2_Word_GetPair *****************
 31086 ;; Defined at:
 31087 ;;		line 156 in file "Library/Types.c"
 31088 ;; Parameters:    Size  Location     Type
 31089 ;;  pInput          2   12[COMRAM] PTR struct Word
 31090 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 31091 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 31092 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 31093 ;;		 -> PortC(10), PortF(10), NULL(0), 
 31094 ;;  pPair           1   14[COMRAM] unsigned char 
 31095 ;; Auto vars:     Size  Location     Type
 31096 ;;		None
 31097 ;; Return value:  Size  Location     Type
 31098 ;;                  1    wreg      unsigned char 
 31099 ;; Registers used:
 31100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31101 ;; Tracked objects:
 31102 ;;		On entry : 0/0
 31103 ;;		On exit  : 0/0
 31104 ;;		Unchanged: 0/0
 31105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31106 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31110 ;;Total ram usage:        3 bytes
 31111 ;; Hardware stack levels used:    1
 31112 ;; Hardware stack levels required when called:    2
 31113 ;; This function calls:
 31114 ;;		i2_Byte_GetPair
 31115 ;; This function is called by:
 31116 ;;		i2_Port_SetPin
 31117 ;; This function uses a non-reentrant model
 31118 ;;
 31119                           
 31120                           	psect	text162
 31121  01686E                     __ptext162:
 31122                           	opt stack 0
 31123  01686E                     i2_Word_GetPair:
 31124                           	opt stack 13
 31125                           
 31126                           ;Types.c: 158: if (pPair >= 4)
 31127                           
 31128                           ;incstack = 0
 31129  01686E  0E03               	movlw	3
 31130  016870  640F               	cpfsgt	i2Word_GetPair@pPair,c
 31131  016872  D00C               	goto	i2l781
 31132                           
 31133                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 31134  016874  0E01               	movlw	1
 31135  016876  240D               	addwf	i2Word_GetPair@pInput,w,c
 31136  016878  6E0A               	movwf	i2Byte_GetPair@pInput,c
 31137  01687A  0E00               	movlw	0
 31138  01687C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 31139  01687E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 31140  016880  500F               	movf	i2Word_GetPair@pPair,w,c
 31141  016882  0FFC               	addlw	252
 31142  016884  6E0C               	movwf	i2Byte_GetPair@pPair,c
 31143  016886  ECC2  F0B5         	call	i2_Byte_GetPair	;wreg free
 31144  01688A  0012               	return	
 31145  01688C                     i2l781:
 31146                           
 31147                           ;Types.c: 160: else
 31148                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 31149  01688C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 31150  016890  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 31151  016894  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 31152  016898  ECC2  F0B5         	call	i2_Byte_GetPair	;wreg free
 31153  01689C  0012               	return	
 31154  01689E                     __end_ofi2_Word_GetPair:
 31155                           	opt stack 0
 31156                           tosu	equ	0xFFF
 31157                           tosh	equ	0xFFE
 31158                           tosl	equ	0xFFD
 31159                           pclatu	equ	0xFFB
 31160                           pclath	equ	0xFFA
 31161                           tblptru	equ	0xFF8
 31162                           tblptrh	equ	0xFF7
 31163                           tblptrl	equ	0xFF6
 31164                           tablat	equ	0xFF5
 31165                           prodh	equ	0xFF4
 31166                           prodl	equ	0xFF3
 31167                           intcon	equ	0xFF2
 31168                           indf0	equ	0xFEF
 31169                           postinc0	equ	0xFEE
 31170                           fsr0h	equ	0xFEA
 31171                           fsr0l	equ	0xFE9
 31172                           wreg	equ	0xFE8
 31173                           indf1	equ	0xFE7
 31174                           postdec1	equ	0xFE5
 31175                           fsr1h	equ	0xFE2
 31176                           fsr1l	equ	0xFE1
 31177                           indf2	equ	0xFDF
 31178                           postinc2	equ	0xFDE
 31179                           postdec2	equ	0xFDD
 31180                           plusw2	equ	0xFDB
 31181                           fsr2h	equ	0xFDA
 31182                           fsr2l	equ	0xFD9
 31183                           status	equ	0xFD8
 31184                           
 31185 ;; *************** function i2_Byte_GetPair *****************
 31186 ;; Defined at:
 31187 ;;		line 87 in file "Library/Types.c"
 31188 ;; Parameters:    Size  Location     Type
 31189 ;;  pInput          2    9[COMRAM] PTR struct Byte
 31190 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31191 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31192 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31193 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31194 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31195 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31196 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31197 ;;		 -> NULL(0), 
 31198 ;;  pPair           1   11[COMRAM] unsigned char 
 31199 ;; Auto vars:     Size  Location     Type
 31200 ;;		None
 31201 ;; Return value:  Size  Location     Type
 31202 ;;                  1    wreg      unsigned char 
 31203 ;; Registers used:
 31204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31205 ;; Tracked objects:
 31206 ;;		On entry : 0/0
 31207 ;;		On exit  : 0/0
 31208 ;;		Unchanged: 0/0
 31209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31210 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31214 ;;Total ram usage:        3 bytes
 31215 ;; Hardware stack levels used:    1
 31216 ;; Hardware stack levels required when called:    1
 31217 ;; This function calls:
 31218 ;;		i2_Byte_GetZone
 31219 ;; This function is called by:
 31220 ;;		i2_Word_GetPair
 31221 ;; This function uses a non-reentrant model
 31222 ;;
 31223                           
 31224                           	psect	text163
 31225  016B84                     __ptext163:
 31226                           	opt stack 0
 31227  016B84                     i2_Byte_GetPair:
 31228                           	opt stack 13
 31229                           
 31230                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 31231                           
 31232                           ;incstack = 0
 31233  016B84  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 31234  016B88  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 31235  016B8C  0E04               	movlw	4
 31236  016B8E  6E03               	movwf	i2Byte_GetZone@pMax,c
 31237  016B90  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 31238  016B94  0E02               	movlw	2
 31239  016B96  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 31240  016B98  EC7A  F0AC         	call	i2_Byte_GetZone	;wreg free
 31241  016B9C  0012               	return	
 31242  016B9E                     __end_ofi2_Byte_GetPair:
 31243                           	opt stack 0
 31244                           tosu	equ	0xFFF
 31245                           tosh	equ	0xFFE
 31246                           tosl	equ	0xFFD
 31247                           pclatu	equ	0xFFB
 31248                           pclath	equ	0xFFA
 31249                           tblptru	equ	0xFF8
 31250                           tblptrh	equ	0xFF7
 31251                           tblptrl	equ	0xFF6
 31252                           tablat	equ	0xFF5
 31253                           prodh	equ	0xFF4
 31254                           prodl	equ	0xFF3
 31255                           intcon	equ	0xFF2
 31256                           indf0	equ	0xFEF
 31257                           postinc0	equ	0xFEE
 31258                           fsr0h	equ	0xFEA
 31259                           fsr0l	equ	0xFE9
 31260                           wreg	equ	0xFE8
 31261                           indf1	equ	0xFE7
 31262                           postdec1	equ	0xFE5
 31263                           fsr1h	equ	0xFE2
 31264                           fsr1l	equ	0xFE1
 31265                           indf2	equ	0xFDF
 31266                           postinc2	equ	0xFDE
 31267                           postdec2	equ	0xFDD
 31268                           plusw2	equ	0xFDB
 31269                           fsr2h	equ	0xFDA
 31270                           fsr2l	equ	0xFD9
 31271                           status	equ	0xFD8
 31272                           
 31273 ;; *************** function i2_Byte_GetZone *****************
 31274 ;; Defined at:
 31275 ;;		line 64 in file "Library/Types.c"
 31276 ;; Parameters:    Size  Location     Type
 31277 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31278 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31279 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31280 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31281 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31282 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31283 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31284 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31285 ;;		 -> NULL(0), 
 31286 ;;  pMax            1    2[COMRAM] unsigned char 
 31287 ;;  pChunk          1    3[COMRAM] unsigned char 
 31288 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 31289 ;; Auto vars:     Size  Location     Type
 31290 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 31291 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 31292 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 31293 ;; Return value:  Size  Location     Type
 31294 ;;                  1    wreg      unsigned char 
 31295 ;; Registers used:
 31296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31297 ;; Tracked objects:
 31298 ;;		On entry : 0/0
 31299 ;;		On exit  : 0/0
 31300 ;;		Unchanged: 0/0
 31301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31302 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31303 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31305 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31306 ;;Total ram usage:        9 bytes
 31307 ;; Hardware stack levels used:    1
 31308 ;; This function calls:
 31309 ;;		Nothing
 31310 ;; This function is called by:
 31311 ;;		i2_Byte_GetPair
 31312 ;; This function uses a non-reentrant model
 31313 ;;
 31314                           
 31315                           	psect	text164
 31316  0158F4                     __ptext164:
 31317                           	opt stack 0
 31318  0158F4                     i2_Byte_GetZone:
 31319                           	opt stack 13
 31320                           
 31321                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 31322                           
 31323                           ;incstack = 0
 31324  0158F4  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 31325  0158F8  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 31326  0158FC  0E00               	movlw	low (__mediumconst shr (0+16))
 31327  0158FE  6EF8               	movwf	tblptru,c
 31328  015900  0E0F               	movlw	(high __ramtop+-1)
 31329  015902  64F7               	cpfsgt	tblptrh,c
 31330  015904  D003               	bra	i2u506_47
 31331  015906  0008               	tblrd		*
 31332  015908  50F5               	movf	tablat,w,c
 31333  01590A  D005               	bra	i2u506_40
 31334  01590C                     i2u506_47:
 31335  01590C  CFF6 FFE9          	movff	tblptrl,fsr0l
 31336  015910  CFF7 FFEA          	movff	tblptrh,fsr0h
 31337  015914  50EF               	movf	indf0,w,c
 31338  015916                     i2u506_40:
 31339  015916  6E09               	movwf	i2Byte_GetZone@Output,c
 31340                           
 31341                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 31342  015918  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31343  01591A  0D01               	mullw	1
 31344  01591C  0EBF               	movlw	low _MASKS
 31345  01591E  24F3               	addwf	prodl,w,c
 31346  015920  6EF6               	movwf	tblptrl,c
 31347  015922  0EFC               	movlw	high _MASKS
 31348  015924  20F4               	addwfc	prodh,w,c
 31349  015926  6EF7               	movwf	tblptrh,c
 31350  015928                     	if	1	;There are 3 active tblptr bytes
 31351  015928  6AF8               	clrf	tblptru,c
 31352  01592A  0E00               	movlw	low (__mediumconst shr (0+16))
 31353  01592C  22F8               	addwfc	tblptru,f,c
 31354  01592E                     	endif
 31355  01592E  0008               	tblrd		*
 31356  015930  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 31357                           
 31358                           ;Types.c: 68: UINT8 Offset = 0;
 31359  015934  0E00               	movlw	0
 31360  015936  6E08               	movwf	i2Byte_GetZone@Offset,c
 31361                           
 31362                           ;Types.c: 70: while (pChunk >= pMax)
 31363  015938  D003               	goto	i2l732
 31364  01593A                     
 31365                           ;Types.c: 71: {
 31366                           ;Types.c: 72: pChunk -= pMax;
 31367  01593A  5003               	movf	i2Byte_GetZone@pMax,w,c
 31368  01593C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 31369                           
 31370                           ;Types.c: 73: Offset += 1;
 31371  01593E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 31372  015940                     i2l732:
 31373  015940  5003               	movf	i2Byte_GetZone@pMax,w,c
 31374  015942  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 31375  015944  B0D8               	btfsc	status,0,c
 31376  015946  D7F9               	goto	i2l733
 31377                           
 31378                           ;Types.c: 74: }
 31379                           ;Types.c: 75: pChunk *= pChunkSize;
 31380  015948  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31381  01594A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 31382  01594C  50F3               	movf	prodl,w,c
 31383  01594E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 31384                           
 31385                           ;Types.c: 76: pChunk += Offset;
 31386  015950  5008               	movf	i2Byte_GetZone@Offset,w,c
 31387  015952  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 31388                           
 31389                           ;Types.c: 78: Output >>= pChunk;
 31390  015954  2804               	incf	i2Byte_GetZone@pChunk,w,c
 31391  015956  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 31392  015958  D002               	goto	i2u508_40
 31393  01595A                     i2u508_45:
 31394  01595A  90D8               	bcf	status,0,c
 31395  01595C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 31396  01595E                     i2u508_40:
 31397  01595E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 31398  015960  D7FC               	goto	i2u508_45
 31399                           
 31400                           ;Types.c: 79: Output &= MASK;
 31401  015962  5007               	movf	i2Byte_GetZone@MASK,w,c
 31402  015964  1609               	andwf	i2Byte_GetZone@Output,f,c
 31403                           
 31404                           ;Types.c: 80: return Output;
 31405  015966  5009               	movf	i2Byte_GetZone@Output,w,c
 31406  015968  0012               	return	
 31407  01596A                     __end_ofi2_Byte_GetZone:
 31408                           	opt stack 0
 31409                           tosu	equ	0xFFF
 31410                           tosh	equ	0xFFE
 31411                           tosl	equ	0xFFD
 31412                           pclatu	equ	0xFFB
 31413                           pclath	equ	0xFFA
 31414                           tblptru	equ	0xFF8
 31415                           tblptrh	equ	0xFF7
 31416                           tblptrl	equ	0xFF6
 31417                           tablat	equ	0xFF5
 31418                           prodh	equ	0xFF4
 31419                           prodl	equ	0xFF3
 31420                           intcon	equ	0xFF2
 31421                           indf0	equ	0xFEF
 31422                           postinc0	equ	0xFEE
 31423                           fsr0h	equ	0xFEA
 31424                           fsr0l	equ	0xFE9
 31425                           wreg	equ	0xFE8
 31426                           indf1	equ	0xFE7
 31427                           postdec1	equ	0xFE5
 31428                           fsr1h	equ	0xFE2
 31429                           fsr1l	equ	0xFE1
 31430                           indf2	equ	0xFDF
 31431                           postinc2	equ	0xFDE
 31432                           postdec2	equ	0xFDD
 31433                           plusw2	equ	0xFDB
 31434                           fsr2h	equ	0xFDA
 31435                           fsr2l	equ	0xFD9
 31436                           status	equ	0xFD8
 31437                           
 31438 ;; *************** function i2_Byte_SetBit *****************
 31439 ;; Defined at:
 31440 ;;		line 32 in file "Library/Types.c"
 31441 ;; Parameters:    Size  Location     Type
 31442 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31443 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 31444 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 31445 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 31446 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 31447 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 31448 ;;		 -> NULL(0), 
 31449 ;;  pBit            1    2[COMRAM] unsigned char 
 31450 ;;  pValue          1    3[COMRAM] unsigned char 
 31451 ;; Auto vars:     Size  Location     Type
 31452 ;;		None
 31453 ;; Return value:  Size  Location     Type
 31454 ;;                  1    wreg      void 
 31455 ;; Registers used:
 31456 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 31457 ;; Tracked objects:
 31458 ;;		On entry : 0/0
 31459 ;;		On exit  : 0/0
 31460 ;;		Unchanged: 0/0
 31461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31464 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31465 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31466 ;;Total ram usage:        7 bytes
 31467 ;; Hardware stack levels used:    1
 31468 ;; This function calls:
 31469 ;;		Nothing
 31470 ;; This function is called by:
 31471 ;;		i2_Port_SetPin
 31472 ;; This function uses a non-reentrant model
 31473 ;;
 31474                           
 31475                           	psect	text165
 31476  016208                     __ptext165:
 31477                           	opt stack 0
 31478  016208                     i2_Byte_SetBit:
 31479                           	opt stack 15
 31480                           
 31481                           ;Types.c: 34: pValue &= 1;
 31482                           
 31483                           ;incstack = 0
 31484  016208  0E01               	movlw	1
 31485  01620A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 31486                           
 31487                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 31488  01620C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31489  016210  0E01               	movlw	1
 31490  016212  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 31491  016214  2A05               	incf	??i2_Byte_SetBit,f,c
 31492  016216  D002               	goto	i2u639_44
 31493  016218                     i2u639_45:
 31494  016218  90D8               	bcf	status,0,c
 31495  01621A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31496  01621C                     i2u639_44:
 31497  01621C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31498  01621E  D7FC               	goto	i2u639_45
 31499  016220  5006               	movf	??i2_Byte_SetBit+1,w,c
 31500  016222  0AFF               	xorlw	255
 31501  016224  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 31502  016226  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31503  01622A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31504  01622E  5007               	movf	??i2_Byte_SetBit+2,w,c
 31505  016230  16DF               	andwf	indf2,f,c
 31506                           
 31507                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 31508  016232  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31509  016236  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 31510  01623A  2A05               	incf	??i2_Byte_SetBit,f,c
 31511  01623C  D002               	goto	i2u640_44
 31512  01623E                     i2u640_45:
 31513  01623E  90D8               	bcf	status,0,c
 31514  016240  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31515  016242                     i2u640_44:
 31516  016242  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31517  016244  D7FC               	goto	i2u640_45
 31518  016246  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31519  01624A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31520  01624E  5006               	movf	??i2_Byte_SetBit+1,w,c
 31521  016250  12DF               	iorwf	indf2,f,c
 31522  016252  0012               	return		;funcret
 31523  016254                     __end_ofi2_Byte_SetBit:
 31524                           	opt stack 0
 31525                           tosu	equ	0xFFF
 31526                           tosh	equ	0xFFE
 31527                           tosl	equ	0xFFD
 31528                           pclatu	equ	0xFFB
 31529                           pclath	equ	0xFFA
 31530                           tblptru	equ	0xFF8
 31531                           tblptrh	equ	0xFF7
 31532                           tblptrl	equ	0xFF6
 31533                           tablat	equ	0xFF5
 31534                           prodh	equ	0xFF4
 31535                           prodl	equ	0xFF3
 31536                           intcon	equ	0xFF2
 31537                           indf0	equ	0xFEF
 31538                           postinc0	equ	0xFEE
 31539                           fsr0h	equ	0xFEA
 31540                           fsr0l	equ	0xFE9
 31541                           wreg	equ	0xFE8
 31542                           indf1	equ	0xFE7
 31543                           postdec1	equ	0xFE5
 31544                           fsr1h	equ	0xFE2
 31545                           fsr1l	equ	0xFE1
 31546                           indf2	equ	0xFDF
 31547                           postinc2	equ	0xFDE
 31548                           postdec2	equ	0xFDD
 31549                           plusw2	equ	0xFDB
 31550                           fsr2h	equ	0xFDA
 31551                           fsr2l	equ	0xFD9
 31552                           status	equ	0xFD8
 31553                           
 31554 ;; *************** function i2_MXK_SwitchTo *****************
 31555 ;; Defined at:
 31556 ;;		line 105 in file "Library/MXK.c"
 31557 ;; Parameters:    Size  Location     Type
 31558 ;;  pModule         1    wreg     enum E6927
 31559 ;; Auto vars:     Size  Location     Type
 31560 ;;  pModule         1    7[COMRAM] enum E6927
 31561 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 31562 ;; Return value:  Size  Location     Type
 31563 ;;                  1    wreg      unsigned char 
 31564 ;; Registers used:
 31565 ;;		wreg, status,2, status,0, cstack
 31566 ;; Tracked objects:
 31567 ;;		On entry : 0/0
 31568 ;;		On exit  : 0/0
 31569 ;;		Unchanged: 0/0
 31570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31575 ;;Total ram usage:        2 bytes
 31576 ;; Hardware stack levels used:    1
 31577 ;; Hardware stack levels required when called:    1
 31578 ;; This function calls:
 31579 ;;		i2_delay_us
 31580 ;; This function is called by:
 31581 ;;		i2_Motor_Step
 31582 ;; This function uses a non-reentrant model
 31583 ;;
 31584                           
 31585                           	psect	text166
 31586  016770                     __ptext166:
 31587                           	opt stack 0
 31588  016770                     i2_MXK_SwitchTo:
 31589                           	opt stack 15
 31590                           
 31591                           ;incstack = 0
 31592                           ;i2MXK_SwitchTo@pModule stored from wreg
 31593  016770  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 31594                           
 31595                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 31596  016772  5086               	movf	3974,w,c	;volatile
 31597  016774  0B0F               	andlw	15
 31598  016776  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 31599                           
 31600                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 31601  016778  504A               	movf	_Bus_State,w,c
 31602  01677A  A4D8               	btfss	status,2,c
 31603  01677C  D002               	goto	i2l1730
 31604                           
 31605                           ;MXK.c: 110: return 0;
 31606  01677E  0E00               	movlw	0
 31607  016780  0012               	return	
 31608  016782                     i2l1730:
 31609                           
 31610                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 31611  016782  0E00               	movlw	0
 31612  016784  6E4A               	movwf	_Bus_State,c
 31613                           
 31614                           ;MXK.c: 114: if (CUR != pModule)
 31615  016786  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31616  016788  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 31617  01678A  B4D8               	btfsc	status,2,c
 31618  01678C  D00A               	goto	i2l1732
 31619                           
 31620                           ;MXK.c: 115: {
 31621                           ;MXK.c: 116: PORTG &= ~(0xF);
 31622  01678E  0EF0               	movlw	240
 31623  016790  1686               	andwf	3974,f,c	;volatile
 31624                           
 31625                           ;MXK.c: 117: PORTG |= pModule;
 31626  016792  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31627  016794  1286               	iorwf	3974,f,c	;volatile
 31628                           
 31629                           ;MXK.c: 120: delay_us(10);
 31630  016796  0E00               	movlw	0
 31631  016798  6E02               	movwf	i2delay_us@us+1,c
 31632  01679A  0E0A               	movlw	10
 31633  01679C  6E01               	movwf	i2delay_us@us,c
 31634  01679E  ECAA  F0B2         	call	i2_delay_us	;wreg free
 31635  0167A2                     i2l1732:
 31636                           
 31637                           ;MXK.c: 121: }
 31638                           ;MXK.c: 122: return 1;
 31639  0167A2  0E01               	movlw	1
 31640  0167A4  0012               	return	
 31641  0167A6                     __end_ofi2_MXK_SwitchTo:
 31642                           	opt stack 0
 31643                           tosu	equ	0xFFF
 31644                           tosh	equ	0xFFE
 31645                           tosl	equ	0xFFD
 31646                           pclatu	equ	0xFFB
 31647                           pclath	equ	0xFFA
 31648                           tblptru	equ	0xFF8
 31649                           tblptrh	equ	0xFF7
 31650                           tblptrl	equ	0xFF6
 31651                           tablat	equ	0xFF5
 31652                           prodh	equ	0xFF4
 31653                           prodl	equ	0xFF3
 31654                           intcon	equ	0xFF2
 31655                           indf0	equ	0xFEF
 31656                           postinc0	equ	0xFEE
 31657                           fsr0h	equ	0xFEA
 31658                           fsr0l	equ	0xFE9
 31659                           wreg	equ	0xFE8
 31660                           indf1	equ	0xFE7
 31661                           postdec1	equ	0xFE5
 31662                           fsr1h	equ	0xFE2
 31663                           fsr1l	equ	0xFE1
 31664                           indf2	equ	0xFDF
 31665                           postinc2	equ	0xFDE
 31666                           postdec2	equ	0xFDD
 31667                           plusw2	equ	0xFDB
 31668                           fsr2h	equ	0xFDA
 31669                           fsr2l	equ	0xFD9
 31670                           status	equ	0xFD8
 31671                           
 31672 ;; *************** function i2_delay_us *****************
 31673 ;; Defined at:
 31674 ;;		line 255 in file "Library/Types.c"
 31675 ;; Parameters:    Size  Location     Type
 31676 ;;  us              2    0[COMRAM] unsigned short 
 31677 ;; Auto vars:     Size  Location     Type
 31678 ;;  delay_us        4    2[COMRAM] unsigned long 
 31679 ;; Return value:  Size  Location     Type
 31680 ;;                  1    wreg      void 
 31681 ;; Registers used:
 31682 ;;		wreg, status,2, status,0
 31683 ;; Tracked objects:
 31684 ;;		On entry : 0/0
 31685 ;;		On exit  : 0/0
 31686 ;;		Unchanged: 0/0
 31687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31689 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31691 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31692 ;;Total ram usage:        6 bytes
 31693 ;; Hardware stack levels used:    1
 31694 ;; This function calls:
 31695 ;;		Nothing
 31696 ;; This function is called by:
 31697 ;;		i2_MXK_SwitchTo
 31698 ;; This function uses a non-reentrant model
 31699 ;;
 31700                           
 31701                           	psect	text167
 31702  016554                     __ptext167:
 31703                           	opt stack 0
 31704  016554                     i2_delay_us:
 31705                           	opt stack 15
 31706                           
 31707                           ;Types.c: 256: unsigned long u;
 31708                           ;Types.c: 257: while (us--) {
 31709                           
 31710                           ;incstack = 0
 31711  016554  D016               	goto	i2u643_40
 31712  016556                     i2l9276:
 31713                           
 31714                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 31715  016556  0E00               	movlw	0
 31716  016558  6E03               	movwf	i2delay_us@u,c
 31717  01655A  0E00               	movlw	0
 31718  01655C  6E04               	movwf	i2delay_us@u+1,c
 31719  01655E  0E00               	movlw	0
 31720  016560  6E05               	movwf	i2delay_us@u+2,c
 31721  016562  0E00               	movlw	0
 31722  016564  6E06               	movwf	i2delay_us@u+3,c
 31723  016566                     i2l9278:
 31724  016566  5003               	movf	i2delay_us@u,w,c
 31725  016568  1004               	iorwf	i2delay_us@u+1,w,c
 31726  01656A  1005               	iorwf	i2delay_us@u+2,w,c
 31727  01656C  1006               	iorwf	i2delay_us@u+3,w,c
 31728  01656E  A4D8               	btfss	status,2,c
 31729  016570  D008               	goto	i2u643_40
 31730  016572  F000               	nop		; ;# 
 31731  016574  0E01               	movlw	1
 31732  016576  2603               	addwf	i2delay_us@u,f,c
 31733  016578  0E00               	movlw	0
 31734  01657A  2204               	addwfc	i2delay_us@u+1,f,c
 31735  01657C  2205               	addwfc	i2delay_us@u+2,f,c
 31736  01657E  2206               	addwfc	i2delay_us@u+3,f,c
 31737  016580  D7F2               	goto	i2l9278
 31738  016582                     i2u643_40:
 31739  016582  0601               	decf	i2delay_us@us,f,c
 31740  016584  A0D8               	btfss	status,0,c
 31741  016586  0602               	decf	i2delay_us@us+1,f,c
 31742  016588  2801               	incf	i2delay_us@us,w,c
 31743  01658A  E1E5               	bnz	i2l9276
 31744  01658C  2802               	incf	i2delay_us@us+1,w,c
 31745  01658E  B4D8               	btfsc	status,2,c
 31746  016590  0012               	return	
 31747  016592  D7E1               	goto	i2l832
 31748  016594                     __end_ofi2_delay_us:
 31749                           	opt stack 0
 31750                           tosu	equ	0xFFF
 31751                           tosh	equ	0xFFE
 31752                           tosl	equ	0xFFD
 31753                           pclatu	equ	0xFFB
 31754                           pclath	equ	0xFFA
 31755                           tblptru	equ	0xFF8
 31756                           tblptrh	equ	0xFF7
 31757                           tblptrl	equ	0xFF6
 31758                           tablat	equ	0xFF5
 31759                           prodh	equ	0xFF4
 31760                           prodl	equ	0xFF3
 31761                           intcon	equ	0xFF2
 31762                           indf0	equ	0xFEF
 31763                           postinc0	equ	0xFEE
 31764                           fsr0h	equ	0xFEA
 31765                           fsr0l	equ	0xFE9
 31766                           wreg	equ	0xFE8
 31767                           indf1	equ	0xFE7
 31768                           postdec1	equ	0xFE5
 31769                           fsr1h	equ	0xFE2
 31770                           fsr1l	equ	0xFE1
 31771                           indf2	equ	0xFDF
 31772                           postinc2	equ	0xFDE
 31773                           postdec2	equ	0xFDD
 31774                           plusw2	equ	0xFDB
 31775                           fsr2h	equ	0xFDA
 31776                           fsr2l	equ	0xFD9
 31777                           status	equ	0xFD8
 31778                           
 31779 ;; *************** function i2_MXK_Release *****************
 31780 ;; Defined at:
 31781 ;;		line 130 in file "Library/MXK.c"
 31782 ;; Parameters:    Size  Location     Type
 31783 ;;		None
 31784 ;; Auto vars:     Size  Location     Type
 31785 ;;		None
 31786 ;; Return value:  Size  Location     Type
 31787 ;;                  1    wreg      unsigned char 
 31788 ;; Registers used:
 31789 ;;		wreg, status,2, status,0
 31790 ;; Tracked objects:
 31791 ;;		On entry : 0/0
 31792 ;;		On exit  : 0/0
 31793 ;;		Unchanged: 0/0
 31794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31799 ;;Total ram usage:        0 bytes
 31800 ;; Hardware stack levels used:    1
 31801 ;; This function calls:
 31802 ;;		Nothing
 31803 ;; This function is called by:
 31804 ;;		i2_Motor_Step
 31805 ;; This function uses a non-reentrant model
 31806 ;;
 31807                           
 31808                           	psect	text168
 31809  016D40                     __ptext168:
 31810                           	opt stack 0
 31811  016D40                     i2_MXK_Release:
 31812                           	opt stack 16
 31813                           
 31814                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31815                           
 31816                           ;incstack = 0
 31817  016D40  0E01               	movlw	1
 31818  016D42  6E4A               	movwf	_Bus_State,c
 31819                           
 31820                           ;MXK.c: 135: return 1;
 31821                           ;	Return value of i2_MXK_Release is never used
 31822  016D44  0012               	return	
 31823  016D46                     __end_ofi2_MXK_Release:
 31824                           	opt stack 0
 31825                           tosu	equ	0xFFF
 31826                           tosh	equ	0xFFE
 31827                           tosl	equ	0xFFD
 31828                           pclatu	equ	0xFFB
 31829                           pclath	equ	0xFFA
 31830                           tblptru	equ	0xFF8
 31831                           tblptrh	equ	0xFF7
 31832                           tblptrl	equ	0xFF6
 31833                           tablat	equ	0xFF5
 31834                           prodh	equ	0xFF4
 31835                           prodl	equ	0xFF3
 31836                           intcon	equ	0xFF2
 31837                           indf0	equ	0xFEF
 31838                           postinc0	equ	0xFEE
 31839                           fsr0h	equ	0xFEA
 31840                           fsr0l	equ	0xFE9
 31841                           wreg	equ	0xFE8
 31842                           indf1	equ	0xFE7
 31843                           postdec1	equ	0xFE5
 31844                           fsr1h	equ	0xFE2
 31845                           fsr1l	equ	0xFE1
 31846                           indf2	equ	0xFDF
 31847                           postinc2	equ	0xFDE
 31848                           postdec2	equ	0xFDD
 31849                           plusw2	equ	0xFDB
 31850                           fsr2h	equ	0xFDA
 31851                           fsr2l	equ	0xFD9
 31852                           status	equ	0xFD8
 31853                           
 31854 ;; *************** function i2_MXK_Queue *****************
 31855 ;; Defined at:
 31856 ;;		line 144 in file "Library/MXK.c"
 31857 ;; Parameters:    Size  Location     Type
 31858 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 31859 ;;		 -> Absolute function(1), Motor_Step(1), 
 31860 ;; Auto vars:     Size  Location     Type
 31861 ;;		None
 31862 ;; Return value:  Size  Location     Type
 31863 ;;                  1    wreg      void 
 31864 ;; Registers used:
 31865 ;;		wreg, status,2, status,0
 31866 ;; Tracked objects:
 31867 ;;		On entry : 0/0
 31868 ;;		On exit  : 0/0
 31869 ;;		Unchanged: 0/0
 31870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31871 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31875 ;;Total ram usage:        3 bytes
 31876 ;; Hardware stack levels used:    1
 31877 ;; This function calls:
 31878 ;;		Nothing
 31879 ;; This function is called by:
 31880 ;;		i2_Motor_Step
 31881 ;; This function uses a non-reentrant model
 31882 ;;
 31883                           
 31884                           	psect	text169
 31885  016CB8                     __ptext169:
 31886                           	opt stack 0
 31887  016CB8                     i2_MXK_Queue:
 31888                           	opt stack 16
 31889                           
 31890                           ;MXK.c: 146: lQueue = pCallback;
 31891                           
 31892                           ;incstack = 0
 31893  016CB8  C001  F0DA         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 31894  016CBC  C002  F0DB         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 31895  016CC0  C003  F0DC         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 31896  016CC4  0012               	return		;funcret
 31897  016CC6                     __end_ofi2_MXK_Queue:
 31898                           	opt stack 0
 31899                           tosu	equ	0xFFF
 31900                           tosh	equ	0xFFE
 31901                           tosl	equ	0xFFD
 31902                           pclatu	equ	0xFFB
 31903                           pclath	equ	0xFFA
 31904                           tblptru	equ	0xFF8
 31905                           tblptrh	equ	0xFF7
 31906                           tblptrl	equ	0xFF6
 31907                           tablat	equ	0xFF5
 31908                           prodh	equ	0xFF4
 31909                           prodl	equ	0xFF3
 31910                           intcon	equ	0xFF2
 31911                           indf0	equ	0xFEF
 31912                           postinc0	equ	0xFEE
 31913                           fsr0h	equ	0xFEA
 31914                           fsr0l	equ	0xFE9
 31915                           wreg	equ	0xFE8
 31916                           indf1	equ	0xFE7
 31917                           postdec1	equ	0xFE5
 31918                           fsr1h	equ	0xFE2
 31919                           fsr1l	equ	0xFE1
 31920                           indf2	equ	0xFDF
 31921                           postinc2	equ	0xFDE
 31922                           postdec2	equ	0xFDD
 31923                           plusw2	equ	0xFDB
 31924                           fsr2h	equ	0xFDA
 31925                           fsr2l	equ	0xFD9
 31926                           status	equ	0xFD8
 31927                           tosu	equ	0xFFF
 31928                           tosh	equ	0xFFE
 31929                           tosl	equ	0xFFD
 31930                           pclatu	equ	0xFFB
 31931                           pclath	equ	0xFFA
 31932                           tblptru	equ	0xFF8
 31933                           tblptrh	equ	0xFF7
 31934                           tblptrl	equ	0xFF6
 31935                           tablat	equ	0xFF5
 31936                           prodh	equ	0xFF4
 31937                           prodl	equ	0xFF3
 31938                           intcon	equ	0xFF2
 31939                           indf0	equ	0xFEF
 31940                           postinc0	equ	0xFEE
 31941                           fsr0h	equ	0xFEA
 31942                           fsr0l	equ	0xFE9
 31943                           wreg	equ	0xFE8
 31944                           indf1	equ	0xFE7
 31945                           postdec1	equ	0xFE5
 31946                           fsr1h	equ	0xFE2
 31947                           fsr1l	equ	0xFE1
 31948                           indf2	equ	0xFDF
 31949                           postinc2	equ	0xFDE
 31950                           postdec2	equ	0xFDD
 31951                           plusw2	equ	0xFDB
 31952                           fsr2h	equ	0xFDA
 31953                           fsr2l	equ	0xFD9
 31954                           status	equ	0xFD8
 31955                           
 31956                           	psect	text170
 31957  000000                     __ptext170:
 31958                           	opt stack 0
 31959                           tosu	equ	0xFFF
 31960                           tosh	equ	0xFFE
 31961                           tosl	equ	0xFFD
 31962                           pclatu	equ	0xFFB
 31963                           pclath	equ	0xFFA
 31964                           tblptru	equ	0xFF8
 31965                           tblptrh	equ	0xFF7
 31966                           tblptrl	equ	0xFF6
 31967                           tablat	equ	0xFF5
 31968                           prodh	equ	0xFF4
 31969                           prodl	equ	0xFF3
 31970                           intcon	equ	0xFF2
 31971                           indf0	equ	0xFEF
 31972                           postinc0	equ	0xFEE
 31973                           fsr0h	equ	0xFEA
 31974                           fsr0l	equ	0xFE9
 31975                           wreg	equ	0xFE8
 31976                           indf1	equ	0xFE7
 31977                           postdec1	equ	0xFE5
 31978                           fsr1h	equ	0xFE2
 31979                           fsr1l	equ	0xFE1
 31980                           indf2	equ	0xFDF
 31981                           postinc2	equ	0xFDE
 31982                           postdec2	equ	0xFDD
 31983                           plusw2	equ	0xFDB
 31984                           fsr2h	equ	0xFDA
 31985                           fsr2l	equ	0xFD9
 31986                           status	equ	0xFD8
 31987                           
 31988                           	psect	rparam
 31989  0000                     tosu	equ	0xFFF
 31990                           tosh	equ	0xFFE
 31991                           tosl	equ	0xFFD
 31992                           pclatu	equ	0xFFB
 31993                           pclath	equ	0xFFA
 31994                           tblptru	equ	0xFF8
 31995                           tblptrh	equ	0xFF7
 31996                           tblptrl	equ	0xFF6
 31997                           tablat	equ	0xFF5
 31998                           prodh	equ	0xFF4
 31999                           prodl	equ	0xFF3
 32000                           intcon	equ	0xFF2
 32001                           indf0	equ	0xFEF
 32002                           postinc0	equ	0xFEE
 32003                           fsr0h	equ	0xFEA
 32004                           fsr0l	equ	0xFE9
 32005                           wreg	equ	0xFE8
 32006                           indf1	equ	0xFE7
 32007                           postdec1	equ	0xFE5
 32008                           fsr1h	equ	0xFE2
 32009                           fsr1l	equ	0xFE1
 32010                           indf2	equ	0xFDF
 32011                           postinc2	equ	0xFDE
 32012                           postdec2	equ	0xFDD
 32013                           plusw2	equ	0xFDB
 32014                           fsr2h	equ	0xFDA
 32015                           fsr2l	equ	0xFD9
 32016                           status	equ	0xFD8
 32017                           
 32018                           	psect	temp
 32019  000050                     btemp:
 32020                           	opt stack 0
 32021  000050                     	ds	1
 32022  0000                     int$flags	set	btemp
 32023  0000                     wtemp6	set	btemp+1
 32024                           tosu	equ	0xFFF
 32025                           tosh	equ	0xFFE
 32026                           tosl	equ	0xFFD
 32027                           pclatu	equ	0xFFB
 32028                           pclath	equ	0xFFA
 32029                           tblptru	equ	0xFF8
 32030                           tblptrh	equ	0xFF7
 32031                           tblptrl	equ	0xFF6
 32032                           tablat	equ	0xFF5
 32033                           prodh	equ	0xFF4
 32034                           prodl	equ	0xFF3
 32035                           intcon	equ	0xFF2
 32036                           indf0	equ	0xFEF
 32037                           postinc0	equ	0xFEE
 32038                           fsr0h	equ	0xFEA
 32039                           fsr0l	equ	0xFE9
 32040                           wreg	equ	0xFE8
 32041                           indf1	equ	0xFE7
 32042                           postdec1	equ	0xFE5
 32043                           fsr1h	equ	0xFE2
 32044                           fsr1l	equ	0xFE1
 32045                           indf2	equ	0xFDF
 32046                           postinc2	equ	0xFDE
 32047                           postdec2	equ	0xFDD
 32048                           plusw2	equ	0xFDB
 32049                           fsr2h	equ	0xFDA
 32050                           fsr2l	equ	0xFD9
 32051                           status	equ	0xFD8


Data Sizes:
    Strings     246
    Constant    806
    Data        29
    BSS         711
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    118     157
    BANK1           256      4     256
    BANK2           256     13     123
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_16(CODE[3]), STR_15(CODE[24]), STR_14(CODE[24]), STR_13(CODE[24]), 
		 -> STR_12(CODE[26]), STR_11(CODE[20]), STR_10(CODE[31]), STR_9(CODE[22]), 
		 -> STR_8(CODE[11]), STR_7(CODE[26]), STR_6(CODE[11]), STR_5(CODE[5]), 
		 -> STR_4(CODE[4]), STR_3(CODE[12]), STR_2(CODE[32]), STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(COMRAM[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(COMRAM[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_pow
    _stepMode->_Motor_Speed
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    _eval_poly->___fladd
    ___flsub->___fladd
    _positionMode->___fltol
    ___flneg->___xxtofl
    ___fladd->___flmul
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _initialise->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _displayStepMode->_printf
    _displaySID->_printf
    _displayPositionMode->___fltol
    ___fltol->___fladd
    _displayNullMode->_printf
    _displayContinuousMode->_printf
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    ___awdiv->___wmul
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___lwmod->___lwdiv
    _continuousMode->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _Timer0_Init->___lldiv
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___xxtofl->___awdiv
    ___flmul->___xxtofl

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_pow

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1441688
                                            116 BANK0      2     2      0
                                              0 BANK1      4     4      0
                        _ADC_Voltage
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                      _HMI_SetNumber
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                            ___flmul
                            ___fltol
                     _continuousMode
              _displayContinuousMode
                    _displayNullMode
                _displayPositionMode
                         _displaySID
                    _displayStepMode
                            _getMode
                         _initialise
                           _inputVar
                           _nullMode
                       _positionMode
                                _pow
                             _printf
                           _stepMode
 ---------------------------------------------------------------------------------
 (1) _stepMode                                             0     0      0    5362
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _pow                                                 21    13      8   78196
                                            108 BANK0      8     0      8
                                              0 BANK2     13    13      0
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   24452
                                             89 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   42454
                                             97 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                8     2      6     663
                                             89 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4   11123
                                             83 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           16     8      8   11349
                                             73 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    5663
                                             73 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _positionMode                                         0     0      0   13922
                         _Motor_Move
                        _Motor_Speed
                            ___fladd
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     673
                                             28 BANK0      4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    5030
                                             53 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _nullMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inputVar                                             1     1      0   96525
                                             36 BANK0      1     1      0
                           _FunctADC
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84557
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84557
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37189
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    4094
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0 1098738
                       _Console_Init
                       _FunctInitADC
                    _FunctInitButton
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (7) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (8) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (9) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (10) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (3) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (4) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStepMode                                      0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displaySID                                           0     0      0    7363
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _displayPositionMode                                  2     2      0   19055
                                             83 BANK0      2     2      0
                            ___awdiv
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4    1401
                                             73 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1786
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _displayNullMode                                      0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayContinuousMode                                0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    7028
                                             27 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             26 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             22 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                             14 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _continuousMode                                       0     0      0    5362
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _ADC_Voltage                                         18    14      4    9449
                                             53 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1456
                                             14 BANK0     14    10      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    5153
                                             28 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Voltage
     ___fldiv
     ___flmul
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_Render
     _OutSeg
       _SPI_Send
   _HMI_SetNumber
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   ___flmul
     ___xxtofl (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _frexp (ARG)
   ___fltol
     ___fladd (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _continuousMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _displayContinuousMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayNullMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayPositionMode
     ___awdiv
       ___wmul (ARG)
     ___flge
     ___flmul
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displaySID
     _Console_SetForecolour
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayStepMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _getMode
   _initialise
     _Console_Init
     _FunctInitADC
       _ADC_Init
         _ADC_Calibrate
           _ADC_Off
           _ADC_On
         _ADC_ClockDivision
         _ADC_ConversionTime
         _ADC_SetChannel
         _ADC_SetupIO
       _ADC_Sequence
     _FunctInitButton
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _inputVar
     _FunctADC
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _nullMode
   _positionMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _pow
     ___flge
     ___flmul
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _exp
       ___fldiv
       ___flge
       ___flmul
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
       _floor
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flge
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
     _log
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___xxtofl
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
       _frexp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
             ___wmul (ARG)
   _stepMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      D      7B       9       48.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     76      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      4F       1       84.0%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     267      12        0.0%
DATA                 0      0     393       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Aug 26 14:58:05 2017

                   i2_Timer0_Stop 6D3A                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 3F6E  
                               _A 004B                                 l8 4346  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 004C                                 _i 002F  
                               _j 002E                                 _l 004E  
                               _u 002D                                 _w 004F  
                    ___fldiv@sign 006C                                l11 350C  
                              l12 34F6                                l90 3442  
                              l85 333E                                l87 33AC  
                              l89 3418                      ___awdiv@sign 006B  
              __size_of_ADC_Start 0084               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 6BB6                LCD_DrawField@pSize 0078  
         __end_of_displayNullMode 6514                LCD_DrawField@count 007E  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 6CDE  
            ADC_ClockDivision@reg 0061                               l120 5364  
                             l121 537A                               l122 5390  
                             l220 5F2A                               l117 53A6  
                             l221 5EEE                               l118 534E  
                             l230 618A                               l222 5F3A  
                             l223 5F0C                       ?_LED_Toggle 0001  
                             l234 6364                               l235 6334  
                             l227 61A6                               l403 2CA6  
                             l412 27DE                               l228 616E  
                             l340 4F70                               l404 2C46  
                             l421 2772                               l413 2674  
                             l237 634C                               l341 4F7E  
                             l405 2CD6                     ??_Console_Tab 006E  
                             l414 27FA                               l430 4650  
                             l350 5078                               l342 4F8C  
                             l510 1C62                               l406 2C5E  
                             l183 512C                               l415 269A  
                             l351 5008                               l343 4F9A  
                             l511 1D72                               l407 2C76  
                             l184 5106                               l600 095A  
                             l432 467A                               l344 4FA8  
                             l512 1C84                               l408 2C8E  
                             l417 2706                               l601 0AEE  
                             l433 46AA                               l353 5016  
                             l337 4FD2                               l345 4FB6  
                             l610 0B76                               l602 098C  
                             l354 5024                               l346 4FC4  
                             l338 4F62                               l370 4F02  
                             l611 0BC4                               l603 0B00  
                             l427 46D4                               l355 5032  
                             l363 4F2C                               l371 4F10  
                             l531 1482                       ?_HMI_GetBar 0001  
                             l612 0C12                               l604 0A3A  
                             l356 5040                               l372 4F1E  
                             l364 4EBC                               l532 14A6  
                             l516 1CCC                               l357 504E  
                             l509 1D56                               l614 0CF4  
                             l358 505C                               l366 4ECA  
                             l526 14C6                               l615 0CEC  
                             l607 0C60                               l359 506A  
                             l367 4ED8                               l519 1D14  
                             l616 0D06                               l608 0B28  
                             l368 4EE6                               l528 14E4  
                             l393 60B8                               l617 0CF0  
                             l609 0C7E                               l369 4EF4  
                             l529 1462                               l483 1AC2  
                             l732 52E8                               l476 1B9A  
                             l900 183A                               l733 52DC  
                             l389 5CE4                               l477 1A0C  
                             l397 6328                               l901 183E  
                             l726 4AD0                               l478 1BB6  
                             l486 1B2E                               l654 69B0  
                             l910 1862                               l902 1842  
                             l727 4AC4                               l479 1A56  
                             l655 69A8                               l911 1866  
                             l903 1846                               l824 5C18  
                             l832 6118                               l912 186A  
                             l904 184A                               l681 5D62  
                             l673 68EC                               l657 69AC  
                             l913 186E                               l905 184E  
                             l921 5BF8                               l914 1872  
                             l906 1852                               l922 5BC4  
                             l930 40AC                               l819 57FE  
                             l915 1876                               l907 1856  
                             l684 5D76                               l916 187A  
                             l908 185A                               l860 179A  
                             l781 663C                               l597 0968  
                             l853 1882                               l917 187E  
                             l909 185E                               l861 179E  
                             l678 5D9C                               l686 5D86  
                             l598 0950                               l870 17C2  
                             l862 17A2                               l854 1786  
                             l679 5D54                               l599 0978  
                             l871 17C6                               l863 17A6  
                             l776 6434                               l880 17EA  
                             l872 17CA                               l864 17AA  
                             l856 178A                               l928 412C  
                             l881 17EE                               l873 17CE  
                             l865 17AE                               l857 178E  
                             l929 40FC                               l890 1812  
                             l882 17F2                               l874 17D2  
                             l866 17B2                               l858 1792  
                             l891 1816                               l883 17F6  
                             l875 17D6                               l867 17B6  
                             l859 1796                               l892 181A  
                             l884 17FA                               l876 17DA  
                             l868 17BA                               l893 181E  
                             l885 17FE                               l877 17DE  
                             l869 17BE                               l990 5470  
                             l894 1822                               l886 1802  
                             l878 17E2                               l983 526C  
                             l895 1826                               l887 1806  
                             l879 17E6                               l992 5480  
                             l984 51F0                               l976 5588  
                             l896 182A                               l888 180A  
                             l985 5268                               l897 182E  
                             l889 180E                               l978 5598  
                             l898 1832                               l899 1836  
                             l997 601E                               l999 6042  
                             _PR2 000FCB           __end_of_displayStepMode 5680  
                             _dip 0127                               _exp 14E6  
                             _log 3012                               _val 00E6  
                             _pow 2094                   __end_of_ADC_Off 6D22  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 6610                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
      __end_of_ADC_ConversionTime 63BE                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 0070  
              Console_MakeField@y 0071                      Console_Tab@c 0075  
                    Console_Tab@i 0074               LCD_DrawField@pField 0072  
                    Console_Tab@t 0073        __size_of_ADC_ClockDivision 008A  
                    ___flmul@aexp 0089                      ___flmul@bexp 008E  
                      i2_delay_us 6554              Port_Set@TypeRequired 0082  
                    ___flmul@sign 0088                      ___flmul@temp 0093  
                    ___flmul@prod 008F                 Console_FormFeed@x 0062  
               Console_FormFeed@y 0063               LCD_DrawField@pPoint 0074  
                  ?_LCD_DrawField 0072             Port_SetPinType@Output 008A  
                 Port_SetPin@Type 0073                   Port_SetPin@pPin 0071  
                   ?_Byte_GetPair 0069                   __end_of_LED_Set 61B8  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 4E0C  
                    ___fltol@exp1 00B2                      _Word_SetPair 6404  
                            l1000 605E                              l1010 4744  
                            l1004 5DEE                     ?_Byte_GetZone 0060  
                            l1005 5E1C                              l1040 29CC  
                            l1200 493A                              l1009 4750  
                            l1041 29D2                              l1201 498E  
                            l1042 29D8                              l1202 49AA  
                            l1043 29DE                              l1036 2B28  
                            l1044 29E4                              l1300 5506  
                            l1204 49D4                              l1045 29EA  
                            l1037 29C6                              l1301 550A  
                            l1205 49BA                              l1062 201E  
                            l1302 5514                              l2110 287A  
                            l1063 204C                              l1047 2A90  
                            l1303 5522                              l1207 49E6  
                            l2111 2862                              l1056 1EAE  
                            l2120 29B0                              l2112 28A4  
                            l1057 2074                              l1313 639E  
                            l1153 248C                              l2121 2970  
                            l2113 2868                              l1082 4434  
                            l1058 1EB6                              l1146 5720  
                            l2042 5D12                              l2122 2976  
                            l2114 286E                              l1059 1EE0  
                            l2051 5FDE                              l2123 297C  
                            l2115 2874                              l1084 443C  
                            l2140 2D3C                              l2052 5FAE  
                            l2044 5D44                              l2116 295C  
                            l2108 2820                              l1077 4404  
                            l1158 668A                              l2054 5FBA  
                            l1254 6C4E                              l2118 2982  
                            l1079 4414                              l2063 44DE  
                            l2055 5FC6                              l2119 296A  
                            l2152 2DF6                              l2064 44EE  
                            l2056 5FD2                              l1280 569C  
                            l2153 2E54                              l2145 2D70  
                            l2065 451A                              l2154 2DFC  
                            l2146 2D1A                              l2138 2CFE  
                            l2147 2D32                              l2139 2D12  
                            l2067 452E                              l2083 3958  
                            l2075 565C                              l1283 56FE  
                            l2332 4846                              l2148 2DA0  
                            l2084 3970                              l1276 5684  
                            l2333 4854                              l2325 47D0  
                            l2069 453E                              l2077 566C  
                            l2334 4868                              l2326 47E6  
                            l1294 552A                              l1630 3A48  
                            l1295 54F0                              l1631 3AA4  
                            l2512 490A                              l2328 4810  
                            l2360 2FC2                              l1296 5554  
                            l1632 3A88                              l2600 001E  
                            l2513 491C                              l2329 4804  
                            l1297 54FA                              l2601 004C  
                            l2097 5E6E                              l1298 54FE  
                            l1730 64A6                              l2610 00E4  
                            l2602 0042                              l1299 5502  
                            l1627 3AF0                              l2508 48B0  
                            l1724 65DE                              l1732 64CE  
                            l1628 3AE6                              l2620 0204  
                            l2604 0078                              l2364 6728  
                            l2509 48A0                              l2357 2ED0  
                            l1629 3A66                              l2613 01D4  
                            l2605 008C                              l2710 0866  
                            l2358 2F1E                              l2390 3EF6  
                            l1726 660C                              l2614 01A0  
                            l2606 00BA                              l2703 080C  
                            l2359 2F70                              l1735 6B64  
                            l2623 0242                              l2615 01B4  
                            l2607 00B0                              l2712 08B6  
                            l2704 07E2                              l2720 24D8  
                            l2632 0386                              l2624 0248  
                            l2616 01BA                              l2713 08DC  
                            l2705 07F8                              l2721 24E8  
                            l2561 58A6                              l2641 03E8  
                            l2633 039C                              l2625 0252  
                            l2617 01C4                              l2609 0120  
                            l2801 3E44                              l2730 25D2  
                            l2722 2510                              l2562 589A  
                            l2650 0482                              l2634 03A8  
                            l2802 3DA0                              l2715 090A  
                            l2731 25C2                              l2571 5F6A  
                            l2395 3F36                              l2387 3E88  
                            l1827 3660                              l2651 0496  
                            l2627 0334                              l2619 0264  
                            l2716 0934                              l2724 2528  
                            l2572 5F5E                              l2396 3F26  
                            l1828 3680                              l2644 043E  
                            l2636 03BC                              l2661 0DE8  
                            l2717 092A                              l2725 2518  
                            l2565 58DC                              l2389 3F0A  
                            l2629 0354                              l2670 0F4E  
                            l2662 0E16                              l2566 58EA  
                            l2398 3F5C                              l2671 0F42  
                            l2663 0E0C                              l2735 25F8  
                            l2727 2584                              l2575 5F94  
                            l2751 150E                              l2591 20F8  
                            l2672 0F96                              l2736 264A  
                            l2728 2566                              l1784 37BA  
                            l2576 5FA2                              l2648 0472  
                            l2592 20E4                              l2665 0E6A  
                            l2657 0D8A                              l1785 37C8  
                            l1873 66C0                              l2649 047E  
                            l2753 1558                              l2682 1040  
                            l2658 0DB8                              l2762 3C7A  
                            l2754 15A2                              l2594 2120  
                            l2675 0FE6                              l2667 0E98  
                            l2659 0DAE                              l2691 04C6  
                            l1787 37D2                              l2771 4A20  
                            l2763 3C66                              l2755 15E0  
                            l2595 21D6                              l2684 1090  
                            l2676 0FBC                              l2668 0F9A  
                            l2692 04F0                              l2780 3BC0  
                            l2756 176E                              l2596 21A8  
                            l2685 10BE                              l2677 0FD2  
                            l2669 0F16                              l2693 04EA  
                            l2765 3C9C                              l2757 1736  
                            l2597 2282                              l2686 10F4  
                            l2694 0502                              l2766 3D38  
                            l2687 1104                              l2695 0520  
                            l2775 3B2A                              l2688 1108  
                            l2696 054A                              l2697 0544  
                            l2777 3B90                              l2793 3036  
                            l2698 055C                              l2699 0584  
                            l2779 3BD2                              l2795 3068  
                            ?_exp 00C1                              ?_log 00B9  
                  ??_Console_Init 0060             Port_SetPinType@pInput 0086  
                            ?_pow 00CC                              STR_1 FF94  
                            STR_2 FF09                              STR_3 FFD5  
                            STR_4 FFF8                              STR_5 FFF7  
                            STR_6 FFE1                              STR_7 FF62  
                            STR_8 FFEC                              STR_9 FFAB  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 50A8                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
                            u9030 52B2                              u9104 5EA0  
             __end_of_GetPortTRIS 4F5C                              u9105 5E9A  
                            u9050 5318                              u9114 5ED2  
                            u9115 5ECC                              u9220 54C4  
                            u9037 52A8                              u9230 54CA  
                            u9134 4B0C                              u9070 5798  
                            u9135 4B06                              u9055 5312  
                            u9144 4B3E                              u9160 63F2  
                            u9305 6C7A                              u9145 4B38  
                            u9306 6C7C                              u9250 58AC  
                            u9165 63EC                              u9510 48B6  
                            u9280 5F70                              u9370 4118  
                            u9380 5DEA                              u9390 5E14  
                            u9470 4816                              u9630 628C  
                            u9570 5C56                              u9635 6286  
                            _SPI1 0167                              u9660 36CC  
                            _SPI2 0172                              u9645 3618  
                            u9805 118A                              u9815 11AC  
                            u9920 6398                              u9744 5420  
                            u9825 132C                              u9745 541A  
                            u9690 6150                              u9835 13AA  
                            u9845 13EC                              u9855 142E  
                            _TMR0 000FD6                              u9785 115A  
                            u9954 67F4                              u9955 67EE  
                            u9795 1172                              _gISR 010C  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
                            _diff 0123              __size_of_ADC_SetupIO 0032  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 68FA  
                            _main 281C                              _mode 0129  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 406E                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0050  
                            _zero 004D                              exp@x 00C1  
                            log@x 00B9                  __end_of_ADC_Init 587C  
                   ??_Byte_SetBit 0064                              pow@x 00CC  
                            pow@y 00D0                __size_of_LCD_Reset 0050  
            __size_of_ADC_Voltage 00D8                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 0065  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
               Timer0_Init@DIVIDE 0077                   ?_SPI_DisableISR 0060  
                Motor_Move@pMotor 0063               HMI_SetButton@pValue 0066  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FEAF  
            Set_Rotation@rotation 0066            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A                       ?_ISR_Enable 0001  
                           ??_exp 00C5                             ??_log 00BD  
                           ??_pow 00D4      __size_of_Console_ClearCursor 0040  
                __end_of_LCD_Fill 6116                  __end_of_LCD_Init 348E  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 5F4A                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 248E                             l12220 4118  
                           l12400 5C56                             l12082 5466  
                           l12088 5476                             l12272 49D4  
                           l14132 558E                             l14212 2460  
                           l11654 300E                             l14126 557E  
                           l14062 33AC                             l12392 5C18  
                           l14072 3450                             l14162 440A  
                           l14090 5B18                             l12458 3660  
                           l12394 5C2A                             l14156 43FA  
                           l13612 60E6                             l14086 5B0A  
                           l14190 5718                             l13616 60F4  
                           l12496 6118                             l12498 612A  
                           l13652 2C3C                             l14390 2DA6  
                           l13760 37BA                             l14480 1736  
                           l14634 1ED6                             l14670 6658  
                __end_of_HMI_Poll 59DE                             l13952 10F4  
                           _I2C1T 003F                             _I2C2T 01C3  
                   ___fltol@sign1 00B1                   __end_of___fladd 04A8  
                           ?_main 0001                   __end_of___fldiv 112C  
                 __end_of___awdiv 4872                   __end_of___flneg 673A  
                           ?_itos 006C                             STR_10 FF29  
                           STR_11 FFC1                             STR_12 FF48  
                           STR_13 FF7C                             STR_14 FF7C  
                           STR_15 FF7C                             STR_16 FFFC  
                 __end_of___flmul 094E                   __end_of___flsub 62E6  
                 __end_of___fltol 3F6E                   _Event_DIPSwitch 689E  
                 __end_of___lldiv 492E                             u10100 016A  
                           u10110 0182                             u11000 2CDC  
                           u10120 0184                             u11010 67C8  
                           u11110 3826                             u10310 03E2  
                           u10150 01E0                             u11015 67C2  
                           u11140 3A26                             u11150 3A3A  
                           u11160 3A7A                             u10360 0450  
                           u10280 03C2                             u10530 0860  
                           u11340 103A           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 0068                             u10470 0570  
                           u11510 333C                             u11430 3C8A  
                           u10560 08CA                             u10480 0784  
                           u12240 205C                             u11370 10A4  
                           u10570 08F0                             u10650 3EA8  
                           u11380 10D2                             u12420 44CC  
                           u10820 4A52                             u10485 0778  
                           u11630 55F0                             u11550 3450  
                           u11470 3B5C                             u10655 3E9C  
                           u12408 4BCE                             u12409 4BE2  
                           u10770 25E0                             u11730 576E  
                           u10690 3F40                             u12418 4BEE  
                           u12419 4C02                             u11580 5B34  
                           u10828 4A56                             u12620 218A  
                           u11725 5730                             u12470 455A  
                           u11478 3B60                             u11680 447E  
                           u13248 65A8                             u13249 65BE  
                           u11690 448A                             u12490 5652  
                           u10970 6110                             u12378 4B64  
                           u12379 4B78                             u11860 2DE2  
                           u10948 35DC                             u12388 4B8E  
                           u12389 4BA2                             u12398 4BAE  
                           u11950 15AC                             u12399 4BC2  
                           u11880 2E60                             u10888 43B2  
                           u11960 15AE                             u10898 34A0  
                           u10899 34B4                             _INDEX 00F6  
                 __end_of___lwdiv 58F4                             _MASKS FCBF  
                 __end_of___lwmod 5FAC                             i2l430 4E24  
                           i2l432 4E4A                             i2l433 4E74  
                           i2l427 4E9A                             i2l732 5940  
                           i2l733 593A                             i2l832 6556  
                           i2l781 688C                   ___awdiv@counter 006A  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                   ?_FunctInitADC 0001                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076                   __end_of_getMode 6008  
                  __CFG_FCMEN$OFF 000000                             _PortA 0264  
                           _PortB 01AF                             _PortC 0035  
                           _PortD 01A5                             _PortE 019B  
                           _PortF 01B9                             _PortG 0191  
         __end_of_Port_SetPinType 281C                   _ADC_Initialised 0031  
                  ??_Byte_GetPair 006C                             _angle 00D6  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
           __size_of_ADC_Sequence 0046                   __end_of_dpowers FCBF  
                  ??_Byte_GetZone 0065                             _floor 3C26  
                           _ldexp 3B02                    Button_Poll@Pin 0083  
                           _frexp 49E8                             _errno 011B  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 47B4  
                __end_of_MXK_Init 331C                             _speed 00E2  
            i2Byte_GetPair@pInput 000A                             _putch 6CAA  
                           _steps 00E0                  __end_of_SPI_Init 0D6C  
                __end_of_SPI_Send 5DBA             __end_ofi2_MXK_Release 6D46  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 5C16                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                 __end_of_ADC_Start 5704  
                  ??_Byte_SetPair 006F                             pow@yi 0277  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                             status 000FD8  
                           wtemp6 0051            __size_of_ADC_Calibrate 0014  
                 _Configure_GPIOs 5B3A              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 6B2E  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00C9  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 006A  
                     ldexp@newexp 00BD               __size_of_HMI_SetBar 000A  
                 __initialization 4CB6               __size_of_HMI_Render 003E  
                     log@exponent 00BD               __end_of_Byte_GetBit 67DA  
                  _remainingSteps 0121                      __end_of_main 29C0  
                    __end_of_itos 4146              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 012B               __end_of_Byte_SetBit 5EE8  
                __end_of_FunctADC 6C6C                  __end_of_InitList FC95  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 6C7E  
                       ??_ADC_Off 0060       __size_of_Port_CheckPortType 0048  
                     HMI_Render@a 0068                            ??_main 00D4  
                ?_displayNullMode 0001                      _ADC_Sequence 644A  
                          ??_itos 0070          __size_of_FunctInitButton 00A2  
         _Console_MakeField$10974 006E                     __activetblptr 000003  
               Port_SetPin@pInput 006F                 __end_of_LCD_Reset 6208  
               Port_SetPin@pValue 0072                  ?_displayStepMode 0001  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 6AB6                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 6A5A                       _GetPortPORT 5002  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 4EB6  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 5802  
                __end_of_Port_Set 14E6                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0066               __end_of_Button_Init 43C8  
             __end_of_Button_Poll 35F4                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 53C4                         ??_SPI_DCS 0062  
                          ?_floor 00B3                            ?_ldexp 00B9  
                          ?_frexp 0060                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 6D34  
                   _HMI_SetNumber 6952            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0066  
                  _continuousMode 680C                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
           _Console_SetForecolour 6D08                  _Console_FormFeed 5454  
          Port_SetQuadType@pInput 0096                            i2l1630 3FD4  
                          i2l1631 4020                            i2l1632 400C  
                          i2l1730 6782                            i2l1627 405C  
                          i2l1732 67A2                            i2l1628 4052  
                          i2l1629 3FEA                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
                          i2l9276 6556                            i2l9278 6566  
          __end_of_LCD_Word_Write 6B4C                    _Timer0_Restart 6CC6  
             ??_MXK_InitDIPSwitch 009B                  __end_of___xxtofl 265C  
                  i2_MXK_SwitchTo 6770                   Byte_GetBit@pBit 0062  
    Console_SetForecolour@pColour 0060                        _Reset_High 6A98  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077            ADC_SetChannel@pChannel 0061  
                __end_of_delay_ms 5C80                      LED_Init@pLED 008D  
                __end_of_delay_us 6168                     ??_Timer0_Init 0071  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
                      _Timer0_ISR 68FA          __size_of_Console_NewLine 00A2  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                          _OutSeg 5704          __size_of_HMI_InitButtons 0006  
                      _Motor_Init 421E                        _Motor_Move 66C8  
                   ??_Motor_Speed 007F                            ___flge 2E82  
                      _Motor_Step 39DC                            _mDelta 011D  
         __end_of_Event_DIPSwitch 68CC                         ??___fladd 009D  
                          ___wmul 673A                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 006A  
                       ??___flneg 0080                    __CFG_STVREN$ON 000000  
                          _change 00FC                         ??___flmul 0084  
                          _lMotor 00E8                         ??___flsub 00B1  
                       ??___fltol 00AD                         ??___lldiv 0068  
                          _lQueue 00DA                        _TestButton 0187  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 1C5A  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002B  
            __end_of_Console_Init 55F6                            _locked 011F  
               GetPortTRIS@pInput 0062                __size_of_Reset_Low 001E  
                          clear_0 4D1C                            clear_1 4D2E  
                          clear_2 4D3A                            clear_3 4D46  
                          clear_4 4D52                  ___awdiv@quotient 006C  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 6CAA  
      __end_ofHMI_SetButton@F7213 FCCC                         ??_getMode 0060  
                          _printf 2CF0                  __end_of_inputVar 4C08  
       __end_of_MXK_InitDIPSwitch 6AD4                     _ADC_Calibrate 6C46  
                  HMI_SetButton@v 0067                            floor@i 00B7  
                          floor@x 00B3            HMI_SetSegments@pString 0061  
                     _Console_Tab 46F2               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0046                __size_of_Port_Init 0192  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                __end_of_nullMode 6952                         ?_ADC_Init 0064  
                 ??i2_Port_SetPin 0014                      __mediumconst FBE2  
     __end_ofTimer2_Init@PRESCALE FCCF          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
          __end_of_continuousMode 683E                  __end_of_stepMode 5E84  
           Console_MakeField@Fill 021E                  ?_Port_SetPinType 0086  
                          putch@c 007A                 Motor_Speed@pMotor 007B  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 686E  
         __end_of_Configure_GPIOs 5BAA                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 6CD2                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 67A6                      ___xxtofl@arg 0078  
                __end_ofexp@coeff FED7                      i2delay_us@us 0001  
                    ___xxtofl@exp 0077                      ___xxtofl@val 006E  
                __end_oflog@coeff FEFB                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 4D58  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                   SPI_Init@pMode 0092                        ___flneg@f1 007C  
                     _Byte_GetBit 67A6                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 6CEA                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 0068                         ?_HMI_Poll 0001  
                    eval_poly@res 00B5                     ___rparam_used 000001  
                      ___fltol@f1 00A9                       _Byte_SetBit 5E84  
                   __end_of_MASKS FCC8                    _PortA_Property FF07  
                     ?_Event_NULL 0001                         LCD_Fill@i 006B  
                       LCD_Fill@j 006C                         LCD_Init@i 0097  
                  __pcstackCOMRAM 0001                    _PortB_Property FF05  
             __size_ofi2_delay_us 0040                      __pidataBANK0 6D46  
                    __pidataBANK1 6C7E               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 6B10                   Console_Render@x 008A  
                 Console_Render@y 008B               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC95  
            __end_of_Byte_GetZone 532C                ADC_Sequence@pItemA 0060  
              ADC_Sequence@pItemB 0062                     __end_of_floor 3D4A  
                   __end_of_ldexp 3C26                     __end_of_frexp 4A9E  
                  _PortC_Property FF03               __end_of_Timer0_Init 38B4  
                   __end_of_putch 6CB8                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 3754               __end_of_Timer0_Stop 6D2E  
                  ?_ADC_Calibrate 0001                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 42F4  
    __size_of_displayPositionMode 0128                 Port_SetType@pType 009C  
                     _Button_Poll 348E              __end_of_Byte_SetByte 6C9C  
            __end_of_Byte_SetPair 6A16                    _HMI_LeftSwitch 6C16  
                  _PortD_Property FF01              __end_of_Byte_SetQuad 6A38  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 4B54               __end_of_Motor_Speed 69A6  
                  _HMI_DownSwitch 6BCE                     SPI_Send@pData 0062  
           __end_of_MXK_DIPSwitch 6BB6             _displayContinuousMode 4498  
                    ??_HMI_SetBar 0060                      ??_HMI_Render 0068  
                  _PortE_Property FEFF                        ??_ADC_Init 0067  
        __size_of_HMI_SetSegments 00BA            __end_ofi2_Word_GetPair 689E  
                 ?_continuousMode 0001                    _PortF_Property FEFD  
         Port_CheckQuadType@Pair1 0093           Port_CheckQuadType@Pair2 0094  
        MXK_BlockSwitchTo@pModule 0067                           ??_floor 00B7  
                         ??_ldexp 00BF                           ??_frexp 0066  
          ?_Console_SetForecolour 0060                 ??_FunctInitButton 00A8  
                         ?_ADC_On 0001                 _Console_Backspace 6008  
                 ?_Timer0_Restart 0001                           ??_putch 007A  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 6514  
               __end_of_ToSegment 1A04                    _PortG_Property FEFB  
                      __pbssBANK0 00D6                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 6404  
         Port_CheckQuadType@pQuad 0091                   reverse@iterator 0065  
              __size_of_eval_poly 0118                  ??_SPI_DisableISR 0062  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 6A98                         ?_FunctADC 0001  
       __size_of_Event_TestButton 003C           __size_of_Port_TogglePin 0030  
                      ??_LCD_Fill 006B                        ??_LCD_Init 0095  
             __end_of_Port_SetPin 46F2            __end_of_PortA_Property FF09  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 0060  
                      ??_LED_Init 008D          ADC_ClockDivision@pDivide 0060  
              Byte_SetByte@pValue 0062                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                _ADC_ConversionTime 6376  
                   ?_Timer0_Clear 0001                        ??_HMI_Init 00A8  
                      ??_HMI_Poll 0084                     ?_Timer2_Clear 0001  
                      _main$15221 01FC           Port_CheckPairType@Props 008D  
          __end_of_PortB_Property FF07                     ?_Timer0_Start 0060  
               __end_of_Port_Init 2CF0                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 0088                __end_of_LED_Toggle 6376  
              __end_of_HMI_GetBar 6D28              __end_of_FunctInitADC 4CB6  
        LCD_FillRectangle@pColour 0069               ??_Console_Backspace 0062  
               Set_Addr_Window@xe 0066                 Set_Addr_Window@ye 0067  
               Set_Addr_Window@xs 0068                 Set_Addr_Window@ys 0065  
                         ?_OutSeg 0063                       ?_Motor_Init 008D  
              Byte_SetPair@pInput 006B                       ?_Motor_Move 0063  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 006E  
                         ?___flge 0060                __end_of_HMI_SetBar 6CFE  
          __end_of_PortC_Property FF05                Word_GetPair@pInput 006C  
              __end_of_HMI_Render 668C                    ??_Set_Rotation 0065  
                       ?_Port_Set 006F               ?_ADC_ConversionTime 0001  
                         ?___wmul 0060                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 0065                      ??_ISR_Enable 0060  
    __size_of_Console_ResetCursor 001E              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 6C2E            __end_of_PortD_Property FF03  
                         _ADC_AN0 01DF                           _ADC_AN1 01DA  
                         _ADC_AN2 01D5                           _ADC_AN3 01D0  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 43C8                           _ADC_Off 6D1A  
               ??_Console_NewLine 0060          ADC_ClockDivision@unfound 0062  
          __end_of_HMI_DownSwitch 6BE6                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                         ?_printf 007B                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FF01  
             Console_Render@F6956 01EC                ?_Console_MakeField 0065  
                         _COUNTER 0029                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 6BFE                           _LED_Set 6168  
         _Console_IncrementCursor 5DBA                         ?___xxtofl 006E  
          __end_of_PortF_Property FEFF                       _gBackcolour 00EC  
                 ??_HMI_SetNumber 0078                         _I2C1_Done 0118  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0115  
                       _I2C1_More 0112                         _I2C2_More 010F  
                       ?_delay_ms 0060         __end_of_Console_Backspace 6064  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 6AF2                           _SSP1ADD 000FC8  
                      _displaySID 6A5A                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F              ??_ADC_ConversionTime 0060  
          __end_of_PortG_Property FEFD               ??_Console_MakeField 0067  
         __size_of_ADC_SetChannel 001C                           _SPI_DCS 68CC  
            __size_ofi2_MXK_Queue 000E                     ??_ADC_SetupIO 0060  
                ?_Configure_GPIOs 0001                   __size_of_ADC_On 0006  
                ADC_Init@pChannel 0066              i2Byte_GetZone@Offset 0008  
                   ??_ADC_Voltage 0099                        ??_FunctADC 0066  
              __end_of_ISR_Enable 6D08                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 0060  
               Event_TestButton@j 00F2                        ??_Mode_Set 0060  
                  ??_Timer2_Clear 0060                           _Font5x7 FCCF  
            i2Byte_GetZone@pChunk 0004          ADC_ConversionTime@pCount 0061  
            i2Byte_GetZone@pInput 0001                    ??_Timer0_Start 0063  
                       ?_inputVar 0001              SPI_DisableISR@pInput 0060  
                   ?_Port_GetQuad 0060                   Byte_SetBit@pBit 0062  
            Port_TogglePin@pInput 0074             __end_ofi2_Byte_SetBit 6254  
                       _ADC_Start 5680                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer0_Init 3754  
                     _Timer2_Init 35F4                           __Lparam 0000  
                     _Timer0_Stop 6D28             __size_of_Console_Init 008A  
                         OutSeg@a 0032   __end_ofPortProperty_Valid@F6830 FCB5  
                   LCD_Write@mode 0063                         ?_nullMode 0001  
                 __size_of_OutSeg 0082                        ??_Port_Set 0072  
                 __size_of___flge 0190         __end_of_Console_MakeField 4498  
               _Console_PrintChar 29C0                       _Motor_Speed 697C  
                         _Stepper 01CA                           ___fladd 0000  
                   ?_Port_SetType 009A                           _gCursor 0046  
                         ___fldiv 0D6C                           ___awdiv 47B4  
                         ___flneg 6702             ??_Console_ClearCursor 0060  
                         ___flmul 04A8                           ___flsub 629E  
                         ___fltol 3E62                           _lBuffer 027B  
                         ___lldiv 4872                   __size_of___wmul 0036  
                       ?_stepMode 0001                   ??_ADC_Calibrate 0060  
                         ___lwdiv 587C                           ___lwmod 5F4A  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 54E2  
                      _currentPos 01F8                ?_Console_PrintChar 0001  
                         __pcinit 4CB6                 __end_of_eval_poly 3E62  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                      _initialise 5CEA                           _getMode 5FAC  
                         __ptext0 281C                           __ptext1 5E20  
                         __ptext2 2094                           __ptext3 3012  
                         __ptext4 14E6                           __ptext5 3B02  
                         __ptext6 3C26                           __ptext7 49E8  
                         __ptext8 3D4A                           __ptext9 629E  
          ?_displayContinuousMode 0001                   __size_of_printf 0192  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                         _dpowers FCB5                         _T2CONbits 000FCA  
                   LED_Set@pValue 0074                      __size_of_exp 029A  
                    __size_of_log 018A               __size_of_Reset_High 001E  
           Event_DIPSwitch@pState 0079                      __size_of_pow 0200  
                      ??___xxtofl 0072                      ?_GetPortPORT 0060  
                    ?_GetPortTRIS 0060               ??_Console_PrintChar 0076  
                     _Port_GetPin 63BE                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01E8               LCD_DrawRectangle@p4 01E4  
                    ??i2_delay_us 0003                        ??_delay_ms 0062  
                      ??_delay_us 0062                           _reverse 5BAA  
                       _DIPSwitch 017D               __size_of_Timer0_ISR 002E  
                         _upState 00F1                       _Port_SetPin 462E  
                  LCD_DrawField@i 0082                         _LCD_Reset 61B8  
             __size_of_Motor_Init 00D6               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0126                         _LCD_Write 6A38  
            __size_of_MXK_Dequeue 003E                        delay_ms@ms 0060  
            end_of_initialization 4D58               ADC_SetupIO@pChannel 0062  
                         exp@sign 00CB                        delay_us@us 0060  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0079  
                    _Console_Init 556C              __size_of_MXK_Release 001C  
      __end_of_Port_CheckPairType 5CEA                           itos@Out 0074  
                  ??_Port_GetQuad 0063                _PortProperty_Valid 5786  
                      _rightState 00EE                         i2u1326_48 6912  
              Byte_SetQuad@pInput 006B                        ??_inputVar 0084  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
             __end_of_ADC_SetupIO 680C             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 0064             __size_of_Byte_GetZone 009C  
                      ?_ADC_Start 0062                 ??_HMI_RightSwitch 0066  
                         pow@sign 0276                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 2B5E               __end_of_ADC_Voltage 421E  
                      ??_nullMode 0060                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 60BE                           printf@c 0086  
                         printf@f 007B                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 0069                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 632E  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 6594  
                      ??_stepMode 007F                Button_Init@pInitIO 009F  
           Timer0_Init@pFrequency 006D                 ?_Port_SetQuadType 0096  
                     _gForecolour 00FA         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 00A8  
           Console_Render@lCursor 0086                         _MXK_Queue 6C9C  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0076  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 005C  
                 _Set_Addr_Window 4D62                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067                       ?_displaySID 0001  
                     ___fldiv@grs 0073                       ___fldiv@rem 006D  
           __end_of_LCD_DrawField 514C                    Port_Set@pInput 006F  
                  SPI_Init@pInput 0093              ??_PortProperty_Valid 0073  
               __size_of_ADC_Init 007A                    Port_Set@pValue 0071  
                      ?_LCD_Reset 0001          __size_of_displayNullMode 0042  
            __end_of_Set_Rotation 53C4                        ?_LCD_Write 0063  
                    _Byte_GetPair 6AF2                HMI_SetButton@F7213 FCC8  
                    _Byte_GetZone 5290                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
        __size_of_displayStepMode 008A                    __end_of_ADC_On 6D3A  
                  _Port_TogglePin 683E                  _Event_TestButton 668C  
           __size_of_FunctInitADC 00AE                       ___flmul@grs 008A  
             _displayPositionMode 38B4              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                   ?_positionMode 0001                      _Byte_SetByte 6C8E  
                    _Byte_SetPair 69F4                   ADC_SetupIO@MASK 0063  
                    _Byte_SetQuad 6A16           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 4A9E              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0058  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 6D40                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0074  
                   ?i2_Motor_Step 0001        __size_of_Console_MakeField 00D0  
                  __end_of_OutSeg 5786                    __end_of___flge 3012  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 6770  
           __end_of_HMI_DIPSwitch 6BCE                     __pidataCOMRAM 6CEA  
                     ?_initialise 0001                      ?_Button_Init 009B  
            ?_displayPositionMode 0001                   _FunctInitButton 514C  
                    ?_Button_Poll 007B                         _Bus_State 004A  
                ??_continuousMode 007F               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 6CDE  
               __size_of_MXK_Init 0180                        floor@expon 00BB  
            __end_of_Timer2_Clear 6D1A                    __end_of_printf 2E82  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 0068  
                   ?_Word_GetPair 006C                  ??_Timer0_Restart 0060  
            __end_of_Timer0_Start 69F4           ??_Console_SetForecolour 0062  
              Port_SetType@Output 009F               start_initialization 4CB6  
                      ?_MXK_Queue 0060                        eval_poly@d 00AD  
                      eval_poly@n 00AF                        eval_poly@x 00A9  
                    _FunctInitADC 4C08                        ldexp@value 00B9  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 5AC6                Port_SetType@pInput 009A  
                  _ADC_SetChannel 6B68                       __end_of_exp 1780  
                     __end_of_log 319C                       __end_of_pow 2294  
                      HMI_Init@in 00A8               HMI_SetNumber@pInput 0076  
           __end_ofi2_Port_SetPin 4EB6                __end_of_Event_NULL 1406  
          __end_of_Port_TogglePin 686E                     ?_Word_SetPair 006F  
               Byte_SetBit@pInput 0060                          ??_ADC_On 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 6B10  
     PortProperty_Valid@pPinDrive 0071                       _ADC_SetupIO 67DA  
            MXK_BlockSwitchTo@CUR 0066          PortProperty_Valid@pInput 006F  
                   i2_MXK_Release 6D40                       _ADC_Voltage 4146  
                      frexp@value 0060                    ??_positionMode 00B3  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1780               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 51EE  
               __size_of_FunctADC 0012                    ??_SPI_MinSpeed 0071  
                     ??_ADC_Start 0064                      _HMI_UpSwitch 6BE6  
                       _Reset_Low 6A7A                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 6D2E                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 019E                    ADC_Init@pInput 0064  
                       _gCharSize 01F4                  Timer2_Init@INDEX 00F4  
                       OutSeg@cur 0034                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 0091                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 0210  
                    ??_Motor_Move 0067                      ??_Motor_Step 0074  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                        ??___wmul 0064               __size_of_displaySID 0020  
            ?_Console_ResetCursor 0001                         _Port_Init 2B5E  
                     __pdataBANK0 00FA                       __pdataBANK1 01EC  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 0063  
           ??_displayPositionMode 00B3                          ?_ADC_Off 0001  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 0060  
              Byte_SetZone@pValue 0065                     Mode_Set@pMode 0060  
                        ??_printf 007F           __end_of_Set_Addr_Window 4E0C  
        Port_CheckQuadType@Output 0095                         _gLineSize 01F0  
        Port_CheckQuadType@pDrive 0092                         ___fladd@a 0099  
                       ___fladd@b 0095                    ??_Word_GetPair 006F  
        Port_CheckQuadType@pInput 008F              __end_of_Port_GetQuad 629E  
                       ___fldiv@a 0064                         ___fldiv@b 0060  
       __end_of_LCD_FillRectangle 5B3A                       __pbssBIGRAM 027B  
          __end_of_ADC_SetChannel 6B84                          ?_LED_Set 0074  
                       ___flmul@a 0080                         ___flmul@b 007C  
                     __pbssCOMRAM 0029                         ___flsub@a 00AD  
                       ___flsub@b 00A9                   ADC_Start@pInput 0062  
              __end_of_Reset_High 6AB6                     __pcstackBANK0 0060  
                   __pcstackBANK1 01FC                     __pcstackBANK2 026E  
                      itos@Length 0072                    ??_Word_SetPair 0073  
               __size_of___xxtofl 01CE                __end_of_Timer0_ISR 6928  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 0079  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 1E84  
                        ?_SPI_DCS 0060                   ?_Port_TogglePin 0074  
                     ??_LCD_Write 0064                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 42F4  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 6702  
              __end_of_Motor_Step 3B02             Timer2_Init@pFrequency 006D  
                  ?i2_MXK_Release 0001                         _exp$15224 00C5  
             __size_of_initialise 0068          Port_CheckPairType@Output 008C  
               ??_displayNullMode 0087                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 0089          Port_CheckPairType@pInput 0086  
                  reverse@tempVar 0064                _MXK_InitTestButton 6AD4  
                      ?_Reset_Low 0001                      ?_Timer0_Init 006D  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 006D  
                ??_HMI_LeftSwitch 0066                 ??_displayStepMode 0087  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 00DD           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 51EE  
               __size_of_inputVar 00B4                  ??_HMI_DownSwitch 0066  
                       __pintcode 1408                     __pmediumconst FBE2  
                    ?_Motor_Speed 007B             ??_Console_ResetCursor 0060  
                        ?___fladd 0095                          ?___fldiv 0060  
                        ?___awdiv 0066                         __ptext100 644A  
                       __ptext101 5802                         __ptext110 5FAC  
                       __ptext102 67DA                          ?___flneg 007C  
                       __ptext111 55F6                         __ptext103 6B68  
                       __ptext120 6CAA                         __ptext112 6A5A  
                       __ptext104 6376                         __ptext121 29C0  
                       __ptext113 6D08                         __ptext105 54E2  
                       __ptext130 5F4A                         __ptext122 46F2  
                       __ptext114 38B4                         __ptext106 6C46  
                       __ptext131 587C                         __ptext123 47B4  
                       __ptext115 3E62                         __ptext107 6D34  
                       __ptext140 5704                         __ptext132 680C  
                       __ptext124 5DBA                         __ptext116 2E82  
                       __ptext108 6D1A                         __ptext141 1E84  
                       __ptext133 697C                         __ptext125 51EE  
                       __ptext117 64D2                         __ptext109 556C  
                       __ptext150 43C8                         __ptext142 5AC6  
                       __ptext134 3754                         __ptext126 5454  
                       __ptext118 4498                         __ptext151 67A6  
                       __ptext143 50A8                         __ptext135 4872  
                       __ptext127 6B10                         __ptext119 2CF0  
                       __ptext160 6CDE                         __ptext152 4146  
                       __ptext144 673A                         __ptext136 6CD2  
                       __ptext128 6008                         __ptext161 4E0C  
                       __ptext153 248E                         __ptext145 4D62  
                       __ptext137 66C8                         __ptext129 6514  
                       __ptext170 0000                         __ptext162 686E  
                       __ptext154 04A8                         __ptext146 6B2E  
                       __ptext138 69CE                         __ptext163 6B84  
                       __ptext155 0D6C                         __ptext147 6A38  
                       __ptext139 664E                         __ptext164 58F4  
                       __ptext148 5D52                         __ptext165 6208  
                       __ptext157 68FA                         __ptext149 6C6C  
                       __ptext166 6770                         __ptext158 3F6E  
                       _pShiftVal 00E4                         __ptext167 6554  
                       __ptext159 6D3A                         __ptext168 6D40  
                       __ptext169 6CB8                          ?___flmul 007C  
                        ?___flsub 00A9                          ?___fltol 00A9  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
            Timer0_Init@pCPUClock 0073           ??_displayContinuousMode 0087  
                        ?___lwdiv 0060                          ?___lwmod 0067  
             ?_MXK_InitTestButton 0001                 __size_of_nullMode 002A  
                       _direction 01FA                 ?_Console_FormFeed 0001  
               _GetPortProperties 4F5C                 __size_of_stepMode 0064  
                        ?_getMode 0001                     ?_ADC_Sequence 0060  
                       _pow$15222 026E                         _pow$15223 0272  
     __end_ofTimer0_Init@PRESCALE FCA5                ??_Console_FormFeed 0060  
                 _HMI_SetSegments 492E                ?_GetPortProperties 0060  
                Event_NULL@pState 0001          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                   ?_ADC_SetChannel 0001  
                   ??i2_MXK_Queue 0004                         _leftState 00EF  
                       _eval_poly 3D4A                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                          _ADC_Init 5802  
                       _downState 00F0             __end_of_HMI_SetButton 5454  
            __size_of_Console_Tab 00C2                          ?_reverse 0060  
                    ?_Port_SetPin 006F             __end_of_HMI_SetNumber 697C  
                ___lwdiv@quotient 0065                   _HMI_RightSwitch 6BFE  
     __size_of_ADC_ConversionTime 0048                    __size_of_floor 0124  
                  __size_of_ldexp 0124                    __size_of_frexp 00B6  
             ??_GetPortProperties 0062           __end_of_Console_NewLine 5290  
            ??_MXK_InitTestButton 008D                Byte_GetPair@pInput 0069  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 6D34  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 6B84                          _LCD_Fill 60BE  
                        _LCD_Init 331C                    ___wmul@product 0064  
                        _HMIBoard 012D                    i2_Byte_GetZone 58F4  
                        _LED_Init 5EE8                         delay_ms@u 0062  
              Button_Poll@pButton 007B                         delay_us@u 0062  
                        _HMI_Init 2294                          _HMI_Poll 596A  
              MXK_Queue@pCallback 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 6554  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 006D                          _PIR1bits 000F9E  
                        i2u506_40 5916                          i2u506_47 590C  
                        i2u508_40 595E                          i2u508_45 595A  
                        _PIR3bits 000FA4                          i2u640_44 6242  
                        i2u640_45 623E                          i2u643_40 6582  
                        i2u639_44 621C                          i2u639_45 6218  
                        i2u770_40 3FFE                          i2u768_40 3FB2  
                        i2u769_40 3FC6              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 0060  
               Button_Init@pInput 009B           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 008A  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 5002                          _SSP2STAT 000F6D  
                    _Set_Rotation 532C             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 64D2                _Port_CheckPairType 5C80  
                        _MXK_Init 319C             __size_of_Timer0_Start 0026  
                  ??_ADC_Sequence 0064                   MXK_SwitchTo@CUR 0066  
           __end_of_ADC_Calibrate 6C5A                          _SPI_Init 094E  
        __end_of_Event_TestButton 66C8                          _SPI_Send 5D52  
                      _ADCON0bits 000FC2                  __size_of_ADC_Off 0008  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 0065  
               ___wmul@multiplier 0060              __end_of_positionMode 462E  
               Byte_GetBit@Output 0064                        printf@flag 0080  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0074  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 5A52  
                      printf@prec 0081             Motor_Speed@pFrequency 007D  
               Byte_GetBit@pInput 0060               Port_SetPinType@pPin 0088  
            __size_of_Button_Poll 0166                        ?_eval_poly 00A9  
              _Port_CheckQuadType 6064                     _MXK_DIPSwitch 6B9E  
             ?_Port_CheckPairType 0086              __end_of_SPI_MinSpeed 5AC6  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 62E6  
           Button_Poll@pIncrement 007D                      ??_displaySID 0087  
         PortProperty_Valid@F6830 FCA5              __end_ofi2_Motor_Step 406E  
                 ??i2_MXK_Release 0001                         copy_data0 4CCA  
                       copy_data1 4D08                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 6B9E         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 002E               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 596A               __end_ofi2_MXK_Queue 6CC6  
             ?_Port_CheckPortType 0096                          _FunctADC 6C5A  
                 itos@destination 006E                          _InitList FBE3  
            _Motor_Step$intlevel0 39E2                          _Mode_Set 6C6C  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
                    _Timer0_Clear 6CD2                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 6D12              __end_of_Word_GetPair 664E  
                        _lCBuffer 0200              ??_Port_CheckPairType 008A  
                      _ADCVoltage 0100                       ??_Reset_Low 0074  
                        __Hrparam 0000                      _Timer0_Start 69CE  
                    OutSeg@pInput 0066                    _Console_Render 1E84  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 112C                      OutSeg@segset 0033  
                       rand@screw 0030              __end_of_Word_SetPair 644A  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 49E8  
            ??_Port_CheckQuadType 0093                  __size_of___fladd 04A8  
              __end_of_displaySID 6A7A                  __size_of___fldiv 03C0  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___flneg 0038                  __size_of___flmul 04A6  
                __size_of___flsub 0048                  __size_of___fltol 010C  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 65D2  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0062                      ??_initialise 00AA  
                        _lBufferX 00F8                          _lBufferY 00F7  
             Timer2_Init@PRESCALE FCCC                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00EA                  __size_of_getMode 005C  
         __end_of_HMI_RightSwitch 6C16            Byte_GetZone@pChunkSize 0064  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 0064  
           __size_of_Port_SetType 022A                     reverse@length 0062  
                       itos@input 006C             i2MXK_SwitchTo@pModule 0008  
                        ___xxtofl 248E                Motor_Init@pAddress 008F  
                        _delay_ms 5C16                          _delay_us 6116  
                        _clearall 00F9                   ___lwdiv@divisor 0062  
  __size_of_Console_SetForecolour 000A                   ___lwdiv@counter 0064  
   __end_of_Console_SetForecolour 6D12                   Port_GetPin@pPin 0062  
                        __ptext10 4564                          __ptext11 6702  
                        __ptext20 6BE6                          __ptext12 0000  
                        __ptext21 6BFE                          __ptext13 6928  
                        __ptext30 5BAA                          __ptext22 6C16  
                        __ptext14 4B54                          __ptext31 492E  
                        __ptext23 6C2E                          __ptext15 596A  
                        __ptext40 319C                          __ptext32 1780  
                        __ptext24 6254                          __ptext16 348E  
                        __ptext41 2B5E                          __ptext33 53C4  
                        __ptext25 689E                          __ptext17 6B9E  
                        __ptext50 6168                          __ptext42 1C5A  
                        __ptext34 6CF4                          __ptext26 1404  
                        __ptext18 6BB6                          __ptext51 6594  
                        __ptext43 62E6                          __ptext35 6D22  
                        __ptext27 668C                          __ptext19 6BCE  
                        __ptext60 331C                          __ptext52 39DC  
                        __ptext44 112C                          __ptext36 6C5A  
                        __ptext28 6952                          __ptext61 532C  
                        __ptext53 6D28                          __ptext45 6C8E  
                        __ptext37 5680                          __ptext29 406E  
                        __ptext70 683E                          __ptext62 60BE  
                        __ptext54 6CC6                          __ptext46 4EB6  
                        __ptext38 5CEA                          __ptext71 462E  
                        __ptext63 5B3A                          __ptext55 6490  
                        __ptext47 4F5C                          __ptext39 421E  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 68CC  
                        __ptext72 63BE                          __ptext64 59DE  
                        __ptext56 6B4C                          __ptext48 5002  
                        __ptext81 514C                          __ptext73 6CFE  
                        __ptext65 61B8                          __ptext57 6C9C  
                        __ptext49 5EE8                          __ptext90 69F4  
                        __ptext82 42F4                          __ptext74 2294  
                        __ptext66 5C16                          __ptext58 65D2  
                        __ptext91 6064                          __ptext83 6AB6  
                        __ptext75 5A52                          __ptext67 6A7A  
                        __ptext59 6116                          __ptext92 5C80  
                        __ptext84 6D2E                          __ptext76 094E  
                        __ptext68 6A98                          __ptext93 5786  
                        __ptext85 6AD4                          __ptext77 35F4  
                        __ptext69 632E                          __ptext94 6610  
                        __ptext86 265C                          __ptext78 6D12  
                        __ptext95 6AF2                          __ptext87 5E84  
                        __ptext79 69A6                          __ptext96 5290  
                        __ptext88 1A04                          __ptext97 6A16  
                        __ptext89 6404                          __ptext98 4A9E  
                        __ptext99 4C08                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
               _ADC_ClockDivision 54E2                      ?_ADC_SetupIO 0001  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 0079                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
              ?_ADC_ClockDivision 0001                      ?_ADC_Voltage 0095  
             __end_of_MXK_Dequeue 65D2                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_main 01A4  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 006B  
          __end_of_Console_Render 2094                __end_of_initialise 5D52  
                        _inputVar 4B54               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 6254  
             __end_of_MXK_Release 6B68                    _MXK_TestButton 6C2E  
                   i2_Byte_SetBit 6208               ??_ADC_ClockDivision 0060  
             i2Word_GetPair@pPair 000F                          _nullMode 6928  
                  ADC_Voltage@max 009B                    ADC_Voltage@ref 009F  
       __end_of_MXK_BlockSwitchTo 6610          ?_Console_IncrementCursor 0001  
            __size_of_Timer0_Init 0160              __size_of_Timer2_Init 0160  
                        int$flags 0050              __size_of_Timer0_Stop 0006  
                    _Port_SetType 1C5A                      Port_Set@Type 0086  
                        _stepMode 5E20        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 0095  
                       printf@val 0084                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0108  
                  Timer0_Init@PRE 00F5                      _SSP2STATbits 000F6D  
                        exp@coeff FEAF                        _LED_Toggle 632E  
                        log@coeff FED7                        _HMI_GetBar 6D22  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00B1                        _HMI_SetBar 6CF4  
                      _HMI_Render 664E                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 6CB8         __end_of_ADC_ClockDivision 556C  
                  Timer2_Init@DIV 0104                    Timer2_Init@PRE 00F3  
                 _displayNullMode 64D2                  Byte_SetZone@pMax 0062  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 00A5                          itos@Data 0070  
                 _displayStepMode 55F6                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                      reverse@input 0060  
            __end_of_ADC_Sequence 6490            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 0067                  ___lldiv@dividend 0060  
          __end_of_MXK_TestButton 6C46                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042       __end_of_displayPositionMode 39DC  
                  _SPI_DisableISR 69A6   displayPositionMode@angleDegrees 00B3  
                 Port_Init@pInput 00A0                          printf@ap 0082  
           __size_of_positionMode 00CA            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 6CFE                  ?_HMI_SetSegments 0061  
         Console_MakeField@Column 006C                        _IRDistance 0125  
           __size_of_SPI_MaxSpeed 0074                  ??_ADC_SetChannel 0060  
                   SPI_DCS@pInput 0060    __size_of_displayContinuousMode 00CC  
           __size_of_SPI_MinSpeed 0074     __end_of_displayContinuousMode 4564  
                 ??_MXK_DIPSwitch 0066             __size_ofi2_Motor_Step 0100  
               ADC_Voltage@pInput 0095           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0069  
                   ??_GetPortTRIS 0062             Timer0_Start@pFunction 0060  
              Word_SetPair@pInput 006F                   ___lwmod@counter 006B  
              Word_SetPair@pValue 0072                  Motor_Init@pMotor 008D  
                     _MXK_Dequeue 6594                 ADC_Voltage@output 00A3  
                  LED_Toggle@pLED 0078                     ___fladd@signs 00A5  
                   _LCD_DrawField 50A8                  _Port_SetQuadType 1A04  
         __size_of_continuousMode 0032                       _MXK_Release 6B4C  
       __size_of_Console_FormFeed 008E                      _MXK_SwitchTo 6490  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                 _Port_SetPinType 265C                      ___fladd@aexp 00A6  
                    ___fladd@bexp 00A7           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068                Byte_GetZone@pChunk 0063  
                    _positionMode 4564                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 6B2E                Byte_GetZone@pInput 0060  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 5E20  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 69CE  
                    _SPI_MaxSpeed 59DE                      _SPI_MinSpeed 5A52  
              Port_Set@TypeActual 0084  
