

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Aug 06 17:57:44 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   160                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   161  0000                     
   162                           	psect	idataCOMRAM
   163  014852                     __pidataCOMRAM:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _gCursor
   167  014852  0006               	dw	6
   168  014854  0006               	dw	6
   169                           
   170                           ;initializer for _A
   171  014856  41                 	db	65
   172                           
   173                           ;initializer for _Bus_State
   174  014857  01                 	db	1
   175                           
   176                           ;initializer for _a
   177  014858  61                 	db	97
   178                           
   179                           ;initializer for _l
   180  014859  80                 	db	128
   181                           
   182                           ;initializer for _w
   183  01485A  80                 	db	128
   184                           
   185                           ;initializer for _zero
   186  01485B  30                 	db	48
   187                           
   188                           	psect	idataBANK0
   189  014880                     __pidataBANK0:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _gCharSize
   193  014880  0005               	dw	5
   194  014882  0007               	dw	7
   195                           
   196                           ;initializer for _gForecolour
   197  014884  FFFF               	dw	65535
   198                           
   199                           ;initializer for _change
   200  014886  01                 	db	1
   201                           
   202                           	psect	idataBANK1
   203  014870                     __pidataBANK1:
   204                           	opt stack 0
   205                           
   206                           ;initializer for Console_Render@F7900
   207  014870  0006               	dw	6
   208  014872  0006               	dw	6
   209                           
   210                           ;initializer for _gLineSize
   211  014874  0080               	dw	128
   212  014876  0007               	dw	7
   213                           
   214                           	psect	mediumconst
   215  00FCC0                     __pmediumconst:
   216                           	opt stack 0
   217  00FCC0  00                 	db	0
   218  00FCC1                     _InitList:
   219                           	opt stack 0
   220  00FCC1  1100               	dw	4352
   221  00FCC3  0080               	dw	128
   222  00FCC5  012C               	dw	300
   223  00FCC7  B100               	dw	45312
   224  00FCC9  0002               	dw	2
   225  00FCCB  0035               	dw	53
   226  00FCCD  0036               	dw	54
   227  00FCCF  B200               	dw	45568
   228  00FCD1  0002               	dw	2
   229  00FCD3  0035               	dw	53
   230  00FCD5  0036               	dw	54
   231  00FCD7  B300               	dw	45824
   232  00FCD9  0002               	dw	2
   233  00FCDB  0035               	dw	53
   234  00FCDD  0036               	dw	54
   235  00FCDF  0002               	dw	2
   236  00FCE1  0035               	dw	53
   237  00FCE3  0036               	dw	54
   238  00FCE5  B400               	dw	46080
   239  00FCE7  0000               	dw	0
   240  00FCE9  C000               	dw	49152
   241  00FCEB  00A2               	dw	162
   242  00FCED  0002               	dw	2
   243  00FCEF  0084               	dw	132
   244  00FCF1  C100               	dw	49408
   245  00FCF3  00C5               	dw	197
   246  00FCF5  C200               	dw	49664
   247  00FCF7  000D               	dw	13
   248  00FCF9  0000               	dw	0
   249  00FCFB  C300               	dw	49920
   250  00FCFD  008D               	dw	141
   251  00FCFF  002A               	dw	42
   252  00FD01  C400               	dw	50176
   253  00FD03  008D               	dw	141
   254  00FD05  00EE               	dw	238
   255  00FD07  C500               	dw	50432
   256  00FD09  000A               	dw	10
   257  00FD0B  3600               	dw	13824
   258  00FD0D  00C8               	dw	200
   259  00FD0F  E000               	dw	57344
   260  00FD11  0012               	dw	18
   261  00FD13  001C               	dw	28
   262  00FD15  0010               	dw	16
   263  00FD17  0018               	dw	24
   264  00FD19  0033               	dw	51
   265  00FD1B  002C               	dw	44
   266  00FD1D  0025               	dw	37
   267  00FD1F  0028               	dw	40
   268  00FD21  0028               	dw	40
   269  00FD23  0027               	dw	39
   270  00FD25  002F               	dw	47
   271  00FD27  003C               	dw	60
   272  00FD29  0000               	dw	0
   273  00FD2B  0003               	dw	3
   274  00FD2D  0003               	dw	3
   275  00FD2F  0010               	dw	16
   276  00FD31  0080               	dw	128
   277  00FD33  0078               	dw	120
   278  00FD35  E100               	dw	57600
   279  00FD37  0012               	dw	18
   280  00FD39  001C               	dw	28
   281  00FD3B  0010               	dw	16
   282  00FD3D  0018               	dw	24
   283  00FD3F  002D               	dw	45
   284  00FD41  0028               	dw	40
   285  00FD43  0023               	dw	35
   286  00FD45  0028               	dw	40
   287  00FD47  0028               	dw	40
   288  00FD49  0026               	dw	38
   289  00FD4B  002F               	dw	47
   290  00FD4D  003B               	dw	59
   291  00FD4F  0000               	dw	0
   292  00FD51  0003               	dw	3
   293  00FD53  0003               	dw	3
   294  00FD55  0010               	dw	16
   295  00FD57  3A00               	dw	14848
   296  00FD59  0005               	dw	5
   297  00FD5B  2A00               	dw	10752
   298  00FD5D  0000               	dw	0
   299  00FD5F  0002               	dw	2
   300  00FD61  0000               	dw	0
   301  00FD63  0081               	dw	129
   302  00FD65  2B00               	dw	11008
   303  00FD67  0000               	dw	0
   304  00FD69  0003               	dw	3
   305  00FD6B  0000               	dw	0
   306  00FD6D  00A2               	dw	162
   307  00FD6F  2900               	dw	10496
   308  00FD71  2C00               	dw	11264
   309  00FD73                     __end_of_InitList:
   310                           	opt stack 0
   311  00FD73                     PortProperty_Valid@F7774:
   312                           	opt stack 0
   313  00FD73  00                 	db	0
   314  00FD74  01                 	db	1
   315  00FD75  02                 	db	2
   316  00FD76  00                 	db	0
   317  00FD77  01                 	db	1
   318  00FD78  00                 	db	0
   319  00FD79  01                 	db	1
   320  00FD7A  00                 	db	0
   321  00FD7B  02                 	db	2
   322  00FD7C  02                 	db	2
   323  00FD7D  00                 	db	0
   324  00FD7E  00                 	db	0
   325  00FD7F  03                 	db	3
   326  00FD80  03                 	db	3
   327  00FD81  03                 	db	3
   328  00FD82  00                 	db	0
   329  00FD83                     __end_ofPortProperty_Valid@F7774:
   330                           	opt stack 0
   331  00FD83                     Timer0_Init@PRESCALE:
   332                           	opt stack 0
   333  00FD83  0002               	dw	2
   334  00FD85  0004               	dw	4
   335  00FD87  0008               	dw	8
   336  00FD89  0010               	dw	16
   337  00FD8B  0020               	dw	32
   338  00FD8D  0040               	dw	64
   339  00FD8F  0080               	dw	128
   340  00FD91  0100               	dw	256
   341  00FD93                     __end_ofTimer0_Init@PRESCALE:
   342                           	opt stack 0
   343  00FD93                     _dpowers:
   344                           	opt stack 0
   345  00FD93  0001               	dw	1
   346  00FD95  000A               	dw	10
   347  00FD97  0064               	dw	100
   348  00FD99  03E8               	dw	1000
   349  00FD9B  2710               	dw	10000
   350  00FD9D                     __end_of_dpowers:
   351                           	opt stack 0
   352  00FD9D                     _MASKS:
   353                           	opt stack 0
   354  00FD9D  00                 	db	0
   355  00FD9E  01                 	db	1
   356  00FD9F  03                 	db	3
   357  00FDA0  07                 	db	7
   358  00FDA1  0F                 	db	15
   359  00FDA2  1F                 	db	31
   360  00FDA3  3F                 	db	63
   361  00FDA4  7F                 	db	127
   362  00FDA5  FF                 	db	255
   363  00FDA6                     __end_of_MASKS:
   364                           	opt stack 0
   365  00FDA6                     HMI_SetButton@F8155:
   366                           	opt stack 0
   367  00FDA6  00                 	db	0
   368  00FDA7  02                 	db	2
   369  00FDA8  01                 	db	1
   370  00FDA9  03                 	db	3
   371  00FDAA                     __end_ofHMI_SetButton@F8155:
   372                           	opt stack 0
   373  00FDAA                     Timer2_Init@PRESCALE:
   374                           	opt stack 0
   375  00FDAA  01                 	db	1
   376  00FDAB  04                 	db	4
   377  00FDAC  10                 	db	16
   378  00FDAD                     __end_ofTimer2_Init@PRESCALE:
   379                           	opt stack 0
   380  00FDAD                     _Font5x7:
   381                           	opt stack 0
   382  00FDAD  00                 	db	0
   383  00FDAE  00                 	db	0
   384  00FDAF  00                 	db	0
   385  00FDB0  00                 	db	0
   386  00FDB1  00                 	db	0
   387  00FDB2  00                 	db	0
   388  00FDB3  00                 	db	0
   389  00FDB4  5F                 	db	95
   390  00FDB5  00                 	db	0
   391  00FDB6  00                 	db	0
   392  00FDB7  00                 	db	0
   393  00FDB8  07                 	db	7
   394  00FDB9  00                 	db	0
   395  00FDBA  07                 	db	7
   396  00FDBB  00                 	db	0
   397  00FDBC  14                 	db	20
   398  00FDBD  7F                 	db	127
   399  00FDBE  14                 	db	20
   400  00FDBF  7F                 	db	127
   401  00FDC0  14                 	db	20
   402  00FDC1  24                 	db	36
   403  00FDC2  2A                 	db	42
   404  00FDC3  7F                 	db	127
   405  00FDC4  2A                 	db	42
   406  00FDC5  12                 	db	18
   407  00FDC6  23                 	db	35
   408  00FDC7  13                 	db	19
   409  00FDC8  08                 	db	8
   410  00FDC9  64                 	db	100
   411  00FDCA  62                 	db	98
   412  00FDCB  36                 	db	54
   413  00FDCC  49                 	db	73
   414  00FDCD  55                 	db	85
   415  00FDCE  22                 	db	34
   416  00FDCF  50                 	db	80
   417  00FDD0  00                 	db	0
   418  00FDD1  05                 	db	5
   419  00FDD2  03                 	db	3
   420  00FDD3  00                 	db	0
   421  00FDD4  00                 	db	0
   422  00FDD5  00                 	db	0
   423  00FDD6  1C                 	db	28
   424  00FDD7  22                 	db	34
   425  00FDD8  41                 	db	65
   426  00FDD9  00                 	db	0
   427  00FDDA  00                 	db	0
   428  00FDDB  41                 	db	65
   429  00FDDC  22                 	db	34
   430  00FDDD  1C                 	db	28
   431  00FDDE  00                 	db	0
   432  00FDDF  08                 	db	8
   433  00FDE0  2A                 	db	42
   434  00FDE1  1C                 	db	28
   435  00FDE2  2A                 	db	42
   436  00FDE3  08                 	db	8
   437  00FDE4  08                 	db	8
   438  00FDE5  08                 	db	8
   439  00FDE6  3E                 	db	62
   440  00FDE7  08                 	db	8
   441  00FDE8  08                 	db	8
   442  00FDE9  00                 	db	0
   443  00FDEA  50                 	db	80
   444  00FDEB  30                 	db	48
   445  00FDEC  00                 	db	0
   446  00FDED  00                 	db	0
   447  00FDEE  08                 	db	8
   448  00FDEF  08                 	db	8
   449  00FDF0  08                 	db	8
   450  00FDF1  08                 	db	8
   451  00FDF2  08                 	db	8
   452  00FDF3  00                 	db	0
   453  00FDF4  60                 	db	96
   454  00FDF5  60                 	db	96
   455  00FDF6  00                 	db	0
   456  00FDF7  00                 	db	0
   457  00FDF8  20                 	db	32
   458  00FDF9  10                 	db	16
   459  00FDFA  08                 	db	8
   460  00FDFB  04                 	db	4
   461  00FDFC  02                 	db	2
   462  00FDFD  3E                 	db	62
   463  00FDFE  51                 	db	81
   464  00FDFF  49                 	db	73
   465  00FE00  45                 	db	69
   466  00FE01  3E                 	db	62
   467  00FE02  00                 	db	0
   468  00FE03  42                 	db	66
   469  00FE04  7F                 	db	127
   470  00FE05  40                 	db	64
   471  00FE06  00                 	db	0
   472  00FE07  42                 	db	66
   473  00FE08  61                 	db	97
   474  00FE09  51                 	db	81
   475  00FE0A  49                 	db	73
   476  00FE0B  46                 	db	70
   477  00FE0C  21                 	db	33
   478  00FE0D  41                 	db	65
   479  00FE0E  45                 	db	69
   480  00FE0F  4B                 	db	75
   481  00FE10  31                 	db	49
   482  00FE11  18                 	db	24
   483  00FE12  14                 	db	20
   484  00FE13  12                 	db	18
   485  00FE14  7F                 	db	127
   486  00FE15  10                 	db	16
   487  00FE16  27                 	db	39
   488  00FE17  45                 	db	69
   489  00FE18  45                 	db	69
   490  00FE19  45                 	db	69
   491  00FE1A  39                 	db	57
   492  00FE1B  3C                 	db	60
   493  00FE1C  4A                 	db	74
   494  00FE1D  49                 	db	73
   495  00FE1E  49                 	db	73
   496  00FE1F  30                 	db	48
   497  00FE20  01                 	db	1
   498  00FE21  71                 	db	113
   499  00FE22  09                 	db	9
   500  00FE23  05                 	db	5
   501  00FE24  03                 	db	3
   502  00FE25  36                 	db	54
   503  00FE26  49                 	db	73
   504  00FE27  49                 	db	73
   505  00FE28  49                 	db	73
   506  00FE29  36                 	db	54
   507  00FE2A  06                 	db	6
   508  00FE2B  49                 	db	73
   509  00FE2C  49                 	db	73
   510  00FE2D  29                 	db	41
   511  00FE2E  1E                 	db	30
   512  00FE2F  00                 	db	0
   513  00FE30  36                 	db	54
   514  00FE31  36                 	db	54
   515  00FE32  00                 	db	0
   516  00FE33  00                 	db	0
   517  00FE34  00                 	db	0
   518  00FE35  56                 	db	86
   519  00FE36  36                 	db	54
   520  00FE37  00                 	db	0
   521  00FE38  00                 	db	0
   522  00FE39  00                 	db	0
   523  00FE3A  08                 	db	8
   524  00FE3B  14                 	db	20
   525  00FE3C  22                 	db	34
   526  00FE3D  41                 	db	65
   527  00FE3E  14                 	db	20
   528  00FE3F  14                 	db	20
   529  00FE40  14                 	db	20
   530  00FE41  14                 	db	20
   531  00FE42  14                 	db	20
   532  00FE43  41                 	db	65
   533  00FE44  22                 	db	34
   534  00FE45  14                 	db	20
   535  00FE46  08                 	db	8
   536  00FE47  00                 	db	0
   537  00FE48  02                 	db	2
   538  00FE49  01                 	db	1
   539  00FE4A  51                 	db	81
   540  00FE4B  09                 	db	9
   541  00FE4C  06                 	db	6
   542  00FE4D  32                 	db	50
   543  00FE4E  49                 	db	73
   544  00FE4F  79                 	db	121
   545  00FE50  41                 	db	65
   546  00FE51  3E                 	db	62
   547  00FE52  7E                 	db	126
   548  00FE53  11                 	db	17
   549  00FE54  11                 	db	17
   550  00FE55  11                 	db	17
   551  00FE56  7E                 	db	126
   552  00FE57  7F                 	db	127
   553  00FE58  49                 	db	73
   554  00FE59  49                 	db	73
   555  00FE5A  49                 	db	73
   556  00FE5B  36                 	db	54
   557  00FE5C  3E                 	db	62
   558  00FE5D  41                 	db	65
   559  00FE5E  41                 	db	65
   560  00FE5F  41                 	db	65
   561  00FE60  22                 	db	34
   562  00FE61  7F                 	db	127
   563  00FE62  41                 	db	65
   564  00FE63  41                 	db	65
   565  00FE64  22                 	db	34
   566  00FE65  1C                 	db	28
   567  00FE66  7F                 	db	127
   568  00FE67  49                 	db	73
   569  00FE68  49                 	db	73
   570  00FE69  49                 	db	73
   571  00FE6A  41                 	db	65
   572  00FE6B  7F                 	db	127
   573  00FE6C  09                 	db	9
   574  00FE6D  09                 	db	9
   575  00FE6E  01                 	db	1
   576  00FE6F  01                 	db	1
   577  00FE70  3E                 	db	62
   578  00FE71  41                 	db	65
   579  00FE72  41                 	db	65
   580  00FE73  51                 	db	81
   581  00FE74  32                 	db	50
   582  00FE75  7F                 	db	127
   583  00FE76  08                 	db	8
   584  00FE77  08                 	db	8
   585  00FE78  08                 	db	8
   586  00FE79  7F                 	db	127
   587  00FE7A  00                 	db	0
   588  00FE7B  41                 	db	65
   589  00FE7C  7F                 	db	127
   590  00FE7D  41                 	db	65
   591  00FE7E  00                 	db	0
   592  00FE7F  20                 	db	32
   593  00FE80  40                 	db	64
   594  00FE81  41                 	db	65
   595  00FE82  3F                 	db	63
   596  00FE83  01                 	db	1
   597  00FE84  7F                 	db	127
   598  00FE85  08                 	db	8
   599  00FE86  14                 	db	20
   600  00FE87  22                 	db	34
   601  00FE88  41                 	db	65
   602  00FE89  7F                 	db	127
   603  00FE8A  40                 	db	64
   604  00FE8B  40                 	db	64
   605  00FE8C  40                 	db	64
   606  00FE8D  40                 	db	64
   607  00FE8E  7F                 	db	127
   608  00FE8F  02                 	db	2
   609  00FE90  04                 	db	4
   610  00FE91  02                 	db	2
   611  00FE92  7F                 	db	127
   612  00FE93  7F                 	db	127
   613  00FE94  04                 	db	4
   614  00FE95  08                 	db	8
   615  00FE96  10                 	db	16
   616  00FE97  7F                 	db	127
   617  00FE98  3E                 	db	62
   618  00FE99  41                 	db	65
   619  00FE9A  41                 	db	65
   620  00FE9B  41                 	db	65
   621  00FE9C  3E                 	db	62
   622  00FE9D  7F                 	db	127
   623  00FE9E  09                 	db	9
   624  00FE9F  09                 	db	9
   625  00FEA0  09                 	db	9
   626  00FEA1  06                 	db	6
   627  00FEA2  3E                 	db	62
   628  00FEA3  41                 	db	65
   629  00FEA4  51                 	db	81
   630  00FEA5  21                 	db	33
   631  00FEA6  5E                 	db	94
   632  00FEA7  7F                 	db	127
   633  00FEA8  09                 	db	9
   634  00FEA9  19                 	db	25
   635  00FEAA  29                 	db	41
   636  00FEAB  46                 	db	70
   637  00FEAC  46                 	db	70
   638  00FEAD  49                 	db	73
   639  00FEAE  49                 	db	73
   640  00FEAF  49                 	db	73
   641  00FEB0  31                 	db	49
   642  00FEB1  01                 	db	1
   643  00FEB2  01                 	db	1
   644  00FEB3  7F                 	db	127
   645  00FEB4  01                 	db	1
   646  00FEB5  01                 	db	1
   647  00FEB6  3F                 	db	63
   648  00FEB7  40                 	db	64
   649  00FEB8  40                 	db	64
   650  00FEB9  40                 	db	64
   651  00FEBA  3F                 	db	63
   652  00FEBB  1F                 	db	31
   653  00FEBC  20                 	db	32
   654  00FEBD  40                 	db	64
   655  00FEBE  20                 	db	32
   656  00FEBF  1F                 	db	31
   657  00FEC0  7F                 	db	127
   658  00FEC1  20                 	db	32
   659  00FEC2  18                 	db	24
   660  00FEC3  20                 	db	32
   661  00FEC4  7F                 	db	127
   662  00FEC5  63                 	db	99
   663  00FEC6  14                 	db	20
   664  00FEC7  08                 	db	8
   665  00FEC8  14                 	db	20
   666  00FEC9  63                 	db	99
   667  00FECA  03                 	db	3
   668  00FECB  04                 	db	4
   669  00FECC  78                 	db	120
   670  00FECD  04                 	db	4
   671  00FECE  03                 	db	3
   672  00FECF  61                 	db	97
   673  00FED0  51                 	db	81
   674  00FED1  49                 	db	73
   675  00FED2  45                 	db	69
   676  00FED3  43                 	db	67
   677  00FED4  00                 	db	0
   678  00FED5  00                 	db	0
   679  00FED6  7F                 	db	127
   680  00FED7  41                 	db	65
   681  00FED8  41                 	db	65
   682  00FED9  02                 	db	2
   683  00FEDA  04                 	db	4
   684  00FEDB  08                 	db	8
   685  00FEDC  10                 	db	16
   686  00FEDD  20                 	db	32
   687  00FEDE  41                 	db	65
   688  00FEDF  41                 	db	65
   689  00FEE0  7F                 	db	127
   690  00FEE1  00                 	db	0
   691  00FEE2  00                 	db	0
   692  00FEE3  04                 	db	4
   693  00FEE4  02                 	db	2
   694  00FEE5  01                 	db	1
   695  00FEE6  02                 	db	2
   696  00FEE7  04                 	db	4
   697  00FEE8  40                 	db	64
   698  00FEE9  40                 	db	64
   699  00FEEA  40                 	db	64
   700  00FEEB  40                 	db	64
   701  00FEEC  40                 	db	64
   702  00FEED  00                 	db	0
   703  00FEEE  01                 	db	1
   704  00FEEF  02                 	db	2
   705  00FEF0  04                 	db	4
   706  00FEF1  00                 	db	0
   707  00FEF2  20                 	db	32
   708  00FEF3  54                 	db	84
   709  00FEF4  54                 	db	84
   710  00FEF5  54                 	db	84
   711  00FEF6  78                 	db	120
   712  00FEF7  7F                 	db	127
   713  00FEF8  48                 	db	72
   714  00FEF9  44                 	db	68
   715  00FEFA  44                 	db	68
   716  00FEFB  38                 	db	56
   717  00FEFC  38                 	db	56
   718  00FEFD  44                 	db	68
   719  00FEFE  44                 	db	68
   720  00FEFF  44                 	db	68
   721  00FF00  20                 	db	32
   722  00FF01  38                 	db	56
   723  00FF02  44                 	db	68
   724  00FF03  44                 	db	68
   725  00FF04  48                 	db	72
   726  00FF05  7F                 	db	127
   727  00FF06  38                 	db	56
   728  00FF07  54                 	db	84
   729  00FF08  54                 	db	84
   730  00FF09  54                 	db	84
   731  00FF0A  18                 	db	24
   732  00FF0B  08                 	db	8
   733  00FF0C  7E                 	db	126
   734  00FF0D  09                 	db	9
   735  00FF0E  01                 	db	1
   736  00FF0F  02                 	db	2
   737  00FF10  08                 	db	8
   738  00FF11  14                 	db	20
   739  00FF12  54                 	db	84
   740  00FF13  54                 	db	84
   741  00FF14  3C                 	db	60
   742  00FF15  7F                 	db	127
   743  00FF16  08                 	db	8
   744  00FF17  04                 	db	4
   745  00FF18  04                 	db	4
   746  00FF19  78                 	db	120
   747  00FF1A  00                 	db	0
   748  00FF1B  44                 	db	68
   749  00FF1C  7D                 	db	125
   750  00FF1D  40                 	db	64
   751  00FF1E  00                 	db	0
   752  00FF1F  20                 	db	32
   753  00FF20  40                 	db	64
   754  00FF21  44                 	db	68
   755  00FF22  3D                 	db	61
   756  00FF23  00                 	db	0
   757  00FF24  00                 	db	0
   758  00FF25  7F                 	db	127
   759  00FF26  10                 	db	16
   760  00FF27  28                 	db	40
   761  00FF28  44                 	db	68
   762  00FF29  00                 	db	0
   763  00FF2A  41                 	db	65
   764  00FF2B  7F                 	db	127
   765  00FF2C  40                 	db	64
   766  00FF2D  00                 	db	0
   767  00FF2E  7C                 	db	124
   768  00FF2F  04                 	db	4
   769  00FF30  18                 	db	24
   770  00FF31  04                 	db	4
   771  00FF32  78                 	db	120
   772  00FF33  7C                 	db	124
   773  00FF34  08                 	db	8
   774  00FF35  04                 	db	4
   775  00FF36  04                 	db	4
   776  00FF37  78                 	db	120
   777  00FF38  38                 	db	56
   778  00FF39  44                 	db	68
   779  00FF3A  44                 	db	68
   780  00FF3B  44                 	db	68
   781  00FF3C  38                 	db	56
   782  00FF3D  7C                 	db	124
   783  00FF3E  14                 	db	20
   784  00FF3F  14                 	db	20
   785  00FF40  14                 	db	20
   786  00FF41  08                 	db	8
   787  00FF42  08                 	db	8
   788  00FF43  14                 	db	20
   789  00FF44  14                 	db	20
   790  00FF45  18                 	db	24
   791  00FF46  7C                 	db	124
   792  00FF47  7C                 	db	124
   793  00FF48  08                 	db	8
   794  00FF49  04                 	db	4
   795  00FF4A  04                 	db	4
   796  00FF4B  08                 	db	8
   797  00FF4C  48                 	db	72
   798  00FF4D  54                 	db	84
   799  00FF4E  54                 	db	84
   800  00FF4F  54                 	db	84
   801  00FF50  20                 	db	32
   802  00FF51  04                 	db	4
   803  00FF52  3F                 	db	63
   804  00FF53  44                 	db	68
   805  00FF54  40                 	db	64
   806  00FF55  20                 	db	32
   807  00FF56  3C                 	db	60
   808  00FF57  40                 	db	64
   809  00FF58  40                 	db	64
   810  00FF59  20                 	db	32
   811  00FF5A  7C                 	db	124
   812  00FF5B  1C                 	db	28
   813  00FF5C  20                 	db	32
   814  00FF5D  40                 	db	64
   815  00FF5E  20                 	db	32
   816  00FF5F  1C                 	db	28
   817  00FF60  3C                 	db	60
   818  00FF61  40                 	db	64
   819  00FF62  30                 	db	48
   820  00FF63  40                 	db	64
   821  00FF64  3C                 	db	60
   822  00FF65  44                 	db	68
   823  00FF66  28                 	db	40
   824  00FF67  10                 	db	16
   825  00FF68  28                 	db	40
   826  00FF69  44                 	db	68
   827  00FF6A  0C                 	db	12
   828  00FF6B  50                 	db	80
   829  00FF6C  50                 	db	80
   830  00FF6D  50                 	db	80
   831  00FF6E  3C                 	db	60
   832  00FF6F  44                 	db	68
   833  00FF70  64                 	db	100
   834  00FF71  54                 	db	84
   835  00FF72  4C                 	db	76
   836  00FF73  44                 	db	68
   837  00FF74  00                 	db	0
   838  00FF75  08                 	db	8
   839  00FF76  36                 	db	54
   840  00FF77  41                 	db	65
   841  00FF78  00                 	db	0
   842  00FF79  00                 	db	0
   843  00FF7A  00                 	db	0
   844  00FF7B  7F                 	db	127
   845  00FF7C  00                 	db	0
   846  00FF7D  00                 	db	0
   847  00FF7E  00                 	db	0
   848  00FF7F  41                 	db	65
   849  00FF80  36                 	db	54
   850  00FF81  08                 	db	8
   851  00FF82  00                 	db	0
   852  00FF83  08                 	db	8
   853  00FF84  08                 	db	8
   854  00FF85  2A                 	db	42
   855  00FF86  1C                 	db	28
   856  00FF87  08                 	db	8
   857  00FF88  08                 	db	8
   858  00FF89  1C                 	db	28
   859  00FF8A  2A                 	db	42
   860  00FF8B  08                 	db	8
   861  00FF8C  08                 	db	8
   862  00FF8D                     __end_of_Font5x7:
   863                           	opt stack 0
   864  00FF8D                     _PortA_Property:
   865                           	opt stack 0
   866  00FF8D  00FF               	dw	255
   867  00FF8F                     __end_of_PortA_Property:
   868                           	opt stack 0
   869  00FF8F                     _PortB_Property:
   870                           	opt stack 0
   871  00FF8F  FF00               	dw	65280
   872  00FF91                     __end_of_PortB_Property:
   873                           	opt stack 0
   874  00FF91                     _PortC_Property:
   875                           	opt stack 0
   876  00FF91  FFF0               	dw	65520
   877  00FF93                     __end_of_PortC_Property:
   878                           	opt stack 0
   879  00FF93                     _PortD_Property:
   880                           	opt stack 0
   881  00FF93  FFFF               	dw	65535
   882  00FF95                     __end_of_PortD_Property:
   883                           	opt stack 0
   884  00FF95                     _PortE_Property:
   885                           	opt stack 0
   886  00FF95  0000               	dw	0
   887  00FF97                     __end_of_PortE_Property:
   888                           	opt stack 0
   889  00FF97                     _PortF_Property:
   890                           	opt stack 0
   891  00FF97  0FFF               	dw	4095
   892  00FF99                     __end_of_PortF_Property:
   893                           	opt stack 0
   894  00FF99                     _PortG_Property:
   895                           	opt stack 0
   896  00FF99  FC00               	dw	64512
   897  00FF9B                     __end_of_PortG_Property:
   898                           	opt stack 0
   899  0000                     _TMR0	set	4054
   900  0000                     _ADCON0bits	set	4034
   901  0000                     _ADCON1bits	set	4033
   902  0000                     _ADRESH	set	4036
   903  0000                     _ADRESL	set	4035
   904  0000                     _ANCON0	set	4033
   905  0000                     _INTCONbits	set	4082
   906  0000                     _IPR1bits	set	3999
   907  0000                     _IPR3bits	set	4005
   908  0000                     _OSCTUNEbits	set	3995
   909  0000                     _PIE1bits	set	3997
   910  0000                     _PIE3bits	set	4003
   911  0000                     _PIR1	set	3998
   912  0000                     _PIR1bits	set	3998
   913  0000                     _PIR2	set	4001
   914  0000                     _PIR3	set	4004
   915  0000                     _PIR3bits	set	4004
   916  0000                     _PORTFbits	set	3973
   917  0000                     _PR2	set	4043
   918  0000                     _RCONbits	set	4048
   919  0000                     _SSP1ADD	set	4040
   920  0000                     _SSP1CON1bits	set	4038
   921  0000                     _SSP1CON2bits	set	4037
   922  0000                     _SSP1STATbits	set	4039
   923  0000                     _SSP2CON1bits	set	3948
   924  0000                     _SSP2CON2bits	set	3947
   925  0000                     _SSP2STATbits	set	3949
   926  0000                     _T0CONbits	set	4053
   927  0000                     _T2CONbits	set	4042
   928  0000                     _LATA	set	3977
   929  0000                     _LATB	set	3978
   930  0000                     _LATC	set	3979
   931  0000                     _LATD	set	3980
   932  0000                     _LATE	set	3981
   933  0000                     _LATF	set	3982
   934  0000                     _LATG	set	3983
   935  0000                     _PORTA	set	3968
   936  0000                     _PORTB	set	3969
   937  0000                     _PORTC	set	3970
   938  0000                     _PORTD	set	3971
   939  0000                     _PORTE	set	3972
   940  0000                     _PORTF	set	3973
   941  0000                     _PORTG	set	3974
   942  0000                     _SSP1BUF	set	4041
   943  0000                     _SSP1CON1	set	4038
   944  0000                     _SSP1CON2	set	4037
   945  0000                     _SSP1STAT	set	4039
   946  0000                     _SSP2BUF	set	3951
   947  0000                     _SSP2CON1	set	3948
   948  0000                     _SSP2CON2	set	3947
   949  0000                     _SSP2STAT	set	3949
   950  0000                     _TRISA	set	3986
   951  0000                     _TRISB	set	3987
   952  0000                     _TRISC	set	3988
   953  0000                     _TRISD	set	3989
   954  0000                     _TRISE	set	3990
   955  0000                     _TRISF	set	3991
   956  0000                     _TRISG	set	3992
   957  00FF9B                     STR_6:
   958  00FF9B  0A                 	db	10
   959  00FF9C  55                 	db	85	;'U'
   960  00FF9D  70                 	db	112	;'p'
   961  00FF9E  3A                 	db	58	;':'
   962  00FF9F  25                 	db	37
   963  00FFA0  75                 	db	117	;'u'
   964  00FFA1  20                 	db	32
   965  00FFA2  09                 	db	9
   966  00FFA3  20                 	db	32
   967  00FFA4  44                 	db	68	;'D'
   968  00FFA5  6F                 	db	111	;'o'
   969  00FFA6  77                 	db	119	;'w'
   970  00FFA7  6E                 	db	110	;'n'
   971  00FFA8  3A                 	db	58	;':'
   972  00FFA9  25                 	db	37
   973  00FFAA  75                 	db	117	;'u'
   974  00FFAB  0A                 	db	10
   975  00FFAC  4C                 	db	76	;'L'
   976  00FFAD  65                 	db	101	;'e'
   977  00FFAE  66                 	db	102	;'f'
   978  00FFAF  74                 	db	116	;'t'
   979  00FFB0  3A                 	db	58	;':'
   980  00FFB1  25                 	db	37
   981  00FFB2  75                 	db	117	;'u'
   982  00FFB3  20                 	db	32
   983  00FFB4  09                 	db	9
   984  00FFB5  20                 	db	32
   985  00FFB6  52                 	db	82	;'R'
   986  00FFB7  69                 	db	105	;'i'
   987  00FFB8  67                 	db	103	;'g'
   988  00FFB9  68                 	db	104	;'h'
   989  00FFBA  74                 	db	116	;'t'
   990  00FFBB  3A                 	db	58	;':'
   991  00FFBC  25                 	db	37
   992  00FFBD  75                 	db	117	;'u'
   993  00FFBE  0A                 	db	10
   994  00FFBF  00                 	db	0
   995  00FFC0                     STR_5:
   996  00FFC0  53                 	db	83	;'S'
   997  00FFC1  74                 	db	116	;'t'
   998  00FFC2  65                 	db	101	;'e'
   999  00FFC3  70                 	db	112	;'p'
  1000  00FFC4  70                 	db	112	;'p'
  1001  00FFC5  65                 	db	101	;'e'
  1002  00FFC6  72                 	db	114	;'r'
  1003  00FFC7  20                 	db	32
  1004  00FFC8  64                 	db	100	;'d'
  1005  00FFC9  65                 	db	101	;'e'
  1006  00FFCA  6C                 	db	108	;'l'
  1007  00FFCB  74                 	db	116	;'t'
  1008  00FFCC  61                 	db	97	;'a'
  1009  00FFCD  3A                 	db	58	;':'
  1010  00FFCE  20                 	db	32
  1011  00FFCF  25                 	db	37
  1012  00FFD0  64                 	db	100	;'d'
  1013  00FFD1  0A                 	db	10
  1014  00FFD2  00                 	db	0
  1015  00FFD3                     STR_3:
  1016  00FFD3  4D                 	db	77	;'M'
  1017  00FFD4  65                 	db	101	;'e'
  1018  00FFD5  63                 	db	99	;'c'
  1019  00FFD6  68                 	db	104	;'h'
  1020  00FFD7  61                 	db	97	;'a'
  1021  00FFD8  74                 	db	116	;'t'
  1022  00FFD9  72                 	db	114	;'r'
  1023  00FFDA  6F                 	db	111	;'o'
  1024  00FFDB  6E                 	db	110	;'n'
  1025  00FFDC  69                 	db	105	;'i'
  1026  00FFDD  63                 	db	99	;'c'
  1027  00FFDE  73                 	db	115	;'s'
  1028  00FFDF  20                 	db	32
  1029  00FFE0  32                 	db	50	;'2'
  1030  00FFE1  0A                 	db	10
  1031  00FFE2  0A                 	db	10
  1032  00FFE3  00                 	db	0
  1033  00FFE4                     STR_4:
  1034  00FFE4  4C                 	db	76	;'L'
  1035  00FFE5  6F                 	db	111	;'o'
  1036  00FFE6  6F                 	db	111	;'o'
  1037  00FFE7  70                 	db	112	;'p'
  1038  00FFE8  20                 	db	32
  1039  00FFE9  69                 	db	105	;'i'
  1040  00FFEA  6E                 	db	110	;'n'
  1041  00FFEB  64                 	db	100	;'d'
  1042  00FFEC  65                 	db	101	;'e'
  1043  00FFED  78                 	db	120	;'x'
  1044  00FFEE  3A                 	db	58	;':'
  1045  00FFEF  20                 	db	32
  1046  00FFF0  25                 	db	37
  1047  00FFF1  64                 	db	100	;'d'
  1048  00FFF2  0A                 	db	10
  1049  00FFF3  00                 	db	0
  1050  00FFF4                     STR_1:
  1051  00FFF4  69                 	db	105	;'i'
  1052  00FFF5  72                 	db	114	;'r'
  1053  00FFF6  6F                 	db	111	;'o'
  1054  00FFF7  62                 	db	98	;'b'
  1055  00FFF8  6F                 	db	111	;'o'
  1056  00FFF9  74                 	db	116	;'t'
  1057  00FFFA  00                 	db	0
  1058  00FFFB                     STR_2:
  1059  00FFFB  25                 	db	37
  1060  00FFFC  63                 	db	99	;'c'
  1061  00FFFD  00                 	db	0
  1062                           
  1063                           ; #config settings
  1064  00FFFE  00                 	db	0	; dummy byte at the end
  1065  0000                     
  1066                           	psect	cinit
  1067  012D08                     __pcinit:
  1068                           	opt stack 0
  1069  012D08                     start_initialization:
  1070                           	opt stack 0
  1071  012D08                     __initialization:
  1072                           	opt stack 0
  1073                           
  1074                           ; Initialize objects allocated to BANK1 (8 bytes)
  1075                           ; load TBLPTR registers with __pidataBANK1
  1076  012D08  0E70               	movlw	low __pidataBANK1
  1077  012D0A  6EF6               	movwf	tblptrl,c
  1078  012D0C  0E48               	movlw	high __pidataBANK1
  1079  012D0E  6EF7               	movwf	tblptrh,c
  1080  012D10  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1081  012D12  6EF8               	movwf	tblptru,c
  1082  012D14  EE01  F0D3         	lfsr	0,__pdataBANK1
  1083  012D18  EE10 F008          	lfsr	1,8
  1084  012D1C                     copy_data0:
  1085  012D1C  0009               	tblrd		*+
  1086  012D1E  CFF5 FFEE          	movff	tablat,postinc0
  1087  012D22  50E5               	movf	postdec1,w,c
  1088  012D24  50E1               	movf	fsr1l,w,c
  1089  012D26  E1FA               	bnz	copy_data0
  1090                           
  1091                           ; Initialize objects allocated to BANK0 (7 bytes)
  1092                           ; load TBLPTR registers with __pidataBANK0
  1093  012D28  0E80               	movlw	low __pidataBANK0
  1094  012D2A  6EF6               	movwf	tblptrl,c
  1095  012D2C  0E48               	movlw	high __pidataBANK0
  1096  012D2E  6EF7               	movwf	tblptrh,c
  1097  012D30  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1098  012D32  6EF8               	movwf	tblptru,c
  1099  012D34  EE00  F0F9         	lfsr	0,__pdataBANK0
  1100  012D38  EE10 F007          	lfsr	1,7
  1101  012D3C                     copy_data1:
  1102  012D3C  0009               	tblrd		*+
  1103  012D3E  CFF5 FFEE          	movff	tablat,postinc0
  1104  012D42  50E5               	movf	postdec1,w,c
  1105  012D44  50E1               	movf	fsr1l,w,c
  1106  012D46  E1FA               	bnz	copy_data1
  1107                           
  1108                           ; Initialize objects allocated to COMRAM (10 bytes)
  1109                           ; load TBLPTR registers with __pidataCOMRAM
  1110  012D48  0E52               	movlw	low __pidataCOMRAM
  1111  012D4A  6EF6               	movwf	tblptrl,c
  1112  012D4C  0E48               	movlw	high __pidataCOMRAM
  1113  012D4E  6EF7               	movwf	tblptrh,c
  1114  012D50  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1115  012D52  6EF8               	movwf	tblptru,c
  1116  012D54  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1117  012D58  EE10 F00A          	lfsr	1,10
  1118  012D5C                     copy_data2:
  1119  012D5C  0009               	tblrd		*+
  1120  012D5E  CFF5 FFEE          	movff	tablat,postinc0
  1121  012D62  50E5               	movf	postdec1,w,c
  1122  012D64  50E1               	movf	fsr1l,w,c
  1123  012D66  E1FA               	bnz	copy_data2
  1124                           
  1125                           ; Clear objects allocated to BIGRAM (300 bytes)
  1126  012D68  EE02  F046         	lfsr	0,__pbssBIGRAM
  1127  012D6C  EE11 F02C          	lfsr	1,300
  1128  012D70                     clear_0:
  1129  012D70  6AEE               	clrf	postinc0,c
  1130  012D72  50E5               	movf	postdec1,w,c
  1131  012D74  50E1               	movf	fsr1l,w,c
  1132  012D76  E1FC               	bnz	clear_0
  1133  012D78  50E2               	movf	fsr1h,w,c
  1134  012D7A  E1FA               	bnz	clear_0
  1135                           
  1136                           ; Clear objects allocated to BANK2 (70 bytes)
  1137  012D7C  EE02  F000         	lfsr	0,__pbssBANK2
  1138  012D80  0E46               	movlw	70
  1139  012D82                     clear_1:
  1140  012D82  6AEE               	clrf	postinc0,c
  1141  012D84  06E8               	decf	wreg,f,c
  1142  012D86  E1FD               	bnz	clear_1
  1143                           
  1144                           ; Clear objects allocated to BANK1 (187 bytes)
  1145  012D88  EE01  F000         	lfsr	0,__pbssBANK1
  1146  012D8C  0EBB               	movlw	187
  1147  012D8E                     clear_2:
  1148  012D8E  6AEE               	clrf	postinc0,c
  1149  012D90  06E8               	decf	wreg,f,c
  1150  012D92  E1FD               	bnz	clear_2
  1151                           
  1152                           ; Clear objects allocated to BANK0 (90 bytes)
  1153  012D94  EE00  F060         	lfsr	0,__pbssBANK0
  1154  012D98  0E5A               	movlw	90
  1155  012D9A                     clear_3:
  1156  012D9A  6AEE               	clrf	postinc0,c
  1157  012D9C  06E8               	decf	wreg,f,c
  1158  012D9E  E1FD               	bnz	clear_3
  1159                           
  1160                           ; Clear objects allocated to COMRAM (26 bytes)
  1161  012DA0  EE00  F025         	lfsr	0,__pbssCOMRAM
  1162  012DA4  0E1A               	movlw	26
  1163  012DA6                     clear_4:
  1164  012DA6  6AEE               	clrf	postinc0,c
  1165  012DA8  06E8               	decf	wreg,f,c
  1166  012DAA  E1FD               	bnz	clear_4
  1167  012DAC                     end_of_initialization:
  1168                           	opt stack 0
  1169  012DAC                     __end_of__initialization:
  1170                           	opt stack 0
  1171  012DAC  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1172  012DAE  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1173  012DB0  0100               	movlb	0
  1174  012DB2  EF2E  F085         	goto	_main	;jump to C main() function
  1175                           tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           postdec1	equ	0xFE5
  1182                           fsr1h	equ	0xFE2
  1183                           fsr1l	equ	0xFE1
  1184                           
  1185                           	psect	bssCOMRAM
  1186  000025                     __pbssCOMRAM:
  1187                           	opt stack 0
  1188  000025                     _lQueue:
  1189                           	opt stack 0
  1190  000025                     	ds	3
  1191  000028                     HMI_GRender@a:
  1192                           	opt stack 0
  1193  000028                     	ds	2
  1194  00002A                     _COUNTER:
  1195                           	opt stack 0
  1196  00002A                     	ds	2
  1197  00002C                     _lMotor:
  1198                           	opt stack 0
  1199  00002C                     	ds	2
  1200  00002E                     OutSeg@a:
  1201                           	opt stack 0
  1202  00002E                     	ds	1
  1203  00002F                     OutSeg@cur:
  1204                           	opt stack 0
  1205  00002F                     	ds	1
  1206  000030                     OutSeg@segset:
  1207                           	opt stack 0
  1208  000030                     	ds	1
  1209  000031                     Timer0_Init@PRE:
  1210                           	opt stack 0
  1211  000031                     	ds	1
  1212  000032                     Timer2_Init@INDEX:
  1213                           	opt stack 0
  1214  000032                     	ds	1
  1215  000033                     Timer2_Init@PRE:
  1216                           	opt stack 0
  1217  000033                     	ds	1
  1218  000034                     _INDEX:
  1219                           	opt stack 0
  1220  000034                     	ds	1
  1221  000035                     _lBufferX:
  1222                           	opt stack 0
  1223  000035                     	ds	1
  1224  000036                     _lBufferY:
  1225                           	opt stack 0
  1226  000036                     	ds	1
  1227  000037                     rand@screw:
  1228                           	opt stack 0
  1229  000037                     	ds	1
  1230  000038                     _I2C1T:
  1231                           	opt stack 0
  1232  000038                     	ds	7
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           fsr1h	equ	0xFE2
  1241                           fsr1l	equ	0xFE1
  1242                           
  1243                           	psect	dataCOMRAM
  1244  00003F                     __pdataCOMRAM:
  1245                           	opt stack 0
  1246  00003F                     _gCursor:
  1247                           	opt stack 0
  1248  00003F                     	ds	4
  1249  000043                     	ds	1
  1250  000044                     _Bus_State:
  1251                           	opt stack 0
  1252  000044                     	ds	1
  1253  000045                     	ds	1
  1254  000046                     _l:
  1255                           	opt stack 0
  1256  000046                     	ds	1
  1257  000047                     _w:
  1258                           	opt stack 0
  1259  000047                     	ds	1
  1260  000048                     	ds	1
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           postdec1	equ	0xFE5
  1268                           fsr1h	equ	0xFE2
  1269                           fsr1l	equ	0xFE1
  1270                           
  1271                           	psect	bssBANK0
  1272  000060                     __pbssBANK0:
  1273                           	opt stack 0
  1274  000060                     Timer0_Init@DIV:
  1275                           	opt stack 0
  1276  000060                     	ds	4
  1277  000064                     Timer2_Init@DIV:
  1278                           	opt stack 0
  1279  000064                     	ds	4
  1280  000068                     _gISR:
  1281                           	opt stack 0
  1282  000068                     	ds	3
  1283  00006B                     _lStepFunction:
  1284                           	opt stack 0
  1285  00006B                     	ds	3
  1286  00006E                     SPI_Send9@dat:
  1287                           	opt stack 0
  1288  00006E                     	ds	2
  1289  000070                     _gBackcolour:
  1290                           	opt stack 0
  1291  000070                     	ds	2
  1292  000072                     _lCurrent:
  1293                           	opt stack 0
  1294  000072                     	ds	2
  1295  000074                     _pShiftVal:
  1296                           	opt stack 0
  1297  000074                     	ds	2
  1298  000076                     _val:
  1299                           	opt stack 0
  1300  000076                     	ds	2
  1301  000078                     Event_TestButton@j:
  1302                           	opt stack 0
  1303  000078                     	ds	1
  1304  000079                     _ADC_Initialised:
  1305                           	opt stack 0
  1306  000079                     	ds	1
  1307  00007A                     _clearall:
  1308                           	opt stack 0
  1309  00007A                     	ds	1
  1310  00007B                     _i:
  1311                           	opt stack 0
  1312  00007B                     	ds	1
  1313  00007C                     _j:
  1314                           	opt stack 0
  1315  00007C                     	ds	1
  1316  00007D                     _u:
  1317                           	opt stack 0
  1318  00007D                     	ds	1
  1319  00007E                     _PortC:
  1320                           	opt stack 0
  1321  00007E                     	ds	10
  1322  000088                     _PortD:
  1323                           	opt stack 0
  1324  000088                     	ds	10
  1325  000092                     _PortE:
  1326                           	opt stack 0
  1327  000092                     	ds	10
  1328  00009C                     _I2C2T:
  1329                           	opt stack 0
  1330  00009C                     	ds	7
  1331  0000A3                     _ADC_AN0:
  1332                           	opt stack 0
  1333  0000A3                     	ds	5
  1334  0000A8                     _ADC_AN1:
  1335                           	opt stack 0
  1336  0000A8                     	ds	5
  1337  0000AD                     _ADC_AN2:
  1338                           	opt stack 0
  1339  0000AD                     	ds	5
  1340  0000B2                     LCD_DrawRectangle@p2:
  1341                           	opt stack 0
  1342  0000B2                     	ds	4
  1343  0000B6                     LCD_DrawRectangle@p4:
  1344                           	opt stack 0
  1345  0000B6                     	ds	4
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1h	equ	0xFE2
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	dataBANK0
  1357  0000F9                     __pdataBANK0:
  1358                           	opt stack 0
  1359  0000F9                     _gCharSize:
  1360                           	opt stack 0
  1361  0000F9                     	ds	4
  1362  0000FD                     _gForecolour:
  1363                           	opt stack 0
  1364  0000FD                     	ds	2
  1365  0000FF                     _change:
  1366                           	opt stack 0
  1367  0000FF                     	ds	1
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1h	equ	0xFE2
  1376                           fsr1l	equ	0xFE1
  1377                           
  1378                           	psect	bssBANK1
  1379  000100                     __pbssBANK1:
  1380                           	opt stack 0
  1381  000100                     _lCBuffer:
  1382                           	opt stack 0
  1383  000100                     	ds	30
  1384  00011E                     _I2C1_Done:
  1385                           	opt stack 0
  1386  00011E                     	ds	3
  1387  000121                     _I2C1_More:
  1388                           	opt stack 0
  1389  000121                     	ds	3
  1390  000124                     _I2C2_Done:
  1391                           	opt stack 0
  1392  000124                     	ds	3
  1393  000127                     _I2C2_More:
  1394                           	opt stack 0
  1395  000127                     	ds	3
  1396  00012A                     _HMIBoard:
  1397                           	opt stack 0
  1398  00012A                     	ds	58
  1399  000164                     _SPI1:
  1400                           	opt stack 0
  1401  000164                     	ds	11
  1402  00016F                     _SPI2:
  1403                           	opt stack 0
  1404  00016F                     	ds	11
  1405  00017A                     _DIPSwitch:
  1406                           	opt stack 0
  1407  00017A                     	ds	10
  1408  000184                     _PortA:
  1409                           	opt stack 0
  1410  000184                     	ds	10
  1411  00018E                     _PortB:
  1412                           	opt stack 0
  1413  00018E                     	ds	10
  1414  000198                     _PortF:
  1415                           	opt stack 0
  1416  000198                     	ds	10
  1417  0001A2                     _PortG:
  1418                           	opt stack 0
  1419  0001A2                     	ds	10
  1420  0001AC                     _TestButton:
  1421                           	opt stack 0
  1422  0001AC                     	ds	10
  1423  0001B6                     _ADC_AN3:
  1424                           	opt stack 0
  1425  0001B6                     	ds	5
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1h	equ	0xFE2
  1434                           fsr1l	equ	0xFE1
  1435                           
  1436                           	psect	dataBANK1
  1437  0001D3                     __pdataBANK1:
  1438                           	opt stack 0
  1439  0001D3                     Console_Render@F7900:
  1440                           	opt stack 0
  1441  0001D3                     	ds	4
  1442  0001D7                     _gLineSize:
  1443                           	opt stack 0
  1444  0001D7                     	ds	4
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1h	equ	0xFE2
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	bssBANK2
  1456  000200                     __pbssBANK2:
  1457                           	opt stack 0
  1458  000200                     Console_MakeField@Fill:
  1459                           	opt stack 0
  1460  000200                     	ds	70
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           postdec1	equ	0xFE5
  1468                           fsr1h	equ	0xFE2
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	bssBIGRAM
  1472  000246                     __pbssBIGRAM:
  1473                           	opt stack 0
  1474  000246                     _lBuffer:
  1475                           	opt stack 0
  1476  000246                     	ds	300
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487                           	psect	cstackBANK1
  1488  0001BB                     __pcstackBANK1:
  1489                           	opt stack 0
  1490  0001BB                     Port_SetType@Output:
  1491                           	opt stack 0
  1492  0001BB                     Button_Init@pInput:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x0
  1496  0001BB                     	ds	1
  1497  0001BC                     Port_Init@pInput:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x1
  1501  0001BC                     	ds	1
  1502  0001BD                     Button_Init@pThreshold:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x2
  1506  0001BD                     	ds	1
  1507  0001BE                     Port_Init@pPort:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x3
  1511  0001BE                     	ds	1
  1512  0001BF                     ??_Port_Init:
  1513  0001BF                     Button_Init@pInitIO:
  1514                           	opt stack 0
  1515                           
  1516                           ; 3 bytes @ 0x4
  1517  0001BF                     	ds	2
  1518  0001C1                     Port_Init@i:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x6
  1522  0001C1                     	ds	1
  1523  0001C2                     Button_Init@pGetState:
  1524                           	opt stack 0
  1525                           
  1526                           ; 3 bytes @ 0x7
  1527  0001C2                     	ds	3
  1528  0001C5                     Button_Init@pFunction:
  1529                           	opt stack 0
  1530                           
  1531                           ; 3 bytes @ 0xA
  1532  0001C5                     	ds	3
  1533  0001C8                     ??_main:
  1534                           
  1535                           ; 1 bytes @ 0xD
  1536  0001C8                     	ds	4
  1537  0001CC                     main@index:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x11
  1541  0001CC                     	ds	1
  1542  0001CD                     main@Stepper:
  1543                           	opt stack 0
  1544                           
  1545                           ; 6 bytes @ 0x12
  1546  0001CD                     	ds	6
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1h	equ	0xFE2
  1555                           fsr1l	equ	0xFE1
  1556                           
  1557                           	psect	cstackBANK0
  1558  0000BA                     __pcstackBANK0:
  1559                           	opt stack 0
  1560  0000BA                     ??_Console_ClearCursor:
  1561  0000BA                     ??_Console_Init:
  1562  0000BA                     ??_Console_NewLine:
  1563  0000BA                     ??_Console_FormFeed:
  1564  0000BA                     ??_HMI_SetButton:
  1565  0000BA                     ?_GetPortProperties:
  1566                           	opt stack 0
  1567  0000BA                     ?_GetPortPORT:
  1568                           	opt stack 0
  1569  0000BA                     ?_GetPortTRIS:
  1570                           	opt stack 0
  1571  0000BA                     ?___wmul:
  1572                           	opt stack 0
  1573  0000BA                     ?___awdiv:
  1574                           	opt stack 0
  1575  0000BA                     ?___lwdiv:
  1576                           	opt stack 0
  1577  0000BA                     ?___lldiv:
  1578                           	opt stack 0
  1579  0000BA                     Mode_Set@pMode:
  1580                           	opt stack 0
  1581  0000BA                     ToSegment@pCHR:
  1582                           	opt stack 0
  1583  0000BA                     HMI_SetLeft@pValue:
  1584                           	opt stack 0
  1585  0000BA                     HMI_SetRight@pValue:
  1586                           	opt stack 0
  1587  0000BA                     HMI_SetUp@pValue:
  1588                           	opt stack 0
  1589  0000BA                     HMI_SetDown@pValue:
  1590                           	opt stack 0
  1591  0000BA                     HMI_SetBar@pValue:
  1592                           	opt stack 0
  1593  0000BA                     Port_GetPin@pInput:
  1594                           	opt stack 0
  1595  0000BA                     Port_GetQuad@pInput:
  1596                           	opt stack 0
  1597  0000BA                     SPI_DisableISR@pInput:
  1598                           	opt stack 0
  1599  0000BA                     SPI_DCS@pInput:
  1600                           	opt stack 0
  1601  0000BA                     SPI_Send@pInput:
  1602                           	opt stack 0
  1603  0000BA                     Byte_SetBit@pInput:
  1604                           	opt stack 0
  1605  0000BA                     Byte_GetBit@pInput:
  1606                           	opt stack 0
  1607  0000BA                     Byte_SetZone@pInput:
  1608                           	opt stack 0
  1609  0000BA                     Byte_GetZone@pInput:
  1610                           	opt stack 0
  1611  0000BA                     Byte_SetByte@pInput:
  1612                           	opt stack 0
  1613  0000BA                     delay_ms@ms:
  1614                           	opt stack 0
  1615  0000BA                     delay_us@us:
  1616                           	opt stack 0
  1617  0000BA                     reverse@input:
  1618                           	opt stack 0
  1619  0000BA                     Console_SetForecolour@pColour:
  1620                           	opt stack 0
  1621  0000BA                     ___wmul@multiplier:
  1622                           	opt stack 0
  1623  0000BA                     ___awdiv@dividend:
  1624                           	opt stack 0
  1625  0000BA                     ___lwdiv@dividend:
  1626                           	opt stack 0
  1627  0000BA                     MXK_Queue@pCallback:
  1628                           	opt stack 0
  1629  0000BA                     Timer0_Start@pFunction:
  1630                           	opt stack 0
  1631  0000BA                     ___lldiv@dividend:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x0
  1635  0000BA                     	ds	1
  1636  0000BB                     HMI_SetSegments@pString:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x1
  1640  0000BB                     	ds	1
  1641  0000BC                     GetPortProperties@pInput:
  1642                           	opt stack 0
  1643  0000BC                     GetPortPORT@pInput:
  1644                           	opt stack 0
  1645  0000BC                     GetPortTRIS@pInput:
  1646                           	opt stack 0
  1647  0000BC                     Port_GetPin@pPin:
  1648                           	opt stack 0
  1649  0000BC                     Port_GetQuad@pQuad:
  1650                           	opt stack 0
  1651  0000BC                     SPI_Send@pData:
  1652                           	opt stack 0
  1653  0000BC                     Byte_SetBit@pBit:
  1654                           	opt stack 0
  1655  0000BC                     Byte_GetBit@pBit:
  1656                           	opt stack 0
  1657  0000BC                     Byte_SetZone@pMax:
  1658                           	opt stack 0
  1659  0000BC                     Byte_GetZone@pMax:
  1660                           	opt stack 0
  1661  0000BC                     Byte_SetByte@pValue:
  1662                           	opt stack 0
  1663  0000BC                     Console_Init@x:
  1664                           	opt stack 0
  1665  0000BC                     Console_FormFeed@x:
  1666                           	opt stack 0
  1667  0000BC                     reverse@length:
  1668                           	opt stack 0
  1669  0000BC                     ___wmul@multiplicand:
  1670                           	opt stack 0
  1671  0000BC                     ___awdiv@divisor:
  1672                           	opt stack 0
  1673  0000BC                     ___lwdiv@divisor:
  1674                           	opt stack 0
  1675  0000BC                     delay_ms@u:
  1676                           	opt stack 0
  1677  0000BC                     delay_us@u:
  1678                           	opt stack 0
  1679  0000BC                     HMI_SetButton@reindex:
  1680                           	opt stack 0
  1681                           
  1682                           ; 4 bytes @ 0x2
  1683  0000BC                     	ds	1
  1684  0000BD                     ??_Port_GetPin:
  1685  0000BD                     ??_Port_GetQuad:
  1686  0000BD                     ??_Byte_GetBit:
  1687  0000BD                     LCD_Write@mode:
  1688                           	opt stack 0
  1689  0000BD                     Byte_SetBit@pValue:
  1690                           	opt stack 0
  1691  0000BD                     Byte_SetZone@pChunk:
  1692                           	opt stack 0
  1693  0000BD                     Byte_GetZone@pChunk:
  1694                           	opt stack 0
  1695  0000BD                     Console_Init@y:
  1696                           	opt stack 0
  1697  0000BD                     Console_FormFeed@y:
  1698                           	opt stack 0
  1699  0000BD                     OutSeg@pSegment:
  1700                           	opt stack 0
  1701  0000BD                     Motor_Move@pMotor:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x3
  1705  0000BD                     	ds	1
  1706  0000BE                     ??_Byte_SetBit:
  1707  0000BE                     ??_Console_IncrementCursor:
  1708  0000BE                     ??_OutSeg:
  1709  0000BE                     LCD_Write@value:
  1710                           	opt stack 0
  1711  0000BE                     Byte_GetBit@Output:
  1712                           	opt stack 0
  1713  0000BE                     Byte_SetZone@pChunkSize:
  1714                           	opt stack 0
  1715  0000BE                     Byte_GetZone@pChunkSize:
  1716                           	opt stack 0
  1717  0000BE                     reverse@tempVar:
  1718                           	opt stack 0
  1719  0000BE                     ___awdiv@counter:
  1720                           	opt stack 0
  1721  0000BE                     ___lwdiv@counter:
  1722                           	opt stack 0
  1723  0000BE                     HMI_SetSegments@in:
  1724                           	opt stack 0
  1725  0000BE                     ___wmul@product:
  1726                           	opt stack 0
  1727  0000BE                     ___lldiv@divisor:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x4
  1731  0000BE                     	ds	1
  1732  0000BF                     ??_Byte_GetZone:
  1733  0000BF                     ?_Console_MakeField:
  1734                           	opt stack 0
  1735  0000BF                     Set_Addr_Window@ys:
  1736                           	opt stack 0
  1737  0000BF                     Set_Rotation@m:
  1738                           	opt stack 0
  1739  0000BF                     Port_GetPin@Output:
  1740                           	opt stack 0
  1741  0000BF                     Port_GetQuad@Output:
  1742                           	opt stack 0
  1743  0000BF                     Byte_SetZone@pValue:
  1744                           	opt stack 0
  1745  0000BF                     ___awdiv@sign:
  1746                           	opt stack 0
  1747  0000BF                     LCD_Word_Write@value:
  1748                           	opt stack 0
  1749  0000BF                     reverse@iterator:
  1750                           	opt stack 0
  1751  0000BF                     Motor_Move@pDelta:
  1752                           	opt stack 0
  1753  0000BF                     ___lwdiv@quotient:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x5
  1757  0000BF                     	ds	1
  1758  0000C0                     ??_Byte_SetZone:
  1759  0000C0                     Set_Addr_Window@xe:
  1760                           	opt stack 0
  1761  0000C0                     Set_Rotation@rotation:
  1762                           	opt stack 0
  1763  0000C0                     Byte_GetZone@MASK:
  1764                           	opt stack 0
  1765  0000C0                     OutSeg@pInput:
  1766                           	opt stack 0
  1767  0000C0                     HMI_SetButton@pValue:
  1768                           	opt stack 0
  1769  0000C0                     MXK_BlockSwitchTo@CUR:
  1770                           	opt stack 0
  1771  0000C0                     MXK_SwitchTo@CUR:
  1772                           	opt stack 0
  1773  0000C0                     ___awdiv@quotient:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x6
  1777  0000C0                     	ds	1
  1778  0000C1                     ??_Console_MakeField:
  1779  0000C1                     ?___lwmod:
  1780                           	opt stack 0
  1781  0000C1                     Set_Addr_Window@ye:
  1782                           	opt stack 0
  1783  0000C1                     Byte_GetZone@Offset:
  1784                           	opt stack 0
  1785  0000C1                     OutSeg@out:
  1786                           	opt stack 0
  1787  0000C1                     HMI_SetButton@v:
  1788                           	opt stack 0
  1789  0000C1                     MXK_BlockSwitchTo@pModule:
  1790                           	opt stack 0
  1791  0000C1                     MXK_SwitchTo@pModule:
  1792                           	opt stack 0
  1793  0000C1                     ___lwmod@dividend:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x7
  1797  0000C1                     	ds	1
  1798  0000C2                     ??_Console_Tab:
  1799  0000C2                     Set_Addr_Window@xs:
  1800                           	opt stack 0
  1801  0000C2                     Byte_GetZone@Output:
  1802                           	opt stack 0
  1803  0000C2                     HMI_Render@a:
  1804                           	opt stack 0
  1805  0000C2                     ___lldiv@quotient:
  1806                           	opt stack 0
  1807                           
  1808                           ; 4 bytes @ 0x8
  1809  0000C2                     	ds	1
  1810  0000C3                     Byte_SetZone@Offset:
  1811                           	opt stack 0
  1812  0000C3                     LCD_Fill@pColour:
  1813                           	opt stack 0
  1814  0000C3                     LCD_FillRectangle@pColour:
  1815                           	opt stack 0
  1816  0000C3                     Byte_GetPair@pInput:
  1817                           	opt stack 0
  1818  0000C3                     Console_MakeField@Index:
  1819                           	opt stack 0
  1820  0000C3                     ___lwmod@divisor:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x9
  1824  0000C3                     	ds	1
  1825  0000C4                     Byte_SetZone@MASK:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0xA
  1829  0000C4                     	ds	1
  1830  0000C5                     LCD_Fill@i:
  1831                           	opt stack 0
  1832  0000C5                     Byte_GetPair@pPair:
  1833                           	opt stack 0
  1834  0000C5                     Console_MakeField@pInput:
  1835                           	opt stack 0
  1836  0000C5                     ___lwmod@counter:
  1837                           	opt stack 0
  1838  0000C5                     Byte_SetPair@pInput:
  1839                           	opt stack 0
  1840  0000C5                     Byte_SetQuad@pInput:
  1841                           	opt stack 0
  1842  0000C5                     LCD_FillRectangle@pPoint:
  1843                           	opt stack 0
  1844                           
  1845                           ; 4 bytes @ 0xB
  1846  0000C5                     	ds	1
  1847  0000C6                     LCD_Fill@j:
  1848                           	opt stack 0
  1849  0000C6                     ___lldiv@counter:
  1850                           	opt stack 0
  1851  0000C6                     Word_GetPair@pInput:
  1852                           	opt stack 0
  1853  0000C6                     itos@input:
  1854                           	opt stack 0
  1855  0000C6                     Console_MakeField@Column:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0xC
  1859  0000C6                     	ds	1
  1860  0000C7                     Byte_SetPair@pPair:
  1861                           	opt stack 0
  1862  0000C7                     Byte_SetQuad@pQuad:
  1863                           	opt stack 0
  1864  0000C7                     Console_Tab@t:
  1865                           	opt stack 0
  1866  0000C7                     Timer0_Init@pFrequency:
  1867                           	opt stack 0
  1868  0000C7                     Timer2_Init@pFrequency:
  1869                           	opt stack 0
  1870                           
  1871                           ; 4 bytes @ 0xD
  1872  0000C7                     	ds	1
  1873  0000C8                     Byte_SetPair@pValue:
  1874                           	opt stack 0
  1875  0000C8                     Byte_SetQuad@pValue:
  1876                           	opt stack 0
  1877  0000C8                     Word_GetPair@pPair:
  1878                           	opt stack 0
  1879  0000C8                     Console_Tab@i:
  1880                           	opt stack 0
  1881  0000C8                     itos@destination:
  1882                           	opt stack 0
  1883  0000C8                     _Console_MakeField$9772:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0xE
  1887  0000C8                     	ds	1
  1888  0000C9                     Console_Tab@c:
  1889                           	opt stack 0
  1890  0000C9                     Port_SetPin@pInput:
  1891                           	opt stack 0
  1892  0000C9                     Port_Set@pInput:
  1893                           	opt stack 0
  1894  0000C9                     SPI_MinSpeed@pInput:
  1895                           	opt stack 0
  1896  0000C9                     SPI_MaxSpeed@pInput:
  1897                           	opt stack 0
  1898  0000C9                     Word_SetPair@pInput:
  1899                           	opt stack 0
  1900  0000C9                     PortProperty_Valid@pInput:
  1901                           	opt stack 0
  1902  0000C9                     LCD_FillRectangle@pSize:
  1903                           	opt stack 0
  1904                           
  1905                           ; 4 bytes @ 0xF
  1906  0000C9                     	ds	1
  1907  0000CA                     ??_Console_PrintChar:
  1908  0000CA                     Console_MakeField@x:
  1909                           	opt stack 0
  1910  0000CA                     itos@Data:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x10
  1914  0000CA                     	ds	1
  1915  0000CB                     ??_Timer2_Init:
  1916  0000CB                     ??_Timer0_Init:
  1917  0000CB                     Port_SetPin@pPin:
  1918                           	opt stack 0
  1919  0000CB                     Port_Set@pValue:
  1920                           	opt stack 0
  1921  0000CB                     Word_SetPair@pPair:
  1922                           	opt stack 0
  1923  0000CB                     PortProperty_Valid@pPinDrive:
  1924                           	opt stack 0
  1925  0000CB                     Console_MakeField@y:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x11
  1929  0000CB                     	ds	1
  1930  0000CC                     ??_Port_Set:
  1931  0000CC                     Port_SetPin@pValue:
  1932                           	opt stack 0
  1933  0000CC                     Word_SetPair@pValue:
  1934                           	opt stack 0
  1935  0000CC                     PortProperty_Valid@pPin:
  1936                           	opt stack 0
  1937  0000CC                     LCD_DrawField@pField:
  1938                           	opt stack 0
  1939  0000CC                     itos@Length:
  1940                           	opt stack 0
  1941  0000CC                     Timer2_Init@RDIV:
  1942                           	opt stack 0
  1943                           
  1944                           ; 4 bytes @ 0x12
  1945  0000CC                     	ds	1
  1946  0000CD                     ??_PortProperty_Valid:
  1947  0000CD                     ??_LCD_FillRectangle:
  1948  0000CD                     Port_SetPin@Type:
  1949                           	opt stack 0
  1950  0000CD                     Console_PrintChar@pInput:
  1951                           	opt stack 0
  1952  0000CD                     Timer0_Init@pCPUClock:
  1953                           	opt stack 0
  1954                           
  1955                           ; 4 bytes @ 0x13
  1956  0000CD                     	ds	1
  1957  0000CE                     LED_Set@pValue:
  1958                           	opt stack 0
  1959  0000CE                     putch@c:
  1960                           	opt stack 0
  1961  0000CE                     Port_TogglePin@pInput:
  1962                           	opt stack 0
  1963  0000CE                     itos@Out:
  1964                           	opt stack 0
  1965  0000CE                     LCD_DrawField@pPoint:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x14
  1969  0000CE                     	ds	1
  1970  0000CF                     ?_printf:
  1971                           	opt stack 0
  1972  0000CF                     LCD_FillRectangle@i:
  1973                           	opt stack 0
  1974  0000CF                     LED_Set@pLED:
  1975                           	opt stack 0
  1976  0000CF                     printf@f:
  1977                           	opt stack 0
  1978  0000CF                     PortProperty_Valid@Errors:
  1979                           	opt stack 0
  1980                           
  1981                           ; 16 bytes @ 0x15
  1982  0000CF                     	ds	1
  1983  0000D0                     LCD_FillRectangle@j:
  1984                           	opt stack 0
  1985  0000D0                     Port_TogglePin@pPin:
  1986                           	opt stack 0
  1987  0000D0                     HMI_SetNumber@pInput:
  1988                           	opt stack 0
  1989  0000D0                     Timer2_Init@pCPUClock:
  1990                           	opt stack 0
  1991                           
  1992                           ; 4 bytes @ 0x16
  1993  0000D0                     	ds	1
  1994  0000D1                     Port_TogglePin@Value:
  1995                           	opt stack 0
  1996  0000D1                     Timer0_Init@DIVIDE:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x17
  2000  0000D1                     	ds	1
  2001  0000D2                     LED_Toggle@pLED:
  2002                           	opt stack 0
  2003  0000D2                     LCD_DrawField@pSize:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0x18
  2007  0000D2                     	ds	1
  2008  0000D3                     Event_DIPSwitch@pState:
  2009                           	opt stack 0
  2010  0000D3                     Event_HMI_DIPSwitch@pState:
  2011                           	opt stack 0
  2012  0000D3                     Event_TestButton@pState:
  2013                           	opt stack 0
  2014  0000D3                     Event_HMI_LeftButton@pState:
  2015                           	opt stack 0
  2016  0000D3                     Event_HMI_RightButton@pState:
  2017                           	opt stack 0
  2018  0000D3                     Event_HMI_UpButton@pState:
  2019                           	opt stack 0
  2020  0000D3                     Event_HMI_DownButton@pState:
  2021                           	opt stack 0
  2022                           
  2023                           ; 1 bytes @ 0x19
  2024  0000D3                     	ds	1
  2025  0000D4                     Event_DIPSwitch@Bar:
  2026                           	opt stack 0
  2027  0000D4                     Event_HMI_DIPSwitch@Bar:
  2028                           	opt stack 0
  2029  0000D4                     Timer2_Init@DIVIDE:
  2030                           	opt stack 0
  2031                           
  2032                           ; 4 bytes @ 0x1A
  2033  0000D4                     	ds	1
  2034  0000D5                     Button_Poll@pButton:
  2035                           	opt stack 0
  2036  0000D5                     Motor_Speed@pMotor:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x1B
  2040  0000D5                     	ds	1
  2041  0000D6                     ??_LCD_DrawField:
  2042                           
  2043                           ; 1 bytes @ 0x1C
  2044  0000D6                     	ds	1
  2045  0000D7                     Button_Poll@pIncrement:
  2046                           	opt stack 0
  2047  0000D7                     Motor_Speed@pFrequency:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x1D
  2051  0000D7                     	ds	1
  2052  0000D8                     ??_Button_Poll:
  2053  0000D8                     LCD_DrawField@count:
  2054                           	opt stack 0
  2055                           
  2056                           ; 2 bytes @ 0x1E
  2057  0000D8                     	ds	1
  2058  0000D9                     ??_printf:
  2059  0000D9                     
  2060                           ; 1 bytes @ 0x1F
  2061  0000D9                     	ds	1
  2062  0000DA                     LCD_DrawField@xmax:
  2063                           	opt stack 0
  2064  0000DA                     printf@prec:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x20
  2068  0000DA                     	ds	1
  2069  0000DB                     LCD_DrawField@ymax:
  2070                           	opt stack 0
  2071  0000DB                     printf@flag:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x21
  2075  0000DB                     	ds	1
  2076  0000DC                     LCD_DrawField@i:
  2077                           	opt stack 0
  2078  0000DC                     Port_Set@TypeRequired:
  2079                           	opt stack 0
  2080  0000DC                     printf@ap:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x22
  2084  0000DC                     	ds	1
  2085  0000DD                     ??_Console_Render:
  2086  0000DD                     Button_Poll@Pin:
  2087                           	opt stack 0
  2088                           
  2089                           ; 1 bytes @ 0x23
  2090  0000DD                     	ds	1
  2091  0000DE                     Port_Set@TypeActual:
  2092                           	opt stack 0
  2093  0000DE                     printf@val:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x24
  2097  0000DE                     	ds	1
  2098  0000DF                     PortProperty_Valid@Pair:
  2099                           	opt stack 0
  2100  0000DF                     Console_Render@temp:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x25
  2104  0000DF                     	ds	1
  2105  0000E0                     Port_Set@Type:
  2106                           	opt stack 0
  2107  0000E0                     printf@c:
  2108                           	opt stack 0
  2109  0000E0                     Port_CheckPairType@pInput:
  2110                           	opt stack 0
  2111  0000E0                     Port_SetPinType@pInput:
  2112                           	opt stack 0
  2113  0000E0                     Console_Render@lCursor:
  2114                           	opt stack 0
  2115                           
  2116                           ; 4 bytes @ 0x26
  2117  0000E0                     	ds	2
  2118  0000E2                     Port_CheckPairType@pPair:
  2119                           	opt stack 0
  2120  0000E2                     Port_SetPinType@pPin:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x28
  2124  0000E2                     	ds	1
  2125  0000E3                     Port_CheckPairType@pDrive:
  2126                           	opt stack 0
  2127  0000E3                     Port_SetPinType@pType:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x29
  2131  0000E3                     	ds	1
  2132  0000E4                     Port_CheckPairType@Pin1:
  2133                           	opt stack 0
  2134  0000E4                     Port_SetPinType@Output:
  2135                           	opt stack 0
  2136  0000E4                     Console_Render@x:
  2137                           	opt stack 0
  2138                           
  2139                           ; 1 bytes @ 0x2A
  2140  0000E4                     	ds	1
  2141  0000E5                     Port_CheckPairType@Pin2:
  2142                           	opt stack 0
  2143  0000E5                     Console_Render@y:
  2144                           	opt stack 0
  2145  0000E5                     Port_SetPinType@Props:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x2B
  2149  0000E5                     	ds	1
  2150  0000E6                     Port_CheckPairType@Output:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x2C
  2154  0000E6                     	ds	1
  2155  0000E7                     LED_Init@pLED:
  2156                           	opt stack 0
  2157  0000E7                     Port_CheckPairType@Props:
  2158                           	opt stack 0
  2159  0000E7                     Motor_Init@pMotor:
  2160                           	opt stack 0
  2161  0000E7                     SPI_Init@pClock:
  2162                           	opt stack 0
  2163                           
  2164                           ; 4 bytes @ 0x2D
  2165  0000E7                     	ds	2
  2166  0000E9                     Port_CheckQuadType@pInput:
  2167                           	opt stack 0
  2168  0000E9                     Motor_Init@pAddress:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x2F
  2172  0000E9                     	ds	2
  2173  0000EB                     Port_CheckQuadType@pQuad:
  2174                           	opt stack 0
  2175  0000EB                     SPI_Init@pChannel:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x31
  2179  0000EB                     	ds	1
  2180  0000EC                     Port_CheckQuadType@pDrive:
  2181                           	opt stack 0
  2182  0000EC                     SPI_Init@pMode:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x32
  2186  0000EC                     	ds	1
  2187  0000ED                     Port_CheckQuadType@Pair1:
  2188                           	opt stack 0
  2189  0000ED                     SPI_Init@pInput:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x33
  2193  0000ED                     	ds	1
  2194  0000EE                     Port_CheckQuadType@Pair2:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x34
  2198  0000EE                     	ds	1
  2199  0000EF                     ??_LCD_Init:
  2200  0000EF                     Port_CheckQuadType@Output:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x35
  2204  0000EF                     	ds	1
  2205  0000F0                     Port_CheckPortType@pInput:
  2206                           	opt stack 0
  2207  0000F0                     Port_SetQuadType@pInput:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x36
  2211  0000F0                     	ds	1
  2212  0000F1                     LCD_Init@i:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x37
  2216  0000F1                     	ds	1
  2217  0000F2                     Port_CheckPortType@pDrive:
  2218                           	opt stack 0
  2219  0000F2                     Port_SetQuadType@pQuad:
  2220                           	opt stack 0
  2221                           
  2222                           ; 1 bytes @ 0x38
  2223  0000F2                     	ds	1
  2224  0000F3                     Port_CheckPortType@Output:
  2225                           	opt stack 0
  2226  0000F3                     Port_SetQuadType@pType:
  2227                           	opt stack 0
  2228                           
  2229                           ; 1 bytes @ 0x39
  2230  0000F3                     	ds	1
  2231  0000F4                     Port_SetQuadType@Output:
  2232                           	opt stack 0
  2233  0000F4                     Port_SetType@pInput:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x3A
  2237  0000F4                     	ds	1
  2238  0000F5                     HMI_Init@in:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x3B
  2242  0000F5                     	ds	1
  2243  0000F6                     Port_SetType@pType:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x3C
  2247  0000F6                     	ds	1
  2248  0000F7                     ??_Port_SetType:
  2249                           
  2250                           ; 1 bytes @ 0x3D
  2251  0000F7                     	ds	2
  2252  0000F9                     tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           postdec1	equ	0xFE5
  2259                           fsr1h	equ	0xFE2
  2260                           fsr1l	equ	0xFE1
  2261                           
  2262                           ; 1 bytes @ 0x3F
  2263                           
  2264                           	psect	cstackCOMRAM
  2265  000001                     __pcstackCOMRAM:
  2266                           	opt stack 0
  2267  000001                     i2Byte_SetBit@pInput:
  2268                           	opt stack 0
  2269  000001                     i2Byte_GetZone@pInput:
  2270                           	opt stack 0
  2271  000001                     i2delay_us@us:
  2272                           	opt stack 0
  2273  000001                     i2MXK_Queue@pCallback:
  2274                           	opt stack 0
  2275                           
  2276                           ; 3 bytes @ 0x0
  2277  000001                     	ds	2
  2278  000003                     i2Byte_SetBit@pBit:
  2279                           	opt stack 0
  2280  000003                     i2Byte_GetZone@pMax:
  2281                           	opt stack 0
  2282  000003                     i2delay_us@u:
  2283                           	opt stack 0
  2284                           
  2285                           ; 4 bytes @ 0x2
  2286  000003                     	ds	1
  2287  000004                     i2Byte_SetBit@pValue:
  2288                           	opt stack 0
  2289  000004                     i2Byte_GetZone@pChunk:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x3
  2293  000004                     	ds	1
  2294  000005                     ??i2_Byte_SetBit:
  2295  000005                     i2Byte_GetZone@pChunkSize:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x4
  2299  000005                     	ds	1
  2300  000006                     ??i2_Byte_GetZone:
  2301                           
  2302                           ; 1 bytes @ 0x5
  2303  000006                     	ds	1
  2304  000007                     i2Byte_GetZone@MASK:
  2305                           	opt stack 0
  2306  000007                     i2MXK_SwitchTo@CUR:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x6
  2310  000007                     	ds	1
  2311  000008                     i2Byte_GetZone@Offset:
  2312                           	opt stack 0
  2313  000008                     i2MXK_SwitchTo@pModule:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x7
  2317  000008                     	ds	1
  2318  000009                     i2Byte_GetZone@Output:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x8
  2322  000009                     	ds	1
  2323  00000A                     i2Byte_GetPair@pInput:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x9
  2327  00000A                     	ds	2
  2328  00000C                     i2Byte_GetPair@pPair:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0xB
  2332  00000C                     	ds	1
  2333  00000D                     i2Word_GetPair@pInput:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0xC
  2337  00000D                     	ds	2
  2338  00000F                     i2Word_GetPair@pPair:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0xE
  2342  00000F                     	ds	1
  2343  000010                     i2Port_SetPin@pInput:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0xF
  2347  000010                     	ds	2
  2348  000012                     i2Port_SetPin@pPin:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x11
  2352  000012                     	ds	1
  2353  000013                     i2Port_SetPin@pValue:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x12
  2357  000013                     	ds	1
  2358  000014                     i2Port_SetPin@Type:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x13
  2362  000014                     	ds	1
  2363  000015                     
  2364                           ; 1 bytes @ 0x14
  2365  000015                     	ds	2
  2366  000017                     ??_ISR_Function:
  2367                           
  2368                           ; 1 bytes @ 0x16
  2369  000017                     	ds	14
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1h	equ	0xFE2
  2378                           fsr1l	equ	0xFE1
  2379                           
  2380 ;;
  2381 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2382 ;;
  2383 ;; *************** function _main *****************
  2384 ;; Defined at:
  2385 ;;		line 22 in file "main.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  Stepper         6   18[BANK1 ] struct Motor
  2390 ;;  index           1   17[BANK1 ] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;Total ram usage:       11 bytes
  2405 ;; Hardware stack levels required when called:   17
  2406 ;; This function calls:
  2407 ;;		_Console_Init
  2408 ;;		_Console_Render
  2409 ;;		_Console_SetForecolour
  2410 ;;		_HMI_DIPSwitch
  2411 ;;		_HMI_DownSwitch
  2412 ;;		_HMI_Init
  2413 ;;		_HMI_LeftSwitch
  2414 ;;		_HMI_Poll
  2415 ;;		_HMI_Render
  2416 ;;		_HMI_RightSwitch
  2417 ;;		_HMI_SetBar
  2418 ;;		_HMI_SetNumber
  2419 ;;		_HMI_SetSegments
  2420 ;;		_HMI_UpSwitch
  2421 ;;		_LCD_Init
  2422 ;;		_MXK_BlockSwitchTo
  2423 ;;		_MXK_DIPSwitch
  2424 ;;		_MXK_Dequeue
  2425 ;;		_MXK_Init
  2426 ;;		_MXK_Release
  2427 ;;		_MXK_TestButton
  2428 ;;		_Motor_Init
  2429 ;;		_Motor_Move
  2430 ;;		_Motor_Speed
  2431 ;;		_printf
  2432 ;; This function is called by:
  2433 ;;		Startup code after reset
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text0
  2438  010A5C                     __ptext0:
  2439                           	opt stack 0
  2440  010A5C                     _main:
  2441                           	opt stack 14
  2442                           
  2443                           ;main.c: 25: MXK_Init();
  2444                           
  2445                           ;incstack = 0
  2446  010A5C  ECFD  F08D         	call	_MXK_Init	;wreg free
  2447                           
  2448                           ;main.c: 28: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2449  010A60  0E01               	movlw	1
  2450  010A62  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2451  010A66  0900               	iorlw	0
  2452  010A68  B4D8               	btfsc	status,2,c
  2453  010A6A  D00A               	goto	l12431
  2454                           
  2455                           ;main.c: 29: LCD_Init();
  2456  010A6C  ECBA  F08E         	call	_LCD_Init	;wreg free
  2457                           
  2458                           ;main.c: 30: Console_Init();
  2459  010A70  EC40  F09A         	call	_Console_Init	;wreg free
  2460                           
  2461                           ;main.c: 32: if (MXK_Release())
  2462  010A74  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2463  010A78  0900               	iorlw	0
  2464  010A7A  A4D8               	btfss	status,2,c
  2465                           
  2466                           ;main.c: 33: MXK_Dequeue();
  2467  010A7C  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2468  010A80                     l12431:
  2469                           
  2470                           ;main.c: 34: }
  2471                           ;main.c: 37: if (MXK_BlockSwitchTo(eMXK_HMI))
  2472  010A80  0E01               	movlw	1
  2473  010A82  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2474  010A86  0900               	iorlw	0
  2475  010A88  B4D8               	btfsc	status,2,c
  2476  010A8A  D013               	goto	l12443
  2477                           
  2478                           ;main.c: 38: {
  2479                           ;main.c: 39: HMI_Init();
  2480  010A8C  ECB0  F089         	call	_HMI_Init	;wreg free
  2481                           
  2482                           ;main.c: 40: HMI_SetBar(0x00);
  2483  010A90  0E00               	movlw	0
  2484  010A92  EC2E  F0A4         	call	_HMI_SetBar
  2485                           
  2486                           ;main.c: 41: HMI_SetSegments((str) "irobot");
  2487  010A96  0EF4               	movlw	low STR_1
  2488  010A98  0100               	movlb	0	; () banked
  2489  010A9A  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
  2490  010A9C  0EFF               	movlw	high STR_1
  2491  010A9E  0100               	movlb	0	; () banked
  2492  010AA0  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  2493  010AA2  EC8A  F092         	call	_HMI_SetSegments	;wreg free
  2494                           
  2495                           ;main.c: 42: if (MXK_Release())
  2496  010AA6  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2497  010AAA  0900               	iorlw	0
  2498  010AAC  A4D8               	btfss	status,2,c
  2499                           
  2500                           ;main.c: 43: MXK_Dequeue();
  2501  010AAE  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2502  010AB2                     l12443:
  2503                           
  2504                           ;main.c: 44: }
  2505                           ;main.c: 47: Motor Stepper;
  2506                           ;main.c: 48: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2507  010AB2  0E08               	movlw	8
  2508  010AB4  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2509  010AB8  0900               	iorlw	0
  2510  010ABA  B4D8               	btfsc	status,2,c
  2511  010ABC  D02D               	goto	l12455
  2512                           
  2513                           ;main.c: 49: Motor_Init(&Stepper, 0b1000);
  2514  010ABE  0ECD               	movlw	low main@Stepper
  2515  010AC0  0100               	movlb	0	; () banked
  2516  010AC2  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
  2517  010AC4  0E01               	movlw	high main@Stepper
  2518  010AC6  0100               	movlb	0	; () banked
  2519  010AC8  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  2520  010ACA  0E00               	movlw	0
  2521  010ACC  0100               	movlb	0	; () banked
  2522  010ACE  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  2523  010AD0  0E08               	movlw	8
  2524  010AD2  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
  2525  010AD4  EC6C  F093         	call	_Motor_Init	;wreg free
  2526                           
  2527                           ;main.c: 50: Motor_Speed(&Stepper, 50);
  2528  010AD8  0ECD               	movlw	low main@Stepper
  2529  010ADA  0100               	movlb	0	; () banked
  2530  010ADC  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  2531  010ADE  0E01               	movlw	high main@Stepper
  2532  010AE0  0100               	movlb	0	; () banked
  2533  010AE2  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  2534  010AE4  0E00               	movlw	0
  2535  010AE6  0100               	movlb	0	; () banked
  2536  010AE8  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  2537  010AEA  0E32               	movlw	50
  2538  010AEC  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  2539  010AEE  EC70  F0A2         	call	_Motor_Speed	;wreg free
  2540                           
  2541                           ;main.c: 51: Motor_Move(&Stepper, 100);
  2542  010AF2  0ECD               	movlw	low main@Stepper
  2543  010AF4  0100               	movlb	0	; () banked
  2544  010AF6  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  2545  010AF8  0E01               	movlw	high main@Stepper
  2546  010AFA  0100               	movlb	0	; () banked
  2547  010AFC  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  2548  010AFE  0E00               	movlw	0
  2549  010B00  0100               	movlb	0	; () banked
  2550  010B02  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  2551  010B04  0E64               	movlw	100
  2552  010B06  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  2553  010B08  EC2E  F0A1         	call	_Motor_Move	;wreg free
  2554                           
  2555                           ;main.c: 52: if (MXK_Release())
  2556  010B0C  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2557  010B10  0900               	iorlw	0
  2558  010B12  A4D8               	btfss	status,2,c
  2559                           
  2560                           ;main.c: 53: MXK_Dequeue();
  2561  010B14  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2562  010B18                     l12455:
  2563                           
  2564                           ;main.c: 54: }
  2565                           ;main.c: 57: INTCONbits.PEIE = 1;
  2566  010B18  8CF2               	bsf	intcon,6,c	;volatile
  2567                           
  2568                           ;main.c: 58: INTCONbits.GIE = 1;
  2569  010B1A  8EF2               	bsf	intcon,7,c	;volatile
  2570                           
  2571                           ;main.c: 59: INTCONbits.INT0IE = 1;
  2572  010B1C  88F2               	bsf	intcon,4,c	;volatile
  2573                           
  2574                           ;main.c: 60: INTCONbits.INT0IF = 0;
  2575  010B1E  92F2               	bcf	intcon,1,c	;volatile
  2576                           
  2577                           ;main.c: 62: byte index = 0;
  2578  010B20  0E00               	movlw	0
  2579  010B22  0101               	movlb	1	; () banked
  2580  010B24  6FCC               	movwf	main@index& (0+255),b
  2581  010B26                     l12465:
  2582                           
  2583                           ;main.c: 64: {
  2584                           ;main.c: 65: index++;
  2585  010B26  0101               	movlb	1	; () banked
  2586  010B28  2BCC               	incf	main@index& (0+255),f,b
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;main.c: 68: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2590  010B2A  0E01               	movlw	1
  2591  010B2C  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2592  010B30  0900               	iorlw	0
  2593  010B32  B4D8               	btfsc	status,2,c
  2594  010B34  D09A               	goto	l12489
  2595                           
  2596                           ;main.c: 69: Console_SetForecolour(0xF800);
  2597  010B36  0EF8               	movlw	248
  2598  010B38  0100               	movlb	0	; () banked
  2599  010B3A  6FBB               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  2600  010B3C  0E00               	movlw	0
  2601  010B3E  6FBA               	movwf	Console_SetForecolour@pColour& (0+255),b
  2602  010B40  EC33  F0A4         	call	_Console_SetForecolour	;wreg free
  2603                           
  2604                           ;main.c: 70: printf("%c", (char)35);
  2605  010B44  0EFB               	movlw	low STR_2
  2606  010B46  0100               	movlb	0	; () banked
  2607  010B48  6FCF               	movwf	printf@f& (0+255),b
  2608  010B4A  0EFF               	movlw	high STR_2
  2609  010B4C  0100               	movlb	0	; () banked
  2610  010B4E  6FD0               	movwf	(printf@f+1)& (0+255),b
  2611  010B50  0E00               	movlw	0
  2612  010B52  0100               	movlb	0	; () banked
  2613  010B54  6FD2               	movwf	(?_printf+3)& (0+255),b
  2614  010B56  0E23               	movlw	35
  2615  010B58  6FD1               	movwf	(?_printf+2)& (0+255),b
  2616  010B5A  ECAD  F08A         	call	_printf	;wreg free
  2617                           
  2618                           ;main.c: 71: printf("Mechatronics 2\n\n");
  2619  010B5E  0ED3               	movlw	low STR_3
  2620  010B60  0100               	movlb	0	; () banked
  2621  010B62  6FCF               	movwf	printf@f& (0+255),b
  2622  010B64  0EFF               	movlw	high STR_3
  2623  010B66  0100               	movlb	0	; () banked
  2624  010B68  6FD0               	movwf	(printf@f+1)& (0+255),b
  2625  010B6A  ECAD  F08A         	call	_printf	;wreg free
  2626                           
  2627                           ;main.c: 72: printf("Loop index: %d\n", index);
  2628  010B6E  0EE4               	movlw	low STR_4
  2629  010B70  0100               	movlb	0	; () banked
  2630  010B72  6FCF               	movwf	printf@f& (0+255),b
  2631  010B74  0EFF               	movlw	high STR_4
  2632  010B76  0100               	movlb	0	; () banked
  2633  010B78  6FD0               	movwf	(printf@f+1)& (0+255),b
  2634  010B7A  C1CC  F0D1         	movff	main@index,?_printf+2
  2635  010B7E  0100               	movlb	0	; () banked
  2636  010B80  6BD2               	clrf	(?_printf+3)& (0+255),b
  2637  010B82  ECAD  F08A         	call	_printf	;wreg free
  2638                           
  2639                           ;main.c: 73: printf("Stepper delta: %d\n", Stepper.mDelta);
  2640  010B86  0EC0               	movlw	low STR_5
  2641  010B88  0100               	movlb	0	; () banked
  2642  010B8A  6FCF               	movwf	printf@f& (0+255),b
  2643  010B8C  0EFF               	movlw	high STR_5
  2644  010B8E  0100               	movlb	0	; () banked
  2645  010B90  6FD0               	movwf	(printf@f+1)& (0+255),b
  2646  010B92  C1CD  F0D1         	movff	main@Stepper,?_printf+2
  2647  010B96  C1CE  F0D2         	movff	main@Stepper+1,?_printf+3
  2648  010B9A  ECAD  F08A         	call	_printf	;wreg free
  2649                           
  2650                           ;main.c: 75: HMI_Poll();
  2651  010B9E  EC27  F09C         	call	_HMI_Poll	;wreg free
  2652                           
  2653                           ;main.c: 76: printf("\nUp:%u \t Down:%u\nLeft:%u \t Right:%u\n",
  2654                           ;main.c: 77: HMIBoard.mUp.mGetState(), HMIBoard.mDown.mGetState(),
  2655                           ;main.c: 78: HMIBoard.mLeft.mGetState(), HMIBoard.mRight.mGetState());
  2656  010BA2  0E9B               	movlw	low STR_6
  2657  010BA4  0100               	movlb	0	; () banked
  2658  010BA6  6FCF               	movwf	printf@f& (0+255),b
  2659  010BA8  0EFF               	movlw	high STR_6
  2660  010BAA  0100               	movlb	0	; () banked
  2661  010BAC  6FD0               	movwf	(printf@f+1)& (0+255),b
  2662  010BAE  EE21  F04D         	lfsr	2,_HMIBoard+35
  2663  010BB2  D801               	call	u9358
  2664  010BB4  D00A               	goto	u9359
  2665  010BB6                     u9358:
  2666  010BB6  0005               	push	
  2667  010BB8  6EFA               	movwf	pclath,c
  2668  010BBA  50DE               	movf	postinc2,w,c
  2669  010BBC  6EFD               	movwf	tosl,c
  2670  010BBE  50DE               	movf	postinc2,w,c
  2671  010BC0  6EFE               	movwf	tosh,c
  2672  010BC2  50DE               	movf	postinc2,w,c
  2673  010BC4  6EFF               	movwf	tosu,c
  2674  010BC6  50FA               	movf	pclath,w,c
  2675  010BC8  0012               	return		;indir
  2676  010BCA                     u9359:
  2677  010BCA  0101               	movlb	1	; () banked
  2678  010BCC  6FC8               	movwf	??_main& (0+255),b
  2679  010BCE  0101               	movlb	1	; () banked
  2680  010BD0  51C8               	movf	??_main& (0+255),w,b
  2681  010BD2  0100               	movlb	0	; () banked
  2682  010BD4  6FD1               	movwf	(?_printf+2)& (0+255),b
  2683  010BD6  6BD2               	clrf	(?_printf+3)& (0+255),b
  2684  010BD8  EE21  F057         	lfsr	2,_HMIBoard+45
  2685  010BDC  D801               	call	u9368
  2686  010BDE  D00A               	goto	u9369
  2687  010BE0                     u9368:
  2688  010BE0  0005               	push	
  2689  010BE2  6EFA               	movwf	pclath,c
  2690  010BE4  50DE               	movf	postinc2,w,c
  2691  010BE6  6EFD               	movwf	tosl,c
  2692  010BE8  50DE               	movf	postinc2,w,c
  2693  010BEA  6EFE               	movwf	tosh,c
  2694  010BEC  50DE               	movf	postinc2,w,c
  2695  010BEE  6EFF               	movwf	tosu,c
  2696  010BF0  50FA               	movf	pclath,w,c
  2697  010BF2  0012               	return		;indir
  2698  010BF4                     u9369:
  2699  010BF4  0101               	movlb	1	; () banked
  2700  010BF6  6FC9               	movwf	(??_main+1)& (0+255),b
  2701  010BF8  0101               	movlb	1	; () banked
  2702  010BFA  51C9               	movf	(??_main+1)& (0+255),w,b
  2703  010BFC  0100               	movlb	0	; () banked
  2704  010BFE  6FD3               	movwf	(?_printf+4)& (0+255),b
  2705  010C00  6BD4               	clrf	(?_printf+5)& (0+255),b
  2706  010C02  EE21  F043         	lfsr	2,_HMIBoard+25
  2707  010C06  D801               	call	u9378
  2708  010C08  D00A               	goto	u9379
  2709  010C0A                     u9378:
  2710  010C0A  0005               	push	
  2711  010C0C  6EFA               	movwf	pclath,c
  2712  010C0E  50DE               	movf	postinc2,w,c
  2713  010C10  6EFD               	movwf	tosl,c
  2714  010C12  50DE               	movf	postinc2,w,c
  2715  010C14  6EFE               	movwf	tosh,c
  2716  010C16  50DE               	movf	postinc2,w,c
  2717  010C18  6EFF               	movwf	tosu,c
  2718  010C1A  50FA               	movf	pclath,w,c
  2719  010C1C  0012               	return		;indir
  2720  010C1E                     u9379:
  2721  010C1E  0101               	movlb	1	; () banked
  2722  010C20  6FCA               	movwf	(??_main+2)& (0+255),b
  2723  010C22  0101               	movlb	1	; () banked
  2724  010C24  51CA               	movf	(??_main+2)& (0+255),w,b
  2725  010C26  0100               	movlb	0	; () banked
  2726  010C28  6FD5               	movwf	(?_printf+6)& (0+255),b
  2727  010C2A  6BD6               	clrf	(?_printf+7)& (0+255),b
  2728  010C2C  EE21  F039         	lfsr	2,_HMIBoard+15
  2729  010C30  D801               	call	u9388
  2730  010C32  D00A               	goto	u9389
  2731  010C34                     u9388:
  2732  010C34  0005               	push	
  2733  010C36  6EFA               	movwf	pclath,c
  2734  010C38  50DE               	movf	postinc2,w,c
  2735  010C3A  6EFD               	movwf	tosl,c
  2736  010C3C  50DE               	movf	postinc2,w,c
  2737  010C3E  6EFE               	movwf	tosh,c
  2738  010C40  50DE               	movf	postinc2,w,c
  2739  010C42  6EFF               	movwf	tosu,c
  2740  010C44  50FA               	movf	pclath,w,c
  2741  010C46  0012               	return		;indir
  2742  010C48                     u9389:
  2743  010C48  0101               	movlb	1	; () banked
  2744  010C4A  6FCB               	movwf	(??_main+3)& (0+255),b
  2745  010C4C  0101               	movlb	1	; () banked
  2746  010C4E  51CB               	movf	(??_main+3)& (0+255),w,b
  2747  010C50  0100               	movlb	0	; () banked
  2748  010C52  6FD7               	movwf	(?_printf+8)& (0+255),b
  2749  010C54  6BD8               	clrf	(?_printf+9)& (0+255),b
  2750  010C56  ECAD  F08A         	call	_printf	;wreg free
  2751                           
  2752                           ;main.c: 80: Console_Render();
  2753  010C5A  ECAA  F088         	call	_Console_Render	;wreg free
  2754                           
  2755                           ;main.c: 81: if (MXK_Release())
  2756  010C5E  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2757  010C62  0900               	iorlw	0
  2758  010C64  A4D8               	btfss	status,2,c
  2759                           
  2760                           ;main.c: 82: MXK_Dequeue();
  2761  010C66  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2762  010C6A                     l12489:
  2763                           
  2764                           ;main.c: 83: }
  2765                           ;main.c: 89: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2766  010C6A  0E01               	movlw	1
  2767  010C6C  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2768  010C70  0900               	iorlw	0
  2769  010C72  B4D8               	btfsc	status,2,c
  2770  010C74  D00E               	goto	l12499
  2771                           
  2772                           ;main.c: 91: HMI_SetNumber(Stepper.mDelta);
  2773  010C76  C1CD  F0D0         	movff	main@Stepper,HMI_SetNumber@pInput
  2774  010C7A  C1CE  F0D1         	movff	main@Stepper+1,HMI_SetNumber@pInput+1
  2775  010C7E  EC85  F0A2         	call	_HMI_SetNumber	;wreg free
  2776                           
  2777                           ;main.c: 92: HMI_Render();
  2778  010C82  ECB4  F0A0         	call	_HMI_Render	;wreg free
  2779                           
  2780                           ;main.c: 93: if (MXK_Release())
  2781  010C86  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2782  010C8A  0900               	iorlw	0
  2783  010C8C  A4D8               	btfss	status,2,c
  2784                           
  2785                           ;main.c: 94: MXK_Dequeue();
  2786  010C8E  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2787  010C92                     l12499:
  2788                           
  2789                           ;main.c: 95: }
  2790                           ;main.c: 98: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2791  010C92  0E08               	movlw	8
  2792  010C94  EC95  F0A0         	call	_MXK_BlockSwitchTo
  2793  010C98  0900               	iorlw	0
  2794  010C9A  B4D8               	btfsc	status,2,c
  2795  010C9C  D744               	goto	l12465
  2796                           
  2797                           ;main.c: 99: if (Stepper.mDelta == 0) {
  2798  010C9E  0101               	movlb	1	; () banked
  2799  010CA0  51CD               	movf	main@Stepper& (0+255),w,b
  2800  010CA2  0101               	movlb	1	; () banked
  2801  010CA4  11CE               	iorwf	(main@Stepper+1)& (0+255),w,b
  2802  010CA6  A4D8               	btfss	status,2,c
  2803  010CA8  D00D               	goto	l12505
  2804                           
  2805                           ; BSR set to: 1
  2806                           ;main.c: 100: Motor_Move(&Stepper, 100);
  2807  010CAA  0ECD               	movlw	low main@Stepper
  2808  010CAC  0100               	movlb	0	; () banked
  2809  010CAE  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  2810  010CB0  0E01               	movlw	high main@Stepper
  2811  010CB2  0100               	movlb	0	; () banked
  2812  010CB4  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  2813  010CB6  0E00               	movlw	0
  2814  010CB8  0100               	movlb	0	; () banked
  2815  010CBA  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  2816  010CBC  0E64               	movlw	100
  2817  010CBE  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  2818  010CC0  EC2E  F0A1         	call	_Motor_Move	;wreg free
  2819  010CC4                     l12505:
  2820                           
  2821                           ;main.c: 101: }
  2822                           ;main.c: 102: if (MXK_Release())
  2823  010CC4  ECBB  F0A3         	call	_MXK_Release	;wreg free
  2824  010CC8  0900               	iorlw	0
  2825  010CCA  B4D8               	btfsc	status,2,c
  2826  010CCC  D72C               	goto	l12465
  2827                           
  2828                           ;main.c: 103: MXK_Dequeue();
  2829  010CCE  ECB4  F0A1         	call	_MXK_Dequeue	;wreg free
  2830                           
  2831                           ;main.c: 104: }
  2832                           ;main.c: 105: }
  2833  010CD2  D729               	goto	l12465
  2834  010CD4                     __end_of_main:
  2835                           	opt stack 0
  2836                           tosu	equ	0xFFF
  2837                           tosh	equ	0xFFE
  2838                           tosl	equ	0xFFD
  2839                           pclath	equ	0xFFA
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           intcon	equ	0xFF2
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           postdec1	equ	0xFE5
  2848                           fsr1h	equ	0xFE2
  2849                           fsr1l	equ	0xFE1
  2850                           postinc2	equ	0xFDE
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _printf *****************
  2854 ;; Defined at:
  2855 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  2858 ;;		 -> STR_6(37), STR_5(19), STR_4(16), STR_3(17), 
  2859 ;;		 -> STR_2(3), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  tmpval          4    0        struct .
  2862 ;;  cp              3    0        PTR const unsigned char 
  2863 ;;  val             2   36[BANK0 ] unsigned int 
  2864 ;;  ap              2   34[BANK0 ] PTR void [1]
  2865 ;;		 -> ?_printf(2), 
  2866 ;;  len             2    0        unsigned int 
  2867 ;;  c               1   38[BANK0 ] char 
  2868 ;;  flag            1   33[BANK0 ] unsigned char 
  2869 ;;  prec            1   32[BANK0 ] char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  2   21[BANK0 ] int 
  2872 ;; Registers used:
  2873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:       18 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:   12
  2886 ;; This function calls:
  2887 ;;		___lwdiv
  2888 ;;		___lwmod
  2889 ;;		_putch
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text1
  2896  01155A                     __ptext1:
  2897                           	opt stack 0
  2898  01155A                     _printf:
  2899                           	opt stack 18
  2900                           
  2901                           ;doprnt.c: 466: va_list ap;
  2902                           ;doprnt.c: 499: signed char c;
  2903                           ;doprnt.c: 506: signed char prec;
  2904                           ;doprnt.c: 508: unsigned char flag;
  2905                           ;doprnt.c: 523: union {
  2906                           ;doprnt.c: 524: unsigned long vd;
  2907                           ;doprnt.c: 525: double integ;
  2908                           ;doprnt.c: 526: } tmpval;
  2909                           ;doprnt.c: 528: unsigned int val;
  2910                           ;doprnt.c: 529: unsigned len;
  2911                           ;doprnt.c: 530: const char * cp;
  2912                           ;doprnt.c: 533: *ap = __va_start();
  2913                           
  2914                           ;incstack = 0
  2915  01155A  0ED1               	movlw	low (?_printf+2)
  2916  01155C  0100               	movlb	0	; () banked
  2917  01155E  6FDC               	movwf	printf@ap& (0+255),b
  2918  011560  0E00               	movlw	high (?_printf+2)
  2919  011562  0100               	movlb	0	; () banked
  2920  011564  6FDD               	movwf	(printf@ap+1)& (0+255),b
  2921                           
  2922                           ;doprnt.c: 536: while(c = *f++) {
  2923  011566  D0C9               	goto	l11815
  2924  011568                     l11757:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;doprnt.c: 538: if(c != '%')
  2928  011568  0E25               	movlw	37
  2929  01156A  0100               	movlb	0	; () banked
  2930  01156C  19E0               	xorwf	printf@c& (0+255),w,b
  2931  01156E  B4D8               	btfsc	status,2,c
  2932  011570  D005               	goto	l11761
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 540: {
  2936                           ;doprnt.c: 541: (putch(c) );
  2937  011572  0100               	movlb	0	; () banked
  2938  011574  51E0               	movf	printf@c& (0+255),w,b
  2939  011576  ECFB  F0A3         	call	_putch
  2940                           
  2941                           ;doprnt.c: 542: continue;
  2942  01157A  D0BF               	goto	l11815
  2943  01157C                     l11761:
  2944                           
  2945                           ;doprnt.c: 543: }
  2946                           ;doprnt.c: 548: flag = 0;
  2947  01157C  0E00               	movlw	0
  2948  01157E  0100               	movlb	0	; () banked
  2949  011580  6FDB               	movwf	printf@flag& (0+255),b
  2950                           
  2951                           ;doprnt.c: 635: switch(c = *f++) {
  2952  011582  D014               	goto	l11773
  2953  011584                     l11763:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2957  011584  C0DC  FFD9         	movff	printf@ap,fsr2l
  2958  011588  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  2959  01158C  50DF               	movf	indf2,w,c
  2960  01158E  0100               	movlb	0	; () banked
  2961  011590  6FE0               	movwf	printf@c& (0+255),b
  2962                           
  2963                           ; BSR set to: 0
  2964  011592  0E02               	movlw	2
  2965  011594  0100               	movlb	0	; () banked
  2966  011596  27DC               	addwf	printf@ap& (0+255),f,b
  2967  011598  0E00               	movlw	0
  2968  01159A  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  2969  01159C                     l11767:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 809: (putch(c) );
  2973  01159C  0100               	movlb	0	; () banked
  2974  01159E  51E0               	movf	printf@c& (0+255),w,b
  2975  0115A0  ECFB  F0A3         	call	_putch
  2976                           
  2977                           ;doprnt.c: 810: continue;
  2978  0115A4  D0AA               	goto	l11815
  2979  0115A6                     l11769:
  2980                           
  2981                           ;doprnt.c: 818: flag |= 0x40;
  2982  0115A6  0100               	movlb	0	; () banked
  2983  0115A8  8DDB               	bsf	printf@flag& (0+255),6,b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;doprnt.c: 822: }
  2987                           
  2988                           ;doprnt.c: 819: break;
  2989  0115AA  D01E               	goto	l2032
  2990  0115AC                     l11773:
  2991                           
  2992                           ; BSR set to: 0
  2993  0115AC  C0CF  FFF6         	movff	printf@f,tblptrl
  2994  0115B0  C0D0  FFF7         	movff	printf@f+1,tblptrh
  2995  0115B4  0100               	movlb	0	; () banked
  2996  0115B6  4BCF               	infsnz	printf@f& (0+255),f,b
  2997  0115B8  2BD0               	incf	(printf@f+1)& (0+255),f,b
  2998  0115BA                     	if	0	;tblptru may be non-zero
  2999  0115BA                     	endif
  3000  0115BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3001  0115BA  0E00               	movlw	low (__mediumconst shr (0+16))
  3002  0115BC  6EF8               	movwf	tblptru,c
  3003  0115BE                     	endif
  3004  0115BE  0008               	tblrd		*
  3005  0115C0  CFF5 F0E0          	movff	tablat,printf@c
  3006  0115C4  0100               	movlb	0	; () banked
  3007  0115C6  51E0               	movf	printf@c& (0+255),w,b
  3008                           
  3009                           ; Switch size 1, requested type "space"
  3010                           ; Number of cases is 5, Range of values is 0 to 117
  3011                           ; switch strategies available:
  3012                           ; Name         Instructions Cycles
  3013                           ; simple_byte           16     9 (average)
  3014                           ;	Chosen strategy is simple_byte
  3015  0115C8  0A00               	xorlw	0	; case 0
  3016  0115CA  B4D8               	btfsc	status,2,c
  3017  0115CC  0012               	return	
  3018  0115CE  0A63               	xorlw	99	; case 99
  3019  0115D0  B4D8               	btfsc	status,2,c
  3020  0115D2  D7D8               	goto	l11763
  3021  0115D4  0A07               	xorlw	7	; case 100
  3022  0115D6  B4D8               	btfsc	status,2,c
  3023  0115D8  D007               	goto	l2032
  3024  0115DA  0A0D               	xorlw	13	; case 105
  3025  0115DC  B4D8               	btfsc	status,2,c
  3026  0115DE  D004               	goto	l2032
  3027  0115E0  0A1C               	xorlw	28	; case 117
  3028  0115E2  B4D8               	btfsc	status,2,c
  3029  0115E4  D7E0               	goto	l11769
  3030  0115E6  D7DA               	goto	l11767
  3031  0115E8                     l2032:
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3035  0115E8  0100               	movlb	0	; () banked
  3036  0115EA  BDDB               	btfsc	printf@flag& (0+255),6,b
  3037  0115EC  D019               	goto	l11785
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;doprnt.c: 1253: {
  3041                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3042  0115EE  C0DC  FFD9         	movff	printf@ap,fsr2l
  3043  0115F2  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  3044  0115F6  CFDE F0DE          	movff	postinc2,printf@val
  3045  0115FA  CFDD F0DF          	movff	postdec2,printf@val+1
  3046                           
  3047                           ; BSR set to: 0
  3048  0115FE  0E02               	movlw	2
  3049  011600  0100               	movlb	0	; () banked
  3050  011602  27DC               	addwf	printf@ap& (0+255),f,b
  3051  011604  0E00               	movlw	0
  3052  011606  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;doprnt.c: 1261: if((int)val < 0) {
  3056  011608  0100               	movlb	0	; () banked
  3057  01160A  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  3058  01160C  D016               	goto	l11789
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;doprnt.c: 1262: flag |= 0x03;
  3062  01160E  0E03               	movlw	3
  3063  011610  0100               	movlb	0	; () banked
  3064  011612  13DB               	iorwf	printf@flag& (0+255),f,b
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;doprnt.c: 1263: val = -val;
  3068  011614  0100               	movlb	0	; () banked
  3069  011616  6DDE               	negf	printf@val& (0+255),b
  3070  011618  1FDF               	comf	(printf@val+1)& (0+255),f,b
  3071  01161A  B0D8               	btfsc	status,0,c
  3072  01161C  2BDF               	incf	(printf@val+1)& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;doprnt.c: 1264: }
  3076                           ;doprnt.c: 1266: }
  3077  01161E  D00D               	goto	l11789
  3078  011620                     l11785:
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;doprnt.c: 1268: else
  3082                           ;doprnt.c: 1273: {
  3083                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3084  011620  C0DC  FFD9         	movff	printf@ap,fsr2l
  3085  011624  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  3086  011628  CFDE F0DE          	movff	postinc2,printf@val
  3087  01162C  CFDD F0DF          	movff	postdec2,printf@val+1
  3088                           
  3089                           ; BSR set to: 0
  3090  011630  0E02               	movlw	2
  3091  011632  0100               	movlb	0	; () banked
  3092  011634  27DC               	addwf	printf@ap& (0+255),f,b
  3093  011636  0E00               	movlw	0
  3094  011638  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  3095  01163A                     l11789:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;doprnt.c: 1287: }
  3099                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3100  01163A  0E01               	movlw	1
  3101  01163C  0100               	movlb	0	; () banked
  3102  01163E  6FE0               	movwf	printf@c& (0+255),b
  3103  011640                     l11791:
  3104                           
  3105                           ; BSR set to: 0
  3106  011640  0E05               	movlw	5
  3107  011642  0100               	movlb	0	; () banked
  3108  011644  19E0               	xorwf	printf@c& (0+255),w,b
  3109  011646  B4D8               	btfsc	status,2,c
  3110  011648  D019               	goto	l11803
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;doprnt.c: 1306: if(val < dpowers[c])
  3114                           
  3115                           ; BSR set to: 0
  3116                           
  3117                           ; BSR set to: 0
  3118  01164A  0100               	movlb	0	; () banked
  3119  01164C  51E0               	movf	printf@c& (0+255),w,b
  3120  01164E  0D02               	mullw	2
  3121  011650  0E93               	movlw	low _dpowers
  3122  011652  24F3               	addwf	prodl,w,c
  3123  011654  6EF6               	movwf	tblptrl,c
  3124  011656  0EFD               	movlw	high _dpowers
  3125  011658  20F4               	addwfc	prodh,w,c
  3126  01165A  6EF7               	movwf	tblptrh,c
  3127  01165C                     	if	1	;There are 3 active tblptr bytes
  3128  01165C  6AF8               	clrf	tblptru,c
  3129  01165E  0E00               	movlw	low (__mediumconst shr (0+16))
  3130  011660  22F8               	addwfc	tblptru,f,c
  3131  011662                     	endif
  3132  011662  0009               	tblrd		*+
  3133  011664  50F5               	movf	tablat,w,c
  3134  011666  0100               	movlb	0	; () banked
  3135  011668  5DDE               	subwf	printf@val& (0+255),w,b
  3136  01166A  0009               	tblrd		*+
  3137  01166C  50F5               	movf	tablat,w,c
  3138  01166E  0100               	movlb	0	; () banked
  3139  011670  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  3140  011672  A0D8               	btfss	status,0,c
  3141  011674  D003               	goto	l11803
  3142                           
  3143                           ; BSR set to: 0
  3144                           
  3145                           ; BSR set to: 0
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;doprnt.c: 1307: break;
  3149  011676  0100               	movlb	0	; () banked
  3150  011678  2BE0               	incf	printf@c& (0+255),f,b
  3151  01167A  D7E2               	goto	l11791
  3152  01167C                     l11803:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;doprnt.c: 1422: {
  3156                           ;doprnt.c: 1438: if(flag & 0x03)
  3157  01167C  C0DB  F0D9         	movff	printf@flag,??_printf
  3158  011680  0E03               	movlw	3
  3159  011682  0100               	movlb	0	; () banked
  3160  011684  17D9               	andwf	??_printf& (0+255),f,b
  3161  011686  B4D8               	btfsc	status,2,c
  3162  011688  D003               	goto	l11807
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 1439: (putch('-') );
  3166  01168A  0E2D               	movlw	45
  3167  01168C  ECFB  F0A3         	call	_putch
  3168  011690                     l11807:
  3169                           
  3170                           ;doprnt.c: 1469: }
  3171                           ;doprnt.c: 1472: prec = c;
  3172  011690  C0E0  F0DA         	movff	printf@c,printf@prec
  3173                           
  3174                           ;doprnt.c: 1474: while(prec--) {
  3175  011694  D02C               	goto	l11813
  3176  011696                     l11809:
  3177                           
  3178                           ;doprnt.c: 1478: {
  3179                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3180  011696  0100               	movlb	0	; () banked
  3181  011698  51DA               	movf	printf@prec& (0+255),w,b
  3182  01169A  0D02               	mullw	2
  3183  01169C  0E93               	movlw	low _dpowers
  3184  01169E  24F3               	addwf	prodl,w,c
  3185  0116A0  6EF6               	movwf	tblptrl,c
  3186  0116A2  0EFD               	movlw	high _dpowers
  3187  0116A4  20F4               	addwfc	prodh,w,c
  3188  0116A6  6EF7               	movwf	tblptrh,c
  3189  0116A8                     	if	1	;There are 3 active tblptr bytes
  3190  0116A8  6AF8               	clrf	tblptru,c
  3191  0116AA  0E00               	movlw	low (__mediumconst shr (0+16))
  3192  0116AC  22F8               	addwfc	tblptru,f,c
  3193  0116AE                     	endif
  3194  0116AE  0009               	tblrd		*+
  3195  0116B0  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  3196  0116B4  000A               	tblrd		*-
  3197  0116B6  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  3198  0116BA  C0DE  F0BA         	movff	printf@val,___lwdiv@dividend
  3199  0116BE  C0DF  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  3200  0116C2  EC02  F09B         	call	___lwdiv	;wreg free
  3201  0116C6  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  3202  0116CA  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  3203  0116CE  0E00               	movlw	0
  3204  0116D0  0100               	movlb	0	; () banked
  3205  0116D2  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  3206  0116D4  0E0A               	movlw	10
  3207  0116D6  6FC3               	movwf	___lwmod@divisor& (0+255),b
  3208  0116D8  EC03  F09E         	call	___lwmod	;wreg free
  3209  0116DC  0100               	movlb	0	; () banked
  3210  0116DE  51C1               	movf	?___lwmod& (0+255),w,b
  3211  0116E0  0F30               	addlw	48
  3212  0116E2  0100               	movlb	0	; () banked
  3213  0116E4  6FE0               	movwf	printf@c& (0+255),b
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;doprnt.c: 1523: }
  3217                           ;doprnt.c: 1524: (putch(c) );
  3218  0116E6  0100               	movlb	0	; () banked
  3219  0116E8  51E0               	movf	printf@c& (0+255),w,b
  3220  0116EA  ECFB  F0A3         	call	_putch
  3221  0116EE                     l11813:
  3222  0116EE  0100               	movlb	0	; () banked
  3223  0116F0  07DA               	decf	printf@prec& (0+255),f,b
  3224  0116F2  0100               	movlb	0	; () banked
  3225  0116F4  29DA               	incf	printf@prec& (0+255),w,b
  3226  0116F6  A4D8               	btfss	status,2,c
  3227  0116F8  D7CE               	goto	l11809
  3228  0116FA                     l11815:
  3229  0116FA  C0CF  FFF6         	movff	printf@f,tblptrl
  3230  0116FE  C0D0  FFF7         	movff	printf@f+1,tblptrh
  3231  011702  0100               	movlb	0	; () banked
  3232  011704  4BCF               	infsnz	printf@f& (0+255),f,b
  3233  011706  2BD0               	incf	(printf@f+1)& (0+255),f,b
  3234  011708                     	if	0	;tblptru may be non-zero
  3235  011708                     	endif
  3236  011708                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3237  011708  0E00               	movlw	low (__mediumconst shr (0+16))
  3238  01170A  6EF8               	movwf	tblptru,c
  3239  01170C                     	endif
  3240  01170C  0008               	tblrd		*
  3241  01170E  CFF5 F0E0          	movff	tablat,printf@c
  3242  011712  0100               	movlb	0	; () banked
  3243  011714  51E0               	movf	printf@c& (0+255),w,b
  3244  011716  B4D8               	btfsc	status,2,c
  3245  011718  0012               	return	
  3246  01171A  D726               	goto	l11757
  3247  01171C                     __end_of_printf:
  3248                           	opt stack 0
  3249                           tosu	equ	0xFFF
  3250                           tosh	equ	0xFFE
  3251                           tosl	equ	0xFFD
  3252                           pclath	equ	0xFFA
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postdec1	equ	0xFE5
  3263                           fsr1h	equ	0xFE2
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _putch *****************
  3273 ;; Defined at:
  3274 ;;		line 454 in file "Library/Console.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  c               1    wreg     unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  c               1   20[BANK0 ] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        1 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:   11
  3295 ;; This function calls:
  3296 ;;		_Console_PrintChar
  3297 ;; This function is called by:
  3298 ;;		_printf
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text2
  3303  0147F6                     __ptext2:
  3304                           	opt stack 0
  3305  0147F6                     _putch:
  3306                           	opt stack 18
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;incstack = 0
  3310                           ;putch@c stored from wreg
  3311  0147F6  0100               	movlb	0	; () banked
  3312  0147F8  6FCE               	movwf	putch@c& (0+255),b
  3313                           
  3314                           ;Console.c: 456: Console_PrintChar(c);
  3315  0147FA  0100               	movlb	0	; () banked
  3316  0147FC  51CE               	movf	putch@c& (0+255),w,b
  3317  0147FE  EC37  F08D         	call	_Console_PrintChar
  3318  014802  0012               	return		;funcret
  3319  014804                     __end_of_putch:
  3320                           	opt stack 0
  3321                           tosu	equ	0xFFF
  3322                           tosh	equ	0xFFE
  3323                           tosl	equ	0xFFD
  3324                           pclath	equ	0xFFA
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1h	equ	0xFE2
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           postinc2	equ	0xFDE
  3339                           postdec2	equ	0xFDD
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _Console_PrintChar *****************
  3345 ;; Defined at:
  3346 ;;		line 322 in file "Library/Console.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  pInput          1    wreg     unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  pInput          1   19[BANK0 ] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:        4 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:   10
  3367 ;; This function calls:
  3368 ;;		_Console_Backspace
  3369 ;;		_Console_FormFeed
  3370 ;;		_Console_IncrementCursor
  3371 ;;		_Console_NewLine
  3372 ;;		_Console_ResetCursor
  3373 ;;		_Console_Tab
  3374 ;; This function is called by:
  3375 ;;		_putch
  3376 ;;		_Console_PrintString
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text3
  3381  011A6E                     __ptext3:
  3382                           	opt stack 0
  3383  011A6E                     _Console_PrintChar:
  3384                           	opt stack 18
  3385                           
  3386                           ;incstack = 0
  3387                           ;Console_PrintChar@pInput stored from wreg
  3388  011A6E  0100               	movlb	0	; () banked
  3389  011A70  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  3390                           
  3391                           ;Console.c: 324: switch(pInput)
  3392  011A72  D0A8               	goto	l10769
  3393  011A74                     l10725:
  3394                           
  3395                           ;Console.c: 327: case '\n':
  3396                           ;Console.c: 328: Console_NewLine();
  3397  011A74  EC6A  F099         	call	_Console_NewLine	;wreg free
  3398                           
  3399                           ;Console.c: 329: return;
  3400  011A78  0012               	return	
  3401  011A7A                     l10729:
  3402                           
  3403                           ;Console.c: 331: Console_Backspace();
  3404  011A7A  EC32  F09F         	call	_Console_Backspace	;wreg free
  3405                           
  3406                           ;Console.c: 332: return;
  3407  011A7E  0012               	return	
  3408  011A80                     l10733:
  3409                           
  3410                           ;Console.c: 334: Console_FormFeed();
  3411  011A80  ECFB  F099         	call	_Console_FormFeed	;wreg free
  3412                           
  3413                           ;Console.c: 335: return;
  3414  011A84  0012               	return	
  3415  011A86                     l10737:
  3416                           
  3417                           ;Console.c: 337: Console_Tab();
  3418  011A86  EC0B  F095         	call	_Console_Tab	;wreg free
  3419                           
  3420                           ;Console.c: 338: return;
  3421  011A8A  0012               	return	
  3422  011A8C                     l10741:
  3423                           
  3424                           ;Console.c: 340: Console_IncrementCursor();
  3425  011A8C  EC6E  F09D         	call	_Console_IncrementCursor	;wreg free
  3426                           
  3427                           ;Console.c: 341: return;
  3428  011A90  0012               	return	
  3429  011A92                     l10745:
  3430                           
  3431                           ;Console.c: 343: Console_ResetCursor();
  3432  011A92  EC4D  F0A3         	call	_Console_ResetCursor	;wreg free
  3433                           
  3434                           ;Console.c: 344: return;
  3435  011A96  0012               	return	
  3436  011A98                     l10749:
  3437                           
  3438                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3439  011A98  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3440  011A9C  0E7F               	movlw	127
  3441  011A9E  0100               	movlb	0	; () banked
  3442  011AA0  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  3443  011AA2  5036               	movf	_lBufferY,w,c
  3444  011AA4  0D14               	mullw	20
  3445  011AA6  0E46               	movlw	low _lBuffer
  3446  011AA8  0100               	movlb	0	; () banked
  3447  011AAA  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3448  011AAC  0E02               	movlw	high _lBuffer
  3449  011AAE  0100               	movlb	0	; () banked
  3450  011AB0  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3451  011AB2  50F3               	movf	prodl,w,c
  3452  011AB4  0100               	movlb	0	; () banked
  3453  011AB6  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3454  011AB8  50F4               	movf	prodh,w,c
  3455  011ABA  0100               	movlb	0	; () banked
  3456  011ABC  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3457  011ABE  5035               	movf	_lBufferX,w,c
  3458  011AC0  0D01               	mullw	1
  3459  011AC2  50F3               	movf	prodl,w,c
  3460  011AC4  0100               	movlb	0	; () banked
  3461  011AC6  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3462  011AC8  6ED9               	movwf	fsr2l,c
  3463  011ACA  50F4               	movf	prodh,w,c
  3464  011ACC  0100               	movlb	0	; () banked
  3465  011ACE  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3466  011AD0  6EDA               	movwf	fsr2h,c
  3467  011AD2  50DF               	movf	indf2,w,c
  3468  011AD4  0B7F               	andlw	127
  3469  011AD6  0100               	movlb	0	; () banked
  3470  011AD8  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  3471  011ADA  B4D8               	btfsc	status,2,c
  3472  011ADC  D02B               	goto	l10757
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;Console.c: 351: {
  3476                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3477  011ADE  0E01               	movlw	1
  3478  011AE0  0100               	movlb	0	; () banked
  3479  011AE2  6FFF               	movwf	_change& (0+255),b
  3480                           
  3481                           ; BSR set to: 0
  3482  011AE4  5036               	movf	_lBufferY,w,c
  3483  011AE6  0D14               	mullw	20
  3484  011AE8  0E46               	movlw	low _lBuffer
  3485  011AEA  0100               	movlb	0	; () banked
  3486  011AEC  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  3487  011AEE  0E02               	movlw	high _lBuffer
  3488  011AF0  0100               	movlb	0	; () banked
  3489  011AF2  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3490  011AF4  50F3               	movf	prodl,w,c
  3491  011AF6  0100               	movlb	0	; () banked
  3492  011AF8  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  3493  011AFA  50F4               	movf	prodh,w,c
  3494  011AFC  0100               	movlb	0	; () banked
  3495  011AFE  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3496  011B00  5035               	movf	_lBufferX,w,c
  3497  011B02  0D01               	mullw	1
  3498  011B04  50F3               	movf	prodl,w,c
  3499  011B06  0100               	movlb	0	; () banked
  3500  011B08  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  3501  011B0A  6ED9               	movwf	fsr2l,c
  3502  011B0C  50F4               	movf	prodh,w,c
  3503  011B0E  0100               	movlb	0	; () banked
  3504  011B10  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3505  011B12  6EDA               	movwf	fsr2h,c
  3506  011B14  0100               	movlb	0	; () banked
  3507  011B16  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  3508  011B18  0980               	iorlw	128
  3509  011B1A  6EDF               	movwf	indf2,c
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  3513  011B1C  5036               	movf	_lBufferY,w,c
  3514  011B1E  0D02               	mullw	2
  3515  011B20  0E00               	movlw	low _lCBuffer
  3516  011B22  24F3               	addwf	prodl,w,c
  3517  011B24  6ED9               	movwf	fsr2l,c
  3518  011B26  0E01               	movlw	high _lCBuffer
  3519  011B28  20F4               	addwfc	prodh,w,c
  3520  011B2A  6EDA               	movwf	fsr2h,c
  3521  011B2C  C0FD  FFDE         	movff	_gForecolour,postinc2
  3522  011B30  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  3523  011B34                     l10757:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;Console.c: 354: }
  3527                           ;Console.c: 368: if(Console_IncrementCursor())
  3528  011B34  EC6E  F09D         	call	_Console_IncrementCursor	;wreg free
  3529  011B38  0900               	iorlw	0
  3530  011B3A  B4D8               	btfsc	status,2,c
  3531  011B3C  0012               	return	
  3532                           
  3533                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3534  011B3E  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3535  011B42  0E7F               	movlw	127
  3536  011B44  0100               	movlb	0	; () banked
  3537  011B46  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  3538  011B48  5036               	movf	_lBufferY,w,c
  3539  011B4A  0D14               	mullw	20
  3540  011B4C  0E46               	movlw	low _lBuffer
  3541  011B4E  0100               	movlb	0	; () banked
  3542  011B50  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3543  011B52  0E02               	movlw	high _lBuffer
  3544  011B54  0100               	movlb	0	; () banked
  3545  011B56  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3546  011B58  50F3               	movf	prodl,w,c
  3547  011B5A  0100               	movlb	0	; () banked
  3548  011B5C  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3549  011B5E  50F4               	movf	prodh,w,c
  3550  011B60  0100               	movlb	0	; () banked
  3551  011B62  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3552  011B64  5035               	movf	_lBufferX,w,c
  3553  011B66  0D01               	mullw	1
  3554  011B68  50F3               	movf	prodl,w,c
  3555  011B6A  0100               	movlb	0	; () banked
  3556  011B6C  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3557  011B6E  6ED9               	movwf	fsr2l,c
  3558  011B70  50F4               	movf	prodh,w,c
  3559  011B72  0100               	movlb	0	; () banked
  3560  011B74  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3561  011B76  6EDA               	movwf	fsr2h,c
  3562  011B78  50DF               	movf	indf2,w,c
  3563  011B7A  0B7F               	andlw	127
  3564  011B7C  0100               	movlb	0	; () banked
  3565  011B7E  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  3566  011B80  B4D8               	btfsc	status,2,c
  3567  011B82  0012               	return	
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3571  011B84  0E01               	movlw	1
  3572  011B86  0100               	movlb	0	; () banked
  3573  011B88  6FFF               	movwf	_change& (0+255),b
  3574                           
  3575                           ; BSR set to: 0
  3576  011B8A  5036               	movf	_lBufferY,w,c
  3577  011B8C  0D14               	mullw	20
  3578  011B8E  0E46               	movlw	low _lBuffer
  3579  011B90  0100               	movlb	0	; () banked
  3580  011B92  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  3581  011B94  0E02               	movlw	high _lBuffer
  3582  011B96  0100               	movlb	0	; () banked
  3583  011B98  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3584  011B9A  50F3               	movf	prodl,w,c
  3585  011B9C  0100               	movlb	0	; () banked
  3586  011B9E  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  3587  011BA0  50F4               	movf	prodh,w,c
  3588  011BA2  0100               	movlb	0	; () banked
  3589  011BA4  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3590  011BA6  5035               	movf	_lBufferX,w,c
  3591  011BA8  0D01               	mullw	1
  3592  011BAA  50F3               	movf	prodl,w,c
  3593  011BAC  0100               	movlb	0	; () banked
  3594  011BAE  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  3595  011BB0  6ED9               	movwf	fsr2l,c
  3596  011BB2  50F4               	movf	prodh,w,c
  3597  011BB4  0100               	movlb	0	; () banked
  3598  011BB6  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3599  011BB8  6EDA               	movwf	fsr2h,c
  3600  011BBA  0100               	movlb	0	; () banked
  3601  011BBC  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  3602  011BBE  0980               	iorlw	128
  3603  011BC0  6EDF               	movwf	indf2,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;Console.c: 372: };
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;Console.c: 371: return;
  3610                           
  3611                           ; BSR set to: 0
  3612                           
  3613                           ; BSR set to: 0
  3614  011BC2  0012               	return	
  3615  011BC4                     l10769:
  3616  011BC4  0100               	movlb	0	; () banked
  3617  011BC6  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  3618                           
  3619                           ; Switch size 1, requested type "space"
  3620                           ; Number of cases is 8, Range of values is 7 to 35
  3621                           ; switch strategies available:
  3622                           ; Name         Instructions Cycles
  3623                           ; simple_byte           25    13 (average)
  3624                           ;	Chosen strategy is simple_byte
  3625  011BC8  0A07               	xorlw	7	; case 7
  3626  011BCA  B4D8               	btfsc	status,2,c
  3627  011BCC  D75F               	goto	l10741
  3628  011BCE  0A0F               	xorlw	15	; case 8
  3629  011BD0  B4D8               	btfsc	status,2,c
  3630  011BD2  D753               	goto	l10729
  3631  011BD4  0A01               	xorlw	1	; case 9
  3632  011BD6  B4D8               	btfsc	status,2,c
  3633  011BD8  D756               	goto	l10737
  3634  011BDA  0A03               	xorlw	3	; case 10
  3635  011BDC  B4D8               	btfsc	status,2,c
  3636  011BDE  D74A               	goto	l10725
  3637  011BE0  0A06               	xorlw	6	; case 12
  3638  011BE2  B4D8               	btfsc	status,2,c
  3639  011BE4  D74D               	goto	l10733
  3640  011BE6  0A01               	xorlw	1	; case 13
  3641  011BE8  B4D8               	btfsc	status,2,c
  3642  011BEA  D744               	goto	l10725
  3643  011BEC  0A2D               	xorlw	45	; case 32
  3644  011BEE  B4D8               	btfsc	status,2,c
  3645  011BF0  D753               	goto	l10749
  3646  011BF2  0A03               	xorlw	3	; case 35
  3647  011BF4  B4D8               	btfsc	status,2,c
  3648  011BF6  D74D               	goto	l10745
  3649  011BF8  D74F               	goto	l10749
  3650  011BFA                     __end_of_Console_PrintChar:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           postdec1	equ	0xFE5
  3666                           fsr1h	equ	0xFE2
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _Console_Tab *****************
  3676 ;; Defined at:
  3677 ;;		line 260 in file "Library/Console.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  c               1   15[BANK0 ] unsigned char 
  3682 ;;  i               1   14[BANK0 ] unsigned char 
  3683 ;;  t               1   13[BANK0 ] unsigned char 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        8 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    9
  3700 ;; This function calls:
  3701 ;;		_Console_ClearCursor
  3702 ;;		_Console_IncrementCursor
  3703 ;;		___awdiv
  3704 ;; This function is called by:
  3705 ;;		_Console_PrintChar
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text4
  3710  012A16                     __ptext4:
  3711                           	opt stack 0
  3712  012A16                     _Console_Tab:
  3713                           	opt stack 18
  3714                           
  3715                           ;Console.c: 262: UINT8 i = 0;
  3716                           
  3717                           ;incstack = 0
  3718  012A16  0E00               	movlw	0
  3719  012A18  0100               	movlb	0	; () banked
  3720  012A1A  6FC8               	movwf	Console_Tab@i& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  3724  012A1C  0EFA               	movlw	250
  3725  012A1E  243F               	addwf	_gCursor,w,c
  3726  012A20  0100               	movlb	0	; () banked
  3727  012A22  6FBA               	movwf	___awdiv@dividend& (0+255),b
  3728  012A24  0EFF               	movlw	255
  3729  012A26  2040               	addwfc	_gCursor+1,w,c
  3730  012A28  0100               	movlb	0	; () banked
  3731  012A2A  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  3732  012A2C  0E00               	movlw	0
  3733  012A2E  0100               	movlb	0	; () banked
  3734  012A30  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  3735  012A32  0E06               	movlw	6
  3736  012A34  6FBC               	movwf	___awdiv@divisor& (0+255),b
  3737  012A36  EC6C  F095         	call	___awdiv	;wreg free
  3738  012A3A  0100               	movlb	0	; () banked
  3739  012A3C  51BA               	movf	?___awdiv& (0+255),w,b
  3740  012A3E  0100               	movlb	0	; () banked
  3741  012A40  6FC9               	movwf	Console_Tab@c& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;Console.c: 264: UINT8 t = c/4;
  3745  012A42  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  3746  012A46  0100               	movlb	0	; () banked
  3747  012A48  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  3748  012A4A  0E00               	movlw	0
  3749  012A4C  0100               	movlb	0	; () banked
  3750  012A4E  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  3751  012A50  0E04               	movlw	4
  3752  012A52  6FBC               	movwf	___awdiv@divisor& (0+255),b
  3753  012A54  EC6C  F095         	call	___awdiv	;wreg free
  3754  012A58  0100               	movlb	0	; () banked
  3755  012A5A  51BA               	movf	?___awdiv& (0+255),w,b
  3756  012A5C  0100               	movlb	0	; () banked
  3757  012A5E  6FC7               	movwf	Console_Tab@t& (0+255),b
  3758                           
  3759                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  3760  012A60  0E00               	movlw	0
  3761  012A62  0100               	movlb	0	; () banked
  3762  012A64  6FC8               	movwf	Console_Tab@i& (0+255),b
  3763  012A66  D006               	goto	l10355
  3764  012A68                     l10351:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;Console.c: 266: {
  3768                           ;Console.c: 267: Console_ClearCursor();
  3769  012A68  ECF2  F0A0         	call	_Console_ClearCursor	;wreg free
  3770                           
  3771                           ;Console.c: 268: Console_IncrementCursor();
  3772  012A6C  EC6E  F09D         	call	_Console_IncrementCursor	;wreg free
  3773  012A70  0100               	movlb	0	; () banked
  3774  012A72  2BC8               	incf	Console_Tab@i& (0+255),f,b
  3775  012A74                     l10355:
  3776                           
  3777                           ; BSR set to: 0
  3778  012A74  0100               	movlb	0	; () banked
  3779  012A76  51C7               	movf	Console_Tab@t& (0+255),w,b
  3780  012A78  0D04               	mullw	4
  3781  012A7A  1EF3               	comf	prodl,f,c
  3782  012A7C  1EF4               	comf	prodh,f,c
  3783  012A7E  4AF3               	infsnz	prodl,f,c
  3784  012A80  2AF4               	incf	prodh,f,c
  3785  012A82  0100               	movlb	0	; () banked
  3786  012A84  51C9               	movf	Console_Tab@c& (0+255),w,b
  3787  012A86  0100               	movlb	0	; () banked
  3788  012A88  6FC2               	movwf	??_Console_Tab& (0+255),b
  3789  012A8A  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  3790  012A8C  50F3               	movf	prodl,w,c
  3791  012A8E  0100               	movlb	0	; () banked
  3792  012A90  27C2               	addwf	??_Console_Tab& (0+255),f,b
  3793  012A92  50F4               	movf	prodh,w,c
  3794  012A94  0100               	movlb	0	; () banked
  3795  012A96  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3796  012A98  0100               	movlb	0	; () banked
  3797  012A9A  1FC2               	comf	??_Console_Tab& (0+255),f,b
  3798  012A9C  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  3799  012A9E  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  3800  012AA0  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  3801  012AA2  0E04               	movlw	4
  3802  012AA4  0100               	movlb	0	; () banked
  3803  012AA6  27C2               	addwf	??_Console_Tab& (0+255),f,b
  3804  012AA8  0E00               	movlw	0
  3805  012AAA  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3806  012AAC  0100               	movlb	0	; () banked
  3807  012AAE  51C8               	movf	Console_Tab@i& (0+255),w,b
  3808  012AB0  0100               	movlb	0	; () banked
  3809  012AB2  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  3810  012AB4  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  3811  012AB6  0100               	movlb	0	; () banked
  3812  012AB8  51C2               	movf	??_Console_Tab& (0+255),w,b
  3813  012ABA  0100               	movlb	0	; () banked
  3814  012ABC  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  3815  012ABE  0100               	movlb	0	; () banked
  3816  012AC0  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  3817  012AC2  0A80               	xorlw	128
  3818  012AC4  0100               	movlb	0	; () banked
  3819  012AC6  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  3820  012AC8  0100               	movlb	0	; () banked
  3821  012ACA  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  3822  012ACC  0A80               	xorlw	128
  3823  012ACE  0100               	movlb	0	; () banked
  3824  012AD0  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  3825  012AD2  B0D8               	btfsc	status,0,c
  3826  012AD4  0012               	return	
  3827  012AD6  D7C8               	goto	l10351
  3828  012AD8                     __end_of_Console_Tab:
  3829                           	opt stack 0
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           pclath	equ	0xFFA
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           intcon	equ	0xFF2
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           postdec1	equ	0xFE5
  3844                           fsr1h	equ	0xFE2
  3845                           fsr1l	equ	0xFE1
  3846                           indf2	equ	0xFDF
  3847                           postinc2	equ	0xFDE
  3848                           postdec2	equ	0xFDD
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function ___awdiv *****************
  3854 ;; Defined at:
  3855 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;  dividend        2    0[BANK0 ] int 
  3858 ;;  divisor         2    2[BANK0 ] int 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  quotient        2    6[BANK0 ] int 
  3861 ;;  sign            1    5[BANK0 ] unsigned char 
  3862 ;;  counter         1    4[BANK0 ] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  2    0[BANK0 ] int 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3872 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;Total ram usage:        8 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    7
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_Console_Tab
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text5
  3887  012AD8                     __ptext5:
  3888                           	opt stack 0
  3889  012AD8                     ___awdiv:
  3890                           	opt stack 19
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;incstack = 0
  3894  012AD8  0E00               	movlw	0
  3895  012ADA  0100               	movlb	0	; () banked
  3896  012ADC  6FBF               	movwf	___awdiv@sign& (0+255),b
  3897                           
  3898                           ; BSR set to: 0
  3899  012ADE  0100               	movlb	0	; () banked
  3900  012AE0  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3901  012AE2  D008               	goto	l10099
  3902                           
  3903                           ; BSR set to: 0
  3904  012AE4  0100               	movlb	0	; () banked
  3905  012AE6  6DBC               	negf	___awdiv@divisor& (0+255),b
  3906  012AE8  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3907  012AEA  B0D8               	btfsc	status,0,c
  3908  012AEC  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3909                           
  3910                           ; BSR set to: 0
  3911  012AEE  0E01               	movlw	1
  3912  012AF0  0100               	movlb	0	; () banked
  3913  012AF2  6FBF               	movwf	___awdiv@sign& (0+255),b
  3914  012AF4                     l10099:
  3915                           
  3916                           ; BSR set to: 0
  3917  012AF4  0100               	movlb	0	; () banked
  3918  012AF6  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3919  012AF8  D008               	goto	l10105
  3920                           
  3921                           ; BSR set to: 0
  3922  012AFA  0100               	movlb	0	; () banked
  3923  012AFC  6DBA               	negf	___awdiv@dividend& (0+255),b
  3924  012AFE  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3925  012B00  B0D8               	btfsc	status,0,c
  3926  012B02  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3927                           
  3928                           ; BSR set to: 0
  3929  012B04  0E01               	movlw	1
  3930  012B06  0100               	movlb	0	; () banked
  3931  012B08  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  3932  012B0A                     l10105:
  3933                           
  3934                           ; BSR set to: 0
  3935  012B0A  0E00               	movlw	0
  3936  012B0C  0100               	movlb	0	; () banked
  3937  012B0E  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  3938  012B10  0E00               	movlw	0
  3939  012B12  6FC0               	movwf	___awdiv@quotient& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942  012B14  0100               	movlb	0	; () banked
  3943  012B16  51BC               	movf	___awdiv@divisor& (0+255),w,b
  3944  012B18  0100               	movlb	0	; () banked
  3945  012B1A  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3946  012B1C  B4D8               	btfsc	status,2,c
  3947  012B1E  D02C               	goto	l10127
  3948                           
  3949                           ; BSR set to: 0
  3950  012B20  0E01               	movlw	1
  3951  012B22  0100               	movlb	0	; () banked
  3952  012B24  6FBE               	movwf	___awdiv@counter& (0+255),b
  3953  012B26  D006               	goto	l10113
  3954  012B28                     l10111:
  3955                           
  3956                           ; BSR set to: 0
  3957  012B28  0100               	movlb	0	; () banked
  3958  012B2A  90D8               	bcf	status,0,c
  3959  012B2C  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  3960  012B2E  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3961  012B30  0100               	movlb	0	; () banked
  3962  012B32  2BBE               	incf	___awdiv@counter& (0+255),f,b
  3963  012B34                     l10113:
  3964                           
  3965                           ; BSR set to: 0
  3966  012B34  0100               	movlb	0	; () banked
  3967  012B36  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3968  012B38  D7F7               	goto	l10111
  3969  012B3A                     l10115:
  3970                           
  3971                           ; BSR set to: 0
  3972  012B3A  0100               	movlb	0	; () banked
  3973  012B3C  90D8               	bcf	status,0,c
  3974  012B3E  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  3975  012B40  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3976                           
  3977                           ; BSR set to: 0
  3978  012B42  0100               	movlb	0	; () banked
  3979  012B44  51BC               	movf	___awdiv@divisor& (0+255),w,b
  3980  012B46  0100               	movlb	0	; () banked
  3981  012B48  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  3982  012B4A  0100               	movlb	0	; () banked
  3983  012B4C  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3984  012B4E  0100               	movlb	0	; () banked
  3985  012B50  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3986  012B52  A0D8               	btfss	status,0,c
  3987  012B54  D00A               	goto	l10123
  3988                           
  3989                           ; BSR set to: 0
  3990  012B56  0100               	movlb	0	; () banked
  3991  012B58  51BC               	movf	___awdiv@divisor& (0+255),w,b
  3992  012B5A  0100               	movlb	0	; () banked
  3993  012B5C  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  3994  012B5E  0100               	movlb	0	; () banked
  3995  012B60  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3996  012B62  0100               	movlb	0	; () banked
  3997  012B64  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3998                           
  3999                           ; BSR set to: 0
  4000  012B66  0100               	movlb	0	; () banked
  4001  012B68  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  4002  012B6A                     l10123:
  4003                           
  4004                           ; BSR set to: 0
  4005  012B6A  0100               	movlb	0	; () banked
  4006  012B6C  90D8               	bcf	status,0,c
  4007  012B6E  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4008  012B70  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  4009                           
  4010                           ; BSR set to: 0
  4011  012B72  0100               	movlb	0	; () banked
  4012  012B74  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  4013  012B76  D7E1               	goto	l10115
  4014  012B78                     l10127:
  4015                           
  4016                           ; BSR set to: 0
  4017  012B78  0100               	movlb	0	; () banked
  4018  012B7A  51BF               	movf	___awdiv@sign& (0+255),w,b
  4019  012B7C  0100               	movlb	0	; () banked
  4020  012B7E  B4D8               	btfsc	status,2,c
  4021  012B80  D005               	goto	l10131
  4022                           
  4023                           ; BSR set to: 0
  4024  012B82  0100               	movlb	0	; () banked
  4025  012B84  6DC0               	negf	___awdiv@quotient& (0+255),b
  4026  012B86  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4027  012B88  B0D8               	btfsc	status,0,c
  4028  012B8A  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4029  012B8C                     l10131:
  4030                           
  4031                           ; BSR set to: 0
  4032  012B8C  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  4033  012B90  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  4034  012B94  0012               	return	
  4035  012B96                     __end_of___awdiv:
  4036                           	opt stack 0
  4037                           tosu	equ	0xFFF
  4038                           tosh	equ	0xFFE
  4039                           tosl	equ	0xFFD
  4040                           pclath	equ	0xFFA
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           postdec1	equ	0xFE5
  4051                           fsr1h	equ	0xFE2
  4052                           fsr1l	equ	0xFE1
  4053                           indf2	equ	0xFDF
  4054                           postinc2	equ	0xFDE
  4055                           postdec2	equ	0xFDD
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function _Console_IncrementCursor *****************
  4061 ;; Defined at:
  4062 ;;		line 243 in file "Library/Console.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;		None
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      unsigned char 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;Total ram usage:        2 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    8
  4083 ;; This function calls:
  4084 ;;		_Console_FormFeed
  4085 ;;		_Console_NewLine
  4086 ;; This function is called by:
  4087 ;;		_Console_Tab
  4088 ;;		_Console_PrintChar
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text6
  4093  013ADC                     __ptext6:
  4094                           	opt stack 0
  4095  013ADC                     _Console_IncrementCursor:
  4096                           	opt stack 18
  4097                           
  4098                           ;Console.c: 246: lBufferX += 1;
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;incstack = 0
  4102  013ADC  2A35               	incf	_lBufferX,f,c
  4103                           
  4104                           ;Console.c: 248: gCursor.x += 6;
  4105  013ADE  0E06               	movlw	6
  4106  013AE0  263F               	addwf	_gCursor,f,c
  4107  013AE2  0E00               	movlw	0
  4108  013AE4  2240               	addwfc	_gCursor+1,f,c
  4109                           
  4110                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4111  013AE6  0E06               	movlw	6
  4112  013AE8  243F               	addwf	_gCursor,w,c
  4113  013AEA  0100               	movlb	0	; () banked
  4114  013AEC  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  4115  013AEE  0E00               	movlw	0
  4116  013AF0  2040               	addwfc	_gCursor+1,w,c
  4117  013AF2  0100               	movlb	0	; () banked
  4118  013AF4  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4119  013AF6  0100               	movlb	0	; () banked
  4120  013AF8  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4121  013AFA  D009               	goto	l10051
  4122  013AFC  0100               	movlb	0	; () banked
  4123  013AFE  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4124  013B00  E104               	bnz	u6590
  4125  013B02  0E80               	movlw	128
  4126  013B04  0100               	movlb	0	; () banked
  4127  013B06  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4128  013B08  B0D8               	btfsc	status,0,c
  4129  013B0A                     u6590:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;Console.c: 250: Console_NewLine();
  4133  013B0A  EC6A  F099         	call	_Console_NewLine	;wreg free
  4134  013B0E                     l10051:
  4135                           
  4136                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  4137  013B0E  0E08               	movlw	8
  4138  013B10  2441               	addwf	_gCursor+2,w,c
  4139  013B12  0100               	movlb	0	; () banked
  4140  013B14  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  4141  013B16  0E00               	movlw	0
  4142  013B18  2042               	addwfc	_gCursor+3,w,c
  4143  013B1A  0100               	movlb	0	; () banked
  4144  013B1C  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4145  013B1E  0100               	movlb	0	; () banked
  4146  013B20  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4147  013B22  D00C               	goto	l10059
  4148  013B24  0100               	movlb	0	; () banked
  4149  013B26  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4150  013B28  E105               	bnz	u6600
  4151  013B2A  0E80               	movlw	128
  4152  013B2C  0100               	movlb	0	; () banked
  4153  013B2E  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4154  013B30  A0D8               	btfss	status,0,c
  4155  013B32  D004               	goto	l10059
  4156  013B34                     u6600:
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;Console.c: 252: {
  4160                           ;Console.c: 253: Console_FormFeed();
  4161  013B34  ECFB  F099         	call	_Console_FormFeed	;wreg free
  4162                           
  4163                           ;Console.c: 254: return 1;
  4164  013B38  0E01               	movlw	1
  4165  013B3A  0012               	return	
  4166  013B3C                     l10059:
  4167                           
  4168                           ;Console.c: 255: }
  4169                           ;Console.c: 257: return 0;
  4170  013B3C  0E00               	movlw	0
  4171  013B3E  0012               	return	
  4172  013B40                     __end_of_Console_IncrementCursor:
  4173                           	opt stack 0
  4174                           tosu	equ	0xFFF
  4175                           tosh	equ	0xFFE
  4176                           tosl	equ	0xFFD
  4177                           pclath	equ	0xFFA
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _Console_NewLine *****************
  4198 ;; Defined at:
  4199 ;;		line 175 in file "Library/Console.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:        2 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    7
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_Console_IncrementCursor
  4224 ;;		_Console_PrintChar
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text7
  4229  0132D4                     __ptext7:
  4230                           	opt stack 0
  4231  0132D4                     _Console_NewLine:
  4232                           	opt stack 18
  4233                           
  4234                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  4235                           
  4236                           ;incstack = 0
  4237  0132D4  D039               	goto	l9861
  4238  0132D6                     l9853:
  4239                           
  4240                           ;Console.c: 179: {
  4241                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  4242  0132D6  5036               	movf	_lBufferY,w,c
  4243  0132D8  0D14               	mullw	20
  4244  0132DA  0E46               	movlw	low _lBuffer
  4245  0132DC  0100               	movlb	0	; () banked
  4246  0132DE  6FBA               	movwf	??_Console_NewLine& (0+255),b
  4247  0132E0  0E02               	movlw	high _lBuffer
  4248  0132E2  0100               	movlb	0	; () banked
  4249  0132E4  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  4250  0132E6  50F3               	movf	prodl,w,c
  4251  0132E8  0100               	movlb	0	; () banked
  4252  0132EA  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  4253  0132EC  50F4               	movf	prodh,w,c
  4254  0132EE  0100               	movlb	0	; () banked
  4255  0132F0  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4256  0132F2  5035               	movf	_lBufferX,w,c
  4257  0132F4  0D01               	mullw	1
  4258  0132F6  50F3               	movf	prodl,w,c
  4259  0132F8  0100               	movlb	0	; () banked
  4260  0132FA  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  4261  0132FC  6ED9               	movwf	fsr2l,c
  4262  0132FE  50F4               	movf	prodh,w,c
  4263  013300  0100               	movlb	0	; () banked
  4264  013302  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4265  013304  6EDA               	movwf	fsr2h,c
  4266  013306  50DF               	movf	indf2,w,c
  4267  013308  B4D8               	btfsc	status,2,c
  4268  01330A  D01D               	goto	l9859
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  4272  01330C  0E01               	movlw	1
  4273  01330E  0100               	movlb	0	; () banked
  4274  013310  6FFF               	movwf	_change& (0+255),b
  4275                           
  4276                           ; BSR set to: 0
  4277  013312  5036               	movf	_lBufferY,w,c
  4278  013314  0D14               	mullw	20
  4279  013316  0E46               	movlw	low _lBuffer
  4280  013318  0100               	movlb	0	; () banked
  4281  01331A  6FBA               	movwf	??_Console_NewLine& (0+255),b
  4282  01331C  0E02               	movlw	high _lBuffer
  4283  01331E  0100               	movlb	0	; () banked
  4284  013320  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  4285  013322  50F3               	movf	prodl,w,c
  4286  013324  0100               	movlb	0	; () banked
  4287  013326  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  4288  013328  50F4               	movf	prodh,w,c
  4289  01332A  0100               	movlb	0	; () banked
  4290  01332C  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4291  01332E  5035               	movf	_lBufferX,w,c
  4292  013330  0D01               	mullw	1
  4293  013332  50F3               	movf	prodl,w,c
  4294  013334  0100               	movlb	0	; () banked
  4295  013336  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  4296  013338  6ED9               	movwf	fsr2l,c
  4297  01333A  50F4               	movf	prodh,w,c
  4298  01333C  0100               	movlb	0	; () banked
  4299  01333E  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4300  013340  6EDA               	movwf	fsr2h,c
  4301  013342  0E80               	movlw	128
  4302  013344  6EDF               	movwf	indf2,c
  4303  013346                     l9859:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;Console.c: 182: lBufferX ++;
  4307  013346  2A35               	incf	_lBufferX,f,c
  4308  013348                     l9861:
  4309  013348  0E13               	movlw	19
  4310  01334A  6435               	cpfsgt	_lBufferX,c
  4311  01334C  D7C4               	goto	l9853
  4312                           
  4313                           ;Console.c: 183: }
  4314                           ;Console.c: 185: lBufferX = 0;
  4315  01334E  0E00               	movlw	0
  4316  013350  6E35               	movwf	_lBufferX,c
  4317                           
  4318                           ;Console.c: 186: lBufferY ++;
  4319  013352  2A36               	incf	_lBufferY,f,c
  4320                           
  4321                           ;Console.c: 188: gCursor.y += 8;
  4322  013354  0E08               	movlw	8
  4323  013356  2641               	addwf	_gCursor+2,f,c
  4324  013358  0E00               	movlw	0
  4325  01335A  2242               	addwfc	_gCursor+3,f,c
  4326                           
  4327                           ;Console.c: 189: gCursor.x = 6;
  4328  01335C  0E00               	movlw	0
  4329  01335E  6E40               	movwf	_gCursor+1,c
  4330  013360  0E06               	movlw	6
  4331  013362  6E3F               	movwf	_gCursor,c
  4332  013364  0012               	return		;funcret
  4333  013366                     __end_of_Console_NewLine:
  4334                           	opt stack 0
  4335                           tosu	equ	0xFFF
  4336                           tosh	equ	0xFFE
  4337                           tosl	equ	0xFFD
  4338                           pclath	equ	0xFFA
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           postinc0	equ	0xFEE
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1h	equ	0xFE2
  4350                           fsr1l	equ	0xFE1
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           postdec2	equ	0xFDD
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _Console_FormFeed *****************
  4359 ;; Defined at:
  4360 ;;		line 192 in file "Library/Console.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  y               1    3[BANK0 ] unsigned char 
  4365 ;;  x               1    2[BANK0 ] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:        4 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    7
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_Console_IncrementCursor
  4386 ;;		_Console_PrintChar
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text8
  4391  0133F6                     __ptext8:
  4392                           	opt stack 0
  4393  0133F6                     _Console_FormFeed:
  4394                           	opt stack 18
  4395                           
  4396                           ;Console.c: 195: lBufferX = 0;
  4397                           
  4398                           ;incstack = 0
  4399  0133F6  0E00               	movlw	0
  4400  0133F8  6E35               	movwf	_lBufferX,c
  4401                           
  4402                           ;Console.c: 196: lBufferY = 0;
  4403  0133FA  0E00               	movlw	0
  4404  0133FC  6E36               	movwf	_lBufferY,c
  4405                           
  4406                           ;Console.c: 197: UINT8 x, y;
  4407                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  4408  0133FE  0E00               	movlw	0
  4409  013400  0100               	movlb	0	; () banked
  4410  013402  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  4411  013404                     l9873:
  4412                           
  4413                           ; BSR set to: 0
  4414  013404  0E0E               	movlw	14
  4415  013406  0100               	movlb	0	; () banked
  4416  013408  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  4417  01340A  D001               	goto	l9877
  4418  01340C  D02D               	goto	l9895
  4419  01340E                     l9877:
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  4423  01340E  0E00               	movlw	0
  4424  013410  0100               	movlb	0	; () banked
  4425  013412  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  4426  013414                     l9879:
  4427                           
  4428                           ; BSR set to: 0
  4429  013414  0E13               	movlw	19
  4430  013416  0100               	movlb	0	; () banked
  4431  013418  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  4432  01341A  D001               	goto	l9883
  4433  01341C  D022               	goto	l9891
  4434  01341E                     l9883:
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  4438  01341E  0E01               	movlw	1
  4439  013420  0100               	movlb	0	; () banked
  4440  013422  6FFF               	movwf	_change& (0+255),b
  4441                           
  4442                           ; BSR set to: 0
  4443  013424  0100               	movlb	0	; () banked
  4444  013426  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  4445  013428  0D14               	mullw	20
  4446  01342A  0E46               	movlw	low _lBuffer
  4447  01342C  0100               	movlb	0	; () banked
  4448  01342E  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  4449  013430  0E02               	movlw	high _lBuffer
  4450  013432  0100               	movlb	0	; () banked
  4451  013434  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  4452  013436  50F3               	movf	prodl,w,c
  4453  013438  0100               	movlb	0	; () banked
  4454  01343A  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  4455  01343C  50F4               	movf	prodh,w,c
  4456  01343E  0100               	movlb	0	; () banked
  4457  013440  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  4458  013442  0100               	movlb	0	; () banked
  4459  013444  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  4460  013446  0D01               	mullw	1
  4461  013448  50F3               	movf	prodl,w,c
  4462  01344A  0100               	movlb	0	; () banked
  4463  01344C  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  4464  01344E  6ED9               	movwf	fsr2l,c
  4465  013450  50F4               	movf	prodh,w,c
  4466  013452  0100               	movlb	0	; () banked
  4467  013454  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  4468  013456  6EDA               	movwf	fsr2h,c
  4469  013458  0E80               	movlw	128
  4470  01345A  6EDF               	movwf	indf2,c
  4471                           
  4472                           ; BSR set to: 0
  4473  01345C  0100               	movlb	0	; () banked
  4474  01345E  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  4475  013460  D7D9               	goto	l9879
  4476  013462                     l9891:
  4477                           
  4478                           ; BSR set to: 0
  4479  013462  0100               	movlb	0	; () banked
  4480  013464  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  4481  013466  D7CE               	goto	l9873
  4482  013468                     l9895:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;Console.c: 204: clearall = 1;
  4486  013468  0E01               	movlw	1
  4487  01346A  0100               	movlb	0	; () banked
  4488  01346C  6F7A               	movwf	_clearall& (0+255),b
  4489                           
  4490                           ;Console.c: 205: gCursor.x = 6;
  4491  01346E  0E00               	movlw	0
  4492  013470  6E40               	movwf	_gCursor+1,c
  4493  013472  0E06               	movlw	6
  4494  013474  6E3F               	movwf	_gCursor,c
  4495                           
  4496                           ;Console.c: 206: gCursor.y = 6;
  4497  013476  0E00               	movlw	0
  4498  013478  6E42               	movwf	_gCursor+3,c
  4499  01347A  0E06               	movlw	6
  4500  01347C  6E41               	movwf	_gCursor+2,c
  4501                           
  4502                           ; BSR set to: 0
  4503  01347E  0012               	return		;funcret
  4504  013480                     __end_of_Console_FormFeed:
  4505                           	opt stack 0
  4506                           tosu	equ	0xFFF
  4507                           tosh	equ	0xFFE
  4508                           tosl	equ	0xFFD
  4509                           pclath	equ	0xFFA
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postdec1	equ	0xFE5
  4520                           fsr1h	equ	0xFE2
  4521                           fsr1l	equ	0xFE1
  4522                           indf2	equ	0xFDF
  4523                           postinc2	equ	0xFDE
  4524                           postdec2	equ	0xFDD
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _Console_ResetCursor *****************
  4530 ;; Defined at:
  4531 ;;		line 297 in file "Library/Console.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    7
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_Console_PrintChar
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text9
  4560  01469A                     __ptext9:
  4561                           	opt stack 0
  4562  01469A                     _Console_ResetCursor:
  4563                           	opt stack 20
  4564                           
  4565                           ;Console.c: 299: gCursor.x = 6;
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;incstack = 0
  4569  01469A  0E00               	movlw	0
  4570  01469C  6E40               	movwf	_gCursor+1,c
  4571  01469E  0E06               	movlw	6
  4572  0146A0  6E3F               	movwf	_gCursor,c
  4573                           
  4574                           ;Console.c: 300: gCursor.y = 6;
  4575  0146A2  0E00               	movlw	0
  4576  0146A4  6E42               	movwf	_gCursor+3,c
  4577  0146A6  0E06               	movlw	6
  4578  0146A8  6E41               	movwf	_gCursor+2,c
  4579                           
  4580                           ;Console.c: 303: lBufferX = 0;
  4581  0146AA  0E00               	movlw	0
  4582  0146AC  6E35               	movwf	_lBufferX,c
  4583                           
  4584                           ;Console.c: 304: lBufferY = 0;
  4585  0146AE  0E00               	movlw	0
  4586  0146B0  6E36               	movwf	_lBufferY,c
  4587  0146B2  0012               	return		;funcret
  4588  0146B4                     __end_of_Console_ResetCursor:
  4589                           	opt stack 0
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _Console_Backspace *****************
  4614 ;; Defined at:
  4615 ;;		line 209 in file "Library/Console.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;		None
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;		None
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:        0 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    8
  4636 ;; This function calls:
  4637 ;;		_Console_ClearCursor
  4638 ;; This function is called by:
  4639 ;;		_Console_PrintChar
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text10
  4644  013E64                     __ptext10:
  4645                           	opt stack 0
  4646  013E64                     _Console_Backspace:
  4647                           	opt stack 19
  4648                           
  4649                           ;Console.c: 211: if (lBufferX > 0)
  4650                           
  4651                           ;incstack = 0
  4652  013E64  5035               	movf	_lBufferX,w,c
  4653  013E66  B4D8               	btfsc	status,2,c
  4654  013E68  D006               	goto	l10331
  4655                           
  4656                           ;Console.c: 212: {
  4657                           ;Console.c: 213: gCursor.x -= 6;
  4658  013E6A  0EFA               	movlw	250
  4659  013E6C  263F               	addwf	_gCursor,f,c
  4660  013E6E  0EFF               	movlw	255
  4661  013E70  2240               	addwfc	_gCursor+1,f,c
  4662                           
  4663                           ;Console.c: 216: lBufferX --;
  4664  013E72  0635               	decf	_lBufferX,f,c
  4665                           
  4666                           ;Console.c: 218: }
  4667  013E74  D01B               	goto	l10343
  4668  013E76                     l10331:
  4669                           
  4670                           ;Console.c: 219: else if (lBufferY > 0)
  4671  013E76  5036               	movf	_lBufferY,w,c
  4672  013E78  B4D8               	btfsc	status,2,c
  4673  013E7A  D00C               	goto	l10341
  4674                           
  4675                           ;Console.c: 220: {
  4676                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  4677  013E7C  0E00               	movlw	0
  4678  013E7E  6E40               	movwf	_gCursor+1,c
  4679  013E80  0E72               	movlw	114
  4680  013E82  6E3F               	movwf	_gCursor,c
  4681                           
  4682                           ;Console.c: 222: gCursor.y -= 8;
  4683  013E84  0EF8               	movlw	248
  4684  013E86  2641               	addwf	_gCursor+2,f,c
  4685  013E88  0EFF               	movlw	255
  4686  013E8A  2242               	addwfc	_gCursor+3,f,c
  4687                           
  4688                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  4689  013E8C  0E13               	movlw	19
  4690  013E8E  6E35               	movwf	_lBufferX,c
  4691                           
  4692                           ;Console.c: 226: lBufferY --;
  4693  013E90  0636               	decf	_lBufferY,f,c
  4694                           
  4695                           ;Console.c: 228: }
  4696  013E92  D00C               	goto	l10343
  4697  013E94                     l10341:
  4698                           
  4699                           ;Console.c: 229: else
  4700                           ;Console.c: 230: {
  4701                           ;Console.c: 231: gCursor.x = 6;
  4702  013E94  0E00               	movlw	0
  4703  013E96  6E40               	movwf	_gCursor+1,c
  4704  013E98  0E06               	movlw	6
  4705  013E9A  6E3F               	movwf	_gCursor,c
  4706                           
  4707                           ;Console.c: 232: gCursor.y = 6;
  4708  013E9C  0E00               	movlw	0
  4709  013E9E  6E42               	movwf	_gCursor+3,c
  4710  013EA0  0E06               	movlw	6
  4711  013EA2  6E41               	movwf	_gCursor+2,c
  4712                           
  4713                           ;Console.c: 235: lBufferX = 0;
  4714  013EA4  0E00               	movlw	0
  4715  013EA6  6E35               	movwf	_lBufferX,c
  4716                           
  4717                           ;Console.c: 236: lBufferY = 0;
  4718  013EA8  0E00               	movlw	0
  4719  013EAA  6E36               	movwf	_lBufferY,c
  4720  013EAC                     l10343:
  4721                           
  4722                           ;Console.c: 238: }
  4723                           ;Console.c: 240: Console_ClearCursor();
  4724  013EAC  ECF2  F0A0         	call	_Console_ClearCursor	;wreg free
  4725  013EB0  0012               	return		;funcret
  4726  013EB2                     __end_of_Console_Backspace:
  4727                           	opt stack 0
  4728                           tosu	equ	0xFFF
  4729                           tosh	equ	0xFFE
  4730                           tosl	equ	0xFFD
  4731                           pclath	equ	0xFFA
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           postdec1	equ	0xFE5
  4742                           fsr1h	equ	0xFE2
  4743                           fsr1l	equ	0xFE1
  4744                           indf2	equ	0xFDF
  4745                           postinc2	equ	0xFDE
  4746                           postdec2	equ	0xFDD
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function _Console_ClearCursor *****************
  4752 ;; Defined at:
  4753 ;;		line 308 in file "Library/Console.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;		None
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;		None
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;Total ram usage:        2 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    7
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_Console_Backspace
  4778 ;;		_Console_Tab
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text11
  4783  0141E4                     __ptext11:
  4784                           	opt stack 0
  4785  0141E4                     _Console_ClearCursor:
  4786                           	opt stack 19
  4787                           
  4788                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  4789                           
  4790                           ;incstack = 0
  4791  0141E4  0E01               	movlw	1
  4792  0141E6  0100               	movlb	0	; () banked
  4793  0141E8  6FFF               	movwf	_change& (0+255),b
  4794                           
  4795                           ; BSR set to: 0
  4796  0141EA  5036               	movf	_lBufferY,w,c
  4797  0141EC  0D14               	mullw	20
  4798  0141EE  0E46               	movlw	low _lBuffer
  4799  0141F0  0100               	movlb	0	; () banked
  4800  0141F2  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  4801  0141F4  0E02               	movlw	high _lBuffer
  4802  0141F6  0100               	movlb	0	; () banked
  4803  0141F8  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  4804  0141FA  50F3               	movf	prodl,w,c
  4805  0141FC  0100               	movlb	0	; () banked
  4806  0141FE  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  4807  014200  50F4               	movf	prodh,w,c
  4808  014202  0100               	movlb	0	; () banked
  4809  014204  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  4810  014206  5035               	movf	_lBufferX,w,c
  4811  014208  0D01               	mullw	1
  4812  01420A  50F3               	movf	prodl,w,c
  4813  01420C  0100               	movlb	0	; () banked
  4814  01420E  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  4815  014210  6ED9               	movwf	fsr2l,c
  4816  014212  50F4               	movf	prodh,w,c
  4817  014214  0100               	movlb	0	; () banked
  4818  014216  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  4819  014218  6EDA               	movwf	fsr2h,c
  4820  01421A  0E80               	movlw	128
  4821  01421C  6EDF               	movwf	indf2,c
  4822                           
  4823                           ; BSR set to: 0
  4824  01421E  0012               	return		;funcret
  4825  014220                     __end_of_Console_ClearCursor:
  4826                           	opt stack 0
  4827                           tosu	equ	0xFFF
  4828                           tosh	equ	0xFFE
  4829                           tosl	equ	0xFFD
  4830                           pclath	equ	0xFFA
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           postinc0	equ	0xFEE
  4839                           wreg	equ	0xFE8
  4840                           postdec1	equ	0xFE5
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _Motor_Speed *****************
  4851 ;; Defined at:
  4852 ;;		line 117 in file "Library/Motor.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  4855 ;;		 -> main@Stepper(6), 
  4856 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      unsigned char 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:        4 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    9
  4875 ;; This function calls:
  4876 ;;		_Timer0_Init
  4877 ;; This function is called by:
  4878 ;;		_main
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text12
  4883  0144E0                     __ptext12:
  4884                           	opt stack 0
  4885  0144E0                     _Motor_Speed:
  4886                           	opt stack 21
  4887                           
  4888                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;incstack = 0
  4892  0144E0  0100               	movlb	0	; () banked
  4893  0144E2  EE20 F002          	lfsr	2,2
  4894  0144E6  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  4895  0144E8  26D9               	addwf	fsr2l,f,c
  4896  0144EA  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  4897  0144EC  22DA               	addwfc	fsr2h,f,c
  4898  0144EE  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  4899  0144F2  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;Motor.c: 120: Timer0_Init(pFrequency);
  4903  0144F6  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  4904  0144FA  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  4905  0144FE  0100               	movlb	0	; () banked
  4906  014500  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  4907  014502  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  4908  014504  EC26  F090         	call	_Timer0_Init	;wreg free
  4909  014508  0012               	return	
  4910  01450A                     __end_of_Motor_Speed:
  4911                           	opt stack 0
  4912                           tosu	equ	0xFFF
  4913                           tosh	equ	0xFFE
  4914                           tosl	equ	0xFFD
  4915                           pclath	equ	0xFFA
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           intcon	equ	0xFF2
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _Motor_Move *****************
  4936 ;; Defined at:
  4937 ;;		line 51 in file "Library/Motor.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  4940 ;;		 -> main@Stepper(6), 
  4941 ;;  pDelta          2    5[BANK0 ] short 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      unsigned char 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        6 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    8
  4960 ;; This function calls:
  4961 ;;		_Timer0_Start
  4962 ;; This function is called by:
  4963 ;;		_main
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text13
  4968  01425C                     __ptext13:
  4969                           	opt stack 0
  4970  01425C                     _Motor_Move:
  4971                           	opt stack 22
  4972                           
  4973                           ;Motor.c: 54: lMotor = pMotor;
  4974                           
  4975                           ;incstack = 0
  4976  01425C  C0BD  F02C         	movff	Motor_Move@pMotor,_lMotor
  4977  014260  C0BE  F02D         	movff	Motor_Move@pMotor+1,_lMotor+1
  4978                           
  4979                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  4980  014264  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  4981  014268  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  4982  01426C  50DE               	movf	postinc2,w,c
  4983  01426E  10DE               	iorwf	postinc2,w,c
  4984  014270  A4D8               	btfss	status,2,c
  4985  014272  0012               	return	
  4986                           
  4987                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  4988                           
  4989                           ;Motor.c: 59: return 0;
  4990                           ;	Return value of _Motor_Move is never used
  4991  014274  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  4992  014278  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  4993  01427C  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  4994  014280  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  4995                           
  4996                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  4997  014284  C06B  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  4998  014288  C06C  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  4999  01428C  C06D  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  5000  014290  ECAE  F0A2         	call	_Timer0_Start	;wreg free
  5001  014294  0012               	return	
  5002  014296                     __end_of_Motor_Move:
  5003                           	opt stack 0
  5004                           tosu	equ	0xFFF
  5005                           tosh	equ	0xFFE
  5006                           tosl	equ	0xFFD
  5007                           pclath	equ	0xFFA
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           postinc0	equ	0xFEE
  5016                           wreg	equ	0xFE8
  5017                           postdec1	equ	0xFE5
  5018                           fsr1h	equ	0xFE2
  5019                           fsr1l	equ	0xFE1
  5020                           indf2	equ	0xFDF
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _Timer0_Start *****************
  5028 ;; Defined at:
  5029 ;;		line 75 in file "Library/Timer0.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  5032 ;;		 -> Absolute function(1), Motor_Step(1), 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5044 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;Total ram usage:        3 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    7
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_Motor_Move
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text14
  5059  01455C                     __ptext14:
  5060                           	opt stack 0
  5061  01455C                     _Timer0_Start:
  5062                           	opt stack 22
  5063                           
  5064                           ;Timer0.c: 77: gISR = pFunction;
  5065                           
  5066                           ;incstack = 0
  5067  01455C  C0BA  F068         	movff	Timer0_Start@pFunction,_gISR
  5068  014560  C0BB  F069         	movff	Timer0_Start@pFunction+1,_gISR+1
  5069  014564  C0BC  F06A         	movff	Timer0_Start@pFunction+2,_gISR+2
  5070                           
  5071                           ;Timer0.c: 78: TMR0 = COUNTER;
  5072  014568  C02A  FFD6         	movff	_COUNTER,4054	;volatile
  5073  01456C  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
  5074                           
  5075                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  5076  014570  50D5               	movf	4053,w,c	;volatile
  5077  014572  1834               	xorwf	_INDEX,w,c
  5078  014574  0BF8               	andlw	-8
  5079  014576  1834               	xorwf	_INDEX,w,c
  5080  014578  6ED5               	movwf	4053,c	;volatile
  5081                           
  5082                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  5083  01457A  94F2               	bcf	intcon,2,c	;volatile
  5084                           
  5085                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  5086  01457C  8AF2               	bsf	intcon,5,c	;volatile
  5087  01457E  0012               	return		;funcret
  5088  014580                     __end_of_Timer0_Start:
  5089                           	opt stack 0
  5090                           tosu	equ	0xFFF
  5091                           tosh	equ	0xFFE
  5092                           tosl	equ	0xFFD
  5093                           pclath	equ	0xFFA
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           intcon	equ	0xFF2
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _Motor_Init *****************
  5114 ;; Defined at:
  5115 ;;		line 26 in file "Library/Motor.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  5118 ;;		 -> main@Stepper(6), 
  5119 ;;  pAddress        2   47[BANK0 ] unsigned short 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        4 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:   12
  5138 ;; This function calls:
  5139 ;;		_Port_SetPin
  5140 ;;		_Port_SetPinType
  5141 ;;		_Timer0_Init
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text15
  5148  0126D8                     __ptext15:
  5149                           	opt stack 0
  5150  0126D8                     _Motor_Init:
  5151                           	opt stack 18
  5152                           
  5153                           ;Motor.c: 28: pMotor->mDelta = 0;
  5154                           
  5155                           ;incstack = 0
  5156  0126D8  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
  5157  0126DC  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  5158  0126E0  0E00               	movlw	0
  5159  0126E2  6EDE               	movwf	postinc2,c
  5160  0126E4  0E00               	movlw	0
  5161  0126E6  6EDD               	movwf	postdec2,c
  5162                           
  5163                           ;Motor.c: 29: pMotor->mFrequency = 0;
  5164  0126E8  0100               	movlb	0	; () banked
  5165  0126EA  EE20 F002          	lfsr	2,2
  5166  0126EE  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
  5167  0126F0  26D9               	addwf	fsr2l,f,c
  5168  0126F2  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  5169  0126F4  22DA               	addwfc	fsr2h,f,c
  5170  0126F6  0E00               	movlw	0
  5171  0126F8  6EDE               	movwf	postinc2,c
  5172  0126FA  0E00               	movlw	0
  5173  0126FC  6EDD               	movwf	postdec2,c
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  5177  0126FE  0100               	movlb	0	; () banked
  5178  012700  EE20 F004          	lfsr	2,4
  5179  012704  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
  5180  012706  26D9               	addwf	fsr2l,f,c
  5181  012708  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  5182  01270A  22DA               	addwfc	fsr2h,f,c
  5183  01270C  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
  5184  012710  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  5188  012714  0E92               	movlw	low _PortE
  5189  012716  0100               	movlb	0	; () banked
  5190  012718  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  5191  01271A  0E00               	movlw	high _PortE
  5192  01271C  0100               	movlb	0	; () banked
  5193  01271E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5194  012720  0E00               	movlw	0
  5195  012722  0100               	movlb	0	; () banked
  5196  012724  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  5197  012726  0E03               	movlw	3
  5198  012728  0100               	movlb	0	; () banked
  5199  01272A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  5200  01272C  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  5201                           
  5202                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  5203  012730  0E92               	movlw	low _PortE
  5204  012732  0100               	movlb	0	; () banked
  5205  012734  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  5206  012736  0E00               	movlw	high _PortE
  5207  012738  0100               	movlb	0	; () banked
  5208  01273A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5209  01273C  0E01               	movlw	1
  5210  01273E  0100               	movlb	0	; () banked
  5211  012740  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  5212  012742  0E03               	movlw	3
  5213  012744  0100               	movlb	0	; () banked
  5214  012746  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  5215  012748  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  5216                           
  5217                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  5218  01274C  0E92               	movlw	low _PortE
  5219  01274E  0100               	movlb	0	; () banked
  5220  012750  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  5221  012752  0E00               	movlw	high _PortE
  5222  012754  0100               	movlb	0	; () banked
  5223  012756  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5224  012758  0E00               	movlw	0
  5225  01275A  0100               	movlb	0	; () banked
  5226  01275C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  5227  01275E  0E00               	movlw	0
  5228  012760  0100               	movlb	0	; () banked
  5229  012762  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  5230  012764  ECA9  F094         	call	_Port_SetPin	;wreg free
  5231                           
  5232                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  5233  012768  0E92               	movlw	low _PortE
  5234  01276A  0100               	movlb	0	; () banked
  5235  01276C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  5236  01276E  0E00               	movlw	high _PortE
  5237  012770  0100               	movlb	0	; () banked
  5238  012772  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5239  012774  0E01               	movlw	1
  5240  012776  0100               	movlb	0	; () banked
  5241  012778  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  5242  01277A  0E00               	movlw	0
  5243  01277C  0100               	movlb	0	; () banked
  5244  01277E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  5245  012780  ECA9  F094         	call	_Port_SetPin	;wreg free
  5246                           
  5247                           ;Motor.c: 38: lStepFunction = Motor_Step;
  5248  012784  0EF2               	movlw	low _Motor_Step
  5249  012786  0100               	movlb	0	; () banked
  5250  012788  6F6B               	movwf	_lStepFunction& (0+255),b
  5251  01278A  0E22               	movlw	high _Motor_Step
  5252  01278C  0100               	movlb	0	; () banked
  5253  01278E  6F6C               	movwf	(_lStepFunction+1)& (0+255),b
  5254  012790  0E01               	movlw	low (_Motor_Step shr (0+16))
  5255  012792  0100               	movlb	0	; () banked
  5256  012794  6F6D               	movwf	(_lStepFunction+2)& (0+255),b
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;Motor.c: 39: Timer0_Init(1000);
  5260  012796  0EE8               	movlw	232
  5261  012798  0100               	movlb	0	; () banked
  5262  01279A  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
  5263  01279C  0E03               	movlw	3
  5264  01279E  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  5265  0127A0  0E00               	movlw	0
  5266  0127A2  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  5267  0127A4  0E00               	movlw	0
  5268  0127A6  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  5269  0127A8  EC26  F090         	call	_Timer0_Init	;wreg free
  5270  0127AC  0012               	return		;funcret
  5271  0127AE                     __end_of_Motor_Init:
  5272                           	opt stack 0
  5273                           tosu	equ	0xFFF
  5274                           tosh	equ	0xFFE
  5275                           tosl	equ	0xFFD
  5276                           pclath	equ	0xFFA
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           postdec1	equ	0xFE5
  5287                           fsr1h	equ	0xFE2
  5288                           fsr1l	equ	0xFE1
  5289                           indf2	equ	0xFDF
  5290                           postinc2	equ	0xFDE
  5291                           postdec2	equ	0xFDD
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function _Timer0_Init *****************
  5297 ;; Defined at:
  5298 ;;		line 25 in file "Library/Timer0.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  5303 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      void 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5313 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;Total ram usage:       14 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    8
  5320 ;; This function calls:
  5321 ;;		_Timer0_Clear
  5322 ;;		___lldiv
  5323 ;; This function is called by:
  5324 ;;		_Motor_Init
  5325 ;;		_Motor_Speed
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text16
  5330  01204C                     __ptext16:
  5331                           	opt stack 0
  5332  01204C                     _Timer0_Init:
  5333                           	opt stack 21
  5334                           
  5335                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  5336                           
  5337                           ;incstack = 0
  5338  01204C  0E80               	movlw	128
  5339  01204E  0100               	movlb	0	; () banked
  5340  012050  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
  5341  012052  0E8D               	movlw	141
  5342  012054  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  5343  012056  0E5B               	movlw	91
  5344  012058  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  5345  01205A  0E00               	movlw	0
  5346  01205C  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  5350                           ;Timer0.c: 31: static UINT8 PRE = 0;
  5351                           ;Timer0.c: 32: static UINT32 DIV = 0;
  5352                           ;Timer0.c: 34: UINT32 DIVIDE;
  5353                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
  5354  01205E  9ED5               	bcf	4053,7,c	;volatile
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;Timer0.c: 38: if (pFrequency == 0)
  5358  012060  0100               	movlb	0	; () banked
  5359  012062  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
  5360  012064  0100               	movlb	0	; () banked
  5361  012066  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  5362  012068  0100               	movlb	0	; () banked
  5363  01206A  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  5364  01206C  0100               	movlb	0	; () banked
  5365  01206E  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  5366  012070  B4D8               	btfsc	status,2,c
  5367  012072  0012               	return	
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;Timer0.c: 41: T0CONbits.PSA = 0;
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;Timer0.c: 39: return;
  5374  012074  96D5               	bcf	4053,3,c	;volatile
  5375                           
  5376                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
  5377  012076  9CD5               	bcf	4053,6,c	;volatile
  5378                           
  5379                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
  5380  012078  9AD5               	bcf	4053,5,c	;volatile
  5381                           
  5382                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
  5383  01207A  98D5               	bcf	4053,4,c	;volatile
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
  5387  01207C  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  5388  012080  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  5389  012084  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  5390  012088  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  5391  01208C  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  5392  012090  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  5393  012094  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  5394  012098  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  5395  01209C  ECCB  F095         	call	___lldiv	;wreg free
  5396  0120A0  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
  5397  0120A4  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  5398  0120A8  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  5399  0120AC  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  5400                           
  5401                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  5402  0120B0  D009               	goto	l11275
  5403  0120B2                     l11265:
  5404                           
  5405                           ;Timer0.c: 50: {
  5406                           ;Timer0.c: 51: INDEX ++;
  5407  0120B2  2A34               	incf	_INDEX,f,c
  5408                           
  5409                           ;Timer0.c: 52: if (INDEX >= 3)
  5410  0120B4  0E02               	movlw	2
  5411  0120B6  6434               	cpfsgt	_INDEX,c
  5412  0120B8  D001               	goto	l11271
  5413  0120BA  D02D               	goto	l11277
  5414  0120BC                     l11271:
  5415                           
  5416                           ;Timer0.c: 56: if (INDEX >= 8)
  5417  0120BC  0E07               	movlw	7
  5418  0120BE  6434               	cpfsgt	_INDEX,c
  5419  0120C0  D001               	goto	l11275
  5420  0120C2  0012               	return	
  5421  0120C4                     l11275:
  5422  0120C4  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  5423  0120C8  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  5424  0120CC  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  5425  0120D0  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  5426  0120D4  5034               	movf	_INDEX,w,c
  5427  0120D6  0D02               	mullw	2
  5428  0120D8  0E83               	movlw	low Timer0_Init@PRESCALE
  5429  0120DA  24F3               	addwf	prodl,w,c
  5430  0120DC  6EF6               	movwf	tblptrl,c
  5431  0120DE  0EFD               	movlw	high Timer0_Init@PRESCALE
  5432  0120E0  20F4               	addwfc	prodh,w,c
  5433  0120E2  6EF7               	movwf	tblptrh,c
  5434  0120E4                     	if	1	;There are 3 active tblptr bytes
  5435  0120E4  6AF8               	clrf	tblptru,c
  5436  0120E6  0E00               	movlw	low (__mediumconst shr (0+16))
  5437  0120E8  22F8               	addwfc	tblptru,f,c
  5438  0120EA                     	endif
  5439  0120EA  0009               	tblrd		*+
  5440  0120EC  CFF5 F0CB          	movff	tablat,??_Timer0_Init
  5441  0120F0  0009               	tblrd		*+
  5442  0120F2  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
  5443  0120F6  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
  5444  0120FA  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  5445  0120FE  0100               	movlb	0	; () banked
  5446  012100  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
  5447  012102  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
  5448  012104  ECCB  F095         	call	___lldiv	;wreg free
  5449  012108  0100               	movlb	0	; () banked
  5450  01210A  51BD               	movf	(?___lldiv+3)& (0+255),w,b
  5451  01210C  E1D2               	bnz	l11265
  5452  01210E  0100               	movlb	0	; () banked
  5453  012110  05BC               	decf	(?___lldiv+2)& (0+255),w,b
  5454  012112  B0D8               	btfsc	status,0,c
  5455  012114  D7CE               	goto	l11265
  5456  012116                     l11277:
  5457                           
  5458                           ;Timer0.c: 58: }
  5459                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
  5460  012116  5034               	movf	_INDEX,w,c
  5461  012118  0D02               	mullw	2
  5462  01211A  0E83               	movlw	low Timer0_Init@PRESCALE
  5463  01211C  24F3               	addwf	prodl,w,c
  5464  01211E  6EF6               	movwf	tblptrl,c
  5465  012120  0EFD               	movlw	high Timer0_Init@PRESCALE
  5466  012122  20F4               	addwfc	prodh,w,c
  5467  012124  6EF7               	movwf	tblptrh,c
  5468  012126                     	if	1	;There are 3 active tblptr bytes
  5469  012126  6AF8               	clrf	tblptru,c
  5470  012128  0E00               	movlw	low (__mediumconst shr (0+16))
  5471  01212A  22F8               	addwfc	tblptru,f,c
  5472  01212C                     	endif
  5473  01212C  0008               	tblrd		*
  5474  01212E  CFF5 F031          	movff	tablat,Timer0_Init@PRE
  5475                           
  5476                           ;Timer0.c: 63: DIV = (DIVIDE-1);
  5477  012132  0EFF               	movlw	255
  5478  012134  0100               	movlb	0	; () banked
  5479  012136  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  5480  012138  0100               	movlb	0	; () banked
  5481  01213A  6F60               	movwf	Timer0_Init@DIV& (0+255),b
  5482  01213C  0EFF               	movlw	255
  5483  01213E  0100               	movlb	0	; () banked
  5484  012140  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  5485  012142  0100               	movlb	0	; () banked
  5486  012144  6F61               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  5487  012146  0EFF               	movlw	255
  5488  012148  0100               	movlb	0	; () banked
  5489  01214A  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  5490  01214C  0100               	movlb	0	; () banked
  5491  01214E  6F62               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  5492  012150  0EFF               	movlw	255
  5493  012152  0100               	movlb	0	; () banked
  5494  012154  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  5495  012156  0100               	movlb	0	; () banked
  5496  012158  6F63               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
  5500  01215A  C060  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
  5501  01215E  C061  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  5502  012162  C062  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  5503  012166  C063  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  5504  01216A  5031               	movf	Timer0_Init@PRE,w,c
  5505  01216C  0100               	movlb	0	; () banked
  5506  01216E  6FBE               	movwf	___lldiv@divisor& (0+255),b
  5507  012170  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
  5508  012172  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
  5509  012174  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
  5510  012176  ECCB  F095         	call	___lldiv	;wreg free
  5511  01217A  0100               	movlb	0	; () banked
  5512  01217C  1FBA               	comf	?___lldiv& (0+255),f,b
  5513  01217E  0100               	movlb	0	; () banked
  5514  012180  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
  5515  012182  0100               	movlb	0	; () banked
  5516  012184  4BBA               	infsnz	?___lldiv& (0+255),f,b
  5517  012186  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
  5518  012188  0EFF               	movlw	255
  5519  01218A  0100               	movlb	0	; () banked
  5520  01218C  25BA               	addwf	?___lldiv& (0+255),w,b
  5521  01218E  6E2A               	movwf	_COUNTER,c
  5522  012190  0EFF               	movlw	255
  5523  012192  0100               	movlb	0	; () banked
  5524  012194  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
  5525  012196  6E2B               	movwf	_COUNTER+1,c
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;Timer0.c: 68: Timer0_Clear();
  5529  012198  EC17  F0A4         	call	_Timer0_Clear	;wreg free
  5530                           
  5531                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
  5532  01219C  8ED5               	bsf	4053,7,c	;volatile
  5533  01219E  0012               	return		;funcret
  5534  0121A0                     __end_of_Timer0_Init:
  5535                           	opt stack 0
  5536                           tosu	equ	0xFFF
  5537                           tosh	equ	0xFFE
  5538                           tosl	equ	0xFFD
  5539                           pclath	equ	0xFFA
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1h	equ	0xFE2
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _Timer0_Clear *****************
  5560 ;; Defined at:
  5561 ;;		line 20 in file "Library/Timer0.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		None
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;Total ram usage:        0 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    7
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_Timer0_Init
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text17
  5590  01482E                     __ptext17:
  5591                           	opt stack 0
  5592  01482E                     _Timer0_Clear:
  5593                           	opt stack 21
  5594                           
  5595                           ;Timer0.c: 22: TMR0 = COUNTER;
  5596                           
  5597                           ;incstack = 0
  5598  01482E  C02A  FFD6         	movff	_COUNTER,4054	;volatile
  5599  014832  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
  5600                           
  5601                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
  5602  014836  94F2               	bcf	intcon,2,c	;volatile
  5603  014838  0012               	return		;funcret
  5604  01483A                     __end_of_Timer0_Clear:
  5605                           	opt stack 0
  5606                           tosu	equ	0xFFF
  5607                           tosh	equ	0xFFE
  5608                           tosl	equ	0xFFD
  5609                           pclath	equ	0xFFA
  5610                           tblptru	equ	0xFF8
  5611                           tblptrh	equ	0xFF7
  5612                           tblptrl	equ	0xFF6
  5613                           tablat	equ	0xFF5
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           intcon	equ	0xFF2
  5617                           postinc0	equ	0xFEE
  5618                           wreg	equ	0xFE8
  5619                           postdec1	equ	0xFE5
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _MXK_Init *****************
  5630 ;; Defined at:
  5631 ;;		line 33 in file "Library/MXK.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:   16
  5652 ;; This function calls:
  5653 ;;		_LED_Init
  5654 ;;		_Port_Init
  5655 ;;		_Port_SetPin
  5656 ;;		_Port_SetPinType
  5657 ;;		_Port_SetQuadType
  5658 ;;		_Port_SetType
  5659 ;;		_delay_ms
  5660 ;; This function is called by:
  5661 ;;		_main
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text18
  5666  011BFA                     __ptext18:
  5667                           	opt stack 0
  5668  011BFA                     _MXK_Init:
  5669                           	opt stack 14
  5670                           
  5671                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5672                           
  5673                           ;incstack = 0
  5674  011BFA  0E01               	movlw	1
  5675  011BFC  6E44               	movwf	_Bus_State,c
  5676                           
  5677                           ;MXK.c: 36: lQueue = (Function)0;
  5678  011BFE  0E00               	movlw	0
  5679  011C00  6E25               	movwf	_lQueue,c	;volatile
  5680  011C02  0E00               	movlw	0
  5681  011C04  6E26               	movwf	_lQueue+1,c	;volatile
  5682  011C06  0E00               	movlw	0
  5683  011C08  6E27               	movwf	_lQueue+2,c	;volatile
  5684                           
  5685                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5686  011C0A  0E84               	movlw	low _PortA
  5687  011C0C  0101               	movlb	1	; () banked
  5688  011C0E  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5689  011C10  0E01               	movlw	high _PortA
  5690  011C12  0101               	movlb	1	; () banked
  5691  011C14  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5692  011C16  0E00               	movlw	0
  5693  011C18  0101               	movlb	1	; () banked
  5694  011C1A  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5695  011C1C  EC6E  F08C         	call	_Port_Init	;wreg free
  5696                           
  5697                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5698  011C20  0E8E               	movlw	low _PortB
  5699  011C22  0101               	movlb	1	; () banked
  5700  011C24  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5701  011C26  0E01               	movlw	high _PortB
  5702  011C28  0101               	movlb	1	; () banked
  5703  011C2A  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5704  011C2C  0E01               	movlw	1
  5705  011C2E  0101               	movlb	1	; () banked
  5706  011C30  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5707  011C32  EC6E  F08C         	call	_Port_Init	;wreg free
  5708                           
  5709                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5710  011C36  0E7E               	movlw	low _PortC
  5711  011C38  0101               	movlb	1	; () banked
  5712  011C3A  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5713  011C3C  0E00               	movlw	high _PortC
  5714  011C3E  0101               	movlb	1	; () banked
  5715  011C40  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5716  011C42  0E02               	movlw	2
  5717  011C44  0101               	movlb	1	; () banked
  5718  011C46  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5719  011C48  EC6E  F08C         	call	_Port_Init	;wreg free
  5720                           
  5721                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5722  011C4C  0E88               	movlw	low _PortD
  5723  011C4E  0101               	movlb	1	; () banked
  5724  011C50  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5725  011C52  0E00               	movlw	high _PortD
  5726  011C54  0101               	movlb	1	; () banked
  5727  011C56  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5728  011C58  0E03               	movlw	3
  5729  011C5A  0101               	movlb	1	; () banked
  5730  011C5C  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5731  011C5E  EC6E  F08C         	call	_Port_Init	;wreg free
  5732                           
  5733                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5734  011C62  0E92               	movlw	low _PortE
  5735  011C64  0101               	movlb	1	; () banked
  5736  011C66  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5737  011C68  0E00               	movlw	high _PortE
  5738  011C6A  0101               	movlb	1	; () banked
  5739  011C6C  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5740  011C6E  0E04               	movlw	4
  5741  011C70  0101               	movlb	1	; () banked
  5742  011C72  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5743  011C74  EC6E  F08C         	call	_Port_Init	;wreg free
  5744                           
  5745                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5746  011C78  0E98               	movlw	low _PortF
  5747  011C7A  0101               	movlb	1	; () banked
  5748  011C7C  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5749  011C7E  0E01               	movlw	high _PortF
  5750  011C80  0101               	movlb	1	; () banked
  5751  011C82  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5752  011C84  0E05               	movlw	5
  5753  011C86  0101               	movlb	1	; () banked
  5754  011C88  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5755  011C8A  EC6E  F08C         	call	_Port_Init	;wreg free
  5756                           
  5757                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5758  011C8E  0EA2               	movlw	low _PortG
  5759  011C90  0101               	movlb	1	; () banked
  5760  011C92  6FBC               	movwf	Port_Init@pInput& (0+255),b
  5761  011C94  0E01               	movlw	high _PortG
  5762  011C96  0101               	movlb	1	; () banked
  5763  011C98  6FBD               	movwf	(Port_Init@pInput+1)& (0+255),b
  5764  011C9A  0E06               	movlw	6
  5765  011C9C  0101               	movlb	1	; () banked
  5766  011C9E  6FBE               	movwf	Port_Init@pPort& (0+255),b
  5767  011CA0  EC6E  F08C         	call	_Port_Init	;wreg free
  5768                           
  5769                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5770  011CA4  0E98               	movlw	low _PortF
  5771  011CA6  0100               	movlb	0	; () banked
  5772  011CA8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  5773  011CAA  0E01               	movlw	high _PortF
  5774  011CAC  0100               	movlb	0	; () banked
  5775  011CAE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5776  011CB0  0E05               	movlw	5
  5777  011CB2  0100               	movlb	0	; () banked
  5778  011CB4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  5779  011CB6  0E00               	movlw	0
  5780  011CB8  0100               	movlb	0	; () banked
  5781  011CBA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  5782  011CBC  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  5783                           
  5784                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5785  011CC0  0E8E               	movlw	low _PortB
  5786  011CC2  0100               	movlb	0	; () banked
  5787  011CC4  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
  5788  011CC6  0E01               	movlw	high _PortB
  5789  011CC8  0100               	movlb	0	; () banked
  5790  011CCA  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5791  011CCC  0E00               	movlw	0
  5792  011CCE  0100               	movlb	0	; () banked
  5793  011CD0  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5794  011CD2  0E00               	movlw	0
  5795  011CD4  0100               	movlb	0	; () banked
  5796  011CD6  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
  5797  011CD8  EC6A  F086         	call	_Port_SetQuadType	;wreg free
  5798                           
  5799                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5800  011CDC  0E98               	movlw	low _PortF
  5801  011CDE  0100               	movlb	0	; () banked
  5802  011CE0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  5803  011CE2  0E01               	movlw	high _PortF
  5804  011CE4  0100               	movlb	0	; () banked
  5805  011CE6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5806  011CE8  0E06               	movlw	6
  5807  011CEA  0100               	movlb	0	; () banked
  5808  011CEC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  5809  011CEE  0E03               	movlw	3
  5810  011CF0  0100               	movlb	0	; () banked
  5811  011CF2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  5812  011CF4  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  5813                           
  5814                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5815  011CF8  0EA2               	movlw	low _PortG
  5816  011CFA  0100               	movlb	0	; () banked
  5817  011CFC  6FF4               	movwf	Port_SetType@pInput& (0+255),b
  5818  011CFE  0E01               	movlw	high _PortG
  5819  011D00  0100               	movlb	0	; () banked
  5820  011D02  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5821  011D04  0E03               	movlw	3
  5822  011D06  0100               	movlb	0	; () banked
  5823  011D08  6FF6               	movwf	Port_SetType@pType& (0+255),b
  5824  011D0A  EC95  F087         	call	_Port_SetType	;wreg free
  5825                           
  5826                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5827  011D0E  0EA2               	movlw	low _PortG
  5828  011D10  0100               	movlb	0	; () banked
  5829  011D12  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  5830  011D14  0E01               	movlw	high _PortG
  5831  011D16  0100               	movlb	0	; () banked
  5832  011D18  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5833  011D1A  0E04               	movlw	4
  5834  011D1C  0100               	movlb	0	; () banked
  5835  011D1E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  5836  011D20  0E00               	movlw	0
  5837  011D22  0100               	movlb	0	; () banked
  5838  011D24  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  5839  011D26  ECA9  F094         	call	_Port_SetPin	;wreg free
  5840                           
  5841                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5842  011D2A  0E98               	movlw	low _PortF
  5843  011D2C  0100               	movlb	0	; () banked
  5844  011D2E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  5845  011D30  0E01               	movlw	high _PortF
  5846  011D32  0100               	movlb	0	; () banked
  5847  011D34  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5848  011D36  0E06               	movlw	6
  5849  011D38  0100               	movlb	0	; () banked
  5850  011D3A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  5851  011D3C  0E01               	movlw	1
  5852  011D3E  0100               	movlb	0	; () banked
  5853  011D40  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  5854  011D42  ECA9  F094         	call	_Port_SetPin	;wreg free
  5855                           
  5856                           ;MXK.c: 55: LED_Init(eLED1);
  5857  011D46  0E00               	movlw	0
  5858  011D48  ECD2  F09D         	call	_LED_Init
  5859                           
  5860                           ;MXK.c: 56: LED_Init(eLED2);
  5861  011D4C  0E01               	movlw	1
  5862  011D4E  ECD2  F09D         	call	_LED_Init
  5863                           
  5864                           ;MXK.c: 58: PIR1 = 0;
  5865  011D52  0E00               	movlw	0
  5866  011D54  6E9E               	movwf	3998,c	;volatile
  5867                           
  5868                           ;MXK.c: 59: PIR2 = 0;
  5869  011D56  0E00               	movlw	0
  5870  011D58  6EA1               	movwf	4001,c	;volatile
  5871                           
  5872                           ;MXK.c: 60: PIR3 = 0;
  5873  011D5A  0E00               	movlw	0
  5874  011D5C  6EA4               	movwf	4004,c	;volatile
  5875                           
  5876                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5877  011D5E  8E9B               	bsf	3995,7,c	;volatile
  5878                           
  5879                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5880  011D60  8C9B               	bsf	3995,6,c	;volatile
  5881                           
  5882                           ;MXK.c: 66: delay_ms(100);
  5883  011D62  0E00               	movlw	0
  5884  011D64  0100               	movlb	0	; () banked
  5885  011D66  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  5886  011D68  0E64               	movlw	100
  5887  011D6A  6FBA               	movwf	delay_ms@ms& (0+255),b
  5888  011D6C  EC04  F09D         	call	_delay_ms	;wreg free
  5889                           
  5890                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5891  011D70  8ED0               	bsf	4048,7,c	;volatile
  5892  011D72  0012               	return		;funcret
  5893  011D74                     __end_of_MXK_Init:
  5894                           	opt stack 0
  5895                           tosu	equ	0xFFF
  5896                           tosh	equ	0xFFE
  5897                           tosl	equ	0xFFD
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1h	equ	0xFE2
  5910                           fsr1l	equ	0xFE1
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           postdec2	equ	0xFDD
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function _Port_Init *****************
  5919 ;; Defined at:
  5920 ;;		line 150 in file "Library/Port.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  pInput          2    1[BANK1 ] const PTR struct Port
  5923 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5924 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5925 ;;  pPort           1    3[BANK1 ] enum E7730
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  i               1    6[BANK1 ] unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5937 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;Total ram usage:        6 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:   15
  5944 ;; This function calls:
  5945 ;;		_GetPortPORT
  5946 ;;		_GetPortProperties
  5947 ;;		_GetPortTRIS
  5948 ;;		_Port_Set
  5949 ;;		_Port_SetPinType
  5950 ;;		_Port_SetType
  5951 ;;		_Word_GetPair
  5952 ;; This function is called by:
  5953 ;;		_MXK_Init
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text19
  5958  0118DC                     __ptext19:
  5959                           	opt stack 0
  5960  0118DC                     _Port_Init:
  5961                           	opt stack 14
  5962                           
  5963                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5964                           
  5965                           ;incstack = 0
  5966  0118DC  0101               	movlb	1	; () banked
  5967  0118DE  51BE               	movf	Port_Init@pPort& (0+255),w,b
  5968  0118E0  ECD8  F097         	call	_GetPortProperties
  5969  0118E4  C1BC  FFD9         	movff	Port_Init@pInput,fsr2l
  5970  0118E8  C1BD  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5971  0118EC  0100               	movlb	0	; () banked
  5972  0118EE  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
  5973  0118F2  0100               	movlb	0	; () banked
  5974  0118F4  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
  5975                           
  5976                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5977  0118F8  0101               	movlb	1	; () banked
  5978  0118FA  51BE               	movf	Port_Init@pPort& (0+255),w,b
  5979  0118FC  EC2B  F098         	call	_GetPortPORT
  5980  011900  0101               	movlb	1	; () banked
  5981  011902  EE20 F006          	lfsr	2,6
  5982  011906  51BC               	movf	Port_Init@pInput& (0+255),w,b
  5983  011908  26D9               	addwf	fsr2l,f,c
  5984  01190A  51BD               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5985  01190C  22DA               	addwfc	fsr2h,f,c
  5986  01190E  0100               	movlb	0	; () banked
  5987  011910  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
  5988  011914  0100               	movlb	0	; () banked
  5989  011916  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
  5990                           
  5991                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5992  01191A  0101               	movlb	1	; () banked
  5993  01191C  51BE               	movf	Port_Init@pPort& (0+255),w,b
  5994  01191E  EC2B  F098         	call	_GetPortPORT
  5995  011922  0101               	movlb	1	; () banked
  5996  011924  EE20 F004          	lfsr	2,4
  5997  011928  51BC               	movf	Port_Init@pInput& (0+255),w,b
  5998  01192A  26D9               	addwf	fsr2l,f,c
  5999  01192C  51BD               	movf	(Port_Init@pInput+1)& (0+255),w,b
  6000  01192E  22DA               	addwfc	fsr2h,f,c
  6001  011930  0100               	movlb	0	; () banked
  6002  011932  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
  6003  011936  0100               	movlb	0	; () banked
  6004  011938  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
  6005                           
  6006                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  6007  01193C  0101               	movlb	1	; () banked
  6008  01193E  51BE               	movf	Port_Init@pPort& (0+255),w,b
  6009  011940  EC85  F097         	call	_GetPortTRIS
  6010  011944  0101               	movlb	1	; () banked
  6011  011946  EE20 F002          	lfsr	2,2
  6012  01194A  51BC               	movf	Port_Init@pInput& (0+255),w,b
  6013  01194C  26D9               	addwf	fsr2l,f,c
  6014  01194E  51BD               	movf	(Port_Init@pInput+1)& (0+255),w,b
  6015  011950  22DA               	addwfc	fsr2h,f,c
  6016  011952  0100               	movlb	0	; () banked
  6017  011954  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
  6018  011958  0100               	movlb	0	; () banked
  6019  01195A  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  6023  01195E  0101               	movlb	1	; () banked
  6024  011960  EE20 F004          	lfsr	2,4
  6025  011964  51BC               	movf	Port_Init@pInput& (0+255),w,b
  6026  011966  26D9               	addwf	fsr2l,f,c
  6027  011968  51BD               	movf	(Port_Init@pInput+1)& (0+255),w,b
  6028  01196A  22DA               	addwfc	fsr2h,f,c
  6029  01196C  CFDE F1BF          	movff	postinc2,??_Port_Init
  6030  011970  CFDD F1C0          	movff	postdec2,??_Port_Init+1
  6031  011974  C1BF  FFD9         	movff	??_Port_Init,fsr2l
  6032  011978  C1C0  FFDA         	movff	??_Port_Init+1,fsr2h
  6033  01197C  0E00               	movlw	0
  6034  01197E  6EDF               	movwf	indf2,c
  6035                           
  6036                           ; BSR set to: 1
  6037                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  6038  011980  0101               	movlb	1	; () banked
  6039  011982  EE20 F002          	lfsr	2,2
  6040  011986  51BC               	movf	Port_Init@pInput& (0+255),w,b
  6041  011988  26D9               	addwf	fsr2l,f,c
  6042  01198A  51BD               	movf	(Port_Init@pInput+1)& (0+255),w,b
  6043  01198C  22DA               	addwfc	fsr2h,f,c
  6044  01198E  CFDE F1BF          	movff	postinc2,??_Port_Init
  6045  011992  CFDD F1C0          	movff	postdec2,??_Port_Init+1
  6046  011996  C1BF  FFD9         	movff	??_Port_Init,fsr2l
  6047  01199A  C1C0  FFDA         	movff	??_Port_Init+1,fsr2h
  6048  01199E  0EFF               	movlw	255
  6049  0119A0  6EDF               	movwf	indf2,c
  6050                           
  6051                           ; BSR set to: 1
  6052                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  6053  0119A2  C1BC  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
  6054  0119A6  C1BD  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  6055  0119AA  0E00               	movlw	0
  6056  0119AC  0100               	movlb	0	; () banked
  6057  0119AE  6FF6               	movwf	Port_SetType@pType& (0+255),b
  6058  0119B0  EC95  F087         	call	_Port_SetType	;wreg free
  6059                           
  6060                           ;Port.c: 166: UINT8 i;
  6061                           ;Port.c: 167: for (i=0; i<8; i++)
  6062  0119B4  0E00               	movlw	0
  6063  0119B6  0101               	movlb	1	; () banked
  6064  0119B8  6FC1               	movwf	Port_Init@i& (0+255),b
  6065  0119BA                     l11169:
  6066                           
  6067                           ; BSR set to: 1
  6068  0119BA  0E07               	movlw	7
  6069  0119BC  0101               	movlb	1	; () banked
  6070  0119BE  65C1               	cpfsgt	Port_Init@i& (0+255),b
  6071  0119C0  D031               	goto	l11183
  6072  0119C2  D04B               	goto	l11189
  6073  0119C4                     l11173:
  6074                           
  6075                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  6076  0119C4  C1BC  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
  6077  0119C8  C1BD  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  6078  0119CC  C1C1  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
  6079  0119D0  0E03               	movlw	3
  6080  0119D2  0100               	movlb	0	; () banked
  6081  0119D4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  6082  0119D6  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  6083                           
  6084                           ;Port.c: 173: break;
  6085  0119DA  D03C               	goto	l11185
  6086  0119DC                     l11175:
  6087                           
  6088                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  6089  0119DC  C1BC  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
  6090  0119E0  C1BD  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  6091  0119E4  C1C1  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
  6092  0119E8  0E02               	movlw	2
  6093  0119EA  0100               	movlb	0	; () banked
  6094  0119EC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  6095  0119EE  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  6096                           
  6097                           ;Port.c: 176: break;
  6098  0119F2  D030               	goto	l11185
  6099  0119F4                     l11177:
  6100                           
  6101                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  6102  0119F4  C1BC  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
  6103  0119F8  C1BD  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  6104  0119FC  C1C1  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
  6105  011A00  0E01               	movlw	1
  6106  011A02  0100               	movlb	0	; () banked
  6107  011A04  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  6108  011A06  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  6109                           
  6110                           ;Port.c: 179: break;
  6111  011A0A  D024               	goto	l11185
  6112  011A0C                     l11179:
  6113                           
  6114                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  6115  011A0C  C1BC  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
  6116  011A10  C1BD  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  6117  011A14  C1C1  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
  6118  011A18  0E00               	movlw	0
  6119  011A1A  0100               	movlb	0	; () banked
  6120  011A1C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  6121  011A1E  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  6122                           
  6123                           ;Port.c: 183: }
  6124                           
  6125                           ;Port.c: 182: break;
  6126  011A22  D018               	goto	l11185
  6127  011A24                     l11183:
  6128  011A24  C1BC  FFD9         	movff	Port_Init@pInput,fsr2l
  6129  011A28  C1BD  FFDA         	movff	Port_Init@pInput+1,fsr2h
  6130  011A2C  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
  6131  011A30  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
  6132  011A34  C1C1  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
  6133  011A38  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  6134                           
  6135                           ; Switch size 1, requested type "space"
  6136                           ; Number of cases is 4, Range of values is 0 to 3
  6137                           ; switch strategies available:
  6138                           ; Name         Instructions Cycles
  6139                           ; simple_byte           13     7 (average)
  6140                           ;	Chosen strategy is simple_byte
  6141  011A3C  0A00               	xorlw	0	; case 0
  6142  011A3E  B4D8               	btfsc	status,2,c
  6143  011A40  D7C1               	goto	l11173
  6144  011A42  0A01               	xorlw	1	; case 1
  6145  011A44  B4D8               	btfsc	status,2,c
  6146  011A46  D7D6               	goto	l11177
  6147  011A48  0A03               	xorlw	3	; case 2
  6148  011A4A  B4D8               	btfsc	status,2,c
  6149  011A4C  D7C7               	goto	l11175
  6150  011A4E  0A01               	xorlw	1	; case 3
  6151  011A50  B4D8               	btfsc	status,2,c
  6152  011A52  D7DC               	goto	l11179
  6153  011A54                     l11185:
  6154  011A54  0101               	movlb	1	; () banked
  6155  011A56  2BC1               	incf	Port_Init@i& (0+255),f,b
  6156  011A58  D7B0               	goto	l11169
  6157  011A5A                     l11189:
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;Port.c: 184: }
  6161                           ;Port.c: 185: Port_Set(pInput, 0x00);
  6162  011A5A  C1BC  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
  6163  011A5E  C1BD  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  6164  011A62  0E00               	movlw	0
  6165  011A64  0100               	movlb	0	; () banked
  6166  011A66  6FCB               	movwf	Port_Set@pValue& (0+255),b
  6167  011A68  EC0F  F082         	call	_Port_Set	;wreg free
  6168  011A6C  0012               	return		;funcret
  6169  011A6E                     __end_of_Port_Init:
  6170                           	opt stack 0
  6171                           tosu	equ	0xFFF
  6172                           tosh	equ	0xFFE
  6173                           tosl	equ	0xFFD
  6174                           pclath	equ	0xFFA
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           intcon	equ	0xFF2
  6182                           postinc0	equ	0xFEE
  6183                           wreg	equ	0xFE8
  6184                           postdec1	equ	0xFE5
  6185                           fsr1h	equ	0xFE2
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _Port_SetType *****************
  6195 ;; Defined at:
  6196 ;;		line 513 in file "Library/Port.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  6199 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6200 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6201 ;;  pType           1   60[BANK0 ] enum E7739
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  Output          1    0[BANK1 ] enum E7419
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      enum E7419
  6206 ;; Registers used:
  6207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        6 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:   14
  6220 ;; This function calls:
  6221 ;;		_Port_CheckPortType
  6222 ;;		_Word_SetPair
  6223 ;; This function is called by:
  6224 ;;		_Port_Init
  6225 ;;		_MXK_Init
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text20
  6230  010F2A                     __ptext20:
  6231                           	opt stack 0
  6232  010F2A                     _Port_SetType:
  6233                           	opt stack 15
  6234                           
  6235                           ;Port.c: 515: ePinError Output = ePinErrorState;
  6236                           
  6237                           ;incstack = 0
  6238  010F2A  0E05               	movlw	5
  6239  010F2C  0101               	movlb	1	; () banked
  6240  010F2E  6FBB               	movwf	Port_SetType@Output& (0+255),b
  6241                           
  6242                           ;Port.c: 517: switch (pType)
  6243  010F30  D07A               	goto	l10673
  6244  010F32                     l10657:
  6245                           
  6246                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  6247  010F32  0100               	movlb	0	; () banked
  6248  010F34  EE20 F002          	lfsr	2,2
  6249  010F38  51F4               	movf	Port_SetType@pInput& (0+255),w,b
  6250  010F3A  26D9               	addwf	fsr2l,f,c
  6251  010F3C  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6252  010F3E  22DA               	addwfc	fsr2h,f,c
  6253  010F40  CFDE F0F7          	movff	postinc2,??_Port_SetType
  6254  010F44  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
  6255  010F48  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
  6256  010F4C  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
  6257  010F50  0EFF               	movlw	255
  6258  010F52  D067               	goto	L3
  6259  010F54                     l10659:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  6263  010F54  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6264  010F58  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6265  010F5C  0E01               	movlw	1
  6266  010F5E  0100               	movlb	0	; () banked
  6267  010F60  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6268  010F62  ECA4  F09F         	call	_Port_CheckPortType	;wreg free
  6269  010F66  0101               	movlb	1	; () banked
  6270  010F68  6FBB               	movwf	Port_SetType@Output& (0+255),b
  6271  010F6A  0101               	movlb	1	; () banked
  6272  010F6C  51BB               	movf	Port_SetType@Output& (0+255),w,b
  6273  010F6E  A4D8               	btfss	status,2,c
  6274  010F70  0012               	return	
  6275                           
  6276                           ; BSR set to: 1
  6277                           ;Port.c: 527: {
  6278                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  6279  010F72  0100               	movlb	0	; () banked
  6280  010F74  EE20 F002          	lfsr	2,2
  6281  010F78  51F4               	movf	Port_SetType@pInput& (0+255),w,b
  6282  010F7A  26D9               	addwf	fsr2l,f,c
  6283  010F7C  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6284  010F7E  22DA               	addwfc	fsr2h,f,c
  6285  010F80  CFDE F0F7          	movff	postinc2,??_Port_SetType
  6286  010F84  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
  6287  010F88  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
  6288  010F8C  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
  6289  010F90  0E00               	movlw	0
  6290  010F92  6EDF               	movwf	indf2,c
  6291                           
  6292                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6293  010F94  0100               	movlb	0	; () banked
  6294  010F96  EE20 F004          	lfsr	2,4
  6295  010F9A  D036               	goto	L8
  6296  010F9C                     l10663:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6300  010F9C  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6301  010FA0  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6302  010FA4  0E02               	movlw	2
  6303  010FA6  0100               	movlb	0	; () banked
  6304  010FA8  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6305  010FAA  ECA4  F09F         	call	_Port_CheckPortType	;wreg free
  6306  010FAE  0101               	movlb	1	; () banked
  6307  010FB0  6FBB               	movwf	Port_SetType@Output& (0+255),b
  6308  010FB2  0101               	movlb	1	; () banked
  6309  010FB4  51BB               	movf	Port_SetType@Output& (0+255),w,b
  6310  010FB6  A4D8               	btfss	status,2,c
  6311  010FB8  0012               	return	
  6312                           
  6313                           ; BSR set to: 1
  6314                           ;Port.c: 538: {
  6315                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6316  010FBA  0100               	movlb	0	; () banked
  6317  010FBC  EE20 F002          	lfsr	2,2
  6318  010FC0  51F4               	movf	Port_SetType@pInput& (0+255),w,b
  6319  010FC2  26D9               	addwf	fsr2l,f,c
  6320  010FC4  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6321  010FC6  22DA               	addwfc	fsr2h,f,c
  6322  010FC8  CFDE F0F7          	movff	postinc2,??_Port_SetType
  6323  010FCC  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
  6324  010FD0  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
  6325  010FD4  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
  6326  010FD8  0EFF               	movlw	255
  6327  010FDA  6EDF               	movwf	indf2,c
  6328                           
  6329                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6330  010FDC  0100               	movlb	0	; () banked
  6331  010FDE  EE20 F004          	lfsr	2,4
  6332  010FE2  D7AA               	goto	L4
  6333  010FE4                     l10667:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6337  010FE4  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6338  010FE8  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6339  010FEC  0E00               	movlw	0
  6340  010FEE  0100               	movlb	0	; () banked
  6341  010FF0  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6342  010FF2  ECA4  F09F         	call	_Port_CheckPortType	;wreg free
  6343  010FF6  0101               	movlb	1	; () banked
  6344  010FF8  6FBB               	movwf	Port_SetType@Output& (0+255),b
  6345  010FFA  0101               	movlb	1	; () banked
  6346  010FFC  51BB               	movf	Port_SetType@Output& (0+255),w,b
  6347  010FFE  A4D8               	btfss	status,2,c
  6348  011000  0012               	return	
  6349                           
  6350                           ; BSR set to: 1
  6351                           ;Port.c: 549: {
  6352                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6353  011002  0100               	movlb	0	; () banked
  6354  011004  EE20 F002          	lfsr	2,2
  6355  011008                     L8:
  6356  011008  51F4               	movf	Port_SetType@pInput& (0+255),w,b
  6357  01100A  26D9               	addwf	fsr2l,f,c
  6358  01100C  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6359  01100E  22DA               	addwfc	fsr2h,f,c
  6360  011010  CFDE F0F7          	movff	postinc2,??_Port_SetType
  6361  011014  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
  6362  011018  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
  6363  01101C  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
  6364  011020  0E00               	movlw	0
  6365  011022                     L3:
  6366  011022  6EDF               	movwf	indf2,c
  6367                           
  6368                           ;Port.c: 552: }
  6369  011024  D00E               	goto	l10675
  6370  011026                     l10673:
  6371  011026  0100               	movlb	0	; () banked
  6372  011028  51F6               	movf	Port_SetType@pType& (0+255),w,b
  6373                           
  6374                           ; Switch size 1, requested type "space"
  6375                           ; Number of cases is 4, Range of values is 0 to 3
  6376                           ; switch strategies available:
  6377                           ; Name         Instructions Cycles
  6378                           ; simple_byte           13     7 (average)
  6379                           ;	Chosen strategy is simple_byte
  6380  01102A  0A00               	xorlw	0	; case 0
  6381  01102C  B4D8               	btfsc	status,2,c
  6382  01102E  D781               	goto	l10657
  6383  011030  0A01               	xorlw	1	; case 1
  6384  011032  B4D8               	btfsc	status,2,c
  6385  011034  D78F               	goto	l10659
  6386  011036  0A03               	xorlw	3	; case 2
  6387  011038  B4D8               	btfsc	status,2,c
  6388  01103A  D7B0               	goto	l10663
  6389  01103C  0A01               	xorlw	1	; case 3
  6390  01103E  B4D8               	btfsc	status,2,c
  6391  011040  D7D1               	goto	l10667
  6392  011042                     l10675:
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6396  011042  0E08               	movlw	8
  6397  011044  0100               	movlb	0	; () banked
  6398  011046  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6399  011048  0100               	movlb	0	; () banked
  6400  01104A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6401  01104C  0E00               	movlw	0
  6402  01104E  0100               	movlb	0	; () banked
  6403  011050  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6404  011052  0100               	movlb	0	; () banked
  6405  011054  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6406  011056  0E00               	movlw	0
  6407  011058  0100               	movlb	0	; () banked
  6408  01105A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6409  01105C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6410  011060  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6411                           
  6412                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6413  011064  0E08               	movlw	8
  6414  011066  0100               	movlb	0	; () banked
  6415  011068  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6416  01106A  0100               	movlb	0	; () banked
  6417  01106C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6418  01106E  0E00               	movlw	0
  6419  011070  0100               	movlb	0	; () banked
  6420  011072  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6421  011074  0100               	movlb	0	; () banked
  6422  011076  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6423  011078  0E01               	movlw	1
  6424  01107A  0100               	movlb	0	; () banked
  6425  01107C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6426  01107E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6427  011082  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6428                           
  6429                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6430  011086  0E08               	movlw	8
  6431  011088  0100               	movlb	0	; () banked
  6432  01108A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6433  01108C  0100               	movlb	0	; () banked
  6434  01108E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6435  011090  0E00               	movlw	0
  6436  011092  0100               	movlb	0	; () banked
  6437  011094  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6438  011096  0100               	movlb	0	; () banked
  6439  011098  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6440  01109A  0E02               	movlw	2
  6441  01109C  0100               	movlb	0	; () banked
  6442  01109E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6443  0110A0  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6444  0110A4  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6445                           
  6446                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6447  0110A8  0E08               	movlw	8
  6448  0110AA  0100               	movlb	0	; () banked
  6449  0110AC  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6450  0110AE  0100               	movlb	0	; () banked
  6451  0110B0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6452  0110B2  0E00               	movlw	0
  6453  0110B4  0100               	movlb	0	; () banked
  6454  0110B6  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6455  0110B8  0100               	movlb	0	; () banked
  6456  0110BA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6457  0110BC  0E03               	movlw	3
  6458  0110BE  0100               	movlb	0	; () banked
  6459  0110C0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6460  0110C2  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6461  0110C6  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6462                           
  6463                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6464  0110CA  0E08               	movlw	8
  6465  0110CC  0100               	movlb	0	; () banked
  6466  0110CE  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6467  0110D0  0100               	movlb	0	; () banked
  6468  0110D2  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6469  0110D4  0E00               	movlw	0
  6470  0110D6  0100               	movlb	0	; () banked
  6471  0110D8  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6472  0110DA  0100               	movlb	0	; () banked
  6473  0110DC  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6474  0110DE  0E04               	movlw	4
  6475  0110E0  0100               	movlb	0	; () banked
  6476  0110E2  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6477  0110E4  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6478  0110E8  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6479                           
  6480                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6481  0110EC  0E08               	movlw	8
  6482  0110EE  0100               	movlb	0	; () banked
  6483  0110F0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6484  0110F2  0100               	movlb	0	; () banked
  6485  0110F4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6486  0110F6  0E00               	movlw	0
  6487  0110F8  0100               	movlb	0	; () banked
  6488  0110FA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6489  0110FC  0100               	movlb	0	; () banked
  6490  0110FE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6491  011100  0E05               	movlw	5
  6492  011102  0100               	movlb	0	; () banked
  6493  011104  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6494  011106  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6495  01110A  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6496                           
  6497                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6498  01110E  0E08               	movlw	8
  6499  011110  0100               	movlb	0	; () banked
  6500  011112  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6501  011114  0100               	movlb	0	; () banked
  6502  011116  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6503  011118  0E00               	movlw	0
  6504  01111A  0100               	movlb	0	; () banked
  6505  01111C  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6506  01111E  0100               	movlb	0	; () banked
  6507  011120  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6508  011122  0E06               	movlw	6
  6509  011124  0100               	movlb	0	; () banked
  6510  011126  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6511  011128  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6512  01112C  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6513                           
  6514                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6515  011130  0E08               	movlw	8
  6516  011132  0100               	movlb	0	; () banked
  6517  011134  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
  6518  011136  0100               	movlb	0	; () banked
  6519  011138  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
  6520  01113A  0E00               	movlw	0
  6521  01113C  0100               	movlb	0	; () banked
  6522  01113E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6523  011140  0100               	movlb	0	; () banked
  6524  011142  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6525  011144  0E07               	movlw	7
  6526  011146  0100               	movlb	0	; () banked
  6527  011148  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
  6528  01114A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
  6529  01114E  EC0F  F0A0         	call	_Word_SetPair	;wreg free
  6530  011152  0012               	return	
  6531  011154                     __end_of_Port_SetType:
  6532                           	opt stack 0
  6533                           tosu	equ	0xFFF
  6534                           tosh	equ	0xFFE
  6535                           tosl	equ	0xFFD
  6536                           pclath	equ	0xFFA
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           postdec1	equ	0xFE5
  6547                           fsr1h	equ	0xFE2
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _Port_CheckPortType *****************
  6557 ;; Defined at:
  6558 ;;		line 138 in file "Library/Port.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6561 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6562 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6563 ;;  pDrive          1   56[BANK0 ] enum E7413
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  Output          1   57[BANK0 ] enum E7419
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      enum E7419
  6568 ;; Registers used:
  6569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        4 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:   13
  6582 ;; This function calls:
  6583 ;;		_Port_CheckQuadType
  6584 ;; This function is called by:
  6585 ;;		_Port_SetType
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text21
  6590  013F48                     __ptext21:
  6591                           	opt stack 0
  6592  013F48                     _Port_CheckPortType:
  6593                           	opt stack 15
  6594                           
  6595                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6596                           
  6597                           ;incstack = 0
  6598  013F48  0E05               	movlw	5
  6599  013F4A  0100               	movlb	0	; () banked
  6600  013F4C  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6604  013F4E  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6605  013F52  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6606  013F56  0E00               	movlw	0
  6607  013F58  0100               	movlb	0	; () banked
  6608  013F5A  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6609  013F5C  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6610  013F60  EC34  F09E         	call	_Port_CheckQuadType	;wreg free
  6611  013F64  0100               	movlb	0	; () banked
  6612  013F66  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
  6613  013F68  0100               	movlb	0	; () banked
  6614  013F6A  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
  6615  013F6C  A4D8               	btfss	status,2,c
  6616  013F6E  D00D               	goto	l10229
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6620  013F70  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6621  013F74  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6622  013F78  0E01               	movlw	1
  6623  013F7A  0100               	movlb	0	; () banked
  6624  013F7C  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6625  013F7E  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6626  013F82  EC34  F09E         	call	_Port_CheckQuadType	;wreg free
  6627  013F86  0100               	movlb	0	; () banked
  6628  013F88  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
  6629  013F8A                     l10229:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;Port.c: 146: return Output;
  6633  013F8A  0100               	movlb	0	; () banked
  6634  013F8C  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
  6635  013F8E  0012               	return	
  6636  013F90                     __end_of_Port_CheckPortType:
  6637                           	opt stack 0
  6638                           tosu	equ	0xFFF
  6639                           tosh	equ	0xFFE
  6640                           tosl	equ	0xFFD
  6641                           pclath	equ	0xFFA
  6642                           tblptru	equ	0xFF8
  6643                           tblptrh	equ	0xFF7
  6644                           tblptrl	equ	0xFF6
  6645                           tablat	equ	0xFF5
  6646                           prodh	equ	0xFF4
  6647                           prodl	equ	0xFF3
  6648                           intcon	equ	0xFF2
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           postdec1	equ	0xFE5
  6652                           fsr1h	equ	0xFE2
  6653                           fsr1l	equ	0xFE1
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           postdec2	equ	0xFDD
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _Port_Set *****************
  6662 ;; Defined at:
  6663 ;;		line 570 in file "Library/Port.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6666 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6667 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6668 ;;  pValue          1   17[BANK0 ] unsigned char 
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6671 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6672 ;;  Type            1   38[BANK0 ] enum E7739
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6682 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;Total ram usage:       24 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:   10
  6689 ;; This function calls:
  6690 ;;		_Byte_SetByte
  6691 ;;		_Word_GetPair
  6692 ;; This function is called by:
  6693 ;;		_Port_Init
  6694 ;;		_Port_Toggle
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text22
  6699  01041E                     __ptext22:
  6700                           	opt stack 0
  6701  01041E                     _Port_Set:
  6702                           	opt stack 18
  6703                           
  6704                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;incstack = 0
  6708  01041E  0E08               	movlw	8
  6709  010420  0100               	movlb	0	; () banked
  6710  010422  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  6711  010424  0100               	movlb	0	; () banked
  6712  010426  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  6713  010428  0E00               	movlw	0
  6714  01042A  0100               	movlb	0	; () banked
  6715  01042C  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6716  01042E  0100               	movlb	0	; () banked
  6717  010430  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6718  010432  0E00               	movlw	0
  6719  010434  0100               	movlb	0	; () banked
  6720  010436  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  6721  010438  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  6722  01043C  0100               	movlb	0	; () banked
  6723  01043E  6FE0               	movwf	Port_Set@Type& (0+255),b
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6727  010440  0100               	movlb	0	; () banked
  6728  010442  51E0               	movf	Port_Set@Type& (0+255),w,b
  6729  010444  0100               	movlb	0	; () banked
  6730  010446  6FCC               	movwf	??_Port_Set& (0+255),b
  6731  010448  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  6732  01044A  0E0E               	movlw	14
  6733  01044C                     u7115:
  6734  01044C  90D8               	bcf	status,0,c
  6735  01044E  0100               	movlb	0	; () banked
  6736  010450  37CC               	rlcf	??_Port_Set& (0+255),f,b
  6737  010452  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6738  010454  2EE8               	decfsz	wreg,f,c
  6739  010456  D7FA               	goto	u7115
  6740  010458  0100               	movlb	0	; () banked
  6741  01045A  51E0               	movf	Port_Set@Type& (0+255),w,b
  6742  01045C  0100               	movlb	0	; () banked
  6743  01045E  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
  6744  010460  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
  6745  010462  0E0C               	movlw	12
  6746  010464                     u7125:
  6747  010464  90D8               	bcf	status,0,c
  6748  010466  0100               	movlb	0	; () banked
  6749  010468  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6750  01046A  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6751  01046C  2EE8               	decfsz	wreg,f,c
  6752  01046E  D7FA               	goto	u7125
  6753  010470  0100               	movlb	0	; () banked
  6754  010472  51E0               	movf	Port_Set@Type& (0+255),w,b
  6755  010474  0100               	movlb	0	; () banked
  6756  010476  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
  6757  010478  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
  6758  01047A  0E0A               	movlw	10
  6759  01047C                     u7135:
  6760  01047C  90D8               	bcf	status,0,c
  6761  01047E  0100               	movlb	0	; () banked
  6762  010480  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6763  010482  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6764  010484  2EE8               	decfsz	wreg,f,c
  6765  010486  D7FA               	goto	u7135
  6766  010488  0100               	movlb	0	; () banked
  6767  01048A  51E0               	movf	Port_Set@Type& (0+255),w,b
  6768  01048C  0100               	movlb	0	; () banked
  6769  01048E  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
  6770  010490  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
  6771  010492  0100               	movlb	0	; () banked
  6772  010494  51E0               	movf	Port_Set@Type& (0+255),w,b
  6773  010496  0100               	movlb	0	; () banked
  6774  010498  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
  6775  01049A  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
  6776  01049C  0E06               	movlw	6
  6777  01049E                     u7145:
  6778  01049E  90D8               	bcf	status,0,c
  6779  0104A0  0100               	movlb	0	; () banked
  6780  0104A2  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6781  0104A4  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6782  0104A6  2EE8               	decfsz	wreg,f,c
  6783  0104A8  D7FA               	goto	u7145
  6784  0104AA  0100               	movlb	0	; () banked
  6785  0104AC  51E0               	movf	Port_Set@Type& (0+255),w,b
  6786  0104AE  0100               	movlb	0	; () banked
  6787  0104B0  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
  6788  0104B2  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
  6789  0104B4  0100               	movlb	0	; () banked
  6790  0104B6  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
  6791  0104B8  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
  6792  0104BA  0EF0               	movlw	240
  6793  0104BC  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
  6794  0104BE  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
  6795  0104C0  0B0F               	andlw	15
  6796  0104C2  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6797  0104C4  0EF0               	movlw	240
  6798  0104C6  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
  6799  0104C8  0100               	movlb	0	; () banked
  6800  0104CA  51E0               	movf	Port_Set@Type& (0+255),w,b
  6801  0104CC  0100               	movlb	0	; () banked
  6802  0104CE  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
  6803  0104D0  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
  6804  0104D2  0100               	movlb	0	; () banked
  6805  0104D4  90D8               	bcf	status,0,c
  6806  0104D6  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6807  0104D8  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6808  0104DA  0100               	movlb	0	; () banked
  6809  0104DC  90D8               	bcf	status,0,c
  6810  0104DE  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6811  0104E0  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6812  0104E2  0100               	movlb	0	; () banked
  6813  0104E4  51E0               	movf	Port_Set@Type& (0+255),w,b
  6814  0104E6  0100               	movlb	0	; () banked
  6815  0104E8  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
  6816  0104EA  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
  6817  0104EC  0100               	movlb	0	; () banked
  6818  0104EE  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
  6819  0104F0  0100               	movlb	0	; () banked
  6820  0104F2  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6821  0104F4  0100               	movlb	0	; () banked
  6822  0104F6  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
  6823  0104F8  0100               	movlb	0	; () banked
  6824  0104FA  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6825  0104FC  0100               	movlb	0	; () banked
  6826  0104FE  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
  6827  010500  0100               	movlb	0	; () banked
  6828  010502  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6829  010504  0100               	movlb	0	; () banked
  6830  010506  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
  6831  010508  0100               	movlb	0	; () banked
  6832  01050A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6833  01050C  0100               	movlb	0	; () banked
  6834  01050E  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
  6835  010510  0100               	movlb	0	; () banked
  6836  010512  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6837  010514  0100               	movlb	0	; () banked
  6838  010516  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
  6839  010518  0100               	movlb	0	; () banked
  6840  01051A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6841  01051C  0100               	movlb	0	; () banked
  6842  01051E  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
  6843  010520  0100               	movlb	0	; () banked
  6844  010522  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6845  010524  0100               	movlb	0	; () banked
  6846  010526  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
  6847  010528  0100               	movlb	0	; () banked
  6848  01052A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6849  01052C  0100               	movlb	0	; () banked
  6850  01052E  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
  6851  010530  0100               	movlb	0	; () banked
  6852  010532  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6853  010534  0100               	movlb	0	; () banked
  6854  010536  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
  6855  010538  0100               	movlb	0	; () banked
  6856  01053A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6857  01053C  0100               	movlb	0	; () banked
  6858  01053E  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
  6859  010540  0100               	movlb	0	; () banked
  6860  010542  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6861  010544  0100               	movlb	0	; () banked
  6862  010546  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
  6863  010548  0100               	movlb	0	; () banked
  6864  01054A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6865  01054C  0100               	movlb	0	; () banked
  6866  01054E  51CC               	movf	??_Port_Set& (0+255),w,b
  6867  010550  0100               	movlb	0	; () banked
  6868  010552  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6869  010554  0100               	movlb	0	; () banked
  6870  010556  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
  6871  010558  0100               	movlb	0	; () banked
  6872  01055A  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  6873  01055C  0100               	movlb	0	; () banked
  6874  01055E  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6875  010560  0100               	movlb	0	; () banked
  6876  010562  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;Port.c: 574: UINT16 TypeActual = Type;
  6880  010564  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
  6881  010568  0100               	movlb	0	; () banked
  6882  01056A  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6886  01056C  0E08               	movlw	8
  6887  01056E  0100               	movlb	0	; () banked
  6888  010570  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  6889  010572  0100               	movlb	0	; () banked
  6890  010574  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  6891  010576  0E00               	movlw	0
  6892  010578  0100               	movlb	0	; () banked
  6893  01057A  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6894  01057C  0100               	movlb	0	; () banked
  6895  01057E  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6896  010580  0E01               	movlw	1
  6897  010582  0100               	movlb	0	; () banked
  6898  010584  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  6899  010586  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  6900  01058A  0100               	movlb	0	; () banked
  6901  01058C  6FCC               	movwf	??_Port_Set& (0+255),b
  6902  01058E  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  6903  010590  0100               	movlb	0	; () banked
  6904  010592  90D8               	bcf	status,0,c
  6905  010594  37CC               	rlcf	??_Port_Set& (0+255),f,b
  6906  010596  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6907  010598  0100               	movlb	0	; () banked
  6908  01059A  90D8               	bcf	status,0,c
  6909  01059C  37CC               	rlcf	??_Port_Set& (0+255),f,b
  6910  01059E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6911  0105A0  0100               	movlb	0	; () banked
  6912  0105A2  51CC               	movf	??_Port_Set& (0+255),w,b
  6913  0105A4  0100               	movlb	0	; () banked
  6914  0105A6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6915  0105A8  0100               	movlb	0	; () banked
  6916  0105AA  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  6917  0105AC  0100               	movlb	0	; () banked
  6918  0105AE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6922  0105B0  0E08               	movlw	8
  6923  0105B2  0100               	movlb	0	; () banked
  6924  0105B4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  6925  0105B6  0100               	movlb	0	; () banked
  6926  0105B8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  6927  0105BA  0E00               	movlw	0
  6928  0105BC  0100               	movlb	0	; () banked
  6929  0105BE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6930  0105C0  0100               	movlb	0	; () banked
  6931  0105C2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6932  0105C4  0E02               	movlw	2
  6933  0105C6  0100               	movlb	0	; () banked
  6934  0105C8  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  6935  0105CA  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  6936  0105CE  0100               	movlb	0	; () banked
  6937  0105D0  6FCC               	movwf	??_Port_Set& (0+255),b
  6938  0105D2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  6939  0105D4  0100               	movlb	0	; () banked
  6940  0105D6  3BCC               	swapf	??_Port_Set& (0+255),f,b
  6941  0105D8  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
  6942  0105DA  0EF0               	movlw	240
  6943  0105DC  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
  6944  0105DE  51CC               	movf	??_Port_Set& (0+255),w,b
  6945  0105E0  0B0F               	andlw	15
  6946  0105E2  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6947  0105E4  0EF0               	movlw	240
  6948  0105E6  17CC               	andwf	??_Port_Set& (0+255),f,b
  6949  0105E8  0100               	movlb	0	; () banked
  6950  0105EA  51CC               	movf	??_Port_Set& (0+255),w,b
  6951  0105EC  0100               	movlb	0	; () banked
  6952  0105EE  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6953  0105F0  0100               	movlb	0	; () banked
  6954  0105F2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  6955  0105F4  0100               	movlb	0	; () banked
  6956  0105F6  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6960  0105F8  0E08               	movlw	8
  6961  0105FA  0100               	movlb	0	; () banked
  6962  0105FC  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  6963  0105FE  0100               	movlb	0	; () banked
  6964  010600  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  6965  010602  0E00               	movlw	0
  6966  010604  0100               	movlb	0	; () banked
  6967  010606  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6968  010608  0100               	movlb	0	; () banked
  6969  01060A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6970  01060C  0E03               	movlw	3
  6971  01060E  0100               	movlb	0	; () banked
  6972  010610  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  6973  010612  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  6974  010616  0100               	movlb	0	; () banked
  6975  010618  6FCC               	movwf	??_Port_Set& (0+255),b
  6976  01061A  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  6977  01061C  0E06               	movlw	6
  6978  01061E                     u7155:
  6979  01061E  90D8               	bcf	status,0,c
  6980  010620  0100               	movlb	0	; () banked
  6981  010622  37CC               	rlcf	??_Port_Set& (0+255),f,b
  6982  010624  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6983  010626  2EE8               	decfsz	wreg,f,c
  6984  010628  D7FA               	goto	u7155
  6985  01062A  0100               	movlb	0	; () banked
  6986  01062C  51CC               	movf	??_Port_Set& (0+255),w,b
  6987  01062E  0100               	movlb	0	; () banked
  6988  010630  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6989  010632  0100               	movlb	0	; () banked
  6990  010634  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  6991  010636  0100               	movlb	0	; () banked
  6992  010638  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6996  01063A  0E08               	movlw	8
  6997  01063C  0100               	movlb	0	; () banked
  6998  01063E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  6999  010640  0100               	movlb	0	; () banked
  7000  010642  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  7001  010644  0E00               	movlw	0
  7002  010646  0100               	movlb	0	; () banked
  7003  010648  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  7004  01064A  0100               	movlb	0	; () banked
  7005  01064C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  7006  01064E  0E04               	movlw	4
  7007  010650  0100               	movlb	0	; () banked
  7008  010652  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  7009  010654  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  7010  010658  0100               	movlb	0	; () banked
  7011  01065A  6FCC               	movwf	??_Port_Set& (0+255),b
  7012  01065C  0100               	movlb	0	; () banked
  7013  01065E  51CC               	movf	??_Port_Set& (0+255),w,b
  7014  010660  0100               	movlb	0	; () banked
  7015  010662  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
  7016  010664  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  7017  010666  0100               	movlb	0	; () banked
  7018  010668  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  7019  01066A  0100               	movlb	0	; () banked
  7020  01066C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  7021  01066E  0100               	movlb	0	; () banked
  7022  010670  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
  7023  010672  0100               	movlb	0	; () banked
  7024  010674  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  7028  010676  0E08               	movlw	8
  7029  010678  0100               	movlb	0	; () banked
  7030  01067A  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  7031  01067C  0100               	movlb	0	; () banked
  7032  01067E  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  7033  010680  0E00               	movlw	0
  7034  010682  0100               	movlb	0	; () banked
  7035  010684  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  7036  010686  0100               	movlb	0	; () banked
  7037  010688  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  7038  01068A  0E05               	movlw	5
  7039  01068C  0100               	movlb	0	; () banked
  7040  01068E  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  7041  010690  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  7042  010694  0100               	movlb	0	; () banked
  7043  010696  6FCC               	movwf	??_Port_Set& (0+255),b
  7044  010698  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  7045  01069A  0E0A               	movlw	10
  7046  01069C                     u7165:
  7047  01069C  90D8               	bcf	status,0,c
  7048  01069E  0100               	movlb	0	; () banked
  7049  0106A0  37CC               	rlcf	??_Port_Set& (0+255),f,b
  7050  0106A2  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  7051  0106A4  2EE8               	decfsz	wreg,f,c
  7052  0106A6  D7FA               	goto	u7165
  7053  0106A8  0100               	movlb	0	; () banked
  7054  0106AA  51CC               	movf	??_Port_Set& (0+255),w,b
  7055  0106AC  0100               	movlb	0	; () banked
  7056  0106AE  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  7057  0106B0  0100               	movlb	0	; () banked
  7058  0106B2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  7059  0106B4  0100               	movlb	0	; () banked
  7060  0106B6  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  7064  0106B8  0E08               	movlw	8
  7065  0106BA  0100               	movlb	0	; () banked
  7066  0106BC  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  7067  0106BE  0100               	movlb	0	; () banked
  7068  0106C0  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  7069  0106C2  0E00               	movlw	0
  7070  0106C4  0100               	movlb	0	; () banked
  7071  0106C6  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  7072  0106C8  0100               	movlb	0	; () banked
  7073  0106CA  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  7074  0106CC  0E06               	movlw	6
  7075  0106CE  0100               	movlb	0	; () banked
  7076  0106D0  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  7077  0106D2  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  7078  0106D6  0100               	movlb	0	; () banked
  7079  0106D8  6FCC               	movwf	??_Port_Set& (0+255),b
  7080  0106DA  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  7081  0106DC  0E0C               	movlw	12
  7082  0106DE                     u7175:
  7083  0106DE  90D8               	bcf	status,0,c
  7084  0106E0  0100               	movlb	0	; () banked
  7085  0106E2  37CC               	rlcf	??_Port_Set& (0+255),f,b
  7086  0106E4  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  7087  0106E6  2EE8               	decfsz	wreg,f,c
  7088  0106E8  D7FA               	goto	u7175
  7089  0106EA  0100               	movlb	0	; () banked
  7090  0106EC  51CC               	movf	??_Port_Set& (0+255),w,b
  7091  0106EE  0100               	movlb	0	; () banked
  7092  0106F0  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  7093  0106F2  0100               	movlb	0	; () banked
  7094  0106F4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  7095  0106F6  0100               	movlb	0	; () banked
  7096  0106F8  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  7100  0106FA  0E08               	movlw	8
  7101  0106FC  0100               	movlb	0	; () banked
  7102  0106FE  25C9               	addwf	Port_Set@pInput& (0+255),w,b
  7103  010700  0100               	movlb	0	; () banked
  7104  010702  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
  7105  010704  0E00               	movlw	0
  7106  010706  0100               	movlb	0	; () banked
  7107  010708  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  7108  01070A  0100               	movlb	0	; () banked
  7109  01070C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  7110  01070E  0E07               	movlw	7
  7111  010710  0100               	movlb	0	; () banked
  7112  010712  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
  7113  010714  ECD3  F0A0         	call	_Word_GetPair	;wreg free
  7114  010718  0100               	movlb	0	; () banked
  7115  01071A  6FCC               	movwf	??_Port_Set& (0+255),b
  7116  01071C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
  7117  01071E  0E0E               	movlw	14
  7118  010720                     u7185:
  7119  010720  90D8               	bcf	status,0,c
  7120  010722  0100               	movlb	0	; () banked
  7121  010724  37CC               	rlcf	??_Port_Set& (0+255),f,b
  7122  010726  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
  7123  010728  2EE8               	decfsz	wreg,f,c
  7124  01072A  D7FA               	goto	u7185
  7125  01072C  0100               	movlb	0	; () banked
  7126  01072E  51CC               	movf	??_Port_Set& (0+255),w,b
  7127  010730  0100               	movlb	0	; () banked
  7128  010732  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
  7129  010734  0100               	movlb	0	; () banked
  7130  010736  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
  7131  010738  0100               	movlb	0	; () banked
  7132  01073A  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  7133                           
  7134                           ;Port.c: 584: if (TypeRequired == TypeActual)
  7135  01073C  0100               	movlb	0	; () banked
  7136  01073E  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
  7137  010740  0100               	movlb	0	; () banked
  7138  010742  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  7139  010744  E148               	bnz	l528
  7140  010746  0100               	movlb	0	; () banked
  7141  010748  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  7142  01074A  0100               	movlb	0	; () banked
  7143  01074C  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  7144  01074E  A4D8               	btfss	status,2,c
  7145  010750  0012               	return	
  7146  010752  D032               	goto	l10711
  7147  010754                     l10701:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  7151  010754  0100               	movlb	0	; () banked
  7152  010756  EE20 F002          	lfsr	2,2
  7153  01075A  51C9               	movf	Port_Set@pInput& (0+255),w,b
  7154  01075C  26D9               	addwf	fsr2l,f,c
  7155  01075E  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7156  010760  22DA               	addwfc	fsr2h,f,c
  7157  010762  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
  7158  010766  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
  7159  01076A  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7160  01076E  EC02  F0A4         	call	_Byte_SetByte	;wreg free
  7161                           
  7162                           ;Port.c: 594: break;
  7163  010772  0012               	return	
  7164  010774                     l10703:
  7165                           
  7166                           ;Port.c: 597: pValue = ~pValue;
  7167  010774  0100               	movlb	0	; () banked
  7168  010776  1FCB               	comf	Port_Set@pValue& (0+255),f,b
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  7172  010778  0100               	movlb	0	; () banked
  7173  01077A  EE20 F002          	lfsr	2,2
  7174  01077E  51C9               	movf	Port_Set@pInput& (0+255),w,b
  7175  010780  26D9               	addwf	fsr2l,f,c
  7176  010782  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7177  010784  22DA               	addwfc	fsr2h,f,c
  7178  010786  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
  7179  01078A  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
  7180  01078E  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7181  010792  EC02  F0A4         	call	_Byte_SetByte	;wreg free
  7182                           
  7183                           ;Port.c: 599: break;
  7184  010796  0012               	return	
  7185  010798                     l10707:
  7186                           
  7187                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  7188  010798  0100               	movlb	0	; () banked
  7189  01079A  EE20 F004          	lfsr	2,4
  7190  01079E  51C9               	movf	Port_Set@pInput& (0+255),w,b
  7191  0107A0  26D9               	addwf	fsr2l,f,c
  7192  0107A2  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7193  0107A4  22DA               	addwfc	fsr2h,f,c
  7194  0107A6  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
  7195  0107AA  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
  7196  0107AE  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7197  0107B2  EC02  F0A4         	call	_Byte_SetByte	;wreg free
  7198                           
  7199                           ;Port.c: 606: }
  7200                           
  7201                           ;Port.c: 605: break;
  7202                           
  7203                           ;Port.c: 604: default:
  7204                           
  7205                           ;Port.c: 603: break;
  7206  0107B6  0012               	return	
  7207  0107B8                     l10711:
  7208  0107B8  0100               	movlb	0	; () banked
  7209  0107BA  51E0               	movf	Port_Set@Type& (0+255),w,b
  7210                           
  7211                           ; Switch size 1, requested type "space"
  7212                           ; Number of cases is 4, Range of values is 0 to 3
  7213                           ; switch strategies available:
  7214                           ; Name         Instructions Cycles
  7215                           ; simple_byte           13     7 (average)
  7216                           ;	Chosen strategy is simple_byte
  7217  0107BC  0A00               	xorlw	0	; case 0
  7218  0107BE  B4D8               	btfsc	status,2,c
  7219  0107C0  0012               	return	
  7220  0107C2  0A01               	xorlw	1	; case 1
  7221  0107C4  B4D8               	btfsc	status,2,c
  7222  0107C6  D7C6               	goto	l10701
  7223  0107C8  0A03               	xorlw	3	; case 2
  7224  0107CA  B4D8               	btfsc	status,2,c
  7225  0107CC  D7D3               	goto	l10703
  7226  0107CE  0A01               	xorlw	1	; case 3
  7227  0107D0  A4D8               	btfss	status,2,c
  7228                           
  7229                           ; BSR set to: 0
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;Port.c: 607: }
  7233  0107D2  0012               	return	
  7234  0107D4  D7E1               	goto	l10707
  7235  0107D6                     l528:
  7236  0107D6  0012               	return		;funcret
  7237  0107D8                     __end_of_Port_Set:
  7238                           	opt stack 0
  7239                           tosu	equ	0xFFF
  7240                           tosh	equ	0xFFE
  7241                           tosl	equ	0xFFD
  7242                           pclath	equ	0xFFA
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           postinc0	equ	0xFEE
  7251                           wreg	equ	0xFE8
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _Byte_SetByte *****************
  7263 ;; Defined at:
  7264 ;;		line 110 in file "Library/Types.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  7267 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  7268 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  7269 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  7270 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  7271 ;;		 -> NULL(0), 
  7272 ;;  pValue          1    2[BANK0 ] unsigned char 
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;		None
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		fsr2l, fsr2h
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7284 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;Total ram usage:        3 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    7
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		_Port_Set
  7295 ;;		_I2C_Init
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text23
  7300  014804                     __ptext23:
  7301                           	opt stack 0
  7302  014804                     _Byte_SetByte:
  7303                           	opt stack 20
  7304                           
  7305                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  7306                           
  7307                           ;incstack = 0
  7308  014804  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  7309  014808  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  7310  01480C  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
  7311  014810  0012               	return		;funcret
  7312  014812                     __end_of_Byte_SetByte:
  7313                           	opt stack 0
  7314                           tosu	equ	0xFFF
  7315                           tosh	equ	0xFFE
  7316                           tosl	equ	0xFFD
  7317                           pclath	equ	0xFFA
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           intcon	equ	0xFF2
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           postdec1	equ	0xFE5
  7328                           fsr1h	equ	0xFE2
  7329                           fsr1l	equ	0xFE1
  7330                           indf2	equ	0xFDF
  7331                           postinc2	equ	0xFDE
  7332                           postdec2	equ	0xFDD
  7333                           fsr2h	equ	0xFDA
  7334                           fsr2l	equ	0xFD9
  7335                           status	equ	0xFD8
  7336                           
  7337 ;; *************** function _GetPortTRIS *****************
  7338 ;; Defined at:
  7339 ;;		line 67 in file "Library/Port.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  pInput          1    wreg     enum E7730
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  pInput          1    2[BANK0 ] enum E7730
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  2    0[BANK0 ] PTR struct Byte
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    7
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_Port_Init
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text24
  7368  012F0A                     __ptext24:
  7369                           	opt stack 0
  7370  012F0A                     _GetPortTRIS:
  7371                           	opt stack 21
  7372                           
  7373                           ;incstack = 0
  7374                           ;GetPortTRIS@pInput stored from wreg
  7375  012F0A  0100               	movlb	0	; () banked
  7376  012F0C  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
  7377                           
  7378                           ;Port.c: 69: switch (pInput)
  7379  012F0E  D038               	goto	l10653
  7380  012F10                     l10619:
  7381                           
  7382                           ;Port.c: 72: return (BytePtr)&TRISA;
  7383  012F10  0E92               	movlw	146
  7384  012F12  0100               	movlb	0	; () banked
  7385  012F14  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7386  012F16  0E0F               	movlw	15
  7387  012F18  0100               	movlb	0	; () banked
  7388  012F1A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7389                           
  7390                           ; BSR set to: 0
  7391  012F1C  0012               	return	
  7392  012F1E                     l10623:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;Port.c: 74: return (BytePtr)&TRISB;
  7396  012F1E  0E93               	movlw	147
  7397  012F20  0100               	movlb	0	; () banked
  7398  012F22  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7399  012F24  0E0F               	movlw	15
  7400  012F26  0100               	movlb	0	; () banked
  7401  012F28  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404  012F2A  0012               	return	
  7405  012F2C                     l10627:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;Port.c: 76: return (BytePtr)&TRISC;
  7409  012F2C  0E94               	movlw	148
  7410  012F2E  0100               	movlb	0	; () banked
  7411  012F30  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7412  012F32  0E0F               	movlw	15
  7413  012F34  0100               	movlb	0	; () banked
  7414  012F36  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7415                           
  7416                           ; BSR set to: 0
  7417  012F38  0012               	return	
  7418  012F3A                     l10631:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;Port.c: 78: return (BytePtr)&TRISD;
  7422  012F3A  0E95               	movlw	149
  7423  012F3C  0100               	movlb	0	; () banked
  7424  012F3E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7425  012F40  0E0F               	movlw	15
  7426  012F42  0100               	movlb	0	; () banked
  7427  012F44  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7428                           
  7429                           ; BSR set to: 0
  7430  012F46  0012               	return	
  7431  012F48                     l10635:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;Port.c: 80: return (BytePtr)&TRISE;
  7435  012F48  0E96               	movlw	150
  7436  012F4A  0100               	movlb	0	; () banked
  7437  012F4C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7438  012F4E  0E0F               	movlw	15
  7439  012F50  0100               	movlb	0	; () banked
  7440  012F52  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7441                           
  7442                           ; BSR set to: 0
  7443  012F54  0012               	return	
  7444  012F56                     l10639:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;Port.c: 82: return (BytePtr)&TRISF;
  7448  012F56  0E97               	movlw	151
  7449  012F58  0100               	movlb	0	; () banked
  7450  012F5A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7451  012F5C  0E0F               	movlw	15
  7452  012F5E  0100               	movlb	0	; () banked
  7453  012F60  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456  012F62  0012               	return	
  7457  012F64                     l10643:
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;Port.c: 84: return (BytePtr)&TRISG;
  7461  012F64  0E98               	movlw	152
  7462  012F66  0100               	movlb	0	; () banked
  7463  012F68  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7464  012F6A  0E0F               	movlw	15
  7465  012F6C  0100               	movlb	0	; () banked
  7466  012F6E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7467                           
  7468                           ; BSR set to: 0
  7469  012F70  0012               	return	
  7470  012F72                     l10647:
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;Port.c: 86: return (void*)0;
  7474  012F72  0E00               	movlw	0
  7475  012F74  0100               	movlb	0	; () banked
  7476  012F76  6FBA               	movwf	?_GetPortTRIS& (0+255),b
  7477  012F78  0E00               	movlw	0
  7478  012F7A  0100               	movlb	0	; () banked
  7479  012F7C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;Port.c: 87: }
  7483                           
  7484                           ; BSR set to: 0
  7485  012F7E  0012               	return	
  7486  012F80                     l10653:
  7487  012F80  0100               	movlb	0	; () banked
  7488  012F82  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
  7489                           
  7490                           ; Switch size 1, requested type "space"
  7491                           ; Number of cases is 7, Range of values is 0 to 6
  7492                           ; switch strategies available:
  7493                           ; Name         Instructions Cycles
  7494                           ; simple_byte           22    12 (average)
  7495                           ;	Chosen strategy is simple_byte
  7496  012F84  0A00               	xorlw	0	; case 0
  7497  012F86  B4D8               	btfsc	status,2,c
  7498  012F88  D7C3               	goto	l10619
  7499  012F8A  0A01               	xorlw	1	; case 1
  7500  012F8C  B4D8               	btfsc	status,2,c
  7501  012F8E  D7C7               	goto	l10623
  7502  012F90  0A03               	xorlw	3	; case 2
  7503  012F92  B4D8               	btfsc	status,2,c
  7504  012F94  D7CB               	goto	l10627
  7505  012F96  0A01               	xorlw	1	; case 3
  7506  012F98  B4D8               	btfsc	status,2,c
  7507  012F9A  D7CF               	goto	l10631
  7508  012F9C  0A07               	xorlw	7	; case 4
  7509  012F9E  B4D8               	btfsc	status,2,c
  7510  012FA0  D7D3               	goto	l10635
  7511  012FA2  0A01               	xorlw	1	; case 5
  7512  012FA4  B4D8               	btfsc	status,2,c
  7513  012FA6  D7D7               	goto	l10639
  7514  012FA8  0A03               	xorlw	3	; case 6
  7515  012FAA  B4D8               	btfsc	status,2,c
  7516  012FAC  D7DB               	goto	l10643
  7517  012FAE  D7E1               	goto	l10647
  7518  012FB0                     __end_of_GetPortTRIS:
  7519                           	opt stack 0
  7520                           tosu	equ	0xFFF
  7521                           tosh	equ	0xFFE
  7522                           tosl	equ	0xFFD
  7523                           pclath	equ	0xFFA
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           postdec1	equ	0xFE5
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _GetPortProperties *****************
  7544 ;; Defined at:
  7545 ;;		line 21 in file "Library/Port.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  pInput          1    wreg     enum E7730
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  pInput          1    2[BANK0 ] enum E7730
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7559 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;Total ram usage:        3 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    7
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_Port_Init
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text25
  7574  012FB0                     __ptext25:
  7575                           	opt stack 0
  7576  012FB0                     _GetPortProperties:
  7577                           	opt stack 21
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;incstack = 0
  7581                           ;GetPortProperties@pInput stored from wreg
  7582  012FB0  0100               	movlb	0	; () banked
  7583  012FB2  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
  7584                           
  7585                           ;Port.c: 23: switch (pInput)
  7586  012FB4  D038               	goto	l10577
  7587  012FB6                     l10543:
  7588                           
  7589                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7590  012FB6  0E8D               	movlw	low _PortA_Property
  7591  012FB8  0100               	movlb	0	; () banked
  7592  012FBA  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7593  012FBC  0EFF               	movlw	high _PortA_Property
  7594  012FBE  0100               	movlb	0	; () banked
  7595  012FC0  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7596                           
  7597                           ; BSR set to: 0
  7598  012FC2  0012               	return	
  7599  012FC4                     l10547:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7603  012FC4  0E8F               	movlw	low _PortB_Property
  7604  012FC6  0100               	movlb	0	; () banked
  7605  012FC8  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7606  012FCA  0EFF               	movlw	high _PortB_Property
  7607  012FCC  0100               	movlb	0	; () banked
  7608  012FCE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7609                           
  7610                           ; BSR set to: 0
  7611  012FD0  0012               	return	
  7612  012FD2                     l10551:
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7616  012FD2  0E91               	movlw	low _PortC_Property
  7617  012FD4  0100               	movlb	0	; () banked
  7618  012FD6  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7619  012FD8  0EFF               	movlw	high _PortC_Property
  7620  012FDA  0100               	movlb	0	; () banked
  7621  012FDC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7622                           
  7623                           ; BSR set to: 0
  7624  012FDE  0012               	return	
  7625  012FE0                     l10555:
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7629  012FE0  0E93               	movlw	low _PortD_Property
  7630  012FE2  0100               	movlb	0	; () banked
  7631  012FE4  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7632  012FE6  0EFF               	movlw	high _PortD_Property
  7633  012FE8  0100               	movlb	0	; () banked
  7634  012FEA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7635                           
  7636                           ; BSR set to: 0
  7637  012FEC  0012               	return	
  7638  012FEE                     l10559:
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7642  012FEE  0E95               	movlw	low _PortE_Property
  7643  012FF0  0100               	movlb	0	; () banked
  7644  012FF2  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7645  012FF4  0EFF               	movlw	high _PortE_Property
  7646  012FF6  0100               	movlb	0	; () banked
  7647  012FF8  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7648                           
  7649                           ; BSR set to: 0
  7650  012FFA  0012               	return	
  7651  012FFC                     l10563:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7655  012FFC  0E97               	movlw	low _PortF_Property
  7656  012FFE  0100               	movlb	0	; () banked
  7657  013000  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7658  013002  0EFF               	movlw	high _PortF_Property
  7659  013004  0100               	movlb	0	; () banked
  7660  013006  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7661                           
  7662                           ; BSR set to: 0
  7663  013008  0012               	return	
  7664  01300A                     l10567:
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7668  01300A  0E99               	movlw	low _PortG_Property
  7669  01300C  0100               	movlb	0	; () banked
  7670  01300E  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7671  013010  0EFF               	movlw	high _PortG_Property
  7672  013012  0100               	movlb	0	; () banked
  7673  013014  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676  013016  0012               	return	
  7677  013018                     l10571:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;Port.c: 40: return (void*)0;
  7681  013018  0E00               	movlw	0
  7682  01301A  0100               	movlb	0	; () banked
  7683  01301C  6FBA               	movwf	?_GetPortProperties& (0+255),b
  7684  01301E  0E00               	movlw	0
  7685  013020  0100               	movlb	0	; () banked
  7686  013022  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;Port.c: 41: }
  7690                           
  7691                           ; BSR set to: 0
  7692  013024  0012               	return	
  7693  013026                     l10577:
  7694  013026  0100               	movlb	0	; () banked
  7695  013028  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
  7696                           
  7697                           ; Switch size 1, requested type "space"
  7698                           ; Number of cases is 7, Range of values is 0 to 6
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte           22    12 (average)
  7702                           ;	Chosen strategy is simple_byte
  7703  01302A  0A00               	xorlw	0	; case 0
  7704  01302C  B4D8               	btfsc	status,2,c
  7705  01302E  D7C3               	goto	l10543
  7706  013030  0A01               	xorlw	1	; case 1
  7707  013032  B4D8               	btfsc	status,2,c
  7708  013034  D7C7               	goto	l10547
  7709  013036  0A03               	xorlw	3	; case 2
  7710  013038  B4D8               	btfsc	status,2,c
  7711  01303A  D7CB               	goto	l10551
  7712  01303C  0A01               	xorlw	1	; case 3
  7713  01303E  B4D8               	btfsc	status,2,c
  7714  013040  D7CF               	goto	l10555
  7715  013042  0A07               	xorlw	7	; case 4
  7716  013044  B4D8               	btfsc	status,2,c
  7717  013046  D7D3               	goto	l10559
  7718  013048  0A01               	xorlw	1	; case 5
  7719  01304A  B4D8               	btfsc	status,2,c
  7720  01304C  D7D7               	goto	l10563
  7721  01304E  0A03               	xorlw	3	; case 6
  7722  013050  B4D8               	btfsc	status,2,c
  7723  013052  D7DB               	goto	l10567
  7724  013054  D7E1               	goto	l10571
  7725  013056                     __end_of_GetPortProperties:
  7726                           	opt stack 0
  7727                           tosu	equ	0xFFF
  7728                           tosh	equ	0xFFE
  7729                           tosl	equ	0xFFD
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           postinc0	equ	0xFEE
  7739                           wreg	equ	0xFE8
  7740                           postdec1	equ	0xFE5
  7741                           fsr1h	equ	0xFE2
  7742                           fsr1l	equ	0xFE1
  7743                           indf2	equ	0xFDF
  7744                           postinc2	equ	0xFDE
  7745                           postdec2	equ	0xFDD
  7746                           fsr2h	equ	0xFDA
  7747                           fsr2l	equ	0xFD9
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function _GetPortPORT *****************
  7751 ;; Defined at:
  7752 ;;		line 44 in file "Library/Port.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  pInput          1    wreg     enum E7730
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  pInput          1    2[BANK0 ] enum E7730
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  2    0[BANK0 ] PTR struct Byte
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7766 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;Total ram usage:        3 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    7
  7773 ;; This function calls:
  7774 ;;		Nothing
  7775 ;; This function is called by:
  7776 ;;		_Port_Init
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text26
  7781  013056                     __ptext26:
  7782                           	opt stack 0
  7783  013056                     _GetPortPORT:
  7784                           	opt stack 21
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;incstack = 0
  7788                           ;GetPortPORT@pInput stored from wreg
  7789  013056  0100               	movlb	0	; () banked
  7790  013058  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
  7791                           
  7792                           ;Port.c: 46: switch (pInput)
  7793  01305A  D038               	goto	l10615
  7794  01305C                     l10581:
  7795                           
  7796                           ;Port.c: 49: return (BytePtr)&PORTA;
  7797  01305C  0E80               	movlw	128
  7798  01305E  0100               	movlb	0	; () banked
  7799  013060  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7800  013062  0E0F               	movlw	15
  7801  013064  0100               	movlb	0	; () banked
  7802  013066  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7803                           
  7804                           ; BSR set to: 0
  7805  013068  0012               	return	
  7806  01306A                     l10585:
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;Port.c: 51: return (BytePtr)&PORTB;
  7810  01306A  0E81               	movlw	129
  7811  01306C  0100               	movlb	0	; () banked
  7812  01306E  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7813  013070  0E0F               	movlw	15
  7814  013072  0100               	movlb	0	; () banked
  7815  013074  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7816                           
  7817                           ; BSR set to: 0
  7818  013076  0012               	return	
  7819  013078                     l10589:
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;Port.c: 53: return (BytePtr)&PORTC;
  7823  013078  0E82               	movlw	130
  7824  01307A  0100               	movlb	0	; () banked
  7825  01307C  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7826  01307E  0E0F               	movlw	15
  7827  013080  0100               	movlb	0	; () banked
  7828  013082  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831  013084  0012               	return	
  7832  013086                     l10593:
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;Port.c: 55: return (BytePtr)&PORTD;
  7836  013086  0E83               	movlw	131
  7837  013088  0100               	movlb	0	; () banked
  7838  01308A  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7839  01308C  0E0F               	movlw	15
  7840  01308E  0100               	movlb	0	; () banked
  7841  013090  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844  013092  0012               	return	
  7845  013094                     l10597:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;Port.c: 57: return (BytePtr)&PORTE;
  7849  013094  0E84               	movlw	132
  7850  013096  0100               	movlb	0	; () banked
  7851  013098  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7852  01309A  0E0F               	movlw	15
  7853  01309C  0100               	movlb	0	; () banked
  7854  01309E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7855                           
  7856                           ; BSR set to: 0
  7857  0130A0  0012               	return	
  7858  0130A2                     l10601:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;Port.c: 59: return (BytePtr)&PORTF;
  7862  0130A2  0E85               	movlw	133
  7863  0130A4  0100               	movlb	0	; () banked
  7864  0130A6  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7865  0130A8  0E0F               	movlw	15
  7866  0130AA  0100               	movlb	0	; () banked
  7867  0130AC  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7868                           
  7869                           ; BSR set to: 0
  7870  0130AE  0012               	return	
  7871  0130B0                     l10605:
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;Port.c: 61: return (BytePtr)&PORTG;
  7875  0130B0  0E86               	movlw	134
  7876  0130B2  0100               	movlb	0	; () banked
  7877  0130B4  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7878  0130B6  0E0F               	movlw	15
  7879  0130B8  0100               	movlb	0	; () banked
  7880  0130BA  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7881                           
  7882                           ; BSR set to: 0
  7883  0130BC  0012               	return	
  7884  0130BE                     l10609:
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;Port.c: 63: return (void*)0;
  7888  0130BE  0E00               	movlw	0
  7889  0130C0  0100               	movlb	0	; () banked
  7890  0130C2  6FBA               	movwf	?_GetPortPORT& (0+255),b
  7891  0130C4  0E00               	movlw	0
  7892  0130C6  0100               	movlb	0	; () banked
  7893  0130C8  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;Port.c: 64: }
  7897                           
  7898                           ; BSR set to: 0
  7899  0130CA  0012               	return	
  7900  0130CC                     l10615:
  7901  0130CC  0100               	movlb	0	; () banked
  7902  0130CE  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
  7903                           
  7904                           ; Switch size 1, requested type "space"
  7905                           ; Number of cases is 7, Range of values is 0 to 6
  7906                           ; switch strategies available:
  7907                           ; Name         Instructions Cycles
  7908                           ; simple_byte           22    12 (average)
  7909                           ;	Chosen strategy is simple_byte
  7910  0130D0  0A00               	xorlw	0	; case 0
  7911  0130D2  B4D8               	btfsc	status,2,c
  7912  0130D4  D7C3               	goto	l10581
  7913  0130D6  0A01               	xorlw	1	; case 1
  7914  0130D8  B4D8               	btfsc	status,2,c
  7915  0130DA  D7C7               	goto	l10585
  7916  0130DC  0A03               	xorlw	3	; case 2
  7917  0130DE  B4D8               	btfsc	status,2,c
  7918  0130E0  D7CB               	goto	l10589
  7919  0130E2  0A01               	xorlw	1	; case 3
  7920  0130E4  B4D8               	btfsc	status,2,c
  7921  0130E6  D7CF               	goto	l10593
  7922  0130E8  0A07               	xorlw	7	; case 4
  7923  0130EA  B4D8               	btfsc	status,2,c
  7924  0130EC  D7D3               	goto	l10597
  7925  0130EE  0A01               	xorlw	1	; case 5
  7926  0130F0  B4D8               	btfsc	status,2,c
  7927  0130F2  D7D7               	goto	l10601
  7928  0130F4  0A03               	xorlw	3	; case 6
  7929  0130F6  B4D8               	btfsc	status,2,c
  7930  0130F8  D7DB               	goto	l10605
  7931  0130FA  D7E1               	goto	l10609
  7932  0130FC                     __end_of_GetPortPORT:
  7933                           	opt stack 0
  7934                           tosu	equ	0xFFF
  7935                           tosh	equ	0xFFE
  7936                           tosl	equ	0xFFD
  7937                           pclath	equ	0xFFA
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           intcon	equ	0xFF2
  7945                           postinc0	equ	0xFEE
  7946                           wreg	equ	0xFE8
  7947                           postdec1	equ	0xFE5
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function _LED_Init *****************
  7958 ;; Defined at:
  7959 ;;		line 15 in file "Library/LED.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  pLED            1    wreg     enum E7683
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  pLED            1   45[BANK0 ] enum E7683
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        1 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:   12
  7980 ;; This function calls:
  7981 ;;		_LED_Set
  7982 ;;		_Port_SetPinType
  7983 ;; This function is called by:
  7984 ;;		_MXK_Init
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text27
  7989  013BA4                     __ptext27:
  7990                           	opt stack 0
  7991  013BA4                     _LED_Init:
  7992                           	opt stack 17
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;incstack = 0
  7996                           ;LED_Init@pLED stored from wreg
  7997  013BA4  0100               	movlb	0	; () banked
  7998  013BA6  6FE7               	movwf	LED_Init@pLED& (0+255),b
  7999                           
  8000                           ;LED.c: 17: switch (pLED)
  8001  013BA8  D01E               	goto	l11155
  8002  013BAA                     l11149:
  8003                           
  8004                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  8005  013BAA  0E7E               	movlw	low _PortC
  8006  013BAC  0100               	movlb	0	; () banked
  8007  013BAE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  8008  013BB0  0E00               	movlw	high _PortC
  8009  013BB2  0100               	movlb	0	; () banked
  8010  013BB4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8011  013BB6  0E00               	movlw	0
  8012  013BB8  0100               	movlb	0	; () banked
  8013  013BBA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  8014  013BBC  0E03               	movlw	3
  8015  013BBE  0100               	movlb	0	; () banked
  8016  013BC0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  8017  013BC2  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  8018                           
  8019                           ;LED.c: 21: break;
  8020  013BC6  D017               	goto	l11157
  8021  013BC8                     l11151:
  8022                           
  8023                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  8024  013BC8  0E7E               	movlw	low _PortC
  8025  013BCA  0100               	movlb	0	; () banked
  8026  013BCC  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  8027  013BCE  0E00               	movlw	high _PortC
  8028  013BD0  0100               	movlb	0	; () banked
  8029  013BD2  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8030  013BD4  0E01               	movlw	1
  8031  013BD6  0100               	movlb	0	; () banked
  8032  013BD8  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  8033  013BDA  0E03               	movlw	3
  8034  013BDC  0100               	movlb	0	; () banked
  8035  013BDE  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  8036  013BE0  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  8037                           
  8038                           ;LED.c: 25: }
  8039                           
  8040                           ;LED.c: 24: break;
  8041  013BE4  D008               	goto	l11157
  8042  013BE6                     l11155:
  8043  013BE6  0100               	movlb	0	; () banked
  8044  013BE8  51E7               	movf	LED_Init@pLED& (0+255),w,b
  8045                           
  8046                           ; Switch size 1, requested type "space"
  8047                           ; Number of cases is 2, Range of values is 0 to 1
  8048                           ; switch strategies available:
  8049                           ; Name         Instructions Cycles
  8050                           ; simple_byte            7     4 (average)
  8051                           ;	Chosen strategy is simple_byte
  8052  013BEA  0A00               	xorlw	0	; case 0
  8053  013BEC  B4D8               	btfsc	status,2,c
  8054  013BEE  D7DD               	goto	l11149
  8055  013BF0  0A01               	xorlw	1	; case 1
  8056  013BF2  B4D8               	btfsc	status,2,c
  8057  013BF4  D7E9               	goto	l11151
  8058  013BF6                     l11157:
  8059                           
  8060                           ;LED.c: 26: LED_Set(pLED, 0);
  8061  013BF6  0E00               	movlw	0
  8062  013BF8  0100               	movlb	0	; () banked
  8063  013BFA  6FCE               	movwf	LED_Set@pValue& (0+255),b
  8064  013BFC  0100               	movlb	0	; () banked
  8065  013BFE  51E7               	movf	LED_Init@pLED& (0+255),w,b
  8066  013C00  ECE2  F09E         	call	_LED_Set
  8067  013C04  0012               	return		;funcret
  8068  013C06                     __end_of_LED_Init:
  8069                           	opt stack 0
  8070                           tosu	equ	0xFFF
  8071                           tosh	equ	0xFFE
  8072                           tosl	equ	0xFFD
  8073                           pclath	equ	0xFFA
  8074                           tblptru	equ	0xFF8
  8075                           tblptrh	equ	0xFF7
  8076                           tblptrl	equ	0xFF6
  8077                           tablat	equ	0xFF5
  8078                           prodh	equ	0xFF4
  8079                           prodl	equ	0xFF3
  8080                           intcon	equ	0xFF2
  8081                           postinc0	equ	0xFEE
  8082                           wreg	equ	0xFE8
  8083                           postdec1	equ	0xFE5
  8084                           fsr1h	equ	0xFE2
  8085                           fsr1l	equ	0xFE1
  8086                           indf2	equ	0xFDF
  8087                           postinc2	equ	0xFDE
  8088                           postdec2	equ	0xFDD
  8089                           fsr2h	equ	0xFDA
  8090                           fsr2l	equ	0xFD9
  8091                           status	equ	0xFD8
  8092                           
  8093 ;; *************** function _LED_Set *****************
  8094 ;; Defined at:
  8095 ;;		line 33 in file "Library/LED.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  pLED            1    wreg     enum E7683
  8098 ;;  pValue          1   20[BANK0 ] unsigned char 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;  pLED            1   21[BANK0 ] enum E7683
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  1    wreg      void 
  8103 ;; Registers used:
  8104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8110 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;Total ram usage:        2 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:   11
  8117 ;; This function calls:
  8118 ;;		_Port_SetPin
  8119 ;; This function is called by:
  8120 ;;		_LED_Init
  8121 ;;		_SYSTEM_Initialize
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text28
  8126  013DC4                     __ptext28:
  8127                           	opt stack 0
  8128  013DC4                     _LED_Set:
  8129                           	opt stack 17
  8130                           
  8131                           ;incstack = 0
  8132                           ;LED_Set@pLED stored from wreg
  8133  013DC4  0100               	movlb	0	; () banked
  8134  013DC6  6FCF               	movwf	LED_Set@pLED& (0+255),b
  8135                           
  8136                           ;LED.c: 35: switch (pLED)
  8137  013DC8  D01C               	goto	l10539
  8138  013DCA                     l10533:
  8139                           
  8140                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  8141  013DCA  0E7E               	movlw	low _PortC
  8142  013DCC  0100               	movlb	0	; () banked
  8143  013DCE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8144  013DD0  0E00               	movlw	high _PortC
  8145  013DD2  0100               	movlb	0	; () banked
  8146  013DD4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8147  013DD6  0E00               	movlw	0
  8148  013DD8  0100               	movlb	0	; () banked
  8149  013DDA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8150  013DDC  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
  8151  013DE0  ECA9  F094         	call	_Port_SetPin	;wreg free
  8152                           
  8153                           ;LED.c: 39: break;
  8154  013DE4  0012               	return	
  8155  013DE6                     l10535:
  8156                           
  8157                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  8158  013DE6  0E7E               	movlw	low _PortC
  8159  013DE8  0100               	movlb	0	; () banked
  8160  013DEA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8161  013DEC  0E00               	movlw	high _PortC
  8162  013DEE  0100               	movlb	0	; () banked
  8163  013DF0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8164  013DF2  0E01               	movlw	1
  8165  013DF4  0100               	movlb	0	; () banked
  8166  013DF6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8167  013DF8  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
  8168  013DFC  ECA9  F094         	call	_Port_SetPin	;wreg free
  8169                           
  8170                           ;LED.c: 43: }
  8171                           
  8172                           ;LED.c: 42: break;
  8173  013E00  0012               	return	
  8174  013E02                     l10539:
  8175  013E02  0100               	movlb	0	; () banked
  8176  013E04  51CF               	movf	LED_Set@pLED& (0+255),w,b
  8177                           
  8178                           ; Switch size 1, requested type "space"
  8179                           ; Number of cases is 2, Range of values is 0 to 1
  8180                           ; switch strategies available:
  8181                           ; Name         Instructions Cycles
  8182                           ; simple_byte            7     4 (average)
  8183                           ;	Chosen strategy is simple_byte
  8184  013E06  0A00               	xorlw	0	; case 0
  8185  013E08  B4D8               	btfsc	status,2,c
  8186  013E0A  D7DF               	goto	l10533
  8187  013E0C  0A01               	xorlw	1	; case 1
  8188  013E0E  A4D8               	btfss	status,2,c
  8189  013E10  0012               	return	
  8190  013E12  D7E9               	goto	l10535
  8191  013E14                     __end_of_LED_Set:
  8192                           	opt stack 0
  8193                           tosu	equ	0xFFF
  8194                           tosh	equ	0xFFE
  8195                           tosl	equ	0xFFD
  8196                           pclath	equ	0xFFA
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           postinc0	equ	0xFEE
  8205                           wreg	equ	0xFE8
  8206                           postdec1	equ	0xFE5
  8207                           fsr1h	equ	0xFE2
  8208                           fsr1l	equ	0xFE1
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216 ;; *************** function _MXK_Dequeue *****************
  8217 ;; Defined at:
  8218 ;;		line 153 in file "Library/MXK.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;		None
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;		None
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      void 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;Total ram usage:        0 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:   12
  8239 ;; This function calls:
  8240 ;;		Absolute function
  8241 ;;		_Motor_Step
  8242 ;; This function is called by:
  8243 ;;		_main
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text29
  8248  014368                     __ptext29:
  8249                           	opt stack 0
  8250  014368                     _MXK_Dequeue:
  8251                           	opt stack 18
  8252                           
  8253                           ;MXK.c: 155: if (lQueue)
  8254                           
  8255                           ;incstack = 0
  8256  014368  5025               	movf	_lQueue,w,c	;volatile
  8257  01436A  1026               	iorwf	_lQueue+1,w,c	;volatile
  8258  01436C  1027               	iorwf	_lQueue+2,w,c	;volatile
  8259  01436E  B4D8               	btfsc	status,2,c
  8260  014370  D00C               	goto	l12411
  8261                           
  8262                           ;MXK.c: 156: lQueue();
  8263  014372  D801               	call	u9258
  8264  014374  D00A               	goto	l12411
  8265  014376                     u9258:
  8266  014376  0005               	push	
  8267  014378  6EFA               	movwf	pclath,c
  8268  01437A  5025               	movf	_lQueue,w,c	;volatile
  8269  01437C  6EFD               	movwf	tosl,c
  8270  01437E  5026               	movf	_lQueue+1,w,c	;volatile
  8271  014380  6EFE               	movwf	tosh,c
  8272  014382  5027               	movf	_lQueue+2,w,c	;volatile
  8273  014384  6EFF               	movwf	tosu,c
  8274  014386  50FA               	movf	pclath,w,c
  8275  014388  0012               	return		;indir
  8276  01438A                     l12411:
  8277                           
  8278                           ;MXK.c: 157: lQueue = 0;
  8279  01438A  0E00               	movlw	0
  8280  01438C  6E25               	movwf	_lQueue,c	;volatile
  8281  01438E  0E00               	movlw	0
  8282  014390  6E26               	movwf	_lQueue+1,c	;volatile
  8283  014392  0E00               	movlw	0
  8284  014394  6E27               	movwf	_lQueue+2,c	;volatile
  8285  014396  0012               	return		;funcret
  8286  014398                     __end_of_MXK_Dequeue:
  8287                           	opt stack 0
  8288                           tosu	equ	0xFFF
  8289                           tosh	equ	0xFFE
  8290                           tosl	equ	0xFFD
  8291                           pclath	equ	0xFFA
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodh	equ	0xFF4
  8297                           prodl	equ	0xFF3
  8298                           intcon	equ	0xFF2
  8299                           postinc0	equ	0xFEE
  8300                           wreg	equ	0xFE8
  8301                           postdec1	equ	0xFE5
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _Motor_Step *****************
  8312 ;; Defined at:
  8313 ;;		line 75 in file "Library/Motor.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;		None
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;		None
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;Total ram usage:        2 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:   11
  8334 ;; This function calls:
  8335 ;;		_MXK_Queue
  8336 ;;		_MXK_Release
  8337 ;;		_MXK_SwitchTo
  8338 ;;		_Port_SetPin
  8339 ;;		_Timer0_Restart
  8340 ;;		_Timer0_Stop
  8341 ;; This function is called by:
  8342 ;;		_Motor_Init
  8343 ;;		_Timer0_ISR
  8344 ;;		_MXK_Dequeue
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text30
  8349  0122F2                     __ptext30:
  8350                           	opt stack 0
  8351  0122F2                     _Motor_Step:
  8352                           	opt stack 0
  8353                           
  8354                           ;Skip over the trampoline to the duplicate function for level 2
  8355  0122F2  B249               	btfsc	btemp,1,c
  8356  0122F4  EF0B  F092         	goto	i2_Motor_Step
  8357  0122F8                     _Motor_Step$intlevel0:
  8358                           	opt stack 18
  8359                           
  8360                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  8361                           
  8362                           ;incstack = 0
  8363  0122F8  EE20 F004          	lfsr	2,4
  8364  0122FC  502C               	movf	_lMotor,w,c
  8365  0122FE  26D9               	addwf	fsr2l,f,c
  8366  012300  502D               	movf	_lMotor+1,w,c
  8367  012302  22DA               	addwfc	fsr2h,f,c
  8368  012304  50DF               	movf	indf2,w,c
  8369  012306  EC54  F0A0         	call	_MXK_SwitchTo
  8370  01230A  0900               	iorlw	0
  8371  01230C  B4D8               	btfsc	status,2,c
  8372  01230E  D07A               	goto	l11329
  8373                           
  8374                           ;Motor.c: 78: {
  8375                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  8376  012310  C02C  FFD9         	movff	_lMotor,fsr2l
  8377  012314  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8378  012318  50DE               	movf	postinc2,w,c
  8379  01231A  10DE               	iorwf	postinc2,w,c
  8380  01231C  B4D8               	btfsc	status,2,c
  8381  01231E  D06D               	goto	l11323
  8382                           
  8383                           ;Motor.c: 80: {
  8384                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  8385  012320  C02C  FFD9         	movff	_lMotor,fsr2l
  8386  012324  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8387  012328  0E01               	movlw	1
  8388  01232A  BEDB               	btfsc	plusw2,7,c
  8389  01232C  D026               	goto	l11307
  8390  01232E  0E01               	movlw	1
  8391  012330  50DB               	movf	plusw2,w,c
  8392  012332  E103               	bnz	u7750
  8393  012334  04DE               	decf	postinc2,w,c
  8394  012336  A0D8               	btfss	status,0,c
  8395  012338  D020               	goto	l11307
  8396  01233A                     u7750:
  8397                           
  8398                           ;Motor.c: 83: {
  8399                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  8400  01233A  C02C  FFD9         	movff	_lMotor,fsr2l
  8401  01233E  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8402  012342  28DE               	incf	postinc2,w,c
  8403  012344  E104               	bnz	u7760
  8404  012346  0E7F               	movlw	127
  8405  012348  18DE               	xorwf	postinc2,w,c
  8406  01234A  B4D8               	btfsc	status,2,c
  8407  01234C  D007               	goto	l11305
  8408  01234E                     u7760:
  8409                           
  8410                           ;Motor.c: 85: lMotor->mDelta --;
  8411  01234E  C02C  FFD9         	movff	_lMotor,fsr2l
  8412  012352  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8413  012356  06DE               	decf	postinc2,f,c
  8414  012358  0E00               	movlw	0
  8415  01235A  5ADD               	subwfb	postdec2,f,c
  8416  01235C                     l11305:
  8417                           
  8418                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  8419  01235C  0E92               	movlw	low _PortE
  8420  01235E  0100               	movlb	0	; () banked
  8421  012360  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8422  012362  0E00               	movlw	high _PortE
  8423  012364  0100               	movlb	0	; () banked
  8424  012366  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8425  012368  0E00               	movlw	0
  8426  01236A  0100               	movlb	0	; () banked
  8427  01236C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8428  01236E  0E01               	movlw	1
  8429  012370  0100               	movlb	0	; () banked
  8430  012372  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  8431  012374  ECA9  F094         	call	_Port_SetPin	;wreg free
  8432                           
  8433                           ;Motor.c: 88: }
  8434  012378  D01F               	goto	l11313
  8435  01237A                     l11307:
  8436                           
  8437                           ;Motor.c: 89: else
  8438                           ;Motor.c: 90: {
  8439                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  8440  01237A  C02C  FFD9         	movff	_lMotor,fsr2l
  8441  01237E  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8442  012382  04DE               	decf	postinc2,w,c
  8443  012384  E104               	bnz	u7770
  8444  012386  0E80               	movlw	128
  8445  012388  18DE               	xorwf	postinc2,w,c
  8446  01238A  B4D8               	btfsc	status,2,c
  8447  01238C  D007               	goto	l11311
  8448  01238E                     u7770:
  8449                           
  8450                           ;Motor.c: 92: lMotor->mDelta ++;
  8451  01238E  C02C  FFD9         	movff	_lMotor,fsr2l
  8452  012392  C02D  FFDA         	movff	_lMotor+1,fsr2h
  8453  012396  2ADE               	incf	postinc2,f,c
  8454  012398  0E00               	movlw	0
  8455  01239A  22DD               	addwfc	postdec2,f,c
  8456  01239C                     l11311:
  8457                           
  8458                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  8459  01239C  0E92               	movlw	low _PortE
  8460  01239E  0100               	movlb	0	; () banked
  8461  0123A0  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8462  0123A2  0E00               	movlw	high _PortE
  8463  0123A4  0100               	movlb	0	; () banked
  8464  0123A6  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8465  0123A8  0E00               	movlw	0
  8466  0123AA  0100               	movlb	0	; () banked
  8467  0123AC  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8468  0123AE  0E00               	movlw	0
  8469  0123B0  0100               	movlb	0	; () banked
  8470  0123B2  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  8471  0123B4  ECA9  F094         	call	_Port_SetPin	;wreg free
  8472  0123B8                     l11313:
  8473                           
  8474                           ;Motor.c: 95: }
  8475                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  8476  0123B8  0E92               	movlw	low _PortE
  8477  0123BA  0100               	movlb	0	; () banked
  8478  0123BC  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8479  0123BE  0E00               	movlw	high _PortE
  8480  0123C0  0100               	movlb	0	; () banked
  8481  0123C2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8482  0123C4  0E01               	movlw	1
  8483  0123C6  0100               	movlb	0	; () banked
  8484  0123C8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8485  0123CA  0E01               	movlw	1
  8486  0123CC  0100               	movlb	0	; () banked
  8487  0123CE  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  8488  0123D0  ECA9  F094         	call	_Port_SetPin	;wreg free
  8489                           
  8490                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  8491  0123D4  0E92               	movlw	low _PortE
  8492  0123D6  0100               	movlb	0	; () banked
  8493  0123D8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
  8494  0123DA  0E00               	movlw	high _PortE
  8495  0123DC  0100               	movlb	0	; () banked
  8496  0123DE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8497  0123E0  0E01               	movlw	1
  8498  0123E2  0100               	movlb	0	; () banked
  8499  0123E4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
  8500  0123E6  0E00               	movlw	0
  8501  0123E8  0100               	movlb	0	; () banked
  8502  0123EA  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
  8503  0123EC  ECA9  F094         	call	_Port_SetPin	;wreg free
  8504                           
  8505                           ;Motor.c: 101: MXK_Release();
  8506  0123F0  ECBB  F0A3         	call	_MXK_Release	;wreg free
  8507                           
  8508                           ;Motor.c: 102: Timer0_Restart();
  8509  0123F4  EC1D  F0A4         	call	_Timer0_Restart	;wreg free
  8510                           
  8511                           ;Motor.c: 103: return;
  8512  0123F8  0012               	return	
  8513  0123FA                     l11323:
  8514                           
  8515                           ;Motor.c: 104: }
  8516                           ;Motor.c: 105: MXK_Release();
  8517  0123FA  ECBB  F0A3         	call	_MXK_Release	;wreg free
  8518                           
  8519                           ;Motor.c: 106: Timer0_Stop();
  8520  0123FE  EC44  F0A4         	call	_Timer0_Stop	;wreg free
  8521                           
  8522                           ;Motor.c: 107: return;
  8523  012402  0012               	return	
  8524  012404                     l11329:
  8525                           
  8526                           ;Motor.c: 108: }
  8527                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8528  012404  C06B  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
  8529  012408  C06C  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8530  01240C  C06D  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8531  012410  EC09  F0A4         	call	_MXK_Queue	;wreg free
  8532  012414  0012               	return		;funcret
  8533  012416                     __end_of_Motor_Step:
  8534                           	opt stack 0
  8535                           tosu	equ	0xFFF
  8536                           tosh	equ	0xFFE
  8537                           tosl	equ	0xFFD
  8538                           pclath	equ	0xFFA
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           postinc0	equ	0xFEE
  8547                           wreg	equ	0xFE8
  8548                           postdec1	equ	0xFE5
  8549                           fsr1h	equ	0xFE2
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           plusw2	equ	0xFDB
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559 ;; *************** function _Timer0_Stop *****************
  8560 ;; Defined at:
  8561 ;;		line 89 in file "Library/Timer0.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		None
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;Total ram usage:        0 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    7
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_Motor_Step
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text31
  8590  014888                     __ptext31:
  8591                           	opt stack 0
  8592  014888                     _Timer0_Stop:
  8593                           	opt stack 21
  8594                           
  8595                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8596                           
  8597                           ;incstack = 0
  8598  014888  9AF2               	bcf	intcon,5,c	;volatile
  8599                           
  8600                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8601  01488A  94F2               	bcf	intcon,2,c	;volatile
  8602  01488C  0012               	return		;funcret
  8603  01488E                     __end_of_Timer0_Stop:
  8604                           	opt stack 0
  8605                           tosu	equ	0xFFF
  8606                           tosh	equ	0xFFE
  8607                           tosl	equ	0xFFD
  8608                           pclath	equ	0xFFA
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           postinc0	equ	0xFEE
  8617                           wreg	equ	0xFE8
  8618                           postdec1	equ	0xFE5
  8619                           fsr1h	equ	0xFE2
  8620                           fsr1l	equ	0xFE1
  8621                           indf2	equ	0xFDF
  8622                           postinc2	equ	0xFDE
  8623                           postdec2	equ	0xFDD
  8624                           plusw2	equ	0xFDB
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _Timer0_Restart *****************
  8630 ;; Defined at:
  8631 ;;		line 83 in file "Library/Timer0.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  1    wreg      void 
  8638 ;; Registers used:
  8639 ;;		None
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;Total ram usage:        0 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    7
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		_Motor_Step
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	text32
  8660  01483A                     __ptext32:
  8661                           	opt stack 0
  8662  01483A                     _Timer0_Restart:
  8663                           	opt stack 21
  8664                           
  8665                           ;Timer0.c: 85: TMR0 = COUNTER;
  8666                           
  8667                           ;incstack = 0
  8668  01483A  C02A  FFD6         	movff	_COUNTER,4054	;volatile
  8669  01483E  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
  8670                           
  8671                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8672  014842  8AF2               	bsf	intcon,5,c	;volatile
  8673  014844  0012               	return		;funcret
  8674  014846                     __end_of_Timer0_Restart:
  8675                           	opt stack 0
  8676                           tosu	equ	0xFFF
  8677                           tosh	equ	0xFFE
  8678                           tosl	equ	0xFFD
  8679                           pclath	equ	0xFFA
  8680                           tblptru	equ	0xFF8
  8681                           tblptrh	equ	0xFF7
  8682                           tblptrl	equ	0xFF6
  8683                           tablat	equ	0xFF5
  8684                           prodh	equ	0xFF4
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           postinc0	equ	0xFEE
  8688                           wreg	equ	0xFE8
  8689                           postdec1	equ	0xFE5
  8690                           fsr1h	equ	0xFE2
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           plusw2	equ	0xFDB
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _MXK_SwitchTo *****************
  8701 ;; Defined at:
  8702 ;;		line 105 in file "Library/MXK.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  pModule         1    wreg     enum E7869
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  pModule         1    7[BANK0 ] enum E7869
  8707 ;;  CUR             1    6[BANK0 ] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      unsigned char 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    8
  8724 ;; This function calls:
  8725 ;;		_delay_us
  8726 ;; This function is called by:
  8727 ;;		_Motor_Step
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text33
  8732  0140A8                     __ptext33:
  8733                           	opt stack 0
  8734  0140A8                     _MXK_SwitchTo:
  8735                           	opt stack 20
  8736                           
  8737                           ;incstack = 0
  8738                           ;MXK_SwitchTo@pModule stored from wreg
  8739  0140A8  0100               	movlb	0	; () banked
  8740  0140AA  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8741                           
  8742                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8743  0140AC  5086               	movf	3974,w,c	;volatile
  8744  0140AE  0B0F               	andlw	15
  8745  0140B0  0100               	movlb	0	; () banked
  8746  0140B2  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8750  0140B4  5044               	movf	_Bus_State,w,c
  8751  0140B6  A4D8               	btfss	status,2,c
  8752  0140B8  D002               	goto	l10801
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;MXK.c: 110: return 0;
  8756  0140BA  0E00               	movlw	0
  8757                           
  8758                           ; BSR set to: 0
  8759  0140BC  0012               	return	
  8760  0140BE                     l10801:
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8764  0140BE  0E00               	movlw	0
  8765  0140C0  6E44               	movwf	_Bus_State,c
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;MXK.c: 114: if (CUR != pModule)
  8769  0140C2  0100               	movlb	0	; () banked
  8770  0140C4  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8771  0140C6  0100               	movlb	0	; () banked
  8772  0140C8  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8773  0140CA  B4D8               	btfsc	status,2,c
  8774  0140CC  D00C               	goto	l10809
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;MXK.c: 115: {
  8778                           ;MXK.c: 116: PORTG &= ~(0xF);
  8779  0140CE  0EF0               	movlw	240
  8780  0140D0  1686               	andwf	3974,f,c	;volatile
  8781                           
  8782                           ;MXK.c: 117: PORTG |= pModule;
  8783  0140D2  0100               	movlb	0	; () banked
  8784  0140D4  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8785  0140D6  1286               	iorwf	3974,f,c	;volatile
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;MXK.c: 120: delay_us(10);
  8789  0140D8  0E00               	movlw	0
  8790  0140DA  0100               	movlb	0	; () banked
  8791  0140DC  6FBB               	movwf	(delay_us@us+1)& (0+255),b
  8792  0140DE  0E0A               	movlw	10
  8793  0140E0  6FBA               	movwf	delay_us@us& (0+255),b
  8794  0140E2  ECB9  F09E         	call	_delay_us	;wreg free
  8795  0140E6                     l10809:
  8796                           
  8797                           ;MXK.c: 121: }
  8798                           ;MXK.c: 122: return 1;
  8799  0140E6  0E01               	movlw	1
  8800  0140E8  0012               	return	
  8801  0140EA                     __end_of_MXK_SwitchTo:
  8802                           	opt stack 0
  8803                           tosu	equ	0xFFF
  8804                           tosh	equ	0xFFE
  8805                           tosl	equ	0xFFD
  8806                           pclath	equ	0xFFA
  8807                           tblptru	equ	0xFF8
  8808                           tblptrh	equ	0xFF7
  8809                           tblptrl	equ	0xFF6
  8810                           tablat	equ	0xFF5
  8811                           prodh	equ	0xFF4
  8812                           prodl	equ	0xFF3
  8813                           intcon	equ	0xFF2
  8814                           postinc0	equ	0xFEE
  8815                           wreg	equ	0xFE8
  8816                           postdec1	equ	0xFE5
  8817                           fsr1h	equ	0xFE2
  8818                           fsr1l	equ	0xFE1
  8819                           indf2	equ	0xFDF
  8820                           postinc2	equ	0xFDE
  8821                           postdec2	equ	0xFDD
  8822                           plusw2	equ	0xFDB
  8823                           fsr2h	equ	0xFDA
  8824                           fsr2l	equ	0xFD9
  8825                           status	equ	0xFD8
  8826                           
  8827 ;; *************** function _MXK_Release *****************
  8828 ;; Defined at:
  8829 ;;		line 130 in file "Library/MXK.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;		None
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;		None
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      unsigned char 
  8836 ;; Registers used:
  8837 ;;		wreg, status,2, status,0
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;Total ram usage:        0 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    7
  8850 ;; This function calls:
  8851 ;;		Nothing
  8852 ;; This function is called by:
  8853 ;;		_Motor_Step
  8854 ;;		_main
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           	psect	text34
  8859  014776                     __ptext34:
  8860                           	opt stack 0
  8861  014776                     _MXK_Release:
  8862                           	opt stack 23
  8863                           
  8864                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8865                           
  8866                           ;incstack = 0
  8867  014776  0E01               	movlw	1
  8868  014778  6E44               	movwf	_Bus_State,c
  8869                           
  8870                           ;MXK.c: 134: if (lQueue != 0)
  8871  01477A  5025               	movf	_lQueue,w,c	;volatile
  8872  01477C  1026               	iorwf	_lQueue+1,w,c	;volatile
  8873  01477E  1027               	iorwf	_lQueue+2,w,c	;volatile
  8874  014780  B4D8               	btfsc	status,2,c
  8875  014782  D002               	goto	l10821
  8876                           
  8877                           ;MXK.c: 135: return 1;
  8878  014784  0E01               	movlw	1
  8879  014786  0012               	return	
  8880  014788                     l10821:
  8881                           
  8882                           ;MXK.c: 137: return 0;
  8883  014788  0E00               	movlw	0
  8884  01478A  0012               	return	
  8885  01478C                     __end_of_MXK_Release:
  8886                           	opt stack 0
  8887                           tosu	equ	0xFFF
  8888                           tosh	equ	0xFFE
  8889                           tosl	equ	0xFFD
  8890                           pclath	equ	0xFFA
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           postinc0	equ	0xFEE
  8899                           wreg	equ	0xFE8
  8900                           postdec1	equ	0xFE5
  8901                           fsr1h	equ	0xFE2
  8902                           fsr1l	equ	0xFE1
  8903                           indf2	equ	0xFDF
  8904                           postinc2	equ	0xFDE
  8905                           postdec2	equ	0xFDD
  8906                           plusw2	equ	0xFDB
  8907                           fsr2h	equ	0xFDA
  8908                           fsr2l	equ	0xFD9
  8909                           status	equ	0xFD8
  8910                           
  8911 ;; *************** function _MXK_Queue *****************
  8912 ;; Defined at:
  8913 ;;		line 144 in file "Library/MXK.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8916 ;;		 -> Absolute function(1), Motor_Step(1), 
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  1    wreg      void 
  8921 ;; Registers used:
  8922 ;;		wreg, status,2, status,0
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8928 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;Total ram usage:        3 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    7
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_Motor_Step
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           	psect	text35
  8943  014812                     __ptext35:
  8944                           	opt stack 0
  8945  014812                     _MXK_Queue:
  8946                           	opt stack 21
  8947                           
  8948                           ;MXK.c: 146: lQueue = pCallback;
  8949                           
  8950                           ;incstack = 0
  8951  014812  C0BA  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8952  014816  C0BB  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8953  01481A  C0BC  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8954  01481E  0012               	return		;funcret
  8955  014820                     __end_of_MXK_Queue:
  8956                           	opt stack 0
  8957                           tosu	equ	0xFFF
  8958                           tosh	equ	0xFFE
  8959                           tosl	equ	0xFFD
  8960                           pclath	equ	0xFFA
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           postinc0	equ	0xFEE
  8969                           wreg	equ	0xFE8
  8970                           postdec1	equ	0xFE5
  8971                           fsr1h	equ	0xFE2
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           postdec2	equ	0xFDD
  8976                           plusw2	equ	0xFDB
  8977                           fsr2h	equ	0xFDA
  8978                           fsr2l	equ	0xFD9
  8979                           status	equ	0xFD8
  8980                           
  8981 ;; *************** function _MXK_BlockSwitchTo *****************
  8982 ;; Defined at:
  8983 ;;		line 82 in file "Library/MXK.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  pModule         1    wreg     enum E7869
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  pModule         1    7[BANK0 ] enum E7869
  8988 ;;  CUR             1    6[BANK0 ] unsigned char 
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      unsigned char 
  8991 ;; Registers used:
  8992 ;;		wreg, status,2, status,0, cstack
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;Total ram usage:        2 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:    8
  9005 ;; This function calls:
  9006 ;;		_delay_us
  9007 ;; This function is called by:
  9008 ;;		_main
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           	psect	text36
  9013  01412A                     __ptext36:
  9014                           	opt stack 0
  9015  01412A                     _MXK_BlockSwitchTo:
  9016                           	opt stack 22
  9017                           
  9018                           ;incstack = 0
  9019                           ;MXK_BlockSwitchTo@pModule stored from wreg
  9020  01412A  0100               	movlb	0	; () banked
  9021  01412C  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  9022                           
  9023                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  9024  01412E  5086               	movf	3974,w,c	;volatile
  9025  014130  0B0F               	andlw	15
  9026  014132  0100               	movlb	0	; () banked
  9027  014134  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  9028  014136                     l11735:
  9029  014136  5044               	movf	_Bus_State,w,c
  9030  014138  B4D8               	btfsc	status,2,c
  9031  01413A  D7FD               	goto	l11735
  9032                           
  9033                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  9034  01413C  0E00               	movlw	0
  9035  01413E  6E44               	movwf	_Bus_State,c
  9036                           
  9037                           ;MXK.c: 90: if (CUR != pModule)
  9038  014140  0100               	movlb	0	; () banked
  9039  014142  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  9040  014144  0100               	movlb	0	; () banked
  9041  014146  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  9042  014148  B4D8               	btfsc	status,2,c
  9043  01414A  D00C               	goto	l11745
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;MXK.c: 91: {
  9047                           ;MXK.c: 92: PORTG &= ~(0xF);
  9048  01414C  0EF0               	movlw	240
  9049  01414E  1686               	andwf	3974,f,c	;volatile
  9050                           
  9051                           ;MXK.c: 93: PORTG |= pModule;
  9052  014150  0100               	movlb	0	; () banked
  9053  014152  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  9054  014154  1286               	iorwf	3974,f,c	;volatile
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;MXK.c: 96: delay_us(10);
  9058  014156  0E00               	movlw	0
  9059  014158  0100               	movlb	0	; () banked
  9060  01415A  6FBB               	movwf	(delay_us@us+1)& (0+255),b
  9061  01415C  0E0A               	movlw	10
  9062  01415E  6FBA               	movwf	delay_us@us& (0+255),b
  9063  014160  ECB9  F09E         	call	_delay_us	;wreg free
  9064  014164                     l11745:
  9065                           
  9066                           ;MXK.c: 97: }
  9067                           ;MXK.c: 98: return 1;
  9068  014164  0E01               	movlw	1
  9069  014166  0012               	return	
  9070  014168                     __end_of_MXK_BlockSwitchTo:
  9071                           	opt stack 0
  9072                           tosu	equ	0xFFF
  9073                           tosh	equ	0xFFE
  9074                           tosl	equ	0xFFD
  9075                           pclath	equ	0xFFA
  9076                           tblptru	equ	0xFF8
  9077                           tblptrh	equ	0xFF7
  9078                           tblptrl	equ	0xFF6
  9079                           tablat	equ	0xFF5
  9080                           prodh	equ	0xFF4
  9081                           prodl	equ	0xFF3
  9082                           intcon	equ	0xFF2
  9083                           postinc0	equ	0xFEE
  9084                           wreg	equ	0xFE8
  9085                           postdec1	equ	0xFE5
  9086                           fsr1h	equ	0xFE2
  9087                           fsr1l	equ	0xFE1
  9088                           indf2	equ	0xFDF
  9089                           postinc2	equ	0xFDE
  9090                           postdec2	equ	0xFDD
  9091                           plusw2	equ	0xFDB
  9092                           fsr2h	equ	0xFDA
  9093                           fsr2l	equ	0xFD9
  9094                           status	equ	0xFD8
  9095                           
  9096 ;; *************** function _delay_us *****************
  9097 ;; Defined at:
  9098 ;;		line 255 in file "Library/Types.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;  us              2    0[BANK0 ] unsigned short 
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  u               4    2[BANK0 ] unsigned long 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      void 
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:        6 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    7
  9119 ;; This function calls:
  9120 ;;		Nothing
  9121 ;; This function is called by:
  9122 ;;		_MXK_BlockSwitchTo
  9123 ;;		_MXK_SwitchTo
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           	psect	text37
  9128  013D72                     __ptext37:
  9129                           	opt stack 0
  9130  013D72                     _delay_us:
  9131                           	opt stack 20
  9132                           
  9133                           ;Types.c: 256: unsigned long u;
  9134                           ;Types.c: 257: while (us--) {
  9135                           
  9136                           ;incstack = 0
  9137  013D72  D01C               	goto	l10323
  9138  013D74                     l10315:
  9139                           
  9140                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  9141  013D74  0E00               	movlw	0
  9142  013D76  0100               	movlb	0	; () banked
  9143  013D78  6FBC               	movwf	delay_us@u& (0+255),b
  9144  013D7A  0E00               	movlw	0
  9145  013D7C  6FBD               	movwf	(delay_us@u+1)& (0+255),b
  9146  013D7E  0E00               	movlw	0
  9147  013D80  6FBE               	movwf	(delay_us@u+2)& (0+255),b
  9148  013D82  0E00               	movlw	0
  9149  013D84  6FBF               	movwf	(delay_us@u+3)& (0+255),b
  9150  013D86                     l10317:
  9151                           
  9152                           ; BSR set to: 0
  9153  013D86  0100               	movlb	0	; () banked
  9154  013D88  51BC               	movf	delay_us@u& (0+255),w,b
  9155  013D8A  0100               	movlb	0	; () banked
  9156  013D8C  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
  9157  013D8E  0100               	movlb	0	; () banked
  9158  013D90  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
  9159  013D92  0100               	movlb	0	; () banked
  9160  013D94  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
  9161  013D96  A4D8               	btfss	status,2,c
  9162  013D98  D009               	goto	l10323
  9163                           
  9164                           ; BSR set to: 0
  9165                           
  9166                           ; BSR set to: 0
  9167  013D9A  F000               	nop		; ;# 
  9168  013D9C  0E01               	movlw	1
  9169  013D9E  0100               	movlb	0	; () banked
  9170  013DA0  27BC               	addwf	delay_us@u& (0+255),f,b
  9171  013DA2  0E00               	movlw	0
  9172  013DA4  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
  9173  013DA6  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
  9174  013DA8  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
  9175  013DAA  D7ED               	goto	l10317
  9176  013DAC                     l10323:
  9177  013DAC  0100               	movlb	0	; () banked
  9178  013DAE  07BA               	decf	delay_us@us& (0+255),f,b
  9179  013DB0  A0D8               	btfss	status,0,c
  9180  013DB2  07BB               	decf	(delay_us@us+1)& (0+255),f,b
  9181  013DB4  0100               	movlb	0	; () banked
  9182  013DB6  29BA               	incf	delay_us@us& (0+255),w,b
  9183  013DB8  E1DD               	bnz	l10315
  9184  013DBA  0100               	movlb	0	; () banked
  9185  013DBC  29BB               	incf	(delay_us@us+1)& (0+255),w,b
  9186  013DBE  B4D8               	btfsc	status,2,c
  9187  013DC0  0012               	return	
  9188  013DC2  D7D8               	goto	l10315
  9189  013DC4                     __end_of_delay_us:
  9190                           	opt stack 0
  9191                           tosu	equ	0xFFF
  9192                           tosh	equ	0xFFE
  9193                           tosl	equ	0xFFD
  9194                           pclath	equ	0xFFA
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           postinc0	equ	0xFEE
  9203                           wreg	equ	0xFE8
  9204                           postdec1	equ	0xFE5
  9205                           fsr1h	equ	0xFE2
  9206                           fsr1l	equ	0xFE1
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           plusw2	equ	0xFDB
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function _LCD_Init *****************
  9216 ;; Defined at:
  9217 ;;		line 172 in file "Library/LCD.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;		None
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  i               2   55[BANK0 ] unsigned short 
  9222 ;; Return value:  Size  Location     Type
  9223 ;;                  1    wreg      void 
  9224 ;; Registers used:
  9225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;Total ram usage:        4 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; Hardware stack levels required when called:   15
  9238 ;; This function calls:
  9239 ;;		_Configure_GPIOs
  9240 ;;		_LCD_Fill
  9241 ;;		_LCD_Write
  9242 ;;		_Set_Rotation
  9243 ;;		_delay_ms
  9244 ;; This function is called by:
  9245 ;;		_main
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text38
  9250  011D74                     __ptext38:
  9251                           	opt stack 0
  9252  011D74                     _LCD_Init:
  9253                           	opt stack 15
  9254                           
  9255                           ;LCD.c: 174: UINT16 i;
  9256                           ;LCD.c: 175: Configure_GPIOs();
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;incstack = 0
  9260  011D74  EC60  F09C         	call	_Configure_GPIOs	;wreg free
  9261                           
  9262                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9263  011D78  0E00               	movlw	0
  9264  011D7A  0100               	movlb	0	; () banked
  9265  011D7C  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
  9266  011D7E  0E00               	movlw	0
  9267  011D80  6FF1               	movwf	LCD_Init@i& (0+255),b
  9268                           
  9269                           ; BSR set to: 0
  9270  011D82  0100               	movlb	0	; () banked
  9271  011D84  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
  9272  011D86  E106               	bnz	u7830
  9273  011D88  0E59               	movlw	89
  9274  011D8A  0100               	movlb	0	; () banked
  9275  011D8C  5DF1               	subwf	LCD_Init@i& (0+255),w,b
  9276  011D8E  B0D8               	btfsc	status,0,c
  9277  011D90  D08B               	goto	l11391
  9278  011D92  D001               	goto	l11375
  9279  011D94                     u7830:
  9280                           
  9281                           ; BSR set to: 0
  9282  011D94  D089               	goto	l11391
  9283  011D96                     l11375:
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;LCD.c: 178: {
  9287                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9288  011D96  90D8               	bcf	status,0,c
  9289  011D98  0100               	movlb	0	; () banked
  9290  011D9A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
  9291  011D9C  6EF6               	movwf	tblptrl,c
  9292  011D9E  0100               	movlb	0	; () banked
  9293  011DA0  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9294  011DA2  6EF7               	movwf	tblptrh,c
  9295  011DA4  0EC1               	movlw	low _InitList
  9296  011DA6  26F6               	addwf	tblptrl,f,c
  9297  011DA8  0EFC               	movlw	high _InitList
  9298  011DAA  22F7               	addwfc	tblptrh,f,c
  9299  011DAC                     	if	1	;There are 3 active tblptr bytes
  9300  011DAC  6AF8               	clrf	tblptru,c
  9301  011DAE  0E00               	movlw	low (__mediumconst shr (0+16))
  9302  011DB0  22F8               	addwfc	tblptru,f,c
  9303  011DB2                     	endif
  9304  011DB2  0009               	tblrd		*+
  9305  011DB4  0E80               	movlw	128
  9306  011DB6  18F5               	xorwf	tablat,w,c
  9307  011DB8  0009               	tblrd		*+
  9308  011DBA  10F5               	iorwf	tablat,w,c
  9309  011DBC  A4D8               	btfss	status,2,c
  9310  011DBE  D022               	goto	l11381
  9311                           
  9312                           ; BSR set to: 0
  9313  011DC0  0100               	movlb	0	; () banked
  9314  011DC2  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
  9315  011DC4  E11F               	bnz	l11381
  9316  011DC6  0E58               	movlw	88
  9317  011DC8  0100               	movlb	0	; () banked
  9318  011DCA  5DF1               	subwf	LCD_Init@i& (0+255),w,b
  9319  011DCC  B0D8               	btfsc	status,0,c
  9320  011DCE  D01A               	goto	l11381
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9324  011DD0  0100               	movlb	0	; () banked
  9325  011DD2  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
  9326  011DD4  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
  9327  011DD6  90D8               	bcf	status,0,c
  9328  011DD8  0100               	movlb	0	; () banked
  9329  011DDA  35F1               	rlcf	LCD_Init@i& (0+255),w,b
  9330  011DDC  6EF6               	movwf	tblptrl,c
  9331  011DDE  0100               	movlb	0	; () banked
  9332  011DE0  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9333  011DE2  6EF7               	movwf	tblptrh,c
  9334  011DE4  0EC1               	movlw	low _InitList
  9335  011DE6  26F6               	addwf	tblptrl,f,c
  9336  011DE8  0EFC               	movlw	high _InitList
  9337  011DEA  22F7               	addwfc	tblptrh,f,c
  9338  011DEC                     	if	1	;There are 3 active tblptr bytes
  9339  011DEC  6AF8               	clrf	tblptru,c
  9340  011DEE  0E00               	movlw	low (__mediumconst shr (0+16))
  9341  011DF0  22F8               	addwfc	tblptru,f,c
  9342  011DF2                     	endif
  9343  011DF2  0009               	tblrd		*+
  9344  011DF4  CFF5 F0BA          	movff	tablat,delay_ms@ms
  9345  011DF8  000A               	tblrd		*-
  9346  011DFA  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
  9347  011DFE  EC04  F09D         	call	_delay_ms	;wreg free
  9348  011E02  D04B               	goto	l11387
  9349  011E04                     l11381:
  9350                           
  9351                           ;LCD.c: 181: else
  9352                           ;LCD.c: 182: {
  9353                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9354  011E04  90D8               	bcf	status,0,c
  9355  011E06  0100               	movlb	0	; () banked
  9356  011E08  35F1               	rlcf	LCD_Init@i& (0+255),w,b
  9357  011E0A  6EF6               	movwf	tblptrl,c
  9358  011E0C  0100               	movlb	0	; () banked
  9359  011E0E  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9360  011E10  6EF7               	movwf	tblptrh,c
  9361  011E12  0EC1               	movlw	low _InitList
  9362  011E14  26F6               	addwf	tblptrl,f,c
  9363  011E16  0EFC               	movlw	high _InitList
  9364  011E18  22F7               	addwfc	tblptrh,f,c
  9365  011E1A                     	if	1	;There are 3 active tblptr bytes
  9366  011E1A  6AF8               	clrf	tblptru,c
  9367  011E1C  0E00               	movlw	low (__mediumconst shr (0+16))
  9368  011E1E  22F8               	addwfc	tblptru,f,c
  9369  011E20                     	endif
  9370  011E20  0009               	tblrd		*+
  9371  011E22  0E00               	movlw	0
  9372  011E24  5EF5               	subwf	tablat,f,c
  9373  011E26  0009               	tblrd		*+
  9374  011E28  0E01               	movlw	1
  9375  011E2A  5AF5               	subwfb	tablat,f,c
  9376  011E2C  A0D8               	btfss	status,0,c
  9377  011E2E  D020               	goto	l11385
  9378                           
  9379                           ; BSR set to: 0
  9380  011E30  0E00               	movlw	0
  9381  011E32  0100               	movlb	0	; () banked
  9382  011E34  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9383  011E36  90D8               	bcf	status,0,c
  9384  011E38  0100               	movlb	0	; () banked
  9385  011E3A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
  9386  011E3C  6EF6               	movwf	tblptrl,c
  9387  011E3E  0100               	movlb	0	; () banked
  9388  011E40  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9389  011E42  6EF7               	movwf	tblptrh,c
  9390  011E44  0EC1               	movlw	low _InitList
  9391  011E46  26F6               	addwf	tblptrl,f,c
  9392  011E48  0EFC               	movlw	high _InitList
  9393  011E4A  22F7               	addwfc	tblptrh,f,c
  9394  011E4C                     	if	1	;There are 3 active tblptr bytes
  9395  011E4C  6AF8               	clrf	tblptru,c
  9396  011E4E  0E00               	movlw	low (__mediumconst shr (0+16))
  9397  011E50  22F8               	addwfc	tblptru,f,c
  9398  011E52                     	endif
  9399  011E52  0009               	tblrd		*+
  9400  011E54  CFF5 F0EF          	movff	tablat,??_LCD_Init
  9401  011E58  0009               	tblrd		*+
  9402  011E5A  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
  9403  011E5E  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
  9404  011E62  0100               	movlb	0	; () banked
  9405  011E64  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
  9406  011E66  0100               	movlb	0	; () banked
  9407  011E68  51EF               	movf	??_LCD_Init& (0+255),w,b
  9408  011E6A  ECE2  F0A2         	call	_LCD_Write
  9409  011E6E  D015               	goto	l11387
  9410  011E70                     l11385:
  9411                           
  9412                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9413  011E70  0E01               	movlw	1
  9414  011E72  0100               	movlb	0	; () banked
  9415  011E74  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9416  011E76  90D8               	bcf	status,0,c
  9417  011E78  0100               	movlb	0	; () banked
  9418  011E7A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
  9419  011E7C  6EF6               	movwf	tblptrl,c
  9420  011E7E  0100               	movlb	0	; () banked
  9421  011E80  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9422  011E82  6EF7               	movwf	tblptrh,c
  9423  011E84  0EC1               	movlw	low _InitList
  9424  011E86  26F6               	addwf	tblptrl,f,c
  9425  011E88  0EFC               	movlw	high _InitList
  9426  011E8A  22F7               	addwfc	tblptrh,f,c
  9427  011E8C                     	if	1	;There are 3 active tblptr bytes
  9428  011E8C  6AF8               	clrf	tblptru,c
  9429  011E8E  0E00               	movlw	low (__mediumconst shr (0+16))
  9430  011E90  22F8               	addwfc	tblptru,f,c
  9431  011E92                     	endif
  9432  011E92  0008               	tblrd		*
  9433  011E94  50F5               	movf	tablat,w,c
  9434  011E96  ECE2  F0A2         	call	_LCD_Write
  9435  011E9A                     l11387:
  9436  011E9A  0100               	movlb	0	; () banked
  9437  011E9C  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
  9438  011E9E  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
  9439                           
  9440                           ; BSR set to: 0
  9441  011EA0  0100               	movlb	0	; () banked
  9442  011EA2  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
  9443  011EA4  E101               	bnz	l11391
  9444  011EA6  D770               	goto	L5
  9445  011EA8                     l11391:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;LCD.c: 185: }
  9449                           ;LCD.c: 186: }
  9450                           ;LCD.c: 187: delay_ms(100);
  9451  011EA8  0E00               	movlw	0
  9452  011EAA  0100               	movlb	0	; () banked
  9453  011EAC  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  9454  011EAE  0E64               	movlw	100
  9455  011EB0  6FBA               	movwf	delay_ms@ms& (0+255),b
  9456  011EB2  EC04  F09D         	call	_delay_ms	;wreg free
  9457                           
  9458                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9459  011EB6  0E00               	movlw	0
  9460  011EB8  0100               	movlb	0	; () banked
  9461  011EBA  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9462  011EBC  0E29               	movlw	41
  9463  011EBE  ECE2  F0A2         	call	_LCD_Write
  9464                           
  9465                           ;LCD.c: 189: Set_Rotation(1);
  9466  011EC2  0E01               	movlw	1
  9467  011EC4  EC1E  F099         	call	_Set_Rotation
  9468                           
  9469                           ;LCD.c: 191: delay_ms(100);
  9470  011EC8  0E00               	movlw	0
  9471  011ECA  0100               	movlb	0	; () banked
  9472  011ECC  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  9473  011ECE  0E64               	movlw	100
  9474  011ED0  6FBA               	movwf	delay_ms@ms& (0+255),b
  9475  011ED2  EC04  F09D         	call	_delay_ms	;wreg free
  9476                           
  9477                           ;LCD.c: 192: LCD_Fill(0x0000);
  9478  011ED6  0E00               	movlw	0
  9479  011ED8  0100               	movlb	0	; () banked
  9480  011EDA  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9481  011EDC  0E00               	movlw	0
  9482  011EDE  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
  9483  011EE0  EC61  F09E         	call	_LCD_Fill	;wreg free
  9484  011EE4  0012               	return		;funcret
  9485  011EE6                     __end_of_LCD_Init:
  9486                           	opt stack 0
  9487                           tosu	equ	0xFFF
  9488                           tosh	equ	0xFFE
  9489                           tosl	equ	0xFFD
  9490                           pclath	equ	0xFFA
  9491                           tblptru	equ	0xFF8
  9492                           tblptrh	equ	0xFF7
  9493                           tblptrl	equ	0xFF6
  9494                           tablat	equ	0xFF5
  9495                           prodh	equ	0xFF4
  9496                           prodl	equ	0xFF3
  9497                           intcon	equ	0xFF2
  9498                           postinc0	equ	0xFEE
  9499                           wreg	equ	0xFE8
  9500                           postdec1	equ	0xFE5
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           plusw2	equ	0xFDB
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _Set_Rotation *****************
  9512 ;; Defined at:
  9513 ;;		line 248 in file "Library/LCD.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;  m               1    wreg     unsigned char 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  m               1    5[BANK0 ] unsigned char 
  9518 ;;  rotation        1    6[BANK0 ] unsigned char 
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  1    wreg      void 
  9521 ;; Registers used:
  9522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;Total ram usage:        2 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    9
  9535 ;; This function calls:
  9536 ;;		_LCD_Write
  9537 ;; This function is called by:
  9538 ;;		_LCD_Init
  9539 ;; This function uses a non-reentrant model
  9540 ;;
  9541                           
  9542                           	psect	text39
  9543  01323C                     __ptext39:
  9544                           	opt stack 0
  9545  01323C                     _Set_Rotation:
  9546                           	opt stack 20
  9547                           
  9548                           ;incstack = 0
  9549                           ;Set_Rotation@m stored from wreg
  9550  01323C  0100               	movlb	0	; () banked
  9551  01323E  6FBF               	movwf	Set_Rotation@m& (0+255),b
  9552                           
  9553                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9554  013240  0E00               	movlw	0
  9555  013242  0100               	movlb	0	; () banked
  9556  013244  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9560  013246  0E00               	movlw	0
  9561  013248  0100               	movlb	0	; () banked
  9562  01324A  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9563  01324C  0E36               	movlw	54
  9564  01324E  ECE2  F0A2         	call	_LCD_Write
  9565                           
  9566                           ;LCD.c: 253: rotation = (m % 4);
  9567  013252  0100               	movlb	0	; () banked
  9568  013254  51BF               	movf	Set_Rotation@m& (0+255),w,b
  9569  013256  0B03               	andlw	3
  9570  013258  0100               	movlb	0	; () banked
  9571  01325A  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
  9572                           
  9573                           ;LCD.c: 255: switch(rotation)
  9574  01325C  D02C               	goto	l11077
  9575  01325E                     l11051:
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;LCD.c: 258: {
  9579                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9580  01325E  0E01               	movlw	1
  9581  013260  0100               	movlb	0	; () banked
  9582  013262  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9583  013264  0EC8               	movlw	200
  9584  013266  ECE2  F0A2         	call	_LCD_Write
  9585                           
  9586                           ;LCD.c: 260: w = 128;
  9587  01326A  0E80               	movlw	128
  9588  01326C  6E47               	movwf	_w,c
  9589                           
  9590                           ;LCD.c: 261: l = 128;
  9591  01326E  0E80               	movlw	128
  9592  013270  6E46               	movwf	_l,c
  9593                           
  9594                           ;LCD.c: 262: break;
  9595  013272  0012               	return	
  9596  013274                     l11057:
  9597                           
  9598                           ;LCD.c: 265: {
  9599                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9600  013274  0E01               	movlw	1
  9601  013276  0100               	movlb	0	; () banked
  9602  013278  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9603  01327A  0EA8               	movlw	168
  9604  01327C  ECE2  F0A2         	call	_LCD_Write
  9605                           
  9606                           ;LCD.c: 267: w = 128;
  9607  013280  0E80               	movlw	128
  9608  013282  6E47               	movwf	_w,c
  9609                           
  9610                           ;LCD.c: 268: l = 128;
  9611  013284  0E80               	movlw	128
  9612  013286  6E46               	movwf	_l,c
  9613                           
  9614                           ;LCD.c: 269: break;
  9615  013288  0012               	return	
  9616  01328A                     l11063:
  9617                           
  9618                           ;LCD.c: 272: {
  9619                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9620  01328A  0E01               	movlw	1
  9621  01328C  0100               	movlb	0	; () banked
  9622  01328E  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9623  013290  0E08               	movlw	8
  9624  013292  ECE2  F0A2         	call	_LCD_Write
  9625                           
  9626                           ;LCD.c: 274: w = 128;
  9627  013296  0E80               	movlw	128
  9628  013298  6E47               	movwf	_w,c
  9629                           
  9630                           ;LCD.c: 275: l = 128;
  9631  01329A  0E80               	movlw	128
  9632  01329C  6E46               	movwf	_l,c
  9633                           
  9634                           ;LCD.c: 276: break;
  9635  01329E  0012               	return	
  9636  0132A0                     l11069:
  9637                           
  9638                           ;LCD.c: 279: {
  9639                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9640  0132A0  0E01               	movlw	1
  9641  0132A2  0100               	movlb	0	; () banked
  9642  0132A4  6FBD               	movwf	LCD_Write@mode& (0+255),b
  9643  0132A6  0E68               	movlw	104
  9644  0132A8  ECE2  F0A2         	call	_LCD_Write
  9645                           
  9646                           ;LCD.c: 281: w = 128;
  9647  0132AC  0E80               	movlw	128
  9648  0132AE  6E47               	movwf	_w,c
  9649                           
  9650                           ;LCD.c: 282: l = 128;
  9651  0132B0  0E80               	movlw	128
  9652  0132B2  6E46               	movwf	_l,c
  9653                           
  9654                           ;LCD.c: 284: }
  9655                           ;LCD.c: 285: }
  9656                           
  9657                           ;LCD.c: 283: break;
  9658  0132B4  0012               	return	
  9659  0132B6                     l11077:
  9660  0132B6  0100               	movlb	0	; () banked
  9661  0132B8  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
  9662                           
  9663                           ; Switch size 1, requested type "space"
  9664                           ; Number of cases is 4, Range of values is 0 to 3
  9665                           ; switch strategies available:
  9666                           ; Name         Instructions Cycles
  9667                           ; simple_byte           13     7 (average)
  9668                           ;	Chosen strategy is simple_byte
  9669  0132BA  0A00               	xorlw	0	; case 0
  9670  0132BC  B4D8               	btfsc	status,2,c
  9671  0132BE  D7CF               	goto	l11051
  9672  0132C0  0A01               	xorlw	1	; case 1
  9673  0132C2  B4D8               	btfsc	status,2,c
  9674  0132C4  D7D7               	goto	l11057
  9675  0132C6  0A03               	xorlw	3	; case 2
  9676  0132C8  B4D8               	btfsc	status,2,c
  9677  0132CA  D7DF               	goto	l11063
  9678  0132CC  0A01               	xorlw	1	; case 3
  9679  0132CE  A4D8               	btfss	status,2,c
  9680  0132D0  0012               	return	
  9681  0132D2  D7E6               	goto	l11069
  9682  0132D4                     __end_of_Set_Rotation:
  9683                           	opt stack 0
  9684                           tosu	equ	0xFFF
  9685                           tosh	equ	0xFFE
  9686                           tosl	equ	0xFFD
  9687                           pclath	equ	0xFFA
  9688                           tblptru	equ	0xFF8
  9689                           tblptrh	equ	0xFF7
  9690                           tblptrl	equ	0xFF6
  9691                           tablat	equ	0xFF5
  9692                           prodh	equ	0xFF4
  9693                           prodl	equ	0xFF3
  9694                           intcon	equ	0xFF2
  9695                           postinc0	equ	0xFEE
  9696                           wreg	equ	0xFE8
  9697                           postdec1	equ	0xFE5
  9698                           fsr1h	equ	0xFE2
  9699                           fsr1l	equ	0xFE1
  9700                           indf2	equ	0xFDF
  9701                           postinc2	equ	0xFDE
  9702                           postdec2	equ	0xFDD
  9703                           plusw2	equ	0xFDB
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _LCD_Fill *****************
  9709 ;; Defined at:
  9710 ;;		line 287 in file "Library/LCD.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  pColour         2    9[BANK0 ] unsigned short 
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;  j               1   12[BANK0 ] unsigned char 
  9715 ;;  i               1   11[BANK0 ] unsigned char 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      void 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;Total ram usage:        4 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:   10
  9732 ;; This function calls:
  9733 ;;		_LCD_Word_Write
  9734 ;;		_Set_Addr_Window
  9735 ;; This function is called by:
  9736 ;;		_LCD_Init
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740                           	psect	text40
  9741  013CC2                     __ptext40:
  9742                           	opt stack 0
  9743  013CC2                     _LCD_Fill:
  9744                           	opt stack 19
  9745                           
  9746                           ;LCD.c: 296: UINT8 i = 0x00;
  9747                           
  9748                           ;incstack = 0
  9749  013CC2  0E00               	movlw	0
  9750  013CC4  0100               	movlb	0	; () banked
  9751  013CC6  6FC5               	movwf	LCD_Fill@i& (0+255),b
  9752                           
  9753                           ;LCD.c: 297: UINT8 j = 0x00;
  9754  013CC8  0E00               	movlw	0
  9755  013CCA  0100               	movlb	0	; () banked
  9756  013CCC  6FC6               	movwf	LCD_Fill@j& (0+255),b
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9760  013CCE  0E00               	movlw	0
  9761  013CD0  0100               	movlb	0	; () banked
  9762  013CD2  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
  9763  013CD4  0447               	decf	_w,w,c
  9764  013CD6  0100               	movlb	0	; () banked
  9765  013CD8  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
  9766  013CDA  0446               	decf	_l,w,c
  9767  013CDC  0100               	movlb	0	; () banked
  9768  013CDE  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
  9769  013CE0  0E00               	movlw	0
  9770  013CE2  ECDB  F096         	call	_Set_Addr_Window
  9771                           
  9772                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9773  013CE6  C046  F0C6         	movff	_l,LCD_Fill@j
  9774  013CEA                     l11085:
  9775  013CEA  0100               	movlb	0	; () banked
  9776  013CEC  51C6               	movf	LCD_Fill@j& (0+255),w,b
  9777  013CEE  0100               	movlb	0	; () banked
  9778  013CF0  B4D8               	btfsc	status,2,c
  9779  013CF2  0012               	return	
  9780                           
  9781                           ; BSR set to: 0
  9782                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9783                           
  9784                           ; BSR set to: 0
  9785  013CF4  C047  F0C5         	movff	_w,LCD_Fill@i
  9786  013CF8                     l11089:
  9787                           
  9788                           ; BSR set to: 0
  9789  013CF8  0100               	movlb	0	; () banked
  9790  013CFA  51C5               	movf	LCD_Fill@i& (0+255),w,b
  9791  013CFC  0100               	movlb	0	; () banked
  9792  013CFE  B4D8               	btfsc	status,2,c
  9793  013D00  D009               	goto	l11099
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9797                           
  9798                           ; BSR set to: 0
  9799                           
  9800                           ; BSR set to: 0
  9801  013D02  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9802  013D06  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9803  013D0A  EC3E  F0A3         	call	_LCD_Word_Write	;wreg free
  9804  013D0E  0100               	movlb	0	; () banked
  9805  013D10  07C5               	decf	LCD_Fill@i& (0+255),f,b
  9806  013D12  D7F2               	goto	l11089
  9807  013D14                     l11099:
  9808                           
  9809                           ; BSR set to: 0
  9810  013D14  0100               	movlb	0	; () banked
  9811  013D16  07C6               	decf	LCD_Fill@j& (0+255),f,b
  9812  013D18  D7E8               	goto	l11085
  9813  013D1A                     __end_of_LCD_Fill:
  9814                           	opt stack 0
  9815                           tosu	equ	0xFFF
  9816                           tosh	equ	0xFFE
  9817                           tosl	equ	0xFFD
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           plusw2	equ	0xFDB
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function _Configure_GPIOs *****************
  9840 ;; Defined at:
  9841 ;;		line 46 in file "Library/LCD.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  1    wreg      void 
  9848 ;; Registers used:
  9849 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:   14
  9862 ;; This function calls:
  9863 ;;		_LCD_Reset
  9864 ;;		_Port_SetPinType
  9865 ;;		_SPI_Init
  9866 ;;		_SPI_MaxSpeed
  9867 ;; This function is called by:
  9868 ;;		_LCD_Init
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text41
  9873  0138C0                     __ptext41:
  9874                           	opt stack 0
  9875  0138C0                     _Configure_GPIOs:
  9876                           	opt stack 15
  9877                           
  9878                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9879                           
  9880                           ; BSR set to: 0
  9881                           ;incstack = 0
  9882  0138C0  0E98               	movlw	low _PortF
  9883  0138C2  0100               	movlb	0	; () banked
  9884  0138C4  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  9885  0138C6  0E01               	movlw	high _PortF
  9886  0138C8  0100               	movlb	0	; () banked
  9887  0138CA  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9888  0138CC  0E07               	movlw	7
  9889  0138CE  0100               	movlb	0	; () banked
  9890  0138D0  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  9891  0138D2  0E03               	movlw	3
  9892  0138D4  0100               	movlb	0	; () banked
  9893  0138D6  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  9894  0138D8  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  9895                           
  9896                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9897  0138DC  0E98               	movlw	low _PortF
  9898  0138DE  0100               	movlb	0	; () banked
  9899  0138E0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
  9900  0138E2  0E01               	movlw	high _PortF
  9901  0138E4  0100               	movlb	0	; () banked
  9902  0138E6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9903  0138E8  0E06               	movlw	6
  9904  0138EA  0100               	movlb	0	; () banked
  9905  0138EC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
  9906  0138EE  0E03               	movlw	3
  9907  0138F0  0100               	movlb	0	; () banked
  9908  0138F2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
  9909  0138F4  EC8E  F08B         	call	_Port_SetPinType	;wreg free
  9910                           
  9911                           ;LCD.c: 55: LCD_Reset();
  9912  0138F8  EC0A  F09F         	call	_LCD_Reset	;wreg free
  9913                           
  9914                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9915  0138FC  0EC0               	movlw	192
  9916  0138FE  0100               	movlb	0	; () banked
  9917  013900  6FE7               	movwf	SPI_Init@pClock& (0+255),b
  9918  013902  0EC6               	movlw	198
  9919  013904  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9920  013906  0E2D               	movlw	45
  9921  013908  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9922  01390A  0E00               	movlw	0
  9923  01390C  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9924  01390E  0E01               	movlw	1
  9925  013910  0100               	movlb	0	; () banked
  9926  013912  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
  9927  013914  0E01               	movlw	1
  9928  013916  0100               	movlb	0	; () banked
  9929  013918  6FEC               	movwf	SPI_Init@pMode& (0+255),b
  9930  01391A  EC00  F080         	call	_SPI_Init	;wreg free
  9931                           
  9932                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9933  01391E  0E6F               	movlw	low _SPI2
  9934  013920  0100               	movlb	0	; () banked
  9935  013922  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9936  013924  0E01               	movlw	high _SPI2
  9937  013926  0100               	movlb	0	; () banked
  9938  013928  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9939  01392A  EC79  F09B         	call	_SPI_MaxSpeed	;wreg free
  9940  01392E  0012               	return		;funcret
  9941  013930                     __end_of_Configure_GPIOs:
  9942                           	opt stack 0
  9943                           tosu	equ	0xFFF
  9944                           tosh	equ	0xFFE
  9945                           tosl	equ	0xFFD
  9946                           pclath	equ	0xFFA
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           postinc0	equ	0xFEE
  9955                           wreg	equ	0xFE8
  9956                           postdec1	equ	0xFE5
  9957                           fsr1h	equ	0xFE2
  9958                           fsr1l	equ	0xFE1
  9959                           indf2	equ	0xFDF
  9960                           postinc2	equ	0xFDE
  9961                           postdec2	equ	0xFDD
  9962                           plusw2	equ	0xFDB
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8
  9966                           
  9967 ;; *************** function _SPI_MaxSpeed *****************
  9968 ;; Defined at:
  9969 ;;		line 201 in file "Library/SPI.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9972 ;;		 -> SPI2(11), 
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  1    wreg      void 
  9977 ;; Registers used:
  9978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;Total ram usage:        2 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    9
  9991 ;; This function calls:
  9992 ;;		_Byte_SetBit
  9993 ;;		_Byte_SetQuad
  9994 ;; This function is called by:
  9995 ;;		_Configure_GPIOs
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text42
 10000  0136F2                     __ptext42:
 10001                           	opt stack 0
 10002  0136F2                     _SPI_MaxSpeed:
 10003                           	opt stack 19
 10004                           
 10005                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 10006                           
 10007                           ;incstack = 0
 10008  0136F2  0100               	movlb	0	; () banked
 10009  0136F4  EE20 F006          	lfsr	2,6
 10010  0136F8  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10011  0136FA  26D9               	addwf	fsr2l,f,c
 10012  0136FC  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10013  0136FE  22DA               	addwfc	fsr2h,f,c
 10014  013700  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 10015  013704  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 10016  013708  0E05               	movlw	5
 10017  01370A  0100               	movlb	0	; () banked
 10018  01370C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 10019  01370E  0E00               	movlw	0
 10020  013710  0100               	movlb	0	; () banked
 10021  013712  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 10022  013714  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 10023                           
 10024                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 10025  013718  0100               	movlb	0	; () banked
 10026  01371A  EE20 F006          	lfsr	2,6
 10027  01371E  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10028  013720  26D9               	addwf	fsr2l,f,c
 10029  013722  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10030  013724  22DA               	addwfc	fsr2h,f,c
 10031  013726  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 10032  01372A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 10033  01372E  0E00               	movlw	0
 10034  013730  0100               	movlb	0	; () banked
 10035  013732  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 10036  013734  0E00               	movlw	0
 10037  013736  0100               	movlb	0	; () banked
 10038  013738  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 10039  01373A  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 10040                           
 10041                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 10042  01373E  0100               	movlb	0	; () banked
 10043  013740  EE20 F006          	lfsr	2,6
 10044  013744  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10045  013746  26D9               	addwf	fsr2l,f,c
 10046  013748  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10047  01374A  22DA               	addwfc	fsr2h,f,c
 10048  01374C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 10049  013750  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 10050  013754  0E05               	movlw	5
 10051  013756  0100               	movlb	0	; () banked
 10052  013758  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 10053  01375A  0E01               	movlw	1
 10054  01375C  0100               	movlb	0	; () banked
 10055  01375E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 10056  013760  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 10057  013764  0012               	return		;funcret
 10058  013766                     __end_of_SPI_MaxSpeed:
 10059                           	opt stack 0
 10060                           tosu	equ	0xFFF
 10061                           tosh	equ	0xFFE
 10062                           tosl	equ	0xFFD
 10063                           pclath	equ	0xFFA
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           postinc0	equ	0xFEE
 10072                           wreg	equ	0xFE8
 10073                           postdec1	equ	0xFE5
 10074                           fsr1h	equ	0xFE2
 10075                           fsr1l	equ	0xFE1
 10076                           indf2	equ	0xFDF
 10077                           postinc2	equ	0xFDE
 10078                           postdec2	equ	0xFDD
 10079                           plusw2	equ	0xFDB
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           
 10084 ;; *************** function _LCD_Reset *****************
 10085 ;; Defined at:
 10086 ;;		line 95 in file "Library/LCD.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;		None
 10089 ;; Auto vars:     Size  Location     Type
 10090 ;;		None
 10091 ;; Return value:  Size  Location     Type
 10092 ;;                  1    wreg      void 
 10093 ;; Registers used:
 10094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10095 ;; Tracked objects:
 10096 ;;		On entry : 0/0
 10097 ;;		On exit  : 0/0
 10098 ;;		Unchanged: 0/0
 10099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;Total ram usage:        0 bytes
 10105 ;; Hardware stack levels used:    1
 10106 ;; Hardware stack levels required when called:   13
 10107 ;; This function calls:
 10108 ;;		_LED_Toggle
 10109 ;;		_Reset_High
 10110 ;;		_Reset_Low
 10111 ;;		_delay_ms
 10112 ;; This function is called by:
 10113 ;;		_Configure_GPIOs
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           	psect	text43
 10118  013E14                     __ptext43:
 10119                           	opt stack 0
 10120  013E14                     _LCD_Reset:
 10121                           	opt stack 15
 10122                           
 10123                           ;LCD.c: 97: Reset_High();
 10124                           
 10125                           ;incstack = 0
 10126  013E14  EC02  F0A3         	call	_Reset_High	;wreg free
 10127                           
 10128                           ;LCD.c: 98: LED_Toggle(eLED2);
 10129  013E18  0E01               	movlw	1
 10130  013E1A  ECC8  F09F         	call	_LED_Toggle
 10131                           
 10132                           ;LCD.c: 99: delay_ms(0x80);
 10133  013E1E  0E00               	movlw	0
 10134  013E20  0100               	movlb	0	; () banked
 10135  013E22  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 10136  013E24  0E80               	movlw	128
 10137  013E26  6FBA               	movwf	delay_ms@ms& (0+255),b
 10138  013E28  EC04  F09D         	call	_delay_ms	;wreg free
 10139                           
 10140                           ;LCD.c: 100: LED_Toggle(eLED2);
 10141  013E2C  0E01               	movlw	1
 10142  013E2E  ECC8  F09F         	call	_LED_Toggle
 10143                           
 10144                           ;LCD.c: 101: Reset_Low();
 10145  013E32  ECF3  F0A2         	call	_Reset_Low	;wreg free
 10146                           
 10147                           ;LCD.c: 102: delay_ms(0x80);
 10148  013E36  0E00               	movlw	0
 10149  013E38  0100               	movlb	0	; () banked
 10150  013E3A  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 10151  013E3C  0E80               	movlw	128
 10152  013E3E  6FBA               	movwf	delay_ms@ms& (0+255),b
 10153  013E40  EC04  F09D         	call	_delay_ms	;wreg free
 10154                           
 10155                           ;LCD.c: 103: LED_Toggle(eLED2);
 10156  013E44  0E01               	movlw	1
 10157  013E46  ECC8  F09F         	call	_LED_Toggle
 10158                           
 10159                           ;LCD.c: 104: Reset_High();
 10160  013E4A  EC02  F0A3         	call	_Reset_High	;wreg free
 10161                           
 10162                           ;LCD.c: 105: delay_ms(0x80);
 10163  013E4E  0E00               	movlw	0
 10164  013E50  0100               	movlb	0	; () banked
 10165  013E52  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 10166  013E54  0E80               	movlw	128
 10167  013E56  6FBA               	movwf	delay_ms@ms& (0+255),b
 10168  013E58  EC04  F09D         	call	_delay_ms	;wreg free
 10169                           
 10170                           ;LCD.c: 106: LED_Toggle(eLED2);
 10171  013E5C  0E01               	movlw	1
 10172  013E5E  ECC8  F09F         	call	_LED_Toggle
 10173  013E62  0012               	return		;funcret
 10174  013E64                     __end_of_LCD_Reset:
 10175                           	opt stack 0
 10176                           tosu	equ	0xFFF
 10177                           tosh	equ	0xFFE
 10178                           tosl	equ	0xFFD
 10179                           pclath	equ	0xFFA
 10180                           tblptru	equ	0xFF8
 10181                           tblptrh	equ	0xFF7
 10182                           tblptrl	equ	0xFF6
 10183                           tablat	equ	0xFF5
 10184                           prodh	equ	0xFF4
 10185                           prodl	equ	0xFF3
 10186                           intcon	equ	0xFF2
 10187                           postinc0	equ	0xFEE
 10188                           wreg	equ	0xFE8
 10189                           postdec1	equ	0xFE5
 10190                           fsr1h	equ	0xFE2
 10191                           fsr1l	equ	0xFE1
 10192                           indf2	equ	0xFDF
 10193                           postinc2	equ	0xFDE
 10194                           postdec2	equ	0xFDD
 10195                           plusw2	equ	0xFDB
 10196                           fsr2h	equ	0xFDA
 10197                           fsr2l	equ	0xFD9
 10198                           status	equ	0xFD8
 10199                           
 10200 ;; *************** function _delay_ms *****************
 10201 ;; Defined at:
 10202 ;;		line 240 in file "Library/Types.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;  ms              2    0[BANK0 ] unsigned short 
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;  u               4    2[BANK0 ] volatile unsigned long 
 10207 ;; Return value:  Size  Location     Type
 10208 ;;                  1    wreg      void 
 10209 ;; Registers used:
 10210 ;;		wreg, status,2, status,0
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10216 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10217 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;Total ram usage:        6 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    7
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_LCD_Reset
 10227 ;;		_LCD_Init
 10228 ;;		_MXK_Init
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text44
 10233  013A08                     __ptext44:
 10234                           	opt stack 0
 10235  013A08                     _delay_ms:
 10236                           	opt stack 22
 10237                           
 10238                           ;Types.c: 242: volatile unsigned long u;
 10239                           ;Types.c: 243: while (ms--)
 10240                           
 10241                           ;incstack = 0
 10242  013A08  D01F               	goto	l10219
 10243  013A0A                     l10211:
 10244                           
 10245                           ;Types.c: 244: {
 10246                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 10247  013A0A  0E00               	movlw	0
 10248  013A0C  0100               	movlb	0	; () banked
 10249  013A0E  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 10250  013A10  0E00               	movlw	0
 10251  013A12  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10252  013A14  0E00               	movlw	0
 10253  013A16  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10254  013A18  0E00               	movlw	0
 10255  013A1A  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10256  013A1C                     l10213:
 10257                           
 10258                           ; BSR set to: 0
 10259  013A1C  0100               	movlb	0	; () banked
 10260  013A1E  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 10261  013A20  0100               	movlb	0	; () banked
 10262  013A22  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 10263  013A24  E111               	bnz	l10219
 10264  013A26  0EB0               	movlw	176
 10265  013A28  0100               	movlb	0	; () banked
 10266  013A2A  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 10267  013A2C  0E04               	movlw	4
 10268  013A2E  0100               	movlb	0	; () banked
 10269  013A30  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 10270  013A32  B0D8               	btfsc	status,0,c
 10271  013A34  D009               	goto	l10219
 10272                           
 10273                           ; BSR set to: 0
 10274                           
 10275                           ; BSR set to: 0
 10276  013A36  F000               	nop		; ;# 
 10277  013A38  0E01               	movlw	1
 10278  013A3A  0100               	movlb	0	; () banked
 10279  013A3C  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 10280  013A3E  0E00               	movlw	0
 10281  013A40  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 10282  013A42  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 10283  013A44  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 10284  013A46  D7EA               	goto	l10213
 10285  013A48                     l10219:
 10286  013A48  0100               	movlb	0	; () banked
 10287  013A4A  07BA               	decf	delay_ms@ms& (0+255),f,b
 10288  013A4C  A0D8               	btfss	status,0,c
 10289  013A4E  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 10290  013A50  0100               	movlb	0	; () banked
 10291  013A52  29BA               	incf	delay_ms@ms& (0+255),w,b
 10292  013A54  E1DA               	bnz	l10211
 10293  013A56  0100               	movlb	0	; () banked
 10294  013A58  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 10295  013A5A  A4D8               	btfss	status,2,c
 10296  013A5C  D7D6               	goto	l10211
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;Types.c: 251: }
 10300                           ;Types.c: 252: }
 10301                           ;Types.c: 253: u = 0x8008;
 10302                           
 10303                           ; BSR set to: 0
 10304  013A5E  0E08               	movlw	8
 10305  013A60  0100               	movlb	0	; () banked
 10306  013A62  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 10307  013A64  0E80               	movlw	128
 10308  013A66  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10309  013A68  0E00               	movlw	0
 10310  013A6A  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10311  013A6C  0E00               	movlw	0
 10312  013A6E  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10313                           
 10314                           ; BSR set to: 0
 10315  013A70  0012               	return		;funcret
 10316  013A72                     __end_of_delay_ms:
 10317                           	opt stack 0
 10318                           tosu	equ	0xFFF
 10319                           tosh	equ	0xFFE
 10320                           tosl	equ	0xFFD
 10321                           pclath	equ	0xFFA
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           postinc0	equ	0xFEE
 10330                           wreg	equ	0xFE8
 10331                           postdec1	equ	0xFE5
 10332                           fsr1h	equ	0xFE2
 10333                           fsr1l	equ	0xFE1
 10334                           indf2	equ	0xFDF
 10335                           postinc2	equ	0xFDE
 10336                           postdec2	equ	0xFDD
 10337                           plusw2	equ	0xFDB
 10338                           fsr2h	equ	0xFDA
 10339                           fsr2l	equ	0xFD9
 10340                           status	equ	0xFD8
 10341                           
 10342 ;; *************** function _Reset_Low *****************
 10343 ;; Defined at:
 10344 ;;		line 32 in file "Library/LCD.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;		None
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;		None
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      void 
 10351 ;; Registers used:
 10352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;Total ram usage:        0 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:   11
 10365 ;; This function calls:
 10366 ;;		_Port_SetPin
 10367 ;; This function is called by:
 10368 ;;		_LCD_Reset
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           	psect	text45
 10373  0145E6                     __ptext45:
 10374                           	opt stack 0
 10375  0145E6                     _Reset_Low:
 10376                           	opt stack 16
 10377                           
 10378                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;incstack = 0
 10382  0145E6  0E98               	movlw	low _PortF
 10383  0145E8  0100               	movlb	0	; () banked
 10384  0145EA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 10385  0145EC  0E01               	movlw	high _PortF
 10386  0145EE  0100               	movlb	0	; () banked
 10387  0145F0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10388  0145F2  0E06               	movlw	6
 10389  0145F4  0100               	movlb	0	; () banked
 10390  0145F6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 10391  0145F8  0E01               	movlw	1
 10392  0145FA  0100               	movlb	0	; () banked
 10393  0145FC  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 10394  0145FE  ECA9  F094         	call	_Port_SetPin	;wreg free
 10395  014602  0012               	return		;funcret
 10396  014604                     __end_of_Reset_Low:
 10397                           	opt stack 0
 10398                           tosu	equ	0xFFF
 10399                           tosh	equ	0xFFE
 10400                           tosl	equ	0xFFD
 10401                           pclath	equ	0xFFA
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           postinc0	equ	0xFEE
 10410                           wreg	equ	0xFE8
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           plusw2	equ	0xFDB
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function _Reset_High *****************
 10423 ;; Defined at:
 10424 ;;		line 36 in file "Library/LCD.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;		None
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      void 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;Total ram usage:        0 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:   11
 10445 ;; This function calls:
 10446 ;;		_Port_SetPin
 10447 ;; This function is called by:
 10448 ;;		_LCD_Reset
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text46
 10453  014604                     __ptext46:
 10454                           	opt stack 0
 10455  014604                     _Reset_High:
 10456                           	opt stack 16
 10457                           
 10458                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10459                           
 10460                           ;incstack = 0
 10461  014604  0E98               	movlw	low _PortF
 10462  014606  0100               	movlb	0	; () banked
 10463  014608  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 10464  01460A  0E01               	movlw	high _PortF
 10465  01460C  0100               	movlb	0	; () banked
 10466  01460E  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10467  014610  0E06               	movlw	6
 10468  014612  0100               	movlb	0	; () banked
 10469  014614  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 10470  014616  0E00               	movlw	0
 10471  014618  0100               	movlb	0	; () banked
 10472  01461A  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 10473  01461C  ECA9  F094         	call	_Port_SetPin	;wreg free
 10474  014620  0012               	return		;funcret
 10475  014622                     __end_of_Reset_High:
 10476                           	opt stack 0
 10477                           tosu	equ	0xFFF
 10478                           tosh	equ	0xFFE
 10479                           tosl	equ	0xFFD
 10480                           pclath	equ	0xFFA
 10481                           tblptru	equ	0xFF8
 10482                           tblptrh	equ	0xFF7
 10483                           tblptrl	equ	0xFF6
 10484                           tablat	equ	0xFF5
 10485                           prodh	equ	0xFF4
 10486                           prodl	equ	0xFF3
 10487                           intcon	equ	0xFF2
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1h	equ	0xFE2
 10492                           fsr1l	equ	0xFE1
 10493                           indf2	equ	0xFDF
 10494                           postinc2	equ	0xFDE
 10495                           postdec2	equ	0xFDD
 10496                           plusw2	equ	0xFDB
 10497                           fsr2h	equ	0xFDA
 10498                           fsr2l	equ	0xFD9
 10499                           status	equ	0xFD8
 10500                           
 10501 ;; *************** function _HMI_Render *****************
 10502 ;; Defined at:
 10503 ;;		line 138 in file "HMI.c"
 10504 ;; Parameters:    Size  Location     Type
 10505 ;;		None
 10506 ;; Auto vars:     Size  Location     Type
 10507 ;;  a               2    8[BANK0 ] unsigned short 
 10508 ;; Return value:  Size  Location     Type
 10509 ;;                  1    wreg      void 
 10510 ;; Registers used:
 10511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10512 ;; Tracked objects:
 10513 ;;		On entry : 0/0
 10514 ;;		On exit  : 0/0
 10515 ;;		Unchanged: 0/0
 10516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;Total ram usage:        2 bytes
 10522 ;; Hardware stack levels used:    1
 10523 ;; Hardware stack levels required when called:    9
 10524 ;; This function calls:
 10525 ;;		_OutSeg
 10526 ;; This function is called by:
 10527 ;;		_main
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text47
 10532  014168                     __ptext47:
 10533                           	opt stack 0
 10534  014168                     _HMI_Render:
 10535                           	opt stack 21
 10536                           
 10537                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10538                           
 10539                           ;incstack = 0
 10540  014168  0E00               	movlw	0
 10541  01416A  0100               	movlb	0	; () banked
 10542  01416C  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
 10543  01416E  0E00               	movlw	0
 10544  014170  6FC2               	movwf	HMI_Render@a& (0+255),b
 10545  014172                     l11627:
 10546                           
 10547                           ; BSR set to: 0
 10548  014172  0100               	movlb	0	; () banked
 10549  014174  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
 10550  014176  E116               	bnz	l1166
 10551  014178  0E08               	movlw	8
 10552  01417A  0100               	movlb	0	; () banked
 10553  01417C  5DC2               	subwf	HMI_Render@a& (0+255),w,b
 10554  01417E  B0D8               	btfsc	status,0,c
 10555  014180  0012               	return	
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10559                           
 10560                           ; BSR set to: 0
 10561                           
 10562                           ; BSR set to: 0
 10563  014182  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
 10564  014186  0E2A               	movlw	low _HMIBoard
 10565  014188  0100               	movlb	0	; () banked
 10566  01418A  25C2               	addwf	HMI_Render@a& (0+255),w,b
 10567  01418C  6ED9               	movwf	fsr2l,c
 10568  01418E  0E01               	movlw	high _HMIBoard
 10569  014190  0100               	movlb	0	; () banked
 10570  014192  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10571  014194  6EDA               	movwf	fsr2h,c
 10572  014196  50DF               	movf	indf2,w,c
 10573  014198  EC83  F09A         	call	_OutSeg
 10574  01419C  0100               	movlb	0	; () banked
 10575  01419E  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
 10576  0141A0  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
 10577  0141A2  D7E7               	goto	l11627
 10578  0141A4                     l1166:
 10579                           
 10580                           ; BSR set to: 0
 10581  0141A4  0012               	return		;funcret
 10582  0141A6                     __end_of_HMI_Render:
 10583                           	opt stack 0
 10584                           tosu	equ	0xFFF
 10585                           tosh	equ	0xFFE
 10586                           tosl	equ	0xFFD
 10587                           pclath	equ	0xFFA
 10588                           tblptru	equ	0xFF8
 10589                           tblptrh	equ	0xFF7
 10590                           tblptrl	equ	0xFF6
 10591                           tablat	equ	0xFF5
 10592                           prodh	equ	0xFF4
 10593                           prodl	equ	0xFF3
 10594                           intcon	equ	0xFF2
 10595                           postinc0	equ	0xFEE
 10596                           wreg	equ	0xFE8
 10597                           postdec1	equ	0xFE5
 10598                           fsr1h	equ	0xFE2
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           plusw2	equ	0xFDB
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function _OutSeg *****************
 10609 ;; Defined at:
 10610 ;;		line 54 in file "HMI.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  pInput          1    wreg     unsigned char 
 10613 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;  pInput          1    6[BANK0 ] unsigned char 
 10616 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10626 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;Total ram usage:        5 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    8
 10633 ;; This function calls:
 10634 ;;		_SPI_Send
 10635 ;; This function is called by:
 10636 ;;		_HMI_Render
 10637 ;;		_HMI_GRender
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text48
 10642  013506                     __ptext48:
 10643                           	opt stack 0
 10644  013506                     _OutSeg:
 10645                           	opt stack 21
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;incstack = 0
 10649                           ;OutSeg@pInput stored from wreg
 10650  013506  0100               	movlb	0	; () banked
 10651  013508  6FC0               	movwf	OutSeg@pInput& (0+255),b
 10652                           
 10653                           ;HMI.c: 58: static UINT8 cur;
 10654                           ;HMI.c: 59: volatile UINT8 out;
 10655                           ;HMI.c: 60: static UINT8 segset;
 10656                           ;HMI.c: 61: static UINT8 a;
 10657                           ;HMI.c: 83: if (pSegment <= 8)
 10658  01350A  0E09               	movlw	9
 10659  01350C  0100               	movlb	0	; () banked
 10660  01350E  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
 10661  013510  0012               	return	
 10662                           
 10663                           ; BSR set to: 0
 10664                           ;HMI.c: 84: {
 10665                           ;HMI.c: 85: cur = pInput;
 10666  013512  C0C0  F02F         	movff	OutSeg@pInput,OutSeg@cur
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10670  013516  0E00               	movlw	0
 10671  013518  6E2E               	movwf	OutSeg@a,c
 10672  01351A                     l11241:
 10673                           
 10674                           ; BSR set to: 0
 10675  01351A  0E07               	movlw	7
 10676  01351C  642E               	cpfsgt	OutSeg@a,c
 10677  01351E  D001               	goto	l11245
 10678  013520  D027               	goto	l11253
 10679  013522                     l11245:
 10680                           
 10681                           ;HMI.c: 87: {
 10682                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10683  013522  C02F  F0BE         	movff	OutSeg@cur,??_OutSeg
 10684  013526  0E01               	movlw	1
 10685  013528  0100               	movlb	0	; () banked
 10686  01352A  17BE               	andwf	??_OutSeg& (0+255),f,b
 10687  01352C  0E06               	movlw	6
 10688  01352E  0100               	movlb	0	; () banked
 10689  013530  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
 10690  013532                     u7675:
 10691  013532  0100               	movlb	0	; () banked
 10692  013534  90D8               	bcf	status,0,c
 10693  013536  37BE               	rlcf	??_OutSeg& (0+255),f,b
 10694  013538  0100               	movlb	0	; () banked
 10695  01353A  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10696  01353C  D7FA               	goto	u7675
 10697  01353E  0100               	movlb	0	; () banked
 10698  013540  51BE               	movf	??_OutSeg& (0+255),w,b
 10699  013542  6E30               	movwf	OutSeg@segset,c
 10700                           
 10701                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10702  013544  0100               	movlb	0	; () banked
 10703  013546  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
 10704  013548  42E8               	rrncf	wreg,f,c
 10705  01354A  0BF8               	andlw	248
 10706  01354C  102E               	iorwf	OutSeg@a,w,c
 10707  01354E  1030               	iorwf	OutSeg@segset,w,c
 10708  013550  0100               	movlb	0	; () banked
 10709  013552  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
 10710                           
 10711                           ;HMI.c: 90: cur >>= 1;
 10712  013554  90D8               	bcf	status,0,c
 10713  013556  322F               	rrcf	OutSeg@cur,f,c
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10717  013558  0E64               	movlw	low _SPI1
 10718  01355A  0100               	movlb	0	; () banked
 10719  01355C  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 10720  01355E  0E01               	movlw	high _SPI1
 10721  013560  0100               	movlb	0	; () banked
 10722  013562  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10723  013564  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10724  013568  ECCE  F09C         	call	_SPI_Send	;wreg free
 10725  01356C  2A2E               	incf	OutSeg@a,f,c
 10726  01356E  D7D5               	goto	l11241
 10727  013570                     l11253:
 10728                           
 10729                           ;HMI.c: 96: }
 10730                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10731  013570  0E64               	movlw	low _SPI1
 10732  013572  0100               	movlb	0	; () banked
 10733  013574  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 10734  013576  0E01               	movlw	high _SPI1
 10735  013578  0100               	movlb	0	; () banked
 10736  01357A  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10737  01357C  0E00               	movlw	0
 10738  01357E  0100               	movlb	0	; () banked
 10739  013580  6FBC               	movwf	SPI_Send@pData& (0+255),b
 10740  013582  ECCE  F09C         	call	_SPI_Send	;wreg free
 10741  013586  0012               	return	
 10742  013588                     __end_of_OutSeg:
 10743                           	opt stack 0
 10744                           tosu	equ	0xFFF
 10745                           tosh	equ	0xFFE
 10746                           tosl	equ	0xFFD
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           postinc0	equ	0xFEE
 10756                           wreg	equ	0xFE8
 10757                           postdec1	equ	0xFE5
 10758                           fsr1h	equ	0xFE2
 10759                           fsr1l	equ	0xFE1
 10760                           indf2	equ	0xFDF
 10761                           postinc2	equ	0xFDE
 10762                           postdec2	equ	0xFDD
 10763                           plusw2	equ	0xFDB
 10764                           fsr2h	equ	0xFDA
 10765                           fsr2l	equ	0xFD9
 10766                           status	equ	0xFD8
 10767                           
 10768 ;; *************** function _HMI_Poll *****************
 10769 ;; Defined at:
 10770 ;;		line 252 in file "HMI.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;Total ram usage:        0 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:   15
 10791 ;; This function calls:
 10792 ;;		_Button_Poll
 10793 ;; This function is called by:
 10794 ;;		_main
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           	psect	text49
 10799  01384E                     __ptext49:
 10800                           	opt stack 0
 10801  01384E                     _HMI_Poll:
 10802                           	opt stack 15
 10803                           
 10804                           ;HMI.c: 254: TRISE = 0xFF;
 10805                           
 10806                           ;incstack = 0
 10807  01384E  6896               	setf	3990,c	;volatile
 10808                           
 10809                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10810  013850  0E5A               	movlw	low (_HMIBoard+48)
 10811  013852  0100               	movlb	0	; () banked
 10812  013854  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 10813  013856  0E01               	movlw	high (_HMIBoard+48)
 10814  013858  0100               	movlb	0	; () banked
 10815  01385A  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10816  01385C  0E01               	movlw	1
 10817  01385E  0100               	movlb	0	; () banked
 10818  013860  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 10819  013862  EC73  F08F         	call	_Button_Poll	;wreg free
 10820                           
 10821                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10822  013866  0E3C               	movlw	low (_HMIBoard+18)
 10823  013868  0100               	movlb	0	; () banked
 10824  01386A  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 10825  01386C  0E01               	movlw	high (_HMIBoard+18)
 10826  01386E  0100               	movlb	0	; () banked
 10827  013870  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10828  013872  0E01               	movlw	1
 10829  013874  0100               	movlb	0	; () banked
 10830  013876  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 10831  013878  EC73  F08F         	call	_Button_Poll	;wreg free
 10832                           
 10833                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10834  01387C  0E32               	movlw	low (_HMIBoard+8)
 10835  01387E  0100               	movlb	0	; () banked
 10836  013880  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 10837  013882  0E01               	movlw	high (_HMIBoard+8)
 10838  013884  0100               	movlb	0	; () banked
 10839  013886  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10840  013888  0E01               	movlw	1
 10841  01388A  0100               	movlb	0	; () banked
 10842  01388C  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 10843  01388E  EC73  F08F         	call	_Button_Poll	;wreg free
 10844                           
 10845                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10846  013892  0E46               	movlw	low (_HMIBoard+28)
 10847  013894  0100               	movlb	0	; () banked
 10848  013896  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 10849  013898  0E01               	movlw	high (_HMIBoard+28)
 10850  01389A  0100               	movlb	0	; () banked
 10851  01389C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10852  01389E  0E01               	movlw	1
 10853  0138A0  0100               	movlb	0	; () banked
 10854  0138A2  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 10855  0138A4  EC73  F08F         	call	_Button_Poll	;wreg free
 10856                           
 10857                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10858  0138A8  0E50               	movlw	low (_HMIBoard+38)
 10859  0138AA  0100               	movlb	0	; () banked
 10860  0138AC  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 10861  0138AE  0E01               	movlw	high (_HMIBoard+38)
 10862  0138B0  0100               	movlb	0	; () banked
 10863  0138B2  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10864  0138B4  0E01               	movlw	1
 10865  0138B6  0100               	movlb	0	; () banked
 10866  0138B8  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 10867  0138BA  EC73  F08F         	call	_Button_Poll	;wreg free
 10868  0138BE  0012               	return		;funcret
 10869  0138C0                     __end_of_HMI_Poll:
 10870                           	opt stack 0
 10871                           tosu	equ	0xFFF
 10872                           tosh	equ	0xFFE
 10873                           tosl	equ	0xFFD
 10874                           pclath	equ	0xFFA
 10875                           tblptru	equ	0xFF8
 10876                           tblptrh	equ	0xFF7
 10877                           tblptrl	equ	0xFF6
 10878                           tablat	equ	0xFF5
 10879                           prodh	equ	0xFF4
 10880                           prodl	equ	0xFF3
 10881                           intcon	equ	0xFF2
 10882                           postinc0	equ	0xFEE
 10883                           wreg	equ	0xFE8
 10884                           postdec1	equ	0xFE5
 10885                           fsr1h	equ	0xFE2
 10886                           fsr1l	equ	0xFE1
 10887                           indf2	equ	0xFDF
 10888                           postinc2	equ	0xFDE
 10889                           postdec2	equ	0xFDD
 10890                           plusw2	equ	0xFDB
 10891                           fsr2h	equ	0xFDA
 10892                           fsr2l	equ	0xFD9
 10893                           status	equ	0xFD8
 10894                           
 10895 ;; *************** function _Button_Poll *****************
 10896 ;; Defined at:
 10897 ;;		line 57 in file "Library/Button.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10900 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10901 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  Pin             1   35[BANK0 ] unsigned char 
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  1    wreg      unsigned char 
 10906 ;; Registers used:
 10907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10913 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;Total ram usage:        9 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:   14
 10920 ;; This function calls:
 10921 ;;		_Event_DIPSwitch
 10922 ;;		_Event_HMI_DIPSwitch
 10923 ;;		_Event_HMI_DownButton
 10924 ;;		_Event_HMI_LeftButton
 10925 ;;		_Event_HMI_RightButton
 10926 ;;		_Event_HMI_UpButton
 10927 ;;		_Event_TestButton
 10928 ;;		_HMI_DIPSwitch
 10929 ;;		_HMI_DownSwitch
 10930 ;;		_HMI_LeftSwitch
 10931 ;;		_HMI_RightSwitch
 10932 ;;		_HMI_UpSwitch
 10933 ;;		_MXK_DIPSwitch
 10934 ;;		_MXK_TestButton
 10935 ;; This function is called by:
 10936 ;;		_HMI_Poll
 10937 ;;		_MXK_Poll
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           	psect	text50
 10942  011EE6                     __ptext50:
 10943                           	opt stack 0
 10944  011EE6                     _Button_Poll:
 10945                           	opt stack 15
 10946                           
 10947                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10948                           
 10949                           ;incstack = 0
 10950  011EE6  0100               	movlb	0	; () banked
 10951  011EE8  EE20 F007          	lfsr	2,7
 10952  011EEC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 10953  011EEE  26D9               	addwf	fsr2l,f,c
 10954  011EF0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10955  011EF2  22DA               	addwfc	fsr2h,f,c
 10956  011EF4  D801               	call	u7438
 10957  011EF6  D00A               	goto	u7439
 10958  011EF8                     u7438:
 10959  011EF8  0005               	push	
 10960  011EFA  6EFA               	movwf	pclath,c
 10961  011EFC  50DE               	movf	postinc2,w,c
 10962  011EFE  6EFD               	movwf	tosl,c
 10963  011F00  50DE               	movf	postinc2,w,c
 10964  011F02  6EFE               	movwf	tosh,c
 10965  011F04  50DE               	movf	postinc2,w,c
 10966  011F06  6EFF               	movwf	tosu,c
 10967  011F08  50FA               	movf	pclath,w,c
 10968  011F0A  0012               	return		;indir
 10969  011F0C                     u7439:
 10970  011F0C  0100               	movlb	0	; () banked
 10971  011F0E  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Button.c: 61: if (pButton->mState == Pin)
 10975  011F10  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 10976  011F14  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10977  011F18  0100               	movlb	0	; () banked
 10978  011F1A  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 10979  011F1C  18DE               	xorwf	postinc2,w,c
 10980  011F1E  A4D8               	btfss	status,2,c
 10981  011F20  D021               	goto	l11027
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;Button.c: 62: {
 10985                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10986  011F22  0100               	movlb	0	; () banked
 10987  011F24  EE20 F001          	lfsr	2,1
 10988  011F28  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 10989  011F2A  26D9               	addwf	fsr2l,f,c
 10990  011F2C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10991  011F2E  22DA               	addwfc	fsr2h,f,c
 10992  011F30  0100               	movlb	0	; () banked
 10993  011F32  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 10994  011F34  5CDE               	subwf	postinc2,w,c
 10995  011F36  B0D8               	btfsc	status,0,c
 10996  011F38  D00A               	goto	l11025
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;Button.c: 66: pButton->mCount = 0;
 11000  011F3A  0100               	movlb	0	; () banked
 11001  011F3C  EE20 F001          	lfsr	2,1
 11002  011F40  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11003  011F42  26D9               	addwf	fsr2l,f,c
 11004  011F44  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11005  011F46  22DA               	addwfc	fsr2h,f,c
 11006  011F48  0E00               	movlw	0
 11007  011F4A  6EDF               	movwf	indf2,c
 11008  011F4C  0012               	return	
 11009  011F4E                     l11025:
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;Button.c: 67: else
 11013                           ;Button.c: 68: pButton->mCount -= pIncrement;
 11014  011F4E  0100               	movlb	0	; () banked
 11015  011F50  EE20 F001          	lfsr	2,1
 11016  011F54  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11017  011F56  26D9               	addwf	fsr2l,f,c
 11018  011F58  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11019  011F5A  22DA               	addwfc	fsr2h,f,c
 11020  011F5C  0100               	movlb	0	; () banked
 11021  011F5E  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 11022  011F60  5EDF               	subwf	indf2,f,c
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;Button.c: 69: }
 11026  011F62  0012               	return	
 11027  011F64                     l11027:
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 11031  011F64  0100               	movlb	0	; () banked
 11032  011F66  EE20 F001          	lfsr	2,1
 11033  011F6A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11034  011F6C  26D9               	addwf	fsr2l,f,c
 11035  011F6E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11036  011F70  22DA               	addwfc	fsr2h,f,c
 11037  011F72  50DF               	movf	indf2,w,c
 11038  011F74  0100               	movlb	0	; () banked
 11039  011F76  6FD8               	movwf	??_Button_Poll& (0+255),b
 11040  011F78  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 11041  011F7A  0100               	movlb	0	; () banked
 11042  011F7C  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 11043  011F7E  0100               	movlb	0	; () banked
 11044  011F80  27D8               	addwf	??_Button_Poll& (0+255),f,b
 11045  011F82  0E00               	movlw	0
 11046  011F84  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 11047  011F86  0100               	movlb	0	; () banked
 11048  011F88  EE20 F001          	lfsr	2,1
 11049  011F8C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11050  011F8E  26D9               	addwf	fsr2l,f,c
 11051  011F90  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11052  011F92  22DA               	addwfc	fsr2h,f,c
 11053  011F94  50DF               	movf	indf2,w,c
 11054  011F96  0100               	movlb	0	; () banked
 11055  011F98  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 11056  011F9A  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 11057  011F9C  0100               	movlb	0	; () banked
 11058  011F9E  51D8               	movf	??_Button_Poll& (0+255),w,b
 11059  011FA0  0100               	movlb	0	; () banked
 11060  011FA2  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 11061  011FA4  0100               	movlb	0	; () banked
 11062  011FA6  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 11063  011FA8  0A80               	xorlw	128
 11064  011FAA  0100               	movlb	0	; () banked
 11065  011FAC  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 11066  011FAE  0100               	movlb	0	; () banked
 11067  011FB0  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 11068  011FB2  0A80               	xorlw	128
 11069  011FB4  0100               	movlb	0	; () banked
 11070  011FB6  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 11071  011FB8  B0D8               	btfsc	status,0,c
 11072  011FBA  0012               	return	
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;Button.c: 73: {
 11076                           ;Button.c: 75: pButton->mCount += pIncrement;
 11077  011FBC  0100               	movlb	0	; () banked
 11078  011FBE  EE20 F001          	lfsr	2,1
 11079  011FC2  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11080  011FC4  26D9               	addwf	fsr2l,f,c
 11081  011FC6  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11082  011FC8  22DA               	addwfc	fsr2h,f,c
 11083  011FCA  0100               	movlb	0	; () banked
 11084  011FCC  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 11085  011FCE  26DF               	addwf	indf2,f,c
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 11089  011FD0  0100               	movlb	0	; () banked
 11090  011FD2  EE20 F002          	lfsr	2,2
 11091  011FD6  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11092  011FD8  26D9               	addwf	fsr2l,f,c
 11093  011FDA  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11094  011FDC  22DA               	addwfc	fsr2h,f,c
 11095  011FDE  0100               	movlb	0	; () banked
 11096  011FE0  EE10 F001          	lfsr	1,1
 11097  011FE4  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11098  011FE6  26E1               	addwf	fsr1l,f,c
 11099  011FE8  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11100  011FEA  22E2               	addwfc	fsr1h,f,c
 11101  011FEC  50E7               	movf	indf1,w,c
 11102  011FEE  0100               	movlb	0	; () banked
 11103  011FF0  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 11104  011FF2  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 11105  011FF4  50DE               	movf	postinc2,w,c
 11106  011FF6  0100               	movlb	0	; () banked
 11107  011FF8  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 11108  011FFA  50DE               	movf	postinc2,w,c
 11109  011FFC  0100               	movlb	0	; () banked
 11110  011FFE  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 11111  012000  A0D8               	btfss	status,0,c
 11112  012002  0012               	return	
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;Button.c: 77: {
 11116                           ;Button.c: 79: pButton->mState = Pin;
 11117  012004  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 11118  012008  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 11119  01200C  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;Button.c: 80: pButton->mCount = 0;
 11123  012010  0100               	movlb	0	; () banked
 11124  012012  EE20 F001          	lfsr	2,1
 11125  012016  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11126  012018  26D9               	addwf	fsr2l,f,c
 11127  01201A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11128  01201C  22DA               	addwfc	fsr2h,f,c
 11129  01201E  0E00               	movlw	0
 11130  012020  6EDF               	movwf	indf2,c
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;Button.c: 83: pButton->mFunction(Pin);
 11134  012022  0100               	movlb	0	; () banked
 11135  012024  EE20 F004          	lfsr	2,4
 11136  012028  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 11137  01202A  26D9               	addwf	fsr2l,f,c
 11138  01202C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11139  01202E  22DA               	addwfc	fsr2h,f,c
 11140  012030  D801               	call	u7488
 11141  012032  0012               	return	
 11142  012034                     u7488:
 11143  012034  0005               	push	
 11144  012036  6EFA               	movwf	pclath,c
 11145  012038  50DE               	movf	postinc2,w,c
 11146  01203A  6EFD               	movwf	tosl,c
 11147  01203C  50DE               	movf	postinc2,w,c
 11148  01203E  6EFE               	movwf	tosh,c
 11149  012040  50DE               	movf	postinc2,w,c
 11150  012042  6EFF               	movwf	tosu,c
 11151  012044  50FA               	movf	pclath,w,c
 11152  012046  0100               	movlb	0	; () banked
 11153  012048  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 11154  01204A  0012               	return		;indir
 11155  01204C                     __end_of_Button_Poll:
 11156                           	opt stack 0
 11157                           tosu	equ	0xFFF
 11158                           tosh	equ	0xFFE
 11159                           tosl	equ	0xFFD
 11160                           pclath	equ	0xFFA
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           postinc0	equ	0xFEE
 11169                           wreg	equ	0xFE8
 11170                           indf1	equ	0xFE7
 11171                           postdec1	equ	0xFE5
 11172                           fsr1h	equ	0xFE2
 11173                           fsr1l	equ	0xFE1
 11174                           indf2	equ	0xFDF
 11175                           postinc2	equ	0xFDE
 11176                           postdec2	equ	0xFDD
 11177                           plusw2	equ	0xFDB
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function _MXK_DIPSwitch *****************
 11183 ;; Defined at:
 11184 ;;		line 24 in file "Library/MXK.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;                  1    wreg      unsigned char 
 11191 ;; Registers used:
 11192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;Total ram usage:        0 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    8
 11205 ;; This function calls:
 11206 ;;		_Port_GetQuad
 11207 ;; This function is called by:
 11208 ;;		_FunctInitButton
 11209 ;;		_Button_Poll
 11210 ;;		_main
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           	psect	text51
 11215  0146CE                     __ptext51:
 11216                           	opt stack 0
 11217  0146CE                     _MXK_DIPSwitch:
 11218                           	opt stack 22
 11219                           
 11220                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 11221                           
 11222                           ;incstack = 0
 11223  0146CE  0E88               	movlw	low _PortD
 11224  0146D0  0100               	movlb	0	; () banked
 11225  0146D2  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 11226  0146D4  0E00               	movlw	high _PortD
 11227  0146D6  0100               	movlb	0	; () banked
 11228  0146D8  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11229  0146DA  0E00               	movlw	0
 11230  0146DC  0100               	movlb	0	; () banked
 11231  0146DE  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 11232  0146E0  EC7F  F09F         	call	_Port_GetQuad
 11233  0146E4  0012               	return	
 11234  0146E6                     __end_of_MXK_DIPSwitch:
 11235                           	opt stack 0
 11236                           tosu	equ	0xFFF
 11237                           tosh	equ	0xFFE
 11238                           tosl	equ	0xFFD
 11239                           pclath	equ	0xFFA
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           intcon	equ	0xFF2
 11247                           postinc0	equ	0xFEE
 11248                           wreg	equ	0xFE8
 11249                           indf1	equ	0xFE7
 11250                           postdec1	equ	0xFE5
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _HMI_DIPSwitch *****************
 11262 ;; Defined at:
 11263 ;;		line 47 in file "HMI.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;                  1    wreg      unsigned char 
 11270 ;; Registers used:
 11271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;Total ram usage:        0 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    8
 11284 ;; This function calls:
 11285 ;;		_Port_GetQuad
 11286 ;; This function is called by:
 11287 ;;		_HMI_Init
 11288 ;;		_Button_Poll
 11289 ;;		_main
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text52
 11294  0146E6                     __ptext52:
 11295                           	opt stack 0
 11296  0146E6                     _HMI_DIPSwitch:
 11297                           	opt stack 20
 11298                           
 11299                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 11300                           
 11301                           ;incstack = 0
 11302  0146E6  0E92               	movlw	low _PortE
 11303  0146E8  0100               	movlb	0	; () banked
 11304  0146EA  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 11305  0146EC  0E00               	movlw	high _PortE
 11306  0146EE  0100               	movlb	0	; () banked
 11307  0146F0  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11308  0146F2  0E00               	movlw	0
 11309  0146F4  0100               	movlb	0	; () banked
 11310  0146F6  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 11311  0146F8  EC7F  F09F         	call	_Port_GetQuad	;wreg free
 11312  0146FC  0012               	return	
 11313  0146FE                     __end_of_HMI_DIPSwitch:
 11314                           	opt stack 0
 11315                           tosu	equ	0xFFF
 11316                           tosh	equ	0xFFE
 11317                           tosl	equ	0xFFD
 11318                           pclath	equ	0xFFA
 11319                           tblptru	equ	0xFF8
 11320                           tblptrh	equ	0xFF7
 11321                           tblptrl	equ	0xFF6
 11322                           tablat	equ	0xFF5
 11323                           prodh	equ	0xFF4
 11324                           prodl	equ	0xFF3
 11325                           intcon	equ	0xFF2
 11326                           postinc0	equ	0xFEE
 11327                           wreg	equ	0xFE8
 11328                           indf1	equ	0xFE7
 11329                           postdec1	equ	0xFE5
 11330                           fsr1h	equ	0xFE2
 11331                           fsr1l	equ	0xFE1
 11332                           indf2	equ	0xFDF
 11333                           postinc2	equ	0xFDE
 11334                           postdec2	equ	0xFDD
 11335                           plusw2	equ	0xFDB
 11336                           fsr2h	equ	0xFDA
 11337                           fsr2l	equ	0xFD9
 11338                           status	equ	0xFD8
 11339                           
 11340 ;; *************** function _HMI_DownSwitch *****************
 11341 ;; Defined at:
 11342 ;;		line 42 in file "HMI.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;		None
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      unsigned char 
 11349 ;; Registers used:
 11350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;Total ram usage:        0 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    8
 11363 ;; This function calls:
 11364 ;;		_Port_GetPin
 11365 ;; This function is called by:
 11366 ;;		_HMI_Init
 11367 ;;		_Button_Poll
 11368 ;;		_main
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           	psect	text53
 11373  0146FE                     __ptext53:
 11374                           	opt stack 0
 11375  0146FE                     _HMI_DownSwitch:
 11376                           	opt stack 20
 11377                           
 11378                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11379                           
 11380                           ;incstack = 0
 11381  0146FE  0E92               	movlw	low _PortE
 11382  014700  0100               	movlb	0	; () banked
 11383  014702  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 11384  014704  0E00               	movlw	high _PortE
 11385  014706  0100               	movlb	0	; () banked
 11386  014708  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11387  01470A  0E06               	movlw	6
 11388  01470C  0100               	movlb	0	; () banked
 11389  01470E  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 11390  014710  ECEC  F09F         	call	_Port_GetPin	;wreg free
 11391  014714  0012               	return	
 11392  014716                     __end_of_HMI_DownSwitch:
 11393                           	opt stack 0
 11394                           tosu	equ	0xFFF
 11395                           tosh	equ	0xFFE
 11396                           tosl	equ	0xFFD
 11397                           pclath	equ	0xFFA
 11398                           tblptru	equ	0xFF8
 11399                           tblptrh	equ	0xFF7
 11400                           tblptrl	equ	0xFF6
 11401                           tablat	equ	0xFF5
 11402                           prodh	equ	0xFF4
 11403                           prodl	equ	0xFF3
 11404                           intcon	equ	0xFF2
 11405                           postinc0	equ	0xFEE
 11406                           wreg	equ	0xFE8
 11407                           indf1	equ	0xFE7
 11408                           postdec1	equ	0xFE5
 11409                           fsr1h	equ	0xFE2
 11410                           fsr1l	equ	0xFE1
 11411                           indf2	equ	0xFDF
 11412                           postinc2	equ	0xFDE
 11413                           postdec2	equ	0xFDD
 11414                           plusw2	equ	0xFDB
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _HMI_UpSwitch *****************
 11420 ;; Defined at:
 11421 ;;		line 37 in file "HMI.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;		None
 11426 ;; Return value:  Size  Location     Type
 11427 ;;                  1    wreg      unsigned char 
 11428 ;; Registers used:
 11429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;Total ram usage:        0 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; Hardware stack levels required when called:    8
 11442 ;; This function calls:
 11443 ;;		_Port_GetPin
 11444 ;; This function is called by:
 11445 ;;		_HMI_Init
 11446 ;;		_Button_Poll
 11447 ;;		_main
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           	psect	text54
 11452  014716                     __ptext54:
 11453                           	opt stack 0
 11454  014716                     _HMI_UpSwitch:
 11455                           	opt stack 22
 11456                           
 11457                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11458                           
 11459                           ;incstack = 0
 11460  014716  0E92               	movlw	low _PortE
 11461  014718  0100               	movlb	0	; () banked
 11462  01471A  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 11463  01471C  0E00               	movlw	high _PortE
 11464  01471E  0100               	movlb	0	; () banked
 11465  014720  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11466  014722  0E07               	movlw	7
 11467  014724  0100               	movlb	0	; () banked
 11468  014726  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 11469  014728  ECEC  F09F         	call	_Port_GetPin	;wreg free
 11470  01472C  0012               	return	
 11471  01472E                     __end_of_HMI_UpSwitch:
 11472                           	opt stack 0
 11473                           tosu	equ	0xFFF
 11474                           tosh	equ	0xFFE
 11475                           tosl	equ	0xFFD
 11476                           pclath	equ	0xFFA
 11477                           tblptru	equ	0xFF8
 11478                           tblptrh	equ	0xFF7
 11479                           tblptrl	equ	0xFF6
 11480                           tablat	equ	0xFF5
 11481                           prodh	equ	0xFF4
 11482                           prodl	equ	0xFF3
 11483                           intcon	equ	0xFF2
 11484                           postinc0	equ	0xFEE
 11485                           wreg	equ	0xFE8
 11486                           indf1	equ	0xFE7
 11487                           postdec1	equ	0xFE5
 11488                           fsr1h	equ	0xFE2
 11489                           fsr1l	equ	0xFE1
 11490                           indf2	equ	0xFDF
 11491                           postinc2	equ	0xFDE
 11492                           postdec2	equ	0xFDD
 11493                           plusw2	equ	0xFDB
 11494                           fsr2h	equ	0xFDA
 11495                           fsr2l	equ	0xFD9
 11496                           status	equ	0xFD8
 11497                           
 11498 ;; *************** function _HMI_RightSwitch *****************
 11499 ;; Defined at:
 11500 ;;		line 32 in file "HMI.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;		None
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  1    wreg      unsigned char 
 11507 ;; Registers used:
 11508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;Total ram usage:        0 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    8
 11521 ;; This function calls:
 11522 ;;		_Port_GetPin
 11523 ;; This function is called by:
 11524 ;;		_HMI_Init
 11525 ;;		_Button_Poll
 11526 ;;		_main
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text55
 11531  01472E                     __ptext55:
 11532                           	opt stack 0
 11533  01472E                     _HMI_RightSwitch:
 11534                           	opt stack 22
 11535                           
 11536                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11537                           
 11538                           ;incstack = 0
 11539  01472E  0E92               	movlw	low _PortE
 11540  014730  0100               	movlb	0	; () banked
 11541  014732  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 11542  014734  0E00               	movlw	high _PortE
 11543  014736  0100               	movlb	0	; () banked
 11544  014738  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11545  01473A  0E04               	movlw	4
 11546  01473C  0100               	movlb	0	; () banked
 11547  01473E  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 11548  014740  ECEC  F09F         	call	_Port_GetPin	;wreg free
 11549  014744  0012               	return	
 11550  014746                     __end_of_HMI_RightSwitch:
 11551                           	opt stack 0
 11552                           tosu	equ	0xFFF
 11553                           tosh	equ	0xFFE
 11554                           tosl	equ	0xFFD
 11555                           pclath	equ	0xFFA
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           postinc0	equ	0xFEE
 11564                           wreg	equ	0xFE8
 11565                           indf1	equ	0xFE7
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577 ;; *************** function _HMI_LeftSwitch *****************
 11578 ;; Defined at:
 11579 ;;		line 27 in file "HMI.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;                  1    wreg      unsigned char 
 11586 ;; Registers used:
 11587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;Total ram usage:        0 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    8
 11600 ;; This function calls:
 11601 ;;		_Port_GetPin
 11602 ;; This function is called by:
 11603 ;;		_HMI_Init
 11604 ;;		_Button_Poll
 11605 ;;		_main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           	psect	text56
 11610  014746                     __ptext56:
 11611                           	opt stack 0
 11612  014746                     _HMI_LeftSwitch:
 11613                           	opt stack 20
 11614                           
 11615                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11616                           
 11617                           ;incstack = 0
 11618  014746  0E92               	movlw	low _PortE
 11619  014748  0100               	movlb	0	; () banked
 11620  01474A  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 11621  01474C  0E00               	movlw	high _PortE
 11622  01474E  0100               	movlb	0	; () banked
 11623  014750  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11624  014752  0E05               	movlw	5
 11625  014754  0100               	movlb	0	; () banked
 11626  014756  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 11627  014758  ECEC  F09F         	call	_Port_GetPin	;wreg free
 11628  01475C  0012               	return	
 11629  01475E                     __end_of_HMI_LeftSwitch:
 11630                           	opt stack 0
 11631                           tosu	equ	0xFFF
 11632                           tosh	equ	0xFFE
 11633                           tosl	equ	0xFFD
 11634                           pclath	equ	0xFFA
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           postinc0	equ	0xFEE
 11643                           wreg	equ	0xFE8
 11644                           indf1	equ	0xFE7
 11645                           postdec1	equ	0xFE5
 11646                           fsr1h	equ	0xFE2
 11647                           fsr1l	equ	0xFE1
 11648                           indf2	equ	0xFDF
 11649                           postinc2	equ	0xFDE
 11650                           postdec2	equ	0xFDD
 11651                           plusw2	equ	0xFDB
 11652                           fsr2h	equ	0xFDA
 11653                           fsr2l	equ	0xFD9
 11654                           status	equ	0xFD8
 11655                           
 11656 ;; *************** function _MXK_TestButton *****************
 11657 ;; Defined at:
 11658 ;;		line 14 in file "Library/MXK.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;		None
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      unsigned char 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;Total ram usage:        0 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    8
 11679 ;; This function calls:
 11680 ;;		_Port_GetPin
 11681 ;; This function is called by:
 11682 ;;		_FunctInitButton
 11683 ;;		_Button_Poll
 11684 ;;		_main
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           	psect	text57
 11689  01475E                     __ptext57:
 11690                           	opt stack 0
 11691  01475E                     _MXK_TestButton:
 11692                           	opt stack 22
 11693                           
 11694                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11695                           
 11696                           ;incstack = 0
 11697  01475E  0E8E               	movlw	low _PortB
 11698  014760  0100               	movlb	0	; () banked
 11699  014762  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 11700  014764  0E01               	movlw	high _PortB
 11701  014766  0100               	movlb	0	; () banked
 11702  014768  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11703  01476A  0E04               	movlw	4
 11704  01476C  0100               	movlb	0	; () banked
 11705  01476E  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 11706  014770  ECEC  F09F         	call	_Port_GetPin	;wreg free
 11707  014774  0012               	return	
 11708  014776                     __end_of_MXK_TestButton:
 11709                           	opt stack 0
 11710                           tosu	equ	0xFFF
 11711                           tosh	equ	0xFFE
 11712                           tosl	equ	0xFFD
 11713                           pclath	equ	0xFFA
 11714                           tblptru	equ	0xFF8
 11715                           tblptrh	equ	0xFF7
 11716                           tblptrl	equ	0xFF6
 11717                           tablat	equ	0xFF5
 11718                           prodh	equ	0xFF4
 11719                           prodl	equ	0xFF3
 11720                           intcon	equ	0xFF2
 11721                           postinc0	equ	0xFEE
 11722                           wreg	equ	0xFE8
 11723                           indf1	equ	0xFE7
 11724                           postdec1	equ	0xFE5
 11725                           fsr1h	equ	0xFE2
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           plusw2	equ	0xFDB
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735 ;; *************** function _Port_GetQuad *****************
 11736 ;; Defined at:
 11737 ;;		line 498 in file "Library/Port.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11740 ;;		 -> PortE(10), PortD(10), 
 11741 ;;  pQuad           1    2[BANK0 ] enum E7720
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;  Output          1    5[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      unsigned char 
 11746 ;; Registers used:
 11747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11753 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;Total ram usage:        6 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    7
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_HMI_DIPSwitch
 11764 ;;		_MXK_DIPSwitch
 11765 ;;		_Port_ToggleQuad
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text58
 11770  013EFE                     __ptext58:
 11771                           	opt stack 0
 11772  013EFE                     _Port_GetQuad:
 11773                           	opt stack 22
 11774                           
 11775                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11776                           
 11777                           ;incstack = 0
 11778  013EFE  0100               	movlb	0	; () banked
 11779  013F00  EE20 F006          	lfsr	2,6
 11780  013F04  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 11781  013F06  26D9               	addwf	fsr2l,f,c
 11782  013F08  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11783  013F0A  22DA               	addwfc	fsr2h,f,c
 11784  013F0C  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 11785  013F10  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 11786  013F14  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 11787  013F18  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11788  013F1C  50DF               	movf	indf2,w,c
 11789  013F1E  0100               	movlb	0	; () banked
 11790  013F20  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11794  013F22  0100               	movlb	0	; () banked
 11795  013F24  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11796  013F26  0D04               	mullw	4
 11797  013F28  28F3               	incf	prodl,w,c
 11798  013F2A  0100               	movlb	0	; () banked
 11799  013F2C  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 11800  013F2E  D003               	goto	u6860
 11801  013F30                     u6865:
 11802  013F30  0100               	movlb	0	; () banked
 11803  013F32  90D8               	bcf	status,0,c
 11804  013F34  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11805  013F36                     u6860:
 11806  013F36  0100               	movlb	0	; () banked
 11807  013F38  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 11808  013F3A  D7FA               	goto	u6865
 11809                           
 11810                           ;Port.c: 502: Output &= 0xF;
 11811  013F3C  0E0F               	movlw	15
 11812  013F3E  0100               	movlb	0	; () banked
 11813  013F40  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;Port.c: 503: return Output;
 11817  013F42  0100               	movlb	0	; () banked
 11818  013F44  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 11819  013F46  0012               	return	
 11820  013F48                     __end_of_Port_GetQuad:
 11821                           	opt stack 0
 11822                           tosu	equ	0xFFF
 11823                           tosh	equ	0xFFE
 11824                           tosl	equ	0xFFD
 11825                           pclath	equ	0xFFA
 11826                           tblptru	equ	0xFF8
 11827                           tblptrh	equ	0xFF7
 11828                           tblptrl	equ	0xFF6
 11829                           tablat	equ	0xFF5
 11830                           prodh	equ	0xFF4
 11831                           prodl	equ	0xFF3
 11832                           intcon	equ	0xFF2
 11833                           postinc0	equ	0xFEE
 11834                           wreg	equ	0xFE8
 11835                           indf1	equ	0xFE7
 11836                           postdec1	equ	0xFE5
 11837                           fsr1h	equ	0xFE2
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           postdec2	equ	0xFDD
 11842                           plusw2	equ	0xFDB
 11843                           fsr2h	equ	0xFDA
 11844                           fsr2l	equ	0xFD9
 11845                           status	equ	0xFD8
 11846                           
 11847 ;; *************** function _Event_DIPSwitch *****************
 11848 ;; Defined at:
 11849 ;;		line 17 in file "Events.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  pState          1    wreg     unsigned char 
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  pState          1   25[BANK0 ] unsigned char 
 11854 ;;  Bar             1   26[BANK0 ] unsigned char 
 11855 ;; Return value:  Size  Location     Type
 11856 ;;                  1    wreg      void 
 11857 ;; Registers used:
 11858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;Total ram usage:        2 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:   13
 11871 ;; This function calls:
 11872 ;;		_HMI_GetBar
 11873 ;;		_HMI_SetBar
 11874 ;;		_LED_Toggle
 11875 ;; This function is called by:
 11876 ;;		_FunctInitButton
 11877 ;;		_Button_Poll
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           	psect	text59
 11882  014458                     __ptext59:
 11883                           	opt stack 0
 11884  014458                     _Event_DIPSwitch:
 11885                           	opt stack 15
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;incstack = 0
 11889                           ;Event_DIPSwitch@pState stored from wreg
 11890  014458  0100               	movlb	0	; () banked
 11891  01445A  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 11892                           
 11893                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
 11894  01445C  EC47  F0A4         	call	_HMI_GetBar	;wreg free
 11895  014460  0100               	movlb	0	; () banked
 11896  014462  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;Events.c: 20: Bar &= 0x0F;
 11900  014464  0E0F               	movlw	15
 11901  014466  0100               	movlb	0	; () banked
 11902  014468  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;Events.c: 21: pState <<= 4;
 11906  01446A  0100               	movlb	0	; () banked
 11907  01446C  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11908  01446E  0EF0               	movlw	240
 11909  014470  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;Events.c: 24: HMI_SetBar(pState | Bar);
 11913  014472  0100               	movlb	0	; () banked
 11914  014474  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11915  014476  0100               	movlb	0	; () banked
 11916  014478  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11917  01447A  EC2E  F0A4         	call	_HMI_SetBar
 11918                           
 11919                           ;Events.c: 27: LED_Toggle(eLED1);
 11920  01447E  0E00               	movlw	0
 11921  014480  ECC8  F09F         	call	_LED_Toggle
 11922  014484  0012               	return		;funcret
 11923  014486                     __end_of_Event_DIPSwitch:
 11924                           	opt stack 0
 11925                           tosu	equ	0xFFF
 11926                           tosh	equ	0xFFE
 11927                           tosl	equ	0xFFD
 11928                           pclath	equ	0xFFA
 11929                           tblptru	equ	0xFF8
 11930                           tblptrh	equ	0xFF7
 11931                           tblptrl	equ	0xFF6
 11932                           tablat	equ	0xFF5
 11933                           prodh	equ	0xFF4
 11934                           prodl	equ	0xFF3
 11935                           intcon	equ	0xFF2
 11936                           postinc0	equ	0xFEE
 11937                           wreg	equ	0xFE8
 11938                           indf1	equ	0xFE7
 11939                           postdec1	equ	0xFE5
 11940                           fsr1h	equ	0xFE2
 11941                           fsr1l	equ	0xFE1
 11942                           indf2	equ	0xFDF
 11943                           postinc2	equ	0xFDE
 11944                           postdec2	equ	0xFDD
 11945                           plusw2	equ	0xFDB
 11946                           fsr2h	equ	0xFDA
 11947                           fsr2l	equ	0xFD9
 11948                           status	equ	0xFD8
 11949                           
 11950 ;; *************** function _Event_HMI_DownButton *****************
 11951 ;; Defined at:
 11952 ;;		line 123 in file "Events.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  pState          1    wreg     unsigned char 
 11955 ;; Auto vars:     Size  Location     Type
 11956 ;;  pState          1   25[BANK0 ] unsigned char 
 11957 ;; Return value:  Size  Location     Type
 11958 ;;                  1    wreg      void 
 11959 ;; Registers used:
 11960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11961 ;; Tracked objects:
 11962 ;;		On entry : 0/0
 11963 ;;		On exit  : 0/0
 11964 ;;		Unchanged: 0/0
 11965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;Total ram usage:        1 bytes
 11971 ;; Hardware stack levels used:    1
 11972 ;; Hardware stack levels required when called:   13
 11973 ;; This function calls:
 11974 ;;		_HMI_SetDown
 11975 ;;		_HMI_SetNumber
 11976 ;;		_LED_Toggle
 11977 ;; This function is called by:
 11978 ;;		_HMI_Init
 11979 ;;		_Button_Poll
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	text60
 11984  014336                     __ptext60:
 11985                           	opt stack 0
 11986  014336                     _Event_HMI_DownButton:
 11987                           	opt stack 15
 11988                           
 11989                           ;incstack = 0
 11990                           ;Event_HMI_DownButton@pState stored from wreg
 11991  014336  0100               	movlb	0	; () banked
 11992  014338  6FD3               	movwf	Event_HMI_DownButton@pState& (0+255),b
 11993                           
 11994                           ;Events.c: 126: HMI_SetDown(pState);
 11995  01433A  0100               	movlb	0	; () banked
 11996  01433C  51D3               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 11997  01433E  ECE7  F0A3         	call	_HMI_SetDown
 11998                           
 11999                           ;Events.c: 128: if (pState == 0)
 12000  014342  0100               	movlb	0	; () banked
 12001  014344  51D3               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 12002  014346  0100               	movlb	0	; () banked
 12003  014348  A4D8               	btfss	status,2,c
 12004  01434A  D00A               	goto	l10927
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;Events.c: 129: {
 12008                           ;Events.c: 130: val -= 1;
 12009  01434C  0100               	movlb	0	; () banked
 12010  01434E  0776               	decf	_val& (0+255),f,b
 12011  014350  A0D8               	btfss	status,0,c
 12012  014352  0777               	decf	(_val+1)& (0+255),f,b
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;Events.c: 131: HMI_SetNumber(val);
 12016  014354  C076  F0D0         	movff	_val,HMI_SetNumber@pInput
 12017  014358  C077  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 12018  01435C  EC85  F0A2         	call	_HMI_SetNumber	;wreg free
 12019  014360                     l10927:
 12020                           
 12021                           ;Events.c: 132: }
 12022                           ;Events.c: 135: LED_Toggle(eLED1);
 12023  014360  0E00               	movlw	0
 12024  014362  ECC8  F09F         	call	_LED_Toggle
 12025  014366  0012               	return		;funcret
 12026  014368                     __end_of_Event_HMI_DownButton:
 12027                           	opt stack 0
 12028                           tosu	equ	0xFFF
 12029                           tosh	equ	0xFFE
 12030                           tosl	equ	0xFFD
 12031                           pclath	equ	0xFFA
 12032                           tblptru	equ	0xFF8
 12033                           tblptrh	equ	0xFF7
 12034                           tblptrl	equ	0xFF6
 12035                           tablat	equ	0xFF5
 12036                           prodh	equ	0xFF4
 12037                           prodl	equ	0xFF3
 12038                           intcon	equ	0xFF2
 12039                           postinc0	equ	0xFEE
 12040                           wreg	equ	0xFE8
 12041                           indf1	equ	0xFE7
 12042                           postdec1	equ	0xFE5
 12043                           fsr1h	equ	0xFE2
 12044                           fsr1l	equ	0xFE1
 12045                           indf2	equ	0xFDF
 12046                           postinc2	equ	0xFDE
 12047                           postdec2	equ	0xFDD
 12048                           plusw2	equ	0xFDB
 12049                           fsr2h	equ	0xFDA
 12050                           fsr2l	equ	0xFD9
 12051                           status	equ	0xFD8
 12052                           
 12053 ;; *************** function _Event_HMI_UpButton *****************
 12054 ;; Defined at:
 12055 ;;		line 108 in file "Events.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;  pState          1    wreg     unsigned char 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  pState          1   25[BANK0 ] unsigned char 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      void 
 12062 ;; Registers used:
 12063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12073 ;;Total ram usage:        1 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:   13
 12076 ;; This function calls:
 12077 ;;		_HMI_SetNumber
 12078 ;;		_HMI_SetUp
 12079 ;;		_LED_Toggle
 12080 ;; This function is called by:
 12081 ;;		_HMI_Init
 12082 ;;		_Button_Poll
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           	psect	text61
 12087  014398                     __ptext61:
 12088                           	opt stack 0
 12089  014398                     _Event_HMI_UpButton:
 12090                           	opt stack 15
 12091                           
 12092                           ;incstack = 0
 12093                           ;Event_HMI_UpButton@pState stored from wreg
 12094  014398  0100               	movlb	0	; () banked
 12095  01439A  6FD3               	movwf	Event_HMI_UpButton@pState& (0+255),b
 12096                           
 12097                           ;Events.c: 111: HMI_SetUp(pState);
 12098  01439C  0100               	movlb	0	; () banked
 12099  01439E  51D3               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 12100  0143A0  ECC6  F0A3         	call	_HMI_SetUp
 12101                           
 12102                           ;Events.c: 113: if (pState == 0)
 12103  0143A4  0100               	movlb	0	; () banked
 12104  0143A6  51D3               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 12105  0143A8  0100               	movlb	0	; () banked
 12106  0143AA  A4D8               	btfss	status,2,c
 12107  0143AC  D009               	goto	l10917
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;Events.c: 114: {
 12111                           ;Events.c: 115: val += 1;
 12112  0143AE  0100               	movlb	0	; () banked
 12113  0143B0  4B76               	infsnz	_val& (0+255),f,b
 12114  0143B2  2B77               	incf	(_val+1)& (0+255),f,b
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;Events.c: 116: HMI_SetNumber(val);
 12118  0143B4  C076  F0D0         	movff	_val,HMI_SetNumber@pInput
 12119  0143B8  C077  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 12120  0143BC  EC85  F0A2         	call	_HMI_SetNumber	;wreg free
 12121  0143C0                     l10917:
 12122                           
 12123                           ;Events.c: 117: }
 12124                           ;Events.c: 120: LED_Toggle(eLED1);
 12125  0143C0  0E00               	movlw	0
 12126  0143C2  ECC8  F09F         	call	_LED_Toggle
 12127  0143C6  0012               	return		;funcret
 12128  0143C8                     __end_of_Event_HMI_UpButton:
 12129                           	opt stack 0
 12130                           tosu	equ	0xFFF
 12131                           tosh	equ	0xFFE
 12132                           tosl	equ	0xFFD
 12133                           pclath	equ	0xFFA
 12134                           tblptru	equ	0xFF8
 12135                           tblptrh	equ	0xFF7
 12136                           tblptrl	equ	0xFF6
 12137                           tablat	equ	0xFF5
 12138                           prodh	equ	0xFF4
 12139                           prodl	equ	0xFF3
 12140                           intcon	equ	0xFF2
 12141                           postinc0	equ	0xFEE
 12142                           wreg	equ	0xFE8
 12143                           indf1	equ	0xFE7
 12144                           postdec1	equ	0xFE5
 12145                           fsr1h	equ	0xFE2
 12146                           fsr1l	equ	0xFE1
 12147                           indf2	equ	0xFDF
 12148                           postinc2	equ	0xFDE
 12149                           postdec2	equ	0xFDD
 12150                           plusw2	equ	0xFDB
 12151                           fsr2h	equ	0xFDA
 12152                           fsr2l	equ	0xFD9
 12153                           status	equ	0xFD8
 12154                           
 12155 ;; *************** function _Event_HMI_RightButton *****************
 12156 ;; Defined at:
 12157 ;;		line 91 in file "Events.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;  pState          1    wreg     unsigned char 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;  pState          1   25[BANK0 ] unsigned char 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:        1 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:   13
 12178 ;; This function calls:
 12179 ;;		_HMI_SetBar
 12180 ;;		_HMI_SetRight
 12181 ;;		_LED_Toggle
 12182 ;; This function is called by:
 12183 ;;		_HMI_Init
 12184 ;;		_Button_Poll
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           	psect	text62
 12189  014064                     __ptext62:
 12190                           	opt stack 0
 12191  014064                     _Event_HMI_RightButton:
 12192                           	opt stack 15
 12193                           
 12194                           ;incstack = 0
 12195                           ;Event_HMI_RightButton@pState stored from wreg
 12196  014064  0100               	movlb	0	; () banked
 12197  014066  6FD3               	movwf	Event_HMI_RightButton@pState& (0+255),b
 12198                           
 12199                           ;Events.c: 94: HMI_SetRight(pState);
 12200  014068  0100               	movlb	0	; () banked
 12201  01406A  51D3               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 12202  01406C  ECD1  F0A3         	call	_HMI_SetRight
 12203                           
 12204                           ;Events.c: 96: if (pState == 0)
 12205  014070  0100               	movlb	0	; () banked
 12206  014072  51D3               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 12207  014074  0100               	movlb	0	; () banked
 12208  014076  A4D8               	btfss	status,2,c
 12209  014078  D013               	goto	l10907
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;Events.c: 97: {
 12213                           ;Events.c: 98: if (pShiftVal == 0)
 12214  01407A  0100               	movlb	0	; () banked
 12215  01407C  5174               	movf	_pShiftVal& (0+255),w,b
 12216  01407E  0100               	movlb	0	; () banked
 12217  014080  1175               	iorwf	(_pShiftVal+1)& (0+255),w,b
 12218  014082  A4D8               	btfss	status,2,c
 12219  014084  D005               	goto	l10903
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;Events.c: 99: pShiftVal = 0xFF00;
 12223  014086  0EFF               	movlw	255
 12224  014088  0100               	movlb	0	; () banked
 12225  01408A  6F75               	movwf	(_pShiftVal+1)& (0+255),b
 12226  01408C  0E00               	movlw	0
 12227  01408E  6F74               	movwf	_pShiftVal& (0+255),b
 12228  014090                     l10903:
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;Events.c: 100: pShiftVal >>= 1;
 12232  014090  0100               	movlb	0	; () banked
 12233  014092  90D8               	bcf	status,0,c
 12234  014094  3375               	rrcf	(_pShiftVal+1)& (0+255),f,b
 12235  014096  3374               	rrcf	_pShiftVal& (0+255),f,b
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
 12239  014098  0100               	movlb	0	; () banked
 12240  01409A  5174               	movf	_pShiftVal& (0+255),w,b
 12241  01409C  EC2E  F0A4         	call	_HMI_SetBar
 12242  0140A0                     l10907:
 12243                           
 12244                           ;Events.c: 103: }
 12245                           ;Events.c: 105: LED_Toggle(eLED1);
 12246  0140A0  0E00               	movlw	0
 12247  0140A2  ECC8  F09F         	call	_LED_Toggle
 12248  0140A6  0012               	return		;funcret
 12249  0140A8                     __end_of_Event_HMI_RightButton:
 12250                           	opt stack 0
 12251                           tosu	equ	0xFFF
 12252                           tosh	equ	0xFFE
 12253                           tosl	equ	0xFFD
 12254                           pclath	equ	0xFFA
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           intcon	equ	0xFF2
 12262                           postinc0	equ	0xFEE
 12263                           wreg	equ	0xFE8
 12264                           indf1	equ	0xFE7
 12265                           postdec1	equ	0xFE5
 12266                           fsr1h	equ	0xFE2
 12267                           fsr1l	equ	0xFE1
 12268                           indf2	equ	0xFDF
 12269                           postinc2	equ	0xFDE
 12270                           postdec2	equ	0xFDD
 12271                           plusw2	equ	0xFDB
 12272                           fsr2h	equ	0xFDA
 12273                           fsr2l	equ	0xFD9
 12274                           status	equ	0xFD8
 12275                           
 12276 ;; *************** function _Event_HMI_LeftButton *****************
 12277 ;; Defined at:
 12278 ;;		line 71 in file "Events.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  pState          1    wreg     unsigned char 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  pState          1   25[BANK0 ] unsigned char 
 12283 ;; Return value:  Size  Location     Type
 12284 ;;                  1    wreg      void 
 12285 ;; Registers used:
 12286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;Total ram usage:        1 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:   13
 12299 ;; This function calls:
 12300 ;;		_HMI_SetBar
 12301 ;;		_HMI_SetLeft
 12302 ;;		_LED_Toggle
 12303 ;; This function is called by:
 12304 ;;		_HMI_Init
 12305 ;;		_Button_Poll
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309                           	psect	text63
 12310  013D1A                     __ptext63:
 12311                           	opt stack 0
 12312  013D1A                     _Event_HMI_LeftButton:
 12313                           	opt stack 15
 12314                           
 12315                           ;incstack = 0
 12316                           ;Event_HMI_LeftButton@pState stored from wreg
 12317  013D1A  0100               	movlb	0	; () banked
 12318  013D1C  6FD3               	movwf	Event_HMI_LeftButton@pState& (0+255),b
 12319                           
 12320                           ;Events.c: 74: HMI_SetLeft(pState);
 12321  013D1E  0100               	movlb	0	; () banked
 12322  013D20  51D3               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 12323  013D22  ECDC  F0A3         	call	_HMI_SetLeft
 12324                           
 12325                           ;Events.c: 76: if (pState == 0)
 12326  013D26  0100               	movlb	0	; () banked
 12327  013D28  51D3               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 12328  013D2A  0100               	movlb	0	; () banked
 12329  013D2C  A4D8               	btfss	status,2,c
 12330  013D2E  D01D               	goto	l10893
 12331                           
 12332                           ; BSR set to: 0
 12333                           ;Events.c: 77: {
 12334                           ;Events.c: 78: pShiftVal <<= 1;
 12335  013D30  0100               	movlb	0	; () banked
 12336  013D32  90D8               	bcf	status,0,c
 12337  013D34  3774               	rlcf	_pShiftVal& (0+255),f,b
 12338  013D36  3775               	rlcf	(_pShiftVal+1)& (0+255),f,b
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;Events.c: 79: if (pShiftVal == 0xFF00)
 12342  013D38  0100               	movlb	0	; () banked
 12343  013D3A  2975               	incf	(_pShiftVal+1)& (0+255),w,b
 12344  013D3C  0100               	movlb	0	; () banked
 12345  013D3E  1174               	iorwf	_pShiftVal& (0+255),w,b
 12346  013D40  A4D8               	btfss	status,2,c
 12347  013D42  D006               	goto	l10887
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;Events.c: 80: pShiftVal = 0;
 12351  013D44  0E00               	movlw	0
 12352  013D46  0100               	movlb	0	; () banked
 12353  013D48  6F75               	movwf	(_pShiftVal+1)& (0+255),b
 12354  013D4A  0E00               	movlw	0
 12355  013D4C  6F74               	movwf	_pShiftVal& (0+255),b
 12356  013D4E  D009               	goto	l10891
 12357  013D50                     l10887:
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;Events.c: 81: else if (pShiftVal < 0xFF)
 12361  013D50  0100               	movlb	0	; () banked
 12362  013D52  5175               	movf	(_pShiftVal+1)& (0+255),w,b
 12363  013D54  E106               	bnz	l10891
 12364  013D56  0100               	movlb	0	; () banked
 12365  013D58  2974               	incf	_pShiftVal& (0+255),w,b
 12366  013D5A  B0D8               	btfsc	status,0,c
 12367  013D5C  D002               	goto	l10891
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;Events.c: 82: pShiftVal |= 1;
 12371  013D5E  0100               	movlb	0	; () banked
 12372  013D60  8174               	bsf	_pShiftVal& (0+255),0,b
 12373  013D62                     l10891:
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
 12377  013D62  0100               	movlb	0	; () banked
 12378  013D64  5174               	movf	_pShiftVal& (0+255),w,b
 12379  013D66  EC2E  F0A4         	call	_HMI_SetBar
 12380  013D6A                     l10893:
 12381                           
 12382                           ;Events.c: 85: }
 12383                           ;Events.c: 88: LED_Toggle(eLED1);
 12384  013D6A  0E00               	movlw	0
 12385  013D6C  ECC8  F09F         	call	_LED_Toggle
 12386  013D70  0012               	return		;funcret
 12387  013D72                     __end_of_Event_HMI_LeftButton:
 12388                           	opt stack 0
 12389                           tosu	equ	0xFFF
 12390                           tosh	equ	0xFFE
 12391                           tosl	equ	0xFFD
 12392                           pclath	equ	0xFFA
 12393                           tblptru	equ	0xFF8
 12394                           tblptrh	equ	0xFF7
 12395                           tblptrl	equ	0xFF6
 12396                           tablat	equ	0xFF5
 12397                           prodh	equ	0xFF4
 12398                           prodl	equ	0xFF3
 12399                           intcon	equ	0xFF2
 12400                           postinc0	equ	0xFEE
 12401                           wreg	equ	0xFE8
 12402                           indf1	equ	0xFE7
 12403                           postdec1	equ	0xFE5
 12404                           fsr1h	equ	0xFE2
 12405                           fsr1l	equ	0xFE1
 12406                           indf2	equ	0xFDF
 12407                           postinc2	equ	0xFDE
 12408                           postdec2	equ	0xFDD
 12409                           plusw2	equ	0xFDB
 12410                           fsr2h	equ	0xFDA
 12411                           fsr2l	equ	0xFD9
 12412                           status	equ	0xFD8
 12413                           
 12414 ;; *************** function _Event_HMI_DIPSwitch *****************
 12415 ;; Defined at:
 12416 ;;		line 30 in file "Events.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  pState          1    wreg     unsigned char 
 12419 ;; Auto vars:     Size  Location     Type
 12420 ;;  pState          1   25[BANK0 ] unsigned char 
 12421 ;;  Bar             1   26[BANK0 ] unsigned char 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  1    wreg      void 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;Total ram usage:        2 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:   13
 12438 ;; This function calls:
 12439 ;;		_HMI_GetBar
 12440 ;;		_HMI_SetBar
 12441 ;;		_LED_Toggle
 12442 ;; This function is called by:
 12443 ;;		_HMI_Init
 12444 ;;		_Button_Poll
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           	psect	text64
 12449  0144B4                     __ptext64:
 12450                           	opt stack 0
 12451  0144B4                     _Event_HMI_DIPSwitch:
 12452                           	opt stack 15
 12453                           
 12454                           ;incstack = 0
 12455                           ;Event_HMI_DIPSwitch@pState stored from wreg
 12456  0144B4  0100               	movlb	0	; () banked
 12457  0144B6  6FD3               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
 12458                           
 12459                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
 12460  0144B8  EC47  F0A4         	call	_HMI_GetBar	;wreg free
 12461  0144BC  0100               	movlb	0	; () banked
 12462  0144BE  6FD4               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;Events.c: 33: HMI_SetBar(pState | Bar);
 12466  0144C0  0100               	movlb	0	; () banked
 12467  0144C2  51D3               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
 12468  0144C4  0100               	movlb	0	; () banked
 12469  0144C6  11D4               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
 12470  0144C8  EC2E  F0A4         	call	_HMI_SetBar
 12471                           
 12472                           ;Events.c: 35: Bar &= 0xF0;
 12473  0144CC  0EF0               	movlw	240
 12474  0144CE  0100               	movlb	0	; () banked
 12475  0144D0  17D4               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;Events.c: 36: pState &= 0x0F;
 12479  0144D2  0E0F               	movlw	15
 12480  0144D4  0100               	movlb	0	; () banked
 12481  0144D6  17D3               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;Events.c: 42: LED_Toggle(eLED1);
 12485  0144D8  0E00               	movlw	0
 12486  0144DA  ECC8  F09F         	call	_LED_Toggle
 12487  0144DE  0012               	return		;funcret
 12488  0144E0                     __end_of_Event_HMI_DIPSwitch:
 12489                           	opt stack 0
 12490                           tosu	equ	0xFFF
 12491                           tosh	equ	0xFFE
 12492                           tosl	equ	0xFFD
 12493                           pclath	equ	0xFFA
 12494                           tblptru	equ	0xFF8
 12495                           tblptrh	equ	0xFF7
 12496                           tblptrl	equ	0xFF6
 12497                           tablat	equ	0xFF5
 12498                           prodh	equ	0xFF4
 12499                           prodl	equ	0xFF3
 12500                           intcon	equ	0xFF2
 12501                           postinc0	equ	0xFEE
 12502                           wreg	equ	0xFE8
 12503                           indf1	equ	0xFE7
 12504                           postdec1	equ	0xFE5
 12505                           fsr1h	equ	0xFE2
 12506                           fsr1l	equ	0xFE1
 12507                           indf2	equ	0xFDF
 12508                           postinc2	equ	0xFDE
 12509                           postdec2	equ	0xFDD
 12510                           plusw2	equ	0xFDB
 12511                           fsr2h	equ	0xFDA
 12512                           fsr2l	equ	0xFD9
 12513                           status	equ	0xFD8
 12514                           
 12515 ;; *************** function _Event_TestButton *****************
 12516 ;; Defined at:
 12517 ;;		line 47 in file "Events.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  pState          1    wreg     unsigned char 
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;  pState          1   25[BANK0 ] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      void 
 12524 ;; Registers used:
 12525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;Total ram usage:        1 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:   13
 12538 ;; This function calls:
 12539 ;;		_HMI_SetButton
 12540 ;;		_HMI_SetNumber
 12541 ;;		_LED_Toggle
 12542 ;; This function is called by:
 12543 ;;		_FunctInitButton
 12544 ;;		_Button_Poll
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           	psect	text65
 12549  014220                     __ptext65:
 12550                           	opt stack 0
 12551  014220                     _Event_TestButton:
 12552                           	opt stack 15
 12553                           
 12554                           ;incstack = 0
 12555                           ;Event_TestButton@pState stored from wreg
 12556  014220  0100               	movlb	0	; () banked
 12557  014222  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 12558                           
 12559                           ;Events.c: 51: static UINT8 j = 0;
 12560                           ;Events.c: 55: if (pState == 0)
 12561  014224  0100               	movlb	0	; () banked
 12562  014226  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 12563  014228  0100               	movlb	0	; () banked
 12564  01422A  A4D8               	btfss	status,2,c
 12565  01422C  D013               	goto	l10875
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Events.c: 56: {
 12569                           ;Events.c: 57: j++;
 12570  01422E  0100               	movlb	0	; () banked
 12571  014230  2B78               	incf	Event_TestButton@j& (0+255),f,b
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;Events.c: 58: val += j;
 12575  014232  0100               	movlb	0	; () banked
 12576  014234  5178               	movf	Event_TestButton@j& (0+255),w,b
 12577  014236  0100               	movlb	0	; () banked
 12578  014238  2776               	addwf	_val& (0+255),f,b
 12579  01423A  0E00               	movlw	0
 12580  01423C  2377               	addwfc	(_val+1)& (0+255),f,b
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;Events.c: 59: HMI_SetNumber( val );
 12584  01423E  C076  F0D0         	movff	_val,HMI_SetNumber@pInput
 12585  014242  C077  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 12586  014246  EC85  F0A2         	call	_HMI_SetNumber	;wreg free
 12587                           
 12588                           ;Events.c: 62: HMI_SetButton( j & 3 );
 12589  01424A  0100               	movlb	0	; () banked
 12590  01424C  5178               	movf	Event_TestButton@j& (0+255),w,b
 12591  01424E  0B03               	andlw	3
 12592  014250  ECB3  F099         	call	_HMI_SetButton
 12593  014254                     l10875:
 12594                           
 12595                           ;Events.c: 63: }
 12596                           ;Events.c: 67: LED_Toggle(eLED1);
 12597  014254  0E00               	movlw	0
 12598  014256  ECC8  F09F         	call	_LED_Toggle
 12599  01425A  0012               	return		;funcret
 12600  01425C                     __end_of_Event_TestButton:
 12601                           	opt stack 0
 12602                           tosu	equ	0xFFF
 12603                           tosh	equ	0xFFE
 12604                           tosl	equ	0xFFD
 12605                           pclath	equ	0xFFA
 12606                           tblptru	equ	0xFF8
 12607                           tblptrh	equ	0xFF7
 12608                           tblptrl	equ	0xFF6
 12609                           tablat	equ	0xFF5
 12610                           prodh	equ	0xFF4
 12611                           prodl	equ	0xFF3
 12612                           intcon	equ	0xFF2
 12613                           postinc0	equ	0xFEE
 12614                           wreg	equ	0xFE8
 12615                           indf1	equ	0xFE7
 12616                           postdec1	equ	0xFE5
 12617                           fsr1h	equ	0xFE2
 12618                           fsr1l	equ	0xFE1
 12619                           indf2	equ	0xFDF
 12620                           postinc2	equ	0xFDE
 12621                           postdec2	equ	0xFDD
 12622                           plusw2	equ	0xFDB
 12623                           fsr2h	equ	0xFDA
 12624                           fsr2l	equ	0xFD9
 12625                           status	equ	0xFD8
 12626                           
 12627 ;; *************** function _HMI_SetButton *****************
 12628 ;; Defined at:
 12629 ;;		line 186 in file "HMI.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  pValue          1    wreg     unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  pValue          1    6[BANK0 ] unsigned char 
 12634 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 12635 ;;  v               1    7[BANK0 ] unsigned char 
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12648 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12649 ;;Total ram usage:        8 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    7
 12652 ;; This function calls:
 12653 ;;		Nothing
 12654 ;; This function is called by:
 12655 ;;		_Event_TestButton
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           	psect	text66
 12660  013366                     __ptext66:
 12661                           	opt stack 0
 12662  013366                     _HMI_SetButton:
 12663                           	opt stack 20
 12664                           
 12665                           ;incstack = 0
 12666                           ;HMI_SetButton@pValue stored from wreg
 12667  013366  0100               	movlb	0	; () banked
 12668  013368  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 12669                           
 12670                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 12671  01336A  0EA6               	movlw	low HMI_SetButton@F8155
 12672  01336C  6EF6               	movwf	tblptrl,c
 12673  01336E                     	if	1	;There is more than 1 active tblptr byte
 12674  01336E  0EFD               	movlw	high HMI_SetButton@F8155
 12675  013370  6EF7               	movwf	tblptrh,c
 12676  013372                     	endif
 12677  013372                     	if	1	;There are 3 active tblptr bytes
 12678  013372  0E00               	movlw	low (HMI_SetButton@F8155 shr (0+16))
 12679  013374  6EF8               	movwf	tblptru,c
 12680  013376                     	endif
 12681  013376  0009               	tblrd		*+
 12682  013378  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 12683  01337C  0009               	tblrd		*+
 12684  01337E  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 12685  013382  0009               	tblrd		*+
 12686  013384  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 12687  013388  000A               	tblrd		*-
 12688  01338A  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 12689                           
 12690                           ;HMI.c: 189: UINT8 v = 0b00010001;
 12691  01338E  0E11               	movlw	17
 12692  013390  0100               	movlb	0	; () banked
 12693  013392  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;HMI.c: 190: pValue &= 3;
 12697  013394  0E03               	movlw	3
 12698  013396  0100               	movlb	0	; () banked
 12699  013398  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;HMI.c: 191: v = v << reindex[pValue];
 12703  01339A  0100               	movlb	0	; () banked
 12704  01339C  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 12705  01339E  0D01               	mullw	1
 12706  0133A0  0EBC               	movlw	low HMI_SetButton@reindex
 12707  0133A2  24F3               	addwf	prodl,w,c
 12708  0133A4  6ED9               	movwf	fsr2l,c
 12709  0133A6  0E00               	movlw	high HMI_SetButton@reindex
 12710  0133A8  20F4               	addwfc	prodh,w,c
 12711  0133AA  6EDA               	movwf	fsr2h,c
 12712  0133AC  50DF               	movf	indf2,w,c
 12713  0133AE  0100               	movlb	0	; () banked
 12714  0133B0  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 12715  0133B2  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 12716  0133B6  0100               	movlb	0	; () banked
 12717  0133B8  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 12718  0133BA  D003               	goto	u7014
 12719  0133BC                     u7015:
 12720  0133BC  0100               	movlb	0	; () banked
 12721  0133BE  90D8               	bcf	status,0,c
 12722  0133C0  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 12723  0133C2                     u7014:
 12724  0133C2  0100               	movlb	0	; () banked
 12725  0133C4  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 12726  0133C6  D7FA               	goto	u7015
 12727  0133C8  0100               	movlb	0	; () banked
 12728  0133CA  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 12729  0133CC  0100               	movlb	0	; () banked
 12730  0133CE  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;HMI.c: 192: v = v >> 4;
 12734  0133D0  0100               	movlb	0	; () banked
 12735  0133D2  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 12736  0133D4  0B0F               	andlw	15
 12737  0133D6  0100               	movlb	0	; () banked
 12738  0133D8  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;HMI.c: 193: v = v & 0x0F;
 12742  0133DA  0100               	movlb	0	; () banked
 12743  0133DC  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 12744  0133DE  0B0F               	andlw	15
 12745  0133E0  0100               	movlb	0	; () banked
 12746  0133E2  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;HMI.c: 194: HMIBoard.pButton = v;
 12750  0133E4  0101               	movlb	1	; () banked
 12751  0133E6  5130               	movf	(_HMIBoard+6)& (0+255),w,b
 12752  0133E8  0100               	movlb	0	; () banked
 12753  0133EA  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 12754  0133EC  0BF0               	andlw	-16
 12755  0133EE  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 12756  0133F0  0101               	movlb	1	; () banked
 12757  0133F2  6F30               	movwf	(_HMIBoard+6)& (0+255),b
 12758                           
 12759                           ; BSR set to: 1
 12760  0133F4  0012               	return		;funcret
 12761  0133F6                     __end_of_HMI_SetButton:
 12762                           	opt stack 0
 12763                           tosu	equ	0xFFF
 12764                           tosh	equ	0xFFE
 12765                           tosl	equ	0xFFD
 12766                           pclath	equ	0xFFA
 12767                           tblptru	equ	0xFF8
 12768                           tblptrh	equ	0xFF7
 12769                           tblptrl	equ	0xFF6
 12770                           tablat	equ	0xFF5
 12771                           prodh	equ	0xFF4
 12772                           prodl	equ	0xFF3
 12773                           intcon	equ	0xFF2
 12774                           postinc0	equ	0xFEE
 12775                           wreg	equ	0xFE8
 12776                           indf1	equ	0xFE7
 12777                           postdec1	equ	0xFE5
 12778                           fsr1h	equ	0xFE2
 12779                           fsr1l	equ	0xFE1
 12780                           indf2	equ	0xFDF
 12781                           postinc2	equ	0xFDE
 12782                           postdec2	equ	0xFDD
 12783                           plusw2	equ	0xFDB
 12784                           fsr2h	equ	0xFDA
 12785                           fsr2l	equ	0xFD9
 12786                           status	equ	0xFD8
 12787                           
 12788 ;; *************** function _HMI_SetUp *****************
 12789 ;; Defined at:
 12790 ;;		line 174 in file "HMI.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;  pValue          1    wreg     unsigned char 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;  pValue          1    0[BANK0 ] unsigned char 
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1    wreg      void 
 12797 ;; Registers used:
 12798 ;;		wreg
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;Total ram usage:        1 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    7
 12811 ;; This function calls:
 12812 ;;		Nothing
 12813 ;; This function is called by:
 12814 ;;		_Event_HMI_UpButton
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           	psect	text67
 12819  01478C                     __ptext67:
 12820                           	opt stack 0
 12821  01478C                     _HMI_SetUp:
 12822                           	opt stack 20
 12823                           
 12824                           ; BSR set to: 1
 12825                           ;incstack = 0
 12826                           ;HMI_SetUp@pValue stored from wreg
 12827  01478C  0100               	movlb	0	; () banked
 12828  01478E  6FBA               	movwf	HMI_SetUp@pValue& (0+255),b
 12829                           
 12830                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
 12831  014790  0100               	movlb	0	; () banked
 12832  014792  B1BA               	btfsc	HMI_SetUp@pValue& (0+255),0,b
 12833  014794  D003               	bra	u6995
 12834  014796  0101               	movlb	1	; () banked
 12835  014798  9130               	bcf	(_HMIBoard+6)& (0+255),0,b
 12836  01479A  D002               	bra	u6996
 12837  01479C                     u6995:
 12838  01479C  0101               	movlb	1	; () banked
 12839  01479E  8130               	bsf	(_HMIBoard+6)& (0+255),0,b
 12840  0147A0                     u6996:
 12841                           
 12842                           ; BSR set to: 1
 12843  0147A0  0012               	return		;funcret
 12844  0147A2                     __end_of_HMI_SetUp:
 12845                           	opt stack 0
 12846                           tosu	equ	0xFFF
 12847                           tosh	equ	0xFFE
 12848                           tosl	equ	0xFFD
 12849                           pclath	equ	0xFFA
 12850                           tblptru	equ	0xFF8
 12851                           tblptrh	equ	0xFF7
 12852                           tblptrl	equ	0xFF6
 12853                           tablat	equ	0xFF5
 12854                           prodh	equ	0xFF4
 12855                           prodl	equ	0xFF3
 12856                           intcon	equ	0xFF2
 12857                           postinc0	equ	0xFEE
 12858                           wreg	equ	0xFE8
 12859                           indf1	equ	0xFE7
 12860                           postdec1	equ	0xFE5
 12861                           fsr1h	equ	0xFE2
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function _HMI_SetRight *****************
 12872 ;; Defined at:
 12873 ;;		line 168 in file "HMI.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;  pValue          1    wreg     unsigned char 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  pValue          1    0[BANK0 ] unsigned char 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  1    wreg      void 
 12880 ;; Registers used:
 12881 ;;		wreg
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;Total ram usage:        1 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    7
 12894 ;; This function calls:
 12895 ;;		Nothing
 12896 ;; This function is called by:
 12897 ;;		_Event_HMI_RightButton
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           	psect	text68
 12902  0147A2                     __ptext68:
 12903                           	opt stack 0
 12904  0147A2                     _HMI_SetRight:
 12905                           	opt stack 20
 12906                           
 12907                           ; BSR set to: 1
 12908                           ;incstack = 0
 12909                           ;HMI_SetRight@pValue stored from wreg
 12910  0147A2  0100               	movlb	0	; () banked
 12911  0147A4  6FBA               	movwf	HMI_SetRight@pValue& (0+255),b
 12912                           
 12913                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
 12914  0147A6  0100               	movlb	0	; () banked
 12915  0147A8  B1BA               	btfsc	HMI_SetRight@pValue& (0+255),0,b
 12916  0147AA  D003               	bra	u6985
 12917  0147AC  0101               	movlb	1	; () banked
 12918  0147AE  9730               	bcf	(_HMIBoard+6)& (0+255),3,b
 12919  0147B0  D002               	bra	u6986
 12920  0147B2                     u6985:
 12921  0147B2  0101               	movlb	1	; () banked
 12922  0147B4  8730               	bsf	(_HMIBoard+6)& (0+255),3,b
 12923  0147B6                     u6986:
 12924                           
 12925                           ; BSR set to: 1
 12926  0147B6  0012               	return		;funcret
 12927  0147B8                     __end_of_HMI_SetRight:
 12928                           	opt stack 0
 12929                           tosu	equ	0xFFF
 12930                           tosh	equ	0xFFE
 12931                           tosl	equ	0xFFD
 12932                           pclath	equ	0xFFA
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           postinc0	equ	0xFEE
 12941                           wreg	equ	0xFE8
 12942                           indf1	equ	0xFE7
 12943                           postdec1	equ	0xFE5
 12944                           fsr1h	equ	0xFE2
 12945                           fsr1l	equ	0xFE1
 12946                           indf2	equ	0xFDF
 12947                           postinc2	equ	0xFDE
 12948                           postdec2	equ	0xFDD
 12949                           plusw2	equ	0xFDB
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _HMI_SetLeft *****************
 12955 ;; Defined at:
 12956 ;;		line 162 in file "HMI.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;  pValue          1    wreg     unsigned char 
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;  pValue          1    0[BANK0 ] unsigned char 
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  1    wreg      void 
 12963 ;; Registers used:
 12964 ;;		wreg
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;Total ram usage:        1 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    7
 12977 ;; This function calls:
 12978 ;;		Nothing
 12979 ;; This function is called by:
 12980 ;;		_Event_HMI_LeftButton
 12981 ;; This function uses a non-reentrant model
 12982 ;;
 12983                           
 12984                           	psect	text69
 12985  0147B8                     __ptext69:
 12986                           	opt stack 0
 12987  0147B8                     _HMI_SetLeft:
 12988                           	opt stack 20
 12989                           
 12990                           ; BSR set to: 1
 12991                           ;incstack = 0
 12992                           ;HMI_SetLeft@pValue stored from wreg
 12993  0147B8  0100               	movlb	0	; () banked
 12994  0147BA  6FBA               	movwf	HMI_SetLeft@pValue& (0+255),b
 12995                           
 12996                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
 12997  0147BC  0100               	movlb	0	; () banked
 12998  0147BE  B1BA               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
 12999  0147C0  D003               	bra	u6975
 13000  0147C2  0101               	movlb	1	; () banked
 13001  0147C4  9530               	bcf	(_HMIBoard+6)& (0+255),2,b
 13002  0147C6  D002               	bra	u6976
 13003  0147C8                     u6975:
 13004  0147C8  0101               	movlb	1	; () banked
 13005  0147CA  8530               	bsf	(_HMIBoard+6)& (0+255),2,b
 13006  0147CC                     u6976:
 13007                           
 13008                           ; BSR set to: 1
 13009  0147CC  0012               	return		;funcret
 13010  0147CE                     __end_of_HMI_SetLeft:
 13011                           	opt stack 0
 13012                           tosu	equ	0xFFF
 13013                           tosh	equ	0xFFE
 13014                           tosl	equ	0xFFD
 13015                           pclath	equ	0xFFA
 13016                           tblptru	equ	0xFF8
 13017                           tblptrh	equ	0xFF7
 13018                           tblptrl	equ	0xFF6
 13019                           tablat	equ	0xFF5
 13020                           prodh	equ	0xFF4
 13021                           prodl	equ	0xFF3
 13022                           intcon	equ	0xFF2
 13023                           postinc0	equ	0xFEE
 13024                           wreg	equ	0xFE8
 13025                           indf1	equ	0xFE7
 13026                           postdec1	equ	0xFE5
 13027                           fsr1h	equ	0xFE2
 13028                           fsr1l	equ	0xFE1
 13029                           indf2	equ	0xFDF
 13030                           postinc2	equ	0xFDE
 13031                           postdec2	equ	0xFDD
 13032                           plusw2	equ	0xFDB
 13033                           fsr2h	equ	0xFDA
 13034                           fsr2l	equ	0xFD9
 13035                           status	equ	0xFD8
 13036                           
 13037 ;; *************** function _HMI_SetNumber *****************
 13038 ;; Defined at:
 13039 ;;		line 221 in file "HMI.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  pInput          2   22[BANK0 ] int 
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;		None
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  1    wreg      void 
 13046 ;; Registers used:
 13047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;Total ram usage:        2 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    9
 13060 ;; This function calls:
 13061 ;;		_HMI_SetSegments
 13062 ;;		_itos
 13063 ;; This function is called by:
 13064 ;;		_Event_TestButton
 13065 ;;		_Event_HMI_UpButton
 13066 ;;		_Event_HMI_DownButton
 13067 ;;		_main
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text70
 13072  01450A                     __ptext70:
 13073                           	opt stack 0
 13074  01450A                     _HMI_SetNumber:
 13075                           	opt stack 21
 13076                           
 13077                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 13078                           
 13079                           ; BSR set to: 1
 13080                           ;incstack = 0
 13081  01450A  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 13082  01450E  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 13083  014512  0E2A               	movlw	low _HMIBoard
 13084  014514  0100               	movlb	0	; () banked
 13085  014516  6FC8               	movwf	itos@destination& (0+255),b
 13086  014518  0E01               	movlw	high _HMIBoard
 13087  01451A  0100               	movlb	0	; () banked
 13088  01451C  6FC9               	movwf	(itos@destination+1)& (0+255),b
 13089  01451E  EC00  F093         	call	_itos	;wreg free
 13090                           
 13091                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 13092  014522  0E2A               	movlw	low _HMIBoard
 13093  014524  0100               	movlb	0	; () banked
 13094  014526  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 13095  014528  0E01               	movlw	high _HMIBoard
 13096  01452A  0100               	movlb	0	; () banked
 13097  01452C  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 13098  01452E  EC8A  F092         	call	_HMI_SetSegments	;wreg free
 13099  014532  0012               	return		;funcret
 13100  014534                     __end_of_HMI_SetNumber:
 13101                           	opt stack 0
 13102                           tosu	equ	0xFFF
 13103                           tosh	equ	0xFFE
 13104                           tosl	equ	0xFFD
 13105                           pclath	equ	0xFFA
 13106                           tblptru	equ	0xFF8
 13107                           tblptrh	equ	0xFF7
 13108                           tblptrl	equ	0xFF6
 13109                           tablat	equ	0xFF5
 13110                           prodh	equ	0xFF4
 13111                           prodl	equ	0xFF3
 13112                           intcon	equ	0xFF2
 13113                           postinc0	equ	0xFEE
 13114                           wreg	equ	0xFE8
 13115                           indf1	equ	0xFE7
 13116                           postdec1	equ	0xFE5
 13117                           fsr1h	equ	0xFE2
 13118                           fsr1l	equ	0xFE1
 13119                           indf2	equ	0xFDF
 13120                           postinc2	equ	0xFDE
 13121                           postdec2	equ	0xFDD
 13122                           plusw2	equ	0xFDB
 13123                           fsr2h	equ	0xFDA
 13124                           fsr2l	equ	0xFD9
 13125                           status	equ	0xFD8
 13126                           
 13127 ;; *************** function _itos *****************
 13128 ;; Defined at:
 13129 ;;		line 369 in file "Library/Types.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  input           2   12[BANK0 ] unsigned short 
 13132 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 13133 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;  Out             2   20[BANK0 ] unsigned short 
 13136 ;;  Length          2   18[BANK0 ] unsigned short 
 13137 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 13138 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13139 ;; Return value:  Size  Location     Type
 13140 ;;                  1    wreg      void 
 13141 ;; Registers used:
 13142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13143 ;; Tracked objects:
 13144 ;;		On entry : 0/0
 13145 ;;		On exit  : 0/0
 13146 ;;		Unchanged: 0/0
 13147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13148 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;Total ram usage:       10 bytes
 13153 ;; Hardware stack levels used:    1
 13154 ;; Hardware stack levels required when called:    8
 13155 ;; This function calls:
 13156 ;;		___lwdiv
 13157 ;;		___lwmod
 13158 ;;		_reverse
 13159 ;; This function is called by:
 13160 ;;		_HMI_SetNumber
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text71
 13165  012600                     __ptext71:
 13166                           	opt stack 0
 13167  012600                     _itos:
 13168                           	opt stack 21
 13169                           
 13170                           ;Types.c: 371: UINT16 Out = input;
 13171                           
 13172                           ;incstack = 0
 13173  012600  C0C6  F0CE         	movff	itos@input,itos@Out
 13174  012604  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 13175                           
 13176                           ;Types.c: 372: UINT16 Length = 0;
 13177  012608  0E00               	movlw	0
 13178  01260A  0100               	movlb	0	; () banked
 13179  01260C  6FCD               	movwf	(itos@Length+1)& (0+255),b
 13180  01260E  0E00               	movlw	0
 13181  012610  6FCC               	movwf	itos@Length& (0+255),b
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;Types.c: 373: char *Data = destination;
 13185  012612  C0C8  F0CA         	movff	itos@destination,itos@Data
 13186  012616  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;Types.c: 374: if(Out == 0)
 13190  01261A  0100               	movlb	0	; () banked
 13191  01261C  51CE               	movf	itos@Out& (0+255),w,b
 13192  01261E  0100               	movlb	0	; () banked
 13193  012620  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 13194  012622  A4D8               	btfss	status,2,c
 13195  012624  D034               	goto	l10031
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;Types.c: 375: {
 13199                           ;Types.c: 376: Data[0] = (UINT16)'0';
 13200  012626  C0CA  FFD9         	movff	itos@Data,fsr2l
 13201  01262A  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 13202  01262E  0E30               	movlw	48
 13203  012630  6EDF               	movwf	indf2,c
 13204                           
 13205                           ; BSR set to: 0
 13206                           ;Types.c: 377: Length = 1;
 13207  012632  0E00               	movlw	0
 13208  012634  0100               	movlb	0	; () banked
 13209  012636  6FCD               	movwf	(itos@Length+1)& (0+255),b
 13210  012638  0E01               	movlw	1
 13211  01263A  6FCC               	movwf	itos@Length& (0+255),b
 13212                           
 13213                           ;Types.c: 378: }
 13214  01263C  D040               	goto	l10037
 13215  01263E                     l10023:
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;Types.c: 382: {
 13219                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 13220  01263E  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 13221  012642  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 13222  012646  0E00               	movlw	0
 13223  012648  0100               	movlb	0	; () banked
 13224  01264A  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 13225  01264C  0E0A               	movlw	10
 13226  01264E  6FC3               	movwf	___lwmod@divisor& (0+255),b
 13227  012650  EC03  F09E         	call	___lwmod	;wreg free
 13228  012654  0100               	movlb	0	; () banked
 13229  012656  51C1               	movf	?___lwmod& (0+255),w,b
 13230  012658  0F30               	addlw	48
 13231  01265A  C0CA  FFD9         	movff	itos@Data,fsr2l
 13232  01265E  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 13233  012662  6EDF               	movwf	indf2,c
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;Types.c: 384: Out /= 10;
 13237  012664  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 13238  012668  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 13239  01266C  0E00               	movlw	0
 13240  01266E  0100               	movlb	0	; () banked
 13241  012670  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 13242  012672  0E0A               	movlw	10
 13243  012674  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 13244  012676  EC02  F09B         	call	___lwdiv	;wreg free
 13245  01267A  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 13246  01267E  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 13247                           
 13248                           ;Types.c: 385: Length ++;
 13249  012682  0100               	movlb	0	; () banked
 13250  012684  4BCC               	infsnz	itos@Length& (0+255),f,b
 13251  012686  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;Types.c: 386: Data++;
 13255  012688  0100               	movlb	0	; () banked
 13256  01268A  4BCA               	infsnz	itos@Data& (0+255),f,b
 13257  01268C  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 13258  01268E                     l10031:
 13259                           
 13260                           ; BSR set to: 0
 13261  01268E  0100               	movlb	0	; () banked
 13262  012690  51CE               	movf	itos@Out& (0+255),w,b
 13263  012692  0100               	movlb	0	; () banked
 13264  012694  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 13265  012696  B4D8               	btfsc	status,2,c
 13266  012698  D008               	goto	l10035
 13267                           
 13268                           ; BSR set to: 0
 13269  01269A  0100               	movlb	0	; () banked
 13270  01269C  51CD               	movf	(itos@Length+1)& (0+255),w,b
 13271  01269E  E105               	bnz	l10035
 13272  0126A0  0E06               	movlw	6
 13273  0126A2  0100               	movlb	0	; () banked
 13274  0126A4  5DCC               	subwf	itos@Length& (0+255),w,b
 13275  0126A6  A0D8               	btfss	status,0,c
 13276  0126A8  D7CA               	goto	l10023
 13277  0126AA                     l10035:
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;Types.c: 387: }
 13281                           ;Types.c: 388: reverse(destination, Length);
 13282  0126AA  C0C8  F0BA         	movff	itos@destination,reverse@input
 13283  0126AE  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 13284  0126B2  C0CC  F0BC         	movff	itos@Length,reverse@length
 13285  0126B6  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 13286  0126BA  EC98  F09C         	call	_reverse	;wreg free
 13287  0126BE                     l10037:
 13288                           
 13289                           ;Types.c: 389: }
 13290                           ;Types.c: 390: destination[Length] = '\0';
 13291  0126BE  0100               	movlb	0	; () banked
 13292  0126C0  51CC               	movf	itos@Length& (0+255),w,b
 13293  0126C2  0100               	movlb	0	; () banked
 13294  0126C4  25C8               	addwf	itos@destination& (0+255),w,b
 13295  0126C6  6ED9               	movwf	fsr2l,c
 13296  0126C8  0100               	movlb	0	; () banked
 13297  0126CA  51CD               	movf	(itos@Length+1)& (0+255),w,b
 13298  0126CC  0100               	movlb	0	; () banked
 13299  0126CE  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 13300  0126D0  6EDA               	movwf	fsr2h,c
 13301  0126D2  0E00               	movlw	0
 13302  0126D4  6EDF               	movwf	indf2,c
 13303                           
 13304                           ; BSR set to: 0
 13305  0126D6  0012               	return		;funcret
 13306  0126D8                     __end_of_itos:
 13307                           	opt stack 0
 13308                           tosu	equ	0xFFF
 13309                           tosh	equ	0xFFE
 13310                           tosl	equ	0xFFD
 13311                           pclath	equ	0xFFA
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           postinc0	equ	0xFEE
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           postdec1	equ	0xFE5
 13323                           fsr1h	equ	0xFE2
 13324                           fsr1l	equ	0xFE1
 13325                           indf2	equ	0xFDF
 13326                           postinc2	equ	0xFDE
 13327                           postdec2	equ	0xFDD
 13328                           plusw2	equ	0xFDB
 13329                           fsr2h	equ	0xFDA
 13330                           fsr2l	equ	0xFD9
 13331                           status	equ	0xFD8
 13332                           
 13333 ;; *************** function _reverse *****************
 13334 ;; Defined at:
 13335 ;;		line 357 in file "Library/Types.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  input           2    0[BANK0 ] PTR unsigned char 
 13338 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13339 ;;  length          2    2[BANK0 ] unsigned short 
 13340 ;; Auto vars:     Size  Location     Type
 13341 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 13342 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13343 ;;  tempVar         1    4[BANK0 ] unsigned char 
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  1    wreg      void 
 13346 ;; Registers used:
 13347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13348 ;; Tracked objects:
 13349 ;;		On entry : 0/0
 13350 ;;		On exit  : 0/0
 13351 ;;		Unchanged: 0/0
 13352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13354 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13356 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;Total ram usage:        7 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    7
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_itos
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           	psect	text72
 13368  013930                     __ptext72:
 13369                           	opt stack 0
 13370  013930                     _reverse:
 13371                           	opt stack 21
 13372                           
 13373                           ;Types.c: 359: char tempVar,
 13374                           ;Types.c: 360: *iterator = input + length;
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;incstack = 0
 13378  013930  0100               	movlb	0	; () banked
 13379  013932  51BC               	movf	reverse@length& (0+255),w,b
 13380  013934  0100               	movlb	0	; () banked
 13381  013936  25BA               	addwf	reverse@input& (0+255),w,b
 13382  013938  0100               	movlb	0	; () banked
 13383  01393A  6FBF               	movwf	reverse@iterator& (0+255),b
 13384  01393C  0100               	movlb	0	; () banked
 13385  01393E  51BD               	movf	(reverse@length+1)& (0+255),w,b
 13386  013940  0100               	movlb	0	; () banked
 13387  013942  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 13388  013944  0100               	movlb	0	; () banked
 13389  013946  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 13390                           
 13391                           ;Types.c: 362: while ( --iterator > input )
 13392  013948  D01A               	goto	l9849
 13393  01394A                     l9841:
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;Types.c: 363: {
 13397                           ;Types.c: 364: tempVar = *input;
 13398  01394A  C0BA  FFD9         	movff	reverse@input,fsr2l
 13399  01394E  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 13400  013952  50DF               	movf	indf2,w,c
 13401  013954  0100               	movlb	0	; () banked
 13402  013956  6FBE               	movwf	reverse@tempVar& (0+255),b
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;Types.c: 365: *input++=*iterator;
 13406  013958  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 13407  01395C  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 13408  013960  C0BA  FFE1         	movff	reverse@input,fsr1l
 13409  013964  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 13410  013968  CFDF FFE7          	movff	indf2,indf1
 13411                           
 13412                           ; BSR set to: 0
 13413  01396C  0100               	movlb	0	; () banked
 13414  01396E  4BBA               	infsnz	reverse@input& (0+255),f,b
 13415  013970  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;Types.c: 366: *iterator=tempVar;
 13419  013972  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 13420  013976  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 13421  01397A  C0BE  FFDF         	movff	reverse@tempVar,indf2
 13422  01397E                     l9849:
 13423                           
 13424                           ; BSR set to: 0
 13425  01397E  0100               	movlb	0	; () banked
 13426  013980  07BF               	decf	reverse@iterator& (0+255),f,b
 13427  013982  A0D8               	btfss	status,0,c
 13428  013984  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 13429  013986  0100               	movlb	0	; () banked
 13430  013988  51BF               	movf	reverse@iterator& (0+255),w,b
 13431  01398A  0100               	movlb	0	; () banked
 13432  01398C  5DBA               	subwf	reverse@input& (0+255),w,b
 13433  01398E  0100               	movlb	0	; () banked
 13434  013990  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 13435  013992  0100               	movlb	0	; () banked
 13436  013994  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 13437  013996  B0D8               	btfsc	status,0,c
 13438  013998  0012               	return	
 13439  01399A  D7D7               	goto	l9841
 13440  01399C                     __end_of_reverse:
 13441                           	opt stack 0
 13442                           tosu	equ	0xFFF
 13443                           tosh	equ	0xFFE
 13444                           tosl	equ	0xFFD
 13445                           pclath	equ	0xFFA
 13446                           tblptru	equ	0xFF8
 13447                           tblptrh	equ	0xFF7
 13448                           tblptrl	equ	0xFF6
 13449                           tablat	equ	0xFF5
 13450                           prodh	equ	0xFF4
 13451                           prodl	equ	0xFF3
 13452                           intcon	equ	0xFF2
 13453                           postinc0	equ	0xFEE
 13454                           wreg	equ	0xFE8
 13455                           indf1	equ	0xFE7
 13456                           postdec1	equ	0xFE5
 13457                           fsr1h	equ	0xFE2
 13458                           fsr1l	equ	0xFE1
 13459                           indf2	equ	0xFDF
 13460                           postinc2	equ	0xFDE
 13461                           postdec2	equ	0xFDD
 13462                           plusw2	equ	0xFDB
 13463                           fsr2h	equ	0xFDA
 13464                           fsr2l	equ	0xFD9
 13465                           status	equ	0xFD8
 13466                           
 13467 ;; *************** function ___lwmod *****************
 13468 ;; Defined at:
 13469 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 13470 ;; Parameters:    Size  Location     Type
 13471 ;;  dividend        2    7[BANK0 ] unsigned int 
 13472 ;;  divisor         2    9[BANK0 ] unsigned int 
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;  counter         1   11[BANK0 ] unsigned char 
 13475 ;; Return value:  Size  Location     Type
 13476 ;;                  2    7[BANK0 ] unsigned int 
 13477 ;; Registers used:
 13478 ;;		wreg, status,2, status,0
 13479 ;; Tracked objects:
 13480 ;;		On entry : 0/0
 13481 ;;		On exit  : 0/0
 13482 ;;		Unchanged: 0/0
 13483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13487 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13488 ;;Total ram usage:        5 bytes
 13489 ;; Hardware stack levels used:    1
 13490 ;; Hardware stack levels required when called:    7
 13491 ;; This function calls:
 13492 ;;		Nothing
 13493 ;; This function is called by:
 13494 ;;		_itos
 13495 ;;		_printf
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text73
 13500  013C06                     __ptext73:
 13501                           	opt stack 0
 13502  013C06                     ___lwmod:
 13503                           	opt stack 22
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;incstack = 0
 13507  013C06  0100               	movlb	0	; () banked
 13508  013C08  51C3               	movf	___lwmod@divisor& (0+255),w,b
 13509  013C0A  0100               	movlb	0	; () banked
 13510  013C0C  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13511  013C0E  B4D8               	btfsc	status,2,c
 13512  013C10  D026               	goto	l2460
 13513                           
 13514                           ; BSR set to: 0
 13515  013C12  0E01               	movlw	1
 13516  013C14  0100               	movlb	0	; () banked
 13517  013C16  6FC5               	movwf	___lwmod@counter& (0+255),b
 13518  013C18  D006               	goto	l9925
 13519  013C1A                     l9923:
 13520                           
 13521                           ; BSR set to: 0
 13522  013C1A  0100               	movlb	0	; () banked
 13523  013C1C  90D8               	bcf	status,0,c
 13524  013C1E  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 13525  013C20  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13526  013C22  0100               	movlb	0	; () banked
 13527  013C24  2BC5               	incf	___lwmod@counter& (0+255),f,b
 13528  013C26                     l9925:
 13529                           
 13530                           ; BSR set to: 0
 13531  013C26  0100               	movlb	0	; () banked
 13532  013C28  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13533  013C2A  D7F7               	goto	l9923
 13534  013C2C                     l9927:
 13535                           
 13536                           ; BSR set to: 0
 13537  013C2C  0100               	movlb	0	; () banked
 13538  013C2E  51C3               	movf	___lwmod@divisor& (0+255),w,b
 13539  013C30  0100               	movlb	0	; () banked
 13540  013C32  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 13541  013C34  0100               	movlb	0	; () banked
 13542  013C36  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13543  013C38  0100               	movlb	0	; () banked
 13544  013C3A  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13545  013C3C  A0D8               	btfss	status,0,c
 13546  013C3E  D008               	goto	l9931
 13547                           
 13548                           ; BSR set to: 0
 13549  013C40  0100               	movlb	0	; () banked
 13550  013C42  51C3               	movf	___lwmod@divisor& (0+255),w,b
 13551  013C44  0100               	movlb	0	; () banked
 13552  013C46  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 13553  013C48  0100               	movlb	0	; () banked
 13554  013C4A  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13555  013C4C  0100               	movlb	0	; () banked
 13556  013C4E  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13557  013C50                     l9931:
 13558                           
 13559                           ; BSR set to: 0
 13560  013C50  0100               	movlb	0	; () banked
 13561  013C52  90D8               	bcf	status,0,c
 13562  013C54  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13563  013C56  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 13564                           
 13565                           ; BSR set to: 0
 13566  013C58  0100               	movlb	0	; () banked
 13567  013C5A  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 13568  013C5C  D7E7               	goto	l9927
 13569  013C5E                     l2460:
 13570                           
 13571                           ; BSR set to: 0
 13572  013C5E  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 13573  013C62  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 13574                           
 13575                           ; BSR set to: 0
 13576  013C66  0012               	return		;funcret
 13577  013C68                     __end_of___lwmod:
 13578                           	opt stack 0
 13579                           tosu	equ	0xFFF
 13580                           tosh	equ	0xFFE
 13581                           tosl	equ	0xFFD
 13582                           pclath	equ	0xFFA
 13583                           tblptru	equ	0xFF8
 13584                           tblptrh	equ	0xFF7
 13585                           tblptrl	equ	0xFF6
 13586                           tablat	equ	0xFF5
 13587                           prodh	equ	0xFF4
 13588                           prodl	equ	0xFF3
 13589                           intcon	equ	0xFF2
 13590                           postinc0	equ	0xFEE
 13591                           wreg	equ	0xFE8
 13592                           indf1	equ	0xFE7
 13593                           postdec1	equ	0xFE5
 13594                           fsr1h	equ	0xFE2
 13595                           fsr1l	equ	0xFE1
 13596                           indf2	equ	0xFDF
 13597                           postinc2	equ	0xFDE
 13598                           postdec2	equ	0xFDD
 13599                           plusw2	equ	0xFDB
 13600                           fsr2h	equ	0xFDA
 13601                           fsr2l	equ	0xFD9
 13602                           status	equ	0xFD8
 13603                           
 13604 ;; *************** function ___lwdiv *****************
 13605 ;; Defined at:
 13606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;  dividend        2    0[BANK0 ] unsigned int 
 13609 ;;  divisor         2    2[BANK0 ] unsigned int 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;  quotient        2    5[BANK0 ] unsigned int 
 13612 ;;  counter         1    4[BANK0 ] unsigned char 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  2    0[BANK0 ] unsigned int 
 13615 ;; Registers used:
 13616 ;;		wreg, status,2, status,0
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13626 ;;Total ram usage:        7 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    7
 13629 ;; This function calls:
 13630 ;;		Nothing
 13631 ;; This function is called by:
 13632 ;;		_itos
 13633 ;;		_printf
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           	psect	text74
 13638  013604                     __ptext74:
 13639                           	opt stack 0
 13640  013604                     ___lwdiv:
 13641                           	opt stack 22
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;incstack = 0
 13645  013604  0E00               	movlw	0
 13646  013606  0100               	movlb	0	; () banked
 13647  013608  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13648  01360A  0E00               	movlw	0
 13649  01360C  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 13650                           
 13651                           ; BSR set to: 0
 13652  01360E  0100               	movlb	0	; () banked
 13653  013610  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 13654  013612  0100               	movlb	0	; () banked
 13655  013614  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13656  013616  B4D8               	btfsc	status,2,c
 13657  013618  D02C               	goto	l2450
 13658                           
 13659                           ; BSR set to: 0
 13660  01361A  0E01               	movlw	1
 13661  01361C  0100               	movlb	0	; () banked
 13662  01361E  6FBE               	movwf	___lwdiv@counter& (0+255),b
 13663  013620  D006               	goto	l9905
 13664  013622                     l9903:
 13665                           
 13666                           ; BSR set to: 0
 13667  013622  0100               	movlb	0	; () banked
 13668  013624  90D8               	bcf	status,0,c
 13669  013626  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 13670  013628  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13671  01362A  0100               	movlb	0	; () banked
 13672  01362C  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 13673  01362E                     l9905:
 13674                           
 13675                           ; BSR set to: 0
 13676  01362E  0100               	movlb	0	; () banked
 13677  013630  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13678  013632  D7F7               	goto	l9903
 13679  013634                     l9907:
 13680                           
 13681                           ; BSR set to: 0
 13682  013634  0100               	movlb	0	; () banked
 13683  013636  90D8               	bcf	status,0,c
 13684  013638  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 13685  01363A  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13686                           
 13687                           ; BSR set to: 0
 13688  01363C  0100               	movlb	0	; () banked
 13689  01363E  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 13690  013640  0100               	movlb	0	; () banked
 13691  013642  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 13692  013644  0100               	movlb	0	; () banked
 13693  013646  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13694  013648  0100               	movlb	0	; () banked
 13695  01364A  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13696  01364C  A0D8               	btfss	status,0,c
 13697  01364E  D00A               	goto	l9915
 13698                           
 13699                           ; BSR set to: 0
 13700  013650  0100               	movlb	0	; () banked
 13701  013652  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 13702  013654  0100               	movlb	0	; () banked
 13703  013656  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 13704  013658  0100               	movlb	0	; () banked
 13705  01365A  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13706  01365C  0100               	movlb	0	; () banked
 13707  01365E  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13708                           
 13709                           ; BSR set to: 0
 13710  013660  0100               	movlb	0	; () banked
 13711  013662  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 13712  013664                     l9915:
 13713                           
 13714                           ; BSR set to: 0
 13715  013664  0100               	movlb	0	; () banked
 13716  013666  90D8               	bcf	status,0,c
 13717  013668  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13718  01366A  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 13719                           
 13720                           ; BSR set to: 0
 13721  01366C  0100               	movlb	0	; () banked
 13722  01366E  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 13723  013670  D7E1               	goto	l9907
 13724  013672                     l2450:
 13725                           
 13726                           ; BSR set to: 0
 13727  013672  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 13728  013676  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13729                           
 13730                           ; BSR set to: 0
 13731  01367A  0012               	return		;funcret
 13732  01367C                     __end_of___lwdiv:
 13733                           	opt stack 0
 13734                           tosu	equ	0xFFF
 13735                           tosh	equ	0xFFE
 13736                           tosl	equ	0xFFD
 13737                           pclath	equ	0xFFA
 13738                           tblptru	equ	0xFF8
 13739                           tblptrh	equ	0xFF7
 13740                           tblptrl	equ	0xFF6
 13741                           tablat	equ	0xFF5
 13742                           prodh	equ	0xFF4
 13743                           prodl	equ	0xFF3
 13744                           intcon	equ	0xFF2
 13745                           postinc0	equ	0xFEE
 13746                           wreg	equ	0xFE8
 13747                           indf1	equ	0xFE7
 13748                           postdec1	equ	0xFE5
 13749                           fsr1h	equ	0xFE2
 13750                           fsr1l	equ	0xFE1
 13751                           indf2	equ	0xFDF
 13752                           postinc2	equ	0xFDE
 13753                           postdec2	equ	0xFDD
 13754                           plusw2	equ	0xFDB
 13755                           fsr2h	equ	0xFDA
 13756                           fsr2l	equ	0xFD9
 13757                           status	equ	0xFD8
 13758                           
 13759 ;; *************** function _HMI_SetSegments *****************
 13760 ;; Defined at:
 13761 ;;		line 226 in file "HMI.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 13764 ;;		 -> STR_1(7), HMIBoard..(8), HMIBoard(58), 
 13765 ;; Auto vars:     Size  Location     Type
 13766 ;;  in              2    4[BANK0 ] unsigned short 
 13767 ;; Return value:  Size  Location     Type
 13768 ;;                  1    wreg      void 
 13769 ;; Registers used:
 13770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13771 ;; Tracked objects:
 13772 ;;		On entry : 0/0
 13773 ;;		On exit  : 0/0
 13774 ;;		Unchanged: 0/0
 13775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13780 ;;Total ram usage:        5 bytes
 13781 ;; Hardware stack levels used:    1
 13782 ;; Hardware stack levels required when called:    8
 13783 ;; This function calls:
 13784 ;;		_ToSegment
 13785 ;; This function is called by:
 13786 ;;		_HMI_SetNumber
 13787 ;;		_main
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           	psect	text75
 13792  012514                     __ptext75:
 13793                           	opt stack 0
 13794  012514                     _HMI_SetSegments:
 13795                           	opt stack 22
 13796                           
 13797                           ;HMI.c: 228: UINT16 in=0;
 13798                           
 13799                           ; BSR set to: 0
 13800                           ;incstack = 0
 13801  012514  0E00               	movlw	0
 13802  012516  0100               	movlb	0	; () banked
 13803  012518  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 13804  01251A  0E00               	movlw	0
 13805  01251C  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 13806                           
 13807                           ;HMI.c: 229: while(*pString)
 13808  01251E  D044               	goto	l10081
 13809  012520                     l10065:
 13810                           
 13811                           ;HMI.c: 230: {
 13812                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 13813  012520  0E2A               	movlw	low _HMIBoard
 13814  012522  0100               	movlb	0	; () banked
 13815  012524  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 13816  012526  6ED9               	movwf	fsr2l,c
 13817  012528  0E01               	movlw	high _HMIBoard
 13818  01252A  0100               	movlb	0	; () banked
 13819  01252C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13820  01252E  6EDA               	movwf	fsr2h,c
 13821  012530  C0BB  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 13822  012534  C0BC  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 13823  012538  0E00               	movlw	low (__mediumconst shr (0+16))
 13824  01253A  6EF8               	movwf	tblptru,c
 13825  01253C  0E0F               	movlw	(high __ramtop+-1)
 13826  01253E  64F7               	cpfsgt	tblptrh,c
 13827  012540  D003               	bra	u6617
 13828  012542  0008               	tblrd		*
 13829  012544  50F5               	movf	tablat,w,c
 13830  012546  D005               	bra	u6610
 13831  012548                     u6617:
 13832  012548  CFF6 FFE9          	movff	tblptrl,fsr0l
 13833  01254C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13834  012550  50EF               	movf	indf0,w,c
 13835  012552                     u6610:
 13836  012552  ECEC  F083         	call	_ToSegment
 13837  012556  6EDF               	movwf	indf2,c
 13838                           
 13839                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 13840  012558  0E2A               	movlw	low _HMIBoard
 13841  01255A  0100               	movlb	0	; () banked
 13842  01255C  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 13843  01255E  6ED9               	movwf	fsr2l,c
 13844  012560  0E01               	movlw	high _HMIBoard
 13845  012562  0100               	movlb	0	; () banked
 13846  012564  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13847  012566  6EDA               	movwf	fsr2h,c
 13848  012568  0E80               	movlw	128
 13849  01256A  18DE               	xorwf	postinc2,w,c
 13850  01256C  A4D8               	btfss	status,2,c
 13851  01256E  D00E               	goto	l10073
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;HMI.c: 234: {
 13855                           ;HMI.c: 235: in--;
 13856  012570  0100               	movlb	0	; () banked
 13857  012572  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 13858  012574  A0D8               	btfss	status,0,c
 13859  012576  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 13863  012578  0E2A               	movlw	low _HMIBoard
 13864  01257A  0100               	movlb	0	; () banked
 13865  01257C  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 13866  01257E  6ED9               	movwf	fsr2l,c
 13867  012580  0E01               	movlw	high _HMIBoard
 13868  012582  0100               	movlb	0	; () banked
 13869  012584  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13870  012586  6EDA               	movwf	fsr2h,c
 13871  012588  0E00               	movlw	0
 13872  01258A  8EDB               	bsf	plusw2,7,c
 13873  01258C                     l10073:
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;HMI.c: 237: }
 13877                           ;HMI.c: 239: pString++;
 13878  01258C  0100               	movlb	0	; () banked
 13879  01258E  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 13880  012590  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;HMI.c: 240: in++;
 13884  012592  0100               	movlb	0	; () banked
 13885  012594  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 13886  012596  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;HMI.c: 241: if (in>=6)
 13890  012598  0100               	movlb	0	; () banked
 13891  01259A  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 13892  01259C  E127               	bnz	l10087
 13893  01259E  0E06               	movlw	6
 13894  0125A0  0100               	movlb	0	; () banked
 13895  0125A2  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 13896  0125A4  B0D8               	btfsc	status,0,c
 13897  0125A6  D022               	goto	l10087
 13898  0125A8                     l10081:
 13899                           
 13900                           ; BSR set to: 0
 13901  0125A8  C0BB  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 13902  0125AC  C0BC  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 13903  0125B0  0E00               	movlw	low (__mediumconst shr (0+16))
 13904  0125B2  6EF8               	movwf	tblptru,c
 13905  0125B4  0E0F               	movlw	(high __ramtop+-1)
 13906  0125B6  64F7               	cpfsgt	tblptrh,c
 13907  0125B8  D003               	bra	u6647
 13908  0125BA  0008               	tblrd		*
 13909  0125BC  50F5               	movf	tablat,w,c
 13910  0125BE  D005               	bra	u6640
 13911  0125C0                     u6647:
 13912  0125C0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13913  0125C4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13914  0125C8  50EF               	movf	indf0,w,c
 13915  0125CA                     u6640:
 13916  0125CA  0900               	iorlw	0
 13917  0125CC  B4D8               	btfsc	status,2,c
 13918  0125CE  D00E               	goto	l10087
 13919  0125D0  D7A7               	goto	l10065
 13920  0125D2                     l10083:
 13921                           
 13922                           ;HMI.c: 245: {
 13923                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 13924  0125D2  0E2A               	movlw	low _HMIBoard
 13925  0125D4  0100               	movlb	0	; () banked
 13926  0125D6  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 13927  0125D8  6ED9               	movwf	fsr2l,c
 13928  0125DA  0E01               	movlw	high _HMIBoard
 13929  0125DC  0100               	movlb	0	; () banked
 13930  0125DE  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13931  0125E0  6EDA               	movwf	fsr2h,c
 13932  0125E2  0E00               	movlw	0
 13933  0125E4  6EDF               	movwf	indf2,c
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;HMI.c: 247: in++;
 13937  0125E6  0100               	movlb	0	; () banked
 13938  0125E8  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 13939  0125EA  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 13940  0125EC                     l10087:
 13941  0125EC  0100               	movlb	0	; () banked
 13942  0125EE  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 13943  0125F0  E106               	bnz	l1215
 13944  0125F2  0E06               	movlw	6
 13945  0125F4  0100               	movlb	0	; () banked
 13946  0125F6  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 13947  0125F8  B0D8               	btfsc	status,0,c
 13948  0125FA  0012               	return	
 13949  0125FC  D7EA               	goto	l10083
 13950  0125FE                     l1215:
 13951                           
 13952                           ; BSR set to: 0
 13953  0125FE  0012               	return		;funcret
 13954  012600                     __end_of_HMI_SetSegments:
 13955                           	opt stack 0
 13956                           tosu	equ	0xFFF
 13957                           tosh	equ	0xFFE
 13958                           tosl	equ	0xFFD
 13959                           pclath	equ	0xFFA
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           indf0	equ	0xFEF
 13968                           postinc0	equ	0xFEE
 13969                           fsr0h	equ	0xFEA
 13970                           fsr0l	equ	0xFE9
 13971                           wreg	equ	0xFE8
 13972                           indf1	equ	0xFE7
 13973                           postdec1	equ	0xFE5
 13974                           fsr1h	equ	0xFE2
 13975                           fsr1l	equ	0xFE1
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           plusw2	equ	0xFDB
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function _ToSegment *****************
 13985 ;; Defined at:
 13986 ;;		line 284 in file "Library/Types.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  pCHR            1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  pCHR            1    0[BANK0 ] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      unsigned char 
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14004 ;;Total ram usage:        1 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    7
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_HMI_SetSegments
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text76
 14015  0107D8                     __ptext76:
 14016                           	opt stack 0
 14017  0107D8                     _ToSegment:
 14018                           	opt stack 22
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;incstack = 0
 14022                           ;ToSegment@pCHR stored from wreg
 14023  0107D8  0100               	movlb	0	; () banked
 14024  0107DA  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 14025                           
 14026                           ;Types.c: 286: switch(pCHR)
 14027  0107DC  D07E               	goto	l9833
 14028  0107DE                     l9579:
 14029  0107DE  0E3F               	movlw	63
 14030  0107E0  0012               	return	
 14031  0107E2                     l9583:
 14032  0107E2  0E06               	movlw	6
 14033  0107E4  0012               	return	
 14034  0107E6                     l9587:
 14035  0107E6  0E5B               	movlw	91
 14036  0107E8  0012               	return	
 14037  0107EA                     l9591:
 14038  0107EA  0E4F               	movlw	79
 14039  0107EC  0012               	return	
 14040  0107EE                     l9595:
 14041  0107EE  0E66               	movlw	102
 14042  0107F0  0012               	return	
 14043  0107F2                     l9599:
 14044  0107F2  0E6D               	movlw	109
 14045  0107F4  0012               	return	
 14046  0107F6                     l9603:
 14047  0107F6  0E7D               	movlw	125
 14048  0107F8  0012               	return	
 14049  0107FA                     l9607:
 14050  0107FA  0E07               	movlw	7
 14051  0107FC  0012               	return	
 14052  0107FE                     l9611:
 14053  0107FE  0E7F               	movlw	127
 14054  010800  0012               	return	
 14055  010802                     l9615:
 14056  010802  0E6F               	movlw	111
 14057  010804  0012               	return	
 14058  010806                     l9619:
 14059  010806  0E5F               	movlw	95
 14060  010808  0012               	return	
 14061  01080A                     l9623:
 14062  01080A  0E7C               	movlw	124
 14063  01080C  0012               	return	
 14064  01080E                     l9627:
 14065  01080E  0E58               	movlw	88
 14066  010810  0012               	return	
 14067  010812                     l9631:
 14068  010812  0E5E               	movlw	94
 14069  010814  0012               	return	
 14070  010816                     l9635:
 14071  010816  0E7B               	movlw	123
 14072  010818  0012               	return	
 14073  01081A                     l9639:
 14074  01081A  0E71               	movlw	113
 14075  01081C  0012               	return	
 14076  01081E                     l9643:
 14077  01081E  0E6F               	movlw	111
 14078  010820  0012               	return	
 14079  010822                     l9647:
 14080  010822  0E74               	movlw	116
 14081  010824  0012               	return	
 14082  010826                     l9651:
 14083  010826  0E04               	movlw	4
 14084  010828  0012               	return	
 14085  01082A                     l9655:
 14086  01082A  0E0E               	movlw	14
 14087  01082C  0012               	return	
 14088  01082E                     l9659:
 14089  01082E  0E7A               	movlw	122
 14090  010830  0012               	return	
 14091  010832                     l9663:
 14092  010832  0E06               	movlw	6
 14093  010834  0012               	return	
 14094  010836                     l9667:
 14095  010836  0E14               	movlw	20
 14096  010838  0012               	return	
 14097  01083A                     l9671:
 14098  01083A  0E54               	movlw	84
 14099  01083C  0012               	return	
 14100  01083E                     l9675:
 14101  01083E  0E5C               	movlw	92
 14102  010840  0012               	return	
 14103  010842                     l9679:
 14104  010842  0E73               	movlw	115
 14105  010844  0012               	return	
 14106  010846                     l9683:
 14107  010846  0E67               	movlw	103
 14108  010848  0012               	return	
 14109  01084A                     l9687:
 14110  01084A  0E50               	movlw	80
 14111  01084C  0012               	return	
 14112  01084E                     l9691:
 14113  01084E  0E6D               	movlw	109
 14114  010850  0012               	return	
 14115  010852                     l9695:
 14116  010852  0E78               	movlw	120
 14117  010854  0012               	return	
 14118  010856                     l9699:
 14119  010856  0E1C               	movlw	28
 14120  010858  0012               	return	
 14121  01085A                     l9703:
 14122  01085A  0E62               	movlw	98
 14123  01085C  0012               	return	
 14124  01085E                     l9707:
 14125  01085E  0E2A               	movlw	42
 14126  010860  0012               	return	
 14127  010862                     l9711:
 14128  010862  0E64               	movlw	100
 14129  010864  0012               	return	
 14130  010866                     l9715:
 14131  010866  0E6E               	movlw	110
 14132  010868  0012               	return	
 14133  01086A                     l9719:
 14134  01086A  0E5B               	movlw	91
 14135  01086C  0012               	return	
 14136  01086E                     l9723:
 14137  01086E  0E77               	movlw	119
 14138  010870  0012               	return	
 14139  010872                     l9727:
 14140  010872  0E7F               	movlw	127
 14141  010874  0012               	return	
 14142  010876                     l9731:
 14143  010876  0E39               	movlw	57
 14144  010878  0012               	return	
 14145  01087A                     l9735:
 14146  01087A  0E3F               	movlw	63
 14147  01087C  0012               	return	
 14148  01087E                     l9739:
 14149  01087E  0E79               	movlw	121
 14150  010880  0012               	return	
 14151  010882                     l9743:
 14152  010882  0E71               	movlw	113
 14153  010884  0012               	return	
 14154  010886                     l9747:
 14155  010886  0E3D               	movlw	61
 14156  010888  0012               	return	
 14157  01088A                     l9751:
 14158  01088A  0E76               	movlw	118
 14159  01088C  0012               	return	
 14160  01088E                     l9755:
 14161  01088E  0E06               	movlw	6
 14162  010890  0012               	return	
 14163  010892                     l9759:
 14164  010892  0E1E               	movlw	30
 14165  010894  0012               	return	
 14166  010896                     l9763:
 14167  010896  0E57               	movlw	87
 14168  010898  0012               	return	
 14169  01089A                     l9767:
 14170  01089A  0E38               	movlw	56
 14171  01089C  0012               	return	
 14172  01089E                     l9771:
 14173  01089E  0E76               	movlw	118
 14174  0108A0  0012               	return	
 14175  0108A2                     l9775:
 14176  0108A2  0E76               	movlw	118
 14177  0108A4  0012               	return	
 14178  0108A6                     l9779:
 14179  0108A6  0E3F               	movlw	63
 14180  0108A8  0012               	return	
 14181  0108AA                     l9783:
 14182  0108AA  0E73               	movlw	115
 14183  0108AC  0012               	return	
 14184  0108AE                     l9787:
 14185  0108AE  0E3F               	movlw	63
 14186  0108B0  0012               	return	
 14187  0108B2                     l9791:
 14188  0108B2  0E77               	movlw	119
 14189  0108B4  0012               	return	
 14190  0108B6                     l9795:
 14191  0108B6  0E6D               	movlw	109
 14192  0108B8  0012               	return	
 14193  0108BA                     l9799:
 14194  0108BA  0E31               	movlw	49
 14195  0108BC  0012               	return	
 14196  0108BE                     l9803:
 14197  0108BE  0E3E               	movlw	62
 14198  0108C0  0012               	return	
 14199  0108C2                     l9807:
 14200  0108C2  0E3E               	movlw	62
 14201  0108C4  0012               	return	
 14202  0108C6                     l9811:
 14203  0108C6  0E7E               	movlw	126
 14204  0108C8  0012               	return	
 14205  0108CA                     l9815:
 14206  0108CA  0E76               	movlw	118
 14207  0108CC  0012               	return	
 14208  0108CE                     l9819:
 14209  0108CE  0E66               	movlw	102
 14210  0108D0  0012               	return	
 14211  0108D2                     l9823:
 14212  0108D2  0E5B               	movlw	91
 14213  0108D4  0012               	return	
 14214  0108D6                     l9827:
 14215  0108D6  0E80               	movlw	128
 14216  0108D8  0012               	return	
 14217  0108DA                     l9833:
 14218  0108DA  0100               	movlb	0	; () banked
 14219  0108DC  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 14220                           
 14221                           ; Switch size 1, requested type "space"
 14222                           ; Number of cases is 63, Range of values is 46 to 122
 14223                           ; switch strategies available:
 14224                           ; Name         Instructions Cycles
 14225                           ; simple_byte          190    96 (average)
 14226                           ;	Chosen strategy is simple_byte
 14227  0108DE  0A2E               	xorlw	46	; case 46
 14228  0108E0  B4D8               	btfsc	status,2,c
 14229  0108E2  D7F9               	goto	l9827
 14230  0108E4  0A1E               	xorlw	30	; case 48
 14231  0108E6  B4D8               	btfsc	status,2,c
 14232  0108E8  D77A               	goto	l9579
 14233  0108EA  0A01               	xorlw	1	; case 49
 14234  0108EC  B4D8               	btfsc	status,2,c
 14235  0108EE  D779               	goto	l9583
 14236  0108F0  0A03               	xorlw	3	; case 50
 14237  0108F2  B4D8               	btfsc	status,2,c
 14238  0108F4  D778               	goto	l9587
 14239  0108F6  0A01               	xorlw	1	; case 51
 14240  0108F8  B4D8               	btfsc	status,2,c
 14241  0108FA  D777               	goto	l9591
 14242  0108FC  0A07               	xorlw	7	; case 52
 14243  0108FE  B4D8               	btfsc	status,2,c
 14244  010900  D776               	goto	l9595
 14245  010902  0A01               	xorlw	1	; case 53
 14246  010904  B4D8               	btfsc	status,2,c
 14247  010906  D775               	goto	l9599
 14248  010908  0A03               	xorlw	3	; case 54
 14249  01090A  B4D8               	btfsc	status,2,c
 14250  01090C  D774               	goto	l9603
 14251  01090E  0A01               	xorlw	1	; case 55
 14252  010910  B4D8               	btfsc	status,2,c
 14253  010912  D773               	goto	l9607
 14254  010914  0A0F               	xorlw	15	; case 56
 14255  010916  B4D8               	btfsc	status,2,c
 14256  010918  D772               	goto	l9611
 14257  01091A  0A01               	xorlw	1	; case 57
 14258  01091C  B4D8               	btfsc	status,2,c
 14259  01091E  D771               	goto	l9615
 14260  010920  0A78               	xorlw	120	; case 65
 14261  010922  B4D8               	btfsc	status,2,c
 14262  010924  D7A4               	goto	l9723
 14263  010926  0A03               	xorlw	3	; case 66
 14264  010928  B4D8               	btfsc	status,2,c
 14265  01092A  D7A3               	goto	l9727
 14266  01092C  0A01               	xorlw	1	; case 67
 14267  01092E  B4D8               	btfsc	status,2,c
 14268  010930  D7A2               	goto	l9731
 14269  010932  0A07               	xorlw	7	; case 68
 14270  010934  B4D8               	btfsc	status,2,c
 14271  010936  D7A1               	goto	l9735
 14272  010938  0A01               	xorlw	1	; case 69
 14273  01093A  B4D8               	btfsc	status,2,c
 14274  01093C  D7A0               	goto	l9739
 14275  01093E  0A03               	xorlw	3	; case 70
 14276  010940  B4D8               	btfsc	status,2,c
 14277  010942  D79F               	goto	l9743
 14278  010944  0A01               	xorlw	1	; case 71
 14279  010946  B4D8               	btfsc	status,2,c
 14280  010948  D79E               	goto	l9747
 14281  01094A  0A0F               	xorlw	15	; case 72
 14282  01094C  B4D8               	btfsc	status,2,c
 14283  01094E  D79D               	goto	l9751
 14284  010950  0A01               	xorlw	1	; case 73
 14285  010952  B4D8               	btfsc	status,2,c
 14286  010954  D79C               	goto	l9755
 14287  010956  0A03               	xorlw	3	; case 74
 14288  010958  B4D8               	btfsc	status,2,c
 14289  01095A  D79B               	goto	l9759
 14290  01095C  0A01               	xorlw	1	; case 75
 14291  01095E  B4D8               	btfsc	status,2,c
 14292  010960  D79A               	goto	l9763
 14293  010962  0A07               	xorlw	7	; case 76
 14294  010964  B4D8               	btfsc	status,2,c
 14295  010966  D799               	goto	l9767
 14296  010968  0A01               	xorlw	1	; case 77
 14297  01096A  B4D8               	btfsc	status,2,c
 14298  01096C  D798               	goto	l9771
 14299  01096E  0A03               	xorlw	3	; case 78
 14300  010970  B4D8               	btfsc	status,2,c
 14301  010972  D797               	goto	l9775
 14302  010974  0A01               	xorlw	1	; case 79
 14303  010976  B4D8               	btfsc	status,2,c
 14304  010978  D796               	goto	l9779
 14305  01097A  0A1F               	xorlw	31	; case 80
 14306  01097C  B4D8               	btfsc	status,2,c
 14307  01097E  D795               	goto	l9783
 14308  010980  0A01               	xorlw	1	; case 81
 14309  010982  B4D8               	btfsc	status,2,c
 14310  010984  D794               	goto	l9787
 14311  010986  0A03               	xorlw	3	; case 82
 14312  010988  B4D8               	btfsc	status,2,c
 14313  01098A  D793               	goto	l9791
 14314  01098C  0A01               	xorlw	1	; case 83
 14315  01098E  B4D8               	btfsc	status,2,c
 14316  010990  D792               	goto	l9795
 14317  010992  0A07               	xorlw	7	; case 84
 14318  010994  B4D8               	btfsc	status,2,c
 14319  010996  D791               	goto	l9799
 14320  010998  0A01               	xorlw	1	; case 85
 14321  01099A  B4D8               	btfsc	status,2,c
 14322  01099C  D790               	goto	l9803
 14323  01099E  0A03               	xorlw	3	; case 86
 14324  0109A0  B4D8               	btfsc	status,2,c
 14325  0109A2  D78F               	goto	l9807
 14326  0109A4  0A01               	xorlw	1	; case 87
 14327  0109A6  B4D8               	btfsc	status,2,c
 14328  0109A8  D78E               	goto	l9811
 14329  0109AA  0A0F               	xorlw	15	; case 88
 14330  0109AC  B4D8               	btfsc	status,2,c
 14331  0109AE  D78D               	goto	l9815
 14332  0109B0  0A01               	xorlw	1	; case 89
 14333  0109B2  B4D8               	btfsc	status,2,c
 14334  0109B4  D78C               	goto	l9819
 14335  0109B6  0A03               	xorlw	3	; case 90
 14336  0109B8  B4D8               	btfsc	status,2,c
 14337  0109BA  D78B               	goto	l9823
 14338  0109BC  0A3B               	xorlw	59	; case 97
 14339  0109BE  B4D8               	btfsc	status,2,c
 14340  0109C0  D722               	goto	l9619
 14341  0109C2  0A03               	xorlw	3	; case 98
 14342  0109C4  B4D8               	btfsc	status,2,c
 14343  0109C6  D721               	goto	l9623
 14344  0109C8  0A01               	xorlw	1	; case 99
 14345  0109CA  B4D8               	btfsc	status,2,c
 14346  0109CC  D720               	goto	l9627
 14347  0109CE  0A07               	xorlw	7	; case 100
 14348  0109D0  B4D8               	btfsc	status,2,c
 14349  0109D2  D71F               	goto	l9631
 14350  0109D4  0A01               	xorlw	1	; case 101
 14351  0109D6  B4D8               	btfsc	status,2,c
 14352  0109D8  D71E               	goto	l9635
 14353  0109DA  0A03               	xorlw	3	; case 102
 14354  0109DC  B4D8               	btfsc	status,2,c
 14355  0109DE  D71D               	goto	l9639
 14356  0109E0  0A01               	xorlw	1	; case 103
 14357  0109E2  B4D8               	btfsc	status,2,c
 14358  0109E4  D71C               	goto	l9643
 14359  0109E6  0A0F               	xorlw	15	; case 104
 14360  0109E8  B4D8               	btfsc	status,2,c
 14361  0109EA  D71B               	goto	l9647
 14362  0109EC  0A01               	xorlw	1	; case 105
 14363  0109EE  B4D8               	btfsc	status,2,c
 14364  0109F0  D71A               	goto	l9651
 14365  0109F2  0A03               	xorlw	3	; case 106
 14366  0109F4  B4D8               	btfsc	status,2,c
 14367  0109F6  D719               	goto	l9655
 14368  0109F8  0A01               	xorlw	1	; case 107
 14369  0109FA  B4D8               	btfsc	status,2,c
 14370  0109FC  D718               	goto	l9659
 14371  0109FE  0A07               	xorlw	7	; case 108
 14372  010A00  B4D8               	btfsc	status,2,c
 14373  010A02  D717               	goto	l9663
 14374  010A04  0A01               	xorlw	1	; case 109
 14375  010A06  B4D8               	btfsc	status,2,c
 14376  010A08  D716               	goto	l9667
 14377  010A0A  0A03               	xorlw	3	; case 110
 14378  010A0C  B4D8               	btfsc	status,2,c
 14379  010A0E  D715               	goto	l9671
 14380  010A10  0A01               	xorlw	1	; case 111
 14381  010A12  B4D8               	btfsc	status,2,c
 14382  010A14  D714               	goto	l9675
 14383  010A16  0A1F               	xorlw	31	; case 112
 14384  010A18  B4D8               	btfsc	status,2,c
 14385  010A1A  D713               	goto	l9679
 14386  010A1C  0A01               	xorlw	1	; case 113
 14387  010A1E  B4D8               	btfsc	status,2,c
 14388  010A20  D712               	goto	l9683
 14389  010A22  0A03               	xorlw	3	; case 114
 14390  010A24  B4D8               	btfsc	status,2,c
 14391  010A26  D711               	goto	l9687
 14392  010A28  0A01               	xorlw	1	; case 115
 14393  010A2A  B4D8               	btfsc	status,2,c
 14394  010A2C  D710               	goto	l9691
 14395  010A2E  0A07               	xorlw	7	; case 116
 14396  010A30  B4D8               	btfsc	status,2,c
 14397  010A32  D70F               	goto	l9695
 14398  010A34  0A01               	xorlw	1	; case 117
 14399  010A36  B4D8               	btfsc	status,2,c
 14400  010A38  D70E               	goto	l9699
 14401  010A3A  0A03               	xorlw	3	; case 118
 14402  010A3C  B4D8               	btfsc	status,2,c
 14403  010A3E  D70D               	goto	l9703
 14404  010A40  0A01               	xorlw	1	; case 119
 14405  010A42  B4D8               	btfsc	status,2,c
 14406  010A44  D70C               	goto	l9707
 14407  010A46  0A0F               	xorlw	15	; case 120
 14408  010A48  B4D8               	btfsc	status,2,c
 14409  010A4A  D70B               	goto	l9711
 14410  010A4C  0A01               	xorlw	1	; case 121
 14411  010A4E  B4D8               	btfsc	status,2,c
 14412  010A50  D70A               	goto	l9715
 14413  010A52  0A03               	xorlw	3	; case 122
 14414  010A54  B4D8               	btfsc	status,2,c
 14415  010A56  D709               	goto	l9719
 14416                           
 14417                           ;Types.c: 354: return 0;
 14418                           
 14419                           ; BSR set to: 0
 14420  010A58  0E00               	movlw	0
 14421  010A5A  0012               	return	
 14422  010A5C                     __end_of_ToSegment:
 14423                           	opt stack 0
 14424                           tosu	equ	0xFFF
 14425                           tosh	equ	0xFFE
 14426                           tosl	equ	0xFFD
 14427                           pclath	equ	0xFFA
 14428                           tblptru	equ	0xFF8
 14429                           tblptrh	equ	0xFF7
 14430                           tblptrl	equ	0xFF6
 14431                           tablat	equ	0xFF5
 14432                           prodh	equ	0xFF4
 14433                           prodl	equ	0xFF3
 14434                           intcon	equ	0xFF2
 14435                           indf0	equ	0xFEF
 14436                           postinc0	equ	0xFEE
 14437                           fsr0h	equ	0xFEA
 14438                           fsr0l	equ	0xFE9
 14439                           wreg	equ	0xFE8
 14440                           indf1	equ	0xFE7
 14441                           postdec1	equ	0xFE5
 14442                           fsr1h	equ	0xFE2
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           plusw2	equ	0xFDB
 14448                           fsr2h	equ	0xFDA
 14449                           fsr2l	equ	0xFD9
 14450                           status	equ	0xFD8
 14451                           
 14452 ;; *************** function _HMI_SetDown *****************
 14453 ;; Defined at:
 14454 ;;		line 180 in file "HMI.c"
 14455 ;; Parameters:    Size  Location     Type
 14456 ;;  pValue          1    wreg     unsigned char 
 14457 ;; Auto vars:     Size  Location     Type
 14458 ;;  pValue          1    0[BANK0 ] unsigned char 
 14459 ;; Return value:  Size  Location     Type
 14460 ;;                  1    wreg      void 
 14461 ;; Registers used:
 14462 ;;		wreg
 14463 ;; Tracked objects:
 14464 ;;		On entry : 0/0
 14465 ;;		On exit  : 0/0
 14466 ;;		Unchanged: 0/0
 14467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;Total ram usage:        1 bytes
 14473 ;; Hardware stack levels used:    1
 14474 ;; Hardware stack levels required when called:    7
 14475 ;; This function calls:
 14476 ;;		Nothing
 14477 ;; This function is called by:
 14478 ;;		_Event_HMI_DownButton
 14479 ;; This function uses a non-reentrant model
 14480 ;;
 14481                           
 14482                           	psect	text77
 14483  0147CE                     __ptext77:
 14484                           	opt stack 0
 14485  0147CE                     _HMI_SetDown:
 14486                           	opt stack 20
 14487                           
 14488                           ;incstack = 0
 14489                           ;HMI_SetDown@pValue stored from wreg
 14490  0147CE  0100               	movlb	0	; () banked
 14491  0147D0  6FBA               	movwf	HMI_SetDown@pValue& (0+255),b
 14492                           
 14493                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
 14494  0147D2  0100               	movlb	0	; () banked
 14495  0147D4  B1BA               	btfsc	HMI_SetDown@pValue& (0+255),0,b
 14496  0147D6  D003               	bra	u7005
 14497  0147D8  0101               	movlb	1	; () banked
 14498  0147DA  9330               	bcf	(_HMIBoard+6)& (0+255),1,b
 14499  0147DC  D002               	bra	u7006
 14500  0147DE                     u7005:
 14501  0147DE  0101               	movlb	1	; () banked
 14502  0147E0  8330               	bsf	(_HMIBoard+6)& (0+255),1,b
 14503  0147E2                     u7006:
 14504                           
 14505                           ; BSR set to: 1
 14506  0147E2  0012               	return		;funcret
 14507  0147E4                     __end_of_HMI_SetDown:
 14508                           	opt stack 0
 14509                           tosu	equ	0xFFF
 14510                           tosh	equ	0xFFE
 14511                           tosl	equ	0xFFD
 14512                           pclath	equ	0xFFA
 14513                           tblptru	equ	0xFF8
 14514                           tblptrh	equ	0xFF7
 14515                           tblptrl	equ	0xFF6
 14516                           tablat	equ	0xFF5
 14517                           prodh	equ	0xFF4
 14518                           prodl	equ	0xFF3
 14519                           intcon	equ	0xFF2
 14520                           indf0	equ	0xFEF
 14521                           postinc0	equ	0xFEE
 14522                           fsr0h	equ	0xFEA
 14523                           fsr0l	equ	0xFE9
 14524                           wreg	equ	0xFE8
 14525                           indf1	equ	0xFE7
 14526                           postdec1	equ	0xFE5
 14527                           fsr1h	equ	0xFE2
 14528                           fsr1l	equ	0xFE1
 14529                           indf2	equ	0xFDF
 14530                           postinc2	equ	0xFDE
 14531                           postdec2	equ	0xFDD
 14532                           plusw2	equ	0xFDB
 14533                           fsr2h	equ	0xFDA
 14534                           fsr2l	equ	0xFD9
 14535                           status	equ	0xFD8
 14536                           
 14537 ;; *************** function _LED_Toggle *****************
 14538 ;; Defined at:
 14539 ;;		line 50 in file "Library/LED.c"
 14540 ;; Parameters:    Size  Location     Type
 14541 ;;  pLED            1    wreg     enum E7683
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;  pLED            1   24[BANK0 ] enum E7683
 14544 ;; Return value:  Size  Location     Type
 14545 ;;                  1    wreg      void 
 14546 ;; Registers used:
 14547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14548 ;; Tracked objects:
 14549 ;;		On entry : 0/0
 14550 ;;		On exit  : 0/0
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;Total ram usage:        1 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; Hardware stack levels required when called:   12
 14560 ;; This function calls:
 14561 ;;		_Port_TogglePin
 14562 ;; This function is called by:
 14563 ;;		_LCD_Reset
 14564 ;;		_Event_DIPSwitch
 14565 ;;		_Event_HMI_DIPSwitch
 14566 ;;		_Event_TestButton
 14567 ;;		_Event_HMI_LeftButton
 14568 ;;		_Event_HMI_RightButton
 14569 ;;		_Event_HMI_UpButton
 14570 ;;		_Event_HMI_DownButton
 14571 ;;		_Event_ADCSequenceComplete
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           	psect	text78
 14576  013F90                     __ptext78:
 14577                           	opt stack 0
 14578  013F90                     _LED_Toggle:
 14579                           	opt stack 15
 14580                           
 14581                           ; BSR set to: 1
 14582                           ;incstack = 0
 14583                           ;LED_Toggle@pLED stored from wreg
 14584  013F90  0100               	movlb	0	; () banked
 14585  013F92  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 14586                           
 14587                           ;LED.c: 52: switch (pLED)
 14588  013F94  D018               	goto	l10207
 14589  013F96                     l10201:
 14590                           
 14591                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 14592  013F96  0E7E               	movlw	low _PortC
 14593  013F98  0100               	movlb	0	; () banked
 14594  013F9A  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 14595  013F9C  0E00               	movlw	high _PortC
 14596  013F9E  0100               	movlb	0	; () banked
 14597  013FA0  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14598  013FA2  0E00               	movlw	0
 14599  013FA4  0100               	movlb	0	; () banked
 14600  013FA6  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 14601  013FA8  ECE4  F0A1         	call	_Port_TogglePin	;wreg free
 14602                           
 14603                           ;LED.c: 56: break;
 14604  013FAC  0012               	return	
 14605  013FAE                     l10203:
 14606                           
 14607                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 14608  013FAE  0E7E               	movlw	low _PortC
 14609  013FB0  0100               	movlb	0	; () banked
 14610  013FB2  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 14611  013FB4  0E00               	movlw	high _PortC
 14612  013FB6  0100               	movlb	0	; () banked
 14613  013FB8  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14614  013FBA  0E01               	movlw	1
 14615  013FBC  0100               	movlb	0	; () banked
 14616  013FBE  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 14617  013FC0  ECE4  F0A1         	call	_Port_TogglePin	;wreg free
 14618                           
 14619                           ;LED.c: 60: }
 14620                           
 14621                           ;LED.c: 59: break;
 14622  013FC4  0012               	return	
 14623  013FC6                     l10207:
 14624  013FC6  0100               	movlb	0	; () banked
 14625  013FC8  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 14626                           
 14627                           ; Switch size 1, requested type "space"
 14628                           ; Number of cases is 2, Range of values is 0 to 1
 14629                           ; switch strategies available:
 14630                           ; Name         Instructions Cycles
 14631                           ; simple_byte            7     4 (average)
 14632                           ;	Chosen strategy is simple_byte
 14633  013FCA  0A00               	xorlw	0	; case 0
 14634  013FCC  B4D8               	btfsc	status,2,c
 14635  013FCE  D7E3               	goto	l10201
 14636  013FD0  0A01               	xorlw	1	; case 1
 14637  013FD2  A4D8               	btfss	status,2,c
 14638  013FD4  0012               	return	
 14639  013FD6  D7EB               	goto	l10203
 14640  013FD8                     __end_of_LED_Toggle:
 14641                           	opt stack 0
 14642                           tosu	equ	0xFFF
 14643                           tosh	equ	0xFFE
 14644                           tosl	equ	0xFFD
 14645                           pclath	equ	0xFFA
 14646                           tblptru	equ	0xFF8
 14647                           tblptrh	equ	0xFF7
 14648                           tblptrl	equ	0xFF6
 14649                           tablat	equ	0xFF5
 14650                           prodh	equ	0xFF4
 14651                           prodl	equ	0xFF3
 14652                           intcon	equ	0xFF2
 14653                           indf0	equ	0xFEF
 14654                           postinc0	equ	0xFEE
 14655                           fsr0h	equ	0xFEA
 14656                           fsr0l	equ	0xFE9
 14657                           wreg	equ	0xFE8
 14658                           indf1	equ	0xFE7
 14659                           postdec1	equ	0xFE5
 14660                           fsr1h	equ	0xFE2
 14661                           fsr1l	equ	0xFE1
 14662                           indf2	equ	0xFDF
 14663                           postinc2	equ	0xFDE
 14664                           postdec2	equ	0xFDD
 14665                           plusw2	equ	0xFDB
 14666                           fsr2h	equ	0xFDA
 14667                           fsr2l	equ	0xFD9
 14668                           status	equ	0xFD8
 14669                           
 14670 ;; *************** function _Port_TogglePin *****************
 14671 ;; Defined at:
 14672 ;;		line 278 in file "Library/Port.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 14675 ;;		 -> PortC(10), 
 14676 ;;  pPin            1   22[BANK0 ] enum E7694
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;  Value           1   23[BANK0 ] unsigned char 
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  1    wreg      void 
 14681 ;; Registers used:
 14682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14691 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14692 ;;Total ram usage:        4 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:   11
 14695 ;; This function calls:
 14696 ;;		_Port_GetPin
 14697 ;;		_Port_SetPin
 14698 ;; This function is called by:
 14699 ;;		_LED_Toggle
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           	psect	text79
 14704  0143C8                     __ptext79:
 14705                           	opt stack 0
 14706  0143C8                     _Port_TogglePin:
 14707                           	opt stack 15
 14708                           
 14709                           ;Port.c: 280: UINT8 Value;
 14710                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14711                           
 14712                           ;incstack = 0
 14713  0143C8  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14714  0143CC  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14715  0143D0  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14716  0143D4  ECEC  F09F         	call	_Port_GetPin	;wreg free
 14717  0143D8  0100               	movlb	0	; () banked
 14718  0143DA  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 14719                           
 14720                           ; BSR set to: 0
 14721                           ;Port.c: 282: Value ^= 0x01;
 14722  0143DC  0E01               	movlw	1
 14723  0143DE  0100               	movlb	0	; () banked
 14724  0143E0  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14728  0143E2  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14729  0143E6  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14730  0143EA  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14731  0143EE  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14732  0143F2  ECA9  F094         	call	_Port_SetPin	;wreg free
 14733  0143F6  0012               	return		;funcret
 14734  0143F8                     __end_of_Port_TogglePin:
 14735                           	opt stack 0
 14736                           tosu	equ	0xFFF
 14737                           tosh	equ	0xFFE
 14738                           tosl	equ	0xFFD
 14739                           pclath	equ	0xFFA
 14740                           tblptru	equ	0xFF8
 14741                           tblptrh	equ	0xFF7
 14742                           tblptrl	equ	0xFF6
 14743                           tablat	equ	0xFF5
 14744                           prodh	equ	0xFF4
 14745                           prodl	equ	0xFF3
 14746                           intcon	equ	0xFF2
 14747                           indf0	equ	0xFEF
 14748                           postinc0	equ	0xFEE
 14749                           fsr0h	equ	0xFEA
 14750                           fsr0l	equ	0xFE9
 14751                           wreg	equ	0xFE8
 14752                           indf1	equ	0xFE7
 14753                           postdec1	equ	0xFE5
 14754                           fsr1h	equ	0xFE2
 14755                           fsr1l	equ	0xFE1
 14756                           indf2	equ	0xFDF
 14757                           postinc2	equ	0xFDE
 14758                           postdec2	equ	0xFDD
 14759                           plusw2	equ	0xFDB
 14760                           fsr2h	equ	0xFDA
 14761                           fsr2l	equ	0xFD9
 14762                           status	equ	0xFD8
 14763                           
 14764 ;; *************** function _Port_SetPin *****************
 14765 ;; Defined at:
 14766 ;;		line 247 in file "Library/Port.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14769 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14770 ;;  pPin            1   17[BANK0 ] enum E7694
 14771 ;;  pValue          1   18[BANK0 ] unsigned char 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;  Type            1   19[BANK0 ] enum E7739
 14774 ;; Return value:  Size  Location     Type
 14775 ;;                  1    wreg      void 
 14776 ;; Registers used:
 14777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14778 ;; Tracked objects:
 14779 ;;		On entry : 0/0
 14780 ;;		On exit  : 0/0
 14781 ;;		Unchanged: 0/0
 14782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14783 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14786 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14787 ;;Total ram usage:        5 bytes
 14788 ;; Hardware stack levels used:    1
 14789 ;; Hardware stack levels required when called:   10
 14790 ;; This function calls:
 14791 ;;		_Byte_SetBit
 14792 ;;		_Word_GetPair
 14793 ;; This function is called by:
 14794 ;;		_Reset_Low
 14795 ;;		_Reset_High
 14796 ;;		_LED_Set
 14797 ;;		_Port_TogglePin
 14798 ;;		_Motor_Init
 14799 ;;		_Motor_Step
 14800 ;;		_MXK_Init
 14801 ;; This function uses a non-reentrant model
 14802 ;;
 14803                           
 14804                           	psect	text80
 14805  012952                     __ptext80:
 14806                           	opt stack 0
 14807  012952                     _Port_SetPin:
 14808                           	opt stack 19
 14809                           
 14810                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14811                           
 14812                           ;incstack = 0
 14813  012952  0E08               	movlw	8
 14814  012954  0100               	movlb	0	; () banked
 14815  012956  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 14816  012958  0100               	movlb	0	; () banked
 14817  01295A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 14818  01295C  0E00               	movlw	0
 14819  01295E  0100               	movlb	0	; () banked
 14820  012960  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 14821  012962  0100               	movlb	0	; () banked
 14822  012964  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14823  012966  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 14824  01296A  ECD3  F0A0         	call	_Word_GetPair	;wreg free
 14825  01296E  0100               	movlb	0	; () banked
 14826  012970  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 14827                           
 14828                           ;Port.c: 250: switch (Type)
 14829  012972  D042               	goto	l9547
 14830  012974                     l9533:
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;Port.c: 256: pValue &= 1;
 14834  012974  0E01               	movlw	1
 14835  012976  0100               	movlb	0	; () banked
 14836  012978  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14840  01297A  0100               	movlb	0	; () banked
 14841  01297C  EE20 F002          	lfsr	2,2
 14842  012980  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 14843  012982  26D9               	addwf	fsr2l,f,c
 14844  012984  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14845  012986  22DA               	addwfc	fsr2h,f,c
 14846  012988  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 14847  01298C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 14848  012990  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14849  012994  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14850  012998  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 14851                           
 14852                           ;Port.c: 258: break;
 14853  01299C  0012               	return	
 14854  01299E                     l9537:
 14855                           
 14856                           ;Port.c: 261: pValue &= 1;
 14857  01299E  0E01               	movlw	1
 14858  0129A0  0100               	movlb	0	; () banked
 14859  0129A2  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 14860                           
 14861                           ;Port.c: 262: pValue ^= 1;
 14862  0129A4  0E01               	movlw	1
 14863  0129A6  0100               	movlb	0	; () banked
 14864  0129A8  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 14865                           
 14866                           ; BSR set to: 0
 14867                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14868  0129AA  0100               	movlb	0	; () banked
 14869  0129AC  EE20 F002          	lfsr	2,2
 14870  0129B0  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 14871  0129B2  26D9               	addwf	fsr2l,f,c
 14872  0129B4  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14873  0129B6  22DA               	addwfc	fsr2h,f,c
 14874  0129B8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 14875  0129BC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 14876  0129C0  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14877  0129C4  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14878  0129C8  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 14879                           
 14880                           ;Port.c: 264: break;
 14881  0129CC  0012               	return	
 14882  0129CE                     l9541:
 14883                           
 14884                           ;Port.c: 266: pValue &= 1;
 14885  0129CE  0E01               	movlw	1
 14886  0129D0  0100               	movlb	0	; () banked
 14887  0129D2  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 14888                           
 14889                           ; BSR set to: 0
 14890                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14891  0129D4  0100               	movlb	0	; () banked
 14892  0129D6  EE20 F004          	lfsr	2,4
 14893  0129DA  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 14894  0129DC  26D9               	addwf	fsr2l,f,c
 14895  0129DE  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14896  0129E0  22DA               	addwfc	fsr2h,f,c
 14897  0129E2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 14898  0129E6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 14899  0129EA  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14900  0129EE  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14901  0129F2  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 14902                           
 14903                           ;Port.c: 269: }
 14904                           
 14905                           ;Port.c: 268: break;
 14906  0129F6  0012               	return	
 14907  0129F8                     l9547:
 14908  0129F8  0100               	movlb	0	; () banked
 14909  0129FA  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 14910                           
 14911                           ; Switch size 1, requested type "space"
 14912                           ; Number of cases is 4, Range of values is 0 to 3
 14913                           ; switch strategies available:
 14914                           ; Name         Instructions Cycles
 14915                           ; simple_byte           13     7 (average)
 14916                           ;	Chosen strategy is simple_byte
 14917  0129FC  0A00               	xorlw	0	; case 0
 14918  0129FE  B4D8               	btfsc	status,2,c
 14919  012A00  0012               	return	
 14920  012A02  0A01               	xorlw	1	; case 1
 14921  012A04  B4D8               	btfsc	status,2,c
 14922  012A06  D7B6               	goto	l9533
 14923  012A08  0A03               	xorlw	3	; case 2
 14924  012A0A  B4D8               	btfsc	status,2,c
 14925  012A0C  D7C8               	goto	l9537
 14926  012A0E  0A01               	xorlw	1	; case 3
 14927  012A10  A4D8               	btfss	status,2,c
 14928  012A12  0012               	return	
 14929  012A14  D7DC               	goto	l9541
 14930  012A16                     __end_of_Port_SetPin:
 14931                           	opt stack 0
 14932                           tosu	equ	0xFFF
 14933                           tosh	equ	0xFFE
 14934                           tosl	equ	0xFFD
 14935                           pclath	equ	0xFFA
 14936                           tblptru	equ	0xFF8
 14937                           tblptrh	equ	0xFF7
 14938                           tblptrl	equ	0xFF6
 14939                           tablat	equ	0xFF5
 14940                           prodh	equ	0xFF4
 14941                           prodl	equ	0xFF3
 14942                           intcon	equ	0xFF2
 14943                           indf0	equ	0xFEF
 14944                           postinc0	equ	0xFEE
 14945                           fsr0h	equ	0xFEA
 14946                           fsr0l	equ	0xFE9
 14947                           wreg	equ	0xFE8
 14948                           indf1	equ	0xFE7
 14949                           postdec1	equ	0xFE5
 14950                           fsr1h	equ	0xFE2
 14951                           fsr1l	equ	0xFE1
 14952                           indf2	equ	0xFDF
 14953                           postinc2	equ	0xFDE
 14954                           postdec2	equ	0xFDD
 14955                           plusw2	equ	0xFDB
 14956                           fsr2h	equ	0xFDA
 14957                           fsr2l	equ	0xFD9
 14958                           status	equ	0xFD8
 14959                           
 14960 ;; *************** function _Port_GetPin *****************
 14961 ;; Defined at:
 14962 ;;		line 271 in file "Library/Port.c"
 14963 ;; Parameters:    Size  Location     Type
 14964 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 14965 ;;		 -> PortB(10), PortE(10), PortC(10), 
 14966 ;;  pPin            1    2[BANK0 ] enum E7694
 14967 ;; Auto vars:     Size  Location     Type
 14968 ;;  Output          1    5[BANK0 ] unsigned char 
 14969 ;; Return value:  Size  Location     Type
 14970 ;;                  1    wreg      unsigned char 
 14971 ;; Registers used:
 14972 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14973 ;; Tracked objects:
 14974 ;;		On entry : 0/0
 14975 ;;		On exit  : 0/0
 14976 ;;		Unchanged: 0/0
 14977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14978 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14980 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14982 ;;Total ram usage:        6 bytes
 14983 ;; Hardware stack levels used:    1
 14984 ;; Hardware stack levels required when called:    7
 14985 ;; This function calls:
 14986 ;;		Nothing
 14987 ;; This function is called by:
 14988 ;;		_Port_TogglePin
 14989 ;;		_HMI_LeftSwitch
 14990 ;;		_HMI_RightSwitch
 14991 ;;		_HMI_UpSwitch
 14992 ;;		_HMI_DownSwitch
 14993 ;;		_MXK_TestButton
 14994 ;; This function uses a non-reentrant model
 14995 ;;
 14996                           
 14997                           	psect	text81
 14998  013FD8                     __ptext81:
 14999                           	opt stack 0
 15000  013FD8                     _Port_GetPin:
 15001                           	opt stack 22
 15002                           
 15003                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 15004                           
 15005                           ;incstack = 0
 15006  013FD8  0100               	movlb	0	; () banked
 15007  013FDA  EE20 F006          	lfsr	2,6
 15008  013FDE  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 15009  013FE0  26D9               	addwf	fsr2l,f,c
 15010  013FE2  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 15011  013FE4  22DA               	addwfc	fsr2h,f,c
 15012  013FE6  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 15013  013FEA  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 15014  013FEE  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 15015  013FF2  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 15016  013FF6  50DF               	movf	indf2,w,c
 15017  013FF8  0100               	movlb	0	; () banked
 15018  013FFA  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;Port.c: 274: Output >>= (UINT8)pPin;
 15022  013FFC  0100               	movlb	0	; () banked
 15023  013FFE  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 15024  014000  0100               	movlb	0	; () banked
 15025  014002  6FBD               	movwf	??_Port_GetPin& (0+255),b
 15026  014004  D003               	goto	u6340
 15027  014006                     u6345:
 15028  014006  0100               	movlb	0	; () banked
 15029  014008  90D8               	bcf	status,0,c
 15030  01400A  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 15031  01400C                     u6340:
 15032  01400C  0100               	movlb	0	; () banked
 15033  01400E  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 15034  014010  D7FA               	goto	u6345
 15035                           
 15036                           ;Port.c: 275: Output &= 1;
 15037  014012  0E01               	movlw	1
 15038  014014  0100               	movlb	0	; () banked
 15039  014016  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;Port.c: 276: return Output;
 15043  014018  0100               	movlb	0	; () banked
 15044  01401A  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 15045  01401C  0012               	return	
 15046  01401E                     __end_of_Port_GetPin:
 15047                           	opt stack 0
 15048                           tosu	equ	0xFFF
 15049                           tosh	equ	0xFFE
 15050                           tosl	equ	0xFFD
 15051                           pclath	equ	0xFFA
 15052                           tblptru	equ	0xFF8
 15053                           tblptrh	equ	0xFF7
 15054                           tblptrl	equ	0xFF6
 15055                           tablat	equ	0xFF5
 15056                           prodh	equ	0xFF4
 15057                           prodl	equ	0xFF3
 15058                           intcon	equ	0xFF2
 15059                           indf0	equ	0xFEF
 15060                           postinc0	equ	0xFEE
 15061                           fsr0h	equ	0xFEA
 15062                           fsr0l	equ	0xFE9
 15063                           wreg	equ	0xFE8
 15064                           indf1	equ	0xFE7
 15065                           postdec1	equ	0xFE5
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           indf2	equ	0xFDF
 15069                           postinc2	equ	0xFDE
 15070                           postdec2	equ	0xFDD
 15071                           plusw2	equ	0xFDB
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function _HMI_SetBar *****************
 15077 ;; Defined at:
 15078 ;;		line 205 in file "HMI.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  pValue          1    wreg     unsigned char 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  pValue          1    0[BANK0 ] unsigned char 
 15083 ;; Return value:  Size  Location     Type
 15084 ;;                  1    wreg      void 
 15085 ;; Registers used:
 15086 ;;		wreg
 15087 ;; Tracked objects:
 15088 ;;		On entry : 0/0
 15089 ;;		On exit  : 0/0
 15090 ;;		Unchanged: 0/0
 15091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15096 ;;Total ram usage:        1 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    7
 15099 ;; This function calls:
 15100 ;;		Nothing
 15101 ;; This function is called by:
 15102 ;;		_Event_DIPSwitch
 15103 ;;		_Event_HMI_DIPSwitch
 15104 ;;		_Event_HMI_LeftButton
 15105 ;;		_Event_HMI_RightButton
 15106 ;;		_main
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text82
 15111  01485C                     __ptext82:
 15112                           	opt stack 0
 15113  01485C                     _HMI_SetBar:
 15114                           	opt stack 23
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;incstack = 0
 15118                           ;HMI_SetBar@pValue stored from wreg
 15119  01485C  0100               	movlb	0	; () banked
 15120  01485E  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 15121                           
 15122                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15123  014860  C0BA  F131         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15124  014864  0012               	return		;funcret
 15125  014866                     __end_of_HMI_SetBar:
 15126                           	opt stack 0
 15127                           tosu	equ	0xFFF
 15128                           tosh	equ	0xFFE
 15129                           tosl	equ	0xFFD
 15130                           pclath	equ	0xFFA
 15131                           tblptru	equ	0xFF8
 15132                           tblptrh	equ	0xFF7
 15133                           tblptrl	equ	0xFF6
 15134                           tablat	equ	0xFF5
 15135                           prodh	equ	0xFF4
 15136                           prodl	equ	0xFF3
 15137                           intcon	equ	0xFF2
 15138                           indf0	equ	0xFEF
 15139                           postinc0	equ	0xFEE
 15140                           fsr0h	equ	0xFEA
 15141                           fsr0l	equ	0xFE9
 15142                           wreg	equ	0xFE8
 15143                           indf1	equ	0xFE7
 15144                           postdec1	equ	0xFE5
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           plusw2	equ	0xFDB
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function _HMI_GetBar *****************
 15156 ;; Defined at:
 15157 ;;		line 209 in file "HMI.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;		None
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;		None
 15162 ;; Return value:  Size  Location     Type
 15163 ;;                  1    wreg      unsigned char 
 15164 ;; Registers used:
 15165 ;;		wreg, status,2
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;Total ram usage:        0 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    7
 15178 ;; This function calls:
 15179 ;;		Nothing
 15180 ;; This function is called by:
 15181 ;;		_Event_DIPSwitch
 15182 ;;		_Event_HMI_DIPSwitch
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           	psect	text83
 15187  01488E                     __ptext83:
 15188                           	opt stack 0
 15189  01488E                     _HMI_GetBar:
 15190                           	opt stack 20
 15191                           
 15192                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15193                           
 15194                           ;incstack = 0
 15195  01488E  0101               	movlb	1	; () banked
 15196  014890  5131               	movf	(_HMIBoard+7)& (0+255),w,b
 15197  014892  0012               	return	
 15198  014894                     __end_of_HMI_GetBar:
 15199                           	opt stack 0
 15200                           tosu	equ	0xFFF
 15201                           tosh	equ	0xFFE
 15202                           tosl	equ	0xFFD
 15203                           pclath	equ	0xFFA
 15204                           tblptru	equ	0xFF8
 15205                           tblptrh	equ	0xFF7
 15206                           tblptrl	equ	0xFF6
 15207                           tablat	equ	0xFF5
 15208                           prodh	equ	0xFF4
 15209                           prodl	equ	0xFF3
 15210                           intcon	equ	0xFF2
 15211                           indf0	equ	0xFEF
 15212                           postinc0	equ	0xFEE
 15213                           fsr0h	equ	0xFEA
 15214                           fsr0l	equ	0xFE9
 15215                           wreg	equ	0xFE8
 15216                           indf1	equ	0xFE7
 15217                           postdec1	equ	0xFE5
 15218                           fsr1h	equ	0xFE2
 15219                           fsr1l	equ	0xFE1
 15220                           indf2	equ	0xFDF
 15221                           postinc2	equ	0xFDE
 15222                           postdec2	equ	0xFDD
 15223                           plusw2	equ	0xFDB
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function _HMI_Init *****************
 15229 ;; Defined at:
 15230 ;;		line 104 in file "HMI.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;		None
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  in              2   59[BANK0 ] unsigned short 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15248 ;;Total ram usage:        2 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:   16
 15251 ;; This function calls:
 15252 ;;		_Button_Init
 15253 ;;		_SPI_Init
 15254 ;;		_SPI_MinSpeed
 15255 ;; This function is called by:
 15256 ;;		_main
 15257 ;; This function uses a non-reentrant model
 15258 ;;
 15259                           
 15260                           	psect	text84
 15261  011360                     __ptext84:
 15262                           	opt stack 0
 15263  011360                     _HMI_Init:
 15264                           	opt stack 14
 15265                           
 15266                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 15267                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 15268                           
 15269                           ; BSR set to: 1
 15270                           ;incstack = 0
 15271  011360  0E5A               	movlw	low (_HMIBoard+48)
 15272  011362  0101               	movlb	1	; () banked
 15273  011364  6FBB               	movwf	Button_Init@pInput& (0+255),b
 15274  011366  0E01               	movlw	high (_HMIBoard+48)
 15275  011368  0101               	movlb	1	; () banked
 15276  01136A  6FBC               	movwf	(Button_Init@pInput+1)& (0+255),b
 15277  01136C  0E00               	movlw	0
 15278  01136E  0101               	movlb	1	; () banked
 15279  011370  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15280  011372  0E02               	movlw	2
 15281  011374  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 15282  011376  0EA0               	movlw	low _HMI_InitButtons
 15283  011378  0101               	movlb	1	; () banked
 15284  01137A  6FBF               	movwf	Button_Init@pInitIO& (0+255),b
 15285  01137C  0E48               	movlw	high _HMI_InitButtons
 15286  01137E  0101               	movlb	1	; () banked
 15287  011380  6FC0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15288  011382  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15289  011384  0101               	movlb	1	; () banked
 15290  011386  6FC1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15291  011388  0EE6               	movlw	low _HMI_DIPSwitch
 15292  01138A  0101               	movlb	1	; () banked
 15293  01138C  6FC2               	movwf	Button_Init@pGetState& (0+255),b
 15294  01138E  0E46               	movlw	high _HMI_DIPSwitch
 15295  011390  0101               	movlb	1	; () banked
 15296  011392  6FC3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15297  011394  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 15298  011396  0101               	movlb	1	; () banked
 15299  011398  6FC4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15300  01139A  0EB4               	movlw	low _Event_HMI_DIPSwitch
 15301  01139C  0101               	movlb	1	; () banked
 15302  01139E  6FC5               	movwf	Button_Init@pFunction& (0+255),b
 15303  0113A0  0E44               	movlw	high _Event_HMI_DIPSwitch
 15304  0113A2  0101               	movlb	1	; () banked
 15305  0113A4  6FC6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15306  0113A6  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 15307  0113A8  0101               	movlb	1	; () banked
 15308  0113AA  6FC7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15309  0113AC  ECD7  F093         	call	_Button_Init	;wreg free
 15310                           
 15311                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 15312                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 15313  0113B0  0E3C               	movlw	low (_HMIBoard+18)
 15314  0113B2  0101               	movlb	1	; () banked
 15315  0113B4  6FBB               	movwf	Button_Init@pInput& (0+255),b
 15316  0113B6  0E01               	movlw	high (_HMIBoard+18)
 15317  0113B8  0101               	movlb	1	; () banked
 15318  0113BA  6FBC               	movwf	(Button_Init@pInput+1)& (0+255),b
 15319  0113BC  0E00               	movlw	0
 15320  0113BE  0101               	movlb	1	; () banked
 15321  0113C0  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15322  0113C2  0E02               	movlw	2
 15323  0113C4  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 15324  0113C6  0EA0               	movlw	low _HMI_InitButtons
 15325  0113C8  0101               	movlb	1	; () banked
 15326  0113CA  6FBF               	movwf	Button_Init@pInitIO& (0+255),b
 15327  0113CC  0E48               	movlw	high _HMI_InitButtons
 15328  0113CE  0101               	movlb	1	; () banked
 15329  0113D0  6FC0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15330  0113D2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15331  0113D4  0101               	movlb	1	; () banked
 15332  0113D6  6FC1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15333  0113D8  0E46               	movlw	low _HMI_LeftSwitch
 15334  0113DA  0101               	movlb	1	; () banked
 15335  0113DC  6FC2               	movwf	Button_Init@pGetState& (0+255),b
 15336  0113DE  0E47               	movlw	high _HMI_LeftSwitch
 15337  0113E0  0101               	movlb	1	; () banked
 15338  0113E2  6FC3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15339  0113E4  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 15340  0113E6  0101               	movlb	1	; () banked
 15341  0113E8  6FC4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15342  0113EA  0E1A               	movlw	low _Event_HMI_LeftButton
 15343  0113EC  0101               	movlb	1	; () banked
 15344  0113EE  6FC5               	movwf	Button_Init@pFunction& (0+255),b
 15345  0113F0  0E3D               	movlw	high _Event_HMI_LeftButton
 15346  0113F2  0101               	movlb	1	; () banked
 15347  0113F4  6FC6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15348  0113F6  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 15349  0113F8  0101               	movlb	1	; () banked
 15350  0113FA  6FC7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15351  0113FC  ECD7  F093         	call	_Button_Init	;wreg free
 15352                           
 15353                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 15354                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 15355  011400  0E32               	movlw	low (_HMIBoard+8)
 15356  011402  0101               	movlb	1	; () banked
 15357  011404  6FBB               	movwf	Button_Init@pInput& (0+255),b
 15358  011406  0E01               	movlw	high (_HMIBoard+8)
 15359  011408  0101               	movlb	1	; () banked
 15360  01140A  6FBC               	movwf	(Button_Init@pInput+1)& (0+255),b
 15361  01140C  0E00               	movlw	0
 15362  01140E  0101               	movlb	1	; () banked
 15363  011410  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15364  011412  0E02               	movlw	2
 15365  011414  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 15366  011416  0EA0               	movlw	low _HMI_InitButtons
 15367  011418  0101               	movlb	1	; () banked
 15368  01141A  6FBF               	movwf	Button_Init@pInitIO& (0+255),b
 15369  01141C  0E48               	movlw	high _HMI_InitButtons
 15370  01141E  0101               	movlb	1	; () banked
 15371  011420  6FC0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15372  011422  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15373  011424  0101               	movlb	1	; () banked
 15374  011426  6FC1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15375  011428  0E2E               	movlw	low _HMI_RightSwitch
 15376  01142A  0101               	movlb	1	; () banked
 15377  01142C  6FC2               	movwf	Button_Init@pGetState& (0+255),b
 15378  01142E  0E47               	movlw	high _HMI_RightSwitch
 15379  011430  0101               	movlb	1	; () banked
 15380  011432  6FC3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15381  011434  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 15382  011436  0101               	movlb	1	; () banked
 15383  011438  6FC4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15384  01143A  0E64               	movlw	low _Event_HMI_RightButton
 15385  01143C  0101               	movlb	1	; () banked
 15386  01143E  6FC5               	movwf	Button_Init@pFunction& (0+255),b
 15387  011440  0E40               	movlw	high _Event_HMI_RightButton
 15388  011442  0101               	movlb	1	; () banked
 15389  011444  6FC6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15390  011446  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 15391  011448  0101               	movlb	1	; () banked
 15392  01144A  6FC7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15393  01144C  ECD7  F093         	call	_Button_Init	;wreg free
 15394                           
 15395                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 15396                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 15397  011450  0E46               	movlw	low (_HMIBoard+28)
 15398  011452  0101               	movlb	1	; () banked
 15399  011454  6FBB               	movwf	Button_Init@pInput& (0+255),b
 15400  011456  0E01               	movlw	high (_HMIBoard+28)
 15401  011458  0101               	movlb	1	; () banked
 15402  01145A  6FBC               	movwf	(Button_Init@pInput+1)& (0+255),b
 15403  01145C  0E00               	movlw	0
 15404  01145E  0101               	movlb	1	; () banked
 15405  011460  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15406  011462  0E02               	movlw	2
 15407  011464  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 15408  011466  0EA0               	movlw	low _HMI_InitButtons
 15409  011468  0101               	movlb	1	; () banked
 15410  01146A  6FBF               	movwf	Button_Init@pInitIO& (0+255),b
 15411  01146C  0E48               	movlw	high _HMI_InitButtons
 15412  01146E  0101               	movlb	1	; () banked
 15413  011470  6FC0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15414  011472  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15415  011474  0101               	movlb	1	; () banked
 15416  011476  6FC1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15417  011478  0E16               	movlw	low _HMI_UpSwitch
 15418  01147A  0101               	movlb	1	; () banked
 15419  01147C  6FC2               	movwf	Button_Init@pGetState& (0+255),b
 15420  01147E  0E47               	movlw	high _HMI_UpSwitch
 15421  011480  0101               	movlb	1	; () banked
 15422  011482  6FC3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15423  011484  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 15424  011486  0101               	movlb	1	; () banked
 15425  011488  6FC4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15426  01148A  0E98               	movlw	low _Event_HMI_UpButton
 15427  01148C  0101               	movlb	1	; () banked
 15428  01148E  6FC5               	movwf	Button_Init@pFunction& (0+255),b
 15429  011490  0E43               	movlw	high _Event_HMI_UpButton
 15430  011492  0101               	movlb	1	; () banked
 15431  011494  6FC6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15432  011496  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 15433  011498  0101               	movlb	1	; () banked
 15434  01149A  6FC7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15435  01149C  ECD7  F093         	call	_Button_Init	;wreg free
 15436                           
 15437                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 15438                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 15439  0114A0  0E50               	movlw	low (_HMIBoard+38)
 15440  0114A2  0101               	movlb	1	; () banked
 15441  0114A4  6FBB               	movwf	Button_Init@pInput& (0+255),b
 15442  0114A6  0E01               	movlw	high (_HMIBoard+38)
 15443  0114A8  0101               	movlb	1	; () banked
 15444  0114AA  6FBC               	movwf	(Button_Init@pInput+1)& (0+255),b
 15445  0114AC  0E00               	movlw	0
 15446  0114AE  0101               	movlb	1	; () banked
 15447  0114B0  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15448  0114B2  0E02               	movlw	2
 15449  0114B4  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 15450  0114B6  0EA0               	movlw	low _HMI_InitButtons
 15451  0114B8  0101               	movlb	1	; () banked
 15452  0114BA  6FBF               	movwf	Button_Init@pInitIO& (0+255),b
 15453  0114BC  0E48               	movlw	high _HMI_InitButtons
 15454  0114BE  0101               	movlb	1	; () banked
 15455  0114C0  6FC0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15456  0114C2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15457  0114C4  0101               	movlb	1	; () banked
 15458  0114C6  6FC1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15459  0114C8  0EFE               	movlw	low _HMI_DownSwitch
 15460  0114CA  0101               	movlb	1	; () banked
 15461  0114CC  6FC2               	movwf	Button_Init@pGetState& (0+255),b
 15462  0114CE  0E46               	movlw	high _HMI_DownSwitch
 15463  0114D0  0101               	movlb	1	; () banked
 15464  0114D2  6FC3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15465  0114D4  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 15466  0114D6  0101               	movlb	1	; () banked
 15467  0114D8  6FC4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15468  0114DA  0E36               	movlw	low _Event_HMI_DownButton
 15469  0114DC  0101               	movlb	1	; () banked
 15470  0114DE  6FC5               	movwf	Button_Init@pFunction& (0+255),b
 15471  0114E0  0E43               	movlw	high _Event_HMI_DownButton
 15472  0114E2  0101               	movlb	1	; () banked
 15473  0114E4  6FC6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15474  0114E6  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 15475  0114E8  0101               	movlb	1	; () banked
 15476  0114EA  6FC7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15477  0114EC  ECD7  F093         	call	_Button_Init	;wreg free
 15478                           
 15479                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 15480  0114F0  0EA0               	movlw	160
 15481  0114F2  0100               	movlb	0	; () banked
 15482  0114F4  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 15483  0114F6  0E86               	movlw	134
 15484  0114F8  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15485  0114FA  0E01               	movlw	1
 15486  0114FC  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15487  0114FE  0E00               	movlw	0
 15488  011500  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15489  011502  0E00               	movlw	0
 15490  011504  0100               	movlb	0	; () banked
 15491  011506  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 15492  011508  0E02               	movlw	2
 15493  01150A  0100               	movlb	0	; () banked
 15494  01150C  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 15495  01150E  EC00  F080         	call	_SPI_Init	;wreg free
 15496                           
 15497                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 15498  011512  0E64               	movlw	low _SPI1
 15499  011514  0100               	movlb	0	; () banked
 15500  011516  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 15501  011518  0E01               	movlw	high _SPI1
 15502  01151A  0100               	movlb	0	; () banked
 15503  01151C  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 15504  01151E  ECB3  F09B         	call	_SPI_MinSpeed	;wreg free
 15505                           
 15506                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 15507  011522  0E00               	movlw	0
 15508  011524  0100               	movlb	0	; () banked
 15509  011526  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 15510  011528  0E00               	movlw	0
 15511  01152A  6FF5               	movwf	HMI_Init@in& (0+255),b
 15512  01152C                     l11615:
 15513                           
 15514                           ; BSR set to: 0
 15515  01152C  0100               	movlb	0	; () banked
 15516  01152E  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 15517  011530  E113               	bnz	l1161
 15518  011532  0E08               	movlw	8
 15519  011534  0100               	movlb	0	; () banked
 15520  011536  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 15521  011538  B0D8               	btfsc	status,0,c
 15522  01153A  0012               	return	
 15523                           
 15524                           ; BSR set to: 0
 15525                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 15526                           
 15527                           ; BSR set to: 0
 15528                           
 15529                           ; BSR set to: 0
 15530  01153C  0E2A               	movlw	low _HMIBoard
 15531  01153E  0100               	movlb	0	; () banked
 15532  011540  25F5               	addwf	HMI_Init@in& (0+255),w,b
 15533  011542  6ED9               	movwf	fsr2l,c
 15534  011544  0E01               	movlw	high _HMIBoard
 15535  011546  0100               	movlb	0	; () banked
 15536  011548  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 15537  01154A  6EDA               	movwf	fsr2h,c
 15538  01154C  0E00               	movlw	0
 15539  01154E  6EDF               	movwf	indf2,c
 15540                           
 15541                           ; BSR set to: 0
 15542  011550  0100               	movlb	0	; () banked
 15543  011552  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 15544  011554  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 15545  011556  D7EA               	goto	l11615
 15546  011558                     l1161:
 15547                           
 15548                           ; BSR set to: 0
 15549  011558  0012               	return		;funcret
 15550  01155A                     __end_of_HMI_Init:
 15551                           	opt stack 0
 15552                           tosu	equ	0xFFF
 15553                           tosh	equ	0xFFE
 15554                           tosl	equ	0xFFD
 15555                           pclath	equ	0xFFA
 15556                           tblptru	equ	0xFF8
 15557                           tblptrh	equ	0xFF7
 15558                           tblptrl	equ	0xFF6
 15559                           tablat	equ	0xFF5
 15560                           prodh	equ	0xFF4
 15561                           prodl	equ	0xFF3
 15562                           intcon	equ	0xFF2
 15563                           indf0	equ	0xFEF
 15564                           postinc0	equ	0xFEE
 15565                           fsr0h	equ	0xFEA
 15566                           fsr0l	equ	0xFE9
 15567                           wreg	equ	0xFE8
 15568                           indf1	equ	0xFE7
 15569                           postdec1	equ	0xFE5
 15570                           fsr1h	equ	0xFE2
 15571                           fsr1l	equ	0xFE1
 15572                           indf2	equ	0xFDF
 15573                           postinc2	equ	0xFDE
 15574                           postdec2	equ	0xFDD
 15575                           plusw2	equ	0xFDB
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function _SPI_MinSpeed *****************
 15581 ;; Defined at:
 15582 ;;		line 190 in file "Library/SPI.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15585 ;;		 -> SPI1(11), 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;		None
 15588 ;; Return value:  Size  Location     Type
 15589 ;;                  1    wreg      void 
 15590 ;; Registers used:
 15591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15597 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15601 ;;Total ram usage:        2 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    9
 15604 ;; This function calls:
 15605 ;;		_Byte_SetBit
 15606 ;;		_Byte_SetQuad
 15607 ;; This function is called by:
 15608 ;;		_HMI_Init
 15609 ;; This function uses a non-reentrant model
 15610 ;;
 15611                           
 15612                           	psect	text85
 15613  013766                     __ptext85:
 15614                           	opt stack 0
 15615  013766                     _SPI_MinSpeed:
 15616                           	opt stack 20
 15617                           
 15618                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;incstack = 0
 15622  013766  0100               	movlb	0	; () banked
 15623  013768  EE20 F006          	lfsr	2,6
 15624  01376C  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15625  01376E  26D9               	addwf	fsr2l,f,c
 15626  013770  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15627  013772  22DA               	addwfc	fsr2h,f,c
 15628  013774  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 15629  013778  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 15630  01377C  0E05               	movlw	5
 15631  01377E  0100               	movlb	0	; () banked
 15632  013780  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 15633  013782  0E00               	movlw	0
 15634  013784  0100               	movlb	0	; () banked
 15635  013786  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 15636  013788  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 15637                           
 15638                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 15639  01378C  0100               	movlb	0	; () banked
 15640  01378E  EE20 F006          	lfsr	2,6
 15641  013792  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15642  013794  26D9               	addwf	fsr2l,f,c
 15643  013796  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15644  013798  22DA               	addwfc	fsr2h,f,c
 15645  01379A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 15646  01379E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 15647  0137A2  0E00               	movlw	0
 15648  0137A4  0100               	movlb	0	; () banked
 15649  0137A6  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15650  0137A8  0E02               	movlw	2
 15651  0137AA  0100               	movlb	0	; () banked
 15652  0137AC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 15653  0137AE  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 15654                           
 15655                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15656  0137B2  0100               	movlb	0	; () banked
 15657  0137B4  EE20 F006          	lfsr	2,6
 15658  0137B8  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15659  0137BA  26D9               	addwf	fsr2l,f,c
 15660  0137BC  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15661  0137BE  22DA               	addwfc	fsr2h,f,c
 15662  0137C0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 15663  0137C4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 15664  0137C8  0E05               	movlw	5
 15665  0137CA  0100               	movlb	0	; () banked
 15666  0137CC  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 15667  0137CE  0E01               	movlw	1
 15668  0137D0  0100               	movlb	0	; () banked
 15669  0137D2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 15670  0137D4  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 15671  0137D8  0012               	return		;funcret
 15672  0137DA                     __end_of_SPI_MinSpeed:
 15673                           	opt stack 0
 15674                           tosu	equ	0xFFF
 15675                           tosh	equ	0xFFE
 15676                           tosl	equ	0xFFD
 15677                           pclath	equ	0xFFA
 15678                           tblptru	equ	0xFF8
 15679                           tblptrh	equ	0xFF7
 15680                           tblptrl	equ	0xFF6
 15681                           tablat	equ	0xFF5
 15682                           prodh	equ	0xFF4
 15683                           prodl	equ	0xFF3
 15684                           intcon	equ	0xFF2
 15685                           indf0	equ	0xFEF
 15686                           postinc0	equ	0xFEE
 15687                           fsr0h	equ	0xFEA
 15688                           fsr0l	equ	0xFE9
 15689                           wreg	equ	0xFE8
 15690                           indf1	equ	0xFE7
 15691                           postdec1	equ	0xFE5
 15692                           fsr1h	equ	0xFE2
 15693                           fsr1l	equ	0xFE1
 15694                           indf2	equ	0xFDF
 15695                           postinc2	equ	0xFDE
 15696                           postdec2	equ	0xFDD
 15697                           plusw2	equ	0xFDB
 15698                           fsr2h	equ	0xFDA
 15699                           fsr2l	equ	0xFD9
 15700                           status	equ	0xFD8
 15701                           
 15702 ;; *************** function _SPI_Init *****************
 15703 ;; Defined at:
 15704 ;;		line 12 in file "Library/SPI.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;  pClock          4   45[BANK0 ] unsigned long 
 15707 ;;  pChannel        1   49[BANK0 ] enum E7688
 15708 ;;  pMode           1   50[BANK0 ] enum E7692
 15709 ;; Auto vars:     Size  Location     Type
 15710 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 15711 ;;		 -> SPI1(11), SPI2(11), 
 15712 ;; Return value:  Size  Location     Type
 15713 ;;                  1    wreg      void 
 15714 ;; Registers used:
 15715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15716 ;; Tracked objects:
 15717 ;;		On entry : 0/0
 15718 ;;		On exit  : 0/0
 15719 ;;		Unchanged: 0/0
 15720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15721 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15724 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15725 ;;Total ram usage:        8 bytes
 15726 ;; Hardware stack levels used:    1
 15727 ;; Hardware stack levels required when called:   12
 15728 ;; This function calls:
 15729 ;;		_Byte_SetBit
 15730 ;;		_Byte_SetQuad
 15731 ;;		_Port_SetPinType
 15732 ;;		_SPI_DCS
 15733 ;;		_SPI_DisableISR
 15734 ;;		_Timer2_Init
 15735 ;; This function is called by:
 15736 ;;		_Configure_GPIOs
 15737 ;;		_HMI_Init
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	text86
 15742  010000                     __ptext86:
 15743                           	opt stack 0
 15744  010000                     _SPI_Init:
 15745                           	opt stack 16
 15746                           
 15747                           ;SPI.c: 14: SPIPtr pInput;
 15748                           ;SPI.c: 16: switch (pChannel)
 15749                           
 15750                           ;incstack = 0
 15751  010000  D00C               	goto	l10443
 15752  010002                     l10437:
 15753                           
 15754                           ;SPI.c: 19: pInput = &SPI1;
 15755  010002  0E64               	movlw	low _SPI1
 15756  010004  0100               	movlb	0	; () banked
 15757  010006  6FED               	movwf	SPI_Init@pInput& (0+255),b
 15758  010008  0E01               	movlw	high _SPI1
 15759  01000A  D004               	goto	L6
 15760  01000C                     l10439:
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;SPI.c: 22: pInput = &SPI2;
 15764  01000C  0E6F               	movlw	low _SPI2
 15765  01000E  0100               	movlb	0	; () banked
 15766  010010  6FED               	movwf	SPI_Init@pInput& (0+255),b
 15767  010012  0E01               	movlw	high _SPI2
 15768  010014                     L6:
 15769  010014  0100               	movlb	0	; () banked
 15770  010016  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;SPI.c: 24: };
 15774                           
 15775                           ;SPI.c: 23: break;
 15776  010018  D008               	goto	l10445
 15777  01001A                     l10443:
 15778  01001A  0100               	movlb	0	; () banked
 15779  01001C  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 15780                           
 15781                           ; Switch size 1, requested type "space"
 15782                           ; Number of cases is 2, Range of values is 0 to 1
 15783                           ; switch strategies available:
 15784                           ; Name         Instructions Cycles
 15785                           ; simple_byte            7     4 (average)
 15786                           ;	Chosen strategy is simple_byte
 15787  01001E  0A00               	xorlw	0	; case 0
 15788  010020  B4D8               	btfsc	status,2,c
 15789  010022  D7EF               	goto	l10437
 15790  010024  0A01               	xorlw	1	; case 1
 15791  010026  B4D8               	btfsc	status,2,c
 15792  010028  D7F1               	goto	l10439
 15793  01002A                     l10445:
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;SPI.c: 26: pInput->mChannel = pChannel;
 15797  01002A  0100               	movlb	0	; () banked
 15798  01002C  EE20 F002          	lfsr	2,2
 15799  010030  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15800  010032  26D9               	addwf	fsr2l,f,c
 15801  010034  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15802  010036  22DA               	addwfc	fsr2h,f,c
 15803  010038  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 15804                           
 15805                           ;SPI.c: 35: switch (pChannel)
 15806  01003C  D0B1               	goto	l10465
 15807  01003E                     l10447:
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15811  01003E  0E7E               	movlw	low _PortC
 15812  010040  0100               	movlb	0	; () banked
 15813  010042  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15814  010044  0E00               	movlw	high _PortC
 15815  010046  0100               	movlb	0	; () banked
 15816  010048  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15817  01004A  0E02               	movlw	2
 15818  01004C  0100               	movlb	0	; () banked
 15819  01004E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15820  010050  0E03               	movlw	3
 15821  010052  0100               	movlb	0	; () banked
 15822  010054  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15823  010056  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15824                           
 15825                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15826  01005A  0E7E               	movlw	low _PortC
 15827  01005C  0100               	movlb	0	; () banked
 15828  01005E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15829  010060  0E00               	movlw	high _PortC
 15830  010062  0100               	movlb	0	; () banked
 15831  010064  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15832  010066  0E03               	movlw	3
 15833  010068  0100               	movlb	0	; () banked
 15834  01006A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15835  01006C  0E03               	movlw	3
 15836  01006E  0100               	movlb	0	; () banked
 15837  010070  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15838  010072  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15839                           
 15840                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15841  010076  0E7E               	movlw	low _PortC
 15842  010078  0100               	movlb	0	; () banked
 15843  01007A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15844  01007C  0E00               	movlw	high _PortC
 15845  01007E  0100               	movlb	0	; () banked
 15846  010080  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15847  010082  0E05               	movlw	5
 15848  010084  0100               	movlb	0	; () banked
 15849  010086  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15850  010088  0E03               	movlw	3
 15851  01008A  0100               	movlb	0	; () banked
 15852  01008C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15853  01008E  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15854                           
 15855                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15856  010092  0E7E               	movlw	low _PortC
 15857  010094  0100               	movlb	0	; () banked
 15858  010096  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15859  010098  0E00               	movlw	high _PortC
 15860  01009A  0100               	movlb	0	; () banked
 15861  01009C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15862  01009E  0E04               	movlw	4
 15863  0100A0  0100               	movlb	0	; () banked
 15864  0100A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15865  0100A4  0E00               	movlw	0
 15866  0100A6  0100               	movlb	0	; () banked
 15867  0100A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15868  0100AA  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15869                           
 15870                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15871  0100AE  0100               	movlb	0	; () banked
 15872  0100B0  EE20 F003          	lfsr	2,3
 15873  0100B4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15874  0100B6  26D9               	addwf	fsr2l,f,c
 15875  0100B8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15876  0100BA  22DA               	addwfc	fsr2h,f,c
 15877  0100BC  0EC7               	movlw	199
 15878  0100BE  6EDE               	movwf	postinc2,c
 15879  0100C0  0E0F               	movlw	15
 15880  0100C2  6EDD               	movwf	postdec2,c
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 15884  0100C4  0100               	movlb	0	; () banked
 15885  0100C6  EE20 F006          	lfsr	2,6
 15886  0100CA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15887  0100CC  26D9               	addwf	fsr2l,f,c
 15888  0100CE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15889  0100D0  22DA               	addwfc	fsr2h,f,c
 15890  0100D2  0EC6               	movlw	198
 15891  0100D4  6EDE               	movwf	postinc2,c
 15892  0100D6  0E0F               	movlw	15
 15893  0100D8  6EDD               	movwf	postdec2,c
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 15897  0100DA  0100               	movlb	0	; () banked
 15898  0100DC  EE20 F009          	lfsr	2,9
 15899  0100E0  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15900  0100E2  26D9               	addwf	fsr2l,f,c
 15901  0100E4  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15902  0100E6  22DA               	addwfc	fsr2h,f,c
 15903  0100E8  0EC9               	movlw	201
 15904  0100EA  D056               	goto	L7
 15905  0100EC                     l10455:
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 15909  0100EC  0E88               	movlw	low _PortD
 15910  0100EE  0100               	movlb	0	; () banked
 15911  0100F0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15912  0100F2  0E00               	movlw	high _PortD
 15913  0100F4  0100               	movlb	0	; () banked
 15914  0100F6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15915  0100F8  0E07               	movlw	7
 15916  0100FA  0100               	movlb	0	; () banked
 15917  0100FC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15918  0100FE  0E03               	movlw	3
 15919  010100  0100               	movlb	0	; () banked
 15920  010102  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15921  010104  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15922                           
 15923                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 15924  010108  0E88               	movlw	low _PortD
 15925  01010A  0100               	movlb	0	; () banked
 15926  01010C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15927  01010E  0E00               	movlw	high _PortD
 15928  010110  0100               	movlb	0	; () banked
 15929  010112  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15930  010114  0E06               	movlw	6
 15931  010116  0100               	movlb	0	; () banked
 15932  010118  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15933  01011A  0E03               	movlw	3
 15934  01011C  0100               	movlb	0	; () banked
 15935  01011E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15936  010120  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15937                           
 15938                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 15939  010124  0E88               	movlw	low _PortD
 15940  010126  0100               	movlb	0	; () banked
 15941  010128  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15942  01012A  0E00               	movlw	high _PortD
 15943  01012C  0100               	movlb	0	; () banked
 15944  01012E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15945  010130  0E04               	movlw	4
 15946  010132  0100               	movlb	0	; () banked
 15947  010134  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15948  010136  0E03               	movlw	3
 15949  010138  0100               	movlb	0	; () banked
 15950  01013A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15951  01013C  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15952                           
 15953                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 15954  010140  0E88               	movlw	low _PortD
 15955  010142  0100               	movlb	0	; () banked
 15956  010144  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15957  010146  0E00               	movlw	high _PortD
 15958  010148  0100               	movlb	0	; () banked
 15959  01014A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15960  01014C  0E05               	movlw	5
 15961  01014E  0100               	movlb	0	; () banked
 15962  010150  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15963  010152  0E00               	movlw	0
 15964  010154  0100               	movlb	0	; () banked
 15965  010156  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15966  010158  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 15967                           
 15968                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 15969  01015C  0100               	movlb	0	; () banked
 15970  01015E  EE20 F003          	lfsr	2,3
 15971  010162  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15972  010164  26D9               	addwf	fsr2l,f,c
 15973  010166  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15974  010168  22DA               	addwfc	fsr2h,f,c
 15975  01016A  0E6D               	movlw	109
 15976  01016C  6EDE               	movwf	postinc2,c
 15977  01016E  0E0F               	movlw	15
 15978  010170  6EDD               	movwf	postdec2,c
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 15982  010172  0100               	movlb	0	; () banked
 15983  010174  EE20 F006          	lfsr	2,6
 15984  010178  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15985  01017A  26D9               	addwf	fsr2l,f,c
 15986  01017C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15987  01017E  22DA               	addwfc	fsr2h,f,c
 15988  010180  0E6C               	movlw	108
 15989  010182  6EDE               	movwf	postinc2,c
 15990  010184  0E0F               	movlw	15
 15991  010186  6EDD               	movwf	postdec2,c
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 15995  010188  0100               	movlb	0	; () banked
 15996  01018A  EE20 F009          	lfsr	2,9
 15997  01018E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 15998  010190  26D9               	addwf	fsr2l,f,c
 15999  010192  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16000  010194  22DA               	addwfc	fsr2h,f,c
 16001  010196  0E6F               	movlw	111
 16002  010198                     L7:
 16003  010198  6EDE               	movwf	postinc2,c
 16004  01019A  0E0F               	movlw	15
 16005  01019C  6EDD               	movwf	postdec2,c
 16006                           
 16007                           ;SPI.c: 68: break;
 16008  01019E  D009               	goto	l10467
 16009  0101A0                     l10465:
 16010                           
 16011                           ; BSR set to: 0
 16012  0101A0  0100               	movlb	0	; () banked
 16013  0101A2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 16014                           
 16015                           ; Switch size 1, requested type "space"
 16016                           ; Number of cases is 2, Range of values is 0 to 1
 16017                           ; switch strategies available:
 16018                           ; Name         Instructions Cycles
 16019                           ; simple_byte            7     4 (average)
 16020                           ;	Chosen strategy is simple_byte
 16021  0101A4  0A00               	xorlw	0	; case 0
 16022  0101A6  B4D8               	btfsc	status,2,c
 16023  0101A8  D74A               	goto	l10447
 16024  0101AA  0A01               	xorlw	1	; case 1
 16025  0101AC  A4D8               	btfss	status,2,c
 16026  0101AE  0012               	return	
 16027  0101B0  D79D               	goto	l10455
 16028  0101B2                     l10467:
 16029                           
 16030                           ; BSR set to: 0
 16031                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16032  0101B2  0100               	movlb	0	; () banked
 16033  0101B4  EE20 F006          	lfsr	2,6
 16034  0101B8  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16035  0101BA  26D9               	addwf	fsr2l,f,c
 16036  0101BC  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16037  0101BE  22DA               	addwfc	fsr2h,f,c
 16038  0101C0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16039  0101C4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16040  0101C8  0E05               	movlw	5
 16041  0101CA  0100               	movlb	0	; () banked
 16042  0101CC  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16043  0101CE  0E00               	movlw	0
 16044  0101D0  0100               	movlb	0	; () banked
 16045  0101D2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16046  0101D4  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16047                           
 16048                           ;SPI.c: 77: switch(pMode)
 16049  0101D8  D09C               	goto	l10479
 16050  0101DA                     l10469:
 16051                           
 16052                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16053  0101DA  0100               	movlb	0	; () banked
 16054  0101DC  EE20 F006          	lfsr	2,6
 16055  0101E0  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16056  0101E2  26D9               	addwf	fsr2l,f,c
 16057  0101E4  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16058  0101E6  22DA               	addwfc	fsr2h,f,c
 16059  0101E8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16060  0101EC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16061  0101F0  0E04               	movlw	4
 16062  0101F2  0100               	movlb	0	; () banked
 16063  0101F4  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16064  0101F6  0E00               	movlw	0
 16065  0101F8  0100               	movlb	0	; () banked
 16066  0101FA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16067  0101FC  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16068                           
 16069                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16070  010200  0100               	movlb	0	; () banked
 16071  010202  EE20 F003          	lfsr	2,3
 16072  010206  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16073  010208  26D9               	addwf	fsr2l,f,c
 16074  01020A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16075  01020C  22DA               	addwfc	fsr2h,f,c
 16076  01020E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16077  010212  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16078  010216  0E06               	movlw	6
 16079  010218  0100               	movlb	0	; () banked
 16080  01021A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16081  01021C  0E00               	movlw	0
 16082  01021E  0100               	movlb	0	; () banked
 16083  010220  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16084  010222  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16085                           
 16086                           ;SPI.c: 82: break;
 16087  010226  D084               	goto	l10481
 16088  010228                     l10471:
 16089                           
 16090                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16091  010228  0100               	movlb	0	; () banked
 16092  01022A  EE20 F006          	lfsr	2,6
 16093  01022E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16094  010230  26D9               	addwf	fsr2l,f,c
 16095  010232  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16096  010234  22DA               	addwfc	fsr2h,f,c
 16097  010236  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16098  01023A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16099  01023E  0E04               	movlw	4
 16100  010240  0100               	movlb	0	; () banked
 16101  010242  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16102  010244  0E00               	movlw	0
 16103  010246  0100               	movlb	0	; () banked
 16104  010248  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16105  01024A  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16106                           
 16107                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16108  01024E  0100               	movlb	0	; () banked
 16109  010250  EE20 F003          	lfsr	2,3
 16110  010254  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16111  010256  26D9               	addwf	fsr2l,f,c
 16112  010258  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16113  01025A  22DA               	addwfc	fsr2h,f,c
 16114  01025C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16115  010260  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16116  010264  0E06               	movlw	6
 16117  010266  0100               	movlb	0	; () banked
 16118  010268  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16119  01026A  0E01               	movlw	1
 16120  01026C  0100               	movlb	0	; () banked
 16121  01026E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16122  010270  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16123                           
 16124                           ;SPI.c: 86: break;
 16125  010274  D05D               	goto	l10481
 16126  010276                     l10473:
 16127                           
 16128                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16129  010276  0100               	movlb	0	; () banked
 16130  010278  EE20 F006          	lfsr	2,6
 16131  01027C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16132  01027E  26D9               	addwf	fsr2l,f,c
 16133  010280  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16134  010282  22DA               	addwfc	fsr2h,f,c
 16135  010284  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16136  010288  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16137  01028C  0E04               	movlw	4
 16138  01028E  0100               	movlb	0	; () banked
 16139  010290  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16140  010292  0E01               	movlw	1
 16141  010294  0100               	movlb	0	; () banked
 16142  010296  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16143  010298  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16144                           
 16145                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16146  01029C  0100               	movlb	0	; () banked
 16147  01029E  EE20 F003          	lfsr	2,3
 16148  0102A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16149  0102A4  26D9               	addwf	fsr2l,f,c
 16150  0102A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16151  0102A8  22DA               	addwfc	fsr2h,f,c
 16152  0102AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16153  0102AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16154  0102B2  0E06               	movlw	6
 16155  0102B4  0100               	movlb	0	; () banked
 16156  0102B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16157  0102B8  0E00               	movlw	0
 16158  0102BA  0100               	movlb	0	; () banked
 16159  0102BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16160  0102BE  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16161                           
 16162                           ;SPI.c: 90: break;
 16163  0102C2  D036               	goto	l10481
 16164  0102C4                     l10475:
 16165                           
 16166                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16167  0102C4  0100               	movlb	0	; () banked
 16168  0102C6  EE20 F006          	lfsr	2,6
 16169  0102CA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16170  0102CC  26D9               	addwf	fsr2l,f,c
 16171  0102CE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16172  0102D0  22DA               	addwfc	fsr2h,f,c
 16173  0102D2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16174  0102D6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16175  0102DA  0E04               	movlw	4
 16176  0102DC  0100               	movlb	0	; () banked
 16177  0102DE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16178  0102E0  0E01               	movlw	1
 16179  0102E2  0100               	movlb	0	; () banked
 16180  0102E4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16181  0102E6  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16182                           
 16183                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16184  0102EA  0100               	movlb	0	; () banked
 16185  0102EC  EE20 F003          	lfsr	2,3
 16186  0102F0  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16187  0102F2  26D9               	addwf	fsr2l,f,c
 16188  0102F4  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16189  0102F6  22DA               	addwfc	fsr2h,f,c
 16190  0102F8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16191  0102FC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16192  010300  0E06               	movlw	6
 16193  010302  0100               	movlb	0	; () banked
 16194  010304  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16195  010306  0E01               	movlw	1
 16196  010308  0100               	movlb	0	; () banked
 16197  01030A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16198  01030C  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16199                           
 16200                           ;SPI.c: 94: break;
 16201  010310  D00F               	goto	l10481
 16202  010312                     l10479:
 16203  010312  0100               	movlb	0	; () banked
 16204  010314  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 16205                           
 16206                           ; Switch size 1, requested type "space"
 16207                           ; Number of cases is 4, Range of values is 0 to 3
 16208                           ; switch strategies available:
 16209                           ; Name         Instructions Cycles
 16210                           ; simple_byte           13     7 (average)
 16211                           ;	Chosen strategy is simple_byte
 16212  010316  0A00               	xorlw	0	; case 0
 16213  010318  B4D8               	btfsc	status,2,c
 16214  01031A  D75F               	goto	l10469
 16215  01031C  0A01               	xorlw	1	; case 1
 16216  01031E  B4D8               	btfsc	status,2,c
 16217  010320  D783               	goto	l10471
 16218  010322  0A03               	xorlw	3	; case 2
 16219  010324  B4D8               	btfsc	status,2,c
 16220  010326  D7A7               	goto	l10473
 16221  010328  0A01               	xorlw	1	; case 3
 16222  01032A  A4D8               	btfss	status,2,c
 16223  01032C  0012               	return	
 16224  01032E  D7CA               	goto	l10475
 16225  010330                     l10481:
 16226                           
 16227                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 16228  010330  0100               	movlb	0	; () banked
 16229  010332  EE20 F006          	lfsr	2,6
 16230  010336  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16231  010338  26D9               	addwf	fsr2l,f,c
 16232  01033A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16233  01033C  22DA               	addwfc	fsr2h,f,c
 16234  01033E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16235  010342  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16236  010346  0E07               	movlw	7
 16237  010348  0100               	movlb	0	; () banked
 16238  01034A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16239  01034C  0E00               	movlw	0
 16240  01034E  0100               	movlb	0	; () banked
 16241  010350  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16242  010352  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16243                           
 16244                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 16245  010356  0100               	movlb	0	; () banked
 16246  010358  EE20 F006          	lfsr	2,6
 16247  01035C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16248  01035E  26D9               	addwf	fsr2l,f,c
 16249  010360  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16250  010362  22DA               	addwfc	fsr2h,f,c
 16251  010364  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16252  010368  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16253  01036C  0E06               	movlw	6
 16254  01036E  0100               	movlb	0	; () banked
 16255  010370  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16256  010372  0E00               	movlw	0
 16257  010374  0100               	movlb	0	; () banked
 16258  010376  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16259  010378  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16260                           
 16261                           ;SPI.c: 106: Timer2_Init(pClock);
 16262  01037C  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 16263  010380  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 16264  010384  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 16265  010388  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 16266  01038C  ECD0  F090         	call	_Timer2_Init	;wreg free
 16267                           
 16268                           ;SPI.c: 112: SPI_DisableISR(pInput);
 16269  010390  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 16270  010394  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 16271  010398  EC9A  F0A2         	call	_SPI_DisableISR	;wreg free
 16272                           
 16273                           ;SPI.c: 116: switch (pChannel)
 16274  01039C  D004               	goto	l10489
 16275  01039E                     l615:
 16276                           
 16277                           ; BSR set to: 0
 16278  01039E  869F               	bsf	3999,3,c	;volatile
 16279  0103A0  D00B               	goto	l10491
 16280  0103A2                     l617:
 16281                           
 16282                           ; BSR set to: 0
 16283  0103A2  8EA5               	bsf	4005,7,c	;volatile
 16284  0103A4  D009               	goto	l10491
 16285  0103A6                     l10489:
 16286  0103A6  0100               	movlb	0	; () banked
 16287  0103A8  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 16288                           
 16289                           ; Switch size 1, requested type "space"
 16290                           ; Number of cases is 2, Range of values is 0 to 1
 16291                           ; switch strategies available:
 16292                           ; Name         Instructions Cycles
 16293                           ; simple_byte            7     4 (average)
 16294                           ;	Chosen strategy is simple_byte
 16295  0103AA  0A00               	xorlw	0	; case 0
 16296  0103AC  B4D8               	btfsc	status,2,c
 16297  0103AE  D7F7               	goto	l615
 16298  0103B0  0A01               	xorlw	1	; case 1
 16299  0103B2  A4D8               	btfss	status,2,c
 16300  0103B4  0012               	return	
 16301  0103B6  D7F5               	goto	l617
 16302  0103B8                     l10491:
 16303                           
 16304                           ; BSR set to: 0
 16305                           ;SPI.c: 124: SPI_DCS(pInput);
 16306  0103B8  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 16307  0103BC  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 16308  0103C0  ECFC  F0A1         	call	_SPI_DCS	;wreg free
 16309                           
 16310                           ;SPI.c: 126: pInput->mBusy = 0;
 16311  0103C4  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 16312  0103C8  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 16313  0103CC  0E00               	movlw	0
 16314  0103CE  6EDF               	movwf	indf2,c
 16315                           
 16316                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 16317  0103D0  0100               	movlb	0	; () banked
 16318  0103D2  EE20 F006          	lfsr	2,6
 16319  0103D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16320  0103D8  26D9               	addwf	fsr2l,f,c
 16321  0103DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16322  0103DC  22DA               	addwfc	fsr2h,f,c
 16323  0103DE  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 16324  0103E2  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 16325  0103E6  0E00               	movlw	0
 16326  0103E8  0100               	movlb	0	; () banked
 16327  0103EA  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16328  0103EC  0E03               	movlw	3
 16329  0103EE  0100               	movlb	0	; () banked
 16330  0103F0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 16331  0103F2  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 16332                           
 16333                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16334  0103F6  0100               	movlb	0	; () banked
 16335  0103F8  EE20 F006          	lfsr	2,6
 16336  0103FC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 16337  0103FE  26D9               	addwf	fsr2l,f,c
 16338  010400  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16339  010402  22DA               	addwfc	fsr2h,f,c
 16340  010404  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 16341  010408  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 16342  01040C  0E05               	movlw	5
 16343  01040E  0100               	movlb	0	; () banked
 16344  010410  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 16345  010412  0E01               	movlw	1
 16346  010414  0100               	movlb	0	; () banked
 16347  010416  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 16348  010418  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 16349  01041C  0012               	return		;funcret
 16350  01041E                     __end_of_SPI_Init:
 16351                           	opt stack 0
 16352                           tosu	equ	0xFFF
 16353                           tosh	equ	0xFFE
 16354                           tosl	equ	0xFFD
 16355                           pclath	equ	0xFFA
 16356                           tblptru	equ	0xFF8
 16357                           tblptrh	equ	0xFF7
 16358                           tblptrl	equ	0xFF6
 16359                           tablat	equ	0xFF5
 16360                           prodh	equ	0xFF4
 16361                           prodl	equ	0xFF3
 16362                           intcon	equ	0xFF2
 16363                           indf0	equ	0xFEF
 16364                           postinc0	equ	0xFEE
 16365                           fsr0h	equ	0xFEA
 16366                           fsr0l	equ	0xFE9
 16367                           wreg	equ	0xFE8
 16368                           indf1	equ	0xFE7
 16369                           postdec1	equ	0xFE5
 16370                           fsr1h	equ	0xFE2
 16371                           fsr1l	equ	0xFE1
 16372                           indf2	equ	0xFDF
 16373                           postinc2	equ	0xFDE
 16374                           postdec2	equ	0xFDD
 16375                           plusw2	equ	0xFDB
 16376                           fsr2h	equ	0xFDA
 16377                           fsr2l	equ	0xFD9
 16378                           status	equ	0xFD8
 16379                           
 16380 ;; *************** function _Timer2_Init *****************
 16381 ;; Defined at:
 16382 ;;		line 10 in file "Library/Timer2.c"
 16383 ;; Parameters:    Size  Location     Type
 16384 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 16387 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 16388 ;;  RDIV            4   18[BANK0 ] unsigned long 
 16389 ;; Return value:  Size  Location     Type
 16390 ;;                  1    wreg      void 
 16391 ;; Registers used:
 16392 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16393 ;; Tracked objects:
 16394 ;;		On entry : 0/0
 16395 ;;		On exit  : 0/0
 16396 ;;		Unchanged: 0/0
 16397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16398 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16399 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16401 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16402 ;;Total ram usage:       17 bytes
 16403 ;; Hardware stack levels used:    1
 16404 ;; Hardware stack levels required when called:    8
 16405 ;; This function calls:
 16406 ;;		_Timer2_Clear
 16407 ;;		___lldiv
 16408 ;; This function is called by:
 16409 ;;		_SPI_Init
 16410 ;; This function uses a non-reentrant model
 16411 ;;
 16412                           
 16413                           	psect	text87
 16414  0121A0                     __ptext87:
 16415                           	opt stack 0
 16416  0121A0                     _Timer2_Init:
 16417                           	opt stack 19
 16418                           
 16419                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 16420                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 16421                           ;Timer2.c: 14: static UINT8 PRE = 0;
 16422                           ;Timer2.c: 15: static UINT32 DIV = 0;
 16423                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 16424                           
 16425                           ;incstack = 0
 16426  0121A0  0E00               	movlw	0
 16427  0121A2  0100               	movlb	0	; () banked
 16428  0121A4  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 16429  0121A6  0E6C               	movlw	108
 16430  0121A8  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 16431  0121AA  0EDC               	movlw	220
 16432  0121AC  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 16433  0121AE  0E02               	movlw	2
 16434  0121B0  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 16435                           
 16436                           ; BSR set to: 0
 16437                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 16438                           ;Timer2.c: 20: pFrequency *= 2;
 16439  0121B2  0100               	movlb	0	; () banked
 16440  0121B4  90D8               	bcf	status,0,c
 16441  0121B6  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 16442  0121B8  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 16443  0121BA  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 16444  0121BC  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 16445                           
 16446                           ; BSR set to: 0
 16447                           ;Timer2.c: 23: pCPUClock /= 4;
 16448  0121BE  0E02               	movlw	2
 16449  0121C0  0100               	movlb	0	; () banked
 16450  0121C2  6FCB               	movwf	??_Timer2_Init& (0+255),b
 16451  0121C4                     u6875:
 16452  0121C4  90D8               	bcf	status,0,c
 16453  0121C6  0100               	movlb	0	; () banked
 16454  0121C8  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 16455  0121CA  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 16456  0121CC  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 16457  0121CE  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 16458  0121D0  0100               	movlb	0	; () banked
 16459  0121D2  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 16460  0121D4  D7F7               	goto	u6875
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 16464  0121D6  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 16465  0121DA  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 16466  0121DE  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 16467  0121E2  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 16468  0121E6  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 16469  0121EA  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 16470  0121EE  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 16471  0121F2  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 16472  0121F6  ECCB  F095         	call	___lldiv	;wreg free
 16473  0121FA  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 16474  0121FE  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 16475  012202  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 16476  012206  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 16477                           
 16478                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 16479  01220A  D00E               	goto	l10285
 16480  01220C                     l10277:
 16481                           
 16482                           ;Timer2.c: 28: {
 16483                           ;Timer2.c: 29: RDIV = 0;
 16484  01220C  0E00               	movlw	0
 16485  01220E  0100               	movlb	0	; () banked
 16486  012210  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 16487  012212  0E00               	movlw	0
 16488  012214  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 16489  012216  0E00               	movlw	0
 16490  012218  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 16491  01221A  0E00               	movlw	0
 16492  01221C  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 16493                           
 16494                           ; BSR set to: 0
 16495                           ;Timer2.c: 30: INDEX ++;
 16496  01221E  2A32               	incf	Timer2_Init@INDEX,f,c
 16497                           
 16498                           ; BSR set to: 0
 16499                           ;Timer2.c: 31: if (INDEX >= 3)
 16500  012220  0E02               	movlw	2
 16501  012222  6432               	cpfsgt	Timer2_Init@INDEX,c
 16502  012224  D001               	goto	l10285
 16503  012226  D025               	goto	l10287
 16504  012228                     l10285:
 16505  012228  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 16506  01222C  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 16507  012230  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 16508  012234  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 16509  012238  5032               	movf	Timer2_Init@INDEX,w,c
 16510  01223A  0D01               	mullw	1
 16511  01223C  0EAA               	movlw	low Timer2_Init@PRESCALE
 16512  01223E  24F3               	addwf	prodl,w,c
 16513  012240  6EF6               	movwf	tblptrl,c
 16514  012242  0EFD               	movlw	high Timer2_Init@PRESCALE
 16515  012244  20F4               	addwfc	prodh,w,c
 16516  012246  6EF7               	movwf	tblptrh,c
 16517  012248                     	if	1	;There are 3 active tblptr bytes
 16518  012248  6AF8               	clrf	tblptru,c
 16519  01224A  0E00               	movlw	low (__mediumconst shr (0+16))
 16520  01224C  22F8               	addwfc	tblptru,f,c
 16521  01224E                     	endif
 16522  01224E  0008               	tblrd		*
 16523  012250  50F5               	movf	tablat,w,c
 16524  012252  0100               	movlb	0	; () banked
 16525  012254  6FBE               	movwf	___lldiv@divisor& (0+255),b
 16526  012256  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 16527  012258  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 16528  01225A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 16529  01225C  ECCB  F095         	call	___lldiv	;wreg free
 16530  012260  0100               	movlb	0	; () banked
 16531  012262  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 16532  012264  0100               	movlb	0	; () banked
 16533  012266  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 16534  012268  E1D1               	bnz	l10277
 16535  01226A  0100               	movlb	0	; () banked
 16536  01226C  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 16537  01226E  B0D8               	btfsc	status,0,c
 16538  012270  D7CD               	goto	l10277
 16539  012272                     l10287:
 16540                           
 16541                           ; BSR set to: 0
 16542                           ;Timer2.c: 33: }
 16543                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 16544  012272  50CA               	movf	4042,w,c	;volatile
 16545  012274  1832               	xorwf	Timer2_Init@INDEX,w,c
 16546  012276  0BFC               	andlw	-4
 16547  012278  1832               	xorwf	Timer2_Init@INDEX,w,c
 16548  01227A  6ECA               	movwf	4042,c	;volatile
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 16552  01227C  84CA               	bsf	4042,2,c	;volatile
 16553                           
 16554                           ; BSR set to: 0
 16555                           ;Timer2.c: 44: Timer2_Clear();
 16556  01227E  EC3C  F0A4         	call	_Timer2_Clear	;wreg free
 16557                           
 16558                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 16559  012282  5032               	movf	Timer2_Init@INDEX,w,c
 16560  012284  0D01               	mullw	1
 16561  012286  0EAA               	movlw	low Timer2_Init@PRESCALE
 16562  012288  24F3               	addwf	prodl,w,c
 16563  01228A  6EF6               	movwf	tblptrl,c
 16564  01228C  0EFD               	movlw	high Timer2_Init@PRESCALE
 16565  01228E  20F4               	addwfc	prodh,w,c
 16566  012290  6EF7               	movwf	tblptrh,c
 16567  012292                     	if	1	;There are 3 active tblptr bytes
 16568  012292  6AF8               	clrf	tblptru,c
 16569  012294  0E00               	movlw	low (__mediumconst shr (0+16))
 16570  012296  22F8               	addwfc	tblptru,f,c
 16571  012298                     	endif
 16572  012298  0008               	tblrd		*
 16573  01229A  CFF5 F033          	movff	tablat,Timer2_Init@PRE
 16574                           
 16575                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 16576  01229E  0EFF               	movlw	255
 16577  0122A0  0100               	movlb	0	; () banked
 16578  0122A2  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 16579  0122A4  0100               	movlb	0	; () banked
 16580  0122A6  6F64               	movwf	Timer2_Init@DIV& (0+255),b
 16581  0122A8  0EFF               	movlw	255
 16582  0122AA  0100               	movlb	0	; () banked
 16583  0122AC  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 16584  0122AE  0100               	movlb	0	; () banked
 16585  0122B0  6F65               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 16586  0122B2  0EFF               	movlw	255
 16587  0122B4  0100               	movlb	0	; () banked
 16588  0122B6  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 16589  0122B8  0100               	movlb	0	; () banked
 16590  0122BA  6F66               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 16591  0122BC  0EFF               	movlw	255
 16592  0122BE  0100               	movlb	0	; () banked
 16593  0122C0  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 16594  0122C2  0100               	movlb	0	; () banked
 16595  0122C4  6F67               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;Timer2.c: 48: INDEX = DIV/PRE;
 16599  0122C6  C064  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 16600  0122CA  C065  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 16601  0122CE  C066  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 16602  0122D2  C067  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 16603  0122D6  5033               	movf	Timer2_Init@PRE,w,c
 16604  0122D8  0100               	movlb	0	; () banked
 16605  0122DA  6FBE               	movwf	___lldiv@divisor& (0+255),b
 16606  0122DC  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 16607  0122DE  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 16608  0122E0  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 16609  0122E2  ECCB  F095         	call	___lldiv	;wreg free
 16610  0122E6  0100               	movlb	0	; () banked
 16611  0122E8  51BA               	movf	?___lldiv& (0+255),w,b
 16612  0122EA  6E32               	movwf	Timer2_Init@INDEX,c
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;Timer2.c: 49: PR2 = INDEX;
 16616  0122EC  C032  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 16617                           
 16618                           ; BSR set to: 0
 16619  0122F0  0012               	return		;funcret
 16620  0122F2                     __end_of_Timer2_Init:
 16621                           	opt stack 0
 16622                           tosu	equ	0xFFF
 16623                           tosh	equ	0xFFE
 16624                           tosl	equ	0xFFD
 16625                           pclath	equ	0xFFA
 16626                           tblptru	equ	0xFF8
 16627                           tblptrh	equ	0xFF7
 16628                           tblptrl	equ	0xFF6
 16629                           tablat	equ	0xFF5
 16630                           prodh	equ	0xFF4
 16631                           prodl	equ	0xFF3
 16632                           intcon	equ	0xFF2
 16633                           indf0	equ	0xFEF
 16634                           postinc0	equ	0xFEE
 16635                           fsr0h	equ	0xFEA
 16636                           fsr0l	equ	0xFE9
 16637                           wreg	equ	0xFE8
 16638                           indf1	equ	0xFE7
 16639                           postdec1	equ	0xFE5
 16640                           fsr1h	equ	0xFE2
 16641                           fsr1l	equ	0xFE1
 16642                           indf2	equ	0xFDF
 16643                           postinc2	equ	0xFDE
 16644                           postdec2	equ	0xFDD
 16645                           plusw2	equ	0xFDB
 16646                           fsr2h	equ	0xFDA
 16647                           fsr2l	equ	0xFD9
 16648                           status	equ	0xFD8
 16649                           
 16650 ;; *************** function ___lldiv *****************
 16651 ;; Defined at:
 16652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;  dividend        4    0[BANK0 ] unsigned long 
 16655 ;;  divisor         4    4[BANK0 ] unsigned long 
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;  quotient        4    8[BANK0 ] unsigned long 
 16658 ;;  counter         1   12[BANK0 ] unsigned char 
 16659 ;; Return value:  Size  Location     Type
 16660 ;;                  4    0[BANK0 ] unsigned long 
 16661 ;; Registers used:
 16662 ;;		wreg, status,2, status,0
 16663 ;; Tracked objects:
 16664 ;;		On entry : 0/0
 16665 ;;		On exit  : 0/0
 16666 ;;		Unchanged: 0/0
 16667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16668 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16669 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;Total ram usage:       13 bytes
 16673 ;; Hardware stack levels used:    1
 16674 ;; Hardware stack levels required when called:    7
 16675 ;; This function calls:
 16676 ;;		Nothing
 16677 ;; This function is called by:
 16678 ;;		_Timer0_Init
 16679 ;;		_Timer2_Init
 16680 ;;		_rand_between
 16681 ;;		_I2C_Init
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	text88
 16686  012B96                     __ptext88:
 16687                           	opt stack 0
 16688  012B96                     ___lldiv:
 16689                           	opt stack 21
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;incstack = 0
 16693  012B96  0E00               	movlw	0
 16694  012B98  0100               	movlb	0	; () banked
 16695  012B9A  6FC2               	movwf	___lldiv@quotient& (0+255),b
 16696  012B9C  0E00               	movlw	0
 16697  012B9E  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 16698  012BA0  0E00               	movlw	0
 16699  012BA2  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 16700  012BA4  0E00               	movlw	0
 16701  012BA6  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 16702                           
 16703                           ; BSR set to: 0
 16704  012BA8  0100               	movlb	0	; () banked
 16705  012BAA  51BE               	movf	___lldiv@divisor& (0+255),w,b
 16706  012BAC  0100               	movlb	0	; () banked
 16707  012BAE  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16708  012BB0  0100               	movlb	0	; () banked
 16709  012BB2  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16710  012BB4  0100               	movlb	0	; () banked
 16711  012BB6  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16712  012BB8  B4D8               	btfsc	status,2,c
 16713  012BBA  D042               	goto	l2397
 16714                           
 16715                           ; BSR set to: 0
 16716  012BBC  0E01               	movlw	1
 16717  012BBE  0100               	movlb	0	; () banked
 16718  012BC0  6FC6               	movwf	___lldiv@counter& (0+255),b
 16719  012BC2  D008               	goto	l10143
 16720  012BC4                     l10141:
 16721                           
 16722                           ; BSR set to: 0
 16723  012BC4  0100               	movlb	0	; () banked
 16724  012BC6  90D8               	bcf	status,0,c
 16725  012BC8  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 16726  012BCA  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16727  012BCC  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16728  012BCE  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16729  012BD0  0100               	movlb	0	; () banked
 16730  012BD2  2BC6               	incf	___lldiv@counter& (0+255),f,b
 16731  012BD4                     l10143:
 16732                           
 16733                           ; BSR set to: 0
 16734  012BD4  0100               	movlb	0	; () banked
 16735  012BD6  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16736  012BD8  D7F5               	goto	l10141
 16737  012BDA                     l10145:
 16738                           
 16739                           ; BSR set to: 0
 16740  012BDA  0100               	movlb	0	; () banked
 16741  012BDC  90D8               	bcf	status,0,c
 16742  012BDE  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 16743  012BE0  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16744  012BE2  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16745  012BE4  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16746                           
 16747                           ; BSR set to: 0
 16748  012BE6  0100               	movlb	0	; () banked
 16749  012BE8  51BE               	movf	___lldiv@divisor& (0+255),w,b
 16750  012BEA  0100               	movlb	0	; () banked
 16751  012BEC  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 16752  012BEE  0100               	movlb	0	; () banked
 16753  012BF0  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16754  012BF2  0100               	movlb	0	; () banked
 16755  012BF4  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16756  012BF6  0100               	movlb	0	; () banked
 16757  012BF8  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16758  012BFA  0100               	movlb	0	; () banked
 16759  012BFC  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16760  012BFE  0100               	movlb	0	; () banked
 16761  012C00  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16762  012C02  0100               	movlb	0	; () banked
 16763  012C04  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16764  012C06  A0D8               	btfss	status,0,c
 16765  012C08  D012               	goto	l10153
 16766                           
 16767                           ; BSR set to: 0
 16768  012C0A  0100               	movlb	0	; () banked
 16769  012C0C  51BE               	movf	___lldiv@divisor& (0+255),w,b
 16770  012C0E  0100               	movlb	0	; () banked
 16771  012C10  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 16772  012C12  0100               	movlb	0	; () banked
 16773  012C14  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16774  012C16  0100               	movlb	0	; () banked
 16775  012C18  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16776  012C1A  0100               	movlb	0	; () banked
 16777  012C1C  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16778  012C1E  0100               	movlb	0	; () banked
 16779  012C20  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16780  012C22  0100               	movlb	0	; () banked
 16781  012C24  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16782  012C26  0100               	movlb	0	; () banked
 16783  012C28  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16784                           
 16785                           ; BSR set to: 0
 16786  012C2A  0100               	movlb	0	; () banked
 16787  012C2C  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 16788  012C2E                     l10153:
 16789                           
 16790                           ; BSR set to: 0
 16791  012C2E  0100               	movlb	0	; () banked
 16792  012C30  90D8               	bcf	status,0,c
 16793  012C32  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16794  012C34  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16795  012C36  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16796  012C38  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 16797                           
 16798                           ; BSR set to: 0
 16799  012C3A  0100               	movlb	0	; () banked
 16800  012C3C  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 16801  012C3E  D7CD               	goto	l10145
 16802  012C40                     l2397:
 16803                           
 16804                           ; BSR set to: 0
 16805  012C40  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 16806  012C44  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 16807  012C48  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 16808  012C4C  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 16809                           
 16810                           ; BSR set to: 0
 16811  012C50  0012               	return		;funcret
 16812  012C52                     __end_of___lldiv:
 16813                           	opt stack 0
 16814                           tosu	equ	0xFFF
 16815                           tosh	equ	0xFFE
 16816                           tosl	equ	0xFFD
 16817                           pclath	equ	0xFFA
 16818                           tblptru	equ	0xFF8
 16819                           tblptrh	equ	0xFF7
 16820                           tblptrl	equ	0xFF6
 16821                           tablat	equ	0xFF5
 16822                           prodh	equ	0xFF4
 16823                           prodl	equ	0xFF3
 16824                           intcon	equ	0xFF2
 16825                           indf0	equ	0xFEF
 16826                           postinc0	equ	0xFEE
 16827                           fsr0h	equ	0xFEA
 16828                           fsr0l	equ	0xFE9
 16829                           wreg	equ	0xFE8
 16830                           indf1	equ	0xFE7
 16831                           postdec1	equ	0xFE5
 16832                           fsr1h	equ	0xFE2
 16833                           fsr1l	equ	0xFE1
 16834                           indf2	equ	0xFDF
 16835                           postinc2	equ	0xFDE
 16836                           postdec2	equ	0xFDD
 16837                           plusw2	equ	0xFDB
 16838                           fsr2h	equ	0xFDA
 16839                           fsr2l	equ	0xFD9
 16840                           status	equ	0xFD8
 16841                           
 16842 ;; *************** function _Timer2_Clear *****************
 16843 ;; Defined at:
 16844 ;;		line 3 in file "Library/Timer2.c"
 16845 ;; Parameters:    Size  Location     Type
 16846 ;;		None
 16847 ;; Auto vars:     Size  Location     Type
 16848 ;;		None
 16849 ;; Return value:  Size  Location     Type
 16850 ;;                  1    wreg      void 
 16851 ;; Registers used:
 16852 ;;		None
 16853 ;; Tracked objects:
 16854 ;;		On entry : 0/0
 16855 ;;		On exit  : 0/0
 16856 ;;		Unchanged: 0/0
 16857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16862 ;;Total ram usage:        0 bytes
 16863 ;; Hardware stack levels used:    1
 16864 ;; Hardware stack levels required when called:    7
 16865 ;; This function calls:
 16866 ;;		Nothing
 16867 ;; This function is called by:
 16868 ;;		_Timer2_Init
 16869 ;; This function uses a non-reentrant model
 16870 ;;
 16871                           
 16872                           	psect	text89
 16873  014878                     __ptext89:
 16874                           	opt stack 0
 16875  014878                     _Timer2_Clear:
 16876                           	opt stack 19
 16877                           
 16878                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;incstack = 0
 16882  014878  929E               	bcf	3998,1,c	;volatile
 16883                           
 16884                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16885  01487A  929D               	bcf	3997,1,c	;volatile
 16886                           
 16887                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16888  01487C  929F               	bcf	3999,1,c	;volatile
 16889  01487E  0012               	return		;funcret
 16890  014880                     __end_of_Timer2_Clear:
 16891                           	opt stack 0
 16892                           tosu	equ	0xFFF
 16893                           tosh	equ	0xFFE
 16894                           tosl	equ	0xFFD
 16895                           pclath	equ	0xFFA
 16896                           tblptru	equ	0xFF8
 16897                           tblptrh	equ	0xFF7
 16898                           tblptrl	equ	0xFF6
 16899                           tablat	equ	0xFF5
 16900                           prodh	equ	0xFF4
 16901                           prodl	equ	0xFF3
 16902                           intcon	equ	0xFF2
 16903                           indf0	equ	0xFEF
 16904                           postinc0	equ	0xFEE
 16905                           fsr0h	equ	0xFEA
 16906                           fsr0l	equ	0xFE9
 16907                           wreg	equ	0xFE8
 16908                           indf1	equ	0xFE7
 16909                           postdec1	equ	0xFE5
 16910                           fsr1h	equ	0xFE2
 16911                           fsr1l	equ	0xFE1
 16912                           indf2	equ	0xFDF
 16913                           postinc2	equ	0xFDE
 16914                           postdec2	equ	0xFDD
 16915                           plusw2	equ	0xFDB
 16916                           fsr2h	equ	0xFDA
 16917                           fsr2l	equ	0xFD9
 16918                           status	equ	0xFD8
 16919                           
 16920 ;; *************** function _SPI_DisableISR *****************
 16921 ;; Defined at:
 16922 ;;		line 181 in file "Library/SPI.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16925 ;;		 -> SPI1(11), SPI2(11), 
 16926 ;; Auto vars:     Size  Location     Type
 16927 ;;		None
 16928 ;; Return value:  Size  Location     Type
 16929 ;;                  1    wreg      void 
 16930 ;; Registers used:
 16931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16941 ;;Total ram usage:        2 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    7
 16944 ;; This function calls:
 16945 ;;		Nothing
 16946 ;; This function is called by:
 16947 ;;		_SPI_Init
 16948 ;; This function uses a non-reentrant model
 16949 ;;
 16950                           
 16951                           	psect	text90
 16952  014534                     __ptext90:
 16953                           	opt stack 0
 16954  014534                     _SPI_DisableISR:
 16955                           	opt stack 20
 16956                           
 16957                           ;SPI.c: 183: switch (pInput->mChannel)
 16958                           
 16959                           ;incstack = 0
 16960  014534  D004               	goto	l10305
 16961  014536                     l655:
 16962                           
 16963                           ; BSR set to: 0
 16964  014536  969D               	bcf	3997,3,c	;volatile
 16965  014538  0012               	return	
 16966  01453A                     l657:
 16967                           
 16968                           ; BSR set to: 0
 16969  01453A  9EA3               	bcf	4003,7,c	;volatile
 16970                           
 16971                           ; BSR set to: 0
 16972                           ;SPI.c: 188: };
 16973                           
 16974                           ; BSR set to: 0
 16975                           
 16976                           ;SPI.c: 187: default: return;
 16977  01453C  0012               	return	
 16978  01453E                     l10305:
 16979  01453E  0100               	movlb	0	; () banked
 16980  014540  EE20 F002          	lfsr	2,2
 16981  014544  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16982  014546  26D9               	addwf	fsr2l,f,c
 16983  014548  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16984  01454A  22DA               	addwfc	fsr2h,f,c
 16985  01454C  50DF               	movf	indf2,w,c
 16986                           
 16987                           ; Switch size 1, requested type "space"
 16988                           ; Number of cases is 2, Range of values is 0 to 1
 16989                           ; switch strategies available:
 16990                           ; Name         Instructions Cycles
 16991                           ; simple_byte            7     4 (average)
 16992                           ;	Chosen strategy is simple_byte
 16993  01454E  0A00               	xorlw	0	; case 0
 16994  014550  B4D8               	btfsc	status,2,c
 16995  014552  D7F1               	goto	l655
 16996  014554  0A01               	xorlw	1	; case 1
 16997  014556  A4D8               	btfss	status,2,c
 16998  014558  0012               	return	
 16999  01455A  D7EF               	goto	l657
 17000  01455C                     __end_of_SPI_DisableISR:
 17001                           	opt stack 0
 17002                           tosu	equ	0xFFF
 17003                           tosh	equ	0xFFE
 17004                           tosl	equ	0xFFD
 17005                           pclath	equ	0xFFA
 17006                           tblptru	equ	0xFF8
 17007                           tblptrh	equ	0xFF7
 17008                           tblptrl	equ	0xFF6
 17009                           tablat	equ	0xFF5
 17010                           prodh	equ	0xFF4
 17011                           prodl	equ	0xFF3
 17012                           intcon	equ	0xFF2
 17013                           indf0	equ	0xFEF
 17014                           postinc0	equ	0xFEE
 17015                           fsr0h	equ	0xFEA
 17016                           fsr0l	equ	0xFE9
 17017                           wreg	equ	0xFE8
 17018                           indf1	equ	0xFE7
 17019                           postdec1	equ	0xFE5
 17020                           fsr1h	equ	0xFE2
 17021                           fsr1l	equ	0xFE1
 17022                           indf2	equ	0xFDF
 17023                           postinc2	equ	0xFDE
 17024                           postdec2	equ	0xFDD
 17025                           plusw2	equ	0xFDB
 17026                           fsr2h	equ	0xFDA
 17027                           fsr2l	equ	0xFD9
 17028                           status	equ	0xFD8
 17029                           
 17030 ;; *************** function _SPI_DCS *****************
 17031 ;; Defined at:
 17032 ;;		line 219 in file "Library/SPI.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17035 ;;		 -> SPI1(11), SPI2(11), 
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;		None
 17038 ;; Return value:  Size  Location     Type
 17039 ;;                  1    wreg      void 
 17040 ;; Registers used:
 17041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;Total ram usage:        2 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    7
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		_SPI_Init
 17058 ;; This function uses a non-reentrant model
 17059 ;;
 17060                           
 17061                           	psect	text91
 17062  0143F8                     __ptext91:
 17063                           	opt stack 0
 17064  0143F8                     _SPI_DCS:
 17065                           	opt stack 20
 17066                           
 17067                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;incstack = 0
 17071  0143F8  0100               	movlb	0	; () banked
 17072  0143FA  EE20 F002          	lfsr	2,2
 17073  0143FE  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 17074  014400  26D9               	addwf	fsr2l,f,c
 17075  014402  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 17076  014404  22DA               	addwfc	fsr2h,f,c
 17077  014406  50DF               	movf	indf2,w,c
 17078  014408  A4D8               	btfss	status,2,c
 17079  01440A  D007               	goto	l10311
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 17083  01440C  C082  FFD9         	movff	_PortC+4,fsr2l
 17084  014410  C083  FFDA         	movff	_PortC+5,fsr2h
 17085  014414  0100               	movlb	0	; () banked
 17086  014416  84DF               	bsf	indf2,2,c
 17087  014418  0012               	return	
 17088  01441A                     l10311:
 17089                           
 17090                           ; BSR set to: 0
 17091                           ;SPI.c: 223: else
 17092                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 17093  01441A  C08C  FFD9         	movff	_PortD+4,fsr2l
 17094  01441E  C08D  FFDA         	movff	_PortD+5,fsr2h
 17095  014422  0100               	movlb	0	; () banked
 17096  014424  8EDF               	bsf	indf2,7,c
 17097  014426  0012               	return	
 17098  014428                     __end_of_SPI_DCS:
 17099                           	opt stack 0
 17100                           tosu	equ	0xFFF
 17101                           tosh	equ	0xFFE
 17102                           tosl	equ	0xFFD
 17103                           pclath	equ	0xFFA
 17104                           tblptru	equ	0xFF8
 17105                           tblptrh	equ	0xFF7
 17106                           tblptrl	equ	0xFF6
 17107                           tablat	equ	0xFF5
 17108                           prodh	equ	0xFF4
 17109                           prodl	equ	0xFF3
 17110                           intcon	equ	0xFF2
 17111                           indf0	equ	0xFEF
 17112                           postinc0	equ	0xFEE
 17113                           fsr0h	equ	0xFEA
 17114                           fsr0l	equ	0xFE9
 17115                           wreg	equ	0xFE8
 17116                           indf1	equ	0xFE7
 17117                           postdec1	equ	0xFE5
 17118                           fsr1h	equ	0xFE2
 17119                           fsr1l	equ	0xFE1
 17120                           indf2	equ	0xFDF
 17121                           postinc2	equ	0xFDE
 17122                           postdec2	equ	0xFDD
 17123                           plusw2	equ	0xFDB
 17124                           fsr2h	equ	0xFDA
 17125                           fsr2l	equ	0xFD9
 17126                           status	equ	0xFD8
 17127                           
 17128 ;; *************** function _Button_Init *****************
 17129 ;; Defined at:
 17130 ;;		line 18 in file "Library/Button.c"
 17131 ;; Parameters:    Size  Location     Type
 17132 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 17133 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17134 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 17135 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 17136 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17137 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 17138 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17139 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17140 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 17141 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 17142 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 17143 ;; Auto vars:     Size  Location     Type
 17144 ;;		None
 17145 ;; Return value:  Size  Location     Type
 17146 ;;                  1    wreg      void 
 17147 ;; Registers used:
 17148 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17149 ;; Tracked objects:
 17150 ;;		On entry : 0/0
 17151 ;;		On exit  : 0/0
 17152 ;;		Unchanged: 0/0
 17153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17154 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;Total ram usage:       13 bytes
 17159 ;; Hardware stack levels used:    1
 17160 ;; Hardware stack levels required when called:   15
 17161 ;; This function calls:
 17162 ;;		_HMI_InitButtons
 17163 ;;		_MXK_InitDIPSwitch
 17164 ;;		_MXK_InitTestButton
 17165 ;; This function is called by:
 17166 ;;		_HMI_Init
 17167 ;;		_FunctInitButton
 17168 ;; This function uses a non-reentrant model
 17169 ;;
 17170                           
 17171                           	psect	text92
 17172  0127AE                     __ptext92:
 17173                           	opt stack 0
 17174  0127AE                     _Button_Init:
 17175                           	opt stack 14
 17176                           
 17177                           ;Button.c: 21: if(pInput==(void*)0)
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;incstack = 0
 17181  0127AE  0101               	movlb	1	; () banked
 17182  0127B0  51BB               	movf	Button_Init@pInput& (0+255),w,b
 17183  0127B2  0101               	movlb	1	; () banked
 17184  0127B4  11BC               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17185  0127B6  B4D8               	btfsc	status,2,c
 17186  0127B8  0012               	return	
 17187                           
 17188                           ; BSR set to: 1
 17189                           ;Button.c: 23: if(pInitIO==(void*)0)
 17190                           
 17191                           ; BSR set to: 1
 17192                           
 17193                           ; BSR set to: 1
 17194                           ;Button.c: 22: return;
 17195  0127BA  0101               	movlb	1	; () banked
 17196  0127BC  51BF               	movf	Button_Init@pInitIO& (0+255),w,b
 17197  0127BE  0101               	movlb	1	; () banked
 17198  0127C0  11C0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17199  0127C2  0101               	movlb	1	; () banked
 17200  0127C4  11C1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17201  0127C6  B4D8               	btfsc	status,2,c
 17202  0127C8  0012               	return	
 17203                           
 17204                           ; BSR set to: 1
 17205                           ;Button.c: 25: if(pGetState==(void*)0)
 17206                           
 17207                           ; BSR set to: 1
 17208                           
 17209                           ; BSR set to: 1
 17210                           ;Button.c: 24: return;
 17211  0127CA  0101               	movlb	1	; () banked
 17212  0127CC  51C2               	movf	Button_Init@pGetState& (0+255),w,b
 17213  0127CE  0101               	movlb	1	; () banked
 17214  0127D0  11C3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 17215  0127D2  0101               	movlb	1	; () banked
 17216  0127D4  11C4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 17217  0127D6  B4D8               	btfsc	status,2,c
 17218  0127D8  0012               	return	
 17219                           
 17220                           ; BSR set to: 1
 17221                           ;Button.c: 27: if(pFunction==(void*)0)
 17222                           
 17223                           ; BSR set to: 1
 17224                           
 17225                           ; BSR set to: 1
 17226                           ;Button.c: 26: return;
 17227  0127DA  0101               	movlb	1	; () banked
 17228  0127DC  51C5               	movf	Button_Init@pFunction& (0+255),w,b
 17229  0127DE  0101               	movlb	1	; () banked
 17230  0127E0  11C6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 17231  0127E2  0101               	movlb	1	; () banked
 17232  0127E4  11C7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 17233  0127E6  B4D8               	btfsc	status,2,c
 17234  0127E8  0012               	return	
 17235                           
 17236                           ; BSR set to: 1
 17237                           ;Button.c: 30: if(pThreshold == 0)
 17238                           
 17239                           ; BSR set to: 1
 17240                           
 17241                           ; BSR set to: 1
 17242                           ;Button.c: 28: return;
 17243  0127EA  0101               	movlb	1	; () banked
 17244  0127EC  51BD               	movf	Button_Init@pThreshold& (0+255),w,b
 17245  0127EE  0101               	movlb	1	; () banked
 17246  0127F0  11BE               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 17247  0127F2  A4D8               	btfss	status,2,c
 17248  0127F4  D005               	goto	l11005
 17249                           
 17250                           ; BSR set to: 1
 17251                           ;Button.c: 31: pThreshold = 1;
 17252  0127F6  0E00               	movlw	0
 17253  0127F8  0101               	movlb	1	; () banked
 17254  0127FA  6FBE               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17255  0127FC  0E01               	movlw	1
 17256  0127FE  6FBD               	movwf	Button_Init@pThreshold& (0+255),b
 17257  012800                     l11005:
 17258                           
 17259                           ; BSR set to: 1
 17260                           ;Button.c: 34: pInput->mState = 0;
 17261  012800  C1BB  FFD9         	movff	Button_Init@pInput,fsr2l
 17262  012804  C1BC  FFDA         	movff	Button_Init@pInput+1,fsr2h
 17263  012808  0E00               	movlw	0
 17264  01280A  6EDF               	movwf	indf2,c
 17265                           
 17266                           ; BSR set to: 1
 17267                           ;Button.c: 35: pInput->mCount = 0;
 17268  01280C  0101               	movlb	1	; () banked
 17269  01280E  EE20 F001          	lfsr	2,1
 17270  012812  51BB               	movf	Button_Init@pInput& (0+255),w,b
 17271  012814  26D9               	addwf	fsr2l,f,c
 17272  012816  51BC               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17273  012818  22DA               	addwfc	fsr2h,f,c
 17274  01281A  0E00               	movlw	0
 17275  01281C  6EDF               	movwf	indf2,c
 17276                           
 17277                           ; BSR set to: 1
 17278                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 17279  01281E  0101               	movlb	1	; () banked
 17280  012820  EE20 F002          	lfsr	2,2
 17281  012824  51BB               	movf	Button_Init@pInput& (0+255),w,b
 17282  012826  26D9               	addwf	fsr2l,f,c
 17283  012828  51BC               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17284  01282A  22DA               	addwfc	fsr2h,f,c
 17285  01282C  C1BD  FFDE         	movff	Button_Init@pThreshold,postinc2
 17286  012830  C1BE  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 17287                           
 17288                           ; BSR set to: 1
 17289                           ;Button.c: 37: pInput->mFunction = pFunction;
 17290  012834  0101               	movlb	1	; () banked
 17291  012836  EE20 F004          	lfsr	2,4
 17292  01283A  51BB               	movf	Button_Init@pInput& (0+255),w,b
 17293  01283C  26D9               	addwf	fsr2l,f,c
 17294  01283E  51BC               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17295  012840  22DA               	addwfc	fsr2h,f,c
 17296  012842  C1C5  FFDE         	movff	Button_Init@pFunction,postinc2
 17297  012846  C1C6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 17298  01284A  C1C7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 17299                           
 17300                           ; BSR set to: 1
 17301                           ;Button.c: 38: pInput->mGetState = pGetState;
 17302  01284E  0101               	movlb	1	; () banked
 17303  012850  EE20 F007          	lfsr	2,7
 17304  012854  51BB               	movf	Button_Init@pInput& (0+255),w,b
 17305  012856  26D9               	addwf	fsr2l,f,c
 17306  012858  51BC               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17307  01285A  22DA               	addwfc	fsr2h,f,c
 17308  01285C  C1C2  FFDE         	movff	Button_Init@pGetState,postinc2
 17309  012860  C1C3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 17310  012864  C1C4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 17311                           
 17312                           ; BSR set to: 1
 17313                           ;Button.c: 41: pInitIO();
 17314  012868  D801               	call	u7428
 17315  01286A  0012               	return	
 17316  01286C                     u7428:
 17317  01286C  0005               	push	
 17318  01286E  6EFA               	movwf	pclath,c
 17319  012870  0101               	movlb	1	; () banked
 17320  012872  51BF               	movf	Button_Init@pInitIO& (0+255),w,b
 17321  012874  6EFD               	movwf	tosl,c
 17322  012876  51C0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 17323  012878  6EFE               	movwf	tosh,c
 17324  01287A  51C1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 17325  01287C  6EFF               	movwf	tosu,c
 17326  01287E  50FA               	movf	pclath,w,c
 17327  012880  0012               	return		;indir
 17328  012882                     __end_of_Button_Init:
 17329                           	opt stack 0
 17330                           tosu	equ	0xFFF
 17331                           tosh	equ	0xFFE
 17332                           tosl	equ	0xFFD
 17333                           pclath	equ	0xFFA
 17334                           tblptru	equ	0xFF8
 17335                           tblptrh	equ	0xFF7
 17336                           tblptrl	equ	0xFF6
 17337                           tablat	equ	0xFF5
 17338                           prodh	equ	0xFF4
 17339                           prodl	equ	0xFF3
 17340                           intcon	equ	0xFF2
 17341                           indf0	equ	0xFEF
 17342                           postinc0	equ	0xFEE
 17343                           fsr0h	equ	0xFEA
 17344                           fsr0l	equ	0xFE9
 17345                           wreg	equ	0xFE8
 17346                           indf1	equ	0xFE7
 17347                           postdec1	equ	0xFE5
 17348                           fsr1h	equ	0xFE2
 17349                           fsr1l	equ	0xFE1
 17350                           indf2	equ	0xFDF
 17351                           postinc2	equ	0xFDE
 17352                           postdec2	equ	0xFDD
 17353                           plusw2	equ	0xFDB
 17354                           fsr2h	equ	0xFDA
 17355                           fsr2l	equ	0xFD9
 17356                           status	equ	0xFD8
 17357                           
 17358 ;; *************** function _MXK_InitDIPSwitch *****************
 17359 ;; Defined at:
 17360 ;;		line 20 in file "Library/MXK.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;		None
 17363 ;; Auto vars:     Size  Location     Type
 17364 ;;		None
 17365 ;; Return value:  Size  Location     Type
 17366 ;;                  1    wreg      void 
 17367 ;; Registers used:
 17368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 0/0
 17371 ;;		On exit  : 0/0
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17378 ;;Total ram usage:        0 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:   14
 17381 ;; This function calls:
 17382 ;;		_Port_SetQuadType
 17383 ;; This function is called by:
 17384 ;;		_FunctInitButton
 17385 ;;		_Button_Init
 17386 ;; This function uses a non-reentrant model
 17387 ;;
 17388                           
 17389                           	psect	text93
 17390  014622                     __ptext93:
 17391                           	opt stack 0
 17392  014622                     _MXK_InitDIPSwitch:
 17393                           	opt stack 14
 17394                           
 17395                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 17396                           
 17397                           ;incstack = 0
 17398  014622  0E88               	movlw	low _PortD
 17399  014624  0100               	movlb	0	; () banked
 17400  014626  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 17401  014628  0E00               	movlw	high _PortD
 17402  01462A  0100               	movlb	0	; () banked
 17403  01462C  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 17404  01462E  0E00               	movlw	0
 17405  014630  0100               	movlb	0	; () banked
 17406  014632  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 17407  014634  0E00               	movlw	0
 17408  014636  0100               	movlb	0	; () banked
 17409  014638  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 17410  01463A  EC6A  F086         	call	_Port_SetQuadType	;wreg free
 17411  01463E  0012               	return		;funcret
 17412  014640                     __end_of_MXK_InitDIPSwitch:
 17413                           	opt stack 0
 17414                           tosu	equ	0xFFF
 17415                           tosh	equ	0xFFE
 17416                           tosl	equ	0xFFD
 17417                           pclath	equ	0xFFA
 17418                           tblptru	equ	0xFF8
 17419                           tblptrh	equ	0xFF7
 17420                           tblptrl	equ	0xFF6
 17421                           tablat	equ	0xFF5
 17422                           prodh	equ	0xFF4
 17423                           prodl	equ	0xFF3
 17424                           intcon	equ	0xFF2
 17425                           indf0	equ	0xFEF
 17426                           postinc0	equ	0xFEE
 17427                           fsr0h	equ	0xFEA
 17428                           fsr0l	equ	0xFE9
 17429                           wreg	equ	0xFE8
 17430                           indf1	equ	0xFE7
 17431                           postdec1	equ	0xFE5
 17432                           fsr1h	equ	0xFE2
 17433                           fsr1l	equ	0xFE1
 17434                           indf2	equ	0xFDF
 17435                           postinc2	equ	0xFDE
 17436                           postdec2	equ	0xFDD
 17437                           plusw2	equ	0xFDB
 17438                           fsr2h	equ	0xFDA
 17439                           fsr2l	equ	0xFD9
 17440                           status	equ	0xFD8
 17441                           
 17442 ;; *************** function _HMI_InitButtons *****************
 17443 ;; Defined at:
 17444 ;;		line 21 in file "HMI.c"
 17445 ;; Parameters:    Size  Location     Type
 17446 ;;		None
 17447 ;; Auto vars:     Size  Location     Type
 17448 ;;		None
 17449 ;; Return value:  Size  Location     Type
 17450 ;;                  1    wreg      void 
 17451 ;; Registers used:
 17452 ;;		None
 17453 ;; Tracked objects:
 17454 ;;		On entry : 0/0
 17455 ;;		On exit  : 0/0
 17456 ;;		Unchanged: 0/0
 17457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;Total ram usage:        0 bytes
 17463 ;; Hardware stack levels used:    1
 17464 ;; Hardware stack levels required when called:    7
 17465 ;; This function calls:
 17466 ;;		Nothing
 17467 ;; This function is called by:
 17468 ;;		_HMI_Init
 17469 ;;		_Button_Init
 17470 ;; This function uses a non-reentrant model
 17471 ;;
 17472                           
 17473                           	psect	text94
 17474  0148A0                     __ptext94:
 17475                           	opt stack 0
 17476  0148A0                     _HMI_InitButtons:
 17477                           	opt stack 21
 17478                           
 17479                           ;HMI.c: 23: TRISE = 0xFF;
 17480                           
 17481                           ;incstack = 0
 17482  0148A0  6896               	setf	3990,c	;volatile
 17483  0148A2  0012               	return		;funcret
 17484  0148A4                     __end_of_HMI_InitButtons:
 17485                           	opt stack 0
 17486                           tosu	equ	0xFFF
 17487                           tosh	equ	0xFFE
 17488                           tosl	equ	0xFFD
 17489                           pclath	equ	0xFFA
 17490                           tblptru	equ	0xFF8
 17491                           tblptrh	equ	0xFF7
 17492                           tblptrl	equ	0xFF6
 17493                           tablat	equ	0xFF5
 17494                           prodh	equ	0xFF4
 17495                           prodl	equ	0xFF3
 17496                           intcon	equ	0xFF2
 17497                           indf0	equ	0xFEF
 17498                           postinc0	equ	0xFEE
 17499                           fsr0h	equ	0xFEA
 17500                           fsr0l	equ	0xFE9
 17501                           wreg	equ	0xFE8
 17502                           indf1	equ	0xFE7
 17503                           postdec1	equ	0xFE5
 17504                           fsr1h	equ	0xFE2
 17505                           fsr1l	equ	0xFE1
 17506                           indf2	equ	0xFDF
 17507                           postinc2	equ	0xFDE
 17508                           postdec2	equ	0xFDD
 17509                           plusw2	equ	0xFDB
 17510                           fsr2h	equ	0xFDA
 17511                           fsr2l	equ	0xFD9
 17512                           status	equ	0xFD8
 17513                           
 17514 ;; *************** function _MXK_InitTestButton *****************
 17515 ;; Defined at:
 17516 ;;		line 10 in file "Library/MXK.c"
 17517 ;; Parameters:    Size  Location     Type
 17518 ;;		None
 17519 ;; Auto vars:     Size  Location     Type
 17520 ;;		None
 17521 ;; Return value:  Size  Location     Type
 17522 ;;                  1    wreg      void 
 17523 ;; Registers used:
 17524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17525 ;; Tracked objects:
 17526 ;;		On entry : 0/0
 17527 ;;		On exit  : 0/0
 17528 ;;		Unchanged: 0/0
 17529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17534 ;;Total ram usage:        0 bytes
 17535 ;; Hardware stack levels used:    1
 17536 ;; Hardware stack levels required when called:   12
 17537 ;; This function calls:
 17538 ;;		_Port_SetPinType
 17539 ;; This function is called by:
 17540 ;;		_FunctInitButton
 17541 ;;		_Button_Init
 17542 ;; This function uses a non-reentrant model
 17543 ;;
 17544                           
 17545                           	psect	text95
 17546  014640                     __ptext95:
 17547                           	opt stack 0
 17548  014640                     _MXK_InitTestButton:
 17549                           	opt stack 16
 17550                           
 17551                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 17552                           
 17553                           ;incstack = 0
 17554  014640  0E8E               	movlw	low _PortB
 17555  014642  0100               	movlb	0	; () banked
 17556  014644  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 17557  014646  0E01               	movlw	high _PortB
 17558  014648  0100               	movlb	0	; () banked
 17559  01464A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17560  01464C  0E04               	movlw	4
 17561  01464E  0100               	movlb	0	; () banked
 17562  014650  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 17563  014652  0E00               	movlw	0
 17564  014654  0100               	movlb	0	; () banked
 17565  014656  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 17566  014658  EC8E  F08B         	call	_Port_SetPinType	;wreg free
 17567  01465C  0012               	return		;funcret
 17568  01465E                     __end_of_MXK_InitTestButton:
 17569                           	opt stack 0
 17570                           tosu	equ	0xFFF
 17571                           tosh	equ	0xFFE
 17572                           tosl	equ	0xFFD
 17573                           pclath	equ	0xFFA
 17574                           tblptru	equ	0xFF8
 17575                           tblptrh	equ	0xFF7
 17576                           tblptrl	equ	0xFF6
 17577                           tablat	equ	0xFF5
 17578                           prodh	equ	0xFF4
 17579                           prodl	equ	0xFF3
 17580                           intcon	equ	0xFF2
 17581                           indf0	equ	0xFEF
 17582                           postinc0	equ	0xFEE
 17583                           fsr0h	equ	0xFEA
 17584                           fsr0l	equ	0xFE9
 17585                           wreg	equ	0xFE8
 17586                           indf1	equ	0xFE7
 17587                           postdec1	equ	0xFE5
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           indf2	equ	0xFDF
 17591                           postinc2	equ	0xFDE
 17592                           postdec2	equ	0xFDD
 17593                           plusw2	equ	0xFDB
 17594                           fsr2h	equ	0xFDA
 17595                           fsr2l	equ	0xFD9
 17596                           status	equ	0xFD8
 17597                           
 17598 ;; *************** function _Port_SetPinType *****************
 17599 ;; Defined at:
 17600 ;;		line 189 in file "Library/Port.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17603 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17604 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17605 ;;  pPin            1   40[BANK0 ] enum E7694
 17606 ;;  pType           1   41[BANK0 ] enum E7739
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 17609 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 17610 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 17611 ;;  Output          1   42[BANK0 ] enum E7419
 17612 ;; Return value:  Size  Location     Type
 17613 ;;                  1    wreg      enum E7419
 17614 ;; Registers used:
 17615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17616 ;; Tracked objects:
 17617 ;;		On entry : 0/0
 17618 ;;		On exit  : 0/0
 17619 ;;		Unchanged: 0/0
 17620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17622 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;Total ram usage:        7 bytes
 17626 ;; Hardware stack levels used:    1
 17627 ;; Hardware stack levels required when called:   11
 17628 ;; This function calls:
 17629 ;;		_Byte_SetBit
 17630 ;;		_PortProperty_Valid
 17631 ;;		_Word_SetPair
 17632 ;; This function is called by:
 17633 ;;		_Configure_GPIOs
 17634 ;;		_LED_Init
 17635 ;;		_Port_Init
 17636 ;;		_SPI_Init
 17637 ;;		_Motor_Init
 17638 ;;		_MXK_InitTestButton
 17639 ;;		_MXK_Init
 17640 ;;		_I2C_Init
 17641 ;; This function uses a non-reentrant model
 17642 ;;
 17643                           
 17644                           	psect	text96
 17645  01171C                     __ptext96:
 17646                           	opt stack 0
 17647  01171C                     _Port_SetPinType:
 17648                           	opt stack 18
 17649                           
 17650                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17651                           
 17652                           ;incstack = 0
 17653  01171C  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17654  011720  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17655  011724  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 17656  011728  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 17657                           
 17658                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17659  01172C  0E05               	movlw	5
 17660  01172E  0100               	movlb	0	; () banked
 17661  011730  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 17662                           
 17663                           ;Port.c: 193: switch (pType)
 17664  011732  D0B5               	goto	l10189
 17665  011734                     l10169:
 17666                           
 17667                           ; BSR set to: 0
 17668                           ;Port.c: 197: {
 17669                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17670  011734  0100               	movlb	0	; () banked
 17671  011736  EE20 F002          	lfsr	2,2
 17672  01173A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17673  01173C  26D9               	addwf	fsr2l,f,c
 17674  01173E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17675  011740  22DA               	addwfc	fsr2h,f,c
 17676  011742  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17677  011746  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17678  01174A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17679  01174E  0E01               	movlw	1
 17680  011750  0100               	movlb	0	; () banked
 17681  011752  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17682  011754  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17683                           
 17684                           ;Port.c: 203: break;
 17685  011758  D0B0               	goto	l10191
 17686  01175A                     l10171:
 17687                           
 17688                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17689  01175A  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17690  01175E  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17691  011762  0E01               	movlw	1
 17692  011764  0100               	movlb	0	; () banked
 17693  011766  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17694  011768  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17695  01176C  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 17696  011770  0100               	movlb	0	; () banked
 17697  011772  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 17698  011774  0100               	movlb	0	; () banked
 17699  011776  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 17700  011778  A4D8               	btfss	status,2,c
 17701  01177A  0012               	return	
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;Port.c: 208: {
 17705                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17706  01177C  0100               	movlb	0	; () banked
 17707  01177E  EE20 F002          	lfsr	2,2
 17708  011782  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17709  011784  26D9               	addwf	fsr2l,f,c
 17710  011786  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17711  011788  22DA               	addwfc	fsr2h,f,c
 17712  01178A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17713  01178E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17714  011792  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17715  011796  0E00               	movlw	0
 17716  011798  0100               	movlb	0	; () banked
 17717  01179A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17718  01179C  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17719                           
 17720                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17721  0117A0  0100               	movlb	0	; () banked
 17722  0117A2  EE20 F004          	lfsr	2,4
 17723  0117A6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17724  0117A8  26D9               	addwf	fsr2l,f,c
 17725  0117AA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17726  0117AC  22DA               	addwfc	fsr2h,f,c
 17727  0117AE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17728  0117B2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17729  0117B6  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17730  0117BA  0E00               	movlw	0
 17731  0117BC  0100               	movlb	0	; () banked
 17732  0117BE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17733  0117C0  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17734                           
 17735                           ;Port.c: 214: break;
 17736  0117C4  D07A               	goto	l10191
 17737  0117C6                     l10177:
 17738                           
 17739                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17740  0117C6  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17741  0117CA  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17742  0117CE  0E02               	movlw	2
 17743  0117D0  0100               	movlb	0	; () banked
 17744  0117D2  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17745  0117D4  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17746  0117D8  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 17747  0117DC  0100               	movlb	0	; () banked
 17748  0117DE  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 17749  0117E0  0100               	movlb	0	; () banked
 17750  0117E2  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 17751  0117E4  A4D8               	btfss	status,2,c
 17752  0117E6  0012               	return	
 17753                           
 17754                           ; BSR set to: 0
 17755                           ;Port.c: 220: {
 17756                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17757  0117E8  0100               	movlb	0	; () banked
 17758  0117EA  EE20 F002          	lfsr	2,2
 17759  0117EE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17760  0117F0  26D9               	addwf	fsr2l,f,c
 17761  0117F2  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17762  0117F4  22DA               	addwfc	fsr2h,f,c
 17763  0117F6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17764  0117FA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17765  0117FE  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17766  011802  0E01               	movlw	1
 17767  011804  0100               	movlb	0	; () banked
 17768  011806  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17769  011808  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17770                           
 17771                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17772  01180C  0100               	movlb	0	; () banked
 17773  01180E  EE20 F004          	lfsr	2,4
 17774  011812  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17775  011814  26D9               	addwf	fsr2l,f,c
 17776  011816  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17777  011818  22DA               	addwfc	fsr2h,f,c
 17778  01181A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17779  01181E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17780  011822  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17781  011826  0E01               	movlw	1
 17782  011828  0100               	movlb	0	; () banked
 17783  01182A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17784  01182C  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17785                           
 17786                           ;Port.c: 226: break;
 17787  011830  D044               	goto	l10191
 17788  011832                     l10183:
 17789                           
 17790                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17791  011832  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17792  011836  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17793  01183A  0E00               	movlw	0
 17794  01183C  0100               	movlb	0	; () banked
 17795  01183E  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17796  011840  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17797  011844  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 17798  011848  0100               	movlb	0	; () banked
 17799  01184A  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 17800  01184C  0100               	movlb	0	; () banked
 17801  01184E  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 17802  011850  A4D8               	btfss	status,2,c
 17803  011852  0012               	return	
 17804                           
 17805                           ; BSR set to: 0
 17806                           ;Port.c: 232: {
 17807                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17808  011854  0100               	movlb	0	; () banked
 17809  011856  EE20 F002          	lfsr	2,2
 17810  01185A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17811  01185C  26D9               	addwf	fsr2l,f,c
 17812  01185E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17813  011860  22DA               	addwfc	fsr2h,f,c
 17814  011862  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17815  011866  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17816  01186A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17817  01186E  0E00               	movlw	0
 17818  011870  0100               	movlb	0	; () banked
 17819  011872  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17820  011874  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17821                           
 17822                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17823  011878  0100               	movlb	0	; () banked
 17824  01187A  EE20 F004          	lfsr	2,4
 17825  01187E  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 17826  011880  26D9               	addwf	fsr2l,f,c
 17827  011882  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17828  011884  22DA               	addwfc	fsr2h,f,c
 17829  011886  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 17830  01188A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 17831  01188E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17832  011892  0E00               	movlw	0
 17833  011894  0100               	movlb	0	; () banked
 17834  011896  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 17835  011898  ECA0  F09D         	call	_Byte_SetBit	;wreg free
 17836                           
 17837                           ;Port.c: 239: }
 17838                           
 17839                           ;Port.c: 238: break;
 17840  01189C  D00E               	goto	l10191
 17841  01189E                     l10189:
 17842  01189E  0100               	movlb	0	; () banked
 17843  0118A0  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 17844                           
 17845                           ; Switch size 1, requested type "space"
 17846                           ; Number of cases is 4, Range of values is 0 to 3
 17847                           ; switch strategies available:
 17848                           ; Name         Instructions Cycles
 17849                           ; simple_byte           13     7 (average)
 17850                           ;	Chosen strategy is simple_byte
 17851  0118A2  0A00               	xorlw	0	; case 0
 17852  0118A4  B4D8               	btfsc	status,2,c
 17853  0118A6  D746               	goto	l10169
 17854  0118A8  0A01               	xorlw	1	; case 1
 17855  0118AA  B4D8               	btfsc	status,2,c
 17856  0118AC  D756               	goto	l10171
 17857  0118AE  0A03               	xorlw	3	; case 2
 17858  0118B0  B4D8               	btfsc	status,2,c
 17859  0118B2  D789               	goto	l10177
 17860  0118B4  0A01               	xorlw	1	; case 3
 17861  0118B6  B4D8               	btfsc	status,2,c
 17862  0118B8  D7BC               	goto	l10183
 17863  0118BA                     l10191:
 17864                           
 17865                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17866  0118BA  0E08               	movlw	8
 17867  0118BC  0100               	movlb	0	; () banked
 17868  0118BE  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17869  0118C0  0100               	movlb	0	; () banked
 17870  0118C2  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 17871  0118C4  0E00               	movlw	0
 17872  0118C6  0100               	movlb	0	; () banked
 17873  0118C8  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17874  0118CA  0100               	movlb	0	; () banked
 17875  0118CC  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17876  0118CE  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17877  0118D2  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17878  0118D6  EC0F  F0A0         	call	_Word_SetPair	;wreg free
 17879  0118DA  0012               	return	
 17880  0118DC                     __end_of_Port_SetPinType:
 17881                           	opt stack 0
 17882                           tosu	equ	0xFFF
 17883                           tosh	equ	0xFFE
 17884                           tosl	equ	0xFFD
 17885                           pclath	equ	0xFFA
 17886                           tblptru	equ	0xFF8
 17887                           tblptrh	equ	0xFF7
 17888                           tblptrl	equ	0xFF6
 17889                           tablat	equ	0xFF5
 17890                           prodh	equ	0xFF4
 17891                           prodl	equ	0xFF3
 17892                           intcon	equ	0xFF2
 17893                           indf0	equ	0xFEF
 17894                           postinc0	equ	0xFEE
 17895                           fsr0h	equ	0xFEA
 17896                           fsr0l	equ	0xFE9
 17897                           wreg	equ	0xFE8
 17898                           indf1	equ	0xFE7
 17899                           postdec1	equ	0xFE5
 17900                           fsr1h	equ	0xFE2
 17901                           fsr1l	equ	0xFE1
 17902                           indf2	equ	0xFDF
 17903                           postinc2	equ	0xFDE
 17904                           postdec2	equ	0xFDD
 17905                           plusw2	equ	0xFDB
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function _Byte_SetBit *****************
 17911 ;; Defined at:
 17912 ;;		line 32 in file "Library/Types.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17915 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17916 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17917 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17918 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17919 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17920 ;;		 -> NULL(0), 
 17921 ;;  pBit            1    2[BANK0 ] unsigned char 
 17922 ;;  pValue          1    3[BANK0 ] unsigned char 
 17923 ;; Auto vars:     Size  Location     Type
 17924 ;;		None
 17925 ;; Return value:  Size  Location     Type
 17926 ;;                  1    wreg      void 
 17927 ;; Registers used:
 17928 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17929 ;; Tracked objects:
 17930 ;;		On entry : 0/0
 17931 ;;		On exit  : 0/0
 17932 ;;		Unchanged: 0/0
 17933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17934 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17936 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17937 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;Total ram usage:        7 bytes
 17939 ;; Hardware stack levels used:    1
 17940 ;; Hardware stack levels required when called:    7
 17941 ;; This function calls:
 17942 ;;		Nothing
 17943 ;; This function is called by:
 17944 ;;		_Port_SetPinType
 17945 ;;		_Port_SetPin
 17946 ;;		_SPI_Init
 17947 ;;		_SPI_MinSpeed
 17948 ;;		_SPI_MaxSpeed
 17949 ;;		_Word_SetBit
 17950 ;;		_I2C_Init
 17951 ;; This function uses a non-reentrant model
 17952 ;;
 17953                           
 17954                           	psect	text97
 17955  013B40                     __ptext97:
 17956                           	opt stack 0
 17957  013B40                     _Byte_SetBit:
 17958                           	opt stack 21
 17959                           
 17960                           ;Types.c: 34: pValue &= 1;
 17961                           
 17962                           ;incstack = 0
 17963  013B40  0E01               	movlw	1
 17964  013B42  0100               	movlb	0	; () banked
 17965  013B44  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17969  013B46  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17970  013B4A  0E01               	movlw	1
 17971  013B4C  0100               	movlb	0	; () banked
 17972  013B4E  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17973  013B50  0100               	movlb	0	; () banked
 17974  013B52  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 17975  013B54  D003               	goto	u6284
 17976  013B56                     u6285:
 17977  013B56  0100               	movlb	0	; () banked
 17978  013B58  90D8               	bcf	status,0,c
 17979  013B5A  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17980  013B5C                     u6284:
 17981  013B5C  0100               	movlb	0	; () banked
 17982  013B5E  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 17983  013B60  D7FA               	goto	u6285
 17984  013B62  0100               	movlb	0	; () banked
 17985  013B64  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17986  013B66  0AFF               	xorlw	255
 17987  013B68  0100               	movlb	0	; () banked
 17988  013B6A  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17989  013B6C  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17990  013B70  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17991  013B74  0100               	movlb	0	; () banked
 17992  013B76  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17993  013B78  16DF               	andwf	indf2,f,c
 17994                           
 17995                           ; BSR set to: 0
 17996                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17997  013B7A  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17998  013B7E  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17999  013B82  0100               	movlb	0	; () banked
 18000  013B84  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 18001  013B86  D003               	goto	u6294
 18002  013B88                     u6295:
 18003  013B88  0100               	movlb	0	; () banked
 18004  013B8A  90D8               	bcf	status,0,c
 18005  013B8C  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18006  013B8E                     u6294:
 18007  013B8E  0100               	movlb	0	; () banked
 18008  013B90  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 18009  013B92  D7FA               	goto	u6295
 18010  013B94  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18011  013B98  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18012  013B9C  0100               	movlb	0	; () banked
 18013  013B9E  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18014  013BA0  12DF               	iorwf	indf2,f,c
 18015                           
 18016                           ; BSR set to: 0
 18017  013BA2  0012               	return		;funcret
 18018  013BA4                     __end_of_Byte_SetBit:
 18019                           	opt stack 0
 18020                           tosu	equ	0xFFF
 18021                           tosh	equ	0xFFE
 18022                           tosl	equ	0xFFD
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           indf0	equ	0xFEF
 18032                           postinc0	equ	0xFEE
 18033                           fsr0h	equ	0xFEA
 18034                           fsr0l	equ	0xFE9
 18035                           wreg	equ	0xFE8
 18036                           indf1	equ	0xFE7
 18037                           postdec1	equ	0xFE5
 18038                           fsr1h	equ	0xFE2
 18039                           fsr1l	equ	0xFE1
 18040                           indf2	equ	0xFDF
 18041                           postinc2	equ	0xFDE
 18042                           postdec2	equ	0xFDD
 18043                           plusw2	equ	0xFDB
 18044                           fsr2h	equ	0xFDA
 18045                           fsr2l	equ	0xFD9
 18046                           status	equ	0xFD8
 18047                           
 18048 ;; *************** function _Port_SetQuadType *****************
 18049 ;; Defined at:
 18050 ;;		line 399 in file "Library/Port.c"
 18051 ;; Parameters:    Size  Location     Type
 18052 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 18053 ;;		 -> PortB(10), PortD(10), 
 18054 ;;  pQuad           1   56[BANK0 ] enum E7720
 18055 ;;  pType           1   57[BANK0 ] enum E7739
 18056 ;; Auto vars:     Size  Location     Type
 18057 ;;  Output          1   58[BANK0 ] enum E7419
 18058 ;; Return value:  Size  Location     Type
 18059 ;;                  1    wreg      enum E7419
 18060 ;; Registers used:
 18061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18062 ;; Tracked objects:
 18063 ;;		On entry : 0/0
 18064 ;;		On exit  : 0/0
 18065 ;;		Unchanged: 0/0
 18066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;Total ram usage:        5 bytes
 18072 ;; Hardware stack levels used:    1
 18073 ;; Hardware stack levels required when called:   13
 18074 ;; This function calls:
 18075 ;;		_Byte_SetQuad
 18076 ;;		_Port_CheckQuadType
 18077 ;;		_Word_SetPair
 18078 ;; This function is called by:
 18079 ;;		_MXK_InitDIPSwitch
 18080 ;;		_MXK_Init
 18081 ;; This function uses a non-reentrant model
 18082 ;;
 18083                           
 18084                           	psect	text98
 18085  010CD4                     __ptext98:
 18086                           	opt stack 0
 18087  010CD4                     _Port_SetQuadType:
 18088                           	opt stack 16
 18089                           
 18090                           ;Port.c: 401: ePinError Output = ePinErrorState;
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;incstack = 0
 18094  010CD4  0E05               	movlw	5
 18095  010CD6  0100               	movlb	0	; () banked
 18096  010CD8  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 18097                           
 18098                           ;Port.c: 403: switch (pType)
 18099  010CDA  D0C7               	goto	l10251
 18100  010CDC                     l10235:
 18101                           
 18102                           ; BSR set to: 0
 18103                           ;Port.c: 407: {
 18104                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18105  010CDC  0100               	movlb	0	; () banked
 18106  010CDE  EE20 F002          	lfsr	2,2
 18107  010CE2  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18108  010CE4  26D9               	addwf	fsr2l,f,c
 18109  010CE6  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18110  010CE8  22DA               	addwfc	fsr2h,f,c
 18111  010CEA  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18112  010CEE  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18113  010CF2  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18114  010CF6  0E0F               	movlw	15
 18115  010CF8  0100               	movlb	0	; () banked
 18116  010CFA  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18117  010CFC  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18118                           
 18119                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18120  010D00  0100               	movlb	0	; () banked
 18121  010D02  EE20 F004          	lfsr	2,4
 18122  010D06  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18123  010D08  26D9               	addwf	fsr2l,f,c
 18124  010D0A  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18125  010D0C  22DA               	addwfc	fsr2h,f,c
 18126  010D0E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18127  010D12  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18128  010D16  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18129  010D1A  0E00               	movlw	0
 18130  010D1C  0100               	movlb	0	; () banked
 18131  010D1E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18132  010D20  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18133                           
 18134                           ;Port.c: 413: }
 18135                           ;Port.c: 415: break;
 18136  010D24  D0B0               	goto	l10253
 18137  010D26                     l10237:
 18138                           
 18139                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18140  010D26  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18141  010D2A  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18142  010D2E  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18143  010D32  0E03               	movlw	3
 18144  010D34  0100               	movlb	0	; () banked
 18145  010D36  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18146  010D38  EC34  F09E         	call	_Port_CheckQuadType	;wreg free
 18147  010D3C  0100               	movlb	0	; () banked
 18148  010D3E  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 18149  010D40  0100               	movlb	0	; () banked
 18150  010D42  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 18151  010D44  A4D8               	btfss	status,2,c
 18152  010D46  0012               	return	
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;Port.c: 418: {
 18156                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18157  010D48  0100               	movlb	0	; () banked
 18158  010D4A  EE20 F002          	lfsr	2,2
 18159  010D4E  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18160  010D50  26D9               	addwf	fsr2l,f,c
 18161  010D52  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18162  010D54  22DA               	addwfc	fsr2h,f,c
 18163  010D56  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18164  010D5A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18165  010D5E  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18166  010D62  0E00               	movlw	0
 18167  010D64  0100               	movlb	0	; () banked
 18168  010D66  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18169  010D68  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18170                           
 18171                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18172  010D6C  0100               	movlb	0	; () banked
 18173  010D6E  EE20 F004          	lfsr	2,4
 18174  010D72  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18175  010D74  26D9               	addwf	fsr2l,f,c
 18176  010D76  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18177  010D78  22DA               	addwfc	fsr2h,f,c
 18178  010D7A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18179  010D7E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18180  010D82  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18181  010D86  0E00               	movlw	0
 18182  010D88  0100               	movlb	0	; () banked
 18183  010D8A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18184  010D8C  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18185                           
 18186                           ;Port.c: 424: }
 18187  010D90  D07A               	goto	l10253
 18188  010D92                     l10241:
 18189                           
 18190                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18191  010D92  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18192  010D96  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18193  010D9A  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18194  010D9E  0E03               	movlw	3
 18195  010DA0  0100               	movlb	0	; () banked
 18196  010DA2  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18197  010DA4  EC34  F09E         	call	_Port_CheckQuadType	;wreg free
 18198  010DA8  0100               	movlb	0	; () banked
 18199  010DAA  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 18200  010DAC  0100               	movlb	0	; () banked
 18201  010DAE  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 18202  010DB0  A4D8               	btfss	status,2,c
 18203  010DB2  0012               	return	
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;Port.c: 429: {
 18207                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18208  010DB4  0100               	movlb	0	; () banked
 18209  010DB6  EE20 F002          	lfsr	2,2
 18210  010DBA  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18211  010DBC  26D9               	addwf	fsr2l,f,c
 18212  010DBE  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18213  010DC0  22DA               	addwfc	fsr2h,f,c
 18214  010DC2  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18215  010DC6  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18216  010DCA  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18217  010DCE  0E0F               	movlw	15
 18218  010DD0  0100               	movlb	0	; () banked
 18219  010DD2  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18220  010DD4  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18221                           
 18222                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 18223  010DD8  0100               	movlb	0	; () banked
 18224  010DDA  EE20 F004          	lfsr	2,4
 18225  010DDE  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18226  010DE0  26D9               	addwf	fsr2l,f,c
 18227  010DE2  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18228  010DE4  22DA               	addwfc	fsr2h,f,c
 18229  010DE6  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18230  010DEA  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18231  010DEE  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18232  010DF2  0E0F               	movlw	15
 18233  010DF4  0100               	movlb	0	; () banked
 18234  010DF6  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18235  010DF8  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18236                           
 18237                           ;Port.c: 435: }
 18238  010DFC  D044               	goto	l10253
 18239  010DFE                     l10245:
 18240                           
 18241                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18242  010DFE  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18243  010E02  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18244  010E06  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18245  010E0A  0E03               	movlw	3
 18246  010E0C  0100               	movlb	0	; () banked
 18247  010E0E  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18248  010E10  EC34  F09E         	call	_Port_CheckQuadType	;wreg free
 18249  010E14  0100               	movlb	0	; () banked
 18250  010E16  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 18251  010E18  0100               	movlb	0	; () banked
 18252  010E1A  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 18253  010E1C  A4D8               	btfss	status,2,c
 18254  010E1E  0012               	return	
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;Port.c: 440: {
 18258                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18259  010E20  0100               	movlb	0	; () banked
 18260  010E22  EE20 F002          	lfsr	2,2
 18261  010E26  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18262  010E28  26D9               	addwf	fsr2l,f,c
 18263  010E2A  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18264  010E2C  22DA               	addwfc	fsr2h,f,c
 18265  010E2E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18266  010E32  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18267  010E36  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18268  010E3A  0E00               	movlw	0
 18269  010E3C  0100               	movlb	0	; () banked
 18270  010E3E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18271  010E40  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18272                           
 18273                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18274  010E44  0100               	movlb	0	; () banked
 18275  010E46  EE20 F004          	lfsr	2,4
 18276  010E4A  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18277  010E4C  26D9               	addwf	fsr2l,f,c
 18278  010E4E  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18279  010E50  22DA               	addwfc	fsr2h,f,c
 18280  010E52  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 18281  010E56  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 18282  010E5A  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18283  010E5E  0E00               	movlw	0
 18284  010E60  0100               	movlb	0	; () banked
 18285  010E62  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 18286  010E64  ECD1  F0A2         	call	_Byte_SetQuad	;wreg free
 18287                           
 18288                           ;Port.c: 446: }
 18289  010E68  D00E               	goto	l10253
 18290  010E6A                     l10251:
 18291  010E6A  0100               	movlb	0	; () banked
 18292  010E6C  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 18293                           
 18294                           ; Switch size 1, requested type "space"
 18295                           ; Number of cases is 4, Range of values is 0 to 3
 18296                           ; switch strategies available:
 18297                           ; Name         Instructions Cycles
 18298                           ; simple_byte           13     7 (average)
 18299                           ;	Chosen strategy is simple_byte
 18300  010E6E  0A00               	xorlw	0	; case 0
 18301  010E70  B4D8               	btfsc	status,2,c
 18302  010E72  D734               	goto	l10235
 18303  010E74  0A01               	xorlw	1	; case 1
 18304  010E76  B4D8               	btfsc	status,2,c
 18305  010E78  D756               	goto	l10237
 18306  010E7A  0A03               	xorlw	3	; case 2
 18307  010E7C  B4D8               	btfsc	status,2,c
 18308  010E7E  D789               	goto	l10241
 18309  010E80  0A01               	xorlw	1	; case 3
 18310  010E82  B4D8               	btfsc	status,2,c
 18311  010E84  D7BC               	goto	l10245
 18312  010E86                     l10253:
 18313                           
 18314                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 18315  010E86  0E08               	movlw	8
 18316  010E88  0100               	movlb	0	; () banked
 18317  010E8A  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18318  010E8C  0100               	movlb	0	; () banked
 18319  010E8E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 18320  010E90  0E00               	movlw	0
 18321  010E92  0100               	movlb	0	; () banked
 18322  010E94  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18323  010E96  0100               	movlb	0	; () banked
 18324  010E98  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18325  010E9A  0100               	movlb	0	; () banked
 18326  010E9C  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18327  010E9E  0D04               	mullw	4
 18328  010EA0  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 18329  010EA4  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18330  010EA8  EC0F  F0A0         	call	_Word_SetPair	;wreg free
 18331                           
 18332                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 18333  010EAC  0E08               	movlw	8
 18334  010EAE  0100               	movlb	0	; () banked
 18335  010EB0  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18336  010EB2  0100               	movlb	0	; () banked
 18337  010EB4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 18338  010EB6  0E00               	movlw	0
 18339  010EB8  0100               	movlb	0	; () banked
 18340  010EBA  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18341  010EBC  0100               	movlb	0	; () banked
 18342  010EBE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18343  010EC0  0100               	movlb	0	; () banked
 18344  010EC2  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18345  010EC4  0D04               	mullw	4
 18346  010EC6  28F3               	incf	prodl,w,c
 18347  010EC8  0100               	movlb	0	; () banked
 18348  010ECA  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 18349  010ECC  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18350  010ED0  EC0F  F0A0         	call	_Word_SetPair	;wreg free
 18351                           
 18352                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 18353  010ED4  0E08               	movlw	8
 18354  010ED6  0100               	movlb	0	; () banked
 18355  010ED8  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18356  010EDA  0100               	movlb	0	; () banked
 18357  010EDC  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 18358  010EDE  0E00               	movlw	0
 18359  010EE0  0100               	movlb	0	; () banked
 18360  010EE2  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18361  010EE4  0100               	movlb	0	; () banked
 18362  010EE6  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18363  010EE8  0100               	movlb	0	; () banked
 18364  010EEA  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18365  010EEC  0D04               	mullw	4
 18366  010EEE  50F3               	movf	prodl,w,c
 18367  010EF0  0F02               	addlw	2
 18368  010EF2  0100               	movlb	0	; () banked
 18369  010EF4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 18370  010EF6  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18371  010EFA  EC0F  F0A0         	call	_Word_SetPair	;wreg free
 18372                           
 18373                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 18374  010EFE  0E08               	movlw	8
 18375  010F00  0100               	movlb	0	; () banked
 18376  010F02  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18377  010F04  0100               	movlb	0	; () banked
 18378  010F06  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 18379  010F08  0E00               	movlw	0
 18380  010F0A  0100               	movlb	0	; () banked
 18381  010F0C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18382  010F0E  0100               	movlb	0	; () banked
 18383  010F10  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18384  010F12  0100               	movlb	0	; () banked
 18385  010F14  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18386  010F16  0D04               	mullw	4
 18387  010F18  50F3               	movf	prodl,w,c
 18388  010F1A  0F03               	addlw	3
 18389  010F1C  0100               	movlb	0	; () banked
 18390  010F1E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 18391  010F20  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18392  010F24  EC0F  F0A0         	call	_Word_SetPair	;wreg free
 18393  010F28  0012               	return	
 18394  010F2A                     __end_of_Port_SetQuadType:
 18395                           	opt stack 0
 18396                           tosu	equ	0xFFF
 18397                           tosh	equ	0xFFE
 18398                           tosl	equ	0xFFD
 18399                           pclath	equ	0xFFA
 18400                           tblptru	equ	0xFF8
 18401                           tblptrh	equ	0xFF7
 18402                           tblptrl	equ	0xFF6
 18403                           tablat	equ	0xFF5
 18404                           prodh	equ	0xFF4
 18405                           prodl	equ	0xFF3
 18406                           intcon	equ	0xFF2
 18407                           indf0	equ	0xFEF
 18408                           postinc0	equ	0xFEE
 18409                           fsr0h	equ	0xFEA
 18410                           fsr0l	equ	0xFE9
 18411                           wreg	equ	0xFE8
 18412                           indf1	equ	0xFE7
 18413                           postdec1	equ	0xFE5
 18414                           fsr1h	equ	0xFE2
 18415                           fsr1l	equ	0xFE1
 18416                           indf2	equ	0xFDF
 18417                           postinc2	equ	0xFDE
 18418                           postdec2	equ	0xFDD
 18419                           plusw2	equ	0xFDB
 18420                           fsr2h	equ	0xFDA
 18421                           fsr2l	equ	0xFD9
 18422                           status	equ	0xFD8
 18423                           
 18424 ;; *************** function _Word_SetPair *****************
 18425 ;; Defined at:
 18426 ;;		line 149 in file "Library/Types.c"
 18427 ;; Parameters:    Size  Location     Type
 18428 ;;  pInput          2   15[BANK0 ] PTR struct Word
 18429 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18430 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18431 ;;  pPair           1   17[BANK0 ] unsigned char 
 18432 ;;  pValue          1   18[BANK0 ] unsigned char 
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;		None
 18435 ;; Return value:  Size  Location     Type
 18436 ;;                  1    wreg      void 
 18437 ;; Registers used:
 18438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;Total ram usage:        4 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:    9
 18451 ;; This function calls:
 18452 ;;		_Byte_SetPair
 18453 ;; This function is called by:
 18454 ;;		_Port_SetPinType
 18455 ;;		_Port_SetQuadType
 18456 ;;		_Port_SetType
 18457 ;;		_Port_SetPairType
 18458 ;;		_PortProperty_Init
 18459 ;; This function uses a non-reentrant model
 18460 ;;
 18461                           
 18462                           	psect	text99
 18463  01401E                     __ptext99:
 18464                           	opt stack 0
 18465  01401E                     _Word_SetPair:
 18466                           	opt stack 19
 18467                           
 18468                           ;Types.c: 151: if (pPair >= 4)
 18469                           
 18470                           ;incstack = 0
 18471  01401E  0E03               	movlw	3
 18472  014020  0100               	movlb	0	; () banked
 18473  014022  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 18474  014024  D014               	goto	l10007
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 18478  014026  0E01               	movlw	1
 18479  014028  0100               	movlb	0	; () banked
 18480  01402A  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 18481  01402C  0100               	movlb	0	; () banked
 18482  01402E  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 18483  014030  0E00               	movlw	0
 18484  014032  0100               	movlb	0	; () banked
 18485  014034  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 18486  014036  0100               	movlb	0	; () banked
 18487  014038  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 18488  01403A  0100               	movlb	0	; () banked
 18489  01403C  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 18490  01403E  0FFC               	addlw	252
 18491  014040  0100               	movlb	0	; () banked
 18492  014042  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 18493  014044  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18494  014048  ECC0  F0A2         	call	_Byte_SetPair	;wreg free
 18495  01404C  0012               	return	
 18496  01404E                     l10007:
 18497                           
 18498                           ;Types.c: 153: else
 18499                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 18500  01404E  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 18501  014052  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 18502  014056  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 18503  01405A  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18504  01405E  ECC0  F0A2         	call	_Byte_SetPair	;wreg free
 18505  014062  0012               	return	
 18506  014064                     __end_of_Word_SetPair:
 18507                           	opt stack 0
 18508                           tosu	equ	0xFFF
 18509                           tosh	equ	0xFFE
 18510                           tosl	equ	0xFFD
 18511                           pclath	equ	0xFFA
 18512                           tblptru	equ	0xFF8
 18513                           tblptrh	equ	0xFF7
 18514                           tblptrl	equ	0xFF6
 18515                           tablat	equ	0xFF5
 18516                           prodh	equ	0xFF4
 18517                           prodl	equ	0xFF3
 18518                           intcon	equ	0xFF2
 18519                           indf0	equ	0xFEF
 18520                           postinc0	equ	0xFEE
 18521                           fsr0h	equ	0xFEA
 18522                           fsr0l	equ	0xFE9
 18523                           wreg	equ	0xFE8
 18524                           indf1	equ	0xFE7
 18525                           postdec1	equ	0xFE5
 18526                           fsr1h	equ	0xFE2
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           plusw2	equ	0xFDB
 18532                           fsr2h	equ	0xFDA
 18533                           fsr2l	equ	0xFD9
 18534                           status	equ	0xFD8
 18535                           
 18536 ;; *************** function _Byte_SetPair *****************
 18537 ;; Defined at:
 18538 ;;		line 83 in file "Library/Types.c"
 18539 ;; Parameters:    Size  Location     Type
 18540 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18541 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18542 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18543 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 18544 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 18545 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 18546 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 18547 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 18548 ;;		 -> NULL(0), 
 18549 ;;  pPair           1   13[BANK0 ] unsigned char 
 18550 ;;  pValue          1   14[BANK0 ] unsigned char 
 18551 ;; Auto vars:     Size  Location     Type
 18552 ;;		None
 18553 ;; Return value:  Size  Location     Type
 18554 ;;                  1    wreg      void 
 18555 ;; Registers used:
 18556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18557 ;; Tracked objects:
 18558 ;;		On entry : 0/0
 18559 ;;		On exit  : 0/0
 18560 ;;		Unchanged: 0/0
 18561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18562 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18566 ;;Total ram usage:        4 bytes
 18567 ;; Hardware stack levels used:    1
 18568 ;; Hardware stack levels required when called:    8
 18569 ;; This function calls:
 18570 ;;		_Byte_SetZone
 18571 ;; This function is called by:
 18572 ;;		_Word_SetPair
 18573 ;;		_Port_SetPairType
 18574 ;;		_Port_SetPair
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           	psect	text100
 18579  014580                     __ptext100:
 18580                           	opt stack 0
 18581  014580                     _Byte_SetPair:
 18582                           	opt stack 19
 18583                           
 18584                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 18585                           
 18586                           ;incstack = 0
 18587  014580  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 18588  014584  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 18589  014588  0E04               	movlw	4
 18590  01458A  0100               	movlb	0	; () banked
 18591  01458C  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 18592  01458E  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 18593  014592  0E02               	movlw	2
 18594  014594  0100               	movlb	0	; () banked
 18595  014596  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18596  014598  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 18597  01459C  EC29  F096         	call	_Byte_SetZone	;wreg free
 18598  0145A0  0012               	return		;funcret
 18599  0145A2                     __end_of_Byte_SetPair:
 18600                           	opt stack 0
 18601                           tosu	equ	0xFFF
 18602                           tosh	equ	0xFFE
 18603                           tosl	equ	0xFFD
 18604                           pclath	equ	0xFFA
 18605                           tblptru	equ	0xFF8
 18606                           tblptrh	equ	0xFF7
 18607                           tblptrl	equ	0xFF6
 18608                           tablat	equ	0xFF5
 18609                           prodh	equ	0xFF4
 18610                           prodl	equ	0xFF3
 18611                           intcon	equ	0xFF2
 18612                           indf0	equ	0xFEF
 18613                           postinc0	equ	0xFEE
 18614                           fsr0h	equ	0xFEA
 18615                           fsr0l	equ	0xFE9
 18616                           wreg	equ	0xFE8
 18617                           indf1	equ	0xFE7
 18618                           postdec1	equ	0xFE5
 18619                           fsr1h	equ	0xFE2
 18620                           fsr1l	equ	0xFE1
 18621                           indf2	equ	0xFDF
 18622                           postinc2	equ	0xFDE
 18623                           postdec2	equ	0xFDD
 18624                           plusw2	equ	0xFDB
 18625                           fsr2h	equ	0xFDA
 18626                           fsr2l	equ	0xFD9
 18627                           status	equ	0xFD8
 18628                           
 18629 ;; *************** function _Port_CheckQuadType *****************
 18630 ;; Defined at:
 18631 ;;		line 126 in file "Library/Port.c"
 18632 ;; Parameters:    Size  Location     Type
 18633 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 18634 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18635 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18636 ;;  pQuad           1   49[BANK0 ] enum E7720
 18637 ;;  pDrive          1   50[BANK0 ] enum E7413
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;  Output          1   53[BANK0 ] enum E7419
 18640 ;;  Pair2           1   52[BANK0 ] enum E7704
 18641 ;;  Pair1           1   51[BANK0 ] enum E7704
 18642 ;; Return value:  Size  Location     Type
 18643 ;;                  1    wreg      enum E7419
 18644 ;; Registers used:
 18645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18646 ;; Tracked objects:
 18647 ;;		On entry : 0/0
 18648 ;;		On exit  : 0/0
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18651 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;Total ram usage:        7 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:   12
 18658 ;; This function calls:
 18659 ;;		_Port_CheckPairType
 18660 ;; This function is called by:
 18661 ;;		_Port_CheckPortType
 18662 ;;		_Port_SetQuadType
 18663 ;; This function uses a non-reentrant model
 18664 ;;
 18665                           
 18666                           	psect	text101
 18667  013C68                     __ptext101:
 18668                           	opt stack 0
 18669  013C68                     _Port_CheckQuadType:
 18670                           	opt stack 15
 18671                           
 18672                           ;Port.c: 128: ePinError Output = ePinErrorState;
 18673                           
 18674                           ;incstack = 0
 18675  013C68  0E05               	movlw	5
 18676  013C6A  0100               	movlb	0	; () banked
 18677  013C6C  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 18678                           
 18679                           ; BSR set to: 0
 18680                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 18681  013C6E  0100               	movlb	0	; () banked
 18682  013C70  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18683  013C72  0D02               	mullw	2
 18684  013C74  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 18685                           
 18686                           ; BSR set to: 0
 18687                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 18688  013C78  0100               	movlb	0	; () banked
 18689  013C7A  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18690  013C7C  0D02               	mullw	2
 18691  013C7E  28F3               	incf	prodl,w,c
 18692  013C80  0100               	movlb	0	; () banked
 18693  013C82  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 18694                           
 18695                           ; BSR set to: 0
 18696                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 18697  013C84  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18698  013C88  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18699  013C8C  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18700  013C90  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18701  013C94  EC39  F09D         	call	_Port_CheckPairType	;wreg free
 18702  013C98  0100               	movlb	0	; () banked
 18703  013C9A  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 18704  013C9C  0100               	movlb	0	; () banked
 18705  013C9E  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18706  013CA0  A4D8               	btfss	status,2,c
 18707  013CA2  D00C               	goto	l9999
 18708                           
 18709                           ; BSR set to: 0
 18710                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18711  013CA4  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18712  013CA8  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18713  013CAC  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18714  013CB0  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18715  013CB4  EC39  F09D         	call	_Port_CheckPairType	;wreg free
 18716  013CB8  0100               	movlb	0	; () banked
 18717  013CBA  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 18718  013CBC                     l9999:
 18719                           
 18720                           ; BSR set to: 0
 18721                           ;Port.c: 136: return Output;
 18722  013CBC  0100               	movlb	0	; () banked
 18723  013CBE  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18724  013CC0  0012               	return	
 18725  013CC2                     __end_of_Port_CheckQuadType:
 18726                           	opt stack 0
 18727                           tosu	equ	0xFFF
 18728                           tosh	equ	0xFFE
 18729                           tosl	equ	0xFFD
 18730                           pclath	equ	0xFFA
 18731                           tblptru	equ	0xFF8
 18732                           tblptrh	equ	0xFF7
 18733                           tblptrl	equ	0xFF6
 18734                           tablat	equ	0xFF5
 18735                           prodh	equ	0xFF4
 18736                           prodl	equ	0xFF3
 18737                           intcon	equ	0xFF2
 18738                           indf0	equ	0xFEF
 18739                           postinc0	equ	0xFEE
 18740                           fsr0h	equ	0xFEA
 18741                           fsr0l	equ	0xFE9
 18742                           wreg	equ	0xFE8
 18743                           indf1	equ	0xFE7
 18744                           postdec1	equ	0xFE5
 18745                           fsr1h	equ	0xFE2
 18746                           fsr1l	equ	0xFE1
 18747                           indf2	equ	0xFDF
 18748                           postinc2	equ	0xFDE
 18749                           postdec2	equ	0xFDD
 18750                           plusw2	equ	0xFDB
 18751                           fsr2h	equ	0xFDA
 18752                           fsr2l	equ	0xFD9
 18753                           status	equ	0xFD8
 18754                           
 18755 ;; *************** function _Port_CheckPairType *****************
 18756 ;; Defined at:
 18757 ;;		line 112 in file "Library/Port.c"
 18758 ;; Parameters:    Size  Location     Type
 18759 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18760 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18761 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18762 ;;  pPair           1   40[BANK0 ] enum E7704
 18763 ;;  pDrive          1   41[BANK0 ] enum E7413
 18764 ;; Auto vars:     Size  Location     Type
 18765 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18766 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18767 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18768 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18769 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18770 ;;  Output          1   44[BANK0 ] enum E7419
 18771 ;;  Pin2            1   43[BANK0 ] enum E7694
 18772 ;;  Pin1            1   42[BANK0 ] enum E7694
 18773 ;; Return value:  Size  Location     Type
 18774 ;;                  1    wreg      enum E7419
 18775 ;; Registers used:
 18776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18783 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18785 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18786 ;;Total ram usage:        9 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:   11
 18789 ;; This function calls:
 18790 ;;		_PortProperty_Valid
 18791 ;; This function is called by:
 18792 ;;		_Port_CheckQuadType
 18793 ;;		_Port_SetPairType
 18794 ;; This function uses a non-reentrant model
 18795 ;;
 18796                           
 18797                           	psect	text102
 18798  013A72                     __ptext102:
 18799                           	opt stack 0
 18800  013A72                     _Port_CheckPairType:
 18801                           	opt stack 15
 18802                           
 18803                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18804                           
 18805                           ; BSR set to: 0
 18806                           ;incstack = 0
 18807  013A72  0E05               	movlw	5
 18808  013A74  0100               	movlb	0	; () banked
 18809  013A76  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 18810                           
 18811                           ; BSR set to: 0
 18812                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18813  013A78  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18814  013A7C  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18815  013A80  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 18816  013A84  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18820  013A88  0100               	movlb	0	; () banked
 18821  013A8A  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18822  013A8C  0D02               	mullw	2
 18823  013A8E  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 18824                           
 18825                           ; BSR set to: 0
 18826                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18827  013A92  0100               	movlb	0	; () banked
 18828  013A94  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18829  013A96  0D02               	mullw	2
 18830  013A98  28F3               	incf	prodl,w,c
 18831  013A9A  0100               	movlb	0	; () banked
 18832  013A9C  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18833                           
 18834                           ; BSR set to: 0
 18835                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18836  013A9E  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18837  013AA2  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18838  013AA6  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18839  013AAA  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18840  013AAE  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 18841  013AB2  0100               	movlb	0	; () banked
 18842  013AB4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 18843  013AB6  0100               	movlb	0	; () banked
 18844  013AB8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 18845  013ABA  A4D8               	btfss	status,2,c
 18846  013ABC  D00C               	goto	l9561
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18850  013ABE  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18851  013AC2  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18852  013AC6  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18853  013ACA  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18854  013ACE  ECC4  F09A         	call	_PortProperty_Valid	;wreg free
 18855  013AD2  0100               	movlb	0	; () banked
 18856  013AD4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 18857  013AD6                     l9561:
 18858                           
 18859                           ; BSR set to: 0
 18860                           ;Port.c: 124: return Output;
 18861  013AD6  0100               	movlb	0	; () banked
 18862  013AD8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 18863  013ADA  0012               	return	
 18864  013ADC                     __end_of_Port_CheckPairType:
 18865                           	opt stack 0
 18866                           tosu	equ	0xFFF
 18867                           tosh	equ	0xFFE
 18868                           tosl	equ	0xFFD
 18869                           pclath	equ	0xFFA
 18870                           tblptru	equ	0xFF8
 18871                           tblptrh	equ	0xFF7
 18872                           tblptrl	equ	0xFF6
 18873                           tablat	equ	0xFF5
 18874                           prodh	equ	0xFF4
 18875                           prodl	equ	0xFF3
 18876                           intcon	equ	0xFF2
 18877                           indf0	equ	0xFEF
 18878                           postinc0	equ	0xFEE
 18879                           fsr0h	equ	0xFEA
 18880                           fsr0l	equ	0xFE9
 18881                           wreg	equ	0xFE8
 18882                           indf1	equ	0xFE7
 18883                           postdec1	equ	0xFE5
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function _PortProperty_Valid *****************
 18895 ;; Defined at:
 18896 ;;		line 220 in file "Library/Types.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18899 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18900 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18901 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18902 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18903 ;;  pPinDrive       1   17[BANK0 ] enum E7413
 18904 ;;  pPin            1   18[BANK0 ] unsigned char 
 18905 ;; Auto vars:     Size  Location     Type
 18906 ;;  Errors         16   21[BANK0 ] const enum E7419[4][4]
 18907 ;;  Pair            1   37[BANK0 ] enum E7413
 18908 ;; Return value:  Size  Location     Type
 18909 ;;                  1    wreg      enum E7419
 18910 ;; Registers used:
 18911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18912 ;; Tracked objects:
 18913 ;;		On entry : 0/0
 18914 ;;		On exit  : 0/0
 18915 ;;		Unchanged: 0/0
 18916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18918 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18920 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18921 ;;Total ram usage:       23 bytes
 18922 ;; Hardware stack levels used:    1
 18923 ;; Hardware stack levels required when called:   10
 18924 ;; This function calls:
 18925 ;;		_Word_GetPair
 18926 ;; This function is called by:
 18927 ;;		_Port_CheckPairType
 18928 ;;		_Port_SetPinType
 18929 ;; This function uses a non-reentrant model
 18930 ;;
 18931                           
 18932                           	psect	text103
 18933  013588                     __ptext103:
 18934                           	opt stack 0
 18935  013588                     _PortProperty_Valid:
 18936                           	opt stack 18
 18937                           
 18938                           ;Types.c: 222: ePinDrive Pair;
 18939                           ;Types.c: 223: const ePinError Errors[4][4] =
 18940                           ;Types.c: 224: {
 18941                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18942                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18943                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18944                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18945                           ;Types.c: 230: };
 18946                           
 18947                           ; BSR set to: 0
 18948                           ;incstack = 0
 18949  013588  0E73               	movlw	low PortProperty_Valid@F7774
 18950  01358A  6EF6               	movwf	tblptrl,c
 18951  01358C                     	if	1	;There is more than 1 active tblptr byte
 18952  01358C  0EFD               	movlw	high PortProperty_Valid@F7774
 18953  01358E  6EF7               	movwf	tblptrh,c
 18954  013590                     	endif
 18955  013590                     	if	1	;There are 3 active tblptr bytes
 18956  013590  0E00               	movlw	low (PortProperty_Valid@F7774 shr (0+16))
 18957  013592  6EF8               	movwf	tblptru,c
 18958  013594                     	endif
 18959  013594  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 18960  013598  0E0F               	movlw	15
 18961  01359A                     u6250:
 18962  01359A  0009               	tblrd		*+
 18963  01359C  CFF5 FFDE          	movff	tablat,postinc2
 18964  0135A0  06E8               	decf	wreg,f,c
 18965  0135A2  E2FB               	bc	u6250
 18966                           
 18967                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18968  0135A4  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18969  0135A8  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18970  0135AC  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18971  0135B0  ECD3  F0A0         	call	_Word_GetPair	;wreg free
 18972  0135B4  0100               	movlb	0	; () banked
 18973  0135B6  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18977  0135B8  0E04               	movlw	4
 18978  0135BA  0100               	movlb	0	; () banked
 18979  0135BC  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18980  0135BE  D020               	goto	l9501
 18981                           
 18982                           ; BSR set to: 0
 18983  0135C0  0E04               	movlw	4
 18984  0135C2  0100               	movlb	0	; () banked
 18985  0135C4  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18986  0135C6  D01C               	goto	l9501
 18987                           
 18988                           ; BSR set to: 0
 18989                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18990  0135C8  0100               	movlb	0	; () banked
 18991  0135CA  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18992  0135CC  0D04               	mullw	4
 18993  0135CE  0ECF               	movlw	low PortProperty_Valid@Errors
 18994  0135D0  0100               	movlb	0	; () banked
 18995  0135D2  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 18996  0135D4  0E00               	movlw	high PortProperty_Valid@Errors
 18997  0135D6  0100               	movlb	0	; () banked
 18998  0135D8  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18999  0135DA  50F3               	movf	prodl,w,c
 19000  0135DC  0100               	movlb	0	; () banked
 19001  0135DE  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 19002  0135E0  50F4               	movf	prodh,w,c
 19003  0135E2  0100               	movlb	0	; () banked
 19004  0135E4  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 19005  0135E6  0100               	movlb	0	; () banked
 19006  0135E8  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 19007  0135EA  0D01               	mullw	1
 19008  0135EC  50F3               	movf	prodl,w,c
 19009  0135EE  0100               	movlb	0	; () banked
 19010  0135F0  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 19011  0135F2  6ED9               	movwf	fsr2l,c
 19012  0135F4  50F4               	movf	prodh,w,c
 19013  0135F6  0100               	movlb	0	; () banked
 19014  0135F8  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 19015  0135FA  6EDA               	movwf	fsr2h,c
 19016  0135FC  50DF               	movf	indf2,w,c
 19017                           
 19018                           ; BSR set to: 0
 19019  0135FE  0012               	return	
 19020  013600                     l9501:
 19021                           
 19022                           ; BSR set to: 0
 19023                           ;Types.c: 237: return ePinErrorState;
 19024  013600  0E05               	movlw	5
 19025  013602  0012               	return	
 19026  013604                     __end_of_PortProperty_Valid:
 19027                           	opt stack 0
 19028                           tosu	equ	0xFFF
 19029                           tosh	equ	0xFFE
 19030                           tosl	equ	0xFFD
 19031                           pclath	equ	0xFFA
 19032                           tblptru	equ	0xFF8
 19033                           tblptrh	equ	0xFF7
 19034                           tblptrl	equ	0xFF6
 19035                           tablat	equ	0xFF5
 19036                           prodh	equ	0xFF4
 19037                           prodl	equ	0xFF3
 19038                           intcon	equ	0xFF2
 19039                           indf0	equ	0xFEF
 19040                           postinc0	equ	0xFEE
 19041                           fsr0h	equ	0xFEA
 19042                           fsr0l	equ	0xFE9
 19043                           wreg	equ	0xFE8
 19044                           indf1	equ	0xFE7
 19045                           postdec1	equ	0xFE5
 19046                           fsr1h	equ	0xFE2
 19047                           fsr1l	equ	0xFE1
 19048                           indf2	equ	0xFDF
 19049                           postinc2	equ	0xFDE
 19050                           postdec2	equ	0xFDD
 19051                           plusw2	equ	0xFDB
 19052                           fsr2h	equ	0xFDA
 19053                           fsr2l	equ	0xFD9
 19054                           status	equ	0xFD8
 19055                           
 19056 ;; *************** function _Word_GetPair *****************
 19057 ;; Defined at:
 19058 ;;		line 156 in file "Library/Types.c"
 19059 ;; Parameters:    Size  Location     Type
 19060 ;;  pInput          2   12[BANK0 ] PTR struct Word
 19061 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19062 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19063 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19064 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19065 ;;  pPair           1   14[BANK0 ] unsigned char 
 19066 ;; Auto vars:     Size  Location     Type
 19067 ;;		None
 19068 ;; Return value:  Size  Location     Type
 19069 ;;                  1    wreg      unsigned char 
 19070 ;; Registers used:
 19071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19072 ;; Tracked objects:
 19073 ;;		On entry : 0/0
 19074 ;;		On exit  : 0/0
 19075 ;;		Unchanged: 0/0
 19076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19077 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;Total ram usage:        3 bytes
 19082 ;; Hardware stack levels used:    1
 19083 ;; Hardware stack levels required when called:    9
 19084 ;; This function calls:
 19085 ;;		_Byte_GetPair
 19086 ;; This function is called by:
 19087 ;;		_Port_Init
 19088 ;;		_Port_SetPin
 19089 ;;		_Port_Set
 19090 ;;		_PortProperty_Valid
 19091 ;;		_Port_SetPair
 19092 ;;		_Port_SetQuad
 19093 ;; This function uses a non-reentrant model
 19094 ;;
 19095                           
 19096                           	psect	text104
 19097  0141A6                     __ptext104:
 19098                           	opt stack 0
 19099  0141A6                     _Word_GetPair:
 19100                           	opt stack 18
 19101                           
 19102                           ;Types.c: 158: if (pPair >= 4)
 19103                           
 19104                           ; BSR set to: 0
 19105                           ;incstack = 0
 19106  0141A6  0E03               	movlw	3
 19107  0141A8  0100               	movlb	0	; () banked
 19108  0141AA  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 19109  0141AC  D012               	goto	l9485
 19110                           
 19111                           ; BSR set to: 0
 19112                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 19113  0141AE  0E01               	movlw	1
 19114  0141B0  0100               	movlb	0	; () banked
 19115  0141B2  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 19116  0141B4  0100               	movlb	0	; () banked
 19117  0141B6  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 19118  0141B8  0E00               	movlw	0
 19119  0141BA  0100               	movlb	0	; () banked
 19120  0141BC  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 19121  0141BE  0100               	movlb	0	; () banked
 19122  0141C0  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 19123  0141C2  0100               	movlb	0	; () banked
 19124  0141C4  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 19125  0141C6  0FFC               	addlw	252
 19126  0141C8  0100               	movlb	0	; () banked
 19127  0141CA  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 19128  0141CC  EC2F  F0A3         	call	_Byte_GetPair	;wreg free
 19129  0141D0  0012               	return	
 19130  0141D2                     l9485:
 19131                           
 19132                           ;Types.c: 160: else
 19133                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 19134  0141D2  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 19135  0141D6  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 19136  0141DA  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 19137  0141DE  EC2F  F0A3         	call	_Byte_GetPair	;wreg free
 19138  0141E2  0012               	return	
 19139  0141E4                     __end_of_Word_GetPair:
 19140                           	opt stack 0
 19141                           tosu	equ	0xFFF
 19142                           tosh	equ	0xFFE
 19143                           tosl	equ	0xFFD
 19144                           pclath	equ	0xFFA
 19145                           tblptru	equ	0xFF8
 19146                           tblptrh	equ	0xFF7
 19147                           tblptrl	equ	0xFF6
 19148                           tablat	equ	0xFF5
 19149                           prodh	equ	0xFF4
 19150                           prodl	equ	0xFF3
 19151                           intcon	equ	0xFF2
 19152                           indf0	equ	0xFEF
 19153                           postinc0	equ	0xFEE
 19154                           fsr0h	equ	0xFEA
 19155                           fsr0l	equ	0xFE9
 19156                           wreg	equ	0xFE8
 19157                           indf1	equ	0xFE7
 19158                           postdec1	equ	0xFE5
 19159                           fsr1h	equ	0xFE2
 19160                           fsr1l	equ	0xFE1
 19161                           indf2	equ	0xFDF
 19162                           postinc2	equ	0xFDE
 19163                           postdec2	equ	0xFDD
 19164                           plusw2	equ	0xFDB
 19165                           fsr2h	equ	0xFDA
 19166                           fsr2l	equ	0xFD9
 19167                           status	equ	0xFD8
 19168                           
 19169 ;; *************** function _Byte_GetPair *****************
 19170 ;; Defined at:
 19171 ;;		line 87 in file "Library/Types.c"
 19172 ;; Parameters:    Size  Location     Type
 19173 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 19174 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19175 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19176 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19177 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19178 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19179 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19180 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19181 ;;		 -> NULL(0), 
 19182 ;;  pPair           1   11[BANK0 ] unsigned char 
 19183 ;; Auto vars:     Size  Location     Type
 19184 ;;		None
 19185 ;; Return value:  Size  Location     Type
 19186 ;;                  1    wreg      unsigned char 
 19187 ;; Registers used:
 19188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19189 ;; Tracked objects:
 19190 ;;		On entry : 0/0
 19191 ;;		On exit  : 0/0
 19192 ;;		Unchanged: 0/0
 19193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19194 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19198 ;;Total ram usage:        3 bytes
 19199 ;; Hardware stack levels used:    1
 19200 ;; Hardware stack levels required when called:    8
 19201 ;; This function calls:
 19202 ;;		_Byte_GetZone
 19203 ;; This function is called by:
 19204 ;;		_Word_GetPair
 19205 ;; This function uses a non-reentrant model
 19206 ;;
 19207                           
 19208                           	psect	text105
 19209  01465E                     __ptext105:
 19210                           	opt stack 0
 19211  01465E                     _Byte_GetPair:
 19212                           	opt stack 18
 19213                           
 19214                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 19215                           
 19216                           ;incstack = 0
 19217  01465E  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 19218  014662  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 19219  014666  0E04               	movlw	4
 19220  014668  0100               	movlb	0	; () banked
 19221  01466A  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 19222  01466C  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 19223  014670  0E02               	movlw	2
 19224  014672  0100               	movlb	0	; () banked
 19225  014674  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 19226  014676  ECD0  F098         	call	_Byte_GetZone	;wreg free
 19227  01467A  0012               	return	
 19228  01467C                     __end_of_Byte_GetPair:
 19229                           	opt stack 0
 19230                           tosu	equ	0xFFF
 19231                           tosh	equ	0xFFE
 19232                           tosl	equ	0xFFD
 19233                           pclath	equ	0xFFA
 19234                           tblptru	equ	0xFF8
 19235                           tblptrh	equ	0xFF7
 19236                           tblptrl	equ	0xFF6
 19237                           tablat	equ	0xFF5
 19238                           prodh	equ	0xFF4
 19239                           prodl	equ	0xFF3
 19240                           intcon	equ	0xFF2
 19241                           indf0	equ	0xFEF
 19242                           postinc0	equ	0xFEE
 19243                           fsr0h	equ	0xFEA
 19244                           fsr0l	equ	0xFE9
 19245                           wreg	equ	0xFE8
 19246                           indf1	equ	0xFE7
 19247                           postdec1	equ	0xFE5
 19248                           fsr1h	equ	0xFE2
 19249                           fsr1l	equ	0xFE1
 19250                           indf2	equ	0xFDF
 19251                           postinc2	equ	0xFDE
 19252                           postdec2	equ	0xFDD
 19253                           plusw2	equ	0xFDB
 19254                           fsr2h	equ	0xFDA
 19255                           fsr2l	equ	0xFD9
 19256                           status	equ	0xFD8
 19257                           
 19258 ;; *************** function _Byte_GetZone *****************
 19259 ;; Defined at:
 19260 ;;		line 64 in file "Library/Types.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19263 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19264 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19265 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19266 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19267 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19268 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19269 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19270 ;;		 -> NULL(0), 
 19271 ;;  pMax            1    2[BANK0 ] unsigned char 
 19272 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19273 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19274 ;; Auto vars:     Size  Location     Type
 19275 ;;  Output          1    8[BANK0 ] unsigned char 
 19276 ;;  Offset          1    7[BANK0 ] unsigned char 
 19277 ;;  MASK            1    6[BANK0 ] unsigned char 
 19278 ;; Return value:  Size  Location     Type
 19279 ;;                  1    wreg      unsigned char 
 19280 ;; Registers used:
 19281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19282 ;; Tracked objects:
 19283 ;;		On entry : 0/0
 19284 ;;		On exit  : 0/0
 19285 ;;		Unchanged: 0/0
 19286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19287 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19288 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19290 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19291 ;;Total ram usage:        9 bytes
 19292 ;; Hardware stack levels used:    1
 19293 ;; Hardware stack levels required when called:    7
 19294 ;; This function calls:
 19295 ;;		Nothing
 19296 ;; This function is called by:
 19297 ;;		_Byte_GetPair
 19298 ;;		_Byte_GetTriple
 19299 ;;		_Byte_GetQuad
 19300 ;; This function uses a non-reentrant model
 19301 ;;
 19302                           
 19303                           	psect	text106
 19304  0131A0                     __ptext106:
 19305                           	opt stack 0
 19306  0131A0                     _Byte_GetZone:
 19307                           	opt stack 18
 19308                           
 19309                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 19310                           
 19311                           ;incstack = 0
 19312  0131A0  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 19313  0131A4  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 19314  0131A8  0E00               	movlw	low (__mediumconst shr (0+16))
 19315  0131AA  6EF8               	movwf	tblptru,c
 19316  0131AC  0E0F               	movlw	(high __ramtop+-1)
 19317  0131AE  64F7               	cpfsgt	tblptrh,c
 19318  0131B0  D003               	bra	u6217
 19319  0131B2  0008               	tblrd		*
 19320  0131B4  50F5               	movf	tablat,w,c
 19321  0131B6  D005               	bra	u6210
 19322  0131B8                     u6217:
 19323  0131B8  CFF6 FFE9          	movff	tblptrl,fsr0l
 19324  0131BC  CFF7 FFEA          	movff	tblptrh,fsr0h
 19325  0131C0  50EF               	movf	indf0,w,c
 19326  0131C2                     u6210:
 19327  0131C2  0100               	movlb	0	; () banked
 19328  0131C4  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 19329                           
 19330                           ; BSR set to: 0
 19331                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 19332  0131C6  0100               	movlb	0	; () banked
 19333  0131C8  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19334  0131CA  0D01               	mullw	1
 19335  0131CC  0E9D               	movlw	low _MASKS
 19336  0131CE  24F3               	addwf	prodl,w,c
 19337  0131D0  6EF6               	movwf	tblptrl,c
 19338  0131D2  0EFD               	movlw	high _MASKS
 19339  0131D4  20F4               	addwfc	prodh,w,c
 19340  0131D6  6EF7               	movwf	tblptrh,c
 19341  0131D8                     	if	1	;There are 3 active tblptr bytes
 19342  0131D8  6AF8               	clrf	tblptru,c
 19343  0131DA  0E00               	movlw	low (__mediumconst shr (0+16))
 19344  0131DC  22F8               	addwfc	tblptru,f,c
 19345  0131DE                     	endif
 19346  0131DE  0008               	tblrd		*
 19347  0131E0  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 19348                           
 19349                           ; BSR set to: 0
 19350                           ;Types.c: 68: UINT8 Offset = 0;
 19351  0131E4  0E00               	movlw	0
 19352  0131E6  0100               	movlb	0	; () banked
 19353  0131E8  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 19354                           
 19355                           ;Types.c: 70: while (pChunk >= pMax)
 19356  0131EA  D006               	goto	l9459
 19357  0131EC                     l9455:
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;Types.c: 71: {
 19361                           ;Types.c: 72: pChunk -= pMax;
 19362  0131EC  0100               	movlb	0	; () banked
 19363  0131EE  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 19364  0131F0  0100               	movlb	0	; () banked
 19365  0131F2  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 19366                           
 19367                           ; BSR set to: 0
 19368                           ;Types.c: 73: Offset += 1;
 19369  0131F4  0100               	movlb	0	; () banked
 19370  0131F6  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 19371  0131F8                     l9459:
 19372                           
 19373                           ; BSR set to: 0
 19374  0131F8  0100               	movlb	0	; () banked
 19375  0131FA  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 19376  0131FC  0100               	movlb	0	; () banked
 19377  0131FE  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 19378  013200  B0D8               	btfsc	status,0,c
 19379  013202  D7F4               	goto	l9455
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;Types.c: 74: }
 19383                           ;Types.c: 75: pChunk *= pChunkSize;
 19384                           
 19385                           ; BSR set to: 0
 19386  013204  0100               	movlb	0	; () banked
 19387  013206  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19388  013208  0100               	movlb	0	; () banked
 19389  01320A  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 19390  01320C  50F3               	movf	prodl,w,c
 19391  01320E  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 19392                           
 19393                           ; BSR set to: 0
 19394                           ;Types.c: 76: pChunk += Offset;
 19395  013210  0100               	movlb	0	; () banked
 19396  013212  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 19397  013214  0100               	movlb	0	; () banked
 19398  013216  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 19399                           
 19400                           ; BSR set to: 0
 19401                           ;Types.c: 78: Output >>= pChunk;
 19402  013218  0100               	movlb	0	; () banked
 19403  01321A  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 19404  01321C  0100               	movlb	0	; () banked
 19405  01321E  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 19406  013220  D003               	goto	u6230
 19407  013222                     u6235:
 19408  013222  0100               	movlb	0	; () banked
 19409  013224  90D8               	bcf	status,0,c
 19410  013226  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 19411  013228                     u6230:
 19412  013228  0100               	movlb	0	; () banked
 19413  01322A  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 19414  01322C  D7FA               	goto	u6235
 19415                           
 19416                           ;Types.c: 79: Output &= MASK;
 19417  01322E  0100               	movlb	0	; () banked
 19418  013230  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 19419  013232  0100               	movlb	0	; () banked
 19420  013234  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;Types.c: 80: return Output;
 19424  013236  0100               	movlb	0	; () banked
 19425  013238  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 19426  01323A  0012               	return	
 19427  01323C                     __end_of_Byte_GetZone:
 19428                           	opt stack 0
 19429                           tosu	equ	0xFFF
 19430                           tosh	equ	0xFFE
 19431                           tosl	equ	0xFFD
 19432                           pclath	equ	0xFFA
 19433                           tblptru	equ	0xFF8
 19434                           tblptrh	equ	0xFF7
 19435                           tblptrl	equ	0xFF6
 19436                           tablat	equ	0xFF5
 19437                           prodh	equ	0xFF4
 19438                           prodl	equ	0xFF3
 19439                           intcon	equ	0xFF2
 19440                           indf0	equ	0xFEF
 19441                           postinc0	equ	0xFEE
 19442                           fsr0h	equ	0xFEA
 19443                           fsr0l	equ	0xFE9
 19444                           wreg	equ	0xFE8
 19445                           indf1	equ	0xFE7
 19446                           postdec1	equ	0xFE5
 19447                           fsr1h	equ	0xFE2
 19448                           fsr1l	equ	0xFE1
 19449                           indf2	equ	0xFDF
 19450                           postinc2	equ	0xFDE
 19451                           postdec2	equ	0xFDD
 19452                           plusw2	equ	0xFDB
 19453                           fsr2h	equ	0xFDA
 19454                           fsr2l	equ	0xFD9
 19455                           status	equ	0xFD8
 19456                           
 19457 ;; *************** function _Byte_SetQuad *****************
 19458 ;; Defined at:
 19459 ;;		line 101 in file "Library/Types.c"
 19460 ;; Parameters:    Size  Location     Type
 19461 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19462 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 19463 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19464 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19465 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19466 ;;		 -> NULL(0), 
 19467 ;;  pQuad           1   13[BANK0 ] unsigned char 
 19468 ;;  pValue          1   14[BANK0 ] unsigned char 
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;		None
 19471 ;; Return value:  Size  Location     Type
 19472 ;;                  1    wreg      void 
 19473 ;; Registers used:
 19474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19475 ;; Tracked objects:
 19476 ;;		On entry : 0/0
 19477 ;;		On exit  : 0/0
 19478 ;;		Unchanged: 0/0
 19479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19480 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;Total ram usage:        4 bytes
 19485 ;; Hardware stack levels used:    1
 19486 ;; Hardware stack levels required when called:    8
 19487 ;; This function calls:
 19488 ;;		_Byte_SetZone
 19489 ;; This function is called by:
 19490 ;;		_Port_SetQuadType
 19491 ;;		_SPI_Init
 19492 ;;		_SPI_MinSpeed
 19493 ;;		_SPI_MaxSpeed
 19494 ;;		_Port_SetQuad
 19495 ;;		_Word_SetQuad
 19496 ;;		_I2C_Init
 19497 ;; This function uses a non-reentrant model
 19498 ;;
 19499                           
 19500                           	psect	text107
 19501  0145A2                     __ptext107:
 19502                           	opt stack 0
 19503  0145A2                     _Byte_SetQuad:
 19504                           	opt stack 20
 19505                           
 19506                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;incstack = 0
 19510  0145A2  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 19511  0145A6  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 19512  0145AA  0E02               	movlw	2
 19513  0145AC  0100               	movlb	0	; () banked
 19514  0145AE  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 19515  0145B0  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 19516  0145B4  0E04               	movlw	4
 19517  0145B6  0100               	movlb	0	; () banked
 19518  0145B8  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19519  0145BA  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 19520  0145BE  EC29  F096         	call	_Byte_SetZone	;wreg free
 19521  0145C2  0012               	return		;funcret
 19522  0145C4                     __end_of_Byte_SetQuad:
 19523                           	opt stack 0
 19524                           tosu	equ	0xFFF
 19525                           tosh	equ	0xFFE
 19526                           tosl	equ	0xFFD
 19527                           pclath	equ	0xFFA
 19528                           tblptru	equ	0xFF8
 19529                           tblptrh	equ	0xFF7
 19530                           tblptrl	equ	0xFF6
 19531                           tablat	equ	0xFF5
 19532                           prodh	equ	0xFF4
 19533                           prodl	equ	0xFF3
 19534                           intcon	equ	0xFF2
 19535                           indf0	equ	0xFEF
 19536                           postinc0	equ	0xFEE
 19537                           fsr0h	equ	0xFEA
 19538                           fsr0l	equ	0xFE9
 19539                           wreg	equ	0xFE8
 19540                           indf1	equ	0xFE7
 19541                           postdec1	equ	0xFE5
 19542                           fsr1h	equ	0xFE2
 19543                           fsr1l	equ	0xFE1
 19544                           indf2	equ	0xFDF
 19545                           postinc2	equ	0xFDE
 19546                           postdec2	equ	0xFDD
 19547                           plusw2	equ	0xFDB
 19548                           fsr2h	equ	0xFDA
 19549                           fsr2l	equ	0xFD9
 19550                           status	equ	0xFD8
 19551                           
 19552 ;; *************** function _Byte_SetZone *****************
 19553 ;; Defined at:
 19554 ;;		line 47 in file "Library/Types.c"
 19555 ;; Parameters:    Size  Location     Type
 19556 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19557 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19558 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19559 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 19560 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 19561 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19562 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19563 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19564 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19565 ;;  pMax            1    2[BANK0 ] unsigned char 
 19566 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19567 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19568 ;;  pValue          1    5[BANK0 ] unsigned char 
 19569 ;; Auto vars:     Size  Location     Type
 19570 ;;  MASK            1   10[BANK0 ] unsigned char 
 19571 ;;  Offset          1    9[BANK0 ] unsigned char 
 19572 ;; Return value:  Size  Location     Type
 19573 ;;                  1    wreg      void 
 19574 ;; Registers used:
 19575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19576 ;; Tracked objects:
 19577 ;;		On entry : 0/0
 19578 ;;		On exit  : 0/0
 19579 ;;		Unchanged: 0/0
 19580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19581 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19583 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19584 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19585 ;;Total ram usage:       11 bytes
 19586 ;; Hardware stack levels used:    1
 19587 ;; Hardware stack levels required when called:    7
 19588 ;; This function calls:
 19589 ;;		Nothing
 19590 ;; This function is called by:
 19591 ;;		_Byte_SetPair
 19592 ;;		_Byte_SetQuad
 19593 ;;		_Byte_SetTriple
 19594 ;; This function uses a non-reentrant model
 19595 ;;
 19596                           
 19597                           	psect	text108
 19598  012C52                     __ptext108:
 19599                           	opt stack 0
 19600  012C52                     _Byte_SetZone:
 19601                           	opt stack 19
 19602                           
 19603                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 19604                           
 19605                           ;incstack = 0
 19606  012C52  0100               	movlb	0	; () banked
 19607  012C54  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19608  012C56  0D01               	mullw	1
 19609  012C58  0E9D               	movlw	low _MASKS
 19610  012C5A  24F3               	addwf	prodl,w,c
 19611  012C5C  6EF6               	movwf	tblptrl,c
 19612  012C5E  0EFD               	movlw	high _MASKS
 19613  012C60  20F4               	addwfc	prodh,w,c
 19614  012C62  6EF7               	movwf	tblptrh,c
 19615  012C64                     	if	1	;There are 3 active tblptr bytes
 19616  012C64  6AF8               	clrf	tblptru,c
 19617  012C66  0E00               	movlw	low (__mediumconst shr (0+16))
 19618  012C68  22F8               	addwfc	tblptru,f,c
 19619  012C6A                     	endif
 19620  012C6A  0008               	tblrd		*
 19621  012C6C  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 19622                           
 19623                           ; BSR set to: 0
 19624                           ;Types.c: 50: UINT8 Offset = 0;
 19625  012C70  0E00               	movlw	0
 19626  012C72  0100               	movlb	0	; () banked
 19627  012C74  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 19628                           
 19629                           ;Types.c: 52: while (pChunk >= pMax)
 19630  012C76  D006               	goto	l9519
 19631  012C78                     l9515:
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;Types.c: 53: {
 19635                           ;Types.c: 54: pChunk -= pMax;
 19636  012C78  0100               	movlb	0	; () banked
 19637  012C7A  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 19638  012C7C  0100               	movlb	0	; () banked
 19639  012C7E  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 19640                           
 19641                           ; BSR set to: 0
 19642                           ;Types.c: 55: Offset += 1;
 19643  012C80  0100               	movlb	0	; () banked
 19644  012C82  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 19645  012C84                     l9519:
 19646                           
 19647                           ; BSR set to: 0
 19648  012C84  0100               	movlb	0	; () banked
 19649  012C86  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 19650  012C88  0100               	movlb	0	; () banked
 19651  012C8A  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 19652  012C8C  B0D8               	btfsc	status,0,c
 19653  012C8E  D7F4               	goto	l9515
 19654                           
 19655                           ; BSR set to: 0
 19656                           ;Types.c: 56: }
 19657                           ;Types.c: 57: pChunk *= pChunkSize;
 19658                           
 19659                           ; BSR set to: 0
 19660  012C90  0100               	movlb	0	; () banked
 19661  012C92  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19662  012C94  0100               	movlb	0	; () banked
 19663  012C96  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 19664  012C98  50F3               	movf	prodl,w,c
 19665  012C9A  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 19666                           
 19667                           ; BSR set to: 0
 19668                           ;Types.c: 58: pChunk += Offset;
 19669  012C9C  0100               	movlb	0	; () banked
 19670  012C9E  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 19671  012CA0  0100               	movlb	0	; () banked
 19672  012CA2  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 19673                           
 19674                           ; BSR set to: 0
 19675                           ;Types.c: 60: pValue &= MASK;
 19676  012CA4  0100               	movlb	0	; () banked
 19677  012CA6  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 19678  012CA8  0100               	movlb	0	; () banked
 19679  012CAA  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 19680                           
 19681                           ; BSR set to: 0
 19682                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 19683  012CAC  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19684  012CB0  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 19685  012CB4  0100               	movlb	0	; () banked
 19686  012CB6  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 19687  012CB8  D003               	goto	u6314
 19688  012CBA                     u6315:
 19689  012CBA  0100               	movlb	0	; () banked
 19690  012CBC  90D8               	bcf	status,0,c
 19691  012CBE  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19692  012CC0                     u6314:
 19693  012CC0  0100               	movlb	0	; () banked
 19694  012CC2  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 19695  012CC4  D7FA               	goto	u6315
 19696  012CC6  0100               	movlb	0	; () banked
 19697  012CC8  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19698  012CCA  0AFF               	xorlw	255
 19699  012CCC  0100               	movlb	0	; () banked
 19700  012CCE  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 19701  012CD0  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19702  012CD4  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19703  012CD8  0100               	movlb	0	; () banked
 19704  012CDA  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 19705  012CDC  16DF               	andwf	indf2,f,c
 19706                           
 19707                           ; BSR set to: 0
 19708                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 19709  012CDE  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19710  012CE2  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 19711  012CE6  0100               	movlb	0	; () banked
 19712  012CE8  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 19713  012CEA  D003               	goto	u6324
 19714  012CEC                     u6325:
 19715  012CEC  0100               	movlb	0	; () banked
 19716  012CEE  90D8               	bcf	status,0,c
 19717  012CF0  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19718  012CF2                     u6324:
 19719  012CF2  0100               	movlb	0	; () banked
 19720  012CF4  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 19721  012CF6  D7FA               	goto	u6325
 19722  012CF8  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19723  012CFC  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19724  012D00  0100               	movlb	0	; () banked
 19725  012D02  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19726  012D04  12DF               	iorwf	indf2,f,c
 19727                           
 19728                           ; BSR set to: 0
 19729  012D06  0012               	return		;funcret
 19730  012D08                     __end_of_Byte_SetZone:
 19731                           	opt stack 0
 19732                           tosu	equ	0xFFF
 19733                           tosh	equ	0xFFE
 19734                           tosl	equ	0xFFD
 19735                           pclath	equ	0xFFA
 19736                           tblptru	equ	0xFF8
 19737                           tblptrh	equ	0xFF7
 19738                           tblptrl	equ	0xFF6
 19739                           tablat	equ	0xFF5
 19740                           prodh	equ	0xFF4
 19741                           prodl	equ	0xFF3
 19742                           intcon	equ	0xFF2
 19743                           indf0	equ	0xFEF
 19744                           postinc0	equ	0xFEE
 19745                           fsr0h	equ	0xFEA
 19746                           fsr0l	equ	0xFE9
 19747                           wreg	equ	0xFE8
 19748                           indf1	equ	0xFE7
 19749                           postdec1	equ	0xFE5
 19750                           fsr1h	equ	0xFE2
 19751                           fsr1l	equ	0xFE1
 19752                           indf2	equ	0xFDF
 19753                           postinc2	equ	0xFDE
 19754                           postdec2	equ	0xFDD
 19755                           plusw2	equ	0xFDB
 19756                           fsr2h	equ	0xFDA
 19757                           fsr2l	equ	0xFD9
 19758                           status	equ	0xFD8
 19759                           
 19760 ;; *************** function _Console_SetForecolour *****************
 19761 ;; Defined at:
 19762 ;;		line 286 in file "Library/Console.c"
 19763 ;; Parameters:    Size  Location     Type
 19764 ;;  pColour         2    0[BANK0 ] unsigned short 
 19765 ;; Auto vars:     Size  Location     Type
 19766 ;;		None
 19767 ;; Return value:  Size  Location     Type
 19768 ;;                  1    wreg      void 
 19769 ;; Registers used:
 19770 ;;		None
 19771 ;; Tracked objects:
 19772 ;;		On entry : 0/0
 19773 ;;		On exit  : 0/0
 19774 ;;		Unchanged: 0/0
 19775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19780 ;;Total ram usage:        2 bytes
 19781 ;; Hardware stack levels used:    1
 19782 ;; Hardware stack levels required when called:    7
 19783 ;; This function calls:
 19784 ;;		Nothing
 19785 ;; This function is called by:
 19786 ;;		_main
 19787 ;; This function uses a non-reentrant model
 19788 ;;
 19789                           
 19790                           	psect	text109
 19791  014866                     __ptext109:
 19792                           	opt stack 0
 19793  014866                     _Console_SetForecolour:
 19794                           	opt stack 23
 19795                           
 19796                           ;Console.c: 289: gForecolour = pColour;
 19797                           
 19798                           ; BSR set to: 0
 19799                           ;incstack = 0
 19800  014866  C0BA  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
 19801  01486A  C0BB  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 19802  01486E  0012               	return		;funcret
 19803  014870                     __end_of_Console_SetForecolour:
 19804                           	opt stack 0
 19805                           tosu	equ	0xFFF
 19806                           tosh	equ	0xFFE
 19807                           tosl	equ	0xFFD
 19808                           pclath	equ	0xFFA
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           indf0	equ	0xFEF
 19817                           postinc0	equ	0xFEE
 19818                           fsr0h	equ	0xFEA
 19819                           fsr0l	equ	0xFE9
 19820                           wreg	equ	0xFE8
 19821                           indf1	equ	0xFE7
 19822                           postdec1	equ	0xFE5
 19823                           fsr1h	equ	0xFE2
 19824                           fsr1l	equ	0xFE1
 19825                           indf2	equ	0xFDF
 19826                           postinc2	equ	0xFDE
 19827                           postdec2	equ	0xFDD
 19828                           plusw2	equ	0xFDB
 19829                           fsr2h	equ	0xFDA
 19830                           fsr2l	equ	0xFD9
 19831                           status	equ	0xFD8
 19832                           
 19833 ;; *************** function _Console_Render *****************
 19834 ;; Defined at:
 19835 ;;		line 377 in file "Library/Console.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;		None
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;  lCursor         4   38[BANK0 ] struct Point
 19840 ;;  y               1   43[BANK0 ] unsigned char 
 19841 ;;  x               1   42[BANK0 ] unsigned char 
 19842 ;;  temp            1   37[BANK0 ] unsigned char 
 19843 ;;  Temp            2    0        unsigned short 
 19844 ;; Return value:  Size  Location     Type
 19845 ;;                  1    wreg      void 
 19846 ;; Registers used:
 19847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19848 ;; Tracked objects:
 19849 ;;		On entry : 0/0
 19850 ;;		On exit  : 0/0
 19851 ;;		Unchanged: 0/0
 19852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19857 ;;Total ram usage:        9 bytes
 19858 ;; Hardware stack levels used:    1
 19859 ;; Hardware stack levels required when called:   11
 19860 ;; This function calls:
 19861 ;;		_Console_MakeField
 19862 ;;		_LCD_DrawField
 19863 ;;		_LCD_FillRectangle
 19864 ;; This function is called by:
 19865 ;;		_main
 19866 ;; This function uses a non-reentrant model
 19867 ;;
 19868                           
 19869                           	psect	text110
 19870  011154                     __ptext110:
 19871                           	opt stack 0
 19872  011154                     _Console_Render:
 19873                           	opt stack 19
 19874                           
 19875                           ;Console.c: 379: Colour Temp;
 19876                           ;Console.c: 380: if (change)
 19877                           
 19878                           ;incstack = 0
 19879  011154  0100               	movlb	0	; () banked
 19880  011156  51FF               	movf	_change& (0+255),w,b
 19881  011158  B4D8               	btfsc	status,2,c
 19882  01115A  0012               	return	
 19883                           
 19884                           ; BSR set to: 0
 19885                           ;Console.c: 381: {
 19886                           ;Console.c: 382: UINT8 x, y, temp;
 19887                           ;Console.c: 383: Point lCursor = {6,6};
 19888  01115C  C1D3  F0E0         	movff	Console_Render@F7900,Console_Render@lCursor
 19889  011160  C1D4  F0E1         	movff	Console_Render@F7900+1,Console_Render@lCursor+1
 19890  011164  C1D5  F0E2         	movff	Console_Render@F7900+2,Console_Render@lCursor+2
 19891  011168  C1D6  F0E3         	movff	Console_Render@F7900+3,Console_Render@lCursor+3
 19892                           
 19893                           ; BSR set to: 0
 19894                           ;Console.c: 385: if (clearall)
 19895  01116C  0100               	movlb	0	; () banked
 19896  01116E  517A               	movf	_clearall& (0+255),w,b
 19897  011170  B4D8               	btfsc	status,2,c
 19898  011172  D004               	goto	l1056
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;Console.c: 386: {
 19902                           ;Console.c: 389: temp = lBufferY;
 19903  011174  C036  F0DF         	movff	_lBufferY,Console_Render@temp
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 19907  011178  0E0F               	movlw	15
 19908  01117A  6E36               	movwf	_lBufferY,c
 19909  01117C                     l1056:
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;Console.c: 391: }
 19913                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 19914  01117C  0E00               	movlw	0
 19915  01117E  0100               	movlb	0	; () banked
 19916  011180  6FE5               	movwf	Console_Render@y& (0+255),b
 19917  011182  D0DF               	goto	l11599
 19918  011184                     l11569:
 19919                           
 19920                           ; BSR set to: 0
 19921                           ;Console.c: 394: {
 19922                           ;Console.c: 395: gForecolour = lCBuffer[y];
 19923  011184  0100               	movlb	0	; () banked
 19924  011186  51E5               	movf	Console_Render@y& (0+255),w,b
 19925  011188  0D02               	mullw	2
 19926  01118A  0E00               	movlw	low _lCBuffer
 19927  01118C  24F3               	addwf	prodl,w,c
 19928  01118E  6ED9               	movwf	fsr2l,c
 19929  011190  0E01               	movlw	high _lCBuffer
 19930  011192  20F4               	addwfc	prodh,w,c
 19931  011194  6EDA               	movwf	fsr2h,c
 19932  011196  CFDE F0FD          	movff	postinc2,_gForecolour
 19933  01119A  CFDD F0FE          	movff	postdec2,_gForecolour+1
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19937  01119E  0E00               	movlw	0
 19938  0111A0  0100               	movlb	0	; () banked
 19939  0111A2  6FE4               	movwf	Console_Render@x& (0+255),b
 19940  0111A4                     l11573:
 19941                           
 19942                           ; BSR set to: 0
 19943  0111A4  0E13               	movlw	19
 19944  0111A6  0100               	movlb	0	; () banked
 19945  0111A8  65E4               	cpfsgt	Console_Render@x& (0+255),b
 19946  0111AA  D001               	goto	l11577
 19947  0111AC  D0BE               	goto	l11593
 19948  0111AE                     l11577:
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;Console.c: 397: {
 19952                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 19953  0111AE  0100               	movlb	0	; () banked
 19954  0111B0  51E5               	movf	Console_Render@y& (0+255),w,b
 19955  0111B2  0D14               	mullw	20
 19956  0111B4  0E46               	movlw	low _lBuffer
 19957  0111B6  0100               	movlb	0	; () banked
 19958  0111B8  6FDD               	movwf	??_Console_Render& (0+255),b
 19959  0111BA  0E02               	movlw	high _lBuffer
 19960  0111BC  0100               	movlb	0	; () banked
 19961  0111BE  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 19962  0111C0  50F3               	movf	prodl,w,c
 19963  0111C2  0100               	movlb	0	; () banked
 19964  0111C4  27DD               	addwf	??_Console_Render& (0+255),f,b
 19965  0111C6  50F4               	movf	prodh,w,c
 19966  0111C8  0100               	movlb	0	; () banked
 19967  0111CA  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 19968  0111CC  0100               	movlb	0	; () banked
 19969  0111CE  51E4               	movf	Console_Render@x& (0+255),w,b
 19970  0111D0  0D01               	mullw	1
 19971  0111D2  50F3               	movf	prodl,w,c
 19972  0111D4  0100               	movlb	0	; () banked
 19973  0111D6  25DD               	addwf	??_Console_Render& (0+255),w,b
 19974  0111D8  6ED9               	movwf	fsr2l,c
 19975  0111DA  50F4               	movf	prodh,w,c
 19976  0111DC  0100               	movlb	0	; () banked
 19977  0111DE  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 19978  0111E0  6EDA               	movwf	fsr2h,c
 19979  0111E2  AEDF               	btfss	indf2,7,c
 19980  0111E4  D09A               	goto	l11587
 19981                           
 19982                           ; BSR set to: 0
 19983                           ;Console.c: 399: {
 19984                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 19985  0111E6  0100               	movlb	0	; () banked
 19986  0111E8  51E5               	movf	Console_Render@y& (0+255),w,b
 19987  0111EA  0D14               	mullw	20
 19988  0111EC  0E46               	movlw	low _lBuffer
 19989  0111EE  0100               	movlb	0	; () banked
 19990  0111F0  6FDD               	movwf	??_Console_Render& (0+255),b
 19991  0111F2  0E02               	movlw	high _lBuffer
 19992  0111F4  0100               	movlb	0	; () banked
 19993  0111F6  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 19994  0111F8  50F3               	movf	prodl,w,c
 19995  0111FA  0100               	movlb	0	; () banked
 19996  0111FC  27DD               	addwf	??_Console_Render& (0+255),f,b
 19997  0111FE  50F4               	movf	prodh,w,c
 19998  011200  0100               	movlb	0	; () banked
 19999  011202  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20000  011204  0100               	movlb	0	; () banked
 20001  011206  51E4               	movf	Console_Render@x& (0+255),w,b
 20002  011208  0D01               	mullw	1
 20003  01120A  50F3               	movf	prodl,w,c
 20004  01120C  0100               	movlb	0	; () banked
 20005  01120E  25DD               	addwf	??_Console_Render& (0+255),w,b
 20006  011210  6ED9               	movwf	fsr2l,c
 20007  011212  50F4               	movf	prodh,w,c
 20008  011214  0100               	movlb	0	; () banked
 20009  011216  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20010  011218  6EDA               	movwf	fsr2h,c
 20011  01121A  0E7F               	movlw	127
 20012  01121C  16DF               	andwf	indf2,f,c
 20013                           
 20014                           ;Console.c: 401: if (lBuffer[y][x])
 20015  01121E  0100               	movlb	0	; () banked
 20016  011220  51E5               	movf	Console_Render@y& (0+255),w,b
 20017  011222  0D14               	mullw	20
 20018  011224  0E46               	movlw	low _lBuffer
 20019  011226  0100               	movlb	0	; () banked
 20020  011228  6FDD               	movwf	??_Console_Render& (0+255),b
 20021  01122A  0E02               	movlw	high _lBuffer
 20022  01122C  0100               	movlb	0	; () banked
 20023  01122E  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 20024  011230  50F3               	movf	prodl,w,c
 20025  011232  0100               	movlb	0	; () banked
 20026  011234  27DD               	addwf	??_Console_Render& (0+255),f,b
 20027  011236  50F4               	movf	prodh,w,c
 20028  011238  0100               	movlb	0	; () banked
 20029  01123A  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20030  01123C  0100               	movlb	0	; () banked
 20031  01123E  51E4               	movf	Console_Render@x& (0+255),w,b
 20032  011240  0D01               	mullw	1
 20033  011242  50F3               	movf	prodl,w,c
 20034  011244  0100               	movlb	0	; () banked
 20035  011246  25DD               	addwf	??_Console_Render& (0+255),w,b
 20036  011248  6ED9               	movwf	fsr2l,c
 20037  01124A  50F4               	movf	prodh,w,c
 20038  01124C  0100               	movlb	0	; () banked
 20039  01124E  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20040  011250  6EDA               	movwf	fsr2h,c
 20041  011252  50DF               	movf	indf2,w,c
 20042  011254  B4D8               	btfsc	status,2,c
 20043  011256  D04A               	goto	l11585
 20044                           
 20045                           ; BSR set to: 0
 20046                           ;Console.c: 402: {
 20047                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20048  011258  C070  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20049  01125C  C071  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20050  011260  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20051  011264  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20052  011268  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20053  01126C  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20054  011270  C0F9  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 20055  011274  C0FA  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20056  011278  C0FB  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20057  01127C  C0FC  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20058  011280  ECED  F09B         	call	_LCD_FillRectangle	;wreg free
 20059                           
 20060                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20061  011284  0100               	movlb	0	; () banked
 20062  011286  51E5               	movf	Console_Render@y& (0+255),w,b
 20063  011288  0D14               	mullw	20
 20064  01128A  0E46               	movlw	low _lBuffer
 20065  01128C  0100               	movlb	0	; () banked
 20066  01128E  6FDD               	movwf	??_Console_Render& (0+255),b
 20067  011290  0E02               	movlw	high _lBuffer
 20068  011292  0100               	movlb	0	; () banked
 20069  011294  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 20070  011296  50F3               	movf	prodl,w,c
 20071  011298  0100               	movlb	0	; () banked
 20072  01129A  27DD               	addwf	??_Console_Render& (0+255),f,b
 20073  01129C  50F4               	movf	prodh,w,c
 20074  01129E  0100               	movlb	0	; () banked
 20075  0112A0  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20076  0112A2  0100               	movlb	0	; () banked
 20077  0112A4  51E4               	movf	Console_Render@x& (0+255),w,b
 20078  0112A6  0D01               	mullw	1
 20079  0112A8  50F3               	movf	prodl,w,c
 20080  0112AA  0100               	movlb	0	; () banked
 20081  0112AC  25DD               	addwf	??_Console_Render& (0+255),w,b
 20082  0112AE  6ED9               	movwf	fsr2l,c
 20083  0112B0  50F4               	movf	prodh,w,c
 20084  0112B2  0100               	movlb	0	; () banked
 20085  0112B4  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20086  0112B6  6EDA               	movwf	fsr2h,c
 20087  0112B8  50DF               	movf	indf2,w,c
 20088  0112BA  EC41  F094         	call	_Console_MakeField
 20089  0112BE  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
 20090  0112C2  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20091  0112C6  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20092  0112CA  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20093  0112CE  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20094  0112D2  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20095  0112D6  C0F9  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 20096  0112DA  C0FA  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20097  0112DE  C0FB  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20098  0112E2  C0FC  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20099  0112E6  EC7E  F098         	call	_LCD_DrawField	;wreg free
 20100                           
 20101                           ;Console.c: 405: }
 20102  0112EA  D017               	goto	l11587
 20103  0112EC                     l11585:
 20104                           
 20105                           ;Console.c: 406: else
 20106                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20107  0112EC  0E00               	movlw	0
 20108  0112EE  0100               	movlb	0	; () banked
 20109  0112F0  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20110  0112F2  0E00               	movlw	0
 20111  0112F4  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20112  0112F6  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20113  0112FA  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20114  0112FE  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20115  011302  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20116  011306  C0F9  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 20117  01130A  C0FA  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20118  01130E  C0FB  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20119  011312  C0FC  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20120  011316  ECED  F09B         	call	_LCD_FillRectangle	;wreg free
 20121  01131A                     l11587:
 20122                           
 20123                           ;Console.c: 408: }
 20124                           ;Console.c: 409: lCursor.x += (5 + 1);
 20125  01131A  0E06               	movlw	6
 20126  01131C  0100               	movlb	0	; () banked
 20127  01131E  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 20128  011320  0E00               	movlw	0
 20129  011322  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20130                           
 20131                           ; BSR set to: 0
 20132  011324  0100               	movlb	0	; () banked
 20133  011326  2BE4               	incf	Console_Render@x& (0+255),f,b
 20134  011328  D73D               	goto	l11573
 20135  01132A                     l11593:
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;Console.c: 410: }
 20139                           ;Console.c: 411: lCursor.y += (7 + 1);
 20140  01132A  0E08               	movlw	8
 20141  01132C  0100               	movlb	0	; () banked
 20142  01132E  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20143  011330  0E00               	movlw	0
 20144  011332  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;Console.c: 412: lCursor.x = 6;
 20148  011334  0E00               	movlw	0
 20149  011336  0100               	movlb	0	; () banked
 20150  011338  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20151  01133A  0E06               	movlw	6
 20152  01133C  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 20153                           
 20154                           ; BSR set to: 0
 20155  01133E  0100               	movlb	0	; () banked
 20156  011340  2BE5               	incf	Console_Render@y& (0+255),f,b
 20157  011342                     l11599:
 20158                           
 20159                           ; BSR set to: 0
 20160  011342  0100               	movlb	0	; () banked
 20161  011344  51E5               	movf	Console_Render@y& (0+255),w,b
 20162  011346  5C36               	subwf	_lBufferY,w,c
 20163  011348  B0D8               	btfsc	status,0,c
 20164  01134A  D71C               	goto	l11569
 20165                           
 20166                           ; BSR set to: 0
 20167                           ;Console.c: 413: }
 20168                           ;Console.c: 415: if (clearall)
 20169                           
 20170                           ; BSR set to: 0
 20171  01134C  0100               	movlb	0	; () banked
 20172  01134E  517A               	movf	_clearall& (0+255),w,b
 20173  011350  B4D8               	btfsc	status,2,c
 20174  011352  0012               	return	
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;Console.c: 416: {
 20178                           ;Console.c: 417: clearall = 0;
 20179  011354  0E00               	movlw	0
 20180  011356  0100               	movlb	0	; () banked
 20181  011358  6F7A               	movwf	_clearall& (0+255),b
 20182                           
 20183                           ; BSR set to: 0
 20184                           ;Console.c: 418: lBufferY = temp;
 20185  01135A  C0DF  F036         	movff	Console_Render@temp,_lBufferY
 20186                           
 20187                           ; BSR set to: 0
 20188  01135E  0012               	return	
 20189  011360                     __end_of_Console_Render:
 20190                           	opt stack 0
 20191                           tosu	equ	0xFFF
 20192                           tosh	equ	0xFFE
 20193                           tosl	equ	0xFFD
 20194                           pclath	equ	0xFFA
 20195                           tblptru	equ	0xFF8
 20196                           tblptrh	equ	0xFF7
 20197                           tblptrl	equ	0xFF6
 20198                           tablat	equ	0xFF5
 20199                           prodh	equ	0xFF4
 20200                           prodl	equ	0xFF3
 20201                           intcon	equ	0xFF2
 20202                           indf0	equ	0xFEF
 20203                           postinc0	equ	0xFEE
 20204                           fsr0h	equ	0xFEA
 20205                           fsr0l	equ	0xFE9
 20206                           wreg	equ	0xFE8
 20207                           indf1	equ	0xFE7
 20208                           postdec1	equ	0xFE5
 20209                           fsr1h	equ	0xFE2
 20210                           fsr1l	equ	0xFE1
 20211                           indf2	equ	0xFDF
 20212                           postinc2	equ	0xFDE
 20213                           postdec2	equ	0xFDD
 20214                           plusw2	equ	0xFDB
 20215                           fsr2h	equ	0xFDA
 20216                           fsr2l	equ	0xFD9
 20217                           status	equ	0xFD8
 20218                           
 20219 ;; *************** function _LCD_FillRectangle *****************
 20220 ;; Defined at:
 20221 ;;		line 318 in file "Library/LCD.c"
 20222 ;; Parameters:    Size  Location     Type
 20223 ;;  pColour         2    9[BANK0 ] unsigned short 
 20224 ;;  pPoint          4   11[BANK0 ] struct Point
 20225 ;;  pSize           4   15[BANK0 ] struct Point
 20226 ;; Auto vars:     Size  Location     Type
 20227 ;;  j               1   22[BANK0 ] unsigned char 
 20228 ;;  i               1   21[BANK0 ] unsigned char 
 20229 ;; Return value:  Size  Location     Type
 20230 ;;                  1    wreg      void 
 20231 ;; Registers used:
 20232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20233 ;; Tracked objects:
 20234 ;;		On entry : 0/0
 20235 ;;		On exit  : 0/0
 20236 ;;		Unchanged: 0/0
 20237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20238 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;Total ram usage:       14 bytes
 20243 ;; Hardware stack levels used:    1
 20244 ;; Hardware stack levels required when called:   10
 20245 ;; This function calls:
 20246 ;;		_LCD_Word_Write
 20247 ;;		_Set_Addr_Window
 20248 ;; This function is called by:
 20249 ;;		_Console_Render
 20250 ;;		_Console_ClearLine
 20251 ;; This function uses a non-reentrant model
 20252 ;;
 20253                           
 20254                           	psect	text111
 20255  0137DA                     __ptext111:
 20256                           	opt stack 0
 20257  0137DA                     _LCD_FillRectangle:
 20258                           	opt stack 19
 20259                           
 20260                           ;LCD.c: 320: UINT8 i = 0x00;
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;incstack = 0
 20264  0137DA  0E00               	movlw	0
 20265  0137DC  0100               	movlb	0	; () banked
 20266  0137DE  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 20267                           
 20268                           ;LCD.c: 321: UINT8 j = 0x00;
 20269  0137E0  0E00               	movlw	0
 20270  0137E2  0100               	movlb	0	; () banked
 20271  0137E4  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 20272                           
 20273                           ; BSR set to: 0
 20274                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20275  0137E6  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20276  0137EA  0100               	movlb	0	; () banked
 20277  0137EC  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20278  0137EE  0100               	movlb	0	; () banked
 20279  0137F0  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20280  0137F2  0100               	movlb	0	; () banked
 20281  0137F4  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 20282  0137F6  0100               	movlb	0	; () banked
 20283  0137F8  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 20284  0137FA  0100               	movlb	0	; () banked
 20285  0137FC  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 20286  0137FE  0100               	movlb	0	; () banked
 20287  013800  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20288  013802  0100               	movlb	0	; () banked
 20289  013804  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20290  013806  0100               	movlb	0	; () banked
 20291  013808  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20292  01380A  0100               	movlb	0	; () banked
 20293  01380C  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20294  01380E  0100               	movlb	0	; () banked
 20295  013810  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 20296  013812  0100               	movlb	0	; () banked
 20297  013814  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20298  013816  ECDB  F096         	call	_Set_Addr_Window
 20299                           
 20300                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20301  01381A  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20302  01381E                     l11109:
 20303  01381E  0100               	movlb	0	; () banked
 20304  013820  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 20305  013822  0100               	movlb	0	; () banked
 20306  013824  B4D8               	btfsc	status,2,c
 20307  013826  0012               	return	
 20308                           
 20309                           ; BSR set to: 0
 20310                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20311                           
 20312                           ; BSR set to: 0
 20313  013828  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20314  01382C                     l11113:
 20315                           
 20316                           ; BSR set to: 0
 20317  01382C  0100               	movlb	0	; () banked
 20318  01382E  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 20319  013830  0100               	movlb	0	; () banked
 20320  013832  B4D8               	btfsc	status,2,c
 20321  013834  D009               	goto	l11123
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20325                           
 20326                           ; BSR set to: 0
 20327                           
 20328                           ; BSR set to: 0
 20329  013836  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20330  01383A  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20331  01383E  EC3E  F0A3         	call	_LCD_Word_Write	;wreg free
 20332  013842  0100               	movlb	0	; () banked
 20333  013844  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 20334  013846  D7F2               	goto	l11113
 20335  013848                     l11123:
 20336                           
 20337                           ; BSR set to: 0
 20338  013848  0100               	movlb	0	; () banked
 20339  01384A  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 20340  01384C  D7E8               	goto	l11109
 20341  01384E                     __end_of_LCD_FillRectangle:
 20342                           	opt stack 0
 20343                           tosu	equ	0xFFF
 20344                           tosh	equ	0xFFE
 20345                           tosl	equ	0xFFD
 20346                           pclath	equ	0xFFA
 20347                           tblptru	equ	0xFF8
 20348                           tblptrh	equ	0xFF7
 20349                           tblptrl	equ	0xFF6
 20350                           tablat	equ	0xFF5
 20351                           prodh	equ	0xFF4
 20352                           prodl	equ	0xFF3
 20353                           intcon	equ	0xFF2
 20354                           indf0	equ	0xFEF
 20355                           postinc0	equ	0xFEE
 20356                           fsr0h	equ	0xFEA
 20357                           fsr0l	equ	0xFE9
 20358                           wreg	equ	0xFE8
 20359                           indf1	equ	0xFE7
 20360                           postdec1	equ	0xFE5
 20361                           fsr1h	equ	0xFE2
 20362                           fsr1l	equ	0xFE1
 20363                           indf2	equ	0xFDF
 20364                           postinc2	equ	0xFDE
 20365                           postdec2	equ	0xFDD
 20366                           plusw2	equ	0xFDB
 20367                           fsr2h	equ	0xFDA
 20368                           fsr2l	equ	0xFD9
 20369                           status	equ	0xFD8
 20370                           
 20371 ;; *************** function _LCD_DrawField *****************
 20372 ;; Defined at:
 20373 ;;		line 393 in file "Library/LCD.c"
 20374 ;; Parameters:    Size  Location     Type
 20375 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20376 ;;		 -> Console_MakeField@Fill(70), 
 20377 ;;  pPoint          4   20[BANK0 ] struct Point
 20378 ;;  pSize           4   24[BANK0 ] struct Point
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;  count           2   30[BANK0 ] unsigned short 
 20381 ;;  i               1   34[BANK0 ] unsigned char 
 20382 ;;  ymax            1   33[BANK0 ] unsigned char 
 20383 ;;  xmax            1   32[BANK0 ] unsigned char 
 20384 ;; Return value:  Size  Location     Type
 20385 ;;                  1    wreg      void 
 20386 ;; Registers used:
 20387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20388 ;; Tracked objects:
 20389 ;;		On entry : 0/0
 20390 ;;		On exit  : 0/0
 20391 ;;		Unchanged: 0/0
 20392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20393 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20396 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20397 ;;Total ram usage:       17 bytes
 20398 ;; Hardware stack levels used:    1
 20399 ;; Hardware stack levels required when called:   10
 20400 ;; This function calls:
 20401 ;;		_LCD_Word_Write
 20402 ;;		_Set_Addr_Window
 20403 ;;		___wmul
 20404 ;; This function is called by:
 20405 ;;		_Console_Render
 20406 ;; This function uses a non-reentrant model
 20407 ;;
 20408                           
 20409                           	psect	text112
 20410  0130FC                     __ptext112:
 20411                           	opt stack 0
 20412  0130FC                     _LCD_DrawField:
 20413                           	opt stack 19
 20414                           
 20415                           ;LCD.c: 396: UINT8 i = 0x00;
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;incstack = 0
 20419  0130FC  0E00               	movlw	0
 20420  0130FE  0100               	movlb	0	; () banked
 20421  013100  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 20422                           
 20423                           ; BSR set to: 0
 20424                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20425  013102  0100               	movlb	0	; () banked
 20426  013104  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20427  013106  0100               	movlb	0	; () banked
 20428  013108  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20429  01310A  0100               	movlb	0	; () banked
 20430  01310C  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 20431                           
 20432                           ; BSR set to: 0
 20433                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20434  01310E  0100               	movlb	0	; () banked
 20435  013110  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20436  013112  0100               	movlb	0	; () banked
 20437  013114  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20438  013116  0100               	movlb	0	; () banked
 20439  013118  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20443  01311A  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20444  01311E  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20445  013122  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20446  013126  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20447  01312A  EC4B  F0A1         	call	___wmul	;wreg free
 20448  01312E  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 20449  013132  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 20450                           
 20451                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20452  013136  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20453  01313A  0100               	movlb	0	; () banked
 20454  01313C  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 20455  01313E  0100               	movlb	0	; () banked
 20456  013140  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 20457  013142  0100               	movlb	0	; () banked
 20458  013144  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 20459  013146  0100               	movlb	0	; () banked
 20460  013148  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 20461  01314A  0100               	movlb	0	; () banked
 20462  01314C  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20463  01314E  ECDB  F096         	call	_Set_Addr_Window
 20464                           
 20465                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20466  013152  0E00               	movlw	0
 20467  013154  0100               	movlb	0	; () banked
 20468  013156  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 20469  013158  D013               	goto	l11145
 20470  01315A                     l11141:
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20474  01315A  0100               	movlb	0	; () banked
 20475  01315C  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 20476  01315E  0D02               	mullw	2
 20477  013160  50F3               	movf	prodl,w,c
 20478  013162  0100               	movlb	0	; () banked
 20479  013164  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 20480  013166  6ED9               	movwf	fsr2l,c
 20481  013168  50F4               	movf	prodh,w,c
 20482  01316A  0100               	movlb	0	; () banked
 20483  01316C  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20484  01316E  6EDA               	movwf	fsr2h,c
 20485  013170  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 20486  013174  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 20487  013178  EC3E  F0A3         	call	_LCD_Word_Write	;wreg free
 20488  01317C  0100               	movlb	0	; () banked
 20489  01317E  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 20490  013180                     l11145:
 20491                           
 20492                           ; BSR set to: 0
 20493  013180  0100               	movlb	0	; () banked
 20494  013182  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 20495  013184  0100               	movlb	0	; () banked
 20496  013186  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 20497  013188  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20498  01318A  0100               	movlb	0	; () banked
 20499  01318C  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 20500  01318E  0100               	movlb	0	; () banked
 20501  013190  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 20502  013192  0100               	movlb	0	; () banked
 20503  013194  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20504  013196  0100               	movlb	0	; () banked
 20505  013198  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20506  01319A  B0D8               	btfsc	status,0,c
 20507  01319C  0012               	return	
 20508  01319E  D7DD               	goto	l11141
 20509  0131A0                     __end_of_LCD_DrawField:
 20510                           	opt stack 0
 20511                           tosu	equ	0xFFF
 20512                           tosh	equ	0xFFE
 20513                           tosl	equ	0xFFD
 20514                           pclath	equ	0xFFA
 20515                           tblptru	equ	0xFF8
 20516                           tblptrh	equ	0xFF7
 20517                           tblptrl	equ	0xFF6
 20518                           tablat	equ	0xFF5
 20519                           prodh	equ	0xFF4
 20520                           prodl	equ	0xFF3
 20521                           intcon	equ	0xFF2
 20522                           indf0	equ	0xFEF
 20523                           postinc0	equ	0xFEE
 20524                           fsr0h	equ	0xFEA
 20525                           fsr0l	equ	0xFE9
 20526                           wreg	equ	0xFE8
 20527                           indf1	equ	0xFE7
 20528                           postdec1	equ	0xFE5
 20529                           fsr1h	equ	0xFE2
 20530                           fsr1l	equ	0xFE1
 20531                           indf2	equ	0xFDF
 20532                           postinc2	equ	0xFDE
 20533                           postdec2	equ	0xFDD
 20534                           plusw2	equ	0xFDB
 20535                           fsr2h	equ	0xFDA
 20536                           fsr2l	equ	0xFD9
 20537                           status	equ	0xFD8
 20538                           
 20539 ;; *************** function ___wmul *****************
 20540 ;; Defined at:
 20541 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 20542 ;; Parameters:    Size  Location     Type
 20543 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20544 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20545 ;; Auto vars:     Size  Location     Type
 20546 ;;  product         2    4[BANK0 ] unsigned int 
 20547 ;; Return value:  Size  Location     Type
 20548 ;;                  2    0[BANK0 ] unsigned int 
 20549 ;; Registers used:
 20550 ;;		wreg, status,2, status,0, prodl, prodh
 20551 ;; Tracked objects:
 20552 ;;		On entry : 0/0
 20553 ;;		On exit  : 0/0
 20554 ;;		Unchanged: 0/0
 20555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20559 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20560 ;;Total ram usage:        6 bytes
 20561 ;; Hardware stack levels used:    1
 20562 ;; Hardware stack levels required when called:    7
 20563 ;; This function calls:
 20564 ;;		Nothing
 20565 ;; This function is called by:
 20566 ;;		_LCD_DrawField
 20567 ;; This function uses a non-reentrant model
 20568 ;;
 20569                           
 20570                           	psect	text113
 20571  014296                     __ptext113:
 20572                           	opt stack 0
 20573  014296                     ___wmul:
 20574                           	opt stack 21
 20575                           
 20576                           ; BSR set to: 0
 20577                           ;incstack = 0
 20578  014296  0100               	movlb	0	; () banked
 20579  014298  51BA               	movf	___wmul@multiplier& (0+255),w,b
 20580  01429A  0100               	movlb	0	; () banked
 20581  01429C  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 20582  01429E  CFF3 F0BE          	movff	prodl,___wmul@product
 20583  0142A2  CFF4 F0BF          	movff	prodh,___wmul@product+1
 20584  0142A6  0100               	movlb	0	; () banked
 20585  0142A8  51BA               	movf	___wmul@multiplier& (0+255),w,b
 20586  0142AA  0100               	movlb	0	; () banked
 20587  0142AC  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20588  0142AE  50F3               	movf	prodl,w,c
 20589  0142B0  0100               	movlb	0	; () banked
 20590  0142B2  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 20591  0142B4  0100               	movlb	0	; () banked
 20592  0142B6  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20593  0142B8  0100               	movlb	0	; () banked
 20594  0142BA  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 20595  0142BC  50F3               	movf	prodl,w,c
 20596  0142BE  0100               	movlb	0	; () banked
 20597  0142C0  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 20598                           
 20599                           ; BSR set to: 0
 20600  0142C2  C0BE  F0BA         	movff	___wmul@product,?___wmul
 20601  0142C6  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 20602  0142CA  0012               	return	
 20603  0142CC                     __end_of___wmul:
 20604                           	opt stack 0
 20605                           tosu	equ	0xFFF
 20606                           tosh	equ	0xFFE
 20607                           tosl	equ	0xFFD
 20608                           pclath	equ	0xFFA
 20609                           tblptru	equ	0xFF8
 20610                           tblptrh	equ	0xFF7
 20611                           tblptrl	equ	0xFF6
 20612                           tablat	equ	0xFF5
 20613                           prodh	equ	0xFF4
 20614                           prodl	equ	0xFF3
 20615                           intcon	equ	0xFF2
 20616                           indf0	equ	0xFEF
 20617                           postinc0	equ	0xFEE
 20618                           fsr0h	equ	0xFEA
 20619                           fsr0l	equ	0xFE9
 20620                           wreg	equ	0xFE8
 20621                           indf1	equ	0xFE7
 20622                           postdec1	equ	0xFE5
 20623                           fsr1h	equ	0xFE2
 20624                           fsr1l	equ	0xFE1
 20625                           indf2	equ	0xFDF
 20626                           postinc2	equ	0xFDE
 20627                           postdec2	equ	0xFDD
 20628                           plusw2	equ	0xFDB
 20629                           fsr2h	equ	0xFDA
 20630                           fsr2l	equ	0xFD9
 20631                           status	equ	0xFD8
 20632                           
 20633 ;; *************** function _Set_Addr_Window *****************
 20634 ;; Defined at:
 20635 ;;		line 214 in file "Library/LCD.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;  xs              1    wreg     unsigned char 
 20638 ;;  ys              1    5[BANK0 ] unsigned char 
 20639 ;;  xe              1    6[BANK0 ] unsigned char 
 20640 ;;  ye              1    7[BANK0 ] unsigned char 
 20641 ;; Auto vars:     Size  Location     Type
 20642 ;;  xs              1    8[BANK0 ] unsigned char 
 20643 ;; Return value:  Size  Location     Type
 20644 ;;                  1    wreg      void 
 20645 ;; Registers used:
 20646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20647 ;; Tracked objects:
 20648 ;;		On entry : 0/0
 20649 ;;		On exit  : 0/0
 20650 ;;		Unchanged: 0/0
 20651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20655 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20656 ;;Total ram usage:        4 bytes
 20657 ;; Hardware stack levels used:    1
 20658 ;; Hardware stack levels required when called:    9
 20659 ;; This function calls:
 20660 ;;		_LCD_Write
 20661 ;; This function is called by:
 20662 ;;		_LCD_Fill
 20663 ;;		_LCD_FillRectangle
 20664 ;;		_LCD_DrawField
 20665 ;;		_RAM_Address_Set
 20666 ;;		_LCD_DrawPixel
 20667 ;; This function uses a non-reentrant model
 20668 ;;
 20669                           
 20670                           	psect	text114
 20671  012DB6                     __ptext114:
 20672                           	opt stack 0
 20673  012DB6                     _Set_Addr_Window:
 20674                           	opt stack 19
 20675                           
 20676                           ; BSR set to: 0
 20677                           ;incstack = 0
 20678                           ;Set_Addr_Window@xs stored from wreg
 20679  012DB6  0100               	movlb	0	; () banked
 20680  012DB8  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 20681                           
 20682                           ;LCD.c: 216: ys+=2;
 20683  012DBA  0E02               	movlw	2
 20684  012DBC  0100               	movlb	0	; () banked
 20685  012DBE  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20686                           
 20687                           ;LCD.c: 217: ye+=2;
 20688  012DC0  0E02               	movlw	2
 20689  012DC2  0100               	movlb	0	; () banked
 20690  012DC4  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20691                           
 20692                           ;LCD.c: 218: xs+=3;
 20693  012DC6  0E03               	movlw	3
 20694  012DC8  0100               	movlb	0	; () banked
 20695  012DCA  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20696                           
 20697                           ;LCD.c: 219: xe+=3;
 20698  012DCC  0E03               	movlw	3
 20699  012DCE  0100               	movlb	0	; () banked
 20700  012DD0  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20701                           
 20702                           ; BSR set to: 0
 20703                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20704  012DD2  0E00               	movlw	0
 20705  012DD4  0100               	movlb	0	; () banked
 20706  012DD6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20707  012DD8  0E2A               	movlw	42
 20708  012DDA  ECE2  F0A2         	call	_LCD_Write
 20709                           
 20710                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20711  012DDE  0E01               	movlw	1
 20712  012DE0  0100               	movlb	0	; () banked
 20713  012DE2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20714  012DE4  0E00               	movlw	0
 20715  012DE6  ECE2  F0A2         	call	_LCD_Write
 20716                           
 20717                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20718  012DEA  0E01               	movlw	1
 20719  012DEC  0100               	movlb	0	; () banked
 20720  012DEE  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20721  012DF0  0100               	movlb	0	; () banked
 20722  012DF2  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 20723  012DF4  ECE2  F0A2         	call	_LCD_Write
 20724                           
 20725                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20726  012DF8  0E01               	movlw	1
 20727  012DFA  0100               	movlb	0	; () banked
 20728  012DFC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20729  012DFE  0E00               	movlw	0
 20730  012E00  ECE2  F0A2         	call	_LCD_Write
 20731                           
 20732                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20733  012E04  0E01               	movlw	1
 20734  012E06  0100               	movlb	0	; () banked
 20735  012E08  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20736  012E0A  0100               	movlb	0	; () banked
 20737  012E0C  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 20738  012E0E  ECE2  F0A2         	call	_LCD_Write
 20739                           
 20740                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20741  012E12  0E00               	movlw	0
 20742  012E14  0100               	movlb	0	; () banked
 20743  012E16  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20744  012E18  0E2B               	movlw	43
 20745  012E1A  ECE2  F0A2         	call	_LCD_Write
 20746                           
 20747                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20748  012E1E  0E01               	movlw	1
 20749  012E20  0100               	movlb	0	; () banked
 20750  012E22  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20751  012E24  0E00               	movlw	0
 20752  012E26  ECE2  F0A2         	call	_LCD_Write
 20753                           
 20754                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20755  012E2A  0E01               	movlw	1
 20756  012E2C  0100               	movlb	0	; () banked
 20757  012E2E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20758  012E30  0100               	movlb	0	; () banked
 20759  012E32  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 20760  012E34  ECE2  F0A2         	call	_LCD_Write
 20761                           
 20762                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20763  012E38  0E01               	movlw	1
 20764  012E3A  0100               	movlb	0	; () banked
 20765  012E3C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20766  012E3E  0E00               	movlw	0
 20767  012E40  ECE2  F0A2         	call	_LCD_Write
 20768                           
 20769                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20770  012E44  0E01               	movlw	1
 20771  012E46  0100               	movlb	0	; () banked
 20772  012E48  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20773  012E4A  0100               	movlb	0	; () banked
 20774  012E4C  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 20775  012E4E  ECE2  F0A2         	call	_LCD_Write
 20776                           
 20777                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20778  012E52  0E00               	movlw	0
 20779  012E54  0100               	movlb	0	; () banked
 20780  012E56  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20781  012E58  0E2C               	movlw	44
 20782  012E5A  ECE2  F0A2         	call	_LCD_Write
 20783  012E5E  0012               	return		;funcret
 20784  012E60                     __end_of_Set_Addr_Window:
 20785                           	opt stack 0
 20786                           tosu	equ	0xFFF
 20787                           tosh	equ	0xFFE
 20788                           tosl	equ	0xFFD
 20789                           pclath	equ	0xFFA
 20790                           tblptru	equ	0xFF8
 20791                           tblptrh	equ	0xFF7
 20792                           tblptrl	equ	0xFF6
 20793                           tablat	equ	0xFF5
 20794                           prodh	equ	0xFF4
 20795                           prodl	equ	0xFF3
 20796                           intcon	equ	0xFF2
 20797                           indf0	equ	0xFEF
 20798                           postinc0	equ	0xFEE
 20799                           fsr0h	equ	0xFEA
 20800                           fsr0l	equ	0xFE9
 20801                           wreg	equ	0xFE8
 20802                           indf1	equ	0xFE7
 20803                           postdec1	equ	0xFE5
 20804                           fsr1h	equ	0xFE2
 20805                           fsr1l	equ	0xFE1
 20806                           indf2	equ	0xFDF
 20807                           postinc2	equ	0xFDE
 20808                           postdec2	equ	0xFDD
 20809                           plusw2	equ	0xFDB
 20810                           fsr2h	equ	0xFDA
 20811                           fsr2l	equ	0xFD9
 20812                           status	equ	0xFD8
 20813                           
 20814 ;; *************** function _LCD_Word_Write *****************
 20815 ;; Defined at:
 20816 ;;		line 198 in file "Library/LCD.c"
 20817 ;; Parameters:    Size  Location     Type
 20818 ;;  value           2    5[BANK0 ] unsigned short 
 20819 ;; Auto vars:     Size  Location     Type
 20820 ;;		None
 20821 ;; Return value:  Size  Location     Type
 20822 ;;                  1    wreg      void 
 20823 ;; Registers used:
 20824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20825 ;; Tracked objects:
 20826 ;;		On entry : 0/0
 20827 ;;		On exit  : 0/0
 20828 ;;		Unchanged: 0/0
 20829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;Total ram usage:        2 bytes
 20835 ;; Hardware stack levels used:    1
 20836 ;; Hardware stack levels required when called:    9
 20837 ;; This function calls:
 20838 ;;		_LCD_Write
 20839 ;; This function is called by:
 20840 ;;		_LCD_Fill
 20841 ;;		_LCD_FillRectangle
 20842 ;;		_LCD_DrawField
 20843 ;;		_LCD_DrawPixel
 20844 ;; This function uses a non-reentrant model
 20845 ;;
 20846                           
 20847                           	psect	text115
 20848  01467C                     __ptext115:
 20849                           	opt stack 0
 20850  01467C                     _LCD_Word_Write:
 20851                           	opt stack 19
 20852                           
 20853                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20854                           
 20855                           ;incstack = 0
 20856  01467C  0E01               	movlw	1
 20857  01467E  0100               	movlb	0	; () banked
 20858  014680  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20859  014682  0100               	movlb	0	; () banked
 20860  014684  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20861  014686  ECE2  F0A2         	call	_LCD_Write
 20862                           
 20863                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20864  01468A  0E01               	movlw	1
 20865  01468C  0100               	movlb	0	; () banked
 20866  01468E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20867  014690  0100               	movlb	0	; () banked
 20868  014692  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 20869  014694  ECE2  F0A2         	call	_LCD_Write
 20870  014698  0012               	return		;funcret
 20871  01469A                     __end_of_LCD_Word_Write:
 20872                           	opt stack 0
 20873                           tosu	equ	0xFFF
 20874                           tosh	equ	0xFFE
 20875                           tosl	equ	0xFFD
 20876                           pclath	equ	0xFFA
 20877                           tblptru	equ	0xFF8
 20878                           tblptrh	equ	0xFF7
 20879                           tblptrl	equ	0xFF6
 20880                           tablat	equ	0xFF5
 20881                           prodh	equ	0xFF4
 20882                           prodl	equ	0xFF3
 20883                           intcon	equ	0xFF2
 20884                           indf0	equ	0xFEF
 20885                           postinc0	equ	0xFEE
 20886                           fsr0h	equ	0xFEA
 20887                           fsr0l	equ	0xFE9
 20888                           wreg	equ	0xFE8
 20889                           indf1	equ	0xFE7
 20890                           postdec1	equ	0xFE5
 20891                           fsr1h	equ	0xFE2
 20892                           fsr1l	equ	0xFE1
 20893                           indf2	equ	0xFDF
 20894                           postinc2	equ	0xFDE
 20895                           postdec2	equ	0xFDD
 20896                           plusw2	equ	0xFDB
 20897                           fsr2h	equ	0xFDA
 20898                           fsr2l	equ	0xFD9
 20899                           status	equ	0xFD8
 20900                           
 20901 ;; *************** function _LCD_Write *****************
 20902 ;; Defined at:
 20903 ;;		line 67 in file "Library/LCD.c"
 20904 ;; Parameters:    Size  Location     Type
 20905 ;;  value           1    wreg     unsigned char 
 20906 ;;  mode            1    3[BANK0 ] enum E7705
 20907 ;; Auto vars:     Size  Location     Type
 20908 ;;  value           1    4[BANK0 ] unsigned char 
 20909 ;; Return value:  Size  Location     Type
 20910 ;;                  1    wreg      void 
 20911 ;; Registers used:
 20912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20913 ;; Tracked objects:
 20914 ;;		On entry : 0/0
 20915 ;;		On exit  : 0/0
 20916 ;;		Unchanged: 0/0
 20917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20918 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;Total ram usage:        2 bytes
 20923 ;; Hardware stack levels used:    1
 20924 ;; Hardware stack levels required when called:    8
 20925 ;; This function calls:
 20926 ;;		_Mode_Set
 20927 ;;		_SPI_Send
 20928 ;; This function is called by:
 20929 ;;		_LCD_Init
 20930 ;;		_LCD_Word_Write
 20931 ;;		_Set_Addr_Window
 20932 ;;		_Set_Rotation
 20933 ;;		_LCD_WriteCMD
 20934 ;;		_LCD_WriteData
 20935 ;;		_LCD_Data_Write
 20936 ;;		_LCD_Data_Write_4k
 20937 ;;		_Invert_Display
 20938 ;; This function uses a non-reentrant model
 20939 ;;
 20940                           
 20941                           	psect	text116
 20942  0145C4                     __ptext116:
 20943                           	opt stack 0
 20944  0145C4                     _LCD_Write:
 20945                           	opt stack 20
 20946                           
 20947                           ;incstack = 0
 20948                           ;LCD_Write@value stored from wreg
 20949  0145C4  0100               	movlb	0	; () banked
 20950  0145C6  6FBE               	movwf	LCD_Write@value& (0+255),b
 20951                           
 20952                           ;LCD.c: 89: Mode_Set(mode);
 20953  0145C8  0100               	movlb	0	; () banked
 20954  0145CA  51BD               	movf	LCD_Write@mode& (0+255),w,b
 20955  0145CC  ECF2  F0A3         	call	_Mode_Set
 20956                           
 20957                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20958  0145D0  0E6F               	movlw	low _SPI2
 20959  0145D2  0100               	movlb	0	; () banked
 20960  0145D4  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 20961  0145D6  0E01               	movlw	high _SPI2
 20962  0145D8  0100               	movlb	0	; () banked
 20963  0145DA  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20964  0145DC  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 20965  0145E0  ECCE  F09C         	call	_SPI_Send	;wreg free
 20966  0145E4  0012               	return		;funcret
 20967  0145E6                     __end_of_LCD_Write:
 20968                           	opt stack 0
 20969                           tosu	equ	0xFFF
 20970                           tosh	equ	0xFFE
 20971                           tosl	equ	0xFFD
 20972                           pclath	equ	0xFFA
 20973                           tblptru	equ	0xFF8
 20974                           tblptrh	equ	0xFF7
 20975                           tblptrl	equ	0xFF6
 20976                           tablat	equ	0xFF5
 20977                           prodh	equ	0xFF4
 20978                           prodl	equ	0xFF3
 20979                           intcon	equ	0xFF2
 20980                           indf0	equ	0xFEF
 20981                           postinc0	equ	0xFEE
 20982                           fsr0h	equ	0xFEA
 20983                           fsr0l	equ	0xFE9
 20984                           wreg	equ	0xFE8
 20985                           indf1	equ	0xFE7
 20986                           postdec1	equ	0xFE5
 20987                           fsr1h	equ	0xFE2
 20988                           fsr1l	equ	0xFE1
 20989                           indf2	equ	0xFDF
 20990                           postinc2	equ	0xFDE
 20991                           postdec2	equ	0xFDD
 20992                           plusw2	equ	0xFDB
 20993                           fsr2h	equ	0xFDA
 20994                           fsr2l	equ	0xFD9
 20995                           status	equ	0xFD8
 20996                           
 20997 ;; *************** function _SPI_Send *****************
 20998 ;; Defined at:
 20999 ;;		line 226 in file "Library/SPI.c"
 21000 ;; Parameters:    Size  Location     Type
 21001 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21002 ;;		 -> SPI1(11), SPI2(11), 
 21003 ;;  pData           1    2[BANK0 ] unsigned char 
 21004 ;; Auto vars:     Size  Location     Type
 21005 ;;		None
 21006 ;; Return value:  Size  Location     Type
 21007 ;;                  1    wreg      unsigned char 
 21008 ;; Registers used:
 21009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21010 ;; Tracked objects:
 21011 ;;		On entry : 0/0
 21012 ;;		On exit  : 0/0
 21013 ;;		Unchanged: 0/0
 21014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21015 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21019 ;;Total ram usage:        3 bytes
 21020 ;; Hardware stack levels used:    1
 21021 ;; Hardware stack levels required when called:    7
 21022 ;; This function calls:
 21023 ;;		Nothing
 21024 ;; This function is called by:
 21025 ;;		_LCD_Write
 21026 ;;		_OutSeg
 21027 ;; This function uses a non-reentrant model
 21028 ;;
 21029                           
 21030                           	psect	text117
 21031  01399C                     __ptext117:
 21032                           	opt stack 0
 21033  01399C                     _SPI_Send:
 21034                           	opt stack 20
 21035                           
 21036                           ;SPI.c: 253: switch (pInput->mChannel)
 21037                           
 21038                           ;incstack = 0
 21039  01399C  D026               	goto	l9981
 21040  01399E                     l9963:
 21041                           
 21042                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 21043  01399E  C082  FFD9         	movff	_PortC+4,fsr2l
 21044  0139A2  C083  FFDA         	movff	_PortC+5,fsr2h
 21045  0139A6  0100               	movlb	0	; () banked
 21046  0139A8  94DF               	bcf	indf2,2,c
 21047                           
 21048                           ; BSR set to: 0
 21049                           ;SPI.c: 257: SSP1BUF = pData;
 21050  0139AA  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 21051  0139AE                     l680:
 21052  0139AE  A0C7               	btfss	4039,0,c	;volatile
 21053  0139B0  D7FE               	goto	l680
 21054                           
 21055                           ;SPI.c: 259: pData = SSP1BUF;
 21056  0139B2  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 21057                           
 21058                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 21059  0139B6  C082  FFD9         	movff	_PortC+4,fsr2l
 21060  0139BA  C083  FFDA         	movff	_PortC+5,fsr2h
 21061  0139BE  0100               	movlb	0	; () banked
 21062  0139C0  84DF               	bsf	indf2,2,c
 21063                           
 21064                           ; BSR set to: 0
 21065                           ;SPI.c: 261: return pData;
 21066                           ;	Return value of _SPI_Send is never used
 21067  0139C2  0012               	return	
 21068  0139C4                     l9971:
 21069                           
 21070                           ; BSR set to: 0
 21071                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 21072  0139C4  C08C  FFD9         	movff	_PortD+4,fsr2l
 21073  0139C8  C08D  FFDA         	movff	_PortD+5,fsr2h
 21074  0139CC  0100               	movlb	0	; () banked
 21075  0139CE  9EDF               	bcf	indf2,7,c
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;SPI.c: 264: SSP2BUF = pData;
 21079  0139D0  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 21080  0139D4                     l685:
 21081  0139D4  A06D               	btfss	3949,0,c	;volatile
 21082  0139D6  D7FE               	goto	l685
 21083                           
 21084                           ;SPI.c: 266: pData = SSP2BUF;
 21085  0139D8  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 21086                           
 21087                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 21088  0139DC  C08C  FFD9         	movff	_PortD+4,fsr2l
 21089  0139E0  C08D  FFDA         	movff	_PortD+5,fsr2h
 21090  0139E4  0100               	movlb	0	; () banked
 21091  0139E6  8EDF               	bsf	indf2,7,c
 21092                           
 21093                           ; BSR set to: 0
 21094                           ;SPI.c: 269: };
 21095                           
 21096                           ; BSR set to: 0
 21097                           ;SPI.c: 268: return pData;
 21098                           ;	Return value of _SPI_Send is never used
 21099  0139E8  0012               	return	
 21100  0139EA                     l9981:
 21101  0139EA  0100               	movlb	0	; () banked
 21102  0139EC  EE20 F002          	lfsr	2,2
 21103  0139F0  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 21104  0139F2  26D9               	addwf	fsr2l,f,c
 21105  0139F4  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21106  0139F6  22DA               	addwfc	fsr2h,f,c
 21107  0139F8  50DF               	movf	indf2,w,c
 21108                           
 21109                           ; Switch size 1, requested type "space"
 21110                           ; Number of cases is 2, Range of values is 0 to 1
 21111                           ; switch strategies available:
 21112                           ; Name         Instructions Cycles
 21113                           ; simple_byte            7     4 (average)
 21114                           ;	Chosen strategy is simple_byte
 21115  0139FA  0A00               	xorlw	0	; case 0
 21116  0139FC  B4D8               	btfsc	status,2,c
 21117  0139FE  D7CF               	goto	l9963
 21118  013A00  0A01               	xorlw	1	; case 1
 21119  013A02  A4D8               	btfss	status,2,c
 21120  013A04  0012               	return	
 21121  013A06  D7DE               	goto	l9971
 21122  013A08                     __end_of_SPI_Send:
 21123                           	opt stack 0
 21124                           tosu	equ	0xFFF
 21125                           tosh	equ	0xFFE
 21126                           tosl	equ	0xFFD
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           indf0	equ	0xFEF
 21136                           postinc0	equ	0xFEE
 21137                           fsr0h	equ	0xFEA
 21138                           fsr0l	equ	0xFE9
 21139                           wreg	equ	0xFE8
 21140                           indf1	equ	0xFE7
 21141                           postdec1	equ	0xFE5
 21142                           fsr1h	equ	0xFE2
 21143                           fsr1l	equ	0xFE1
 21144                           indf2	equ	0xFDF
 21145                           postinc2	equ	0xFDE
 21146                           postdec2	equ	0xFDD
 21147                           plusw2	equ	0xFDB
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152 ;; *************** function _Mode_Set *****************
 21153 ;; Defined at:
 21154 ;;		line 40 in file "Library/LCD.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;  pMode           1    wreg     enum E7705
 21157 ;; Auto vars:     Size  Location     Type
 21158 ;;  pMode           1    0[BANK0 ] enum E7705
 21159 ;; Return value:  Size  Location     Type
 21160 ;;                  1    wreg      void 
 21161 ;; Registers used:
 21162 ;;		wreg
 21163 ;; Tracked objects:
 21164 ;;		On entry : 0/0
 21165 ;;		On exit  : 0/0
 21166 ;;		Unchanged: 0/0
 21167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;Total ram usage:        1 bytes
 21173 ;; Hardware stack levels used:    1
 21174 ;; Hardware stack levels required when called:    7
 21175 ;; This function calls:
 21176 ;;		Nothing
 21177 ;; This function is called by:
 21178 ;;		_LCD_Write
 21179 ;; This function uses a non-reentrant model
 21180 ;;
 21181                           
 21182                           	psect	text118
 21183  0147E4                     __ptext118:
 21184                           	opt stack 0
 21185  0147E4                     _Mode_Set:
 21186                           	opt stack 20
 21187                           
 21188                           ; BSR set to: 0
 21189                           ;incstack = 0
 21190                           ;Mode_Set@pMode stored from wreg
 21191  0147E4  0100               	movlb	0	; () banked
 21192  0147E6  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 21193                           
 21194                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21195  0147E8  0100               	movlb	0	; () banked
 21196  0147EA  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 21197  0147EC  D002               	bra	u6515
 21198  0147EE  9E85               	bcf	3973,7,c	;volatile
 21199  0147F0  D001               	bra	u6516
 21200  0147F2                     u6515:
 21201  0147F2  8E85               	bsf	3973,7,c	;volatile
 21202  0147F4                     u6516:
 21203  0147F4  0012               	return		;funcret
 21204  0147F6                     __end_of_Mode_Set:
 21205                           	opt stack 0
 21206                           tosu	equ	0xFFF
 21207                           tosh	equ	0xFFE
 21208                           tosl	equ	0xFFD
 21209                           pclath	equ	0xFFA
 21210                           tblptru	equ	0xFF8
 21211                           tblptrh	equ	0xFF7
 21212                           tblptrl	equ	0xFF6
 21213                           tablat	equ	0xFF5
 21214                           prodh	equ	0xFF4
 21215                           prodl	equ	0xFF3
 21216                           intcon	equ	0xFF2
 21217                           indf0	equ	0xFEF
 21218                           postinc0	equ	0xFEE
 21219                           fsr0h	equ	0xFEA
 21220                           fsr0l	equ	0xFE9
 21221                           wreg	equ	0xFE8
 21222                           indf1	equ	0xFE7
 21223                           postdec1	equ	0xFE5
 21224                           fsr1h	equ	0xFE2
 21225                           fsr1l	equ	0xFE1
 21226                           indf2	equ	0xFDF
 21227                           postinc2	equ	0xFDE
 21228                           postdec2	equ	0xFDD
 21229                           plusw2	equ	0xFDB
 21230                           fsr2h	equ	0xFDA
 21231                           fsr2l	equ	0xFD9
 21232                           status	equ	0xFD8
 21233                           
 21234 ;; *************** function _Console_MakeField *****************
 21235 ;; Defined at:
 21236 ;;		line 435 in file "Library/Console.c"
 21237 ;; Parameters:    Size  Location     Type
 21238 ;;  pInput          1    wreg     unsigned char 
 21239 ;; Auto vars:     Size  Location     Type
 21240 ;;  pInput          1   11[BANK0 ] unsigned char 
 21241 ;;  y               1   17[BANK0 ] unsigned char 
 21242 ;;  x               1   16[BANK0 ] unsigned char 
 21243 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21244 ;;		 -> Font5x7(480), 
 21245 ;;  Index           2    9[BANK0 ] unsigned short 
 21246 ;; Return value:  Size  Location     Type
 21247 ;;                  2    5[BANK0 ] PTR unsigned short 
 21248 ;; Registers used:
 21249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21250 ;; Tracked objects:
 21251 ;;		On entry : 0/0
 21252 ;;		On exit  : 0/0
 21253 ;;		Unchanged: 0/0
 21254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21255 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21256 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21258 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21259 ;;Total ram usage:       13 bytes
 21260 ;; Hardware stack levels used:    1
 21261 ;; Hardware stack levels required when called:    8
 21262 ;; This function calls:
 21263 ;;		_Byte_GetBit
 21264 ;; This function is called by:
 21265 ;;		_Console_Render
 21266 ;; This function uses a non-reentrant model
 21267 ;;
 21268                           
 21269                           	psect	text119
 21270  012882                     __ptext119:
 21271                           	opt stack 0
 21272  012882                     _Console_MakeField:
 21273                           	opt stack 21
 21274                           
 21275                           ;incstack = 0
 21276                           ;Console_MakeField@pInput stored from wreg
 21277  012882  0100               	movlb	0	; () banked
 21278  012884  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 21279                           
 21280                           ;Console.c: 437: static Colour Fill[7][5];
 21281                           ;Console.c: 438: pInput -= 32;
 21282  012886  0E20               	movlw	32
 21283  012888  0100               	movlb	0	; () banked
 21284  01288A  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 21285                           
 21286                           ; BSR set to: 0
 21287                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21288  01288C  0100               	movlb	0	; () banked
 21289  01288E  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 21290  012890  0D05               	mullw	5
 21291  012892  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 21292  012896  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 21293                           
 21294                           ; BSR set to: 0
 21295                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21296  01289A  0EAD               	movlw	low _Font5x7
 21297  01289C  0100               	movlb	0	; () banked
 21298  01289E  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 21299  0128A0  0100               	movlb	0	; () banked
 21300  0128A2  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 21301  0128A4  0EFD               	movlw	high _Font5x7
 21302  0128A6  0100               	movlb	0	; () banked
 21303  0128A8  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21304  0128AA  0100               	movlb	0	; () banked
 21305  0128AC  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21306                           
 21307                           ; BSR set to: 0
 21308                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21309  0128AE  0E00               	movlw	0
 21310  0128B0  0100               	movlb	0	; () banked
 21311  0128B2  6FCA               	movwf	Console_MakeField@x& (0+255),b
 21312  0128B4                     l11205:
 21313                           
 21314                           ; BSR set to: 0
 21315  0128B4  0E04               	movlw	4
 21316  0128B6  0100               	movlb	0	; () banked
 21317  0128B8  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 21318  0128BA  D001               	goto	l11209
 21319  0128BC  D043               	goto	l11229
 21320  0128BE                     l11209:
 21321                           
 21322                           ; BSR set to: 0
 21323                           ;Console.c: 444: {
 21324                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21325  0128BE  0E00               	movlw	0
 21326  0128C0  0100               	movlb	0	; () banked
 21327  0128C2  6FCB               	movwf	Console_MakeField@y& (0+255),b
 21328  0128C4                     l11211:
 21329                           
 21330                           ; BSR set to: 0
 21331  0128C4  0E06               	movlw	6
 21332  0128C6  0100               	movlb	0	; () banked
 21333  0128C8  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 21334  0128CA  D001               	goto	l11215
 21335  0128CC  D035               	goto	l11225
 21336  0128CE                     l11215:
 21337                           
 21338                           ; BSR set to: 0
 21339                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21340  0128CE  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21341  0128D2  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21342  0128D6  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21343  0128DA  EC81  F0A1         	call	_Byte_GetBit	;wreg free
 21344  0128DE  0900               	iorlw	0
 21345  0128E0  A4D8               	btfss	status,2,c
 21346  0128E2  D005               	goto	l1082
 21347  0128E4  C070  F0C8         	movff	_gBackcolour,_Console_MakeField$9772
 21348  0128E8  C071  F0C9         	movff	_gBackcolour+1,_Console_MakeField$9772+1
 21349  0128EC  D004               	goto	l11219
 21350  0128EE                     l1082:
 21351  0128EE  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$9772
 21352  0128F2  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$9772+1
 21353  0128F6                     l11219:
 21354  0128F6  0100               	movlb	0	; () banked
 21355  0128F8  51CB               	movf	Console_MakeField@y& (0+255),w,b
 21356  0128FA  0D0A               	mullw	10
 21357  0128FC  0E00               	movlw	low Console_MakeField@Fill
 21358  0128FE  0100               	movlb	0	; () banked
 21359  012900  6FC1               	movwf	??_Console_MakeField& (0+255),b
 21360  012902  0E02               	movlw	high Console_MakeField@Fill
 21361  012904  0100               	movlb	0	; () banked
 21362  012906  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 21363  012908  50F3               	movf	prodl,w,c
 21364  01290A  0100               	movlb	0	; () banked
 21365  01290C  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 21366  01290E  50F4               	movf	prodh,w,c
 21367  012910  0100               	movlb	0	; () banked
 21368  012912  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21369  012914  0100               	movlb	0	; () banked
 21370  012916  51CA               	movf	Console_MakeField@x& (0+255),w,b
 21371  012918  0D02               	mullw	2
 21372  01291A  50F3               	movf	prodl,w,c
 21373  01291C  0100               	movlb	0	; () banked
 21374  01291E  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 21375  012920  6ED9               	movwf	fsr2l,c
 21376  012922  50F4               	movf	prodh,w,c
 21377  012924  0100               	movlb	0	; () banked
 21378  012926  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21379  012928  6EDA               	movwf	fsr2h,c
 21380  01292A  C0C8  FFDE         	movff	_Console_MakeField$9772,postinc2
 21381  01292E  C0C9  FFDD         	movff	_Console_MakeField$9772+1,postdec2
 21382                           
 21383                           ; BSR set to: 0
 21384  012932  0100               	movlb	0	; () banked
 21385  012934  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 21386  012936  D7C6               	goto	l11211
 21387  012938                     l11225:
 21388                           
 21389                           ; BSR set to: 0
 21390                           ;Console.c: 447: Column += 1;
 21391  012938  0100               	movlb	0	; () banked
 21392  01293A  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 21393  01293C  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21394  01293E  0100               	movlb	0	; () banked
 21395  012940  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 21396  012942  D7B8               	goto	l11205
 21397  012944                     l11229:
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;Console.c: 448: }
 21401                           ;Console.c: 449: return (ColourPtr)Fill;
 21402  012944  0E00               	movlw	low Console_MakeField@Fill
 21403  012946  0100               	movlb	0	; () banked
 21404  012948  6FBF               	movwf	?_Console_MakeField& (0+255),b
 21405  01294A  0E02               	movlw	high Console_MakeField@Fill
 21406  01294C  0100               	movlb	0	; () banked
 21407  01294E  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 21408  012950  0012               	return	
 21409  012952                     __end_of_Console_MakeField:
 21410                           	opt stack 0
 21411                           tosu	equ	0xFFF
 21412                           tosh	equ	0xFFE
 21413                           tosl	equ	0xFFD
 21414                           pclath	equ	0xFFA
 21415                           tblptru	equ	0xFF8
 21416                           tblptrh	equ	0xFF7
 21417                           tblptrl	equ	0xFF6
 21418                           tablat	equ	0xFF5
 21419                           prodh	equ	0xFF4
 21420                           prodl	equ	0xFF3
 21421                           intcon	equ	0xFF2
 21422                           indf0	equ	0xFEF
 21423                           postinc0	equ	0xFEE
 21424                           fsr0h	equ	0xFEA
 21425                           fsr0l	equ	0xFE9
 21426                           wreg	equ	0xFE8
 21427                           indf1	equ	0xFE7
 21428                           postdec1	equ	0xFE5
 21429                           fsr1h	equ	0xFE2
 21430                           fsr1l	equ	0xFE1
 21431                           indf2	equ	0xFDF
 21432                           postinc2	equ	0xFDE
 21433                           postdec2	equ	0xFDD
 21434                           plusw2	equ	0xFDB
 21435                           fsr2h	equ	0xFDA
 21436                           fsr2l	equ	0xFD9
 21437                           status	equ	0xFD8
 21438                           
 21439 ;; *************** function _Byte_GetBit *****************
 21440 ;; Defined at:
 21441 ;;		line 38 in file "Library/Types.c"
 21442 ;; Parameters:    Size  Location     Type
 21443 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21444 ;;		 -> Font5x7(480), 
 21445 ;;  pBit            1    2[BANK0 ] unsigned char 
 21446 ;; Auto vars:     Size  Location     Type
 21447 ;;  Output          1    4[BANK0 ] unsigned char 
 21448 ;; Return value:  Size  Location     Type
 21449 ;;                  1    wreg      unsigned char 
 21450 ;; Registers used:
 21451 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21452 ;; Tracked objects:
 21453 ;;		On entry : 0/0
 21454 ;;		On exit  : 0/0
 21455 ;;		Unchanged: 0/0
 21456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21457 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21460 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21461 ;;Total ram usage:        5 bytes
 21462 ;; Hardware stack levels used:    1
 21463 ;; Hardware stack levels required when called:    7
 21464 ;; This function calls:
 21465 ;;		Nothing
 21466 ;; This function is called by:
 21467 ;;		_Console_MakeField
 21468 ;;		_Word_GetBit
 21469 ;; This function uses a non-reentrant model
 21470 ;;
 21471                           
 21472                           	psect	text120
 21473  014302                     __ptext120:
 21474                           	opt stack 0
 21475  014302                     _Byte_GetBit:
 21476                           	opt stack 21
 21477                           
 21478                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;incstack = 0
 21482  014302  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21483  014306  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21484  01430A                     	if	0	;tblptru may be non-zero
 21485  01430A                     	endif
 21486  01430A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21487  01430A  0E00               	movlw	low (__mediumconst shr (0+16))
 21488  01430C  6EF8               	movwf	tblptru,c
 21489  01430E                     	endif
 21490  01430E  0008               	tblrd		*
 21491  014310  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 21492                           
 21493                           ;Types.c: 42: Output >>= pBit;
 21494  014314  0100               	movlb	0	; () banked
 21495  014316  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 21496  014318  0100               	movlb	0	; () banked
 21497  01431A  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 21498  01431C  D003               	goto	u7200
 21499  01431E                     u7205:
 21500  01431E  0100               	movlb	0	; () banked
 21501  014320  90D8               	bcf	status,0,c
 21502  014322  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21503  014324                     u7200:
 21504  014324  0100               	movlb	0	; () banked
 21505  014326  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 21506  014328  D7FA               	goto	u7205
 21507                           
 21508                           ;Types.c: 43: Output &= 1;
 21509  01432A  0E01               	movlw	1
 21510  01432C  0100               	movlb	0	; () banked
 21511  01432E  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;Types.c: 44: return Output;
 21515  014330  0100               	movlb	0	; () banked
 21516  014332  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 21517  014334  0012               	return	
 21518  014336                     __end_of_Byte_GetBit:
 21519                           	opt stack 0
 21520                           tosu	equ	0xFFF
 21521                           tosh	equ	0xFFE
 21522                           tosl	equ	0xFFD
 21523                           pclath	equ	0xFFA
 21524                           tblptru	equ	0xFF8
 21525                           tblptrh	equ	0xFF7
 21526                           tblptrl	equ	0xFF6
 21527                           tablat	equ	0xFF5
 21528                           prodh	equ	0xFF4
 21529                           prodl	equ	0xFF3
 21530                           intcon	equ	0xFF2
 21531                           indf0	equ	0xFEF
 21532                           postinc0	equ	0xFEE
 21533                           fsr0h	equ	0xFEA
 21534                           fsr0l	equ	0xFE9
 21535                           wreg	equ	0xFE8
 21536                           indf1	equ	0xFE7
 21537                           postdec1	equ	0xFE5
 21538                           fsr1h	equ	0xFE2
 21539                           fsr1l	equ	0xFE1
 21540                           indf2	equ	0xFDF
 21541                           postinc2	equ	0xFDE
 21542                           postdec2	equ	0xFDD
 21543                           plusw2	equ	0xFDB
 21544                           fsr2h	equ	0xFDA
 21545                           fsr2l	equ	0xFD9
 21546                           status	equ	0xFD8
 21547                           
 21548 ;; *************** function _Console_Init *****************
 21549 ;; Defined at:
 21550 ;;		line 157 in file "Library/Console.c"
 21551 ;; Parameters:    Size  Location     Type
 21552 ;;		None
 21553 ;; Auto vars:     Size  Location     Type
 21554 ;;  y               1    3[BANK0 ] unsigned char 
 21555 ;;  x               1    2[BANK0 ] unsigned char 
 21556 ;; Return value:  Size  Location     Type
 21557 ;;                  1    wreg      void 
 21558 ;; Registers used:
 21559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21560 ;; Tracked objects:
 21561 ;;		On entry : 0/0
 21562 ;;		On exit  : 0/0
 21563 ;;		Unchanged: 0/0
 21564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21568 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21569 ;;Total ram usage:        4 bytes
 21570 ;; Hardware stack levels used:    1
 21571 ;; Hardware stack levels required when called:    7
 21572 ;; This function calls:
 21573 ;;		Nothing
 21574 ;; This function is called by:
 21575 ;;		_main
 21576 ;; This function uses a non-reentrant model
 21577 ;;
 21578                           
 21579                           	psect	text121
 21580  013480                     __ptext121:
 21581                           	opt stack 0
 21582  013480                     _Console_Init:
 21583                           	opt stack 23
 21584                           
 21585                           ;Console.c: 160: lBufferX = 0;
 21586                           
 21587                           ; BSR set to: 0
 21588                           ;incstack = 0
 21589  013480  0E00               	movlw	0
 21590  013482  6E35               	movwf	_lBufferX,c
 21591                           
 21592                           ;Console.c: 161: lBufferY = 0;
 21593  013484  0E00               	movlw	0
 21594  013486  6E36               	movwf	_lBufferY,c
 21595                           
 21596                           ;Console.c: 163: UINT8 x, y;
 21597                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 21598  013488  0E00               	movlw	0
 21599  01348A  0100               	movlb	0	; () banked
 21600  01348C  6FBC               	movwf	Console_Init@x& (0+255),b
 21601  01348E                     l11537:
 21602                           
 21603                           ; BSR set to: 0
 21604  01348E  0E13               	movlw	19
 21605  013490  0100               	movlb	0	; () banked
 21606  013492  65BC               	cpfsgt	Console_Init@x& (0+255),b
 21607  013494  D001               	goto	l11541
 21608  013496  0012               	return	
 21609  013498                     l11541:
 21610                           
 21611                           ; BSR set to: 0
 21612                           ;Console.c: 165: {
 21613                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 21614  013498  0E00               	movlw	0
 21615  01349A  0100               	movlb	0	; () banked
 21616  01349C  6FBD               	movwf	Console_Init@y& (0+255),b
 21617  01349E                     l11543:
 21618                           
 21619                           ; BSR set to: 0
 21620  01349E  0E0E               	movlw	14
 21621  0134A0  0100               	movlb	0	; () banked
 21622  0134A2  65BD               	cpfsgt	Console_Init@y& (0+255),b
 21623  0134A4  D001               	goto	l11547
 21624  0134A6  D02C               	goto	l11553
 21625  0134A8                     l11547:
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;Console.c: 167: {
 21629                           ;Console.c: 168: lBuffer[y][x] = '\0';
 21630  0134A8  0100               	movlb	0	; () banked
 21631  0134AA  51BD               	movf	Console_Init@y& (0+255),w,b
 21632  0134AC  0D14               	mullw	20
 21633  0134AE  0E46               	movlw	low _lBuffer
 21634  0134B0  0100               	movlb	0	; () banked
 21635  0134B2  6FBA               	movwf	??_Console_Init& (0+255),b
 21636  0134B4  0E02               	movlw	high _lBuffer
 21637  0134B6  0100               	movlb	0	; () banked
 21638  0134B8  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 21639  0134BA  50F3               	movf	prodl,w,c
 21640  0134BC  0100               	movlb	0	; () banked
 21641  0134BE  27BA               	addwf	??_Console_Init& (0+255),f,b
 21642  0134C0  50F4               	movf	prodh,w,c
 21643  0134C2  0100               	movlb	0	; () banked
 21644  0134C4  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 21645  0134C6  0100               	movlb	0	; () banked
 21646  0134C8  51BC               	movf	Console_Init@x& (0+255),w,b
 21647  0134CA  0D01               	mullw	1
 21648  0134CC  50F3               	movf	prodl,w,c
 21649  0134CE  0100               	movlb	0	; () banked
 21650  0134D0  25BA               	addwf	??_Console_Init& (0+255),w,b
 21651  0134D2  6ED9               	movwf	fsr2l,c
 21652  0134D4  50F4               	movf	prodh,w,c
 21653  0134D6  0100               	movlb	0	; () banked
 21654  0134D8  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 21655  0134DA  6EDA               	movwf	fsr2h,c
 21656  0134DC  0E00               	movlw	0
 21657  0134DE  6EDF               	movwf	indf2,c
 21658                           
 21659                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 21660  0134E0  0100               	movlb	0	; () banked
 21661  0134E2  51BD               	movf	Console_Init@y& (0+255),w,b
 21662  0134E4  0D02               	mullw	2
 21663  0134E6  0E00               	movlw	low _lCBuffer
 21664  0134E8  24F3               	addwf	prodl,w,c
 21665  0134EA  6ED9               	movwf	fsr2l,c
 21666  0134EC  0E01               	movlw	high _lCBuffer
 21667  0134EE  20F4               	addwfc	prodh,w,c
 21668  0134F0  6EDA               	movwf	fsr2h,c
 21669  0134F2  0EFF               	movlw	255
 21670  0134F4  6EDE               	movwf	postinc2,c
 21671  0134F6  0EFF               	movlw	255
 21672  0134F8  6EDD               	movwf	postdec2,c
 21673                           
 21674                           ; BSR set to: 0
 21675  0134FA  0100               	movlb	0	; () banked
 21676  0134FC  2BBD               	incf	Console_Init@y& (0+255),f,b
 21677  0134FE  D7CF               	goto	l11543
 21678  013500                     l11553:
 21679                           
 21680                           ; BSR set to: 0
 21681  013500  0100               	movlb	0	; () banked
 21682  013502  2BBC               	incf	Console_Init@x& (0+255),f,b
 21683  013504  D7C4               	goto	l11537
 21684  013506                     __end_of_Console_Init:
 21685                           	opt stack 0
 21686                           tosu	equ	0xFFF
 21687                           tosh	equ	0xFFE
 21688                           tosl	equ	0xFFD
 21689                           pclath	equ	0xFFA
 21690                           tblptru	equ	0xFF8
 21691                           tblptrh	equ	0xFF7
 21692                           tblptrl	equ	0xFF6
 21693                           tablat	equ	0xFF5
 21694                           prodh	equ	0xFF4
 21695                           prodl	equ	0xFF3
 21696                           intcon	equ	0xFF2
 21697                           indf0	equ	0xFEF
 21698                           postinc0	equ	0xFEE
 21699                           fsr0h	equ	0xFEA
 21700                           fsr0l	equ	0xFE9
 21701                           wreg	equ	0xFE8
 21702                           indf1	equ	0xFE7
 21703                           postdec1	equ	0xFE5
 21704                           fsr1h	equ	0xFE2
 21705                           fsr1l	equ	0xFE1
 21706                           indf2	equ	0xFDF
 21707                           postinc2	equ	0xFDE
 21708                           postdec2	equ	0xFDD
 21709                           plusw2	equ	0xFDB
 21710                           fsr2h	equ	0xFDA
 21711                           fsr2l	equ	0xFD9
 21712                           status	equ	0xFD8
 21713                           
 21714 ;; *************** function _ISR_Function *****************
 21715 ;; Defined at:
 21716 ;;		line 38 in file "Library/ISR.c"
 21717 ;; Parameters:    Size  Location     Type
 21718 ;;		None
 21719 ;; Auto vars:     Size  Location     Type
 21720 ;;		None
 21721 ;; Return value:  Size  Location     Type
 21722 ;;                  1    wreg      void 
 21723 ;; Registers used:
 21724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21725 ;; Tracked objects:
 21726 ;;		On entry : 0/0
 21727 ;;		On exit  : 0/0
 21728 ;;		Unchanged: 0/0
 21729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21732 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21733 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;Total ram usage:       14 bytes
 21735 ;; Hardware stack levels used:    1
 21736 ;; Hardware stack levels required when called:    6
 21737 ;; This function calls:
 21738 ;;		_Timer0_ISR
 21739 ;; This function is called by:
 21740 ;;		Interrupt level 2
 21741 ;; This function uses a non-reentrant model
 21742 ;;
 21743                           
 21744                           	psect	intcode
 21745  001408                     __pintcode:
 21746                           	opt stack 0
 21747  001408                     _ISR_Function:
 21748                           	opt stack 14
 21749                           
 21750                           ; BSR set to: 0
 21751                           ;incstack = 0
 21752  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21753  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 21754  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 21755  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 21756  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 21757  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 21758  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 21759  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 21760  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 21761  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 21762  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 21763  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 21764  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 21765  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 21766  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 21767                           
 21768                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 21769  001442  92F2               	bcf	intcon,1,c	;volatile
 21770                           
 21771                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 21772  001444  B4F2               	btfsc	intcon,2,c	;volatile
 21773  001446  AAF2               	btfss	intcon,5,c	;volatile
 21774  001448  D002               	goto	i2l1597
 21775                           
 21776                           ;ISR.c: 68: Timer0_ISR();
 21777  00144A  EC43  F0A2         	call	_Timer0_ISR	;wreg free
 21778  00144E                     i2l1597:
 21779  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 21780  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 21781  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 21782  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 21783  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 21784  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 21785  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 21786  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 21787  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 21788  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 21789  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 21790  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 21791  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 21792  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 21793  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21794  001488  0011               	retfie		f
 21795  00148A                     __end_of_ISR_Function:
 21796                           	opt stack 0
 21797                           tosu	equ	0xFFF
 21798                           tosh	equ	0xFFE
 21799                           tosl	equ	0xFFD
 21800                           pclatu	equ	0xFFB
 21801                           pclath	equ	0xFFA
 21802                           tblptru	equ	0xFF8
 21803                           tblptrh	equ	0xFF7
 21804                           tblptrl	equ	0xFF6
 21805                           tablat	equ	0xFF5
 21806                           prodh	equ	0xFF4
 21807                           prodl	equ	0xFF3
 21808                           intcon	equ	0xFF2
 21809                           indf0	equ	0xFEF
 21810                           postinc0	equ	0xFEE
 21811                           fsr0h	equ	0xFEA
 21812                           fsr0l	equ	0xFE9
 21813                           wreg	equ	0xFE8
 21814                           indf1	equ	0xFE7
 21815                           postdec1	equ	0xFE5
 21816                           fsr1h	equ	0xFE2
 21817                           fsr1l	equ	0xFE1
 21818                           indf2	equ	0xFDF
 21819                           postinc2	equ	0xFDE
 21820                           postdec2	equ	0xFDD
 21821                           plusw2	equ	0xFDB
 21822                           fsr2h	equ	0xFDA
 21823                           fsr2l	equ	0xFD9
 21824                           status	equ	0xFD8
 21825                           
 21826 ;; *************** function _Timer0_ISR *****************
 21827 ;; Defined at:
 21828 ;;		line 94 in file "Library/Timer0.c"
 21829 ;; Parameters:    Size  Location     Type
 21830 ;;		None
 21831 ;; Auto vars:     Size  Location     Type
 21832 ;;		None
 21833 ;; Return value:  Size  Location     Type
 21834 ;;                  1    wreg      void 
 21835 ;; Registers used:
 21836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21837 ;; Tracked objects:
 21838 ;;		On entry : 0/0
 21839 ;;		On exit  : 0/0
 21840 ;;		Unchanged: 0/0
 21841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21846 ;;Total ram usage:        0 bytes
 21847 ;; Hardware stack levels used:    1
 21848 ;; Hardware stack levels required when called:    5
 21849 ;; This function calls:
 21850 ;;		Absolute function
 21851 ;;		i2_Motor_Step
 21852 ;;		i2_Timer0_Stop
 21853 ;; This function is called by:
 21854 ;;		_ISR_Function
 21855 ;; This function uses a non-reentrant model
 21856 ;;
 21857                           
 21858                           	psect	text123
 21859  014486                     __ptext123:
 21860                           	opt stack 0
 21861  014486                     _Timer0_ISR:
 21862                           	opt stack 14
 21863                           
 21864                           ;Timer0.c: 96: Timer0_Stop();
 21865                           
 21866                           ;incstack = 0
 21867  014486  EC4A  F0A4         	call	i2_Timer0_Stop	;wreg free
 21868                           
 21869                           ;Timer0.c: 99: if (gISR != 0)
 21870  01448A  0100               	movlb	0	; () banked
 21871  01448C  5168               	movf	_gISR& (0+255),w,b
 21872  01448E  0100               	movlb	0	; () banked
 21873  014490  1169               	iorwf	(_gISR+1)& (0+255),w,b
 21874  014492  0100               	movlb	0	; () banked
 21875  014494  116A               	iorwf	(_gISR+2)& (0+255),w,b
 21876  014496  B4D8               	btfsc	status,2,c
 21877  014498  0012               	return	
 21878                           
 21879                           ; BSR set to: 0
 21880                           ;Timer0.c: 100: gISR();
 21881  01449A  D801               	call	i2u923_48
 21882  01449C  0012               	return	
 21883  01449E                     i2u923_48:
 21884  01449E  0005               	push	
 21885  0144A0  6EFA               	movwf	pclath,c
 21886  0144A2  0100               	movlb	0	; () banked
 21887  0144A4  5168               	movf	_gISR& (0+255),w,b
 21888  0144A6  6EFD               	movwf	tosl,c
 21889  0144A8  5169               	movf	(_gISR+1)& (0+255),w,b
 21890  0144AA  6EFE               	movwf	tosh,c
 21891  0144AC  516A               	movf	(_gISR+2)& (0+255),w,b
 21892  0144AE  6EFF               	movwf	tosu,c
 21893  0144B0  50FA               	movf	pclath,w,c
 21894  0144B2  0012               	return		;indir
 21895  0144B4                     __end_of_Timer0_ISR:
 21896                           	opt stack 0
 21897                           tosu	equ	0xFFF
 21898                           tosh	equ	0xFFE
 21899                           tosl	equ	0xFFD
 21900                           pclatu	equ	0xFFB
 21901                           pclath	equ	0xFFA
 21902                           tblptru	equ	0xFF8
 21903                           tblptrh	equ	0xFF7
 21904                           tblptrl	equ	0xFF6
 21905                           tablat	equ	0xFF5
 21906                           prodh	equ	0xFF4
 21907                           prodl	equ	0xFF3
 21908                           intcon	equ	0xFF2
 21909                           indf0	equ	0xFEF
 21910                           postinc0	equ	0xFEE
 21911                           fsr0h	equ	0xFEA
 21912                           fsr0l	equ	0xFE9
 21913                           wreg	equ	0xFE8
 21914                           indf1	equ	0xFE7
 21915                           postdec1	equ	0xFE5
 21916                           fsr1h	equ	0xFE2
 21917                           fsr1l	equ	0xFE1
 21918                           indf2	equ	0xFDF
 21919                           postinc2	equ	0xFDE
 21920                           postdec2	equ	0xFDD
 21921                           plusw2	equ	0xFDB
 21922                           fsr2h	equ	0xFDA
 21923                           fsr2l	equ	0xFD9
 21924                           status	equ	0xFD8
 21925                           
 21926 ;; *************** function i2_Motor_Step *****************
 21927 ;; Defined at:
 21928 ;;		line 75 in file "Library/Motor.c"
 21929 ;; Parameters:    Size  Location     Type
 21930 ;;		None
 21931 ;; Auto vars:     Size  Location     Type
 21932 ;;		None
 21933 ;; Return value:  Size  Location     Type
 21934 ;;                  1    wreg      void 
 21935 ;; Registers used:
 21936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21937 ;; Tracked objects:
 21938 ;;		On entry : 0/0
 21939 ;;		On exit  : 0/0
 21940 ;;		Unchanged: 0/0
 21941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;Total ram usage:        2 bytes
 21947 ;; Hardware stack levels used:    1
 21948 ;; Hardware stack levels required when called:    4
 21949 ;; This function calls:
 21950 ;;		i2_MXK_Queue
 21951 ;;		i2_MXK_Release
 21952 ;;		i2_MXK_SwitchTo
 21953 ;;		i2_Port_SetPin
 21954 ;;		i2_Timer0_Restart
 21955 ;;		i2_Timer0_Stop
 21956 ;; This function is called by:
 21957 ;; This function uses a non-reentrant model
 21958 ;;
 21959                           
 21960                           	psect	text124
 21961  012416                     __ptext124:
 21962                           	opt stack 0
 21963  012416                     i2_Motor_Step:
 21964                           	opt stack 14
 21965                           
 21966                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 21967                           
 21968                           ;incstack = 0
 21969  012416  EE20 F004          	lfsr	2,4
 21970  01241A  502C               	movf	_lMotor,w,c
 21971  01241C  26D9               	addwf	fsr2l,f,c
 21972  01241E  502D               	movf	_lMotor+1,w,c
 21973  012420  22DA               	addwfc	fsr2h,f,c
 21974  012422  50DF               	movf	indf2,w,c
 21975  012424  EC66  F0A1         	call	i2_MXK_SwitchTo
 21976  012428  0900               	iorlw	0
 21977  01242A  B4D8               	btfsc	status,2,c
 21978  01242C  D06A               	goto	i2l11365
 21979                           
 21980                           ;Motor.c: 78: {
 21981                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 21982  01242E  C02C  FFD9         	movff	_lMotor,fsr2l
 21983  012432  C02D  FFDA         	movff	_lMotor+1,fsr2h
 21984  012436  50DE               	movf	postinc2,w,c
 21985  012438  10DE               	iorwf	postinc2,w,c
 21986  01243A  B4D8               	btfsc	status,2,c
 21987  01243C  D05D               	goto	i2l11359
 21988                           
 21989                           ;Motor.c: 80: {
 21990                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 21991  01243E  C02C  FFD9         	movff	_lMotor,fsr2l
 21992  012442  C02D  FFDA         	movff	_lMotor+1,fsr2h
 21993  012446  0E01               	movlw	1
 21994  012448  BEDB               	btfsc	plusw2,7,c
 21995  01244A  D022               	goto	i2l11343
 21996  01244C  0E01               	movlw	1
 21997  01244E  50DB               	movf	plusw2,w,c
 21998  012450  E103               	bnz	i2u780_40
 21999  012452  04DE               	decf	postinc2,w,c
 22000  012454  A0D8               	btfss	status,0,c
 22001  012456  D01C               	goto	i2l11343
 22002  012458                     i2u780_40:
 22003                           
 22004                           ;Motor.c: 83: {
 22005                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 22006  012458  C02C  FFD9         	movff	_lMotor,fsr2l
 22007  01245C  C02D  FFDA         	movff	_lMotor+1,fsr2h
 22008  012460  28DE               	incf	postinc2,w,c
 22009  012462  E104               	bnz	i2u781_40
 22010  012464  0E7F               	movlw	127
 22011  012466  18DE               	xorwf	postinc2,w,c
 22012  012468  B4D8               	btfsc	status,2,c
 22013  01246A  D007               	goto	i2l11341
 22014  01246C                     i2u781_40:
 22015                           
 22016                           ;Motor.c: 85: lMotor->mDelta --;
 22017  01246C  C02C  FFD9         	movff	_lMotor,fsr2l
 22018  012470  C02D  FFDA         	movff	_lMotor+1,fsr2h
 22019  012474  06DE               	decf	postinc2,f,c
 22020  012476  0E00               	movlw	0
 22021  012478  5ADD               	subwfb	postdec2,f,c
 22022  01247A                     i2l11341:
 22023                           
 22024                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 22025  01247A  0E92               	movlw	low _PortE
 22026  01247C  6E10               	movwf	i2Port_SetPin@pInput,c
 22027  01247E  0E00               	movlw	high _PortE
 22028  012480  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22029  012482  0E00               	movlw	0
 22030  012484  6E12               	movwf	i2Port_SetPin@pPin,c
 22031  012486  0E01               	movlw	1
 22032  012488  6E13               	movwf	i2Port_SetPin@pValue,c
 22033  01248A  EC30  F097         	call	i2_Port_SetPin	;wreg free
 22034                           
 22035                           ;Motor.c: 88: }
 22036  01248E  D01B               	goto	i2l11349
 22037  012490                     i2l11343:
 22038                           
 22039                           ;Motor.c: 89: else
 22040                           ;Motor.c: 90: {
 22041                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 22042  012490  C02C  FFD9         	movff	_lMotor,fsr2l
 22043  012494  C02D  FFDA         	movff	_lMotor+1,fsr2h
 22044  012498  04DE               	decf	postinc2,w,c
 22045  01249A  E104               	bnz	i2u782_40
 22046  01249C  0E80               	movlw	128
 22047  01249E  18DE               	xorwf	postinc2,w,c
 22048  0124A0  B4D8               	btfsc	status,2,c
 22049  0124A2  D007               	goto	i2l11347
 22050  0124A4                     i2u782_40:
 22051                           
 22052                           ;Motor.c: 92: lMotor->mDelta ++;
 22053  0124A4  C02C  FFD9         	movff	_lMotor,fsr2l
 22054  0124A8  C02D  FFDA         	movff	_lMotor+1,fsr2h
 22055  0124AC  2ADE               	incf	postinc2,f,c
 22056  0124AE  0E00               	movlw	0
 22057  0124B0  22DD               	addwfc	postdec2,f,c
 22058  0124B2                     i2l11347:
 22059                           
 22060                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 22061  0124B2  0E92               	movlw	low _PortE
 22062  0124B4  6E10               	movwf	i2Port_SetPin@pInput,c
 22063  0124B6  0E00               	movlw	high _PortE
 22064  0124B8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22065  0124BA  0E00               	movlw	0
 22066  0124BC  6E12               	movwf	i2Port_SetPin@pPin,c
 22067  0124BE  0E00               	movlw	0
 22068  0124C0  6E13               	movwf	i2Port_SetPin@pValue,c
 22069  0124C2  EC30  F097         	call	i2_Port_SetPin	;wreg free
 22070  0124C6                     i2l11349:
 22071                           
 22072                           ;Motor.c: 95: }
 22073                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 22074  0124C6  0E92               	movlw	low _PortE
 22075  0124C8  6E10               	movwf	i2Port_SetPin@pInput,c
 22076  0124CA  0E00               	movlw	high _PortE
 22077  0124CC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22078  0124CE  0E01               	movlw	1
 22079  0124D0  6E12               	movwf	i2Port_SetPin@pPin,c
 22080  0124D2  0E01               	movlw	1
 22081  0124D4  6E13               	movwf	i2Port_SetPin@pValue,c
 22082  0124D6  EC30  F097         	call	i2_Port_SetPin	;wreg free
 22083                           
 22084                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 22085  0124DA  0E92               	movlw	low _PortE
 22086  0124DC  6E10               	movwf	i2Port_SetPin@pInput,c
 22087  0124DE  0E00               	movlw	high _PortE
 22088  0124E0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22089  0124E2  0E01               	movlw	1
 22090  0124E4  6E12               	movwf	i2Port_SetPin@pPin,c
 22091  0124E6  0E00               	movlw	0
 22092  0124E8  6E13               	movwf	i2Port_SetPin@pValue,c
 22093  0124EA  EC30  F097         	call	i2_Port_SetPin	;wreg free
 22094                           
 22095                           ;Motor.c: 101: MXK_Release();
 22096  0124EE  EC4D  F0A4         	call	i2_MXK_Release	;wreg free
 22097                           
 22098                           ;Motor.c: 102: Timer0_Restart();
 22099  0124F2  EC23  F0A4         	call	i2_Timer0_Restart	;wreg free
 22100                           
 22101                           ;Motor.c: 103: return;
 22102  0124F6  0012               	return	
 22103  0124F8                     i2l11359:
 22104                           
 22105                           ;Motor.c: 104: }
 22106                           ;Motor.c: 105: MXK_Release();
 22107  0124F8  EC4D  F0A4         	call	i2_MXK_Release	;wreg free
 22108                           
 22109                           ;Motor.c: 106: Timer0_Stop();
 22110  0124FC  EC4A  F0A4         	call	i2_Timer0_Stop	;wreg free
 22111                           
 22112                           ;Motor.c: 107: return;
 22113  012500  0012               	return	
 22114  012502                     i2l11365:
 22115                           
 22116                           ;Motor.c: 108: }
 22117                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 22118  012502  C06B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 22119  012506  C06C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 22120  01250A  C06D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 22121  01250E  EC10  F0A4         	call	i2_MXK_Queue	;wreg free
 22122  012512  0012               	return		;funcret
 22123  012514                     __end_ofi2_Motor_Step:
 22124                           	opt stack 0
 22125                           tosu	equ	0xFFF
 22126                           tosh	equ	0xFFE
 22127                           tosl	equ	0xFFD
 22128                           pclatu	equ	0xFFB
 22129                           pclath	equ	0xFFA
 22130                           tblptru	equ	0xFF8
 22131                           tblptrh	equ	0xFF7
 22132                           tblptrl	equ	0xFF6
 22133                           tablat	equ	0xFF5
 22134                           prodh	equ	0xFF4
 22135                           prodl	equ	0xFF3
 22136                           intcon	equ	0xFF2
 22137                           indf0	equ	0xFEF
 22138                           postinc0	equ	0xFEE
 22139                           fsr0h	equ	0xFEA
 22140                           fsr0l	equ	0xFE9
 22141                           wreg	equ	0xFE8
 22142                           indf1	equ	0xFE7
 22143                           postdec1	equ	0xFE5
 22144                           fsr1h	equ	0xFE2
 22145                           fsr1l	equ	0xFE1
 22146                           indf2	equ	0xFDF
 22147                           postinc2	equ	0xFDE
 22148                           postdec2	equ	0xFDD
 22149                           plusw2	equ	0xFDB
 22150                           fsr2h	equ	0xFDA
 22151                           fsr2l	equ	0xFD9
 22152                           status	equ	0xFD8
 22153                           
 22154 ;; *************** function i2_Timer0_Stop *****************
 22155 ;; Defined at:
 22156 ;;		line 89 in file "Library/Timer0.c"
 22157 ;; Parameters:    Size  Location     Type
 22158 ;;		None
 22159 ;; Auto vars:     Size  Location     Type
 22160 ;;		None
 22161 ;; Return value:  Size  Location     Type
 22162 ;;                  1    wreg      void 
 22163 ;; Registers used:
 22164 ;;		None
 22165 ;; Tracked objects:
 22166 ;;		On entry : 0/0
 22167 ;;		On exit  : 0/0
 22168 ;;		Unchanged: 0/0
 22169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22174 ;;Total ram usage:        0 bytes
 22175 ;; Hardware stack levels used:    1
 22176 ;; This function calls:
 22177 ;;		Nothing
 22178 ;; This function is called by:
 22179 ;;		_Timer0_ISR
 22180 ;;		i2_Motor_Step
 22181 ;; This function uses a non-reentrant model
 22182 ;;
 22183                           
 22184                           	psect	text125
 22185  014894                     __ptext125:
 22186                           	opt stack 0
 22187  014894                     i2_Timer0_Stop:
 22188                           	opt stack 18
 22189                           
 22190                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 22191                           
 22192                           ;incstack = 0
 22193  014894  9AF2               	bcf	intcon,5,c	;volatile
 22194                           
 22195                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 22196  014896  94F2               	bcf	intcon,2,c	;volatile
 22197  014898  0012               	return		;funcret
 22198  01489A                     __end_ofi2_Timer0_Stop:
 22199                           	opt stack 0
 22200                           tosu	equ	0xFFF
 22201                           tosh	equ	0xFFE
 22202                           tosl	equ	0xFFD
 22203                           pclatu	equ	0xFFB
 22204                           pclath	equ	0xFFA
 22205                           tblptru	equ	0xFF8
 22206                           tblptrh	equ	0xFF7
 22207                           tblptrl	equ	0xFF6
 22208                           tablat	equ	0xFF5
 22209                           prodh	equ	0xFF4
 22210                           prodl	equ	0xFF3
 22211                           intcon	equ	0xFF2
 22212                           indf0	equ	0xFEF
 22213                           postinc0	equ	0xFEE
 22214                           fsr0h	equ	0xFEA
 22215                           fsr0l	equ	0xFE9
 22216                           wreg	equ	0xFE8
 22217                           indf1	equ	0xFE7
 22218                           postdec1	equ	0xFE5
 22219                           fsr1h	equ	0xFE2
 22220                           fsr1l	equ	0xFE1
 22221                           indf2	equ	0xFDF
 22222                           postinc2	equ	0xFDE
 22223                           postdec2	equ	0xFDD
 22224                           plusw2	equ	0xFDB
 22225                           fsr2h	equ	0xFDA
 22226                           fsr2l	equ	0xFD9
 22227                           status	equ	0xFD8
 22228                           
 22229 ;; *************** function i2_Timer0_Restart *****************
 22230 ;; Defined at:
 22231 ;;		line 83 in file "Library/Timer0.c"
 22232 ;; Parameters:    Size  Location     Type
 22233 ;;		None
 22234 ;; Auto vars:     Size  Location     Type
 22235 ;;		None
 22236 ;; Return value:  Size  Location     Type
 22237 ;;                  1    wreg      void 
 22238 ;; Registers used:
 22239 ;;		None
 22240 ;; Tracked objects:
 22241 ;;		On entry : 0/0
 22242 ;;		On exit  : 0/0
 22243 ;;		Unchanged: 0/0
 22244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22249 ;;Total ram usage:        0 bytes
 22250 ;; Hardware stack levels used:    1
 22251 ;; This function calls:
 22252 ;;		Nothing
 22253 ;; This function is called by:
 22254 ;;		i2_Motor_Step
 22255 ;; This function uses a non-reentrant model
 22256 ;;
 22257                           
 22258                           	psect	text126
 22259  014846                     __ptext126:
 22260                           	opt stack 0
 22261  014846                     i2_Timer0_Restart:
 22262                           	opt stack 17
 22263                           
 22264                           ;Timer0.c: 85: TMR0 = COUNTER;
 22265                           
 22266                           ;incstack = 0
 22267  014846  C02A  FFD6         	movff	_COUNTER,4054	;volatile
 22268  01484A  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
 22269                           
 22270                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 22271  01484E  8AF2               	bsf	intcon,5,c	;volatile
 22272  014850  0012               	return		;funcret
 22273  014852                     __end_ofi2_Timer0_Restart:
 22274                           	opt stack 0
 22275                           tosu	equ	0xFFF
 22276                           tosh	equ	0xFFE
 22277                           tosl	equ	0xFFD
 22278                           pclatu	equ	0xFFB
 22279                           pclath	equ	0xFFA
 22280                           tblptru	equ	0xFF8
 22281                           tblptrh	equ	0xFF7
 22282                           tblptrl	equ	0xFF6
 22283                           tablat	equ	0xFF5
 22284                           prodh	equ	0xFF4
 22285                           prodl	equ	0xFF3
 22286                           intcon	equ	0xFF2
 22287                           indf0	equ	0xFEF
 22288                           postinc0	equ	0xFEE
 22289                           fsr0h	equ	0xFEA
 22290                           fsr0l	equ	0xFE9
 22291                           wreg	equ	0xFE8
 22292                           indf1	equ	0xFE7
 22293                           postdec1	equ	0xFE5
 22294                           fsr1h	equ	0xFE2
 22295                           fsr1l	equ	0xFE1
 22296                           indf2	equ	0xFDF
 22297                           postinc2	equ	0xFDE
 22298                           postdec2	equ	0xFDD
 22299                           plusw2	equ	0xFDB
 22300                           fsr2h	equ	0xFDA
 22301                           fsr2l	equ	0xFD9
 22302                           status	equ	0xFD8
 22303                           
 22304 ;; *************** function i2_Port_SetPin *****************
 22305 ;; Defined at:
 22306 ;;		line 247 in file "Library/Port.c"
 22307 ;; Parameters:    Size  Location     Type
 22308 ;;  pInput          2   15[COMRAM] const PTR struct Port
 22309 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22310 ;;  pPin            1   17[COMRAM] enum E7694
 22311 ;;  pValue          1   18[COMRAM] unsigned char 
 22312 ;; Auto vars:     Size  Location     Type
 22313 ;;  Port_SetPin     1   19[COMRAM] enum E7739
 22314 ;; Return value:  Size  Location     Type
 22315 ;;                  1    wreg      void 
 22316 ;; Registers used:
 22317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22318 ;; Tracked objects:
 22319 ;;		On entry : 0/0
 22320 ;;		On exit  : 0/0
 22321 ;;		Unchanged: 0/0
 22322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22323 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22326 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22327 ;;Total ram usage:        5 bytes
 22328 ;; Hardware stack levels used:    1
 22329 ;; Hardware stack levels required when called:    3
 22330 ;; This function calls:
 22331 ;;		i2_Byte_SetBit
 22332 ;;		i2_Word_GetPair
 22333 ;; This function is called by:
 22334 ;;		i2_Motor_Step
 22335 ;; This function uses a non-reentrant model
 22336 ;;
 22337                           
 22338                           	psect	text127
 22339  012E60                     __ptext127:
 22340                           	opt stack 0
 22341  012E60                     i2_Port_SetPin:
 22342                           	opt stack 14
 22343                           
 22344                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22345                           
 22346                           ;incstack = 0
 22347  012E60  0E08               	movlw	8
 22348  012E62  2410               	addwf	i2Port_SetPin@pInput,w,c
 22349  012E64  6E0D               	movwf	i2Word_GetPair@pInput,c
 22350  012E66  0E00               	movlw	0
 22351  012E68  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 22352  012E6A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 22353  012E6C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 22354  012E70  EC14  F0A2         	call	i2_Word_GetPair	;wreg free
 22355  012E74  6E14               	movwf	i2Port_SetPin@Type,c
 22356                           
 22357                           ;Port.c: 250: switch (Type)
 22358  012E76  D03B               	goto	i2l10951
 22359  012E78                     i2l10937:
 22360                           
 22361                           ;Port.c: 256: pValue &= 1;
 22362  012E78  0E01               	movlw	1
 22363  012E7A  1613               	andwf	i2Port_SetPin@pValue,f,c
 22364                           
 22365                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22366  012E7C  EE20 F002          	lfsr	2,2
 22367  012E80  5010               	movf	i2Port_SetPin@pInput,w,c
 22368  012E82  26D9               	addwf	fsr2l,f,c
 22369  012E84  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22370  012E86  22DA               	addwfc	fsr2h,f,c
 22371  012E88  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22372  012E8C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22373  012E90  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22374  012E94  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22375  012E98  EC59  F09F         	call	i2_Byte_SetBit	;wreg free
 22376                           
 22377                           ;Port.c: 258: break;
 22378  012E9C  0012               	return	
 22379  012E9E                     i2l10941:
 22380                           
 22381                           ;Port.c: 261: pValue &= 1;
 22382  012E9E  0E01               	movlw	1
 22383  012EA0  1613               	andwf	i2Port_SetPin@pValue,f,c
 22384                           
 22385                           ;Port.c: 262: pValue ^= 1;
 22386  012EA2  0E01               	movlw	1
 22387  012EA4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 22388                           
 22389                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22390  012EA6  EE20 F002          	lfsr	2,2
 22391  012EAA  5010               	movf	i2Port_SetPin@pInput,w,c
 22392  012EAC  26D9               	addwf	fsr2l,f,c
 22393  012EAE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22394  012EB0  22DA               	addwfc	fsr2h,f,c
 22395  012EB2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22396  012EB6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22397  012EBA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22398  012EBE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22399  012EC2  EC59  F09F         	call	i2_Byte_SetBit	;wreg free
 22400                           
 22401                           ;Port.c: 264: break;
 22402  012EC6  0012               	return	
 22403  012EC8                     i2l10945:
 22404                           
 22405                           ;Port.c: 266: pValue &= 1;
 22406  012EC8  0E01               	movlw	1
 22407  012ECA  1613               	andwf	i2Port_SetPin@pValue,f,c
 22408                           
 22409                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22410  012ECC  EE20 F004          	lfsr	2,4
 22411  012ED0  5010               	movf	i2Port_SetPin@pInput,w,c
 22412  012ED2  26D9               	addwf	fsr2l,f,c
 22413  012ED4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22414  012ED6  22DA               	addwfc	fsr2h,f,c
 22415  012ED8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22416  012EDC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22417  012EE0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22418  012EE4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22419  012EE8  EC59  F09F         	call	i2_Byte_SetBit	;wreg free
 22420                           
 22421                           ;Port.c: 269: }
 22422                           
 22423                           ;Port.c: 268: break;
 22424  012EEC  0012               	return	
 22425  012EEE                     i2l10951:
 22426  012EEE  5014               	movf	i2Port_SetPin@Type,w,c
 22427                           
 22428                           ; Switch size 1, requested type "space"
 22429                           ; Number of cases is 4, Range of values is 0 to 3
 22430                           ; switch strategies available:
 22431                           ; Name         Instructions Cycles
 22432                           ; simple_byte           13     7 (average)
 22433                           ;	Chosen strategy is simple_byte
 22434  012EF0  0A00               	xorlw	0	; case 0
 22435  012EF2  B4D8               	btfsc	status,2,c
 22436  012EF4  0012               	return	
 22437  012EF6  0A01               	xorlw	1	; case 1
 22438  012EF8  B4D8               	btfsc	status,2,c
 22439  012EFA  D7BE               	goto	i2l10937
 22440  012EFC  0A03               	xorlw	3	; case 2
 22441  012EFE  B4D8               	btfsc	status,2,c
 22442  012F00  D7CE               	goto	i2l10941
 22443  012F02  0A01               	xorlw	1	; case 3
 22444  012F04  A4D8               	btfss	status,2,c
 22445  012F06  0012               	return	
 22446  012F08  D7DF               	goto	i2l10945
 22447  012F0A                     __end_ofi2_Port_SetPin:
 22448                           	opt stack 0
 22449                           tosu	equ	0xFFF
 22450                           tosh	equ	0xFFE
 22451                           tosl	equ	0xFFD
 22452                           pclatu	equ	0xFFB
 22453                           pclath	equ	0xFFA
 22454                           tblptru	equ	0xFF8
 22455                           tblptrh	equ	0xFF7
 22456                           tblptrl	equ	0xFF6
 22457                           tablat	equ	0xFF5
 22458                           prodh	equ	0xFF4
 22459                           prodl	equ	0xFF3
 22460                           intcon	equ	0xFF2
 22461                           indf0	equ	0xFEF
 22462                           postinc0	equ	0xFEE
 22463                           fsr0h	equ	0xFEA
 22464                           fsr0l	equ	0xFE9
 22465                           wreg	equ	0xFE8
 22466                           indf1	equ	0xFE7
 22467                           postdec1	equ	0xFE5
 22468                           fsr1h	equ	0xFE2
 22469                           fsr1l	equ	0xFE1
 22470                           indf2	equ	0xFDF
 22471                           postinc2	equ	0xFDE
 22472                           postdec2	equ	0xFDD
 22473                           plusw2	equ	0xFDB
 22474                           fsr2h	equ	0xFDA
 22475                           fsr2l	equ	0xFD9
 22476                           status	equ	0xFD8
 22477                           
 22478 ;; *************** function i2_Word_GetPair *****************
 22479 ;; Defined at:
 22480 ;;		line 156 in file "Library/Types.c"
 22481 ;; Parameters:    Size  Location     Type
 22482 ;;  pInput          2   12[COMRAM] PTR struct Word
 22483 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22484 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22485 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22486 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22487 ;;  pPair           1   14[COMRAM] unsigned char 
 22488 ;; Auto vars:     Size  Location     Type
 22489 ;;		None
 22490 ;; Return value:  Size  Location     Type
 22491 ;;                  1    wreg      unsigned char 
 22492 ;; Registers used:
 22493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22494 ;; Tracked objects:
 22495 ;;		On entry : 0/0
 22496 ;;		On exit  : 0/0
 22497 ;;		Unchanged: 0/0
 22498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22499 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22502 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22503 ;;Total ram usage:        3 bytes
 22504 ;; Hardware stack levels used:    1
 22505 ;; Hardware stack levels required when called:    2
 22506 ;; This function calls:
 22507 ;;		i2_Byte_GetPair
 22508 ;; This function is called by:
 22509 ;;		i2_Port_SetPin
 22510 ;; This function uses a non-reentrant model
 22511 ;;
 22512                           
 22513                           	psect	text128
 22514  014428                     __ptext128:
 22515                           	opt stack 0
 22516  014428                     i2_Word_GetPair:
 22517                           	opt stack 14
 22518                           
 22519                           ;Types.c: 158: if (pPair >= 4)
 22520                           
 22521                           ;incstack = 0
 22522  014428  0E03               	movlw	3
 22523  01442A  640F               	cpfsgt	i2Word_GetPair@pPair,c
 22524  01442C  D00C               	goto	i2l10405
 22525                           
 22526                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22527  01442E  0E01               	movlw	1
 22528  014430  240D               	addwf	i2Word_GetPair@pInput,w,c
 22529  014432  6E0A               	movwf	i2Byte_GetPair@pInput,c
 22530  014434  0E00               	movlw	0
 22531  014436  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 22532  014438  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 22533  01443A  500F               	movf	i2Word_GetPair@pPair,w,c
 22534  01443C  0FFC               	addlw	252
 22535  01443E  6E0C               	movwf	i2Byte_GetPair@pPair,c
 22536  014440  EC5A  F0A3         	call	i2_Byte_GetPair	;wreg free
 22537  014444  0012               	return	
 22538  014446                     i2l10405:
 22539                           
 22540                           ;Types.c: 160: else
 22541                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22542  014446  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 22543  01444A  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 22544  01444E  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 22545  014452  EC5A  F0A3         	call	i2_Byte_GetPair	;wreg free
 22546  014456  0012               	return	
 22547  014458                     __end_ofi2_Word_GetPair:
 22548                           	opt stack 0
 22549                           tosu	equ	0xFFF
 22550                           tosh	equ	0xFFE
 22551                           tosl	equ	0xFFD
 22552                           pclatu	equ	0xFFB
 22553                           pclath	equ	0xFFA
 22554                           tblptru	equ	0xFF8
 22555                           tblptrh	equ	0xFF7
 22556                           tblptrl	equ	0xFF6
 22557                           tablat	equ	0xFF5
 22558                           prodh	equ	0xFF4
 22559                           prodl	equ	0xFF3
 22560                           intcon	equ	0xFF2
 22561                           indf0	equ	0xFEF
 22562                           postinc0	equ	0xFEE
 22563                           fsr0h	equ	0xFEA
 22564                           fsr0l	equ	0xFE9
 22565                           wreg	equ	0xFE8
 22566                           indf1	equ	0xFE7
 22567                           postdec1	equ	0xFE5
 22568                           fsr1h	equ	0xFE2
 22569                           fsr1l	equ	0xFE1
 22570                           indf2	equ	0xFDF
 22571                           postinc2	equ	0xFDE
 22572                           postdec2	equ	0xFDD
 22573                           plusw2	equ	0xFDB
 22574                           fsr2h	equ	0xFDA
 22575                           fsr2l	equ	0xFD9
 22576                           status	equ	0xFD8
 22577                           
 22578 ;; *************** function i2_Byte_GetPair *****************
 22579 ;; Defined at:
 22580 ;;		line 87 in file "Library/Types.c"
 22581 ;; Parameters:    Size  Location     Type
 22582 ;;  pInput          2    9[COMRAM] PTR struct Byte
 22583 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22584 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22585 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22586 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22587 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22588 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22589 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22590 ;;		 -> NULL(0), 
 22591 ;;  pPair           1   11[COMRAM] unsigned char 
 22592 ;; Auto vars:     Size  Location     Type
 22593 ;;		None
 22594 ;; Return value:  Size  Location     Type
 22595 ;;                  1    wreg      unsigned char 
 22596 ;; Registers used:
 22597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22598 ;; Tracked objects:
 22599 ;;		On entry : 0/0
 22600 ;;		On exit  : 0/0
 22601 ;;		Unchanged: 0/0
 22602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22603 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;Total ram usage:        3 bytes
 22608 ;; Hardware stack levels used:    1
 22609 ;; Hardware stack levels required when called:    1
 22610 ;; This function calls:
 22611 ;;		i2_Byte_GetZone
 22612 ;; This function is called by:
 22613 ;;		i2_Word_GetPair
 22614 ;; This function uses a non-reentrant model
 22615 ;;
 22616                           
 22617                           	psect	text129
 22618  0146B4                     __ptext129:
 22619                           	opt stack 0
 22620  0146B4                     i2_Byte_GetPair:
 22621                           	opt stack 14
 22622                           
 22623                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22624                           
 22625                           ;incstack = 0
 22626  0146B4  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 22627  0146B8  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 22628  0146BC  0E04               	movlw	4
 22629  0146BE  6E03               	movwf	i2Byte_GetZone@pMax,c
 22630  0146C0  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 22631  0146C4  0E02               	movlw	2
 22632  0146C6  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 22633  0146C8  EC3E  F09B         	call	i2_Byte_GetZone	;wreg free
 22634  0146CC  0012               	return	
 22635  0146CE                     __end_ofi2_Byte_GetPair:
 22636                           	opt stack 0
 22637                           tosu	equ	0xFFF
 22638                           tosh	equ	0xFFE
 22639                           tosl	equ	0xFFD
 22640                           pclatu	equ	0xFFB
 22641                           pclath	equ	0xFFA
 22642                           tblptru	equ	0xFF8
 22643                           tblptrh	equ	0xFF7
 22644                           tblptrl	equ	0xFF6
 22645                           tablat	equ	0xFF5
 22646                           prodh	equ	0xFF4
 22647                           prodl	equ	0xFF3
 22648                           intcon	equ	0xFF2
 22649                           indf0	equ	0xFEF
 22650                           postinc0	equ	0xFEE
 22651                           fsr0h	equ	0xFEA
 22652                           fsr0l	equ	0xFE9
 22653                           wreg	equ	0xFE8
 22654                           indf1	equ	0xFE7
 22655                           postdec1	equ	0xFE5
 22656                           fsr1h	equ	0xFE2
 22657                           fsr1l	equ	0xFE1
 22658                           indf2	equ	0xFDF
 22659                           postinc2	equ	0xFDE
 22660                           postdec2	equ	0xFDD
 22661                           plusw2	equ	0xFDB
 22662                           fsr2h	equ	0xFDA
 22663                           fsr2l	equ	0xFD9
 22664                           status	equ	0xFD8
 22665                           
 22666 ;; *************** function i2_Byte_GetZone *****************
 22667 ;; Defined at:
 22668 ;;		line 64 in file "Library/Types.c"
 22669 ;; Parameters:    Size  Location     Type
 22670 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22671 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22672 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22673 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22674 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22675 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22676 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22677 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22678 ;;		 -> NULL(0), 
 22679 ;;  pMax            1    2[COMRAM] unsigned char 
 22680 ;;  pChunk          1    3[COMRAM] unsigned char 
 22681 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 22682 ;; Auto vars:     Size  Location     Type
 22683 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 22684 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 22685 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 22686 ;; Return value:  Size  Location     Type
 22687 ;;                  1    wreg      unsigned char 
 22688 ;; Registers used:
 22689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22690 ;; Tracked objects:
 22691 ;;		On entry : 0/0
 22692 ;;		On exit  : 0/0
 22693 ;;		Unchanged: 0/0
 22694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22695 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22696 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22698 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22699 ;;Total ram usage:        9 bytes
 22700 ;; Hardware stack levels used:    1
 22701 ;; This function calls:
 22702 ;;		Nothing
 22703 ;; This function is called by:
 22704 ;;		i2_Byte_GetPair
 22705 ;; This function uses a non-reentrant model
 22706 ;;
 22707                           
 22708                           	psect	text130
 22709  01367C                     __ptext130:
 22710                           	opt stack 0
 22711  01367C                     i2_Byte_GetZone:
 22712                           	opt stack 14
 22713                           
 22714                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22715                           
 22716                           ;incstack = 0
 22717  01367C  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 22718  013680  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 22719  013684  0E00               	movlw	low (__mediumconst shr (0+16))
 22720  013686  6EF8               	movwf	tblptru,c
 22721  013688  0E0F               	movlw	(high __ramtop+-1)
 22722  01368A  64F7               	cpfsgt	tblptrh,c
 22723  01368C  D003               	bra	i2u648_47
 22724  01368E  0008               	tblrd		*
 22725  013690  50F5               	movf	tablat,w,c
 22726  013692  D005               	bra	i2u648_40
 22727  013694                     i2u648_47:
 22728  013694  CFF6 FFE9          	movff	tblptrl,fsr0l
 22729  013698  CFF7 FFEA          	movff	tblptrh,fsr0h
 22730  01369C  50EF               	movf	indf0,w,c
 22731  01369E                     i2u648_40:
 22732  01369E  6E09               	movwf	i2Byte_GetZone@Output,c
 22733                           
 22734                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22735  0136A0  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22736  0136A2  0D01               	mullw	1
 22737  0136A4  0E9D               	movlw	low _MASKS
 22738  0136A6  24F3               	addwf	prodl,w,c
 22739  0136A8  6EF6               	movwf	tblptrl,c
 22740  0136AA  0EFD               	movlw	high _MASKS
 22741  0136AC  20F4               	addwfc	prodh,w,c
 22742  0136AE  6EF7               	movwf	tblptrh,c
 22743  0136B0                     	if	1	;There are 3 active tblptr bytes
 22744  0136B0  6AF8               	clrf	tblptru,c
 22745  0136B2  0E00               	movlw	low (__mediumconst shr (0+16))
 22746  0136B4  22F8               	addwfc	tblptru,f,c
 22747  0136B6                     	endif
 22748  0136B6  0008               	tblrd		*
 22749  0136B8  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 22750                           
 22751                           ;Types.c: 68: UINT8 Offset = 0;
 22752  0136BC  0E00               	movlw	0
 22753  0136BE  6E08               	movwf	i2Byte_GetZone@Offset,c
 22754                           
 22755                           ;Types.c: 70: while (pChunk >= pMax)
 22756  0136C0  D003               	goto	i2l9945
 22757  0136C2                     i2l9941:
 22758                           
 22759                           ;Types.c: 71: {
 22760                           ;Types.c: 72: pChunk -= pMax;
 22761  0136C2  5003               	movf	i2Byte_GetZone@pMax,w,c
 22762  0136C4  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 22763                           
 22764                           ;Types.c: 73: Offset += 1;
 22765  0136C6  2A08               	incf	i2Byte_GetZone@Offset,f,c
 22766  0136C8                     i2l9945:
 22767  0136C8  5003               	movf	i2Byte_GetZone@pMax,w,c
 22768  0136CA  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 22769  0136CC  B0D8               	btfsc	status,0,c
 22770  0136CE  D7F9               	goto	i2l9941
 22771                           
 22772                           ;Types.c: 74: }
 22773                           ;Types.c: 75: pChunk *= pChunkSize;
 22774  0136D0  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22775  0136D2  0204               	mulwf	i2Byte_GetZone@pChunk,c
 22776  0136D4  50F3               	movf	prodl,w,c
 22777  0136D6  6E04               	movwf	i2Byte_GetZone@pChunk,c
 22778                           
 22779                           ;Types.c: 76: pChunk += Offset;
 22780  0136D8  5008               	movf	i2Byte_GetZone@Offset,w,c
 22781  0136DA  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 22782                           
 22783                           ;Types.c: 78: Output >>= pChunk;
 22784  0136DC  2804               	incf	i2Byte_GetZone@pChunk,w,c
 22785  0136DE  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 22786  0136E0  D002               	goto	i2u650_40
 22787  0136E2                     i2u650_45:
 22788  0136E2  90D8               	bcf	status,0,c
 22789  0136E4  3209               	rrcf	i2Byte_GetZone@Output,f,c
 22790  0136E6                     i2u650_40:
 22791  0136E6  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 22792  0136E8  D7FC               	goto	i2u650_45
 22793                           
 22794                           ;Types.c: 79: Output &= MASK;
 22795  0136EA  5007               	movf	i2Byte_GetZone@MASK,w,c
 22796  0136EC  1609               	andwf	i2Byte_GetZone@Output,f,c
 22797                           
 22798                           ;Types.c: 80: return Output;
 22799  0136EE  5009               	movf	i2Byte_GetZone@Output,w,c
 22800  0136F0  0012               	return	
 22801  0136F2                     __end_ofi2_Byte_GetZone:
 22802                           	opt stack 0
 22803                           tosu	equ	0xFFF
 22804                           tosh	equ	0xFFE
 22805                           tosl	equ	0xFFD
 22806                           pclatu	equ	0xFFB
 22807                           pclath	equ	0xFFA
 22808                           tblptru	equ	0xFF8
 22809                           tblptrh	equ	0xFF7
 22810                           tblptrl	equ	0xFF6
 22811                           tablat	equ	0xFF5
 22812                           prodh	equ	0xFF4
 22813                           prodl	equ	0xFF3
 22814                           intcon	equ	0xFF2
 22815                           indf0	equ	0xFEF
 22816                           postinc0	equ	0xFEE
 22817                           fsr0h	equ	0xFEA
 22818                           fsr0l	equ	0xFE9
 22819                           wreg	equ	0xFE8
 22820                           indf1	equ	0xFE7
 22821                           postdec1	equ	0xFE5
 22822                           fsr1h	equ	0xFE2
 22823                           fsr1l	equ	0xFE1
 22824                           indf2	equ	0xFDF
 22825                           postinc2	equ	0xFDE
 22826                           postdec2	equ	0xFDD
 22827                           plusw2	equ	0xFDB
 22828                           fsr2h	equ	0xFDA
 22829                           fsr2l	equ	0xFD9
 22830                           status	equ	0xFD8
 22831                           
 22832 ;; *************** function i2_Byte_SetBit *****************
 22833 ;; Defined at:
 22834 ;;		line 32 in file "Library/Types.c"
 22835 ;; Parameters:    Size  Location     Type
 22836 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22837 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 22838 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 22839 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22840 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22841 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22842 ;;		 -> NULL(0), 
 22843 ;;  pBit            1    2[COMRAM] unsigned char 
 22844 ;;  pValue          1    3[COMRAM] unsigned char 
 22845 ;; Auto vars:     Size  Location     Type
 22846 ;;		None
 22847 ;; Return value:  Size  Location     Type
 22848 ;;                  1    wreg      void 
 22849 ;; Registers used:
 22850 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22851 ;; Tracked objects:
 22852 ;;		On entry : 0/0
 22853 ;;		On exit  : 0/0
 22854 ;;		Unchanged: 0/0
 22855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22859 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22860 ;;Total ram usage:        7 bytes
 22861 ;; Hardware stack levels used:    1
 22862 ;; This function calls:
 22863 ;;		Nothing
 22864 ;; This function is called by:
 22865 ;;		i2_Port_SetPin
 22866 ;; This function uses a non-reentrant model
 22867 ;;
 22868                           
 22869                           	psect	text131
 22870  013EB2                     __ptext131:
 22871                           	opt stack 0
 22872  013EB2                     i2_Byte_SetBit:
 22873                           	opt stack 16
 22874                           
 22875                           ;Types.c: 34: pValue &= 1;
 22876                           
 22877                           ;incstack = 0
 22878  013EB2  0E01               	movlw	1
 22879  013EB4  1604               	andwf	i2Byte_SetBit@pValue,f,c
 22880                           
 22881                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 22882  013EB6  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22883  013EBA  0E01               	movlw	1
 22884  013EBC  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 22885  013EBE  2A05               	incf	??i2_Byte_SetBit,f,c
 22886  013EC0  D002               	goto	i2u702_44
 22887  013EC2                     i2u702_45:
 22888  013EC2  90D8               	bcf	status,0,c
 22889  013EC4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22890  013EC6                     i2u702_44:
 22891  013EC6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22892  013EC8  D7FC               	goto	i2u702_45
 22893  013ECA  5006               	movf	??i2_Byte_SetBit+1,w,c
 22894  013ECC  0AFF               	xorlw	255
 22895  013ECE  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 22896  013ED0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22897  013ED4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22898  013ED8  5007               	movf	??i2_Byte_SetBit+2,w,c
 22899  013EDA  16DF               	andwf	indf2,f,c
 22900                           
 22901                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 22902  013EDC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22903  013EE0  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 22904  013EE4  2A05               	incf	??i2_Byte_SetBit,f,c
 22905  013EE6  D002               	goto	i2u703_44
 22906  013EE8                     i2u703_45:
 22907  013EE8  90D8               	bcf	status,0,c
 22908  013EEA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22909  013EEC                     i2u703_44:
 22910  013EEC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22911  013EEE  D7FC               	goto	i2u703_45
 22912  013EF0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22913  013EF4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22914  013EF8  5006               	movf	??i2_Byte_SetBit+1,w,c
 22915  013EFA  12DF               	iorwf	indf2,f,c
 22916  013EFC  0012               	return		;funcret
 22917  013EFE                     __end_ofi2_Byte_SetBit:
 22918                           	opt stack 0
 22919                           tosu	equ	0xFFF
 22920                           tosh	equ	0xFFE
 22921                           tosl	equ	0xFFD
 22922                           pclatu	equ	0xFFB
 22923                           pclath	equ	0xFFA
 22924                           tblptru	equ	0xFF8
 22925                           tblptrh	equ	0xFF7
 22926                           tblptrl	equ	0xFF6
 22927                           tablat	equ	0xFF5
 22928                           prodh	equ	0xFF4
 22929                           prodl	equ	0xFF3
 22930                           intcon	equ	0xFF2
 22931                           indf0	equ	0xFEF
 22932                           postinc0	equ	0xFEE
 22933                           fsr0h	equ	0xFEA
 22934                           fsr0l	equ	0xFE9
 22935                           wreg	equ	0xFE8
 22936                           indf1	equ	0xFE7
 22937                           postdec1	equ	0xFE5
 22938                           fsr1h	equ	0xFE2
 22939                           fsr1l	equ	0xFE1
 22940                           indf2	equ	0xFDF
 22941                           postinc2	equ	0xFDE
 22942                           postdec2	equ	0xFDD
 22943                           plusw2	equ	0xFDB
 22944                           fsr2h	equ	0xFDA
 22945                           fsr2l	equ	0xFD9
 22946                           status	equ	0xFD8
 22947                           
 22948 ;; *************** function i2_MXK_SwitchTo *****************
 22949 ;; Defined at:
 22950 ;;		line 105 in file "Library/MXK.c"
 22951 ;; Parameters:    Size  Location     Type
 22952 ;;  pModule         1    wreg     enum E7869
 22953 ;; Auto vars:     Size  Location     Type
 22954 ;;  pModule         1    7[COMRAM] enum E7869
 22955 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 22956 ;; Return value:  Size  Location     Type
 22957 ;;                  1    wreg      unsigned char 
 22958 ;; Registers used:
 22959 ;;		wreg, status,2, status,0, cstack
 22960 ;; Tracked objects:
 22961 ;;		On entry : 0/0
 22962 ;;		On exit  : 0/0
 22963 ;;		Unchanged: 0/0
 22964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22968 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22969 ;;Total ram usage:        2 bytes
 22970 ;; Hardware stack levels used:    1
 22971 ;; Hardware stack levels required when called:    1
 22972 ;; This function calls:
 22973 ;;		i2_delay_us
 22974 ;; This function is called by:
 22975 ;;		i2_Motor_Step
 22976 ;; This function uses a non-reentrant model
 22977 ;;
 22978                           
 22979                           	psect	text132
 22980  0142CC                     __ptext132:
 22981                           	opt stack 0
 22982  0142CC                     i2_MXK_SwitchTo:
 22983                           	opt stack 16
 22984                           
 22985                           ;incstack = 0
 22986                           ;i2MXK_SwitchTo@pModule stored from wreg
 22987  0142CC  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 22988                           
 22989                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 22990  0142CE  5086               	movf	3974,w,c	;volatile
 22991  0142D0  0B0F               	andlw	15
 22992  0142D2  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 22993                           
 22994                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 22995  0142D4  5044               	movf	_Bus_State,w,c
 22996  0142D6  A4D8               	btfss	status,2,c
 22997  0142D8  D002               	goto	i2l10961
 22998                           
 22999                           ;MXK.c: 110: return 0;
 23000  0142DA  0E00               	movlw	0
 23001  0142DC  0012               	return	
 23002  0142DE                     i2l10961:
 23003                           
 23004                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 23005  0142DE  0E00               	movlw	0
 23006  0142E0  6E44               	movwf	_Bus_State,c
 23007                           
 23008                           ;MXK.c: 114: if (CUR != pModule)
 23009  0142E2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23010  0142E4  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 23011  0142E6  B4D8               	btfsc	status,2,c
 23012  0142E8  D00A               	goto	i2l10969
 23013                           
 23014                           ;MXK.c: 115: {
 23015                           ;MXK.c: 116: PORTG &= ~(0xF);
 23016  0142EA  0EF0               	movlw	240
 23017  0142EC  1686               	andwf	3974,f,c	;volatile
 23018                           
 23019                           ;MXK.c: 117: PORTG |= pModule;
 23020  0142EE  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23021  0142F0  1286               	iorwf	3974,f,c	;volatile
 23022                           
 23023                           ;MXK.c: 120: delay_us(10);
 23024  0142F2  0E00               	movlw	0
 23025  0142F4  6E02               	movwf	i2delay_us@us+1,c
 23026  0142F6  0E0A               	movlw	10
 23027  0142F8  6E01               	movwf	i2delay_us@us,c
 23028  0142FA  EC75  F0A0         	call	i2_delay_us	;wreg free
 23029  0142FE                     i2l10969:
 23030                           
 23031                           ;MXK.c: 121: }
 23032                           ;MXK.c: 122: return 1;
 23033  0142FE  0E01               	movlw	1
 23034  014300  0012               	return	
 23035  014302                     __end_ofi2_MXK_SwitchTo:
 23036                           	opt stack 0
 23037                           tosu	equ	0xFFF
 23038                           tosh	equ	0xFFE
 23039                           tosl	equ	0xFFD
 23040                           pclatu	equ	0xFFB
 23041                           pclath	equ	0xFFA
 23042                           tblptru	equ	0xFF8
 23043                           tblptrh	equ	0xFF7
 23044                           tblptrl	equ	0xFF6
 23045                           tablat	equ	0xFF5
 23046                           prodh	equ	0xFF4
 23047                           prodl	equ	0xFF3
 23048                           intcon	equ	0xFF2
 23049                           indf0	equ	0xFEF
 23050                           postinc0	equ	0xFEE
 23051                           fsr0h	equ	0xFEA
 23052                           fsr0l	equ	0xFE9
 23053                           wreg	equ	0xFE8
 23054                           indf1	equ	0xFE7
 23055                           postdec1	equ	0xFE5
 23056                           fsr1h	equ	0xFE2
 23057                           fsr1l	equ	0xFE1
 23058                           indf2	equ	0xFDF
 23059                           postinc2	equ	0xFDE
 23060                           postdec2	equ	0xFDD
 23061                           plusw2	equ	0xFDB
 23062                           fsr2h	equ	0xFDA
 23063                           fsr2l	equ	0xFD9
 23064                           status	equ	0xFD8
 23065                           
 23066 ;; *************** function i2_delay_us *****************
 23067 ;; Defined at:
 23068 ;;		line 255 in file "Library/Types.c"
 23069 ;; Parameters:    Size  Location     Type
 23070 ;;  us              2    0[COMRAM] unsigned short 
 23071 ;; Auto vars:     Size  Location     Type
 23072 ;;  delay_us        4    2[COMRAM] unsigned long 
 23073 ;; Return value:  Size  Location     Type
 23074 ;;                  1    wreg      void 
 23075 ;; Registers used:
 23076 ;;		wreg, status,2, status,0
 23077 ;; Tracked objects:
 23078 ;;		On entry : 0/0
 23079 ;;		On exit  : 0/0
 23080 ;;		Unchanged: 0/0
 23081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23083 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23085 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23086 ;;Total ram usage:        6 bytes
 23087 ;; Hardware stack levels used:    1
 23088 ;; This function calls:
 23089 ;;		Nothing
 23090 ;; This function is called by:
 23091 ;;		i2_MXK_SwitchTo
 23092 ;; This function uses a non-reentrant model
 23093 ;;
 23094                           
 23095                           	psect	text133
 23096  0140EA                     __ptext133:
 23097                           	opt stack 0
 23098  0140EA                     i2_delay_us:
 23099                           	opt stack 16
 23100                           
 23101                           ;Types.c: 256: unsigned long u;
 23102                           ;Types.c: 257: while (us--) {
 23103                           
 23104                           ;incstack = 0
 23105  0140EA  D016               	goto	i2l10419
 23106  0140EC                     i2l10411:
 23107                           
 23108                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 23109  0140EC  0E00               	movlw	0
 23110  0140EE  6E03               	movwf	i2delay_us@u,c
 23111  0140F0  0E00               	movlw	0
 23112  0140F2  6E04               	movwf	i2delay_us@u+1,c
 23113  0140F4  0E00               	movlw	0
 23114  0140F6  6E05               	movwf	i2delay_us@u+2,c
 23115  0140F8  0E00               	movlw	0
 23116  0140FA  6E06               	movwf	i2delay_us@u+3,c
 23117  0140FC                     i2l10413:
 23118  0140FC  5003               	movf	i2delay_us@u,w,c
 23119  0140FE  1004               	iorwf	i2delay_us@u+1,w,c
 23120  014100  1005               	iorwf	i2delay_us@u+2,w,c
 23121  014102  1006               	iorwf	i2delay_us@u+3,w,c
 23122  014104  A4D8               	btfss	status,2,c
 23123  014106  D008               	goto	i2l10419
 23124  014108  F000               	nop		; ;# 
 23125  01410A  0E01               	movlw	1
 23126  01410C  2603               	addwf	i2delay_us@u,f,c
 23127  01410E  0E00               	movlw	0
 23128  014110  2204               	addwfc	i2delay_us@u+1,f,c
 23129  014112  2205               	addwfc	i2delay_us@u+2,f,c
 23130  014114  2206               	addwfc	i2delay_us@u+3,f,c
 23131  014116  D7F2               	goto	i2l10413
 23132  014118                     i2l10419:
 23133  014118  0601               	decf	i2delay_us@us,f,c
 23134  01411A  A0D8               	btfss	status,0,c
 23135  01411C  0602               	decf	i2delay_us@us+1,f,c
 23136  01411E  2801               	incf	i2delay_us@us,w,c
 23137  014120  E1E5               	bnz	i2l10411
 23138  014122  2802               	incf	i2delay_us@us+1,w,c
 23139  014124  B4D8               	btfsc	status,2,c
 23140  014126  0012               	return	
 23141  014128  D7E1               	goto	i2l10411
 23142  01412A                     __end_ofi2_delay_us:
 23143                           	opt stack 0
 23144                           tosu	equ	0xFFF
 23145                           tosh	equ	0xFFE
 23146                           tosl	equ	0xFFD
 23147                           pclatu	equ	0xFFB
 23148                           pclath	equ	0xFFA
 23149                           tblptru	equ	0xFF8
 23150                           tblptrh	equ	0xFF7
 23151                           tblptrl	equ	0xFF6
 23152                           tablat	equ	0xFF5
 23153                           prodh	equ	0xFF4
 23154                           prodl	equ	0xFF3
 23155                           intcon	equ	0xFF2
 23156                           indf0	equ	0xFEF
 23157                           postinc0	equ	0xFEE
 23158                           fsr0h	equ	0xFEA
 23159                           fsr0l	equ	0xFE9
 23160                           wreg	equ	0xFE8
 23161                           indf1	equ	0xFE7
 23162                           postdec1	equ	0xFE5
 23163                           fsr1h	equ	0xFE2
 23164                           fsr1l	equ	0xFE1
 23165                           indf2	equ	0xFDF
 23166                           postinc2	equ	0xFDE
 23167                           postdec2	equ	0xFDD
 23168                           plusw2	equ	0xFDB
 23169                           fsr2h	equ	0xFDA
 23170                           fsr2l	equ	0xFD9
 23171                           status	equ	0xFD8
 23172                           
 23173 ;; *************** function i2_MXK_Release *****************
 23174 ;; Defined at:
 23175 ;;		line 130 in file "Library/MXK.c"
 23176 ;; Parameters:    Size  Location     Type
 23177 ;;		None
 23178 ;; Auto vars:     Size  Location     Type
 23179 ;;		None
 23180 ;; Return value:  Size  Location     Type
 23181 ;;                  1    wreg      unsigned char 
 23182 ;; Registers used:
 23183 ;;		wreg, status,2, status,0
 23184 ;; Tracked objects:
 23185 ;;		On entry : 0/0
 23186 ;;		On exit  : 0/0
 23187 ;;		Unchanged: 0/0
 23188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23193 ;;Total ram usage:        0 bytes
 23194 ;; Hardware stack levels used:    1
 23195 ;; This function calls:
 23196 ;;		Nothing
 23197 ;; This function is called by:
 23198 ;;		i2_Motor_Step
 23199 ;; This function uses a non-reentrant model
 23200 ;;
 23201                           
 23202                           	psect	text134
 23203  01489A                     __ptext134:
 23204                           	opt stack 0
 23205  01489A                     i2_MXK_Release:
 23206                           	opt stack 17
 23207                           
 23208                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 23209                           
 23210                           ;incstack = 0
 23211  01489A  0E01               	movlw	1
 23212  01489C  6E44               	movwf	_Bus_State,c
 23213                           
 23214                           ;MXK.c: 135: return 1;
 23215                           ;	Return value of i2_MXK_Release is never used
 23216  01489E  0012               	return	
 23217  0148A0                     __end_ofi2_MXK_Release:
 23218                           	opt stack 0
 23219                           tosu	equ	0xFFF
 23220                           tosh	equ	0xFFE
 23221                           tosl	equ	0xFFD
 23222                           pclatu	equ	0xFFB
 23223                           pclath	equ	0xFFA
 23224                           tblptru	equ	0xFF8
 23225                           tblptrh	equ	0xFF7
 23226                           tblptrl	equ	0xFF6
 23227                           tablat	equ	0xFF5
 23228                           prodh	equ	0xFF4
 23229                           prodl	equ	0xFF3
 23230                           intcon	equ	0xFF2
 23231                           indf0	equ	0xFEF
 23232                           postinc0	equ	0xFEE
 23233                           fsr0h	equ	0xFEA
 23234                           fsr0l	equ	0xFE9
 23235                           wreg	equ	0xFE8
 23236                           indf1	equ	0xFE7
 23237                           postdec1	equ	0xFE5
 23238                           fsr1h	equ	0xFE2
 23239                           fsr1l	equ	0xFE1
 23240                           indf2	equ	0xFDF
 23241                           postinc2	equ	0xFDE
 23242                           postdec2	equ	0xFDD
 23243                           plusw2	equ	0xFDB
 23244                           fsr2h	equ	0xFDA
 23245                           fsr2l	equ	0xFD9
 23246                           status	equ	0xFD8
 23247                           
 23248 ;; *************** function i2_MXK_Queue *****************
 23249 ;; Defined at:
 23250 ;;		line 144 in file "Library/MXK.c"
 23251 ;; Parameters:    Size  Location     Type
 23252 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 23253 ;;		 -> Absolute function(1), Motor_Step(1), 
 23254 ;; Auto vars:     Size  Location     Type
 23255 ;;		None
 23256 ;; Return value:  Size  Location     Type
 23257 ;;                  1    wreg      void 
 23258 ;; Registers used:
 23259 ;;		wreg, status,2, status,0
 23260 ;; Tracked objects:
 23261 ;;		On entry : 0/0
 23262 ;;		On exit  : 0/0
 23263 ;;		Unchanged: 0/0
 23264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23265 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23268 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23269 ;;Total ram usage:        3 bytes
 23270 ;; Hardware stack levels used:    1
 23271 ;; This function calls:
 23272 ;;		Nothing
 23273 ;; This function is called by:
 23274 ;;		i2_Motor_Step
 23275 ;; This function uses a non-reentrant model
 23276 ;;
 23277                           
 23278                           	psect	text135
 23279  014820                     __ptext135:
 23280                           	opt stack 0
 23281  014820                     i2_MXK_Queue:
 23282                           	opt stack 17
 23283                           
 23284                           ;MXK.c: 146: lQueue = pCallback;
 23285                           
 23286                           ;incstack = 0
 23287  014820  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 23288  014824  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 23289  014828  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 23290  01482C  0012               	return		;funcret
 23291  01482E                     __end_ofi2_MXK_Queue:
 23292                           	opt stack 0
 23293                           tosu	equ	0xFFF
 23294                           tosh	equ	0xFFE
 23295                           tosl	equ	0xFFD
 23296                           pclatu	equ	0xFFB
 23297                           pclath	equ	0xFFA
 23298                           tblptru	equ	0xFF8
 23299                           tblptrh	equ	0xFF7
 23300                           tblptrl	equ	0xFF6
 23301                           tablat	equ	0xFF5
 23302                           prodh	equ	0xFF4
 23303                           prodl	equ	0xFF3
 23304                           intcon	equ	0xFF2
 23305                           indf0	equ	0xFEF
 23306                           postinc0	equ	0xFEE
 23307                           fsr0h	equ	0xFEA
 23308                           fsr0l	equ	0xFE9
 23309                           wreg	equ	0xFE8
 23310                           indf1	equ	0xFE7
 23311                           postdec1	equ	0xFE5
 23312                           fsr1h	equ	0xFE2
 23313                           fsr1l	equ	0xFE1
 23314                           indf2	equ	0xFDF
 23315                           postinc2	equ	0xFDE
 23316                           postdec2	equ	0xFDD
 23317                           plusw2	equ	0xFDB
 23318                           fsr2h	equ	0xFDA
 23319                           fsr2l	equ	0xFD9
 23320                           status	equ	0xFD8
 23321                           tosu	equ	0xFFF
 23322                           tosh	equ	0xFFE
 23323                           tosl	equ	0xFFD
 23324                           pclatu	equ	0xFFB
 23325                           pclath	equ	0xFFA
 23326                           tblptru	equ	0xFF8
 23327                           tblptrh	equ	0xFF7
 23328                           tblptrl	equ	0xFF6
 23329                           tablat	equ	0xFF5
 23330                           prodh	equ	0xFF4
 23331                           prodl	equ	0xFF3
 23332                           intcon	equ	0xFF2
 23333                           indf0	equ	0xFEF
 23334                           postinc0	equ	0xFEE
 23335                           fsr0h	equ	0xFEA
 23336                           fsr0l	equ	0xFE9
 23337                           wreg	equ	0xFE8
 23338                           indf1	equ	0xFE7
 23339                           postdec1	equ	0xFE5
 23340                           fsr1h	equ	0xFE2
 23341                           fsr1l	equ	0xFE1
 23342                           indf2	equ	0xFDF
 23343                           postinc2	equ	0xFDE
 23344                           postdec2	equ	0xFDD
 23345                           plusw2	equ	0xFDB
 23346                           fsr2h	equ	0xFDA
 23347                           fsr2l	equ	0xFD9
 23348                           status	equ	0xFD8
 23349                           
 23350                           	psect	text136
 23351  000000                     __ptext136:
 23352                           	opt stack 0
 23353                           tosu	equ	0xFFF
 23354                           tosh	equ	0xFFE
 23355                           tosl	equ	0xFFD
 23356                           pclatu	equ	0xFFB
 23357                           pclath	equ	0xFFA
 23358                           tblptru	equ	0xFF8
 23359                           tblptrh	equ	0xFF7
 23360                           tblptrl	equ	0xFF6
 23361                           tablat	equ	0xFF5
 23362                           prodh	equ	0xFF4
 23363                           prodl	equ	0xFF3
 23364                           intcon	equ	0xFF2
 23365                           indf0	equ	0xFEF
 23366                           postinc0	equ	0xFEE
 23367                           fsr0h	equ	0xFEA
 23368                           fsr0l	equ	0xFE9
 23369                           wreg	equ	0xFE8
 23370                           indf1	equ	0xFE7
 23371                           postdec1	equ	0xFE5
 23372                           fsr1h	equ	0xFE2
 23373                           fsr1l	equ	0xFE1
 23374                           indf2	equ	0xFDF
 23375                           postinc2	equ	0xFDE
 23376                           postdec2	equ	0xFDD
 23377                           plusw2	equ	0xFDB
 23378                           fsr2h	equ	0xFDA
 23379                           fsr2l	equ	0xFD9
 23380                           status	equ	0xFD8
 23381                           
 23382                           	psect	rparam
 23383  0000                     tosu	equ	0xFFF
 23384                           tosh	equ	0xFFE
 23385                           tosl	equ	0xFFD
 23386                           pclatu	equ	0xFFB
 23387                           pclath	equ	0xFFA
 23388                           tblptru	equ	0xFF8
 23389                           tblptrh	equ	0xFF7
 23390                           tblptrl	equ	0xFF6
 23391                           tablat	equ	0xFF5
 23392                           prodh	equ	0xFF4
 23393                           prodl	equ	0xFF3
 23394                           intcon	equ	0xFF2
 23395                           indf0	equ	0xFEF
 23396                           postinc0	equ	0xFEE
 23397                           fsr0h	equ	0xFEA
 23398                           fsr0l	equ	0xFE9
 23399                           wreg	equ	0xFE8
 23400                           indf1	equ	0xFE7
 23401                           postdec1	equ	0xFE5
 23402                           fsr1h	equ	0xFE2
 23403                           fsr1l	equ	0xFE1
 23404                           indf2	equ	0xFDF
 23405                           postinc2	equ	0xFDE
 23406                           postdec2	equ	0xFDD
 23407                           plusw2	equ	0xFDB
 23408                           fsr2h	equ	0xFDA
 23409                           fsr2l	equ	0xFD9
 23410                           status	equ	0xFD8
 23411                           
 23412                           	psect	temp
 23413  000049                     btemp:
 23414                           	opt stack 0
 23415  000049                     	ds	1
 23416  0000                     int$flags	set	btemp
 23417                           tosu	equ	0xFFF
 23418                           tosh	equ	0xFFE
 23419                           tosl	equ	0xFFD
 23420                           pclatu	equ	0xFFB
 23421                           pclath	equ	0xFFA
 23422                           tblptru	equ	0xFF8
 23423                           tblptrh	equ	0xFF7
 23424                           tblptrl	equ	0xFF6
 23425                           tablat	equ	0xFF5
 23426                           prodh	equ	0xFF4
 23427                           prodl	equ	0xFF3
 23428                           intcon	equ	0xFF2
 23429                           indf0	equ	0xFEF
 23430                           postinc0	equ	0xFEE
 23431                           fsr0h	equ	0xFEA
 23432                           fsr0l	equ	0xFE9
 23433                           wreg	equ	0xFE8
 23434                           indf1	equ	0xFE7
 23435                           postdec1	equ	0xFE5
 23436                           fsr1h	equ	0xFE2
 23437                           fsr1l	equ	0xFE1
 23438                           indf2	equ	0xFDF
 23439                           postinc2	equ	0xFDE
 23440                           postdec2	equ	0xFDD
 23441                           plusw2	equ	0xFDB
 23442                           fsr2h	equ	0xFDA
 23443                           fsr2l	equ	0xFD9
 23444                           status	equ	0xFD8


Data Sizes:
    Strings     99
    Constant    730
    Data        25
    BSS         673
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160     63     160
    BANK1           256     24     219
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_6(CODE[37]), STR_5(CODE[19]), STR_4(CODE[16]), STR_3(CODE[17]), 
		 -> STR_2(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S10680I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S10351ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> STR_1(CODE[7]), HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S560SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S557$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S509$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S509$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0 1312765
                                             13 BANK1     11    11      0
                       _Console_Init
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                         _HMI_SetBar
                      _HMI_SetNumber
                    _HMI_SetSegments
                       _HMI_UpSwitch *
                           _LCD_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Motor_Init
                         _Motor_Move
                        _Motor_Speed
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    5123
                                             21 BANK0     18     8     10
                      _HMI_DIPSwitch (ARG) *
                     _HMI_DownSwitch (ARG) *
                     _HMI_LeftSwitch (ARG) *
                    _HMI_RightSwitch (ARG) *
                       _HMI_UpSwitch (ARG) *
                      _MXK_DIPSwitch (ARG) *
                     _MXK_TestButton (ARG) *
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Motor_Speed                                          4     0      4    3535
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (2) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0  258022
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3  258022
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_UpButton                                   1     1      0   37196
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_DownButton                                 1     1      0   37196
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _HMI_SetSegments                                      5     3      2     598
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (2) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (3) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_SetForecolour                                2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       14    14      0    2480
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    2480
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    2480
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    2184
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     904
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     679
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     477
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     473
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     230
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2     134
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      66
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_DownButton *
         _HMI_SetDown
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_LeftButton *
         _HMI_SetBar
         _HMI_SetLeft
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_RightButton *
         _HMI_SetBar
         _HMI_SetRight
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_UpButton *
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _HMI_SetUp
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetBar *
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_SetSegments *
     _ToSegment
   _HMI_UpSwitch *
     _Port_GetPin
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Motor_Init *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
   _Motor_Move *
     _Timer0_Start
   _Motor_Speed *
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
   _printf *
     _HMI_DIPSwitch (ARG) *
       _Port_GetQuad
     _HMI_DownSwitch (ARG) *
       _Port_GetPin
     _HMI_LeftSwitch (ARG) *
       _Port_GetPin
     _HMI_RightSwitch (ARG) *
       _Port_GetPin
     _HMI_UpSwitch (ARG) *
       _Port_GetPin
     _MXK_DIPSwitch (ARG) *
       _Port_GetQuad
     _MXK_TestButton (ARG) *
       _Port_GetPin
     ___lwdiv (ARG) *
     ___lwmod (ARG) *
       ___lwdiv (ARG)
     _putch (ARG) *
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      DB       7       85.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     209      12        0.0%
DATA                 0      0     335       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Aug 06 17:57:44 2017

                   i2_Timer0_Stop 4894                  SPI_Init@pChannel 00EB  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 2416  
                               _A 0043                                 _a 0045  
                               _i 007B                                 _j 007C  
                               _l 0046                                 _u 007D  
                               _w 0047                      ___awdiv@sign 00BF  
             ___wmul@multiplicand 00BC                     _HMI_DIPSwitch 46E6  
              LCD_DrawField@pSize 00D2                LCD_DrawField@count 00D8  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 4846  
                     ?_LED_Toggle 0001                     ??_Console_Tab 00C2  
                     ?_HMI_GetBar 0001                               l615 039E  
                             l528 07D6                               l617 03A2  
                             l655 4536                               l680 39AE  
                             l657 453A                               l685 39D4  
                             _PR2 000FCB                       main@Stepper 01CD  
                             _val 0076                       ?_HMI_SetBar 0001  
              ??_Event_TestButton 00D3                      _Word_GetPair 41A6  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 00C1                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00CA  
              Console_MakeField@y 00CB                      Console_Tab@c 00C9  
                    Console_Tab@i 00C8               LCD_DrawField@pField 00CC  
                    Console_Tab@t 00C7      __end_of_Event_HMI_LeftButton 3D72  
                      i2_delay_us 40EA              Port_Set@TypeRequired 00DC  
               Console_FormFeed@x 00BC                 Console_FormFeed@y 00BD  
             LCD_DrawField@pPoint 00CE      __end_of_Event_HMI_DownButton 4368  
                  ?_LCD_DrawField 00CC             Port_SetPinType@Output 00E4  
                 Port_SetPin@Type 00CD                   Port_SetPin@pPin 00CB  
                   ?_Byte_GetPair 00C3                   __end_of_LED_Set 3E14  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 2E60  
                    _Word_SetPair 401E                     ?_Byte_GetZone 00BA  
                            l1215 25FE                              l1056 117C  
                            l2032 15E8                              l1161 1558  
                            l1082 28EE                              l1166 41A4  
                            l2450 3672                              l2460 3C5E  
                            l2397 2C40                    ??_Console_Init 00BA  
                            l9501 3600                              l9515 2C78  
                            l9611 07FE                              l9603 07F6  
                            l9541 29CE                              l9533 2974  
                            l9519 2C84                              l9455 31EC  
                            l9711 0862                              l9703 085A  
                            l9631 0812                              l9623 080A  
                            l9615 0802                              l9607 07FA  
           Port_SetPinType@pInput 00E0                              l9561 3AD6  
                            l9537 299E                              l9459 31F8  
                            l9547 29F8                              l9811 08C6  
                            l9803 08BE                              l9731 0876  
                            l9723 086E                              l9715 0866  
                            l9707 085E                              l9651 0826  
                            l9643 081E                              l9635 0816  
                            l9627 080E                              l9619 0806  
                            l9485 41D2                              l9823 08D2  
                            l9815 08CA                              l9807 08C2  
                            l9751 088A                              l9743 0882  
                            l9735 087A                              l9727 0872  
                            l9719 086A                              l9671 083A  
                            l9663 0832                              l9655 082A  
                            l9647 0822                              l9639 081A  
                            l9591 07EA                              l9583 07E2  
                            l9903 3622                              l9833 08DA  
                            l9905 362E                              l9841 394A  
                            l9827 08D6                              l9819 08CE  
                            l9771 089E                              l9763 0896  
                            l9755 088E                              l9747 0886  
                            l9739 087E                              l9691 084E  
                            l9683 0846                              l9675 083E  
                            l9667 0836                              l9659 082E  
                            l9595 07EE                              l9587 07E6  
                            l9579 07DE                              l9915 3664  
                            l9907 3634                              l9931 3C50  
                            l9923 3C1A                              l9925 3C26  
                            l9853 32D6                              l9861 3348  
                            l9791 08B2                              l9783 08AA  
                            l9775 08A2                              l9767 089A  
                            l9759 0892                              l9695 0852  
                            l9687 084A                              l9679 0842  
                            l9599 07F2                              l9927 3C2C  
                            STR_1 FFF4                              STR_2 FFFB  
                            l9849 397E                              l9873 3404  
                            STR_3 FFD3                              STR_4 FFE4  
                            l9971 39C4                              l9963 399E  
                            l9795 08B6                              l9787 08AE  
                            l9779 08A6                              l9699 0856  
                            l9891 3462                              l9883 341E  
                            l9859 3346                              STR_5 FFC0  
                            STR_6 FF9B                              l9981 39EA  
                            l9877 340E                              l9799 08BA  
                            l9879 3414                              l9895 3468  
                            l9999 3CBC                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F               __end_of_GetPortPORT 30FC  
                            u6210 31C2                              u7005 47DE  
                            u6230 3228                              u7006 47E2  
                            u7014 33C2                              u7015 33BC  
                            u7200 4324                              u6217 31B8  
                            u6314 2CC0                              u6250 359A  
                            u6315 2CBA                              u6235 3222  
                            u7115 044C                              u6324 2CF2  
                            u6340 400C                              u7205 431E  
                            u6325 2CEC                              u7125 0464  
                            u7135 047C                              u6600 3B34  
                            u6345 4006                              u7145 049E  
                            _PIR1 000F9E                              u6610 2552  
                            _PIR2 000FA1                              u6515 47F2  
                            u7155 061E                              _PIR3 000FA4  
                            u6516 47F4                              u6284 3B5C  
                            u6285 3B56                              u7165 069C  
                            u6294 3B8E                              u6295 3B88  
                            u7175 06DE                              u6640 25CA  
             __end_of_GetPortTRIS 2FB0                              u6617 2548  
                            u7185 0720                              u7428 286C  
                            u7438 1EF8                              u6590 3B0A  
                            u6647 25C0                              u7439 1F0C  
                            u6860 3F36                              u7830 1D94  
                            u7750 233A                              u7488 2034  
                            u7760 234E                              u6865 3F30  
                            u7770 238E                              u9258 4376  
                            u6875 21C4                              u7675 3532  
                            u9358 0BB6                              u6975 47C8  
                            u9359 0BCA                              u6976 47CC  
                            u9368 0BE0                              u6985 47B2  
                            u9369 0BF4                              u6986 47B6  
                            u9378 0C0A                              u6995 479C  
                            u9379 0C1E                              _SPI1 0164  
                            u6996 47A0                              u9388 0C34  
                            _SPI2 016F                              u9389 0C48  
                            _TMR0 000FD6                              _gISR 0068  
              Event_DIPSwitch@Bar 00D4                     ??_Byte_GetBit 00BD  
              SPI_MaxSpeed@pInput 00C9                     ?_Byte_SetByte 00BA  
                   ?_Byte_SetPair 00C5                   __end_of_SPI_DCS 4428  
                            _main 0A5C                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00C5                              _itos 2600  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                     ?_Byte_SetZone 00BA  
                            btemp 0049                              _zero 0048  
                            pclat 000FFA                     ??_Byte_SetBit 00BE  
                    ?_HMI_SetLeft 0001                __size_of_LCD_Reset 0050  
                    ?_HMI_SetDown 0001                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 00BF  
                            start 148A                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                 Timer0_Init@DIVIDE 00D1  
                 ?_SPI_DisableISR 00BA                  Motor_Move@pMotor 00BD  
             HMI_SetButton@pValue 00C0                     Console_Init@x 00BC  
                   Console_Init@y 00BD                    ?i2_Timer0_Stop 0001  
              __size_of_HMI_SetUp 0016                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000010                   __end_of_Font5x7 FF8D  
            Set_Rotation@rotation 00C0            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 3D1A                  __end_of_LCD_Init 1EE6  
          _Console_MakeField$9772 00C8                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3C06  
                   ??_Button_Init 00F5           GetPortProperties@pInput 00BC  
                   ??_Button_Poll 00D8                             l10007 404E  
                           l10023 263E                             l10031 268E  
                           l10111 2B28                             l10201 3F96  
                           l10113 2B34                             l10105 2B0A  
                           l10203 3FAE                             l10035 26AA  
                           l10211 3A0A                             l10051 3B0E  
                           l10131 2B8C                             l10123 2B6A  
                           l10115 2B3A                  __end_of_HMI_Init 155A  
                           l11005 2800                             l10141 2BC4  
                           l10037 26BE                             l10213 3A1C  
                           l10311 441A                             l10143 2BD4  
                           l10207 3FC6                             l10127 2B78  
                           l11113 382C                             l10241 0D92  
                           l10305 453E                             l10153 2C2E  
                           l10145 2BDA                             l10073 258C  
                           l10065 2520                             l10081 25A8  
                           l11025 1F4E                             l11211 28C4  
                           l11123 3848                             l10235 0CDC  
                           l10251 0E6A                             l10171 175A  
                           l10083 25D2                             l11027 1F64  
                           l10219 3A48                             l11051 325E  
                           l10315 3D74                             l10323 3DAC  
                           l10331 3E76                             l10059 3B3C  
                           l11205 28B4                             l11141 315A  
                           l11109 381E                             l10245 0DFE  
                           l10237 0D26                             l10253 0E86  
                           l10317 3D86                             l10229 3F8A  
                           l10341 3E94                             l11215 28CE  
                           l10183 1832                             l10191 18BA  
                           l10087 25EC                             l11063 328A  
                           l11311 239C                             l11151 3BC8  
                           l10343 3EAC                             l10351 2A68  
                           l11225 2938                             l11209 28BE  
                           l11145 3180                             l10177 17C6  
                           l10169 1734                             l11241 351A  
                           l11057 3274                             l11313 23B8  
                           l11305 235C                             l10601 30A2  
                           l11219 28F6                             l10443 001A  
                           l11307 237A                             l11323 23FA  
                           l11155 3BE6                             l10099 2AF4  
                           l10355 2A74                             l11229 2944  
                           l10189 189E                             l10277 220C  
                           l10285 2228                             l10445 002A  
                           l10437 0002                             l11253 3570  
                           l11245 3522                             l11085 3CEA  
                           l11069 32A0                             l11077 32B6  
                           l10533 3DCA                             l11157 3BF6  
                           l11149 3BAA                             l10605 30B0  
                           l10701 0754                             l11173 19C4  
                           l10287 2272                             l10471 0228  
                           l10455 00EC                             l10447 003E  
                           l10439 000C                             l10535 3DE6  
                           l10615 30CC                             l10551 2FD2  
                           l10543 2FB6                             l10631 2F3A  
                           l10623 2F1E                             l10703 0774  
                           l10711 07B8                             l11175 19DC  
                           l11183 1A24                             l11271 20BC  
                           l10473 0276                             l10481 0330  
                           l10465 01A0                             l11089 3CF8  
                           l10801 40BE                             l11329 2404  
                           l10609 30BE                             l11177 19F4  
                           l11185 1A54                             l11169 19BA  
                           l11265 20B2                             l10491 03B8  
                           l10475 02C4                             l10467 01B2  
                           l11099 3D14                             l12411 438A  
                           l10539 3E02                             l10571 3018  
                           l10563 2FFC                             l10555 2FE0  
                           l10547 2FC4                             l10643 2F64  
                           l10635 2F48                             l10627 2F2C  
                           l10619 2F10                             l10707 0798  
                           l11179 1A0C                             l11275 20C4  
                           l11541 3498                             l10469 01DA  
                           l11381 1E04                             l10821 4788  
                           l10581 305C                             l10653 2F80  
                           l11189 1A5A                             l11277 2116  
                           l10741 1A8C                             l10733 1A80  
                           l10725 1A74                             l11543 349E  
                           l10479 0312                             l11615 152C  
                           l10903 4090                             l11391 1EA8  
                           l11375 1D96                             l10567 300A  
                           l10559 2FEE                             l10647 2F72  
                           l10639 2F56                             l10663 0F9C  
                           l12431 0A80                             l11553 3500  
                           l11537 348E                             l10489 03A6  
                           l11385 1E70                             l10809 40E6  
                           l10593 3086                             l10585 306A  
                           l10577 3026                             l10657 0F32  
                           l10673 1026                             l10745 1A92  
                           l10737 1A86                             l10729 1A7A  
                           l12505 0CC4                             l11547 34A8  
                           l10907 40A0                             l11627 4172  
                           l11387 1E9A                             l10667 0FE4  
                           l10659 0F54                             l10675 1042  
                           l11803 167C                             l12443 0AB2  
                           l11573 11A4                             l10917 43C0  
                           l10597 3094                             l10589 3078  
                           l10757 1B34                             l10749 1A98  
                           l11813 16EE                             l10927 4360  
                           l11735 4136                             l11807 1690  
                           l11815 16FA                             l12455 0B18  
                           l11585 12EC                             l11593 132A  
                           l11577 11AE                             l11569 1184  
                           l11745 4164                             l10769 1BC4  
                           l11809 1696                             l11761 157C  
                           l12465 0B26                             l11587 131A  
                           l10875 4254                             l10891 3D62  
                           l11763 1584                             l10893 3D6A  
                           l11773 15AC                             l11757 1568  
                           l11599 1342                             l10887 3D50  
                           l11791 1640                             l11767 159C  
                           l11785 1620                             l11769 15A6  
                           l12489 0C6A                             l12499 0C92  
                           l11789 163A                  __end_of_HMI_Poll 38C0  
                           _I2C1T 0038                             _I2C2T 009C  
                           ?_main 0001                   __end_of___awdiv 2B96  
                           ?_itos 00C6                   _Event_DIPSwitch 4458  
                 __end_of___lldiv 2C52           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 00BC                             _INDEX 0034  
                 __end_of___lwdiv 367C                             _MASKS FD9D  
                 __end_of___lwmod 3C68                   ___awdiv@counter 00BE  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00D0  
                  __CFG_FCMEN$OFF 000000                             _PortA 0184  
                           _PortB 018E                             _PortC 007E  
                           _PortD 0088                             _PortE 0092  
                           _PortF 0198                             _PortG 01A2  
         __end_of_Port_SetPinType 18DC                   _ADC_Initialised 0079  
                  ??_Byte_GetPair 00C6                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00CF                   __end_of_dpowers FD9D  
                  ??_Byte_GetZone 00BF                    Button_Poll@Pin 00DD  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 2AD8  
                __end_of_MXK_Init 1D74              i2Byte_GetPair@pInput 000A  
                           _putch 47F6                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 3A08             __end_ofi2_MXK_Release 48A0  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 399C                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 00BD                    ??_Byte_SetPair 00C9  
                  ??_Byte_SetQuad 00C9                             plusw2 000FDB  
                  ??_Byte_SetZone 00C0                     ?_HMI_SetRight 0001  
                           status 000FD8                   _Configure_GPIOs 38C0  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 467C               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
     __size_of_Port_CheckPairType 006A               __size_of_HMI_SetBar 000A  
                 __initialization 2D08               __size_of_HMI_Render 003E  
             __end_of_Byte_GetBit 4336                      __end_of_main 0CD4  
                    __end_of_itos 26D8              HMI_SetButton@reindex 00BC  
                    SPI_Send9@dat 006E               __end_of_Byte_SetBit 3BA4  
                __end_of_InitList FD73       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 47F6       __size_of_Port_CheckPortType 0048  
                     HMI_Render@a 00C2                            ??_main 01C8  
                          ??_itos 00CA                     __activetblptr 000003  
               Port_SetPin@pInput 00C9                 __end_of_LCD_Reset 3E64  
               Port_SetPin@pValue 00CC                         ??_LED_Set 00CF  
               _MXK_InitDIPSwitch 4622                 GetPortPORT@pInput 00BC  
          Port_CheckPairType@Pin1 00E4            Port_CheckPairType@Pin2 00E5  
               __end_of_LCD_Write 45E6                       _GetPortPORT 3056  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 2F0A  
                 ??_LCD_DrawField 00D6        __end_of_PortProperty_Valid 3604  
                __end_of_Port_Set 07D8                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0064               __end_of_Button_Init 2882  
             __end_of_Button_Poll 204C                 Word_GetPair@pPair 00C8  
         LCD_FillRectangle@pPoint 00C5                 __end_of_HMI_SetUp 47A2  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 3366  
                       ??_SPI_DCS 00BC                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 450A  
          Port_SetQuadType@Output 00F4                            _ANCON0 000FC1  
                ___awdiv@dividend 00BA                            ?_putch 0001  
                ??_Console_Render 00DD                     ToSegment@pCHR 00BA  
           _Console_SetForecolour 4866                  _Console_FormFeed 33F6  
          Port_SetQuadType@pInput 00F0                    __CFG_WDTEN$OFF 000000  
                          i2l1597 144E                    ??_HMI_SetRight 00BA  
                          i2l9941 36C2                            i2l9945 36C8  
          __end_of_LCD_Word_Write 469A                    _Timer0_Restart 483A  
             ??_MXK_InitDIPSwitch 00F5                    i2_MXK_SwitchTo 42CC  
                 Byte_GetBit@pBit 00BC      Console_SetForecolour@pColour 00BA  
                      _Reset_High 4604                Console_Render@temp 00DF  
                  ??_HMI_UpSwitch 00C0                    OutSeg@pSegment 00BD  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00D1  
                __end_of_delay_ms 3A72                      LED_Init@pLED 00E7  
                __end_of_delay_us 3DC4                     ??_Timer0_Init 00CB  
                   ??_Timer2_Init 00CB                     ??_Timer0_Stop 00BA  
                      _Timer0_ISR 4486          __size_of_Console_NewLine 0092  
               Timer2_Init@DIVIDE 00D4                    __CFG_XINST$OFF 000000  
                          _OutSeg 3506          __size_of_HMI_InitButtons 0004  
                      _Motor_Init 26D8       __size_of_Event_HMI_UpButton 0030  
                      _Motor_Move 425C                     ??_Motor_Speed 00D9  
                      _Motor_Step 22F2              _Event_HMI_LeftButton 3D1A  
         __end_of_Event_DIPSwitch 4486    __size_of_Event_HMI_RightButton 0044  
                          ___wmul 4296                   ??_HMI_DIPSwitch 00C0  
                       ??___awdiv 00BE                    __CFG_STVREN$ON 000000  
                          _change 00FF     __end_of_Event_HMI_RightButton 40A8  
                          _lMotor 002C                         ??___lldiv 00C2  
                          _lQueue 0025                        _TestButton 01AC  
            _Event_HMI_DownButton 4336                         ??___lwdiv 00BE  
              __size_of_ToSegment 0284                         ??___lwmod 00C5  
        __end_of_Port_SetQuadType 0F2A          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 0028              __end_of_Console_Init 3506  
               GetPortTRIS@pInput 00BC                __size_of_Reset_Low 001E  
                          clear_0 2D70                            clear_1 2D82  
                          clear_2 2D8E                            clear_3 2D9A  
                          clear_4 2DA6                  ___awdiv@quotient 00C0  
                      Port_Init@i 01C1                 __end_of_MXK_Queue 4820  
      __end_ofHMI_SetButton@F8155 FDAA                            _printf 155A  
       __end_of_MXK_InitDIPSwitch 4640                    HMI_SetButton@v 00C1  
          HMI_SetSegments@pString 00BB                       _Console_Tab 2A16  
             LCD_Word_Write@value 00BF                      __pdataCOMRAM 003F  
              __size_of_Port_Init 0192                     ??_Port_GetPin 00BD  
        Port_CheckPortType@Output 00F3                   ??i2_Port_SetPin 0014  
                    __mediumconst FCC0       __end_ofTimer2_Init@PRESCALE FDAD  
        Port_CheckPortType@pDrive 00F2                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 00F0                     ??_Port_SetPin 00CD  
                       ??_reverse 00BE             Console_MakeField@Fill 0200  
                ?_Port_SetPinType 00E0                            putch@c 00CE  
               Motor_Speed@pMotor 00D5                    ?_HMI_SetNumber 00D0  
                  i2_Word_GetPair 4428           __end_of_Configure_GPIOs 3930  
                ??_MXK_TestButton 00C0            __end_of_Timer0_Restart 4846  
                   Set_Rotation@m 00BF                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 4302                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00D3                   ?_LCD_Word_Write 00BF  
                      __accesstop 0060           __end_of__initialization 2DAC  
                       ?_LCD_Fill 00C3                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00EC                       _Byte_GetBit 4302  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 4852  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00C2  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
                     _Byte_SetBit 3B40                     __end_of_MASKS FDA6  
                  _PortA_Property FF8D                         LCD_Fill@i 00C5  
                       LCD_Fill@j 00C6                         LCD_Init@i 00F1  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FF8F               __size_ofi2_delay_us 0040  
                    __pidataBANK0 4880                      __pidataBANK1 4870  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 467C                   Console_Render@x 00E4  
                 Console_Render@y 00E5               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD83  
            __end_of_Byte_GetZone 323C       Event_HMI_RightButton@pState 00D3  
                  _PortC_Property FF91               __end_of_Timer0_Init 21A0  
                   __end_of_putch 4804                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 22F2               __end_of_Timer0_Stop 488E  
                       ?_SPI_Init 00E7                         ?_SPI_Send 00BA  
                     _Button_Init 27AE                 Port_SetType@pType 00F6  
                     _Button_Poll 1EE6              __end_of_Byte_SetByte 4812  
            __end_of_Byte_SetPair 45A2                    _HMI_LeftSwitch 4746  
                  _PortD_Property FF93              __end_of_Byte_SetQuad 45C4  
                    ??_LED_Toggle 00D2                      ??_HMI_GetBar 00BA  
            __end_of_Byte_SetZone 2D08               __end_of_Motor_Speed 450A  
                  _HMI_DownSwitch 46FE                     SPI_Send@pData 00BC  
           __end_of_MXK_DIPSwitch 46E6                      ??_HMI_SetBar 00BA  
                    ??_HMI_Render 00C2                    _PortE_Property FF95  
        __size_of_HMI_SetSegments 00EC            __end_ofi2_Word_GetPair 4458  
                  _PortF_Property FF97           Port_CheckQuadType@Pair1 00ED  
         Port_CheckQuadType@Pair2 00EE          MXK_BlockSwitchTo@pModule 00C1  
          ?_Console_SetForecolour 00BA                 _Console_Backspace 3E64  
                 ?_Timer0_Restart 0001                           ??_putch 00CE  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 41E4  
               __end_of_ToSegment 0A5C                    _PortG_Property FF99  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 401E  
         Port_CheckQuadType@pQuad 00EB                   reverse@iterator 00BF  
                ??_SPI_DisableISR 00BC                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 4604  
       __size_of_Event_TestButton 003C           __size_of_Port_TogglePin 0030  
                      ??_LCD_Fill 00C5                        ??_LCD_Init 00EF  
             __end_of_Port_SetPin 2A16            __end_of_PortA_Property FF8F  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 00BA  
                      ??_LED_Init 00E7                Byte_SetByte@pValue 00BC  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
                   ?_Timer0_Clear 0001                        ??_HMI_Init 00F5  
                      ??_HMI_Poll 00DE                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00E7            __end_of_PortB_Property FF91  
                   ?_Timer0_Start 00BA                 __end_of_Port_Init 1A6E  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00E2  
              __end_of_LED_Toggle 3FD8                __end_of_HMI_GetBar 4894  
        LCD_FillRectangle@pColour 00C3               ??_Console_Backspace 00BC  
               Set_Addr_Window@xe 00C0                 Set_Addr_Window@ye 00C1  
               Set_Addr_Window@xs 00C2                 Set_Addr_Window@ys 00BF  
                         ?_OutSeg 00BD                       ?_Motor_Init 00E7  
              Byte_SetPair@pInput 00C5                       ?_Motor_Move 00BD  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00C8  
              __end_of_HMI_SetBar 4866            __end_of_PortC_Property FF93  
              Word_GetPair@pInput 00C6                __end_of_HMI_Render 41A6  
                  ??_Set_Rotation 00BF                         ?_Port_Set 00C9  
                         ?___wmul 00BA                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 00BF      __size_of_Console_ResetCursor 001A  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 475E  
          __end_of_PortD_Property FF95                           _ADC_AN0 00A3  
                         _ADC_AN1 00A8                           _ADC_AN2 00AD  
                         _ADC_AN3 01B6        Event_HMI_DownButton@pState 00D3  
                      ??_MXK_Init 00F9                 Port_GetPin@pInput 00BA  
               _Console_MakeField 2882                 ??_Console_NewLine 00BA  
          __end_of_HMI_DownSwitch 4716                        ??_SPI_Init 00ED  
          Event_TestButton@pState 00D3                        ??_SPI_Send 00BD  
            __end_of_HMI_SetRight 47B8                           ?_printf 00CF  
               ??_HMI_InitButtons 00BA        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF97               Console_Render@F7900 01D3  
              ?_Console_MakeField 00BF                           _COUNTER 002A  
                         i2l10411 40EC                           i2l10413 40FC  
                         i2l10405 4446                           i2l10419 4118  
                         i2l11341 247A                           i2l11343 2490  
                         i2l11347 24B2                           i2l11349 24C6  
                         i2l11365 2502                           i2l11359 24F8  
                 ??_HMI_SetButton 00BA                           i2l10941 2E9E  
                         i2l10951 2EEE                           i2l10961 42DE  
                         i2l10945 2EC8                           i2l10937 2E78  
                         i2l10969 42FE              __end_of_HMI_UpSwitch 472E  
                         _LED_Set 3DC4           _Console_IncrementCursor 3ADC  
          __end_of_PortF_Property FF99                       _gBackcolour 0070  
                 ??_HMI_SetNumber 00D2                         _I2C1_Done 011E  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0124  
                       _I2C1_More 0121                         _I2C2_More 0127  
                       ?_delay_ms 00BA         __end_of_Console_Backspace 3EB2  
                       ?_delay_us 00BA        __end_of_MXK_InitTestButton 465E  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF9B  
             ??_Console_MakeField 00C1                           _SPI_DCS 43F8  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
            i2Byte_GetZone@Offset 0008                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 00BA  
               Event_TestButton@j 0078                        ??_Mode_Set 00BA  
                  ??_Timer2_Clear 00BA                           _Font5x7 FDAD  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 00BD              SPI_DisableISR@pInput 00BA  
                   ?_Port_GetQuad 00BA                   Byte_SetBit@pBit 00BC  
            Port_TogglePin@pInput 00CE             __end_ofi2_Byte_SetBit 3EFE  
          ??_Event_HMI_LeftButton 00D3                           __Hparam 0000  
               Port_GetQuad@pQuad 00BC                       _Timer0_Init 204C  
                     _Timer2_Init 21A0                           __Lparam 0000  
                     _Timer0_Stop 4888             __size_of_Console_Init 0086  
                         OutSeg@a 002E            ??_Event_HMI_DownButton 00D3  
 __end_ofPortProperty_Valid@F7774 FD83                     LCD_Write@mode 00BD  
                 __size_of_OutSeg 0082                        ??_Port_Set 00CC  
       __end_of_Console_MakeField 2952                 _Console_PrintChar 1A6E  
                     _Motor_Speed 44E0                     ?_Port_SetType 00F4  
                         _gCursor 003F                           ___awdiv 2AD8  
           ??_Console_ClearCursor 00BA                           _lBuffer 0246  
                         ___lldiv 2B96                   __size_of___wmul 0036  
                         ___lwdiv 3604                           ___lwmod 3C06  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 3480  
              ?_Console_PrintChar 0001                           __pcinit 2D08  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                         __ptext0 0A5C                           __ptext1 155A  
                         __ptext2 47F6                           __ptext3 1A6E  
                         __ptext4 2A16                           __ptext5 2AD8  
                         __ptext6 3ADC                           __ptext7 32D4  
                         __ptext8 33F6                           __ptext9 469A  
                 __size_of_printf 01C2                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD93  
                       _T2CONbits 000FCA                     LED_Set@pValue 00CE  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 00D3  
                    ?_GetPortPORT 00BA                      ?_GetPortTRIS 00BA  
             ??_Console_PrintChar 00CA                       _Port_GetPin 3FD8  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 00B2  
             LCD_DrawRectangle@p4 00B6                      ??i2_delay_us 0003  
                      ??_delay_ms 00BC                        ??_delay_us 00BC  
                         _reverse 3930                         _DIPSwitch 017A  
             __size_of_Timer0_ISR 002E                       _Port_SetPin 2952  
                  LCD_DrawField@i 00DC                         _LCD_Reset 3E14  
             __size_of_Motor_Init 00D6               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0124                         _LCD_Write 45C4  
            __size_of_MXK_Dequeue 0030                        delay_ms@ms 00BA  
            end_of_initialization 2DAC                        delay_us@us 00BA  
               ??_HMI_SetSegments 00BD           Console_PrintChar@pInput 00CD  
                       _HMI_SetUp 478C                      _Console_Init 3480  
                 HMI_SetUp@pValue 00BA              __size_of_MXK_Release 0016  
      __end_of_Port_CheckPairType 3ADC                           itos@Out 00CE  
                  ??_Port_GetQuad 00BD                _PortProperty_Valid 3588  
              Byte_SetQuad@pInput 00C5                SPI_MinSpeed@pInput 00C9  
              Byte_SetQuad@pValue 00C8             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 00BE             __size_of_Byte_GetZone 009C  
               ??_HMI_RightSwitch 00C0                   ___lldiv@counter 00C6  
       __end_of_Console_PrintChar 1BFA                    ??_Port_SetType 00F7  
      __end_of_Port_CheckQuadType 3CC2                           printf@c 00E0  
                         printf@f 00CF                    Port_Init@pPort 01BE  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 00C3                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00C9  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 3F90  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 412A  
              Button_Init@pInitIO 01BF             Timer0_Init@pFrequency 00C7  
             _Event_HMI_DIPSwitch 44B4                 ?_Port_SetQuadType 00F0  
                     _gForecolour 00FD         ??_Console_IncrementCursor 00BE  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 00F4                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 00C0             Console_Render@lCursor 00E0  
                       _MXK_Queue 4812                  __CFG_CPUDIV$OSC1 000000  
                Byte_GetZone@pMax 00BC        __size_of_Console_Backspace 004E  
                 _Set_Addr_Window 2DB6                    SPI_Init@pClock 00E7  
                ??_LCD_Word_Write 00C1             __end_of_LCD_DrawField 31A0  
                  Port_Set@pInput 00C9                    SPI_Init@pInput 00ED  
            ??_PortProperty_Valid 00CD                    Port_Set@pValue 00CB  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 32D4  
                      ?_LCD_Write 00BD                      _Byte_GetPair 465E  
              HMI_SetButton@F8155 FDA6                      _Byte_GetZone 31A0  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00DA  
               LCD_DrawField@ymax 00DB              ?_Event_HMI_DIPSwitch 0001  
                  _Port_TogglePin 43C8                        ?_HMI_SetUp 0001  
                _Event_TestButton 4220              Port_SetPinType@Props 00E5  
                    ?_Byte_GetBit 00BA           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 4804                      _Byte_SetPair 4580  
                    _Byte_SetQuad 45A2           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2C52              Port_SetPinType@pType 00E3  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00BA  
      __end_of_Event_HMI_UpButton 43C8                     ?_SPI_MaxSpeed 00C9  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00C9  
           __end_ofi2_Timer0_Stop 489A                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0072  
                   ?i2_Motor_Step 0001             __size_of_HMI_SetRight 0016  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 3588  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 42CC  
           __end_of_HMI_DIPSwitch 46FE                     __pidataCOMRAM 4852  
           _Event_HMI_RightButton 4064                      ?_Button_Init 01BB  
                    ?_Button_Poll 00D5                         _Bus_State 0044  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
            __end_of_Timer0_Clear 483A                 __size_of_MXK_Init 017A  
            __end_of_Timer2_Clear 4880                    __end_of_printf 171C  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 00C6                  ??_Timer0_Restart 00BA  
            __end_of_Timer0_Start 4580           ??_Console_SetForecolour 00BC  
              Port_SetType@Output 01BB               start_initialization 2D08  
                      ?_MXK_Queue 00BA          PortProperty_Valid@Errors 00CF  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 37DA  
              Port_SetType@pInput 00F4                        HMI_Init@in 00F5  
             HMI_SetNumber@pInput 00D0             __end_ofi2_Port_SetPin 2F0A  
          __end_of_Port_TogglePin 43F8                     ?_Word_SetPair 00C9  
               Byte_SetBit@pInput 00BA                    ??_MXK_SwitchTo 00C0  
               Byte_SetBit@pValue 00BD                ?_LCD_FillRectangle 00C3  
           ??_Event_HMI_DIPSwitch 00D3               _Console_ResetCursor 469A  
     PortProperty_Valid@pPinDrive 00CB              MXK_BlockSwitchTo@CUR 00C0  
        PortProperty_Valid@pInput 00C9                     i2_MXK_Release 489A  
          LCD_FillRectangle@pSize 00C9                    SPI_Send@pInput 00BA  
                    _HMI_SetRight 47A2                      ??_Reset_High 00CE  
        __size_of_Port_SetPinType 01C0                     ??_HMI_SetLeft 00BA  
                   ??_HMI_SetDown 00BA                    ??_SPI_MaxSpeed 00CB  
           Port_SetQuadType@pQuad 00F2                         _ToSegment 07D8  
             ??_LCD_FillRectangle 00CD             Port_SetQuadType@pType 00F3  
                 _Console_NewLine 32D4                    ??_SPI_MinSpeed 00CB  
                    _HMI_UpSwitch 4716                         _Reset_Low 45E6  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 48A0  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 018C  
                       _gCharSize 00F9                  Timer2_Init@INDEX 0032  
                       OutSeg@cur 002F                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00EB                          ??_OutSeg 00BE  
                       OutSeg@out 00C1           __size_of_Console_Render 020C  
                    ??_Motor_Move 00C1                      ??_Motor_Step 00CE  
              Byte_SetZone@Offset 00C3                          ??___wmul 00BE  
            ?_Console_ResetCursor 0001                         _Port_Init 18DC  
                     __pdataBANK0 00F9                       __pdataBANK1 01D3  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 00BD  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 00BA  
              Byte_SetZone@pValue 00BF                     Mode_Set@pMode 00BA  
                        ??_printf 00D9           __end_of_Set_Addr_Window 2E60  
        Port_CheckQuadType@Output 00EF                         _gLineSize 01D7  
        Port_CheckQuadType@pDrive 00EC                    ??_Word_GetPair 00C9  
        Port_CheckQuadType@pInput 00E9              __end_of_Port_GetQuad 3F48  
       __end_of_LCD_FillRectangle 384E                       __pbssBIGRAM 0246  
                        ?_LED_Set 00CE                       __pbssCOMRAM 0025  
              __end_of_Reset_High 4622                     __pcstackBANK0 00BA  
                   __pcstackBANK1 01BB                        itos@Length 00CC  
                  ??_Word_SetPair 00CD                __end_of_Timer0_ISR 44B4  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 00D3  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 1154  
                        ?_SPI_DCS 00BA                   ?_Port_TogglePin 00CE  
                     ??_LCD_Write 00BE                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 27AE  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 4296  
              __end_of_Motor_Step 2416             Timer2_Init@pFrequency 00C7  
                  ?i2_MXK_Release 0001                       ??_HMI_SetUp 00BA  
        Port_CheckPairType@Output 00E6                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00E3          Port_CheckPairType@pInput 00E0  
                  reverse@tempVar 00BE                _MXK_InitTestButton 4640  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00C7  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 00C7  
                ??_HMI_LeftSwitch 00C0                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00BA                     _lStepFunction 006B  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 00C7  
                ??_HMI_DownSwitch 00C0                         __pintcode 1408  
                   __pmediumconst FCC0                      ?_Motor_Speed 00D5  
           ??_Console_ResetCursor 00BA                          ?___awdiv 00BA  
                       __ptext100 4580                         __ptext101 3C68  
                       __ptext110 1154                         __ptext102 3A72  
                       __ptext111 37DA                         __ptext103 3588  
                       __ptext120 4302                         __ptext112 30FC  
                       __ptext104 41A6                         __ptext121 3480  
                       __ptext113 4296                         __ptext105 465E  
                       __ptext130 367C                         __ptext114 2DB6  
                       __ptext106 31A0                         __ptext131 3EB2  
                       __ptext123 4486                         __ptext115 467C  
                       __ptext107 45A2                         __ptext132 42CC  
                       __ptext124 2416                         __ptext116 45C4  
                       __ptext108 2C52                         __ptext133 40EA  
                       __ptext125 4894                         __ptext117 399C  
                       __ptext109 4866                         __ptext134 489A  
                       __ptext126 4846                         __ptext118 47E4  
                       __ptext135 4820                         __ptext127 2E60  
                       __ptext119 2882                         __ptext136 0000  
                       __ptext128 4428                         __ptext129 46B4  
                       _pShiftVal 0074               __end_of_HMI_SetLeft 47CE  
             __end_of_HMI_SetDown 47E4                          ?___lldiv 00BA  
                      ?_Port_Init 01BC              Timer0_Init@pCPUClock 00CD  
                        ?___lwdiv 00BA                          ?___lwmod 00C1  
          ?_Event_HMI_RightButton 0001               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 2FB0  
     __end_ofTimer0_Init@PRESCALE FD93                ??_Console_FormFeed 00BA  
                 _HMI_SetSegments 2514                ?_GetPortProperties 00BA  
              HMI_SetRight@pValue 00BA          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00BD                      ?_Port_GetPin 00BA  
               HMI_SetLeft@pValue 00BA             __end_of_HMI_SetButton 33F6  
            __size_of_Console_Tab 00C2                          ?_reverse 00BA  
                    ?_Port_SetPin 00C9             __end_of_HMI_SetNumber 4534  
                ___lwdiv@quotient 00BF                   _HMI_RightSwitch 472E  
               HMI_SetDown@pValue 00BA               ??_GetPortProperties 00BC  
         __end_of_Console_NewLine 3366              ??_MXK_InitTestButton 00E7  
              Byte_GetPair@pInput 00C3                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 48A4                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 46B4  
                        _LCD_Fill 3CC2                          _LCD_Init 1D74  
                  ___wmul@product 00BE                          _HMIBoard 012A  
                  i2_Byte_GetZone 367C                          _LED_Init 3BA4  
                       delay_ms@u 00BC                Button_Poll@pButton 00D5  
                       delay_us@u 00BC                          _HMI_Init 1360  
                        _HMI_Poll 384E                MXK_Queue@pCallback 00BA  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
                        _IPR3bits 000FA5                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 4220          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00C7  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        i2u702_44 3EC6                          i2u702_45 3EC2  
                        i2u703_44 3EEC                          i2u703_45 3EE8  
                        i2u650_40 36E6                          i2u650_45 36E2  
                        i2u648_40 369E                          i2u648_47 3694  
                        i2u780_40 2458                          i2u923_48 449E  
                        i2u781_40 246C                          i2u782_40 24A4  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
   __size_of_Event_HMI_LeftButton 0058                  HMI_SetBar@pValue 00BA  
               Button_Init@pInput 01BB           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00E4  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 0082  
   __size_of_Event_HMI_DownButton 0032             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 3056  
                        _SSP2STAT 000F6D                      _Set_Rotation 323C  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 40EA  
              _Port_CheckPairType 3A72                          _MXK_Init 1BFA  
           __size_of_Timer0_Start 0024                   MXK_SwitchTo@CUR 00C0  
                        _SPI_Init 0000          __end_of_Event_TestButton 425C  
                        _SPI_Send 399C                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00BF  
               ___wmul@multiplier 00BA                 Byte_GetBit@Output 00BE  
                      printf@flag 00DB              Timer2_Init@pCPUClock 00D0  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 3766                        printf@prec 00DA  
           Motor_Speed@pFrequency 00D7                 Byte_GetBit@pInput 00BA  
             Port_SetPinType@pPin 00E2              __size_of_Button_Poll 0166  
                       main@index 01CC                _Port_CheckQuadType 3C68  
                   _MXK_DIPSwitch 46CE               ?_Port_CheckPairType 00E0  
            __end_of_SPI_MinSpeed 37DA                     ??_MXK_Dequeue 00D0  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 3F48             Button_Poll@pIncrement 00D7  
         PortProperty_Valid@F7774 FD73              __end_ofi2_Motor_Step 2514  
                 ??i2_MXK_Release 0001                         copy_data0 2D1C  
                       copy_data1 2D3C                         copy_data2 2D5C  
                   ??_MXK_Release 00BA            __end_ofi2_Byte_GetPair 46CE  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00E9            __end_ofi2_Byte_GetZone 36F2  
             __end_ofi2_MXK_Queue 482E               ?_Port_CheckPortType 00F0  
                 itos@destination 00C8                          _InitList FCC1  
            _Motor_Step$intlevel0 22F8                          _Mode_Set 47E4  
              Port_GetQuad@Output 00BF                       ??_ToSegment 00BA  
                    _ISR_Function 1408                      _Timer0_Clear 482E  
                     _HMI_SetLeft 47B8                       _HMI_SetDown 47CE  
              Port_GetQuad@pInput 00BA                      _Timer2_Clear 4878  
            __end_of_Word_GetPair 41E4                          _lCBuffer 0100  
            ??_Port_CheckPairType 00E4                       ??_Reset_Low 00CE  
                        __Hrparam 0000                      _Timer0_Start 455C  
                    OutSeg@pInput 00C0                    _Console_Render 1154  
                        __Lrparam 0000                   Timer2_Init@RDIV 00CC  
      Event_HMI_LeftButton@pState 00D3                    LCD_Write@value 00BE  
                        _Port_Set 041E                      OutSeg@segset 0030  
                       rand@screw 0037              __end_of_Word_SetPair 4064  
                     ??_Port_Init 01BF           __end_of_HMI_SetSegments 2600  
            ??_Port_CheckQuadType 00ED             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 412A                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00F3                  __size_of___lwmod 0062  
                        _lBufferX 0035                          _lBufferY 0036  
             Timer2_Init@PRESCALE FDAA                _Event_HMI_UpButton 4398  
                 LCD_Fill@pColour 00C3                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0072  
         __end_of_HMI_RightSwitch 4746            Byte_GetZone@pChunkSize 00BE  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00BE  
           __size_of_Port_SetType 022A                     reverse@length 00BC  
                       itos@input 00C6             i2MXK_SwitchTo@pModule 0008  
              Motor_Init@pAddress 00E9                          _delay_ms 3A08  
                        _delay_us 3D72                          _clearall 007A  
                 ___lwdiv@divisor 00BC    __size_of_Console_SetForecolour 000A  
             ?_Event_HMI_UpButton 0001                   ___lwdiv@counter 00BE  
   __end_of_Console_SetForecolour 4870                   Port_GetPin@pPin 00BC  
                        __ptext10 3E64                          __ptext11 41E4  
                        __ptext20 0F2A                          __ptext12 44E0  
                        __ptext21 3F48                          __ptext13 425C  
                        __ptext30 22F2                          __ptext22 041E  
                        __ptext14 455C                          __ptext31 4888  
                        __ptext23 4804                          __ptext15 26D8  
                        __ptext40 3CC2                          __ptext32 483A  
                        __ptext24 2F0A                          __ptext16 204C  
                        __ptext41 38C0                          __ptext33 40A8  
                        __ptext25 2FB0                          __ptext17 482E  
                        __ptext50 1EE6                          __ptext42 36F2  
                        __ptext34 4776                          __ptext26 3056  
                        __ptext18 1BFA                          __ptext51 46CE  
                        __ptext43 3E14                          __ptext35 4812  
                        __ptext27 3BA4                          __ptext19 18DC  
                        __ptext60 4336                          __ptext52 46E6  
                        __ptext44 3A08                          __ptext36 412A  
                        __ptext28 3DC4                          __ptext61 4398  
                        __ptext53 46FE                          __ptext45 45E6  
                        __ptext37 3D72                          __ptext29 4368  
                        __ptext70 450A                          __ptext62 4064  
                        __ptext54 4716                          __ptext46 4604  
                        __ptext38 1D74                          __ptext71 2600  
                        __ptext63 3D1A                          __ptext55 472E  
                        __ptext47 4168                          __ptext39 323C  
             ??_MXK_BlockSwitchTo 00C0                          __ptext80 2952  
                        __ptext72 3930                          __ptext64 44B4  
                        __ptext56 4746                          __ptext48 3506  
                        __ptext81 3FD8                          __ptext73 3C06  
                        __ptext65 4220                          __ptext57 475E  
                        __ptext49 384E                          __ptext90 4534  
                        __ptext82 485C                          __ptext74 3604  
                        __ptext66 3366                          __ptext58 3EFE  
                        __ptext91 43F8                          __ptext83 488E  
                        __ptext75 2514                          __ptext67 478C  
                        __ptext59 4458                          __ptext92 27AE  
                        __ptext84 1360                          __ptext76 07D8  
                        __ptext68 47A2                          __ptext93 4622  
                        __ptext85 3766                          __ptext77 47CE  
                        __ptext69 47B8                          __ptext94 48A0  
                        __ptext86 0000                          __ptext78 3F90  
                        __ptext95 4640                          __ptext87 21A0  
                        __ptext79 43C8                          __ptext96 171C  
                        __ptext88 2B96                          __ptext97 3B40  
                        __ptext89 4878                          __ptext98 0CD4  
                        __ptext99 401E                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00D3                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 4398                 HMI_SetSegments@in 00BE  
           Button_Init@pThreshold 01BD                     __size_of_main 0278  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00C5  
          __end_of_Console_Render 1360               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 3EFE  
             __end_of_MXK_Release 478C                    _MXK_TestButton 475E  
                   i2_Byte_SetBit 3EB2              ??_Event_HMI_UpButton 00D3  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 4168  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0154  
            __size_of_Timer2_Init 0152                          int$flags 0049  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0F2A  
                    Port_Set@Type 00E0        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00EF  
                       printf@val 00DE                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0060  
                  Timer0_Init@PRE 0031                      _SSP2STATbits 000F6D  
                      _LED_Toggle 3F90                        _HMI_GetBar 488E  
            Button_Init@pGetState 01C2            PortProperty_Valid@Pair 00DF  
                ??_Port_TogglePin 00D1                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2       __end_of_Event_HMI_DIPSwitch 44E0  
          PortProperty_Valid@pPin 00CC                        _HMI_SetBar 485C  
                      _HMI_Render 4168                  Byte_SetZone@MASK 00C4  
                     i2_MXK_Queue 4820                    Timer2_Init@DIV 0064  
                  Timer2_Init@PRE 0033                  Byte_SetZone@pMax 00BC  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 01C5                          itos@Data 00CA  
              LCD_FillRectangle@i 00CF                LCD_FillRectangle@j 00D0  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 00BA            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 00C1                  ___lldiv@dividend 00BA  
          __end_of_MXK_TestButton 4776                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042           ??_Event_HMI_RightButton 00D3  
                  _SPI_DisableISR 4534                   Port_Init@pInput 01BC  
                        printf@ap 00DC          Event_HMI_UpButton@pState 00D3  
          __size_ofi2_Port_SetPin 00AA                  ?_HMI_SetSegments 00BB  
         Console_MakeField@Column 00C6             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00BA             __size_of_SPI_MinSpeed 0074  
                 ??_MXK_DIPSwitch 00C0            Event_HMI_DIPSwitch@Bar 00D4  
           __size_ofi2_Motor_Step 00FE           Console_MakeField@pInput 00C5  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 00C2  
                   ??_GetPortPORT 00BC                   ___lwmod@divisor 00C3  
                   ??_GetPortTRIS 00BC             Timer0_Start@pFunction 00BA  
              Word_SetPair@pInput 00C9                   ___lwmod@counter 00C5  
              Word_SetPair@pValue 00CC                  Motor_Init@pMotor 00E7  
                     _MXK_Dequeue 4368                    LED_Toggle@pLED 00D2  
                   _LCD_DrawField 30FC                  _Port_SetQuadType 0CD4  
                     _MXK_Release 4776         __size_of_Console_FormFeed 008A  
                    _MXK_SwitchTo 40A8             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 00C1                     ?_Console_Init 0001  
               Word_SetPair@pPair 00CB                   _Port_SetPinType 171C  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 00C2  
              Byte_GetZone@pChunk 00BD                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 46B4                Byte_GetZone@pInput 00BA  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 3B40  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 455C  
                    _SPI_MaxSpeed 36F2                      _SPI_MinSpeed 3766  
              Port_Set@TypeActual 00DE  
