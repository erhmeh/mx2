

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Aug 20 23:37:32 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   128                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   129  0000                     
   130 ;; Function _HMI_LeftSwitch is unused but had its address taken
   131  0000                     
   132 ;; Function _HMI_RightSwitch is unused but had its address taken
   133  0000                     
   134 ;; Function _HMI_UpSwitch is unused but had its address taken
   135  0000                     
   136 ;; Function _HMI_DownSwitch is unused but had its address taken
   137  0000                     
   138 ;; Function _HMI_DIPSwitch is unused but had its address taken
   139  0000                     
   140 ;; Function _MXK_TestButton is unused but had its address taken
   141  0000                     
   142 ;; Function _MXK_DIPSwitch is unused but had its address taken
   143  0000                     
   144 ;; Function _Event_NULL is unused but had its address taken
   145  0000                     
   146 ;; Function _Event_DIPSwitch is unused but had its address taken
   147  0000                     
   148 ;; Function _Event_TestButton is unused but had its address taken
   149  0000                     
   150                           	psect	idataCOMRAM
   151  013E28                     __pidataCOMRAM:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _gCursor
   155  013E28  0006               	dw	6
   156  013E2A  0006               	dw	6
   157                           
   158                           ;initializer for _A
   159  013E2C  41                 	db	65
   160                           
   161                           ;initializer for _Bus_State
   162  013E2D  01                 	db	1
   163                           
   164                           ;initializer for _a
   165  013E2E  61                 	db	97
   166                           
   167                           ;initializer for _l
   168  013E2F  80                 	db	128
   169                           
   170                           ;initializer for _w
   171  013E30  80                 	db	128
   172                           
   173                           ;initializer for _zero
   174  013E31  30                 	db	48
   175                           
   176                           	psect	idataBANK0
   177  013DC8                     __pidataBANK0:
   178                           	opt stack 0
   179                           
   180                           ;initializer for Console_Render@F7900
   181  013DC8  0006               	dw	6
   182  013DCA  0006               	dw	6
   183                           
   184                           ;initializer for _gCharSize
   185  013DCC  0005               	dw	5
   186  013DCE  0007               	dw	7
   187                           
   188                           ;initializer for _gLineSize
   189  013DD0  0080               	dw	128
   190  013DD2  0007               	dw	7
   191                           
   192                           ;initializer for _gForecolour
   193  013DD4  FFFF               	dw	65535
   194                           
   195                           ;initializer for _change
   196  013DD6  01                 	db	1
   197                           
   198                           	psect	mediumconst
   199  00FD02                     __pmediumconst:
   200                           	opt stack 0
   201  00FD02  00                 	db	0
   202  00FD03                     _InitList:
   203                           	opt stack 0
   204  00FD03  1100               	dw	4352
   205  00FD05  0080               	dw	128
   206  00FD07  012C               	dw	300
   207  00FD09  B100               	dw	45312
   208  00FD0B  0002               	dw	2
   209  00FD0D  0035               	dw	53
   210  00FD0F  0036               	dw	54
   211  00FD11  B200               	dw	45568
   212  00FD13  0002               	dw	2
   213  00FD15  0035               	dw	53
   214  00FD17  0036               	dw	54
   215  00FD19  B300               	dw	45824
   216  00FD1B  0002               	dw	2
   217  00FD1D  0035               	dw	53
   218  00FD1F  0036               	dw	54
   219  00FD21  0002               	dw	2
   220  00FD23  0035               	dw	53
   221  00FD25  0036               	dw	54
   222  00FD27  B400               	dw	46080
   223  00FD29  0000               	dw	0
   224  00FD2B  C000               	dw	49152
   225  00FD2D  00A2               	dw	162
   226  00FD2F  0002               	dw	2
   227  00FD31  0084               	dw	132
   228  00FD33  C100               	dw	49408
   229  00FD35  00C5               	dw	197
   230  00FD37  C200               	dw	49664
   231  00FD39  000D               	dw	13
   232  00FD3B  0000               	dw	0
   233  00FD3D  C300               	dw	49920
   234  00FD3F  008D               	dw	141
   235  00FD41  002A               	dw	42
   236  00FD43  C400               	dw	50176
   237  00FD45  008D               	dw	141
   238  00FD47  00EE               	dw	238
   239  00FD49  C500               	dw	50432
   240  00FD4B  000A               	dw	10
   241  00FD4D  3600               	dw	13824
   242  00FD4F  00C8               	dw	200
   243  00FD51  E000               	dw	57344
   244  00FD53  0012               	dw	18
   245  00FD55  001C               	dw	28
   246  00FD57  0010               	dw	16
   247  00FD59  0018               	dw	24
   248  00FD5B  0033               	dw	51
   249  00FD5D  002C               	dw	44
   250  00FD5F  0025               	dw	37
   251  00FD61  0028               	dw	40
   252  00FD63  0028               	dw	40
   253  00FD65  0027               	dw	39
   254  00FD67  002F               	dw	47
   255  00FD69  003C               	dw	60
   256  00FD6B  0000               	dw	0
   257  00FD6D  0003               	dw	3
   258  00FD6F  0003               	dw	3
   259  00FD71  0010               	dw	16
   260  00FD73  0080               	dw	128
   261  00FD75  0078               	dw	120
   262  00FD77  E100               	dw	57600
   263  00FD79  0012               	dw	18
   264  00FD7B  001C               	dw	28
   265  00FD7D  0010               	dw	16
   266  00FD7F  0018               	dw	24
   267  00FD81  002D               	dw	45
   268  00FD83  0028               	dw	40
   269  00FD85  0023               	dw	35
   270  00FD87  0028               	dw	40
   271  00FD89  0028               	dw	40
   272  00FD8B  0026               	dw	38
   273  00FD8D  002F               	dw	47
   274  00FD8F  003B               	dw	59
   275  00FD91  0000               	dw	0
   276  00FD93  0003               	dw	3
   277  00FD95  0003               	dw	3
   278  00FD97  0010               	dw	16
   279  00FD99  3A00               	dw	14848
   280  00FD9B  0005               	dw	5
   281  00FD9D  2A00               	dw	10752
   282  00FD9F  0000               	dw	0
   283  00FDA1  0002               	dw	2
   284  00FDA3  0000               	dw	0
   285  00FDA5  0081               	dw	129
   286  00FDA7  2B00               	dw	11008
   287  00FDA9  0000               	dw	0
   288  00FDAB  0003               	dw	3
   289  00FDAD  0000               	dw	0
   290  00FDAF  00A2               	dw	162
   291  00FDB1  2900               	dw	10496
   292  00FDB3  2C00               	dw	11264
   293  00FDB5                     __end_of_InitList:
   294                           	opt stack 0
   295  00FDB5                     PortProperty_Valid@F7774:
   296                           	opt stack 0
   297  00FDB5  00                 	db	0
   298  00FDB6  01                 	db	1
   299  00FDB7  02                 	db	2
   300  00FDB8  00                 	db	0
   301  00FDB9  01                 	db	1
   302  00FDBA  00                 	db	0
   303  00FDBB  01                 	db	1
   304  00FDBC  00                 	db	0
   305  00FDBD  02                 	db	2
   306  00FDBE  02                 	db	2
   307  00FDBF  00                 	db	0
   308  00FDC0  00                 	db	0
   309  00FDC1  03                 	db	3
   310  00FDC2  03                 	db	3
   311  00FDC3  03                 	db	3
   312  00FDC4  00                 	db	0
   313  00FDC5                     __end_ofPortProperty_Valid@F7774:
   314                           	opt stack 0
   315  00FDC5                     Timer0_Init@PRESCALE:
   316                           	opt stack 0
   317  00FDC5  0002               	dw	2
   318  00FDC7  0004               	dw	4
   319  00FDC9  0008               	dw	8
   320  00FDCB  0010               	dw	16
   321  00FDCD  0020               	dw	32
   322  00FDCF  0040               	dw	64
   323  00FDD1  0080               	dw	128
   324  00FDD3  0100               	dw	256
   325  00FDD5                     __end_ofTimer0_Init@PRESCALE:
   326                           	opt stack 0
   327  00FDD5                     _dpowers:
   328                           	opt stack 0
   329  00FDD5  0001               	dw	1
   330  00FDD7  000A               	dw	10
   331  00FDD9  0064               	dw	100
   332  00FDDB  03E8               	dw	1000
   333  00FDDD  2710               	dw	10000
   334  00FDDF                     __end_of_dpowers:
   335                           	opt stack 0
   336  00FDDF                     _MASKS:
   337                           	opt stack 0
   338  00FDDF  00                 	db	0
   339  00FDE0  01                 	db	1
   340  00FDE1  03                 	db	3
   341  00FDE2  07                 	db	7
   342  00FDE3  0F                 	db	15
   343  00FDE4  1F                 	db	31
   344  00FDE5  3F                 	db	63
   345  00FDE6  7F                 	db	127
   346  00FDE7  FF                 	db	255
   347  00FDE8                     __end_of_MASKS:
   348                           	opt stack 0
   349  00FDE8                     HMI_SetButton@F8157:
   350                           	opt stack 0
   351  00FDE8  00                 	db	0
   352  00FDE9  02                 	db	2
   353  00FDEA  01                 	db	1
   354  00FDEB  03                 	db	3
   355  00FDEC                     __end_ofHMI_SetButton@F8157:
   356                           	opt stack 0
   357  00FDEC                     Timer2_Init@PRESCALE:
   358                           	opt stack 0
   359  00FDEC  01                 	db	1
   360  00FDED  04                 	db	4
   361  00FDEE  10                 	db	16
   362  00FDEF                     __end_ofTimer2_Init@PRESCALE:
   363                           	opt stack 0
   364  00FDEF                     _Font5x7:
   365                           	opt stack 0
   366  00FDEF  00                 	db	0
   367  00FDF0  00                 	db	0
   368  00FDF1  00                 	db	0
   369  00FDF2  00                 	db	0
   370  00FDF3  00                 	db	0
   371  00FDF4  00                 	db	0
   372  00FDF5  00                 	db	0
   373  00FDF6  5F                 	db	95
   374  00FDF7  00                 	db	0
   375  00FDF8  00                 	db	0
   376  00FDF9  00                 	db	0
   377  00FDFA  07                 	db	7
   378  00FDFB  00                 	db	0
   379  00FDFC  07                 	db	7
   380  00FDFD  00                 	db	0
   381  00FDFE  14                 	db	20
   382  00FDFF  7F                 	db	127
   383  00FE00  14                 	db	20
   384  00FE01  7F                 	db	127
   385  00FE02  14                 	db	20
   386  00FE03  24                 	db	36
   387  00FE04  2A                 	db	42
   388  00FE05  7F                 	db	127
   389  00FE06  2A                 	db	42
   390  00FE07  12                 	db	18
   391  00FE08  23                 	db	35
   392  00FE09  13                 	db	19
   393  00FE0A  08                 	db	8
   394  00FE0B  64                 	db	100
   395  00FE0C  62                 	db	98
   396  00FE0D  36                 	db	54
   397  00FE0E  49                 	db	73
   398  00FE0F  55                 	db	85
   399  00FE10  22                 	db	34
   400  00FE11  50                 	db	80
   401  00FE12  00                 	db	0
   402  00FE13  05                 	db	5
   403  00FE14  03                 	db	3
   404  00FE15  00                 	db	0
   405  00FE16  00                 	db	0
   406  00FE17  00                 	db	0
   407  00FE18  1C                 	db	28
   408  00FE19  22                 	db	34
   409  00FE1A  41                 	db	65
   410  00FE1B  00                 	db	0
   411  00FE1C  00                 	db	0
   412  00FE1D  41                 	db	65
   413  00FE1E  22                 	db	34
   414  00FE1F  1C                 	db	28
   415  00FE20  00                 	db	0
   416  00FE21  08                 	db	8
   417  00FE22  2A                 	db	42
   418  00FE23  1C                 	db	28
   419  00FE24  2A                 	db	42
   420  00FE25  08                 	db	8
   421  00FE26  08                 	db	8
   422  00FE27  08                 	db	8
   423  00FE28  3E                 	db	62
   424  00FE29  08                 	db	8
   425  00FE2A  08                 	db	8
   426  00FE2B  00                 	db	0
   427  00FE2C  50                 	db	80
   428  00FE2D  30                 	db	48
   429  00FE2E  00                 	db	0
   430  00FE2F  00                 	db	0
   431  00FE30  08                 	db	8
   432  00FE31  08                 	db	8
   433  00FE32  08                 	db	8
   434  00FE33  08                 	db	8
   435  00FE34  08                 	db	8
   436  00FE35  00                 	db	0
   437  00FE36  60                 	db	96
   438  00FE37  60                 	db	96
   439  00FE38  00                 	db	0
   440  00FE39  00                 	db	0
   441  00FE3A  20                 	db	32
   442  00FE3B  10                 	db	16
   443  00FE3C  08                 	db	8
   444  00FE3D  04                 	db	4
   445  00FE3E  02                 	db	2
   446  00FE3F  3E                 	db	62
   447  00FE40  51                 	db	81
   448  00FE41  49                 	db	73
   449  00FE42  45                 	db	69
   450  00FE43  3E                 	db	62
   451  00FE44  00                 	db	0
   452  00FE45  42                 	db	66
   453  00FE46  7F                 	db	127
   454  00FE47  40                 	db	64
   455  00FE48  00                 	db	0
   456  00FE49  42                 	db	66
   457  00FE4A  61                 	db	97
   458  00FE4B  51                 	db	81
   459  00FE4C  49                 	db	73
   460  00FE4D  46                 	db	70
   461  00FE4E  21                 	db	33
   462  00FE4F  41                 	db	65
   463  00FE50  45                 	db	69
   464  00FE51  4B                 	db	75
   465  00FE52  31                 	db	49
   466  00FE53  18                 	db	24
   467  00FE54  14                 	db	20
   468  00FE55  12                 	db	18
   469  00FE56  7F                 	db	127
   470  00FE57  10                 	db	16
   471  00FE58  27                 	db	39
   472  00FE59  45                 	db	69
   473  00FE5A  45                 	db	69
   474  00FE5B  45                 	db	69
   475  00FE5C  39                 	db	57
   476  00FE5D  3C                 	db	60
   477  00FE5E  4A                 	db	74
   478  00FE5F  49                 	db	73
   479  00FE60  49                 	db	73
   480  00FE61  30                 	db	48
   481  00FE62  01                 	db	1
   482  00FE63  71                 	db	113
   483  00FE64  09                 	db	9
   484  00FE65  05                 	db	5
   485  00FE66  03                 	db	3
   486  00FE67  36                 	db	54
   487  00FE68  49                 	db	73
   488  00FE69  49                 	db	73
   489  00FE6A  49                 	db	73
   490  00FE6B  36                 	db	54
   491  00FE6C  06                 	db	6
   492  00FE6D  49                 	db	73
   493  00FE6E  49                 	db	73
   494  00FE6F  29                 	db	41
   495  00FE70  1E                 	db	30
   496  00FE71  00                 	db	0
   497  00FE72  36                 	db	54
   498  00FE73  36                 	db	54
   499  00FE74  00                 	db	0
   500  00FE75  00                 	db	0
   501  00FE76  00                 	db	0
   502  00FE77  56                 	db	86
   503  00FE78  36                 	db	54
   504  00FE79  00                 	db	0
   505  00FE7A  00                 	db	0
   506  00FE7B  00                 	db	0
   507  00FE7C  08                 	db	8
   508  00FE7D  14                 	db	20
   509  00FE7E  22                 	db	34
   510  00FE7F  41                 	db	65
   511  00FE80  14                 	db	20
   512  00FE81  14                 	db	20
   513  00FE82  14                 	db	20
   514  00FE83  14                 	db	20
   515  00FE84  14                 	db	20
   516  00FE85  41                 	db	65
   517  00FE86  22                 	db	34
   518  00FE87  14                 	db	20
   519  00FE88  08                 	db	8
   520  00FE89  00                 	db	0
   521  00FE8A  02                 	db	2
   522  00FE8B  01                 	db	1
   523  00FE8C  51                 	db	81
   524  00FE8D  09                 	db	9
   525  00FE8E  06                 	db	6
   526  00FE8F  32                 	db	50
   527  00FE90  49                 	db	73
   528  00FE91  79                 	db	121
   529  00FE92  41                 	db	65
   530  00FE93  3E                 	db	62
   531  00FE94  7E                 	db	126
   532  00FE95  11                 	db	17
   533  00FE96  11                 	db	17
   534  00FE97  11                 	db	17
   535  00FE98  7E                 	db	126
   536  00FE99  7F                 	db	127
   537  00FE9A  49                 	db	73
   538  00FE9B  49                 	db	73
   539  00FE9C  49                 	db	73
   540  00FE9D  36                 	db	54
   541  00FE9E  3E                 	db	62
   542  00FE9F  41                 	db	65
   543  00FEA0  41                 	db	65
   544  00FEA1  41                 	db	65
   545  00FEA2  22                 	db	34
   546  00FEA3  7F                 	db	127
   547  00FEA4  41                 	db	65
   548  00FEA5  41                 	db	65
   549  00FEA6  22                 	db	34
   550  00FEA7  1C                 	db	28
   551  00FEA8  7F                 	db	127
   552  00FEA9  49                 	db	73
   553  00FEAA  49                 	db	73
   554  00FEAB  49                 	db	73
   555  00FEAC  41                 	db	65
   556  00FEAD  7F                 	db	127
   557  00FEAE  09                 	db	9
   558  00FEAF  09                 	db	9
   559  00FEB0  01                 	db	1
   560  00FEB1  01                 	db	1
   561  00FEB2  3E                 	db	62
   562  00FEB3  41                 	db	65
   563  00FEB4  41                 	db	65
   564  00FEB5  51                 	db	81
   565  00FEB6  32                 	db	50
   566  00FEB7  7F                 	db	127
   567  00FEB8  08                 	db	8
   568  00FEB9  08                 	db	8
   569  00FEBA  08                 	db	8
   570  00FEBB  7F                 	db	127
   571  00FEBC  00                 	db	0
   572  00FEBD  41                 	db	65
   573  00FEBE  7F                 	db	127
   574  00FEBF  41                 	db	65
   575  00FEC0  00                 	db	0
   576  00FEC1  20                 	db	32
   577  00FEC2  40                 	db	64
   578  00FEC3  41                 	db	65
   579  00FEC4  3F                 	db	63
   580  00FEC5  01                 	db	1
   581  00FEC6  7F                 	db	127
   582  00FEC7  08                 	db	8
   583  00FEC8  14                 	db	20
   584  00FEC9  22                 	db	34
   585  00FECA  41                 	db	65
   586  00FECB  7F                 	db	127
   587  00FECC  40                 	db	64
   588  00FECD  40                 	db	64
   589  00FECE  40                 	db	64
   590  00FECF  40                 	db	64
   591  00FED0  7F                 	db	127
   592  00FED1  02                 	db	2
   593  00FED2  04                 	db	4
   594  00FED3  02                 	db	2
   595  00FED4  7F                 	db	127
   596  00FED5  7F                 	db	127
   597  00FED6  04                 	db	4
   598  00FED7  08                 	db	8
   599  00FED8  10                 	db	16
   600  00FED9  7F                 	db	127
   601  00FEDA  3E                 	db	62
   602  00FEDB  41                 	db	65
   603  00FEDC  41                 	db	65
   604  00FEDD  41                 	db	65
   605  00FEDE  3E                 	db	62
   606  00FEDF  7F                 	db	127
   607  00FEE0  09                 	db	9
   608  00FEE1  09                 	db	9
   609  00FEE2  09                 	db	9
   610  00FEE3  06                 	db	6
   611  00FEE4  3E                 	db	62
   612  00FEE5  41                 	db	65
   613  00FEE6  51                 	db	81
   614  00FEE7  21                 	db	33
   615  00FEE8  5E                 	db	94
   616  00FEE9  7F                 	db	127
   617  00FEEA  09                 	db	9
   618  00FEEB  19                 	db	25
   619  00FEEC  29                 	db	41
   620  00FEED  46                 	db	70
   621  00FEEE  46                 	db	70
   622  00FEEF  49                 	db	73
   623  00FEF0  49                 	db	73
   624  00FEF1  49                 	db	73
   625  00FEF2  31                 	db	49
   626  00FEF3  01                 	db	1
   627  00FEF4  01                 	db	1
   628  00FEF5  7F                 	db	127
   629  00FEF6  01                 	db	1
   630  00FEF7  01                 	db	1
   631  00FEF8  3F                 	db	63
   632  00FEF9  40                 	db	64
   633  00FEFA  40                 	db	64
   634  00FEFB  40                 	db	64
   635  00FEFC  3F                 	db	63
   636  00FEFD  1F                 	db	31
   637  00FEFE  20                 	db	32
   638  00FEFF  40                 	db	64
   639  00FF00  20                 	db	32
   640  00FF01  1F                 	db	31
   641  00FF02  7F                 	db	127
   642  00FF03  20                 	db	32
   643  00FF04  18                 	db	24
   644  00FF05  20                 	db	32
   645  00FF06  7F                 	db	127
   646  00FF07  63                 	db	99
   647  00FF08  14                 	db	20
   648  00FF09  08                 	db	8
   649  00FF0A  14                 	db	20
   650  00FF0B  63                 	db	99
   651  00FF0C  03                 	db	3
   652  00FF0D  04                 	db	4
   653  00FF0E  78                 	db	120
   654  00FF0F  04                 	db	4
   655  00FF10  03                 	db	3
   656  00FF11  61                 	db	97
   657  00FF12  51                 	db	81
   658  00FF13  49                 	db	73
   659  00FF14  45                 	db	69
   660  00FF15  43                 	db	67
   661  00FF16  00                 	db	0
   662  00FF17  00                 	db	0
   663  00FF18  7F                 	db	127
   664  00FF19  41                 	db	65
   665  00FF1A  41                 	db	65
   666  00FF1B  02                 	db	2
   667  00FF1C  04                 	db	4
   668  00FF1D  08                 	db	8
   669  00FF1E  10                 	db	16
   670  00FF1F  20                 	db	32
   671  00FF20  41                 	db	65
   672  00FF21  41                 	db	65
   673  00FF22  7F                 	db	127
   674  00FF23  00                 	db	0
   675  00FF24  00                 	db	0
   676  00FF25  04                 	db	4
   677  00FF26  02                 	db	2
   678  00FF27  01                 	db	1
   679  00FF28  02                 	db	2
   680  00FF29  04                 	db	4
   681  00FF2A  40                 	db	64
   682  00FF2B  40                 	db	64
   683  00FF2C  40                 	db	64
   684  00FF2D  40                 	db	64
   685  00FF2E  40                 	db	64
   686  00FF2F  00                 	db	0
   687  00FF30  01                 	db	1
   688  00FF31  02                 	db	2
   689  00FF32  04                 	db	4
   690  00FF33  00                 	db	0
   691  00FF34  20                 	db	32
   692  00FF35  54                 	db	84
   693  00FF36  54                 	db	84
   694  00FF37  54                 	db	84
   695  00FF38  78                 	db	120
   696  00FF39  7F                 	db	127
   697  00FF3A  48                 	db	72
   698  00FF3B  44                 	db	68
   699  00FF3C  44                 	db	68
   700  00FF3D  38                 	db	56
   701  00FF3E  38                 	db	56
   702  00FF3F  44                 	db	68
   703  00FF40  44                 	db	68
   704  00FF41  44                 	db	68
   705  00FF42  20                 	db	32
   706  00FF43  38                 	db	56
   707  00FF44  44                 	db	68
   708  00FF45  44                 	db	68
   709  00FF46  48                 	db	72
   710  00FF47  7F                 	db	127
   711  00FF48  38                 	db	56
   712  00FF49  54                 	db	84
   713  00FF4A  54                 	db	84
   714  00FF4B  54                 	db	84
   715  00FF4C  18                 	db	24
   716  00FF4D  08                 	db	8
   717  00FF4E  7E                 	db	126
   718  00FF4F  09                 	db	9
   719  00FF50  01                 	db	1
   720  00FF51  02                 	db	2
   721  00FF52  08                 	db	8
   722  00FF53  14                 	db	20
   723  00FF54  54                 	db	84
   724  00FF55  54                 	db	84
   725  00FF56  3C                 	db	60
   726  00FF57  7F                 	db	127
   727  00FF58  08                 	db	8
   728  00FF59  04                 	db	4
   729  00FF5A  04                 	db	4
   730  00FF5B  78                 	db	120
   731  00FF5C  00                 	db	0
   732  00FF5D  44                 	db	68
   733  00FF5E  7D                 	db	125
   734  00FF5F  40                 	db	64
   735  00FF60  00                 	db	0
   736  00FF61  20                 	db	32
   737  00FF62  40                 	db	64
   738  00FF63  44                 	db	68
   739  00FF64  3D                 	db	61
   740  00FF65  00                 	db	0
   741  00FF66  00                 	db	0
   742  00FF67  7F                 	db	127
   743  00FF68  10                 	db	16
   744  00FF69  28                 	db	40
   745  00FF6A  44                 	db	68
   746  00FF6B  00                 	db	0
   747  00FF6C  41                 	db	65
   748  00FF6D  7F                 	db	127
   749  00FF6E  40                 	db	64
   750  00FF6F  00                 	db	0
   751  00FF70  7C                 	db	124
   752  00FF71  04                 	db	4
   753  00FF72  18                 	db	24
   754  00FF73  04                 	db	4
   755  00FF74  78                 	db	120
   756  00FF75  7C                 	db	124
   757  00FF76  08                 	db	8
   758  00FF77  04                 	db	4
   759  00FF78  04                 	db	4
   760  00FF79  78                 	db	120
   761  00FF7A  38                 	db	56
   762  00FF7B  44                 	db	68
   763  00FF7C  44                 	db	68
   764  00FF7D  44                 	db	68
   765  00FF7E  38                 	db	56
   766  00FF7F  7C                 	db	124
   767  00FF80  14                 	db	20
   768  00FF81  14                 	db	20
   769  00FF82  14                 	db	20
   770  00FF83  08                 	db	8
   771  00FF84  08                 	db	8
   772  00FF85  14                 	db	20
   773  00FF86  14                 	db	20
   774  00FF87  18                 	db	24
   775  00FF88  7C                 	db	124
   776  00FF89  7C                 	db	124
   777  00FF8A  08                 	db	8
   778  00FF8B  04                 	db	4
   779  00FF8C  04                 	db	4
   780  00FF8D  08                 	db	8
   781  00FF8E  48                 	db	72
   782  00FF8F  54                 	db	84
   783  00FF90  54                 	db	84
   784  00FF91  54                 	db	84
   785  00FF92  20                 	db	32
   786  00FF93  04                 	db	4
   787  00FF94  3F                 	db	63
   788  00FF95  44                 	db	68
   789  00FF96  40                 	db	64
   790  00FF97  20                 	db	32
   791  00FF98  3C                 	db	60
   792  00FF99  40                 	db	64
   793  00FF9A  40                 	db	64
   794  00FF9B  20                 	db	32
   795  00FF9C  7C                 	db	124
   796  00FF9D  1C                 	db	28
   797  00FF9E  20                 	db	32
   798  00FF9F  40                 	db	64
   799  00FFA0  20                 	db	32
   800  00FFA1  1C                 	db	28
   801  00FFA2  3C                 	db	60
   802  00FFA3  40                 	db	64
   803  00FFA4  30                 	db	48
   804  00FFA5  40                 	db	64
   805  00FFA6  3C                 	db	60
   806  00FFA7  44                 	db	68
   807  00FFA8  28                 	db	40
   808  00FFA9  10                 	db	16
   809  00FFAA  28                 	db	40
   810  00FFAB  44                 	db	68
   811  00FFAC  0C                 	db	12
   812  00FFAD  50                 	db	80
   813  00FFAE  50                 	db	80
   814  00FFAF  50                 	db	80
   815  00FFB0  3C                 	db	60
   816  00FFB1  44                 	db	68
   817  00FFB2  64                 	db	100
   818  00FFB3  54                 	db	84
   819  00FFB4  4C                 	db	76
   820  00FFB5  44                 	db	68
   821  00FFB6  00                 	db	0
   822  00FFB7  08                 	db	8
   823  00FFB8  36                 	db	54
   824  00FFB9  41                 	db	65
   825  00FFBA  00                 	db	0
   826  00FFBB  00                 	db	0
   827  00FFBC  00                 	db	0
   828  00FFBD  7F                 	db	127
   829  00FFBE  00                 	db	0
   830  00FFBF  00                 	db	0
   831  00FFC0  00                 	db	0
   832  00FFC1  41                 	db	65
   833  00FFC2  36                 	db	54
   834  00FFC3  08                 	db	8
   835  00FFC4  00                 	db	0
   836  00FFC5  08                 	db	8
   837  00FFC6  08                 	db	8
   838  00FFC7  2A                 	db	42
   839  00FFC8  1C                 	db	28
   840  00FFC9  08                 	db	8
   841  00FFCA  08                 	db	8
   842  00FFCB  1C                 	db	28
   843  00FFCC  2A                 	db	42
   844  00FFCD  08                 	db	8
   845  00FFCE  08                 	db	8
   846  00FFCF                     __end_of_Font5x7:
   847                           	opt stack 0
   848  00FFCF                     _PortA_Property:
   849                           	opt stack 0
   850  00FFCF  00FF               	dw	255
   851  00FFD1                     __end_of_PortA_Property:
   852                           	opt stack 0
   853  00FFD1                     _PortB_Property:
   854                           	opt stack 0
   855  00FFD1  FF00               	dw	65280
   856  00FFD3                     __end_of_PortB_Property:
   857                           	opt stack 0
   858  00FFD3                     _PortC_Property:
   859                           	opt stack 0
   860  00FFD3  FFF0               	dw	65520
   861  00FFD5                     __end_of_PortC_Property:
   862                           	opt stack 0
   863  00FFD5                     _PortD_Property:
   864                           	opt stack 0
   865  00FFD5  FFFF               	dw	65535
   866  00FFD7                     __end_of_PortD_Property:
   867                           	opt stack 0
   868  00FFD7                     _PortE_Property:
   869                           	opt stack 0
   870  00FFD7  0000               	dw	0
   871  00FFD9                     __end_of_PortE_Property:
   872                           	opt stack 0
   873  00FFD9                     _PortF_Property:
   874                           	opt stack 0
   875  00FFD9  0FFF               	dw	4095
   876  00FFDB                     __end_of_PortF_Property:
   877                           	opt stack 0
   878  00FFDB                     _PortG_Property:
   879                           	opt stack 0
   880  00FFDB  FC00               	dw	64512
   881  00FFDD                     __end_of_PortG_Property:
   882                           	opt stack 0
   883  0000                     _TMR0	set	4054
   884  0000                     _INTCONbits	set	4082
   885  0000                     _IPR1bits	set	3999
   886  0000                     _IPR3bits	set	4005
   887  0000                     _OSCTUNEbits	set	3995
   888  0000                     _PIE1bits	set	3997
   889  0000                     _PIE3bits	set	4003
   890  0000                     _PIR1	set	3998
   891  0000                     _PIR1bits	set	3998
   892  0000                     _PIR2	set	4001
   893  0000                     _PIR3	set	4004
   894  0000                     _PIR3bits	set	4004
   895  0000                     _PORTFbits	set	3973
   896  0000                     _PR2	set	4043
   897  0000                     _RCONbits	set	4048
   898  0000                     _SSP1ADD	set	4040
   899  0000                     _SSP1CON1bits	set	4038
   900  0000                     _SSP1CON2bits	set	4037
   901  0000                     _SSP1STATbits	set	4039
   902  0000                     _SSP2CON1bits	set	3948
   903  0000                     _SSP2CON2bits	set	3947
   904  0000                     _SSP2STATbits	set	3949
   905  0000                     _T0CONbits	set	4053
   906  0000                     _T2CONbits	set	4042
   907  0000                     _LATA	set	3977
   908  0000                     _LATB	set	3978
   909  0000                     _LATC	set	3979
   910  0000                     _LATD	set	3980
   911  0000                     _LATE	set	3981
   912  0000                     _LATF	set	3982
   913  0000                     _LATG	set	3983
   914  0000                     _PORTA	set	3968
   915  0000                     _PORTB	set	3969
   916  0000                     _PORTC	set	3970
   917  0000                     _PORTD	set	3971
   918  0000                     _PORTE	set	3972
   919  0000                     _PORTF	set	3973
   920  0000                     _PORTG	set	3974
   921  0000                     _SSP1BUF	set	4041
   922  0000                     _SSP1CON1	set	4038
   923  0000                     _SSP1CON2	set	4037
   924  0000                     _SSP1STAT	set	4039
   925  0000                     _SSP2BUF	set	3951
   926  0000                     _SSP2CON1	set	3948
   927  0000                     _SSP2CON2	set	3947
   928  0000                     _SSP2STAT	set	3949
   929  0000                     _TRISA	set	3986
   930  0000                     _TRISB	set	3987
   931  0000                     _TRISC	set	3988
   932  0000                     _TRISD	set	3989
   933  0000                     _TRISE	set	3990
   934  0000                     _TRISF	set	3991
   935  0000                     _TRISG	set	3992
   936  0000                     _ADSHR	set	32260
   937  00FFDD                     STR_2:
   938  00FFDD  41                 	db	65	;'A'
   939  00FFDE  6E                 	db	110	;'n'
   940  00FFDF  61                 	db	97	;'a'
   941  00FFE0  6C                 	db	108	;'l'
   942  00FFE1  6F                 	db	111	;'o'
   943  00FFE2  67                 	db	103	;'g'
   944  00FFE3  20                 	db	32
   945  00FFE4  74                 	db	116	;'t'
   946  00FFE5  6F                 	db	111	;'o'
   947  00FFE6  20                 	db	32
   948  00FFE7  44                 	db	68	;'D'
   949  00FFE8  69                 	db	105	;'i'
   950  00FFE9  67                 	db	103	;'g'
   951  00FFEA  69                 	db	105	;'i'
   952  00FFEB  74                 	db	116	;'t'
   953  00FFEC  61                 	db	97	;'a'
   954  00FFED  6C                 	db	108	;'l'
   955  00FFEE  0A                 	db	10
   956  00FFEF  0A                 	db	10
   957  00FFF0  00                 	db	0
   958  00FFF1                     STR_3:
   959  00FFF1  41                 	db	65	;'A'
   960  00FFF2  44                 	db	68	;'D'
   961  00FFF3  52                 	db	82	;'R'
   962  00FFF4  45                 	db	69	;'E'
   963  00FFF5  53                 	db	83	;'S'
   964  00FFF6  3A                 	db	58	;':'
   965  00FFF7  20                 	db	32
   966  00FFF8  25                 	db	37
   967  00FFF9  75                 	db	117	;'u'
   968  00FFFA  0A                 	db	10
   969  00FFFB  00                 	db	0
   970  00FFFC                     STR_1:
   971  00FFFC  25                 	db	37
   972  00FFFD  63                 	db	99	;'c'
   973  00FFFE  00                 	db	0
   974                           
   975                           ; #config settings
   976  00FFFF  00                 	db	0	; dummy byte at the end
   977  0000                     
   978                           	psect	cinit
   979  012E2E                     __pcinit:
   980                           	opt stack 0
   981  012E2E                     start_initialization:
   982                           	opt stack 0
   983  012E2E                     __initialization:
   984                           	opt stack 0
   985                           
   986                           ; Initialize objects allocated to BANK0 (15 bytes)
   987                           ; load TBLPTR registers with __pidataBANK0
   988  012E2E  0EC8               	movlw	low __pidataBANK0
   989  012E30  6EF6               	movwf	tblptrl,c
   990  012E32  0E3D               	movlw	high __pidataBANK0
   991  012E34  6EF7               	movwf	tblptrh,c
   992  012E36  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   993  012E38  6EF8               	movwf	tblptru,c
   994  012E3A  EE00  F0F1         	lfsr	0,__pdataBANK0
   995  012E3E  EE10 F00F          	lfsr	1,15
   996  012E42                     copy_data0:
   997  012E42  0009               	tblrd		*+
   998  012E44  CFF5 FFEE          	movff	tablat,postinc0
   999  012E48  50E5               	movf	postdec1,w,c
  1000  012E4A  50E1               	movf	fsr1l,w,c
  1001  012E4C  E1FA               	bnz	copy_data0
  1002                           
  1003                           ; Initialize objects allocated to COMRAM (10 bytes)
  1004                           ; load TBLPTR registers with __pidataCOMRAM
  1005  012E4E  0E28               	movlw	low __pidataCOMRAM
  1006  012E50  6EF6               	movwf	tblptrl,c
  1007  012E52  0E3E               	movlw	high __pidataCOMRAM
  1008  012E54  6EF7               	movwf	tblptrh,c
  1009  012E56  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1010  012E58  6EF8               	movwf	tblptru,c
  1011  012E5A  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1012  012E5E  EE10 F00A          	lfsr	1,10
  1013  012E62                     copy_data1:
  1014  012E62  0009               	tblrd		*+
  1015  012E64  CFF5 FFEE          	movff	tablat,postinc0
  1016  012E68  50E5               	movf	postdec1,w,c
  1017  012E6A  50E1               	movf	fsr1l,w,c
  1018  012E6C  E1FA               	bnz	copy_data1
  1019                           
  1020                           ; Clear objects allocated to BIGRAM (300 bytes)
  1021  012E6E  EE02  F004         	lfsr	0,__pbssBIGRAM
  1022  012E72  EE11 F02C          	lfsr	1,300
  1023  012E76                     clear_0:
  1024  012E76  6AEE               	clrf	postinc0,c
  1025  012E78  50E5               	movf	postdec1,w,c
  1026  012E7A  50E1               	movf	fsr1l,w,c
  1027  012E7C  E1FC               	bnz	clear_0
  1028  012E7E  50E2               	movf	fsr1h,w,c
  1029  012E80  E1FA               	bnz	clear_0
  1030                           
  1031                           ; Clear objects allocated to BANK1 (236 bytes)
  1032  012E82  EE01  F000         	lfsr	0,__pbssBANK1
  1033  012E86  0EEC               	movlw	236
  1034  012E88                     clear_1:
  1035  012E88  6AEE               	clrf	postinc0,c
  1036  012E8A  06E8               	decf	wreg,f,c
  1037  012E8C  E1FD               	bnz	clear_1
  1038                           
  1039                           ; Clear objects allocated to BANK0 (87 bytes)
  1040  012E8E  EE00  F060         	lfsr	0,__pbssBANK0
  1041  012E92  0E57               	movlw	87
  1042  012E94                     clear_2:
  1043  012E94  6AEE               	clrf	postinc0,c
  1044  012E96  06E8               	decf	wreg,f,c
  1045  012E98  E1FD               	bnz	clear_2
  1046                           
  1047                           ; Clear objects allocated to COMRAM (26 bytes)
  1048  012E9A  EE00  F025         	lfsr	0,__pbssCOMRAM
  1049  012E9E  0E1A               	movlw	26
  1050  012EA0                     clear_3:
  1051  012EA0  6AEE               	clrf	postinc0,c
  1052  012EA2  06E8               	decf	wreg,f,c
  1053  012EA4  E1FD               	bnz	clear_3
  1054  012EA6                     end_of_initialization:
  1055                           	opt stack 0
  1056  012EA6                     __end_of__initialization:
  1057                           	opt stack 0
  1058  012EA6  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1059  012EA8  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1060  012EAA  0100               	movlb	0
  1061  012EAC  EFC6  F08F         	goto	_main	;jump to C main() function
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1h	equ	0xFE2
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	bssCOMRAM
  1073  000025                     __pbssCOMRAM:
  1074                           	opt stack 0
  1075  000025                     _lQueue:
  1076                           	opt stack 0
  1077  000025                     	ds	3
  1078  000028                     HMI_GRender@a:
  1079                           	opt stack 0
  1080  000028                     	ds	2
  1081  00002A                     _COUNTER:
  1082                           	opt stack 0
  1083  00002A                     	ds	2
  1084  00002C                     _lMotor:
  1085                           	opt stack 0
  1086  00002C                     	ds	2
  1087  00002E                     OutSeg@a:
  1088                           	opt stack 0
  1089  00002E                     	ds	1
  1090  00002F                     OutSeg@cur:
  1091                           	opt stack 0
  1092  00002F                     	ds	1
  1093  000030                     OutSeg@segset:
  1094                           	opt stack 0
  1095  000030                     	ds	1
  1096  000031                     Timer0_Init@PRE:
  1097                           	opt stack 0
  1098  000031                     	ds	1
  1099  000032                     Timer2_Init@INDEX:
  1100                           	opt stack 0
  1101  000032                     	ds	1
  1102  000033                     Timer2_Init@PRE:
  1103                           	opt stack 0
  1104  000033                     	ds	1
  1105  000034                     _INDEX:
  1106                           	opt stack 0
  1107  000034                     	ds	1
  1108  000035                     _i:
  1109                           	opt stack 0
  1110  000035                     	ds	1
  1111  000036                     _lBufferX:
  1112                           	opt stack 0
  1113  000036                     	ds	1
  1114  000037                     _lBufferY:
  1115                           	opt stack 0
  1116  000037                     	ds	1
  1117  000038                     _I2C1T:
  1118                           	opt stack 0
  1119  000038                     	ds	7
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           postdec1	equ	0xFE5
  1127                           fsr1h	equ	0xFE2
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	dataCOMRAM
  1131  00003F                     __pdataCOMRAM:
  1132                           	opt stack 0
  1133  00003F                     _gCursor:
  1134                           	opt stack 0
  1135  00003F                     	ds	4
  1136  000043                     	ds	1
  1137  000044                     _Bus_State:
  1138                           	opt stack 0
  1139  000044                     	ds	1
  1140  000045                     	ds	1
  1141  000046                     _l:
  1142                           	opt stack 0
  1143  000046                     	ds	1
  1144  000047                     _w:
  1145                           	opt stack 0
  1146  000047                     	ds	1
  1147  000048                     	ds	1
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1h	equ	0xFE2
  1156                           fsr1l	equ	0xFE1
  1157                           
  1158                           	psect	bssBANK0
  1159  000060                     __pbssBANK0:
  1160                           	opt stack 0
  1161  000060                     Timer0_Init@DIV:
  1162                           	opt stack 0
  1163  000060                     	ds	4
  1164  000064                     Timer2_Init@DIV:
  1165                           	opt stack 0
  1166  000064                     	ds	4
  1167  000068                     _I2C1_Done:
  1168                           	opt stack 0
  1169  000068                     	ds	3
  1170  00006B                     _I2C2_Done:
  1171                           	opt stack 0
  1172  00006B                     	ds	3
  1173  00006E                     _gISR:
  1174                           	opt stack 0
  1175  00006E                     	ds	3
  1176  000071                     _lStepFunction:
  1177                           	opt stack 0
  1178  000071                     	ds	3
  1179  000074                     SPI_Send9@dat:
  1180                           	opt stack 0
  1181  000074                     	ds	2
  1182  000076                     _gBackcolour:
  1183                           	opt stack 0
  1184  000076                     	ds	2
  1185  000078                     _pShiftVal:
  1186                           	opt stack 0
  1187  000078                     	ds	2
  1188  00007A                     _val:
  1189                           	opt stack 0
  1190  00007A                     	ds	2
  1191  00007C                     Event_TestButton@j:
  1192                           	opt stack 0
  1193  00007C                     	ds	1
  1194  00007D                     _clearall:
  1195                           	opt stack 0
  1196  00007D                     	ds	1
  1197  00007E                     _j:
  1198                           	opt stack 0
  1199  00007E                     	ds	1
  1200  00007F                     _u:
  1201                           	opt stack 0
  1202  00007F                     	ds	1
  1203  000080                     _PortC:
  1204                           	opt stack 0
  1205  000080                     	ds	10
  1206  00008A                     _PortD:
  1207                           	opt stack 0
  1208  00008A                     	ds	10
  1209  000094                     _PortE:
  1210                           	opt stack 0
  1211  000094                     	ds	10
  1212  00009E                     _PortF:
  1213                           	opt stack 0
  1214  00009E                     	ds	10
  1215  0000A8                     _I2C2T:
  1216                           	opt stack 0
  1217  0000A8                     	ds	7
  1218  0000AF                     LCD_DrawRectangle@p2:
  1219                           	opt stack 0
  1220  0000AF                     	ds	4
  1221  0000B3                     LCD_DrawRectangle@p4:
  1222                           	opt stack 0
  1223  0000B3                     	ds	4
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           postinc0	equ	0xFEE
  1229                           wreg	equ	0xFE8
  1230                           postdec1	equ	0xFE5
  1231                           fsr1h	equ	0xFE2
  1232                           fsr1l	equ	0xFE1
  1233                           
  1234                           	psect	dataBANK0
  1235  0000F1                     __pdataBANK0:
  1236                           	opt stack 0
  1237  0000F1                     Console_Render@F7900:
  1238                           	opt stack 0
  1239  0000F1                     	ds	4
  1240  0000F5                     _gCharSize:
  1241                           	opt stack 0
  1242  0000F5                     	ds	4
  1243  0000F9                     _gLineSize:
  1244                           	opt stack 0
  1245  0000F9                     	ds	4
  1246  0000FD                     _gForecolour:
  1247                           	opt stack 0
  1248  0000FD                     	ds	2
  1249  0000FF                     _change:
  1250                           	opt stack 0
  1251  0000FF                     	ds	1
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           postinc0	equ	0xFEE
  1257                           wreg	equ	0xFE8
  1258                           postdec1	equ	0xFE5
  1259                           fsr1h	equ	0xFE2
  1260                           fsr1l	equ	0xFE1
  1261                           
  1262                           	psect	bssBANK1
  1263  000100                     __pbssBANK1:
  1264                           	opt stack 0
  1265  000100                     _lCBuffer:
  1266                           	opt stack 0
  1267  000100                     	ds	30
  1268  00011E                     _I2C1_More:
  1269                           	opt stack 0
  1270  00011E                     	ds	3
  1271  000121                     _I2C2_More:
  1272                           	opt stack 0
  1273  000121                     	ds	3
  1274  000124                     Console_MakeField@Fill:
  1275                           	opt stack 0
  1276  000124                     	ds	70
  1277  00016A                     _HMIBoard:
  1278                           	opt stack 0
  1279  00016A                     	ds	58
  1280  0001A4                     _SPI1:
  1281                           	opt stack 0
  1282  0001A4                     	ds	11
  1283  0001AF                     _SPI2:
  1284                           	opt stack 0
  1285  0001AF                     	ds	11
  1286  0001BA                     _DIPSwitch:
  1287                           	opt stack 0
  1288  0001BA                     	ds	10
  1289  0001C4                     _PortA:
  1290                           	opt stack 0
  1291  0001C4                     	ds	10
  1292  0001CE                     _PortB:
  1293                           	opt stack 0
  1294  0001CE                     	ds	10
  1295  0001D8                     _PortG:
  1296                           	opt stack 0
  1297  0001D8                     	ds	10
  1298  0001E2                     _TestButton:
  1299                           	opt stack 0
  1300  0001E2                     	ds	10
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1h	equ	0xFE2
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	bssBIGRAM
  1312  000204                     __pbssBIGRAM:
  1313                           	opt stack 0
  1314  000204                     _lBuffer:
  1315                           	opt stack 0
  1316  000204                     	ds	300
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1h	equ	0xFE2
  1325                           fsr1l	equ	0xFE1
  1326                           
  1327                           	psect	cstackBANK2
  1328  000200                     __pcstackBANK2:
  1329                           	opt stack 0
  1330  000200                     main@count:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x0
  1334  000200                     	ds	2
  1335  000202                     main@ADCReading:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x2
  1339  000202                     	ds	2
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1h	equ	0xFE2
  1348                           fsr1l	equ	0xFE1
  1349                           
  1350                           	psect	cstackBANK1
  1351  0001EC                     __pcstackBANK1:
  1352                           	opt stack 0
  1353  0001EC                     Port_SetQuadType@Output:
  1354                           	opt stack 0
  1355  0001EC                     Port_SetType@pInput:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x0
  1359  0001EC                     	ds	1
  1360  0001ED                     Button_Init@pInput:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x1
  1364  0001ED                     	ds	1
  1365  0001EE                     Port_SetType@pType:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x2
  1369  0001EE                     	ds	1
  1370  0001EF                     ??_Port_SetType:
  1371  0001EF                     Button_Init@pThreshold:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x3
  1375  0001EF                     	ds	2
  1376  0001F1                     Port_SetType@Output:
  1377                           	opt stack 0
  1378  0001F1                     Button_Init@pInitIO:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0x5
  1382  0001F1                     	ds	1
  1383  0001F2                     Port_Init@pInput:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x6
  1387  0001F2                     	ds	2
  1388  0001F4                     Port_Init@pPort:
  1389                           	opt stack 0
  1390  0001F4                     Button_Init@pGetState:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x8
  1394  0001F4                     	ds	1
  1395  0001F5                     ??_Port_Init:
  1396                           
  1397                           ; 1 bytes @ 0x9
  1398  0001F5                     	ds	2
  1399  0001F7                     Port_Init@i:
  1400                           	opt stack 0
  1401  0001F7                     Button_Init@pFunction:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0xB
  1405  0001F7                     	ds	3
  1406  0001FA                     HMI_Init@in:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0xE
  1410  0001FA                     	ds	2
  1411  0001FC                     ??_main:
  1412                           
  1413                           ; 1 bytes @ 0x10
  1414  0001FC                     	ds	1
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1h	equ	0xFE2
  1423                           fsr1l	equ	0xFE1
  1424                           
  1425                           	psect	cstackBANK0
  1426  0000B7                     __pcstackBANK0:
  1427                           	opt stack 0
  1428  0000B7                     ??_Console_ClearCursor:
  1429  0000B7                     ??_Console_Init:
  1430  0000B7                     ??_Console_NewLine:
  1431  0000B7                     ??_Console_FormFeed:
  1432  0000B7                     ?_GetPortProperties:
  1433                           	opt stack 0
  1434  0000B7                     ?_GetPortPORT:
  1435                           	opt stack 0
  1436  0000B7                     ?_GetPortTRIS:
  1437                           	opt stack 0
  1438  0000B7                     ?___wmul:
  1439                           	opt stack 0
  1440  0000B7                     ?___awdiv:
  1441                           	opt stack 0
  1442  0000B7                     ?___lwdiv:
  1443                           	opt stack 0
  1444  0000B7                     ?___lldiv:
  1445                           	opt stack 0
  1446  0000B7                     Mode_Set@pMode:
  1447                           	opt stack 0
  1448  0000B7                     ToSegment@pCHR:
  1449                           	opt stack 0
  1450  0000B7                     Port_GetPin@pInput:
  1451                           	opt stack 0
  1452  0000B7                     SPI_DisableISR@pInput:
  1453                           	opt stack 0
  1454  0000B7                     SPI_DCS@pInput:
  1455                           	opt stack 0
  1456  0000B7                     SPI_Send@pInput:
  1457                           	opt stack 0
  1458  0000B7                     Byte_SetBit@pInput:
  1459                           	opt stack 0
  1460  0000B7                     Byte_GetBit@pInput:
  1461                           	opt stack 0
  1462  0000B7                     Byte_SetZone@pInput:
  1463                           	opt stack 0
  1464  0000B7                     Byte_GetZone@pInput:
  1465                           	opt stack 0
  1466  0000B7                     Byte_SetByte@pInput:
  1467                           	opt stack 0
  1468  0000B7                     delay_ms@ms:
  1469                           	opt stack 0
  1470  0000B7                     delay_us@us:
  1471                           	opt stack 0
  1472  0000B7                     reverse@input:
  1473                           	opt stack 0
  1474  0000B7                     Console_SetForecolour@pColour:
  1475                           	opt stack 0
  1476  0000B7                     ___wmul@multiplier:
  1477                           	opt stack 0
  1478  0000B7                     ___awdiv@dividend:
  1479                           	opt stack 0
  1480  0000B7                     ___lwdiv@dividend:
  1481                           	opt stack 0
  1482  0000B7                     MXK_Queue@pCallback:
  1483                           	opt stack 0
  1484  0000B7                     ___lldiv@dividend:
  1485                           	opt stack 0
  1486                           
  1487                           ; 4 bytes @ 0x0
  1488  0000B7                     	ds	1
  1489  0000B8                     HMI_SetSegments@pString:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x1
  1493  0000B8                     	ds	1
  1494  0000B9                     GetPortProperties@pInput:
  1495                           	opt stack 0
  1496  0000B9                     GetPortPORT@pInput:
  1497                           	opt stack 0
  1498  0000B9                     GetPortTRIS@pInput:
  1499                           	opt stack 0
  1500  0000B9                     Port_GetPin@pPin:
  1501                           	opt stack 0
  1502  0000B9                     SPI_Send@pData:
  1503                           	opt stack 0
  1504  0000B9                     Byte_SetBit@pBit:
  1505                           	opt stack 0
  1506  0000B9                     Byte_GetBit@pBit:
  1507                           	opt stack 0
  1508  0000B9                     Byte_SetZone@pMax:
  1509                           	opt stack 0
  1510  0000B9                     Byte_GetZone@pMax:
  1511                           	opt stack 0
  1512  0000B9                     Byte_SetByte@pValue:
  1513                           	opt stack 0
  1514  0000B9                     Console_Init@x:
  1515                           	opt stack 0
  1516  0000B9                     Console_FormFeed@x:
  1517                           	opt stack 0
  1518  0000B9                     reverse@length:
  1519                           	opt stack 0
  1520  0000B9                     ___wmul@multiplicand:
  1521                           	opt stack 0
  1522  0000B9                     ___awdiv@divisor:
  1523                           	opt stack 0
  1524  0000B9                     ___lwdiv@divisor:
  1525                           	opt stack 0
  1526  0000B9                     delay_ms@u:
  1527                           	opt stack 0
  1528  0000B9                     delay_us@u:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x2
  1532  0000B9                     	ds	1
  1533  0000BA                     ??_Port_GetPin:
  1534  0000BA                     ??_Byte_GetBit:
  1535  0000BA                     LCD_Write@mode:
  1536                           	opt stack 0
  1537  0000BA                     Byte_SetBit@pValue:
  1538                           	opt stack 0
  1539  0000BA                     Byte_SetZone@pChunk:
  1540                           	opt stack 0
  1541  0000BA                     Byte_GetZone@pChunk:
  1542                           	opt stack 0
  1543  0000BA                     Console_Init@y:
  1544                           	opt stack 0
  1545  0000BA                     Console_FormFeed@y:
  1546                           	opt stack 0
  1547  0000BA                     OutSeg@pSegment:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x3
  1551  0000BA                     	ds	1
  1552  0000BB                     ??_Byte_SetBit:
  1553  0000BB                     ??_Console_IncrementCursor:
  1554  0000BB                     ??_OutSeg:
  1555  0000BB                     LCD_Write@value:
  1556                           	opt stack 0
  1557  0000BB                     Byte_GetBit@Output:
  1558                           	opt stack 0
  1559  0000BB                     Byte_SetZone@pChunkSize:
  1560                           	opt stack 0
  1561  0000BB                     Byte_GetZone@pChunkSize:
  1562                           	opt stack 0
  1563  0000BB                     reverse@tempVar:
  1564                           	opt stack 0
  1565  0000BB                     ___awdiv@counter:
  1566                           	opt stack 0
  1567  0000BB                     ___lwdiv@counter:
  1568                           	opt stack 0
  1569  0000BB                     HMI_SetSegments@in:
  1570                           	opt stack 0
  1571  0000BB                     ___wmul@product:
  1572                           	opt stack 0
  1573  0000BB                     ___lldiv@divisor:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x4
  1577  0000BB                     	ds	1
  1578  0000BC                     ??_Byte_GetZone:
  1579  0000BC                     ?_Console_MakeField:
  1580                           	opt stack 0
  1581  0000BC                     Set_Addr_Window@ys:
  1582                           	opt stack 0
  1583  0000BC                     Set_Rotation@m:
  1584                           	opt stack 0
  1585  0000BC                     Port_GetPin@Output:
  1586                           	opt stack 0
  1587  0000BC                     Byte_SetZone@pValue:
  1588                           	opt stack 0
  1589  0000BC                     ___awdiv@sign:
  1590                           	opt stack 0
  1591  0000BC                     LCD_Word_Write@value:
  1592                           	opt stack 0
  1593  0000BC                     reverse@iterator:
  1594                           	opt stack 0
  1595  0000BC                     ___lwdiv@quotient:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x5
  1599  0000BC                     	ds	1
  1600  0000BD                     ??_Byte_SetZone:
  1601  0000BD                     Set_Addr_Window@xe:
  1602                           	opt stack 0
  1603  0000BD                     Set_Rotation@rotation:
  1604                           	opt stack 0
  1605  0000BD                     Byte_GetZone@MASK:
  1606                           	opt stack 0
  1607  0000BD                     OutSeg@pInput:
  1608                           	opt stack 0
  1609  0000BD                     MXK_BlockSwitchTo@CUR:
  1610                           	opt stack 0
  1611  0000BD                     MXK_SwitchTo@CUR:
  1612                           	opt stack 0
  1613  0000BD                     ___awdiv@quotient:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x6
  1617  0000BD                     	ds	1
  1618  0000BE                     ??_Console_MakeField:
  1619  0000BE                     ?___lwmod:
  1620                           	opt stack 0
  1621  0000BE                     Set_Addr_Window@ye:
  1622                           	opt stack 0
  1623  0000BE                     Byte_GetZone@Offset:
  1624                           	opt stack 0
  1625  0000BE                     OutSeg@out:
  1626                           	opt stack 0
  1627  0000BE                     MXK_BlockSwitchTo@pModule:
  1628                           	opt stack 0
  1629  0000BE                     MXK_SwitchTo@pModule:
  1630                           	opt stack 0
  1631  0000BE                     ___lwmod@dividend:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x7
  1635  0000BE                     	ds	1
  1636  0000BF                     ??_Console_Tab:
  1637  0000BF                     Set_Addr_Window@xs:
  1638                           	opt stack 0
  1639  0000BF                     Byte_GetZone@Output:
  1640                           	opt stack 0
  1641  0000BF                     HMI_Render@a:
  1642                           	opt stack 0
  1643  0000BF                     ___lldiv@quotient:
  1644                           	opt stack 0
  1645                           
  1646                           ; 4 bytes @ 0x8
  1647  0000BF                     	ds	1
  1648  0000C0                     Byte_SetZone@Offset:
  1649                           	opt stack 0
  1650  0000C0                     LCD_Fill@pColour:
  1651                           	opt stack 0
  1652  0000C0                     LCD_FillRectangle@pColour:
  1653                           	opt stack 0
  1654  0000C0                     Byte_GetPair@pInput:
  1655                           	opt stack 0
  1656  0000C0                     Console_MakeField@Index:
  1657                           	opt stack 0
  1658  0000C0                     ___lwmod@divisor:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x9
  1662  0000C0                     	ds	1
  1663  0000C1                     Byte_SetZone@MASK:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0xA
  1667  0000C1                     	ds	1
  1668  0000C2                     LCD_Fill@i:
  1669                           	opt stack 0
  1670  0000C2                     Byte_GetPair@pPair:
  1671                           	opt stack 0
  1672  0000C2                     Console_MakeField@pInput:
  1673                           	opt stack 0
  1674  0000C2                     ___lwmod@counter:
  1675                           	opt stack 0
  1676  0000C2                     Byte_SetPair@pInput:
  1677                           	opt stack 0
  1678  0000C2                     Byte_SetQuad@pInput:
  1679                           	opt stack 0
  1680  0000C2                     LCD_FillRectangle@pPoint:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0xB
  1684  0000C2                     	ds	1
  1685  0000C3                     LCD_Fill@j:
  1686                           	opt stack 0
  1687  0000C3                     ___lldiv@counter:
  1688                           	opt stack 0
  1689  0000C3                     Word_GetPair@pInput:
  1690                           	opt stack 0
  1691  0000C3                     itos@input:
  1692                           	opt stack 0
  1693  0000C3                     Console_MakeField@Column:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0xC
  1697  0000C3                     	ds	1
  1698  0000C4                     Byte_SetPair@pPair:
  1699                           	opt stack 0
  1700  0000C4                     Byte_SetQuad@pQuad:
  1701                           	opt stack 0
  1702  0000C4                     Console_Tab@t:
  1703                           	opt stack 0
  1704  0000C4                     Timer2_Init@pFrequency:
  1705                           	opt stack 0
  1706                           
  1707                           ; 4 bytes @ 0xD
  1708  0000C4                     	ds	1
  1709  0000C5                     Byte_SetPair@pValue:
  1710                           	opt stack 0
  1711  0000C5                     Byte_SetQuad@pValue:
  1712                           	opt stack 0
  1713  0000C5                     Word_GetPair@pPair:
  1714                           	opt stack 0
  1715  0000C5                     Console_Tab@i:
  1716                           	opt stack 0
  1717  0000C5                     itos@destination:
  1718                           	opt stack 0
  1719  0000C5                     _Console_MakeField$9772:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0xE
  1723  0000C5                     	ds	1
  1724  0000C6                     Console_Tab@c:
  1725                           	opt stack 0
  1726  0000C6                     Port_SetPin@pInput:
  1727                           	opt stack 0
  1728  0000C6                     Port_Set@pInput:
  1729                           	opt stack 0
  1730  0000C6                     SPI_MinSpeed@pInput:
  1731                           	opt stack 0
  1732  0000C6                     SPI_MaxSpeed@pInput:
  1733                           	opt stack 0
  1734  0000C6                     Word_SetPair@pInput:
  1735                           	opt stack 0
  1736  0000C6                     PortProperty_Valid@pInput:
  1737                           	opt stack 0
  1738  0000C6                     LCD_FillRectangle@pSize:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0xF
  1742  0000C6                     	ds	1
  1743  0000C7                     ??_Console_PrintChar:
  1744  0000C7                     Console_MakeField@x:
  1745                           	opt stack 0
  1746  0000C7                     itos@Data:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x10
  1750  0000C7                     	ds	1
  1751  0000C8                     ??_Timer2_Init:
  1752  0000C8                     Port_SetPin@pPin:
  1753                           	opt stack 0
  1754  0000C8                     Port_Set@pValue:
  1755                           	opt stack 0
  1756  0000C8                     Word_SetPair@pPair:
  1757                           	opt stack 0
  1758  0000C8                     PortProperty_Valid@pPinDrive:
  1759                           	opt stack 0
  1760  0000C8                     Console_MakeField@y:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x11
  1764  0000C8                     	ds	1
  1765  0000C9                     ??_Port_Set:
  1766  0000C9                     Port_SetPin@pValue:
  1767                           	opt stack 0
  1768  0000C9                     Word_SetPair@pValue:
  1769                           	opt stack 0
  1770  0000C9                     PortProperty_Valid@pPin:
  1771                           	opt stack 0
  1772  0000C9                     LCD_DrawField@pField:
  1773                           	opt stack 0
  1774  0000C9                     itos@Length:
  1775                           	opt stack 0
  1776  0000C9                     Timer2_Init@RDIV:
  1777                           	opt stack 0
  1778                           
  1779                           ; 4 bytes @ 0x12
  1780  0000C9                     	ds	1
  1781  0000CA                     ??_PortProperty_Valid:
  1782  0000CA                     ??_LCD_FillRectangle:
  1783  0000CA                     Port_SetPin@Type:
  1784                           	opt stack 0
  1785  0000CA                     Console_PrintChar@pInput:
  1786                           	opt stack 0
  1787                           
  1788                           ; 1 bytes @ 0x13
  1789  0000CA                     	ds	1
  1790  0000CB                     LED_Set@pValue:
  1791                           	opt stack 0
  1792  0000CB                     putch@c:
  1793                           	opt stack 0
  1794  0000CB                     Port_TogglePin@pInput:
  1795                           	opt stack 0
  1796  0000CB                     itos@Out:
  1797                           	opt stack 0
  1798  0000CB                     LCD_DrawField@pPoint:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0x14
  1802  0000CB                     	ds	1
  1803  0000CC                     ?_printf:
  1804                           	opt stack 0
  1805  0000CC                     LCD_FillRectangle@i:
  1806                           	opt stack 0
  1807  0000CC                     LED_Set@pLED:
  1808                           	opt stack 0
  1809  0000CC                     printf@f:
  1810                           	opt stack 0
  1811  0000CC                     PortProperty_Valid@Errors:
  1812                           	opt stack 0
  1813                           
  1814                           ; 16 bytes @ 0x15
  1815  0000CC                     	ds	1
  1816  0000CD                     LCD_FillRectangle@j:
  1817                           	opt stack 0
  1818  0000CD                     Port_TogglePin@pPin:
  1819                           	opt stack 0
  1820  0000CD                     HMI_SetNumber@pInput:
  1821                           	opt stack 0
  1822  0000CD                     Timer2_Init@pCPUClock:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0x16
  1826  0000CD                     	ds	1
  1827  0000CE                     Port_TogglePin@Value:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x17
  1831  0000CE                     	ds	1
  1832  0000CF                     LED_Toggle@pLED:
  1833                           	opt stack 0
  1834  0000CF                     LCD_DrawField@pSize:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x18
  1838  0000CF                     	ds	1
  1839  0000D0                     printf@flag:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x19
  1843  0000D0                     	ds	1
  1844  0000D1                     printf@val:
  1845                           	opt stack 0
  1846  0000D1                     Timer2_Init@DIVIDE:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0x1A
  1850  0000D1                     	ds	2
  1851  0000D3                     ??_LCD_DrawField:
  1852  0000D3                     printf@prec:
  1853                           	opt stack 0
  1854                           
  1855                           ; 1 bytes @ 0x1C
  1856  0000D3                     	ds	1
  1857  0000D4                     printf@ap:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x1D
  1861  0000D4                     	ds	1
  1862  0000D5                     LCD_DrawField@count:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x1E
  1866  0000D5                     	ds	1
  1867  0000D6                     printf@c:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x1F
  1871  0000D6                     	ds	1
  1872  0000D7                     LCD_DrawField@xmax:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x20
  1876  0000D7                     	ds	1
  1877  0000D8                     LCD_DrawField@ymax:
  1878                           	opt stack 0
  1879                           
  1880                           ; 1 bytes @ 0x21
  1881  0000D8                     	ds	1
  1882  0000D9                     LCD_DrawField@i:
  1883                           	opt stack 0
  1884  0000D9                     Port_Set@TypeRequired:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x22
  1888  0000D9                     	ds	1
  1889  0000DA                     ??_Console_Render:
  1890                           
  1891                           ; 1 bytes @ 0x23
  1892  0000DA                     	ds	1
  1893  0000DB                     Port_Set@TypeActual:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x24
  1897  0000DB                     	ds	1
  1898  0000DC                     PortProperty_Valid@Pair:
  1899                           	opt stack 0
  1900  0000DC                     Console_Render@temp:
  1901                           	opt stack 0
  1902                           
  1903                           ; 1 bytes @ 0x25
  1904  0000DC                     	ds	1
  1905  0000DD                     Port_Set@Type:
  1906                           	opt stack 0
  1907  0000DD                     Port_CheckPairType@pInput:
  1908                           	opt stack 0
  1909  0000DD                     Port_SetPinType@pInput:
  1910                           	opt stack 0
  1911  0000DD                     Console_Render@lCursor:
  1912                           	opt stack 0
  1913                           
  1914                           ; 4 bytes @ 0x26
  1915  0000DD                     	ds	2
  1916  0000DF                     Port_CheckPairType@pPair:
  1917                           	opt stack 0
  1918  0000DF                     Port_SetPinType@pPin:
  1919                           	opt stack 0
  1920                           
  1921                           ; 1 bytes @ 0x28
  1922  0000DF                     	ds	1
  1923  0000E0                     Port_CheckPairType@pDrive:
  1924                           	opt stack 0
  1925  0000E0                     Port_SetPinType@pType:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x29
  1929  0000E0                     	ds	1
  1930  0000E1                     Port_CheckPairType@Pin1:
  1931                           	opt stack 0
  1932  0000E1                     Port_SetPinType@Output:
  1933                           	opt stack 0
  1934  0000E1                     Console_Render@x:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x2A
  1938  0000E1                     	ds	1
  1939  0000E2                     Port_CheckPairType@Pin2:
  1940                           	opt stack 0
  1941  0000E2                     Console_Render@y:
  1942                           	opt stack 0
  1943  0000E2                     Port_SetPinType@Props:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x2B
  1947  0000E2                     	ds	1
  1948  0000E3                     Port_CheckPairType@Output:
  1949                           	opt stack 0
  1950                           
  1951                           ; 1 bytes @ 0x2C
  1952  0000E3                     	ds	1
  1953  0000E4                     LED_Init@pLED:
  1954                           	opt stack 0
  1955  0000E4                     Port_CheckPairType@Props:
  1956                           	opt stack 0
  1957  0000E4                     SPI_Init@pClock:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0x2D
  1961  0000E4                     	ds	2
  1962  0000E6                     Port_CheckQuadType@pInput:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x2F
  1966  0000E6                     	ds	2
  1967  0000E8                     Port_CheckQuadType@pQuad:
  1968                           	opt stack 0
  1969  0000E8                     SPI_Init@pChannel:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x31
  1973  0000E8                     	ds	1
  1974  0000E9                     Port_CheckQuadType@pDrive:
  1975                           	opt stack 0
  1976  0000E9                     SPI_Init@pMode:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x32
  1980  0000E9                     	ds	1
  1981  0000EA                     Port_CheckQuadType@Pair1:
  1982                           	opt stack 0
  1983  0000EA                     SPI_Init@pInput:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x33
  1987  0000EA                     	ds	1
  1988  0000EB                     Port_CheckQuadType@Pair2:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x34
  1992  0000EB                     	ds	1
  1993  0000EC                     ??_LCD_Init:
  1994  0000EC                     Port_CheckQuadType@Output:
  1995                           	opt stack 0
  1996                           
  1997                           ; 1 bytes @ 0x35
  1998  0000EC                     	ds	1
  1999  0000ED                     Port_CheckPortType@pInput:
  2000                           	opt stack 0
  2001  0000ED                     Port_SetQuadType@pInput:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x36
  2005  0000ED                     	ds	1
  2006  0000EE                     LCD_Init@i:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x37
  2010  0000EE                     	ds	1
  2011  0000EF                     Port_CheckPortType@pDrive:
  2012                           	opt stack 0
  2013  0000EF                     Port_SetQuadType@pQuad:
  2014                           	opt stack 0
  2015                           
  2016                           ; 1 bytes @ 0x38
  2017  0000EF                     	ds	1
  2018  0000F0                     Port_CheckPortType@Output:
  2019                           	opt stack 0
  2020  0000F0                     Port_SetQuadType@pType:
  2021                           	opt stack 0
  2022                           
  2023                           ; 1 bytes @ 0x39
  2024  0000F0                     	ds	1
  2025  0000F1                     tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           
  2035                           ; 1 bytes @ 0x3A
  2036                           
  2037                           	psect	cstackCOMRAM
  2038  000001                     __pcstackCOMRAM:
  2039                           	opt stack 0
  2040  000001                     i2Byte_SetBit@pInput:
  2041                           	opt stack 0
  2042  000001                     i2Byte_GetZone@pInput:
  2043                           	opt stack 0
  2044  000001                     i2delay_us@us:
  2045                           	opt stack 0
  2046  000001                     i2MXK_Queue@pCallback:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x0
  2050  000001                     	ds	2
  2051  000003                     i2Byte_SetBit@pBit:
  2052                           	opt stack 0
  2053  000003                     i2Byte_GetZone@pMax:
  2054                           	opt stack 0
  2055  000003                     i2delay_us@u:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x2
  2059  000003                     	ds	1
  2060  000004                     i2Byte_SetBit@pValue:
  2061                           	opt stack 0
  2062  000004                     i2Byte_GetZone@pChunk:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0x3
  2066  000004                     	ds	1
  2067  000005                     ??i2_Byte_SetBit:
  2068  000005                     i2Byte_GetZone@pChunkSize:
  2069                           	opt stack 0
  2070                           
  2071                           ; 1 bytes @ 0x4
  2072  000005                     	ds	1
  2073  000006                     ??i2_Byte_GetZone:
  2074                           
  2075                           ; 1 bytes @ 0x5
  2076  000006                     	ds	1
  2077  000007                     i2Byte_GetZone@MASK:
  2078                           	opt stack 0
  2079  000007                     i2MXK_SwitchTo@CUR:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x6
  2083  000007                     	ds	1
  2084  000008                     i2Byte_GetZone@Offset:
  2085                           	opt stack 0
  2086  000008                     i2MXK_SwitchTo@pModule:
  2087                           	opt stack 0
  2088                           
  2089                           ; 1 bytes @ 0x7
  2090  000008                     	ds	1
  2091  000009                     i2Byte_GetZone@Output:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x8
  2095  000009                     	ds	1
  2096  00000A                     i2Byte_GetPair@pInput:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x9
  2100  00000A                     	ds	2
  2101  00000C                     i2Byte_GetPair@pPair:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0xB
  2105  00000C                     	ds	1
  2106  00000D                     i2Word_GetPair@pInput:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0xC
  2110  00000D                     	ds	2
  2111  00000F                     i2Word_GetPair@pPair:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0xE
  2115  00000F                     	ds	1
  2116  000010                     i2Port_SetPin@pInput:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0xF
  2120  000010                     	ds	2
  2121  000012                     i2Port_SetPin@pPin:
  2122                           	opt stack 0
  2123                           
  2124                           ; 1 bytes @ 0x11
  2125  000012                     	ds	1
  2126  000013                     i2Port_SetPin@pValue:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x12
  2130  000013                     	ds	1
  2131  000014                     i2Port_SetPin@Type:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x13
  2135  000014                     	ds	1
  2136  000015                     
  2137                           ; 1 bytes @ 0x14
  2138  000015                     	ds	2
  2139  000017                     ??_ISR_Function:
  2140                           
  2141                           ; 1 bytes @ 0x16
  2142  000017                     	ds	14
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           fsr1h	equ	0xFE2
  2151                           fsr1l	equ	0xFE1
  2152                           
  2153 ;;
  2154 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2155 ;;
  2156 ;; *************** function _main *****************
  2157 ;; Defined at:
  2158 ;;		line 24 in file "main.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  ADCReading      2    2[BANK2 ] unsigned short 
  2163 ;;  count           2    0[BANK2 ] int 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  1    wreg      void 
  2166 ;; Registers used:
  2167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Totals:         0       0       1       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;Total ram usage:        5 bytes
  2178 ;; Hardware stack levels required when called:   17
  2179 ;; This function calls:
  2180 ;;		_Console_Init
  2181 ;;		_Console_Render
  2182 ;;		_Console_SetForecolour
  2183 ;;		_HMI_Init
  2184 ;;		_HMI_Render
  2185 ;;		_HMI_SetNumber
  2186 ;;		_LCD_Init
  2187 ;;		_MXK_BlockSwitchTo
  2188 ;;		_MXK_Dequeue
  2189 ;;		_MXK_Init
  2190 ;;		_MXK_Release
  2191 ;;		_printf
  2192 ;; This function is called by:
  2193 ;;		Startup code after reset
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text0
  2198  011F8C                     __ptext0:
  2199                           	opt stack 0
  2200  011F8C                     _main:
  2201                           	opt stack 14
  2202                           
  2203                           ;main.c: 29: MXK_Init();
  2204                           
  2205                           ;incstack = 0
  2206  011F8C  ECE0  F08B         	call	_MXK_Init	;wreg free
  2207                           
  2208                           ;main.c: 37: ADSHR = 1;
  2209  011F90  88C0               	bsf	4032,4,c	;volatile
  2210                           
  2211                           ;main.c: 39: ADSHR = 0;
  2212  011F92  98C0               	bcf	4032,4,c	;volatile
  2213                           
  2214                           ;main.c: 51: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2215  011F94  0E01               	movlw	1
  2216  011F96  ECBE  F09C         	call	_MXK_BlockSwitchTo
  2217  011F9A  0900               	iorlw	0
  2218  011F9C  B4D8               	btfsc	status,2,c
  2219  011F9E  D00C               	goto	l11369
  2220                           
  2221                           ;main.c: 52: LCD_Init();
  2222  011FA0  EC9D  F08C         	call	_LCD_Init	;wreg free
  2223                           
  2224                           ;main.c: 53: Console_Init();
  2225  011FA4  ECD4  F096         	call	_Console_Init	;wreg free
  2226                           
  2227                           ;main.c: 54: HMI_Init();
  2228  011FA8  EC74  F088         	call	_HMI_Init	;wreg free
  2229                           
  2230                           ;main.c: 55: if (MXK_Release())
  2231  011FAC  ECD0  F09E         	call	_MXK_Release	;wreg free
  2232  011FB0  0900               	iorlw	0
  2233  011FB2  A4D8               	btfss	status,2,c
  2234                           
  2235                           ;main.c: 56: MXK_Dequeue();
  2236  011FB4  EC89  F09D         	call	_MXK_Dequeue	;wreg free
  2237  011FB8                     l11369:
  2238                           
  2239                           ;main.c: 57: }
  2240                           ;main.c: 59: INTCONbits.GIE = 0;
  2241  011FB8  9EF2               	bcf	intcon,7,c	;volatile
  2242                           
  2243                           ;main.c: 67: UINT16 ADCReading = 0;
  2244  011FBA  0E00               	movlw	0
  2245  011FBC  0102               	movlb	2	; () banked
  2246  011FBE  6F03               	movwf	(main@ADCReading+1)& (0+255),b
  2247  011FC0  0E00               	movlw	0
  2248  011FC2  6F02               	movwf	main@ADCReading& (0+255),b
  2249                           
  2250                           ; BSR set to: 2
  2251                           ;main.c: 68: int count = 0;
  2252  011FC4  0E00               	movlw	0
  2253  011FC6  0102               	movlb	2	; () banked
  2254  011FC8  6F01               	movwf	(main@count+1)& (0+255),b
  2255  011FCA  0E00               	movlw	0
  2256  011FCC  6F00               	movwf	main@count& (0+255),b
  2257  011FCE                     l11375:
  2258                           
  2259                           ;main.c: 70: {
  2260                           ;main.c: 72: if(count <=0){
  2261  011FCE  0102               	movlb	2	; () banked
  2262  011FD0  BF01               	btfsc	(main@count+1)& (0+255),7,b
  2263  011FD2  D007               	goto	l11377
  2264  011FD4  0102               	movlb	2	; () banked
  2265  011FD6  5101               	movf	(main@count+1)& (0+255),w,b
  2266  011FD8  E111               	bnz	l11381
  2267  011FDA  0102               	movlb	2	; () banked
  2268  011FDC  0500               	decf	main@count& (0+255),w,b
  2269  011FDE  B0D8               	btfsc	status,0,c
  2270  011FE0  D00D               	goto	l11381
  2271  011FE2                     l11377:
  2272                           
  2273                           ; BSR set to: 2
  2274                           ;main.c: 73: _delay((unsigned long)((2)*(12000000/4000.0)));
  2275  011FE2  0E08               	movlw	8
  2276  011FE4  0101               	movlb	1	; () banked
  2277  011FE6  6FFC               	movwf	??_main& (0+255),b
  2278  011FE8  0ECA               	movlw	202
  2279  011FEA                     u7977:
  2280  011FEA  2EE8               	decfsz	wreg,f,c
  2281  011FEC  D7FE               	goto	u7977
  2282  011FEE  2FFC               	decfsz	??_main& (0+255),f,b
  2283  011FF0  D7FC               	goto	u7977
  2284                           
  2285                           ;main.c: 80: count = 50;
  2286  011FF2  0E00               	movlw	0
  2287  011FF4  0102               	movlb	2	; () banked
  2288  011FF6  6F01               	movwf	(main@count+1)& (0+255),b
  2289  011FF8  0E32               	movlw	50
  2290  011FFA  6F00               	movwf	main@count& (0+255),b
  2291  011FFC                     l11381:
  2292                           
  2293                           ; BSR set to: 2
  2294                           ;main.c: 81: }
  2295                           ;main.c: 82: count--;
  2296  011FFC  0102               	movlb	2	; () banked
  2297  011FFE  0700               	decf	main@count& (0+255),f,b
  2298  012000  A0D8               	btfss	status,0,c
  2299  012002  0701               	decf	(main@count+1)& (0+255),f,b
  2300                           
  2301                           ; BSR set to: 2
  2302                           ;main.c: 85: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2303  012004  0E01               	movlw	1
  2304  012006  ECBE  F09C         	call	_MXK_BlockSwitchTo
  2305  01200A  0900               	iorlw	0
  2306  01200C  B4D8               	btfsc	status,2,c
  2307  01200E  D7DF               	goto	l11375
  2308                           
  2309                           ;main.c: 86: printf("%c", (char)35);
  2310  012010  0EFC               	movlw	low STR_1
  2311  012012  0100               	movlb	0	; () banked
  2312  012014  6FCC               	movwf	printf@f& (0+255),b
  2313  012016  0EFF               	movlw	high STR_1
  2314  012018  0100               	movlb	0	; () banked
  2315  01201A  6FCD               	movwf	(printf@f+1)& (0+255),b
  2316  01201C  0E00               	movlw	0
  2317  01201E  0100               	movlb	0	; () banked
  2318  012020  6FCF               	movwf	(?_printf+3)& (0+255),b
  2319  012022  0E23               	movlw	35
  2320  012024  6FCE               	movwf	(?_printf+2)& (0+255),b
  2321  012026  EC56  F08D         	call	_printf	;wreg free
  2322                           
  2323                           ;main.c: 87: Console_SetForecolour(0xFFFF);
  2324  01202A  0EFF               	movlw	255
  2325  01202C  0100               	movlb	0	; () banked
  2326  01202E  6FB8               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  2327  012030  69B7               	setf	Console_SetForecolour@pColour& (0+255),b
  2328  012032  EC19  F09F         	call	_Console_SetForecolour	;wreg free
  2329                           
  2330                           ;main.c: 88: printf("Analog to Digital\n\n");
  2331  012036  0EDD               	movlw	low STR_2
  2332  012038  0100               	movlb	0	; () banked
  2333  01203A  6FCC               	movwf	printf@f& (0+255),b
  2334  01203C  0EFF               	movlw	high STR_2
  2335  01203E  0100               	movlb	0	; () banked
  2336  012040  6FCD               	movwf	(printf@f+1)& (0+255),b
  2337  012042  EC56  F08D         	call	_printf	;wreg free
  2338                           
  2339                           ;main.c: 93: printf("ADRES: %u\n", ADCReading);
  2340  012046  0EF1               	movlw	low STR_3
  2341  012048  0100               	movlb	0	; () banked
  2342  01204A  6FCC               	movwf	printf@f& (0+255),b
  2343  01204C  0EFF               	movlw	high STR_3
  2344  01204E  0100               	movlb	0	; () banked
  2345  012050  6FCD               	movwf	(printf@f+1)& (0+255),b
  2346  012052  C202  F0CE         	movff	main@ADCReading,?_printf+2
  2347  012056  C203  F0CF         	movff	main@ADCReading+1,?_printf+3
  2348  01205A  EC56  F08D         	call	_printf	;wreg free
  2349                           
  2350                           ;main.c: 94: Console_Render();
  2351  01205E  EC6E  F087         	call	_Console_Render	;wreg free
  2352                           
  2353                           ;main.c: 96: HMI_SetNumber(ADCReading);
  2354  012062  C202  F0CD         	movff	main@ADCReading,HMI_SetNumber@pInput
  2355  012066  C203  F0CE         	movff	main@ADCReading+1,HMI_SetNumber@pInput+1
  2356  01206A  EC00  F09E         	call	_HMI_SetNumber	;wreg free
  2357                           
  2358                           ;main.c: 97: HMI_Render();
  2359  01206E  ECDD  F09C         	call	_HMI_Render	;wreg free
  2360                           
  2361                           ;main.c: 99: if (MXK_Release())
  2362  012072  ECD0  F09E         	call	_MXK_Release	;wreg free
  2363  012076  0900               	iorlw	0
  2364  012078  B4D8               	btfsc	status,2,c
  2365  01207A  D7A9               	goto	l11375
  2366                           
  2367                           ;main.c: 100: MXK_Dequeue();
  2368  01207C  EC89  F09D         	call	_MXK_Dequeue	;wreg free
  2369                           
  2370                           ;main.c: 101: }
  2371                           ;main.c: 102: }
  2372  012080  D7A6               	goto	l11375
  2373  012082                     __end_of_main:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           intcon	equ	0xFF2
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1h	equ	0xFE2
  2384                           fsr1l	equ	0xFE1
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _printf *****************
  2388 ;; Defined at:
  2389 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  2392 ;;		 -> STR_3(11), STR_2(20), STR_1(3), 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  tmpval          4    0        struct .
  2395 ;;  cp              3    0        PTR const unsigned char 
  2396 ;;  ap              2   29[BANK0 ] PTR void [1]
  2397 ;;		 -> ?_printf(2), 
  2398 ;;  val             2   26[BANK0 ] unsigned int 
  2399 ;;  len             2    0        unsigned int 
  2400 ;;  c               1   31[BANK0 ] char 
  2401 ;;  prec            1   28[BANK0 ] char 
  2402 ;;  flag            1   25[BANK0 ] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2   21[BANK0 ] int 
  2405 ;; Registers used:
  2406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:       11 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:   12
  2419 ;; This function calls:
  2420 ;;		___lwdiv
  2421 ;;		___lwmod
  2422 ;;		_putch
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text1
  2429  011AAC                     __ptext1:
  2430                           	opt stack 0
  2431  011AAC                     _printf:
  2432                           	opt stack 18
  2433                           
  2434                           ;doprnt.c: 466: va_list ap;
  2435                           ;doprnt.c: 499: signed char c;
  2436                           ;doprnt.c: 506: signed char prec;
  2437                           ;doprnt.c: 508: unsigned char flag;
  2438                           ;doprnt.c: 523: union {
  2439                           ;doprnt.c: 524: unsigned long vd;
  2440                           ;doprnt.c: 525: double integ;
  2441                           ;doprnt.c: 526: } tmpval;
  2442                           ;doprnt.c: 528: unsigned int val;
  2443                           ;doprnt.c: 529: unsigned len;
  2444                           ;doprnt.c: 530: const char * cp;
  2445                           ;doprnt.c: 533: *ap = __va_start();
  2446                           
  2447                           ;incstack = 0
  2448  011AAC  0ECE               	movlw	low (?_printf+2)
  2449  011AAE  0100               	movlb	0	; () banked
  2450  011AB0  6FD4               	movwf	printf@ap& (0+255),b
  2451  011AB2  0E00               	movlw	high (?_printf+2)
  2452  011AB4  0100               	movlb	0	; () banked
  2453  011AB6  6FD5               	movwf	(printf@ap+1)& (0+255),b
  2454                           
  2455                           ;doprnt.c: 536: while(c = *f++) {
  2456  011AB8  D09E               	goto	l10771
  2457  011ABA                     l10729:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 538: if(c != '%')
  2461  011ABA  0E25               	movlw	37
  2462  011ABC  0100               	movlb	0	; () banked
  2463  011ABE  19D6               	xorwf	printf@c& (0+255),w,b
  2464  011AC0  B4D8               	btfsc	status,2,c
  2465  011AC2  D005               	goto	l10733
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 540: {
  2469                           ;doprnt.c: 541: (putch(c) );
  2470  011AC4  0100               	movlb	0	; () banked
  2471  011AC6  51D6               	movf	printf@c& (0+255),w,b
  2472  011AC8  ECEC  F09E         	call	_putch
  2473                           
  2474                           ;doprnt.c: 542: continue;
  2475  011ACC  D094               	goto	l10771
  2476  011ACE                     l10733:
  2477                           
  2478                           ;doprnt.c: 543: }
  2479                           ;doprnt.c: 548: flag = 0;
  2480  011ACE  0E00               	movlw	0
  2481  011AD0  0100               	movlb	0	; () banked
  2482  011AD2  6FD0               	movwf	printf@flag& (0+255),b
  2483                           
  2484                           ;doprnt.c: 635: switch(c = *f++) {
  2485  011AD4  D015               	goto	l10745
  2486  011AD6                     l10735:
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2490  011AD6  C0D4  FFD9         	movff	printf@ap,fsr2l
  2491  011ADA  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  2492  011ADE  50DF               	movf	indf2,w,c
  2493  011AE0  0100               	movlb	0	; () banked
  2494  011AE2  6FD6               	movwf	printf@c& (0+255),b
  2495                           
  2496                           ; BSR set to: 0
  2497  011AE4  0E02               	movlw	2
  2498  011AE6  0100               	movlb	0	; () banked
  2499  011AE8  27D4               	addwf	printf@ap& (0+255),f,b
  2500  011AEA  0E00               	movlw	0
  2501  011AEC  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  2502  011AEE                     l10739:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 809: (putch(c) );
  2506  011AEE  0100               	movlb	0	; () banked
  2507  011AF0  51D6               	movf	printf@c& (0+255),w,b
  2508  011AF2  ECEC  F09E         	call	_putch
  2509                           
  2510                           ;doprnt.c: 810: continue;
  2511  011AF6  D07F               	goto	l10771
  2512  011AF8                     l10741:
  2513                           
  2514                           ;doprnt.c: 818: flag |= 0xC0;
  2515  011AF8  0EC0               	movlw	192
  2516  011AFA  0100               	movlb	0	; () banked
  2517  011AFC  13D0               	iorwf	printf@flag& (0+255),f,b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 822: }
  2521                           
  2522                           ;doprnt.c: 819: break;
  2523  011AFE  D018               	goto	l10747
  2524  011B00                     l10745:
  2525                           
  2526                           ; BSR set to: 0
  2527  011B00  C0CC  FFF6         	movff	printf@f,tblptrl
  2528  011B04  C0CD  FFF7         	movff	printf@f+1,tblptrh
  2529  011B08  0100               	movlb	0	; () banked
  2530  011B0A  4BCC               	infsnz	printf@f& (0+255),f,b
  2531  011B0C  2BCD               	incf	(printf@f+1)& (0+255),f,b
  2532  011B0E                     	if	0	;tblptru may be non-zero
  2533  011B0E                     	endif
  2534  011B0E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2535  011B0E  0E00               	movlw	low (__mediumconst shr (0+16))
  2536  011B10  6EF8               	movwf	tblptru,c
  2537  011B12                     	endif
  2538  011B12  0008               	tblrd		*
  2539  011B14  CFF5 F0D6          	movff	tablat,printf@c
  2540  011B18  0100               	movlb	0	; () banked
  2541  011B1A  51D6               	movf	printf@c& (0+255),w,b
  2542                           
  2543                           ; Switch size 1, requested type "space"
  2544                           ; Number of cases is 3, Range of values is 0 to 117
  2545                           ; switch strategies available:
  2546                           ; Name         Instructions Cycles
  2547                           ; simple_byte           10     6 (average)
  2548                           ;	Chosen strategy is simple_byte
  2549  011B1C  0A00               	xorlw	0	; case 0
  2550  011B1E  B4D8               	btfsc	status,2,c
  2551  011B20  0012               	return	
  2552  011B22  0A63               	xorlw	99	; case 99
  2553  011B24  B4D8               	btfsc	status,2,c
  2554  011B26  D7D7               	goto	l10735
  2555  011B28  0A16               	xorlw	22	; case 117
  2556  011B2A  B4D8               	btfsc	status,2,c
  2557  011B2C  D7E5               	goto	l10741
  2558  011B2E  D7DF               	goto	l10739
  2559  011B30                     l10747:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;doprnt.c: 1273: {
  2563                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2564  011B30  C0D4  FFD9         	movff	printf@ap,fsr2l
  2565  011B34  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  2566  011B38  CFDE F0D1          	movff	postinc2,printf@val
  2567  011B3C  CFDD F0D2          	movff	postdec2,printf@val+1
  2568                           
  2569                           ; BSR set to: 0
  2570  011B40  0E02               	movlw	2
  2571  011B42  0100               	movlb	0	; () banked
  2572  011B44  27D4               	addwf	printf@ap& (0+255),f,b
  2573  011B46  0E00               	movlw	0
  2574  011B48  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1287: }
  2578                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2579  011B4A  0E01               	movlw	1
  2580  011B4C  0100               	movlb	0	; () banked
  2581  011B4E  6FD6               	movwf	printf@c& (0+255),b
  2582  011B50                     l10753:
  2583                           
  2584                           ; BSR set to: 0
  2585  011B50  0E05               	movlw	5
  2586  011B52  0100               	movlb	0	; () banked
  2587  011B54  19D6               	xorwf	printf@c& (0+255),w,b
  2588  011B56  B4D8               	btfsc	status,2,c
  2589  011B58  D019               	goto	l1853
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 1306: if(val < dpowers[c])
  2593                           
  2594                           ; BSR set to: 0
  2595                           
  2596                           ; BSR set to: 0
  2597  011B5A  0100               	movlb	0	; () banked
  2598  011B5C  51D6               	movf	printf@c& (0+255),w,b
  2599  011B5E  0D02               	mullw	2
  2600  011B60  0ED5               	movlw	low _dpowers
  2601  011B62  24F3               	addwf	prodl,w,c
  2602  011B64  6EF6               	movwf	tblptrl,c
  2603  011B66  0EFD               	movlw	high _dpowers
  2604  011B68  20F4               	addwfc	prodh,w,c
  2605  011B6A  6EF7               	movwf	tblptrh,c
  2606  011B6C                     	if	1	;There are 3 active tblptr bytes
  2607  011B6C  6AF8               	clrf	tblptru,c
  2608  011B6E  0E00               	movlw	low (__mediumconst shr (0+16))
  2609  011B70  22F8               	addwfc	tblptru,f,c
  2610  011B72                     	endif
  2611  011B72  0009               	tblrd		*+
  2612  011B74  50F5               	movf	tablat,w,c
  2613  011B76  0100               	movlb	0	; () banked
  2614  011B78  5DD1               	subwf	printf@val& (0+255),w,b
  2615  011B7A  0009               	tblrd		*+
  2616  011B7C  50F5               	movf	tablat,w,c
  2617  011B7E  0100               	movlb	0	; () banked
  2618  011B80  59D2               	subwfb	(printf@val+1)& (0+255),w,b
  2619  011B82  A0D8               	btfss	status,0,c
  2620  011B84  D003               	goto	l1853
  2621                           
  2622                           ; BSR set to: 0
  2623                           
  2624                           ; BSR set to: 0
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;doprnt.c: 1307: break;
  2628  011B86  0100               	movlb	0	; () banked
  2629  011B88  2BD6               	incf	printf@c& (0+255),f,b
  2630  011B8A  D7E2               	goto	l10753
  2631  011B8C                     l1853:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 1422: {
  2635                           ;doprnt.c: 1469: }
  2636                           ;doprnt.c: 1472: prec = c;
  2637  011B8C  C0D6  F0D3         	movff	printf@c,printf@prec
  2638                           
  2639                           ;doprnt.c: 1474: while(prec--) {
  2640  011B90  D02C               	goto	l10769
  2641  011B92                     l10765:
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;doprnt.c: 1478: {
  2645                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2646  011B92  0100               	movlb	0	; () banked
  2647  011B94  51D3               	movf	printf@prec& (0+255),w,b
  2648  011B96  0D02               	mullw	2
  2649  011B98  0ED5               	movlw	low _dpowers
  2650  011B9A  24F3               	addwf	prodl,w,c
  2651  011B9C  6EF6               	movwf	tblptrl,c
  2652  011B9E  0EFD               	movlw	high _dpowers
  2653  011BA0  20F4               	addwfc	prodh,w,c
  2654  011BA2  6EF7               	movwf	tblptrh,c
  2655  011BA4                     	if	1	;There are 3 active tblptr bytes
  2656  011BA4  6AF8               	clrf	tblptru,c
  2657  011BA6  0E00               	movlw	low (__mediumconst shr (0+16))
  2658  011BA8  22F8               	addwfc	tblptru,f,c
  2659  011BAA                     	endif
  2660  011BAA  0009               	tblrd		*+
  2661  011BAC  CFF5 F0B9          	movff	tablat,___lwdiv@divisor
  2662  011BB0  000A               	tblrd		*-
  2663  011BB2  CFF5 F0BA          	movff	tablat,___lwdiv@divisor+1
  2664  011BB6  C0D1  F0B7         	movff	printf@val,___lwdiv@dividend
  2665  011BBA  C0D2  F0B8         	movff	printf@val+1,___lwdiv@dividend+1
  2666  011BBE  ECD7  F097         	call	___lwdiv	;wreg free
  2667  011BC2  C0B7  F0BE         	movff	?___lwdiv,___lwmod@dividend
  2668  011BC6  C0B8  F0BF         	movff	?___lwdiv+1,___lwmod@dividend+1
  2669  011BCA  0E00               	movlw	0
  2670  011BCC  0100               	movlb	0	; () banked
  2671  011BCE  6FC1               	movwf	(___lwmod@divisor+1)& (0+255),b
  2672  011BD0  0E0A               	movlw	10
  2673  011BD2  6FC0               	movwf	___lwmod@divisor& (0+255),b
  2674  011BD4  EC9F  F09A         	call	___lwmod	;wreg free
  2675  011BD8  0100               	movlb	0	; () banked
  2676  011BDA  51BE               	movf	?___lwmod& (0+255),w,b
  2677  011BDC  0F30               	addlw	48
  2678  011BDE  0100               	movlb	0	; () banked
  2679  011BE0  6FD6               	movwf	printf@c& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;doprnt.c: 1523: }
  2683                           ;doprnt.c: 1524: (putch(c) );
  2684  011BE2  0100               	movlb	0	; () banked
  2685  011BE4  51D6               	movf	printf@c& (0+255),w,b
  2686  011BE6  ECEC  F09E         	call	_putch
  2687  011BEA                     l10769:
  2688  011BEA  0100               	movlb	0	; () banked
  2689  011BEC  07D3               	decf	printf@prec& (0+255),f,b
  2690  011BEE  0100               	movlb	0	; () banked
  2691  011BF0  29D3               	incf	printf@prec& (0+255),w,b
  2692  011BF2  A4D8               	btfss	status,2,c
  2693  011BF4  D7CE               	goto	l10765
  2694  011BF6                     l10771:
  2695  011BF6  C0CC  FFF6         	movff	printf@f,tblptrl
  2696  011BFA  C0CD  FFF7         	movff	printf@f+1,tblptrh
  2697  011BFE  0100               	movlb	0	; () banked
  2698  011C00  4BCC               	infsnz	printf@f& (0+255),f,b
  2699  011C02  2BCD               	incf	(printf@f+1)& (0+255),f,b
  2700  011C04                     	if	0	;tblptru may be non-zero
  2701  011C04                     	endif
  2702  011C04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2703  011C04  0E00               	movlw	low (__mediumconst shr (0+16))
  2704  011C06  6EF8               	movwf	tblptru,c
  2705  011C08                     	endif
  2706  011C08  0008               	tblrd		*
  2707  011C0A  CFF5 F0D6          	movff	tablat,printf@c
  2708  011C0E  0100               	movlb	0	; () banked
  2709  011C10  51D6               	movf	printf@c& (0+255),w,b
  2710  011C12  B4D8               	btfsc	status,2,c
  2711  011C14  0012               	return	
  2712  011C16  D751               	goto	l10729
  2713  011C18                     __end_of_printf:
  2714                           	opt stack 0
  2715                           tblptru	equ	0xFF8
  2716                           tblptrh	equ	0xFF7
  2717                           tblptrl	equ	0xFF6
  2718                           tablat	equ	0xFF5
  2719                           prodh	equ	0xFF4
  2720                           prodl	equ	0xFF3
  2721                           intcon	equ	0xFF2
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1h	equ	0xFE2
  2726                           fsr1l	equ	0xFE1
  2727                           indf2	equ	0xFDF
  2728                           postinc2	equ	0xFDE
  2729                           postdec2	equ	0xFDD
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _putch *****************
  2735 ;; Defined at:
  2736 ;;		line 454 in file "Library/Console.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  c               1    wreg     unsigned char 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  c               1   20[BANK0 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;Total ram usage:        1 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:   11
  2757 ;; This function calls:
  2758 ;;		_Console_PrintChar
  2759 ;; This function is called by:
  2760 ;;		_printf
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text2
  2765  013DD8                     __ptext2:
  2766                           	opt stack 0
  2767  013DD8                     _putch:
  2768                           	opt stack 18
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;incstack = 0
  2772                           ;putch@c stored from wreg
  2773  013DD8  0100               	movlb	0	; () banked
  2774  013DDA  6FCB               	movwf	putch@c& (0+255),b
  2775                           
  2776                           ;Console.c: 456: Console_PrintChar(c);
  2777  013DDC  0100               	movlb	0	; () banked
  2778  013DDE  51CB               	movf	putch@c& (0+255),w,b
  2779  013DE0  EC1A  F08B         	call	_Console_PrintChar
  2780  013DE4  0012               	return		;funcret
  2781  013DE6                     __end_of_putch:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           prodh	equ	0xFF4
  2788                           prodl	equ	0xFF3
  2789                           intcon	equ	0xFF2
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _Console_PrintChar *****************
  2803 ;; Defined at:
  2804 ;;		line 322 in file "Library/Console.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  pInput          1    wreg     unsigned char 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  pInput          1   19[BANK0 ] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        4 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:   10
  2825 ;; This function calls:
  2826 ;;		_Console_Backspace
  2827 ;;		_Console_FormFeed
  2828 ;;		_Console_IncrementCursor
  2829 ;;		_Console_NewLine
  2830 ;;		_Console_ResetCursor
  2831 ;;		_Console_Tab
  2832 ;; This function is called by:
  2833 ;;		_putch
  2834 ;;		_Console_PrintString
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text3
  2839  011634                     __ptext3:
  2840                           	opt stack 0
  2841  011634                     _Console_PrintChar:
  2842                           	opt stack 18
  2843                           
  2844                           ;incstack = 0
  2845                           ;Console_PrintChar@pInput stored from wreg
  2846  011634  0100               	movlb	0	; () banked
  2847  011636  6FCA               	movwf	Console_PrintChar@pInput& (0+255),b
  2848                           
  2849                           ;Console.c: 324: switch(pInput)
  2850  011638  D0A8               	goto	l9885
  2851  01163A                     l9841:
  2852                           
  2853                           ;Console.c: 327: case '\n':
  2854                           ;Console.c: 328: Console_NewLine();
  2855  01163A  EC46  F096         	call	_Console_NewLine	;wreg free
  2856                           
  2857                           ;Console.c: 329: return;
  2858  01163E  0012               	return	
  2859  011640                     l9845:
  2860                           
  2861                           ;Console.c: 331: Console_Backspace();
  2862  011640  ECA2  F09B         	call	_Console_Backspace	;wreg free
  2863                           
  2864                           ;Console.c: 332: return;
  2865  011644  0012               	return	
  2866  011646                     l9849:
  2867                           
  2868                           ;Console.c: 334: Console_FormFeed();
  2869  011646  EC8F  F096         	call	_Console_FormFeed	;wreg free
  2870                           
  2871                           ;Console.c: 335: return;
  2872  01164A  0012               	return	
  2873  01164C                     l9853:
  2874                           
  2875                           ;Console.c: 337: Console_Tab();
  2876  01164C  ECE1  F091         	call	_Console_Tab	;wreg free
  2877                           
  2878                           ;Console.c: 338: return;
  2879  011650  0012               	return	
  2880  011652                     l9857:
  2881                           
  2882                           ;Console.c: 340: Console_IncrementCursor();
  2883  011652  EC0A  F09A         	call	_Console_IncrementCursor	;wreg free
  2884                           
  2885                           ;Console.c: 341: return;
  2886  011656  0012               	return	
  2887  011658                     l9861:
  2888                           
  2889                           ;Console.c: 343: Console_ResetCursor();
  2890  011658  ECB6  F09E         	call	_Console_ResetCursor	;wreg free
  2891                           
  2892                           ;Console.c: 344: return;
  2893  01165C  0012               	return	
  2894  01165E                     l9865:
  2895                           
  2896                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  2897  01165E  C0CA  F0C7         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  2898  011662  0E7F               	movlw	127
  2899  011664  0100               	movlb	0	; () banked
  2900  011666  17C7               	andwf	??_Console_PrintChar& (0+255),f,b
  2901  011668  5037               	movf	_lBufferY,w,c
  2902  01166A  0D14               	mullw	20
  2903  01166C  0E04               	movlw	low _lBuffer
  2904  01166E  0100               	movlb	0	; () banked
  2905  011670  6FC8               	movwf	(??_Console_PrintChar+1)& (0+255),b
  2906  011672  0E02               	movlw	high _lBuffer
  2907  011674  0100               	movlb	0	; () banked
  2908  011676  6FC9               	movwf	(??_Console_PrintChar+2)& (0+255),b
  2909  011678  50F3               	movf	prodl,w,c
  2910  01167A  0100               	movlb	0	; () banked
  2911  01167C  27C8               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  2912  01167E  50F4               	movf	prodh,w,c
  2913  011680  0100               	movlb	0	; () banked
  2914  011682  23C9               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  2915  011684  5036               	movf	_lBufferX,w,c
  2916  011686  0D01               	mullw	1
  2917  011688  50F3               	movf	prodl,w,c
  2918  01168A  0100               	movlb	0	; () banked
  2919  01168C  25C8               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  2920  01168E  6ED9               	movwf	fsr2l,c
  2921  011690  50F4               	movf	prodh,w,c
  2922  011692  0100               	movlb	0	; () banked
  2923  011694  21C9               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  2924  011696  6EDA               	movwf	fsr2h,c
  2925  011698  50DF               	movf	indf2,w,c
  2926  01169A  0B7F               	andlw	127
  2927  01169C  0100               	movlb	0	; () banked
  2928  01169E  19C7               	xorwf	??_Console_PrintChar& (0+255),w,b
  2929  0116A0  B4D8               	btfsc	status,2,c
  2930  0116A2  D02B               	goto	l9873
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;Console.c: 351: {
  2934                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  2935  0116A4  0E01               	movlw	1
  2936  0116A6  0100               	movlb	0	; () banked
  2937  0116A8  6FFF               	movwf	_change& (0+255),b
  2938                           
  2939                           ; BSR set to: 0
  2940  0116AA  5037               	movf	_lBufferY,w,c
  2941  0116AC  0D14               	mullw	20
  2942  0116AE  0E04               	movlw	low _lBuffer
  2943  0116B0  0100               	movlb	0	; () banked
  2944  0116B2  6FC7               	movwf	??_Console_PrintChar& (0+255),b
  2945  0116B4  0E02               	movlw	high _lBuffer
  2946  0116B6  0100               	movlb	0	; () banked
  2947  0116B8  6FC8               	movwf	(??_Console_PrintChar+1)& (0+255),b
  2948  0116BA  50F3               	movf	prodl,w,c
  2949  0116BC  0100               	movlb	0	; () banked
  2950  0116BE  27C7               	addwf	??_Console_PrintChar& (0+255),f,b
  2951  0116C0  50F4               	movf	prodh,w,c
  2952  0116C2  0100               	movlb	0	; () banked
  2953  0116C4  23C8               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  2954  0116C6  5036               	movf	_lBufferX,w,c
  2955  0116C8  0D01               	mullw	1
  2956  0116CA  50F3               	movf	prodl,w,c
  2957  0116CC  0100               	movlb	0	; () banked
  2958  0116CE  25C7               	addwf	??_Console_PrintChar& (0+255),w,b
  2959  0116D0  6ED9               	movwf	fsr2l,c
  2960  0116D2  50F4               	movf	prodh,w,c
  2961  0116D4  0100               	movlb	0	; () banked
  2962  0116D6  21C8               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  2963  0116D8  6EDA               	movwf	fsr2h,c
  2964  0116DA  0100               	movlb	0	; () banked
  2965  0116DC  51CA               	movf	Console_PrintChar@pInput& (0+255),w,b
  2966  0116DE  0980               	iorlw	128
  2967  0116E0  6EDF               	movwf	indf2,c
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  2971  0116E2  5037               	movf	_lBufferY,w,c
  2972  0116E4  0D02               	mullw	2
  2973  0116E6  0E00               	movlw	low _lCBuffer
  2974  0116E8  24F3               	addwf	prodl,w,c
  2975  0116EA  6ED9               	movwf	fsr2l,c
  2976  0116EC  0E01               	movlw	high _lCBuffer
  2977  0116EE  20F4               	addwfc	prodh,w,c
  2978  0116F0  6EDA               	movwf	fsr2h,c
  2979  0116F2  C0FD  FFDE         	movff	_gForecolour,postinc2
  2980  0116F6  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  2981  0116FA                     l9873:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;Console.c: 354: }
  2985                           ;Console.c: 368: if(Console_IncrementCursor())
  2986  0116FA  EC0A  F09A         	call	_Console_IncrementCursor	;wreg free
  2987  0116FE  0900               	iorlw	0
  2988  011700  B4D8               	btfsc	status,2,c
  2989  011702  0012               	return	
  2990                           
  2991                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  2992  011704  C0CA  F0C7         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  2993  011708  0E7F               	movlw	127
  2994  01170A  0100               	movlb	0	; () banked
  2995  01170C  17C7               	andwf	??_Console_PrintChar& (0+255),f,b
  2996  01170E  5037               	movf	_lBufferY,w,c
  2997  011710  0D14               	mullw	20
  2998  011712  0E04               	movlw	low _lBuffer
  2999  011714  0100               	movlb	0	; () banked
  3000  011716  6FC8               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3001  011718  0E02               	movlw	high _lBuffer
  3002  01171A  0100               	movlb	0	; () banked
  3003  01171C  6FC9               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3004  01171E  50F3               	movf	prodl,w,c
  3005  011720  0100               	movlb	0	; () banked
  3006  011722  27C8               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3007  011724  50F4               	movf	prodh,w,c
  3008  011726  0100               	movlb	0	; () banked
  3009  011728  23C9               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3010  01172A  5036               	movf	_lBufferX,w,c
  3011  01172C  0D01               	mullw	1
  3012  01172E  50F3               	movf	prodl,w,c
  3013  011730  0100               	movlb	0	; () banked
  3014  011732  25C8               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3015  011734  6ED9               	movwf	fsr2l,c
  3016  011736  50F4               	movf	prodh,w,c
  3017  011738  0100               	movlb	0	; () banked
  3018  01173A  21C9               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3019  01173C  6EDA               	movwf	fsr2h,c
  3020  01173E  50DF               	movf	indf2,w,c
  3021  011740  0B7F               	andlw	127
  3022  011742  0100               	movlb	0	; () banked
  3023  011744  19C7               	xorwf	??_Console_PrintChar& (0+255),w,b
  3024  011746  B4D8               	btfsc	status,2,c
  3025  011748  0012               	return	
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3029  01174A  0E01               	movlw	1
  3030  01174C  0100               	movlb	0	; () banked
  3031  01174E  6FFF               	movwf	_change& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034  011750  5037               	movf	_lBufferY,w,c
  3035  011752  0D14               	mullw	20
  3036  011754  0E04               	movlw	low _lBuffer
  3037  011756  0100               	movlb	0	; () banked
  3038  011758  6FC7               	movwf	??_Console_PrintChar& (0+255),b
  3039  01175A  0E02               	movlw	high _lBuffer
  3040  01175C  0100               	movlb	0	; () banked
  3041  01175E  6FC8               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3042  011760  50F3               	movf	prodl,w,c
  3043  011762  0100               	movlb	0	; () banked
  3044  011764  27C7               	addwf	??_Console_PrintChar& (0+255),f,b
  3045  011766  50F4               	movf	prodh,w,c
  3046  011768  0100               	movlb	0	; () banked
  3047  01176A  23C8               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3048  01176C  5036               	movf	_lBufferX,w,c
  3049  01176E  0D01               	mullw	1
  3050  011770  50F3               	movf	prodl,w,c
  3051  011772  0100               	movlb	0	; () banked
  3052  011774  25C7               	addwf	??_Console_PrintChar& (0+255),w,b
  3053  011776  6ED9               	movwf	fsr2l,c
  3054  011778  50F4               	movf	prodh,w,c
  3055  01177A  0100               	movlb	0	; () banked
  3056  01177C  21C8               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3057  01177E  6EDA               	movwf	fsr2h,c
  3058  011780  0100               	movlb	0	; () banked
  3059  011782  51CA               	movf	Console_PrintChar@pInput& (0+255),w,b
  3060  011784  0980               	iorlw	128
  3061  011786  6EDF               	movwf	indf2,c
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;Console.c: 372: };
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;Console.c: 371: return;
  3068                           
  3069                           ; BSR set to: 0
  3070                           
  3071                           ; BSR set to: 0
  3072  011788  0012               	return	
  3073  01178A                     l9885:
  3074  01178A  0100               	movlb	0	; () banked
  3075  01178C  51CA               	movf	Console_PrintChar@pInput& (0+255),w,b
  3076                           
  3077                           ; Switch size 1, requested type "space"
  3078                           ; Number of cases is 8, Range of values is 7 to 35
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; simple_byte           25    13 (average)
  3082                           ;	Chosen strategy is simple_byte
  3083  01178E  0A07               	xorlw	7	; case 7
  3084  011790  B4D8               	btfsc	status,2,c
  3085  011792  D75F               	goto	l9857
  3086  011794  0A0F               	xorlw	15	; case 8
  3087  011796  B4D8               	btfsc	status,2,c
  3088  011798  D753               	goto	l9845
  3089  01179A  0A01               	xorlw	1	; case 9
  3090  01179C  B4D8               	btfsc	status,2,c
  3091  01179E  D756               	goto	l9853
  3092  0117A0  0A03               	xorlw	3	; case 10
  3093  0117A2  B4D8               	btfsc	status,2,c
  3094  0117A4  D74A               	goto	l9841
  3095  0117A6  0A06               	xorlw	6	; case 12
  3096  0117A8  B4D8               	btfsc	status,2,c
  3097  0117AA  D74D               	goto	l9849
  3098  0117AC  0A01               	xorlw	1	; case 13
  3099  0117AE  B4D8               	btfsc	status,2,c
  3100  0117B0  D744               	goto	l9841
  3101  0117B2  0A2D               	xorlw	45	; case 32
  3102  0117B4  B4D8               	btfsc	status,2,c
  3103  0117B6  D753               	goto	l9865
  3104  0117B8  0A03               	xorlw	3	; case 35
  3105  0117BA  B4D8               	btfsc	status,2,c
  3106  0117BC  D74D               	goto	l9861
  3107  0117BE  D74F               	goto	l9865
  3108  0117C0                     __end_of_Console_PrintChar:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           intcon	equ	0xFF2
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1h	equ	0xFE2
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _Console_Tab *****************
  3130 ;; Defined at:
  3131 ;;		line 260 in file "Library/Console.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  c               1   15[BANK0 ] unsigned char 
  3136 ;;  i               1   14[BANK0 ] unsigned char 
  3137 ;;  t               1   13[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;Total ram usage:        8 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    9
  3154 ;; This function calls:
  3155 ;;		_Console_ClearCursor
  3156 ;;		_Console_IncrementCursor
  3157 ;;		___awdiv
  3158 ;; This function is called by:
  3159 ;;		_Console_PrintChar
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text4
  3164  0123C2                     __ptext4:
  3165                           	opt stack 0
  3166  0123C2                     _Console_Tab:
  3167                           	opt stack 18
  3168                           
  3169                           ;Console.c: 262: UINT8 i = 0;
  3170                           
  3171                           ;incstack = 0
  3172  0123C2  0E00               	movlw	0
  3173  0123C4  0100               	movlb	0	; () banked
  3174  0123C6  6FC5               	movwf	Console_Tab@i& (0+255),b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  3178  0123C8  0EFA               	movlw	250
  3179  0123CA  243F               	addwf	_gCursor,w,c
  3180  0123CC  0100               	movlb	0	; () banked
  3181  0123CE  6FB7               	movwf	___awdiv@dividend& (0+255),b
  3182  0123D0  0EFF               	movlw	255
  3183  0123D2  2040               	addwfc	_gCursor+1,w,c
  3184  0123D4  0100               	movlb	0	; () banked
  3185  0123D6  6FB8               	movwf	(___awdiv@dividend+1)& (0+255),b
  3186  0123D8  0E00               	movlw	0
  3187  0123DA  0100               	movlb	0	; () banked
  3188  0123DC  6FBA               	movwf	(___awdiv@divisor+1)& (0+255),b
  3189  0123DE  0E06               	movlw	6
  3190  0123E0  6FB9               	movwf	___awdiv@divisor& (0+255),b
  3191  0123E2  EC42  F092         	call	___awdiv	;wreg free
  3192  0123E6  0100               	movlb	0	; () banked
  3193  0123E8  51B7               	movf	?___awdiv& (0+255),w,b
  3194  0123EA  0100               	movlb	0	; () banked
  3195  0123EC  6FC6               	movwf	Console_Tab@c& (0+255),b
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;Console.c: 264: UINT8 t = c/4;
  3199  0123EE  C0C6  F0B7         	movff	Console_Tab@c,___awdiv@dividend
  3200  0123F2  0100               	movlb	0	; () banked
  3201  0123F4  6BB8               	clrf	(___awdiv@dividend+1)& (0+255),b
  3202  0123F6  0E00               	movlw	0
  3203  0123F8  0100               	movlb	0	; () banked
  3204  0123FA  6FBA               	movwf	(___awdiv@divisor+1)& (0+255),b
  3205  0123FC  0E04               	movlw	4
  3206  0123FE  6FB9               	movwf	___awdiv@divisor& (0+255),b
  3207  012400  EC42  F092         	call	___awdiv	;wreg free
  3208  012404  0100               	movlb	0	; () banked
  3209  012406  51B7               	movf	?___awdiv& (0+255),w,b
  3210  012408  0100               	movlb	0	; () banked
  3211  01240A  6FC4               	movwf	Console_Tab@t& (0+255),b
  3212                           
  3213                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  3214  01240C  0E00               	movlw	0
  3215  01240E  0100               	movlb	0	; () banked
  3216  012410  6FC5               	movwf	Console_Tab@i& (0+255),b
  3217  012412  D006               	goto	l9259
  3218  012414                     l9255:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;Console.c: 266: {
  3222                           ;Console.c: 267: Console_ClearCursor();
  3223  012414  EC1B  F09D         	call	_Console_ClearCursor	;wreg free
  3224                           
  3225                           ;Console.c: 268: Console_IncrementCursor();
  3226  012418  EC0A  F09A         	call	_Console_IncrementCursor	;wreg free
  3227  01241C  0100               	movlb	0	; () banked
  3228  01241E  2BC5               	incf	Console_Tab@i& (0+255),f,b
  3229  012420                     l9259:
  3230                           
  3231                           ; BSR set to: 0
  3232  012420  0100               	movlb	0	; () banked
  3233  012422  51C4               	movf	Console_Tab@t& (0+255),w,b
  3234  012424  0D04               	mullw	4
  3235  012426  1EF3               	comf	prodl,f,c
  3236  012428  1EF4               	comf	prodh,f,c
  3237  01242A  4AF3               	infsnz	prodl,f,c
  3238  01242C  2AF4               	incf	prodh,f,c
  3239  01242E  0100               	movlb	0	; () banked
  3240  012430  51C6               	movf	Console_Tab@c& (0+255),w,b
  3241  012432  0100               	movlb	0	; () banked
  3242  012434  6FBF               	movwf	??_Console_Tab& (0+255),b
  3243  012436  6BC0               	clrf	(??_Console_Tab+1)& (0+255),b
  3244  012438  50F3               	movf	prodl,w,c
  3245  01243A  0100               	movlb	0	; () banked
  3246  01243C  27BF               	addwf	??_Console_Tab& (0+255),f,b
  3247  01243E  50F4               	movf	prodh,w,c
  3248  012440  0100               	movlb	0	; () banked
  3249  012442  23C0               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3250  012444  0100               	movlb	0	; () banked
  3251  012446  1FBF               	comf	??_Console_Tab& (0+255),f,b
  3252  012448  1FC0               	comf	(??_Console_Tab+1)& (0+255),f,b
  3253  01244A  4BBF               	infsnz	??_Console_Tab& (0+255),f,b
  3254  01244C  2BC0               	incf	(??_Console_Tab+1)& (0+255),f,b
  3255  01244E  0E04               	movlw	4
  3256  012450  0100               	movlb	0	; () banked
  3257  012452  27BF               	addwf	??_Console_Tab& (0+255),f,b
  3258  012454  0E00               	movlw	0
  3259  012456  23C0               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3260  012458  0100               	movlb	0	; () banked
  3261  01245A  51C5               	movf	Console_Tab@i& (0+255),w,b
  3262  01245C  0100               	movlb	0	; () banked
  3263  01245E  6FC1               	movwf	(??_Console_Tab+2)& (0+255),b
  3264  012460  6BC2               	clrf	(??_Console_Tab+3)& (0+255),b
  3265  012462  0100               	movlb	0	; () banked
  3266  012464  51BF               	movf	??_Console_Tab& (0+255),w,b
  3267  012466  0100               	movlb	0	; () banked
  3268  012468  5DC1               	subwf	(??_Console_Tab+2)& (0+255),w,b
  3269  01246A  0100               	movlb	0	; () banked
  3270  01246C  51C2               	movf	(??_Console_Tab+3)& (0+255),w,b
  3271  01246E  0A80               	xorlw	128
  3272  012470  0100               	movlb	0	; () banked
  3273  012472  6FC3               	movwf	(??_Console_Tab+4)& (0+255),b
  3274  012474  0100               	movlb	0	; () banked
  3275  012476  51C0               	movf	(??_Console_Tab+1)& (0+255),w,b
  3276  012478  0A80               	xorlw	128
  3277  01247A  0100               	movlb	0	; () banked
  3278  01247C  59C3               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  3279  01247E  B0D8               	btfsc	status,0,c
  3280  012480  0012               	return	
  3281  012482  D7C8               	goto	l9255
  3282  012484                     __end_of_Console_Tab:
  3283                           	opt stack 0
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           intcon	equ	0xFF2
  3291                           postinc0	equ	0xFEE
  3292                           wreg	equ	0xFE8
  3293                           postdec1	equ	0xFE5
  3294                           fsr1h	equ	0xFE2
  3295                           fsr1l	equ	0xFE1
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function ___awdiv *****************
  3304 ;; Defined at:
  3305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  dividend        2    0[BANK0 ] int 
  3308 ;;  divisor         2    2[BANK0 ] int 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  quotient        2    6[BANK0 ] int 
  3311 ;;  sign            1    5[BANK0 ] unsigned char 
  3312 ;;  counter         1    4[BANK0 ] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  2    0[BANK0 ] int 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        8 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    7
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_Console_Tab
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text5
  3337  012484                     __ptext5:
  3338                           	opt stack 0
  3339  012484                     ___awdiv:
  3340                           	opt stack 19
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;incstack = 0
  3344  012484  0E00               	movlw	0
  3345  012486  0100               	movlb	0	; () banked
  3346  012488  6FBC               	movwf	___awdiv@sign& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349  01248A  0100               	movlb	0	; () banked
  3350  01248C  AFBA               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3351  01248E  D008               	goto	l9017
  3352                           
  3353                           ; BSR set to: 0
  3354  012490  0100               	movlb	0	; () banked
  3355  012492  6DB9               	negf	___awdiv@divisor& (0+255),b
  3356  012494  1FBA               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3357  012496  B0D8               	btfsc	status,0,c
  3358  012498  2BBA               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3359                           
  3360                           ; BSR set to: 0
  3361  01249A  0E01               	movlw	1
  3362  01249C  0100               	movlb	0	; () banked
  3363  01249E  6FBC               	movwf	___awdiv@sign& (0+255),b
  3364  0124A0                     l9017:
  3365                           
  3366                           ; BSR set to: 0
  3367  0124A0  0100               	movlb	0	; () banked
  3368  0124A2  AFB8               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3369  0124A4  D008               	goto	l9023
  3370                           
  3371                           ; BSR set to: 0
  3372  0124A6  0100               	movlb	0	; () banked
  3373  0124A8  6DB7               	negf	___awdiv@dividend& (0+255),b
  3374  0124AA  1FB8               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3375  0124AC  B0D8               	btfsc	status,0,c
  3376  0124AE  2BB8               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3377                           
  3378                           ; BSR set to: 0
  3379  0124B0  0E01               	movlw	1
  3380  0124B2  0100               	movlb	0	; () banked
  3381  0124B4  1BBC               	xorwf	___awdiv@sign& (0+255),f,b
  3382  0124B6                     l9023:
  3383                           
  3384                           ; BSR set to: 0
  3385  0124B6  0E00               	movlw	0
  3386  0124B8  0100               	movlb	0	; () banked
  3387  0124BA  6FBE               	movwf	(___awdiv@quotient+1)& (0+255),b
  3388  0124BC  0E00               	movlw	0
  3389  0124BE  6FBD               	movwf	___awdiv@quotient& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392  0124C0  0100               	movlb	0	; () banked
  3393  0124C2  51B9               	movf	___awdiv@divisor& (0+255),w,b
  3394  0124C4  0100               	movlb	0	; () banked
  3395  0124C6  11BA               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3396  0124C8  B4D8               	btfsc	status,2,c
  3397  0124CA  D02C               	goto	l9045
  3398                           
  3399                           ; BSR set to: 0
  3400  0124CC  0E01               	movlw	1
  3401  0124CE  0100               	movlb	0	; () banked
  3402  0124D0  6FBB               	movwf	___awdiv@counter& (0+255),b
  3403  0124D2  D006               	goto	l9031
  3404  0124D4                     l9029:
  3405                           
  3406                           ; BSR set to: 0
  3407  0124D4  0100               	movlb	0	; () banked
  3408  0124D6  90D8               	bcf	status,0,c
  3409  0124D8  37B9               	rlcf	___awdiv@divisor& (0+255),f,b
  3410  0124DA  37BA               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3411  0124DC  0100               	movlb	0	; () banked
  3412  0124DE  2BBB               	incf	___awdiv@counter& (0+255),f,b
  3413  0124E0                     l9031:
  3414                           
  3415                           ; BSR set to: 0
  3416  0124E0  0100               	movlb	0	; () banked
  3417  0124E2  AFBA               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3418  0124E4  D7F7               	goto	l9029
  3419  0124E6                     l9033:
  3420                           
  3421                           ; BSR set to: 0
  3422  0124E6  0100               	movlb	0	; () banked
  3423  0124E8  90D8               	bcf	status,0,c
  3424  0124EA  37BD               	rlcf	___awdiv@quotient& (0+255),f,b
  3425  0124EC  37BE               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3426                           
  3427                           ; BSR set to: 0
  3428  0124EE  0100               	movlb	0	; () banked
  3429  0124F0  51B9               	movf	___awdiv@divisor& (0+255),w,b
  3430  0124F2  0100               	movlb	0	; () banked
  3431  0124F4  5DB7               	subwf	___awdiv@dividend& (0+255),w,b
  3432  0124F6  0100               	movlb	0	; () banked
  3433  0124F8  51BA               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3434  0124FA  0100               	movlb	0	; () banked
  3435  0124FC  59B8               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3436  0124FE  A0D8               	btfss	status,0,c
  3437  012500  D00A               	goto	l9041
  3438                           
  3439                           ; BSR set to: 0
  3440  012502  0100               	movlb	0	; () banked
  3441  012504  51B9               	movf	___awdiv@divisor& (0+255),w,b
  3442  012506  0100               	movlb	0	; () banked
  3443  012508  5FB7               	subwf	___awdiv@dividend& (0+255),f,b
  3444  01250A  0100               	movlb	0	; () banked
  3445  01250C  51BA               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3446  01250E  0100               	movlb	0	; () banked
  3447  012510  5BB8               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3448                           
  3449                           ; BSR set to: 0
  3450  012512  0100               	movlb	0	; () banked
  3451  012514  81BD               	bsf	___awdiv@quotient& (0+255),0,b
  3452  012516                     l9041:
  3453                           
  3454                           ; BSR set to: 0
  3455  012516  0100               	movlb	0	; () banked
  3456  012518  90D8               	bcf	status,0,c
  3457  01251A  33BA               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3458  01251C  33B9               	rrcf	___awdiv@divisor& (0+255),f,b
  3459                           
  3460                           ; BSR set to: 0
  3461  01251E  0100               	movlb	0	; () banked
  3462  012520  2FBB               	decfsz	___awdiv@counter& (0+255),f,b
  3463  012522  D7E1               	goto	l9033
  3464  012524                     l9045:
  3465                           
  3466                           ; BSR set to: 0
  3467  012524  0100               	movlb	0	; () banked
  3468  012526  51BC               	movf	___awdiv@sign& (0+255),w,b
  3469  012528  0100               	movlb	0	; () banked
  3470  01252A  B4D8               	btfsc	status,2,c
  3471  01252C  D005               	goto	l9049
  3472                           
  3473                           ; BSR set to: 0
  3474  01252E  0100               	movlb	0	; () banked
  3475  012530  6DBD               	negf	___awdiv@quotient& (0+255),b
  3476  012532  1FBE               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3477  012534  B0D8               	btfsc	status,0,c
  3478  012536  2BBE               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3479  012538                     l9049:
  3480                           
  3481                           ; BSR set to: 0
  3482  012538  C0BD  F0B7         	movff	___awdiv@quotient,?___awdiv
  3483  01253C  C0BE  F0B8         	movff	___awdiv@quotient+1,?___awdiv+1
  3484  012540  0012               	return	
  3485  012542                     __end_of___awdiv:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           intcon	equ	0xFF2
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postdec1	equ	0xFE5
  3497                           fsr1h	equ	0xFE2
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _Console_IncrementCursor *****************
  3507 ;; Defined at:
  3508 ;;		line 243 in file "Library/Console.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      unsigned char 
  3515 ;; Registers used:
  3516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;Total ram usage:        2 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    8
  3529 ;; This function calls:
  3530 ;;		_Console_FormFeed
  3531 ;;		_Console_NewLine
  3532 ;; This function is called by:
  3533 ;;		_Console_Tab
  3534 ;;		_Console_PrintChar
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text6
  3539  013414                     __ptext6:
  3540                           	opt stack 0
  3541  013414                     _Console_IncrementCursor:
  3542                           	opt stack 18
  3543                           
  3544                           ;Console.c: 246: lBufferX += 1;
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;incstack = 0
  3548  013414  2A36               	incf	_lBufferX,f,c
  3549                           
  3550                           ;Console.c: 248: gCursor.x += 6;
  3551  013416  0E06               	movlw	6
  3552  013418  263F               	addwf	_gCursor,f,c
  3553  01341A  0E00               	movlw	0
  3554  01341C  2240               	addwfc	_gCursor+1,f,c
  3555                           
  3556                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  3557  01341E  0E06               	movlw	6
  3558  013420  243F               	addwf	_gCursor,w,c
  3559  013422  0100               	movlb	0	; () banked
  3560  013424  6FBB               	movwf	??_Console_IncrementCursor& (0+255),b
  3561  013426  0E00               	movlw	0
  3562  013428  2040               	addwfc	_gCursor+1,w,c
  3563  01342A  0100               	movlb	0	; () banked
  3564  01342C  6FBC               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  3565  01342E  0100               	movlb	0	; () banked
  3566  013430  BFBC               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  3567  013432  D009               	goto	l8995
  3568  013434  0100               	movlb	0	; () banked
  3569  013436  51BC               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  3570  013438  E104               	bnz	u5760
  3571  01343A  0E80               	movlw	128
  3572  01343C  0100               	movlb	0	; () banked
  3573  01343E  5DBB               	subwf	??_Console_IncrementCursor& (0+255),w,b
  3574  013440  B0D8               	btfsc	status,0,c
  3575  013442                     u5760:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;Console.c: 250: Console_NewLine();
  3579  013442  EC46  F096         	call	_Console_NewLine	;wreg free
  3580  013446                     l8995:
  3581                           
  3582                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  3583  013446  0E08               	movlw	8
  3584  013448  2441               	addwf	_gCursor+2,w,c
  3585  01344A  0100               	movlb	0	; () banked
  3586  01344C  6FBB               	movwf	??_Console_IncrementCursor& (0+255),b
  3587  01344E  0E00               	movlw	0
  3588  013450  2042               	addwfc	_gCursor+3,w,c
  3589  013452  0100               	movlb	0	; () banked
  3590  013454  6FBC               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  3591  013456  0100               	movlb	0	; () banked
  3592  013458  BFBC               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  3593  01345A  D00C               	goto	l9003
  3594  01345C  0100               	movlb	0	; () banked
  3595  01345E  51BC               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  3596  013460  E105               	bnz	u5770
  3597  013462  0E80               	movlw	128
  3598  013464  0100               	movlb	0	; () banked
  3599  013466  5DBB               	subwf	??_Console_IncrementCursor& (0+255),w,b
  3600  013468  A0D8               	btfss	status,0,c
  3601  01346A  D004               	goto	l9003
  3602  01346C                     u5770:
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;Console.c: 252: {
  3606                           ;Console.c: 253: Console_FormFeed();
  3607  01346C  EC8F  F096         	call	_Console_FormFeed	;wreg free
  3608                           
  3609                           ;Console.c: 254: return 1;
  3610  013470  0E01               	movlw	1
  3611  013472  0012               	return	
  3612  013474                     l9003:
  3613                           
  3614                           ;Console.c: 255: }
  3615                           ;Console.c: 257: return 0;
  3616  013474  0E00               	movlw	0
  3617  013476  0012               	return	
  3618  013478                     __end_of_Console_IncrementCursor:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           prodh	equ	0xFF4
  3625                           prodl	equ	0xFF3
  3626                           intcon	equ	0xFF2
  3627                           postinc0	equ	0xFEE
  3628                           wreg	equ	0xFE8
  3629                           postdec1	equ	0xFE5
  3630                           fsr1h	equ	0xFE2
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _Console_NewLine *****************
  3640 ;; Defined at:
  3641 ;;		line 175 in file "Library/Console.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:        2 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    7
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_Console_IncrementCursor
  3666 ;;		_Console_PrintChar
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text7
  3671  012C8C                     __ptext7:
  3672                           	opt stack 0
  3673  012C8C                     _Console_NewLine:
  3674                           	opt stack 18
  3675                           
  3676                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  3677                           
  3678                           ;incstack = 0
  3679  012C8C  D039               	goto	l8895
  3680  012C8E                     l8887:
  3681                           
  3682                           ;Console.c: 179: {
  3683                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  3684  012C8E  5037               	movf	_lBufferY,w,c
  3685  012C90  0D14               	mullw	20
  3686  012C92  0E04               	movlw	low _lBuffer
  3687  012C94  0100               	movlb	0	; () banked
  3688  012C96  6FB7               	movwf	??_Console_NewLine& (0+255),b
  3689  012C98  0E02               	movlw	high _lBuffer
  3690  012C9A  0100               	movlb	0	; () banked
  3691  012C9C  6FB8               	movwf	(??_Console_NewLine+1)& (0+255),b
  3692  012C9E  50F3               	movf	prodl,w,c
  3693  012CA0  0100               	movlb	0	; () banked
  3694  012CA2  27B7               	addwf	??_Console_NewLine& (0+255),f,b
  3695  012CA4  50F4               	movf	prodh,w,c
  3696  012CA6  0100               	movlb	0	; () banked
  3697  012CA8  23B8               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  3698  012CAA  5036               	movf	_lBufferX,w,c
  3699  012CAC  0D01               	mullw	1
  3700  012CAE  50F3               	movf	prodl,w,c
  3701  012CB0  0100               	movlb	0	; () banked
  3702  012CB2  25B7               	addwf	??_Console_NewLine& (0+255),w,b
  3703  012CB4  6ED9               	movwf	fsr2l,c
  3704  012CB6  50F4               	movf	prodh,w,c
  3705  012CB8  0100               	movlb	0	; () banked
  3706  012CBA  21B8               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  3707  012CBC  6EDA               	movwf	fsr2h,c
  3708  012CBE  50DF               	movf	indf2,w,c
  3709  012CC0  B4D8               	btfsc	status,2,c
  3710  012CC2  D01D               	goto	l8893
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  3714  012CC4  0E01               	movlw	1
  3715  012CC6  0100               	movlb	0	; () banked
  3716  012CC8  6FFF               	movwf	_change& (0+255),b
  3717                           
  3718                           ; BSR set to: 0
  3719  012CCA  5037               	movf	_lBufferY,w,c
  3720  012CCC  0D14               	mullw	20
  3721  012CCE  0E04               	movlw	low _lBuffer
  3722  012CD0  0100               	movlb	0	; () banked
  3723  012CD2  6FB7               	movwf	??_Console_NewLine& (0+255),b
  3724  012CD4  0E02               	movlw	high _lBuffer
  3725  012CD6  0100               	movlb	0	; () banked
  3726  012CD8  6FB8               	movwf	(??_Console_NewLine+1)& (0+255),b
  3727  012CDA  50F3               	movf	prodl,w,c
  3728  012CDC  0100               	movlb	0	; () banked
  3729  012CDE  27B7               	addwf	??_Console_NewLine& (0+255),f,b
  3730  012CE0  50F4               	movf	prodh,w,c
  3731  012CE2  0100               	movlb	0	; () banked
  3732  012CE4  23B8               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  3733  012CE6  5036               	movf	_lBufferX,w,c
  3734  012CE8  0D01               	mullw	1
  3735  012CEA  50F3               	movf	prodl,w,c
  3736  012CEC  0100               	movlb	0	; () banked
  3737  012CEE  25B7               	addwf	??_Console_NewLine& (0+255),w,b
  3738  012CF0  6ED9               	movwf	fsr2l,c
  3739  012CF2  50F4               	movf	prodh,w,c
  3740  012CF4  0100               	movlb	0	; () banked
  3741  012CF6  21B8               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  3742  012CF8  6EDA               	movwf	fsr2h,c
  3743  012CFA  0E80               	movlw	128
  3744  012CFC  6EDF               	movwf	indf2,c
  3745  012CFE                     l8893:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;Console.c: 182: lBufferX ++;
  3749  012CFE  2A36               	incf	_lBufferX,f,c
  3750  012D00                     l8895:
  3751  012D00  0E13               	movlw	19
  3752  012D02  6436               	cpfsgt	_lBufferX,c
  3753  012D04  D7C4               	goto	l8887
  3754                           
  3755                           ;Console.c: 183: }
  3756                           ;Console.c: 185: lBufferX = 0;
  3757  012D06  0E00               	movlw	0
  3758  012D08  6E36               	movwf	_lBufferX,c
  3759                           
  3760                           ;Console.c: 186: lBufferY ++;
  3761  012D0A  2A37               	incf	_lBufferY,f,c
  3762                           
  3763                           ;Console.c: 188: gCursor.y += 8;
  3764  012D0C  0E08               	movlw	8
  3765  012D0E  2641               	addwf	_gCursor+2,f,c
  3766  012D10  0E00               	movlw	0
  3767  012D12  2242               	addwfc	_gCursor+3,f,c
  3768                           
  3769                           ;Console.c: 189: gCursor.x = 6;
  3770  012D14  0E00               	movlw	0
  3771  012D16  6E40               	movwf	_gCursor+1,c
  3772  012D18  0E06               	movlw	6
  3773  012D1A  6E3F               	movwf	_gCursor,c
  3774  012D1C  0012               	return		;funcret
  3775  012D1E                     __end_of_Console_NewLine:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1h	equ	0xFE2
  3788                           fsr1l	equ	0xFE1
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           fsr2h	equ	0xFDA
  3793                           fsr2l	equ	0xFD9
  3794                           status	equ	0xFD8
  3795                           
  3796 ;; *************** function _Console_FormFeed *****************
  3797 ;; Defined at:
  3798 ;;		line 192 in file "Library/Console.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  y               1    3[BANK0 ] unsigned char 
  3803 ;;  x               1    2[BANK0 ] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;Total ram usage:        4 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    7
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_Console_IncrementCursor
  3824 ;;		_Console_PrintChar
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text8
  3829  012D1E                     __ptext8:
  3830                           	opt stack 0
  3831  012D1E                     _Console_FormFeed:
  3832                           	opt stack 18
  3833                           
  3834                           ;Console.c: 195: lBufferX = 0;
  3835                           
  3836                           ;incstack = 0
  3837  012D1E  0E00               	movlw	0
  3838  012D20  6E36               	movwf	_lBufferX,c
  3839                           
  3840                           ;Console.c: 196: lBufferY = 0;
  3841  012D22  0E00               	movlw	0
  3842  012D24  6E37               	movwf	_lBufferY,c
  3843                           
  3844                           ;Console.c: 197: UINT8 x, y;
  3845                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  3846  012D26  0E00               	movlw	0
  3847  012D28  0100               	movlb	0	; () banked
  3848  012D2A  6FBA               	movwf	Console_FormFeed@y& (0+255),b
  3849  012D2C                     l8907:
  3850                           
  3851                           ; BSR set to: 0
  3852  012D2C  0E0E               	movlw	14
  3853  012D2E  0100               	movlb	0	; () banked
  3854  012D30  65BA               	cpfsgt	Console_FormFeed@y& (0+255),b
  3855  012D32  D001               	goto	l8911
  3856  012D34  D02D               	goto	l8929
  3857  012D36                     l8911:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  3861  012D36  0E00               	movlw	0
  3862  012D38  0100               	movlb	0	; () banked
  3863  012D3A  6FB9               	movwf	Console_FormFeed@x& (0+255),b
  3864  012D3C                     l8913:
  3865                           
  3866                           ; BSR set to: 0
  3867  012D3C  0E13               	movlw	19
  3868  012D3E  0100               	movlb	0	; () banked
  3869  012D40  65B9               	cpfsgt	Console_FormFeed@x& (0+255),b
  3870  012D42  D001               	goto	l8917
  3871  012D44  D022               	goto	l8925
  3872  012D46                     l8917:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  3876  012D46  0E01               	movlw	1
  3877  012D48  0100               	movlb	0	; () banked
  3878  012D4A  6FFF               	movwf	_change& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881  012D4C  0100               	movlb	0	; () banked
  3882  012D4E  51BA               	movf	Console_FormFeed@y& (0+255),w,b
  3883  012D50  0D14               	mullw	20
  3884  012D52  0E04               	movlw	low _lBuffer
  3885  012D54  0100               	movlb	0	; () banked
  3886  012D56  6FB7               	movwf	??_Console_FormFeed& (0+255),b
  3887  012D58  0E02               	movlw	high _lBuffer
  3888  012D5A  0100               	movlb	0	; () banked
  3889  012D5C  6FB8               	movwf	(??_Console_FormFeed+1)& (0+255),b
  3890  012D5E  50F3               	movf	prodl,w,c
  3891  012D60  0100               	movlb	0	; () banked
  3892  012D62  27B7               	addwf	??_Console_FormFeed& (0+255),f,b
  3893  012D64  50F4               	movf	prodh,w,c
  3894  012D66  0100               	movlb	0	; () banked
  3895  012D68  23B8               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  3896  012D6A  0100               	movlb	0	; () banked
  3897  012D6C  51B9               	movf	Console_FormFeed@x& (0+255),w,b
  3898  012D6E  0D01               	mullw	1
  3899  012D70  50F3               	movf	prodl,w,c
  3900  012D72  0100               	movlb	0	; () banked
  3901  012D74  25B7               	addwf	??_Console_FormFeed& (0+255),w,b
  3902  012D76  6ED9               	movwf	fsr2l,c
  3903  012D78  50F4               	movf	prodh,w,c
  3904  012D7A  0100               	movlb	0	; () banked
  3905  012D7C  21B8               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  3906  012D7E  6EDA               	movwf	fsr2h,c
  3907  012D80  0E80               	movlw	128
  3908  012D82  6EDF               	movwf	indf2,c
  3909                           
  3910                           ; BSR set to: 0
  3911  012D84  0100               	movlb	0	; () banked
  3912  012D86  2BB9               	incf	Console_FormFeed@x& (0+255),f,b
  3913  012D88  D7D9               	goto	l8913
  3914  012D8A                     l8925:
  3915                           
  3916                           ; BSR set to: 0
  3917  012D8A  0100               	movlb	0	; () banked
  3918  012D8C  2BBA               	incf	Console_FormFeed@y& (0+255),f,b
  3919  012D8E  D7CE               	goto	l8907
  3920  012D90                     l8929:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;Console.c: 204: clearall = 1;
  3924  012D90  0E01               	movlw	1
  3925  012D92  0100               	movlb	0	; () banked
  3926  012D94  6F7D               	movwf	_clearall& (0+255),b
  3927                           
  3928                           ;Console.c: 205: gCursor.x = 6;
  3929  012D96  0E00               	movlw	0
  3930  012D98  6E40               	movwf	_gCursor+1,c
  3931  012D9A  0E06               	movlw	6
  3932  012D9C  6E3F               	movwf	_gCursor,c
  3933                           
  3934                           ;Console.c: 206: gCursor.y = 6;
  3935  012D9E  0E00               	movlw	0
  3936  012DA0  6E42               	movwf	_gCursor+3,c
  3937  012DA2  0E06               	movlw	6
  3938  012DA4  6E41               	movwf	_gCursor+2,c
  3939                           
  3940                           ; BSR set to: 0
  3941  012DA6  0012               	return		;funcret
  3942  012DA8                     __end_of_Console_FormFeed:
  3943                           	opt stack 0
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           intcon	equ	0xFF2
  3951                           postinc0	equ	0xFEE
  3952                           wreg	equ	0xFE8
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _Console_ResetCursor *****************
  3964 ;; Defined at:
  3965 ;;		line 297 in file "Library/Console.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      void 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:        0 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    7
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_Console_PrintChar
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text9
  3994  013D6C                     __ptext9:
  3995                           	opt stack 0
  3996  013D6C                     _Console_ResetCursor:
  3997                           	opt stack 20
  3998                           
  3999                           ;Console.c: 299: gCursor.x = 6;
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;incstack = 0
  4003  013D6C  0E00               	movlw	0
  4004  013D6E  6E40               	movwf	_gCursor+1,c
  4005  013D70  0E06               	movlw	6
  4006  013D72  6E3F               	movwf	_gCursor,c
  4007                           
  4008                           ;Console.c: 300: gCursor.y = 6;
  4009  013D74  0E00               	movlw	0
  4010  013D76  6E42               	movwf	_gCursor+3,c
  4011  013D78  0E06               	movlw	6
  4012  013D7A  6E41               	movwf	_gCursor+2,c
  4013                           
  4014                           ;Console.c: 303: lBufferX = 0;
  4015  013D7C  0E00               	movlw	0
  4016  013D7E  6E36               	movwf	_lBufferX,c
  4017                           
  4018                           ;Console.c: 304: lBufferY = 0;
  4019  013D80  0E00               	movlw	0
  4020  013D82  6E37               	movwf	_lBufferY,c
  4021  013D84  0012               	return		;funcret
  4022  013D86                     __end_of_Console_ResetCursor:
  4023                           	opt stack 0
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           postdec1	equ	0xFE5
  4034                           fsr1h	equ	0xFE2
  4035                           fsr1l	equ	0xFE1
  4036                           indf2	equ	0xFDF
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _Console_Backspace *****************
  4044 ;; Defined at:
  4045 ;;		line 209 in file "Library/Console.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    8
  4066 ;; This function calls:
  4067 ;;		_Console_ClearCursor
  4068 ;; This function is called by:
  4069 ;;		_Console_PrintChar
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text10
  4074  013744                     __ptext10:
  4075                           	opt stack 0
  4076  013744                     _Console_Backspace:
  4077                           	opt stack 19
  4078                           
  4079                           ;Console.c: 211: if (lBufferX > 0)
  4080                           
  4081                           ;incstack = 0
  4082  013744  5036               	movf	_lBufferX,w,c
  4083  013746  B4D8               	btfsc	status,2,c
  4084  013748  D006               	goto	l9235
  4085                           
  4086                           ;Console.c: 212: {
  4087                           ;Console.c: 213: gCursor.x -= 6;
  4088  01374A  0EFA               	movlw	250
  4089  01374C  263F               	addwf	_gCursor,f,c
  4090  01374E  0EFF               	movlw	255
  4091  013750  2240               	addwfc	_gCursor+1,f,c
  4092                           
  4093                           ;Console.c: 216: lBufferX --;
  4094  013752  0636               	decf	_lBufferX,f,c
  4095                           
  4096                           ;Console.c: 218: }
  4097  013754  D01B               	goto	l9247
  4098  013756                     l9235:
  4099                           
  4100                           ;Console.c: 219: else if (lBufferY > 0)
  4101  013756  5037               	movf	_lBufferY,w,c
  4102  013758  B4D8               	btfsc	status,2,c
  4103  01375A  D00C               	goto	l9245
  4104                           
  4105                           ;Console.c: 220: {
  4106                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  4107  01375C  0E00               	movlw	0
  4108  01375E  6E40               	movwf	_gCursor+1,c
  4109  013760  0E72               	movlw	114
  4110  013762  6E3F               	movwf	_gCursor,c
  4111                           
  4112                           ;Console.c: 222: gCursor.y -= 8;
  4113  013764  0EF8               	movlw	248
  4114  013766  2641               	addwf	_gCursor+2,f,c
  4115  013768  0EFF               	movlw	255
  4116  01376A  2242               	addwfc	_gCursor+3,f,c
  4117                           
  4118                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  4119  01376C  0E13               	movlw	19
  4120  01376E  6E36               	movwf	_lBufferX,c
  4121                           
  4122                           ;Console.c: 226: lBufferY --;
  4123  013770  0637               	decf	_lBufferY,f,c
  4124                           
  4125                           ;Console.c: 228: }
  4126  013772  D00C               	goto	l9247
  4127  013774                     l9245:
  4128                           
  4129                           ;Console.c: 229: else
  4130                           ;Console.c: 230: {
  4131                           ;Console.c: 231: gCursor.x = 6;
  4132  013774  0E00               	movlw	0
  4133  013776  6E40               	movwf	_gCursor+1,c
  4134  013778  0E06               	movlw	6
  4135  01377A  6E3F               	movwf	_gCursor,c
  4136                           
  4137                           ;Console.c: 232: gCursor.y = 6;
  4138  01377C  0E00               	movlw	0
  4139  01377E  6E42               	movwf	_gCursor+3,c
  4140  013780  0E06               	movlw	6
  4141  013782  6E41               	movwf	_gCursor+2,c
  4142                           
  4143                           ;Console.c: 235: lBufferX = 0;
  4144  013784  0E00               	movlw	0
  4145  013786  6E36               	movwf	_lBufferX,c
  4146                           
  4147                           ;Console.c: 236: lBufferY = 0;
  4148  013788  0E00               	movlw	0
  4149  01378A  6E37               	movwf	_lBufferY,c
  4150  01378C                     l9247:
  4151                           
  4152                           ;Console.c: 238: }
  4153                           ;Console.c: 240: Console_ClearCursor();
  4154  01378C  EC1B  F09D         	call	_Console_ClearCursor	;wreg free
  4155  013790  0012               	return		;funcret
  4156  013792                     __end_of_Console_Backspace:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _Console_ClearCursor *****************
  4178 ;; Defined at:
  4179 ;;		line 308 in file "Library/Console.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;Total ram usage:        2 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    7
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_Console_Backspace
  4204 ;;		_Console_Tab
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text11
  4209  013A36                     __ptext11:
  4210                           	opt stack 0
  4211  013A36                     _Console_ClearCursor:
  4212                           	opt stack 19
  4213                           
  4214                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  4215                           
  4216                           ;incstack = 0
  4217  013A36  0E01               	movlw	1
  4218  013A38  0100               	movlb	0	; () banked
  4219  013A3A  6FFF               	movwf	_change& (0+255),b
  4220                           
  4221                           ; BSR set to: 0
  4222  013A3C  5037               	movf	_lBufferY,w,c
  4223  013A3E  0D14               	mullw	20
  4224  013A40  0E04               	movlw	low _lBuffer
  4225  013A42  0100               	movlb	0	; () banked
  4226  013A44  6FB7               	movwf	??_Console_ClearCursor& (0+255),b
  4227  013A46  0E02               	movlw	high _lBuffer
  4228  013A48  0100               	movlb	0	; () banked
  4229  013A4A  6FB8               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  4230  013A4C  50F3               	movf	prodl,w,c
  4231  013A4E  0100               	movlb	0	; () banked
  4232  013A50  27B7               	addwf	??_Console_ClearCursor& (0+255),f,b
  4233  013A52  50F4               	movf	prodh,w,c
  4234  013A54  0100               	movlb	0	; () banked
  4235  013A56  23B8               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  4236  013A58  5036               	movf	_lBufferX,w,c
  4237  013A5A  0D01               	mullw	1
  4238  013A5C  50F3               	movf	prodl,w,c
  4239  013A5E  0100               	movlb	0	; () banked
  4240  013A60  25B7               	addwf	??_Console_ClearCursor& (0+255),w,b
  4241  013A62  6ED9               	movwf	fsr2l,c
  4242  013A64  50F4               	movf	prodh,w,c
  4243  013A66  0100               	movlb	0	; () banked
  4244  013A68  21B8               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  4245  013A6A  6EDA               	movwf	fsr2h,c
  4246  013A6C  0E80               	movlw	128
  4247  013A6E  6EDF               	movwf	indf2,c
  4248                           
  4249                           ; BSR set to: 0
  4250  013A70  0012               	return		;funcret
  4251  013A72                     __end_of_Console_ClearCursor:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           postinc0	equ	0xFEE
  4261                           wreg	equ	0xFE8
  4262                           postdec1	equ	0xFE5
  4263                           fsr1h	equ	0xFE2
  4264                           fsr1l	equ	0xFE1
  4265                           indf2	equ	0xFDF
  4266                           postinc2	equ	0xFDE
  4267                           postdec2	equ	0xFDD
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function _MXK_Init *****************
  4273 ;; Defined at:
  4274 ;;		line 33 in file "Library/MXK.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:        0 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:   16
  4295 ;; This function calls:
  4296 ;;		_LED_Init
  4297 ;;		_Port_Init
  4298 ;;		_Port_SetPin
  4299 ;;		_Port_SetPinType
  4300 ;;		_Port_SetQuadType
  4301 ;;		_Port_SetType
  4302 ;;		_delay_ms
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text12
  4309  0117C0                     __ptext12:
  4310                           	opt stack 0
  4311  0117C0                     _MXK_Init:
  4312                           	opt stack 14
  4313                           
  4314                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;incstack = 0
  4318  0117C0  0E01               	movlw	1
  4319  0117C2  6E44               	movwf	_Bus_State,c
  4320                           
  4321                           ;MXK.c: 36: lQueue = (Function)0;
  4322  0117C4  0E00               	movlw	0
  4323  0117C6  6E25               	movwf	_lQueue,c	;volatile
  4324  0117C8  0E00               	movlw	0
  4325  0117CA  6E26               	movwf	_lQueue+1,c	;volatile
  4326  0117CC  0E00               	movlw	0
  4327  0117CE  6E27               	movwf	_lQueue+2,c	;volatile
  4328                           
  4329                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  4330  0117D0  0EC4               	movlw	low _PortA
  4331  0117D2  0101               	movlb	1	; () banked
  4332  0117D4  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4333  0117D6  0E01               	movlw	high _PortA
  4334  0117D8  0101               	movlb	1	; () banked
  4335  0117DA  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4336  0117DC  0E00               	movlw	0
  4337  0117DE  0101               	movlb	1	; () banked
  4338  0117E0  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4339  0117E2  EC51  F08A         	call	_Port_Init	;wreg free
  4340                           
  4341                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  4342  0117E6  0ECE               	movlw	low _PortB
  4343  0117E8  0101               	movlb	1	; () banked
  4344  0117EA  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4345  0117EC  0E01               	movlw	high _PortB
  4346  0117EE  0101               	movlb	1	; () banked
  4347  0117F0  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4348  0117F2  0E01               	movlw	1
  4349  0117F4  0101               	movlb	1	; () banked
  4350  0117F6  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4351  0117F8  EC51  F08A         	call	_Port_Init	;wreg free
  4352                           
  4353                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  4354  0117FC  0E80               	movlw	low _PortC
  4355  0117FE  0101               	movlb	1	; () banked
  4356  011800  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4357  011802  0E00               	movlw	high _PortC
  4358  011804  0101               	movlb	1	; () banked
  4359  011806  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4360  011808  0E02               	movlw	2
  4361  01180A  0101               	movlb	1	; () banked
  4362  01180C  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4363  01180E  EC51  F08A         	call	_Port_Init	;wreg free
  4364                           
  4365                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  4366  011812  0E8A               	movlw	low _PortD
  4367  011814  0101               	movlb	1	; () banked
  4368  011816  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4369  011818  0E00               	movlw	high _PortD
  4370  01181A  0101               	movlb	1	; () banked
  4371  01181C  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4372  01181E  0E03               	movlw	3
  4373  011820  0101               	movlb	1	; () banked
  4374  011822  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4375  011824  EC51  F08A         	call	_Port_Init	;wreg free
  4376                           
  4377                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  4378  011828  0E94               	movlw	low _PortE
  4379  01182A  0101               	movlb	1	; () banked
  4380  01182C  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4381  01182E  0E00               	movlw	high _PortE
  4382  011830  0101               	movlb	1	; () banked
  4383  011832  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4384  011834  0E04               	movlw	4
  4385  011836  0101               	movlb	1	; () banked
  4386  011838  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4387  01183A  EC51  F08A         	call	_Port_Init	;wreg free
  4388                           
  4389                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  4390  01183E  0E9E               	movlw	low _PortF
  4391  011840  0101               	movlb	1	; () banked
  4392  011842  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4393  011844  0E00               	movlw	high _PortF
  4394  011846  0101               	movlb	1	; () banked
  4395  011848  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4396  01184A  0E05               	movlw	5
  4397  01184C  0101               	movlb	1	; () banked
  4398  01184E  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4399  011850  EC51  F08A         	call	_Port_Init	;wreg free
  4400                           
  4401                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  4402  011854  0ED8               	movlw	low _PortG
  4403  011856  0101               	movlb	1	; () banked
  4404  011858  6FF2               	movwf	Port_Init@pInput& (0+255),b
  4405  01185A  0E01               	movlw	high _PortG
  4406  01185C  0101               	movlb	1	; () banked
  4407  01185E  6FF3               	movwf	(Port_Init@pInput+1)& (0+255),b
  4408  011860  0E06               	movlw	6
  4409  011862  0101               	movlb	1	; () banked
  4410  011864  6FF4               	movwf	Port_Init@pPort& (0+255),b
  4411  011866  EC51  F08A         	call	_Port_Init	;wreg free
  4412                           
  4413                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  4414  01186A  0E9E               	movlw	low _PortF
  4415  01186C  0100               	movlb	0	; () banked
  4416  01186E  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  4417  011870  0E00               	movlw	high _PortF
  4418  011872  0100               	movlb	0	; () banked
  4419  011874  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  4420  011876  0E05               	movlw	5
  4421  011878  0100               	movlb	0	; () banked
  4422  01187A  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  4423  01187C  0E00               	movlw	0
  4424  01187E  0100               	movlb	0	; () banked
  4425  011880  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4426  011882  EC71  F089         	call	_Port_SetPinType	;wreg free
  4427                           
  4428                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  4429  011886  0ECE               	movlw	low _PortB
  4430  011888  0100               	movlb	0	; () banked
  4431  01188A  6FED               	movwf	Port_SetQuadType@pInput& (0+255),b
  4432  01188C  0E01               	movlw	high _PortB
  4433  01188E  0100               	movlb	0	; () banked
  4434  011890  6FEE               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  4435  011892  0E00               	movlw	0
  4436  011894  0100               	movlb	0	; () banked
  4437  011896  6FEF               	movwf	Port_SetQuadType@pQuad& (0+255),b
  4438  011898  0E00               	movlw	0
  4439  01189A  0100               	movlb	0	; () banked
  4440  01189C  6FF0               	movwf	Port_SetQuadType@pType& (0+255),b
  4441  01189E  EC2E  F085         	call	_Port_SetQuadType	;wreg free
  4442                           
  4443                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  4444  0118A2  0E9E               	movlw	low _PortF
  4445  0118A4  0100               	movlb	0	; () banked
  4446  0118A6  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  4447  0118A8  0E00               	movlw	high _PortF
  4448  0118AA  0100               	movlb	0	; () banked
  4449  0118AC  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  4450  0118AE  0E06               	movlw	6
  4451  0118B0  0100               	movlb	0	; () banked
  4452  0118B2  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  4453  0118B4  0E03               	movlw	3
  4454  0118B6  0100               	movlb	0	; () banked
  4455  0118B8  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4456  0118BA  EC71  F089         	call	_Port_SetPinType	;wreg free
  4457                           
  4458                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  4459  0118BE  0ED8               	movlw	low _PortG
  4460  0118C0  0101               	movlb	1	; () banked
  4461  0118C2  6FEC               	movwf	Port_SetType@pInput& (0+255),b
  4462  0118C4  0E01               	movlw	high _PortG
  4463  0118C6  0101               	movlb	1	; () banked
  4464  0118C8  6FED               	movwf	(Port_SetType@pInput+1)& (0+255),b
  4465  0118CA  0E03               	movlw	3
  4466  0118CC  0101               	movlb	1	; () banked
  4467  0118CE  6FEE               	movwf	Port_SetType@pType& (0+255),b
  4468  0118D0  EC59  F086         	call	_Port_SetType	;wreg free
  4469                           
  4470                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  4471  0118D4  0ED8               	movlw	low _PortG
  4472  0118D6  0100               	movlb	0	; () banked
  4473  0118D8  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  4474  0118DA  0E01               	movlw	high _PortG
  4475  0118DC  0100               	movlb	0	; () banked
  4476  0118DE  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  4477  0118E0  0E04               	movlw	4
  4478  0118E2  0100               	movlb	0	; () banked
  4479  0118E4  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  4480  0118E6  0E00               	movlw	0
  4481  0118E8  0100               	movlb	0	; () banked
  4482  0118EA  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  4483  0118EC  EC7F  F091         	call	_Port_SetPin	;wreg free
  4484                           
  4485                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  4486  0118F0  0E9E               	movlw	low _PortF
  4487  0118F2  0100               	movlb	0	; () banked
  4488  0118F4  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  4489  0118F6  0E00               	movlw	high _PortF
  4490  0118F8  0100               	movlb	0	; () banked
  4491  0118FA  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  4492  0118FC  0E06               	movlw	6
  4493  0118FE  0100               	movlb	0	; () banked
  4494  011900  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  4495  011902  0E01               	movlw	1
  4496  011904  0100               	movlb	0	; () banked
  4497  011906  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  4498  011908  EC7F  F091         	call	_Port_SetPin	;wreg free
  4499                           
  4500                           ;MXK.c: 55: LED_Init(eLED1);
  4501  01190C  0E00               	movlw	0
  4502  01190E  EC6E  F09A         	call	_LED_Init
  4503                           
  4504                           ;MXK.c: 56: LED_Init(eLED2);
  4505  011912  0E01               	movlw	1
  4506  011914  EC6E  F09A         	call	_LED_Init
  4507                           
  4508                           ;MXK.c: 58: PIR1 = 0;
  4509  011918  0E00               	movlw	0
  4510  01191A  6E9E               	movwf	3998,c	;volatile
  4511                           
  4512                           ;MXK.c: 59: PIR2 = 0;
  4513  01191C  0E00               	movlw	0
  4514  01191E  6EA1               	movwf	4001,c	;volatile
  4515                           
  4516                           ;MXK.c: 60: PIR3 = 0;
  4517  011920  0E00               	movlw	0
  4518  011922  6EA4               	movwf	4004,c	;volatile
  4519                           
  4520                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  4521  011924  8E9B               	bsf	3995,7,c	;volatile
  4522                           
  4523                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  4524  011926  8C9B               	bsf	3995,6,c	;volatile
  4525                           
  4526                           ;MXK.c: 66: delay_ms(100);
  4527  011928  0E00               	movlw	0
  4528  01192A  0100               	movlb	0	; () banked
  4529  01192C  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  4530  01192E  0E64               	movlw	100
  4531  011930  6FB7               	movwf	delay_ms@ms& (0+255),b
  4532  011932  ECA0  F099         	call	_delay_ms	;wreg free
  4533                           
  4534                           ;MXK.c: 68: RCONbits.IPEN = 1;
  4535  011936  8ED0               	bsf	4048,7,c	;volatile
  4536  011938  0012               	return		;funcret
  4537  01193A                     __end_of_MXK_Init:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1h	equ	0xFE2
  4550                           fsr1l	equ	0xFE1
  4551                           indf2	equ	0xFDF
  4552                           postinc2	equ	0xFDE
  4553                           postdec2	equ	0xFDD
  4554                           fsr2h	equ	0xFDA
  4555                           fsr2l	equ	0xFD9
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function _Port_Init *****************
  4559 ;; Defined at:
  4560 ;;		line 150 in file "Library/Port.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  pInput          2    6[BANK1 ] const PTR struct Port
  4563 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4564 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4565 ;;  pPort           1    8[BANK1 ] enum E7730
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;  i               1   11[BANK1 ] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4577 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;Total ram usage:        6 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:   15
  4584 ;; This function calls:
  4585 ;;		_GetPortPORT
  4586 ;;		_GetPortProperties
  4587 ;;		_GetPortTRIS
  4588 ;;		_Port_Set
  4589 ;;		_Port_SetPinType
  4590 ;;		_Port_SetType
  4591 ;;		_Word_GetPair
  4592 ;; This function is called by:
  4593 ;;		_MXK_Init
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text13
  4598  0114A2                     __ptext13:
  4599                           	opt stack 0
  4600  0114A2                     _Port_Init:
  4601                           	opt stack 14
  4602                           
  4603                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  4604                           
  4605                           ;incstack = 0
  4606  0114A2  0101               	movlb	1	; () banked
  4607  0114A4  51F4               	movf	Port_Init@pPort& (0+255),w,b
  4608  0114A6  ECB4  F094         	call	_GetPortProperties
  4609  0114AA  C1F2  FFD9         	movff	Port_Init@pInput,fsr2l
  4610  0114AE  C1F3  FFDA         	movff	Port_Init@pInput+1,fsr2h
  4611  0114B2  0100               	movlb	0	; () banked
  4612  0114B4  C0B7  FFDE         	movff	?_GetPortProperties,postinc2
  4613  0114B8  0100               	movlb	0	; () banked
  4614  0114BA  C0B8  FFDD         	movff	?_GetPortProperties+1,postdec2
  4615                           
  4616                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  4617  0114BE  0101               	movlb	1	; () banked
  4618  0114C0  51F4               	movf	Port_Init@pPort& (0+255),w,b
  4619  0114C2  EC07  F095         	call	_GetPortPORT
  4620  0114C6  0101               	movlb	1	; () banked
  4621  0114C8  EE20 F006          	lfsr	2,6
  4622  0114CC  51F2               	movf	Port_Init@pInput& (0+255),w,b
  4623  0114CE  26D9               	addwf	fsr2l,f,c
  4624  0114D0  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4625  0114D2  22DA               	addwfc	fsr2h,f,c
  4626  0114D4  0100               	movlb	0	; () banked
  4627  0114D6  C0B7  FFDE         	movff	?_GetPortPORT,postinc2
  4628  0114DA  0100               	movlb	0	; () banked
  4629  0114DC  C0B8  FFDD         	movff	?_GetPortPORT+1,postdec2
  4630                           
  4631                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  4632  0114E0  0101               	movlb	1	; () banked
  4633  0114E2  51F4               	movf	Port_Init@pPort& (0+255),w,b
  4634  0114E4  EC07  F095         	call	_GetPortPORT
  4635  0114E8  0101               	movlb	1	; () banked
  4636  0114EA  EE20 F004          	lfsr	2,4
  4637  0114EE  51F2               	movf	Port_Init@pInput& (0+255),w,b
  4638  0114F0  26D9               	addwf	fsr2l,f,c
  4639  0114F2  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4640  0114F4  22DA               	addwfc	fsr2h,f,c
  4641  0114F6  0100               	movlb	0	; () banked
  4642  0114F8  C0B7  FFDE         	movff	?_GetPortPORT,postinc2
  4643  0114FC  0100               	movlb	0	; () banked
  4644  0114FE  C0B8  FFDD         	movff	?_GetPortPORT+1,postdec2
  4645                           
  4646                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  4647  011502  0101               	movlb	1	; () banked
  4648  011504  51F4               	movf	Port_Init@pPort& (0+255),w,b
  4649  011506  EC61  F094         	call	_GetPortTRIS
  4650  01150A  0101               	movlb	1	; () banked
  4651  01150C  EE20 F002          	lfsr	2,2
  4652  011510  51F2               	movf	Port_Init@pInput& (0+255),w,b
  4653  011512  26D9               	addwf	fsr2l,f,c
  4654  011514  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4655  011516  22DA               	addwfc	fsr2h,f,c
  4656  011518  0100               	movlb	0	; () banked
  4657  01151A  C0B7  FFDE         	movff	?_GetPortTRIS,postinc2
  4658  01151E  0100               	movlb	0	; () banked
  4659  011520  C0B8  FFDD         	movff	?_GetPortTRIS+1,postdec2
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  4663  011524  0101               	movlb	1	; () banked
  4664  011526  EE20 F004          	lfsr	2,4
  4665  01152A  51F2               	movf	Port_Init@pInput& (0+255),w,b
  4666  01152C  26D9               	addwf	fsr2l,f,c
  4667  01152E  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4668  011530  22DA               	addwfc	fsr2h,f,c
  4669  011532  CFDE F1F5          	movff	postinc2,??_Port_Init
  4670  011536  CFDD F1F6          	movff	postdec2,??_Port_Init+1
  4671  01153A  C1F5  FFD9         	movff	??_Port_Init,fsr2l
  4672  01153E  C1F6  FFDA         	movff	??_Port_Init+1,fsr2h
  4673  011542  0E00               	movlw	0
  4674  011544  6EDF               	movwf	indf2,c
  4675                           
  4676                           ; BSR set to: 1
  4677                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  4678  011546  0101               	movlb	1	; () banked
  4679  011548  EE20 F002          	lfsr	2,2
  4680  01154C  51F2               	movf	Port_Init@pInput& (0+255),w,b
  4681  01154E  26D9               	addwf	fsr2l,f,c
  4682  011550  51F3               	movf	(Port_Init@pInput+1)& (0+255),w,b
  4683  011552  22DA               	addwfc	fsr2h,f,c
  4684  011554  CFDE F1F5          	movff	postinc2,??_Port_Init
  4685  011558  CFDD F1F6          	movff	postdec2,??_Port_Init+1
  4686  01155C  C1F5  FFD9         	movff	??_Port_Init,fsr2l
  4687  011560  C1F6  FFDA         	movff	??_Port_Init+1,fsr2h
  4688  011564  0EFF               	movlw	255
  4689  011566  6EDF               	movwf	indf2,c
  4690                           
  4691                           ; BSR set to: 1
  4692                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  4693  011568  C1F2  F1EC         	movff	Port_Init@pInput,Port_SetType@pInput
  4694  01156C  C1F3  F1ED         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  4695  011570  0E00               	movlw	0
  4696  011572  0101               	movlb	1	; () banked
  4697  011574  6FEE               	movwf	Port_SetType@pType& (0+255),b
  4698  011576  EC59  F086         	call	_Port_SetType	;wreg free
  4699                           
  4700                           ;Port.c: 166: UINT8 i;
  4701                           ;Port.c: 167: for (i=0; i<8; i++)
  4702  01157A  0E00               	movlw	0
  4703  01157C  0101               	movlb	1	; () banked
  4704  01157E  6FF7               	movwf	Port_Init@i& (0+255),b
  4705  011580                     l10201:
  4706                           
  4707                           ; BSR set to: 1
  4708  011580  0E07               	movlw	7
  4709  011582  0101               	movlb	1	; () banked
  4710  011584  65F7               	cpfsgt	Port_Init@i& (0+255),b
  4711  011586  D031               	goto	l10215
  4712  011588  D04B               	goto	l10221
  4713  01158A                     l10205:
  4714                           
  4715                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  4716  01158A  C1F2  F0DD         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4717  01158E  C1F3  F0DE         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4718  011592  C1F7  F0DF         	movff	Port_Init@i,Port_SetPinType@pPin
  4719  011596  0E03               	movlw	3
  4720  011598  0100               	movlb	0	; () banked
  4721  01159A  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4722  01159C  EC71  F089         	call	_Port_SetPinType	;wreg free
  4723                           
  4724                           ;Port.c: 173: break;
  4725  0115A0  D03C               	goto	l10217
  4726  0115A2                     l10207:
  4727                           
  4728                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  4729  0115A2  C1F2  F0DD         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4730  0115A6  C1F3  F0DE         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4731  0115AA  C1F7  F0DF         	movff	Port_Init@i,Port_SetPinType@pPin
  4732  0115AE  0E02               	movlw	2
  4733  0115B0  0100               	movlb	0	; () banked
  4734  0115B2  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4735  0115B4  EC71  F089         	call	_Port_SetPinType	;wreg free
  4736                           
  4737                           ;Port.c: 176: break;
  4738  0115B8  D030               	goto	l10217
  4739  0115BA                     l10209:
  4740                           
  4741                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  4742  0115BA  C1F2  F0DD         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4743  0115BE  C1F3  F0DE         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4744  0115C2  C1F7  F0DF         	movff	Port_Init@i,Port_SetPinType@pPin
  4745  0115C6  0E01               	movlw	1
  4746  0115C8  0100               	movlb	0	; () banked
  4747  0115CA  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4748  0115CC  EC71  F089         	call	_Port_SetPinType	;wreg free
  4749                           
  4750                           ;Port.c: 179: break;
  4751  0115D0  D024               	goto	l10217
  4752  0115D2                     l10211:
  4753                           
  4754                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  4755  0115D2  C1F2  F0DD         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4756  0115D6  C1F3  F0DE         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4757  0115DA  C1F7  F0DF         	movff	Port_Init@i,Port_SetPinType@pPin
  4758  0115DE  0E00               	movlw	0
  4759  0115E0  0100               	movlb	0	; () banked
  4760  0115E2  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  4761  0115E4  EC71  F089         	call	_Port_SetPinType	;wreg free
  4762                           
  4763                           ;Port.c: 183: }
  4764                           
  4765                           ;Port.c: 182: break;
  4766  0115E8  D018               	goto	l10217
  4767  0115EA                     l10215:
  4768  0115EA  C1F2  FFD9         	movff	Port_Init@pInput,fsr2l
  4769  0115EE  C1F3  FFDA         	movff	Port_Init@pInput+1,fsr2h
  4770  0115F2  CFDE F0C3          	movff	postinc2,Word_GetPair@pInput
  4771  0115F6  CFDD F0C4          	movff	postdec2,Word_GetPair@pInput+1
  4772  0115FA  C1F7  F0C5         	movff	Port_Init@i,Word_GetPair@pPair
  4773  0115FE  ECFC  F09C         	call	_Word_GetPair	;wreg free
  4774                           
  4775                           ; Switch size 1, requested type "space"
  4776                           ; Number of cases is 4, Range of values is 0 to 3
  4777                           ; switch strategies available:
  4778                           ; Name         Instructions Cycles
  4779                           ; simple_byte           13     7 (average)
  4780                           ;	Chosen strategy is simple_byte
  4781  011602  0A00               	xorlw	0	; case 0
  4782  011604  B4D8               	btfsc	status,2,c
  4783  011606  D7C1               	goto	l10205
  4784  011608  0A01               	xorlw	1	; case 1
  4785  01160A  B4D8               	btfsc	status,2,c
  4786  01160C  D7D6               	goto	l10209
  4787  01160E  0A03               	xorlw	3	; case 2
  4788  011610  B4D8               	btfsc	status,2,c
  4789  011612  D7C7               	goto	l10207
  4790  011614  0A01               	xorlw	1	; case 3
  4791  011616  B4D8               	btfsc	status,2,c
  4792  011618  D7DC               	goto	l10211
  4793  01161A                     l10217:
  4794  01161A  0101               	movlb	1	; () banked
  4795  01161C  2BF7               	incf	Port_Init@i& (0+255),f,b
  4796  01161E  D7B0               	goto	l10201
  4797  011620                     l10221:
  4798                           
  4799                           ; BSR set to: 1
  4800                           ;Port.c: 184: }
  4801                           ;Port.c: 185: Port_Set(pInput, 0x00);
  4802  011620  C1F2  F0C6         	movff	Port_Init@pInput,Port_Set@pInput
  4803  011624  C1F3  F0C7         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  4804  011628  0E00               	movlw	0
  4805  01162A  0100               	movlb	0	; () banked
  4806  01162C  6FC8               	movwf	Port_Set@pValue& (0+255),b
  4807  01162E  EC0F  F082         	call	_Port_Set	;wreg free
  4808  011632  0012               	return		;funcret
  4809  011634                     __end_of_Port_Init:
  4810                           	opt stack 0
  4811                           tblptru	equ	0xFF8
  4812                           tblptrh	equ	0xFF7
  4813                           tblptrl	equ	0xFF6
  4814                           tablat	equ	0xFF5
  4815                           prodh	equ	0xFF4
  4816                           prodl	equ	0xFF3
  4817                           intcon	equ	0xFF2
  4818                           postinc0	equ	0xFEE
  4819                           wreg	equ	0xFE8
  4820                           postdec1	equ	0xFE5
  4821                           fsr1h	equ	0xFE2
  4822                           fsr1l	equ	0xFE1
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _Port_SetType *****************
  4831 ;; Defined at:
  4832 ;;		line 513 in file "Library/Port.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  pInput          2    0[BANK1 ] const PTR struct Port
  4835 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4836 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4837 ;;  pType           1    2[BANK1 ] enum E7739
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  Output          1    5[BANK1 ] enum E7419
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      enum E7419
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4849 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;Total ram usage:        6 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:   14
  4856 ;; This function calls:
  4857 ;;		_Port_CheckPortType
  4858 ;;		_Word_SetPair
  4859 ;; This function is called by:
  4860 ;;		_Port_Init
  4861 ;;		_MXK_Init
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text14
  4866  010CB2                     __ptext14:
  4867                           	opt stack 0
  4868  010CB2                     _Port_SetType:
  4869                           	opt stack 15
  4870                           
  4871                           ;Port.c: 515: ePinError Output = ePinErrorState;
  4872                           
  4873                           ;incstack = 0
  4874  010CB2  0E05               	movlw	5
  4875  010CB4  0101               	movlb	1	; () banked
  4876  010CB6  6FF1               	movwf	Port_SetType@Output& (0+255),b
  4877                           
  4878                           ;Port.c: 517: switch (pType)
  4879  010CB8  D07A               	goto	l9515
  4880  010CBA                     l9499:
  4881                           
  4882                           ; BSR set to: 1
  4883                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  4884  010CBA  0101               	movlb	1	; () banked
  4885  010CBC  EE20 F002          	lfsr	2,2
  4886  010CC0  51EC               	movf	Port_SetType@pInput& (0+255),w,b
  4887  010CC2  26D9               	addwf	fsr2l,f,c
  4888  010CC4  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4889  010CC6  22DA               	addwfc	fsr2h,f,c
  4890  010CC8  CFDE F1EF          	movff	postinc2,??_Port_SetType
  4891  010CCC  CFDD F1F0          	movff	postdec2,??_Port_SetType+1
  4892  010CD0  C1EF  FFD9         	movff	??_Port_SetType,fsr2l
  4893  010CD4  C1F0  FFDA         	movff	??_Port_SetType+1,fsr2h
  4894  010CD8  0EFF               	movlw	255
  4895  010CDA  D067               	goto	L3
  4896  010CDC                     l9501:
  4897                           
  4898                           ; BSR set to: 1
  4899                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  4900  010CDC  C1EC  F0ED         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4901  010CE0  C1ED  F0EE         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4902  010CE4  0E01               	movlw	1
  4903  010CE6  0100               	movlb	0	; () banked
  4904  010CE8  6FEF               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4905  010CEA  ECEF  F09B         	call	_Port_CheckPortType	;wreg free
  4906  010CEE  0101               	movlb	1	; () banked
  4907  010CF0  6FF1               	movwf	Port_SetType@Output& (0+255),b
  4908  010CF2  0101               	movlb	1	; () banked
  4909  010CF4  51F1               	movf	Port_SetType@Output& (0+255),w,b
  4910  010CF6  A4D8               	btfss	status,2,c
  4911  010CF8  0012               	return	
  4912                           
  4913                           ; BSR set to: 1
  4914                           ;Port.c: 527: {
  4915                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  4916  010CFA  0101               	movlb	1	; () banked
  4917  010CFC  EE20 F002          	lfsr	2,2
  4918  010D00  51EC               	movf	Port_SetType@pInput& (0+255),w,b
  4919  010D02  26D9               	addwf	fsr2l,f,c
  4920  010D04  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4921  010D06  22DA               	addwfc	fsr2h,f,c
  4922  010D08  CFDE F1EF          	movff	postinc2,??_Port_SetType
  4923  010D0C  CFDD F1F0          	movff	postdec2,??_Port_SetType+1
  4924  010D10  C1EF  FFD9         	movff	??_Port_SetType,fsr2l
  4925  010D14  C1F0  FFDA         	movff	??_Port_SetType+1,fsr2h
  4926  010D18  0E00               	movlw	0
  4927  010D1A  6EDF               	movwf	indf2,c
  4928                           
  4929                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  4930  010D1C  0101               	movlb	1	; () banked
  4931  010D1E  EE20 F004          	lfsr	2,4
  4932  010D22  D036               	goto	L8
  4933  010D24                     l9505:
  4934                           
  4935                           ; BSR set to: 1
  4936                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  4937  010D24  C1EC  F0ED         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4938  010D28  C1ED  F0EE         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4939  010D2C  0E02               	movlw	2
  4940  010D2E  0100               	movlb	0	; () banked
  4941  010D30  6FEF               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4942  010D32  ECEF  F09B         	call	_Port_CheckPortType	;wreg free
  4943  010D36  0101               	movlb	1	; () banked
  4944  010D38  6FF1               	movwf	Port_SetType@Output& (0+255),b
  4945  010D3A  0101               	movlb	1	; () banked
  4946  010D3C  51F1               	movf	Port_SetType@Output& (0+255),w,b
  4947  010D3E  A4D8               	btfss	status,2,c
  4948  010D40  0012               	return	
  4949                           
  4950                           ; BSR set to: 1
  4951                           ;Port.c: 538: {
  4952                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  4953  010D42  0101               	movlb	1	; () banked
  4954  010D44  EE20 F002          	lfsr	2,2
  4955  010D48  51EC               	movf	Port_SetType@pInput& (0+255),w,b
  4956  010D4A  26D9               	addwf	fsr2l,f,c
  4957  010D4C  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4958  010D4E  22DA               	addwfc	fsr2h,f,c
  4959  010D50  CFDE F1EF          	movff	postinc2,??_Port_SetType
  4960  010D54  CFDD F1F0          	movff	postdec2,??_Port_SetType+1
  4961  010D58  C1EF  FFD9         	movff	??_Port_SetType,fsr2l
  4962  010D5C  C1F0  FFDA         	movff	??_Port_SetType+1,fsr2h
  4963  010D60  0EFF               	movlw	255
  4964  010D62  6EDF               	movwf	indf2,c
  4965                           
  4966                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  4967  010D64  0101               	movlb	1	; () banked
  4968  010D66  EE20 F004          	lfsr	2,4
  4969  010D6A  D7AA               	goto	L4
  4970  010D6C                     l9509:
  4971                           
  4972                           ; BSR set to: 1
  4973                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  4974  010D6C  C1EC  F0ED         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4975  010D70  C1ED  F0EE         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4976  010D74  0E00               	movlw	0
  4977  010D76  0100               	movlb	0	; () banked
  4978  010D78  6FEF               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4979  010D7A  ECEF  F09B         	call	_Port_CheckPortType	;wreg free
  4980  010D7E  0101               	movlb	1	; () banked
  4981  010D80  6FF1               	movwf	Port_SetType@Output& (0+255),b
  4982  010D82  0101               	movlb	1	; () banked
  4983  010D84  51F1               	movf	Port_SetType@Output& (0+255),w,b
  4984  010D86  A4D8               	btfss	status,2,c
  4985  010D88  0012               	return	
  4986                           
  4987                           ; BSR set to: 1
  4988                           ;Port.c: 549: {
  4989                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  4990  010D8A  0101               	movlb	1	; () banked
  4991  010D8C  EE20 F002          	lfsr	2,2
  4992  010D90                     L8:
  4993  010D90  51EC               	movf	Port_SetType@pInput& (0+255),w,b
  4994  010D92  26D9               	addwf	fsr2l,f,c
  4995  010D94  51ED               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4996  010D96  22DA               	addwfc	fsr2h,f,c
  4997  010D98  CFDE F1EF          	movff	postinc2,??_Port_SetType
  4998  010D9C  CFDD F1F0          	movff	postdec2,??_Port_SetType+1
  4999  010DA0  C1EF  FFD9         	movff	??_Port_SetType,fsr2l
  5000  010DA4  C1F0  FFDA         	movff	??_Port_SetType+1,fsr2h
  5001  010DA8  0E00               	movlw	0
  5002  010DAA                     L3:
  5003  010DAA  6EDF               	movwf	indf2,c
  5004                           
  5005                           ;Port.c: 552: }
  5006  010DAC  D00E               	goto	l9517
  5007  010DAE                     l9515:
  5008                           
  5009                           ; BSR set to: 1
  5010  010DAE  0101               	movlb	1	; () banked
  5011  010DB0  51EE               	movf	Port_SetType@pType& (0+255),w,b
  5012                           
  5013                           ; Switch size 1, requested type "space"
  5014                           ; Number of cases is 4, Range of values is 0 to 3
  5015                           ; switch strategies available:
  5016                           ; Name         Instructions Cycles
  5017                           ; simple_byte           13     7 (average)
  5018                           ;	Chosen strategy is simple_byte
  5019  010DB2  0A00               	xorlw	0	; case 0
  5020  010DB4  B4D8               	btfsc	status,2,c
  5021  010DB6  D781               	goto	l9499
  5022  010DB8  0A01               	xorlw	1	; case 1
  5023  010DBA  B4D8               	btfsc	status,2,c
  5024  010DBC  D78F               	goto	l9501
  5025  010DBE  0A03               	xorlw	3	; case 2
  5026  010DC0  B4D8               	btfsc	status,2,c
  5027  010DC2  D7B0               	goto	l9505
  5028  010DC4  0A01               	xorlw	1	; case 3
  5029  010DC6  B4D8               	btfsc	status,2,c
  5030  010DC8  D7D1               	goto	l9509
  5031  010DCA                     l9517:
  5032                           
  5033                           ; BSR set to: 1
  5034                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  5035  010DCA  0E08               	movlw	8
  5036  010DCC  0101               	movlb	1	; () banked
  5037  010DCE  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5038  010DD0  0100               	movlb	0	; () banked
  5039  010DD2  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5040  010DD4  0E00               	movlw	0
  5041  010DD6  0101               	movlb	1	; () banked
  5042  010DD8  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5043  010DDA  0100               	movlb	0	; () banked
  5044  010DDC  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5045  010DDE  0E00               	movlw	0
  5046  010DE0  0100               	movlb	0	; () banked
  5047  010DE2  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5048  010DE4  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5049  010DE8  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5050                           
  5051                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  5052  010DEC  0E08               	movlw	8
  5053  010DEE  0101               	movlb	1	; () banked
  5054  010DF0  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5055  010DF2  0100               	movlb	0	; () banked
  5056  010DF4  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5057  010DF6  0E00               	movlw	0
  5058  010DF8  0101               	movlb	1	; () banked
  5059  010DFA  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5060  010DFC  0100               	movlb	0	; () banked
  5061  010DFE  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5062  010E00  0E01               	movlw	1
  5063  010E02  0100               	movlb	0	; () banked
  5064  010E04  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5065  010E06  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5066  010E0A  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5067                           
  5068                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  5069  010E0E  0E08               	movlw	8
  5070  010E10  0101               	movlb	1	; () banked
  5071  010E12  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5072  010E14  0100               	movlb	0	; () banked
  5073  010E16  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5074  010E18  0E00               	movlw	0
  5075  010E1A  0101               	movlb	1	; () banked
  5076  010E1C  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5077  010E1E  0100               	movlb	0	; () banked
  5078  010E20  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5079  010E22  0E02               	movlw	2
  5080  010E24  0100               	movlb	0	; () banked
  5081  010E26  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5082  010E28  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5083  010E2C  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5084                           
  5085                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  5086  010E30  0E08               	movlw	8
  5087  010E32  0101               	movlb	1	; () banked
  5088  010E34  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5089  010E36  0100               	movlb	0	; () banked
  5090  010E38  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5091  010E3A  0E00               	movlw	0
  5092  010E3C  0101               	movlb	1	; () banked
  5093  010E3E  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5094  010E40  0100               	movlb	0	; () banked
  5095  010E42  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5096  010E44  0E03               	movlw	3
  5097  010E46  0100               	movlb	0	; () banked
  5098  010E48  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5099  010E4A  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5100  010E4E  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5101                           
  5102                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  5103  010E52  0E08               	movlw	8
  5104  010E54  0101               	movlb	1	; () banked
  5105  010E56  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5106  010E58  0100               	movlb	0	; () banked
  5107  010E5A  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5108  010E5C  0E00               	movlw	0
  5109  010E5E  0101               	movlb	1	; () banked
  5110  010E60  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5111  010E62  0100               	movlb	0	; () banked
  5112  010E64  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5113  010E66  0E04               	movlw	4
  5114  010E68  0100               	movlb	0	; () banked
  5115  010E6A  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5116  010E6C  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5117  010E70  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5118                           
  5119                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  5120  010E74  0E08               	movlw	8
  5121  010E76  0101               	movlb	1	; () banked
  5122  010E78  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5123  010E7A  0100               	movlb	0	; () banked
  5124  010E7C  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5125  010E7E  0E00               	movlw	0
  5126  010E80  0101               	movlb	1	; () banked
  5127  010E82  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5128  010E84  0100               	movlb	0	; () banked
  5129  010E86  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5130  010E88  0E05               	movlw	5
  5131  010E8A  0100               	movlb	0	; () banked
  5132  010E8C  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5133  010E8E  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5134  010E92  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5135                           
  5136                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  5137  010E96  0E08               	movlw	8
  5138  010E98  0101               	movlb	1	; () banked
  5139  010E9A  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5140  010E9C  0100               	movlb	0	; () banked
  5141  010E9E  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5142  010EA0  0E00               	movlw	0
  5143  010EA2  0101               	movlb	1	; () banked
  5144  010EA4  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5145  010EA6  0100               	movlb	0	; () banked
  5146  010EA8  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5147  010EAA  0E06               	movlw	6
  5148  010EAC  0100               	movlb	0	; () banked
  5149  010EAE  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5150  010EB0  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5151  010EB4  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5152                           
  5153                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  5154  010EB8  0E08               	movlw	8
  5155  010EBA  0101               	movlb	1	; () banked
  5156  010EBC  25EC               	addwf	Port_SetType@pInput& (0+255),w,b
  5157  010EBE  0100               	movlb	0	; () banked
  5158  010EC0  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
  5159  010EC2  0E00               	movlw	0
  5160  010EC4  0101               	movlb	1	; () banked
  5161  010EC6  21ED               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5162  010EC8  0100               	movlb	0	; () banked
  5163  010ECA  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5164  010ECC  0E07               	movlw	7
  5165  010ECE  0100               	movlb	0	; () banked
  5166  010ED0  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
  5167  010ED2  C1EE  F0C9         	movff	Port_SetType@pType,Word_SetPair@pValue
  5168  010ED6  EC5A  F09C         	call	_Word_SetPair	;wreg free
  5169  010EDA  0012               	return	
  5170  010EDC                     __end_of_Port_SetType:
  5171                           	opt stack 0
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           postinc0	equ	0xFEE
  5180                           wreg	equ	0xFE8
  5181                           postdec1	equ	0xFE5
  5182                           fsr1h	equ	0xFE2
  5183                           fsr1l	equ	0xFE1
  5184                           indf2	equ	0xFDF
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8
  5190                           
  5191 ;; *************** function _Port_CheckPortType *****************
  5192 ;; Defined at:
  5193 ;;		line 138 in file "Library/Port.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  5196 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5197 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5198 ;;  pDrive          1   56[BANK0 ] enum E7413
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  Output          1   57[BANK0 ] enum E7419
  5201 ;; Return value:  Size  Location     Type
  5202 ;;                  1    wreg      enum E7419
  5203 ;; Registers used:
  5204 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5210 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;Total ram usage:        4 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:   13
  5217 ;; This function calls:
  5218 ;;		_Port_CheckQuadType
  5219 ;; This function is called by:
  5220 ;;		_Port_SetType
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text15
  5225  0137DE                     __ptext15:
  5226                           	opt stack 0
  5227  0137DE                     _Port_CheckPortType:
  5228                           	opt stack 15
  5229                           
  5230                           ;Port.c: 140: ePinError Output = ePinErrorState;
  5231                           
  5232                           ;incstack = 0
  5233  0137DE  0E05               	movlw	5
  5234  0137E0  0100               	movlb	0	; () banked
  5235  0137E2  6FF0               	movwf	Port_CheckPortType@Output& (0+255),b
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  5239  0137E4  C0ED  F0E6         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  5240  0137E8  C0EE  F0E7         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  5241  0137EC  0E00               	movlw	0
  5242  0137EE  0100               	movlb	0	; () banked
  5243  0137F0  6FE8               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  5244  0137F2  C0EF  F0E9         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  5245  0137F6  ECD0  F09A         	call	_Port_CheckQuadType	;wreg free
  5246  0137FA  0100               	movlb	0	; () banked
  5247  0137FC  6FF0               	movwf	Port_CheckPortType@Output& (0+255),b
  5248  0137FE  0100               	movlb	0	; () banked
  5249  013800  51F0               	movf	Port_CheckPortType@Output& (0+255),w,b
  5250  013802  A4D8               	btfss	status,2,c
  5251  013804  D00D               	goto	l9143
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  5255  013806  C0ED  F0E6         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  5256  01380A  C0EE  F0E7         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  5257  01380E  0E01               	movlw	1
  5258  013810  0100               	movlb	0	; () banked
  5259  013812  6FE8               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  5260  013814  C0EF  F0E9         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  5261  013818  ECD0  F09A         	call	_Port_CheckQuadType	;wreg free
  5262  01381C  0100               	movlb	0	; () banked
  5263  01381E  6FF0               	movwf	Port_CheckPortType@Output& (0+255),b
  5264  013820                     l9143:
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;Port.c: 146: return Output;
  5268  013820  0100               	movlb	0	; () banked
  5269  013822  51F0               	movf	Port_CheckPortType@Output& (0+255),w,b
  5270  013824  0012               	return	
  5271  013826                     __end_of_Port_CheckPortType:
  5272                           	opt stack 0
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           postdec1	equ	0xFE5
  5283                           fsr1h	equ	0xFE2
  5284                           fsr1l	equ	0xFE1
  5285                           indf2	equ	0xFDF
  5286                           postinc2	equ	0xFDE
  5287                           postdec2	equ	0xFDD
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function _Port_Set *****************
  5293 ;; Defined at:
  5294 ;;		line 570 in file "Library/Port.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  5297 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5298 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5299 ;;  pValue          1   17[BANK0 ] unsigned char 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  5302 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  5303 ;;  Type            1   38[BANK0 ] enum E7739
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      void 
  5306 ;; Registers used:
  5307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5313 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;Total ram usage:       24 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:   10
  5320 ;; This function calls:
  5321 ;;		_Byte_SetByte
  5322 ;;		_Word_GetPair
  5323 ;; This function is called by:
  5324 ;;		_Port_Init
  5325 ;;		_Port_Toggle
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text16
  5330  01041E                     __ptext16:
  5331                           	opt stack 0
  5332  01041E                     _Port_Set:
  5333                           	opt stack 18
  5334                           
  5335                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;incstack = 0
  5339  01041E  0E08               	movlw	8
  5340  010420  0100               	movlb	0	; () banked
  5341  010422  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5342  010424  0100               	movlb	0	; () banked
  5343  010426  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5344  010428  0E00               	movlw	0
  5345  01042A  0100               	movlb	0	; () banked
  5346  01042C  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5347  01042E  0100               	movlb	0	; () banked
  5348  010430  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5349  010432  0E00               	movlw	0
  5350  010434  0100               	movlb	0	; () banked
  5351  010436  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5352  010438  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5353  01043C  0100               	movlb	0	; () banked
  5354  01043E  6FDD               	movwf	Port_Set@Type& (0+255),b
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  5358  010440  0100               	movlb	0	; () banked
  5359  010442  51DD               	movf	Port_Set@Type& (0+255),w,b
  5360  010444  0100               	movlb	0	; () banked
  5361  010446  6FC9               	movwf	??_Port_Set& (0+255),b
  5362  010448  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5363  01044A  0E0E               	movlw	14
  5364  01044C                     u6105:
  5365  01044C  90D8               	bcf	status,0,c
  5366  01044E  0100               	movlb	0	; () banked
  5367  010450  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5368  010452  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5369  010454  2EE8               	decfsz	wreg,f,c
  5370  010456  D7FA               	goto	u6105
  5371  010458  0100               	movlb	0	; () banked
  5372  01045A  51DD               	movf	Port_Set@Type& (0+255),w,b
  5373  01045C  0100               	movlb	0	; () banked
  5374  01045E  6FCB               	movwf	(??_Port_Set+2)& (0+255),b
  5375  010460  6BCC               	clrf	(??_Port_Set+3)& (0+255),b
  5376  010462  0E0C               	movlw	12
  5377  010464                     u6115:
  5378  010464  90D8               	bcf	status,0,c
  5379  010466  0100               	movlb	0	; () banked
  5380  010468  37CB               	rlcf	(??_Port_Set+2)& (0+255),f,b
  5381  01046A  37CC               	rlcf	(??_Port_Set+3)& (0+255),f,b
  5382  01046C  2EE8               	decfsz	wreg,f,c
  5383  01046E  D7FA               	goto	u6115
  5384  010470  0100               	movlb	0	; () banked
  5385  010472  51DD               	movf	Port_Set@Type& (0+255),w,b
  5386  010474  0100               	movlb	0	; () banked
  5387  010476  6FCD               	movwf	(??_Port_Set+4)& (0+255),b
  5388  010478  6BCE               	clrf	(??_Port_Set+5)& (0+255),b
  5389  01047A  0E0A               	movlw	10
  5390  01047C                     u6125:
  5391  01047C  90D8               	bcf	status,0,c
  5392  01047E  0100               	movlb	0	; () banked
  5393  010480  37CD               	rlcf	(??_Port_Set+4)& (0+255),f,b
  5394  010482  37CE               	rlcf	(??_Port_Set+5)& (0+255),f,b
  5395  010484  2EE8               	decfsz	wreg,f,c
  5396  010486  D7FA               	goto	u6125
  5397  010488  0100               	movlb	0	; () banked
  5398  01048A  51DD               	movf	Port_Set@Type& (0+255),w,b
  5399  01048C  0100               	movlb	0	; () banked
  5400  01048E  6FD0               	movwf	(??_Port_Set+7)& (0+255),b
  5401  010490  6BCF               	clrf	(??_Port_Set+6)& (0+255),b
  5402  010492  0100               	movlb	0	; () banked
  5403  010494  51DD               	movf	Port_Set@Type& (0+255),w,b
  5404  010496  0100               	movlb	0	; () banked
  5405  010498  6FD1               	movwf	(??_Port_Set+8)& (0+255),b
  5406  01049A  6BD2               	clrf	(??_Port_Set+9)& (0+255),b
  5407  01049C  0E06               	movlw	6
  5408  01049E                     u6135:
  5409  01049E  90D8               	bcf	status,0,c
  5410  0104A0  0100               	movlb	0	; () banked
  5411  0104A2  37D1               	rlcf	(??_Port_Set+8)& (0+255),f,b
  5412  0104A4  37D2               	rlcf	(??_Port_Set+9)& (0+255),f,b
  5413  0104A6  2EE8               	decfsz	wreg,f,c
  5414  0104A8  D7FA               	goto	u6135
  5415  0104AA  0100               	movlb	0	; () banked
  5416  0104AC  51DD               	movf	Port_Set@Type& (0+255),w,b
  5417  0104AE  0100               	movlb	0	; () banked
  5418  0104B0  6FD3               	movwf	(??_Port_Set+10)& (0+255),b
  5419  0104B2  6BD4               	clrf	(??_Port_Set+11)& (0+255),b
  5420  0104B4  0100               	movlb	0	; () banked
  5421  0104B6  3BD3               	swapf	(??_Port_Set+10)& (0+255),f,b
  5422  0104B8  3BD4               	swapf	(??_Port_Set+11)& (0+255),f,b
  5423  0104BA  0EF0               	movlw	240
  5424  0104BC  17D4               	andwf	(??_Port_Set+11)& (0+255),f,b
  5425  0104BE  51D3               	movf	(??_Port_Set+10)& (0+255),w,b
  5426  0104C0  0B0F               	andlw	15
  5427  0104C2  13D4               	iorwf	(??_Port_Set+11)& (0+255),f,b
  5428  0104C4  0EF0               	movlw	240
  5429  0104C6  17D3               	andwf	(??_Port_Set+10)& (0+255),f,b
  5430  0104C8  0100               	movlb	0	; () banked
  5431  0104CA  51DD               	movf	Port_Set@Type& (0+255),w,b
  5432  0104CC  0100               	movlb	0	; () banked
  5433  0104CE  6FD5               	movwf	(??_Port_Set+12)& (0+255),b
  5434  0104D0  6BD6               	clrf	(??_Port_Set+13)& (0+255),b
  5435  0104D2  0100               	movlb	0	; () banked
  5436  0104D4  90D8               	bcf	status,0,c
  5437  0104D6  37D5               	rlcf	(??_Port_Set+12)& (0+255),f,b
  5438  0104D8  37D6               	rlcf	(??_Port_Set+13)& (0+255),f,b
  5439  0104DA  0100               	movlb	0	; () banked
  5440  0104DC  90D8               	bcf	status,0,c
  5441  0104DE  37D5               	rlcf	(??_Port_Set+12)& (0+255),f,b
  5442  0104E0  37D6               	rlcf	(??_Port_Set+13)& (0+255),f,b
  5443  0104E2  0100               	movlb	0	; () banked
  5444  0104E4  51DD               	movf	Port_Set@Type& (0+255),w,b
  5445  0104E6  0100               	movlb	0	; () banked
  5446  0104E8  6FD7               	movwf	(??_Port_Set+14)& (0+255),b
  5447  0104EA  6BD8               	clrf	(??_Port_Set+15)& (0+255),b
  5448  0104EC  0100               	movlb	0	; () banked
  5449  0104EE  51D5               	movf	(??_Port_Set+12)& (0+255),w,b
  5450  0104F0  0100               	movlb	0	; () banked
  5451  0104F2  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5452  0104F4  0100               	movlb	0	; () banked
  5453  0104F6  51D6               	movf	(??_Port_Set+13)& (0+255),w,b
  5454  0104F8  0100               	movlb	0	; () banked
  5455  0104FA  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5456  0104FC  0100               	movlb	0	; () banked
  5457  0104FE  51D3               	movf	(??_Port_Set+10)& (0+255),w,b
  5458  010500  0100               	movlb	0	; () banked
  5459  010502  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5460  010504  0100               	movlb	0	; () banked
  5461  010506  51D4               	movf	(??_Port_Set+11)& (0+255),w,b
  5462  010508  0100               	movlb	0	; () banked
  5463  01050A  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5464  01050C  0100               	movlb	0	; () banked
  5465  01050E  51D1               	movf	(??_Port_Set+8)& (0+255),w,b
  5466  010510  0100               	movlb	0	; () banked
  5467  010512  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5468  010514  0100               	movlb	0	; () banked
  5469  010516  51D2               	movf	(??_Port_Set+9)& (0+255),w,b
  5470  010518  0100               	movlb	0	; () banked
  5471  01051A  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5472  01051C  0100               	movlb	0	; () banked
  5473  01051E  51CF               	movf	(??_Port_Set+6)& (0+255),w,b
  5474  010520  0100               	movlb	0	; () banked
  5475  010522  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5476  010524  0100               	movlb	0	; () banked
  5477  010526  51D0               	movf	(??_Port_Set+7)& (0+255),w,b
  5478  010528  0100               	movlb	0	; () banked
  5479  01052A  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5480  01052C  0100               	movlb	0	; () banked
  5481  01052E  51CD               	movf	(??_Port_Set+4)& (0+255),w,b
  5482  010530  0100               	movlb	0	; () banked
  5483  010532  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5484  010534  0100               	movlb	0	; () banked
  5485  010536  51CE               	movf	(??_Port_Set+5)& (0+255),w,b
  5486  010538  0100               	movlb	0	; () banked
  5487  01053A  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5488  01053C  0100               	movlb	0	; () banked
  5489  01053E  51CB               	movf	(??_Port_Set+2)& (0+255),w,b
  5490  010540  0100               	movlb	0	; () banked
  5491  010542  13D7               	iorwf	(??_Port_Set+14)& (0+255),f,b
  5492  010544  0100               	movlb	0	; () banked
  5493  010546  51CC               	movf	(??_Port_Set+3)& (0+255),w,b
  5494  010548  0100               	movlb	0	; () banked
  5495  01054A  13D8               	iorwf	(??_Port_Set+15)& (0+255),f,b
  5496  01054C  0100               	movlb	0	; () banked
  5497  01054E  51C9               	movf	??_Port_Set& (0+255),w,b
  5498  010550  0100               	movlb	0	; () banked
  5499  010552  11D7               	iorwf	(??_Port_Set+14)& (0+255),w,b
  5500  010554  0100               	movlb	0	; () banked
  5501  010556  6FD9               	movwf	Port_Set@TypeRequired& (0+255),b
  5502  010558  0100               	movlb	0	; () banked
  5503  01055A  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5504  01055C  0100               	movlb	0	; () banked
  5505  01055E  11D8               	iorwf	(??_Port_Set+15)& (0+255),w,b
  5506  010560  0100               	movlb	0	; () banked
  5507  010562  6FDA               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;Port.c: 574: UINT16 TypeActual = Type;
  5511  010564  C0DD  F0DB         	movff	Port_Set@Type,Port_Set@TypeActual
  5512  010568  0100               	movlb	0	; () banked
  5513  01056A  6BDC               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  5517  01056C  0E08               	movlw	8
  5518  01056E  0100               	movlb	0	; () banked
  5519  010570  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5520  010572  0100               	movlb	0	; () banked
  5521  010574  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5522  010576  0E00               	movlw	0
  5523  010578  0100               	movlb	0	; () banked
  5524  01057A  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5525  01057C  0100               	movlb	0	; () banked
  5526  01057E  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5527  010580  0E01               	movlw	1
  5528  010582  0100               	movlb	0	; () banked
  5529  010584  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5530  010586  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5531  01058A  0100               	movlb	0	; () banked
  5532  01058C  6FC9               	movwf	??_Port_Set& (0+255),b
  5533  01058E  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5534  010590  0100               	movlb	0	; () banked
  5535  010592  90D8               	bcf	status,0,c
  5536  010594  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5537  010596  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5538  010598  0100               	movlb	0	; () banked
  5539  01059A  90D8               	bcf	status,0,c
  5540  01059C  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5541  01059E  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5542  0105A0  0100               	movlb	0	; () banked
  5543  0105A2  51C9               	movf	??_Port_Set& (0+255),w,b
  5544  0105A4  0100               	movlb	0	; () banked
  5545  0105A6  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5546  0105A8  0100               	movlb	0	; () banked
  5547  0105AA  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5548  0105AC  0100               	movlb	0	; () banked
  5549  0105AE  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  5553  0105B0  0E08               	movlw	8
  5554  0105B2  0100               	movlb	0	; () banked
  5555  0105B4  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5556  0105B6  0100               	movlb	0	; () banked
  5557  0105B8  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5558  0105BA  0E00               	movlw	0
  5559  0105BC  0100               	movlb	0	; () banked
  5560  0105BE  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5561  0105C0  0100               	movlb	0	; () banked
  5562  0105C2  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5563  0105C4  0E02               	movlw	2
  5564  0105C6  0100               	movlb	0	; () banked
  5565  0105C8  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5566  0105CA  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5567  0105CE  0100               	movlb	0	; () banked
  5568  0105D0  6FC9               	movwf	??_Port_Set& (0+255),b
  5569  0105D2  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5570  0105D4  0100               	movlb	0	; () banked
  5571  0105D6  3BC9               	swapf	??_Port_Set& (0+255),f,b
  5572  0105D8  3BCA               	swapf	(??_Port_Set+1)& (0+255),f,b
  5573  0105DA  0EF0               	movlw	240
  5574  0105DC  17CA               	andwf	(??_Port_Set+1)& (0+255),f,b
  5575  0105DE  51C9               	movf	??_Port_Set& (0+255),w,b
  5576  0105E0  0B0F               	andlw	15
  5577  0105E2  13CA               	iorwf	(??_Port_Set+1)& (0+255),f,b
  5578  0105E4  0EF0               	movlw	240
  5579  0105E6  17C9               	andwf	??_Port_Set& (0+255),f,b
  5580  0105E8  0100               	movlb	0	; () banked
  5581  0105EA  51C9               	movf	??_Port_Set& (0+255),w,b
  5582  0105EC  0100               	movlb	0	; () banked
  5583  0105EE  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5584  0105F0  0100               	movlb	0	; () banked
  5585  0105F2  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5586  0105F4  0100               	movlb	0	; () banked
  5587  0105F6  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  5591  0105F8  0E08               	movlw	8
  5592  0105FA  0100               	movlb	0	; () banked
  5593  0105FC  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5594  0105FE  0100               	movlb	0	; () banked
  5595  010600  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5596  010602  0E00               	movlw	0
  5597  010604  0100               	movlb	0	; () banked
  5598  010606  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5599  010608  0100               	movlb	0	; () banked
  5600  01060A  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5601  01060C  0E03               	movlw	3
  5602  01060E  0100               	movlb	0	; () banked
  5603  010610  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5604  010612  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5605  010616  0100               	movlb	0	; () banked
  5606  010618  6FC9               	movwf	??_Port_Set& (0+255),b
  5607  01061A  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5608  01061C  0E06               	movlw	6
  5609  01061E                     u6145:
  5610  01061E  90D8               	bcf	status,0,c
  5611  010620  0100               	movlb	0	; () banked
  5612  010622  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5613  010624  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5614  010626  2EE8               	decfsz	wreg,f,c
  5615  010628  D7FA               	goto	u6145
  5616  01062A  0100               	movlb	0	; () banked
  5617  01062C  51C9               	movf	??_Port_Set& (0+255),w,b
  5618  01062E  0100               	movlb	0	; () banked
  5619  010630  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5620  010632  0100               	movlb	0	; () banked
  5621  010634  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5622  010636  0100               	movlb	0	; () banked
  5623  010638  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  5627  01063A  0E08               	movlw	8
  5628  01063C  0100               	movlb	0	; () banked
  5629  01063E  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5630  010640  0100               	movlb	0	; () banked
  5631  010642  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5632  010644  0E00               	movlw	0
  5633  010646  0100               	movlb	0	; () banked
  5634  010648  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5635  01064A  0100               	movlb	0	; () banked
  5636  01064C  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5637  01064E  0E04               	movlw	4
  5638  010650  0100               	movlb	0	; () banked
  5639  010652  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5640  010654  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5641  010658  0100               	movlb	0	; () banked
  5642  01065A  6FC9               	movwf	??_Port_Set& (0+255),b
  5643  01065C  0100               	movlb	0	; () banked
  5644  01065E  51C9               	movf	??_Port_Set& (0+255),w,b
  5645  010660  0100               	movlb	0	; () banked
  5646  010662  6FCB               	movwf	(??_Port_Set+2)& (0+255),b
  5647  010664  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5648  010666  0100               	movlb	0	; () banked
  5649  010668  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5650  01066A  0100               	movlb	0	; () banked
  5651  01066C  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5652  01066E  0100               	movlb	0	; () banked
  5653  010670  51CB               	movf	(??_Port_Set+2)& (0+255),w,b
  5654  010672  0100               	movlb	0	; () banked
  5655  010674  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  5659  010676  0E08               	movlw	8
  5660  010678  0100               	movlb	0	; () banked
  5661  01067A  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5662  01067C  0100               	movlb	0	; () banked
  5663  01067E  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5664  010680  0E00               	movlw	0
  5665  010682  0100               	movlb	0	; () banked
  5666  010684  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5667  010686  0100               	movlb	0	; () banked
  5668  010688  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5669  01068A  0E05               	movlw	5
  5670  01068C  0100               	movlb	0	; () banked
  5671  01068E  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5672  010690  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5673  010694  0100               	movlb	0	; () banked
  5674  010696  6FC9               	movwf	??_Port_Set& (0+255),b
  5675  010698  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5676  01069A  0E0A               	movlw	10
  5677  01069C                     u6155:
  5678  01069C  90D8               	bcf	status,0,c
  5679  01069E  0100               	movlb	0	; () banked
  5680  0106A0  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5681  0106A2  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5682  0106A4  2EE8               	decfsz	wreg,f,c
  5683  0106A6  D7FA               	goto	u6155
  5684  0106A8  0100               	movlb	0	; () banked
  5685  0106AA  51C9               	movf	??_Port_Set& (0+255),w,b
  5686  0106AC  0100               	movlb	0	; () banked
  5687  0106AE  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5688  0106B0  0100               	movlb	0	; () banked
  5689  0106B2  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5690  0106B4  0100               	movlb	0	; () banked
  5691  0106B6  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  5695  0106B8  0E08               	movlw	8
  5696  0106BA  0100               	movlb	0	; () banked
  5697  0106BC  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5698  0106BE  0100               	movlb	0	; () banked
  5699  0106C0  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5700  0106C2  0E00               	movlw	0
  5701  0106C4  0100               	movlb	0	; () banked
  5702  0106C6  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5703  0106C8  0100               	movlb	0	; () banked
  5704  0106CA  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5705  0106CC  0E06               	movlw	6
  5706  0106CE  0100               	movlb	0	; () banked
  5707  0106D0  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5708  0106D2  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5709  0106D6  0100               	movlb	0	; () banked
  5710  0106D8  6FC9               	movwf	??_Port_Set& (0+255),b
  5711  0106DA  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5712  0106DC  0E0C               	movlw	12
  5713  0106DE                     u6165:
  5714  0106DE  90D8               	bcf	status,0,c
  5715  0106E0  0100               	movlb	0	; () banked
  5716  0106E2  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5717  0106E4  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5718  0106E6  2EE8               	decfsz	wreg,f,c
  5719  0106E8  D7FA               	goto	u6165
  5720  0106EA  0100               	movlb	0	; () banked
  5721  0106EC  51C9               	movf	??_Port_Set& (0+255),w,b
  5722  0106EE  0100               	movlb	0	; () banked
  5723  0106F0  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5724  0106F2  0100               	movlb	0	; () banked
  5725  0106F4  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5726  0106F6  0100               	movlb	0	; () banked
  5727  0106F8  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  5731  0106FA  0E08               	movlw	8
  5732  0106FC  0100               	movlb	0	; () banked
  5733  0106FE  25C6               	addwf	Port_Set@pInput& (0+255),w,b
  5734  010700  0100               	movlb	0	; () banked
  5735  010702  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  5736  010704  0E00               	movlw	0
  5737  010706  0100               	movlb	0	; () banked
  5738  010708  21C7               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  5739  01070A  0100               	movlb	0	; () banked
  5740  01070C  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  5741  01070E  0E07               	movlw	7
  5742  010710  0100               	movlb	0	; () banked
  5743  010712  6FC5               	movwf	Word_GetPair@pPair& (0+255),b
  5744  010714  ECFC  F09C         	call	_Word_GetPair	;wreg free
  5745  010718  0100               	movlb	0	; () banked
  5746  01071A  6FC9               	movwf	??_Port_Set& (0+255),b
  5747  01071C  6BCA               	clrf	(??_Port_Set+1)& (0+255),b
  5748  01071E  0E0E               	movlw	14
  5749  010720                     u6175:
  5750  010720  90D8               	bcf	status,0,c
  5751  010722  0100               	movlb	0	; () banked
  5752  010724  37C9               	rlcf	??_Port_Set& (0+255),f,b
  5753  010726  37CA               	rlcf	(??_Port_Set+1)& (0+255),f,b
  5754  010728  2EE8               	decfsz	wreg,f,c
  5755  01072A  D7FA               	goto	u6175
  5756  01072C  0100               	movlb	0	; () banked
  5757  01072E  51C9               	movf	??_Port_Set& (0+255),w,b
  5758  010730  0100               	movlb	0	; () banked
  5759  010732  13DB               	iorwf	Port_Set@TypeActual& (0+255),f,b
  5760  010734  0100               	movlb	0	; () banked
  5761  010736  51CA               	movf	(??_Port_Set+1)& (0+255),w,b
  5762  010738  0100               	movlb	0	; () banked
  5763  01073A  13DC               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  5764                           
  5765                           ;Port.c: 584: if (TypeRequired == TypeActual)
  5766  01073C  0100               	movlb	0	; () banked
  5767  01073E  51DB               	movf	Port_Set@TypeActual& (0+255),w,b
  5768  010740  0100               	movlb	0	; () banked
  5769  010742  19D9               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  5770  010744  E148               	bnz	l528
  5771  010746  0100               	movlb	0	; () banked
  5772  010748  51DC               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  5773  01074A  0100               	movlb	0	; () banked
  5774  01074C  19DA               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  5775  01074E  A4D8               	btfss	status,2,c
  5776  010750  0012               	return	
  5777  010752  D032               	goto	l9553
  5778  010754                     l9543:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  5782  010754  0100               	movlb	0	; () banked
  5783  010756  EE20 F002          	lfsr	2,2
  5784  01075A  51C6               	movf	Port_Set@pInput& (0+255),w,b
  5785  01075C  26D9               	addwf	fsr2l,f,c
  5786  01075E  51C7               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5787  010760  22DA               	addwfc	fsr2h,f,c
  5788  010762  CFDE F0B7          	movff	postinc2,Byte_SetByte@pInput
  5789  010766  CFDD F0B8          	movff	postdec2,Byte_SetByte@pInput+1
  5790  01076A  C0C8  F0B9         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5791  01076E  ECF3  F09E         	call	_Byte_SetByte	;wreg free
  5792                           
  5793                           ;Port.c: 594: break;
  5794  010772  0012               	return	
  5795  010774                     l9545:
  5796                           
  5797                           ;Port.c: 597: pValue = ~pValue;
  5798  010774  0100               	movlb	0	; () banked
  5799  010776  1FC8               	comf	Port_Set@pValue& (0+255),f,b
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  5803  010778  0100               	movlb	0	; () banked
  5804  01077A  EE20 F002          	lfsr	2,2
  5805  01077E  51C6               	movf	Port_Set@pInput& (0+255),w,b
  5806  010780  26D9               	addwf	fsr2l,f,c
  5807  010782  51C7               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5808  010784  22DA               	addwfc	fsr2h,f,c
  5809  010786  CFDE F0B7          	movff	postinc2,Byte_SetByte@pInput
  5810  01078A  CFDD F0B8          	movff	postdec2,Byte_SetByte@pInput+1
  5811  01078E  C0C8  F0B9         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5812  010792  ECF3  F09E         	call	_Byte_SetByte	;wreg free
  5813                           
  5814                           ;Port.c: 599: break;
  5815  010796  0012               	return	
  5816  010798                     l9549:
  5817                           
  5818                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  5819  010798  0100               	movlb	0	; () banked
  5820  01079A  EE20 F004          	lfsr	2,4
  5821  01079E  51C6               	movf	Port_Set@pInput& (0+255),w,b
  5822  0107A0  26D9               	addwf	fsr2l,f,c
  5823  0107A2  51C7               	movf	(Port_Set@pInput+1)& (0+255),w,b
  5824  0107A4  22DA               	addwfc	fsr2h,f,c
  5825  0107A6  CFDE F0B7          	movff	postinc2,Byte_SetByte@pInput
  5826  0107AA  CFDD F0B8          	movff	postdec2,Byte_SetByte@pInput+1
  5827  0107AE  C0C8  F0B9         	movff	Port_Set@pValue,Byte_SetByte@pValue
  5828  0107B2  ECF3  F09E         	call	_Byte_SetByte	;wreg free
  5829                           
  5830                           ;Port.c: 606: }
  5831                           
  5832                           ;Port.c: 605: break;
  5833                           
  5834                           ;Port.c: 604: default:
  5835                           
  5836                           ;Port.c: 603: break;
  5837  0107B6  0012               	return	
  5838  0107B8                     l9553:
  5839  0107B8  0100               	movlb	0	; () banked
  5840  0107BA  51DD               	movf	Port_Set@Type& (0+255),w,b
  5841                           
  5842                           ; Switch size 1, requested type "space"
  5843                           ; Number of cases is 4, Range of values is 0 to 3
  5844                           ; switch strategies available:
  5845                           ; Name         Instructions Cycles
  5846                           ; simple_byte           13     7 (average)
  5847                           ;	Chosen strategy is simple_byte
  5848  0107BC  0A00               	xorlw	0	; case 0
  5849  0107BE  B4D8               	btfsc	status,2,c
  5850  0107C0  0012               	return	
  5851  0107C2  0A01               	xorlw	1	; case 1
  5852  0107C4  B4D8               	btfsc	status,2,c
  5853  0107C6  D7C6               	goto	l9543
  5854  0107C8  0A03               	xorlw	3	; case 2
  5855  0107CA  B4D8               	btfsc	status,2,c
  5856  0107CC  D7D3               	goto	l9545
  5857  0107CE  0A01               	xorlw	1	; case 3
  5858  0107D0  A4D8               	btfss	status,2,c
  5859                           
  5860                           ; BSR set to: 0
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;Port.c: 607: }
  5864  0107D2  0012               	return	
  5865  0107D4  D7E1               	goto	l9549
  5866  0107D6                     l528:
  5867  0107D6  0012               	return		;funcret
  5868  0107D8                     __end_of_Port_Set:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1h	equ	0xFE2
  5881                           fsr1l	equ	0xFE1
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _Byte_SetByte *****************
  5890 ;; Defined at:
  5891 ;;		line 110 in file "Library/Types.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  5894 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  5895 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  5896 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  5897 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  5898 ;;		 -> NULL(0), 
  5899 ;;  pValue          1    2[BANK0 ] unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		fsr2l, fsr2h
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5911 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;Total ram usage:        3 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    7
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_Port_Set
  5922 ;;		_I2C_Init
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text17
  5927  013DE6                     __ptext17:
  5928                           	opt stack 0
  5929  013DE6                     _Byte_SetByte:
  5930                           	opt stack 20
  5931                           
  5932                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  5933                           
  5934                           ;incstack = 0
  5935  013DE6  C0B7  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  5936  013DEA  C0B8  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  5937  013DEE  C0B9  FFDF         	movff	Byte_SetByte@pValue,indf2
  5938  013DF2  0012               	return		;funcret
  5939  013DF4                     __end_of_Byte_SetByte:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           prodh	equ	0xFF4
  5946                           prodl	equ	0xFF3
  5947                           intcon	equ	0xFF2
  5948                           postinc0	equ	0xFEE
  5949                           wreg	equ	0xFE8
  5950                           postdec1	equ	0xFE5
  5951                           fsr1h	equ	0xFE2
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _GetPortTRIS *****************
  5961 ;; Defined at:
  5962 ;;		line 67 in file "Library/Port.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  pInput          1    wreg     enum E7730
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  pInput          1    2[BANK0 ] enum E7730
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  2    0[BANK0 ] PTR struct Byte
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:        3 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    7
  5983 ;; This function calls:
  5984 ;;		Nothing
  5985 ;; This function is called by:
  5986 ;;		_Port_Init
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text18
  5991  0128C2                     __ptext18:
  5992                           	opt stack 0
  5993  0128C2                     _GetPortTRIS:
  5994                           	opt stack 21
  5995                           
  5996                           ;incstack = 0
  5997                           ;GetPortTRIS@pInput stored from wreg
  5998  0128C2  0100               	movlb	0	; () banked
  5999  0128C4  6FB9               	movwf	GetPortTRIS@pInput& (0+255),b
  6000                           
  6001                           ;Port.c: 69: switch (pInput)
  6002  0128C6  D038               	goto	l9495
  6003  0128C8                     l9461:
  6004                           
  6005                           ;Port.c: 72: return (BytePtr)&TRISA;
  6006  0128C8  0E92               	movlw	146
  6007  0128CA  0100               	movlb	0	; () banked
  6008  0128CC  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6009  0128CE  0E0F               	movlw	15
  6010  0128D0  0100               	movlb	0	; () banked
  6011  0128D2  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6012                           
  6013                           ; BSR set to: 0
  6014  0128D4  0012               	return	
  6015  0128D6                     l9465:
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;Port.c: 74: return (BytePtr)&TRISB;
  6019  0128D6  0E93               	movlw	147
  6020  0128D8  0100               	movlb	0	; () banked
  6021  0128DA  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6022  0128DC  0E0F               	movlw	15
  6023  0128DE  0100               	movlb	0	; () banked
  6024  0128E0  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027  0128E2  0012               	return	
  6028  0128E4                     l9469:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;Port.c: 76: return (BytePtr)&TRISC;
  6032  0128E4  0E94               	movlw	148
  6033  0128E6  0100               	movlb	0	; () banked
  6034  0128E8  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6035  0128EA  0E0F               	movlw	15
  6036  0128EC  0100               	movlb	0	; () banked
  6037  0128EE  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040  0128F0  0012               	return	
  6041  0128F2                     l9473:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;Port.c: 78: return (BytePtr)&TRISD;
  6045  0128F2  0E95               	movlw	149
  6046  0128F4  0100               	movlb	0	; () banked
  6047  0128F6  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6048  0128F8  0E0F               	movlw	15
  6049  0128FA  0100               	movlb	0	; () banked
  6050  0128FC  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053  0128FE  0012               	return	
  6054  012900                     l9477:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;Port.c: 80: return (BytePtr)&TRISE;
  6058  012900  0E96               	movlw	150
  6059  012902  0100               	movlb	0	; () banked
  6060  012904  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6061  012906  0E0F               	movlw	15
  6062  012908  0100               	movlb	0	; () banked
  6063  01290A  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066  01290C  0012               	return	
  6067  01290E                     l9481:
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;Port.c: 82: return (BytePtr)&TRISF;
  6071  01290E  0E97               	movlw	151
  6072  012910  0100               	movlb	0	; () banked
  6073  012912  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6074  012914  0E0F               	movlw	15
  6075  012916  0100               	movlb	0	; () banked
  6076  012918  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079  01291A  0012               	return	
  6080  01291C                     l9485:
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;Port.c: 84: return (BytePtr)&TRISG;
  6084  01291C  0E98               	movlw	152
  6085  01291E  0100               	movlb	0	; () banked
  6086  012920  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6087  012922  0E0F               	movlw	15
  6088  012924  0100               	movlb	0	; () banked
  6089  012926  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6090                           
  6091                           ; BSR set to: 0
  6092  012928  0012               	return	
  6093  01292A                     l9489:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;Port.c: 86: return (void*)0;
  6097  01292A  0E00               	movlw	0
  6098  01292C  0100               	movlb	0	; () banked
  6099  01292E  6FB7               	movwf	?_GetPortTRIS& (0+255),b
  6100  012930  0E00               	movlw	0
  6101  012932  0100               	movlb	0	; () banked
  6102  012934  6FB8               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;Port.c: 87: }
  6106                           
  6107                           ; BSR set to: 0
  6108  012936  0012               	return	
  6109  012938                     l9495:
  6110  012938  0100               	movlb	0	; () banked
  6111  01293A  51B9               	movf	GetPortTRIS@pInput& (0+255),w,b
  6112                           
  6113                           ; Switch size 1, requested type "space"
  6114                           ; Number of cases is 7, Range of values is 0 to 6
  6115                           ; switch strategies available:
  6116                           ; Name         Instructions Cycles
  6117                           ; simple_byte           22    12 (average)
  6118                           ;	Chosen strategy is simple_byte
  6119  01293C  0A00               	xorlw	0	; case 0
  6120  01293E  B4D8               	btfsc	status,2,c
  6121  012940  D7C3               	goto	l9461
  6122  012942  0A01               	xorlw	1	; case 1
  6123  012944  B4D8               	btfsc	status,2,c
  6124  012946  D7C7               	goto	l9465
  6125  012948  0A03               	xorlw	3	; case 2
  6126  01294A  B4D8               	btfsc	status,2,c
  6127  01294C  D7CB               	goto	l9469
  6128  01294E  0A01               	xorlw	1	; case 3
  6129  012950  B4D8               	btfsc	status,2,c
  6130  012952  D7CF               	goto	l9473
  6131  012954  0A07               	xorlw	7	; case 4
  6132  012956  B4D8               	btfsc	status,2,c
  6133  012958  D7D3               	goto	l9477
  6134  01295A  0A01               	xorlw	1	; case 5
  6135  01295C  B4D8               	btfsc	status,2,c
  6136  01295E  D7D7               	goto	l9481
  6137  012960  0A03               	xorlw	3	; case 6
  6138  012962  B4D8               	btfsc	status,2,c
  6139  012964  D7DB               	goto	l9485
  6140  012966  D7E1               	goto	l9489
  6141  012968                     __end_of_GetPortTRIS:
  6142                           	opt stack 0
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1h	equ	0xFE2
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           fsr2h	equ	0xFDA
  6159                           fsr2l	equ	0xFD9
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _GetPortProperties *****************
  6163 ;; Defined at:
  6164 ;;		line 21 in file "Library/Port.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  pInput          1    wreg     enum E7730
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  pInput          1    2[BANK0 ] enum E7730
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  2    0[BANK0 ] PTR struct PortProperty
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6178 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;Total ram usage:        3 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    7
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_Port_Init
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text19
  6193  012968                     __ptext19:
  6194                           	opt stack 0
  6195  012968                     _GetPortProperties:
  6196                           	opt stack 21
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;incstack = 0
  6200                           ;GetPortProperties@pInput stored from wreg
  6201  012968  0100               	movlb	0	; () banked
  6202  01296A  6FB9               	movwf	GetPortProperties@pInput& (0+255),b
  6203                           
  6204                           ;Port.c: 23: switch (pInput)
  6205  01296C  D038               	goto	l9419
  6206  01296E                     l9385:
  6207                           
  6208                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  6209  01296E  0ECF               	movlw	low _PortA_Property
  6210  012970  0100               	movlb	0	; () banked
  6211  012972  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6212  012974  0EFF               	movlw	high _PortA_Property
  6213  012976  0100               	movlb	0	; () banked
  6214  012978  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6215                           
  6216                           ; BSR set to: 0
  6217  01297A  0012               	return	
  6218  01297C                     l9389:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  6222  01297C  0ED1               	movlw	low _PortB_Property
  6223  01297E  0100               	movlb	0	; () banked
  6224  012980  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6225  012982  0EFF               	movlw	high _PortB_Property
  6226  012984  0100               	movlb	0	; () banked
  6227  012986  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230  012988  0012               	return	
  6231  01298A                     l9393:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  6235  01298A  0ED3               	movlw	low _PortC_Property
  6236  01298C  0100               	movlb	0	; () banked
  6237  01298E  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6238  012990  0EFF               	movlw	high _PortC_Property
  6239  012992  0100               	movlb	0	; () banked
  6240  012994  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6241                           
  6242                           ; BSR set to: 0
  6243  012996  0012               	return	
  6244  012998                     l9397:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  6248  012998  0ED5               	movlw	low _PortD_Property
  6249  01299A  0100               	movlb	0	; () banked
  6250  01299C  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6251  01299E  0EFF               	movlw	high _PortD_Property
  6252  0129A0  0100               	movlb	0	; () banked
  6253  0129A2  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6254                           
  6255                           ; BSR set to: 0
  6256  0129A4  0012               	return	
  6257  0129A6                     l9401:
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  6261  0129A6  0ED7               	movlw	low _PortE_Property
  6262  0129A8  0100               	movlb	0	; () banked
  6263  0129AA  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6264  0129AC  0EFF               	movlw	high _PortE_Property
  6265  0129AE  0100               	movlb	0	; () banked
  6266  0129B0  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6267                           
  6268                           ; BSR set to: 0
  6269  0129B2  0012               	return	
  6270  0129B4                     l9405:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  6274  0129B4  0ED9               	movlw	low _PortF_Property
  6275  0129B6  0100               	movlb	0	; () banked
  6276  0129B8  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6277  0129BA  0EFF               	movlw	high _PortF_Property
  6278  0129BC  0100               	movlb	0	; () banked
  6279  0129BE  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6280                           
  6281                           ; BSR set to: 0
  6282  0129C0  0012               	return	
  6283  0129C2                     l9409:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  6287  0129C2  0EDB               	movlw	low _PortG_Property
  6288  0129C4  0100               	movlb	0	; () banked
  6289  0129C6  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6290  0129C8  0EFF               	movlw	high _PortG_Property
  6291  0129CA  0100               	movlb	0	; () banked
  6292  0129CC  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6293                           
  6294                           ; BSR set to: 0
  6295  0129CE  0012               	return	
  6296  0129D0                     l9413:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;Port.c: 40: return (void*)0;
  6300  0129D0  0E00               	movlw	0
  6301  0129D2  0100               	movlb	0	; () banked
  6302  0129D4  6FB7               	movwf	?_GetPortProperties& (0+255),b
  6303  0129D6  0E00               	movlw	0
  6304  0129D8  0100               	movlb	0	; () banked
  6305  0129DA  6FB8               	movwf	(?_GetPortProperties+1)& (0+255),b
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;Port.c: 41: }
  6309                           
  6310                           ; BSR set to: 0
  6311  0129DC  0012               	return	
  6312  0129DE                     l9419:
  6313  0129DE  0100               	movlb	0	; () banked
  6314  0129E0  51B9               	movf	GetPortProperties@pInput& (0+255),w,b
  6315                           
  6316                           ; Switch size 1, requested type "space"
  6317                           ; Number of cases is 7, Range of values is 0 to 6
  6318                           ; switch strategies available:
  6319                           ; Name         Instructions Cycles
  6320                           ; simple_byte           22    12 (average)
  6321                           ;	Chosen strategy is simple_byte
  6322  0129E2  0A00               	xorlw	0	; case 0
  6323  0129E4  B4D8               	btfsc	status,2,c
  6324  0129E6  D7C3               	goto	l9385
  6325  0129E8  0A01               	xorlw	1	; case 1
  6326  0129EA  B4D8               	btfsc	status,2,c
  6327  0129EC  D7C7               	goto	l9389
  6328  0129EE  0A03               	xorlw	3	; case 2
  6329  0129F0  B4D8               	btfsc	status,2,c
  6330  0129F2  D7CB               	goto	l9393
  6331  0129F4  0A01               	xorlw	1	; case 3
  6332  0129F6  B4D8               	btfsc	status,2,c
  6333  0129F8  D7CF               	goto	l9397
  6334  0129FA  0A07               	xorlw	7	; case 4
  6335  0129FC  B4D8               	btfsc	status,2,c
  6336  0129FE  D7D3               	goto	l9401
  6337  012A00  0A01               	xorlw	1	; case 5
  6338  012A02  B4D8               	btfsc	status,2,c
  6339  012A04  D7D7               	goto	l9405
  6340  012A06  0A03               	xorlw	3	; case 6
  6341  012A08  B4D8               	btfsc	status,2,c
  6342  012A0A  D7DB               	goto	l9409
  6343  012A0C  D7E1               	goto	l9413
  6344  012A0E                     __end_of_GetPortProperties:
  6345                           	opt stack 0
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           postinc0	equ	0xFEE
  6354                           wreg	equ	0xFE8
  6355                           postdec1	equ	0xFE5
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365 ;; *************** function _GetPortPORT *****************
  6366 ;; Defined at:
  6367 ;;		line 44 in file "Library/Port.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  pInput          1    wreg     enum E7730
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  pInput          1    2[BANK0 ] enum E7730
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  2    0[BANK0 ] PTR struct Byte
  6374 ;; Registers used:
  6375 ;;		wreg, status,2, status,0
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6381 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;Total ram usage:        3 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    7
  6388 ;; This function calls:
  6389 ;;		Nothing
  6390 ;; This function is called by:
  6391 ;;		_Port_Init
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text20
  6396  012A0E                     __ptext20:
  6397                           	opt stack 0
  6398  012A0E                     _GetPortPORT:
  6399                           	opt stack 21
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;incstack = 0
  6403                           ;GetPortPORT@pInput stored from wreg
  6404  012A0E  0100               	movlb	0	; () banked
  6405  012A10  6FB9               	movwf	GetPortPORT@pInput& (0+255),b
  6406                           
  6407                           ;Port.c: 46: switch (pInput)
  6408  012A12  D038               	goto	l9457
  6409  012A14                     l9423:
  6410                           
  6411                           ;Port.c: 49: return (BytePtr)&PORTA;
  6412  012A14  0E80               	movlw	128
  6413  012A16  0100               	movlb	0	; () banked
  6414  012A18  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6415  012A1A  0E0F               	movlw	15
  6416  012A1C  0100               	movlb	0	; () banked
  6417  012A1E  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6418                           
  6419                           ; BSR set to: 0
  6420  012A20  0012               	return	
  6421  012A22                     l9427:
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;Port.c: 51: return (BytePtr)&PORTB;
  6425  012A22  0E81               	movlw	129
  6426  012A24  0100               	movlb	0	; () banked
  6427  012A26  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6428  012A28  0E0F               	movlw	15
  6429  012A2A  0100               	movlb	0	; () banked
  6430  012A2C  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6431                           
  6432                           ; BSR set to: 0
  6433  012A2E  0012               	return	
  6434  012A30                     l9431:
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;Port.c: 53: return (BytePtr)&PORTC;
  6438  012A30  0E82               	movlw	130
  6439  012A32  0100               	movlb	0	; () banked
  6440  012A34  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6441  012A36  0E0F               	movlw	15
  6442  012A38  0100               	movlb	0	; () banked
  6443  012A3A  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6444                           
  6445                           ; BSR set to: 0
  6446  012A3C  0012               	return	
  6447  012A3E                     l9435:
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;Port.c: 55: return (BytePtr)&PORTD;
  6451  012A3E  0E83               	movlw	131
  6452  012A40  0100               	movlb	0	; () banked
  6453  012A42  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6454  012A44  0E0F               	movlw	15
  6455  012A46  0100               	movlb	0	; () banked
  6456  012A48  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459  012A4A  0012               	return	
  6460  012A4C                     l9439:
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;Port.c: 57: return (BytePtr)&PORTE;
  6464  012A4C  0E84               	movlw	132
  6465  012A4E  0100               	movlb	0	; () banked
  6466  012A50  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6467  012A52  0E0F               	movlw	15
  6468  012A54  0100               	movlb	0	; () banked
  6469  012A56  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472  012A58  0012               	return	
  6473  012A5A                     l9443:
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;Port.c: 59: return (BytePtr)&PORTF;
  6477  012A5A  0E85               	movlw	133
  6478  012A5C  0100               	movlb	0	; () banked
  6479  012A5E  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6480  012A60  0E0F               	movlw	15
  6481  012A62  0100               	movlb	0	; () banked
  6482  012A64  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6483                           
  6484                           ; BSR set to: 0
  6485  012A66  0012               	return	
  6486  012A68                     l9447:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;Port.c: 61: return (BytePtr)&PORTG;
  6490  012A68  0E86               	movlw	134
  6491  012A6A  0100               	movlb	0	; () banked
  6492  012A6C  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6493  012A6E  0E0F               	movlw	15
  6494  012A70  0100               	movlb	0	; () banked
  6495  012A72  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6496                           
  6497                           ; BSR set to: 0
  6498  012A74  0012               	return	
  6499  012A76                     l9451:
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;Port.c: 63: return (void*)0;
  6503  012A76  0E00               	movlw	0
  6504  012A78  0100               	movlb	0	; () banked
  6505  012A7A  6FB7               	movwf	?_GetPortPORT& (0+255),b
  6506  012A7C  0E00               	movlw	0
  6507  012A7E  0100               	movlb	0	; () banked
  6508  012A80  6FB8               	movwf	(?_GetPortPORT+1)& (0+255),b
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;Port.c: 64: }
  6512                           
  6513                           ; BSR set to: 0
  6514  012A82  0012               	return	
  6515  012A84                     l9457:
  6516  012A84  0100               	movlb	0	; () banked
  6517  012A86  51B9               	movf	GetPortPORT@pInput& (0+255),w,b
  6518                           
  6519                           ; Switch size 1, requested type "space"
  6520                           ; Number of cases is 7, Range of values is 0 to 6
  6521                           ; switch strategies available:
  6522                           ; Name         Instructions Cycles
  6523                           ; simple_byte           22    12 (average)
  6524                           ;	Chosen strategy is simple_byte
  6525  012A88  0A00               	xorlw	0	; case 0
  6526  012A8A  B4D8               	btfsc	status,2,c
  6527  012A8C  D7C3               	goto	l9423
  6528  012A8E  0A01               	xorlw	1	; case 1
  6529  012A90  B4D8               	btfsc	status,2,c
  6530  012A92  D7C7               	goto	l9427
  6531  012A94  0A03               	xorlw	3	; case 2
  6532  012A96  B4D8               	btfsc	status,2,c
  6533  012A98  D7CB               	goto	l9431
  6534  012A9A  0A01               	xorlw	1	; case 3
  6535  012A9C  B4D8               	btfsc	status,2,c
  6536  012A9E  D7CF               	goto	l9435
  6537  012AA0  0A07               	xorlw	7	; case 4
  6538  012AA2  B4D8               	btfsc	status,2,c
  6539  012AA4  D7D3               	goto	l9439
  6540  012AA6  0A01               	xorlw	1	; case 5
  6541  012AA8  B4D8               	btfsc	status,2,c
  6542  012AAA  D7D7               	goto	l9443
  6543  012AAC  0A03               	xorlw	3	; case 6
  6544  012AAE  B4D8               	btfsc	status,2,c
  6545  012AB0  D7DB               	goto	l9447
  6546  012AB2  D7E1               	goto	l9451
  6547  012AB4                     __end_of_GetPortPORT:
  6548                           	opt stack 0
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           postinc0	equ	0xFEE
  6557                           wreg	equ	0xFE8
  6558                           postdec1	equ	0xFE5
  6559                           fsr1h	equ	0xFE2
  6560                           fsr1l	equ	0xFE1
  6561                           indf2	equ	0xFDF
  6562                           postinc2	equ	0xFDE
  6563                           postdec2	equ	0xFDD
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function _LED_Init *****************
  6569 ;; Defined at:
  6570 ;;		line 15 in file "Library/LED.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  pLED            1    wreg     enum E7683
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  pLED            1   45[BANK0 ] enum E7683
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;Total ram usage:        1 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:   12
  6591 ;; This function calls:
  6592 ;;		_LED_Set
  6593 ;;		_Port_SetPinType
  6594 ;; This function is called by:
  6595 ;;		_MXK_Init
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text21
  6600  0134DC                     __ptext21:
  6601                           	opt stack 0
  6602  0134DC                     _LED_Init:
  6603                           	opt stack 17
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;incstack = 0
  6607                           ;LED_Init@pLED stored from wreg
  6608  0134DC  0100               	movlb	0	; () banked
  6609  0134DE  6FE4               	movwf	LED_Init@pLED& (0+255),b
  6610                           
  6611                           ;LED.c: 17: switch (pLED)
  6612  0134E0  D01E               	goto	l10187
  6613  0134E2                     l10181:
  6614                           
  6615                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  6616  0134E2  0E80               	movlw	low _PortC
  6617  0134E4  0100               	movlb	0	; () banked
  6618  0134E6  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  6619  0134E8  0E00               	movlw	high _PortC
  6620  0134EA  0100               	movlb	0	; () banked
  6621  0134EC  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6622  0134EE  0E00               	movlw	0
  6623  0134F0  0100               	movlb	0	; () banked
  6624  0134F2  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  6625  0134F4  0E03               	movlw	3
  6626  0134F6  0100               	movlb	0	; () banked
  6627  0134F8  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  6628  0134FA  EC71  F089         	call	_Port_SetPinType	;wreg free
  6629                           
  6630                           ;LED.c: 21: break;
  6631  0134FE  D017               	goto	l10189
  6632  013500                     l10183:
  6633                           
  6634                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  6635  013500  0E80               	movlw	low _PortC
  6636  013502  0100               	movlb	0	; () banked
  6637  013504  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  6638  013506  0E00               	movlw	high _PortC
  6639  013508  0100               	movlb	0	; () banked
  6640  01350A  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6641  01350C  0E01               	movlw	1
  6642  01350E  0100               	movlb	0	; () banked
  6643  013510  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  6644  013512  0E03               	movlw	3
  6645  013514  0100               	movlb	0	; () banked
  6646  013516  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  6647  013518  EC71  F089         	call	_Port_SetPinType	;wreg free
  6648                           
  6649                           ;LED.c: 25: }
  6650                           
  6651                           ;LED.c: 24: break;
  6652  01351C  D008               	goto	l10189
  6653  01351E                     l10187:
  6654  01351E  0100               	movlb	0	; () banked
  6655  013520  51E4               	movf	LED_Init@pLED& (0+255),w,b
  6656                           
  6657                           ; Switch size 1, requested type "space"
  6658                           ; Number of cases is 2, Range of values is 0 to 1
  6659                           ; switch strategies available:
  6660                           ; Name         Instructions Cycles
  6661                           ; simple_byte            7     4 (average)
  6662                           ;	Chosen strategy is simple_byte
  6663  013522  0A00               	xorlw	0	; case 0
  6664  013524  B4D8               	btfsc	status,2,c
  6665  013526  D7DD               	goto	l10181
  6666  013528  0A01               	xorlw	1	; case 1
  6667  01352A  B4D8               	btfsc	status,2,c
  6668  01352C  D7E9               	goto	l10183
  6669  01352E                     l10189:
  6670                           
  6671                           ;LED.c: 26: LED_Set(pLED, 0);
  6672  01352E  0E00               	movlw	0
  6673  013530  0100               	movlb	0	; () banked
  6674  013532  6FCB               	movwf	LED_Set@pValue& (0+255),b
  6675  013534  0100               	movlb	0	; () banked
  6676  013536  51E4               	movf	LED_Init@pLED& (0+255),w,b
  6677  013538  EC52  F09B         	call	_LED_Set
  6678  01353C  0012               	return		;funcret
  6679  01353E                     __end_of_LED_Init:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           postinc0	equ	0xFEE
  6689                           wreg	equ	0xFE8
  6690                           postdec1	equ	0xFE5
  6691                           fsr1h	equ	0xFE2
  6692                           fsr1l	equ	0xFE1
  6693                           indf2	equ	0xFDF
  6694                           postinc2	equ	0xFDE
  6695                           postdec2	equ	0xFDD
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8
  6699                           
  6700 ;; *************** function _LED_Set *****************
  6701 ;; Defined at:
  6702 ;;		line 33 in file "Library/LED.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;  pLED            1    wreg     enum E7683
  6705 ;;  pValue          1   20[BANK0 ] unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  pLED            1   21[BANK0 ] enum E7683
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6717 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;Total ram usage:        2 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:   11
  6724 ;; This function calls:
  6725 ;;		_Port_SetPin
  6726 ;; This function is called by:
  6727 ;;		_LED_Init
  6728 ;;		_SYSTEM_Initialize
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text22
  6733  0136A4                     __ptext22:
  6734                           	opt stack 0
  6735  0136A4                     _LED_Set:
  6736                           	opt stack 17
  6737                           
  6738                           ;incstack = 0
  6739                           ;LED_Set@pLED stored from wreg
  6740  0136A4  0100               	movlb	0	; () banked
  6741  0136A6  6FCC               	movwf	LED_Set@pLED& (0+255),b
  6742                           
  6743                           ;LED.c: 35: switch (pLED)
  6744  0136A8  D01C               	goto	l9381
  6745  0136AA                     l9375:
  6746                           
  6747                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  6748  0136AA  0E80               	movlw	low _PortC
  6749  0136AC  0100               	movlb	0	; () banked
  6750  0136AE  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  6751  0136B0  0E00               	movlw	high _PortC
  6752  0136B2  0100               	movlb	0	; () banked
  6753  0136B4  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6754  0136B6  0E00               	movlw	0
  6755  0136B8  0100               	movlb	0	; () banked
  6756  0136BA  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  6757  0136BC  C0CB  F0C9         	movff	LED_Set@pValue,Port_SetPin@pValue
  6758  0136C0  EC7F  F091         	call	_Port_SetPin	;wreg free
  6759                           
  6760                           ;LED.c: 39: break;
  6761  0136C4  0012               	return	
  6762  0136C6                     l9377:
  6763                           
  6764                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  6765  0136C6  0E80               	movlw	low _PortC
  6766  0136C8  0100               	movlb	0	; () banked
  6767  0136CA  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  6768  0136CC  0E00               	movlw	high _PortC
  6769  0136CE  0100               	movlb	0	; () banked
  6770  0136D0  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6771  0136D2  0E01               	movlw	1
  6772  0136D4  0100               	movlb	0	; () banked
  6773  0136D6  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  6774  0136D8  C0CB  F0C9         	movff	LED_Set@pValue,Port_SetPin@pValue
  6775  0136DC  EC7F  F091         	call	_Port_SetPin	;wreg free
  6776                           
  6777                           ;LED.c: 43: }
  6778                           
  6779                           ;LED.c: 42: break;
  6780  0136E0  0012               	return	
  6781  0136E2                     l9381:
  6782  0136E2  0100               	movlb	0	; () banked
  6783  0136E4  51CC               	movf	LED_Set@pLED& (0+255),w,b
  6784                           
  6785                           ; Switch size 1, requested type "space"
  6786                           ; Number of cases is 2, Range of values is 0 to 1
  6787                           ; switch strategies available:
  6788                           ; Name         Instructions Cycles
  6789                           ; simple_byte            7     4 (average)
  6790                           ;	Chosen strategy is simple_byte
  6791  0136E6  0A00               	xorlw	0	; case 0
  6792  0136E8  B4D8               	btfsc	status,2,c
  6793  0136EA  D7DF               	goto	l9375
  6794  0136EC  0A01               	xorlw	1	; case 1
  6795  0136EE  A4D8               	btfss	status,2,c
  6796  0136F0  0012               	return	
  6797  0136F2  D7E9               	goto	l9377
  6798  0136F4                     __end_of_LED_Set:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           postinc0	equ	0xFEE
  6808                           wreg	equ	0xFE8
  6809                           postdec1	equ	0xFE5
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           fsr2h	equ	0xFDA
  6816                           fsr2l	equ	0xFD9
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function _MXK_Dequeue *****************
  6820 ;; Defined at:
  6821 ;;		line 153 in file "Library/MXK.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;		None
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;		None
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      void 
  6828 ;; Registers used:
  6829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;Total ram usage:        0 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:   12
  6842 ;; This function calls:
  6843 ;;		Absolute function
  6844 ;;		_Motor_Step
  6845 ;; This function is called by:
  6846 ;;		_main
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text23
  6851  013B12                     __ptext23:
  6852                           	opt stack 0
  6853  013B12                     _MXK_Dequeue:
  6854                           	opt stack 18
  6855                           
  6856                           ;MXK.c: 155: if (lQueue)
  6857                           
  6858                           ;incstack = 0
  6859  013B12  5025               	movf	_lQueue,w,c	;volatile
  6860  013B14  1026               	iorwf	_lQueue+1,w,c	;volatile
  6861  013B16  1027               	iorwf	_lQueue+2,w,c	;volatile
  6862  013B18  B4D8               	btfsc	status,2,c
  6863  013B1A  D00C               	goto	l11343
  6864                           
  6865                           ;MXK.c: 156: lQueue();
  6866  013B1C  D801               	call	u7898
  6867  013B1E  D00A               	goto	l11343
  6868  013B20                     u7898:
  6869  013B20  0005               	push	
  6870  013B22  6EFA               	movwf	pclath,c
  6871  013B24  5025               	movf	_lQueue,w,c	;volatile
  6872  013B26  6EFD               	movwf	tosl,c
  6873  013B28  5026               	movf	_lQueue+1,w,c	;volatile
  6874  013B2A  6EFE               	movwf	tosh,c
  6875  013B2C  5027               	movf	_lQueue+2,w,c	;volatile
  6876  013B2E  6EFF               	movwf	tosu,c
  6877  013B30  50FA               	movf	pclath,w,c
  6878  013B32  0012               	return		;indir
  6879  013B34                     l11343:
  6880                           
  6881                           ;MXK.c: 157: lQueue = 0;
  6882  013B34  0E00               	movlw	0
  6883  013B36  6E25               	movwf	_lQueue,c	;volatile
  6884  013B38  0E00               	movlw	0
  6885  013B3A  6E26               	movwf	_lQueue+1,c	;volatile
  6886  013B3C  0E00               	movlw	0
  6887  013B3E  6E27               	movwf	_lQueue+2,c	;volatile
  6888  013B40  0012               	return		;funcret
  6889  013B42                     __end_of_MXK_Dequeue:
  6890                           	opt stack 0
  6891                           tosu	equ	0xFFF
  6892                           tosh	equ	0xFFE
  6893                           tosl	equ	0xFFD
  6894                           pclath	equ	0xFFA
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           postdec1	equ	0xFE5
  6905                           fsr1h	equ	0xFE2
  6906                           fsr1l	equ	0xFE1
  6907                           indf2	equ	0xFDF
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _Motor_Step *****************
  6915 ;; Defined at:
  6916 ;;		line 75 in file "Library/Motor.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;Total ram usage:        2 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:   11
  6937 ;; This function calls:
  6938 ;;		_MXK_Queue
  6939 ;;		_MXK_Release
  6940 ;;		_MXK_SwitchTo
  6941 ;;		_Port_SetPin
  6942 ;;		_Timer0_Restart
  6943 ;;		_Timer0_Stop
  6944 ;; This function is called by:
  6945 ;;		_Motor_Init
  6946 ;;		_Timer0_ISR
  6947 ;;		_MXK_Dequeue
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text24
  6952  011D6A                     __ptext24:
  6953                           	opt stack 0
  6954  011D6A                     _Motor_Step:
  6955                           	opt stack 0
  6956                           
  6957                           ;Skip over the trampoline to the duplicate function for level 2
  6958  011D6A  B249               	btfsc	btemp,1,c
  6959  011D6C  EF47  F08F         	goto	i2_Motor_Step
  6960  011D70                     _Motor_Step$intlevel0:
  6961                           	opt stack 18
  6962                           
  6963                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  6964                           
  6965                           ;incstack = 0
  6966  011D70  EE20 F004          	lfsr	2,4
  6967  011D74  502C               	movf	_lMotor,w,c
  6968  011D76  26D9               	addwf	fsr2l,f,c
  6969  011D78  502D               	movf	_lMotor+1,w,c
  6970  011D7A  22DA               	addwfc	fsr2h,f,c
  6971  011D7C  50DF               	movf	indf2,w,c
  6972  011D7E  EC7D  F09C         	call	_MXK_SwitchTo
  6973  011D82  0900               	iorlw	0
  6974  011D84  B4D8               	btfsc	status,2,c
  6975  011D86  D07A               	goto	l10375
  6976                           
  6977                           ;Motor.c: 78: {
  6978                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  6979  011D88  C02C  FFD9         	movff	_lMotor,fsr2l
  6980  011D8C  C02D  FFDA         	movff	_lMotor+1,fsr2h
  6981  011D90  50DE               	movf	postinc2,w,c
  6982  011D92  10DE               	iorwf	postinc2,w,c
  6983  011D94  B4D8               	btfsc	status,2,c
  6984  011D96  D06D               	goto	l10369
  6985                           
  6986                           ;Motor.c: 80: {
  6987                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  6988  011D98  C02C  FFD9         	movff	_lMotor,fsr2l
  6989  011D9C  C02D  FFDA         	movff	_lMotor+1,fsr2h
  6990  011DA0  0E01               	movlw	1
  6991  011DA2  BEDB               	btfsc	plusw2,7,c
  6992  011DA4  D026               	goto	l10353
  6993  011DA6  0E01               	movlw	1
  6994  011DA8  50DB               	movf	plusw2,w,c
  6995  011DAA  E103               	bnz	u6750
  6996  011DAC  04DE               	decf	postinc2,w,c
  6997  011DAE  A0D8               	btfss	status,0,c
  6998  011DB0  D020               	goto	l10353
  6999  011DB2                     u6750:
  7000                           
  7001                           ;Motor.c: 83: {
  7002                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7003  011DB2  C02C  FFD9         	movff	_lMotor,fsr2l
  7004  011DB6  C02D  FFDA         	movff	_lMotor+1,fsr2h
  7005  011DBA  28DE               	incf	postinc2,w,c
  7006  011DBC  E104               	bnz	u6760
  7007  011DBE  0E7F               	movlw	127
  7008  011DC0  18DE               	xorwf	postinc2,w,c
  7009  011DC2  B4D8               	btfsc	status,2,c
  7010  011DC4  D007               	goto	l10351
  7011  011DC6                     u6760:
  7012                           
  7013                           ;Motor.c: 85: lMotor->mDelta --;
  7014  011DC6  C02C  FFD9         	movff	_lMotor,fsr2l
  7015  011DCA  C02D  FFDA         	movff	_lMotor+1,fsr2h
  7016  011DCE  06DE               	decf	postinc2,f,c
  7017  011DD0  0E00               	movlw	0
  7018  011DD2  5ADD               	subwfb	postdec2,f,c
  7019  011DD4                     l10351:
  7020                           
  7021                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7022  011DD4  0E94               	movlw	low _PortE
  7023  011DD6  0100               	movlb	0	; () banked
  7024  011DD8  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  7025  011DDA  0E00               	movlw	high _PortE
  7026  011DDC  0100               	movlb	0	; () banked
  7027  011DDE  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7028  011DE0  0E00               	movlw	0
  7029  011DE2  0100               	movlb	0	; () banked
  7030  011DE4  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  7031  011DE6  0E01               	movlw	1
  7032  011DE8  0100               	movlb	0	; () banked
  7033  011DEA  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  7034  011DEC  EC7F  F091         	call	_Port_SetPin	;wreg free
  7035                           
  7036                           ;Motor.c: 88: }
  7037  011DF0  D01F               	goto	l10359
  7038  011DF2                     l10353:
  7039                           
  7040                           ;Motor.c: 89: else
  7041                           ;Motor.c: 90: {
  7042                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7043  011DF2  C02C  FFD9         	movff	_lMotor,fsr2l
  7044  011DF6  C02D  FFDA         	movff	_lMotor+1,fsr2h
  7045  011DFA  04DE               	decf	postinc2,w,c
  7046  011DFC  E104               	bnz	u6770
  7047  011DFE  0E80               	movlw	128
  7048  011E00  18DE               	xorwf	postinc2,w,c
  7049  011E02  B4D8               	btfsc	status,2,c
  7050  011E04  D007               	goto	l10357
  7051  011E06                     u6770:
  7052                           
  7053                           ;Motor.c: 92: lMotor->mDelta ++;
  7054  011E06  C02C  FFD9         	movff	_lMotor,fsr2l
  7055  011E0A  C02D  FFDA         	movff	_lMotor+1,fsr2h
  7056  011E0E  2ADE               	incf	postinc2,f,c
  7057  011E10  0E00               	movlw	0
  7058  011E12  22DD               	addwfc	postdec2,f,c
  7059  011E14                     l10357:
  7060                           
  7061                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7062  011E14  0E94               	movlw	low _PortE
  7063  011E16  0100               	movlb	0	; () banked
  7064  011E18  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  7065  011E1A  0E00               	movlw	high _PortE
  7066  011E1C  0100               	movlb	0	; () banked
  7067  011E1E  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7068  011E20  0E00               	movlw	0
  7069  011E22  0100               	movlb	0	; () banked
  7070  011E24  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  7071  011E26  0E00               	movlw	0
  7072  011E28  0100               	movlb	0	; () banked
  7073  011E2A  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  7074  011E2C  EC7F  F091         	call	_Port_SetPin	;wreg free
  7075  011E30                     l10359:
  7076                           
  7077                           ;Motor.c: 95: }
  7078                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7079  011E30  0E94               	movlw	low _PortE
  7080  011E32  0100               	movlb	0	; () banked
  7081  011E34  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  7082  011E36  0E00               	movlw	high _PortE
  7083  011E38  0100               	movlb	0	; () banked
  7084  011E3A  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7085  011E3C  0E01               	movlw	1
  7086  011E3E  0100               	movlb	0	; () banked
  7087  011E40  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  7088  011E42  0E01               	movlw	1
  7089  011E44  0100               	movlb	0	; () banked
  7090  011E46  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  7091  011E48  EC7F  F091         	call	_Port_SetPin	;wreg free
  7092                           
  7093                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7094  011E4C  0E94               	movlw	low _PortE
  7095  011E4E  0100               	movlb	0	; () banked
  7096  011E50  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  7097  011E52  0E00               	movlw	high _PortE
  7098  011E54  0100               	movlb	0	; () banked
  7099  011E56  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7100  011E58  0E01               	movlw	1
  7101  011E5A  0100               	movlb	0	; () banked
  7102  011E5C  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  7103  011E5E  0E00               	movlw	0
  7104  011E60  0100               	movlb	0	; () banked
  7105  011E62  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  7106  011E64  EC7F  F091         	call	_Port_SetPin	;wreg free
  7107                           
  7108                           ;Motor.c: 101: MXK_Release();
  7109  011E68  ECD0  F09E         	call	_MXK_Release	;wreg free
  7110                           
  7111                           ;Motor.c: 102: Timer0_Restart();
  7112  011E6C  EC08  F09F         	call	_Timer0_Restart	;wreg free
  7113                           
  7114                           ;Motor.c: 103: return;
  7115  011E70  0012               	return	
  7116  011E72                     l10369:
  7117                           
  7118                           ;Motor.c: 104: }
  7119                           ;Motor.c: 105: MXK_Release();
  7120  011E72  ECD0  F09E         	call	_MXK_Release	;wreg free
  7121                           
  7122                           ;Motor.c: 106: Timer0_Stop();
  7123  011E76  EC22  F09F         	call	_Timer0_Stop	;wreg free
  7124                           
  7125                           ;Motor.c: 107: return;
  7126  011E7A  0012               	return	
  7127  011E7C                     l10375:
  7128                           
  7129                           ;Motor.c: 108: }
  7130                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  7131  011E7C  C071  F0B7         	movff	_lStepFunction,MXK_Queue@pCallback
  7132  011E80  C072  F0B8         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  7133  011E84  C073  F0B9         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  7134  011E88  ECFA  F09E         	call	_MXK_Queue	;wreg free
  7135  011E8C  0012               	return		;funcret
  7136  011E8E                     __end_of_Motor_Step:
  7137                           	opt stack 0
  7138                           tosu	equ	0xFFF
  7139                           tosh	equ	0xFFE
  7140                           tosl	equ	0xFFD
  7141                           pclath	equ	0xFFA
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           intcon	equ	0xFF2
  7149                           postinc0	equ	0xFEE
  7150                           wreg	equ	0xFE8
  7151                           postdec1	equ	0xFE5
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           plusw2	equ	0xFDB
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _Timer0_Stop *****************
  7163 ;; Defined at:
  7164 ;;		line 89 in file "Library/Timer0.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;		None
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		None
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        0 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    7
  7185 ;; This function calls:
  7186 ;;		Nothing
  7187 ;; This function is called by:
  7188 ;;		_Motor_Step
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text25
  7193  013E44                     __ptext25:
  7194                           	opt stack 0
  7195  013E44                     _Timer0_Stop:
  7196                           	opt stack 21
  7197                           
  7198                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  7199                           
  7200                           ;incstack = 0
  7201  013E44  9AF2               	bcf	intcon,5,c	;volatile
  7202                           
  7203                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  7204  013E46  94F2               	bcf	intcon,2,c	;volatile
  7205  013E48  0012               	return		;funcret
  7206  013E4A                     __end_of_Timer0_Stop:
  7207                           	opt stack 0
  7208                           tosu	equ	0xFFF
  7209                           tosh	equ	0xFFE
  7210                           tosl	equ	0xFFD
  7211                           pclath	equ	0xFFA
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           intcon	equ	0xFF2
  7219                           postinc0	equ	0xFEE
  7220                           wreg	equ	0xFE8
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           plusw2	equ	0xFDB
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8
  7231                           
  7232 ;; *************** function _Timer0_Restart *****************
  7233 ;; Defined at:
  7234 ;;		line 83 in file "Library/Timer0.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;		None
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;		None
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		None
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;Total ram usage:        0 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    7
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_Motor_Step
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text26
  7263  013E10                     __ptext26:
  7264                           	opt stack 0
  7265  013E10                     _Timer0_Restart:
  7266                           	opt stack 21
  7267                           
  7268                           ;Timer0.c: 85: TMR0 = COUNTER;
  7269                           
  7270                           ;incstack = 0
  7271  013E10  C02A  FFD6         	movff	_COUNTER,4054	;volatile
  7272  013E14  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
  7273                           
  7274                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  7275  013E18  8AF2               	bsf	intcon,5,c	;volatile
  7276  013E1A  0012               	return		;funcret
  7277  013E1C                     __end_of_Timer0_Restart:
  7278                           	opt stack 0
  7279                           tosu	equ	0xFFF
  7280                           tosh	equ	0xFFE
  7281                           tosl	equ	0xFFD
  7282                           pclath	equ	0xFFA
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           postdec1	equ	0xFE5
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           indf2	equ	0xFDF
  7296                           postinc2	equ	0xFDE
  7297                           postdec2	equ	0xFDD
  7298                           plusw2	equ	0xFDB
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _MXK_SwitchTo *****************
  7304 ;; Defined at:
  7305 ;;		line 105 in file "Library/MXK.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  pModule         1    wreg     enum E7871
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  pModule         1    7[BANK0 ] enum E7871
  7310 ;;  CUR             1    6[BANK0 ] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      unsigned char 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        2 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    8
  7327 ;; This function calls:
  7328 ;;		_delay_us
  7329 ;; This function is called by:
  7330 ;;		_Motor_Step
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text27
  7335  0138FA                     __ptext27:
  7336                           	opt stack 0
  7337  0138FA                     _MXK_SwitchTo:
  7338                           	opt stack 20
  7339                           
  7340                           ;incstack = 0
  7341                           ;MXK_SwitchTo@pModule stored from wreg
  7342  0138FA  0100               	movlb	0	; () banked
  7343  0138FC  6FBE               	movwf	MXK_SwitchTo@pModule& (0+255),b
  7344                           
  7345                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  7346  0138FE  5086               	movf	3974,w,c	;volatile
  7347  013900  0B0F               	andlw	15
  7348  013902  0100               	movlb	0	; () banked
  7349  013904  6FBD               	movwf	MXK_SwitchTo@CUR& (0+255),b
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  7353  013906  5044               	movf	_Bus_State,w,c
  7354  013908  A4D8               	btfss	status,2,c
  7355  01390A  D002               	goto	l9913
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;MXK.c: 110: return 0;
  7359  01390C  0E00               	movlw	0
  7360                           
  7361                           ; BSR set to: 0
  7362  01390E  0012               	return	
  7363  013910                     l9913:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  7367  013910  0E00               	movlw	0
  7368  013912  6E44               	movwf	_Bus_State,c
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;MXK.c: 114: if (CUR != pModule)
  7372  013914  0100               	movlb	0	; () banked
  7373  013916  51BE               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  7374  013918  0100               	movlb	0	; () banked
  7375  01391A  19BD               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  7376  01391C  B4D8               	btfsc	status,2,c
  7377  01391E  D00C               	goto	l9921
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;MXK.c: 115: {
  7381                           ;MXK.c: 116: PORTG &= ~(0xF);
  7382  013920  0EF0               	movlw	240
  7383  013922  1686               	andwf	3974,f,c	;volatile
  7384                           
  7385                           ;MXK.c: 117: PORTG |= pModule;
  7386  013924  0100               	movlb	0	; () banked
  7387  013926  51BE               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  7388  013928  1286               	iorwf	3974,f,c	;volatile
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;MXK.c: 120: delay_us(10);
  7392  01392A  0E00               	movlw	0
  7393  01392C  0100               	movlb	0	; () banked
  7394  01392E  6FB8               	movwf	(delay_us@us+1)& (0+255),b
  7395  013930  0E0A               	movlw	10
  7396  013932  6FB7               	movwf	delay_us@us& (0+255),b
  7397  013934  EC29  F09B         	call	_delay_us	;wreg free
  7398  013938                     l9921:
  7399                           
  7400                           ;MXK.c: 121: }
  7401                           ;MXK.c: 122: return 1;
  7402  013938  0E01               	movlw	1
  7403  01393A  0012               	return	
  7404  01393C                     __end_of_MXK_SwitchTo:
  7405                           	opt stack 0
  7406                           tosu	equ	0xFFF
  7407                           tosh	equ	0xFFE
  7408                           tosl	equ	0xFFD
  7409                           pclath	equ	0xFFA
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           intcon	equ	0xFF2
  7417                           postinc0	equ	0xFEE
  7418                           wreg	equ	0xFE8
  7419                           postdec1	equ	0xFE5
  7420                           fsr1h	equ	0xFE2
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           postdec2	equ	0xFDD
  7425                           plusw2	equ	0xFDB
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function _MXK_Release *****************
  7431 ;; Defined at:
  7432 ;;		line 130 in file "Library/MXK.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;		None
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;		None
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  1    wreg      unsigned char 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;Total ram usage:        0 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    7
  7453 ;; This function calls:
  7454 ;;		Nothing
  7455 ;; This function is called by:
  7456 ;;		_Motor_Step
  7457 ;;		_main
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text28
  7462  013DA0                     __ptext28:
  7463                           	opt stack 0
  7464  013DA0                     _MXK_Release:
  7465                           	opt stack 23
  7466                           
  7467                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  7468                           
  7469                           ;incstack = 0
  7470  013DA0  0E01               	movlw	1
  7471  013DA2  6E44               	movwf	_Bus_State,c
  7472                           
  7473                           ;MXK.c: 134: if (lQueue != 0)
  7474  013DA4  5025               	movf	_lQueue,w,c	;volatile
  7475  013DA6  1026               	iorwf	_lQueue+1,w,c	;volatile
  7476  013DA8  1027               	iorwf	_lQueue+2,w,c	;volatile
  7477  013DAA  B4D8               	btfsc	status,2,c
  7478  013DAC  D002               	goto	l9933
  7479                           
  7480                           ;MXK.c: 135: return 1;
  7481  013DAE  0E01               	movlw	1
  7482  013DB0  0012               	return	
  7483  013DB2                     l9933:
  7484                           
  7485                           ;MXK.c: 137: return 0;
  7486  013DB2  0E00               	movlw	0
  7487  013DB4  0012               	return	
  7488  013DB6                     __end_of_MXK_Release:
  7489                           	opt stack 0
  7490                           tosu	equ	0xFFF
  7491                           tosh	equ	0xFFE
  7492                           tosl	equ	0xFFD
  7493                           pclath	equ	0xFFA
  7494                           tblptru	equ	0xFF8
  7495                           tblptrh	equ	0xFF7
  7496                           tblptrl	equ	0xFF6
  7497                           tablat	equ	0xFF5
  7498                           prodh	equ	0xFF4
  7499                           prodl	equ	0xFF3
  7500                           intcon	equ	0xFF2
  7501                           postinc0	equ	0xFEE
  7502                           wreg	equ	0xFE8
  7503                           postdec1	equ	0xFE5
  7504                           fsr1h	equ	0xFE2
  7505                           fsr1l	equ	0xFE1
  7506                           indf2	equ	0xFDF
  7507                           postinc2	equ	0xFDE
  7508                           postdec2	equ	0xFDD
  7509                           plusw2	equ	0xFDB
  7510                           fsr2h	equ	0xFDA
  7511                           fsr2l	equ	0xFD9
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function _MXK_Queue *****************
  7515 ;; Defined at:
  7516 ;;		line 144 in file "Library/MXK.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  7519 ;;		 -> Absolute function(1), Motor_Step(1), 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  1    wreg      void 
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:        3 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    7
  7538 ;; This function calls:
  7539 ;;		Nothing
  7540 ;; This function is called by:
  7541 ;;		_Motor_Step
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text29
  7546  013DF4                     __ptext29:
  7547                           	opt stack 0
  7548  013DF4                     _MXK_Queue:
  7549                           	opt stack 21
  7550                           
  7551                           ;MXK.c: 146: lQueue = pCallback;
  7552                           
  7553                           ;incstack = 0
  7554  013DF4  C0B7  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  7555  013DF8  C0B8  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  7556  013DFC  C0B9  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  7557  013E00  0012               	return		;funcret
  7558  013E02                     __end_of_MXK_Queue:
  7559                           	opt stack 0
  7560                           tosu	equ	0xFFF
  7561                           tosh	equ	0xFFE
  7562                           tosl	equ	0xFFD
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           postinc0	equ	0xFEE
  7572                           wreg	equ	0xFE8
  7573                           postdec1	equ	0xFE5
  7574                           fsr1h	equ	0xFE2
  7575                           fsr1l	equ	0xFE1
  7576                           indf2	equ	0xFDF
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           plusw2	equ	0xFDB
  7580                           fsr2h	equ	0xFDA
  7581                           fsr2l	equ	0xFD9
  7582                           status	equ	0xFD8
  7583                           
  7584 ;; *************** function _MXK_BlockSwitchTo *****************
  7585 ;; Defined at:
  7586 ;;		line 82 in file "Library/MXK.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  pModule         1    wreg     enum E7871
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  pModule         1    7[BANK0 ] enum E7871
  7591 ;;  CUR             1    6[BANK0 ] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      unsigned char 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;Total ram usage:        2 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    8
  7608 ;; This function calls:
  7609 ;;		_delay_us
  7610 ;; This function is called by:
  7611 ;;		_main
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text30
  7616  01397C                     __ptext30:
  7617                           	opt stack 0
  7618  01397C                     _MXK_BlockSwitchTo:
  7619                           	opt stack 22
  7620                           
  7621                           ;incstack = 0
  7622                           ;MXK_BlockSwitchTo@pModule stored from wreg
  7623  01397C  0100               	movlb	0	; () banked
  7624  01397E  6FBE               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  7625                           
  7626                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  7627  013980  5086               	movf	3974,w,c	;volatile
  7628  013982  0B0F               	andlw	15
  7629  013984  0100               	movlb	0	; () banked
  7630  013986  6FBD               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  7631  013988                     l10707:
  7632  013988  5044               	movf	_Bus_State,w,c
  7633  01398A  B4D8               	btfsc	status,2,c
  7634  01398C  D7FD               	goto	l10707
  7635                           
  7636                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  7637  01398E  0E00               	movlw	0
  7638  013990  6E44               	movwf	_Bus_State,c
  7639                           
  7640                           ;MXK.c: 90: if (CUR != pModule)
  7641  013992  0100               	movlb	0	; () banked
  7642  013994  51BE               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  7643  013996  0100               	movlb	0	; () banked
  7644  013998  19BD               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  7645  01399A  B4D8               	btfsc	status,2,c
  7646  01399C  D00C               	goto	l10717
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;MXK.c: 91: {
  7650                           ;MXK.c: 92: PORTG &= ~(0xF);
  7651  01399E  0EF0               	movlw	240
  7652  0139A0  1686               	andwf	3974,f,c	;volatile
  7653                           
  7654                           ;MXK.c: 93: PORTG |= pModule;
  7655  0139A2  0100               	movlb	0	; () banked
  7656  0139A4  51BE               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  7657  0139A6  1286               	iorwf	3974,f,c	;volatile
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;MXK.c: 96: delay_us(10);
  7661  0139A8  0E00               	movlw	0
  7662  0139AA  0100               	movlb	0	; () banked
  7663  0139AC  6FB8               	movwf	(delay_us@us+1)& (0+255),b
  7664  0139AE  0E0A               	movlw	10
  7665  0139B0  6FB7               	movwf	delay_us@us& (0+255),b
  7666  0139B2  EC29  F09B         	call	_delay_us	;wreg free
  7667  0139B6                     l10717:
  7668                           
  7669                           ;MXK.c: 97: }
  7670                           ;MXK.c: 98: return 1;
  7671  0139B6  0E01               	movlw	1
  7672  0139B8  0012               	return	
  7673  0139BA                     __end_of_MXK_BlockSwitchTo:
  7674                           	opt stack 0
  7675                           tosu	equ	0xFFF
  7676                           tosh	equ	0xFFE
  7677                           tosl	equ	0xFFD
  7678                           pclath	equ	0xFFA
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           prodh	equ	0xFF4
  7684                           prodl	equ	0xFF3
  7685                           intcon	equ	0xFF2
  7686                           postinc0	equ	0xFEE
  7687                           wreg	equ	0xFE8
  7688                           postdec1	equ	0xFE5
  7689                           fsr1h	equ	0xFE2
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           plusw2	equ	0xFDB
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _delay_us *****************
  7700 ;; Defined at:
  7701 ;;		line 255 in file "Library/Types.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  us              2    0[BANK0 ] unsigned short 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  u               4    2[BANK0 ] unsigned long 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        6 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    7
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_MXK_BlockSwitchTo
  7726 ;;		_MXK_SwitchTo
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text31
  7731  013652                     __ptext31:
  7732                           	opt stack 0
  7733  013652                     _delay_us:
  7734                           	opt stack 20
  7735                           
  7736                           ;Types.c: 256: unsigned long u;
  7737                           ;Types.c: 257: while (us--) {
  7738                           
  7739                           ;incstack = 0
  7740  013652  D01C               	goto	l9227
  7741  013654                     l9219:
  7742                           
  7743                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  7744  013654  0E00               	movlw	0
  7745  013656  0100               	movlb	0	; () banked
  7746  013658  6FB9               	movwf	delay_us@u& (0+255),b
  7747  01365A  0E00               	movlw	0
  7748  01365C  6FBA               	movwf	(delay_us@u+1)& (0+255),b
  7749  01365E  0E00               	movlw	0
  7750  013660  6FBB               	movwf	(delay_us@u+2)& (0+255),b
  7751  013662  0E00               	movlw	0
  7752  013664  6FBC               	movwf	(delay_us@u+3)& (0+255),b
  7753  013666                     l9221:
  7754                           
  7755                           ; BSR set to: 0
  7756  013666  0100               	movlb	0	; () banked
  7757  013668  51B9               	movf	delay_us@u& (0+255),w,b
  7758  01366A  0100               	movlb	0	; () banked
  7759  01366C  11BA               	iorwf	(delay_us@u+1)& (0+255),w,b
  7760  01366E  0100               	movlb	0	; () banked
  7761  013670  11BB               	iorwf	(delay_us@u+2)& (0+255),w,b
  7762  013672  0100               	movlb	0	; () banked
  7763  013674  11BC               	iorwf	(delay_us@u+3)& (0+255),w,b
  7764  013676  A4D8               	btfss	status,2,c
  7765  013678  D009               	goto	l9227
  7766                           
  7767                           ; BSR set to: 0
  7768                           
  7769                           ; BSR set to: 0
  7770  01367A  F000               	nop		; ;# 
  7771  01367C  0E01               	movlw	1
  7772  01367E  0100               	movlb	0	; () banked
  7773  013680  27B9               	addwf	delay_us@u& (0+255),f,b
  7774  013682  0E00               	movlw	0
  7775  013684  23BA               	addwfc	(delay_us@u+1)& (0+255),f,b
  7776  013686  23BB               	addwfc	(delay_us@u+2)& (0+255),f,b
  7777  013688  23BC               	addwfc	(delay_us@u+3)& (0+255),f,b
  7778  01368A  D7ED               	goto	l9221
  7779  01368C                     l9227:
  7780  01368C  0100               	movlb	0	; () banked
  7781  01368E  07B7               	decf	delay_us@us& (0+255),f,b
  7782  013690  A0D8               	btfss	status,0,c
  7783  013692  07B8               	decf	(delay_us@us+1)& (0+255),f,b
  7784  013694  0100               	movlb	0	; () banked
  7785  013696  29B7               	incf	delay_us@us& (0+255),w,b
  7786  013698  E1DD               	bnz	l9219
  7787  01369A  0100               	movlb	0	; () banked
  7788  01369C  29B8               	incf	(delay_us@us+1)& (0+255),w,b
  7789  01369E  B4D8               	btfsc	status,2,c
  7790  0136A0  0012               	return	
  7791  0136A2  D7D8               	goto	l9219
  7792  0136A4                     __end_of_delay_us:
  7793                           	opt stack 0
  7794                           tosu	equ	0xFFF
  7795                           tosh	equ	0xFFE
  7796                           tosl	equ	0xFFD
  7797                           pclath	equ	0xFFA
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon	equ	0xFF2
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           postdec1	equ	0xFE5
  7808                           fsr1h	equ	0xFE2
  7809                           fsr1l	equ	0xFE1
  7810                           indf2	equ	0xFDF
  7811                           postinc2	equ	0xFDE
  7812                           postdec2	equ	0xFDD
  7813                           plusw2	equ	0xFDB
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _LCD_Init *****************
  7819 ;; Defined at:
  7820 ;;		line 172 in file "Library/LCD.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;		None
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  i               2   55[BANK0 ] unsigned short 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      void 
  7827 ;; Registers used:
  7828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;Total ram usage:        4 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:   15
  7841 ;; This function calls:
  7842 ;;		_Configure_GPIOs
  7843 ;;		_LCD_Fill
  7844 ;;		_LCD_Write
  7845 ;;		_Set_Rotation
  7846 ;;		_delay_ms
  7847 ;; This function is called by:
  7848 ;;		_main
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           	psect	text32
  7853  01193A                     __ptext32:
  7854                           	opt stack 0
  7855  01193A                     _LCD_Init:
  7856                           	opt stack 15
  7857                           
  7858                           ;LCD.c: 174: UINT16 i;
  7859                           ;LCD.c: 175: Configure_GPIOs();
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;incstack = 0
  7863  01193A  ECFC  F098         	call	_Configure_GPIOs	;wreg free
  7864                           
  7865                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  7866  01193E  0E00               	movlw	0
  7867  011940  0100               	movlb	0	; () banked
  7868  011942  6FEF               	movwf	(LCD_Init@i+1)& (0+255),b
  7869  011944  0E00               	movlw	0
  7870  011946  6FEE               	movwf	LCD_Init@i& (0+255),b
  7871                           
  7872                           ; BSR set to: 0
  7873  011948  0100               	movlb	0	; () banked
  7874  01194A  51EF               	movf	(LCD_Init@i+1)& (0+255),w,b
  7875  01194C  E106               	bnz	u6780
  7876  01194E  0E59               	movlw	89
  7877  011950  0100               	movlb	0	; () banked
  7878  011952  5DEE               	subwf	LCD_Init@i& (0+255),w,b
  7879  011954  B0D8               	btfsc	status,0,c
  7880  011956  D08B               	goto	l10401
  7881  011958  D001               	goto	l10385
  7882  01195A                     u6780:
  7883                           
  7884                           ; BSR set to: 0
  7885  01195A  D089               	goto	l10401
  7886  01195C                     l10385:
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;LCD.c: 178: {
  7890                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  7891  01195C  90D8               	bcf	status,0,c
  7892  01195E  0100               	movlb	0	; () banked
  7893  011960  35EE               	rlcf	LCD_Init@i& (0+255),w,b
  7894  011962  6EF6               	movwf	tblptrl,c
  7895  011964  0100               	movlb	0	; () banked
  7896  011966  35EF               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7897  011968  6EF7               	movwf	tblptrh,c
  7898  01196A  0E03               	movlw	low _InitList
  7899  01196C  26F6               	addwf	tblptrl,f,c
  7900  01196E  0EFD               	movlw	high _InitList
  7901  011970  22F7               	addwfc	tblptrh,f,c
  7902  011972                     	if	1	;There are 3 active tblptr bytes
  7903  011972  6AF8               	clrf	tblptru,c
  7904  011974  0E00               	movlw	low (__mediumconst shr (0+16))
  7905  011976  22F8               	addwfc	tblptru,f,c
  7906  011978                     	endif
  7907  011978  0009               	tblrd		*+
  7908  01197A  0E80               	movlw	128
  7909  01197C  18F5               	xorwf	tablat,w,c
  7910  01197E  0009               	tblrd		*+
  7911  011980  10F5               	iorwf	tablat,w,c
  7912  011982  A4D8               	btfss	status,2,c
  7913  011984  D022               	goto	l10391
  7914                           
  7915                           ; BSR set to: 0
  7916  011986  0100               	movlb	0	; () banked
  7917  011988  51EF               	movf	(LCD_Init@i+1)& (0+255),w,b
  7918  01198A  E11F               	bnz	l10391
  7919  01198C  0E58               	movlw	88
  7920  01198E  0100               	movlb	0	; () banked
  7921  011990  5DEE               	subwf	LCD_Init@i& (0+255),w,b
  7922  011992  B0D8               	btfsc	status,0,c
  7923  011994  D01A               	goto	l10391
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;LCD.c: 180: delay_ms(InitList[++i]);
  7927  011996  0100               	movlb	0	; () banked
  7928  011998  4BEE               	infsnz	LCD_Init@i& (0+255),f,b
  7929  01199A  2BEF               	incf	(LCD_Init@i+1)& (0+255),f,b
  7930  01199C  90D8               	bcf	status,0,c
  7931  01199E  0100               	movlb	0	; () banked
  7932  0119A0  35EE               	rlcf	LCD_Init@i& (0+255),w,b
  7933  0119A2  6EF6               	movwf	tblptrl,c
  7934  0119A4  0100               	movlb	0	; () banked
  7935  0119A6  35EF               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7936  0119A8  6EF7               	movwf	tblptrh,c
  7937  0119AA  0E03               	movlw	low _InitList
  7938  0119AC  26F6               	addwf	tblptrl,f,c
  7939  0119AE  0EFD               	movlw	high _InitList
  7940  0119B0  22F7               	addwfc	tblptrh,f,c
  7941  0119B2                     	if	1	;There are 3 active tblptr bytes
  7942  0119B2  6AF8               	clrf	tblptru,c
  7943  0119B4  0E00               	movlw	low (__mediumconst shr (0+16))
  7944  0119B6  22F8               	addwfc	tblptru,f,c
  7945  0119B8                     	endif
  7946  0119B8  0009               	tblrd		*+
  7947  0119BA  CFF5 F0B7          	movff	tablat,delay_ms@ms
  7948  0119BE  000A               	tblrd		*-
  7949  0119C0  CFF5 F0B8          	movff	tablat,delay_ms@ms+1
  7950  0119C4  ECA0  F099         	call	_delay_ms	;wreg free
  7951  0119C8  D04B               	goto	l10397
  7952  0119CA                     l10391:
  7953                           
  7954                           ;LCD.c: 181: else
  7955                           ;LCD.c: 182: {
  7956                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  7957  0119CA  90D8               	bcf	status,0,c
  7958  0119CC  0100               	movlb	0	; () banked
  7959  0119CE  35EE               	rlcf	LCD_Init@i& (0+255),w,b
  7960  0119D0  6EF6               	movwf	tblptrl,c
  7961  0119D2  0100               	movlb	0	; () banked
  7962  0119D4  35EF               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7963  0119D6  6EF7               	movwf	tblptrh,c
  7964  0119D8  0E03               	movlw	low _InitList
  7965  0119DA  26F6               	addwf	tblptrl,f,c
  7966  0119DC  0EFD               	movlw	high _InitList
  7967  0119DE  22F7               	addwfc	tblptrh,f,c
  7968  0119E0                     	if	1	;There are 3 active tblptr bytes
  7969  0119E0  6AF8               	clrf	tblptru,c
  7970  0119E2  0E00               	movlw	low (__mediumconst shr (0+16))
  7971  0119E4  22F8               	addwfc	tblptru,f,c
  7972  0119E6                     	endif
  7973  0119E6  0009               	tblrd		*+
  7974  0119E8  0E00               	movlw	0
  7975  0119EA  5EF5               	subwf	tablat,f,c
  7976  0119EC  0009               	tblrd		*+
  7977  0119EE  0E01               	movlw	1
  7978  0119F0  5AF5               	subwfb	tablat,f,c
  7979  0119F2  A0D8               	btfss	status,0,c
  7980  0119F4  D020               	goto	l10395
  7981                           
  7982                           ; BSR set to: 0
  7983  0119F6  0E00               	movlw	0
  7984  0119F8  0100               	movlb	0	; () banked
  7985  0119FA  6FBA               	movwf	LCD_Write@mode& (0+255),b
  7986  0119FC  90D8               	bcf	status,0,c
  7987  0119FE  0100               	movlb	0	; () banked
  7988  011A00  35EE               	rlcf	LCD_Init@i& (0+255),w,b
  7989  011A02  6EF6               	movwf	tblptrl,c
  7990  011A04  0100               	movlb	0	; () banked
  7991  011A06  35EF               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7992  011A08  6EF7               	movwf	tblptrh,c
  7993  011A0A  0E03               	movlw	low _InitList
  7994  011A0C  26F6               	addwf	tblptrl,f,c
  7995  011A0E  0EFD               	movlw	high _InitList
  7996  011A10  22F7               	addwfc	tblptrh,f,c
  7997  011A12                     	if	1	;There are 3 active tblptr bytes
  7998  011A12  6AF8               	clrf	tblptru,c
  7999  011A14  0E00               	movlw	low (__mediumconst shr (0+16))
  8000  011A16  22F8               	addwfc	tblptru,f,c
  8001  011A18                     	endif
  8002  011A18  0009               	tblrd		*+
  8003  011A1A  CFF5 F0EC          	movff	tablat,??_LCD_Init
  8004  011A1E  0009               	tblrd		*+
  8005  011A20  CFF5 F0ED          	movff	tablat,??_LCD_Init+1
  8006  011A24  C0ED  F0EC         	movff	??_LCD_Init+1,??_LCD_Init
  8007  011A28  0100               	movlb	0	; () banked
  8008  011A2A  6BED               	clrf	(??_LCD_Init+1)& (0+255),b
  8009  011A2C  0100               	movlb	0	; () banked
  8010  011A2E  51EC               	movf	??_LCD_Init& (0+255),w,b
  8011  011A30  EC4B  F09E         	call	_LCD_Write
  8012  011A34  D015               	goto	l10397
  8013  011A36                     l10395:
  8014                           
  8015                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  8016  011A36  0E01               	movlw	1
  8017  011A38  0100               	movlb	0	; () banked
  8018  011A3A  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8019  011A3C  90D8               	bcf	status,0,c
  8020  011A3E  0100               	movlb	0	; () banked
  8021  011A40  35EE               	rlcf	LCD_Init@i& (0+255),w,b
  8022  011A42  6EF6               	movwf	tblptrl,c
  8023  011A44  0100               	movlb	0	; () banked
  8024  011A46  35EF               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8025  011A48  6EF7               	movwf	tblptrh,c
  8026  011A4A  0E03               	movlw	low _InitList
  8027  011A4C  26F6               	addwf	tblptrl,f,c
  8028  011A4E  0EFD               	movlw	high _InitList
  8029  011A50  22F7               	addwfc	tblptrh,f,c
  8030  011A52                     	if	1	;There are 3 active tblptr bytes
  8031  011A52  6AF8               	clrf	tblptru,c
  8032  011A54  0E00               	movlw	low (__mediumconst shr (0+16))
  8033  011A56  22F8               	addwfc	tblptru,f,c
  8034  011A58                     	endif
  8035  011A58  0008               	tblrd		*
  8036  011A5A  50F5               	movf	tablat,w,c
  8037  011A5C  EC4B  F09E         	call	_LCD_Write
  8038  011A60                     l10397:
  8039  011A60  0100               	movlb	0	; () banked
  8040  011A62  4BEE               	infsnz	LCD_Init@i& (0+255),f,b
  8041  011A64  2BEF               	incf	(LCD_Init@i+1)& (0+255),f,b
  8042                           
  8043                           ; BSR set to: 0
  8044  011A66  0100               	movlb	0	; () banked
  8045  011A68  51EF               	movf	(LCD_Init@i+1)& (0+255),w,b
  8046  011A6A  E101               	bnz	l10401
  8047  011A6C  D770               	goto	L5
  8048  011A6E                     l10401:
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;LCD.c: 185: }
  8052                           ;LCD.c: 186: }
  8053                           ;LCD.c: 187: delay_ms(100);
  8054  011A6E  0E00               	movlw	0
  8055  011A70  0100               	movlb	0	; () banked
  8056  011A72  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  8057  011A74  0E64               	movlw	100
  8058  011A76  6FB7               	movwf	delay_ms@ms& (0+255),b
  8059  011A78  ECA0  F099         	call	_delay_ms	;wreg free
  8060                           
  8061                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  8062  011A7C  0E00               	movlw	0
  8063  011A7E  0100               	movlb	0	; () banked
  8064  011A80  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8065  011A82  0E29               	movlw	41
  8066  011A84  EC4B  F09E         	call	_LCD_Write
  8067                           
  8068                           ;LCD.c: 189: Set_Rotation(1);
  8069  011A88  0E01               	movlw	1
  8070  011A8A  ECFA  F095         	call	_Set_Rotation
  8071                           
  8072                           ;LCD.c: 191: delay_ms(100);
  8073  011A8E  0E00               	movlw	0
  8074  011A90  0100               	movlb	0	; () banked
  8075  011A92  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  8076  011A94  0E64               	movlw	100
  8077  011A96  6FB7               	movwf	delay_ms@ms& (0+255),b
  8078  011A98  ECA0  F099         	call	_delay_ms	;wreg free
  8079                           
  8080                           ;LCD.c: 192: LCD_Fill(0x0000);
  8081  011A9C  0E00               	movlw	0
  8082  011A9E  0100               	movlb	0	; () banked
  8083  011AA0  6FC1               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  8084  011AA2  0E00               	movlw	0
  8085  011AA4  6FC0               	movwf	LCD_Fill@pColour& (0+255),b
  8086  011AA6  ECFD  F09A         	call	_LCD_Fill	;wreg free
  8087  011AAA  0012               	return		;funcret
  8088  011AAC                     __end_of_LCD_Init:
  8089                           	opt stack 0
  8090                           tosu	equ	0xFFF
  8091                           tosh	equ	0xFFE
  8092                           tosl	equ	0xFFD
  8093                           pclath	equ	0xFFA
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1h	equ	0xFE2
  8105                           fsr1l	equ	0xFE1
  8106                           indf2	equ	0xFDF
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           plusw2	equ	0xFDB
  8110                           fsr2h	equ	0xFDA
  8111                           fsr2l	equ	0xFD9
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function _Set_Rotation *****************
  8115 ;; Defined at:
  8116 ;;		line 248 in file "Library/LCD.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  m               1    wreg     unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  m               1    5[BANK0 ] unsigned char 
  8121 ;;  rotation        1    6[BANK0 ] unsigned char 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;Total ram usage:        2 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    9
  8138 ;; This function calls:
  8139 ;;		_LCD_Write
  8140 ;; This function is called by:
  8141 ;;		_LCD_Init
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text33
  8146  012BF4                     __ptext33:
  8147                           	opt stack 0
  8148  012BF4                     _Set_Rotation:
  8149                           	opt stack 20
  8150                           
  8151                           ;incstack = 0
  8152                           ;Set_Rotation@m stored from wreg
  8153  012BF4  0100               	movlb	0	; () banked
  8154  012BF6  6FBC               	movwf	Set_Rotation@m& (0+255),b
  8155                           
  8156                           ;LCD.c: 250: UINT8 rotation = 0x00;
  8157  012BF8  0E00               	movlw	0
  8158  012BFA  0100               	movlb	0	; () banked
  8159  012BFC  6FBD               	movwf	Set_Rotation@rotation& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  8163  012BFE  0E00               	movlw	0
  8164  012C00  0100               	movlb	0	; () banked
  8165  012C02  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8166  012C04  0E36               	movlw	54
  8167  012C06  EC4B  F09E         	call	_LCD_Write
  8168                           
  8169                           ;LCD.c: 253: rotation = (m % 4);
  8170  012C0A  0100               	movlb	0	; () banked
  8171  012C0C  51BC               	movf	Set_Rotation@m& (0+255),w,b
  8172  012C0E  0B03               	andlw	3
  8173  012C10  0100               	movlb	0	; () banked
  8174  012C12  6FBD               	movwf	Set_Rotation@rotation& (0+255),b
  8175                           
  8176                           ;LCD.c: 255: switch(rotation)
  8177  012C14  D02C               	goto	l10109
  8178  012C16                     l10083:
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;LCD.c: 258: {
  8182                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  8183  012C16  0E01               	movlw	1
  8184  012C18  0100               	movlb	0	; () banked
  8185  012C1A  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8186  012C1C  0EC8               	movlw	200
  8187  012C1E  EC4B  F09E         	call	_LCD_Write
  8188                           
  8189                           ;LCD.c: 260: w = 128;
  8190  012C22  0E80               	movlw	128
  8191  012C24  6E47               	movwf	_w,c
  8192                           
  8193                           ;LCD.c: 261: l = 128;
  8194  012C26  0E80               	movlw	128
  8195  012C28  6E46               	movwf	_l,c
  8196                           
  8197                           ;LCD.c: 262: break;
  8198  012C2A  0012               	return	
  8199  012C2C                     l10089:
  8200                           
  8201                           ;LCD.c: 265: {
  8202                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  8203  012C2C  0E01               	movlw	1
  8204  012C2E  0100               	movlb	0	; () banked
  8205  012C30  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8206  012C32  0EA8               	movlw	168
  8207  012C34  EC4B  F09E         	call	_LCD_Write
  8208                           
  8209                           ;LCD.c: 267: w = 128;
  8210  012C38  0E80               	movlw	128
  8211  012C3A  6E47               	movwf	_w,c
  8212                           
  8213                           ;LCD.c: 268: l = 128;
  8214  012C3C  0E80               	movlw	128
  8215  012C3E  6E46               	movwf	_l,c
  8216                           
  8217                           ;LCD.c: 269: break;
  8218  012C40  0012               	return	
  8219  012C42                     l10095:
  8220                           
  8221                           ;LCD.c: 272: {
  8222                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  8223  012C42  0E01               	movlw	1
  8224  012C44  0100               	movlb	0	; () banked
  8225  012C46  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8226  012C48  0E08               	movlw	8
  8227  012C4A  EC4B  F09E         	call	_LCD_Write
  8228                           
  8229                           ;LCD.c: 274: w = 128;
  8230  012C4E  0E80               	movlw	128
  8231  012C50  6E47               	movwf	_w,c
  8232                           
  8233                           ;LCD.c: 275: l = 128;
  8234  012C52  0E80               	movlw	128
  8235  012C54  6E46               	movwf	_l,c
  8236                           
  8237                           ;LCD.c: 276: break;
  8238  012C56  0012               	return	
  8239  012C58                     l10101:
  8240                           
  8241                           ;LCD.c: 279: {
  8242                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  8243  012C58  0E01               	movlw	1
  8244  012C5A  0100               	movlb	0	; () banked
  8245  012C5C  6FBA               	movwf	LCD_Write@mode& (0+255),b
  8246  012C5E  0E68               	movlw	104
  8247  012C60  EC4B  F09E         	call	_LCD_Write
  8248                           
  8249                           ;LCD.c: 281: w = 128;
  8250  012C64  0E80               	movlw	128
  8251  012C66  6E47               	movwf	_w,c
  8252                           
  8253                           ;LCD.c: 282: l = 128;
  8254  012C68  0E80               	movlw	128
  8255  012C6A  6E46               	movwf	_l,c
  8256                           
  8257                           ;LCD.c: 284: }
  8258                           ;LCD.c: 285: }
  8259                           
  8260                           ;LCD.c: 283: break;
  8261  012C6C  0012               	return	
  8262  012C6E                     l10109:
  8263  012C6E  0100               	movlb	0	; () banked
  8264  012C70  51BD               	movf	Set_Rotation@rotation& (0+255),w,b
  8265                           
  8266                           ; Switch size 1, requested type "space"
  8267                           ; Number of cases is 4, Range of values is 0 to 3
  8268                           ; switch strategies available:
  8269                           ; Name         Instructions Cycles
  8270                           ; simple_byte           13     7 (average)
  8271                           ;	Chosen strategy is simple_byte
  8272  012C72  0A00               	xorlw	0	; case 0
  8273  012C74  B4D8               	btfsc	status,2,c
  8274  012C76  D7CF               	goto	l10083
  8275  012C78  0A01               	xorlw	1	; case 1
  8276  012C7A  B4D8               	btfsc	status,2,c
  8277  012C7C  D7D7               	goto	l10089
  8278  012C7E  0A03               	xorlw	3	; case 2
  8279  012C80  B4D8               	btfsc	status,2,c
  8280  012C82  D7DF               	goto	l10095
  8281  012C84  0A01               	xorlw	1	; case 3
  8282  012C86  A4D8               	btfss	status,2,c
  8283  012C88  0012               	return	
  8284  012C8A  D7E6               	goto	l10101
  8285  012C8C                     __end_of_Set_Rotation:
  8286                           	opt stack 0
  8287                           tosu	equ	0xFFF
  8288                           tosh	equ	0xFFE
  8289                           tosl	equ	0xFFD
  8290                           pclath	equ	0xFFA
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           postinc0	equ	0xFEE
  8299                           wreg	equ	0xFE8
  8300                           postdec1	equ	0xFE5
  8301                           fsr1h	equ	0xFE2
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           plusw2	equ	0xFDB
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _LCD_Fill *****************
  8312 ;; Defined at:
  8313 ;;		line 287 in file "Library/LCD.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  pColour         2    9[BANK0 ] unsigned short 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  j               1   12[BANK0 ] unsigned char 
  8318 ;;  i               1   11[BANK0 ] unsigned char 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      void 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;Total ram usage:        4 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:   10
  8335 ;; This function calls:
  8336 ;;		_LCD_Word_Write
  8337 ;;		_Set_Addr_Window
  8338 ;; This function is called by:
  8339 ;;		_LCD_Init
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           	psect	text34
  8344  0135FA                     __ptext34:
  8345                           	opt stack 0
  8346  0135FA                     _LCD_Fill:
  8347                           	opt stack 19
  8348                           
  8349                           ;LCD.c: 296: UINT8 i = 0x00;
  8350                           
  8351                           ;incstack = 0
  8352  0135FA  0E00               	movlw	0
  8353  0135FC  0100               	movlb	0	; () banked
  8354  0135FE  6FC2               	movwf	LCD_Fill@i& (0+255),b
  8355                           
  8356                           ;LCD.c: 297: UINT8 j = 0x00;
  8357  013600  0E00               	movlw	0
  8358  013602  0100               	movlb	0	; () banked
  8359  013604  6FC3               	movwf	LCD_Fill@j& (0+255),b
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  8363  013606  0E00               	movlw	0
  8364  013608  0100               	movlb	0	; () banked
  8365  01360A  6FBC               	movwf	Set_Addr_Window@ys& (0+255),b
  8366  01360C  0447               	decf	_w,w,c
  8367  01360E  0100               	movlb	0	; () banked
  8368  013610  6FBD               	movwf	Set_Addr_Window@xe& (0+255),b
  8369  013612  0446               	decf	_l,w,c
  8370  013614  0100               	movlb	0	; () banked
  8371  013616  6FBE               	movwf	Set_Addr_Window@ye& (0+255),b
  8372  013618  0E00               	movlw	0
  8373  01361A  ECB7  F093         	call	_Set_Addr_Window
  8374                           
  8375                           ;LCD.c: 299: for (j = l; j > 0; j--)
  8376  01361E  C046  F0C3         	movff	_l,LCD_Fill@j
  8377  013622                     l10117:
  8378  013622  0100               	movlb	0	; () banked
  8379  013624  51C3               	movf	LCD_Fill@j& (0+255),w,b
  8380  013626  0100               	movlb	0	; () banked
  8381  013628  B4D8               	btfsc	status,2,c
  8382  01362A  0012               	return	
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;LCD.c: 300: for (i = w; i > 0; i--)
  8386                           
  8387                           ; BSR set to: 0
  8388  01362C  C047  F0C2         	movff	_w,LCD_Fill@i
  8389  013630                     l10121:
  8390                           
  8391                           ; BSR set to: 0
  8392  013630  0100               	movlb	0	; () banked
  8393  013632  51C2               	movf	LCD_Fill@i& (0+255),w,b
  8394  013634  0100               	movlb	0	; () banked
  8395  013636  B4D8               	btfsc	status,2,c
  8396  013638  D009               	goto	l10131
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;LCD.c: 301: LCD_Word_Write(pColour);
  8400                           
  8401                           ; BSR set to: 0
  8402                           
  8403                           ; BSR set to: 0
  8404  01363A  C0C0  F0BC         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  8405  01363E  C0C1  F0BD         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  8406  013642  ECA7  F09E         	call	_LCD_Word_Write	;wreg free
  8407  013646  0100               	movlb	0	; () banked
  8408  013648  07C2               	decf	LCD_Fill@i& (0+255),f,b
  8409  01364A  D7F2               	goto	l10121
  8410  01364C                     l10131:
  8411                           
  8412                           ; BSR set to: 0
  8413  01364C  0100               	movlb	0	; () banked
  8414  01364E  07C3               	decf	LCD_Fill@j& (0+255),f,b
  8415  013650  D7E8               	goto	l10117
  8416  013652                     __end_of_LCD_Fill:
  8417                           	opt stack 0
  8418                           tosu	equ	0xFFF
  8419                           tosh	equ	0xFFE
  8420                           tosl	equ	0xFFD
  8421                           pclath	equ	0xFFA
  8422                           tblptru	equ	0xFF8
  8423                           tblptrh	equ	0xFF7
  8424                           tblptrl	equ	0xFF6
  8425                           tablat	equ	0xFF5
  8426                           prodh	equ	0xFF4
  8427                           prodl	equ	0xFF3
  8428                           intcon	equ	0xFF2
  8429                           postinc0	equ	0xFEE
  8430                           wreg	equ	0xFE8
  8431                           postdec1	equ	0xFE5
  8432                           fsr1h	equ	0xFE2
  8433                           fsr1l	equ	0xFE1
  8434                           indf2	equ	0xFDF
  8435                           postinc2	equ	0xFDE
  8436                           postdec2	equ	0xFDD
  8437                           plusw2	equ	0xFDB
  8438                           fsr2h	equ	0xFDA
  8439                           fsr2l	equ	0xFD9
  8440                           status	equ	0xFD8
  8441                           
  8442 ;; *************** function _Configure_GPIOs *****************
  8443 ;; Defined at:
  8444 ;;		line 46 in file "Library/LCD.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;Total ram usage:        0 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:   14
  8465 ;; This function calls:
  8466 ;;		_LCD_Reset
  8467 ;;		_Port_SetPinType
  8468 ;;		_SPI_Init
  8469 ;;		_SPI_MaxSpeed
  8470 ;; This function is called by:
  8471 ;;		_LCD_Init
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           	psect	text35
  8476  0131F8                     __ptext35:
  8477                           	opt stack 0
  8478  0131F8                     _Configure_GPIOs:
  8479                           	opt stack 15
  8480                           
  8481                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;incstack = 0
  8485  0131F8  0E9E               	movlw	low _PortF
  8486  0131FA  0100               	movlb	0	; () banked
  8487  0131FC  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  8488  0131FE  0E00               	movlw	high _PortF
  8489  013200  0100               	movlb	0	; () banked
  8490  013202  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8491  013204  0E07               	movlw	7
  8492  013206  0100               	movlb	0	; () banked
  8493  013208  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  8494  01320A  0E03               	movlw	3
  8495  01320C  0100               	movlb	0	; () banked
  8496  01320E  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  8497  013210  EC71  F089         	call	_Port_SetPinType	;wreg free
  8498                           
  8499                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  8500  013214  0E9E               	movlw	low _PortF
  8501  013216  0100               	movlb	0	; () banked
  8502  013218  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
  8503  01321A  0E00               	movlw	high _PortF
  8504  01321C  0100               	movlb	0	; () banked
  8505  01321E  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8506  013220  0E06               	movlw	6
  8507  013222  0100               	movlb	0	; () banked
  8508  013224  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
  8509  013226  0E03               	movlw	3
  8510  013228  0100               	movlb	0	; () banked
  8511  01322A  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
  8512  01322C  EC71  F089         	call	_Port_SetPinType	;wreg free
  8513                           
  8514                           ;LCD.c: 55: LCD_Reset();
  8515  013230  EC7A  F09B         	call	_LCD_Reset	;wreg free
  8516                           
  8517                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  8518  013234  0EC0               	movlw	192
  8519  013236  0100               	movlb	0	; () banked
  8520  013238  6FE4               	movwf	SPI_Init@pClock& (0+255),b
  8521  01323A  0EC6               	movlw	198
  8522  01323C  6FE5               	movwf	(SPI_Init@pClock+1)& (0+255),b
  8523  01323E  0E2D               	movlw	45
  8524  013240  6FE6               	movwf	(SPI_Init@pClock+2)& (0+255),b
  8525  013242  0E00               	movlw	0
  8526  013244  6FE7               	movwf	(SPI_Init@pClock+3)& (0+255),b
  8527  013246  0E01               	movlw	1
  8528  013248  0100               	movlb	0	; () banked
  8529  01324A  6FE8               	movwf	SPI_Init@pChannel& (0+255),b
  8530  01324C  0E01               	movlw	1
  8531  01324E  0100               	movlb	0	; () banked
  8532  013250  6FE9               	movwf	SPI_Init@pMode& (0+255),b
  8533  013252  EC00  F080         	call	_SPI_Init	;wreg free
  8534                           
  8535                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  8536  013256  0EAF               	movlw	low _SPI2
  8537  013258  0100               	movlb	0	; () banked
  8538  01325A  6FC6               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  8539  01325C  0E01               	movlw	high _SPI2
  8540  01325E  0100               	movlb	0	; () banked
  8541  013260  6FC7               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  8542  013262  EC4E  F098         	call	_SPI_MaxSpeed	;wreg free
  8543  013266  0012               	return		;funcret
  8544  013268                     __end_of_Configure_GPIOs:
  8545                           	opt stack 0
  8546                           tosu	equ	0xFFF
  8547                           tosh	equ	0xFFE
  8548                           tosl	equ	0xFFD
  8549                           pclath	equ	0xFFA
  8550                           tblptru	equ	0xFF8
  8551                           tblptrh	equ	0xFF7
  8552                           tblptrl	equ	0xFF6
  8553                           tablat	equ	0xFF5
  8554                           prodh	equ	0xFF4
  8555                           prodl	equ	0xFF3
  8556                           intcon	equ	0xFF2
  8557                           postinc0	equ	0xFEE
  8558                           wreg	equ	0xFE8
  8559                           postdec1	equ	0xFE5
  8560                           fsr1h	equ	0xFE2
  8561                           fsr1l	equ	0xFE1
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           plusw2	equ	0xFDB
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function _SPI_MaxSpeed *****************
  8571 ;; Defined at:
  8572 ;;		line 201 in file "Library/SPI.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  8575 ;;		 -> SPI2(11), 
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;		None
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      void 
  8580 ;; Registers used:
  8581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    9
  8594 ;; This function calls:
  8595 ;;		_Byte_SetBit
  8596 ;;		_Byte_SetQuad
  8597 ;; This function is called by:
  8598 ;;		_Configure_GPIOs
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text36
  8603  01309C                     __ptext36:
  8604                           	opt stack 0
  8605  01309C                     _SPI_MaxSpeed:
  8606                           	opt stack 19
  8607                           
  8608                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  8609                           
  8610                           ;incstack = 0
  8611  01309C  0100               	movlb	0	; () banked
  8612  01309E  EE20 F006          	lfsr	2,6
  8613  0130A2  51C6               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8614  0130A4  26D9               	addwf	fsr2l,f,c
  8615  0130A6  51C7               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8616  0130A8  22DA               	addwfc	fsr2h,f,c
  8617  0130AA  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
  8618  0130AE  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
  8619  0130B2  0E05               	movlw	5
  8620  0130B4  0100               	movlb	0	; () banked
  8621  0130B6  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
  8622  0130B8  0E00               	movlw	0
  8623  0130BA  0100               	movlb	0	; () banked
  8624  0130BC  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
  8625  0130BE  EC3C  F09A         	call	_Byte_SetBit	;wreg free
  8626                           
  8627                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  8628  0130C2  0100               	movlb	0	; () banked
  8629  0130C4  EE20 F006          	lfsr	2,6
  8630  0130C8  51C6               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8631  0130CA  26D9               	addwf	fsr2l,f,c
  8632  0130CC  51C7               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8633  0130CE  22DA               	addwfc	fsr2h,f,c
  8634  0130D0  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
  8635  0130D4  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
  8636  0130D8  0E00               	movlw	0
  8637  0130DA  0100               	movlb	0	; () banked
  8638  0130DC  6FC4               	movwf	Byte_SetQuad@pQuad& (0+255),b
  8639  0130DE  0E00               	movlw	0
  8640  0130E0  0100               	movlb	0	; () banked
  8641  0130E2  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
  8642  0130E4  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
  8643                           
  8644                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  8645  0130E8  0100               	movlb	0	; () banked
  8646  0130EA  EE20 F006          	lfsr	2,6
  8647  0130EE  51C6               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  8648  0130F0  26D9               	addwf	fsr2l,f,c
  8649  0130F2  51C7               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  8650  0130F4  22DA               	addwfc	fsr2h,f,c
  8651  0130F6  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
  8652  0130FA  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
  8653  0130FE  0E05               	movlw	5
  8654  013100  0100               	movlb	0	; () banked
  8655  013102  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
  8656  013104  0E01               	movlw	1
  8657  013106  0100               	movlb	0	; () banked
  8658  013108  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
  8659  01310A  EC3C  F09A         	call	_Byte_SetBit	;wreg free
  8660  01310E  0012               	return		;funcret
  8661  013110                     __end_of_SPI_MaxSpeed:
  8662                           	opt stack 0
  8663                           tosu	equ	0xFFF
  8664                           tosh	equ	0xFFE
  8665                           tosl	equ	0xFFD
  8666                           pclath	equ	0xFFA
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           postinc0	equ	0xFEE
  8675                           wreg	equ	0xFE8
  8676                           postdec1	equ	0xFE5
  8677                           fsr1h	equ	0xFE2
  8678                           fsr1l	equ	0xFE1
  8679                           indf2	equ	0xFDF
  8680                           postinc2	equ	0xFDE
  8681                           postdec2	equ	0xFDD
  8682                           plusw2	equ	0xFDB
  8683                           fsr2h	equ	0xFDA
  8684                           fsr2l	equ	0xFD9
  8685                           status	equ	0xFD8
  8686                           
  8687 ;; *************** function _LCD_Reset *****************
  8688 ;; Defined at:
  8689 ;;		line 95 in file "Library/LCD.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  1    wreg      void 
  8696 ;; Registers used:
  8697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;Total ram usage:        0 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:   13
  8710 ;; This function calls:
  8711 ;;		_LED_Toggle
  8712 ;;		_Reset_High
  8713 ;;		_Reset_Low
  8714 ;;		_delay_ms
  8715 ;; This function is called by:
  8716 ;;		_Configure_GPIOs
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text37
  8721  0136F4                     __ptext37:
  8722                           	opt stack 0
  8723  0136F4                     _LCD_Reset:
  8724                           	opt stack 15
  8725                           
  8726                           ;LCD.c: 97: Reset_High();
  8727                           
  8728                           ;incstack = 0
  8729  0136F4  EC6B  F09E         	call	_Reset_High	;wreg free
  8730                           
  8731                           ;LCD.c: 98: LED_Toggle(eLED2);
  8732  0136F8  0E01               	movlw	1
  8733  0136FA  EC13  F09C         	call	_LED_Toggle
  8734                           
  8735                           ;LCD.c: 99: delay_ms(0x80);
  8736  0136FE  0E00               	movlw	0
  8737  013700  0100               	movlb	0	; () banked
  8738  013702  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  8739  013704  0E80               	movlw	128
  8740  013706  6FB7               	movwf	delay_ms@ms& (0+255),b
  8741  013708  ECA0  F099         	call	_delay_ms	;wreg free
  8742                           
  8743                           ;LCD.c: 100: LED_Toggle(eLED2);
  8744  01370C  0E01               	movlw	1
  8745  01370E  EC13  F09C         	call	_LED_Toggle
  8746                           
  8747                           ;LCD.c: 101: Reset_Low();
  8748  013712  EC5C  F09E         	call	_Reset_Low	;wreg free
  8749                           
  8750                           ;LCD.c: 102: delay_ms(0x80);
  8751  013716  0E00               	movlw	0
  8752  013718  0100               	movlb	0	; () banked
  8753  01371A  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  8754  01371C  0E80               	movlw	128
  8755  01371E  6FB7               	movwf	delay_ms@ms& (0+255),b
  8756  013720  ECA0  F099         	call	_delay_ms	;wreg free
  8757                           
  8758                           ;LCD.c: 103: LED_Toggle(eLED2);
  8759  013724  0E01               	movlw	1
  8760  013726  EC13  F09C         	call	_LED_Toggle
  8761                           
  8762                           ;LCD.c: 104: Reset_High();
  8763  01372A  EC6B  F09E         	call	_Reset_High	;wreg free
  8764                           
  8765                           ;LCD.c: 105: delay_ms(0x80);
  8766  01372E  0E00               	movlw	0
  8767  013730  0100               	movlb	0	; () banked
  8768  013732  6FB8               	movwf	(delay_ms@ms+1)& (0+255),b
  8769  013734  0E80               	movlw	128
  8770  013736  6FB7               	movwf	delay_ms@ms& (0+255),b
  8771  013738  ECA0  F099         	call	_delay_ms	;wreg free
  8772                           
  8773                           ;LCD.c: 106: LED_Toggle(eLED2);
  8774  01373C  0E01               	movlw	1
  8775  01373E  EC13  F09C         	call	_LED_Toggle
  8776  013742  0012               	return		;funcret
  8777  013744                     __end_of_LCD_Reset:
  8778                           	opt stack 0
  8779                           tosu	equ	0xFFF
  8780                           tosh	equ	0xFFE
  8781                           tosl	equ	0xFFD
  8782                           pclath	equ	0xFFA
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           postinc0	equ	0xFEE
  8791                           wreg	equ	0xFE8
  8792                           postdec1	equ	0xFE5
  8793                           fsr1h	equ	0xFE2
  8794                           fsr1l	equ	0xFE1
  8795                           indf2	equ	0xFDF
  8796                           postinc2	equ	0xFDE
  8797                           postdec2	equ	0xFDD
  8798                           plusw2	equ	0xFDB
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _delay_ms *****************
  8804 ;; Defined at:
  8805 ;;		line 240 in file "Library/Types.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  ms              2    0[BANK0 ] unsigned short 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  u               4    2[BANK0 ] volatile unsigned long 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8819 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;Total ram usage:        6 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    7
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		_LCD_Reset
  8830 ;;		_LCD_Init
  8831 ;;		_MXK_Init
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text38
  8836  013340                     __ptext38:
  8837                           	opt stack 0
  8838  013340                     _delay_ms:
  8839                           	opt stack 22
  8840                           
  8841                           ;Types.c: 242: volatile unsigned long u;
  8842                           ;Types.c: 243: while (ms--)
  8843                           
  8844                           ;incstack = 0
  8845  013340  D01F               	goto	l9133
  8846  013342                     l9125:
  8847                           
  8848                           ;Types.c: 244: {
  8849                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  8850  013342  0E00               	movlw	0
  8851  013344  0100               	movlb	0	; () banked
  8852  013346  6FB9               	movwf	delay_ms@u& (0+255),b	;volatile
  8853  013348  0E00               	movlw	0
  8854  01334A  6FBA               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  8855  01334C  0E00               	movlw	0
  8856  01334E  6FBB               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  8857  013350  0E00               	movlw	0
  8858  013352  6FBC               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  8859  013354                     l9127:
  8860                           
  8861                           ; BSR set to: 0
  8862  013354  0100               	movlb	0	; () banked
  8863  013356  51BC               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  8864  013358  0100               	movlb	0	; () banked
  8865  01335A  11BB               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  8866  01335C  E111               	bnz	l9133
  8867  01335E  0EB0               	movlw	176
  8868  013360  0100               	movlb	0	; () banked
  8869  013362  5DB9               	subwf	delay_ms@u& (0+255),w,b	;volatile
  8870  013364  0E04               	movlw	4
  8871  013366  0100               	movlb	0	; () banked
  8872  013368  59BA               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  8873  01336A  B0D8               	btfsc	status,0,c
  8874  01336C  D009               	goto	l9133
  8875                           
  8876                           ; BSR set to: 0
  8877                           
  8878                           ; BSR set to: 0
  8879  01336E  F000               	nop		; ;# 
  8880  013370  0E01               	movlw	1
  8881  013372  0100               	movlb	0	; () banked
  8882  013374  27B9               	addwf	delay_ms@u& (0+255),f,b	;volatile
  8883  013376  0E00               	movlw	0
  8884  013378  23BA               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  8885  01337A  23BB               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  8886  01337C  23BC               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  8887  01337E  D7EA               	goto	l9127
  8888  013380                     l9133:
  8889  013380  0100               	movlb	0	; () banked
  8890  013382  07B7               	decf	delay_ms@ms& (0+255),f,b
  8891  013384  A0D8               	btfss	status,0,c
  8892  013386  07B8               	decf	(delay_ms@ms+1)& (0+255),f,b
  8893  013388  0100               	movlb	0	; () banked
  8894  01338A  29B7               	incf	delay_ms@ms& (0+255),w,b
  8895  01338C  E1DA               	bnz	l9125
  8896  01338E  0100               	movlb	0	; () banked
  8897  013390  29B8               	incf	(delay_ms@ms+1)& (0+255),w,b
  8898  013392  A4D8               	btfss	status,2,c
  8899  013394  D7D6               	goto	l9125
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;Types.c: 251: }
  8903                           ;Types.c: 252: }
  8904                           ;Types.c: 253: u = 0x8008;
  8905                           
  8906                           ; BSR set to: 0
  8907  013396  0E08               	movlw	8
  8908  013398  0100               	movlb	0	; () banked
  8909  01339A  6FB9               	movwf	delay_ms@u& (0+255),b	;volatile
  8910  01339C  0E80               	movlw	128
  8911  01339E  6FBA               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  8912  0133A0  0E00               	movlw	0
  8913  0133A2  6FBB               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  8914  0133A4  0E00               	movlw	0
  8915  0133A6  6FBC               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  8916                           
  8917                           ; BSR set to: 0
  8918  0133A8  0012               	return		;funcret
  8919  0133AA                     __end_of_delay_ms:
  8920                           	opt stack 0
  8921                           tosu	equ	0xFFF
  8922                           tosh	equ	0xFFE
  8923                           tosl	equ	0xFFD
  8924                           pclath	equ	0xFFA
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           intcon	equ	0xFF2
  8932                           postinc0	equ	0xFEE
  8933                           wreg	equ	0xFE8
  8934                           postdec1	equ	0xFE5
  8935                           fsr1h	equ	0xFE2
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           plusw2	equ	0xFDB
  8941                           fsr2h	equ	0xFDA
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function _Reset_Low *****************
  8946 ;; Defined at:
  8947 ;;		line 32 in file "Library/LCD.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:   11
  8968 ;; This function calls:
  8969 ;;		_Port_SetPin
  8970 ;; This function is called by:
  8971 ;;		_LCD_Reset
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text39
  8976  013CB8                     __ptext39:
  8977                           	opt stack 0
  8978  013CB8                     _Reset_Low:
  8979                           	opt stack 16
  8980                           
  8981                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;incstack = 0
  8985  013CB8  0E9E               	movlw	low _PortF
  8986  013CBA  0100               	movlb	0	; () banked
  8987  013CBC  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  8988  013CBE  0E00               	movlw	high _PortF
  8989  013CC0  0100               	movlb	0	; () banked
  8990  013CC2  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8991  013CC4  0E06               	movlw	6
  8992  013CC6  0100               	movlb	0	; () banked
  8993  013CC8  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  8994  013CCA  0E01               	movlw	1
  8995  013CCC  0100               	movlb	0	; () banked
  8996  013CCE  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  8997  013CD0  EC7F  F091         	call	_Port_SetPin	;wreg free
  8998  013CD4  0012               	return		;funcret
  8999  013CD6                     __end_of_Reset_Low:
  9000                           	opt stack 0
  9001                           tosu	equ	0xFFF
  9002                           tosh	equ	0xFFE
  9003                           tosl	equ	0xFFD
  9004                           pclath	equ	0xFFA
  9005                           tblptru	equ	0xFF8
  9006                           tblptrh	equ	0xFF7
  9007                           tblptrl	equ	0xFF6
  9008                           tablat	equ	0xFF5
  9009                           prodh	equ	0xFF4
  9010                           prodl	equ	0xFF3
  9011                           intcon	equ	0xFF2
  9012                           postinc0	equ	0xFEE
  9013                           wreg	equ	0xFE8
  9014                           postdec1	equ	0xFE5
  9015                           fsr1h	equ	0xFE2
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           plusw2	equ	0xFDB
  9021                           fsr2h	equ	0xFDA
  9022                           fsr2l	equ	0xFD9
  9023                           status	equ	0xFD8
  9024                           
  9025 ;; *************** function _Reset_High *****************
  9026 ;; Defined at:
  9027 ;;		line 36 in file "Library/LCD.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;		None
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;		None
  9032 ;; Return value:  Size  Location     Type
  9033 ;;                  1    wreg      void 
  9034 ;; Registers used:
  9035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;Total ram usage:        0 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:   11
  9048 ;; This function calls:
  9049 ;;		_Port_SetPin
  9050 ;; This function is called by:
  9051 ;;		_LCD_Reset
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text40
  9056  013CD6                     __ptext40:
  9057                           	opt stack 0
  9058  013CD6                     _Reset_High:
  9059                           	opt stack 16
  9060                           
  9061                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9062                           
  9063                           ;incstack = 0
  9064  013CD6  0E9E               	movlw	low _PortF
  9065  013CD8  0100               	movlb	0	; () banked
  9066  013CDA  6FC6               	movwf	Port_SetPin@pInput& (0+255),b
  9067  013CDC  0E00               	movlw	high _PortF
  9068  013CDE  0100               	movlb	0	; () banked
  9069  013CE0  6FC7               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9070  013CE2  0E06               	movlw	6
  9071  013CE4  0100               	movlb	0	; () banked
  9072  013CE6  6FC8               	movwf	Port_SetPin@pPin& (0+255),b
  9073  013CE8  0E00               	movlw	0
  9074  013CEA  0100               	movlb	0	; () banked
  9075  013CEC  6FC9               	movwf	Port_SetPin@pValue& (0+255),b
  9076  013CEE  EC7F  F091         	call	_Port_SetPin	;wreg free
  9077  013CF2  0012               	return		;funcret
  9078  013CF4                     __end_of_Reset_High:
  9079                           	opt stack 0
  9080                           tosu	equ	0xFFF
  9081                           tosh	equ	0xFFE
  9082                           tosl	equ	0xFFD
  9083                           pclath	equ	0xFFA
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           prodh	equ	0xFF4
  9089                           prodl	equ	0xFF3
  9090                           intcon	equ	0xFF2
  9091                           postinc0	equ	0xFEE
  9092                           wreg	equ	0xFE8
  9093                           postdec1	equ	0xFE5
  9094                           fsr1h	equ	0xFE2
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           plusw2	equ	0xFDB
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _LED_Toggle *****************
  9105 ;; Defined at:
  9106 ;;		line 50 in file "Library/LED.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  pLED            1    wreg     enum E7683
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  pLED            1   24[BANK0 ] enum E7683
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;Total ram usage:        1 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:   12
  9127 ;; This function calls:
  9128 ;;		_Port_TogglePin
  9129 ;; This function is called by:
  9130 ;;		_LCD_Reset
  9131 ;;		_Event_ADCSequenceComplete
  9132 ;;		_Event_DIPSwitch
  9133 ;;		_Event_HMI_DIPSwitch
  9134 ;;		_Event_TestButton
  9135 ;;		_Event_HMI_LeftButton
  9136 ;;		_Event_HMI_RightButton
  9137 ;;		_Event_HMI_UpButton
  9138 ;;		_Event_HMI_DownButton
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           	psect	text41
  9143  013826                     __ptext41:
  9144                           	opt stack 0
  9145  013826                     _LED_Toggle:
  9146                           	opt stack 15
  9147                           
  9148                           ;incstack = 0
  9149                           ;LED_Toggle@pLED stored from wreg
  9150  013826  0100               	movlb	0	; () banked
  9151  013828  6FCF               	movwf	LED_Toggle@pLED& (0+255),b
  9152                           
  9153                           ;LED.c: 52: switch (pLED)
  9154  01382A  D018               	goto	l9121
  9155  01382C                     l9115:
  9156                           
  9157                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
  9158  01382C  0E80               	movlw	low _PortC
  9159  01382E  0100               	movlb	0	; () banked
  9160  013830  6FCB               	movwf	Port_TogglePin@pInput& (0+255),b
  9161  013832  0E00               	movlw	high _PortC
  9162  013834  0100               	movlb	0	; () banked
  9163  013836  6FCC               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  9164  013838  0E00               	movlw	0
  9165  01383A  0100               	movlb	0	; () banked
  9166  01383C  6FCD               	movwf	Port_TogglePin@pPin& (0+255),b
  9167  01383E  ECA1  F09D         	call	_Port_TogglePin	;wreg free
  9168                           
  9169                           ;LED.c: 56: break;
  9170  013842  0012               	return	
  9171  013844                     l9117:
  9172                           
  9173                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
  9174  013844  0E80               	movlw	low _PortC
  9175  013846  0100               	movlb	0	; () banked
  9176  013848  6FCB               	movwf	Port_TogglePin@pInput& (0+255),b
  9177  01384A  0E00               	movlw	high _PortC
  9178  01384C  0100               	movlb	0	; () banked
  9179  01384E  6FCC               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  9180  013850  0E01               	movlw	1
  9181  013852  0100               	movlb	0	; () banked
  9182  013854  6FCD               	movwf	Port_TogglePin@pPin& (0+255),b
  9183  013856  ECA1  F09D         	call	_Port_TogglePin	;wreg free
  9184                           
  9185                           ;LED.c: 60: }
  9186                           
  9187                           ;LED.c: 59: break;
  9188  01385A  0012               	return	
  9189  01385C                     l9121:
  9190  01385C  0100               	movlb	0	; () banked
  9191  01385E  51CF               	movf	LED_Toggle@pLED& (0+255),w,b
  9192                           
  9193                           ; Switch size 1, requested type "space"
  9194                           ; Number of cases is 2, Range of values is 0 to 1
  9195                           ; switch strategies available:
  9196                           ; Name         Instructions Cycles
  9197                           ; simple_byte            7     4 (average)
  9198                           ;	Chosen strategy is simple_byte
  9199  013860  0A00               	xorlw	0	; case 0
  9200  013862  B4D8               	btfsc	status,2,c
  9201  013864  D7E3               	goto	l9115
  9202  013866  0A01               	xorlw	1	; case 1
  9203  013868  A4D8               	btfss	status,2,c
  9204  01386A  0012               	return	
  9205  01386C  D7EB               	goto	l9117
  9206  01386E                     __end_of_LED_Toggle:
  9207                           	opt stack 0
  9208                           tosu	equ	0xFFF
  9209                           tosh	equ	0xFFE
  9210                           tosl	equ	0xFFD
  9211                           pclath	equ	0xFFA
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           plusw2	equ	0xFDB
  9228                           fsr2h	equ	0xFDA
  9229                           fsr2l	equ	0xFD9
  9230                           status	equ	0xFD8
  9231                           
  9232 ;; *************** function _Port_TogglePin *****************
  9233 ;; Defined at:
  9234 ;;		line 278 in file "Library/Port.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;  pInput          2   20[BANK0 ] const PTR struct Port
  9237 ;;		 -> PortC(10), 
  9238 ;;  pPin            1   22[BANK0 ] enum E7694
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  Value           1   23[BANK0 ] unsigned char 
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;Total ram usage:        4 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:   11
  9257 ;; This function calls:
  9258 ;;		_Port_GetPin
  9259 ;;		_Port_SetPin
  9260 ;; This function is called by:
  9261 ;;		_LED_Toggle
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text42
  9266  013B42                     __ptext42:
  9267                           	opt stack 0
  9268  013B42                     _Port_TogglePin:
  9269                           	opt stack 15
  9270                           
  9271                           ;Port.c: 280: UINT8 Value;
  9272                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
  9273                           
  9274                           ;incstack = 0
  9275  013B42  C0CB  F0B7         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
  9276  013B46  C0CC  F0B8         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
  9277  013B4A  C0CD  F0B9         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
  9278  013B4E  EC37  F09C         	call	_Port_GetPin	;wreg free
  9279  013B52  0100               	movlb	0	; () banked
  9280  013B54  6FCE               	movwf	Port_TogglePin@Value& (0+255),b
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;Port.c: 282: Value ^= 0x01;
  9284  013B56  0E01               	movlw	1
  9285  013B58  0100               	movlb	0	; () banked
  9286  013B5A  1BCE               	xorwf	Port_TogglePin@Value& (0+255),f,b
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
  9290  013B5C  C0CB  F0C6         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
  9291  013B60  C0CC  F0C7         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
  9292  013B64  C0CD  F0C8         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
  9293  013B68  C0CE  F0C9         	movff	Port_TogglePin@Value,Port_SetPin@pValue
  9294  013B6C  EC7F  F091         	call	_Port_SetPin	;wreg free
  9295  013B70  0012               	return		;funcret
  9296  013B72                     __end_of_Port_TogglePin:
  9297                           	opt stack 0
  9298                           tosu	equ	0xFFF
  9299                           tosh	equ	0xFFE
  9300                           tosl	equ	0xFFD
  9301                           pclath	equ	0xFFA
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           postinc0	equ	0xFEE
  9310                           wreg	equ	0xFE8
  9311                           postdec1	equ	0xFE5
  9312                           fsr1h	equ	0xFE2
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           postdec2	equ	0xFDD
  9317                           plusw2	equ	0xFDB
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function _Port_SetPin *****************
  9323 ;; Defined at:
  9324 ;;		line 247 in file "Library/Port.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  9327 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
  9328 ;;  pPin            1   17[BANK0 ] enum E7694
  9329 ;;  pValue          1   18[BANK0 ] unsigned char 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  Type            1   19[BANK0 ] enum E7739
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  1    wreg      void 
  9334 ;; Registers used:
  9335 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9336 ;; Tracked objects:
  9337 ;;		On entry : 0/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9341 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;Total ram usage:        5 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:   10
  9348 ;; This function calls:
  9349 ;;		_Byte_SetBit
  9350 ;;		_Word_GetPair
  9351 ;; This function is called by:
  9352 ;;		_Reset_Low
  9353 ;;		_Reset_High
  9354 ;;		_LED_Set
  9355 ;;		_Port_TogglePin
  9356 ;;		_Motor_Step
  9357 ;;		_MXK_Init
  9358 ;;		_Motor_Init
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text43
  9363  0122FE                     __ptext43:
  9364                           	opt stack 0
  9365  0122FE                     _Port_SetPin:
  9366                           	opt stack 19
  9367                           
  9368                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
  9369                           
  9370                           ;incstack = 0
  9371  0122FE  0E08               	movlw	8
  9372  012300  0100               	movlb	0	; () banked
  9373  012302  25C6               	addwf	Port_SetPin@pInput& (0+255),w,b
  9374  012304  0100               	movlb	0	; () banked
  9375  012306  6FC3               	movwf	Word_GetPair@pInput& (0+255),b
  9376  012308  0E00               	movlw	0
  9377  01230A  0100               	movlb	0	; () banked
  9378  01230C  21C7               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
  9379  01230E  0100               	movlb	0	; () banked
  9380  012310  6FC4               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  9381  012312  C0C8  F0C5         	movff	Port_SetPin@pPin,Word_GetPair@pPair
  9382  012316  ECFC  F09C         	call	_Word_GetPair	;wreg free
  9383  01231A  0100               	movlb	0	; () banked
  9384  01231C  6FCA               	movwf	Port_SetPin@Type& (0+255),b
  9385                           
  9386                           ;Port.c: 250: switch (Type)
  9387  01231E  D042               	goto	l8855
  9388  012320                     l8841:
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;Port.c: 256: pValue &= 1;
  9392  012320  0E01               	movlw	1
  9393  012322  0100               	movlb	0	; () banked
  9394  012324  17C9               	andwf	Port_SetPin@pValue& (0+255),f,b
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
  9398  012326  0100               	movlb	0	; () banked
  9399  012328  EE20 F002          	lfsr	2,2
  9400  01232C  51C6               	movf	Port_SetPin@pInput& (0+255),w,b
  9401  01232E  26D9               	addwf	fsr2l,f,c
  9402  012330  51C7               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9403  012332  22DA               	addwfc	fsr2h,f,c
  9404  012334  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
  9405  012338  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
  9406  01233C  C0C8  F0B9         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9407  012340  C0C9  F0BA         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9408  012344  EC3C  F09A         	call	_Byte_SetBit	;wreg free
  9409                           
  9410                           ;Port.c: 258: break;
  9411  012348  0012               	return	
  9412  01234A                     l8845:
  9413                           
  9414                           ;Port.c: 261: pValue &= 1;
  9415  01234A  0E01               	movlw	1
  9416  01234C  0100               	movlb	0	; () banked
  9417  01234E  17C9               	andwf	Port_SetPin@pValue& (0+255),f,b
  9418                           
  9419                           ;Port.c: 262: pValue ^= 1;
  9420  012350  0E01               	movlw	1
  9421  012352  0100               	movlb	0	; () banked
  9422  012354  1BC9               	xorwf	Port_SetPin@pValue& (0+255),f,b
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
  9426  012356  0100               	movlb	0	; () banked
  9427  012358  EE20 F002          	lfsr	2,2
  9428  01235C  51C6               	movf	Port_SetPin@pInput& (0+255),w,b
  9429  01235E  26D9               	addwf	fsr2l,f,c
  9430  012360  51C7               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9431  012362  22DA               	addwfc	fsr2h,f,c
  9432  012364  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
  9433  012368  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
  9434  01236C  C0C8  F0B9         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9435  012370  C0C9  F0BA         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9436  012374  EC3C  F09A         	call	_Byte_SetBit	;wreg free
  9437                           
  9438                           ;Port.c: 264: break;
  9439  012378  0012               	return	
  9440  01237A                     l8849:
  9441                           
  9442                           ;Port.c: 266: pValue &= 1;
  9443  01237A  0E01               	movlw	1
  9444  01237C  0100               	movlb	0	; () banked
  9445  01237E  17C9               	andwf	Port_SetPin@pValue& (0+255),f,b
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
  9449  012380  0100               	movlb	0	; () banked
  9450  012382  EE20 F004          	lfsr	2,4
  9451  012386  51C6               	movf	Port_SetPin@pInput& (0+255),w,b
  9452  012388  26D9               	addwf	fsr2l,f,c
  9453  01238A  51C7               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
  9454  01238C  22DA               	addwfc	fsr2h,f,c
  9455  01238E  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
  9456  012392  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
  9457  012396  C0C8  F0B9         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
  9458  01239A  C0C9  F0BA         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
  9459  01239E  EC3C  F09A         	call	_Byte_SetBit	;wreg free
  9460                           
  9461                           ;Port.c: 269: }
  9462                           
  9463                           ;Port.c: 268: break;
  9464  0123A2  0012               	return	
  9465  0123A4                     l8855:
  9466  0123A4  0100               	movlb	0	; () banked
  9467  0123A6  51CA               	movf	Port_SetPin@Type& (0+255),w,b
  9468                           
  9469                           ; Switch size 1, requested type "space"
  9470                           ; Number of cases is 4, Range of values is 0 to 3
  9471                           ; switch strategies available:
  9472                           ; Name         Instructions Cycles
  9473                           ; simple_byte           13     7 (average)
  9474                           ;	Chosen strategy is simple_byte
  9475  0123A8  0A00               	xorlw	0	; case 0
  9476  0123AA  B4D8               	btfsc	status,2,c
  9477  0123AC  0012               	return	
  9478  0123AE  0A01               	xorlw	1	; case 1
  9479  0123B0  B4D8               	btfsc	status,2,c
  9480  0123B2  D7B6               	goto	l8841
  9481  0123B4  0A03               	xorlw	3	; case 2
  9482  0123B6  B4D8               	btfsc	status,2,c
  9483  0123B8  D7C8               	goto	l8845
  9484  0123BA  0A01               	xorlw	1	; case 3
  9485  0123BC  A4D8               	btfss	status,2,c
  9486  0123BE  0012               	return	
  9487  0123C0  D7DC               	goto	l8849
  9488  0123C2                     __end_of_Port_SetPin:
  9489                           	opt stack 0
  9490                           tosu	equ	0xFFF
  9491                           tosh	equ	0xFFE
  9492                           tosl	equ	0xFFD
  9493                           pclath	equ	0xFFA
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           intcon	equ	0xFF2
  9501                           postinc0	equ	0xFEE
  9502                           wreg	equ	0xFE8
  9503                           postdec1	equ	0xFE5
  9504                           fsr1h	equ	0xFE2
  9505                           fsr1l	equ	0xFE1
  9506                           indf2	equ	0xFDF
  9507                           postinc2	equ	0xFDE
  9508                           postdec2	equ	0xFDD
  9509                           plusw2	equ	0xFDB
  9510                           fsr2h	equ	0xFDA
  9511                           fsr2l	equ	0xFD9
  9512                           status	equ	0xFD8
  9513                           
  9514 ;; *************** function _Port_GetPin *****************
  9515 ;; Defined at:
  9516 ;;		line 271 in file "Library/Port.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  9519 ;;		 -> PortB(10), PortE(10), PortC(10), 
  9520 ;;  pPin            1    2[BANK0 ] enum E7694
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;  Output          1    5[BANK0 ] unsigned char 
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      unsigned char 
  9525 ;; Registers used:
  9526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9532 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9536 ;;Total ram usage:        6 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    7
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_Port_TogglePin
  9543 ;;		_HMI_LeftSwitch
  9544 ;;		_HMI_RightSwitch
  9545 ;;		_HMI_UpSwitch
  9546 ;;		_HMI_DownSwitch
  9547 ;;		_MXK_TestButton
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           	psect	text44
  9552  01386E                     __ptext44:
  9553                           	opt stack 0
  9554  01386E                     _Port_GetPin:
  9555                           	opt stack 18
  9556                           
  9557                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
  9558                           
  9559                           ;incstack = 0
  9560  01386E  0100               	movlb	0	; () banked
  9561  013870  EE20 F006          	lfsr	2,6
  9562  013874  51B7               	movf	Port_GetPin@pInput& (0+255),w,b
  9563  013876  26D9               	addwf	fsr2l,f,c
  9564  013878  51B8               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
  9565  01387A  22DA               	addwfc	fsr2h,f,c
  9566  01387C  CFDE F0BA          	movff	postinc2,??_Port_GetPin
  9567  013880  CFDD F0BB          	movff	postdec2,??_Port_GetPin+1
  9568  013884  C0BA  FFD9         	movff	??_Port_GetPin,fsr2l
  9569  013888  C0BB  FFDA         	movff	??_Port_GetPin+1,fsr2h
  9570  01388C  50DF               	movf	indf2,w,c
  9571  01388E  0100               	movlb	0	; () banked
  9572  013890  6FBC               	movwf	Port_GetPin@Output& (0+255),b
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;Port.c: 274: Output >>= (UINT8)pPin;
  9576  013892  0100               	movlb	0	; () banked
  9577  013894  29B9               	incf	Port_GetPin@pPin& (0+255),w,b
  9578  013896  0100               	movlb	0	; () banked
  9579  013898  6FBA               	movwf	??_Port_GetPin& (0+255),b
  9580  01389A  D003               	goto	u5640
  9581  01389C                     u5645:
  9582  01389C  0100               	movlb	0	; () banked
  9583  01389E  90D8               	bcf	status,0,c
  9584  0138A0  33BC               	rrcf	Port_GetPin@Output& (0+255),f,b
  9585  0138A2                     u5640:
  9586  0138A2  0100               	movlb	0	; () banked
  9587  0138A4  2FBA               	decfsz	??_Port_GetPin& (0+255),f,b
  9588  0138A6  D7FA               	goto	u5645
  9589                           
  9590                           ;Port.c: 275: Output &= 1;
  9591  0138A8  0E01               	movlw	1
  9592  0138AA  0100               	movlb	0	; () banked
  9593  0138AC  17BC               	andwf	Port_GetPin@Output& (0+255),f,b
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;Port.c: 276: return Output;
  9597  0138AE  0100               	movlb	0	; () banked
  9598  0138B0  51BC               	movf	Port_GetPin@Output& (0+255),w,b
  9599  0138B2  0012               	return	
  9600  0138B4                     __end_of_Port_GetPin:
  9601                           	opt stack 0
  9602                           tosu	equ	0xFFF
  9603                           tosh	equ	0xFFE
  9604                           tosl	equ	0xFFD
  9605                           pclath	equ	0xFFA
  9606                           tblptru	equ	0xFF8
  9607                           tblptrh	equ	0xFF7
  9608                           tblptrl	equ	0xFF6
  9609                           tablat	equ	0xFF5
  9610                           prodh	equ	0xFF4
  9611                           prodl	equ	0xFF3
  9612                           intcon	equ	0xFF2
  9613                           postinc0	equ	0xFEE
  9614                           wreg	equ	0xFE8
  9615                           postdec1	equ	0xFE5
  9616                           fsr1h	equ	0xFE2
  9617                           fsr1l	equ	0xFE1
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           plusw2	equ	0xFDB
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function _HMI_SetNumber *****************
  9627 ;; Defined at:
  9628 ;;		line 221 in file "HMI.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  pInput          2   22[BANK0 ] int 
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;		None
  9633 ;; Return value:  Size  Location     Type
  9634 ;;                  1    wreg      void 
  9635 ;; Registers used:
  9636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9642 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;Total ram usage:        2 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    9
  9649 ;; This function calls:
  9650 ;;		_HMI_SetSegments
  9651 ;;		_itos
  9652 ;; This function is called by:
  9653 ;;		_main
  9654 ;;		_Event_TestButton
  9655 ;;		_Event_HMI_UpButton
  9656 ;;		_Event_HMI_DownButton
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text45
  9661  013C00                     __ptext45:
  9662                           	opt stack 0
  9663  013C00                     _HMI_SetNumber:
  9664                           	opt stack 21
  9665                           
  9666                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;incstack = 0
  9670  013C00  C0CD  F0C3         	movff	HMI_SetNumber@pInput,itos@input
  9671  013C04  C0CE  F0C4         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9672  013C08  0E6A               	movlw	low _HMIBoard
  9673  013C0A  0100               	movlb	0	; () banked
  9674  013C0C  6FC5               	movwf	itos@destination& (0+255),b
  9675  013C0E  0E01               	movlw	high _HMIBoard
  9676  013C10  0100               	movlb	0	; () banked
  9677  013C12  6FC6               	movwf	(itos@destination+1)& (0+255),b
  9678  013C14  EC41  F090         	call	_itos	;wreg free
  9679                           
  9680                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  9681  013C18  0E6A               	movlw	low _HMIBoard
  9682  013C1A  0100               	movlb	0	; () banked
  9683  013C1C  6FB8               	movwf	HMI_SetSegments@pString& (0+255),b
  9684  013C1E  0E01               	movlw	high _HMIBoard
  9685  013C20  0100               	movlb	0	; () banked
  9686  013C22  6FB9               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  9687  013C24  ECFF  F092         	call	_HMI_SetSegments	;wreg free
  9688  013C28  0012               	return		;funcret
  9689  013C2A                     __end_of_HMI_SetNumber:
  9690                           	opt stack 0
  9691                           tosu	equ	0xFFF
  9692                           tosh	equ	0xFFE
  9693                           tosl	equ	0xFFD
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           postinc0	equ	0xFEE
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1h	equ	0xFE2
  9706                           fsr1l	equ	0xFE1
  9707                           indf2	equ	0xFDF
  9708                           postinc2	equ	0xFDE
  9709                           postdec2	equ	0xFDD
  9710                           plusw2	equ	0xFDB
  9711                           fsr2h	equ	0xFDA
  9712                           fsr2l	equ	0xFD9
  9713                           status	equ	0xFD8
  9714                           
  9715 ;; *************** function _itos *****************
  9716 ;; Defined at:
  9717 ;;		line 369 in file "Library/Types.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;  input           2   12[BANK0 ] unsigned short 
  9720 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  9721 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  Out             2   20[BANK0 ] unsigned short 
  9724 ;;  Length          2   18[BANK0 ] unsigned short 
  9725 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  9726 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      void 
  9729 ;; Registers used:
  9730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;Total ram usage:       10 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    8
  9743 ;; This function calls:
  9744 ;;		___lwdiv
  9745 ;;		___lwmod
  9746 ;;		_reverse
  9747 ;; This function is called by:
  9748 ;;		_HMI_SetNumber
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text46
  9753  012082                     __ptext46:
  9754                           	opt stack 0
  9755  012082                     _itos:
  9756                           	opt stack 21
  9757                           
  9758                           ;Types.c: 371: UINT16 Out = input;
  9759                           
  9760                           ;incstack = 0
  9761  012082  C0C3  F0CB         	movff	itos@input,itos@Out
  9762  012086  C0C4  F0CC         	movff	itos@input+1,itos@Out+1
  9763                           
  9764                           ;Types.c: 372: UINT16 Length = 0;
  9765  01208A  0E00               	movlw	0
  9766  01208C  0100               	movlb	0	; () banked
  9767  01208E  6FCA               	movwf	(itos@Length+1)& (0+255),b
  9768  012090  0E00               	movlw	0
  9769  012092  6FC9               	movwf	itos@Length& (0+255),b
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;Types.c: 373: char *Data = destination;
  9773  012094  C0C5  F0C7         	movff	itos@destination,itos@Data
  9774  012098  C0C6  F0C8         	movff	itos@destination+1,itos@Data+1
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;Types.c: 374: if(Out == 0)
  9778  01209C  0100               	movlb	0	; () banked
  9779  01209E  51CB               	movf	itos@Out& (0+255),w,b
  9780  0120A0  0100               	movlb	0	; () banked
  9781  0120A2  11CC               	iorwf	(itos@Out+1)& (0+255),w,b
  9782  0120A4  A4D8               	btfss	status,2,c
  9783  0120A6  D034               	goto	l10249
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;Types.c: 375: {
  9787                           ;Types.c: 376: Data[0] = (UINT16)'0';
  9788  0120A8  C0C7  FFD9         	movff	itos@Data,fsr2l
  9789  0120AC  C0C8  FFDA         	movff	itos@Data+1,fsr2h
  9790  0120B0  0E30               	movlw	48
  9791  0120B2  6EDF               	movwf	indf2,c
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;Types.c: 377: Length = 1;
  9795  0120B4  0E00               	movlw	0
  9796  0120B6  0100               	movlb	0	; () banked
  9797  0120B8  6FCA               	movwf	(itos@Length+1)& (0+255),b
  9798  0120BA  0E01               	movlw	1
  9799  0120BC  6FC9               	movwf	itos@Length& (0+255),b
  9800                           
  9801                           ;Types.c: 378: }
  9802  0120BE  D040               	goto	l10255
  9803  0120C0                     l10241:
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;Types.c: 382: {
  9807                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  9808  0120C0  C0CB  F0BE         	movff	itos@Out,___lwmod@dividend
  9809  0120C4  C0CC  F0BF         	movff	itos@Out+1,___lwmod@dividend+1
  9810  0120C8  0E00               	movlw	0
  9811  0120CA  0100               	movlb	0	; () banked
  9812  0120CC  6FC1               	movwf	(___lwmod@divisor+1)& (0+255),b
  9813  0120CE  0E0A               	movlw	10
  9814  0120D0  6FC0               	movwf	___lwmod@divisor& (0+255),b
  9815  0120D2  EC9F  F09A         	call	___lwmod	;wreg free
  9816  0120D6  0100               	movlb	0	; () banked
  9817  0120D8  51BE               	movf	?___lwmod& (0+255),w,b
  9818  0120DA  0F30               	addlw	48
  9819  0120DC  C0C7  FFD9         	movff	itos@Data,fsr2l
  9820  0120E0  C0C8  FFDA         	movff	itos@Data+1,fsr2h
  9821  0120E4  6EDF               	movwf	indf2,c
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;Types.c: 384: Out /= 10;
  9825  0120E6  C0CB  F0B7         	movff	itos@Out,___lwdiv@dividend
  9826  0120EA  C0CC  F0B8         	movff	itos@Out+1,___lwdiv@dividend+1
  9827  0120EE  0E00               	movlw	0
  9828  0120F0  0100               	movlb	0	; () banked
  9829  0120F2  6FBA               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9830  0120F4  0E0A               	movlw	10
  9831  0120F6  6FB9               	movwf	___lwdiv@divisor& (0+255),b
  9832  0120F8  ECD7  F097         	call	___lwdiv	;wreg free
  9833  0120FC  C0B7  F0CB         	movff	?___lwdiv,itos@Out
  9834  012100  C0B8  F0CC         	movff	?___lwdiv+1,itos@Out+1
  9835                           
  9836                           ;Types.c: 385: Length ++;
  9837  012104  0100               	movlb	0	; () banked
  9838  012106  4BC9               	infsnz	itos@Length& (0+255),f,b
  9839  012108  2BCA               	incf	(itos@Length+1)& (0+255),f,b
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;Types.c: 386: Data++;
  9843  01210A  0100               	movlb	0	; () banked
  9844  01210C  4BC7               	infsnz	itos@Data& (0+255),f,b
  9845  01210E  2BC8               	incf	(itos@Data+1)& (0+255),f,b
  9846  012110                     l10249:
  9847                           
  9848                           ; BSR set to: 0
  9849  012110  0100               	movlb	0	; () banked
  9850  012112  51CB               	movf	itos@Out& (0+255),w,b
  9851  012114  0100               	movlb	0	; () banked
  9852  012116  11CC               	iorwf	(itos@Out+1)& (0+255),w,b
  9853  012118  B4D8               	btfsc	status,2,c
  9854  01211A  D008               	goto	l10253
  9855                           
  9856                           ; BSR set to: 0
  9857  01211C  0100               	movlb	0	; () banked
  9858  01211E  51CA               	movf	(itos@Length+1)& (0+255),w,b
  9859  012120  E105               	bnz	l10253
  9860  012122  0E06               	movlw	6
  9861  012124  0100               	movlb	0	; () banked
  9862  012126  5DC9               	subwf	itos@Length& (0+255),w,b
  9863  012128  A0D8               	btfss	status,0,c
  9864  01212A  D7CA               	goto	l10241
  9865  01212C                     l10253:
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;Types.c: 387: }
  9869                           ;Types.c: 388: reverse(destination, Length);
  9870  01212C  C0C5  F0B7         	movff	itos@destination,reverse@input
  9871  012130  C0C6  F0B8         	movff	itos@destination+1,reverse@input+1
  9872  012134  C0C9  F0B9         	movff	itos@Length,reverse@length
  9873  012138  C0CA  F0BA         	movff	itos@Length+1,reverse@length+1
  9874  01213C  EC34  F099         	call	_reverse	;wreg free
  9875  012140                     l10255:
  9876                           
  9877                           ;Types.c: 389: }
  9878                           ;Types.c: 390: destination[Length] = '\0';
  9879  012140  0100               	movlb	0	; () banked
  9880  012142  51C9               	movf	itos@Length& (0+255),w,b
  9881  012144  0100               	movlb	0	; () banked
  9882  012146  25C5               	addwf	itos@destination& (0+255),w,b
  9883  012148  6ED9               	movwf	fsr2l,c
  9884  01214A  0100               	movlb	0	; () banked
  9885  01214C  51CA               	movf	(itos@Length+1)& (0+255),w,b
  9886  01214E  0100               	movlb	0	; () banked
  9887  012150  21C6               	addwfc	(itos@destination+1)& (0+255),w,b
  9888  012152  6EDA               	movwf	fsr2h,c
  9889  012154  0E00               	movlw	0
  9890  012156  6EDF               	movwf	indf2,c
  9891                           
  9892                           ; BSR set to: 0
  9893  012158  0012               	return		;funcret
  9894  01215A                     __end_of_itos:
  9895                           	opt stack 0
  9896                           tosu	equ	0xFFF
  9897                           tosh	equ	0xFFE
  9898                           tosl	equ	0xFFD
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           postinc0	equ	0xFEE
  9908                           wreg	equ	0xFE8
  9909                           postdec1	equ	0xFE5
  9910                           fsr1h	equ	0xFE2
  9911                           fsr1l	equ	0xFE1
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           plusw2	equ	0xFDB
  9916                           fsr2h	equ	0xFDA
  9917                           fsr2l	equ	0xFD9
  9918                           status	equ	0xFD8
  9919                           
  9920 ;; *************** function _reverse *****************
  9921 ;; Defined at:
  9922 ;;		line 357 in file "Library/Types.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;  input           2    0[BANK0 ] PTR unsigned char 
  9925 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9926 ;;  length          2    2[BANK0 ] unsigned short 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  9929 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9930 ;;  tempVar         1    4[BANK0 ] unsigned char 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  1    wreg      void 
  9933 ;; Registers used:
  9934 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9940 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9943 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;Total ram usage:        7 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    7
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		_itos
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           	psect	text47
  9955  013268                     __ptext47:
  9956                           	opt stack 0
  9957  013268                     _reverse:
  9958                           	opt stack 21
  9959                           
  9960                           ;Types.c: 359: char tempVar,
  9961                           ;Types.c: 360: *iterator = input + length;
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;incstack = 0
  9965  013268  0100               	movlb	0	; () banked
  9966  01326A  51B9               	movf	reverse@length& (0+255),w,b
  9967  01326C  0100               	movlb	0	; () banked
  9968  01326E  25B7               	addwf	reverse@input& (0+255),w,b
  9969  013270  0100               	movlb	0	; () banked
  9970  013272  6FBC               	movwf	reverse@iterator& (0+255),b
  9971  013274  0100               	movlb	0	; () banked
  9972  013276  51BA               	movf	(reverse@length+1)& (0+255),w,b
  9973  013278  0100               	movlb	0	; () banked
  9974  01327A  21B8               	addwfc	(reverse@input+1)& (0+255),w,b
  9975  01327C  0100               	movlb	0	; () banked
  9976  01327E  6FBD               	movwf	(reverse@iterator+1)& (0+255),b
  9977                           
  9978                           ;Types.c: 362: while ( --iterator > input )
  9979  013280  D01A               	goto	l9837
  9980  013282                     l9829:
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;Types.c: 363: {
  9984                           ;Types.c: 364: tempVar = *input;
  9985  013282  C0B7  FFD9         	movff	reverse@input,fsr2l
  9986  013286  C0B8  FFDA         	movff	reverse@input+1,fsr2h
  9987  01328A  50DF               	movf	indf2,w,c
  9988  01328C  0100               	movlb	0	; () banked
  9989  01328E  6FBB               	movwf	reverse@tempVar& (0+255),b
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;Types.c: 365: *input++=*iterator;
  9993  013290  C0BC  FFD9         	movff	reverse@iterator,fsr2l
  9994  013294  C0BD  FFDA         	movff	reverse@iterator+1,fsr2h
  9995  013298  C0B7  FFE1         	movff	reverse@input,fsr1l
  9996  01329C  C0B8  FFE2         	movff	reverse@input+1,fsr1h
  9997  0132A0  CFDF FFE7          	movff	indf2,indf1
  9998                           
  9999                           ; BSR set to: 0
 10000  0132A4  0100               	movlb	0	; () banked
 10001  0132A6  4BB7               	infsnz	reverse@input& (0+255),f,b
 10002  0132A8  2BB8               	incf	(reverse@input+1)& (0+255),f,b
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;Types.c: 366: *iterator=tempVar;
 10006  0132AA  C0BC  FFD9         	movff	reverse@iterator,fsr2l
 10007  0132AE  C0BD  FFDA         	movff	reverse@iterator+1,fsr2h
 10008  0132B2  C0BB  FFDF         	movff	reverse@tempVar,indf2
 10009  0132B6                     l9837:
 10010                           
 10011                           ; BSR set to: 0
 10012  0132B6  0100               	movlb	0	; () banked
 10013  0132B8  07BC               	decf	reverse@iterator& (0+255),f,b
 10014  0132BA  A0D8               	btfss	status,0,c
 10015  0132BC  07BD               	decf	(reverse@iterator+1)& (0+255),f,b
 10016  0132BE  0100               	movlb	0	; () banked
 10017  0132C0  51BC               	movf	reverse@iterator& (0+255),w,b
 10018  0132C2  0100               	movlb	0	; () banked
 10019  0132C4  5DB7               	subwf	reverse@input& (0+255),w,b
 10020  0132C6  0100               	movlb	0	; () banked
 10021  0132C8  51BD               	movf	(reverse@iterator+1)& (0+255),w,b
 10022  0132CA  0100               	movlb	0	; () banked
 10023  0132CC  59B8               	subwfb	(reverse@input+1)& (0+255),w,b
 10024  0132CE  B0D8               	btfsc	status,0,c
 10025  0132D0  0012               	return	
 10026  0132D2  D7D7               	goto	l9829
 10027  0132D4                     __end_of_reverse:
 10028                           	opt stack 0
 10029                           tosu	equ	0xFFF
 10030                           tosh	equ	0xFFE
 10031                           tosl	equ	0xFFD
 10032                           pclath	equ	0xFFA
 10033                           tblptru	equ	0xFF8
 10034                           tblptrh	equ	0xFF7
 10035                           tblptrl	equ	0xFF6
 10036                           tablat	equ	0xFF5
 10037                           prodh	equ	0xFF4
 10038                           prodl	equ	0xFF3
 10039                           intcon	equ	0xFF2
 10040                           postinc0	equ	0xFEE
 10041                           wreg	equ	0xFE8
 10042                           indf1	equ	0xFE7
 10043                           postdec1	equ	0xFE5
 10044                           fsr1h	equ	0xFE2
 10045                           fsr1l	equ	0xFE1
 10046                           indf2	equ	0xFDF
 10047                           postinc2	equ	0xFDE
 10048                           postdec2	equ	0xFDD
 10049                           plusw2	equ	0xFDB
 10050                           fsr2h	equ	0xFDA
 10051                           fsr2l	equ	0xFD9
 10052                           status	equ	0xFD8
 10053                           
 10054 ;; *************** function ___lwmod *****************
 10055 ;; Defined at:
 10056 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;  dividend        2    7[BANK0 ] unsigned int 
 10059 ;;  divisor         2    9[BANK0 ] unsigned int 
 10060 ;; Auto vars:     Size  Location     Type
 10061 ;;  counter         1   11[BANK0 ] unsigned char 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  2    7[BANK0 ] unsigned int 
 10064 ;; Registers used:
 10065 ;;		wreg, status,2, status,0
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10071 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;Total ram usage:        5 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:    7
 10078 ;; This function calls:
 10079 ;;		Nothing
 10080 ;; This function is called by:
 10081 ;;		_itos
 10082 ;;		_printf
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           	psect	text48
 10087  01353E                     __ptext48:
 10088                           	opt stack 0
 10089  01353E                     ___lwmod:
 10090                           	opt stack 22
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;incstack = 0
 10094  01353E  0100               	movlb	0	; () banked
 10095  013540  51C0               	movf	___lwmod@divisor& (0+255),w,b
 10096  013542  0100               	movlb	0	; () banked
 10097  013544  11C1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10098  013546  B4D8               	btfsc	status,2,c
 10099  013548  D026               	goto	l2272
 10100                           
 10101                           ; BSR set to: 0
 10102  01354A  0E01               	movlw	1
 10103  01354C  0100               	movlb	0	; () banked
 10104  01354E  6FC2               	movwf	___lwmod@counter& (0+255),b
 10105  013550  D006               	goto	l10007
 10106  013552                     l10005:
 10107                           
 10108                           ; BSR set to: 0
 10109  013552  0100               	movlb	0	; () banked
 10110  013554  90D8               	bcf	status,0,c
 10111  013556  37C0               	rlcf	___lwmod@divisor& (0+255),f,b
 10112  013558  37C1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10113  01355A  0100               	movlb	0	; () banked
 10114  01355C  2BC2               	incf	___lwmod@counter& (0+255),f,b
 10115  01355E                     l10007:
 10116                           
 10117                           ; BSR set to: 0
 10118  01355E  0100               	movlb	0	; () banked
 10119  013560  AFC1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10120  013562  D7F7               	goto	l10005
 10121  013564                     l10009:
 10122                           
 10123                           ; BSR set to: 0
 10124  013564  0100               	movlb	0	; () banked
 10125  013566  51C0               	movf	___lwmod@divisor& (0+255),w,b
 10126  013568  0100               	movlb	0	; () banked
 10127  01356A  5DBE               	subwf	___lwmod@dividend& (0+255),w,b
 10128  01356C  0100               	movlb	0	; () banked
 10129  01356E  51C1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10130  013570  0100               	movlb	0	; () banked
 10131  013572  59BF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10132  013574  A0D8               	btfss	status,0,c
 10133  013576  D008               	goto	l10013
 10134                           
 10135                           ; BSR set to: 0
 10136  013578  0100               	movlb	0	; () banked
 10137  01357A  51C0               	movf	___lwmod@divisor& (0+255),w,b
 10138  01357C  0100               	movlb	0	; () banked
 10139  01357E  5FBE               	subwf	___lwmod@dividend& (0+255),f,b
 10140  013580  0100               	movlb	0	; () banked
 10141  013582  51C1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10142  013584  0100               	movlb	0	; () banked
 10143  013586  5BBF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10144  013588                     l10013:
 10145                           
 10146                           ; BSR set to: 0
 10147  013588  0100               	movlb	0	; () banked
 10148  01358A  90D8               	bcf	status,0,c
 10149  01358C  33C1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10150  01358E  33C0               	rrcf	___lwmod@divisor& (0+255),f,b
 10151                           
 10152                           ; BSR set to: 0
 10153  013590  0100               	movlb	0	; () banked
 10154  013592  2FC2               	decfsz	___lwmod@counter& (0+255),f,b
 10155  013594  D7E7               	goto	l10009
 10156  013596                     l2272:
 10157                           
 10158                           ; BSR set to: 0
 10159  013596  C0BE  F0BE         	movff	___lwmod@dividend,?___lwmod
 10160  01359A  C0BF  F0BF         	movff	___lwmod@dividend+1,?___lwmod+1
 10161                           
 10162                           ; BSR set to: 0
 10163  01359E  0012               	return		;funcret
 10164  0135A0                     __end_of___lwmod:
 10165                           	opt stack 0
 10166                           tosu	equ	0xFFF
 10167                           tosh	equ	0xFFE
 10168                           tosl	equ	0xFFD
 10169                           pclath	equ	0xFFA
 10170                           tblptru	equ	0xFF8
 10171                           tblptrh	equ	0xFF7
 10172                           tblptrl	equ	0xFF6
 10173                           tablat	equ	0xFF5
 10174                           prodh	equ	0xFF4
 10175                           prodl	equ	0xFF3
 10176                           intcon	equ	0xFF2
 10177                           postinc0	equ	0xFEE
 10178                           wreg	equ	0xFE8
 10179                           indf1	equ	0xFE7
 10180                           postdec1	equ	0xFE5
 10181                           fsr1h	equ	0xFE2
 10182                           fsr1l	equ	0xFE1
 10183                           indf2	equ	0xFDF
 10184                           postinc2	equ	0xFDE
 10185                           postdec2	equ	0xFDD
 10186                           plusw2	equ	0xFDB
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function ___lwdiv *****************
 10192 ;; Defined at:
 10193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  dividend        2    0[BANK0 ] unsigned int 
 10196 ;;  divisor         2    2[BANK0 ] unsigned int 
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;  quotient        2    5[BANK0 ] unsigned int 
 10199 ;;  counter         1    4[BANK0 ] unsigned char 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  2    0[BANK0 ] unsigned int 
 10202 ;; Registers used:
 10203 ;;		wreg, status,2, status,0
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;Total ram usage:        7 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    7
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_itos
 10220 ;;		_printf
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text49
 10225  012FAE                     __ptext49:
 10226                           	opt stack 0
 10227  012FAE                     ___lwdiv:
 10228                           	opt stack 22
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;incstack = 0
 10232  012FAE  0E00               	movlw	0
 10233  012FB0  0100               	movlb	0	; () banked
 10234  012FB2  6FBD               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10235  012FB4  0E00               	movlw	0
 10236  012FB6  6FBC               	movwf	___lwdiv@quotient& (0+255),b
 10237                           
 10238                           ; BSR set to: 0
 10239  012FB8  0100               	movlb	0	; () banked
 10240  012FBA  51B9               	movf	___lwdiv@divisor& (0+255),w,b
 10241  012FBC  0100               	movlb	0	; () banked
 10242  012FBE  11BA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10243  012FC0  B4D8               	btfsc	status,2,c
 10244  012FC2  D02C               	goto	l2262
 10245                           
 10246                           ; BSR set to: 0
 10247  012FC4  0E01               	movlw	1
 10248  012FC6  0100               	movlb	0	; () banked
 10249  012FC8  6FBB               	movwf	___lwdiv@counter& (0+255),b
 10250  012FCA  D006               	goto	l9987
 10251  012FCC                     l9985:
 10252                           
 10253                           ; BSR set to: 0
 10254  012FCC  0100               	movlb	0	; () banked
 10255  012FCE  90D8               	bcf	status,0,c
 10256  012FD0  37B9               	rlcf	___lwdiv@divisor& (0+255),f,b
 10257  012FD2  37BA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10258  012FD4  0100               	movlb	0	; () banked
 10259  012FD6  2BBB               	incf	___lwdiv@counter& (0+255),f,b
 10260  012FD8                     l9987:
 10261                           
 10262                           ; BSR set to: 0
 10263  012FD8  0100               	movlb	0	; () banked
 10264  012FDA  AFBA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10265  012FDC  D7F7               	goto	l9985
 10266  012FDE                     l9989:
 10267                           
 10268                           ; BSR set to: 0
 10269  012FDE  0100               	movlb	0	; () banked
 10270  012FE0  90D8               	bcf	status,0,c
 10271  012FE2  37BC               	rlcf	___lwdiv@quotient& (0+255),f,b
 10272  012FE4  37BD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10273                           
 10274                           ; BSR set to: 0
 10275  012FE6  0100               	movlb	0	; () banked
 10276  012FE8  51B9               	movf	___lwdiv@divisor& (0+255),w,b
 10277  012FEA  0100               	movlb	0	; () banked
 10278  012FEC  5DB7               	subwf	___lwdiv@dividend& (0+255),w,b
 10279  012FEE  0100               	movlb	0	; () banked
 10280  012FF0  51BA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10281  012FF2  0100               	movlb	0	; () banked
 10282  012FF4  59B8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10283  012FF6  A0D8               	btfss	status,0,c
 10284  012FF8  D00A               	goto	l9997
 10285                           
 10286                           ; BSR set to: 0
 10287  012FFA  0100               	movlb	0	; () banked
 10288  012FFC  51B9               	movf	___lwdiv@divisor& (0+255),w,b
 10289  012FFE  0100               	movlb	0	; () banked
 10290  013000  5FB7               	subwf	___lwdiv@dividend& (0+255),f,b
 10291  013002  0100               	movlb	0	; () banked
 10292  013004  51BA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10293  013006  0100               	movlb	0	; () banked
 10294  013008  5BB8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10295                           
 10296                           ; BSR set to: 0
 10297  01300A  0100               	movlb	0	; () banked
 10298  01300C  81BC               	bsf	___lwdiv@quotient& (0+255),0,b
 10299  01300E                     l9997:
 10300                           
 10301                           ; BSR set to: 0
 10302  01300E  0100               	movlb	0	; () banked
 10303  013010  90D8               	bcf	status,0,c
 10304  013012  33BA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10305  013014  33B9               	rrcf	___lwdiv@divisor& (0+255),f,b
 10306                           
 10307                           ; BSR set to: 0
 10308  013016  0100               	movlb	0	; () banked
 10309  013018  2FBB               	decfsz	___lwdiv@counter& (0+255),f,b
 10310  01301A  D7E1               	goto	l9989
 10311  01301C                     l2262:
 10312                           
 10313                           ; BSR set to: 0
 10314  01301C  C0BC  F0B7         	movff	___lwdiv@quotient,?___lwdiv
 10315  013020  C0BD  F0B8         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10316                           
 10317                           ; BSR set to: 0
 10318  013024  0012               	return		;funcret
 10319  013026                     __end_of___lwdiv:
 10320                           	opt stack 0
 10321                           tosu	equ	0xFFF
 10322                           tosh	equ	0xFFE
 10323                           tosl	equ	0xFFD
 10324                           pclath	equ	0xFFA
 10325                           tblptru	equ	0xFF8
 10326                           tblptrh	equ	0xFF7
 10327                           tblptrl	equ	0xFF6
 10328                           tablat	equ	0xFF5
 10329                           prodh	equ	0xFF4
 10330                           prodl	equ	0xFF3
 10331                           intcon	equ	0xFF2
 10332                           postinc0	equ	0xFEE
 10333                           wreg	equ	0xFE8
 10334                           indf1	equ	0xFE7
 10335                           postdec1	equ	0xFE5
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           plusw2	equ	0xFDB
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346 ;; *************** function _HMI_SetSegments *****************
 10347 ;; Defined at:
 10348 ;;		line 226 in file "HMI.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 10351 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  in              2    4[BANK0 ] unsigned short 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      void 
 10356 ;; Registers used:
 10357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;Total ram usage:        5 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    8
 10370 ;; This function calls:
 10371 ;;		_ToSegment
 10372 ;; This function is called by:
 10373 ;;		_HMI_SetNumber
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text50
 10378  0125FE                     __ptext50:
 10379                           	opt stack 0
 10380  0125FE                     _HMI_SetSegments:
 10381                           	opt stack 21
 10382                           
 10383                           ;HMI.c: 228: UINT16 in=0;
 10384                           
 10385                           ; BSR set to: 0
 10386                           ;incstack = 0
 10387  0125FE  0E00               	movlw	0
 10388  012600  0100               	movlb	0	; () banked
 10389  012602  6FBC               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 10390  012604  0E00               	movlw	0
 10391  012606  6FBB               	movwf	HMI_SetSegments@in& (0+255),b
 10392                           
 10393                           ;HMI.c: 229: while(*pString)
 10394  012608  D038               	goto	l10333
 10395  01260A                     l10317:
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;HMI.c: 230: {
 10399                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 10400  01260A  0E6A               	movlw	low _HMIBoard
 10401  01260C  0100               	movlb	0	; () banked
 10402  01260E  25BB               	addwf	HMI_SetSegments@in& (0+255),w,b
 10403  012610  6ED9               	movwf	fsr2l,c
 10404  012612  0E01               	movlw	high _HMIBoard
 10405  012614  0100               	movlb	0	; () banked
 10406  012616  21BC               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10407  012618  6EDA               	movwf	fsr2h,c
 10408  01261A  C0B8  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 10409  01261E  C0B9  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 10410  012622  50E7               	movf	indf1,w,c
 10411  012624  ECEC  F083         	call	_ToSegment
 10412  012628  6EDF               	movwf	indf2,c
 10413                           
 10414                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 10415  01262A  0E6A               	movlw	low _HMIBoard
 10416  01262C  0100               	movlb	0	; () banked
 10417  01262E  25BB               	addwf	HMI_SetSegments@in& (0+255),w,b
 10418  012630  6ED9               	movwf	fsr2l,c
 10419  012632  0E01               	movlw	high _HMIBoard
 10420  012634  0100               	movlb	0	; () banked
 10421  012636  21BC               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10422  012638  6EDA               	movwf	fsr2h,c
 10423  01263A  0E80               	movlw	128
 10424  01263C  18DE               	xorwf	postinc2,w,c
 10425  01263E  A4D8               	btfss	status,2,c
 10426  012640  D00E               	goto	l10325
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;HMI.c: 234: {
 10430                           ;HMI.c: 235: in--;
 10431  012642  0100               	movlb	0	; () banked
 10432  012644  07BB               	decf	HMI_SetSegments@in& (0+255),f,b
 10433  012646  A0D8               	btfss	status,0,c
 10434  012648  07BC               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 10438  01264A  0E6A               	movlw	low _HMIBoard
 10439  01264C  0100               	movlb	0	; () banked
 10440  01264E  25BB               	addwf	HMI_SetSegments@in& (0+255),w,b
 10441  012650  6ED9               	movwf	fsr2l,c
 10442  012652  0E01               	movlw	high _HMIBoard
 10443  012654  0100               	movlb	0	; () banked
 10444  012656  21BC               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10445  012658  6EDA               	movwf	fsr2h,c
 10446  01265A  0E00               	movlw	0
 10447  01265C  8EDB               	bsf	plusw2,7,c
 10448  01265E                     l10325:
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;HMI.c: 237: }
 10452                           ;HMI.c: 239: pString++;
 10453  01265E  0100               	movlb	0	; () banked
 10454  012660  4BB8               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 10455  012662  2BB9               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;HMI.c: 240: in++;
 10459  012664  0100               	movlb	0	; () banked
 10460  012666  4BBB               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10461  012668  2BBC               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;HMI.c: 241: if (in>=6)
 10465  01266A  0100               	movlb	0	; () banked
 10466  01266C  51BC               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10467  01266E  E11A               	bnz	l10339
 10468  012670  0E06               	movlw	6
 10469  012672  0100               	movlb	0	; () banked
 10470  012674  5DBB               	subwf	HMI_SetSegments@in& (0+255),w,b
 10471  012676  B0D8               	btfsc	status,0,c
 10472  012678  D015               	goto	l10339
 10473  01267A                     l10333:
 10474                           
 10475                           ; BSR set to: 0
 10476  01267A  C0B8  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 10477  01267E  C0B9  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 10478  012682  50DF               	movf	indf2,w,c
 10479  012684  B4D8               	btfsc	status,2,c
 10480  012686  D00E               	goto	l10339
 10481  012688  D7C0               	goto	l10317
 10482  01268A                     l10335:
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;HMI.c: 245: {
 10486                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 10487  01268A  0E6A               	movlw	low _HMIBoard
 10488  01268C  0100               	movlb	0	; () banked
 10489  01268E  25BB               	addwf	HMI_SetSegments@in& (0+255),w,b
 10490  012690  6ED9               	movwf	fsr2l,c
 10491  012692  0E01               	movlw	high _HMIBoard
 10492  012694  0100               	movlb	0	; () banked
 10493  012696  21BC               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10494  012698  6EDA               	movwf	fsr2h,c
 10495  01269A  0E00               	movlw	0
 10496  01269C  6EDF               	movwf	indf2,c
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;HMI.c: 247: in++;
 10500  01269E  0100               	movlb	0	; () banked
 10501  0126A0  4BBB               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10502  0126A2  2BBC               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10503  0126A4                     l10339:
 10504                           
 10505                           ; BSR set to: 0
 10506  0126A4  0100               	movlb	0	; () banked
 10507  0126A6  51BC               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10508  0126A8  E106               	bnz	l1207
 10509  0126AA  0E06               	movlw	6
 10510  0126AC  0100               	movlb	0	; () banked
 10511  0126AE  5DBB               	subwf	HMI_SetSegments@in& (0+255),w,b
 10512  0126B0  B0D8               	btfsc	status,0,c
 10513  0126B2  0012               	return	
 10514  0126B4  D7EA               	goto	l10335
 10515  0126B6                     l1207:
 10516                           
 10517                           ; BSR set to: 0
 10518  0126B6  0012               	return		;funcret
 10519  0126B8                     __end_of_HMI_SetSegments:
 10520                           	opt stack 0
 10521                           tosu	equ	0xFFF
 10522                           tosh	equ	0xFFE
 10523                           tosl	equ	0xFFD
 10524                           pclath	equ	0xFFA
 10525                           tblptru	equ	0xFF8
 10526                           tblptrh	equ	0xFF7
 10527                           tblptrl	equ	0xFF6
 10528                           tablat	equ	0xFF5
 10529                           prodh	equ	0xFF4
 10530                           prodl	equ	0xFF3
 10531                           intcon	equ	0xFF2
 10532                           postinc0	equ	0xFEE
 10533                           wreg	equ	0xFE8
 10534                           indf1	equ	0xFE7
 10535                           postdec1	equ	0xFE5
 10536                           fsr1h	equ	0xFE2
 10537                           fsr1l	equ	0xFE1
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           plusw2	equ	0xFDB
 10542                           fsr2h	equ	0xFDA
 10543                           fsr2l	equ	0xFD9
 10544                           status	equ	0xFD8
 10545                           
 10546 ;; *************** function _ToSegment *****************
 10547 ;; Defined at:
 10548 ;;		line 284 in file "Library/Types.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  pCHR            1    wreg     unsigned char 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  pCHR            1    0[BANK0 ] unsigned char 
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  1    wreg      unsigned char 
 10555 ;; Registers used:
 10556 ;;		wreg, status,2, status,0
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10566 ;;Total ram usage:        1 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    7
 10569 ;; This function calls:
 10570 ;;		Nothing
 10571 ;; This function is called by:
 10572 ;;		_HMI_SetSegments
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text51
 10577  0107D8                     __ptext51:
 10578                           	opt stack 0
 10579  0107D8                     _ToSegment:
 10580                           	opt stack 21
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;incstack = 0
 10584                           ;ToSegment@pCHR stored from wreg
 10585  0107D8  0100               	movlb	0	; () banked
 10586  0107DA  6FB7               	movwf	ToSegment@pCHR& (0+255),b
 10587                           
 10588                           ;Types.c: 286: switch(pCHR)
 10589  0107DC  D07E               	goto	l9821
 10590  0107DE                     l9567:
 10591  0107DE  0E3F               	movlw	63
 10592  0107E0  0012               	return	
 10593  0107E2                     l9571:
 10594  0107E2  0E06               	movlw	6
 10595  0107E4  0012               	return	
 10596  0107E6                     l9575:
 10597  0107E6  0E5B               	movlw	91
 10598  0107E8  0012               	return	
 10599  0107EA                     l9579:
 10600  0107EA  0E4F               	movlw	79
 10601  0107EC  0012               	return	
 10602  0107EE                     l9583:
 10603  0107EE  0E66               	movlw	102
 10604  0107F0  0012               	return	
 10605  0107F2                     l9587:
 10606  0107F2  0E6D               	movlw	109
 10607  0107F4  0012               	return	
 10608  0107F6                     l9591:
 10609  0107F6  0E7D               	movlw	125
 10610  0107F8  0012               	return	
 10611  0107FA                     l9595:
 10612  0107FA  0E07               	movlw	7
 10613  0107FC  0012               	return	
 10614  0107FE                     l9599:
 10615  0107FE  0E7F               	movlw	127
 10616  010800  0012               	return	
 10617  010802                     l9603:
 10618  010802  0E6F               	movlw	111
 10619  010804  0012               	return	
 10620  010806                     l9607:
 10621  010806  0E5F               	movlw	95
 10622  010808  0012               	return	
 10623  01080A                     l9611:
 10624  01080A  0E7C               	movlw	124
 10625  01080C  0012               	return	
 10626  01080E                     l9615:
 10627  01080E  0E58               	movlw	88
 10628  010810  0012               	return	
 10629  010812                     l9619:
 10630  010812  0E5E               	movlw	94
 10631  010814  0012               	return	
 10632  010816                     l9623:
 10633  010816  0E7B               	movlw	123
 10634  010818  0012               	return	
 10635  01081A                     l9627:
 10636  01081A  0E71               	movlw	113
 10637  01081C  0012               	return	
 10638  01081E                     l9631:
 10639  01081E  0E6F               	movlw	111
 10640  010820  0012               	return	
 10641  010822                     l9635:
 10642  010822  0E74               	movlw	116
 10643  010824  0012               	return	
 10644  010826                     l9639:
 10645  010826  0E04               	movlw	4
 10646  010828  0012               	return	
 10647  01082A                     l9643:
 10648  01082A  0E0E               	movlw	14
 10649  01082C  0012               	return	
 10650  01082E                     l9647:
 10651  01082E  0E7A               	movlw	122
 10652  010830  0012               	return	
 10653  010832                     l9651:
 10654  010832  0E06               	movlw	6
 10655  010834  0012               	return	
 10656  010836                     l9655:
 10657  010836  0E14               	movlw	20
 10658  010838  0012               	return	
 10659  01083A                     l9659:
 10660  01083A  0E54               	movlw	84
 10661  01083C  0012               	return	
 10662  01083E                     l9663:
 10663  01083E  0E5C               	movlw	92
 10664  010840  0012               	return	
 10665  010842                     l9667:
 10666  010842  0E73               	movlw	115
 10667  010844  0012               	return	
 10668  010846                     l9671:
 10669  010846  0E67               	movlw	103
 10670  010848  0012               	return	
 10671  01084A                     l9675:
 10672  01084A  0E50               	movlw	80
 10673  01084C  0012               	return	
 10674  01084E                     l9679:
 10675  01084E  0E6D               	movlw	109
 10676  010850  0012               	return	
 10677  010852                     l9683:
 10678  010852  0E78               	movlw	120
 10679  010854  0012               	return	
 10680  010856                     l9687:
 10681  010856  0E1C               	movlw	28
 10682  010858  0012               	return	
 10683  01085A                     l9691:
 10684  01085A  0E62               	movlw	98
 10685  01085C  0012               	return	
 10686  01085E                     l9695:
 10687  01085E  0E2A               	movlw	42
 10688  010860  0012               	return	
 10689  010862                     l9699:
 10690  010862  0E64               	movlw	100
 10691  010864  0012               	return	
 10692  010866                     l9703:
 10693  010866  0E6E               	movlw	110
 10694  010868  0012               	return	
 10695  01086A                     l9707:
 10696  01086A  0E5B               	movlw	91
 10697  01086C  0012               	return	
 10698  01086E                     l9711:
 10699  01086E  0E77               	movlw	119
 10700  010870  0012               	return	
 10701  010872                     l9715:
 10702  010872  0E7F               	movlw	127
 10703  010874  0012               	return	
 10704  010876                     l9719:
 10705  010876  0E39               	movlw	57
 10706  010878  0012               	return	
 10707  01087A                     l9723:
 10708  01087A  0E3F               	movlw	63
 10709  01087C  0012               	return	
 10710  01087E                     l9727:
 10711  01087E  0E79               	movlw	121
 10712  010880  0012               	return	
 10713  010882                     l9731:
 10714  010882  0E71               	movlw	113
 10715  010884  0012               	return	
 10716  010886                     l9735:
 10717  010886  0E3D               	movlw	61
 10718  010888  0012               	return	
 10719  01088A                     l9739:
 10720  01088A  0E76               	movlw	118
 10721  01088C  0012               	return	
 10722  01088E                     l9743:
 10723  01088E  0E06               	movlw	6
 10724  010890  0012               	return	
 10725  010892                     l9747:
 10726  010892  0E1E               	movlw	30
 10727  010894  0012               	return	
 10728  010896                     l9751:
 10729  010896  0E57               	movlw	87
 10730  010898  0012               	return	
 10731  01089A                     l9755:
 10732  01089A  0E38               	movlw	56
 10733  01089C  0012               	return	
 10734  01089E                     l9759:
 10735  01089E  0E76               	movlw	118
 10736  0108A0  0012               	return	
 10737  0108A2                     l9763:
 10738  0108A2  0E76               	movlw	118
 10739  0108A4  0012               	return	
 10740  0108A6                     l9767:
 10741  0108A6  0E3F               	movlw	63
 10742  0108A8  0012               	return	
 10743  0108AA                     l9771:
 10744  0108AA  0E73               	movlw	115
 10745  0108AC  0012               	return	
 10746  0108AE                     l9775:
 10747  0108AE  0E3F               	movlw	63
 10748  0108B0  0012               	return	
 10749  0108B2                     l9779:
 10750  0108B2  0E77               	movlw	119
 10751  0108B4  0012               	return	
 10752  0108B6                     l9783:
 10753  0108B6  0E6D               	movlw	109
 10754  0108B8  0012               	return	
 10755  0108BA                     l9787:
 10756  0108BA  0E31               	movlw	49
 10757  0108BC  0012               	return	
 10758  0108BE                     l9791:
 10759  0108BE  0E3E               	movlw	62
 10760  0108C0  0012               	return	
 10761  0108C2                     l9795:
 10762  0108C2  0E3E               	movlw	62
 10763  0108C4  0012               	return	
 10764  0108C6                     l9799:
 10765  0108C6  0E7E               	movlw	126
 10766  0108C8  0012               	return	
 10767  0108CA                     l9803:
 10768  0108CA  0E76               	movlw	118
 10769  0108CC  0012               	return	
 10770  0108CE                     l9807:
 10771  0108CE  0E66               	movlw	102
 10772  0108D0  0012               	return	
 10773  0108D2                     l9811:
 10774  0108D2  0E5B               	movlw	91
 10775  0108D4  0012               	return	
 10776  0108D6                     l9815:
 10777  0108D6  0E80               	movlw	128
 10778  0108D8  0012               	return	
 10779  0108DA                     l9821:
 10780  0108DA  0100               	movlb	0	; () banked
 10781  0108DC  51B7               	movf	ToSegment@pCHR& (0+255),w,b
 10782                           
 10783                           ; Switch size 1, requested type "space"
 10784                           ; Number of cases is 63, Range of values is 46 to 122
 10785                           ; switch strategies available:
 10786                           ; Name         Instructions Cycles
 10787                           ; simple_byte          190    96 (average)
 10788                           ;	Chosen strategy is simple_byte
 10789  0108DE  0A2E               	xorlw	46	; case 46
 10790  0108E0  B4D8               	btfsc	status,2,c
 10791  0108E2  D7F9               	goto	l9815
 10792  0108E4  0A1E               	xorlw	30	; case 48
 10793  0108E6  B4D8               	btfsc	status,2,c
 10794  0108E8  D77A               	goto	l9567
 10795  0108EA  0A01               	xorlw	1	; case 49
 10796  0108EC  B4D8               	btfsc	status,2,c
 10797  0108EE  D779               	goto	l9571
 10798  0108F0  0A03               	xorlw	3	; case 50
 10799  0108F2  B4D8               	btfsc	status,2,c
 10800  0108F4  D778               	goto	l9575
 10801  0108F6  0A01               	xorlw	1	; case 51
 10802  0108F8  B4D8               	btfsc	status,2,c
 10803  0108FA  D777               	goto	l9579
 10804  0108FC  0A07               	xorlw	7	; case 52
 10805  0108FE  B4D8               	btfsc	status,2,c
 10806  010900  D776               	goto	l9583
 10807  010902  0A01               	xorlw	1	; case 53
 10808  010904  B4D8               	btfsc	status,2,c
 10809  010906  D775               	goto	l9587
 10810  010908  0A03               	xorlw	3	; case 54
 10811  01090A  B4D8               	btfsc	status,2,c
 10812  01090C  D774               	goto	l9591
 10813  01090E  0A01               	xorlw	1	; case 55
 10814  010910  B4D8               	btfsc	status,2,c
 10815  010912  D773               	goto	l9595
 10816  010914  0A0F               	xorlw	15	; case 56
 10817  010916  B4D8               	btfsc	status,2,c
 10818  010918  D772               	goto	l9599
 10819  01091A  0A01               	xorlw	1	; case 57
 10820  01091C  B4D8               	btfsc	status,2,c
 10821  01091E  D771               	goto	l9603
 10822  010920  0A78               	xorlw	120	; case 65
 10823  010922  B4D8               	btfsc	status,2,c
 10824  010924  D7A4               	goto	l9711
 10825  010926  0A03               	xorlw	3	; case 66
 10826  010928  B4D8               	btfsc	status,2,c
 10827  01092A  D7A3               	goto	l9715
 10828  01092C  0A01               	xorlw	1	; case 67
 10829  01092E  B4D8               	btfsc	status,2,c
 10830  010930  D7A2               	goto	l9719
 10831  010932  0A07               	xorlw	7	; case 68
 10832  010934  B4D8               	btfsc	status,2,c
 10833  010936  D7A1               	goto	l9723
 10834  010938  0A01               	xorlw	1	; case 69
 10835  01093A  B4D8               	btfsc	status,2,c
 10836  01093C  D7A0               	goto	l9727
 10837  01093E  0A03               	xorlw	3	; case 70
 10838  010940  B4D8               	btfsc	status,2,c
 10839  010942  D79F               	goto	l9731
 10840  010944  0A01               	xorlw	1	; case 71
 10841  010946  B4D8               	btfsc	status,2,c
 10842  010948  D79E               	goto	l9735
 10843  01094A  0A0F               	xorlw	15	; case 72
 10844  01094C  B4D8               	btfsc	status,2,c
 10845  01094E  D79D               	goto	l9739
 10846  010950  0A01               	xorlw	1	; case 73
 10847  010952  B4D8               	btfsc	status,2,c
 10848  010954  D79C               	goto	l9743
 10849  010956  0A03               	xorlw	3	; case 74
 10850  010958  B4D8               	btfsc	status,2,c
 10851  01095A  D79B               	goto	l9747
 10852  01095C  0A01               	xorlw	1	; case 75
 10853  01095E  B4D8               	btfsc	status,2,c
 10854  010960  D79A               	goto	l9751
 10855  010962  0A07               	xorlw	7	; case 76
 10856  010964  B4D8               	btfsc	status,2,c
 10857  010966  D799               	goto	l9755
 10858  010968  0A01               	xorlw	1	; case 77
 10859  01096A  B4D8               	btfsc	status,2,c
 10860  01096C  D798               	goto	l9759
 10861  01096E  0A03               	xorlw	3	; case 78
 10862  010970  B4D8               	btfsc	status,2,c
 10863  010972  D797               	goto	l9763
 10864  010974  0A01               	xorlw	1	; case 79
 10865  010976  B4D8               	btfsc	status,2,c
 10866  010978  D796               	goto	l9767
 10867  01097A  0A1F               	xorlw	31	; case 80
 10868  01097C  B4D8               	btfsc	status,2,c
 10869  01097E  D795               	goto	l9771
 10870  010980  0A01               	xorlw	1	; case 81
 10871  010982  B4D8               	btfsc	status,2,c
 10872  010984  D794               	goto	l9775
 10873  010986  0A03               	xorlw	3	; case 82
 10874  010988  B4D8               	btfsc	status,2,c
 10875  01098A  D793               	goto	l9779
 10876  01098C  0A01               	xorlw	1	; case 83
 10877  01098E  B4D8               	btfsc	status,2,c
 10878  010990  D792               	goto	l9783
 10879  010992  0A07               	xorlw	7	; case 84
 10880  010994  B4D8               	btfsc	status,2,c
 10881  010996  D791               	goto	l9787
 10882  010998  0A01               	xorlw	1	; case 85
 10883  01099A  B4D8               	btfsc	status,2,c
 10884  01099C  D790               	goto	l9791
 10885  01099E  0A03               	xorlw	3	; case 86
 10886  0109A0  B4D8               	btfsc	status,2,c
 10887  0109A2  D78F               	goto	l9795
 10888  0109A4  0A01               	xorlw	1	; case 87
 10889  0109A6  B4D8               	btfsc	status,2,c
 10890  0109A8  D78E               	goto	l9799
 10891  0109AA  0A0F               	xorlw	15	; case 88
 10892  0109AC  B4D8               	btfsc	status,2,c
 10893  0109AE  D78D               	goto	l9803
 10894  0109B0  0A01               	xorlw	1	; case 89
 10895  0109B2  B4D8               	btfsc	status,2,c
 10896  0109B4  D78C               	goto	l9807
 10897  0109B6  0A03               	xorlw	3	; case 90
 10898  0109B8  B4D8               	btfsc	status,2,c
 10899  0109BA  D78B               	goto	l9811
 10900  0109BC  0A3B               	xorlw	59	; case 97
 10901  0109BE  B4D8               	btfsc	status,2,c
 10902  0109C0  D722               	goto	l9607
 10903  0109C2  0A03               	xorlw	3	; case 98
 10904  0109C4  B4D8               	btfsc	status,2,c
 10905  0109C6  D721               	goto	l9611
 10906  0109C8  0A01               	xorlw	1	; case 99
 10907  0109CA  B4D8               	btfsc	status,2,c
 10908  0109CC  D720               	goto	l9615
 10909  0109CE  0A07               	xorlw	7	; case 100
 10910  0109D0  B4D8               	btfsc	status,2,c
 10911  0109D2  D71F               	goto	l9619
 10912  0109D4  0A01               	xorlw	1	; case 101
 10913  0109D6  B4D8               	btfsc	status,2,c
 10914  0109D8  D71E               	goto	l9623
 10915  0109DA  0A03               	xorlw	3	; case 102
 10916  0109DC  B4D8               	btfsc	status,2,c
 10917  0109DE  D71D               	goto	l9627
 10918  0109E0  0A01               	xorlw	1	; case 103
 10919  0109E2  B4D8               	btfsc	status,2,c
 10920  0109E4  D71C               	goto	l9631
 10921  0109E6  0A0F               	xorlw	15	; case 104
 10922  0109E8  B4D8               	btfsc	status,2,c
 10923  0109EA  D71B               	goto	l9635
 10924  0109EC  0A01               	xorlw	1	; case 105
 10925  0109EE  B4D8               	btfsc	status,2,c
 10926  0109F0  D71A               	goto	l9639
 10927  0109F2  0A03               	xorlw	3	; case 106
 10928  0109F4  B4D8               	btfsc	status,2,c
 10929  0109F6  D719               	goto	l9643
 10930  0109F8  0A01               	xorlw	1	; case 107
 10931  0109FA  B4D8               	btfsc	status,2,c
 10932  0109FC  D718               	goto	l9647
 10933  0109FE  0A07               	xorlw	7	; case 108
 10934  010A00  B4D8               	btfsc	status,2,c
 10935  010A02  D717               	goto	l9651
 10936  010A04  0A01               	xorlw	1	; case 109
 10937  010A06  B4D8               	btfsc	status,2,c
 10938  010A08  D716               	goto	l9655
 10939  010A0A  0A03               	xorlw	3	; case 110
 10940  010A0C  B4D8               	btfsc	status,2,c
 10941  010A0E  D715               	goto	l9659
 10942  010A10  0A01               	xorlw	1	; case 111
 10943  010A12  B4D8               	btfsc	status,2,c
 10944  010A14  D714               	goto	l9663
 10945  010A16  0A1F               	xorlw	31	; case 112
 10946  010A18  B4D8               	btfsc	status,2,c
 10947  010A1A  D713               	goto	l9667
 10948  010A1C  0A01               	xorlw	1	; case 113
 10949  010A1E  B4D8               	btfsc	status,2,c
 10950  010A20  D712               	goto	l9671
 10951  010A22  0A03               	xorlw	3	; case 114
 10952  010A24  B4D8               	btfsc	status,2,c
 10953  010A26  D711               	goto	l9675
 10954  010A28  0A01               	xorlw	1	; case 115
 10955  010A2A  B4D8               	btfsc	status,2,c
 10956  010A2C  D710               	goto	l9679
 10957  010A2E  0A07               	xorlw	7	; case 116
 10958  010A30  B4D8               	btfsc	status,2,c
 10959  010A32  D70F               	goto	l9683
 10960  010A34  0A01               	xorlw	1	; case 117
 10961  010A36  B4D8               	btfsc	status,2,c
 10962  010A38  D70E               	goto	l9687
 10963  010A3A  0A03               	xorlw	3	; case 118
 10964  010A3C  B4D8               	btfsc	status,2,c
 10965  010A3E  D70D               	goto	l9691
 10966  010A40  0A01               	xorlw	1	; case 119
 10967  010A42  B4D8               	btfsc	status,2,c
 10968  010A44  D70C               	goto	l9695
 10969  010A46  0A0F               	xorlw	15	; case 120
 10970  010A48  B4D8               	btfsc	status,2,c
 10971  010A4A  D70B               	goto	l9699
 10972  010A4C  0A01               	xorlw	1	; case 121
 10973  010A4E  B4D8               	btfsc	status,2,c
 10974  010A50  D70A               	goto	l9703
 10975  010A52  0A03               	xorlw	3	; case 122
 10976  010A54  B4D8               	btfsc	status,2,c
 10977  010A56  D709               	goto	l9707
 10978                           
 10979                           ;Types.c: 354: return 0;
 10980                           
 10981                           ; BSR set to: 0
 10982  010A58  0E00               	movlw	0
 10983  010A5A  0012               	return	
 10984  010A5C                     __end_of_ToSegment:
 10985                           	opt stack 0
 10986                           tosu	equ	0xFFF
 10987                           tosh	equ	0xFFE
 10988                           tosl	equ	0xFFD
 10989                           pclath	equ	0xFFA
 10990                           tblptru	equ	0xFF8
 10991                           tblptrh	equ	0xFF7
 10992                           tblptrl	equ	0xFF6
 10993                           tablat	equ	0xFF5
 10994                           prodh	equ	0xFF4
 10995                           prodl	equ	0xFF3
 10996                           intcon	equ	0xFF2
 10997                           postinc0	equ	0xFEE
 10998                           wreg	equ	0xFE8
 10999                           indf1	equ	0xFE7
 11000                           postdec1	equ	0xFE5
 11001                           fsr1h	equ	0xFE2
 11002                           fsr1l	equ	0xFE1
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           plusw2	equ	0xFDB
 11007                           fsr2h	equ	0xFDA
 11008                           fsr2l	equ	0xFD9
 11009                           status	equ	0xFD8
 11010                           
 11011 ;; *************** function _HMI_Render *****************
 11012 ;; Defined at:
 11013 ;;		line 138 in file "HMI.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;		None
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  a               2    8[BANK0 ] unsigned short 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;                  1    wreg      void 
 11020 ;; Registers used:
 11021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;Total ram usage:        2 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    9
 11034 ;; This function calls:
 11035 ;;		_OutSeg
 11036 ;; This function is called by:
 11037 ;;		_main
 11038 ;; This function uses a non-reentrant model
 11039 ;;
 11040                           
 11041                           	psect	text52
 11042  0139BA                     __ptext52:
 11043                           	opt stack 0
 11044  0139BA                     _HMI_Render:
 11045                           	opt stack 21
 11046                           
 11047                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 11048                           
 11049                           ;incstack = 0
 11050  0139BA  0E00               	movlw	0
 11051  0139BC  0100               	movlb	0	; () banked
 11052  0139BE  6FC0               	movwf	(HMI_Render@a+1)& (0+255),b
 11053  0139C0  0E00               	movlw	0
 11054  0139C2  6FBF               	movwf	HMI_Render@a& (0+255),b
 11055  0139C4                     l10637:
 11056                           
 11057                           ; BSR set to: 0
 11058  0139C4  0100               	movlb	0	; () banked
 11059  0139C6  51C0               	movf	(HMI_Render@a+1)& (0+255),w,b
 11060  0139C8  E116               	bnz	l1158
 11061  0139CA  0E08               	movlw	8
 11062  0139CC  0100               	movlb	0	; () banked
 11063  0139CE  5DBF               	subwf	HMI_Render@a& (0+255),w,b
 11064  0139D0  B0D8               	btfsc	status,0,c
 11065  0139D2  0012               	return	
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 11069                           
 11070                           ; BSR set to: 0
 11071                           
 11072                           ; BSR set to: 0
 11073  0139D4  C0BF  F0BA         	movff	HMI_Render@a,OutSeg@pSegment
 11074  0139D8  0E6A               	movlw	low _HMIBoard
 11075  0139DA  0100               	movlb	0	; () banked
 11076  0139DC  25BF               	addwf	HMI_Render@a& (0+255),w,b
 11077  0139DE  6ED9               	movwf	fsr2l,c
 11078  0139E0  0E01               	movlw	high _HMIBoard
 11079  0139E2  0100               	movlb	0	; () banked
 11080  0139E4  21C0               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 11081  0139E6  6EDA               	movwf	fsr2h,c
 11082  0139E8  50DF               	movf	indf2,w,c
 11083  0139EA  EC58  F097         	call	_OutSeg
 11084  0139EE  0100               	movlb	0	; () banked
 11085  0139F0  4BBF               	infsnz	HMI_Render@a& (0+255),f,b
 11086  0139F2  2BC0               	incf	(HMI_Render@a+1)& (0+255),f,b
 11087  0139F4  D7E7               	goto	l10637
 11088  0139F6                     l1158:
 11089                           
 11090                           ; BSR set to: 0
 11091  0139F6  0012               	return		;funcret
 11092  0139F8                     __end_of_HMI_Render:
 11093                           	opt stack 0
 11094                           tosu	equ	0xFFF
 11095                           tosh	equ	0xFFE
 11096                           tosl	equ	0xFFD
 11097                           pclath	equ	0xFFA
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           postinc0	equ	0xFEE
 11106                           wreg	equ	0xFE8
 11107                           indf1	equ	0xFE7
 11108                           postdec1	equ	0xFE5
 11109                           fsr1h	equ	0xFE2
 11110                           fsr1l	equ	0xFE1
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           plusw2	equ	0xFDB
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function _OutSeg *****************
 11120 ;; Defined at:
 11121 ;;		line 54 in file "HMI.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;  pInput          1    wreg     unsigned char 
 11124 ;;  pSegment        1    3[BANK0 ] unsigned char 
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;  pInput          1    6[BANK0 ] unsigned char 
 11127 ;;  out             1    7[BANK0 ] volatile unsigned char 
 11128 ;; Return value:  Size  Location     Type
 11129 ;;                  1    wreg      void 
 11130 ;; Registers used:
 11131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11137 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11140 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;Total ram usage:        5 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    8
 11144 ;; This function calls:
 11145 ;;		_SPI_Send
 11146 ;; This function is called by:
 11147 ;;		_HMI_Render
 11148 ;;		_HMI_GRender
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           	psect	text53
 11153  012EB0                     __ptext53:
 11154                           	opt stack 0
 11155  012EB0                     _OutSeg:
 11156                           	opt stack 21
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;incstack = 0
 11160                           ;OutSeg@pInput stored from wreg
 11161  012EB0  0100               	movlb	0	; () banked
 11162  012EB2  6FBD               	movwf	OutSeg@pInput& (0+255),b
 11163                           
 11164                           ;HMI.c: 58: static UINT8 cur;
 11165                           ;HMI.c: 59: volatile UINT8 out;
 11166                           ;HMI.c: 60: static UINT8 segset;
 11167                           ;HMI.c: 61: static UINT8 a;
 11168                           ;HMI.c: 83: if (pSegment <= 8)
 11169  012EB4  0E09               	movlw	9
 11170  012EB6  0100               	movlb	0	; () banked
 11171  012EB8  61BA               	cpfslt	OutSeg@pSegment& (0+255),b
 11172  012EBA  0012               	return	
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;HMI.c: 84: {
 11176                           ;HMI.c: 85: cur = pInput;
 11177  012EBC  C0BD  F02F         	movff	OutSeg@pInput,OutSeg@cur
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 11181  012EC0  0E00               	movlw	0
 11182  012EC2  6E2E               	movwf	OutSeg@a,c
 11183  012EC4                     l10301:
 11184                           
 11185                           ; BSR set to: 0
 11186  012EC4  0E07               	movlw	7
 11187  012EC6  642E               	cpfsgt	OutSeg@a,c
 11188  012EC8  D001               	goto	l10305
 11189  012ECA  D027               	goto	l10313
 11190  012ECC                     l10305:
 11191                           
 11192                           ;HMI.c: 87: {
 11193                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 11194  012ECC  C02F  F0BB         	movff	OutSeg@cur,??_OutSeg
 11195  012ED0  0E01               	movlw	1
 11196  012ED2  0100               	movlb	0	; () banked
 11197  012ED4  17BB               	andwf	??_OutSeg& (0+255),f,b
 11198  012ED6  0E06               	movlw	6
 11199  012ED8  0100               	movlb	0	; () banked
 11200  012EDA  6FBC               	movwf	(??_OutSeg+1)& (0+255),b
 11201  012EDC                     u6675:
 11202  012EDC  0100               	movlb	0	; () banked
 11203  012EDE  90D8               	bcf	status,0,c
 11204  012EE0  37BB               	rlcf	??_OutSeg& (0+255),f,b
 11205  012EE2  0100               	movlb	0	; () banked
 11206  012EE4  2FBC               	decfsz	(??_OutSeg+1)& (0+255),f,b
 11207  012EE6  D7FA               	goto	u6675
 11208  012EE8  0100               	movlb	0	; () banked
 11209  012EEA  51BB               	movf	??_OutSeg& (0+255),w,b
 11210  012EEC  6E30               	movwf	OutSeg@segset,c
 11211                           
 11212                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 11213  012EEE  0100               	movlb	0	; () banked
 11214  012EF0  39BA               	swapf	OutSeg@pSegment& (0+255),w,b
 11215  012EF2  42E8               	rrncf	wreg,f,c
 11216  012EF4  0BF8               	andlw	248
 11217  012EF6  102E               	iorwf	OutSeg@a,w,c
 11218  012EF8  1030               	iorwf	OutSeg@segset,w,c
 11219  012EFA  0100               	movlb	0	; () banked
 11220  012EFC  6FBE               	movwf	OutSeg@out& (0+255),b	;volatile
 11221                           
 11222                           ;HMI.c: 90: cur >>= 1;
 11223  012EFE  90D8               	bcf	status,0,c
 11224  012F00  322F               	rrcf	OutSeg@cur,f,c
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 11228  012F02  0EA4               	movlw	low _SPI1
 11229  012F04  0100               	movlb	0	; () banked
 11230  012F06  6FB7               	movwf	SPI_Send@pInput& (0+255),b
 11231  012F08  0E01               	movlw	high _SPI1
 11232  012F0A  0100               	movlb	0	; () banked
 11233  012F0C  6FB8               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11234  012F0E  C0BE  F0B9         	movff	OutSeg@out,SPI_Send@pData	;volatile
 11235  012F12  EC6A  F099         	call	_SPI_Send	;wreg free
 11236  012F16  2A2E               	incf	OutSeg@a,f,c
 11237  012F18  D7D5               	goto	l10301
 11238  012F1A                     l10313:
 11239                           
 11240                           ;HMI.c: 96: }
 11241                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 11242  012F1A  0EA4               	movlw	low _SPI1
 11243  012F1C  0100               	movlb	0	; () banked
 11244  012F1E  6FB7               	movwf	SPI_Send@pInput& (0+255),b
 11245  012F20  0E01               	movlw	high _SPI1
 11246  012F22  0100               	movlb	0	; () banked
 11247  012F24  6FB8               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11248  012F26  0E00               	movlw	0
 11249  012F28  0100               	movlb	0	; () banked
 11250  012F2A  6FB9               	movwf	SPI_Send@pData& (0+255),b
 11251  012F2C  EC6A  F099         	call	_SPI_Send	;wreg free
 11252  012F30  0012               	return	
 11253  012F32                     __end_of_OutSeg:
 11254                           	opt stack 0
 11255                           tosu	equ	0xFFF
 11256                           tosh	equ	0xFFE
 11257                           tosl	equ	0xFFD
 11258                           pclath	equ	0xFFA
 11259                           tblptru	equ	0xFF8
 11260                           tblptrh	equ	0xFF7
 11261                           tblptrl	equ	0xFF6
 11262                           tablat	equ	0xFF5
 11263                           prodh	equ	0xFF4
 11264                           prodl	equ	0xFF3
 11265                           intcon	equ	0xFF2
 11266                           postinc0	equ	0xFEE
 11267                           wreg	equ	0xFE8
 11268                           indf1	equ	0xFE7
 11269                           postdec1	equ	0xFE5
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           plusw2	equ	0xFDB
 11276                           fsr2h	equ	0xFDA
 11277                           fsr2l	equ	0xFD9
 11278                           status	equ	0xFD8
 11279                           
 11280 ;; *************** function _HMI_Init *****************
 11281 ;; Defined at:
 11282 ;;		line 104 in file "HMI.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;		None
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  in              2   14[BANK1 ] unsigned short 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      void 
 11289 ;; Registers used:
 11290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;Total ram usage:        2 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:   16
 11303 ;; This function calls:
 11304 ;;		_Button_Init
 11305 ;;		_SPI_Init
 11306 ;;		_SPI_MinSpeed
 11307 ;; This function is called by:
 11308 ;;		_main
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text54
 11313  0110E8                     __ptext54:
 11314                           	opt stack 0
 11315  0110E8                     _HMI_Init:
 11316                           	opt stack 14
 11317                           
 11318                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 11319                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 11320                           
 11321                           ;incstack = 0
 11322  0110E8  0E9A               	movlw	low (_HMIBoard+48)
 11323  0110EA  0101               	movlb	1	; () banked
 11324  0110EC  6FED               	movwf	Button_Init@pInput& (0+255),b
 11325  0110EE  0E01               	movlw	high (_HMIBoard+48)
 11326  0110F0  0101               	movlb	1	; () banked
 11327  0110F2  6FEE               	movwf	(Button_Init@pInput+1)& (0+255),b
 11328  0110F4  0E00               	movlw	0
 11329  0110F6  0101               	movlb	1	; () banked
 11330  0110F8  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11331  0110FA  0E02               	movlw	2
 11332  0110FC  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 11333  0110FE  0E56               	movlw	low _HMI_InitButtons
 11334  011100  0101               	movlb	1	; () banked
 11335  011102  6FF1               	movwf	Button_Init@pInitIO& (0+255),b
 11336  011104  0E3E               	movlw	high _HMI_InitButtons
 11337  011106  0101               	movlb	1	; () banked
 11338  011108  6FF2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11339  01110A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11340  01110C  0101               	movlb	1	; () banked
 11341  01110E  6FF3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11342  011110  0E00               	movlw	0
 11343  011112  0101               	movlb	1	; () banked
 11344  011114  6FF4               	movwf	Button_Init@pGetState& (0+255),b
 11345  011116  0E00               	movlw	0
 11346  011118  0101               	movlb	1	; () banked
 11347  01111A  6FF5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11348  01111C  0E00               	movlw	0
 11349  01111E  0101               	movlb	1	; () banked
 11350  011120  6FF6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11351  011122  0E00               	movlw	0
 11352  011124  0101               	movlb	1	; () banked
 11353  011126  6FF7               	movwf	Button_Init@pFunction& (0+255),b
 11354  011128  0E00               	movlw	0
 11355  01112A  0101               	movlb	1	; () banked
 11356  01112C  6FF8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11357  01112E  0E00               	movlw	0
 11358  011130  0101               	movlb	1	; () banked
 11359  011132  6FF9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11360  011134  ECAD  F090         	call	_Button_Init	;wreg free
 11361                           
 11362                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 11363                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 11364  011138  0E7C               	movlw	low (_HMIBoard+18)
 11365  01113A  0101               	movlb	1	; () banked
 11366  01113C  6FED               	movwf	Button_Init@pInput& (0+255),b
 11367  01113E  0E01               	movlw	high (_HMIBoard+18)
 11368  011140  0101               	movlb	1	; () banked
 11369  011142  6FEE               	movwf	(Button_Init@pInput+1)& (0+255),b
 11370  011144  0E00               	movlw	0
 11371  011146  0101               	movlb	1	; () banked
 11372  011148  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11373  01114A  0E02               	movlw	2
 11374  01114C  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 11375  01114E  0E56               	movlw	low _HMI_InitButtons
 11376  011150  0101               	movlb	1	; () banked
 11377  011152  6FF1               	movwf	Button_Init@pInitIO& (0+255),b
 11378  011154  0E3E               	movlw	high _HMI_InitButtons
 11379  011156  0101               	movlb	1	; () banked
 11380  011158  6FF2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11381  01115A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11382  01115C  0101               	movlb	1	; () banked
 11383  01115E  6FF3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11384  011160  0E00               	movlw	0
 11385  011162  0101               	movlb	1	; () banked
 11386  011164  6FF4               	movwf	Button_Init@pGetState& (0+255),b
 11387  011166  0E00               	movlw	0
 11388  011168  0101               	movlb	1	; () banked
 11389  01116A  6FF5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11390  01116C  0E00               	movlw	0
 11391  01116E  0101               	movlb	1	; () banked
 11392  011170  6FF6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11393  011172  0E00               	movlw	0
 11394  011174  0101               	movlb	1	; () banked
 11395  011176  6FF7               	movwf	Button_Init@pFunction& (0+255),b
 11396  011178  0E00               	movlw	0
 11397  01117A  0101               	movlb	1	; () banked
 11398  01117C  6FF8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11399  01117E  0E00               	movlw	0
 11400  011180  0101               	movlb	1	; () banked
 11401  011182  6FF9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11402  011184  ECAD  F090         	call	_Button_Init	;wreg free
 11403                           
 11404                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 11405                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 11406  011188  0E72               	movlw	low (_HMIBoard+8)
 11407  01118A  0101               	movlb	1	; () banked
 11408  01118C  6FED               	movwf	Button_Init@pInput& (0+255),b
 11409  01118E  0E01               	movlw	high (_HMIBoard+8)
 11410  011190  0101               	movlb	1	; () banked
 11411  011192  6FEE               	movwf	(Button_Init@pInput+1)& (0+255),b
 11412  011194  0E00               	movlw	0
 11413  011196  0101               	movlb	1	; () banked
 11414  011198  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11415  01119A  0E02               	movlw	2
 11416  01119C  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 11417  01119E  0E56               	movlw	low _HMI_InitButtons
 11418  0111A0  0101               	movlb	1	; () banked
 11419  0111A2  6FF1               	movwf	Button_Init@pInitIO& (0+255),b
 11420  0111A4  0E3E               	movlw	high _HMI_InitButtons
 11421  0111A6  0101               	movlb	1	; () banked
 11422  0111A8  6FF2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11423  0111AA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11424  0111AC  0101               	movlb	1	; () banked
 11425  0111AE  6FF3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11426  0111B0  0E00               	movlw	0
 11427  0111B2  0101               	movlb	1	; () banked
 11428  0111B4  6FF4               	movwf	Button_Init@pGetState& (0+255),b
 11429  0111B6  0E00               	movlw	0
 11430  0111B8  0101               	movlb	1	; () banked
 11431  0111BA  6FF5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11432  0111BC  0E00               	movlw	0
 11433  0111BE  0101               	movlb	1	; () banked
 11434  0111C0  6FF6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11435  0111C2  0E00               	movlw	0
 11436  0111C4  0101               	movlb	1	; () banked
 11437  0111C6  6FF7               	movwf	Button_Init@pFunction& (0+255),b
 11438  0111C8  0E00               	movlw	0
 11439  0111CA  0101               	movlb	1	; () banked
 11440  0111CC  6FF8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11441  0111CE  0E00               	movlw	0
 11442  0111D0  0101               	movlb	1	; () banked
 11443  0111D2  6FF9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11444  0111D4  ECAD  F090         	call	_Button_Init	;wreg free
 11445                           
 11446                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 11447                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 11448  0111D8  0E86               	movlw	low (_HMIBoard+28)
 11449  0111DA  0101               	movlb	1	; () banked
 11450  0111DC  6FED               	movwf	Button_Init@pInput& (0+255),b
 11451  0111DE  0E01               	movlw	high (_HMIBoard+28)
 11452  0111E0  0101               	movlb	1	; () banked
 11453  0111E2  6FEE               	movwf	(Button_Init@pInput+1)& (0+255),b
 11454  0111E4  0E00               	movlw	0
 11455  0111E6  0101               	movlb	1	; () banked
 11456  0111E8  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11457  0111EA  0E02               	movlw	2
 11458  0111EC  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 11459  0111EE  0E56               	movlw	low _HMI_InitButtons
 11460  0111F0  0101               	movlb	1	; () banked
 11461  0111F2  6FF1               	movwf	Button_Init@pInitIO& (0+255),b
 11462  0111F4  0E3E               	movlw	high _HMI_InitButtons
 11463  0111F6  0101               	movlb	1	; () banked
 11464  0111F8  6FF2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11465  0111FA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11466  0111FC  0101               	movlb	1	; () banked
 11467  0111FE  6FF3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11468  011200  0E00               	movlw	0
 11469  011202  0101               	movlb	1	; () banked
 11470  011204  6FF4               	movwf	Button_Init@pGetState& (0+255),b
 11471  011206  0E00               	movlw	0
 11472  011208  0101               	movlb	1	; () banked
 11473  01120A  6FF5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11474  01120C  0E00               	movlw	0
 11475  01120E  0101               	movlb	1	; () banked
 11476  011210  6FF6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11477  011212  0E00               	movlw	0
 11478  011214  0101               	movlb	1	; () banked
 11479  011216  6FF7               	movwf	Button_Init@pFunction& (0+255),b
 11480  011218  0E00               	movlw	0
 11481  01121A  0101               	movlb	1	; () banked
 11482  01121C  6FF8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11483  01121E  0E00               	movlw	0
 11484  011220  0101               	movlb	1	; () banked
 11485  011222  6FF9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11486  011224  ECAD  F090         	call	_Button_Init	;wreg free
 11487                           
 11488                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 11489                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 11490  011228  0E90               	movlw	low (_HMIBoard+38)
 11491  01122A  0101               	movlb	1	; () banked
 11492  01122C  6FED               	movwf	Button_Init@pInput& (0+255),b
 11493  01122E  0E01               	movlw	high (_HMIBoard+38)
 11494  011230  0101               	movlb	1	; () banked
 11495  011232  6FEE               	movwf	(Button_Init@pInput+1)& (0+255),b
 11496  011234  0E00               	movlw	0
 11497  011236  0101               	movlb	1	; () banked
 11498  011238  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11499  01123A  0E02               	movlw	2
 11500  01123C  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 11501  01123E  0E56               	movlw	low _HMI_InitButtons
 11502  011240  0101               	movlb	1	; () banked
 11503  011242  6FF1               	movwf	Button_Init@pInitIO& (0+255),b
 11504  011244  0E3E               	movlw	high _HMI_InitButtons
 11505  011246  0101               	movlb	1	; () banked
 11506  011248  6FF2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11507  01124A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11508  01124C  0101               	movlb	1	; () banked
 11509  01124E  6FF3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11510  011250  0E00               	movlw	0
 11511  011252  0101               	movlb	1	; () banked
 11512  011254  6FF4               	movwf	Button_Init@pGetState& (0+255),b
 11513  011256  0E00               	movlw	0
 11514  011258  0101               	movlb	1	; () banked
 11515  01125A  6FF5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11516  01125C  0E00               	movlw	0
 11517  01125E  0101               	movlb	1	; () banked
 11518  011260  6FF6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11519  011262  0E00               	movlw	0
 11520  011264  0101               	movlb	1	; () banked
 11521  011266  6FF7               	movwf	Button_Init@pFunction& (0+255),b
 11522  011268  0E00               	movlw	0
 11523  01126A  0101               	movlb	1	; () banked
 11524  01126C  6FF8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11525  01126E  0E00               	movlw	0
 11526  011270  0101               	movlb	1	; () banked
 11527  011272  6FF9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11528  011274  ECAD  F090         	call	_Button_Init	;wreg free
 11529                           
 11530                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 11531  011278  0EA0               	movlw	160
 11532  01127A  0100               	movlb	0	; () banked
 11533  01127C  6FE4               	movwf	SPI_Init@pClock& (0+255),b
 11534  01127E  0E86               	movlw	134
 11535  011280  6FE5               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11536  011282  0E01               	movlw	1
 11537  011284  6FE6               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11538  011286  0E00               	movlw	0
 11539  011288  6FE7               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11540  01128A  0E00               	movlw	0
 11541  01128C  0100               	movlb	0	; () banked
 11542  01128E  6FE8               	movwf	SPI_Init@pChannel& (0+255),b
 11543  011290  0E02               	movlw	2
 11544  011292  0100               	movlb	0	; () banked
 11545  011294  6FE9               	movwf	SPI_Init@pMode& (0+255),b
 11546  011296  EC00  F080         	call	_SPI_Init	;wreg free
 11547                           
 11548                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 11549  01129A  0EA4               	movlw	low _SPI1
 11550  01129C  0100               	movlb	0	; () banked
 11551  01129E  6FC6               	movwf	SPI_MinSpeed@pInput& (0+255),b
 11552  0112A0  0E01               	movlw	high _SPI1
 11553  0112A2  0100               	movlb	0	; () banked
 11554  0112A4  6FC7               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 11555  0112A6  EC88  F098         	call	_SPI_MinSpeed	;wreg free
 11556                           
 11557                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 11558  0112AA  0E00               	movlw	0
 11559  0112AC  0101               	movlb	1	; () banked
 11560  0112AE  6FFB               	movwf	(HMI_Init@in+1)& (0+255),b
 11561  0112B0  0E00               	movlw	0
 11562  0112B2  6FFA               	movwf	HMI_Init@in& (0+255),b
 11563  0112B4                     l10625:
 11564                           
 11565                           ; BSR set to: 1
 11566  0112B4  0101               	movlb	1	; () banked
 11567  0112B6  51FB               	movf	(HMI_Init@in+1)& (0+255),w,b
 11568  0112B8  E113               	bnz	l1153
 11569  0112BA  0E08               	movlw	8
 11570  0112BC  0101               	movlb	1	; () banked
 11571  0112BE  5DFA               	subwf	HMI_Init@in& (0+255),w,b
 11572  0112C0  B0D8               	btfsc	status,0,c
 11573  0112C2  0012               	return	
 11574                           
 11575                           ; BSR set to: 1
 11576                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 11577                           
 11578                           ; BSR set to: 1
 11579                           
 11580                           ; BSR set to: 1
 11581  0112C4  0E6A               	movlw	low _HMIBoard
 11582  0112C6  0101               	movlb	1	; () banked
 11583  0112C8  25FA               	addwf	HMI_Init@in& (0+255),w,b
 11584  0112CA  6ED9               	movwf	fsr2l,c
 11585  0112CC  0E01               	movlw	high _HMIBoard
 11586  0112CE  0101               	movlb	1	; () banked
 11587  0112D0  21FB               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 11588  0112D2  6EDA               	movwf	fsr2h,c
 11589  0112D4  0E00               	movlw	0
 11590  0112D6  6EDF               	movwf	indf2,c
 11591                           
 11592                           ; BSR set to: 1
 11593  0112D8  0101               	movlb	1	; () banked
 11594  0112DA  4BFA               	infsnz	HMI_Init@in& (0+255),f,b
 11595  0112DC  2BFB               	incf	(HMI_Init@in+1)& (0+255),f,b
 11596  0112DE  D7EA               	goto	l10625
 11597  0112E0                     l1153:
 11598                           
 11599                           ; BSR set to: 1
 11600  0112E0  0012               	return		;funcret
 11601  0112E2                     __end_of_HMI_Init:
 11602                           	opt stack 0
 11603                           tosu	equ	0xFFF
 11604                           tosh	equ	0xFFE
 11605                           tosl	equ	0xFFD
 11606                           pclath	equ	0xFFA
 11607                           tblptru	equ	0xFF8
 11608                           tblptrh	equ	0xFF7
 11609                           tblptrl	equ	0xFF6
 11610                           tablat	equ	0xFF5
 11611                           prodh	equ	0xFF4
 11612                           prodl	equ	0xFF3
 11613                           intcon	equ	0xFF2
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           indf1	equ	0xFE7
 11617                           postdec1	equ	0xFE5
 11618                           fsr1h	equ	0xFE2
 11619                           fsr1l	equ	0xFE1
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           plusw2	equ	0xFDB
 11624                           fsr2h	equ	0xFDA
 11625                           fsr2l	equ	0xFD9
 11626                           status	equ	0xFD8
 11627                           
 11628 ;; *************** function _SPI_MinSpeed *****************
 11629 ;; Defined at:
 11630 ;;		line 190 in file "Library/SPI.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11633 ;;		 -> SPI1(11), 
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;		None
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  1    wreg      void 
 11638 ;; Registers used:
 11639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;Total ram usage:        2 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    9
 11652 ;; This function calls:
 11653 ;;		_Byte_SetBit
 11654 ;;		_Byte_SetQuad
 11655 ;; This function is called by:
 11656 ;;		_HMI_Init
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text55
 11661  013110                     __ptext55:
 11662                           	opt stack 0
 11663  013110                     _SPI_MinSpeed:
 11664                           	opt stack 20
 11665                           
 11666                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11667                           
 11668                           ; BSR set to: 1
 11669                           ;incstack = 0
 11670  013110  0100               	movlb	0	; () banked
 11671  013112  EE20 F006          	lfsr	2,6
 11672  013116  51C6               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11673  013118  26D9               	addwf	fsr2l,f,c
 11674  01311A  51C7               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11675  01311C  22DA               	addwfc	fsr2h,f,c
 11676  01311E  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 11677  013122  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 11678  013126  0E05               	movlw	5
 11679  013128  0100               	movlb	0	; () banked
 11680  01312A  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 11681  01312C  0E00               	movlw	0
 11682  01312E  0100               	movlb	0	; () banked
 11683  013130  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 11684  013132  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 11685                           
 11686                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 11687  013136  0100               	movlb	0	; () banked
 11688  013138  EE20 F006          	lfsr	2,6
 11689  01313C  51C6               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11690  01313E  26D9               	addwf	fsr2l,f,c
 11691  013140  51C7               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11692  013142  22DA               	addwfc	fsr2h,f,c
 11693  013144  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 11694  013148  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 11695  01314C  0E00               	movlw	0
 11696  01314E  0100               	movlb	0	; () banked
 11697  013150  6FC4               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11698  013152  0E02               	movlw	2
 11699  013154  0100               	movlb	0	; () banked
 11700  013156  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 11701  013158  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 11702                           
 11703                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11704  01315C  0100               	movlb	0	; () banked
 11705  01315E  EE20 F006          	lfsr	2,6
 11706  013162  51C6               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11707  013164  26D9               	addwf	fsr2l,f,c
 11708  013166  51C7               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11709  013168  22DA               	addwfc	fsr2h,f,c
 11710  01316A  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 11711  01316E  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 11712  013172  0E05               	movlw	5
 11713  013174  0100               	movlb	0	; () banked
 11714  013176  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 11715  013178  0E01               	movlw	1
 11716  01317A  0100               	movlb	0	; () banked
 11717  01317C  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 11718  01317E  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 11719  013182  0012               	return		;funcret
 11720  013184                     __end_of_SPI_MinSpeed:
 11721                           	opt stack 0
 11722                           tosu	equ	0xFFF
 11723                           tosh	equ	0xFFE
 11724                           tosl	equ	0xFFD
 11725                           pclath	equ	0xFFA
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf1	equ	0xFE7
 11736                           postdec1	equ	0xFE5
 11737                           fsr1h	equ	0xFE2
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           plusw2	equ	0xFDB
 11743                           fsr2h	equ	0xFDA
 11744                           fsr2l	equ	0xFD9
 11745                           status	equ	0xFD8
 11746                           
 11747 ;; *************** function _SPI_Init *****************
 11748 ;; Defined at:
 11749 ;;		line 12 in file "Library/SPI.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;  pClock          4   45[BANK0 ] unsigned long 
 11752 ;;  pChannel        1   49[BANK0 ] enum E7688
 11753 ;;  pMode           1   50[BANK0 ] enum E7692
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 11756 ;;		 -> SPI1(11), SPI2(11), 
 11757 ;; Return value:  Size  Location     Type
 11758 ;;                  1    wreg      void 
 11759 ;; Registers used:
 11760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11766 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;Total ram usage:        8 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:   12
 11773 ;; This function calls:
 11774 ;;		_Byte_SetBit
 11775 ;;		_Byte_SetQuad
 11776 ;;		_Port_SetPinType
 11777 ;;		_SPI_DCS
 11778 ;;		_SPI_DisableISR
 11779 ;;		_Timer2_Init
 11780 ;; This function is called by:
 11781 ;;		_Configure_GPIOs
 11782 ;;		_HMI_Init
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           	psect	text56
 11787  010000                     __ptext56:
 11788                           	opt stack 0
 11789  010000                     _SPI_Init:
 11790                           	opt stack 16
 11791                           
 11792                           ;SPI.c: 14: SPIPtr pInput;
 11793                           ;SPI.c: 16: switch (pChannel)
 11794                           
 11795                           ;incstack = 0
 11796  010000  D00C               	goto	l9285
 11797  010002                     l9279:
 11798                           
 11799                           ;SPI.c: 19: pInput = &SPI1;
 11800  010002  0EA4               	movlw	low _SPI1
 11801  010004  0100               	movlb	0	; () banked
 11802  010006  6FEA               	movwf	SPI_Init@pInput& (0+255),b
 11803  010008  0E01               	movlw	high _SPI1
 11804  01000A  D004               	goto	L6
 11805  01000C                     l9281:
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;SPI.c: 22: pInput = &SPI2;
 11809  01000C  0EAF               	movlw	low _SPI2
 11810  01000E  0100               	movlb	0	; () banked
 11811  010010  6FEA               	movwf	SPI_Init@pInput& (0+255),b
 11812  010012  0E01               	movlw	high _SPI2
 11813  010014                     L6:
 11814  010014  0100               	movlb	0	; () banked
 11815  010016  6FEB               	movwf	(SPI_Init@pInput+1)& (0+255),b
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;SPI.c: 24: };
 11819                           
 11820                           ;SPI.c: 23: break;
 11821  010018  D008               	goto	l9287
 11822  01001A                     l9285:
 11823  01001A  0100               	movlb	0	; () banked
 11824  01001C  51E8               	movf	SPI_Init@pChannel& (0+255),w,b
 11825                           
 11826                           ; Switch size 1, requested type "space"
 11827                           ; Number of cases is 2, Range of values is 0 to 1
 11828                           ; switch strategies available:
 11829                           ; Name         Instructions Cycles
 11830                           ; simple_byte            7     4 (average)
 11831                           ;	Chosen strategy is simple_byte
 11832  01001E  0A00               	xorlw	0	; case 0
 11833  010020  B4D8               	btfsc	status,2,c
 11834  010022  D7EF               	goto	l9279
 11835  010024  0A01               	xorlw	1	; case 1
 11836  010026  B4D8               	btfsc	status,2,c
 11837  010028  D7F1               	goto	l9281
 11838  01002A                     l9287:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;SPI.c: 26: pInput->mChannel = pChannel;
 11842  01002A  0100               	movlb	0	; () banked
 11843  01002C  EE20 F002          	lfsr	2,2
 11844  010030  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 11845  010032  26D9               	addwf	fsr2l,f,c
 11846  010034  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11847  010036  22DA               	addwfc	fsr2h,f,c
 11848  010038  C0E8  FFDF         	movff	SPI_Init@pChannel,indf2
 11849                           
 11850                           ;SPI.c: 35: switch (pChannel)
 11851  01003C  D0B1               	goto	l9307
 11852  01003E                     l9289:
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 11856  01003E  0E80               	movlw	low _PortC
 11857  010040  0100               	movlb	0	; () banked
 11858  010042  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11859  010044  0E00               	movlw	high _PortC
 11860  010046  0100               	movlb	0	; () banked
 11861  010048  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11862  01004A  0E02               	movlw	2
 11863  01004C  0100               	movlb	0	; () banked
 11864  01004E  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11865  010050  0E03               	movlw	3
 11866  010052  0100               	movlb	0	; () banked
 11867  010054  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11868  010056  EC71  F089         	call	_Port_SetPinType	;wreg free
 11869                           
 11870                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 11871  01005A  0E80               	movlw	low _PortC
 11872  01005C  0100               	movlb	0	; () banked
 11873  01005E  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11874  010060  0E00               	movlw	high _PortC
 11875  010062  0100               	movlb	0	; () banked
 11876  010064  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11877  010066  0E03               	movlw	3
 11878  010068  0100               	movlb	0	; () banked
 11879  01006A  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11880  01006C  0E03               	movlw	3
 11881  01006E  0100               	movlb	0	; () banked
 11882  010070  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11883  010072  EC71  F089         	call	_Port_SetPinType	;wreg free
 11884                           
 11885                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 11886  010076  0E80               	movlw	low _PortC
 11887  010078  0100               	movlb	0	; () banked
 11888  01007A  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11889  01007C  0E00               	movlw	high _PortC
 11890  01007E  0100               	movlb	0	; () banked
 11891  010080  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11892  010082  0E05               	movlw	5
 11893  010084  0100               	movlb	0	; () banked
 11894  010086  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11895  010088  0E03               	movlw	3
 11896  01008A  0100               	movlb	0	; () banked
 11897  01008C  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11898  01008E  EC71  F089         	call	_Port_SetPinType	;wreg free
 11899                           
 11900                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 11901  010092  0E80               	movlw	low _PortC
 11902  010094  0100               	movlb	0	; () banked
 11903  010096  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11904  010098  0E00               	movlw	high _PortC
 11905  01009A  0100               	movlb	0	; () banked
 11906  01009C  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11907  01009E  0E04               	movlw	4
 11908  0100A0  0100               	movlb	0	; () banked
 11909  0100A2  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11910  0100A4  0E00               	movlw	0
 11911  0100A6  0100               	movlb	0	; () banked
 11912  0100A8  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11913  0100AA  EC71  F089         	call	_Port_SetPinType	;wreg free
 11914                           
 11915                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 11916  0100AE  0100               	movlb	0	; () banked
 11917  0100B0  EE20 F003          	lfsr	2,3
 11918  0100B4  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 11919  0100B6  26D9               	addwf	fsr2l,f,c
 11920  0100B8  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11921  0100BA  22DA               	addwfc	fsr2h,f,c
 11922  0100BC  0EC7               	movlw	199
 11923  0100BE  6EDE               	movwf	postinc2,c
 11924  0100C0  0E0F               	movlw	15
 11925  0100C2  6EDD               	movwf	postdec2,c
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 11929  0100C4  0100               	movlb	0	; () banked
 11930  0100C6  EE20 F006          	lfsr	2,6
 11931  0100CA  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 11932  0100CC  26D9               	addwf	fsr2l,f,c
 11933  0100CE  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11934  0100D0  22DA               	addwfc	fsr2h,f,c
 11935  0100D2  0EC6               	movlw	198
 11936  0100D4  6EDE               	movwf	postinc2,c
 11937  0100D6  0E0F               	movlw	15
 11938  0100D8  6EDD               	movwf	postdec2,c
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 11942  0100DA  0100               	movlb	0	; () banked
 11943  0100DC  EE20 F009          	lfsr	2,9
 11944  0100E0  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 11945  0100E2  26D9               	addwf	fsr2l,f,c
 11946  0100E4  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11947  0100E6  22DA               	addwfc	fsr2h,f,c
 11948  0100E8  0EC9               	movlw	201
 11949  0100EA  D056               	goto	L7
 11950  0100EC                     l9297:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 11954  0100EC  0E8A               	movlw	low _PortD
 11955  0100EE  0100               	movlb	0	; () banked
 11956  0100F0  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11957  0100F2  0E00               	movlw	high _PortD
 11958  0100F4  0100               	movlb	0	; () banked
 11959  0100F6  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11960  0100F8  0E07               	movlw	7
 11961  0100FA  0100               	movlb	0	; () banked
 11962  0100FC  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11963  0100FE  0E03               	movlw	3
 11964  010100  0100               	movlb	0	; () banked
 11965  010102  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11966  010104  EC71  F089         	call	_Port_SetPinType	;wreg free
 11967                           
 11968                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 11969  010108  0E8A               	movlw	low _PortD
 11970  01010A  0100               	movlb	0	; () banked
 11971  01010C  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11972  01010E  0E00               	movlw	high _PortD
 11973  010110  0100               	movlb	0	; () banked
 11974  010112  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11975  010114  0E06               	movlw	6
 11976  010116  0100               	movlb	0	; () banked
 11977  010118  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11978  01011A  0E03               	movlw	3
 11979  01011C  0100               	movlb	0	; () banked
 11980  01011E  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11981  010120  EC71  F089         	call	_Port_SetPinType	;wreg free
 11982                           
 11983                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 11984  010124  0E8A               	movlw	low _PortD
 11985  010126  0100               	movlb	0	; () banked
 11986  010128  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 11987  01012A  0E00               	movlw	high _PortD
 11988  01012C  0100               	movlb	0	; () banked
 11989  01012E  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11990  010130  0E04               	movlw	4
 11991  010132  0100               	movlb	0	; () banked
 11992  010134  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 11993  010136  0E03               	movlw	3
 11994  010138  0100               	movlb	0	; () banked
 11995  01013A  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 11996  01013C  EC71  F089         	call	_Port_SetPinType	;wreg free
 11997                           
 11998                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 11999  010140  0E8A               	movlw	low _PortD
 12000  010142  0100               	movlb	0	; () banked
 12001  010144  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 12002  010146  0E00               	movlw	high _PortD
 12003  010148  0100               	movlb	0	; () banked
 12004  01014A  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12005  01014C  0E05               	movlw	5
 12006  01014E  0100               	movlb	0	; () banked
 12007  010150  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 12008  010152  0E00               	movlw	0
 12009  010154  0100               	movlb	0	; () banked
 12010  010156  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 12011  010158  EC71  F089         	call	_Port_SetPinType	;wreg free
 12012                           
 12013                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 12014  01015C  0100               	movlb	0	; () banked
 12015  01015E  EE20 F003          	lfsr	2,3
 12016  010162  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12017  010164  26D9               	addwf	fsr2l,f,c
 12018  010166  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12019  010168  22DA               	addwfc	fsr2h,f,c
 12020  01016A  0E6D               	movlw	109
 12021  01016C  6EDE               	movwf	postinc2,c
 12022  01016E  0E0F               	movlw	15
 12023  010170  6EDD               	movwf	postdec2,c
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 12027  010172  0100               	movlb	0	; () banked
 12028  010174  EE20 F006          	lfsr	2,6
 12029  010178  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12030  01017A  26D9               	addwf	fsr2l,f,c
 12031  01017C  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12032  01017E  22DA               	addwfc	fsr2h,f,c
 12033  010180  0E6C               	movlw	108
 12034  010182  6EDE               	movwf	postinc2,c
 12035  010184  0E0F               	movlw	15
 12036  010186  6EDD               	movwf	postdec2,c
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 12040  010188  0100               	movlb	0	; () banked
 12041  01018A  EE20 F009          	lfsr	2,9
 12042  01018E  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12043  010190  26D9               	addwf	fsr2l,f,c
 12044  010192  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12045  010194  22DA               	addwfc	fsr2h,f,c
 12046  010196  0E6F               	movlw	111
 12047  010198                     L7:
 12048  010198  6EDE               	movwf	postinc2,c
 12049  01019A  0E0F               	movlw	15
 12050  01019C  6EDD               	movwf	postdec2,c
 12051                           
 12052                           ;SPI.c: 68: break;
 12053  01019E  D009               	goto	l9309
 12054  0101A0                     l9307:
 12055                           
 12056                           ; BSR set to: 0
 12057  0101A0  0100               	movlb	0	; () banked
 12058  0101A2  51E8               	movf	SPI_Init@pChannel& (0+255),w,b
 12059                           
 12060                           ; Switch size 1, requested type "space"
 12061                           ; Number of cases is 2, Range of values is 0 to 1
 12062                           ; switch strategies available:
 12063                           ; Name         Instructions Cycles
 12064                           ; simple_byte            7     4 (average)
 12065                           ;	Chosen strategy is simple_byte
 12066  0101A4  0A00               	xorlw	0	; case 0
 12067  0101A6  B4D8               	btfsc	status,2,c
 12068  0101A8  D74A               	goto	l9289
 12069  0101AA  0A01               	xorlw	1	; case 1
 12070  0101AC  A4D8               	btfss	status,2,c
 12071  0101AE  0012               	return	
 12072  0101B0  D79D               	goto	l9297
 12073  0101B2                     l9309:
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12077  0101B2  0100               	movlb	0	; () banked
 12078  0101B4  EE20 F006          	lfsr	2,6
 12079  0101B8  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12080  0101BA  26D9               	addwf	fsr2l,f,c
 12081  0101BC  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12082  0101BE  22DA               	addwfc	fsr2h,f,c
 12083  0101C0  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12084  0101C4  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12085  0101C8  0E05               	movlw	5
 12086  0101CA  0100               	movlb	0	; () banked
 12087  0101CC  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12088  0101CE  0E00               	movlw	0
 12089  0101D0  0100               	movlb	0	; () banked
 12090  0101D2  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12091  0101D4  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12092                           
 12093                           ;SPI.c: 77: switch(pMode)
 12094  0101D8  D09C               	goto	l9321
 12095  0101DA                     l9311:
 12096                           
 12097                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12098  0101DA  0100               	movlb	0	; () banked
 12099  0101DC  EE20 F006          	lfsr	2,6
 12100  0101E0  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12101  0101E2  26D9               	addwf	fsr2l,f,c
 12102  0101E4  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12103  0101E6  22DA               	addwfc	fsr2h,f,c
 12104  0101E8  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12105  0101EC  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12106  0101F0  0E04               	movlw	4
 12107  0101F2  0100               	movlb	0	; () banked
 12108  0101F4  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12109  0101F6  0E00               	movlw	0
 12110  0101F8  0100               	movlb	0	; () banked
 12111  0101FA  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12112  0101FC  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12113                           
 12114                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12115  010200  0100               	movlb	0	; () banked
 12116  010202  EE20 F003          	lfsr	2,3
 12117  010206  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12118  010208  26D9               	addwf	fsr2l,f,c
 12119  01020A  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12120  01020C  22DA               	addwfc	fsr2h,f,c
 12121  01020E  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12122  010212  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12123  010216  0E06               	movlw	6
 12124  010218  0100               	movlb	0	; () banked
 12125  01021A  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12126  01021C  0E00               	movlw	0
 12127  01021E  0100               	movlb	0	; () banked
 12128  010220  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12129  010222  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12130                           
 12131                           ;SPI.c: 82: break;
 12132  010226  D084               	goto	l9323
 12133  010228                     l9313:
 12134                           
 12135                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12136  010228  0100               	movlb	0	; () banked
 12137  01022A  EE20 F006          	lfsr	2,6
 12138  01022E  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12139  010230  26D9               	addwf	fsr2l,f,c
 12140  010232  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12141  010234  22DA               	addwfc	fsr2h,f,c
 12142  010236  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12143  01023A  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12144  01023E  0E04               	movlw	4
 12145  010240  0100               	movlb	0	; () banked
 12146  010242  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12147  010244  0E00               	movlw	0
 12148  010246  0100               	movlb	0	; () banked
 12149  010248  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12150  01024A  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12151                           
 12152                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12153  01024E  0100               	movlb	0	; () banked
 12154  010250  EE20 F003          	lfsr	2,3
 12155  010254  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12156  010256  26D9               	addwf	fsr2l,f,c
 12157  010258  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12158  01025A  22DA               	addwfc	fsr2h,f,c
 12159  01025C  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12160  010260  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12161  010264  0E06               	movlw	6
 12162  010266  0100               	movlb	0	; () banked
 12163  010268  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12164  01026A  0E01               	movlw	1
 12165  01026C  0100               	movlb	0	; () banked
 12166  01026E  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12167  010270  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12168                           
 12169                           ;SPI.c: 86: break;
 12170  010274  D05D               	goto	l9323
 12171  010276                     l9315:
 12172                           
 12173                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12174  010276  0100               	movlb	0	; () banked
 12175  010278  EE20 F006          	lfsr	2,6
 12176  01027C  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12177  01027E  26D9               	addwf	fsr2l,f,c
 12178  010280  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12179  010282  22DA               	addwfc	fsr2h,f,c
 12180  010284  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12181  010288  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12182  01028C  0E04               	movlw	4
 12183  01028E  0100               	movlb	0	; () banked
 12184  010290  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12185  010292  0E01               	movlw	1
 12186  010294  0100               	movlb	0	; () banked
 12187  010296  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12188  010298  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12189                           
 12190                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12191  01029C  0100               	movlb	0	; () banked
 12192  01029E  EE20 F003          	lfsr	2,3
 12193  0102A2  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12194  0102A4  26D9               	addwf	fsr2l,f,c
 12195  0102A6  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12196  0102A8  22DA               	addwfc	fsr2h,f,c
 12197  0102AA  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12198  0102AE  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12199  0102B2  0E06               	movlw	6
 12200  0102B4  0100               	movlb	0	; () banked
 12201  0102B6  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12202  0102B8  0E00               	movlw	0
 12203  0102BA  0100               	movlb	0	; () banked
 12204  0102BC  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12205  0102BE  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12206                           
 12207                           ;SPI.c: 90: break;
 12208  0102C2  D036               	goto	l9323
 12209  0102C4                     l9317:
 12210                           
 12211                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12212  0102C4  0100               	movlb	0	; () banked
 12213  0102C6  EE20 F006          	lfsr	2,6
 12214  0102CA  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12215  0102CC  26D9               	addwf	fsr2l,f,c
 12216  0102CE  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12217  0102D0  22DA               	addwfc	fsr2h,f,c
 12218  0102D2  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12219  0102D6  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12220  0102DA  0E04               	movlw	4
 12221  0102DC  0100               	movlb	0	; () banked
 12222  0102DE  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12223  0102E0  0E01               	movlw	1
 12224  0102E2  0100               	movlb	0	; () banked
 12225  0102E4  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12226  0102E6  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12227                           
 12228                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12229  0102EA  0100               	movlb	0	; () banked
 12230  0102EC  EE20 F003          	lfsr	2,3
 12231  0102F0  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12232  0102F2  26D9               	addwf	fsr2l,f,c
 12233  0102F4  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12234  0102F6  22DA               	addwfc	fsr2h,f,c
 12235  0102F8  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12236  0102FC  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12237  010300  0E06               	movlw	6
 12238  010302  0100               	movlb	0	; () banked
 12239  010304  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12240  010306  0E01               	movlw	1
 12241  010308  0100               	movlb	0	; () banked
 12242  01030A  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12243  01030C  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12244                           
 12245                           ;SPI.c: 94: break;
 12246  010310  D00F               	goto	l9323
 12247  010312                     l9321:
 12248  010312  0100               	movlb	0	; () banked
 12249  010314  51E9               	movf	SPI_Init@pMode& (0+255),w,b
 12250                           
 12251                           ; Switch size 1, requested type "space"
 12252                           ; Number of cases is 4, Range of values is 0 to 3
 12253                           ; switch strategies available:
 12254                           ; Name         Instructions Cycles
 12255                           ; simple_byte           13     7 (average)
 12256                           ;	Chosen strategy is simple_byte
 12257  010316  0A00               	xorlw	0	; case 0
 12258  010318  B4D8               	btfsc	status,2,c
 12259  01031A  D75F               	goto	l9311
 12260  01031C  0A01               	xorlw	1	; case 1
 12261  01031E  B4D8               	btfsc	status,2,c
 12262  010320  D783               	goto	l9313
 12263  010322  0A03               	xorlw	3	; case 2
 12264  010324  B4D8               	btfsc	status,2,c
 12265  010326  D7A7               	goto	l9315
 12266  010328  0A01               	xorlw	1	; case 3
 12267  01032A  A4D8               	btfss	status,2,c
 12268  01032C  0012               	return	
 12269  01032E  D7CA               	goto	l9317
 12270  010330                     l9323:
 12271                           
 12272                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 12273  010330  0100               	movlb	0	; () banked
 12274  010332  EE20 F006          	lfsr	2,6
 12275  010336  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12276  010338  26D9               	addwf	fsr2l,f,c
 12277  01033A  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12278  01033C  22DA               	addwfc	fsr2h,f,c
 12279  01033E  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12280  010342  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12281  010346  0E07               	movlw	7
 12282  010348  0100               	movlb	0	; () banked
 12283  01034A  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12284  01034C  0E00               	movlw	0
 12285  01034E  0100               	movlb	0	; () banked
 12286  010350  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12287  010352  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12288                           
 12289                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 12290  010356  0100               	movlb	0	; () banked
 12291  010358  EE20 F006          	lfsr	2,6
 12292  01035C  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12293  01035E  26D9               	addwf	fsr2l,f,c
 12294  010360  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12295  010362  22DA               	addwfc	fsr2h,f,c
 12296  010364  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12297  010368  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12298  01036C  0E06               	movlw	6
 12299  01036E  0100               	movlb	0	; () banked
 12300  010370  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12301  010372  0E00               	movlw	0
 12302  010374  0100               	movlb	0	; () banked
 12303  010376  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12304  010378  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12305                           
 12306                           ;SPI.c: 106: Timer2_Init(pClock);
 12307  01037C  C0E4  F0C4         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 12308  010380  C0E5  F0C5         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 12309  010384  C0E6  F0C6         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 12310  010388  C0E7  F0C7         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 12311  01038C  EC0C  F08E         	call	_Timer2_Init	;wreg free
 12312                           
 12313                           ;SPI.c: 112: SPI_DisableISR(pInput);
 12314  010390  C0EA  F0B7         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 12315  010394  C0EB  F0B8         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 12316  010398  EC15  F09E         	call	_SPI_DisableISR	;wreg free
 12317                           
 12318                           ;SPI.c: 116: switch (pChannel)
 12319  01039C  D004               	goto	l9331
 12320  01039E                     l615:
 12321                           
 12322                           ; BSR set to: 0
 12323  01039E  869F               	bsf	3999,3,c	;volatile
 12324  0103A0  D00B               	goto	l9333
 12325  0103A2                     l617:
 12326                           
 12327                           ; BSR set to: 0
 12328  0103A2  8EA5               	bsf	4005,7,c	;volatile
 12329  0103A4  D009               	goto	l9333
 12330  0103A6                     l9331:
 12331  0103A6  0100               	movlb	0	; () banked
 12332  0103A8  51E8               	movf	SPI_Init@pChannel& (0+255),w,b
 12333                           
 12334                           ; Switch size 1, requested type "space"
 12335                           ; Number of cases is 2, Range of values is 0 to 1
 12336                           ; switch strategies available:
 12337                           ; Name         Instructions Cycles
 12338                           ; simple_byte            7     4 (average)
 12339                           ;	Chosen strategy is simple_byte
 12340  0103AA  0A00               	xorlw	0	; case 0
 12341  0103AC  B4D8               	btfsc	status,2,c
 12342  0103AE  D7F7               	goto	l615
 12343  0103B0  0A01               	xorlw	1	; case 1
 12344  0103B2  A4D8               	btfss	status,2,c
 12345  0103B4  0012               	return	
 12346  0103B6  D7F5               	goto	l617
 12347  0103B8                     l9333:
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;SPI.c: 124: SPI_DCS(pInput);
 12351  0103B8  C0EA  F0B7         	movff	SPI_Init@pInput,SPI_DCS@pInput
 12352  0103BC  C0EB  F0B8         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 12353  0103C0  ECB9  F09D         	call	_SPI_DCS	;wreg free
 12354                           
 12355                           ;SPI.c: 126: pInput->mBusy = 0;
 12356  0103C4  C0EA  FFD9         	movff	SPI_Init@pInput,fsr2l
 12357  0103C8  C0EB  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 12358  0103CC  0E00               	movlw	0
 12359  0103CE  6EDF               	movwf	indf2,c
 12360                           
 12361                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 12362  0103D0  0100               	movlb	0	; () banked
 12363  0103D2  EE20 F006          	lfsr	2,6
 12364  0103D6  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12365  0103D8  26D9               	addwf	fsr2l,f,c
 12366  0103DA  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12367  0103DC  22DA               	addwfc	fsr2h,f,c
 12368  0103DE  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 12369  0103E2  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 12370  0103E6  0E00               	movlw	0
 12371  0103E8  0100               	movlb	0	; () banked
 12372  0103EA  6FC4               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12373  0103EC  0E03               	movlw	3
 12374  0103EE  0100               	movlb	0	; () banked
 12375  0103F0  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 12376  0103F2  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 12377                           
 12378                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12379  0103F6  0100               	movlb	0	; () banked
 12380  0103F8  EE20 F006          	lfsr	2,6
 12381  0103FC  51EA               	movf	SPI_Init@pInput& (0+255),w,b
 12382  0103FE  26D9               	addwf	fsr2l,f,c
 12383  010400  51EB               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12384  010402  22DA               	addwfc	fsr2h,f,c
 12385  010404  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 12386  010408  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 12387  01040C  0E05               	movlw	5
 12388  01040E  0100               	movlb	0	; () banked
 12389  010410  6FB9               	movwf	Byte_SetBit@pBit& (0+255),b
 12390  010412  0E01               	movlw	1
 12391  010414  0100               	movlb	0	; () banked
 12392  010416  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 12393  010418  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 12394  01041C  0012               	return		;funcret
 12395  01041E                     __end_of_SPI_Init:
 12396                           	opt stack 0
 12397                           tosu	equ	0xFFF
 12398                           tosh	equ	0xFFE
 12399                           tosl	equ	0xFFD
 12400                           pclath	equ	0xFFA
 12401                           tblptru	equ	0xFF8
 12402                           tblptrh	equ	0xFF7
 12403                           tblptrl	equ	0xFF6
 12404                           tablat	equ	0xFF5
 12405                           prodh	equ	0xFF4
 12406                           prodl	equ	0xFF3
 12407                           intcon	equ	0xFF2
 12408                           postinc0	equ	0xFEE
 12409                           wreg	equ	0xFE8
 12410                           indf1	equ	0xFE7
 12411                           postdec1	equ	0xFE5
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           plusw2	equ	0xFDB
 12418                           fsr2h	equ	0xFDA
 12419                           fsr2l	equ	0xFD9
 12420                           status	equ	0xFD8
 12421                           
 12422 ;; *************** function _Timer2_Init *****************
 12423 ;; Defined at:
 12424 ;;		line 10 in file "Library/Timer2.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 12429 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 12430 ;;  RDIV            4   18[BANK0 ] unsigned long 
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      void 
 12433 ;; Registers used:
 12434 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12443 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;Total ram usage:       17 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    8
 12447 ;; This function calls:
 12448 ;;		_Timer2_Clear
 12449 ;;		___lldiv
 12450 ;; This function is called by:
 12451 ;;		_SPI_Init
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           	psect	text57
 12456  011C18                     __ptext57:
 12457                           	opt stack 0
 12458  011C18                     _Timer2_Init:
 12459                           	opt stack 19
 12460                           
 12461                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 12462                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 12463                           ;Timer2.c: 14: static UINT8 PRE = 0;
 12464                           ;Timer2.c: 15: static UINT32 DIV = 0;
 12465                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 12466                           
 12467                           ;incstack = 0
 12468  011C18  0E00               	movlw	0
 12469  011C1A  0100               	movlb	0	; () banked
 12470  011C1C  6FCD               	movwf	Timer2_Init@pCPUClock& (0+255),b
 12471  011C1E  0E6C               	movlw	108
 12472  011C20  6FCE               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 12473  011C22  0EDC               	movlw	220
 12474  011C24  6FCF               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 12475  011C26  0E02               	movlw	2
 12476  011C28  6FD0               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 12480                           ;Timer2.c: 20: pFrequency *= 2;
 12481  011C2A  0100               	movlb	0	; () banked
 12482  011C2C  90D8               	bcf	status,0,c
 12483  011C2E  37C4               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 12484  011C30  37C5               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 12485  011C32  37C6               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 12486  011C34  37C7               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;Timer2.c: 23: pCPUClock /= 4;
 12490  011C36  0E02               	movlw	2
 12491  011C38  0100               	movlb	0	; () banked
 12492  011C3A  6FC8               	movwf	??_Timer2_Init& (0+255),b
 12493  011C3C                     u5975:
 12494  011C3C  90D8               	bcf	status,0,c
 12495  011C3E  0100               	movlb	0	; () banked
 12496  011C40  33D0               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 12497  011C42  33CF               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 12498  011C44  33CE               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 12499  011C46  33CD               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 12500  011C48  0100               	movlb	0	; () banked
 12501  011C4A  2FC8               	decfsz	??_Timer2_Init& (0+255),f,b
 12502  011C4C  D7F7               	goto	u5975
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 12506  011C4E  C0CD  F0B7         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 12507  011C52  C0CE  F0B8         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 12508  011C56  C0CF  F0B9         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 12509  011C5A  C0D0  F0BA         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 12510  011C5E  C0C4  F0BB         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 12511  011C62  C0C5  F0BC         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 12512  011C66  C0C6  F0BD         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 12513  011C6A  C0C7  F0BE         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 12514  011C6E  ECA1  F092         	call	___lldiv	;wreg free
 12515  011C72  C0B7  F0D1         	movff	?___lldiv,Timer2_Init@DIVIDE
 12516  011C76  C0B8  F0D2         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 12517  011C7A  C0B9  F0D3         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 12518  011C7E  C0BA  F0D4         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 12519                           
 12520                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 12521  011C82  D00E               	goto	l9189
 12522  011C84                     l9181:
 12523                           
 12524                           ;Timer2.c: 28: {
 12525                           ;Timer2.c: 29: RDIV = 0;
 12526  011C84  0E00               	movlw	0
 12527  011C86  0100               	movlb	0	; () banked
 12528  011C88  6FC9               	movwf	Timer2_Init@RDIV& (0+255),b
 12529  011C8A  0E00               	movlw	0
 12530  011C8C  6FCA               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 12531  011C8E  0E00               	movlw	0
 12532  011C90  6FCB               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 12533  011C92  0E00               	movlw	0
 12534  011C94  6FCC               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 12535                           
 12536                           ; BSR set to: 0
 12537                           ;Timer2.c: 30: INDEX ++;
 12538  011C96  2A32               	incf	Timer2_Init@INDEX,f,c
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;Timer2.c: 31: if (INDEX >= 3)
 12542  011C98  0E02               	movlw	2
 12543  011C9A  6432               	cpfsgt	Timer2_Init@INDEX,c
 12544  011C9C  D001               	goto	l9189
 12545  011C9E  D025               	goto	l9191
 12546  011CA0                     l9189:
 12547  011CA0  C0D1  F0B7         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 12548  011CA4  C0D2  F0B8         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 12549  011CA8  C0D3  F0B9         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 12550  011CAC  C0D4  F0BA         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 12551  011CB0  5032               	movf	Timer2_Init@INDEX,w,c
 12552  011CB2  0D01               	mullw	1
 12553  011CB4  0EEC               	movlw	low Timer2_Init@PRESCALE
 12554  011CB6  24F3               	addwf	prodl,w,c
 12555  011CB8  6EF6               	movwf	tblptrl,c
 12556  011CBA  0EFD               	movlw	high Timer2_Init@PRESCALE
 12557  011CBC  20F4               	addwfc	prodh,w,c
 12558  011CBE  6EF7               	movwf	tblptrh,c
 12559  011CC0                     	if	1	;There are 3 active tblptr bytes
 12560  011CC0  6AF8               	clrf	tblptru,c
 12561  011CC2  0E00               	movlw	low (__mediumconst shr (0+16))
 12562  011CC4  22F8               	addwfc	tblptru,f,c
 12563  011CC6                     	endif
 12564  011CC6  0008               	tblrd		*
 12565  011CC8  50F5               	movf	tablat,w,c
 12566  011CCA  0100               	movlb	0	; () banked
 12567  011CCC  6FBB               	movwf	___lldiv@divisor& (0+255),b
 12568  011CCE  6BBC               	clrf	(___lldiv@divisor+1)& (0+255),b
 12569  011CD0  6BBD               	clrf	(___lldiv@divisor+2)& (0+255),b
 12570  011CD2  6BBE               	clrf	(___lldiv@divisor+3)& (0+255),b
 12571  011CD4  ECA1  F092         	call	___lldiv	;wreg free
 12572  011CD8  0100               	movlb	0	; () banked
 12573  011CDA  51BA               	movf	(?___lldiv+3)& (0+255),w,b
 12574  011CDC  0100               	movlb	0	; () banked
 12575  011CDE  11B9               	iorwf	(?___lldiv+2)& (0+255),w,b
 12576  011CE0  E1D1               	bnz	l9181
 12577  011CE2  0100               	movlb	0	; () banked
 12578  011CE4  05B8               	decf	(?___lldiv+1)& (0+255),w,b
 12579  011CE6  B0D8               	btfsc	status,0,c
 12580  011CE8  D7CD               	goto	l9181
 12581  011CEA                     l9191:
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;Timer2.c: 33: }
 12585                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 12586  011CEA  50CA               	movf	4042,w,c	;volatile
 12587  011CEC  1832               	xorwf	Timer2_Init@INDEX,w,c
 12588  011CEE  0BFC               	andlw	-4
 12589  011CF0  1832               	xorwf	Timer2_Init@INDEX,w,c
 12590  011CF2  6ECA               	movwf	4042,c	;volatile
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 12594  011CF4  84CA               	bsf	4042,2,c	;volatile
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;Timer2.c: 44: Timer2_Clear();
 12598  011CF6  EC1E  F09F         	call	_Timer2_Clear	;wreg free
 12599                           
 12600                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 12601  011CFA  5032               	movf	Timer2_Init@INDEX,w,c
 12602  011CFC  0D01               	mullw	1
 12603  011CFE  0EEC               	movlw	low Timer2_Init@PRESCALE
 12604  011D00  24F3               	addwf	prodl,w,c
 12605  011D02  6EF6               	movwf	tblptrl,c
 12606  011D04  0EFD               	movlw	high Timer2_Init@PRESCALE
 12607  011D06  20F4               	addwfc	prodh,w,c
 12608  011D08  6EF7               	movwf	tblptrh,c
 12609  011D0A                     	if	1	;There are 3 active tblptr bytes
 12610  011D0A  6AF8               	clrf	tblptru,c
 12611  011D0C  0E00               	movlw	low (__mediumconst shr (0+16))
 12612  011D0E  22F8               	addwfc	tblptru,f,c
 12613  011D10                     	endif
 12614  011D10  0008               	tblrd		*
 12615  011D12  CFF5 F033          	movff	tablat,Timer2_Init@PRE
 12616                           
 12617                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 12618  011D16  0EFF               	movlw	255
 12619  011D18  0100               	movlb	0	; () banked
 12620  011D1A  25D1               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 12621  011D1C  0100               	movlb	0	; () banked
 12622  011D1E  6F64               	movwf	Timer2_Init@DIV& (0+255),b
 12623  011D20  0EFF               	movlw	255
 12624  011D22  0100               	movlb	0	; () banked
 12625  011D24  21D2               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 12626  011D26  0100               	movlb	0	; () banked
 12627  011D28  6F65               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 12628  011D2A  0EFF               	movlw	255
 12629  011D2C  0100               	movlb	0	; () banked
 12630  011D2E  21D3               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 12631  011D30  0100               	movlb	0	; () banked
 12632  011D32  6F66               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 12633  011D34  0EFF               	movlw	255
 12634  011D36  0100               	movlb	0	; () banked
 12635  011D38  21D4               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 12636  011D3A  0100               	movlb	0	; () banked
 12637  011D3C  6F67               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;Timer2.c: 48: INDEX = DIV/PRE;
 12641  011D3E  C064  F0B7         	movff	Timer2_Init@DIV,___lldiv@dividend
 12642  011D42  C065  F0B8         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 12643  011D46  C066  F0B9         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 12644  011D4A  C067  F0BA         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 12645  011D4E  5033               	movf	Timer2_Init@PRE,w,c
 12646  011D50  0100               	movlb	0	; () banked
 12647  011D52  6FBB               	movwf	___lldiv@divisor& (0+255),b
 12648  011D54  6BBC               	clrf	(___lldiv@divisor+1)& (0+255),b
 12649  011D56  6BBD               	clrf	(___lldiv@divisor+2)& (0+255),b
 12650  011D58  6BBE               	clrf	(___lldiv@divisor+3)& (0+255),b
 12651  011D5A  ECA1  F092         	call	___lldiv	;wreg free
 12652  011D5E  0100               	movlb	0	; () banked
 12653  011D60  51B7               	movf	?___lldiv& (0+255),w,b
 12654  011D62  6E32               	movwf	Timer2_Init@INDEX,c
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;Timer2.c: 49: PR2 = INDEX;
 12658  011D64  C032  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 12659                           
 12660                           ; BSR set to: 0
 12661  011D68  0012               	return		;funcret
 12662  011D6A                     __end_of_Timer2_Init:
 12663                           	opt stack 0
 12664                           tosu	equ	0xFFF
 12665                           tosh	equ	0xFFE
 12666                           tosl	equ	0xFFD
 12667                           pclath	equ	0xFFA
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           intcon	equ	0xFF2
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           indf1	equ	0xFE7
 12678                           postdec1	equ	0xFE5
 12679                           fsr1h	equ	0xFE2
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           postdec2	equ	0xFDD
 12684                           plusw2	equ	0xFDB
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function ___lldiv *****************
 12690 ;; Defined at:
 12691 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  dividend        4    0[BANK0 ] unsigned long 
 12694 ;;  divisor         4    4[BANK0 ] unsigned long 
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;  quotient        4    8[BANK0 ] unsigned long 
 12697 ;;  counter         1   12[BANK0 ] unsigned char 
 12698 ;; Return value:  Size  Location     Type
 12699 ;;                  4    0[BANK0 ] unsigned long 
 12700 ;; Registers used:
 12701 ;;		wreg, status,2, status,0
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12707 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;Total ram usage:       13 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    7
 12714 ;; This function calls:
 12715 ;;		Nothing
 12716 ;; This function is called by:
 12717 ;;		_Timer2_Init
 12718 ;;		_I2C_Init
 12719 ;;		_Timer0_Init
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text58
 12724  012542                     __ptext58:
 12725                           	opt stack 0
 12726  012542                     ___lldiv:
 12727                           	opt stack 19
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;incstack = 0
 12731  012542  0E00               	movlw	0
 12732  012544  0100               	movlb	0	; () banked
 12733  012546  6FBF               	movwf	___lldiv@quotient& (0+255),b
 12734  012548  0E00               	movlw	0
 12735  01254A  6FC0               	movwf	(___lldiv@quotient+1)& (0+255),b
 12736  01254C  0E00               	movlw	0
 12737  01254E  6FC1               	movwf	(___lldiv@quotient+2)& (0+255),b
 12738  012550  0E00               	movlw	0
 12739  012552  6FC2               	movwf	(___lldiv@quotient+3)& (0+255),b
 12740                           
 12741                           ; BSR set to: 0
 12742  012554  0100               	movlb	0	; () banked
 12743  012556  51BB               	movf	___lldiv@divisor& (0+255),w,b
 12744  012558  0100               	movlb	0	; () banked
 12745  01255A  11BC               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12746  01255C  0100               	movlb	0	; () banked
 12747  01255E  11BD               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12748  012560  0100               	movlb	0	; () banked
 12749  012562  11BE               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12750  012564  B4D8               	btfsc	status,2,c
 12751  012566  D042               	goto	l2209
 12752                           
 12753                           ; BSR set to: 0
 12754  012568  0E01               	movlw	1
 12755  01256A  0100               	movlb	0	; () banked
 12756  01256C  6FC3               	movwf	___lldiv@counter& (0+255),b
 12757  01256E  D008               	goto	l9061
 12758  012570                     l9059:
 12759                           
 12760                           ; BSR set to: 0
 12761  012570  0100               	movlb	0	; () banked
 12762  012572  90D8               	bcf	status,0,c
 12763  012574  37BB               	rlcf	___lldiv@divisor& (0+255),f,b
 12764  012576  37BC               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12765  012578  37BD               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12766  01257A  37BE               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12767  01257C  0100               	movlb	0	; () banked
 12768  01257E  2BC3               	incf	___lldiv@counter& (0+255),f,b
 12769  012580                     l9061:
 12770                           
 12771                           ; BSR set to: 0
 12772  012580  0100               	movlb	0	; () banked
 12773  012582  AFBE               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12774  012584  D7F5               	goto	l9059
 12775  012586                     l9063:
 12776                           
 12777                           ; BSR set to: 0
 12778  012586  0100               	movlb	0	; () banked
 12779  012588  90D8               	bcf	status,0,c
 12780  01258A  37BF               	rlcf	___lldiv@quotient& (0+255),f,b
 12781  01258C  37C0               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12782  01258E  37C1               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12783  012590  37C2               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12784                           
 12785                           ; BSR set to: 0
 12786  012592  0100               	movlb	0	; () banked
 12787  012594  51BB               	movf	___lldiv@divisor& (0+255),w,b
 12788  012596  0100               	movlb	0	; () banked
 12789  012598  5DB7               	subwf	___lldiv@dividend& (0+255),w,b
 12790  01259A  0100               	movlb	0	; () banked
 12791  01259C  51BC               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12792  01259E  0100               	movlb	0	; () banked
 12793  0125A0  59B8               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12794  0125A2  0100               	movlb	0	; () banked
 12795  0125A4  51BD               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12796  0125A6  0100               	movlb	0	; () banked
 12797  0125A8  59B9               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12798  0125AA  0100               	movlb	0	; () banked
 12799  0125AC  51BE               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12800  0125AE  0100               	movlb	0	; () banked
 12801  0125B0  59BA               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12802  0125B2  A0D8               	btfss	status,0,c
 12803  0125B4  D012               	goto	l9071
 12804                           
 12805                           ; BSR set to: 0
 12806  0125B6  0100               	movlb	0	; () banked
 12807  0125B8  51BB               	movf	___lldiv@divisor& (0+255),w,b
 12808  0125BA  0100               	movlb	0	; () banked
 12809  0125BC  5FB7               	subwf	___lldiv@dividend& (0+255),f,b
 12810  0125BE  0100               	movlb	0	; () banked
 12811  0125C0  51BC               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12812  0125C2  0100               	movlb	0	; () banked
 12813  0125C4  5BB8               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12814  0125C6  0100               	movlb	0	; () banked
 12815  0125C8  51BD               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12816  0125CA  0100               	movlb	0	; () banked
 12817  0125CC  5BB9               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12818  0125CE  0100               	movlb	0	; () banked
 12819  0125D0  51BE               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12820  0125D2  0100               	movlb	0	; () banked
 12821  0125D4  5BBA               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12822                           
 12823                           ; BSR set to: 0
 12824  0125D6  0100               	movlb	0	; () banked
 12825  0125D8  81BF               	bsf	___lldiv@quotient& (0+255),0,b
 12826  0125DA                     l9071:
 12827                           
 12828                           ; BSR set to: 0
 12829  0125DA  0100               	movlb	0	; () banked
 12830  0125DC  90D8               	bcf	status,0,c
 12831  0125DE  33BE               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12832  0125E0  33BD               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12833  0125E2  33BC               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12834  0125E4  33BB               	rrcf	___lldiv@divisor& (0+255),f,b
 12835                           
 12836                           ; BSR set to: 0
 12837  0125E6  0100               	movlb	0	; () banked
 12838  0125E8  2FC3               	decfsz	___lldiv@counter& (0+255),f,b
 12839  0125EA  D7CD               	goto	l9063
 12840  0125EC                     l2209:
 12841                           
 12842                           ; BSR set to: 0
 12843  0125EC  C0BF  F0B7         	movff	___lldiv@quotient,?___lldiv
 12844  0125F0  C0C0  F0B8         	movff	___lldiv@quotient+1,?___lldiv+1
 12845  0125F4  C0C1  F0B9         	movff	___lldiv@quotient+2,?___lldiv+2
 12846  0125F8  C0C2  F0BA         	movff	___lldiv@quotient+3,?___lldiv+3
 12847                           
 12848                           ; BSR set to: 0
 12849  0125FC  0012               	return		;funcret
 12850  0125FE                     __end_of___lldiv:
 12851                           	opt stack 0
 12852                           tosu	equ	0xFFF
 12853                           tosh	equ	0xFFE
 12854                           tosl	equ	0xFFD
 12855                           pclath	equ	0xFFA
 12856                           tblptru	equ	0xFF8
 12857                           tblptrh	equ	0xFF7
 12858                           tblptrl	equ	0xFF6
 12859                           tablat	equ	0xFF5
 12860                           prodh	equ	0xFF4
 12861                           prodl	equ	0xFF3
 12862                           intcon	equ	0xFF2
 12863                           postinc0	equ	0xFEE
 12864                           wreg	equ	0xFE8
 12865                           indf1	equ	0xFE7
 12866                           postdec1	equ	0xFE5
 12867                           fsr1h	equ	0xFE2
 12868                           fsr1l	equ	0xFE1
 12869                           indf2	equ	0xFDF
 12870                           postinc2	equ	0xFDE
 12871                           postdec2	equ	0xFDD
 12872                           plusw2	equ	0xFDB
 12873                           fsr2h	equ	0xFDA
 12874                           fsr2l	equ	0xFD9
 12875                           status	equ	0xFD8
 12876                           
 12877 ;; *************** function _Timer2_Clear *****************
 12878 ;; Defined at:
 12879 ;;		line 3 in file "Library/Timer2.c"
 12880 ;; Parameters:    Size  Location     Type
 12881 ;;		None
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;		None
 12884 ;; Return value:  Size  Location     Type
 12885 ;;                  1    wreg      void 
 12886 ;; Registers used:
 12887 ;;		None
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12897 ;;Total ram usage:        0 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:    7
 12900 ;; This function calls:
 12901 ;;		Nothing
 12902 ;; This function is called by:
 12903 ;;		_Timer2_Init
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           	psect	text59
 12908  013E3C                     __ptext59:
 12909                           	opt stack 0
 12910  013E3C                     _Timer2_Clear:
 12911                           	opt stack 19
 12912                           
 12913                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;incstack = 0
 12917  013E3C  929E               	bcf	3998,1,c	;volatile
 12918                           
 12919                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 12920  013E3E  929D               	bcf	3997,1,c	;volatile
 12921                           
 12922                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 12923  013E40  929F               	bcf	3999,1,c	;volatile
 12924  013E42  0012               	return		;funcret
 12925  013E44                     __end_of_Timer2_Clear:
 12926                           	opt stack 0
 12927                           tosu	equ	0xFFF
 12928                           tosh	equ	0xFFE
 12929                           tosl	equ	0xFFD
 12930                           pclath	equ	0xFFA
 12931                           tblptru	equ	0xFF8
 12932                           tblptrh	equ	0xFF7
 12933                           tblptrl	equ	0xFF6
 12934                           tablat	equ	0xFF5
 12935                           prodh	equ	0xFF4
 12936                           prodl	equ	0xFF3
 12937                           intcon	equ	0xFF2
 12938                           postinc0	equ	0xFEE
 12939                           wreg	equ	0xFE8
 12940                           indf1	equ	0xFE7
 12941                           postdec1	equ	0xFE5
 12942                           fsr1h	equ	0xFE2
 12943                           fsr1l	equ	0xFE1
 12944                           indf2	equ	0xFDF
 12945                           postinc2	equ	0xFDE
 12946                           postdec2	equ	0xFDD
 12947                           plusw2	equ	0xFDB
 12948                           fsr2h	equ	0xFDA
 12949                           fsr2l	equ	0xFD9
 12950                           status	equ	0xFD8
 12951                           
 12952 ;; *************** function _SPI_DisableISR *****************
 12953 ;; Defined at:
 12954 ;;		line 181 in file "Library/SPI.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 12957 ;;		 -> SPI1(11), SPI2(11), 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;		None
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      void 
 12962 ;; Registers used:
 12963 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12969 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;Total ram usage:        2 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    7
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_SPI_Init
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           	psect	text60
 12984  013C2A                     __ptext60:
 12985                           	opt stack 0
 12986  013C2A                     _SPI_DisableISR:
 12987                           	opt stack 20
 12988                           
 12989                           ;SPI.c: 183: switch (pInput->mChannel)
 12990                           
 12991                           ;incstack = 0
 12992  013C2A  D004               	goto	l9209
 12993  013C2C                     l655:
 12994                           
 12995                           ; BSR set to: 0
 12996  013C2C  969D               	bcf	3997,3,c	;volatile
 12997  013C2E  0012               	return	
 12998  013C30                     l657:
 12999                           
 13000                           ; BSR set to: 0
 13001  013C30  9EA3               	bcf	4003,7,c	;volatile
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;SPI.c: 188: };
 13005                           
 13006                           ; BSR set to: 0
 13007                           
 13008                           ;SPI.c: 187: default: return;
 13009  013C32  0012               	return	
 13010  013C34                     l9209:
 13011  013C34  0100               	movlb	0	; () banked
 13012  013C36  EE20 F002          	lfsr	2,2
 13013  013C3A  51B7               	movf	SPI_DisableISR@pInput& (0+255),w,b
 13014  013C3C  26D9               	addwf	fsr2l,f,c
 13015  013C3E  51B8               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 13016  013C40  22DA               	addwfc	fsr2h,f,c
 13017  013C42  50DF               	movf	indf2,w,c
 13018                           
 13019                           ; Switch size 1, requested type "space"
 13020                           ; Number of cases is 2, Range of values is 0 to 1
 13021                           ; switch strategies available:
 13022                           ; Name         Instructions Cycles
 13023                           ; simple_byte            7     4 (average)
 13024                           ;	Chosen strategy is simple_byte
 13025  013C44  0A00               	xorlw	0	; case 0
 13026  013C46  B4D8               	btfsc	status,2,c
 13027  013C48  D7F1               	goto	l655
 13028  013C4A  0A01               	xorlw	1	; case 1
 13029  013C4C  A4D8               	btfss	status,2,c
 13030  013C4E  0012               	return	
 13031  013C50  D7EF               	goto	l657
 13032  013C52                     __end_of_SPI_DisableISR:
 13033                           	opt stack 0
 13034                           tosu	equ	0xFFF
 13035                           tosh	equ	0xFFE
 13036                           tosl	equ	0xFFD
 13037                           pclath	equ	0xFFA
 13038                           tblptru	equ	0xFF8
 13039                           tblptrh	equ	0xFF7
 13040                           tblptrl	equ	0xFF6
 13041                           tablat	equ	0xFF5
 13042                           prodh	equ	0xFF4
 13043                           prodl	equ	0xFF3
 13044                           intcon	equ	0xFF2
 13045                           postinc0	equ	0xFEE
 13046                           wreg	equ	0xFE8
 13047                           indf1	equ	0xFE7
 13048                           postdec1	equ	0xFE5
 13049                           fsr1h	equ	0xFE2
 13050                           fsr1l	equ	0xFE1
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           plusw2	equ	0xFDB
 13055                           fsr2h	equ	0xFDA
 13056                           fsr2l	equ	0xFD9
 13057                           status	equ	0xFD8
 13058                           
 13059 ;; *************** function _SPI_DCS *****************
 13060 ;; Defined at:
 13061 ;;		line 219 in file "Library/SPI.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 13064 ;;		 -> SPI1(11), SPI2(11), 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;		None
 13067 ;; Return value:  Size  Location     Type
 13068 ;;                  1    wreg      void 
 13069 ;; Registers used:
 13070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13071 ;; Tracked objects:
 13072 ;;		On entry : 0/0
 13073 ;;		On exit  : 0/0
 13074 ;;		Unchanged: 0/0
 13075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;Total ram usage:        2 bytes
 13081 ;; Hardware stack levels used:    1
 13082 ;; Hardware stack levels required when called:    7
 13083 ;; This function calls:
 13084 ;;		Nothing
 13085 ;; This function is called by:
 13086 ;;		_SPI_Init
 13087 ;; This function uses a non-reentrant model
 13088 ;;
 13089                           
 13090                           	psect	text61
 13091  013B72                     __ptext61:
 13092                           	opt stack 0
 13093  013B72                     _SPI_DCS:
 13094                           	opt stack 20
 13095                           
 13096                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;incstack = 0
 13100  013B72  0100               	movlb	0	; () banked
 13101  013B74  EE20 F002          	lfsr	2,2
 13102  013B78  51B7               	movf	SPI_DCS@pInput& (0+255),w,b
 13103  013B7A  26D9               	addwf	fsr2l,f,c
 13104  013B7C  51B8               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 13105  013B7E  22DA               	addwfc	fsr2h,f,c
 13106  013B80  50DF               	movf	indf2,w,c
 13107  013B82  A4D8               	btfss	status,2,c
 13108  013B84  D007               	goto	l9215
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 13112  013B86  C084  FFD9         	movff	_PortC+4,fsr2l
 13113  013B8A  C085  FFDA         	movff	_PortC+5,fsr2h
 13114  013B8E  0100               	movlb	0	; () banked
 13115  013B90  84DF               	bsf	indf2,2,c
 13116  013B92  0012               	return	
 13117  013B94                     l9215:
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;SPI.c: 223: else
 13121                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 13122  013B94  C08E  FFD9         	movff	_PortD+4,fsr2l
 13123  013B98  C08F  FFDA         	movff	_PortD+5,fsr2h
 13124  013B9C  0100               	movlb	0	; () banked
 13125  013B9E  8EDF               	bsf	indf2,7,c
 13126  013BA0  0012               	return	
 13127  013BA2                     __end_of_SPI_DCS:
 13128                           	opt stack 0
 13129                           tosu	equ	0xFFF
 13130                           tosh	equ	0xFFE
 13131                           tosl	equ	0xFFD
 13132                           pclath	equ	0xFFA
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           postinc0	equ	0xFEE
 13141                           wreg	equ	0xFE8
 13142                           indf1	equ	0xFE7
 13143                           postdec1	equ	0xFE5
 13144                           fsr1h	equ	0xFE2
 13145                           fsr1l	equ	0xFE1
 13146                           indf2	equ	0xFDF
 13147                           postinc2	equ	0xFDE
 13148                           postdec2	equ	0xFDD
 13149                           plusw2	equ	0xFDB
 13150                           fsr2h	equ	0xFDA
 13151                           fsr2l	equ	0xFD9
 13152                           status	equ	0xFD8
 13153                           
 13154 ;; *************** function _Button_Init *****************
 13155 ;; Defined at:
 13156 ;;		line 18 in file "Library/Button.c"
 13157 ;; Parameters:    Size  Location     Type
 13158 ;;  pInput          2    1[BANK1 ] const PTR struct Button
 13159 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 13160 ;;  pThreshold      2    3[BANK1 ] unsigned short 
 13161 ;;  pInitIO         3    5[BANK1 ] PTR FTN()void 
 13162 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 13163 ;;  pGetState       3    8[BANK1 ] PTR FTN()unsigned char 
 13164 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 13165 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 13166 ;;  pFunction       3   11[BANK1 ] PTR FTN(unsigned char ,)
 13167 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;		None
 13170 ;; Return value:  Size  Location     Type
 13171 ;;                  1    wreg      void 
 13172 ;; Registers used:
 13173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13174 ;; Tracked objects:
 13175 ;;		On entry : 0/0
 13176 ;;		On exit  : 0/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13179 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;Total ram usage:       13 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:   15
 13186 ;; This function calls:
 13187 ;;		_HMI_InitButtons
 13188 ;;		_MXK_InitDIPSwitch
 13189 ;;		_MXK_InitTestButton
 13190 ;; This function is called by:
 13191 ;;		_HMI_Init
 13192 ;;		_FunctInitButton
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           	psect	text62
 13197  01215A                     __ptext62:
 13198                           	opt stack 0
 13199  01215A                     _Button_Init:
 13200                           	opt stack 14
 13201                           
 13202                           ;Button.c: 21: if(pInput==(void*)0)
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;incstack = 0
 13206  01215A  0101               	movlb	1	; () banked
 13207  01215C  51ED               	movf	Button_Init@pInput& (0+255),w,b
 13208  01215E  0101               	movlb	1	; () banked
 13209  012160  11EE               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 13210  012162  B4D8               	btfsc	status,2,c
 13211  012164  0012               	return	
 13212                           
 13213                           ; BSR set to: 1
 13214                           ;Button.c: 23: if(pInitIO==(void*)0)
 13215                           
 13216                           ; BSR set to: 1
 13217                           
 13218                           ; BSR set to: 1
 13219                           ;Button.c: 22: return;
 13220  012166  0101               	movlb	1	; () banked
 13221  012168  51F1               	movf	Button_Init@pInitIO& (0+255),w,b
 13222  01216A  0101               	movlb	1	; () banked
 13223  01216C  11F2               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 13224  01216E  0101               	movlb	1	; () banked
 13225  012170  11F3               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 13226  012172  B4D8               	btfsc	status,2,c
 13227  012174  0012               	return	
 13228                           
 13229                           ; BSR set to: 1
 13230                           ;Button.c: 25: if(pGetState==(void*)0)
 13231                           
 13232                           ; BSR set to: 1
 13233                           
 13234                           ; BSR set to: 1
 13235                           ;Button.c: 24: return;
 13236  012176  0101               	movlb	1	; () banked
 13237  012178  51F4               	movf	Button_Init@pGetState& (0+255),w,b
 13238  01217A  0101               	movlb	1	; () banked
 13239  01217C  11F5               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 13240  01217E  0101               	movlb	1	; () banked
 13241  012180  11F6               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 13242  012182  B4D8               	btfsc	status,2,c
 13243  012184  0012               	return	
 13244                           
 13245                           ; BSR set to: 1
 13246                           ;Button.c: 27: if(pFunction==(void*)0)
 13247                           
 13248                           ; BSR set to: 1
 13249                           
 13250                           ; BSR set to: 1
 13251                           ;Button.c: 26: return;
 13252  012186  0101               	movlb	1	; () banked
 13253  012188  51F7               	movf	Button_Init@pFunction& (0+255),w,b
 13254  01218A  0101               	movlb	1	; () banked
 13255  01218C  11F8               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 13256  01218E  0101               	movlb	1	; () banked
 13257  012190  11F9               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 13258  012192  B4D8               	btfsc	status,2,c
 13259  012194  0012               	return	
 13260                           
 13261                           ; BSR set to: 1
 13262                           ;Button.c: 30: if(pThreshold == 0)
 13263                           
 13264                           ; BSR set to: 1
 13265                           
 13266                           ; BSR set to: 1
 13267                           ;Button.c: 28: return;
 13268  012196  0101               	movlb	1	; () banked
 13269  012198  51EF               	movf	Button_Init@pThreshold& (0+255),w,b
 13270  01219A  0101               	movlb	1	; () banked
 13271  01219C  11F0               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 13272  01219E  A4D8               	btfss	status,2,c
 13273  0121A0  D005               	goto	l10037
 13274                           
 13275                           ; BSR set to: 1
 13276                           ;Button.c: 31: pThreshold = 1;
 13277  0121A2  0E00               	movlw	0
 13278  0121A4  0101               	movlb	1	; () banked
 13279  0121A6  6FF0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13280  0121A8  0E01               	movlw	1
 13281  0121AA  6FEF               	movwf	Button_Init@pThreshold& (0+255),b
 13282  0121AC                     l10037:
 13283                           
 13284                           ; BSR set to: 1
 13285                           ;Button.c: 34: pInput->mState = 0;
 13286  0121AC  C1ED  FFD9         	movff	Button_Init@pInput,fsr2l
 13287  0121B0  C1EE  FFDA         	movff	Button_Init@pInput+1,fsr2h
 13288  0121B4  0E00               	movlw	0
 13289  0121B6  6EDF               	movwf	indf2,c
 13290                           
 13291                           ; BSR set to: 1
 13292                           ;Button.c: 35: pInput->mCount = 0;
 13293  0121B8  0101               	movlb	1	; () banked
 13294  0121BA  EE20 F001          	lfsr	2,1
 13295  0121BE  51ED               	movf	Button_Init@pInput& (0+255),w,b
 13296  0121C0  26D9               	addwf	fsr2l,f,c
 13297  0121C2  51EE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13298  0121C4  22DA               	addwfc	fsr2h,f,c
 13299  0121C6  0E00               	movlw	0
 13300  0121C8  6EDF               	movwf	indf2,c
 13301                           
 13302                           ; BSR set to: 1
 13303                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 13304  0121CA  0101               	movlb	1	; () banked
 13305  0121CC  EE20 F002          	lfsr	2,2
 13306  0121D0  51ED               	movf	Button_Init@pInput& (0+255),w,b
 13307  0121D2  26D9               	addwf	fsr2l,f,c
 13308  0121D4  51EE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13309  0121D6  22DA               	addwfc	fsr2h,f,c
 13310  0121D8  C1EF  FFDE         	movff	Button_Init@pThreshold,postinc2
 13311  0121DC  C1F0  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 13312                           
 13313                           ; BSR set to: 1
 13314                           ;Button.c: 37: pInput->mFunction = pFunction;
 13315  0121E0  0101               	movlb	1	; () banked
 13316  0121E2  EE20 F004          	lfsr	2,4
 13317  0121E6  51ED               	movf	Button_Init@pInput& (0+255),w,b
 13318  0121E8  26D9               	addwf	fsr2l,f,c
 13319  0121EA  51EE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13320  0121EC  22DA               	addwfc	fsr2h,f,c
 13321  0121EE  C1F7  FFDE         	movff	Button_Init@pFunction,postinc2
 13322  0121F2  C1F8  FFDE         	movff	Button_Init@pFunction+1,postinc2
 13323  0121F6  C1F9  FFDE         	movff	Button_Init@pFunction+2,postinc2
 13324                           
 13325                           ; BSR set to: 1
 13326                           ;Button.c: 38: pInput->mGetState = pGetState;
 13327  0121FA  0101               	movlb	1	; () banked
 13328  0121FC  EE20 F007          	lfsr	2,7
 13329  012200  51ED               	movf	Button_Init@pInput& (0+255),w,b
 13330  012202  26D9               	addwf	fsr2l,f,c
 13331  012204  51EE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13332  012206  22DA               	addwfc	fsr2h,f,c
 13333  012208  C1F4  FFDE         	movff	Button_Init@pGetState,postinc2
 13334  01220C  C1F5  FFDE         	movff	Button_Init@pGetState+1,postinc2
 13335  012210  C1F6  FFDE         	movff	Button_Init@pGetState+2,postinc2
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;Button.c: 41: pInitIO();
 13339  012214  D801               	call	u6398
 13340  012216  0012               	return	
 13341  012218                     u6398:
 13342  012218  0005               	push	
 13343  01221A  6EFA               	movwf	pclath,c
 13344  01221C  0101               	movlb	1	; () banked
 13345  01221E  51F1               	movf	Button_Init@pInitIO& (0+255),w,b
 13346  012220  6EFD               	movwf	tosl,c
 13347  012222  51F2               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 13348  012224  6EFE               	movwf	tosh,c
 13349  012226  51F3               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 13350  012228  6EFF               	movwf	tosu,c
 13351  01222A  50FA               	movf	pclath,w,c
 13352  01222C  0012               	return		;indir
 13353  01222E                     __end_of_Button_Init:
 13354                           	opt stack 0
 13355                           tosu	equ	0xFFF
 13356                           tosh	equ	0xFFE
 13357                           tosl	equ	0xFFD
 13358                           pclath	equ	0xFFA
 13359                           tblptru	equ	0xFF8
 13360                           tblptrh	equ	0xFF7
 13361                           tblptrl	equ	0xFF6
 13362                           tablat	equ	0xFF5
 13363                           prodh	equ	0xFF4
 13364                           prodl	equ	0xFF3
 13365                           intcon	equ	0xFF2
 13366                           postinc0	equ	0xFEE
 13367                           wreg	equ	0xFE8
 13368                           indf1	equ	0xFE7
 13369                           postdec1	equ	0xFE5
 13370                           fsr1h	equ	0xFE2
 13371                           fsr1l	equ	0xFE1
 13372                           indf2	equ	0xFDF
 13373                           postinc2	equ	0xFDE
 13374                           postdec2	equ	0xFDD
 13375                           plusw2	equ	0xFDB
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function _MXK_InitDIPSwitch *****************
 13381 ;; Defined at:
 13382 ;;		line 20 in file "Library/MXK.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;		None
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;		None
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  1    wreg      void 
 13389 ;; Registers used:
 13390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/0
 13393 ;;		On exit  : 0/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;Total ram usage:        0 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; Hardware stack levels required when called:   14
 13403 ;; This function calls:
 13404 ;;		_Port_SetQuadType
 13405 ;; This function is called by:
 13406 ;;		_FunctInitButton
 13407 ;;		_Button_Init
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text63
 13412  013CF4                     __ptext63:
 13413                           	opt stack 0
 13414  013CF4                     _MXK_InitDIPSwitch:
 13415                           	opt stack 14
 13416                           
 13417                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 13418                           
 13419                           ;incstack = 0
 13420  013CF4  0E8A               	movlw	low _PortD
 13421  013CF6  0100               	movlb	0	; () banked
 13422  013CF8  6FED               	movwf	Port_SetQuadType@pInput& (0+255),b
 13423  013CFA  0E00               	movlw	high _PortD
 13424  013CFC  0100               	movlb	0	; () banked
 13425  013CFE  6FEE               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 13426  013D00  0E00               	movlw	0
 13427  013D02  0100               	movlb	0	; () banked
 13428  013D04  6FEF               	movwf	Port_SetQuadType@pQuad& (0+255),b
 13429  013D06  0E00               	movlw	0
 13430  013D08  0100               	movlb	0	; () banked
 13431  013D0A  6FF0               	movwf	Port_SetQuadType@pType& (0+255),b
 13432  013D0C  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 13433  013D10  0012               	return		;funcret
 13434  013D12                     __end_of_MXK_InitDIPSwitch:
 13435                           	opt stack 0
 13436                           tosu	equ	0xFFF
 13437                           tosh	equ	0xFFE
 13438                           tosl	equ	0xFFD
 13439                           pclath	equ	0xFFA
 13440                           tblptru	equ	0xFF8
 13441                           tblptrh	equ	0xFF7
 13442                           tblptrl	equ	0xFF6
 13443                           tablat	equ	0xFF5
 13444                           prodh	equ	0xFF4
 13445                           prodl	equ	0xFF3
 13446                           intcon	equ	0xFF2
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           indf1	equ	0xFE7
 13450                           postdec1	equ	0xFE5
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           plusw2	equ	0xFDB
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function _HMI_InitButtons *****************
 13462 ;; Defined at:
 13463 ;;		line 21 in file "HMI.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;		None
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;		None
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      void 
 13470 ;; Registers used:
 13471 ;;		None
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;Total ram usage:        0 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    7
 13484 ;; This function calls:
 13485 ;;		Nothing
 13486 ;; This function is called by:
 13487 ;;		_HMI_Init
 13488 ;;		_Button_Init
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492                           	psect	text64
 13493  013E56                     __ptext64:
 13494                           	opt stack 0
 13495  013E56                     _HMI_InitButtons:
 13496                           	opt stack 21
 13497                           
 13498                           ;HMI.c: 23: TRISE = 0xFF;
 13499                           
 13500                           ;incstack = 0
 13501  013E56  6896               	setf	3990,c	;volatile
 13502  013E58  0012               	return		;funcret
 13503  013E5A                     __end_of_HMI_InitButtons:
 13504                           	opt stack 0
 13505                           tosu	equ	0xFFF
 13506                           tosh	equ	0xFFE
 13507                           tosl	equ	0xFFD
 13508                           pclath	equ	0xFFA
 13509                           tblptru	equ	0xFF8
 13510                           tblptrh	equ	0xFF7
 13511                           tblptrl	equ	0xFF6
 13512                           tablat	equ	0xFF5
 13513                           prodh	equ	0xFF4
 13514                           prodl	equ	0xFF3
 13515                           intcon	equ	0xFF2
 13516                           postinc0	equ	0xFEE
 13517                           wreg	equ	0xFE8
 13518                           indf1	equ	0xFE7
 13519                           postdec1	equ	0xFE5
 13520                           fsr1h	equ	0xFE2
 13521                           fsr1l	equ	0xFE1
 13522                           indf2	equ	0xFDF
 13523                           postinc2	equ	0xFDE
 13524                           postdec2	equ	0xFDD
 13525                           plusw2	equ	0xFDB
 13526                           fsr2h	equ	0xFDA
 13527                           fsr2l	equ	0xFD9
 13528                           status	equ	0xFD8
 13529                           
 13530 ;; *************** function _MXK_InitTestButton *****************
 13531 ;; Defined at:
 13532 ;;		line 10 in file "Library/MXK.c"
 13533 ;; Parameters:    Size  Location     Type
 13534 ;;		None
 13535 ;; Auto vars:     Size  Location     Type
 13536 ;;		None
 13537 ;; Return value:  Size  Location     Type
 13538 ;;                  1    wreg      void 
 13539 ;; Registers used:
 13540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13541 ;; Tracked objects:
 13542 ;;		On entry : 0/0
 13543 ;;		On exit  : 0/0
 13544 ;;		Unchanged: 0/0
 13545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13550 ;;Total ram usage:        0 bytes
 13551 ;; Hardware stack levels used:    1
 13552 ;; Hardware stack levels required when called:   12
 13553 ;; This function calls:
 13554 ;;		_Port_SetPinType
 13555 ;; This function is called by:
 13556 ;;		_FunctInitButton
 13557 ;;		_Button_Init
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           	psect	text65
 13562  013D12                     __ptext65:
 13563                           	opt stack 0
 13564  013D12                     _MXK_InitTestButton:
 13565                           	opt stack 16
 13566                           
 13567                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 13568                           
 13569                           ;incstack = 0
 13570  013D12  0ECE               	movlw	low _PortB
 13571  013D14  0100               	movlb	0	; () banked
 13572  013D16  6FDD               	movwf	Port_SetPinType@pInput& (0+255),b
 13573  013D18  0E01               	movlw	high _PortB
 13574  013D1A  0100               	movlb	0	; () banked
 13575  013D1C  6FDE               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13576  013D1E  0E04               	movlw	4
 13577  013D20  0100               	movlb	0	; () banked
 13578  013D22  6FDF               	movwf	Port_SetPinType@pPin& (0+255),b
 13579  013D24  0E00               	movlw	0
 13580  013D26  0100               	movlb	0	; () banked
 13581  013D28  6FE0               	movwf	Port_SetPinType@pType& (0+255),b
 13582  013D2A  EC71  F089         	call	_Port_SetPinType	;wreg free
 13583  013D2E  0012               	return		;funcret
 13584  013D30                     __end_of_MXK_InitTestButton:
 13585                           	opt stack 0
 13586                           tosu	equ	0xFFF
 13587                           tosh	equ	0xFFE
 13588                           tosl	equ	0xFFD
 13589                           pclath	equ	0xFFA
 13590                           tblptru	equ	0xFF8
 13591                           tblptrh	equ	0xFF7
 13592                           tblptrl	equ	0xFF6
 13593                           tablat	equ	0xFF5
 13594                           prodh	equ	0xFF4
 13595                           prodl	equ	0xFF3
 13596                           intcon	equ	0xFF2
 13597                           postinc0	equ	0xFEE
 13598                           wreg	equ	0xFE8
 13599                           indf1	equ	0xFE7
 13600                           postdec1	equ	0xFE5
 13601                           fsr1h	equ	0xFE2
 13602                           fsr1l	equ	0xFE1
 13603                           indf2	equ	0xFDF
 13604                           postinc2	equ	0xFDE
 13605                           postdec2	equ	0xFDD
 13606                           plusw2	equ	0xFDB
 13607                           fsr2h	equ	0xFDA
 13608                           fsr2l	equ	0xFD9
 13609                           status	equ	0xFD8
 13610                           
 13611 ;; *************** function _Port_SetPinType *****************
 13612 ;; Defined at:
 13613 ;;		line 189 in file "Library/Port.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 13616 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13617 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13618 ;;  pPin            1   40[BANK0 ] enum E7694
 13619 ;;  pType           1   41[BANK0 ] enum E7739
 13620 ;; Auto vars:     Size  Location     Type
 13621 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 13622 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 13623 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 13624 ;;  Output          1   42[BANK0 ] enum E7419
 13625 ;; Return value:  Size  Location     Type
 13626 ;;                  1    wreg      enum E7419
 13627 ;; Registers used:
 13628 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13634 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13638 ;;Total ram usage:        7 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:   11
 13641 ;; This function calls:
 13642 ;;		_Byte_SetBit
 13643 ;;		_PortProperty_Valid
 13644 ;;		_Word_SetPair
 13645 ;; This function is called by:
 13646 ;;		_Configure_GPIOs
 13647 ;;		_LED_Init
 13648 ;;		_Port_Init
 13649 ;;		_SPI_Init
 13650 ;;		_MXK_InitTestButton
 13651 ;;		_MXK_Init
 13652 ;;		_I2C_Init
 13653 ;;		_Motor_Init
 13654 ;; This function uses a non-reentrant model
 13655 ;;
 13656                           
 13657                           	psect	text66
 13658  0112E2                     __ptext66:
 13659                           	opt stack 0
 13660  0112E2                     _Port_SetPinType:
 13661                           	opt stack 18
 13662                           
 13663                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 13664                           
 13665                           ;incstack = 0
 13666  0112E2  C0DD  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 13667  0112E6  C0DE  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 13668  0112EA  CFDE F0E2          	movff	postinc2,Port_SetPinType@Props
 13669  0112EE  CFDD F0E3          	movff	postdec2,Port_SetPinType@Props+1
 13670                           
 13671                           ;Port.c: 192: ePinError Output = ePinErrorState;
 13672  0112F2  0E05               	movlw	5
 13673  0112F4  0100               	movlb	0	; () banked
 13674  0112F6  6FE1               	movwf	Port_SetPinType@Output& (0+255),b
 13675                           
 13676                           ;Port.c: 193: switch (pType)
 13677  0112F8  D0B5               	goto	l9103
 13678  0112FA                     l9083:
 13679                           
 13680                           ; BSR set to: 0
 13681                           ;Port.c: 197: {
 13682                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 13683  0112FA  0100               	movlb	0	; () banked
 13684  0112FC  EE20 F002          	lfsr	2,2
 13685  011300  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13686  011302  26D9               	addwf	fsr2l,f,c
 13687  011304  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13688  011306  22DA               	addwfc	fsr2h,f,c
 13689  011308  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13690  01130C  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13691  011310  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13692  011314  0E01               	movlw	1
 13693  011316  0100               	movlb	0	; () banked
 13694  011318  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13695  01131A  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13696                           
 13697                           ;Port.c: 203: break;
 13698  01131E  D0B0               	goto	l9105
 13699  011320                     l9085:
 13700                           
 13701                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 13702  011320  C0E2  F0C6         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 13703  011324  C0E3  F0C7         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 13704  011328  0E01               	movlw	1
 13705  01132A  0100               	movlb	0	; () banked
 13706  01132C  6FC8               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 13707  01132E  C0DF  F0C9         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 13708  011332  EC99  F097         	call	_PortProperty_Valid	;wreg free
 13709  011336  0100               	movlb	0	; () banked
 13710  011338  6FE1               	movwf	Port_SetPinType@Output& (0+255),b
 13711  01133A  0100               	movlb	0	; () banked
 13712  01133C  51E1               	movf	Port_SetPinType@Output& (0+255),w,b
 13713  01133E  A4D8               	btfss	status,2,c
 13714  011340  0012               	return	
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;Port.c: 208: {
 13718                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 13719  011342  0100               	movlb	0	; () banked
 13720  011344  EE20 F002          	lfsr	2,2
 13721  011348  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13722  01134A  26D9               	addwf	fsr2l,f,c
 13723  01134C  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13724  01134E  22DA               	addwfc	fsr2h,f,c
 13725  011350  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13726  011354  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13727  011358  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13728  01135C  0E00               	movlw	0
 13729  01135E  0100               	movlb	0	; () banked
 13730  011360  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13731  011362  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13732                           
 13733                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 13734  011366  0100               	movlb	0	; () banked
 13735  011368  EE20 F004          	lfsr	2,4
 13736  01136C  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13737  01136E  26D9               	addwf	fsr2l,f,c
 13738  011370  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13739  011372  22DA               	addwfc	fsr2h,f,c
 13740  011374  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13741  011378  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13742  01137C  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13743  011380  0E00               	movlw	0
 13744  011382  0100               	movlb	0	; () banked
 13745  011384  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13746  011386  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13747                           
 13748                           ;Port.c: 214: break;
 13749  01138A  D07A               	goto	l9105
 13750  01138C                     l9091:
 13751                           
 13752                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 13753  01138C  C0E2  F0C6         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 13754  011390  C0E3  F0C7         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 13755  011394  0E02               	movlw	2
 13756  011396  0100               	movlb	0	; () banked
 13757  011398  6FC8               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 13758  01139A  C0DF  F0C9         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 13759  01139E  EC99  F097         	call	_PortProperty_Valid	;wreg free
 13760  0113A2  0100               	movlb	0	; () banked
 13761  0113A4  6FE1               	movwf	Port_SetPinType@Output& (0+255),b
 13762  0113A6  0100               	movlb	0	; () banked
 13763  0113A8  51E1               	movf	Port_SetPinType@Output& (0+255),w,b
 13764  0113AA  A4D8               	btfss	status,2,c
 13765  0113AC  0012               	return	
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;Port.c: 220: {
 13769                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 13770  0113AE  0100               	movlb	0	; () banked
 13771  0113B0  EE20 F002          	lfsr	2,2
 13772  0113B4  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13773  0113B6  26D9               	addwf	fsr2l,f,c
 13774  0113B8  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13775  0113BA  22DA               	addwfc	fsr2h,f,c
 13776  0113BC  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13777  0113C0  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13778  0113C4  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13779  0113C8  0E01               	movlw	1
 13780  0113CA  0100               	movlb	0	; () banked
 13781  0113CC  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13782  0113CE  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13783                           
 13784                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 13785  0113D2  0100               	movlb	0	; () banked
 13786  0113D4  EE20 F004          	lfsr	2,4
 13787  0113D8  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13788  0113DA  26D9               	addwf	fsr2l,f,c
 13789  0113DC  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13790  0113DE  22DA               	addwfc	fsr2h,f,c
 13791  0113E0  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13792  0113E4  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13793  0113E8  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13794  0113EC  0E01               	movlw	1
 13795  0113EE  0100               	movlb	0	; () banked
 13796  0113F0  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13797  0113F2  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13798                           
 13799                           ;Port.c: 226: break;
 13800  0113F6  D044               	goto	l9105
 13801  0113F8                     l9097:
 13802                           
 13803                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 13804  0113F8  C0E2  F0C6         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 13805  0113FC  C0E3  F0C7         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 13806  011400  0E00               	movlw	0
 13807  011402  0100               	movlb	0	; () banked
 13808  011404  6FC8               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 13809  011406  C0DF  F0C9         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 13810  01140A  EC99  F097         	call	_PortProperty_Valid	;wreg free
 13811  01140E  0100               	movlb	0	; () banked
 13812  011410  6FE1               	movwf	Port_SetPinType@Output& (0+255),b
 13813  011412  0100               	movlb	0	; () banked
 13814  011414  51E1               	movf	Port_SetPinType@Output& (0+255),w,b
 13815  011416  A4D8               	btfss	status,2,c
 13816  011418  0012               	return	
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;Port.c: 232: {
 13820                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 13821  01141A  0100               	movlb	0	; () banked
 13822  01141C  EE20 F002          	lfsr	2,2
 13823  011420  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13824  011422  26D9               	addwf	fsr2l,f,c
 13825  011424  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13826  011426  22DA               	addwfc	fsr2h,f,c
 13827  011428  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13828  01142C  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13829  011430  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13830  011434  0E00               	movlw	0
 13831  011436  0100               	movlb	0	; () banked
 13832  011438  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13833  01143A  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13834                           
 13835                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 13836  01143E  0100               	movlb	0	; () banked
 13837  011440  EE20 F004          	lfsr	2,4
 13838  011444  51DD               	movf	Port_SetPinType@pInput& (0+255),w,b
 13839  011446  26D9               	addwf	fsr2l,f,c
 13840  011448  51DE               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 13841  01144A  22DA               	addwfc	fsr2h,f,c
 13842  01144C  CFDE F0B7          	movff	postinc2,Byte_SetBit@pInput
 13843  011450  CFDD F0B8          	movff	postdec2,Byte_SetBit@pInput+1
 13844  011454  C0DF  F0B9         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 13845  011458  0E00               	movlw	0
 13846  01145A  0100               	movlb	0	; () banked
 13847  01145C  6FBA               	movwf	Byte_SetBit@pValue& (0+255),b
 13848  01145E  EC3C  F09A         	call	_Byte_SetBit	;wreg free
 13849                           
 13850                           ;Port.c: 239: }
 13851                           
 13852                           ;Port.c: 238: break;
 13853  011462  D00E               	goto	l9105
 13854  011464                     l9103:
 13855  011464  0100               	movlb	0	; () banked
 13856  011466  51E0               	movf	Port_SetPinType@pType& (0+255),w,b
 13857                           
 13858                           ; Switch size 1, requested type "space"
 13859                           ; Number of cases is 4, Range of values is 0 to 3
 13860                           ; switch strategies available:
 13861                           ; Name         Instructions Cycles
 13862                           ; simple_byte           13     7 (average)
 13863                           ;	Chosen strategy is simple_byte
 13864  011468  0A00               	xorlw	0	; case 0
 13865  01146A  B4D8               	btfsc	status,2,c
 13866  01146C  D746               	goto	l9083
 13867  01146E  0A01               	xorlw	1	; case 1
 13868  011470  B4D8               	btfsc	status,2,c
 13869  011472  D756               	goto	l9085
 13870  011474  0A03               	xorlw	3	; case 2
 13871  011476  B4D8               	btfsc	status,2,c
 13872  011478  D789               	goto	l9091
 13873  01147A  0A01               	xorlw	1	; case 3
 13874  01147C  B4D8               	btfsc	status,2,c
 13875  01147E  D7BC               	goto	l9097
 13876  011480                     l9105:
 13877                           
 13878                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 13879  011480  0E08               	movlw	8
 13880  011482  0100               	movlb	0	; () banked
 13881  011484  25DD               	addwf	Port_SetPinType@pInput& (0+255),w,b
 13882  011486  0100               	movlb	0	; () banked
 13883  011488  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
 13884  01148A  0E00               	movlw	0
 13885  01148C  0100               	movlb	0	; () banked
 13886  01148E  21DE               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 13887  011490  0100               	movlb	0	; () banked
 13888  011492  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13889  011494  C0DF  F0C8         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 13890  011498  C0E0  F0C9         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 13891  01149C  EC5A  F09C         	call	_Word_SetPair	;wreg free
 13892  0114A0  0012               	return	
 13893  0114A2                     __end_of_Port_SetPinType:
 13894                           	opt stack 0
 13895                           tosu	equ	0xFFF
 13896                           tosh	equ	0xFFE
 13897                           tosl	equ	0xFFD
 13898                           pclath	equ	0xFFA
 13899                           tblptru	equ	0xFF8
 13900                           tblptrh	equ	0xFF7
 13901                           tblptrl	equ	0xFF6
 13902                           tablat	equ	0xFF5
 13903                           prodh	equ	0xFF4
 13904                           prodl	equ	0xFF3
 13905                           intcon	equ	0xFF2
 13906                           postinc0	equ	0xFEE
 13907                           wreg	equ	0xFE8
 13908                           indf1	equ	0xFE7
 13909                           postdec1	equ	0xFE5
 13910                           fsr1h	equ	0xFE2
 13911                           fsr1l	equ	0xFE1
 13912                           indf2	equ	0xFDF
 13913                           postinc2	equ	0xFDE
 13914                           postdec2	equ	0xFDD
 13915                           plusw2	equ	0xFDB
 13916                           fsr2h	equ	0xFDA
 13917                           fsr2l	equ	0xFD9
 13918                           status	equ	0xFD8
 13919                           
 13920 ;; *************** function _Byte_SetBit *****************
 13921 ;; Defined at:
 13922 ;;		line 32 in file "Library/Types.c"
 13923 ;; Parameters:    Size  Location     Type
 13924 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13925 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 13926 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 13927 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13928 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13929 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13930 ;;		 -> NULL(0), 
 13931 ;;  pBit            1    2[BANK0 ] unsigned char 
 13932 ;;  pValue          1    3[BANK0 ] unsigned char 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;		None
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  1    wreg      void 
 13937 ;; Registers used:
 13938 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;Total ram usage:        7 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    7
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_Port_SetPinType
 13955 ;;		_Port_SetPin
 13956 ;;		_SPI_Init
 13957 ;;		_SPI_MinSpeed
 13958 ;;		_SPI_MaxSpeed
 13959 ;;		_Word_SetBit
 13960 ;;		_I2C_Init
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text67
 13965  013478                     __ptext67:
 13966                           	opt stack 0
 13967  013478                     _Byte_SetBit:
 13968                           	opt stack 21
 13969                           
 13970                           ;Types.c: 34: pValue &= 1;
 13971                           
 13972                           ;incstack = 0
 13973  013478  0E01               	movlw	1
 13974  01347A  0100               	movlb	0	; () banked
 13975  01347C  17BA               	andwf	Byte_SetBit@pValue& (0+255),f,b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 13979  01347E  C0B9  F0BB         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 13980  013482  0E01               	movlw	1
 13981  013484  0100               	movlb	0	; () banked
 13982  013486  6FBC               	movwf	(??_Byte_SetBit+1)& (0+255),b
 13983  013488  0100               	movlb	0	; () banked
 13984  01348A  2BBB               	incf	??_Byte_SetBit& (0+255),f,b
 13985  01348C  D003               	goto	u5584
 13986  01348E                     u5585:
 13987  01348E  0100               	movlb	0	; () banked
 13988  013490  90D8               	bcf	status,0,c
 13989  013492  37BC               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 13990  013494                     u5584:
 13991  013494  0100               	movlb	0	; () banked
 13992  013496  2FBB               	decfsz	??_Byte_SetBit& (0+255),f,b
 13993  013498  D7FA               	goto	u5585
 13994  01349A  0100               	movlb	0	; () banked
 13995  01349C  51BC               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 13996  01349E  0AFF               	xorlw	255
 13997  0134A0  0100               	movlb	0	; () banked
 13998  0134A2  6FBD               	movwf	(??_Byte_SetBit+2)& (0+255),b
 13999  0134A4  C0B7  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 14000  0134A8  C0B8  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 14001  0134AC  0100               	movlb	0	; () banked
 14002  0134AE  51BD               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 14003  0134B0  16DF               	andwf	indf2,f,c
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 14007  0134B2  C0B9  F0BB         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 14008  0134B6  C0BA  F0BC         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 14009  0134BA  0100               	movlb	0	; () banked
 14010  0134BC  2BBB               	incf	??_Byte_SetBit& (0+255),f,b
 14011  0134BE  D003               	goto	u5594
 14012  0134C0                     u5595:
 14013  0134C0  0100               	movlb	0	; () banked
 14014  0134C2  90D8               	bcf	status,0,c
 14015  0134C4  37BC               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 14016  0134C6                     u5594:
 14017  0134C6  0100               	movlb	0	; () banked
 14018  0134C8  2FBB               	decfsz	??_Byte_SetBit& (0+255),f,b
 14019  0134CA  D7FA               	goto	u5595
 14020  0134CC  C0B7  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 14021  0134D0  C0B8  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 14022  0134D4  0100               	movlb	0	; () banked
 14023  0134D6  51BC               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 14024  0134D8  12DF               	iorwf	indf2,f,c
 14025                           
 14026                           ; BSR set to: 0
 14027  0134DA  0012               	return		;funcret
 14028  0134DC                     __end_of_Byte_SetBit:
 14029                           	opt stack 0
 14030                           tosu	equ	0xFFF
 14031                           tosh	equ	0xFFE
 14032                           tosl	equ	0xFFD
 14033                           pclath	equ	0xFFA
 14034                           tblptru	equ	0xFF8
 14035                           tblptrh	equ	0xFF7
 14036                           tblptrl	equ	0xFF6
 14037                           tablat	equ	0xFF5
 14038                           prodh	equ	0xFF4
 14039                           prodl	equ	0xFF3
 14040                           intcon	equ	0xFF2
 14041                           postinc0	equ	0xFEE
 14042                           wreg	equ	0xFE8
 14043                           indf1	equ	0xFE7
 14044                           postdec1	equ	0xFE5
 14045                           fsr1h	equ	0xFE2
 14046                           fsr1l	equ	0xFE1
 14047                           indf2	equ	0xFDF
 14048                           postinc2	equ	0xFDE
 14049                           postdec2	equ	0xFDD
 14050                           plusw2	equ	0xFDB
 14051                           fsr2h	equ	0xFDA
 14052                           fsr2l	equ	0xFD9
 14053                           status	equ	0xFD8
 14054                           
 14055 ;; *************** function _Port_SetQuadType *****************
 14056 ;; Defined at:
 14057 ;;		line 399 in file "Library/Port.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14060 ;;		 -> PortB(10), PortD(10), 
 14061 ;;  pQuad           1   56[BANK0 ] enum E7720
 14062 ;;  pType           1   57[BANK0 ] enum E7739
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  Output          1    0[BANK1 ] enum E7419
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      enum E7419
 14067 ;; Registers used:
 14068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14069 ;; Tracked objects:
 14070 ;;		On entry : 0/0
 14071 ;;		On exit  : 0/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14074 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14075 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14077 ;;      Totals:         0       4       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14078 ;;Total ram usage:        5 bytes
 14079 ;; Hardware stack levels used:    1
 14080 ;; Hardware stack levels required when called:   13
 14081 ;; This function calls:
 14082 ;;		_Byte_SetQuad
 14083 ;;		_Port_CheckQuadType
 14084 ;;		_Word_SetPair
 14085 ;; This function is called by:
 14086 ;;		_MXK_InitDIPSwitch
 14087 ;;		_MXK_Init
 14088 ;; This function uses a non-reentrant model
 14089 ;;
 14090                           
 14091                           	psect	text68
 14092  010A5C                     __ptext68:
 14093                           	opt stack 0
 14094  010A5C                     _Port_SetQuadType:
 14095                           	opt stack 16
 14096                           
 14097                           ;Port.c: 401: ePinError Output = ePinErrorState;
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;incstack = 0
 14101  010A5C  0E05               	movlw	5
 14102  010A5E  0101               	movlb	1	; () banked
 14103  010A60  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 14104                           
 14105                           ;Port.c: 403: switch (pType)
 14106  010A62  D0C7               	goto	l9165
 14107  010A64                     l9149:
 14108                           
 14109                           ;Port.c: 407: {
 14110                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 14111  010A64  0100               	movlb	0	; () banked
 14112  010A66  EE20 F002          	lfsr	2,2
 14113  010A6A  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14114  010A6C  26D9               	addwf	fsr2l,f,c
 14115  010A6E  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14116  010A70  22DA               	addwfc	fsr2h,f,c
 14117  010A72  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14118  010A76  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14119  010A7A  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14120  010A7E  0E0F               	movlw	15
 14121  010A80  0100               	movlb	0	; () banked
 14122  010A82  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14123  010A84  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14124                           
 14125                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 14126  010A88  0100               	movlb	0	; () banked
 14127  010A8A  EE20 F004          	lfsr	2,4
 14128  010A8E  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14129  010A90  26D9               	addwf	fsr2l,f,c
 14130  010A92  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14131  010A94  22DA               	addwfc	fsr2h,f,c
 14132  010A96  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14133  010A9A  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14134  010A9E  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14135  010AA2  0E00               	movlw	0
 14136  010AA4  0100               	movlb	0	; () banked
 14137  010AA6  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14138  010AA8  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14139                           
 14140                           ;Port.c: 413: }
 14141                           ;Port.c: 415: break;
 14142  010AAC  D0B0               	goto	l9167
 14143  010AAE                     l9151:
 14144                           
 14145                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 14146  010AAE  C0ED  F0E6         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 14147  010AB2  C0EE  F0E7         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 14148  010AB6  C0EF  F0E8         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 14149  010ABA  0E03               	movlw	3
 14150  010ABC  0100               	movlb	0	; () banked
 14151  010ABE  6FE9               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 14152  010AC0  ECD0  F09A         	call	_Port_CheckQuadType	;wreg free
 14153  010AC4  0101               	movlb	1	; () banked
 14154  010AC6  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 14155  010AC8  0101               	movlb	1	; () banked
 14156  010ACA  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 14157  010ACC  A4D8               	btfss	status,2,c
 14158  010ACE  0012               	return	
 14159                           
 14160                           ; BSR set to: 1
 14161                           ;Port.c: 418: {
 14162                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 14163  010AD0  0100               	movlb	0	; () banked
 14164  010AD2  EE20 F002          	lfsr	2,2
 14165  010AD6  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14166  010AD8  26D9               	addwf	fsr2l,f,c
 14167  010ADA  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14168  010ADC  22DA               	addwfc	fsr2h,f,c
 14169  010ADE  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14170  010AE2  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14171  010AE6  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14172  010AEA  0E00               	movlw	0
 14173  010AEC  0100               	movlb	0	; () banked
 14174  010AEE  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14175  010AF0  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14176                           
 14177                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 14178  010AF4  0100               	movlb	0	; () banked
 14179  010AF6  EE20 F004          	lfsr	2,4
 14180  010AFA  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14181  010AFC  26D9               	addwf	fsr2l,f,c
 14182  010AFE  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14183  010B00  22DA               	addwfc	fsr2h,f,c
 14184  010B02  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14185  010B06  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14186  010B0A  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14187  010B0E  0E00               	movlw	0
 14188  010B10  0100               	movlb	0	; () banked
 14189  010B12  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14190  010B14  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14191                           
 14192                           ;Port.c: 424: }
 14193  010B18  D07A               	goto	l9167
 14194  010B1A                     l9155:
 14195                           
 14196                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 14197  010B1A  C0ED  F0E6         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 14198  010B1E  C0EE  F0E7         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 14199  010B22  C0EF  F0E8         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 14200  010B26  0E03               	movlw	3
 14201  010B28  0100               	movlb	0	; () banked
 14202  010B2A  6FE9               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 14203  010B2C  ECD0  F09A         	call	_Port_CheckQuadType	;wreg free
 14204  010B30  0101               	movlb	1	; () banked
 14205  010B32  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 14206  010B34  0101               	movlb	1	; () banked
 14207  010B36  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 14208  010B38  A4D8               	btfss	status,2,c
 14209  010B3A  0012               	return	
 14210                           
 14211                           ; BSR set to: 1
 14212                           ;Port.c: 429: {
 14213                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 14214  010B3C  0100               	movlb	0	; () banked
 14215  010B3E  EE20 F002          	lfsr	2,2
 14216  010B42  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14217  010B44  26D9               	addwf	fsr2l,f,c
 14218  010B46  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14219  010B48  22DA               	addwfc	fsr2h,f,c
 14220  010B4A  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14221  010B4E  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14222  010B52  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14223  010B56  0E0F               	movlw	15
 14224  010B58  0100               	movlb	0	; () banked
 14225  010B5A  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14226  010B5C  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14227                           
 14228                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 14229  010B60  0100               	movlb	0	; () banked
 14230  010B62  EE20 F004          	lfsr	2,4
 14231  010B66  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14232  010B68  26D9               	addwf	fsr2l,f,c
 14233  010B6A  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14234  010B6C  22DA               	addwfc	fsr2h,f,c
 14235  010B6E  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14236  010B72  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14237  010B76  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14238  010B7A  0E0F               	movlw	15
 14239  010B7C  0100               	movlb	0	; () banked
 14240  010B7E  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14241  010B80  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14242                           
 14243                           ;Port.c: 435: }
 14244  010B84  D044               	goto	l9167
 14245  010B86                     l9159:
 14246                           
 14247                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 14248  010B86  C0ED  F0E6         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 14249  010B8A  C0EE  F0E7         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 14250  010B8E  C0EF  F0E8         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 14251  010B92  0E03               	movlw	3
 14252  010B94  0100               	movlb	0	; () banked
 14253  010B96  6FE9               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 14254  010B98  ECD0  F09A         	call	_Port_CheckQuadType	;wreg free
 14255  010B9C  0101               	movlb	1	; () banked
 14256  010B9E  6FEC               	movwf	Port_SetQuadType@Output& (0+255),b
 14257  010BA0  0101               	movlb	1	; () banked
 14258  010BA2  51EC               	movf	Port_SetQuadType@Output& (0+255),w,b
 14259  010BA4  A4D8               	btfss	status,2,c
 14260  010BA6  0012               	return	
 14261                           
 14262                           ; BSR set to: 1
 14263                           ;Port.c: 440: {
 14264                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 14265  010BA8  0100               	movlb	0	; () banked
 14266  010BAA  EE20 F002          	lfsr	2,2
 14267  010BAE  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14268  010BB0  26D9               	addwf	fsr2l,f,c
 14269  010BB2  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14270  010BB4  22DA               	addwfc	fsr2h,f,c
 14271  010BB6  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14272  010BBA  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14273  010BBE  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14274  010BC2  0E00               	movlw	0
 14275  010BC4  0100               	movlb	0	; () banked
 14276  010BC6  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14277  010BC8  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14278                           
 14279                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 14280  010BCC  0100               	movlb	0	; () banked
 14281  010BCE  EE20 F004          	lfsr	2,4
 14282  010BD2  51ED               	movf	Port_SetQuadType@pInput& (0+255),w,b
 14283  010BD4  26D9               	addwf	fsr2l,f,c
 14284  010BD6  51EE               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14285  010BD8  22DA               	addwfc	fsr2h,f,c
 14286  010BDA  CFDE F0C2          	movff	postinc2,Byte_SetQuad@pInput
 14287  010BDE  CFDD F0C3          	movff	postdec2,Byte_SetQuad@pInput+1
 14288  010BE2  C0EF  F0C4         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 14289  010BE6  0E00               	movlw	0
 14290  010BE8  0100               	movlb	0	; () banked
 14291  010BEA  6FC5               	movwf	Byte_SetQuad@pValue& (0+255),b
 14292  010BEC  EC3A  F09E         	call	_Byte_SetQuad	;wreg free
 14293                           
 14294                           ;Port.c: 446: }
 14295  010BF0  D00E               	goto	l9167
 14296  010BF2                     l9165:
 14297  010BF2  0100               	movlb	0	; () banked
 14298  010BF4  51F0               	movf	Port_SetQuadType@pType& (0+255),w,b
 14299                           
 14300                           ; Switch size 1, requested type "space"
 14301                           ; Number of cases is 4, Range of values is 0 to 3
 14302                           ; switch strategies available:
 14303                           ; Name         Instructions Cycles
 14304                           ; simple_byte           13     7 (average)
 14305                           ;	Chosen strategy is simple_byte
 14306  010BF6  0A00               	xorlw	0	; case 0
 14307  010BF8  B4D8               	btfsc	status,2,c
 14308  010BFA  D734               	goto	l9149
 14309  010BFC  0A01               	xorlw	1	; case 1
 14310  010BFE  B4D8               	btfsc	status,2,c
 14311  010C00  D756               	goto	l9151
 14312  010C02  0A03               	xorlw	3	; case 2
 14313  010C04  B4D8               	btfsc	status,2,c
 14314  010C06  D789               	goto	l9155
 14315  010C08  0A01               	xorlw	1	; case 3
 14316  010C0A  B4D8               	btfsc	status,2,c
 14317  010C0C  D7BC               	goto	l9159
 14318  010C0E                     l9167:
 14319                           
 14320                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 14321  010C0E  0E08               	movlw	8
 14322  010C10  0100               	movlb	0	; () banked
 14323  010C12  25ED               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 14324  010C14  0100               	movlb	0	; () banked
 14325  010C16  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
 14326  010C18  0E00               	movlw	0
 14327  010C1A  0100               	movlb	0	; () banked
 14328  010C1C  21EE               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14329  010C1E  0100               	movlb	0	; () banked
 14330  010C20  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14331  010C22  0100               	movlb	0	; () banked
 14332  010C24  51EF               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 14333  010C26  0D04               	mullw	4
 14334  010C28  CFF3 F0C8          	movff	prodl,Word_SetPair@pPair
 14335  010C2C  C0F0  F0C9         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 14336  010C30  EC5A  F09C         	call	_Word_SetPair	;wreg free
 14337                           
 14338                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 14339  010C34  0E08               	movlw	8
 14340  010C36  0100               	movlb	0	; () banked
 14341  010C38  25ED               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 14342  010C3A  0100               	movlb	0	; () banked
 14343  010C3C  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
 14344  010C3E  0E00               	movlw	0
 14345  010C40  0100               	movlb	0	; () banked
 14346  010C42  21EE               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14347  010C44  0100               	movlb	0	; () banked
 14348  010C46  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14349  010C48  0100               	movlb	0	; () banked
 14350  010C4A  51EF               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 14351  010C4C  0D04               	mullw	4
 14352  010C4E  28F3               	incf	prodl,w,c
 14353  010C50  0100               	movlb	0	; () banked
 14354  010C52  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
 14355  010C54  C0F0  F0C9         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 14356  010C58  EC5A  F09C         	call	_Word_SetPair	;wreg free
 14357                           
 14358                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 14359  010C5C  0E08               	movlw	8
 14360  010C5E  0100               	movlb	0	; () banked
 14361  010C60  25ED               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 14362  010C62  0100               	movlb	0	; () banked
 14363  010C64  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
 14364  010C66  0E00               	movlw	0
 14365  010C68  0100               	movlb	0	; () banked
 14366  010C6A  21EE               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14367  010C6C  0100               	movlb	0	; () banked
 14368  010C6E  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14369  010C70  0100               	movlb	0	; () banked
 14370  010C72  51EF               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 14371  010C74  0D04               	mullw	4
 14372  010C76  50F3               	movf	prodl,w,c
 14373  010C78  0F02               	addlw	2
 14374  010C7A  0100               	movlb	0	; () banked
 14375  010C7C  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
 14376  010C7E  C0F0  F0C9         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 14377  010C82  EC5A  F09C         	call	_Word_SetPair	;wreg free
 14378                           
 14379                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 14380  010C86  0E08               	movlw	8
 14381  010C88  0100               	movlb	0	; () banked
 14382  010C8A  25ED               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 14383  010C8C  0100               	movlb	0	; () banked
 14384  010C8E  6FC6               	movwf	Word_SetPair@pInput& (0+255),b
 14385  010C90  0E00               	movlw	0
 14386  010C92  0100               	movlb	0	; () banked
 14387  010C94  21EE               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 14388  010C96  0100               	movlb	0	; () banked
 14389  010C98  6FC7               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14390  010C9A  0100               	movlb	0	; () banked
 14391  010C9C  51EF               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 14392  010C9E  0D04               	mullw	4
 14393  010CA0  50F3               	movf	prodl,w,c
 14394  010CA2  0F03               	addlw	3
 14395  010CA4  0100               	movlb	0	; () banked
 14396  010CA6  6FC8               	movwf	Word_SetPair@pPair& (0+255),b
 14397  010CA8  C0F0  F0C9         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 14398  010CAC  EC5A  F09C         	call	_Word_SetPair	;wreg free
 14399  010CB0  0012               	return	
 14400  010CB2                     __end_of_Port_SetQuadType:
 14401                           	opt stack 0
 14402                           tosu	equ	0xFFF
 14403                           tosh	equ	0xFFE
 14404                           tosl	equ	0xFFD
 14405                           pclath	equ	0xFFA
 14406                           tblptru	equ	0xFF8
 14407                           tblptrh	equ	0xFF7
 14408                           tblptrl	equ	0xFF6
 14409                           tablat	equ	0xFF5
 14410                           prodh	equ	0xFF4
 14411                           prodl	equ	0xFF3
 14412                           intcon	equ	0xFF2
 14413                           postinc0	equ	0xFEE
 14414                           wreg	equ	0xFE8
 14415                           indf1	equ	0xFE7
 14416                           postdec1	equ	0xFE5
 14417                           fsr1h	equ	0xFE2
 14418                           fsr1l	equ	0xFE1
 14419                           indf2	equ	0xFDF
 14420                           postinc2	equ	0xFDE
 14421                           postdec2	equ	0xFDD
 14422                           plusw2	equ	0xFDB
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8
 14426                           
 14427 ;; *************** function _Word_SetPair *****************
 14428 ;; Defined at:
 14429 ;;		line 149 in file "Library/Types.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  pInput          2   15[BANK0 ] PTR struct Word
 14432 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14433 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14434 ;;  pPair           1   17[BANK0 ] unsigned char 
 14435 ;;  pValue          1   18[BANK0 ] unsigned char 
 14436 ;; Auto vars:     Size  Location     Type
 14437 ;;		None
 14438 ;; Return value:  Size  Location     Type
 14439 ;;                  1    wreg      void 
 14440 ;; Registers used:
 14441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14442 ;; Tracked objects:
 14443 ;;		On entry : 0/0
 14444 ;;		On exit  : 0/0
 14445 ;;		Unchanged: 0/0
 14446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14447 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14450 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14451 ;;Total ram usage:        4 bytes
 14452 ;; Hardware stack levels used:    1
 14453 ;; Hardware stack levels required when called:    9
 14454 ;; This function calls:
 14455 ;;		_Byte_SetPair
 14456 ;; This function is called by:
 14457 ;;		_Port_SetPinType
 14458 ;;		_Port_SetQuadType
 14459 ;;		_Port_SetType
 14460 ;;		_Port_SetPairType
 14461 ;;		_PortProperty_Init
 14462 ;; This function uses a non-reentrant model
 14463 ;;
 14464                           
 14465                           	psect	text69
 14466  0138B4                     __ptext69:
 14467                           	opt stack 0
 14468  0138B4                     _Word_SetPair:
 14469                           	opt stack 19
 14470                           
 14471                           ;Types.c: 151: if (pPair >= 4)
 14472                           
 14473                           ;incstack = 0
 14474  0138B4  0E03               	movlw	3
 14475  0138B6  0100               	movlb	0	; () banked
 14476  0138B8  65C8               	cpfsgt	Word_SetPair@pPair& (0+255),b
 14477  0138BA  D014               	goto	l8979
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 14481  0138BC  0E01               	movlw	1
 14482  0138BE  0100               	movlb	0	; () banked
 14483  0138C0  25C6               	addwf	Word_SetPair@pInput& (0+255),w,b
 14484  0138C2  0100               	movlb	0	; () banked
 14485  0138C4  6FC2               	movwf	Byte_SetPair@pInput& (0+255),b
 14486  0138C6  0E00               	movlw	0
 14487  0138C8  0100               	movlb	0	; () banked
 14488  0138CA  21C7               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 14489  0138CC  0100               	movlb	0	; () banked
 14490  0138CE  6FC3               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 14491  0138D0  0100               	movlb	0	; () banked
 14492  0138D2  51C8               	movf	Word_SetPair@pPair& (0+255),w,b
 14493  0138D4  0FFC               	addlw	252
 14494  0138D6  0100               	movlb	0	; () banked
 14495  0138D8  6FC4               	movwf	Byte_SetPair@pPair& (0+255),b
 14496  0138DA  C0C9  F0C5         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 14497  0138DE  EC29  F09E         	call	_Byte_SetPair	;wreg free
 14498  0138E2  0012               	return	
 14499  0138E4                     l8979:
 14500                           
 14501                           ;Types.c: 153: else
 14502                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 14503  0138E4  C0C6  F0C2         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 14504  0138E8  C0C7  F0C3         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 14505  0138EC  C0C8  F0C4         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 14506  0138F0  C0C9  F0C5         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 14507  0138F4  EC29  F09E         	call	_Byte_SetPair	;wreg free
 14508  0138F8  0012               	return	
 14509  0138FA                     __end_of_Word_SetPair:
 14510                           	opt stack 0
 14511                           tosu	equ	0xFFF
 14512                           tosh	equ	0xFFE
 14513                           tosl	equ	0xFFD
 14514                           pclath	equ	0xFFA
 14515                           tblptru	equ	0xFF8
 14516                           tblptrh	equ	0xFF7
 14517                           tblptrl	equ	0xFF6
 14518                           tablat	equ	0xFF5
 14519                           prodh	equ	0xFF4
 14520                           prodl	equ	0xFF3
 14521                           intcon	equ	0xFF2
 14522                           postinc0	equ	0xFEE
 14523                           wreg	equ	0xFE8
 14524                           indf1	equ	0xFE7
 14525                           postdec1	equ	0xFE5
 14526                           fsr1h	equ	0xFE2
 14527                           fsr1l	equ	0xFE1
 14528                           indf2	equ	0xFDF
 14529                           postinc2	equ	0xFDE
 14530                           postdec2	equ	0xFDD
 14531                           plusw2	equ	0xFDB
 14532                           fsr2h	equ	0xFDA
 14533                           fsr2l	equ	0xFD9
 14534                           status	equ	0xFD8
 14535                           
 14536 ;; *************** function _Byte_SetPair *****************
 14537 ;; Defined at:
 14538 ;;		line 83 in file "Library/Types.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 14541 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 14542 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 14543 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 14544 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 14545 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 14546 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 14547 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 14548 ;;		 -> NULL(0), 
 14549 ;;  pPair           1   13[BANK0 ] unsigned char 
 14550 ;;  pValue          1   14[BANK0 ] unsigned char 
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;		None
 14553 ;; Return value:  Size  Location     Type
 14554 ;;                  1    wreg      void 
 14555 ;; Registers used:
 14556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14562 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14566 ;;Total ram usage:        4 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:    8
 14569 ;; This function calls:
 14570 ;;		_Byte_SetZone
 14571 ;; This function is called by:
 14572 ;;		_Word_SetPair
 14573 ;;		_Port_SetPairType
 14574 ;;		_Port_SetPair
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           	psect	text70
 14579  013C52                     __ptext70:
 14580                           	opt stack 0
 14581  013C52                     _Byte_SetPair:
 14582                           	opt stack 19
 14583                           
 14584                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 14585                           
 14586                           ;incstack = 0
 14587  013C52  C0C2  F0B7         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 14588  013C56  C0C3  F0B8         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 14589  013C5A  0E04               	movlw	4
 14590  013C5C  0100               	movlb	0	; () banked
 14591  013C5E  6FB9               	movwf	Byte_SetZone@pMax& (0+255),b
 14592  013C60  C0C4  F0BA         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 14593  013C64  0E02               	movlw	2
 14594  013C66  0100               	movlb	0	; () banked
 14595  013C68  6FBB               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 14596  013C6A  C0C5  F0BC         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 14597  013C6E  EC5C  F093         	call	_Byte_SetZone	;wreg free
 14598  013C72  0012               	return		;funcret
 14599  013C74                     __end_of_Byte_SetPair:
 14600                           	opt stack 0
 14601                           tosu	equ	0xFFF
 14602                           tosh	equ	0xFFE
 14603                           tosl	equ	0xFFD
 14604                           pclath	equ	0xFFA
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           intcon	equ	0xFF2
 14612                           postinc0	equ	0xFEE
 14613                           wreg	equ	0xFE8
 14614                           indf1	equ	0xFE7
 14615                           postdec1	equ	0xFE5
 14616                           fsr1h	equ	0xFE2
 14617                           fsr1l	equ	0xFE1
 14618                           indf2	equ	0xFDF
 14619                           postinc2	equ	0xFDE
 14620                           postdec2	equ	0xFDD
 14621                           plusw2	equ	0xFDB
 14622                           fsr2h	equ	0xFDA
 14623                           fsr2l	equ	0xFD9
 14624                           status	equ	0xFD8
 14625                           
 14626 ;; *************** function _Port_CheckQuadType *****************
 14627 ;; Defined at:
 14628 ;;		line 126 in file "Library/Port.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 14631 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14632 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14633 ;;  pQuad           1   49[BANK0 ] enum E7720
 14634 ;;  pDrive          1   50[BANK0 ] enum E7413
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;  Output          1   53[BANK0 ] enum E7419
 14637 ;;  Pair2           1   52[BANK0 ] enum E7704
 14638 ;;  Pair1           1   51[BANK0 ] enum E7704
 14639 ;; Return value:  Size  Location     Type
 14640 ;;                  1    wreg      enum E7419
 14641 ;; Registers used:
 14642 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14648 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14652 ;;Total ram usage:        7 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:   12
 14655 ;; This function calls:
 14656 ;;		_Port_CheckPairType
 14657 ;; This function is called by:
 14658 ;;		_Port_CheckPortType
 14659 ;;		_Port_SetQuadType
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           	psect	text71
 14664  0135A0                     __ptext71:
 14665                           	opt stack 0
 14666  0135A0                     _Port_CheckQuadType:
 14667                           	opt stack 15
 14668                           
 14669                           ;Port.c: 128: ePinError Output = ePinErrorState;
 14670                           
 14671                           ;incstack = 0
 14672  0135A0  0E05               	movlw	5
 14673  0135A2  0100               	movlb	0	; () banked
 14674  0135A4  6FEC               	movwf	Port_CheckQuadType@Output& (0+255),b
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 14678  0135A6  0100               	movlb	0	; () banked
 14679  0135A8  51E8               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 14680  0135AA  0D02               	mullw	2
 14681  0135AC  CFF3 F0EA          	movff	prodl,Port_CheckQuadType@Pair1
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 14685  0135B0  0100               	movlb	0	; () banked
 14686  0135B2  51E8               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 14687  0135B4  0D02               	mullw	2
 14688  0135B6  28F3               	incf	prodl,w,c
 14689  0135B8  0100               	movlb	0	; () banked
 14690  0135BA  6FEB               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 14691                           
 14692                           ; BSR set to: 0
 14693                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 14694  0135BC  C0E6  F0DD         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 14695  0135C0  C0E7  F0DE         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 14696  0135C4  C0EA  F0DF         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 14697  0135C8  C0E9  F0E0         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 14698  0135CC  ECD5  F099         	call	_Port_CheckPairType	;wreg free
 14699  0135D0  0100               	movlb	0	; () banked
 14700  0135D2  6FEC               	movwf	Port_CheckQuadType@Output& (0+255),b
 14701  0135D4  0100               	movlb	0	; () banked
 14702  0135D6  51EC               	movf	Port_CheckQuadType@Output& (0+255),w,b
 14703  0135D8  A4D8               	btfss	status,2,c
 14704  0135DA  D00C               	goto	l8971
 14705                           
 14706                           ; BSR set to: 0
 14707                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 14708  0135DC  C0E6  F0DD         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 14709  0135E0  C0E7  F0DE         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 14710  0135E4  C0EB  F0DF         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 14711  0135E8  C0E9  F0E0         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 14712  0135EC  ECD5  F099         	call	_Port_CheckPairType	;wreg free
 14713  0135F0  0100               	movlb	0	; () banked
 14714  0135F2  6FEC               	movwf	Port_CheckQuadType@Output& (0+255),b
 14715  0135F4                     l8971:
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;Port.c: 136: return Output;
 14719  0135F4  0100               	movlb	0	; () banked
 14720  0135F6  51EC               	movf	Port_CheckQuadType@Output& (0+255),w,b
 14721  0135F8  0012               	return	
 14722  0135FA                     __end_of_Port_CheckQuadType:
 14723                           	opt stack 0
 14724                           tosu	equ	0xFFF
 14725                           tosh	equ	0xFFE
 14726                           tosl	equ	0xFFD
 14727                           pclath	equ	0xFFA
 14728                           tblptru	equ	0xFF8
 14729                           tblptrh	equ	0xFF7
 14730                           tblptrl	equ	0xFF6
 14731                           tablat	equ	0xFF5
 14732                           prodh	equ	0xFF4
 14733                           prodl	equ	0xFF3
 14734                           intcon	equ	0xFF2
 14735                           postinc0	equ	0xFEE
 14736                           wreg	equ	0xFE8
 14737                           indf1	equ	0xFE7
 14738                           postdec1	equ	0xFE5
 14739                           fsr1h	equ	0xFE2
 14740                           fsr1l	equ	0xFE1
 14741                           indf2	equ	0xFDF
 14742                           postinc2	equ	0xFDE
 14743                           postdec2	equ	0xFDD
 14744                           plusw2	equ	0xFDB
 14745                           fsr2h	equ	0xFDA
 14746                           fsr2l	equ	0xFD9
 14747                           status	equ	0xFD8
 14748                           
 14749 ;; *************** function _Port_CheckPairType *****************
 14750 ;; Defined at:
 14751 ;;		line 112 in file "Library/Port.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 14754 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14755 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14756 ;;  pPair           1   40[BANK0 ] enum E7704
 14757 ;;  pDrive          1   41[BANK0 ] enum E7413
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 14760 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14761 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 14762 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 14763 ;;		 -> PortC(10), PortF(10), NULL(0), 
 14764 ;;  Output          1   44[BANK0 ] enum E7419
 14765 ;;  Pin2            1   43[BANK0 ] enum E7694
 14766 ;;  Pin1            1   42[BANK0 ] enum E7694
 14767 ;; Return value:  Size  Location     Type
 14768 ;;                  1    wreg      enum E7419
 14769 ;; Registers used:
 14770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14771 ;; Tracked objects:
 14772 ;;		On entry : 0/0
 14773 ;;		On exit  : 0/0
 14774 ;;		Unchanged: 0/0
 14775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14777 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;Total ram usage:        9 bytes
 14781 ;; Hardware stack levels used:    1
 14782 ;; Hardware stack levels required when called:   11
 14783 ;; This function calls:
 14784 ;;		_PortProperty_Valid
 14785 ;; This function is called by:
 14786 ;;		_Port_CheckQuadType
 14787 ;;		_Port_SetPairType
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           	psect	text72
 14792  0133AA                     __ptext72:
 14793                           	opt stack 0
 14794  0133AA                     _Port_CheckPairType:
 14795                           	opt stack 15
 14796                           
 14797                           ;Port.c: 114: ePinError Output = ePinErrorState;
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;incstack = 0
 14801  0133AA  0E05               	movlw	5
 14802  0133AC  0100               	movlb	0	; () banked
 14803  0133AE  6FE3               	movwf	Port_CheckPairType@Output& (0+255),b
 14804                           
 14805                           ; BSR set to: 0
 14806                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 14807  0133B0  C0DD  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 14808  0133B4  C0DE  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 14809  0133B8  CFDE F0E4          	movff	postinc2,Port_CheckPairType@Props
 14810  0133BC  CFDD F0E5          	movff	postdec2,Port_CheckPairType@Props+1
 14811                           
 14812                           ; BSR set to: 0
 14813                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 14814  0133C0  0100               	movlb	0	; () banked
 14815  0133C2  51DF               	movf	Port_CheckPairType@pPair& (0+255),w,b
 14816  0133C4  0D02               	mullw	2
 14817  0133C6  CFF3 F0E1          	movff	prodl,Port_CheckPairType@Pin1
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 14821  0133CA  0100               	movlb	0	; () banked
 14822  0133CC  51DF               	movf	Port_CheckPairType@pPair& (0+255),w,b
 14823  0133CE  0D02               	mullw	2
 14824  0133D0  28F3               	incf	prodl,w,c
 14825  0133D2  0100               	movlb	0	; () banked
 14826  0133D4  6FE2               	movwf	Port_CheckPairType@Pin2& (0+255),b
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 14830  0133D6  C0E4  F0C6         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 14831  0133DA  C0E5  F0C7         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 14832  0133DE  C0E0  F0C8         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 14833  0133E2  C0E1  F0C9         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 14834  0133E6  EC99  F097         	call	_PortProperty_Valid	;wreg free
 14835  0133EA  0100               	movlb	0	; () banked
 14836  0133EC  6FE3               	movwf	Port_CheckPairType@Output& (0+255),b
 14837  0133EE  0100               	movlb	0	; () banked
 14838  0133F0  51E3               	movf	Port_CheckPairType@Output& (0+255),w,b
 14839  0133F2  A4D8               	btfss	status,2,c
 14840  0133F4  D00C               	goto	l8869
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 14844  0133F6  C0E4  F0C6         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 14845  0133FA  C0E5  F0C7         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 14846  0133FE  C0E0  F0C8         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 14847  013402  C0E2  F0C9         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 14848  013406  EC99  F097         	call	_PortProperty_Valid	;wreg free
 14849  01340A  0100               	movlb	0	; () banked
 14850  01340C  6FE3               	movwf	Port_CheckPairType@Output& (0+255),b
 14851  01340E                     l8869:
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;Port.c: 124: return Output;
 14855  01340E  0100               	movlb	0	; () banked
 14856  013410  51E3               	movf	Port_CheckPairType@Output& (0+255),w,b
 14857  013412  0012               	return	
 14858  013414                     __end_of_Port_CheckPairType:
 14859                           	opt stack 0
 14860                           tosu	equ	0xFFF
 14861                           tosh	equ	0xFFE
 14862                           tosl	equ	0xFFD
 14863                           pclath	equ	0xFFA
 14864                           tblptru	equ	0xFF8
 14865                           tblptrh	equ	0xFF7
 14866                           tblptrl	equ	0xFF6
 14867                           tablat	equ	0xFF5
 14868                           prodh	equ	0xFF4
 14869                           prodl	equ	0xFF3
 14870                           intcon	equ	0xFF2
 14871                           postinc0	equ	0xFEE
 14872                           wreg	equ	0xFE8
 14873                           indf1	equ	0xFE7
 14874                           postdec1	equ	0xFE5
 14875                           fsr1h	equ	0xFE2
 14876                           fsr1l	equ	0xFE1
 14877                           indf2	equ	0xFDF
 14878                           postinc2	equ	0xFDE
 14879                           postdec2	equ	0xFDD
 14880                           plusw2	equ	0xFDB
 14881                           fsr2h	equ	0xFDA
 14882                           fsr2l	equ	0xFD9
 14883                           status	equ	0xFD8
 14884                           
 14885 ;; *************** function _PortProperty_Valid *****************
 14886 ;; Defined at:
 14887 ;;		line 220 in file "Library/Types.c"
 14888 ;; Parameters:    Size  Location     Type
 14889 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 14890 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14891 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 14892 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 14893 ;;		 -> PortC(10), PortF(10), NULL(0), 
 14894 ;;  pPinDrive       1   17[BANK0 ] enum E7413
 14895 ;;  pPin            1   18[BANK0 ] unsigned char 
 14896 ;; Auto vars:     Size  Location     Type
 14897 ;;  Errors         16   21[BANK0 ] const enum E7419[4][4]
 14898 ;;  Pair            1   37[BANK0 ] enum E7413
 14899 ;; Return value:  Size  Location     Type
 14900 ;;                  1    wreg      enum E7419
 14901 ;; Registers used:
 14902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14903 ;; Tracked objects:
 14904 ;;		On entry : 0/0
 14905 ;;		On exit  : 0/0
 14906 ;;		Unchanged: 0/0
 14907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14908 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;Total ram usage:       23 bytes
 14913 ;; Hardware stack levels used:    1
 14914 ;; Hardware stack levels required when called:   10
 14915 ;; This function calls:
 14916 ;;		_Word_GetPair
 14917 ;; This function is called by:
 14918 ;;		_Port_CheckPairType
 14919 ;;		_Port_SetPinType
 14920 ;; This function uses a non-reentrant model
 14921 ;;
 14922                           
 14923                           	psect	text73
 14924  012F32                     __ptext73:
 14925                           	opt stack 0
 14926  012F32                     _PortProperty_Valid:
 14927                           	opt stack 15
 14928                           
 14929                           ;Types.c: 222: ePinDrive Pair;
 14930                           ;Types.c: 223: const ePinError Errors[4][4] =
 14931                           ;Types.c: 224: {
 14932                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 14933                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 14934                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 14935                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 14936                           ;Types.c: 230: };
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;incstack = 0
 14940  012F32  0EB5               	movlw	low PortProperty_Valid@F7774
 14941  012F34  6EF6               	movwf	tblptrl,c
 14942  012F36                     	if	1	;There is more than 1 active tblptr byte
 14943  012F36  0EFD               	movlw	high PortProperty_Valid@F7774
 14944  012F38  6EF7               	movwf	tblptrh,c
 14945  012F3A                     	endif
 14946  012F3A                     	if	1	;There are 3 active tblptr bytes
 14947  012F3A  0E00               	movlw	low (PortProperty_Valid@F7774 shr (0+16))
 14948  012F3C  6EF8               	movwf	tblptru,c
 14949  012F3E                     	endif
 14950  012F3E  EE20  F0CC         	lfsr	2,PortProperty_Valid@Errors
 14951  012F42  0E0F               	movlw	15
 14952  012F44                     u5550:
 14953  012F44  0009               	tblrd		*+
 14954  012F46  CFF5 FFDE          	movff	tablat,postinc2
 14955  012F4A  06E8               	decf	wreg,f,c
 14956  012F4C  E2FB               	bc	u5550
 14957                           
 14958                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 14959  012F4E  C0C6  F0C3         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 14960  012F52  C0C7  F0C4         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 14961  012F56  C0C9  F0C5         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 14962  012F5A  ECFC  F09C         	call	_Word_GetPair	;wreg free
 14963  012F5E  0100               	movlb	0	; () banked
 14964  012F60  6FDC               	movwf	PortProperty_Valid@Pair& (0+255),b
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 14968  012F62  0E04               	movlw	4
 14969  012F64  0100               	movlb	0	; () banked
 14970  012F66  61C8               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 14971  012F68  D020               	goto	l8809
 14972                           
 14973                           ; BSR set to: 0
 14974  012F6A  0E04               	movlw	4
 14975  012F6C  0100               	movlb	0	; () banked
 14976  012F6E  61DC               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 14977  012F70  D01C               	goto	l8809
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 14981  012F72  0100               	movlb	0	; () banked
 14982  012F74  51C8               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 14983  012F76  0D04               	mullw	4
 14984  012F78  0ECC               	movlw	low PortProperty_Valid@Errors
 14985  012F7A  0100               	movlb	0	; () banked
 14986  012F7C  6FCA               	movwf	??_PortProperty_Valid& (0+255),b
 14987  012F7E  0E00               	movlw	high PortProperty_Valid@Errors
 14988  012F80  0100               	movlb	0	; () banked
 14989  012F82  6FCB               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 14990  012F84  50F3               	movf	prodl,w,c
 14991  012F86  0100               	movlb	0	; () banked
 14992  012F88  27CA               	addwf	??_PortProperty_Valid& (0+255),f,b
 14993  012F8A  50F4               	movf	prodh,w,c
 14994  012F8C  0100               	movlb	0	; () banked
 14995  012F8E  23CB               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 14996  012F90  0100               	movlb	0	; () banked
 14997  012F92  51DC               	movf	PortProperty_Valid@Pair& (0+255),w,b
 14998  012F94  0D01               	mullw	1
 14999  012F96  50F3               	movf	prodl,w,c
 15000  012F98  0100               	movlb	0	; () banked
 15001  012F9A  25CA               	addwf	??_PortProperty_Valid& (0+255),w,b
 15002  012F9C  6ED9               	movwf	fsr2l,c
 15003  012F9E  50F4               	movf	prodh,w,c
 15004  012FA0  0100               	movlb	0	; () banked
 15005  012FA2  21CB               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 15006  012FA4  6EDA               	movwf	fsr2h,c
 15007  012FA6  50DF               	movf	indf2,w,c
 15008                           
 15009                           ; BSR set to: 0
 15010  012FA8  0012               	return	
 15011  012FAA                     l8809:
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;Types.c: 237: return ePinErrorState;
 15015  012FAA  0E05               	movlw	5
 15016  012FAC  0012               	return	
 15017  012FAE                     __end_of_PortProperty_Valid:
 15018                           	opt stack 0
 15019                           tosu	equ	0xFFF
 15020                           tosh	equ	0xFFE
 15021                           tosl	equ	0xFFD
 15022                           pclath	equ	0xFFA
 15023                           tblptru	equ	0xFF8
 15024                           tblptrh	equ	0xFF7
 15025                           tblptrl	equ	0xFF6
 15026                           tablat	equ	0xFF5
 15027                           prodh	equ	0xFF4
 15028                           prodl	equ	0xFF3
 15029                           intcon	equ	0xFF2
 15030                           postinc0	equ	0xFEE
 15031                           wreg	equ	0xFE8
 15032                           indf1	equ	0xFE7
 15033                           postdec1	equ	0xFE5
 15034                           fsr1h	equ	0xFE2
 15035                           fsr1l	equ	0xFE1
 15036                           indf2	equ	0xFDF
 15037                           postinc2	equ	0xFDE
 15038                           postdec2	equ	0xFDD
 15039                           plusw2	equ	0xFDB
 15040                           fsr2h	equ	0xFDA
 15041                           fsr2l	equ	0xFD9
 15042                           status	equ	0xFD8
 15043                           
 15044 ;; *************** function _Word_GetPair *****************
 15045 ;; Defined at:
 15046 ;;		line 156 in file "Library/Types.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;  pInput          2   12[BANK0 ] PTR struct Word
 15049 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15050 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 15051 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 15052 ;;		 -> PortC(10), PortF(10), NULL(0), 
 15053 ;;  pPair           1   14[BANK0 ] unsigned char 
 15054 ;; Auto vars:     Size  Location     Type
 15055 ;;		None
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  1    wreg      unsigned char 
 15058 ;; Registers used:
 15059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15065 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15069 ;;Total ram usage:        3 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    9
 15072 ;; This function calls:
 15073 ;;		_Byte_GetPair
 15074 ;; This function is called by:
 15075 ;;		_Port_Init
 15076 ;;		_Port_SetPin
 15077 ;;		_Port_Set
 15078 ;;		_PortProperty_Valid
 15079 ;;		_Port_SetPair
 15080 ;;		_Port_SetQuad
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           	psect	text74
 15085  0139F8                     __ptext74:
 15086                           	opt stack 0
 15087  0139F8                     _Word_GetPair:
 15088                           	opt stack 15
 15089                           
 15090                           ;Types.c: 158: if (pPair >= 4)
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;incstack = 0
 15094  0139F8  0E03               	movlw	3
 15095  0139FA  0100               	movlb	0	; () banked
 15096  0139FC  65C5               	cpfsgt	Word_GetPair@pPair& (0+255),b
 15097  0139FE  D012               	goto	l8793
 15098                           
 15099                           ; BSR set to: 0
 15100                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 15101  013A00  0E01               	movlw	1
 15102  013A02  0100               	movlb	0	; () banked
 15103  013A04  25C3               	addwf	Word_GetPair@pInput& (0+255),w,b
 15104  013A06  0100               	movlb	0	; () banked
 15105  013A08  6FC0               	movwf	Byte_GetPair@pInput& (0+255),b
 15106  013A0A  0E00               	movlw	0
 15107  013A0C  0100               	movlb	0	; () banked
 15108  013A0E  21C4               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 15109  013A10  0100               	movlb	0	; () banked
 15110  013A12  6FC1               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 15111  013A14  0100               	movlb	0	; () banked
 15112  013A16  51C5               	movf	Word_GetPair@pPair& (0+255),w,b
 15113  013A18  0FFC               	addlw	252
 15114  013A1A  0100               	movlb	0	; () banked
 15115  013A1C  6FC2               	movwf	Byte_GetPair@pPair& (0+255),b
 15116  013A1E  EC98  F09E         	call	_Byte_GetPair	;wreg free
 15117  013A22  0012               	return	
 15118  013A24                     l8793:
 15119                           
 15120                           ;Types.c: 160: else
 15121                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 15122  013A24  C0C3  F0C0         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 15123  013A28  C0C4  F0C1         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 15124  013A2C  C0C5  F0C2         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 15125  013A30  EC98  F09E         	call	_Byte_GetPair	;wreg free
 15126  013A34  0012               	return	
 15127  013A36                     __end_of_Word_GetPair:
 15128                           	opt stack 0
 15129                           tosu	equ	0xFFF
 15130                           tosh	equ	0xFFE
 15131                           tosl	equ	0xFFD
 15132                           pclath	equ	0xFFA
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           postinc0	equ	0xFEE
 15141                           wreg	equ	0xFE8
 15142                           indf1	equ	0xFE7
 15143                           postdec1	equ	0xFE5
 15144                           fsr1h	equ	0xFE2
 15145                           fsr1l	equ	0xFE1
 15146                           indf2	equ	0xFDF
 15147                           postinc2	equ	0xFDE
 15148                           postdec2	equ	0xFDD
 15149                           plusw2	equ	0xFDB
 15150                           fsr2h	equ	0xFDA
 15151                           fsr2l	equ	0xFD9
 15152                           status	equ	0xFD8
 15153                           
 15154 ;; *************** function _Byte_GetPair *****************
 15155 ;; Defined at:
 15156 ;;		line 87 in file "Library/Types.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 15159 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 15160 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 15161 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 15162 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 15163 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 15164 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 15165 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 15166 ;;		 -> NULL(0), 
 15167 ;;  pPair           1   11[BANK0 ] unsigned char 
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      unsigned char 
 15172 ;; Registers used:
 15173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;Total ram usage:        3 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    8
 15186 ;; This function calls:
 15187 ;;		_Byte_GetZone
 15188 ;; This function is called by:
 15189 ;;		_Word_GetPair
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text75
 15194  013D30                     __ptext75:
 15195                           	opt stack 0
 15196  013D30                     _Byte_GetPair:
 15197                           	opt stack 15
 15198                           
 15199                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 15200                           
 15201                           ;incstack = 0
 15202  013D30  C0C0  F0B7         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 15203  013D34  C0C1  F0B8         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 15204  013D38  0E04               	movlw	4
 15205  013D3A  0100               	movlb	0	; () banked
 15206  013D3C  6FB9               	movwf	Byte_GetZone@pMax& (0+255),b
 15207  013D3E  C0C2  F0BA         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 15208  013D42  0E02               	movlw	2
 15209  013D44  0100               	movlb	0	; () banked
 15210  013D46  6FBB               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 15211  013D48  ECAC  F095         	call	_Byte_GetZone	;wreg free
 15212  013D4C  0012               	return	
 15213  013D4E                     __end_of_Byte_GetPair:
 15214                           	opt stack 0
 15215                           tosu	equ	0xFFF
 15216                           tosh	equ	0xFFE
 15217                           tosl	equ	0xFFD
 15218                           pclath	equ	0xFFA
 15219                           tblptru	equ	0xFF8
 15220                           tblptrh	equ	0xFF7
 15221                           tblptrl	equ	0xFF6
 15222                           tablat	equ	0xFF5
 15223                           prodh	equ	0xFF4
 15224                           prodl	equ	0xFF3
 15225                           intcon	equ	0xFF2
 15226                           postinc0	equ	0xFEE
 15227                           wreg	equ	0xFE8
 15228                           indf1	equ	0xFE7
 15229                           postdec1	equ	0xFE5
 15230                           fsr1h	equ	0xFE2
 15231                           fsr1l	equ	0xFE1
 15232                           indf2	equ	0xFDF
 15233                           postinc2	equ	0xFDE
 15234                           postdec2	equ	0xFDD
 15235                           plusw2	equ	0xFDB
 15236                           fsr2h	equ	0xFDA
 15237                           fsr2l	equ	0xFD9
 15238                           status	equ	0xFD8
 15239                           
 15240 ;; *************** function _Byte_GetZone *****************
 15241 ;; Defined at:
 15242 ;;		line 64 in file "Library/Types.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15245 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 15246 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 15247 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 15248 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 15249 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 15250 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 15251 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 15252 ;;		 -> NULL(0), 
 15253 ;;  pMax            1    2[BANK0 ] unsigned char 
 15254 ;;  pChunk          1    3[BANK0 ] unsigned char 
 15255 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  Output          1    8[BANK0 ] unsigned char 
 15258 ;;  Offset          1    7[BANK0 ] unsigned char 
 15259 ;;  MASK            1    6[BANK0 ] unsigned char 
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  1    wreg      unsigned char 
 15262 ;; Registers used:
 15263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15269 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15270 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;Total ram usage:        9 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    7
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_Byte_GetPair
 15280 ;;		_Byte_GetTriple
 15281 ;;		_Byte_GetQuad
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           	psect	text76
 15286  012B58                     __ptext76:
 15287                           	opt stack 0
 15288  012B58                     _Byte_GetZone:
 15289                           	opt stack 15
 15290                           
 15291                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 15292                           
 15293                           ;incstack = 0
 15294  012B58  C0B7  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 15295  012B5C  C0B8  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 15296  012B60  0E00               	movlw	low (__mediumconst shr (0+16))
 15297  012B62  6EF8               	movwf	tblptru,c
 15298  012B64  0E0F               	movlw	(high __ramtop+-1)
 15299  012B66  64F7               	cpfsgt	tblptrh,c
 15300  012B68  D003               	bra	u5517
 15301  012B6A  0008               	tblrd		*
 15302  012B6C  50F5               	movf	tablat,w,c
 15303  012B6E  D005               	bra	u5510
 15304  012B70                     u5517:
 15305  012B70  CFF6 FFE9          	movff	tblptrl,fsr0l
 15306  012B74  CFF7 FFEA          	movff	tblptrh,fsr0h
 15307  012B78  50EF               	movf	indf0,w,c
 15308  012B7A                     u5510:
 15309  012B7A  0100               	movlb	0	; () banked
 15310  012B7C  6FBF               	movwf	Byte_GetZone@Output& (0+255),b
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 15314  012B7E  0100               	movlb	0	; () banked
 15315  012B80  51BB               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 15316  012B82  0D01               	mullw	1
 15317  012B84  0EDF               	movlw	low _MASKS
 15318  012B86  24F3               	addwf	prodl,w,c
 15319  012B88  6EF6               	movwf	tblptrl,c
 15320  012B8A  0EFD               	movlw	high _MASKS
 15321  012B8C  20F4               	addwfc	prodh,w,c
 15322  012B8E  6EF7               	movwf	tblptrh,c
 15323  012B90                     	if	1	;There are 3 active tblptr bytes
 15324  012B90  6AF8               	clrf	tblptru,c
 15325  012B92  0E00               	movlw	low (__mediumconst shr (0+16))
 15326  012B94  22F8               	addwfc	tblptru,f,c
 15327  012B96                     	endif
 15328  012B96  0008               	tblrd		*
 15329  012B98  CFF5 F0BD          	movff	tablat,Byte_GetZone@MASK
 15330                           
 15331                           ; BSR set to: 0
 15332                           ;Types.c: 68: UINT8 Offset = 0;
 15333  012B9C  0E00               	movlw	0
 15334  012B9E  0100               	movlb	0	; () banked
 15335  012BA0  6FBE               	movwf	Byte_GetZone@Offset& (0+255),b
 15336                           
 15337                           ;Types.c: 70: while (pChunk >= pMax)
 15338  012BA2  D006               	goto	l8767
 15339  012BA4                     l8763:
 15340                           
 15341                           ; BSR set to: 0
 15342                           ;Types.c: 71: {
 15343                           ;Types.c: 72: pChunk -= pMax;
 15344  012BA4  0100               	movlb	0	; () banked
 15345  012BA6  51B9               	movf	Byte_GetZone@pMax& (0+255),w,b
 15346  012BA8  0100               	movlb	0	; () banked
 15347  012BAA  5FBA               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;Types.c: 73: Offset += 1;
 15351  012BAC  0100               	movlb	0	; () banked
 15352  012BAE  2BBE               	incf	Byte_GetZone@Offset& (0+255),f,b
 15353  012BB0                     l8767:
 15354                           
 15355                           ; BSR set to: 0
 15356  012BB0  0100               	movlb	0	; () banked
 15357  012BB2  51B9               	movf	Byte_GetZone@pMax& (0+255),w,b
 15358  012BB4  0100               	movlb	0	; () banked
 15359  012BB6  5DBA               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 15360  012BB8  B0D8               	btfsc	status,0,c
 15361  012BBA  D7F4               	goto	l8763
 15362                           
 15363                           ; BSR set to: 0
 15364                           ;Types.c: 74: }
 15365                           ;Types.c: 75: pChunk *= pChunkSize;
 15366                           
 15367                           ; BSR set to: 0
 15368  012BBC  0100               	movlb	0	; () banked
 15369  012BBE  51BB               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 15370  012BC0  0100               	movlb	0	; () banked
 15371  012BC2  03BA               	mulwf	Byte_GetZone@pChunk& (0+255),b
 15372  012BC4  50F3               	movf	prodl,w,c
 15373  012BC6  6FBA               	movwf	Byte_GetZone@pChunk& (0+255),b
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;Types.c: 76: pChunk += Offset;
 15377  012BC8  0100               	movlb	0	; () banked
 15378  012BCA  51BE               	movf	Byte_GetZone@Offset& (0+255),w,b
 15379  012BCC  0100               	movlb	0	; () banked
 15380  012BCE  27BA               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;Types.c: 78: Output >>= pChunk;
 15384  012BD0  0100               	movlb	0	; () banked
 15385  012BD2  29BA               	incf	Byte_GetZone@pChunk& (0+255),w,b
 15386  012BD4  0100               	movlb	0	; () banked
 15387  012BD6  6FBC               	movwf	??_Byte_GetZone& (0+255),b
 15388  012BD8  D003               	goto	u5530
 15389  012BDA                     u5535:
 15390  012BDA  0100               	movlb	0	; () banked
 15391  012BDC  90D8               	bcf	status,0,c
 15392  012BDE  33BF               	rrcf	Byte_GetZone@Output& (0+255),f,b
 15393  012BE0                     u5530:
 15394  012BE0  0100               	movlb	0	; () banked
 15395  012BE2  2FBC               	decfsz	??_Byte_GetZone& (0+255),f,b
 15396  012BE4  D7FA               	goto	u5535
 15397                           
 15398                           ;Types.c: 79: Output &= MASK;
 15399  012BE6  0100               	movlb	0	; () banked
 15400  012BE8  51BD               	movf	Byte_GetZone@MASK& (0+255),w,b
 15401  012BEA  0100               	movlb	0	; () banked
 15402  012BEC  17BF               	andwf	Byte_GetZone@Output& (0+255),f,b
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;Types.c: 80: return Output;
 15406  012BEE  0100               	movlb	0	; () banked
 15407  012BF0  51BF               	movf	Byte_GetZone@Output& (0+255),w,b
 15408  012BF2  0012               	return	
 15409  012BF4                     __end_of_Byte_GetZone:
 15410                           	opt stack 0
 15411                           tosu	equ	0xFFF
 15412                           tosh	equ	0xFFE
 15413                           tosl	equ	0xFFD
 15414                           pclath	equ	0xFFA
 15415                           tblptru	equ	0xFF8
 15416                           tblptrh	equ	0xFF7
 15417                           tblptrl	equ	0xFF6
 15418                           tablat	equ	0xFF5
 15419                           prodh	equ	0xFF4
 15420                           prodl	equ	0xFF3
 15421                           intcon	equ	0xFF2
 15422                           indf0	equ	0xFEF
 15423                           postinc0	equ	0xFEE
 15424                           fsr0h	equ	0xFEA
 15425                           fsr0l	equ	0xFE9
 15426                           wreg	equ	0xFE8
 15427                           indf1	equ	0xFE7
 15428                           postdec1	equ	0xFE5
 15429                           fsr1h	equ	0xFE2
 15430                           fsr1l	equ	0xFE1
 15431                           indf2	equ	0xFDF
 15432                           postinc2	equ	0xFDE
 15433                           postdec2	equ	0xFDD
 15434                           plusw2	equ	0xFDB
 15435                           fsr2h	equ	0xFDA
 15436                           fsr2l	equ	0xFD9
 15437                           status	equ	0xFD8
 15438                           
 15439 ;; *************** function _Byte_SetQuad *****************
 15440 ;; Defined at:
 15441 ;;		line 101 in file "Library/Types.c"
 15442 ;; Parameters:    Size  Location     Type
 15443 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 15444 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 15445 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15446 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15447 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15448 ;;		 -> NULL(0), 
 15449 ;;  pQuad           1   13[BANK0 ] unsigned char 
 15450 ;;  pValue          1   14[BANK0 ] unsigned char 
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;		None
 15453 ;; Return value:  Size  Location     Type
 15454 ;;                  1    wreg      void 
 15455 ;; Registers used:
 15456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/0
 15459 ;;		On exit  : 0/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15465 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15466 ;;Total ram usage:        4 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; Hardware stack levels required when called:    8
 15469 ;; This function calls:
 15470 ;;		_Byte_SetZone
 15471 ;; This function is called by:
 15472 ;;		_Port_SetQuadType
 15473 ;;		_SPI_Init
 15474 ;;		_SPI_MinSpeed
 15475 ;;		_SPI_MaxSpeed
 15476 ;;		_Port_SetQuad
 15477 ;;		_Word_SetQuad
 15478 ;;		_I2C_Init
 15479 ;; This function uses a non-reentrant model
 15480 ;;
 15481                           
 15482                           	psect	text77
 15483  013C74                     __ptext77:
 15484                           	opt stack 0
 15485  013C74                     _Byte_SetQuad:
 15486                           	opt stack 20
 15487                           
 15488                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;incstack = 0
 15492  013C74  C0C2  F0B7         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 15493  013C78  C0C3  F0B8         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 15494  013C7C  0E02               	movlw	2
 15495  013C7E  0100               	movlb	0	; () banked
 15496  013C80  6FB9               	movwf	Byte_SetZone@pMax& (0+255),b
 15497  013C82  C0C4  F0BA         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 15498  013C86  0E04               	movlw	4
 15499  013C88  0100               	movlb	0	; () banked
 15500  013C8A  6FBB               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 15501  013C8C  C0C5  F0BC         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 15502  013C90  EC5C  F093         	call	_Byte_SetZone	;wreg free
 15503  013C94  0012               	return		;funcret
 15504  013C96                     __end_of_Byte_SetQuad:
 15505                           	opt stack 0
 15506                           tosu	equ	0xFFF
 15507                           tosh	equ	0xFFE
 15508                           tosl	equ	0xFFD
 15509                           pclath	equ	0xFFA
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           indf0	equ	0xFEF
 15518                           postinc0	equ	0xFEE
 15519                           fsr0h	equ	0xFEA
 15520                           fsr0l	equ	0xFE9
 15521                           wreg	equ	0xFE8
 15522                           indf1	equ	0xFE7
 15523                           postdec1	equ	0xFE5
 15524                           fsr1h	equ	0xFE2
 15525                           fsr1l	equ	0xFE1
 15526                           indf2	equ	0xFDF
 15527                           postinc2	equ	0xFDE
 15528                           postdec2	equ	0xFDD
 15529                           plusw2	equ	0xFDB
 15530                           fsr2h	equ	0xFDA
 15531                           fsr2l	equ	0xFD9
 15532                           status	equ	0xFD8
 15533                           
 15534 ;; *************** function _Byte_SetZone *****************
 15535 ;; Defined at:
 15536 ;;		line 47 in file "Library/Types.c"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15539 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 15540 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 15541 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 15542 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 15543 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15544 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15545 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15546 ;;		 -> PortC(10), PortF(10), NULL(0), 
 15547 ;;  pMax            1    2[BANK0 ] unsigned char 
 15548 ;;  pChunk          1    3[BANK0 ] unsigned char 
 15549 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 15550 ;;  pValue          1    5[BANK0 ] unsigned char 
 15551 ;; Auto vars:     Size  Location     Type
 15552 ;;  MASK            1   10[BANK0 ] unsigned char 
 15553 ;;  Offset          1    9[BANK0 ] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;                  1    wreg      void 
 15556 ;; Registers used:
 15557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15563 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15566 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15567 ;;Total ram usage:       11 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    7
 15570 ;; This function calls:
 15571 ;;		Nothing
 15572 ;; This function is called by:
 15573 ;;		_Byte_SetPair
 15574 ;;		_Byte_SetQuad
 15575 ;;		_Byte_SetTriple
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579                           	psect	text78
 15580  0126B8                     __ptext78:
 15581                           	opt stack 0
 15582  0126B8                     _Byte_SetZone:
 15583                           	opt stack 19
 15584                           
 15585                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 15586                           
 15587                           ;incstack = 0
 15588  0126B8  0100               	movlb	0	; () banked
 15589  0126BA  51BB               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 15590  0126BC  0D01               	mullw	1
 15591  0126BE  0EDF               	movlw	low _MASKS
 15592  0126C0  24F3               	addwf	prodl,w,c
 15593  0126C2  6EF6               	movwf	tblptrl,c
 15594  0126C4  0EFD               	movlw	high _MASKS
 15595  0126C6  20F4               	addwfc	prodh,w,c
 15596  0126C8  6EF7               	movwf	tblptrh,c
 15597  0126CA                     	if	1	;There are 3 active tblptr bytes
 15598  0126CA  6AF8               	clrf	tblptru,c
 15599  0126CC  0E00               	movlw	low (__mediumconst shr (0+16))
 15600  0126CE  22F8               	addwfc	tblptru,f,c
 15601  0126D0                     	endif
 15602  0126D0  0008               	tblrd		*
 15603  0126D2  CFF5 F0C1          	movff	tablat,Byte_SetZone@MASK
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;Types.c: 50: UINT8 Offset = 0;
 15607  0126D6  0E00               	movlw	0
 15608  0126D8  0100               	movlb	0	; () banked
 15609  0126DA  6FC0               	movwf	Byte_SetZone@Offset& (0+255),b
 15610                           
 15611                           ;Types.c: 52: while (pChunk >= pMax)
 15612  0126DC  D006               	goto	l8827
 15613  0126DE                     l8823:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;Types.c: 53: {
 15617                           ;Types.c: 54: pChunk -= pMax;
 15618  0126DE  0100               	movlb	0	; () banked
 15619  0126E0  51B9               	movf	Byte_SetZone@pMax& (0+255),w,b
 15620  0126E2  0100               	movlb	0	; () banked
 15621  0126E4  5FBA               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 15622                           
 15623                           ; BSR set to: 0
 15624                           ;Types.c: 55: Offset += 1;
 15625  0126E6  0100               	movlb	0	; () banked
 15626  0126E8  2BC0               	incf	Byte_SetZone@Offset& (0+255),f,b
 15627  0126EA                     l8827:
 15628                           
 15629                           ; BSR set to: 0
 15630  0126EA  0100               	movlb	0	; () banked
 15631  0126EC  51B9               	movf	Byte_SetZone@pMax& (0+255),w,b
 15632  0126EE  0100               	movlb	0	; () banked
 15633  0126F0  5DBA               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 15634  0126F2  B0D8               	btfsc	status,0,c
 15635  0126F4  D7F4               	goto	l8823
 15636                           
 15637                           ; BSR set to: 0
 15638                           ;Types.c: 56: }
 15639                           ;Types.c: 57: pChunk *= pChunkSize;
 15640                           
 15641                           ; BSR set to: 0
 15642  0126F6  0100               	movlb	0	; () banked
 15643  0126F8  51BB               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 15644  0126FA  0100               	movlb	0	; () banked
 15645  0126FC  03BA               	mulwf	Byte_SetZone@pChunk& (0+255),b
 15646  0126FE  50F3               	movf	prodl,w,c
 15647  012700  6FBA               	movwf	Byte_SetZone@pChunk& (0+255),b
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;Types.c: 58: pChunk += Offset;
 15651  012702  0100               	movlb	0	; () banked
 15652  012704  51C0               	movf	Byte_SetZone@Offset& (0+255),w,b
 15653  012706  0100               	movlb	0	; () banked
 15654  012708  27BA               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;Types.c: 60: pValue &= MASK;
 15658  01270A  0100               	movlb	0	; () banked
 15659  01270C  51C1               	movf	Byte_SetZone@MASK& (0+255),w,b
 15660  01270E  0100               	movlb	0	; () banked
 15661  012710  17BC               	andwf	Byte_SetZone@pValue& (0+255),f,b
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 15665  012712  C0BA  F0BD         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 15666  012716  C0C1  F0BE         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 15667  01271A  0100               	movlb	0	; () banked
 15668  01271C  2BBD               	incf	??_Byte_SetZone& (0+255),f,b
 15669  01271E  D003               	goto	u5614
 15670  012720                     u5615:
 15671  012720  0100               	movlb	0	; () banked
 15672  012722  90D8               	bcf	status,0,c
 15673  012724  37BE               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 15674  012726                     u5614:
 15675  012726  0100               	movlb	0	; () banked
 15676  012728  2FBD               	decfsz	??_Byte_SetZone& (0+255),f,b
 15677  01272A  D7FA               	goto	u5615
 15678  01272C  0100               	movlb	0	; () banked
 15679  01272E  51BE               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 15680  012730  0AFF               	xorlw	255
 15681  012732  0100               	movlb	0	; () banked
 15682  012734  6FBF               	movwf	(??_Byte_SetZone+2)& (0+255),b
 15683  012736  C0B7  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 15684  01273A  C0B8  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 15685  01273E  0100               	movlb	0	; () banked
 15686  012740  51BF               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 15687  012742  16DF               	andwf	indf2,f,c
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 15691  012744  C0BA  F0BD         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 15692  012748  C0BC  F0BE         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 15693  01274C  0100               	movlb	0	; () banked
 15694  01274E  2BBD               	incf	??_Byte_SetZone& (0+255),f,b
 15695  012750  D003               	goto	u5624
 15696  012752                     u5625:
 15697  012752  0100               	movlb	0	; () banked
 15698  012754  90D8               	bcf	status,0,c
 15699  012756  37BE               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 15700  012758                     u5624:
 15701  012758  0100               	movlb	0	; () banked
 15702  01275A  2FBD               	decfsz	??_Byte_SetZone& (0+255),f,b
 15703  01275C  D7FA               	goto	u5625
 15704  01275E  C0B7  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 15705  012762  C0B8  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 15706  012766  0100               	movlb	0	; () banked
 15707  012768  51BE               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 15708  01276A  12DF               	iorwf	indf2,f,c
 15709                           
 15710                           ; BSR set to: 0
 15711  01276C  0012               	return		;funcret
 15712  01276E                     __end_of_Byte_SetZone:
 15713                           	opt stack 0
 15714                           tosu	equ	0xFFF
 15715                           tosh	equ	0xFFE
 15716                           tosl	equ	0xFFD
 15717                           pclath	equ	0xFFA
 15718                           tblptru	equ	0xFF8
 15719                           tblptrh	equ	0xFF7
 15720                           tblptrl	equ	0xFF6
 15721                           tablat	equ	0xFF5
 15722                           prodh	equ	0xFF4
 15723                           prodl	equ	0xFF3
 15724                           intcon	equ	0xFF2
 15725                           indf0	equ	0xFEF
 15726                           postinc0	equ	0xFEE
 15727                           fsr0h	equ	0xFEA
 15728                           fsr0l	equ	0xFE9
 15729                           wreg	equ	0xFE8
 15730                           indf1	equ	0xFE7
 15731                           postdec1	equ	0xFE5
 15732                           fsr1h	equ	0xFE2
 15733                           fsr1l	equ	0xFE1
 15734                           indf2	equ	0xFDF
 15735                           postinc2	equ	0xFDE
 15736                           postdec2	equ	0xFDD
 15737                           plusw2	equ	0xFDB
 15738                           fsr2h	equ	0xFDA
 15739                           fsr2l	equ	0xFD9
 15740                           status	equ	0xFD8
 15741                           
 15742 ;; *************** function _Console_SetForecolour *****************
 15743 ;; Defined at:
 15744 ;;		line 286 in file "Library/Console.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;  pColour         2    0[BANK0 ] unsigned short 
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;		None
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  1    wreg      void 
 15751 ;; Registers used:
 15752 ;;		None
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;Total ram usage:        2 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    7
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_main
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           	psect	text79
 15773  013E32                     __ptext79:
 15774                           	opt stack 0
 15775  013E32                     _Console_SetForecolour:
 15776                           	opt stack 23
 15777                           
 15778                           ;Console.c: 289: gForecolour = pColour;
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;incstack = 0
 15782  013E32  C0B7  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
 15783  013E36  C0B8  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 15784  013E3A  0012               	return		;funcret
 15785  013E3C                     __end_of_Console_SetForecolour:
 15786                           	opt stack 0
 15787                           tosu	equ	0xFFF
 15788                           tosh	equ	0xFFE
 15789                           tosl	equ	0xFFD
 15790                           pclath	equ	0xFFA
 15791                           tblptru	equ	0xFF8
 15792                           tblptrh	equ	0xFF7
 15793                           tblptrl	equ	0xFF6
 15794                           tablat	equ	0xFF5
 15795                           prodh	equ	0xFF4
 15796                           prodl	equ	0xFF3
 15797                           intcon	equ	0xFF2
 15798                           indf0	equ	0xFEF
 15799                           postinc0	equ	0xFEE
 15800                           fsr0h	equ	0xFEA
 15801                           fsr0l	equ	0xFE9
 15802                           wreg	equ	0xFE8
 15803                           indf1	equ	0xFE7
 15804                           postdec1	equ	0xFE5
 15805                           fsr1h	equ	0xFE2
 15806                           fsr1l	equ	0xFE1
 15807                           indf2	equ	0xFDF
 15808                           postinc2	equ	0xFDE
 15809                           postdec2	equ	0xFDD
 15810                           plusw2	equ	0xFDB
 15811                           fsr2h	equ	0xFDA
 15812                           fsr2l	equ	0xFD9
 15813                           status	equ	0xFD8
 15814                           
 15815 ;; *************** function _Console_Render *****************
 15816 ;; Defined at:
 15817 ;;		line 377 in file "Library/Console.c"
 15818 ;; Parameters:    Size  Location     Type
 15819 ;;		None
 15820 ;; Auto vars:     Size  Location     Type
 15821 ;;  lCursor         4   38[BANK0 ] struct Point
 15822 ;;  y               1   43[BANK0 ] unsigned char 
 15823 ;;  x               1   42[BANK0 ] unsigned char 
 15824 ;;  temp            1   37[BANK0 ] unsigned char 
 15825 ;;  Temp            2    0        unsigned short 
 15826 ;; Return value:  Size  Location     Type
 15827 ;;                  1    wreg      void 
 15828 ;; Registers used:
 15829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15830 ;; Tracked objects:
 15831 ;;		On entry : 0/0
 15832 ;;		On exit  : 0/0
 15833 ;;		Unchanged: 0/0
 15834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;Total ram usage:        9 bytes
 15840 ;; Hardware stack levels used:    1
 15841 ;; Hardware stack levels required when called:   11
 15842 ;; This function calls:
 15843 ;;		_Console_MakeField
 15844 ;;		_LCD_DrawField
 15845 ;;		_LCD_FillRectangle
 15846 ;; This function is called by:
 15847 ;;		_main
 15848 ;; This function uses a non-reentrant model
 15849 ;;
 15850                           
 15851                           	psect	text80
 15852  010EDC                     __ptext80:
 15853                           	opt stack 0
 15854  010EDC                     _Console_Render:
 15855                           	opt stack 19
 15856                           
 15857                           ;Console.c: 379: Colour Temp;
 15858                           ;Console.c: 380: if (change)
 15859                           
 15860                           ;incstack = 0
 15861  010EDC  0100               	movlb	0	; () banked
 15862  010EDE  51FF               	movf	_change& (0+255),w,b
 15863  010EE0  B4D8               	btfsc	status,2,c
 15864  010EE2  0012               	return	
 15865                           
 15866                           ; BSR set to: 0
 15867                           ;Console.c: 381: {
 15868                           ;Console.c: 382: UINT8 x, y, temp;
 15869                           ;Console.c: 383: Point lCursor = {6,6};
 15870  010EE4  C0F1  F0DD         	movff	Console_Render@F7900,Console_Render@lCursor
 15871  010EE8  C0F2  F0DE         	movff	Console_Render@F7900+1,Console_Render@lCursor+1
 15872  010EEC  C0F3  F0DF         	movff	Console_Render@F7900+2,Console_Render@lCursor+2
 15873  010EF0  C0F4  F0E0         	movff	Console_Render@F7900+3,Console_Render@lCursor+3
 15874                           
 15875                           ; BSR set to: 0
 15876                           ;Console.c: 385: if (clearall)
 15877  010EF4  0100               	movlb	0	; () banked
 15878  010EF6  517D               	movf	_clearall& (0+255),w,b
 15879  010EF8  B4D8               	btfsc	status,2,c
 15880  010EFA  D004               	goto	l1056
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;Console.c: 386: {
 15884                           ;Console.c: 389: temp = lBufferY;
 15885  010EFC  C037  F0DC         	movff	_lBufferY,Console_Render@temp
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 15889  010F00  0E0F               	movlw	15
 15890  010F02  6E37               	movwf	_lBufferY,c
 15891  010F04                     l1056:
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;Console.c: 391: }
 15895                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 15896  010F04  0E00               	movlw	0
 15897  010F06  0100               	movlb	0	; () banked
 15898  010F08  6FE2               	movwf	Console_Render@y& (0+255),b
 15899  010F0A  D0DF               	goto	l10609
 15900  010F0C                     l10579:
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;Console.c: 394: {
 15904                           ;Console.c: 395: gForecolour = lCBuffer[y];
 15905  010F0C  0100               	movlb	0	; () banked
 15906  010F0E  51E2               	movf	Console_Render@y& (0+255),w,b
 15907  010F10  0D02               	mullw	2
 15908  010F12  0E00               	movlw	low _lCBuffer
 15909  010F14  24F3               	addwf	prodl,w,c
 15910  010F16  6ED9               	movwf	fsr2l,c
 15911  010F18  0E01               	movlw	high _lCBuffer
 15912  010F1A  20F4               	addwfc	prodh,w,c
 15913  010F1C  6EDA               	movwf	fsr2h,c
 15914  010F1E  CFDE F0FD          	movff	postinc2,_gForecolour
 15915  010F22  CFDD F0FE          	movff	postdec2,_gForecolour+1
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 15919  010F26  0E00               	movlw	0
 15920  010F28  0100               	movlb	0	; () banked
 15921  010F2A  6FE1               	movwf	Console_Render@x& (0+255),b
 15922  010F2C                     l10583:
 15923                           
 15924                           ; BSR set to: 0
 15925  010F2C  0E13               	movlw	19
 15926  010F2E  0100               	movlb	0	; () banked
 15927  010F30  65E1               	cpfsgt	Console_Render@x& (0+255),b
 15928  010F32  D001               	goto	l10587
 15929  010F34  D0BE               	goto	l10603
 15930  010F36                     l10587:
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;Console.c: 397: {
 15934                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 15935  010F36  0100               	movlb	0	; () banked
 15936  010F38  51E2               	movf	Console_Render@y& (0+255),w,b
 15937  010F3A  0D14               	mullw	20
 15938  010F3C  0E04               	movlw	low _lBuffer
 15939  010F3E  0100               	movlb	0	; () banked
 15940  010F40  6FDA               	movwf	??_Console_Render& (0+255),b
 15941  010F42  0E02               	movlw	high _lBuffer
 15942  010F44  0100               	movlb	0	; () banked
 15943  010F46  6FDB               	movwf	(??_Console_Render+1)& (0+255),b
 15944  010F48  50F3               	movf	prodl,w,c
 15945  010F4A  0100               	movlb	0	; () banked
 15946  010F4C  27DA               	addwf	??_Console_Render& (0+255),f,b
 15947  010F4E  50F4               	movf	prodh,w,c
 15948  010F50  0100               	movlb	0	; () banked
 15949  010F52  23DB               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15950  010F54  0100               	movlb	0	; () banked
 15951  010F56  51E1               	movf	Console_Render@x& (0+255),w,b
 15952  010F58  0D01               	mullw	1
 15953  010F5A  50F3               	movf	prodl,w,c
 15954  010F5C  0100               	movlb	0	; () banked
 15955  010F5E  25DA               	addwf	??_Console_Render& (0+255),w,b
 15956  010F60  6ED9               	movwf	fsr2l,c
 15957  010F62  50F4               	movf	prodh,w,c
 15958  010F64  0100               	movlb	0	; () banked
 15959  010F66  21DB               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15960  010F68  6EDA               	movwf	fsr2h,c
 15961  010F6A  AEDF               	btfss	indf2,7,c
 15962  010F6C  D09A               	goto	l10597
 15963                           
 15964                           ; BSR set to: 0
 15965                           ;Console.c: 399: {
 15966                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 15967  010F6E  0100               	movlb	0	; () banked
 15968  010F70  51E2               	movf	Console_Render@y& (0+255),w,b
 15969  010F72  0D14               	mullw	20
 15970  010F74  0E04               	movlw	low _lBuffer
 15971  010F76  0100               	movlb	0	; () banked
 15972  010F78  6FDA               	movwf	??_Console_Render& (0+255),b
 15973  010F7A  0E02               	movlw	high _lBuffer
 15974  010F7C  0100               	movlb	0	; () banked
 15975  010F7E  6FDB               	movwf	(??_Console_Render+1)& (0+255),b
 15976  010F80  50F3               	movf	prodl,w,c
 15977  010F82  0100               	movlb	0	; () banked
 15978  010F84  27DA               	addwf	??_Console_Render& (0+255),f,b
 15979  010F86  50F4               	movf	prodh,w,c
 15980  010F88  0100               	movlb	0	; () banked
 15981  010F8A  23DB               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15982  010F8C  0100               	movlb	0	; () banked
 15983  010F8E  51E1               	movf	Console_Render@x& (0+255),w,b
 15984  010F90  0D01               	mullw	1
 15985  010F92  50F3               	movf	prodl,w,c
 15986  010F94  0100               	movlb	0	; () banked
 15987  010F96  25DA               	addwf	??_Console_Render& (0+255),w,b
 15988  010F98  6ED9               	movwf	fsr2l,c
 15989  010F9A  50F4               	movf	prodh,w,c
 15990  010F9C  0100               	movlb	0	; () banked
 15991  010F9E  21DB               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15992  010FA0  6EDA               	movwf	fsr2h,c
 15993  010FA2  0E7F               	movlw	127
 15994  010FA4  16DF               	andwf	indf2,f,c
 15995                           
 15996                           ;Console.c: 401: if (lBuffer[y][x])
 15997  010FA6  0100               	movlb	0	; () banked
 15998  010FA8  51E2               	movf	Console_Render@y& (0+255),w,b
 15999  010FAA  0D14               	mullw	20
 16000  010FAC  0E04               	movlw	low _lBuffer
 16001  010FAE  0100               	movlb	0	; () banked
 16002  010FB0  6FDA               	movwf	??_Console_Render& (0+255),b
 16003  010FB2  0E02               	movlw	high _lBuffer
 16004  010FB4  0100               	movlb	0	; () banked
 16005  010FB6  6FDB               	movwf	(??_Console_Render+1)& (0+255),b
 16006  010FB8  50F3               	movf	prodl,w,c
 16007  010FBA  0100               	movlb	0	; () banked
 16008  010FBC  27DA               	addwf	??_Console_Render& (0+255),f,b
 16009  010FBE  50F4               	movf	prodh,w,c
 16010  010FC0  0100               	movlb	0	; () banked
 16011  010FC2  23DB               	addwfc	(??_Console_Render+1)& (0+255),f,b
 16012  010FC4  0100               	movlb	0	; () banked
 16013  010FC6  51E1               	movf	Console_Render@x& (0+255),w,b
 16014  010FC8  0D01               	mullw	1
 16015  010FCA  50F3               	movf	prodl,w,c
 16016  010FCC  0100               	movlb	0	; () banked
 16017  010FCE  25DA               	addwf	??_Console_Render& (0+255),w,b
 16018  010FD0  6ED9               	movwf	fsr2l,c
 16019  010FD2  50F4               	movf	prodh,w,c
 16020  010FD4  0100               	movlb	0	; () banked
 16021  010FD6  21DB               	addwfc	(??_Console_Render+1)& (0+255),w,b
 16022  010FD8  6EDA               	movwf	fsr2h,c
 16023  010FDA  50DF               	movf	indf2,w,c
 16024  010FDC  B4D8               	btfsc	status,2,c
 16025  010FDE  D04A               	goto	l10595
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;Console.c: 402: {
 16029                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 16030  010FE0  C076  F0C0         	movff	_gBackcolour,LCD_FillRectangle@pColour
 16031  010FE4  C077  F0C1         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 16032  010FE8  C0DD  F0C2         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 16033  010FEC  C0DE  F0C3         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 16034  010FF0  C0DF  F0C4         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 16035  010FF4  C0E0  F0C5         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 16036  010FF8  C0F5  F0C6         	movff	_gCharSize,LCD_FillRectangle@pSize
 16037  010FFC  C0F6  F0C7         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 16038  011000  C0F7  F0C8         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 16039  011004  C0F8  F0C9         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 16040  011008  ECC2  F098         	call	_LCD_FillRectangle	;wreg free
 16041                           
 16042                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 16043  01100C  0100               	movlb	0	; () banked
 16044  01100E  51E2               	movf	Console_Render@y& (0+255),w,b
 16045  011010  0D14               	mullw	20
 16046  011012  0E04               	movlw	low _lBuffer
 16047  011014  0100               	movlb	0	; () banked
 16048  011016  6FDA               	movwf	??_Console_Render& (0+255),b
 16049  011018  0E02               	movlw	high _lBuffer
 16050  01101A  0100               	movlb	0	; () banked
 16051  01101C  6FDB               	movwf	(??_Console_Render+1)& (0+255),b
 16052  01101E  50F3               	movf	prodl,w,c
 16053  011020  0100               	movlb	0	; () banked
 16054  011022  27DA               	addwf	??_Console_Render& (0+255),f,b
 16055  011024  50F4               	movf	prodh,w,c
 16056  011026  0100               	movlb	0	; () banked
 16057  011028  23DB               	addwfc	(??_Console_Render+1)& (0+255),f,b
 16058  01102A  0100               	movlb	0	; () banked
 16059  01102C  51E1               	movf	Console_Render@x& (0+255),w,b
 16060  01102E  0D01               	mullw	1
 16061  011030  50F3               	movf	prodl,w,c
 16062  011032  0100               	movlb	0	; () banked
 16063  011034  25DA               	addwf	??_Console_Render& (0+255),w,b
 16064  011036  6ED9               	movwf	fsr2l,c
 16065  011038  50F4               	movf	prodh,w,c
 16066  01103A  0100               	movlb	0	; () banked
 16067  01103C  21DB               	addwfc	(??_Console_Render+1)& (0+255),w,b
 16068  01103E  6EDA               	movwf	fsr2h,c
 16069  011040  50DF               	movf	indf2,w,c
 16070  011042  EC17  F091         	call	_Console_MakeField
 16071  011046  C0BC  F0C9         	movff	?_Console_MakeField,LCD_DrawField@pField
 16072  01104A  C0BD  F0CA         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 16073  01104E  C0DD  F0CB         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 16074  011052  C0DE  F0CC         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 16075  011056  C0DF  F0CD         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 16076  01105A  C0E0  F0CE         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 16077  01105E  C0F5  F0CF         	movff	_gCharSize,LCD_DrawField@pSize
 16078  011062  C0F6  F0D0         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 16079  011066  C0F7  F0D1         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 16080  01106A  C0F8  F0D2         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 16081  01106E  EC5A  F095         	call	_LCD_DrawField	;wreg free
 16082                           
 16083                           ;Console.c: 405: }
 16084  011072  D017               	goto	l10597
 16085  011074                     l10595:
 16086                           
 16087                           ;Console.c: 406: else
 16088                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 16089  011074  0E00               	movlw	0
 16090  011076  0100               	movlb	0	; () banked
 16091  011078  6FC1               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 16092  01107A  0E00               	movlw	0
 16093  01107C  6FC0               	movwf	LCD_FillRectangle@pColour& (0+255),b
 16094  01107E  C0DD  F0C2         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 16095  011082  C0DE  F0C3         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 16096  011086  C0DF  F0C4         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 16097  01108A  C0E0  F0C5         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 16098  01108E  C0F5  F0C6         	movff	_gCharSize,LCD_FillRectangle@pSize
 16099  011092  C0F6  F0C7         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 16100  011096  C0F7  F0C8         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 16101  01109A  C0F8  F0C9         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 16102  01109E  ECC2  F098         	call	_LCD_FillRectangle	;wreg free
 16103  0110A2                     l10597:
 16104                           
 16105                           ;Console.c: 408: }
 16106                           ;Console.c: 409: lCursor.x += (5 + 1);
 16107  0110A2  0E06               	movlw	6
 16108  0110A4  0100               	movlb	0	; () banked
 16109  0110A6  27DD               	addwf	Console_Render@lCursor& (0+255),f,b
 16110  0110A8  0E00               	movlw	0
 16111  0110AA  23DE               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 16112                           
 16113                           ; BSR set to: 0
 16114  0110AC  0100               	movlb	0	; () banked
 16115  0110AE  2BE1               	incf	Console_Render@x& (0+255),f,b
 16116  0110B0  D73D               	goto	l10583
 16117  0110B2                     l10603:
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;Console.c: 410: }
 16121                           ;Console.c: 411: lCursor.y += (7 + 1);
 16122  0110B2  0E08               	movlw	8
 16123  0110B4  0100               	movlb	0	; () banked
 16124  0110B6  27DF               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 16125  0110B8  0E00               	movlw	0
 16126  0110BA  23E0               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;Console.c: 412: lCursor.x = 6;
 16130  0110BC  0E00               	movlw	0
 16131  0110BE  0100               	movlb	0	; () banked
 16132  0110C0  6FDE               	movwf	(Console_Render@lCursor+1)& (0+255),b
 16133  0110C2  0E06               	movlw	6
 16134  0110C4  6FDD               	movwf	Console_Render@lCursor& (0+255),b
 16135                           
 16136                           ; BSR set to: 0
 16137  0110C6  0100               	movlb	0	; () banked
 16138  0110C8  2BE2               	incf	Console_Render@y& (0+255),f,b
 16139  0110CA                     l10609:
 16140                           
 16141                           ; BSR set to: 0
 16142  0110CA  0100               	movlb	0	; () banked
 16143  0110CC  51E2               	movf	Console_Render@y& (0+255),w,b
 16144  0110CE  5C37               	subwf	_lBufferY,w,c
 16145  0110D0  B0D8               	btfsc	status,0,c
 16146  0110D2  D71C               	goto	l10579
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;Console.c: 413: }
 16150                           ;Console.c: 415: if (clearall)
 16151                           
 16152                           ; BSR set to: 0
 16153  0110D4  0100               	movlb	0	; () banked
 16154  0110D6  517D               	movf	_clearall& (0+255),w,b
 16155  0110D8  B4D8               	btfsc	status,2,c
 16156  0110DA  0012               	return	
 16157                           
 16158                           ; BSR set to: 0
 16159                           ;Console.c: 416: {
 16160                           ;Console.c: 417: clearall = 0;
 16161  0110DC  0E00               	movlw	0
 16162  0110DE  0100               	movlb	0	; () banked
 16163  0110E0  6F7D               	movwf	_clearall& (0+255),b
 16164                           
 16165                           ; BSR set to: 0
 16166                           ;Console.c: 418: lBufferY = temp;
 16167  0110E2  C0DC  F037         	movff	Console_Render@temp,_lBufferY
 16168                           
 16169                           ; BSR set to: 0
 16170  0110E6  0012               	return	
 16171  0110E8                     __end_of_Console_Render:
 16172                           	opt stack 0
 16173                           tosu	equ	0xFFF
 16174                           tosh	equ	0xFFE
 16175                           tosl	equ	0xFFD
 16176                           pclath	equ	0xFFA
 16177                           tblptru	equ	0xFF8
 16178                           tblptrh	equ	0xFF7
 16179                           tblptrl	equ	0xFF6
 16180                           tablat	equ	0xFF5
 16181                           prodh	equ	0xFF4
 16182                           prodl	equ	0xFF3
 16183                           intcon	equ	0xFF2
 16184                           indf0	equ	0xFEF
 16185                           postinc0	equ	0xFEE
 16186                           fsr0h	equ	0xFEA
 16187                           fsr0l	equ	0xFE9
 16188                           wreg	equ	0xFE8
 16189                           indf1	equ	0xFE7
 16190                           postdec1	equ	0xFE5
 16191                           fsr1h	equ	0xFE2
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           plusw2	equ	0xFDB
 16197                           fsr2h	equ	0xFDA
 16198                           fsr2l	equ	0xFD9
 16199                           status	equ	0xFD8
 16200                           
 16201 ;; *************** function _LCD_FillRectangle *****************
 16202 ;; Defined at:
 16203 ;;		line 318 in file "Library/LCD.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  pColour         2    9[BANK0 ] unsigned short 
 16206 ;;  pPoint          4   11[BANK0 ] struct Point
 16207 ;;  pSize           4   15[BANK0 ] struct Point
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  j               1   22[BANK0 ] unsigned char 
 16210 ;;  i               1   21[BANK0 ] unsigned char 
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  1    wreg      void 
 16213 ;; Registers used:
 16214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16215 ;; Tracked objects:
 16216 ;;		On entry : 0/0
 16217 ;;		On exit  : 0/0
 16218 ;;		Unchanged: 0/0
 16219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16220 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16224 ;;Total ram usage:       14 bytes
 16225 ;; Hardware stack levels used:    1
 16226 ;; Hardware stack levels required when called:   10
 16227 ;; This function calls:
 16228 ;;		_LCD_Word_Write
 16229 ;;		_Set_Addr_Window
 16230 ;; This function is called by:
 16231 ;;		_Console_Render
 16232 ;;		_Console_ClearLine
 16233 ;; This function uses a non-reentrant model
 16234 ;;
 16235                           
 16236                           	psect	text81
 16237  013184                     __ptext81:
 16238                           	opt stack 0
 16239  013184                     _LCD_FillRectangle:
 16240                           	opt stack 19
 16241                           
 16242                           ;LCD.c: 320: UINT8 i = 0x00;
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;incstack = 0
 16246  013184  0E00               	movlw	0
 16247  013186  0100               	movlb	0	; () banked
 16248  013188  6FCC               	movwf	LCD_FillRectangle@i& (0+255),b
 16249                           
 16250                           ;LCD.c: 321: UINT8 j = 0x00;
 16251  01318A  0E00               	movlw	0
 16252  01318C  0100               	movlb	0	; () banked
 16253  01318E  6FCD               	movwf	LCD_FillRectangle@j& (0+255),b
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 16257  013190  C0C4  F0BC         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 16258  013194  0100               	movlb	0	; () banked
 16259  013196  51C2               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 16260  013198  0100               	movlb	0	; () banked
 16261  01319A  25C6               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 16262  01319C  0100               	movlb	0	; () banked
 16263  01319E  6FCA               	movwf	??_LCD_FillRectangle& (0+255),b
 16264  0131A0  0100               	movlb	0	; () banked
 16265  0131A2  05CA               	decf	??_LCD_FillRectangle& (0+255),w,b
 16266  0131A4  0100               	movlb	0	; () banked
 16267  0131A6  6FBD               	movwf	Set_Addr_Window@xe& (0+255),b
 16268  0131A8  0100               	movlb	0	; () banked
 16269  0131AA  51C4               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 16270  0131AC  0100               	movlb	0	; () banked
 16271  0131AE  25C8               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 16272  0131B0  0100               	movlb	0	; () banked
 16273  0131B2  6FCB               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 16274  0131B4  0100               	movlb	0	; () banked
 16275  0131B6  05CB               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 16276  0131B8  0100               	movlb	0	; () banked
 16277  0131BA  6FBE               	movwf	Set_Addr_Window@ye& (0+255),b
 16278  0131BC  0100               	movlb	0	; () banked
 16279  0131BE  51C2               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 16280  0131C0  ECB7  F093         	call	_Set_Addr_Window
 16281                           
 16282                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 16283  0131C4  C0C8  F0CD         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 16284  0131C8                     l10141:
 16285  0131C8  0100               	movlb	0	; () banked
 16286  0131CA  51CD               	movf	LCD_FillRectangle@j& (0+255),w,b
 16287  0131CC  0100               	movlb	0	; () banked
 16288  0131CE  B4D8               	btfsc	status,2,c
 16289  0131D0  0012               	return	
 16290                           
 16291                           ; BSR set to: 0
 16292                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 16293                           
 16294                           ; BSR set to: 0
 16295  0131D2  C0C6  F0CC         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 16296  0131D6                     l10145:
 16297                           
 16298                           ; BSR set to: 0
 16299  0131D6  0100               	movlb	0	; () banked
 16300  0131D8  51CC               	movf	LCD_FillRectangle@i& (0+255),w,b
 16301  0131DA  0100               	movlb	0	; () banked
 16302  0131DC  B4D8               	btfsc	status,2,c
 16303  0131DE  D009               	goto	l10155
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;LCD.c: 333: LCD_Word_Write(pColour);
 16307                           
 16308                           ; BSR set to: 0
 16309                           
 16310                           ; BSR set to: 0
 16311  0131E0  C0C0  F0BC         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 16312  0131E4  C0C1  F0BD         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 16313  0131E8  ECA7  F09E         	call	_LCD_Word_Write	;wreg free
 16314  0131EC  0100               	movlb	0	; () banked
 16315  0131EE  07CC               	decf	LCD_FillRectangle@i& (0+255),f,b
 16316  0131F0  D7F2               	goto	l10145
 16317  0131F2                     l10155:
 16318                           
 16319                           ; BSR set to: 0
 16320  0131F2  0100               	movlb	0	; () banked
 16321  0131F4  07CD               	decf	LCD_FillRectangle@j& (0+255),f,b
 16322  0131F6  D7E8               	goto	l10141
 16323  0131F8                     __end_of_LCD_FillRectangle:
 16324                           	opt stack 0
 16325                           tosu	equ	0xFFF
 16326                           tosh	equ	0xFFE
 16327                           tosl	equ	0xFFD
 16328                           pclath	equ	0xFFA
 16329                           tblptru	equ	0xFF8
 16330                           tblptrh	equ	0xFF7
 16331                           tblptrl	equ	0xFF6
 16332                           tablat	equ	0xFF5
 16333                           prodh	equ	0xFF4
 16334                           prodl	equ	0xFF3
 16335                           intcon	equ	0xFF2
 16336                           indf0	equ	0xFEF
 16337                           postinc0	equ	0xFEE
 16338                           fsr0h	equ	0xFEA
 16339                           fsr0l	equ	0xFE9
 16340                           wreg	equ	0xFE8
 16341                           indf1	equ	0xFE7
 16342                           postdec1	equ	0xFE5
 16343                           fsr1h	equ	0xFE2
 16344                           fsr1l	equ	0xFE1
 16345                           indf2	equ	0xFDF
 16346                           postinc2	equ	0xFDE
 16347                           postdec2	equ	0xFDD
 16348                           plusw2	equ	0xFDB
 16349                           fsr2h	equ	0xFDA
 16350                           fsr2l	equ	0xFD9
 16351                           status	equ	0xFD8
 16352                           
 16353 ;; *************** function _LCD_DrawField *****************
 16354 ;; Defined at:
 16355 ;;		line 393 in file "Library/LCD.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 16358 ;;		 -> Console_MakeField@Fill(70), 
 16359 ;;  pPoint          4   20[BANK0 ] struct Point
 16360 ;;  pSize           4   24[BANK0 ] struct Point
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;  count           2   30[BANK0 ] unsigned short 
 16363 ;;  i               1   34[BANK0 ] unsigned char 
 16364 ;;  ymax            1   33[BANK0 ] unsigned char 
 16365 ;;  xmax            1   32[BANK0 ] unsigned char 
 16366 ;; Return value:  Size  Location     Type
 16367 ;;                  1    wreg      void 
 16368 ;; Registers used:
 16369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16370 ;; Tracked objects:
 16371 ;;		On entry : 0/0
 16372 ;;		On exit  : 0/0
 16373 ;;		Unchanged: 0/0
 16374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16375 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16376 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16378 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16379 ;;Total ram usage:       17 bytes
 16380 ;; Hardware stack levels used:    1
 16381 ;; Hardware stack levels required when called:   10
 16382 ;; This function calls:
 16383 ;;		_LCD_Word_Write
 16384 ;;		_Set_Addr_Window
 16385 ;;		___wmul
 16386 ;; This function is called by:
 16387 ;;		_Console_Render
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           	psect	text82
 16392  012AB4                     __ptext82:
 16393                           	opt stack 0
 16394  012AB4                     _LCD_DrawField:
 16395                           	opt stack 19
 16396                           
 16397                           ;LCD.c: 396: UINT8 i = 0x00;
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;incstack = 0
 16401  012AB4  0E00               	movlw	0
 16402  012AB6  0100               	movlb	0	; () banked
 16403  012AB8  6FD9               	movwf	LCD_DrawField@i& (0+255),b
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 16407  012ABA  0100               	movlb	0	; () banked
 16408  012ABC  51CB               	movf	LCD_DrawField@pPoint& (0+255),w,b
 16409  012ABE  0100               	movlb	0	; () banked
 16410  012AC0  25CF               	addwf	LCD_DrawField@pSize& (0+255),w,b
 16411  012AC2  0100               	movlb	0	; () banked
 16412  012AC4  6FD7               	movwf	LCD_DrawField@xmax& (0+255),b
 16413                           
 16414                           ; BSR set to: 0
 16415                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 16416  012AC6  0100               	movlb	0	; () banked
 16417  012AC8  51CD               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 16418  012ACA  0100               	movlb	0	; () banked
 16419  012ACC  25D1               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 16420  012ACE  0100               	movlb	0	; () banked
 16421  012AD0  6FD8               	movwf	LCD_DrawField@ymax& (0+255),b
 16422                           
 16423                           ; BSR set to: 0
 16424                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 16425  012AD2  C0D1  F0B7         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 16426  012AD6  C0D2  F0B8         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 16427  012ADA  C0CF  F0B9         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 16428  012ADE  C0D0  F0BA         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 16429  012AE2  EC39  F09D         	call	___wmul	;wreg free
 16430  012AE6  C0B7  F0D5         	movff	?___wmul,LCD_DrawField@count
 16431  012AEA  C0B8  F0D6         	movff	?___wmul+1,LCD_DrawField@count+1
 16432                           
 16433                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 16434  012AEE  C0CD  F0BC         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 16435  012AF2  0100               	movlb	0	; () banked
 16436  012AF4  05D7               	decf	LCD_DrawField@xmax& (0+255),w,b
 16437  012AF6  0100               	movlb	0	; () banked
 16438  012AF8  6FBD               	movwf	Set_Addr_Window@xe& (0+255),b
 16439  012AFA  0100               	movlb	0	; () banked
 16440  012AFC  05D8               	decf	LCD_DrawField@ymax& (0+255),w,b
 16441  012AFE  0100               	movlb	0	; () banked
 16442  012B00  6FBE               	movwf	Set_Addr_Window@ye& (0+255),b
 16443  012B02  0100               	movlb	0	; () banked
 16444  012B04  51CB               	movf	LCD_DrawField@pPoint& (0+255),w,b
 16445  012B06  ECB7  F093         	call	_Set_Addr_Window
 16446                           
 16447                           ;LCD.c: 403: for(i = 0; i < count; i++)
 16448  012B0A  0E00               	movlw	0
 16449  012B0C  0100               	movlb	0	; () banked
 16450  012B0E  6FD9               	movwf	LCD_DrawField@i& (0+255),b
 16451  012B10  D013               	goto	l10177
 16452  012B12                     l10173:
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 16456  012B12  0100               	movlb	0	; () banked
 16457  012B14  51D9               	movf	LCD_DrawField@i& (0+255),w,b
 16458  012B16  0D02               	mullw	2
 16459  012B18  50F3               	movf	prodl,w,c
 16460  012B1A  0100               	movlb	0	; () banked
 16461  012B1C  25C9               	addwf	LCD_DrawField@pField& (0+255),w,b
 16462  012B1E  6ED9               	movwf	fsr2l,c
 16463  012B20  50F4               	movf	prodh,w,c
 16464  012B22  0100               	movlb	0	; () banked
 16465  012B24  21CA               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 16466  012B26  6EDA               	movwf	fsr2h,c
 16467  012B28  CFDE F0BC          	movff	postinc2,LCD_Word_Write@value
 16468  012B2C  CFDD F0BD          	movff	postdec2,LCD_Word_Write@value+1
 16469  012B30  ECA7  F09E         	call	_LCD_Word_Write	;wreg free
 16470  012B34  0100               	movlb	0	; () banked
 16471  012B36  2BD9               	incf	LCD_DrawField@i& (0+255),f,b
 16472  012B38                     l10177:
 16473                           
 16474                           ; BSR set to: 0
 16475  012B38  0100               	movlb	0	; () banked
 16476  012B3A  51D9               	movf	LCD_DrawField@i& (0+255),w,b
 16477  012B3C  0100               	movlb	0	; () banked
 16478  012B3E  6FD3               	movwf	??_LCD_DrawField& (0+255),b
 16479  012B40  6BD4               	clrf	(??_LCD_DrawField+1)& (0+255),b
 16480  012B42  0100               	movlb	0	; () banked
 16481  012B44  51D5               	movf	LCD_DrawField@count& (0+255),w,b
 16482  012B46  0100               	movlb	0	; () banked
 16483  012B48  5DD3               	subwf	??_LCD_DrawField& (0+255),w,b
 16484  012B4A  0100               	movlb	0	; () banked
 16485  012B4C  51D6               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 16486  012B4E  0100               	movlb	0	; () banked
 16487  012B50  59D4               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 16488  012B52  B0D8               	btfsc	status,0,c
 16489  012B54  0012               	return	
 16490  012B56  D7DD               	goto	l10173
 16491  012B58                     __end_of_LCD_DrawField:
 16492                           	opt stack 0
 16493                           tosu	equ	0xFFF
 16494                           tosh	equ	0xFFE
 16495                           tosl	equ	0xFFD
 16496                           pclath	equ	0xFFA
 16497                           tblptru	equ	0xFF8
 16498                           tblptrh	equ	0xFF7
 16499                           tblptrl	equ	0xFF6
 16500                           tablat	equ	0xFF5
 16501                           prodh	equ	0xFF4
 16502                           prodl	equ	0xFF3
 16503                           intcon	equ	0xFF2
 16504                           indf0	equ	0xFEF
 16505                           postinc0	equ	0xFEE
 16506                           fsr0h	equ	0xFEA
 16507                           fsr0l	equ	0xFE9
 16508                           wreg	equ	0xFE8
 16509                           indf1	equ	0xFE7
 16510                           postdec1	equ	0xFE5
 16511                           fsr1h	equ	0xFE2
 16512                           fsr1l	equ	0xFE1
 16513                           indf2	equ	0xFDF
 16514                           postinc2	equ	0xFDE
 16515                           postdec2	equ	0xFDD
 16516                           plusw2	equ	0xFDB
 16517                           fsr2h	equ	0xFDA
 16518                           fsr2l	equ	0xFD9
 16519                           status	equ	0xFD8
 16520                           
 16521 ;; *************** function ___wmul *****************
 16522 ;; Defined at:
 16523 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16526 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;  product         2    4[BANK0 ] unsigned int 
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  2    0[BANK0 ] unsigned int 
 16531 ;; Registers used:
 16532 ;;		wreg, status,2, status,0, prodl, prodh
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        6 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; Hardware stack levels required when called:    7
 16545 ;; This function calls:
 16546 ;;		Nothing
 16547 ;; This function is called by:
 16548 ;;		_LCD_DrawField
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           	psect	text83
 16553  013A72                     __ptext83:
 16554                           	opt stack 0
 16555  013A72                     ___wmul:
 16556                           	opt stack 21
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;incstack = 0
 16560  013A72  0100               	movlb	0	; () banked
 16561  013A74  51B7               	movf	___wmul@multiplier& (0+255),w,b
 16562  013A76  0100               	movlb	0	; () banked
 16563  013A78  03B9               	mulwf	___wmul@multiplicand& (0+255),b
 16564  013A7A  CFF3 F0BB          	movff	prodl,___wmul@product
 16565  013A7E  CFF4 F0BC          	movff	prodh,___wmul@product+1
 16566  013A82  0100               	movlb	0	; () banked
 16567  013A84  51B7               	movf	___wmul@multiplier& (0+255),w,b
 16568  013A86  0100               	movlb	0	; () banked
 16569  013A88  03BA               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16570  013A8A  50F3               	movf	prodl,w,c
 16571  013A8C  0100               	movlb	0	; () banked
 16572  013A8E  27BC               	addwf	(___wmul@product+1)& (0+255),f,b
 16573  013A90  0100               	movlb	0	; () banked
 16574  013A92  51B8               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16575  013A94  0100               	movlb	0	; () banked
 16576  013A96  03B9               	mulwf	___wmul@multiplicand& (0+255),b
 16577  013A98  50F3               	movf	prodl,w,c
 16578  013A9A  0100               	movlb	0	; () banked
 16579  013A9C  27BC               	addwf	(___wmul@product+1)& (0+255),f,b
 16580                           
 16581                           ; BSR set to: 0
 16582  013A9E  C0BB  F0B7         	movff	___wmul@product,?___wmul
 16583  013AA2  C0BC  F0B8         	movff	___wmul@product+1,?___wmul+1
 16584  013AA6  0012               	return	
 16585  013AA8                     __end_of___wmul:
 16586                           	opt stack 0
 16587                           tosu	equ	0xFFF
 16588                           tosh	equ	0xFFE
 16589                           tosl	equ	0xFFD
 16590                           pclath	equ	0xFFA
 16591                           tblptru	equ	0xFF8
 16592                           tblptrh	equ	0xFF7
 16593                           tblptrl	equ	0xFF6
 16594                           tablat	equ	0xFF5
 16595                           prodh	equ	0xFF4
 16596                           prodl	equ	0xFF3
 16597                           intcon	equ	0xFF2
 16598                           indf0	equ	0xFEF
 16599                           postinc0	equ	0xFEE
 16600                           fsr0h	equ	0xFEA
 16601                           fsr0l	equ	0xFE9
 16602                           wreg	equ	0xFE8
 16603                           indf1	equ	0xFE7
 16604                           postdec1	equ	0xFE5
 16605                           fsr1h	equ	0xFE2
 16606                           fsr1l	equ	0xFE1
 16607                           indf2	equ	0xFDF
 16608                           postinc2	equ	0xFDE
 16609                           postdec2	equ	0xFDD
 16610                           plusw2	equ	0xFDB
 16611                           fsr2h	equ	0xFDA
 16612                           fsr2l	equ	0xFD9
 16613                           status	equ	0xFD8
 16614                           
 16615 ;; *************** function _Set_Addr_Window *****************
 16616 ;; Defined at:
 16617 ;;		line 214 in file "Library/LCD.c"
 16618 ;; Parameters:    Size  Location     Type
 16619 ;;  xs              1    wreg     unsigned char 
 16620 ;;  ys              1    5[BANK0 ] unsigned char 
 16621 ;;  xe              1    6[BANK0 ] unsigned char 
 16622 ;;  ye              1    7[BANK0 ] unsigned char 
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;  xs              1    8[BANK0 ] unsigned char 
 16625 ;; Return value:  Size  Location     Type
 16626 ;;                  1    wreg      void 
 16627 ;; Registers used:
 16628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16634 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;Total ram usage:        4 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; Hardware stack levels required when called:    9
 16641 ;; This function calls:
 16642 ;;		_LCD_Write
 16643 ;; This function is called by:
 16644 ;;		_LCD_Fill
 16645 ;;		_LCD_FillRectangle
 16646 ;;		_LCD_DrawField
 16647 ;;		_RAM_Address_Set
 16648 ;;		_LCD_DrawPixel
 16649 ;; This function uses a non-reentrant model
 16650 ;;
 16651                           
 16652                           	psect	text84
 16653  01276E                     __ptext84:
 16654                           	opt stack 0
 16655  01276E                     _Set_Addr_Window:
 16656                           	opt stack 19
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;incstack = 0
 16660                           ;Set_Addr_Window@xs stored from wreg
 16661  01276E  0100               	movlb	0	; () banked
 16662  012770  6FBF               	movwf	Set_Addr_Window@xs& (0+255),b
 16663                           
 16664                           ;LCD.c: 216: ys+=2;
 16665  012772  0E02               	movlw	2
 16666  012774  0100               	movlb	0	; () banked
 16667  012776  27BC               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16668                           
 16669                           ;LCD.c: 217: ye+=2;
 16670  012778  0E02               	movlw	2
 16671  01277A  0100               	movlb	0	; () banked
 16672  01277C  27BE               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16673                           
 16674                           ;LCD.c: 218: xs+=3;
 16675  01277E  0E03               	movlw	3
 16676  012780  0100               	movlb	0	; () banked
 16677  012782  27BF               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16678                           
 16679                           ;LCD.c: 219: xe+=3;
 16680  012784  0E03               	movlw	3
 16681  012786  0100               	movlb	0	; () banked
 16682  012788  27BD               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16686  01278A  0E00               	movlw	0
 16687  01278C  0100               	movlb	0	; () banked
 16688  01278E  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16689  012790  0E2A               	movlw	42
 16690  012792  EC4B  F09E         	call	_LCD_Write
 16691                           
 16692                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16693  012796  0E01               	movlw	1
 16694  012798  0100               	movlb	0	; () banked
 16695  01279A  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16696  01279C  0E00               	movlw	0
 16697  01279E  EC4B  F09E         	call	_LCD_Write
 16698                           
 16699                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16700  0127A2  0E01               	movlw	1
 16701  0127A4  0100               	movlb	0	; () banked
 16702  0127A6  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16703  0127A8  0100               	movlb	0	; () banked
 16704  0127AA  51BF               	movf	Set_Addr_Window@xs& (0+255),w,b
 16705  0127AC  EC4B  F09E         	call	_LCD_Write
 16706                           
 16707                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16708  0127B0  0E01               	movlw	1
 16709  0127B2  0100               	movlb	0	; () banked
 16710  0127B4  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16711  0127B6  0E00               	movlw	0
 16712  0127B8  EC4B  F09E         	call	_LCD_Write
 16713                           
 16714                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16715  0127BC  0E01               	movlw	1
 16716  0127BE  0100               	movlb	0	; () banked
 16717  0127C0  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16718  0127C2  0100               	movlb	0	; () banked
 16719  0127C4  51BD               	movf	Set_Addr_Window@xe& (0+255),w,b
 16720  0127C6  EC4B  F09E         	call	_LCD_Write
 16721                           
 16722                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16723  0127CA  0E00               	movlw	0
 16724  0127CC  0100               	movlb	0	; () banked
 16725  0127CE  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16726  0127D0  0E2B               	movlw	43
 16727  0127D2  EC4B  F09E         	call	_LCD_Write
 16728                           
 16729                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16730  0127D6  0E01               	movlw	1
 16731  0127D8  0100               	movlb	0	; () banked
 16732  0127DA  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16733  0127DC  0E00               	movlw	0
 16734  0127DE  EC4B  F09E         	call	_LCD_Write
 16735                           
 16736                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16737  0127E2  0E01               	movlw	1
 16738  0127E4  0100               	movlb	0	; () banked
 16739  0127E6  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16740  0127E8  0100               	movlb	0	; () banked
 16741  0127EA  51BC               	movf	Set_Addr_Window@ys& (0+255),w,b
 16742  0127EC  EC4B  F09E         	call	_LCD_Write
 16743                           
 16744                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16745  0127F0  0E01               	movlw	1
 16746  0127F2  0100               	movlb	0	; () banked
 16747  0127F4  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16748  0127F6  0E00               	movlw	0
 16749  0127F8  EC4B  F09E         	call	_LCD_Write
 16750                           
 16751                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16752  0127FC  0E01               	movlw	1
 16753  0127FE  0100               	movlb	0	; () banked
 16754  012800  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16755  012802  0100               	movlb	0	; () banked
 16756  012804  51BE               	movf	Set_Addr_Window@ye& (0+255),w,b
 16757  012806  EC4B  F09E         	call	_LCD_Write
 16758                           
 16759                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16760  01280A  0E00               	movlw	0
 16761  01280C  0100               	movlb	0	; () banked
 16762  01280E  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16763  012810  0E2C               	movlw	44
 16764  012812  EC4B  F09E         	call	_LCD_Write
 16765  012816  0012               	return		;funcret
 16766  012818                     __end_of_Set_Addr_Window:
 16767                           	opt stack 0
 16768                           tosu	equ	0xFFF
 16769                           tosh	equ	0xFFE
 16770                           tosl	equ	0xFFD
 16771                           pclath	equ	0xFFA
 16772                           tblptru	equ	0xFF8
 16773                           tblptrh	equ	0xFF7
 16774                           tblptrl	equ	0xFF6
 16775                           tablat	equ	0xFF5
 16776                           prodh	equ	0xFF4
 16777                           prodl	equ	0xFF3
 16778                           intcon	equ	0xFF2
 16779                           indf0	equ	0xFEF
 16780                           postinc0	equ	0xFEE
 16781                           fsr0h	equ	0xFEA
 16782                           fsr0l	equ	0xFE9
 16783                           wreg	equ	0xFE8
 16784                           indf1	equ	0xFE7
 16785                           postdec1	equ	0xFE5
 16786                           fsr1h	equ	0xFE2
 16787                           fsr1l	equ	0xFE1
 16788                           indf2	equ	0xFDF
 16789                           postinc2	equ	0xFDE
 16790                           postdec2	equ	0xFDD
 16791                           plusw2	equ	0xFDB
 16792                           fsr2h	equ	0xFDA
 16793                           fsr2l	equ	0xFD9
 16794                           status	equ	0xFD8
 16795                           
 16796 ;; *************** function _LCD_Word_Write *****************
 16797 ;; Defined at:
 16798 ;;		line 198 in file "Library/LCD.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;  value           2    5[BANK0 ] unsigned short 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;		None
 16803 ;; Return value:  Size  Location     Type
 16804 ;;                  1    wreg      void 
 16805 ;; Registers used:
 16806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16812 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16816 ;;Total ram usage:        2 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    9
 16819 ;; This function calls:
 16820 ;;		_LCD_Write
 16821 ;; This function is called by:
 16822 ;;		_LCD_Fill
 16823 ;;		_LCD_FillRectangle
 16824 ;;		_LCD_DrawField
 16825 ;;		_LCD_DrawPixel
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           	psect	text85
 16830  013D4E                     __ptext85:
 16831                           	opt stack 0
 16832  013D4E                     _LCD_Word_Write:
 16833                           	opt stack 19
 16834                           
 16835                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16836                           
 16837                           ;incstack = 0
 16838  013D4E  0E01               	movlw	1
 16839  013D50  0100               	movlb	0	; () banked
 16840  013D52  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16841  013D54  0100               	movlb	0	; () banked
 16842  013D56  51BD               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16843  013D58  EC4B  F09E         	call	_LCD_Write
 16844                           
 16845                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16846  013D5C  0E01               	movlw	1
 16847  013D5E  0100               	movlb	0	; () banked
 16848  013D60  6FBA               	movwf	LCD_Write@mode& (0+255),b
 16849  013D62  0100               	movlb	0	; () banked
 16850  013D64  51BC               	movf	LCD_Word_Write@value& (0+255),w,b
 16851  013D66  EC4B  F09E         	call	_LCD_Write
 16852  013D6A  0012               	return		;funcret
 16853  013D6C                     __end_of_LCD_Word_Write:
 16854                           	opt stack 0
 16855                           tosu	equ	0xFFF
 16856                           tosh	equ	0xFFE
 16857                           tosl	equ	0xFFD
 16858                           pclath	equ	0xFFA
 16859                           tblptru	equ	0xFF8
 16860                           tblptrh	equ	0xFF7
 16861                           tblptrl	equ	0xFF6
 16862                           tablat	equ	0xFF5
 16863                           prodh	equ	0xFF4
 16864                           prodl	equ	0xFF3
 16865                           intcon	equ	0xFF2
 16866                           indf0	equ	0xFEF
 16867                           postinc0	equ	0xFEE
 16868                           fsr0h	equ	0xFEA
 16869                           fsr0l	equ	0xFE9
 16870                           wreg	equ	0xFE8
 16871                           indf1	equ	0xFE7
 16872                           postdec1	equ	0xFE5
 16873                           fsr1h	equ	0xFE2
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           plusw2	equ	0xFDB
 16879                           fsr2h	equ	0xFDA
 16880                           fsr2l	equ	0xFD9
 16881                           status	equ	0xFD8
 16882                           
 16883 ;; *************** function _LCD_Write *****************
 16884 ;; Defined at:
 16885 ;;		line 67 in file "Library/LCD.c"
 16886 ;; Parameters:    Size  Location     Type
 16887 ;;  value           1    wreg     unsigned char 
 16888 ;;  mode            1    3[BANK0 ] enum E7705
 16889 ;; Auto vars:     Size  Location     Type
 16890 ;;  value           1    4[BANK0 ] unsigned char 
 16891 ;; Return value:  Size  Location     Type
 16892 ;;                  1    wreg      void 
 16893 ;; Registers used:
 16894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16895 ;; Tracked objects:
 16896 ;;		On entry : 0/0
 16897 ;;		On exit  : 0/0
 16898 ;;		Unchanged: 0/0
 16899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16900 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;Total ram usage:        2 bytes
 16905 ;; Hardware stack levels used:    1
 16906 ;; Hardware stack levels required when called:    8
 16907 ;; This function calls:
 16908 ;;		_Mode_Set
 16909 ;;		_SPI_Send
 16910 ;; This function is called by:
 16911 ;;		_LCD_Init
 16912 ;;		_LCD_Word_Write
 16913 ;;		_Set_Addr_Window
 16914 ;;		_Set_Rotation
 16915 ;;		_LCD_WriteCMD
 16916 ;;		_LCD_WriteData
 16917 ;;		_LCD_Data_Write
 16918 ;;		_LCD_Data_Write_4k
 16919 ;;		_Invert_Display
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           	psect	text86
 16924  013C96                     __ptext86:
 16925                           	opt stack 0
 16926  013C96                     _LCD_Write:
 16927                           	opt stack 20
 16928                           
 16929                           ;incstack = 0
 16930                           ;LCD_Write@value stored from wreg
 16931  013C96  0100               	movlb	0	; () banked
 16932  013C98  6FBB               	movwf	LCD_Write@value& (0+255),b
 16933                           
 16934                           ;LCD.c: 89: Mode_Set(mode);
 16935  013C9A  0100               	movlb	0	; () banked
 16936  013C9C  51BA               	movf	LCD_Write@mode& (0+255),w,b
 16937  013C9E  ECDB  F09E         	call	_Mode_Set
 16938                           
 16939                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16940  013CA2  0EAF               	movlw	low _SPI2
 16941  013CA4  0100               	movlb	0	; () banked
 16942  013CA6  6FB7               	movwf	SPI_Send@pInput& (0+255),b
 16943  013CA8  0E01               	movlw	high _SPI2
 16944  013CAA  0100               	movlb	0	; () banked
 16945  013CAC  6FB8               	movwf	(SPI_Send@pInput+1)& (0+255),b
 16946  013CAE  C0BB  F0B9         	movff	LCD_Write@value,SPI_Send@pData
 16947  013CB2  EC6A  F099         	call	_SPI_Send	;wreg free
 16948  013CB6  0012               	return		;funcret
 16949  013CB8                     __end_of_LCD_Write:
 16950                           	opt stack 0
 16951                           tosu	equ	0xFFF
 16952                           tosh	equ	0xFFE
 16953                           tosl	equ	0xFFD
 16954                           pclath	equ	0xFFA
 16955                           tblptru	equ	0xFF8
 16956                           tblptrh	equ	0xFF7
 16957                           tblptrl	equ	0xFF6
 16958                           tablat	equ	0xFF5
 16959                           prodh	equ	0xFF4
 16960                           prodl	equ	0xFF3
 16961                           intcon	equ	0xFF2
 16962                           indf0	equ	0xFEF
 16963                           postinc0	equ	0xFEE
 16964                           fsr0h	equ	0xFEA
 16965                           fsr0l	equ	0xFE9
 16966                           wreg	equ	0xFE8
 16967                           indf1	equ	0xFE7
 16968                           postdec1	equ	0xFE5
 16969                           fsr1h	equ	0xFE2
 16970                           fsr1l	equ	0xFE1
 16971                           indf2	equ	0xFDF
 16972                           postinc2	equ	0xFDE
 16973                           postdec2	equ	0xFDD
 16974                           plusw2	equ	0xFDB
 16975                           fsr2h	equ	0xFDA
 16976                           fsr2l	equ	0xFD9
 16977                           status	equ	0xFD8
 16978                           
 16979 ;; *************** function _SPI_Send *****************
 16980 ;; Defined at:
 16981 ;;		line 226 in file "Library/SPI.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16984 ;;		 -> SPI1(11), SPI2(11), 
 16985 ;;  pData           1    2[BANK0 ] unsigned char 
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;		None
 16988 ;; Return value:  Size  Location     Type
 16989 ;;                  1    wreg      unsigned char 
 16990 ;; Registers used:
 16991 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16992 ;; Tracked objects:
 16993 ;;		On entry : 0/0
 16994 ;;		On exit  : 0/0
 16995 ;;		Unchanged: 0/0
 16996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16997 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17000 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17001 ;;Total ram usage:        3 bytes
 17002 ;; Hardware stack levels used:    1
 17003 ;; Hardware stack levels required when called:    7
 17004 ;; This function calls:
 17005 ;;		Nothing
 17006 ;; This function is called by:
 17007 ;;		_LCD_Write
 17008 ;;		_OutSeg
 17009 ;; This function uses a non-reentrant model
 17010 ;;
 17011                           
 17012                           	psect	text87
 17013  0132D4                     __ptext87:
 17014                           	opt stack 0
 17015  0132D4                     _SPI_Send:
 17016                           	opt stack 20
 17017                           
 17018                           ;SPI.c: 253: switch (pInput->mChannel)
 17019                           
 17020                           ;incstack = 0
 17021  0132D4  D026               	goto	l8953
 17022  0132D6                     l8935:
 17023                           
 17024                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 17025  0132D6  C084  FFD9         	movff	_PortC+4,fsr2l
 17026  0132DA  C085  FFDA         	movff	_PortC+5,fsr2h
 17027  0132DE  0100               	movlb	0	; () banked
 17028  0132E0  94DF               	bcf	indf2,2,c
 17029                           
 17030                           ; BSR set to: 0
 17031                           ;SPI.c: 257: SSP1BUF = pData;
 17032  0132E2  C0B9  FFC9         	movff	SPI_Send@pData,4041	;volatile
 17033  0132E6                     l680:
 17034  0132E6  A0C7               	btfss	4039,0,c	;volatile
 17035  0132E8  D7FE               	goto	l680
 17036                           
 17037                           ;SPI.c: 259: pData = SSP1BUF;
 17038  0132EA  CFC9 F0B9          	movff	4041,SPI_Send@pData	;volatile
 17039                           
 17040                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 17041  0132EE  C084  FFD9         	movff	_PortC+4,fsr2l
 17042  0132F2  C085  FFDA         	movff	_PortC+5,fsr2h
 17043  0132F6  0100               	movlb	0	; () banked
 17044  0132F8  84DF               	bsf	indf2,2,c
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;SPI.c: 261: return pData;
 17048                           ;	Return value of _SPI_Send is never used
 17049  0132FA  0012               	return	
 17050  0132FC                     l8943:
 17051                           
 17052                           ; BSR set to: 0
 17053                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 17054  0132FC  C08E  FFD9         	movff	_PortD+4,fsr2l
 17055  013300  C08F  FFDA         	movff	_PortD+5,fsr2h
 17056  013304  0100               	movlb	0	; () banked
 17057  013306  9EDF               	bcf	indf2,7,c
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;SPI.c: 264: SSP2BUF = pData;
 17061  013308  C0B9  FF6F         	movff	SPI_Send@pData,3951	;volatile
 17062  01330C                     l685:
 17063  01330C  A06D               	btfss	3949,0,c	;volatile
 17064  01330E  D7FE               	goto	l685
 17065                           
 17066                           ;SPI.c: 266: pData = SSP2BUF;
 17067  013310  CF6F F0B9          	movff	3951,SPI_Send@pData	;volatile
 17068                           
 17069                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 17070  013314  C08E  FFD9         	movff	_PortD+4,fsr2l
 17071  013318  C08F  FFDA         	movff	_PortD+5,fsr2h
 17072  01331C  0100               	movlb	0	; () banked
 17073  01331E  8EDF               	bsf	indf2,7,c
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;SPI.c: 269: };
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;SPI.c: 268: return pData;
 17080                           ;	Return value of _SPI_Send is never used
 17081  013320  0012               	return	
 17082  013322                     l8953:
 17083  013322  0100               	movlb	0	; () banked
 17084  013324  EE20 F002          	lfsr	2,2
 17085  013328  51B7               	movf	SPI_Send@pInput& (0+255),w,b
 17086  01332A  26D9               	addwf	fsr2l,f,c
 17087  01332C  51B8               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 17088  01332E  22DA               	addwfc	fsr2h,f,c
 17089  013330  50DF               	movf	indf2,w,c
 17090                           
 17091                           ; Switch size 1, requested type "space"
 17092                           ; Number of cases is 2, Range of values is 0 to 1
 17093                           ; switch strategies available:
 17094                           ; Name         Instructions Cycles
 17095                           ; simple_byte            7     4 (average)
 17096                           ;	Chosen strategy is simple_byte
 17097  013332  0A00               	xorlw	0	; case 0
 17098  013334  B4D8               	btfsc	status,2,c
 17099  013336  D7CF               	goto	l8935
 17100  013338  0A01               	xorlw	1	; case 1
 17101  01333A  A4D8               	btfss	status,2,c
 17102  01333C  0012               	return	
 17103  01333E  D7DE               	goto	l8943
 17104  013340                     __end_of_SPI_Send:
 17105                           	opt stack 0
 17106                           tosu	equ	0xFFF
 17107                           tosh	equ	0xFFE
 17108                           tosl	equ	0xFFD
 17109                           pclath	equ	0xFFA
 17110                           tblptru	equ	0xFF8
 17111                           tblptrh	equ	0xFF7
 17112                           tblptrl	equ	0xFF6
 17113                           tablat	equ	0xFF5
 17114                           prodh	equ	0xFF4
 17115                           prodl	equ	0xFF3
 17116                           intcon	equ	0xFF2
 17117                           indf0	equ	0xFEF
 17118                           postinc0	equ	0xFEE
 17119                           fsr0h	equ	0xFEA
 17120                           fsr0l	equ	0xFE9
 17121                           wreg	equ	0xFE8
 17122                           indf1	equ	0xFE7
 17123                           postdec1	equ	0xFE5
 17124                           fsr1h	equ	0xFE2
 17125                           fsr1l	equ	0xFE1
 17126                           indf2	equ	0xFDF
 17127                           postinc2	equ	0xFDE
 17128                           postdec2	equ	0xFDD
 17129                           plusw2	equ	0xFDB
 17130                           fsr2h	equ	0xFDA
 17131                           fsr2l	equ	0xFD9
 17132                           status	equ	0xFD8
 17133                           
 17134 ;; *************** function _Mode_Set *****************
 17135 ;; Defined at:
 17136 ;;		line 40 in file "Library/LCD.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;  pMode           1    wreg     enum E7705
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;  pMode           1    0[BANK0 ] enum E7705
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  1    wreg      void 
 17143 ;; Registers used:
 17144 ;;		wreg
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;Total ram usage:        1 bytes
 17155 ;; Hardware stack levels used:    1
 17156 ;; Hardware stack levels required when called:    7
 17157 ;; This function calls:
 17158 ;;		Nothing
 17159 ;; This function is called by:
 17160 ;;		_LCD_Write
 17161 ;; This function uses a non-reentrant model
 17162 ;;
 17163                           
 17164                           	psect	text88
 17165  013DB6                     __ptext88:
 17166                           	opt stack 0
 17167  013DB6                     _Mode_Set:
 17168                           	opt stack 20
 17169                           
 17170                           ; BSR set to: 0
 17171                           ;incstack = 0
 17172                           ;Mode_Set@pMode stored from wreg
 17173  013DB6  0100               	movlb	0	; () banked
 17174  013DB8  6FB7               	movwf	Mode_Set@pMode& (0+255),b
 17175                           
 17176                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 17177  013DBA  0100               	movlb	0	; () banked
 17178  013DBC  B1B7               	btfsc	Mode_Set@pMode& (0+255),0,b
 17179  013DBE  D002               	bra	u5715
 17180  013DC0  9E85               	bcf	3973,7,c	;volatile
 17181  013DC2  D001               	bra	u5716
 17182  013DC4                     u5715:
 17183  013DC4  8E85               	bsf	3973,7,c	;volatile
 17184  013DC6                     u5716:
 17185  013DC6  0012               	return		;funcret
 17186  013DC8                     __end_of_Mode_Set:
 17187                           	opt stack 0
 17188                           tosu	equ	0xFFF
 17189                           tosh	equ	0xFFE
 17190                           tosl	equ	0xFFD
 17191                           pclath	equ	0xFFA
 17192                           tblptru	equ	0xFF8
 17193                           tblptrh	equ	0xFF7
 17194                           tblptrl	equ	0xFF6
 17195                           tablat	equ	0xFF5
 17196                           prodh	equ	0xFF4
 17197                           prodl	equ	0xFF3
 17198                           intcon	equ	0xFF2
 17199                           indf0	equ	0xFEF
 17200                           postinc0	equ	0xFEE
 17201                           fsr0h	equ	0xFEA
 17202                           fsr0l	equ	0xFE9
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           postdec1	equ	0xFE5
 17206                           fsr1h	equ	0xFE2
 17207                           fsr1l	equ	0xFE1
 17208                           indf2	equ	0xFDF
 17209                           postinc2	equ	0xFDE
 17210                           postdec2	equ	0xFDD
 17211                           plusw2	equ	0xFDB
 17212                           fsr2h	equ	0xFDA
 17213                           fsr2l	equ	0xFD9
 17214                           status	equ	0xFD8
 17215                           
 17216 ;; *************** function _Console_MakeField *****************
 17217 ;; Defined at:
 17218 ;;		line 435 in file "Library/Console.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  pInput          1    wreg     unsigned char 
 17221 ;; Auto vars:     Size  Location     Type
 17222 ;;  pInput          1   11[BANK0 ] unsigned char 
 17223 ;;  y               1   17[BANK0 ] unsigned char 
 17224 ;;  x               1   16[BANK0 ] unsigned char 
 17225 ;;  Column          2   12[BANK0 ] PTR struct Byte
 17226 ;;		 -> Font5x7(480), 
 17227 ;;  Index           2    9[BANK0 ] unsigned short 
 17228 ;; Return value:  Size  Location     Type
 17229 ;;                  2    5[BANK0 ] PTR unsigned short 
 17230 ;; Registers used:
 17231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17232 ;; Tracked objects:
 17233 ;;		On entry : 0/0
 17234 ;;		On exit  : 0/0
 17235 ;;		Unchanged: 0/0
 17236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17237 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;Total ram usage:       13 bytes
 17242 ;; Hardware stack levels used:    1
 17243 ;; Hardware stack levels required when called:    8
 17244 ;; This function calls:
 17245 ;;		_Byte_GetBit
 17246 ;; This function is called by:
 17247 ;;		_Console_Render
 17248 ;; This function uses a non-reentrant model
 17249 ;;
 17250                           
 17251                           	psect	text89
 17252  01222E                     __ptext89:
 17253                           	opt stack 0
 17254  01222E                     _Console_MakeField:
 17255                           	opt stack 21
 17256                           
 17257                           ;incstack = 0
 17258                           ;Console_MakeField@pInput stored from wreg
 17259  01222E  0100               	movlb	0	; () banked
 17260  012230  6FC2               	movwf	Console_MakeField@pInput& (0+255),b
 17261                           
 17262                           ;Console.c: 437: static Colour Fill[7][5];
 17263                           ;Console.c: 438: pInput -= 32;
 17264  012232  0E20               	movlw	32
 17265  012234  0100               	movlb	0	; () banked
 17266  012236  5FC2               	subwf	Console_MakeField@pInput& (0+255),f,b
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 17270  012238  0100               	movlb	0	; () banked
 17271  01223A  51C2               	movf	Console_MakeField@pInput& (0+255),w,b
 17272  01223C  0D05               	mullw	5
 17273  01223E  CFF3 F0C0          	movff	prodl,Console_MakeField@Index
 17274  012242  CFF4 F0C1          	movff	prodh,Console_MakeField@Index+1
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 17278  012246  0EEF               	movlw	low _Font5x7
 17279  012248  0100               	movlb	0	; () banked
 17280  01224A  25C0               	addwf	Console_MakeField@Index& (0+255),w,b
 17281  01224C  0100               	movlb	0	; () banked
 17282  01224E  6FC3               	movwf	Console_MakeField@Column& (0+255),b
 17283  012250  0EFD               	movlw	high _Font5x7
 17284  012252  0100               	movlb	0	; () banked
 17285  012254  21C1               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 17286  012256  0100               	movlb	0	; () banked
 17287  012258  6FC4               	movwf	(Console_MakeField@Column+1)& (0+255),b
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 17291  01225A  0E00               	movlw	0
 17292  01225C  0100               	movlb	0	; () banked
 17293  01225E  6FC7               	movwf	Console_MakeField@x& (0+255),b
 17294  012260                     l10265:
 17295                           
 17296                           ; BSR set to: 0
 17297  012260  0E04               	movlw	4
 17298  012262  0100               	movlb	0	; () banked
 17299  012264  65C7               	cpfsgt	Console_MakeField@x& (0+255),b
 17300  012266  D001               	goto	l10269
 17301  012268  D043               	goto	l10289
 17302  01226A                     l10269:
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;Console.c: 444: {
 17306                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 17307  01226A  0E00               	movlw	0
 17308  01226C  0100               	movlb	0	; () banked
 17309  01226E  6FC8               	movwf	Console_MakeField@y& (0+255),b
 17310  012270                     l10271:
 17311                           
 17312                           ; BSR set to: 0
 17313  012270  0E06               	movlw	6
 17314  012272  0100               	movlb	0	; () banked
 17315  012274  65C8               	cpfsgt	Console_MakeField@y& (0+255),b
 17316  012276  D001               	goto	l10275
 17317  012278  D035               	goto	l10285
 17318  01227A                     l10275:
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 17322  01227A  C0C3  F0B7         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 17323  01227E  C0C4  F0B8         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 17324  012282  C0C8  F0B9         	movff	Console_MakeField@y,Byte_GetBit@pBit
 17325  012286  EC6F  F09D         	call	_Byte_GetBit	;wreg free
 17326  01228A  0900               	iorlw	0
 17327  01228C  A4D8               	btfss	status,2,c
 17328  01228E  D005               	goto	l1082
 17329  012290  C076  F0C5         	movff	_gBackcolour,_Console_MakeField$9772
 17330  012294  C077  F0C6         	movff	_gBackcolour+1,_Console_MakeField$9772+1
 17331  012298  D004               	goto	l10279
 17332  01229A                     l1082:
 17333  01229A  C0FD  F0C5         	movff	_gForecolour,_Console_MakeField$9772
 17334  01229E  C0FE  F0C6         	movff	_gForecolour+1,_Console_MakeField$9772+1
 17335  0122A2                     l10279:
 17336  0122A2  0100               	movlb	0	; () banked
 17337  0122A4  51C8               	movf	Console_MakeField@y& (0+255),w,b
 17338  0122A6  0D0A               	mullw	10
 17339  0122A8  0E24               	movlw	low Console_MakeField@Fill
 17340  0122AA  0100               	movlb	0	; () banked
 17341  0122AC  6FBE               	movwf	??_Console_MakeField& (0+255),b
 17342  0122AE  0E01               	movlw	high Console_MakeField@Fill
 17343  0122B0  0100               	movlb	0	; () banked
 17344  0122B2  6FBF               	movwf	(??_Console_MakeField+1)& (0+255),b
 17345  0122B4  50F3               	movf	prodl,w,c
 17346  0122B6  0100               	movlb	0	; () banked
 17347  0122B8  27BE               	addwf	??_Console_MakeField& (0+255),f,b
 17348  0122BA  50F4               	movf	prodh,w,c
 17349  0122BC  0100               	movlb	0	; () banked
 17350  0122BE  23BF               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 17351  0122C0  0100               	movlb	0	; () banked
 17352  0122C2  51C7               	movf	Console_MakeField@x& (0+255),w,b
 17353  0122C4  0D02               	mullw	2
 17354  0122C6  50F3               	movf	prodl,w,c
 17355  0122C8  0100               	movlb	0	; () banked
 17356  0122CA  25BE               	addwf	??_Console_MakeField& (0+255),w,b
 17357  0122CC  6ED9               	movwf	fsr2l,c
 17358  0122CE  50F4               	movf	prodh,w,c
 17359  0122D0  0100               	movlb	0	; () banked
 17360  0122D2  21BF               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 17361  0122D4  6EDA               	movwf	fsr2h,c
 17362  0122D6  C0C5  FFDE         	movff	_Console_MakeField$9772,postinc2
 17363  0122DA  C0C6  FFDD         	movff	_Console_MakeField$9772+1,postdec2
 17364                           
 17365                           ; BSR set to: 0
 17366  0122DE  0100               	movlb	0	; () banked
 17367  0122E0  2BC8               	incf	Console_MakeField@y& (0+255),f,b
 17368  0122E2  D7C6               	goto	l10271
 17369  0122E4                     l10285:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;Console.c: 447: Column += 1;
 17373  0122E4  0100               	movlb	0	; () banked
 17374  0122E6  4BC3               	infsnz	Console_MakeField@Column& (0+255),f,b
 17375  0122E8  2BC4               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 17376  0122EA  0100               	movlb	0	; () banked
 17377  0122EC  2BC7               	incf	Console_MakeField@x& (0+255),f,b
 17378  0122EE  D7B8               	goto	l10265
 17379  0122F0                     l10289:
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;Console.c: 448: }
 17383                           ;Console.c: 449: return (ColourPtr)Fill;
 17384  0122F0  0E24               	movlw	low Console_MakeField@Fill
 17385  0122F2  0100               	movlb	0	; () banked
 17386  0122F4  6FBC               	movwf	?_Console_MakeField& (0+255),b
 17387  0122F6  0E01               	movlw	high Console_MakeField@Fill
 17388  0122F8  0100               	movlb	0	; () banked
 17389  0122FA  6FBD               	movwf	(?_Console_MakeField+1)& (0+255),b
 17390  0122FC  0012               	return	
 17391  0122FE                     __end_of_Console_MakeField:
 17392                           	opt stack 0
 17393                           tosu	equ	0xFFF
 17394                           tosh	equ	0xFFE
 17395                           tosl	equ	0xFFD
 17396                           pclath	equ	0xFFA
 17397                           tblptru	equ	0xFF8
 17398                           tblptrh	equ	0xFF7
 17399                           tblptrl	equ	0xFF6
 17400                           tablat	equ	0xFF5
 17401                           prodh	equ	0xFF4
 17402                           prodl	equ	0xFF3
 17403                           intcon	equ	0xFF2
 17404                           indf0	equ	0xFEF
 17405                           postinc0	equ	0xFEE
 17406                           fsr0h	equ	0xFEA
 17407                           fsr0l	equ	0xFE9
 17408                           wreg	equ	0xFE8
 17409                           indf1	equ	0xFE7
 17410                           postdec1	equ	0xFE5
 17411                           fsr1h	equ	0xFE2
 17412                           fsr1l	equ	0xFE1
 17413                           indf2	equ	0xFDF
 17414                           postinc2	equ	0xFDE
 17415                           postdec2	equ	0xFDD
 17416                           plusw2	equ	0xFDB
 17417                           fsr2h	equ	0xFDA
 17418                           fsr2l	equ	0xFD9
 17419                           status	equ	0xFD8
 17420                           
 17421 ;; *************** function _Byte_GetBit *****************
 17422 ;; Defined at:
 17423 ;;		line 38 in file "Library/Types.c"
 17424 ;; Parameters:    Size  Location     Type
 17425 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17426 ;;		 -> Font5x7(480), 
 17427 ;;  pBit            1    2[BANK0 ] unsigned char 
 17428 ;; Auto vars:     Size  Location     Type
 17429 ;;  Output          1    4[BANK0 ] unsigned char 
 17430 ;; Return value:  Size  Location     Type
 17431 ;;                  1    wreg      unsigned char 
 17432 ;; Registers used:
 17433 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17434 ;; Tracked objects:
 17435 ;;		On entry : 0/0
 17436 ;;		On exit  : 0/0
 17437 ;;		Unchanged: 0/0
 17438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17439 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17442 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17443 ;;Total ram usage:        5 bytes
 17444 ;; Hardware stack levels used:    1
 17445 ;; Hardware stack levels required when called:    7
 17446 ;; This function calls:
 17447 ;;		Nothing
 17448 ;; This function is called by:
 17449 ;;		_Console_MakeField
 17450 ;;		_Word_GetBit
 17451 ;; This function uses a non-reentrant model
 17452 ;;
 17453                           
 17454                           	psect	text90
 17455  013ADE                     __ptext90:
 17456                           	opt stack 0
 17457  013ADE                     _Byte_GetBit:
 17458                           	opt stack 21
 17459                           
 17460                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;incstack = 0
 17464  013ADE  C0B7  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 17465  013AE2  C0B8  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 17466  013AE6                     	if	0	;tblptru may be non-zero
 17467  013AE6                     	endif
 17468  013AE6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17469  013AE6  0E00               	movlw	low (__mediumconst shr (0+16))
 17470  013AE8  6EF8               	movwf	tblptru,c
 17471  013AEA                     	endif
 17472  013AEA  0008               	tblrd		*
 17473  013AEC  CFF5 F0BB          	movff	tablat,Byte_GetBit@Output
 17474                           
 17475                           ;Types.c: 42: Output >>= pBit;
 17476  013AF0  0100               	movlb	0	; () banked
 17477  013AF2  29B9               	incf	Byte_GetBit@pBit& (0+255),w,b
 17478  013AF4  0100               	movlb	0	; () banked
 17479  013AF6  6FBA               	movwf	??_Byte_GetBit& (0+255),b
 17480  013AF8  D003               	goto	u6190
 17481  013AFA                     u6195:
 17482  013AFA  0100               	movlb	0	; () banked
 17483  013AFC  90D8               	bcf	status,0,c
 17484  013AFE  33BB               	rrcf	Byte_GetBit@Output& (0+255),f,b
 17485  013B00                     u6190:
 17486  013B00  0100               	movlb	0	; () banked
 17487  013B02  2FBA               	decfsz	??_Byte_GetBit& (0+255),f,b
 17488  013B04  D7FA               	goto	u6195
 17489                           
 17490                           ;Types.c: 43: Output &= 1;
 17491  013B06  0E01               	movlw	1
 17492  013B08  0100               	movlb	0	; () banked
 17493  013B0A  17BB               	andwf	Byte_GetBit@Output& (0+255),f,b
 17494                           
 17495                           ; BSR set to: 0
 17496                           ;Types.c: 44: return Output;
 17497  013B0C  0100               	movlb	0	; () banked
 17498  013B0E  51BB               	movf	Byte_GetBit@Output& (0+255),w,b
 17499  013B10  0012               	return	
 17500  013B12                     __end_of_Byte_GetBit:
 17501                           	opt stack 0
 17502                           tosu	equ	0xFFF
 17503                           tosh	equ	0xFFE
 17504                           tosl	equ	0xFFD
 17505                           pclath	equ	0xFFA
 17506                           tblptru	equ	0xFF8
 17507                           tblptrh	equ	0xFF7
 17508                           tblptrl	equ	0xFF6
 17509                           tablat	equ	0xFF5
 17510                           prodh	equ	0xFF4
 17511                           prodl	equ	0xFF3
 17512                           intcon	equ	0xFF2
 17513                           indf0	equ	0xFEF
 17514                           postinc0	equ	0xFEE
 17515                           fsr0h	equ	0xFEA
 17516                           fsr0l	equ	0xFE9
 17517                           wreg	equ	0xFE8
 17518                           indf1	equ	0xFE7
 17519                           postdec1	equ	0xFE5
 17520                           fsr1h	equ	0xFE2
 17521                           fsr1l	equ	0xFE1
 17522                           indf2	equ	0xFDF
 17523                           postinc2	equ	0xFDE
 17524                           postdec2	equ	0xFDD
 17525                           plusw2	equ	0xFDB
 17526                           fsr2h	equ	0xFDA
 17527                           fsr2l	equ	0xFD9
 17528                           status	equ	0xFD8
 17529                           
 17530 ;; *************** function _Console_Init *****************
 17531 ;; Defined at:
 17532 ;;		line 157 in file "Library/Console.c"
 17533 ;; Parameters:    Size  Location     Type
 17534 ;;		None
 17535 ;; Auto vars:     Size  Location     Type
 17536 ;;  y               1    3[BANK0 ] unsigned char 
 17537 ;;  x               1    2[BANK0 ] unsigned char 
 17538 ;; Return value:  Size  Location     Type
 17539 ;;                  1    wreg      void 
 17540 ;; Registers used:
 17541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17542 ;; Tracked objects:
 17543 ;;		On entry : 0/0
 17544 ;;		On exit  : 0/0
 17545 ;;		Unchanged: 0/0
 17546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17550 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17551 ;;Total ram usage:        4 bytes
 17552 ;; Hardware stack levels used:    1
 17553 ;; Hardware stack levels required when called:    7
 17554 ;; This function calls:
 17555 ;;		Nothing
 17556 ;; This function is called by:
 17557 ;;		_main
 17558 ;; This function uses a non-reentrant model
 17559 ;;
 17560                           
 17561                           	psect	text91
 17562  012DA8                     __ptext91:
 17563                           	opt stack 0
 17564  012DA8                     _Console_Init:
 17565                           	opt stack 23
 17566                           
 17567                           ;Console.c: 160: lBufferX = 0;
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;incstack = 0
 17571  012DA8  0E00               	movlw	0
 17572  012DAA  6E36               	movwf	_lBufferX,c
 17573                           
 17574                           ;Console.c: 161: lBufferY = 0;
 17575  012DAC  0E00               	movlw	0
 17576  012DAE  6E37               	movwf	_lBufferY,c
 17577                           
 17578                           ;Console.c: 163: UINT8 x, y;
 17579                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17580  012DB0  0E00               	movlw	0
 17581  012DB2  0100               	movlb	0	; () banked
 17582  012DB4  6FB9               	movwf	Console_Init@x& (0+255),b
 17583  012DB6                     l10547:
 17584                           
 17585                           ; BSR set to: 0
 17586  012DB6  0E13               	movlw	19
 17587  012DB8  0100               	movlb	0	; () banked
 17588  012DBA  65B9               	cpfsgt	Console_Init@x& (0+255),b
 17589  012DBC  D001               	goto	l10551
 17590  012DBE  0012               	return	
 17591  012DC0                     l10551:
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;Console.c: 165: {
 17595                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 17596  012DC0  0E00               	movlw	0
 17597  012DC2  0100               	movlb	0	; () banked
 17598  012DC4  6FBA               	movwf	Console_Init@y& (0+255),b
 17599  012DC6                     l10553:
 17600                           
 17601                           ; BSR set to: 0
 17602  012DC6  0E0E               	movlw	14
 17603  012DC8  0100               	movlb	0	; () banked
 17604  012DCA  65BA               	cpfsgt	Console_Init@y& (0+255),b
 17605  012DCC  D001               	goto	l10557
 17606  012DCE  D02C               	goto	l10563
 17607  012DD0                     l10557:
 17608                           
 17609                           ; BSR set to: 0
 17610                           ;Console.c: 167: {
 17611                           ;Console.c: 168: lBuffer[y][x] = '\0';
 17612  012DD0  0100               	movlb	0	; () banked
 17613  012DD2  51BA               	movf	Console_Init@y& (0+255),w,b
 17614  012DD4  0D14               	mullw	20
 17615  012DD6  0E04               	movlw	low _lBuffer
 17616  012DD8  0100               	movlb	0	; () banked
 17617  012DDA  6FB7               	movwf	??_Console_Init& (0+255),b
 17618  012DDC  0E02               	movlw	high _lBuffer
 17619  012DDE  0100               	movlb	0	; () banked
 17620  012DE0  6FB8               	movwf	(??_Console_Init+1)& (0+255),b
 17621  012DE2  50F3               	movf	prodl,w,c
 17622  012DE4  0100               	movlb	0	; () banked
 17623  012DE6  27B7               	addwf	??_Console_Init& (0+255),f,b
 17624  012DE8  50F4               	movf	prodh,w,c
 17625  012DEA  0100               	movlb	0	; () banked
 17626  012DEC  23B8               	addwfc	(??_Console_Init+1)& (0+255),f,b
 17627  012DEE  0100               	movlb	0	; () banked
 17628  012DF0  51B9               	movf	Console_Init@x& (0+255),w,b
 17629  012DF2  0D01               	mullw	1
 17630  012DF4  50F3               	movf	prodl,w,c
 17631  012DF6  0100               	movlb	0	; () banked
 17632  012DF8  25B7               	addwf	??_Console_Init& (0+255),w,b
 17633  012DFA  6ED9               	movwf	fsr2l,c
 17634  012DFC  50F4               	movf	prodh,w,c
 17635  012DFE  0100               	movlb	0	; () banked
 17636  012E00  21B8               	addwfc	(??_Console_Init+1)& (0+255),w,b
 17637  012E02  6EDA               	movwf	fsr2h,c
 17638  012E04  0E00               	movlw	0
 17639  012E06  6EDF               	movwf	indf2,c
 17640                           
 17641                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 17642  012E08  0100               	movlb	0	; () banked
 17643  012E0A  51BA               	movf	Console_Init@y& (0+255),w,b
 17644  012E0C  0D02               	mullw	2
 17645  012E0E  0E00               	movlw	low _lCBuffer
 17646  012E10  24F3               	addwf	prodl,w,c
 17647  012E12  6ED9               	movwf	fsr2l,c
 17648  012E14  0E01               	movlw	high _lCBuffer
 17649  012E16  20F4               	addwfc	prodh,w,c
 17650  012E18  6EDA               	movwf	fsr2h,c
 17651  012E1A  0EFF               	movlw	255
 17652  012E1C  6EDE               	movwf	postinc2,c
 17653  012E1E  0EFF               	movlw	255
 17654  012E20  6EDD               	movwf	postdec2,c
 17655                           
 17656                           ; BSR set to: 0
 17657  012E22  0100               	movlb	0	; () banked
 17658  012E24  2BBA               	incf	Console_Init@y& (0+255),f,b
 17659  012E26  D7CF               	goto	l10553
 17660  012E28                     l10563:
 17661                           
 17662                           ; BSR set to: 0
 17663  012E28  0100               	movlb	0	; () banked
 17664  012E2A  2BB9               	incf	Console_Init@x& (0+255),f,b
 17665  012E2C  D7C4               	goto	l10547
 17666  012E2E                     __end_of_Console_Init:
 17667                           	opt stack 0
 17668                           tosu	equ	0xFFF
 17669                           tosh	equ	0xFFE
 17670                           tosl	equ	0xFFD
 17671                           pclath	equ	0xFFA
 17672                           tblptru	equ	0xFF8
 17673                           tblptrh	equ	0xFF7
 17674                           tblptrl	equ	0xFF6
 17675                           tablat	equ	0xFF5
 17676                           prodh	equ	0xFF4
 17677                           prodl	equ	0xFF3
 17678                           intcon	equ	0xFF2
 17679                           indf0	equ	0xFEF
 17680                           postinc0	equ	0xFEE
 17681                           fsr0h	equ	0xFEA
 17682                           fsr0l	equ	0xFE9
 17683                           wreg	equ	0xFE8
 17684                           indf1	equ	0xFE7
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           plusw2	equ	0xFDB
 17692                           fsr2h	equ	0xFDA
 17693                           fsr2l	equ	0xFD9
 17694                           status	equ	0xFD8
 17695                           
 17696 ;; *************** function _ISR_Function *****************
 17697 ;; Defined at:
 17698 ;;		line 37 in file "Library/ISR.c"
 17699 ;; Parameters:    Size  Location     Type
 17700 ;;		None
 17701 ;; Auto vars:     Size  Location     Type
 17702 ;;		None
 17703 ;; Return value:  Size  Location     Type
 17704 ;;                  1    wreg      void 
 17705 ;; Registers used:
 17706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17707 ;; Tracked objects:
 17708 ;;		On entry : 0/0
 17709 ;;		On exit  : 0/0
 17710 ;;		Unchanged: 0/0
 17711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17716 ;;Total ram usage:       14 bytes
 17717 ;; Hardware stack levels used:    1
 17718 ;; Hardware stack levels required when called:    6
 17719 ;; This function calls:
 17720 ;;		_Timer0_ISR
 17721 ;; This function is called by:
 17722 ;;		Interrupt level 2
 17723 ;; This function uses a non-reentrant model
 17724 ;;
 17725                           
 17726                           	psect	intcode
 17727  001408                     __pintcode:
 17728                           	opt stack 0
 17729  001408                     _ISR_Function:
 17730                           	opt stack 14
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;incstack = 0
 17734  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17735  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 17736  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 17737  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 17738  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 17739  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 17740  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 17741  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 17742  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 17743  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 17744  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 17745  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 17746  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 17747  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 17748  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 17749                           
 17750                           ;ISR.c: 40: INTCONbits.INT0IF = 0;
 17751  001442  92F2               	bcf	intcon,1,c	;volatile
 17752                           
 17753                           ;ISR.c: 66: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 17754  001444  B4F2               	btfsc	intcon,2,c	;volatile
 17755  001446  AAF2               	btfss	intcon,5,c	;volatile
 17756  001448  D002               	goto	i2l1460
 17757                           
 17758                           ;ISR.c: 67: Timer0_ISR();
 17759  00144A  ECE9  F09D         	call	_Timer0_ISR	;wreg free
 17760  00144E                     i2l1460:
 17761  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 17762  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 17763  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 17764  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 17765  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 17766  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 17767  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 17768  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 17769  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 17770  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 17771  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 17772  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 17773  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 17774  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 17775  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17776  001488  0011               	retfie		f
 17777  00148A                     __end_of_ISR_Function:
 17778                           	opt stack 0
 17779                           tosu	equ	0xFFF
 17780                           tosh	equ	0xFFE
 17781                           tosl	equ	0xFFD
 17782                           pclatu	equ	0xFFB
 17783                           pclath	equ	0xFFA
 17784                           tblptru	equ	0xFF8
 17785                           tblptrh	equ	0xFF7
 17786                           tblptrl	equ	0xFF6
 17787                           tablat	equ	0xFF5
 17788                           prodh	equ	0xFF4
 17789                           prodl	equ	0xFF3
 17790                           intcon	equ	0xFF2
 17791                           indf0	equ	0xFEF
 17792                           postinc0	equ	0xFEE
 17793                           fsr0h	equ	0xFEA
 17794                           fsr0l	equ	0xFE9
 17795                           wreg	equ	0xFE8
 17796                           indf1	equ	0xFE7
 17797                           postdec1	equ	0xFE5
 17798                           fsr1h	equ	0xFE2
 17799                           fsr1l	equ	0xFE1
 17800                           indf2	equ	0xFDF
 17801                           postinc2	equ	0xFDE
 17802                           postdec2	equ	0xFDD
 17803                           plusw2	equ	0xFDB
 17804                           fsr2h	equ	0xFDA
 17805                           fsr2l	equ	0xFD9
 17806                           status	equ	0xFD8
 17807                           
 17808 ;; *************** function _Timer0_ISR *****************
 17809 ;; Defined at:
 17810 ;;		line 94 in file "Library/Timer0.c"
 17811 ;; Parameters:    Size  Location     Type
 17812 ;;		None
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;		None
 17815 ;; Return value:  Size  Location     Type
 17816 ;;                  1    wreg      void 
 17817 ;; Registers used:
 17818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17819 ;; Tracked objects:
 17820 ;;		On entry : 0/0
 17821 ;;		On exit  : 0/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17828 ;;Total ram usage:        0 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    5
 17831 ;; This function calls:
 17832 ;;		Absolute function
 17833 ;;		i2_Motor_Step
 17834 ;;		i2_Timer0_Stop
 17835 ;; This function is called by:
 17836 ;;		_ISR_Function
 17837 ;; This function uses a non-reentrant model
 17838 ;;
 17839                           
 17840                           	psect	text93
 17841  013BD2                     __ptext93:
 17842                           	opt stack 0
 17843  013BD2                     _Timer0_ISR:
 17844                           	opt stack 14
 17845                           
 17846                           ;Timer0.c: 96: Timer0_Stop();
 17847                           
 17848                           ;incstack = 0
 17849  013BD2  EC25  F09F         	call	i2_Timer0_Stop	;wreg free
 17850                           
 17851                           ;Timer0.c: 99: if (gISR != 0)
 17852  013BD6  0100               	movlb	0	; () banked
 17853  013BD8  516E               	movf	_gISR& (0+255),w,b
 17854  013BDA  0100               	movlb	0	; () banked
 17855  013BDC  116F               	iorwf	(_gISR+1)& (0+255),w,b
 17856  013BDE  0100               	movlb	0	; () banked
 17857  013BE0  1170               	iorwf	(_gISR+2)& (0+255),w,b
 17858  013BE2  B4D8               	btfsc	status,2,c
 17859  013BE4  0012               	return	
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;Timer0.c: 100: gISR();
 17863  013BE6  D801               	call	i2u787_48
 17864  013BE8  0012               	return	
 17865  013BEA                     i2u787_48:
 17866  013BEA  0005               	push	
 17867  013BEC  6EFA               	movwf	pclath,c
 17868  013BEE  0100               	movlb	0	; () banked
 17869  013BF0  516E               	movf	_gISR& (0+255),w,b
 17870  013BF2  6EFD               	movwf	tosl,c
 17871  013BF4  516F               	movf	(_gISR+1)& (0+255),w,b
 17872  013BF6  6EFE               	movwf	tosh,c
 17873  013BF8  5170               	movf	(_gISR+2)& (0+255),w,b
 17874  013BFA  6EFF               	movwf	tosu,c
 17875  013BFC  50FA               	movf	pclath,w,c
 17876  013BFE  0012               	return		;indir
 17877  013C00                     __end_of_Timer0_ISR:
 17878                           	opt stack 0
 17879                           tosu	equ	0xFFF
 17880                           tosh	equ	0xFFE
 17881                           tosl	equ	0xFFD
 17882                           pclatu	equ	0xFFB
 17883                           pclath	equ	0xFFA
 17884                           tblptru	equ	0xFF8
 17885                           tblptrh	equ	0xFF7
 17886                           tblptrl	equ	0xFF6
 17887                           tablat	equ	0xFF5
 17888                           prodh	equ	0xFF4
 17889                           prodl	equ	0xFF3
 17890                           intcon	equ	0xFF2
 17891                           indf0	equ	0xFEF
 17892                           postinc0	equ	0xFEE
 17893                           fsr0h	equ	0xFEA
 17894                           fsr0l	equ	0xFE9
 17895                           wreg	equ	0xFE8
 17896                           indf1	equ	0xFE7
 17897                           postdec1	equ	0xFE5
 17898                           fsr1h	equ	0xFE2
 17899                           fsr1l	equ	0xFE1
 17900                           indf2	equ	0xFDF
 17901                           postinc2	equ	0xFDE
 17902                           postdec2	equ	0xFDD
 17903                           plusw2	equ	0xFDB
 17904                           fsr2h	equ	0xFDA
 17905                           fsr2l	equ	0xFD9
 17906                           status	equ	0xFD8
 17907                           
 17908 ;; *************** function i2_Motor_Step *****************
 17909 ;; Defined at:
 17910 ;;		line 75 in file "Library/Motor.c"
 17911 ;; Parameters:    Size  Location     Type
 17912 ;;		None
 17913 ;; Auto vars:     Size  Location     Type
 17914 ;;		None
 17915 ;; Return value:  Size  Location     Type
 17916 ;;                  1    wreg      void 
 17917 ;; Registers used:
 17918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17919 ;; Tracked objects:
 17920 ;;		On entry : 0/0
 17921 ;;		On exit  : 0/0
 17922 ;;		Unchanged: 0/0
 17923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;Total ram usage:        2 bytes
 17929 ;; Hardware stack levels used:    1
 17930 ;; Hardware stack levels required when called:    4
 17931 ;; This function calls:
 17932 ;;		i2_MXK_Queue
 17933 ;;		i2_MXK_Release
 17934 ;;		i2_MXK_SwitchTo
 17935 ;;		i2_Port_SetPin
 17936 ;;		i2_Timer0_Restart
 17937 ;;		i2_Timer0_Stop
 17938 ;; This function is called by:
 17939 ;; This function uses a non-reentrant model
 17940 ;;
 17941                           
 17942                           	psect	text94
 17943  011E8E                     __ptext94:
 17944                           	opt stack 0
 17945  011E8E                     i2_Motor_Step:
 17946                           	opt stack 14
 17947                           
 17948                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 17949                           
 17950                           ;incstack = 0
 17951  011E8E  EE20 F004          	lfsr	2,4
 17952  011E92  502C               	movf	_lMotor,w,c
 17953  011E94  26D9               	addwf	fsr2l,f,c
 17954  011E96  502D               	movf	_lMotor+1,w,c
 17955  011E98  22DA               	addwfc	fsr2h,f,c
 17956  011E9A  50DF               	movf	indf2,w,c
 17957  011E9C  EC54  F09D         	call	i2_MXK_SwitchTo
 17958  011EA0  0900               	iorlw	0
 17959  011EA2  B4D8               	btfsc	status,2,c
 17960  011EA4  D06A               	goto	i2l7523
 17961                           
 17962                           ;Motor.c: 78: {
 17963                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 17964  011EA6  C02C  FFD9         	movff	_lMotor,fsr2l
 17965  011EAA  C02D  FFDA         	movff	_lMotor+1,fsr2h
 17966  011EAE  50DE               	movf	postinc2,w,c
 17967  011EB0  10DE               	iorwf	postinc2,w,c
 17968  011EB2  B4D8               	btfsc	status,2,c
 17969  011EB4  D05D               	goto	i2l7517
 17970                           
 17971                           ;Motor.c: 80: {
 17972                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 17973  011EB6  C02C  FFD9         	movff	_lMotor,fsr2l
 17974  011EBA  C02D  FFDA         	movff	_lMotor+1,fsr2h
 17975  011EBE  0E01               	movlw	1
 17976  011EC0  BEDB               	btfsc	plusw2,7,c
 17977  011EC2  D022               	goto	i2l7501
 17978  011EC4  0E01               	movlw	1
 17979  011EC6  50DB               	movf	plusw2,w,c
 17980  011EC8  E103               	bnz	i2u424_40
 17981  011ECA  04DE               	decf	postinc2,w,c
 17982  011ECC  A0D8               	btfss	status,0,c
 17983  011ECE  D01C               	goto	i2l7501
 17984  011ED0                     i2u424_40:
 17985                           
 17986                           ;Motor.c: 83: {
 17987                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17988  011ED0  C02C  FFD9         	movff	_lMotor,fsr2l
 17989  011ED4  C02D  FFDA         	movff	_lMotor+1,fsr2h
 17990  011ED8  28DE               	incf	postinc2,w,c
 17991  011EDA  E104               	bnz	i2u425_40
 17992  011EDC  0E7F               	movlw	127
 17993  011EDE  18DE               	xorwf	postinc2,w,c
 17994  011EE0  B4D8               	btfsc	status,2,c
 17995  011EE2  D007               	goto	i2l7499
 17996  011EE4                     i2u425_40:
 17997                           
 17998                           ;Motor.c: 85: lMotor->mDelta --;
 17999  011EE4  C02C  FFD9         	movff	_lMotor,fsr2l
 18000  011EE8  C02D  FFDA         	movff	_lMotor+1,fsr2h
 18001  011EEC  06DE               	decf	postinc2,f,c
 18002  011EEE  0E00               	movlw	0
 18003  011EF0  5ADD               	subwfb	postdec2,f,c
 18004  011EF2                     i2l7499:
 18005                           
 18006                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18007  011EF2  0E94               	movlw	low _PortE
 18008  011EF4  6E10               	movwf	i2Port_SetPin@pInput,c
 18009  011EF6  0E00               	movlw	high _PortE
 18010  011EF8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 18011  011EFA  0E00               	movlw	0
 18012  011EFC  6E12               	movwf	i2Port_SetPin@pPin,c
 18013  011EFE  0E01               	movlw	1
 18014  011F00  6E13               	movwf	i2Port_SetPin@pValue,c
 18015  011F02  EC0C  F094         	call	i2_Port_SetPin	;wreg free
 18016                           
 18017                           ;Motor.c: 88: }
 18018  011F06  D01B               	goto	i2l7507
 18019  011F08                     i2l7501:
 18020                           
 18021                           ;Motor.c: 89: else
 18022                           ;Motor.c: 90: {
 18023                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18024  011F08  C02C  FFD9         	movff	_lMotor,fsr2l
 18025  011F0C  C02D  FFDA         	movff	_lMotor+1,fsr2h
 18026  011F10  04DE               	decf	postinc2,w,c
 18027  011F12  E104               	bnz	i2u426_40
 18028  011F14  0E80               	movlw	128
 18029  011F16  18DE               	xorwf	postinc2,w,c
 18030  011F18  B4D8               	btfsc	status,2,c
 18031  011F1A  D007               	goto	i2l7505
 18032  011F1C                     i2u426_40:
 18033                           
 18034                           ;Motor.c: 92: lMotor->mDelta ++;
 18035  011F1C  C02C  FFD9         	movff	_lMotor,fsr2l
 18036  011F20  C02D  FFDA         	movff	_lMotor+1,fsr2h
 18037  011F24  2ADE               	incf	postinc2,f,c
 18038  011F26  0E00               	movlw	0
 18039  011F28  22DD               	addwfc	postdec2,f,c
 18040  011F2A                     i2l7505:
 18041                           
 18042                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18043  011F2A  0E94               	movlw	low _PortE
 18044  011F2C  6E10               	movwf	i2Port_SetPin@pInput,c
 18045  011F2E  0E00               	movlw	high _PortE
 18046  011F30  6E11               	movwf	i2Port_SetPin@pInput+1,c
 18047  011F32  0E00               	movlw	0
 18048  011F34  6E12               	movwf	i2Port_SetPin@pPin,c
 18049  011F36  0E00               	movlw	0
 18050  011F38  6E13               	movwf	i2Port_SetPin@pValue,c
 18051  011F3A  EC0C  F094         	call	i2_Port_SetPin	;wreg free
 18052  011F3E                     i2l7507:
 18053                           
 18054                           ;Motor.c: 95: }
 18055                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18056  011F3E  0E94               	movlw	low _PortE
 18057  011F40  6E10               	movwf	i2Port_SetPin@pInput,c
 18058  011F42  0E00               	movlw	high _PortE
 18059  011F44  6E11               	movwf	i2Port_SetPin@pInput+1,c
 18060  011F46  0E01               	movlw	1
 18061  011F48  6E12               	movwf	i2Port_SetPin@pPin,c
 18062  011F4A  0E01               	movlw	1
 18063  011F4C  6E13               	movwf	i2Port_SetPin@pValue,c
 18064  011F4E  EC0C  F094         	call	i2_Port_SetPin	;wreg free
 18065                           
 18066                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18067  011F52  0E94               	movlw	low _PortE
 18068  011F54  6E10               	movwf	i2Port_SetPin@pInput,c
 18069  011F56  0E00               	movlw	high _PortE
 18070  011F58  6E11               	movwf	i2Port_SetPin@pInput+1,c
 18071  011F5A  0E01               	movlw	1
 18072  011F5C  6E12               	movwf	i2Port_SetPin@pPin,c
 18073  011F5E  0E00               	movlw	0
 18074  011F60  6E13               	movwf	i2Port_SetPin@pValue,c
 18075  011F62  EC0C  F094         	call	i2_Port_SetPin	;wreg free
 18076                           
 18077                           ;Motor.c: 101: MXK_Release();
 18078  011F66  EC28  F09F         	call	i2_MXK_Release	;wreg free
 18079                           
 18080                           ;Motor.c: 102: Timer0_Restart();
 18081  011F6A  EC0E  F09F         	call	i2_Timer0_Restart	;wreg free
 18082                           
 18083                           ;Motor.c: 103: return;
 18084  011F6E  0012               	return	
 18085  011F70                     i2l7517:
 18086                           
 18087                           ;Motor.c: 104: }
 18088                           ;Motor.c: 105: MXK_Release();
 18089  011F70  EC28  F09F         	call	i2_MXK_Release	;wreg free
 18090                           
 18091                           ;Motor.c: 106: Timer0_Stop();
 18092  011F74  EC25  F09F         	call	i2_Timer0_Stop	;wreg free
 18093                           
 18094                           ;Motor.c: 107: return;
 18095  011F78  0012               	return	
 18096  011F7A                     i2l7523:
 18097                           
 18098                           ;Motor.c: 108: }
 18099                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18100  011F7A  C071  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 18101  011F7E  C072  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 18102  011F82  C073  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 18103  011F86  EC01  F09F         	call	i2_MXK_Queue	;wreg free
 18104  011F8A  0012               	return		;funcret
 18105  011F8C                     __end_ofi2_Motor_Step:
 18106                           	opt stack 0
 18107                           tosu	equ	0xFFF
 18108                           tosh	equ	0xFFE
 18109                           tosl	equ	0xFFD
 18110                           pclatu	equ	0xFFB
 18111                           pclath	equ	0xFFA
 18112                           tblptru	equ	0xFF8
 18113                           tblptrh	equ	0xFF7
 18114                           tblptrl	equ	0xFF6
 18115                           tablat	equ	0xFF5
 18116                           prodh	equ	0xFF4
 18117                           prodl	equ	0xFF3
 18118                           intcon	equ	0xFF2
 18119                           indf0	equ	0xFEF
 18120                           postinc0	equ	0xFEE
 18121                           fsr0h	equ	0xFEA
 18122                           fsr0l	equ	0xFE9
 18123                           wreg	equ	0xFE8
 18124                           indf1	equ	0xFE7
 18125                           postdec1	equ	0xFE5
 18126                           fsr1h	equ	0xFE2
 18127                           fsr1l	equ	0xFE1
 18128                           indf2	equ	0xFDF
 18129                           postinc2	equ	0xFDE
 18130                           postdec2	equ	0xFDD
 18131                           plusw2	equ	0xFDB
 18132                           fsr2h	equ	0xFDA
 18133                           fsr2l	equ	0xFD9
 18134                           status	equ	0xFD8
 18135                           
 18136 ;; *************** function i2_Timer0_Stop *****************
 18137 ;; Defined at:
 18138 ;;		line 89 in file "Library/Timer0.c"
 18139 ;; Parameters:    Size  Location     Type
 18140 ;;		None
 18141 ;; Auto vars:     Size  Location     Type
 18142 ;;		None
 18143 ;; Return value:  Size  Location     Type
 18144 ;;                  1    wreg      void 
 18145 ;; Registers used:
 18146 ;;		None
 18147 ;; Tracked objects:
 18148 ;;		On entry : 0/0
 18149 ;;		On exit  : 0/0
 18150 ;;		Unchanged: 0/0
 18151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18156 ;;Total ram usage:        0 bytes
 18157 ;; Hardware stack levels used:    1
 18158 ;; This function calls:
 18159 ;;		Nothing
 18160 ;; This function is called by:
 18161 ;;		_Timer0_ISR
 18162 ;;		i2_Motor_Step
 18163 ;; This function uses a non-reentrant model
 18164 ;;
 18165                           
 18166                           	psect	text95
 18167  013E4A                     __ptext95:
 18168                           	opt stack 0
 18169  013E4A                     i2_Timer0_Stop:
 18170                           	opt stack 18
 18171                           
 18172                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18173                           
 18174                           ;incstack = 0
 18175  013E4A  9AF2               	bcf	intcon,5,c	;volatile
 18176                           
 18177                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18178  013E4C  94F2               	bcf	intcon,2,c	;volatile
 18179  013E4E  0012               	return		;funcret
 18180  013E50                     __end_ofi2_Timer0_Stop:
 18181                           	opt stack 0
 18182                           tosu	equ	0xFFF
 18183                           tosh	equ	0xFFE
 18184                           tosl	equ	0xFFD
 18185                           pclatu	equ	0xFFB
 18186                           pclath	equ	0xFFA
 18187                           tblptru	equ	0xFF8
 18188                           tblptrh	equ	0xFF7
 18189                           tblptrl	equ	0xFF6
 18190                           tablat	equ	0xFF5
 18191                           prodh	equ	0xFF4
 18192                           prodl	equ	0xFF3
 18193                           intcon	equ	0xFF2
 18194                           indf0	equ	0xFEF
 18195                           postinc0	equ	0xFEE
 18196                           fsr0h	equ	0xFEA
 18197                           fsr0l	equ	0xFE9
 18198                           wreg	equ	0xFE8
 18199                           indf1	equ	0xFE7
 18200                           postdec1	equ	0xFE5
 18201                           fsr1h	equ	0xFE2
 18202                           fsr1l	equ	0xFE1
 18203                           indf2	equ	0xFDF
 18204                           postinc2	equ	0xFDE
 18205                           postdec2	equ	0xFDD
 18206                           plusw2	equ	0xFDB
 18207                           fsr2h	equ	0xFDA
 18208                           fsr2l	equ	0xFD9
 18209                           status	equ	0xFD8
 18210                           
 18211 ;; *************** function i2_Timer0_Restart *****************
 18212 ;; Defined at:
 18213 ;;		line 83 in file "Library/Timer0.c"
 18214 ;; Parameters:    Size  Location     Type
 18215 ;;		None
 18216 ;; Auto vars:     Size  Location     Type
 18217 ;;		None
 18218 ;; Return value:  Size  Location     Type
 18219 ;;                  1    wreg      void 
 18220 ;; Registers used:
 18221 ;;		None
 18222 ;; Tracked objects:
 18223 ;;		On entry : 0/0
 18224 ;;		On exit  : 0/0
 18225 ;;		Unchanged: 0/0
 18226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18231 ;;Total ram usage:        0 bytes
 18232 ;; Hardware stack levels used:    1
 18233 ;; This function calls:
 18234 ;;		Nothing
 18235 ;; This function is called by:
 18236 ;;		i2_Motor_Step
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           	psect	text96
 18241  013E1C                     __ptext96:
 18242                           	opt stack 0
 18243  013E1C                     i2_Timer0_Restart:
 18244                           	opt stack 17
 18245                           
 18246                           ;Timer0.c: 85: TMR0 = COUNTER;
 18247                           
 18248                           ;incstack = 0
 18249  013E1C  C02A  FFD6         	movff	_COUNTER,4054	;volatile
 18250  013E20  C02B  FFD7         	movff	_COUNTER+1,4055	;volatile
 18251                           
 18252                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18253  013E24  8AF2               	bsf	intcon,5,c	;volatile
 18254  013E26  0012               	return		;funcret
 18255  013E28                     __end_ofi2_Timer0_Restart:
 18256                           	opt stack 0
 18257                           tosu	equ	0xFFF
 18258                           tosh	equ	0xFFE
 18259                           tosl	equ	0xFFD
 18260                           pclatu	equ	0xFFB
 18261                           pclath	equ	0xFFA
 18262                           tblptru	equ	0xFF8
 18263                           tblptrh	equ	0xFF7
 18264                           tblptrl	equ	0xFF6
 18265                           tablat	equ	0xFF5
 18266                           prodh	equ	0xFF4
 18267                           prodl	equ	0xFF3
 18268                           intcon	equ	0xFF2
 18269                           indf0	equ	0xFEF
 18270                           postinc0	equ	0xFEE
 18271                           fsr0h	equ	0xFEA
 18272                           fsr0l	equ	0xFE9
 18273                           wreg	equ	0xFE8
 18274                           indf1	equ	0xFE7
 18275                           postdec1	equ	0xFE5
 18276                           fsr1h	equ	0xFE2
 18277                           fsr1l	equ	0xFE1
 18278                           indf2	equ	0xFDF
 18279                           postinc2	equ	0xFDE
 18280                           postdec2	equ	0xFDD
 18281                           plusw2	equ	0xFDB
 18282                           fsr2h	equ	0xFDA
 18283                           fsr2l	equ	0xFD9
 18284                           status	equ	0xFD8
 18285                           
 18286 ;; *************** function i2_Port_SetPin *****************
 18287 ;; Defined at:
 18288 ;;		line 247 in file "Library/Port.c"
 18289 ;; Parameters:    Size  Location     Type
 18290 ;;  pInput          2   15[COMRAM] const PTR struct Port
 18291 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 18292 ;;  pPin            1   17[COMRAM] enum E7694
 18293 ;;  pValue          1   18[COMRAM] unsigned char 
 18294 ;; Auto vars:     Size  Location     Type
 18295 ;;  Port_SetPin     1   19[COMRAM] enum E7739
 18296 ;; Return value:  Size  Location     Type
 18297 ;;                  1    wreg      void 
 18298 ;; Registers used:
 18299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18300 ;; Tracked objects:
 18301 ;;		On entry : 0/0
 18302 ;;		On exit  : 0/0
 18303 ;;		Unchanged: 0/0
 18304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;Total ram usage:        5 bytes
 18310 ;; Hardware stack levels used:    1
 18311 ;; Hardware stack levels required when called:    3
 18312 ;; This function calls:
 18313 ;;		i2_Byte_SetBit
 18314 ;;		i2_Word_GetPair
 18315 ;; This function is called by:
 18316 ;;		i2_Motor_Step
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           	psect	text97
 18321  012818                     __ptext97:
 18322                           	opt stack 0
 18323  012818                     i2_Port_SetPin:
 18324                           	opt stack 14
 18325                           
 18326                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 18327                           
 18328                           ;incstack = 0
 18329  012818  0E08               	movlw	8
 18330  01281A  2410               	addwf	i2Port_SetPin@pInput,w,c
 18331  01281C  6E0D               	movwf	i2Word_GetPair@pInput,c
 18332  01281E  0E00               	movlw	0
 18333  012820  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 18334  012822  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 18335  012824  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 18336  012828  ECD1  F09D         	call	i2_Word_GetPair	;wreg free
 18337  01282C  6E14               	movwf	i2Port_SetPin@Type,c
 18338                           
 18339                           ;Port.c: 250: switch (Type)
 18340  01282E  D03B               	goto	i2l7087
 18341  012830                     i2l7073:
 18342                           
 18343                           ;Port.c: 256: pValue &= 1;
 18344  012830  0E01               	movlw	1
 18345  012832  1613               	andwf	i2Port_SetPin@pValue,f,c
 18346                           
 18347                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18348  012834  EE20 F002          	lfsr	2,2
 18349  012838  5010               	movf	i2Port_SetPin@pInput,w,c
 18350  01283A  26D9               	addwf	fsr2l,f,c
 18351  01283C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 18352  01283E  22DA               	addwfc	fsr2h,f,c
 18353  012840  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 18354  012844  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 18355  012848  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 18356  01284C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 18357  012850  ECC9  F09B         	call	i2_Byte_SetBit	;wreg free
 18358                           
 18359                           ;Port.c: 258: break;
 18360  012854  0012               	return	
 18361  012856                     i2l7077:
 18362                           
 18363                           ;Port.c: 261: pValue &= 1;
 18364  012856  0E01               	movlw	1
 18365  012858  1613               	andwf	i2Port_SetPin@pValue,f,c
 18366                           
 18367                           ;Port.c: 262: pValue ^= 1;
 18368  01285A  0E01               	movlw	1
 18369  01285C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 18370                           
 18371                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18372  01285E  EE20 F002          	lfsr	2,2
 18373  012862  5010               	movf	i2Port_SetPin@pInput,w,c
 18374  012864  26D9               	addwf	fsr2l,f,c
 18375  012866  5011               	movf	i2Port_SetPin@pInput+1,w,c
 18376  012868  22DA               	addwfc	fsr2h,f,c
 18377  01286A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 18378  01286E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 18379  012872  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 18380  012876  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 18381  01287A  ECC9  F09B         	call	i2_Byte_SetBit	;wreg free
 18382                           
 18383                           ;Port.c: 264: break;
 18384  01287E  0012               	return	
 18385  012880                     i2l7081:
 18386                           
 18387                           ;Port.c: 266: pValue &= 1;
 18388  012880  0E01               	movlw	1
 18389  012882  1613               	andwf	i2Port_SetPin@pValue,f,c
 18390                           
 18391                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 18392  012884  EE20 F004          	lfsr	2,4
 18393  012888  5010               	movf	i2Port_SetPin@pInput,w,c
 18394  01288A  26D9               	addwf	fsr2l,f,c
 18395  01288C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 18396  01288E  22DA               	addwfc	fsr2h,f,c
 18397  012890  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 18398  012894  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 18399  012898  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 18400  01289C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 18401  0128A0  ECC9  F09B         	call	i2_Byte_SetBit	;wreg free
 18402                           
 18403                           ;Port.c: 269: }
 18404                           
 18405                           ;Port.c: 268: break;
 18406  0128A4  0012               	return	
 18407  0128A6                     i2l7087:
 18408  0128A6  5014               	movf	i2Port_SetPin@Type,w,c
 18409                           
 18410                           ; Switch size 1, requested type "space"
 18411                           ; Number of cases is 4, Range of values is 0 to 3
 18412                           ; switch strategies available:
 18413                           ; Name         Instructions Cycles
 18414                           ; simple_byte           13     7 (average)
 18415                           ;	Chosen strategy is simple_byte
 18416  0128A8  0A00               	xorlw	0	; case 0
 18417  0128AA  B4D8               	btfsc	status,2,c
 18418  0128AC  0012               	return	
 18419  0128AE  0A01               	xorlw	1	; case 1
 18420  0128B0  B4D8               	btfsc	status,2,c
 18421  0128B2  D7BE               	goto	i2l7073
 18422  0128B4  0A03               	xorlw	3	; case 2
 18423  0128B6  B4D8               	btfsc	status,2,c
 18424  0128B8  D7CE               	goto	i2l7077
 18425  0128BA  0A01               	xorlw	1	; case 3
 18426  0128BC  A4D8               	btfss	status,2,c
 18427  0128BE  0012               	return	
 18428  0128C0  D7DF               	goto	i2l7081
 18429  0128C2                     __end_ofi2_Port_SetPin:
 18430                           	opt stack 0
 18431                           tosu	equ	0xFFF
 18432                           tosh	equ	0xFFE
 18433                           tosl	equ	0xFFD
 18434                           pclatu	equ	0xFFB
 18435                           pclath	equ	0xFFA
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           indf0	equ	0xFEF
 18444                           postinc0	equ	0xFEE
 18445                           fsr0h	equ	0xFEA
 18446                           fsr0l	equ	0xFE9
 18447                           wreg	equ	0xFE8
 18448                           indf1	equ	0xFE7
 18449                           postdec1	equ	0xFE5
 18450                           fsr1h	equ	0xFE2
 18451                           fsr1l	equ	0xFE1
 18452                           indf2	equ	0xFDF
 18453                           postinc2	equ	0xFDE
 18454                           postdec2	equ	0xFDD
 18455                           plusw2	equ	0xFDB
 18456                           fsr2h	equ	0xFDA
 18457                           fsr2l	equ	0xFD9
 18458                           status	equ	0xFD8
 18459                           
 18460 ;; *************** function i2_Word_GetPair *****************
 18461 ;; Defined at:
 18462 ;;		line 156 in file "Library/Types.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;  pInput          2   12[COMRAM] PTR struct Word
 18465 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18466 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18467 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18468 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18469 ;;  pPair           1   14[COMRAM] unsigned char 
 18470 ;; Auto vars:     Size  Location     Type
 18471 ;;		None
 18472 ;; Return value:  Size  Location     Type
 18473 ;;                  1    wreg      unsigned char 
 18474 ;; Registers used:
 18475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18476 ;; Tracked objects:
 18477 ;;		On entry : 0/0
 18478 ;;		On exit  : 0/0
 18479 ;;		Unchanged: 0/0
 18480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18481 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18485 ;;Total ram usage:        3 bytes
 18486 ;; Hardware stack levels used:    1
 18487 ;; Hardware stack levels required when called:    2
 18488 ;; This function calls:
 18489 ;;		i2_Byte_GetPair
 18490 ;; This function is called by:
 18491 ;;		i2_Port_SetPin
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           	psect	text98
 18496  013BA2                     __ptext98:
 18497                           	opt stack 0
 18498  013BA2                     i2_Word_GetPair:
 18499                           	opt stack 14
 18500                           
 18501                           ;Types.c: 158: if (pPair >= 4)
 18502                           
 18503                           ;incstack = 0
 18504  013BA2  0E03               	movlw	3
 18505  013BA4  640F               	cpfsgt	i2Word_GetPair@pPair,c
 18506  013BA6  D00C               	goto	i2l6293
 18507                           
 18508                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18509  013BA8  0E01               	movlw	1
 18510  013BAA  240D               	addwf	i2Word_GetPair@pInput,w,c
 18511  013BAC  6E0A               	movwf	i2Byte_GetPair@pInput,c
 18512  013BAE  0E00               	movlw	0
 18513  013BB0  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 18514  013BB2  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 18515  013BB4  500F               	movf	i2Word_GetPair@pPair,w,c
 18516  013BB6  0FFC               	addlw	252
 18517  013BB8  6E0C               	movwf	i2Byte_GetPair@pPair,c
 18518  013BBA  ECC3  F09E         	call	i2_Byte_GetPair	;wreg free
 18519  013BBE  0012               	return	
 18520  013BC0                     i2l6293:
 18521                           
 18522                           ;Types.c: 160: else
 18523                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18524  013BC0  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 18525  013BC4  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 18526  013BC8  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 18527  013BCC  ECC3  F09E         	call	i2_Byte_GetPair	;wreg free
 18528  013BD0  0012               	return	
 18529  013BD2                     __end_ofi2_Word_GetPair:
 18530                           	opt stack 0
 18531                           tosu	equ	0xFFF
 18532                           tosh	equ	0xFFE
 18533                           tosl	equ	0xFFD
 18534                           pclatu	equ	0xFFB
 18535                           pclath	equ	0xFFA
 18536                           tblptru	equ	0xFF8
 18537                           tblptrh	equ	0xFF7
 18538                           tblptrl	equ	0xFF6
 18539                           tablat	equ	0xFF5
 18540                           prodh	equ	0xFF4
 18541                           prodl	equ	0xFF3
 18542                           intcon	equ	0xFF2
 18543                           indf0	equ	0xFEF
 18544                           postinc0	equ	0xFEE
 18545                           fsr0h	equ	0xFEA
 18546                           fsr0l	equ	0xFE9
 18547                           wreg	equ	0xFE8
 18548                           indf1	equ	0xFE7
 18549                           postdec1	equ	0xFE5
 18550                           fsr1h	equ	0xFE2
 18551                           fsr1l	equ	0xFE1
 18552                           indf2	equ	0xFDF
 18553                           postinc2	equ	0xFDE
 18554                           postdec2	equ	0xFDD
 18555                           plusw2	equ	0xFDB
 18556                           fsr2h	equ	0xFDA
 18557                           fsr2l	equ	0xFD9
 18558                           status	equ	0xFD8
 18559                           
 18560 ;; *************** function i2_Byte_GetPair *****************
 18561 ;; Defined at:
 18562 ;;		line 87 in file "Library/Types.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;  pInput          2    9[COMRAM] PTR struct Byte
 18565 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18566 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18567 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18568 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18569 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18570 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18571 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18572 ;;		 -> NULL(0), 
 18573 ;;  pPair           1   11[COMRAM] unsigned char 
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;		None
 18576 ;; Return value:  Size  Location     Type
 18577 ;;                  1    wreg      unsigned char 
 18578 ;; Registers used:
 18579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18580 ;; Tracked objects:
 18581 ;;		On entry : 0/0
 18582 ;;		On exit  : 0/0
 18583 ;;		Unchanged: 0/0
 18584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18585 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;Total ram usage:        3 bytes
 18590 ;; Hardware stack levels used:    1
 18591 ;; Hardware stack levels required when called:    1
 18592 ;; This function calls:
 18593 ;;		i2_Byte_GetZone
 18594 ;; This function is called by:
 18595 ;;		i2_Word_GetPair
 18596 ;; This function uses a non-reentrant model
 18597 ;;
 18598                           
 18599                           	psect	text99
 18600  013D86                     __ptext99:
 18601                           	opt stack 0
 18602  013D86                     i2_Byte_GetPair:
 18603                           	opt stack 14
 18604                           
 18605                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18606                           
 18607                           ;incstack = 0
 18608  013D86  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 18609  013D8A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 18610  013D8E  0E04               	movlw	4
 18611  013D90  6E03               	movwf	i2Byte_GetZone@pMax,c
 18612  013D92  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 18613  013D96  0E02               	movlw	2
 18614  013D98  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 18615  013D9A  EC13  F098         	call	i2_Byte_GetZone	;wreg free
 18616  013D9E  0012               	return	
 18617  013DA0                     __end_ofi2_Byte_GetPair:
 18618                           	opt stack 0
 18619                           tosu	equ	0xFFF
 18620                           tosh	equ	0xFFE
 18621                           tosl	equ	0xFFD
 18622                           pclatu	equ	0xFFB
 18623                           pclath	equ	0xFFA
 18624                           tblptru	equ	0xFF8
 18625                           tblptrh	equ	0xFF7
 18626                           tblptrl	equ	0xFF6
 18627                           tablat	equ	0xFF5
 18628                           prodh	equ	0xFF4
 18629                           prodl	equ	0xFF3
 18630                           intcon	equ	0xFF2
 18631                           indf0	equ	0xFEF
 18632                           postinc0	equ	0xFEE
 18633                           fsr0h	equ	0xFEA
 18634                           fsr0l	equ	0xFE9
 18635                           wreg	equ	0xFE8
 18636                           indf1	equ	0xFE7
 18637                           postdec1	equ	0xFE5
 18638                           fsr1h	equ	0xFE2
 18639                           fsr1l	equ	0xFE1
 18640                           indf2	equ	0xFDF
 18641                           postinc2	equ	0xFDE
 18642                           postdec2	equ	0xFDD
 18643                           plusw2	equ	0xFDB
 18644                           fsr2h	equ	0xFDA
 18645                           fsr2l	equ	0xFD9
 18646                           status	equ	0xFD8
 18647                           
 18648 ;; *************** function i2_Byte_GetZone *****************
 18649 ;; Defined at:
 18650 ;;		line 64 in file "Library/Types.c"
 18651 ;; Parameters:    Size  Location     Type
 18652 ;;  pInput          2    0[COMRAM] PTR struct Byte
 18653 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18654 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18655 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18656 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18657 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18658 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18659 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18660 ;;		 -> NULL(0), 
 18661 ;;  pMax            1    2[COMRAM] unsigned char 
 18662 ;;  pChunk          1    3[COMRAM] unsigned char 
 18663 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 18664 ;; Auto vars:     Size  Location     Type
 18665 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 18666 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 18667 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 18668 ;; Return value:  Size  Location     Type
 18669 ;;                  1    wreg      unsigned char 
 18670 ;; Registers used:
 18671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18672 ;; Tracked objects:
 18673 ;;		On entry : 0/0
 18674 ;;		On exit  : 0/0
 18675 ;;		Unchanged: 0/0
 18676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18677 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18678 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18680 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18681 ;;Total ram usage:        9 bytes
 18682 ;; Hardware stack levels used:    1
 18683 ;; This function calls:
 18684 ;;		Nothing
 18685 ;; This function is called by:
 18686 ;;		i2_Byte_GetPair
 18687 ;; This function uses a non-reentrant model
 18688 ;;
 18689                           
 18690                           	psect	text100
 18691  013026                     __ptext100:
 18692                           	opt stack 0
 18693  013026                     i2_Byte_GetZone:
 18694                           	opt stack 14
 18695                           
 18696                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 18697                           
 18698                           ;incstack = 0
 18699  013026  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 18700  01302A  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 18701  01302E  0E00               	movlw	low (__mediumconst shr (0+16))
 18702  013030  6EF8               	movwf	tblptru,c
 18703  013032  0E0F               	movlw	(high __ramtop+-1)
 18704  013034  64F7               	cpfsgt	tblptrh,c
 18705  013036  D003               	bra	i2u300_47
 18706  013038  0008               	tblrd		*
 18707  01303A  50F5               	movf	tablat,w,c
 18708  01303C  D005               	bra	i2u300_40
 18709  01303E                     i2u300_47:
 18710  01303E  CFF6 FFE9          	movff	tblptrl,fsr0l
 18711  013042  CFF7 FFEA          	movff	tblptrh,fsr0h
 18712  013046  50EF               	movf	indf0,w,c
 18713  013048                     i2u300_40:
 18714  013048  6E09               	movwf	i2Byte_GetZone@Output,c
 18715                           
 18716                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 18717  01304A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 18718  01304C  0D01               	mullw	1
 18719  01304E  0EDF               	movlw	low _MASKS
 18720  013050  24F3               	addwf	prodl,w,c
 18721  013052  6EF6               	movwf	tblptrl,c
 18722  013054  0EFD               	movlw	high _MASKS
 18723  013056  20F4               	addwfc	prodh,w,c
 18724  013058  6EF7               	movwf	tblptrh,c
 18725  01305A                     	if	1	;There are 3 active tblptr bytes
 18726  01305A  6AF8               	clrf	tblptru,c
 18727  01305C  0E00               	movlw	low (__mediumconst shr (0+16))
 18728  01305E  22F8               	addwfc	tblptru,f,c
 18729  013060                     	endif
 18730  013060  0008               	tblrd		*
 18731  013062  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 18732                           
 18733                           ;Types.c: 68: UINT8 Offset = 0;
 18734  013066  0E00               	movlw	0
 18735  013068  6E08               	movwf	i2Byte_GetZone@Offset,c
 18736                           
 18737                           ;Types.c: 70: while (pChunk >= pMax)
 18738  01306A  D003               	goto	i2l5899
 18739  01306C                     i2l5895:
 18740                           
 18741                           ;Types.c: 71: {
 18742                           ;Types.c: 72: pChunk -= pMax;
 18743  01306C  5003               	movf	i2Byte_GetZone@pMax,w,c
 18744  01306E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 18745                           
 18746                           ;Types.c: 73: Offset += 1;
 18747  013070  2A08               	incf	i2Byte_GetZone@Offset,f,c
 18748  013072                     i2l5899:
 18749  013072  5003               	movf	i2Byte_GetZone@pMax,w,c
 18750  013074  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 18751  013076  B0D8               	btfsc	status,0,c
 18752  013078  D7F9               	goto	i2l5895
 18753                           
 18754                           ;Types.c: 74: }
 18755                           ;Types.c: 75: pChunk *= pChunkSize;
 18756  01307A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 18757  01307C  0204               	mulwf	i2Byte_GetZone@pChunk,c
 18758  01307E  50F3               	movf	prodl,w,c
 18759  013080  6E04               	movwf	i2Byte_GetZone@pChunk,c
 18760                           
 18761                           ;Types.c: 76: pChunk += Offset;
 18762  013082  5008               	movf	i2Byte_GetZone@Offset,w,c
 18763  013084  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 18764                           
 18765                           ;Types.c: 78: Output >>= pChunk;
 18766  013086  2804               	incf	i2Byte_GetZone@pChunk,w,c
 18767  013088  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 18768  01308A  D002               	goto	i2u302_40
 18769  01308C                     i2u302_45:
 18770  01308C  90D8               	bcf	status,0,c
 18771  01308E  3209               	rrcf	i2Byte_GetZone@Output,f,c
 18772  013090                     i2u302_40:
 18773  013090  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 18774  013092  D7FC               	goto	i2u302_45
 18775                           
 18776                           ;Types.c: 79: Output &= MASK;
 18777  013094  5007               	movf	i2Byte_GetZone@MASK,w,c
 18778  013096  1609               	andwf	i2Byte_GetZone@Output,f,c
 18779                           
 18780                           ;Types.c: 80: return Output;
 18781  013098  5009               	movf	i2Byte_GetZone@Output,w,c
 18782  01309A  0012               	return	
 18783  01309C                     __end_ofi2_Byte_GetZone:
 18784                           	opt stack 0
 18785                           tosu	equ	0xFFF
 18786                           tosh	equ	0xFFE
 18787                           tosl	equ	0xFFD
 18788                           pclatu	equ	0xFFB
 18789                           pclath	equ	0xFFA
 18790                           tblptru	equ	0xFF8
 18791                           tblptrh	equ	0xFF7
 18792                           tblptrl	equ	0xFF6
 18793                           tablat	equ	0xFF5
 18794                           prodh	equ	0xFF4
 18795                           prodl	equ	0xFF3
 18796                           intcon	equ	0xFF2
 18797                           indf0	equ	0xFEF
 18798                           postinc0	equ	0xFEE
 18799                           fsr0h	equ	0xFEA
 18800                           fsr0l	equ	0xFE9
 18801                           wreg	equ	0xFE8
 18802                           indf1	equ	0xFE7
 18803                           postdec1	equ	0xFE5
 18804                           fsr1h	equ	0xFE2
 18805                           fsr1l	equ	0xFE1
 18806                           indf2	equ	0xFDF
 18807                           postinc2	equ	0xFDE
 18808                           postdec2	equ	0xFDD
 18809                           plusw2	equ	0xFDB
 18810                           fsr2h	equ	0xFDA
 18811                           fsr2l	equ	0xFD9
 18812                           status	equ	0xFD8
 18813                           
 18814 ;; *************** function i2_Byte_SetBit *****************
 18815 ;; Defined at:
 18816 ;;		line 32 in file "Library/Types.c"
 18817 ;; Parameters:    Size  Location     Type
 18818 ;;  pInput          2    0[COMRAM] PTR struct Byte
 18819 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 18820 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 18821 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18822 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18823 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18824 ;;		 -> NULL(0), 
 18825 ;;  pBit            1    2[COMRAM] unsigned char 
 18826 ;;  pValue          1    3[COMRAM] unsigned char 
 18827 ;; Auto vars:     Size  Location     Type
 18828 ;;		None
 18829 ;; Return value:  Size  Location     Type
 18830 ;;                  1    wreg      void 
 18831 ;; Registers used:
 18832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18833 ;; Tracked objects:
 18834 ;;		On entry : 0/0
 18835 ;;		On exit  : 0/0
 18836 ;;		Unchanged: 0/0
 18837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18841 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18842 ;;Total ram usage:        7 bytes
 18843 ;; Hardware stack levels used:    1
 18844 ;; This function calls:
 18845 ;;		Nothing
 18846 ;; This function is called by:
 18847 ;;		i2_Port_SetPin
 18848 ;; This function uses a non-reentrant model
 18849 ;;
 18850                           
 18851                           	psect	text101
 18852  013792                     __ptext101:
 18853                           	opt stack 0
 18854  013792                     i2_Byte_SetBit:
 18855                           	opt stack 16
 18856                           
 18857                           ;Types.c: 34: pValue &= 1;
 18858                           
 18859                           ;incstack = 0
 18860  013792  0E01               	movlw	1
 18861  013794  1604               	andwf	i2Byte_SetBit@pValue,f,c
 18862                           
 18863                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 18864  013796  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 18865  01379A  0E01               	movlw	1
 18866  01379C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 18867  01379E  2A05               	incf	??i2_Byte_SetBit,f,c
 18868  0137A0  D002               	goto	i2u341_44
 18869  0137A2                     i2u341_45:
 18870  0137A2  90D8               	bcf	status,0,c
 18871  0137A4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 18872  0137A6                     i2u341_44:
 18873  0137A6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 18874  0137A8  D7FC               	goto	i2u341_45
 18875  0137AA  5006               	movf	??i2_Byte_SetBit+1,w,c
 18876  0137AC  0AFF               	xorlw	255
 18877  0137AE  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 18878  0137B0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 18879  0137B4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 18880  0137B8  5007               	movf	??i2_Byte_SetBit+2,w,c
 18881  0137BA  16DF               	andwf	indf2,f,c
 18882                           
 18883                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 18884  0137BC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 18885  0137C0  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 18886  0137C4  2A05               	incf	??i2_Byte_SetBit,f,c
 18887  0137C6  D002               	goto	i2u342_44
 18888  0137C8                     i2u342_45:
 18889  0137C8  90D8               	bcf	status,0,c
 18890  0137CA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 18891  0137CC                     i2u342_44:
 18892  0137CC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 18893  0137CE  D7FC               	goto	i2u342_45
 18894  0137D0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 18895  0137D4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 18896  0137D8  5006               	movf	??i2_Byte_SetBit+1,w,c
 18897  0137DA  12DF               	iorwf	indf2,f,c
 18898  0137DC  0012               	return		;funcret
 18899  0137DE                     __end_ofi2_Byte_SetBit:
 18900                           	opt stack 0
 18901                           tosu	equ	0xFFF
 18902                           tosh	equ	0xFFE
 18903                           tosl	equ	0xFFD
 18904                           pclatu	equ	0xFFB
 18905                           pclath	equ	0xFFA
 18906                           tblptru	equ	0xFF8
 18907                           tblptrh	equ	0xFF7
 18908                           tblptrl	equ	0xFF6
 18909                           tablat	equ	0xFF5
 18910                           prodh	equ	0xFF4
 18911                           prodl	equ	0xFF3
 18912                           intcon	equ	0xFF2
 18913                           indf0	equ	0xFEF
 18914                           postinc0	equ	0xFEE
 18915                           fsr0h	equ	0xFEA
 18916                           fsr0l	equ	0xFE9
 18917                           wreg	equ	0xFE8
 18918                           indf1	equ	0xFE7
 18919                           postdec1	equ	0xFE5
 18920                           fsr1h	equ	0xFE2
 18921                           fsr1l	equ	0xFE1
 18922                           indf2	equ	0xFDF
 18923                           postinc2	equ	0xFDE
 18924                           postdec2	equ	0xFDD
 18925                           plusw2	equ	0xFDB
 18926                           fsr2h	equ	0xFDA
 18927                           fsr2l	equ	0xFD9
 18928                           status	equ	0xFD8
 18929                           
 18930 ;; *************** function i2_MXK_SwitchTo *****************
 18931 ;; Defined at:
 18932 ;;		line 105 in file "Library/MXK.c"
 18933 ;; Parameters:    Size  Location     Type
 18934 ;;  pModule         1    wreg     enum E7871
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;  pModule         1    7[COMRAM] enum E7871
 18937 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 18938 ;; Return value:  Size  Location     Type
 18939 ;;                  1    wreg      unsigned char 
 18940 ;; Registers used:
 18941 ;;		wreg, status,2, status,0, cstack
 18942 ;; Tracked objects:
 18943 ;;		On entry : 0/0
 18944 ;;		On exit  : 0/0
 18945 ;;		Unchanged: 0/0
 18946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18951 ;;Total ram usage:        2 bytes
 18952 ;; Hardware stack levels used:    1
 18953 ;; Hardware stack levels required when called:    1
 18954 ;; This function calls:
 18955 ;;		i2_delay_us
 18956 ;; This function is called by:
 18957 ;;		i2_Motor_Step
 18958 ;; This function uses a non-reentrant model
 18959 ;;
 18960                           
 18961                           	psect	text102
 18962  013AA8                     __ptext102:
 18963                           	opt stack 0
 18964  013AA8                     i2_MXK_SwitchTo:
 18965                           	opt stack 16
 18966                           
 18967                           ;incstack = 0
 18968                           ;i2MXK_SwitchTo@pModule stored from wreg
 18969  013AA8  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 18970                           
 18971                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18972  013AAA  5086               	movf	3974,w,c	;volatile
 18973  013AAC  0B0F               	andlw	15
 18974  013AAE  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 18975                           
 18976                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18977  013AB0  5044               	movf	_Bus_State,w,c
 18978  013AB2  A4D8               	btfss	status,2,c
 18979  013AB4  D002               	goto	i2l7097
 18980                           
 18981                           ;MXK.c: 110: return 0;
 18982  013AB6  0E00               	movlw	0
 18983  013AB8  0012               	return	
 18984  013ABA                     i2l7097:
 18985                           
 18986                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18987  013ABA  0E00               	movlw	0
 18988  013ABC  6E44               	movwf	_Bus_State,c
 18989                           
 18990                           ;MXK.c: 114: if (CUR != pModule)
 18991  013ABE  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 18992  013AC0  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 18993  013AC2  B4D8               	btfsc	status,2,c
 18994  013AC4  D00A               	goto	i2l7105
 18995                           
 18996                           ;MXK.c: 115: {
 18997                           ;MXK.c: 116: PORTG &= ~(0xF);
 18998  013AC6  0EF0               	movlw	240
 18999  013AC8  1686               	andwf	3974,f,c	;volatile
 19000                           
 19001                           ;MXK.c: 117: PORTG |= pModule;
 19002  013ACA  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 19003  013ACC  1286               	iorwf	3974,f,c	;volatile
 19004                           
 19005                           ;MXK.c: 120: delay_us(10);
 19006  013ACE  0E00               	movlw	0
 19007  013AD0  6E02               	movwf	i2delay_us@us+1,c
 19008  013AD2  0E0A               	movlw	10
 19009  013AD4  6E01               	movwf	i2delay_us@us,c
 19010  013AD6  EC9E  F09C         	call	i2_delay_us	;wreg free
 19011  013ADA                     i2l7105:
 19012                           
 19013                           ;MXK.c: 121: }
 19014                           ;MXK.c: 122: return 1;
 19015  013ADA  0E01               	movlw	1
 19016  013ADC  0012               	return	
 19017  013ADE                     __end_ofi2_MXK_SwitchTo:
 19018                           	opt stack 0
 19019                           tosu	equ	0xFFF
 19020                           tosh	equ	0xFFE
 19021                           tosl	equ	0xFFD
 19022                           pclatu	equ	0xFFB
 19023                           pclath	equ	0xFFA
 19024                           tblptru	equ	0xFF8
 19025                           tblptrh	equ	0xFF7
 19026                           tblptrl	equ	0xFF6
 19027                           tablat	equ	0xFF5
 19028                           prodh	equ	0xFF4
 19029                           prodl	equ	0xFF3
 19030                           intcon	equ	0xFF2
 19031                           indf0	equ	0xFEF
 19032                           postinc0	equ	0xFEE
 19033                           fsr0h	equ	0xFEA
 19034                           fsr0l	equ	0xFE9
 19035                           wreg	equ	0xFE8
 19036                           indf1	equ	0xFE7
 19037                           postdec1	equ	0xFE5
 19038                           fsr1h	equ	0xFE2
 19039                           fsr1l	equ	0xFE1
 19040                           indf2	equ	0xFDF
 19041                           postinc2	equ	0xFDE
 19042                           postdec2	equ	0xFDD
 19043                           plusw2	equ	0xFDB
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function i2_delay_us *****************
 19049 ;; Defined at:
 19050 ;;		line 255 in file "Library/Types.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;  us              2    0[COMRAM] unsigned short 
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;  delay_us        4    2[COMRAM] unsigned long 
 19055 ;; Return value:  Size  Location     Type
 19056 ;;                  1    wreg      void 
 19057 ;; Registers used:
 19058 ;;		wreg, status,2, status,0
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19064 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19065 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19068 ;;Total ram usage:        6 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; This function calls:
 19071 ;;		Nothing
 19072 ;; This function is called by:
 19073 ;;		i2_MXK_SwitchTo
 19074 ;; This function uses a non-reentrant model
 19075 ;;
 19076                           
 19077                           	psect	text103
 19078  01393C                     __ptext103:
 19079                           	opt stack 0
 19080  01393C                     i2_delay_us:
 19081                           	opt stack 16
 19082                           
 19083                           ;Types.c: 256: unsigned long u;
 19084                           ;Types.c: 257: while (us--) {
 19085                           
 19086                           ;incstack = 0
 19087  01393C  D016               	goto	i2l6307
 19088  01393E                     i2l6299:
 19089                           
 19090                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19091  01393E  0E00               	movlw	0
 19092  013940  6E03               	movwf	i2delay_us@u,c
 19093  013942  0E00               	movlw	0
 19094  013944  6E04               	movwf	i2delay_us@u+1,c
 19095  013946  0E00               	movlw	0
 19096  013948  6E05               	movwf	i2delay_us@u+2,c
 19097  01394A  0E00               	movlw	0
 19098  01394C  6E06               	movwf	i2delay_us@u+3,c
 19099  01394E                     i2l6301:
 19100  01394E  5003               	movf	i2delay_us@u,w,c
 19101  013950  1004               	iorwf	i2delay_us@u+1,w,c
 19102  013952  1005               	iorwf	i2delay_us@u+2,w,c
 19103  013954  1006               	iorwf	i2delay_us@u+3,w,c
 19104  013956  A4D8               	btfss	status,2,c
 19105  013958  D008               	goto	i2l6307
 19106  01395A  F000               	nop		; ;# 
 19107  01395C  0E01               	movlw	1
 19108  01395E  2603               	addwf	i2delay_us@u,f,c
 19109  013960  0E00               	movlw	0
 19110  013962  2204               	addwfc	i2delay_us@u+1,f,c
 19111  013964  2205               	addwfc	i2delay_us@u+2,f,c
 19112  013966  2206               	addwfc	i2delay_us@u+3,f,c
 19113  013968  D7F2               	goto	i2l6301
 19114  01396A                     i2l6307:
 19115  01396A  0601               	decf	i2delay_us@us,f,c
 19116  01396C  A0D8               	btfss	status,0,c
 19117  01396E  0602               	decf	i2delay_us@us+1,f,c
 19118  013970  2801               	incf	i2delay_us@us,w,c
 19119  013972  E1E5               	bnz	i2l6299
 19120  013974  2802               	incf	i2delay_us@us+1,w,c
 19121  013976  B4D8               	btfsc	status,2,c
 19122  013978  0012               	return	
 19123  01397A  D7E1               	goto	i2l6299
 19124  01397C                     __end_ofi2_delay_us:
 19125                           	opt stack 0
 19126                           tosu	equ	0xFFF
 19127                           tosh	equ	0xFFE
 19128                           tosl	equ	0xFFD
 19129                           pclatu	equ	0xFFB
 19130                           pclath	equ	0xFFA
 19131                           tblptru	equ	0xFF8
 19132                           tblptrh	equ	0xFF7
 19133                           tblptrl	equ	0xFF6
 19134                           tablat	equ	0xFF5
 19135                           prodh	equ	0xFF4
 19136                           prodl	equ	0xFF3
 19137                           intcon	equ	0xFF2
 19138                           indf0	equ	0xFEF
 19139                           postinc0	equ	0xFEE
 19140                           fsr0h	equ	0xFEA
 19141                           fsr0l	equ	0xFE9
 19142                           wreg	equ	0xFE8
 19143                           indf1	equ	0xFE7
 19144                           postdec1	equ	0xFE5
 19145                           fsr1h	equ	0xFE2
 19146                           fsr1l	equ	0xFE1
 19147                           indf2	equ	0xFDF
 19148                           postinc2	equ	0xFDE
 19149                           postdec2	equ	0xFDD
 19150                           plusw2	equ	0xFDB
 19151                           fsr2h	equ	0xFDA
 19152                           fsr2l	equ	0xFD9
 19153                           status	equ	0xFD8
 19154                           
 19155 ;; *************** function i2_MXK_Release *****************
 19156 ;; Defined at:
 19157 ;;		line 130 in file "Library/MXK.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;		None
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;		None
 19162 ;; Return value:  Size  Location     Type
 19163 ;;                  1    wreg      unsigned char 
 19164 ;; Registers used:
 19165 ;;		wreg, status,2, status,0
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;Total ram usage:        0 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; This function calls:
 19178 ;;		Nothing
 19179 ;; This function is called by:
 19180 ;;		i2_Motor_Step
 19181 ;; This function uses a non-reentrant model
 19182 ;;
 19183                           
 19184                           	psect	text104
 19185  013E50                     __ptext104:
 19186                           	opt stack 0
 19187  013E50                     i2_MXK_Release:
 19188                           	opt stack 17
 19189                           
 19190                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 19191                           
 19192                           ;incstack = 0
 19193  013E50  0E01               	movlw	1
 19194  013E52  6E44               	movwf	_Bus_State,c
 19195                           
 19196                           ;MXK.c: 135: return 1;
 19197                           ;	Return value of i2_MXK_Release is never used
 19198  013E54  0012               	return	
 19199  013E56                     __end_ofi2_MXK_Release:
 19200                           	opt stack 0
 19201                           tosu	equ	0xFFF
 19202                           tosh	equ	0xFFE
 19203                           tosl	equ	0xFFD
 19204                           pclatu	equ	0xFFB
 19205                           pclath	equ	0xFFA
 19206                           tblptru	equ	0xFF8
 19207                           tblptrh	equ	0xFF7
 19208                           tblptrl	equ	0xFF6
 19209                           tablat	equ	0xFF5
 19210                           prodh	equ	0xFF4
 19211                           prodl	equ	0xFF3
 19212                           intcon	equ	0xFF2
 19213                           indf0	equ	0xFEF
 19214                           postinc0	equ	0xFEE
 19215                           fsr0h	equ	0xFEA
 19216                           fsr0l	equ	0xFE9
 19217                           wreg	equ	0xFE8
 19218                           indf1	equ	0xFE7
 19219                           postdec1	equ	0xFE5
 19220                           fsr1h	equ	0xFE2
 19221                           fsr1l	equ	0xFE1
 19222                           indf2	equ	0xFDF
 19223                           postinc2	equ	0xFDE
 19224                           postdec2	equ	0xFDD
 19225                           plusw2	equ	0xFDB
 19226                           fsr2h	equ	0xFDA
 19227                           fsr2l	equ	0xFD9
 19228                           status	equ	0xFD8
 19229                           
 19230 ;; *************** function i2_MXK_Queue *****************
 19231 ;; Defined at:
 19232 ;;		line 144 in file "Library/MXK.c"
 19233 ;; Parameters:    Size  Location     Type
 19234 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 19235 ;;		 -> Absolute function(1), Motor_Step(1), 
 19236 ;; Auto vars:     Size  Location     Type
 19237 ;;		None
 19238 ;; Return value:  Size  Location     Type
 19239 ;;                  1    wreg      void 
 19240 ;; Registers used:
 19241 ;;		wreg, status,2, status,0
 19242 ;; Tracked objects:
 19243 ;;		On entry : 0/0
 19244 ;;		On exit  : 0/0
 19245 ;;		Unchanged: 0/0
 19246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19247 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19250 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19251 ;;Total ram usage:        3 bytes
 19252 ;; Hardware stack levels used:    1
 19253 ;; This function calls:
 19254 ;;		Nothing
 19255 ;; This function is called by:
 19256 ;;		i2_Motor_Step
 19257 ;; This function uses a non-reentrant model
 19258 ;;
 19259                           
 19260                           	psect	text105
 19261  013E02                     __ptext105:
 19262                           	opt stack 0
 19263  013E02                     i2_MXK_Queue:
 19264                           	opt stack 17
 19265                           
 19266                           ;MXK.c: 146: lQueue = pCallback;
 19267                           
 19268                           ;incstack = 0
 19269  013E02  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 19270  013E06  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 19271  013E0A  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 19272  013E0E  0012               	return		;funcret
 19273  013E10                     __end_ofi2_MXK_Queue:
 19274                           	opt stack 0
 19275                           tosu	equ	0xFFF
 19276                           tosh	equ	0xFFE
 19277                           tosl	equ	0xFFD
 19278                           pclatu	equ	0xFFB
 19279                           pclath	equ	0xFFA
 19280                           tblptru	equ	0xFF8
 19281                           tblptrh	equ	0xFF7
 19282                           tblptrl	equ	0xFF6
 19283                           tablat	equ	0xFF5
 19284                           prodh	equ	0xFF4
 19285                           prodl	equ	0xFF3
 19286                           intcon	equ	0xFF2
 19287                           indf0	equ	0xFEF
 19288                           postinc0	equ	0xFEE
 19289                           fsr0h	equ	0xFEA
 19290                           fsr0l	equ	0xFE9
 19291                           wreg	equ	0xFE8
 19292                           indf1	equ	0xFE7
 19293                           postdec1	equ	0xFE5
 19294                           fsr1h	equ	0xFE2
 19295                           fsr1l	equ	0xFE1
 19296                           indf2	equ	0xFDF
 19297                           postinc2	equ	0xFDE
 19298                           postdec2	equ	0xFDD
 19299                           plusw2	equ	0xFDB
 19300                           fsr2h	equ	0xFDA
 19301                           fsr2l	equ	0xFD9
 19302                           status	equ	0xFD8
 19303                           tosu	equ	0xFFF
 19304                           tosh	equ	0xFFE
 19305                           tosl	equ	0xFFD
 19306                           pclatu	equ	0xFFB
 19307                           pclath	equ	0xFFA
 19308                           tblptru	equ	0xFF8
 19309                           tblptrh	equ	0xFF7
 19310                           tblptrl	equ	0xFF6
 19311                           tablat	equ	0xFF5
 19312                           prodh	equ	0xFF4
 19313                           prodl	equ	0xFF3
 19314                           intcon	equ	0xFF2
 19315                           indf0	equ	0xFEF
 19316                           postinc0	equ	0xFEE
 19317                           fsr0h	equ	0xFEA
 19318                           fsr0l	equ	0xFE9
 19319                           wreg	equ	0xFE8
 19320                           indf1	equ	0xFE7
 19321                           postdec1	equ	0xFE5
 19322                           fsr1h	equ	0xFE2
 19323                           fsr1l	equ	0xFE1
 19324                           indf2	equ	0xFDF
 19325                           postinc2	equ	0xFDE
 19326                           postdec2	equ	0xFDD
 19327                           plusw2	equ	0xFDB
 19328                           fsr2h	equ	0xFDA
 19329                           fsr2l	equ	0xFD9
 19330                           status	equ	0xFD8
 19331                           
 19332                           	psect	text106
 19333  000000                     __ptext106:
 19334                           	opt stack 0
 19335                           tosu	equ	0xFFF
 19336                           tosh	equ	0xFFE
 19337                           tosl	equ	0xFFD
 19338                           pclatu	equ	0xFFB
 19339                           pclath	equ	0xFFA
 19340                           tblptru	equ	0xFF8
 19341                           tblptrh	equ	0xFF7
 19342                           tblptrl	equ	0xFF6
 19343                           tablat	equ	0xFF5
 19344                           prodh	equ	0xFF4
 19345                           prodl	equ	0xFF3
 19346                           intcon	equ	0xFF2
 19347                           indf0	equ	0xFEF
 19348                           postinc0	equ	0xFEE
 19349                           fsr0h	equ	0xFEA
 19350                           fsr0l	equ	0xFE9
 19351                           wreg	equ	0xFE8
 19352                           indf1	equ	0xFE7
 19353                           postdec1	equ	0xFE5
 19354                           fsr1h	equ	0xFE2
 19355                           fsr1l	equ	0xFE1
 19356                           indf2	equ	0xFDF
 19357                           postinc2	equ	0xFDE
 19358                           postdec2	equ	0xFDD
 19359                           plusw2	equ	0xFDB
 19360                           fsr2h	equ	0xFDA
 19361                           fsr2l	equ	0xFD9
 19362                           status	equ	0xFD8
 19363                           
 19364                           	psect	rparam
 19365  0000                     tosu	equ	0xFFF
 19366                           tosh	equ	0xFFE
 19367                           tosl	equ	0xFFD
 19368                           pclatu	equ	0xFFB
 19369                           pclath	equ	0xFFA
 19370                           tblptru	equ	0xFF8
 19371                           tblptrh	equ	0xFF7
 19372                           tblptrl	equ	0xFF6
 19373                           tablat	equ	0xFF5
 19374                           prodh	equ	0xFF4
 19375                           prodl	equ	0xFF3
 19376                           intcon	equ	0xFF2
 19377                           indf0	equ	0xFEF
 19378                           postinc0	equ	0xFEE
 19379                           fsr0h	equ	0xFEA
 19380                           fsr0l	equ	0xFE9
 19381                           wreg	equ	0xFE8
 19382                           indf1	equ	0xFE7
 19383                           postdec1	equ	0xFE5
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           plusw2	equ	0xFDB
 19390                           fsr2h	equ	0xFDA
 19391                           fsr2l	equ	0xFD9
 19392                           status	equ	0xFD8
 19393                           
 19394                           	psect	temp
 19395  000049                     btemp:
 19396                           	opt stack 0
 19397  000049                     	ds	1
 19398  0000                     int$flags	set	btemp
 19399                           tosu	equ	0xFFF
 19400                           tosh	equ	0xFFE
 19401                           tosl	equ	0xFFD
 19402                           pclatu	equ	0xFFB
 19403                           pclath	equ	0xFFA
 19404                           tblptru	equ	0xFF8
 19405                           tblptrh	equ	0xFF7
 19406                           tblptrl	equ	0xFF6
 19407                           tablat	equ	0xFF5
 19408                           prodh	equ	0xFF4
 19409                           prodl	equ	0xFF3
 19410                           intcon	equ	0xFF2
 19411                           indf0	equ	0xFEF
 19412                           postinc0	equ	0xFEE
 19413                           fsr0h	equ	0xFEA
 19414                           fsr0l	equ	0xFE9
 19415                           wreg	equ	0xFE8
 19416                           indf1	equ	0xFE7
 19417                           postdec1	equ	0xFE5
 19418                           fsr1h	equ	0xFE2
 19419                           fsr1l	equ	0xFE1
 19420                           indf2	equ	0xFDF
 19421                           postinc2	equ	0xFDE
 19422                           postdec2	equ	0xFDD
 19423                           plusw2	equ	0xFDB
 19424                           fsr2h	equ	0xFDA
 19425                           fsr2l	equ	0xFD9
 19426                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    730
    Data        25
    BSS         649
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160     58     160
    BANK1           256     17     253
    BANK2           256      4       4
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[11]), STR_2(CODE[20]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S10356I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    S560SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S557$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S509$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S509$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _MXK_Init->_Port_SetQuadType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_HMI_Init
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init
    _MXK_InitDIPSwitch->_Port_SetQuadType

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  947629
                                             16 BANK1      1     1      0
                                              0 BANK2      4     4      0
                       _Console_Init
                     _Console_Render
              _Console_SetForecolour
                           _HMI_Init
                         _HMI_Render
                      _HMI_SetNumber
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    4652
                                             21 BANK0     11     7      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                              6 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                              0 BANK1      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290212
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261357
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4094
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217597
                                             14 BANK1      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   85835
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2660
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2369
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              1 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      4     0      4
                                              0 BANK1      1     1      0
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_SetForecolour                                2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_Init
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_Render
     _OutSeg
       _SPI_Send
   _HMI_SetNumber
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _LCD_Init
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      4       4       9        1.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     11      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3A      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E9      12        0.0%
DATA                 0      0     315       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Aug 20 23:37:32 2017

                   i2_Timer0_Stop 3E4A                  SPI_Init@pChannel 00E8  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 1E8E  
                               _A 0043                                 _a 0045  
                               _i 0035                                 _j 007E  
                               _l 0046                                 _u 007F  
                               _w 0047                      ___awdiv@sign 00BC  
             ___wmul@multiplicand 00B9                     _HMI_DIPSwitch 000000  
              LCD_DrawField@pSize 00CF                LCD_DrawField@count 00D5  
                i2_Timer0_Restart 3E1C                       ?_LED_Toggle 0001  
                   ??_Console_Tab 00BF                               l615 039E  
                             l528 07D6                               l617 03A2  
                             l655 3C2C                               l680 32E6  
                             l657 3C30                               l685 330C  
                             _PR2 000FCB                               _val 007A  
                    _Word_GetPair 39F8                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 00BE  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 00C7                Console_MakeField@y 00C8  
                    Console_Tab@c 00C6                      Console_Tab@i 00C5  
             LCD_DrawField@pField 00C9                      Console_Tab@t 00C4  
                      i2_delay_us 393C              Port_Set@TypeRequired 00D9  
               Console_FormFeed@x 00B9                 Console_FormFeed@y 00BA  
             LCD_DrawField@pPoint 00CB                    ?_LCD_DrawField 00C9  
           Port_SetPinType@Output 00E1                   Port_SetPin@Type 00CA  
                 Port_SetPin@pPin 00C8                     ?_Byte_GetPair 00C0  
                 __end_of_LED_Set 36F4           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 2818                      _Word_SetPair 38B4  
                   ?_Byte_GetZone 00B7                              l1207 26B6  
                            l1056 0F04                              l1153 12E0  
                            l1082 229A                              l1158 39F6  
                            l2209 25EC                              l2262 301C  
                            l2272 3596                              l1853 1B8C  
                            l9003 3474                              l9103 1464  
                            l9031 24E0                              l9023 24B6  
                            l9105 1480                              l9121 385C  
                            l9041 2516                              l9033 24E6  
                            l9017 24A0                              l9115 382C  
                            l9061 2580                              l9117 3844  
                            l9125 3342                              l9133 3380  
                            l9221 3666                              l9029 24D4  
                            l9045 2524                              l9151 0AAE  
                            l9215 3B94                              l9071 25DA  
                            l9063 2586                              l9311 01DA  
                            l9127 3354                              l9143 3820  
                  ??_Console_Init 00B7                              l9209 3C34  
                            l9313 0228                              l9321 0312  
                            l9401 29A6                              l9049 2538  
                            l9155 0B1A                              l9091 138C  
                            l9083 12FA                              l9059 2570  
                            l9331 03A6                              l9315 0276  
                            l9323 0330                              l9307 01A0  
                            l9219 3654                              l9227 368C  
                            l9235 3756                              l9149 0A64  
                            l9165 0BF2                              l9085 1320  
                            l9181 1C84                              l9333 03B8  
                            l9317 02C4                              l9309 01B2  
                            l9413 29D0                              l9405 29B4  
                            l9501 0CDC                              l9245 3774  
                            l9159 0B86                              l9167 0C0E  
                            l9191 1CEA                              l9431 2A30  
                            l9423 2A14                              l9247 378C  
                            l9255 2414                              l9097 13F8  
                            l9281 000C                              l9409 29C2  
                            l9505 0D24                              l9611 080A  
                            l9603 0802                              l9451 2A76  
                            l9443 2A5A                              l9435 2A3E  
                            l9427 2A22                              l9419 29DE  
                            l9515 0DAE                              l9259 2420  
                            l9189 1CA0                              l9285 001A  
                            l9381 36E2                              l9461 28C8  
                            l9509 0D6C                              l9517 0DCA  
                            l8823 26DE                              l9287 002A  
                            l9279 0002                              l9711 086E  
                            l9703 0866                              l9631 081E  
                            l9623 0816                              l9615 080E  
                            l9607 0806                              l9375 36AA  
                            l9447 2A68                              l9439 2A4C  
                            l9543 0754                              l8911 2D36  
           Port_SetPinType@pInput 00DD                              l8809 2FAA  
                            l9297 00EC                              l9289 003E  
                            l8841 2320                              l9377 36C6  
                            l9457 2A84                              l9393 298A  
                            l9385 296E                              l9481 290E  
                            l9473 28F2                              l9465 28D6  
                            l9545 0774                              l9553 07B8  
                            l8913 2D3C                              l8827 26EA  
                            l8763 2BA4                              l9811 08D2  
                            l9803 08CA                              l9731 0882  
                            l9723 087A                              l9715 0872  
                            l9707 086A                              l9651 0832  
                            l9643 082A                              l9635 0822  
                            l9627 081A                              l9619 0812  
                            l9571 07E2                              l8907 2D2C  
                            l9821 08DA                              l8845 234A  
                            l9397 2998                              l9389 297C  
                            l9485 291C                              l9477 2900  
                            l9469 28E4                              l9549 0798  
                            l8925 2D8A                              l8917 2D46  
                            l8943 32FC                              l8935 32D6  
                            l8767 2BB0                              l9815 08D6  
                            l9807 08CE                              l9751 0896  
                            l9743 088E                              l9735 0886  
                            l9727 087E                              l9719 0876  
                            l9671 0846                              l9663 083E  
                            l9655 0836                              l9647 082E  
                            l9639 0826                              l9591 07F6  
                            l9583 07EE                              l9575 07E6  
                            l9567 07DE                              l8855 23A4  
                            l9495 2938                              l8953 3322  
                            l8793 3A24                              l8849 237A  
                            l9921 3938                              l9913 3910  
                            l9489 292A                              l8929 2D90  
                            l9841 163A                              l8971 35F4  
                            l9771 08AA                              l9763 08A2  
                            l9755 089A                              l9747 0892  
                            l9739 088A                              l9691 085A  
                            l9683 0852                              l9675 084A  
                            l9667 0842                              l9659 083A  
                            l9595 07FA                              l9587 07F2  
                            l9579 07EA                              l9499 0CBA  
                            l8869 340E                              l9829 3282  
                            l9837 32B6                              l9933 3DB2  
                            l8893 2CFE                              l9861 1658  
                            l9853 164C                              l9845 1640  
                            l9791 08BE                              l9783 08B6  
                            l9775 08AE                              l9767 08A6  
                            l9759 089E                              l9695 085E  
                            l9687 0856                              l9679 084E  
                            l9599 07FE                              l8887 2C8E  
                            l8895 2D00                              STR_1 FFFC  
                            STR_2 FFDD                              l9873 16FA  
                            l9865 165E                              l9857 1652  
                            l9849 1646                              STR_3 FFF1  
                            l8979 38E4                              l9795 08C2  
                            l9787 08BA                              l9779 08B2  
                            l9699 0862                              l8995 3446  
                            l9885 178A                              l9799 08C6  
                            l9985 2FCC                              l9987 2FD8  
                            l9997 300E                              l9989 2FDE  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 2AB4                              u6105 044C  
                            u6115 0464                              u6125 047C  
                            u5510 2B7A                              u6135 049E  
                            u6145 061E                              u5530 2BE0  
                            u6155 069C                              u5517 2B70  
                            u6165 06DE                              u6190 3B00  
                            u5614 2726                              u5550 2F44  
                            u5615 2720                              u5535 2BDA  
                            u6175 0720                              u5624 2758  
                            u5640 38A2                              u5625 2752  
                            _PIR1 000F9E                              _PIR2 000FA1  
                            u6195 3AFA                              u5715 3DC4  
                            _PIR3 000FA4                              u5716 3DC6  
                            u5645 389C                              u5584 3494  
             __end_of_GetPortTRIS 2968                              u5760 3442  
                            u5585 348E                              u5594 34C6  
                            u5770 346C                              u5595 34C0  
                            u6398 2218                              u6750 1DB2  
                            u6760 1DC6                              u6770 1E06  
                            u6675 2EDC                              u6780 195A  
                            u5975 1C3C                              _SPI1 01A4  
                            _SPI2 01AF                              u7977 1FEA  
                            u7898 3B20                              _TMR0 000FD6  
                            _gISR 006E                     ??_Byte_GetBit 00BA  
              SPI_MaxSpeed@pInput 00C6                     ?_Byte_SetByte 00B7  
                   ?_Byte_SetPair 00C2                   __end_of_SPI_DCS 3BA2  
                            _main 1F8C                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00C2                              _itos 2082  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                     ?_Byte_SetZone 00B7  
                            btemp 0049                              _zero 0048  
                            pclat 000FFA                     ??_Byte_SetBit 00BB  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 148A  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
                 ?_SPI_DisableISR 00B7                     Console_Init@x 00B9  
                   Console_Init@y 00BA                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000010  
                 __end_of_Font5x7 FFCF              Set_Rotation@rotation 00BD  
          __size_of_HMI_SetNumber 002A      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 3652                  __end_of_LCD_Init 1AAC  
          _Console_MakeField$9772 00C5                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 353E                     ??_Button_Init 00F1  
         GetPortProperties@pInput 00B9                             l10013 3588  
                           l10005 3552                             l10101 2C58  
                           l10007 355E                             l10009 3564  
                           l10121 3630                             l10201 1580  
                           l10131 364C                             l10211 15D2  
                __end_of_HMI_Init 12E2                             l10141 31C8  
                           l10037 21AC                             l10301 2EC4  
                           l10117 3622                             l10109 2C6E  
                           l10205 158A                             l10221 1620  
                           l10207 15A2                             l10215 15EA  
                           l10145 31D6                             l10313 2F1A  
                           l10305 2ECC                             l10241 20C0  
                           l10401 1A6E                             l10209 15BA  
                           l10217 161A                             l10155 31F2  
                           l10083 2C16                             l10173 2B12  
                           l10325 265E                             l10317 260A  
                           l10333 267A                             l10253 212C  
                           l10181 34E2                             l10271 2270  
                           l10335 268A                             l10255 2140  
                           l10095 2C42                             l10351 1DD4  
                           l10183 3500                             l10265 2260  
                           l10177 2B38                             l10249 2110  
                           l10089 2C2C                             l10353 1DF2  
                           l10275 227A                             l10603 10B2  
                           l10339 26A4                             l10187 351E  
                           l10285 22E4                             l10269 226A  
                           l10357 1E14                             l10189 352E  
                           l10551 2DC0                             l10279 22A2  
                           l10391 19CA                             l10359 1E30  
                           l10375 1E7C                             l11343 3B34  
                           l10553 2DC6                             l10289 22F0  
                           l10609 10CA                             l10625 12B4  
                           l10385 195C                             l10369 1E72  
                           l10563 2E28                             l10547 2DB6  
                           l10395 1A36                             l10707 3988  
                           l10557 2DD0                             l10637 39C4  
                           l10397 1A60                             l10717 39B6  
                           l10741 1AF8                             l10733 1ACE  
                           l11381 1FFC                             l10583 0F2C  
                           l10735 1AD6                             l11375 1FCE  
                           l10753 1B50                             l10745 1B00  
                           l10729 1ABA                             l11377 1FE2  
                           l11369 1FB8                             l10595 1074  
                           l10587 0F36                             l10579 0F0C  
                           l10747 1B30                             l10739 1AEE  
                           l10771 1BF6                             l10597 10A2  
                           l10765 1B92                             l10769 1BEA  
                           _I2C1T 0038                             _I2C2T 00A8  
                           ?_main 0001                   __end_of___awdiv 2542  
                           ?_itos 00C3                             _ADSHR 007E04  
                 _Event_DIPSwitch 000000                   __end_of___lldiv 25FE  
                 ___awdiv@divisor 00B9                             _INDEX 0034  
                 __end_of___lwdiv 3026                             _MASKS FDDF  
                 __end_of___lwmod 35A0                   ___awdiv@counter 00BB  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00CD                    __CFG_FCMEN$OFF 000000  
                           _PortA 01C4                             _PortB 01CE  
                           _PortC 0080                             _PortD 008A  
                           _PortE 0094                             _PortF 009E  
                           _PortG 01D8           __end_of_Port_SetPinType 14A2  
                  ??_Byte_GetPair 00C3                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00CC                   __end_of_dpowers FDDF  
                  ??_Byte_GetZone 00BC          __size_of_Set_Addr_Window 00AA  
             __end_of_Console_Tab 2484                  __end_of_MXK_Init 193A  
            i2Byte_GetPair@pInput 000A                             _putch 3DD8  
                __end_of_SPI_Init 041E                  __end_of_SPI_Send 3340  
           __end_ofi2_MXK_Release 3E56                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 32D4  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00BA  
                  ??_Byte_SetPair 00C6                    ??_Byte_SetQuad 00C6  
                           plusw2 000FDB                    ??_Byte_SetZone 00BD  
                           status 000FD8                   _Configure_GPIOs 31F8  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 3D4E               __size_of_LED_Toggle 0048  
                      _Event_NULL 000000       __size_of_Port_CheckPairType 006A  
                 __initialization 2E2E               __size_of_HMI_Render 003E  
             __end_of_Byte_GetBit 3B12                      __end_of_main 2082  
                    __end_of_itos 215A                      SPI_Send9@dat 0074  
             __end_of_Byte_SetBit 34DC                  __end_of_InitList FDB5  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 3DC8  
     __size_of_Port_CheckPortType 0048                       HMI_Render@a 00BF  
                          ??_main 01FC                            ??_itos 00C7  
                   __activetblptr 000003                 Port_SetPin@pInput 00C6  
               __end_of_LCD_Reset 3744                 Port_SetPin@pValue 00C9  
                       ??_LED_Set 00CC                 _MXK_InitDIPSwitch 3CF4  
               GetPortPORT@pInput 00B9            Port_CheckPairType@Pin1 00E1  
          Port_CheckPairType@Pin2 00E2                 __end_of_LCD_Write 3CB8  
                     _GetPortPORT 2A0E                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 28C2                   ??_LCD_DrawField 00D3  
      __end_of_PortProperty_Valid 2FAE                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0064  
             __end_of_Button_Init 222E                 Word_GetPair@pPair 00C5  
         LCD_FillRectangle@pPoint 00C2                ?_MXK_InitDIPSwitch 0001  
                       ??_SPI_DCS 00B9                     _HMI_SetNumber 3C00  
          Port_SetQuadType@Output 01EC                  ___awdiv@dividend 00B7  
                          ?_putch 0001                  ??_Console_Render 00DA  
                   ToSegment@pCHR 00B7             _Console_SetForecolour 3E32  
                _Console_FormFeed 2D1E            Port_SetQuadType@pInput 00ED  
                          i2l1460 144E                    __CFG_WDTEN$OFF 000000  
                          i2l6301 394E                            i2l7105 3ADA  
                          i2l6307 396A                            i2l7081 2880  
                          i2l7073 2830                            i2l6293 3BC0  
                          i2l7077 2856                            i2l7501 1F08  
                          i2l7087 28A6                            i2l7097 3ABA  
                          i2l7505 1F2A                            i2l6299 393E  
                          i2l7507 1F3E                            i2l7523 1F7A  
                          i2l7517 1F70                            i2l5895 306C  
                          i2l5899 3072                            i2l7499 1EF2  
          __end_of_LCD_Word_Write 3D6C                    _Timer0_Restart 3E10  
             ??_MXK_InitDIPSwitch 00F1                    i2_MXK_SwitchTo 3AA8  
                 Byte_GetBit@pBit 00B9      Console_SetForecolour@pColour 00B7  
                      _Reset_High 3CD6                Console_Render@temp 00DC  
                  OutSeg@pSegment 00BA                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 00CE                  __end_of_delay_ms 33AA  
                    LED_Init@pLED 00E4                  __end_of_delay_us 36A4  
                   ??_Timer2_Init 00C8                     ??_Timer0_Stop 00B7  
                      _Timer0_ISR 3BD2          __size_of_Console_NewLine 0092  
               Timer2_Init@DIVIDE 00D1                    __CFG_XINST$OFF 000000  
                          _OutSeg 2EB0          __size_of_HMI_InitButtons 0004  
                      _Motor_Step 1D6A                            ___wmul 3A72  
                       ??___awdiv 00BB                    __CFG_STVREN$ON 000000  
                          _change 00FF                            _lMotor 002C  
                       ??___lldiv 00BF                            _lQueue 0025  
                      _TestButton 01E2                         ??___lwdiv 00BB  
              __size_of_ToSegment 0284                         ??___lwmod 00C2  
        __end_of_Port_SetQuadType 0CB2          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 0028              __end_of_Console_Init 2E2E  
               GetPortTRIS@pInput 00B9                __size_of_Reset_Low 001E  
                          clear_0 2E76                            clear_1 2E88  
                          clear_2 2E94                            clear_3 2EA0  
                ___awdiv@quotient 00BD                        Port_Init@i 01F7  
               __end_of_MXK_Queue 3E02        __end_ofHMI_SetButton@F8157 FDEC  
                          _printf 1AAC         __end_of_MXK_InitDIPSwitch 3D12  
          HMI_SetSegments@pString 00B8                       _Console_Tab 23C2  
             LCD_Word_Write@value 00BC                      __pdataCOMRAM 003F  
              __size_of_Port_Init 0192                     ??_Port_GetPin 00BA  
        Port_CheckPortType@Output 00F0                   ??i2_Port_SetPin 0014  
                    __mediumconst FD02       __end_ofTimer2_Init@PRESCALE FDEF  
        Port_CheckPortType@pDrive 00EF                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001          Port_CheckPortType@pInput 00ED  
                   ??_Port_SetPin 00CA                         ??_reverse 00BB  
           Console_MakeField@Fill 0124                  ?_Port_SetPinType 00DD  
                          putch@c 00CB                    ?_HMI_SetNumber 00CD  
                  i2_Word_GetPair 3BA2           __end_of_Configure_GPIOs 3268  
          __end_of_Timer0_Restart 3E1C                     Set_Rotation@m 00BC  
                    ?_MXK_Release 0001                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 3ADE                      i2delay_us@us 0001  
                 ?_LCD_Word_Write 00BC                        __accesstop 0060  
         __end_of__initialization 2EA6                         ?_LCD_Fill 00C0  
                       ?_LCD_Init 0001                     SPI_Init@pMode 00E9  
                     _Byte_GetBit 3ADE                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 3E28                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 00BF                     ___rparam_used 000001  
                     _Byte_SetBit 3478                     __end_of_MASKS FDE8  
                  _PortA_Property FFCF                         LCD_Fill@i 00C2  
                       LCD_Fill@j 00C3                         LCD_Init@i 00EE  
                  __pcstackCOMRAM 0001                    _PortB_Property FFD1  
             __size_ofi2_delay_us 0040                      __pidataBANK0 3DC8  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 3D4E  
                 Console_Render@x 00E1                   Console_Render@y 00E2  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FDC5              __end_of_Byte_GetZone 2BF4  
                  _PortC_Property FFD3                     __end_of_putch 3DE6  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 1D6A  
             __end_of_Timer0_Stop 3E4A                         ?_SPI_Init 00E4  
                       ?_SPI_Send 00B7                       _Button_Init 215A  
               Port_SetType@pType 01EE              __end_of_Byte_SetByte 3DF4  
            __end_of_Byte_SetPair 3C74                    _HMI_LeftSwitch 000000  
                  _PortD_Property FFD5              __end_of_Byte_SetQuad 3C96  
                    ??_LED_Toggle 00CF              __end_of_Byte_SetZone 276E  
                  _HMI_DownSwitch 000000                     SPI_Send@pData 00B9  
                    ??_HMI_Render 00BF                    _PortE_Property FFD7  
        __size_of_HMI_SetSegments 00BA            __end_ofi2_Word_GetPair 3BD2  
                  _PortF_Property FFD9           Port_CheckQuadType@Pair1 00EA  
         Port_CheckQuadType@Pair2 00EB          MXK_BlockSwitchTo@pModule 00BE  
          ?_Console_SetForecolour 00B7                 _Console_Backspace 3744  
                 ?_Timer0_Restart 0001                           ??_putch 00CB  
             _Console_ClearCursor 3A36                 __end_of_ToSegment 0A5C  
                  _PortG_Property FFDB                        __pbssBANK0 0060  
                      __pbssBANK1 0100               __end_of_Port_GetPin 38B4  
         Port_CheckQuadType@pQuad 00E8                   reverse@iterator 00BC  
                ??_SPI_DisableISR 00B9                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 3CD6  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00C2  
                      ??_LCD_Init 00EC               __end_of_Port_SetPin 23C2  
          __end_of_PortA_Property FFD1                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00B7                        ??_LED_Init 00E4  
              Byte_SetByte@pValue 00B9                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                        ??_HMI_Init 00F1  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 00E4  
          __end_of_PortB_Property FFD3                 __end_of_Port_Init 1634  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00DF  
              __end_of_LED_Toggle 386E          LCD_FillRectangle@pColour 00C0  
             ??_Console_Backspace 00B9                 Set_Addr_Window@xe 00BD  
               Set_Addr_Window@ye 00BE                 Set_Addr_Window@xs 00BF  
               Set_Addr_Window@ys 00BC                           ?_OutSeg 00BA  
              Byte_SetPair@pInput 00C2                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 00C5            __end_of_PortC_Property FFD5  
              Word_GetPair@pInput 00C3                __end_of_HMI_Render 39F8  
                  ??_Set_Rotation 00BC                         ?_Port_Set 00C6  
                         ?___wmul 00B7                 Port_GetPin@Output 00BC  
    __size_of_Console_ResetCursor 001A              ?_Console_ClearCursor 0001  
          __end_of_PortD_Property FFD7                        ??_MXK_Init 00F1  
               Port_GetPin@pInput 00B7                 _Console_MakeField 222E  
               ??_Console_NewLine 00B7                        ??_SPI_Init 00EA  
                      ??_SPI_Send 00BA                           ?_printf 00CC  
               ??_HMI_InitButtons 00B7        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FFD9               Console_Render@F7900 00F1  
              ?_Console_MakeField 00BC                           _COUNTER 002A  
                         _LED_Set 36A4           _Console_IncrementCursor 3414  
          __end_of_PortF_Property FFDB                       _gBackcolour 0076  
                 ??_HMI_SetNumber 00CF                         _I2C1_Done 0068  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 006B  
                       _I2C1_More 011E                         _I2C2_More 0121  
                       ?_delay_ms 00B7         __end_of_Console_Backspace 3792  
                       ?_delay_us 00B7        __end_of_MXK_InitTestButton 3D30  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FFDD  
             ??_Console_MakeField 00BE                           _SPI_DCS 3B72  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
            i2Byte_GetZone@Offset 0008                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                 Event_TestButton@j 007C  
                      ??_Mode_Set 00B7                    ??_Timer2_Clear 00B7  
                         _Font5x7 FDEF              i2Byte_GetZone@pChunk 0004  
            i2Byte_GetZone@pInput 0001              SPI_DisableISR@pInput 00B7  
                 Byte_SetBit@pBit 00B9              Port_TogglePin@pInput 00CB  
           __end_ofi2_Byte_SetBit 37DE                           __Hparam 0000  
                     _Timer2_Init 1C18                           __Lparam 0000  
                     _Timer0_Stop 3E44             __size_of_Console_Init 0086  
                         OutSeg@a 002E   __end_ofPortProperty_Valid@F7774 FDC5  
                   LCD_Write@mode 00BA                   __size_of_OutSeg 0082  
                      ??_Port_Set 00C9         __end_of_Console_MakeField 22FE  
               _Console_PrintChar 1634                     ?_Port_SetType 01EC  
                         _gCursor 003F                           ___awdiv 2484  
           ??_Console_ClearCursor 00B7                           _lBuffer 0204  
                         ___lldiv 2542                   __size_of___wmul 0036  
                         ___lwdiv 2FAE                           ___lwmod 353E  
        __end_of_Console_FormFeed 2DA8                ?_Console_PrintChar 0001  
                         __pcinit 2E2E                           __ramtop 1000  
                         __ptext0 1F8C                           __ptext1 1AAC  
                         __ptext2 3DD8                           __ptext3 1634  
                         __ptext4 23C2                           __ptext5 2484  
                         __ptext6 3414                           __ptext7 2C8C  
                         __ptext8 2D1E                           __ptext9 3D6C  
                 __size_of_printf 016C                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FDD5  
                       _T2CONbits 000FCA                     LED_Set@pValue 00CB  
             __size_of_Reset_High 001E                      ?_GetPortPORT 00B7  
                    ?_GetPortTRIS 00B7               ??_Console_PrintChar 00C7  
                     _Port_GetPin 386E                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00AF               LCD_DrawRectangle@p4 00B3  
                    ??i2_delay_us 0003                        ??_delay_ms 00B9  
                      ??_delay_us 00B9                           _reverse 3268  
                       _DIPSwitch 01BA               __size_of_Timer0_ISR 002E  
                     _Port_SetPin 22FE                    LCD_DrawField@i 00D9  
                       _LCD_Reset 36F4               __size_of_Motor_Step 0124  
                       _LCD_Write 3C96              __size_of_MXK_Dequeue 0030  
                      delay_ms@ms 00B7              end_of_initialization 2EA6  
                      delay_us@us 00B7                 ??_HMI_SetSegments 00BA  
         Console_PrintChar@pInput 00CA                      _Console_Init 2DA8  
            __size_of_MXK_Release 0016        __end_of_Port_CheckPairType 3414  
                         itos@Out 00CB                _PortProperty_Valid 2F32  
              Byte_SetQuad@pInput 00C2                SPI_MinSpeed@pInput 00C6  
              Byte_SetQuad@pValue 00C5             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 00BB             __size_of_Byte_GetZone 009C  
                 ___lldiv@counter 00C3         __end_of_Console_PrintChar 17C0  
                  ??_Port_SetType 01EF        __end_of_Port_CheckQuadType 35FA  
                         printf@c 00D6                           printf@f 00CC  
                  Port_Init@pPort 01F4                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 00C0  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 00C6             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 3826             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 397C                Button_Init@pInitIO 01F1  
               ?_Port_SetQuadType 00ED                       _gForecolour 00FD  
       ??_Console_IncrementCursor 00BB            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00F1  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00BD  
           Console_Render@lCursor 00DD                         _MXK_Queue 3DF4  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00B9  
      __size_of_Console_Backspace 004E                   _Set_Addr_Window 276E  
                  SPI_Init@pClock 00E4                  ??_LCD_Word_Write 00BE  
           __end_of_LCD_DrawField 2B58                    Port_Set@pInput 00C6  
                  SPI_Init@pInput 00EA              ??_PortProperty_Valid 00CA  
                  Port_Set@pValue 00C8                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 2C8C                        ?_LCD_Write 00BA  
                    _Byte_GetPair 3D30                HMI_SetButton@F8157 FDE8  
                    _Byte_GetZone 2B58                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 00D7                 LCD_DrawField@ymax 00D8  
                  _Port_TogglePin 3B42                  _Event_TestButton 000000  
            Port_SetPinType@Props 00E2                      ?_Byte_GetBit 00B7  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 3DE6  
                    _Byte_SetPair 3C52                      _Byte_SetQuad 3C74  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 26B8  
            Port_SetPinType@pType 00E0                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 00B7                     ?_SPI_MaxSpeed 00C6  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00C6  
           __end_ofi2_Timer0_Stop 3E50                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                     ?i2_Motor_Step 0001  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 2F32  
                  __end_of___wmul 3AA8                     __pidataCOMRAM 3E28  
                    ?_Button_Init 01ED                         _Bus_State 0044  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
               __size_of_MXK_Init 017A              __end_of_Timer2_Clear 3E44  
                  __end_of_printf 1C18                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00C3  
                ??_Timer0_Restart 00B7           ??_Console_SetForecolour 00B9  
              Port_SetType@Output 01F1               start_initialization 2E2E  
                      ?_MXK_Queue 00B7          PortProperty_Valid@Errors 00CC  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 3184  
              Port_SetType@pInput 01EC                        HMI_Init@in 01FA  
             HMI_SetNumber@pInput 00CD             __end_ofi2_Port_SetPin 28C2  
          __end_of_Port_TogglePin 3B72                     ?_Word_SetPair 00C6  
               Byte_SetBit@pInput 00B7                    ??_MXK_SwitchTo 00BD  
               Byte_SetBit@pValue 00BA                ?_LCD_FillRectangle 00C0  
             _Console_ResetCursor 3D6C       PortProperty_Valid@pPinDrive 00C8  
            MXK_BlockSwitchTo@CUR 00BD          PortProperty_Valid@pInput 00C6  
                   i2_MXK_Release 3E50            LCD_FillRectangle@pSize 00C6  
                  SPI_Send@pInput 00B7                      ??_Reset_High 00CB  
        __size_of_Port_SetPinType 01C0                    ??_SPI_MaxSpeed 00C8  
           Port_SetQuadType@pQuad 00EF                         _ToSegment 07D8  
             ??_LCD_FillRectangle 00CA             Port_SetQuadType@pType 00F0  
                 _Console_NewLine 2C8C                    ??_SPI_MinSpeed 00C8  
                    _HMI_UpSwitch 000000                         _Reset_Low 3CB8  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 3E56  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 018C  
                       _gCharSize 00F5                  Timer2_Init@INDEX 0032  
                       OutSeg@cur 002F                    ??i2_Motor_Step 0015  
                        ??_OutSeg 00BB                         OutSeg@out 00BE  
         __size_of_Console_Render 020C                      ??_Motor_Step 00CB  
              Byte_SetZone@Offset 00C0                          ??___wmul 00BB  
            ?_Console_ResetCursor 0001                         _Port_Init 14A2  
                     __pdataBANK0 00F1                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00BA                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B7                Byte_SetZone@pValue 00BC  
                   Mode_Set@pMode 00B7                          ??_printf 00D0  
         __end_of_Set_Addr_Window 2818          Port_CheckQuadType@Output 00EC  
                       _gLineSize 00F9          Port_CheckQuadType@pDrive 00E9  
                  ??_Word_GetPair 00C6          Port_CheckQuadType@pInput 00E6  
       __end_of_LCD_FillRectangle 31F8                       __pbssBIGRAM 0204  
                        ?_LED_Set 00CB                       __pbssCOMRAM 0025  
              __end_of_Reset_High 3CF4                     __pcstackBANK0 00B7  
                   __pcstackBANK1 01EC                     __pcstackBANK2 0200  
                      itos@Length 00C9                    ??_Word_SetPair 00CA  
              __end_of_Timer0_ISR 3C00              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00D0              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 0EDC                          ?_SPI_DCS 00B7  
                 ?_Port_TogglePin 00CB                       ??_LCD_Write 00BB  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Step 1E8E  
           Timer2_Init@pFrequency 00C4                    ?i2_MXK_Release 0001  
        Port_CheckPairType@Output 00E3                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00E0          Port_CheckPairType@pInput 00DD  
                  reverse@tempVar 00BB                _MXK_InitTestButton 3D12  
                      ?_Reset_Low 0001                      ?_Timer2_Init 00C4  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 00B7  
                   _lStepFunction 0071                 Byte_SetPair@pPair 00C4  
                       __pintcode 1408                     __pmediumconst FD02  
           ??_Console_ResetCursor 00B7                          ?___awdiv 00B7  
                       __ptext100 3026                         __ptext101 3792  
                       __ptext102 3AA8                         __ptext103 393C  
                       __ptext104 3E50                         __ptext105 3E02  
                       __ptext106 0000                         _pShiftVal 0078  
                        ?___lldiv 00B7                        ?_Port_Init 01F2  
                        ?___lwdiv 00B7                          ?___lwmod 00BE  
             ?_MXK_InitTestButton 0001                 ?_Console_FormFeed 0001  
               _GetPortProperties 2968       __end_ofTimer0_Init@PRESCALE FDD5  
              ??_Console_FormFeed 00B7                   _HMI_SetSegments 25FE  
              ?_GetPortProperties 00B7             __size_of_Set_Rotation 0098  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00BA  
                    ?_Port_GetPin 00B7              __size_of_Console_Tab 00C2  
                        ?_reverse 00B7                      ?_Port_SetPin 00C6  
           __end_of_HMI_SetNumber 3C2A                  ___lwdiv@quotient 00BC  
                 _HMI_RightSwitch 000000               ??_GetPortProperties 00B9  
         __end_of_Console_NewLine 2D1E              ??_MXK_InitTestButton 00E4  
              Byte_GetPair@pInput 00C0                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 3E5A                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 3D86  
                        _LCD_Fill 35FA                          _LCD_Init 193A  
                  ___wmul@product 00BB                          _HMIBoard 016A  
                  i2_Byte_GetZone 3026                          _LED_Init 34DC  
                       delay_ms@u 00B9                         delay_us@u 00B9  
                        _HMI_Init 10E8                MXK_Queue@pCallback 00B7  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
                        _IPR3bits 000FA5                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 3A72          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00C4  
                        i2u300_40 3048                          i2u300_47 303E  
                        i2u302_40 3090                          i2u302_45 308C  
                        i2u341_44 37A6                          i2u341_45 37A2  
                        i2u342_44 37CC                          i2u342_45 37C8  
                        i2u424_40 1ED0                          i2u425_40 1EE4  
                        _PIR1bits 000F9E                          i2u426_40 1F1C  
                        _PIR3bits 000FA4              __size_of_Byte_SetBit 0064  
                        i2u787_48 3BEA                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
               Button_Init@pInput 01ED           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00E1  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 0082  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 2A0E  
                        _SSP2STAT 000F6D                      _Set_Rotation 2BF4  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 393C  
              _Port_CheckPairType 33AA                          _MXK_Init 17C0  
                  main@ADCReading 0202                   MXK_SwitchTo@CUR 00BD  
                        _SPI_Init 0000                          _SPI_Send 32D4  
                ?_Set_Addr_Window 00BC                 ___wmul@multiplier 00B7  
               Byte_GetBit@Output 00BB                        printf@flag 00D0  
            Timer2_Init@pCPUClock 00CD        __size_of_LCD_FillRectangle 0074  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 3110  
                      printf@prec 00D3                 Byte_GetBit@pInput 00B7  
             Port_SetPinType@pPin 00DF                         main@count 0200  
              _Port_CheckQuadType 35A0                     _MXK_DIPSwitch 000000  
             ?_Port_CheckPairType 00DD              __end_of_SPI_MinSpeed 3184  
                   ??_MXK_Dequeue 00CD                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 37DE  
         PortProperty_Valid@F7774 FDB5              __end_ofi2_Motor_Step 1F8C  
                 ??i2_MXK_Release 0001                         copy_data0 2E42  
                       copy_data1 2E62                     ??_MXK_Release 00B7  
          __end_ofi2_Byte_GetPair 3DA0         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 00E6  
          __end_ofi2_Byte_GetZone 309C               __end_ofi2_MXK_Queue 3E10  
             ?_Port_CheckPortType 00ED                   itos@destination 00C5  
                        _InitList FD03              _Motor_Step$intlevel0 1D70  
                        _Mode_Set 3DB6                       ??_ToSegment 00B7  
                    _ISR_Function 1408                      _Timer2_Clear 3E3C  
            __end_of_Word_GetPair 3A36                          _lCBuffer 0100  
            ??_Port_CheckPairType 00E1                       ??_Reset_Low 00CB  
                        __Hrparam 0000                      OutSeg@pInput 00BD  
                  _Console_Render 0EDC                          __Lrparam 0000  
                 Timer2_Init@RDIV 00C9                    LCD_Write@value 00BB  
                        _Port_Set 041E                      OutSeg@segset 0030  
            __end_of_Word_SetPair 38FA                       ??_Port_Init 01F5  
         __end_of_HMI_SetSegments 26B8              ??_Port_CheckQuadType 00EA  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 397C                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00F0                  __size_of___lwmod 0062  
                        _lBufferX 0036                          _lBufferY 0037  
             Timer2_Init@PRESCALE FDEC                   LCD_Fill@pColour 00C0  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
          Byte_GetZone@pChunkSize 00BB            Byte_SetZone@pChunkSize 00BB  
           __size_of_Port_SetType 022A                     reverse@length 00B9  
                       itos@input 00C3             i2MXK_SwitchTo@pModule 0008  
                        _delay_ms 3340                          _delay_us 3652  
                        _clearall 007D                   ___lwdiv@divisor 00B9  
  __size_of_Console_SetForecolour 000A                   ___lwdiv@counter 00BB  
   __end_of_Console_SetForecolour 3E3C                   Port_GetPin@pPin 00B9  
                        __ptext10 3744                          __ptext11 3A36  
                        __ptext20 2A0E                          __ptext12 17C0  
                        __ptext21 34DC                          __ptext13 14A2  
                        __ptext30 397C                          __ptext22 36A4  
                        __ptext14 0CB2                          __ptext31 3652  
                        __ptext23 3B12                          __ptext15 37DE  
                        __ptext40 3CD6                          __ptext32 193A  
                        __ptext24 1D6A                          __ptext16 041E  
                        __ptext41 3826                          __ptext33 2BF4  
                        __ptext25 3E44                          __ptext17 3DE6  
                        __ptext50 25FE                          __ptext42 3B42  
                        __ptext34 35FA                          __ptext26 3E10  
                        __ptext18 28C2                          __ptext51 07D8  
                        __ptext43 22FE                          __ptext35 31F8  
                        __ptext27 38FA                          __ptext19 2968  
                        __ptext60 3C2A                          __ptext52 39BA  
                        __ptext44 386E                          __ptext36 309C  
                        __ptext28 3DA0                          __ptext61 3B72  
                        __ptext53 2EB0                          __ptext45 3C00  
                        __ptext37 36F4                          __ptext29 3DF4  
                        __ptext70 3C52                          __ptext62 215A  
                        __ptext54 10E8                          __ptext46 2082  
                        __ptext38 3340                          __ptext71 35A0  
                        __ptext63 3CF4                          __ptext55 3110  
                        __ptext47 3268                          __ptext39 3CB8  
             ??_MXK_BlockSwitchTo 00BD                          __ptext80 0EDC  
                        __ptext72 33AA                          __ptext64 3E56  
                        __ptext56 0000                          __ptext48 353E  
                        __ptext81 3184                          __ptext73 2F32  
                        __ptext65 3D12                          __ptext57 1C18  
                        __ptext49 2FAE                          __ptext90 3ADE  
                        __ptext82 2AB4                          __ptext74 39F8  
                        __ptext66 12E2                          __ptext58 2542  
                        __ptext91 2DA8                          __ptext83 3A72  
                        __ptext75 3D30                          __ptext67 3478  
                        __ptext59 3E3C                          __ptext84 276E  
                        __ptext76 2B58                          __ptext68 0A5C  
                        __ptext93 3BD2                          __ptext85 3D4E  
                        __ptext77 3C74                          __ptext69 38B4  
                        __ptext94 1E8E                          __ptext86 3C96  
                        __ptext78 26B8                          __ptext95 3E4A  
                        __ptext87 32D4                          __ptext79 3E32  
                        __ptext96 3E1C                          __ptext88 3DB6  
                        __ptext97 2818                          __ptext89 222E  
                        __ptext98 3BA2                          __ptext99 3D86  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 3B42                 HMI_SetSegments@in 00BB  
           Button_Init@pThreshold 01EF                     __size_of_main 00F6  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00C2  
          __end_of_Console_Render 10E8               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013               __end_of_MXK_Release 3DB6  
                  _MXK_TestButton 000000                     i2_Byte_SetBit 3792  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 39BA  
        ?_Console_IncrementCursor 0001              __size_of_Timer2_Init 0152  
                        int$flags 0049              __size_of_Timer0_Stop 0006  
                    _Port_SetType 0CB2                      Port_Set@Type 00DD  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 00EC                         printf@val 00D1  
                    _SSP1STATbits 000FC7                    Timer0_Init@DIV 0060  
                  Timer0_Init@PRE 0031                      _SSP2STATbits 000F6D  
                      _LED_Toggle 3826              Button_Init@pGetState 01F4  
          PortProperty_Valid@Pair 00DC                  ??_Port_TogglePin 00CE  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00C9                        _HMI_Render 39BA  
                Byte_SetZone@MASK 00C1                       i2_MXK_Queue 3E02  
                  Timer2_Init@DIV 0064                    Timer2_Init@PRE 0033  
                Byte_SetZone@pMax 00B9            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 01F7  
                        itos@Data 00C7                LCD_FillRectangle@i 00CC  
              LCD_FillRectangle@j 00CD              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                      reverse@input 00B7  
                ___lwmod@dividend 00BE                  ___lldiv@dividend 00B7  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
                  _SPI_DisableISR 3C2A                   Port_Init@pInput 01F2  
                        printf@ap 00D4            __size_ofi2_Port_SetPin 00AA  
                ?_HMI_SetSegments 00B8           Console_MakeField@Column 00C3  
           __size_of_SPI_MaxSpeed 0074                     SPI_DCS@pInput 00B7  
           __size_of_SPI_MinSpeed 0074             __size_ofi2_Motor_Step 00FE  
         Console_MakeField@pInput 00C2                  ___lldiv@quotient 00BF  
                   ??_GetPortPORT 00B9                   ___lwmod@divisor 00C0  
                   ??_GetPortTRIS 00B9                Word_SetPair@pInput 00C6  
                 ___lwmod@counter 00C2                Word_SetPair@pValue 00C9  
                     _MXK_Dequeue 3B12                    LED_Toggle@pLED 00CF  
                   _LCD_DrawField 2AB4                  _Port_SetQuadType 0A5C  
                     _MXK_Release 3DA0         __size_of_Console_FormFeed 008A  
                    _MXK_SwitchTo 38FA             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 00BE                     ?_Console_Init 0001  
               Word_SetPair@pPair 00C8                   _Port_SetPinType 12E2  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 00BF  
              Byte_GetZone@pChunk 00BA       __end_of_Console_ResetCursor 3D86  
              Byte_GetZone@pInput 00B7           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 3478             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 3C52                      _SPI_MaxSpeed 309C  
                    _SPI_MinSpeed 3110                Port_Set@TypeActual 00DB  
