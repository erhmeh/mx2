

Microchip Technology PIC18 STD Macro Assembler V1.38 build -256452561 
                                                                                               Mon Mar 27 17:57:30 2017

Microchip Technology Omniscient Code Generator v1.38 (Standard mode) build 201607010351
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	sm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBIGRAMh,global,class=BIGRAM,space=1,delta=1
    19                           	psect	bssBIGRAMl,global,class=BIGRAM,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1
   178                           	psect	text156,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	text158,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1
   183                           	psect	text161,global,reloc=2,class=CODE,delta=1
   184                           	psect	text162,global,reloc=2,class=CODE,delta=1
   185                           	psect	text163,global,reloc=2,class=CODE,delta=1
   186                           	psect	text164,global,reloc=2,class=CODE,delta=1
   187                           	psect	text165,global,reloc=2,class=CODE,delta=1
   188                           	psect	text166,global,reloc=2,class=CODE,delta=1
   189                           	psect	text167,global,reloc=2,class=CODE,delta=1
   190                           	psect	text168,global,reloc=2,class=CODE,delta=1
   191                           	psect	text169,global,reloc=2,class=CODE,delta=1
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1
   193                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   196                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   197                           	dabs	1,0x400,48,_BDT
   198                           	dabs	1,0x438,8,_CtrlTrfData
   199                           	dabs	1,0x430,8,_SetupPkt
   200  0000                     
   201 ;; Function _IMU_ReadRegFinish is unused but had its address taken
   202  0000                     
   203 ;; Function _IMU_ReadRegContinue is unused but had its address taken
   204  0000                     
   205 ;; Function _IMU_WriteRegFinish is unused but had its address taken
   206  0000                     
   207 ;; Function _IMU_WriteRegContinue is unused but had its address taken
   208  0000                     
   209 ;; Function _IMU_ReadComplete is unused but had its address taken
   210  0000                     
   211                           	psect	idataCOMRAM
   212  0150B4                     __pidataCOMRAM:
   213                           	opt stack 0
   214                           
   215                           ;initializer for _a
   216  0150B4  61                 	db	97
   217                           
   218                           ;initializer for _zero
   219  0150B5  30                 	db	48
   220                           
   221                           	psect	idataBANK0
   222  015070                     __pidataBANK0:
   223                           	opt stack 0
   224                           
   225                           ;initializer for _gCursor
   226  015070  0006               	dw	6
   227  015072  0006               	dw	6
   228                           
   229                           ;initializer for _Hz
   230  015074  000A               	dw	10
   231                           
   232                           ;initializer for _A
   233  015076  41                 	db	65
   234                           
   235                           ;initializer for _Bus_State
   236  015077  01                 	db	1
   237                           
   238                           ;initializer for _change
   239  015078  01                 	db	1
   240                           
   241                           ;initializer for _l
   242  015079  80                 	db	128
   243                           
   244                           ;initializer for _w
   245  01507A  80                 	db	128
   246                           
   247                           	psect	idataBANK1
   248  015036                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for Console_Render@F7891
   252  015036  0006               	dw	6
   253  015038  0006               	dw	6
   254                           
   255                           ;initializer for _gCharSize
   256  01503A  0005               	dw	5
   257  01503C  0007               	dw	7
   258                           
   259                           ;initializer for _gLineSize
   260  01503E  0080               	dw	128
   261  015040  0007               	dw	7
   262                           
   263                           ;initializer for _DIST
   264  015042  0064               	dw	100
   265                           
   266                           ;initializer for _gForecolour
   267  015044  FFFF               	dw	65535
   268                           
   269                           	psect	mediumconst
   270  00FBEE                     __pmediumconst:
   271                           	opt stack 0
   272  00FBEE  00                 	db	0
   273  00FBEF                     _InitList:
   274                           	opt stack 0
   275  00FBEF  1100               	dw	4352
   276  00FBF1  0080               	dw	128
   277  00FBF3  012C               	dw	300
   278  00FBF5  B100               	dw	45312
   279  00FBF7  0002               	dw	2
   280  00FBF9  0035               	dw	53
   281  00FBFB  0036               	dw	54
   282  00FBFD  B200               	dw	45568
   283  00FBFF  0002               	dw	2
   284  00FC01  0035               	dw	53
   285  00FC03  0036               	dw	54
   286  00FC05  B300               	dw	45824
   287  00FC07  0002               	dw	2
   288  00FC09  0035               	dw	53
   289  00FC0B  0036               	dw	54
   290  00FC0D  0002               	dw	2
   291  00FC0F  0035               	dw	53
   292  00FC11  0036               	dw	54
   293  00FC13  B400               	dw	46080
   294  00FC15  0000               	dw	0
   295  00FC17  C000               	dw	49152
   296  00FC19  00A2               	dw	162
   297  00FC1B  0002               	dw	2
   298  00FC1D  0084               	dw	132
   299  00FC1F  C100               	dw	49408
   300  00FC21  00C5               	dw	197
   301  00FC23  C200               	dw	49664
   302  00FC25  000D               	dw	13
   303  00FC27  0000               	dw	0
   304  00FC29  C300               	dw	49920
   305  00FC2B  008A               	dw	138
   306  00FC2D  002A               	dw	42
   307  00FC2F  C400               	dw	50176
   308  00FC31  008D               	dw	141
   309  00FC33  00EE               	dw	238
   310  00FC35  C500               	dw	50432
   311  00FC37  0012               	dw	18
   312  00FC39  3600               	dw	13824
   313  00FC3B  00C8               	dw	200
   314  00FC3D  E000               	dw	57344
   315  00FC3F  0012               	dw	18
   316  00FC41  001C               	dw	28
   317  00FC43  0010               	dw	16
   318  00FC45  0018               	dw	24
   319  00FC47  0033               	dw	51
   320  00FC49  002C               	dw	44
   321  00FC4B  0025               	dw	37
   322  00FC4D  0028               	dw	40
   323  00FC4F  0028               	dw	40
   324  00FC51  0027               	dw	39
   325  00FC53  002F               	dw	47
   326  00FC55  003C               	dw	60
   327  00FC57  0000               	dw	0
   328  00FC59  0003               	dw	3
   329  00FC5B  0003               	dw	3
   330  00FC5D  0010               	dw	16
   331  00FC5F  0080               	dw	128
   332  00FC61  0078               	dw	120
   333  00FC63  E100               	dw	57600
   334  00FC65  0012               	dw	18
   335  00FC67  001C               	dw	28
   336  00FC69  0010               	dw	16
   337  00FC6B  0018               	dw	24
   338  00FC6D  002D               	dw	45
   339  00FC6F  0028               	dw	40
   340  00FC71  0023               	dw	35
   341  00FC73  0028               	dw	40
   342  00FC75  0028               	dw	40
   343  00FC77  0026               	dw	38
   344  00FC79  002F               	dw	47
   345  00FC7B  003B               	dw	59
   346  00FC7D  0000               	dw	0
   347  00FC7F  0003               	dw	3
   348  00FC81  0003               	dw	3
   349  00FC83  0010               	dw	16
   350  00FC85  3A00               	dw	14848
   351  00FC87  0005               	dw	5
   352  00FC89  2A00               	dw	10752
   353  00FC8B  0000               	dw	0
   354  00FC8D  0002               	dw	2
   355  00FC8F  0000               	dw	0
   356  00FC91  0081               	dw	129
   357  00FC93  2B00               	dw	11008
   358  00FC95  0000               	dw	0
   359  00FC97  0003               	dw	3
   360  00FC99  0000               	dw	0
   361  00FC9B  00A2               	dw	162
   362  00FC9D  2900               	dw	10496
   363  00FC9F  2C00               	dw	11264
   364  00FCA1                     __end_of_InitList:
   365                           	opt stack 0
   366  00FCA1                     PortProperty_Valid@F7768:
   367                           	opt stack 0
   368  00FCA1  00                 	db	0
   369  00FCA2  01                 	db	1
   370  00FCA3  02                 	db	2
   371  00FCA4  00                 	db	0
   372  00FCA5  01                 	db	1
   373  00FCA6  00                 	db	0
   374  00FCA7  01                 	db	1
   375  00FCA8  00                 	db	0
   376  00FCA9  02                 	db	2
   377  00FCAA  02                 	db	2
   378  00FCAB  00                 	db	0
   379  00FCAC  00                 	db	0
   380  00FCAD  03                 	db	3
   381  00FCAE  03                 	db	3
   382  00FCAF  03                 	db	3
   383  00FCB0  00                 	db	0
   384  00FCB1                     __end_ofPortProperty_Valid@F7768:
   385                           	opt stack 0
   386  00FCB1                     Timer0_Init@PRESCALE:
   387                           	opt stack 0
   388  00FCB1  0002               	dw	2
   389  00FCB3  0004               	dw	4
   390  00FCB5  0008               	dw	8
   391  00FCB7  0010               	dw	16
   392  00FCB9  0020               	dw	32
   393  00FCBB  0040               	dw	64
   394  00FCBD  0080               	dw	128
   395  00FCBF  0100               	dw	256
   396  00FCC1                     __end_ofTimer0_Init@PRESCALE:
   397                           	opt stack 0
   398  00FCC1                     _MASKS:
   399                           	opt stack 0
   400  00FCC1  00                 	db	0
   401  00FCC2  01                 	db	1
   402  00FCC3  03                 	db	3
   403  00FCC4  07                 	db	7
   404  00FCC5  0F                 	db	15
   405  00FCC6  1F                 	db	31
   406  00FCC7  3F                 	db	63
   407  00FCC8  7F                 	db	127
   408  00FCC9  FF                 	db	255
   409  00FCCA                     __end_of_MASKS:
   410                           	opt stack 0
   411  00FCCA                     _LLVALS:
   412                           	opt stack 0
   413  00FCCA  0622               	dw	1570
   414  00FCCC  02E0               	dw	736
   415  00FCCE  4460               	dw	17504
   416  00FCD0  0740               	dw	1856
   417  00FCD2                     __end_of_LLVALS:
   418                           	opt stack 0
   419  00FCD2                     _LNVALS:
   420                           	opt stack 0
   421  00FCD2  00F0               	dw	240
   422  00FCD4  4444               	dw	17476
   423  00FCD6  0F00               	dw	3840
   424  00FCD8  2222               	dw	8738
   425  00FCDA                     __end_of_LNVALS:
   426                           	opt stack 0
   427  00FCDA                     _LZVALS:
   428                           	opt stack 0
   429  00FCDA  0360               	dw	864
   430  00FCDC  0462               	dw	1122
   431  00FCDE  0360               	dw	864
   432  00FCE0  0462               	dw	1122
   433  00FCE2                     __end_of_LZVALS:
   434                           	opt stack 0
   435  00FCE2                     _RLVALS:
   436                           	opt stack 0
   437  00FCE2  0644               	dw	1604
   438  00FCE4  0E20               	dw	3616
   439  00FCE6  0446               	dw	1094
   440  00FCE8  0170               	dw	368
   441  00FCEA                     __end_of_RLVALS:
   442                           	opt stack 0
   443  00FCEA                     _RZVALS:
   444                           	opt stack 0
   445  00FCEA  0630               	dw	1584
   446  00FCEC  0132               	dw	306
   447  00FCEE  0630               	dw	1584
   448  00FCF0  0132               	dw	306
   449  00FCF2                     __end_of_RZVALS:
   450                           	opt stack 0
   451  00FCF2                     _SQVALS:
   452                           	opt stack 0
   453  00FCF2  0660               	dw	1632
   454  00FCF4  0660               	dw	1632
   455  00FCF6  0660               	dw	1632
   456  00FCF8  0660               	dw	1632
   457  00FCFA                     __end_of_SQVALS:
   458                           	opt stack 0
   459  00FCFA                     _TEVALS:
   460                           	opt stack 0
   461  00FCFA  0E40               	dw	3648
   462  00FCFC  0464               	dw	1124
   463  00FCFE  04E0               	dw	1248
   464  00FD00  0262               	dw	610
   465  00FD02                     __end_of_TEVALS:
   466                           	opt stack 0
   467  00FD02                     _USB_SD_Ptr:
   468                           	opt stack 0
   469  00FD02  AF                 	db	low _sd000
   470  00FD03  FF                 	db	high _sd000
   471  00FD04  35                 	db	low _sd001
   472  00FD05  FF                 	db	high _sd001
   473  00FD06  69                 	db	low _sd002
   474  00FD07  FF                 	db	high _sd002
   475  00FD08                     __end_of_USB_SD_Ptr:
   476                           	opt stack 0
   477  00FD08                     HMI_SetButton@F8267:
   478                           	opt stack 0
   479  00FD08  00                 	db	0
   480  00FD09  02                 	db	2
   481  00FD0A  01                 	db	1
   482  00FD0B  03                 	db	3
   483  00FD0C                     __end_ofHMI_SetButton@F8267:
   484                           	opt stack 0
   485  00FD0C                     Timer2_Init@PRESCALE:
   486                           	opt stack 0
   487  00FD0C  01                 	db	1
   488  00FD0D  04                 	db	4
   489  00FD0E  10                 	db	16
   490  00FD0F                     __end_ofTimer2_Init@PRESCALE:
   491                           	opt stack 0
   492  00FD0F                     _USB_CD_Ptr:
   493                           	opt stack 0
   494  00FD0F  F2                 	db	low _configDescriptor1
   495  00FD10  FE                 	db	high _configDescriptor1
   496  00FD11                     __end_of_USB_CD_Ptr:
   497                           	opt stack 0
   498  00FD11                     _BLOCKS_COUNT:
   499                           	opt stack 0
   500  00FD11  C8                 	db	200
   501  00FD12                     __end_of_BLOCKS_COUNT:
   502                           	opt stack 0
   503  00FD12                     _Font5x7:
   504                           	opt stack 0
   505  00FD12  00                 	db	0
   506  00FD13  00                 	db	0
   507  00FD14  00                 	db	0
   508  00FD15  00                 	db	0
   509  00FD16  00                 	db	0
   510  00FD17  00                 	db	0
   511  00FD18  00                 	db	0
   512  00FD19  5F                 	db	95
   513  00FD1A  00                 	db	0
   514  00FD1B  00                 	db	0
   515  00FD1C  00                 	db	0
   516  00FD1D  07                 	db	7
   517  00FD1E  00                 	db	0
   518  00FD1F  07                 	db	7
   519  00FD20  00                 	db	0
   520  00FD21  14                 	db	20
   521  00FD22  7F                 	db	127
   522  00FD23  14                 	db	20
   523  00FD24  7F                 	db	127
   524  00FD25  14                 	db	20
   525  00FD26  24                 	db	36
   526  00FD27  2A                 	db	42
   527  00FD28  7F                 	db	127
   528  00FD29  2A                 	db	42
   529  00FD2A  12                 	db	18
   530  00FD2B  23                 	db	35
   531  00FD2C  13                 	db	19
   532  00FD2D  08                 	db	8
   533  00FD2E  64                 	db	100
   534  00FD2F  62                 	db	98
   535  00FD30  36                 	db	54
   536  00FD31  49                 	db	73
   537  00FD32  55                 	db	85
   538  00FD33  22                 	db	34
   539  00FD34  50                 	db	80
   540  00FD35  00                 	db	0
   541  00FD36  05                 	db	5
   542  00FD37  03                 	db	3
   543  00FD38  00                 	db	0
   544  00FD39  00                 	db	0
   545  00FD3A  00                 	db	0
   546  00FD3B  1C                 	db	28
   547  00FD3C  22                 	db	34
   548  00FD3D  41                 	db	65
   549  00FD3E  00                 	db	0
   550  00FD3F  00                 	db	0
   551  00FD40  41                 	db	65
   552  00FD41  22                 	db	34
   553  00FD42  1C                 	db	28
   554  00FD43  00                 	db	0
   555  00FD44  08                 	db	8
   556  00FD45  2A                 	db	42
   557  00FD46  1C                 	db	28
   558  00FD47  2A                 	db	42
   559  00FD48  08                 	db	8
   560  00FD49  08                 	db	8
   561  00FD4A  08                 	db	8
   562  00FD4B  3E                 	db	62
   563  00FD4C  08                 	db	8
   564  00FD4D  08                 	db	8
   565  00FD4E  00                 	db	0
   566  00FD4F  50                 	db	80
   567  00FD50  30                 	db	48
   568  00FD51  00                 	db	0
   569  00FD52  00                 	db	0
   570  00FD53  08                 	db	8
   571  00FD54  08                 	db	8
   572  00FD55  08                 	db	8
   573  00FD56  08                 	db	8
   574  00FD57  08                 	db	8
   575  00FD58  00                 	db	0
   576  00FD59  60                 	db	96
   577  00FD5A  60                 	db	96
   578  00FD5B  00                 	db	0
   579  00FD5C  00                 	db	0
   580  00FD5D  20                 	db	32
   581  00FD5E  10                 	db	16
   582  00FD5F  08                 	db	8
   583  00FD60  04                 	db	4
   584  00FD61  02                 	db	2
   585  00FD62  3E                 	db	62
   586  00FD63  51                 	db	81
   587  00FD64  49                 	db	73
   588  00FD65  45                 	db	69
   589  00FD66  3E                 	db	62
   590  00FD67  00                 	db	0
   591  00FD68  42                 	db	66
   592  00FD69  7F                 	db	127
   593  00FD6A  40                 	db	64
   594  00FD6B  00                 	db	0
   595  00FD6C  42                 	db	66
   596  00FD6D  61                 	db	97
   597  00FD6E  51                 	db	81
   598  00FD6F  49                 	db	73
   599  00FD70  46                 	db	70
   600  00FD71  21                 	db	33
   601  00FD72  41                 	db	65
   602  00FD73  45                 	db	69
   603  00FD74  4B                 	db	75
   604  00FD75  31                 	db	49
   605  00FD76  18                 	db	24
   606  00FD77  14                 	db	20
   607  00FD78  12                 	db	18
   608  00FD79  7F                 	db	127
   609  00FD7A  10                 	db	16
   610  00FD7B  27                 	db	39
   611  00FD7C  45                 	db	69
   612  00FD7D  45                 	db	69
   613  00FD7E  45                 	db	69
   614  00FD7F  39                 	db	57
   615  00FD80  3C                 	db	60
   616  00FD81  4A                 	db	74
   617  00FD82  49                 	db	73
   618  00FD83  49                 	db	73
   619  00FD84  30                 	db	48
   620  00FD85  01                 	db	1
   621  00FD86  71                 	db	113
   622  00FD87  09                 	db	9
   623  00FD88  05                 	db	5
   624  00FD89  03                 	db	3
   625  00FD8A  36                 	db	54
   626  00FD8B  49                 	db	73
   627  00FD8C  49                 	db	73
   628  00FD8D  49                 	db	73
   629  00FD8E  36                 	db	54
   630  00FD8F  06                 	db	6
   631  00FD90  49                 	db	73
   632  00FD91  49                 	db	73
   633  00FD92  29                 	db	41
   634  00FD93  1E                 	db	30
   635  00FD94  00                 	db	0
   636  00FD95  36                 	db	54
   637  00FD96  36                 	db	54
   638  00FD97  00                 	db	0
   639  00FD98  00                 	db	0
   640  00FD99  00                 	db	0
   641  00FD9A  56                 	db	86
   642  00FD9B  36                 	db	54
   643  00FD9C  00                 	db	0
   644  00FD9D  00                 	db	0
   645  00FD9E  00                 	db	0
   646  00FD9F  08                 	db	8
   647  00FDA0  14                 	db	20
   648  00FDA1  22                 	db	34
   649  00FDA2  41                 	db	65
   650  00FDA3  14                 	db	20
   651  00FDA4  14                 	db	20
   652  00FDA5  14                 	db	20
   653  00FDA6  14                 	db	20
   654  00FDA7  14                 	db	20
   655  00FDA8  41                 	db	65
   656  00FDA9  22                 	db	34
   657  00FDAA  14                 	db	20
   658  00FDAB  08                 	db	8
   659  00FDAC  00                 	db	0
   660  00FDAD  02                 	db	2
   661  00FDAE  01                 	db	1
   662  00FDAF  51                 	db	81
   663  00FDB0  09                 	db	9
   664  00FDB1  06                 	db	6
   665  00FDB2  32                 	db	50
   666  00FDB3  49                 	db	73
   667  00FDB4  79                 	db	121
   668  00FDB5  41                 	db	65
   669  00FDB6  3E                 	db	62
   670  00FDB7  7E                 	db	126
   671  00FDB8  11                 	db	17
   672  00FDB9  11                 	db	17
   673  00FDBA  11                 	db	17
   674  00FDBB  7E                 	db	126
   675  00FDBC  7F                 	db	127
   676  00FDBD  49                 	db	73
   677  00FDBE  49                 	db	73
   678  00FDBF  49                 	db	73
   679  00FDC0  36                 	db	54
   680  00FDC1  3E                 	db	62
   681  00FDC2  41                 	db	65
   682  00FDC3  41                 	db	65
   683  00FDC4  41                 	db	65
   684  00FDC5  22                 	db	34
   685  00FDC6  7F                 	db	127
   686  00FDC7  41                 	db	65
   687  00FDC8  41                 	db	65
   688  00FDC9  22                 	db	34
   689  00FDCA  1C                 	db	28
   690  00FDCB  7F                 	db	127
   691  00FDCC  49                 	db	73
   692  00FDCD  49                 	db	73
   693  00FDCE  49                 	db	73
   694  00FDCF  41                 	db	65
   695  00FDD0  7F                 	db	127
   696  00FDD1  09                 	db	9
   697  00FDD2  09                 	db	9
   698  00FDD3  01                 	db	1
   699  00FDD4  01                 	db	1
   700  00FDD5  3E                 	db	62
   701  00FDD6  41                 	db	65
   702  00FDD7  41                 	db	65
   703  00FDD8  51                 	db	81
   704  00FDD9  32                 	db	50
   705  00FDDA  7F                 	db	127
   706  00FDDB  08                 	db	8
   707  00FDDC  08                 	db	8
   708  00FDDD  08                 	db	8
   709  00FDDE  7F                 	db	127
   710  00FDDF  00                 	db	0
   711  00FDE0  41                 	db	65
   712  00FDE1  7F                 	db	127
   713  00FDE2  41                 	db	65
   714  00FDE3  00                 	db	0
   715  00FDE4  20                 	db	32
   716  00FDE5  40                 	db	64
   717  00FDE6  41                 	db	65
   718  00FDE7  3F                 	db	63
   719  00FDE8  01                 	db	1
   720  00FDE9  7F                 	db	127
   721  00FDEA  08                 	db	8
   722  00FDEB  14                 	db	20
   723  00FDEC  22                 	db	34
   724  00FDED  41                 	db	65
   725  00FDEE  7F                 	db	127
   726  00FDEF  40                 	db	64
   727  00FDF0  40                 	db	64
   728  00FDF1  40                 	db	64
   729  00FDF2  40                 	db	64
   730  00FDF3  7F                 	db	127
   731  00FDF4  02                 	db	2
   732  00FDF5  04                 	db	4
   733  00FDF6  02                 	db	2
   734  00FDF7  7F                 	db	127
   735  00FDF8  7F                 	db	127
   736  00FDF9  04                 	db	4
   737  00FDFA  08                 	db	8
   738  00FDFB  10                 	db	16
   739  00FDFC  7F                 	db	127
   740  00FDFD  3E                 	db	62
   741  00FDFE  41                 	db	65
   742  00FDFF  41                 	db	65
   743  00FE00  41                 	db	65
   744  00FE01  3E                 	db	62
   745  00FE02  7F                 	db	127
   746  00FE03  09                 	db	9
   747  00FE04  09                 	db	9
   748  00FE05  09                 	db	9
   749  00FE06  06                 	db	6
   750  00FE07  3E                 	db	62
   751  00FE08  41                 	db	65
   752  00FE09  51                 	db	81
   753  00FE0A  21                 	db	33
   754  00FE0B  5E                 	db	94
   755  00FE0C  7F                 	db	127
   756  00FE0D  09                 	db	9
   757  00FE0E  19                 	db	25
   758  00FE0F  29                 	db	41
   759  00FE10  46                 	db	70
   760  00FE11  46                 	db	70
   761  00FE12  49                 	db	73
   762  00FE13  49                 	db	73
   763  00FE14  49                 	db	73
   764  00FE15  31                 	db	49
   765  00FE16  01                 	db	1
   766  00FE17  01                 	db	1
   767  00FE18  7F                 	db	127
   768  00FE19  01                 	db	1
   769  00FE1A  01                 	db	1
   770  00FE1B  3F                 	db	63
   771  00FE1C  40                 	db	64
   772  00FE1D  40                 	db	64
   773  00FE1E  40                 	db	64
   774  00FE1F  3F                 	db	63
   775  00FE20  1F                 	db	31
   776  00FE21  20                 	db	32
   777  00FE22  40                 	db	64
   778  00FE23  20                 	db	32
   779  00FE24  1F                 	db	31
   780  00FE25  7F                 	db	127
   781  00FE26  20                 	db	32
   782  00FE27  18                 	db	24
   783  00FE28  20                 	db	32
   784  00FE29  7F                 	db	127
   785  00FE2A  63                 	db	99
   786  00FE2B  14                 	db	20
   787  00FE2C  08                 	db	8
   788  00FE2D  14                 	db	20
   789  00FE2E  63                 	db	99
   790  00FE2F  03                 	db	3
   791  00FE30  04                 	db	4
   792  00FE31  78                 	db	120
   793  00FE32  04                 	db	4
   794  00FE33  03                 	db	3
   795  00FE34  61                 	db	97
   796  00FE35  51                 	db	81
   797  00FE36  49                 	db	73
   798  00FE37  45                 	db	69
   799  00FE38  43                 	db	67
   800  00FE39  00                 	db	0
   801  00FE3A  00                 	db	0
   802  00FE3B  7F                 	db	127
   803  00FE3C  41                 	db	65
   804  00FE3D  41                 	db	65
   805  00FE3E  02                 	db	2
   806  00FE3F  04                 	db	4
   807  00FE40  08                 	db	8
   808  00FE41  10                 	db	16
   809  00FE42  20                 	db	32
   810  00FE43  41                 	db	65
   811  00FE44  41                 	db	65
   812  00FE45  7F                 	db	127
   813  00FE46  00                 	db	0
   814  00FE47  00                 	db	0
   815  00FE48  04                 	db	4
   816  00FE49  02                 	db	2
   817  00FE4A  01                 	db	1
   818  00FE4B  02                 	db	2
   819  00FE4C  04                 	db	4
   820  00FE4D  40                 	db	64
   821  00FE4E  40                 	db	64
   822  00FE4F  40                 	db	64
   823  00FE50  40                 	db	64
   824  00FE51  40                 	db	64
   825  00FE52  00                 	db	0
   826  00FE53  01                 	db	1
   827  00FE54  02                 	db	2
   828  00FE55  04                 	db	4
   829  00FE56  00                 	db	0
   830  00FE57  20                 	db	32
   831  00FE58  54                 	db	84
   832  00FE59  54                 	db	84
   833  00FE5A  54                 	db	84
   834  00FE5B  78                 	db	120
   835  00FE5C  7F                 	db	127
   836  00FE5D  48                 	db	72
   837  00FE5E  44                 	db	68
   838  00FE5F  44                 	db	68
   839  00FE60  38                 	db	56
   840  00FE61  38                 	db	56
   841  00FE62  44                 	db	68
   842  00FE63  44                 	db	68
   843  00FE64  44                 	db	68
   844  00FE65  20                 	db	32
   845  00FE66  38                 	db	56
   846  00FE67  44                 	db	68
   847  00FE68  44                 	db	68
   848  00FE69  48                 	db	72
   849  00FE6A  7F                 	db	127
   850  00FE6B  38                 	db	56
   851  00FE6C  54                 	db	84
   852  00FE6D  54                 	db	84
   853  00FE6E  54                 	db	84
   854  00FE6F  18                 	db	24
   855  00FE70  08                 	db	8
   856  00FE71  7E                 	db	126
   857  00FE72  09                 	db	9
   858  00FE73  01                 	db	1
   859  00FE74  02                 	db	2
   860  00FE75  08                 	db	8
   861  00FE76  14                 	db	20
   862  00FE77  54                 	db	84
   863  00FE78  54                 	db	84
   864  00FE79  3C                 	db	60
   865  00FE7A  7F                 	db	127
   866  00FE7B  08                 	db	8
   867  00FE7C  04                 	db	4
   868  00FE7D  04                 	db	4
   869  00FE7E  78                 	db	120
   870  00FE7F  00                 	db	0
   871  00FE80  44                 	db	68
   872  00FE81  7D                 	db	125
   873  00FE82  40                 	db	64
   874  00FE83  00                 	db	0
   875  00FE84  20                 	db	32
   876  00FE85  40                 	db	64
   877  00FE86  44                 	db	68
   878  00FE87  3D                 	db	61
   879  00FE88  00                 	db	0
   880  00FE89  00                 	db	0
   881  00FE8A  7F                 	db	127
   882  00FE8B  10                 	db	16
   883  00FE8C  28                 	db	40
   884  00FE8D  44                 	db	68
   885  00FE8E  00                 	db	0
   886  00FE8F  41                 	db	65
   887  00FE90  7F                 	db	127
   888  00FE91  40                 	db	64
   889  00FE92  00                 	db	0
   890  00FE93  7C                 	db	124
   891  00FE94  04                 	db	4
   892  00FE95  18                 	db	24
   893  00FE96  04                 	db	4
   894  00FE97  78                 	db	120
   895  00FE98  7C                 	db	124
   896  00FE99  08                 	db	8
   897  00FE9A  04                 	db	4
   898  00FE9B  04                 	db	4
   899  00FE9C  78                 	db	120
   900  00FE9D  38                 	db	56
   901  00FE9E  44                 	db	68
   902  00FE9F  44                 	db	68
   903  00FEA0  44                 	db	68
   904  00FEA1  38                 	db	56
   905  00FEA2  7C                 	db	124
   906  00FEA3  14                 	db	20
   907  00FEA4  14                 	db	20
   908  00FEA5  14                 	db	20
   909  00FEA6  08                 	db	8
   910  00FEA7  08                 	db	8
   911  00FEA8  14                 	db	20
   912  00FEA9  14                 	db	20
   913  00FEAA  18                 	db	24
   914  00FEAB  7C                 	db	124
   915  00FEAC  7C                 	db	124
   916  00FEAD  08                 	db	8
   917  00FEAE  04                 	db	4
   918  00FEAF  04                 	db	4
   919  00FEB0  08                 	db	8
   920  00FEB1  48                 	db	72
   921  00FEB2  54                 	db	84
   922  00FEB3  54                 	db	84
   923  00FEB4  54                 	db	84
   924  00FEB5  20                 	db	32
   925  00FEB6  04                 	db	4
   926  00FEB7  3F                 	db	63
   927  00FEB8  44                 	db	68
   928  00FEB9  40                 	db	64
   929  00FEBA  20                 	db	32
   930  00FEBB  3C                 	db	60
   931  00FEBC  40                 	db	64
   932  00FEBD  40                 	db	64
   933  00FEBE  20                 	db	32
   934  00FEBF  7C                 	db	124
   935  00FEC0  1C                 	db	28
   936  00FEC1  20                 	db	32
   937  00FEC2  40                 	db	64
   938  00FEC3  20                 	db	32
   939  00FEC4  1C                 	db	28
   940  00FEC5  3C                 	db	60
   941  00FEC6  40                 	db	64
   942  00FEC7  30                 	db	48
   943  00FEC8  40                 	db	64
   944  00FEC9  3C                 	db	60
   945  00FECA  44                 	db	68
   946  00FECB  28                 	db	40
   947  00FECC  10                 	db	16
   948  00FECD  28                 	db	40
   949  00FECE  44                 	db	68
   950  00FECF  0C                 	db	12
   951  00FED0  50                 	db	80
   952  00FED1  50                 	db	80
   953  00FED2  50                 	db	80
   954  00FED3  3C                 	db	60
   955  00FED4  44                 	db	68
   956  00FED5  64                 	db	100
   957  00FED6  54                 	db	84
   958  00FED7  4C                 	db	76
   959  00FED8  44                 	db	68
   960  00FED9  00                 	db	0
   961  00FEDA  08                 	db	8
   962  00FEDB  36                 	db	54
   963  00FEDC  41                 	db	65
   964  00FEDD  00                 	db	0
   965  00FEDE  00                 	db	0
   966  00FEDF  00                 	db	0
   967  00FEE0  7F                 	db	127
   968  00FEE1  00                 	db	0
   969  00FEE2  00                 	db	0
   970  00FEE3  00                 	db	0
   971  00FEE4  41                 	db	65
   972  00FEE5  36                 	db	54
   973  00FEE6  08                 	db	8
   974  00FEE7  00                 	db	0
   975  00FEE8  08                 	db	8
   976  00FEE9  08                 	db	8
   977  00FEEA  2A                 	db	42
   978  00FEEB  1C                 	db	28
   979  00FEEC  08                 	db	8
   980  00FEED  08                 	db	8
   981  00FEEE  1C                 	db	28
   982  00FEEF  2A                 	db	42
   983  00FEF0  08                 	db	8
   984  00FEF1  08                 	db	8
   985  00FEF2                     __end_of_Font5x7:
   986                           	opt stack 0
   987  00FEF2                     _configDescriptor1:
   988                           	opt stack 0
   989  00FEF2  09                 	db	9
   990  00FEF3  02                 	db	2
   991  00FEF4  43                 	db	67
   992  00FEF5  00                 	db	0
   993  00FEF6  02                 	db	2
   994  00FEF7  01                 	db	1
   995  00FEF8  00                 	db	0
   996  00FEF9  C0                 	db	192
   997  00FEFA  32                 	db	50
   998  00FEFB  09                 	db	9
   999  00FEFC  04                 	db	4
  1000  00FEFD  00                 	db	0
  1001  00FEFE  00                 	db	0
  1002  00FEFF  01                 	db	1
  1003  00FF00  02                 	db	2
  1004  00FF01  02                 	db	2
  1005  00FF02  01                 	db	1
  1006  00FF03  00                 	db	0
  1007  00FF04  05                 	db	5
  1008  00FF05  24                 	db	36
  1009  00FF06  00                 	db	0
  1010  00FF07  10                 	db	16
  1011  00FF08  01                 	db	1
  1012  00FF09  04                 	db	4
  1013  00FF0A  24                 	db	36
  1014  00FF0B  02                 	db	2
  1015  00FF0C  02                 	db	2
  1016  00FF0D  05                 	db	5
  1017  00FF0E  24                 	db	36
  1018  00FF0F  06                 	db	6
  1019  00FF10  00                 	db	0
  1020  00FF11  01                 	db	1
  1021  00FF12  05                 	db	5
  1022  00FF13  24                 	db	36
  1023  00FF14  01                 	db	1
  1024  00FF15  00                 	db	0
  1025  00FF16  01                 	db	1
  1026  00FF17  07                 	db	7
  1027  00FF18  05                 	db	5
  1028  00FF19  81                 	db	129
  1029  00FF1A  03                 	db	3
  1030  00FF1B  08                 	db	8
  1031  00FF1C  00                 	db	0
  1032  00FF1D  02                 	db	2
  1033  00FF1E  09                 	db	9
  1034  00FF1F  04                 	db	4
  1035  00FF20  01                 	db	1
  1036  00FF21  00                 	db	0
  1037  00FF22  02                 	db	2
  1038  00FF23  0A                 	db	10
  1039  00FF24  00                 	db	0
  1040  00FF25  00                 	db	0
  1041  00FF26  00                 	db	0
  1042  00FF27  07                 	db	7
  1043  00FF28  05                 	db	5
  1044  00FF29  02                 	db	2
  1045  00FF2A  02                 	db	2
  1046  00FF2B  40                 	db	64
  1047  00FF2C  00                 	db	0
  1048  00FF2D  00                 	db	0
  1049  00FF2E  07                 	db	7
  1050  00FF2F  05                 	db	5
  1051  00FF30  82                 	db	130
  1052  00FF31  02                 	db	2
  1053  00FF32  40                 	db	64
  1054  00FF33  00                 	db	0
  1055  00FF34  00                 	db	0
  1056  00FF35                     __end_of_configDescriptor1:
  1057                           	opt stack 0
  1058  00FF35                     _sd001:
  1059                           	opt stack 0
  1060  00FF35  34                 	db	52
  1061  00FF36  03                 	db	3
  1062  00FF37  0055               	dw	85
  1063  00FF39  0054               	dw	84
  1064  00FF3B  0053               	dw	83
  1065  00FF3D  0020               	dw	32
  1066  00FF3F  004D               	dw	77
  1067  00FF41  0058               	dw	88
  1068  00FF43  004B               	dw	75
  1069  00FF45  0020               	dw	32
  1070  00FF47  004B               	dw	75
  1071  00FF49  0049               	dw	73
  1072  00FF4B  0054               	dw	84
  1073  00FF4D  0020               	dw	32
  1074  00FF4F  0056               	dw	86
  1075  00FF51  0031               	dw	49
  1076  00FF53  0020               	dw	32
  1077  00FF55  0020               	dw	32
  1078  00FF57  0020               	dw	32
  1079  00FF59  0020               	dw	32
  1080  00FF5B  0020               	dw	32
  1081  00FF5D  0020               	dw	32
  1082  00FF5F  0030               	dw	48
  1083  00FF61  0032               	dw	50
  1084  00FF63  0031               	dw	49
  1085  00FF65  0037               	dw	55
  1086  00FF67  002E               	dw	46
  1087  00FF69                     __end_of_sd001:
  1088                           	opt stack 0
  1089  00FF69                     _sd002:
  1090                           	opt stack 0
  1091  00FF69  34                 	db	52
  1092  00FF6A  03                 	db	3
  1093  00FF6B  0043               	dw	67
  1094  00FF6D  0044               	dw	68
  1095  00FF6F  0043               	dw	67
  1096  00FF71  0020               	dw	32
  1097  00FF73  004D               	dw	77
  1098  00FF75  0058               	dw	88
  1099  00FF77  004B               	dw	75
  1100  00FF79  0020               	dw	32
  1101  00FF7B  004B               	dw	75
  1102  00FF7D  0049               	dw	73
  1103  00FF7F  0054               	dw	84
  1104  00FF81  0020               	dw	32
  1105  00FF83  0020               	dw	32
  1106  00FF85  0020               	dw	32
  1107  00FF87  0020               	dw	32
  1108  00FF89  0020               	dw	32
  1109  00FF8B  0020               	dw	32
  1110  00FF8D  0020               	dw	32
  1111  00FF8F  0020               	dw	32
  1112  00FF91  0020               	dw	32
  1113  00FF93  0020               	dw	32
  1114  00FF95  0044               	dw	68
  1115  00FF97  0065               	dw	101
  1116  00FF99  006D               	dw	109
  1117  00FF9B  006F               	dw	111
  1118  00FF9D                     __end_of_sd002:
  1119                           	opt stack 0
  1120  00FF9D                     _device_dsc:
  1121                           	opt stack 0
  1122  00FF9D  12                 	db	18
  1123  00FF9E  01                 	db	1
  1124  00FF9F  0200               	dw	512
  1125  00FFA1  02                 	db	2
  1126  00FFA2  00                 	db	0
  1127  00FFA3  00                 	db	0
  1128  00FFA4  08                 	db	8
  1129  00FFA5  04D8               	dw	1240
  1130  00FFA7  000A               	dw	10
  1131  00FFA9  0100               	dw	256
  1132  00FFAB  01                 	db	1
  1133  00FFAC  02                 	db	2
  1134  00FFAD  00                 	db	0
  1135  00FFAE  01                 	db	1
  1136  00FFAF                     __end_of_device_dsc:
  1137                           	opt stack 0
  1138  00FFAF                     _sd000:
  1139                           	opt stack 0
  1140  00FFAF  04                 	db	4
  1141  00FFB0  03                 	db	3
  1142  00FFB1  0409               	dw	1033
  1143  00FFB3                     __end_of_sd000:
  1144                           	opt stack 0
  1145  00FFB3                     _PortA_Property:
  1146                           	opt stack 0
  1147  00FFB3  00FF               	dw	255
  1148  00FFB5                     __end_of_PortA_Property:
  1149                           	opt stack 0
  1150  00FFB5                     _PortB_Property:
  1151                           	opt stack 0
  1152  00FFB5  FF00               	dw	65280
  1153  00FFB7                     __end_of_PortB_Property:
  1154                           	opt stack 0
  1155  00FFB7                     _PortC_Property:
  1156                           	opt stack 0
  1157  00FFB7  FFF0               	dw	65520
  1158  00FFB9                     __end_of_PortC_Property:
  1159                           	opt stack 0
  1160  00FFB9                     _PortD_Property:
  1161                           	opt stack 0
  1162  00FFB9  FFFF               	dw	65535
  1163  00FFBB                     __end_of_PortD_Property:
  1164                           	opt stack 0
  1165  00FFBB                     _PortE_Property:
  1166                           	opt stack 0
  1167  00FFBB  0000               	dw	0
  1168  00FFBD                     __end_of_PortE_Property:
  1169                           	opt stack 0
  1170  00FFBD                     _PortF_Property:
  1171                           	opt stack 0
  1172  00FFBD  0FFF               	dw	4095
  1173  00FFBF                     __end_of_PortF_Property:
  1174                           	opt stack 0
  1175  00FFBF                     _PortG_Property:
  1176                           	opt stack 0
  1177  00FFBF  FC00               	dw	64512
  1178  00FFC1                     __end_of_PortG_Property:
  1179                           	opt stack 0
  1180  0000                     _UADDR	set	3934
  1181  0000                     _UCFG	set	3935
  1182  0000                     _UEIE	set	3933
  1183  0000                     _UEP0bits	set	3916
  1184  0000                     _UIE	set	3932
  1185  0000                     _UIEbits	set	3932
  1186  0000                     _UEP0	set	3916
  1187  0000                     _UEP1	set	3917
  1188  0000                     _TMR0	set	4054
  1189  0000                     _INTCONbits	set	4082
  1190  0000                     _IPR1bits	set	3999
  1191  0000                     _IPR2bits	set	4002
  1192  0000                     _OSCTUNEbits	set	3995
  1193  0000                     _PIE1bits	set	3997
  1194  0000                     _PIE2bits	set	4000
  1195  0000                     _PIE3bits	set	4003
  1196  0000                     _PIR1	set	3998
  1197  0000                     _PIR1bits	set	3998
  1198  0000                     _PIR2	set	4001
  1199  0000                     _PIR2bits	set	4001
  1200  0000                     _PIR3	set	4004
  1201  0000                     _PIR3bits	set	4004
  1202  0000                     _PR2	set	4043
  1203  0000                     _RCONbits	set	4048
  1204  0000                     _SSP1ADD	set	4040
  1205  0000                     _SSP1CON1bits	set	4038
  1206  0000                     _SSP1CON2bits	set	4037
  1207  0000                     _SSP1STATbits	set	4039
  1208  0000                     _SSP2CON1bits	set	3948
  1209  0000                     _SSP2CON2bits	set	3947
  1210  0000                     _SSP2STATbits	set	3949
  1211  0000                     _T0CONbits	set	4053
  1212  0000                     _T2CONbits	set	4042
  1213  0000                     _TRISFbits	set	3991
  1214  0000                     _UCON	set	3941
  1215  0000                     _UCONbits	set	3941
  1216  0000                     _UEIR	set	3939
  1217  0000                     _UIR	set	3938
  1218  0000                     _UIRbits	set	3938
  1219  0000                     _USTAT	set	3940
  1220  0000                     _LATA	set	3977
  1221  0000                     _LATB	set	3978
  1222  0000                     _LATC	set	3979
  1223  0000                     _LATD	set	3980
  1224  0000                     _LATE	set	3981
  1225  0000                     _LATF	set	3982
  1226  0000                     _LATG	set	3983
  1227  0000                     _PORTA	set	3968
  1228  0000                     _PORTB	set	3969
  1229  0000                     _PORTC	set	3970
  1230  0000                     _PORTD	set	3971
  1231  0000                     _PORTE	set	3972
  1232  0000                     _PORTF	set	3973
  1233  0000                     _PORTG	set	3974
  1234  0000                     _SSP1BUF	set	4041
  1235  0000                     _SSP1CON1	set	4038
  1236  0000                     _SSP1CON2	set	4037
  1237  0000                     _SSP1STAT	set	4039
  1238  0000                     _SSP2BUF	set	3951
  1239  0000                     _SSP2CON1	set	3948
  1240  0000                     _SSP2CON2	set	3947
  1241  0000                     _SSP2STAT	set	3949
  1242  0000                     _TRISA	set	3986
  1243  0000                     _TRISB	set	3987
  1244  0000                     _TRISC	set	3988
  1245  0000                     _TRISD	set	3989
  1246  0000                     _TRISE	set	3990
  1247  0000                     _TRISF	set	3991
  1248  0000                     _TRISG	set	3992
  1249  00FFC1                     STR_4:
  1250                           
  1251                           ; BSR set to: 0
  1252  00FFC1  54                 	db	84	;'T'
  1253  00FFC2  65                 	db	101	;'e'
  1254  00FFC3  73                 	db	115	;'s'
  1255  00FFC4  74                 	db	116	;'t'
  1256  00FFC5  20                 	db	32
  1257  00FFC6  42                 	db	66	;'B'
  1258  00FFC7  75                 	db	117	;'u'
  1259  00FFC8  74                 	db	116	;'t'
  1260  00FFC9  74                 	db	116	;'t'
  1261  00FFCA  6F                 	db	111	;'o'
  1262  00FFCB  6E                 	db	110	;'n'
  1263  00FFCC  0A                 	db	10
  1264  00FFCD  00                 	db	0
  1265  00FFCE                     STR_3:
  1266                           
  1267                           ; BSR set to: 0
  1268  00FFCE  48                 	db	72	;'H'
  1269  00FFCF  4D                 	db	77	;'M'
  1270  00FFD0  49                 	db	73	;'I'
  1271  00FFD1  20                 	db	32
  1272  00FFD2  44                 	db	68	;'D'
  1273  00FFD3  49                 	db	73	;'I'
  1274  00FFD4  50                 	db	80	;'P'
  1275  00FFD5  0A                 	db	10
  1276  00FFD6  00                 	db	0
  1277  00FFD7                     STR_10:
  1278                           
  1279                           ; BSR set to: 0
  1280  00FFD7  28                 	db	40
  1281  00FFD8  6E                 	db	110	;'n'
  1282  00FFD9  75                 	db	117	;'u'
  1283  00FFDA  6C                 	db	108	;'l'
  1284  00FFDB  6C                 	db	108	;'l'
  1285  00FFDC  29                 	db	41
  1286  00FFDD  00                 	db	0
  1287  00FFDE                     STR_9:
  1288                           
  1289                           ; BSR set to: 0
  1290  00FFDE  50                 	db	80	;'P'
  1291  00FFDF  72                 	db	114	;'r'
  1292  00FFE0  69                 	db	105	;'i'
  1293  00FFE1  6E                 	db	110	;'n'
  1294  00FFE2  74                 	db	116	;'t'
  1295  00FFE3  66                 	db	102	;'f'
  1296  00FFE4  00                 	db	0
  1297  00FFE5                     STR_6:
  1298                           
  1299                           ; BSR set to: 0
  1300  00FFE5  52                 	db	82	;'R'
  1301  00FFE6  69                 	db	105	;'i'
  1302  00FFE7  67                 	db	103	;'g'
  1303  00FFE8  68                 	db	104	;'h'
  1304  00FFE9  74                 	db	116	;'t'
  1305  00FFEA  0A                 	db	10
  1306  00FFEB  00                 	db	0
  1307  00FFEC                     STR_8:
  1308                           
  1309                           ; BSR set to: 0
  1310  00FFEC  44                 	db	68	;'D'
  1311  00FFED  6F                 	db	111	;'o'
  1312  00FFEE  77                 	db	119	;'w'
  1313  00FFEF  6E                 	db	110	;'n'
  1314  00FFF0  0A                 	db	10
  1315  00FFF1  00                 	db	0
  1316  00FFF2                     STR_5:
  1317                           
  1318                           ; BSR set to: 0
  1319  00FFF2  4C                 	db	76	;'L'
  1320  00FFF3  65                 	db	101	;'e'
  1321  00FFF4  66                 	db	102	;'f'
  1322  00FFF5  74                 	db	116	;'t'
  1323  00FFF6  0A                 	db	10
  1324  00FFF7  00                 	db	0
  1325  00FFF8                     STR_7:
  1326                           
  1327                           ; BSR set to: 0
  1328  00FFF8  55                 	db	85	;'U'
  1329  00FFF9  70                 	db	112	;'p'
  1330  00FFFA  0A                 	db	10
  1331  00FFFB  00                 	db	0
  1332  00FFFC                     STR_1:
  1333                           
  1334                           ; BSR set to: 0
  1335  00FFFC  25                 	db	37
  1336  00FFFD  73                 	db	115	;'s'
  1337  00FFFE  00                 	db	0
  1338  0000                     
  1339                           ; #config settings
  1340  00FFFF  00                 	db	0	; dummy byte at the end
  1341  0000                     
  1342                           	psect	cinit
  1343  012788                     __pcinit:
  1344                           	opt stack 0
  1345  012788                     start_initialization:
  1346                           	opt stack 0
  1347  012788                     __initialization:
  1348                           	opt stack 0
  1349                           
  1350                           ; Initialize objects allocated to BANK1 (16 bytes)
  1351                           ; load TBLPTR registers with __pidataBANK1
  1352  012788  0E36               	movlw	low __pidataBANK1
  1353  01278A  6EF6               	movwf	tblptrl,c
  1354  01278C  0E50               	movlw	high __pidataBANK1
  1355  01278E  6EF7               	movwf	tblptrh,c
  1356  012790  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1357  012792  6EF8               	movwf	tblptru,c
  1358  012794  EE01  F0E8         	lfsr	0,__pdataBANK1
  1359  012798  EE10 F010          	lfsr	1,16
  1360  01279C                     copy_data0:
  1361  01279C  0009               	tblrd		*+
  1362  01279E  CFF5 FFEE          	movff	tablat,postinc0
  1363  0127A2  50E5               	movf	postdec1,w,c
  1364  0127A4  50E1               	movf	fsr1l,w,c
  1365  0127A6  E1FA               	bnz	copy_data0
  1366                           
  1367                           ; Initialize objects allocated to BANK0 (11 bytes)
  1368                           ; load TBLPTR registers with __pidataBANK0
  1369  0127A8  0E70               	movlw	low __pidataBANK0
  1370  0127AA  6EF6               	movwf	tblptrl,c
  1371  0127AC  0E50               	movlw	high __pidataBANK0
  1372  0127AE  6EF7               	movwf	tblptrh,c
  1373  0127B0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1374  0127B2  6EF8               	movwf	tblptru,c
  1375  0127B4  EE00  F0F4         	lfsr	0,__pdataBANK0
  1376  0127B8  EE10 F00B          	lfsr	1,11
  1377  0127BC                     copy_data1:
  1378  0127BC  0009               	tblrd		*+
  1379  0127BE  CFF5 FFEE          	movff	tablat,postinc0
  1380  0127C2  50E5               	movf	postdec1,w,c
  1381  0127C4  50E1               	movf	fsr1l,w,c
  1382  0127C6  E1FA               	bnz	copy_data1
  1383                           
  1384                           ; Initialize objects allocated to COMRAM (2 bytes)
  1385                           ; load TBLPTR registers with __pidataCOMRAM
  1386  0127C8  0EB4               	movlw	low __pidataCOMRAM
  1387  0127CA  6EF6               	movwf	tblptrl,c
  1388  0127CC  0E50               	movlw	high __pidataCOMRAM
  1389  0127CE  6EF7               	movwf	tblptrh,c
  1390  0127D0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1391  0127D2  6EF8               	movwf	tblptru,c
  1392  0127D4  0009               	tblrd		*+	;fetch initializer
  1393  0127D6  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  1394  0127DA  0009               	tblrd		*+	;fetch initializer
  1395  0127DC  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  1396                           
  1397                           ; Clear objects allocated to BIGRAMh (2001 bytes)
  1398  0127E0  EE04  F040         	lfsr	0,__pbssBIGRAMh
  1399  0127E4  EE17 F0D1          	lfsr	1,2001
  1400  0127E8                     clear_0:
  1401  0127E8  6AEE               	clrf	postinc0,c
  1402  0127EA  50E5               	movf	postdec1,w,c
  1403  0127EC  50E1               	movf	fsr1l,w,c
  1404  0127EE  E1FC               	bnz	clear_0
  1405  0127F0  50E2               	movf	fsr1h,w,c
  1406  0127F2  E1FA               	bnz	clear_0
  1407                           
  1408                           ; Clear objects allocated to BIGRAMl (300 bytes)
  1409  0127F4  EE0C  F011         	lfsr	0,__pbssBIGRAMl
  1410  0127F8  EE11 F02C          	lfsr	1,300
  1411  0127FC                     clear_1:
  1412  0127FC  6AEE               	clrf	postinc0,c
  1413  0127FE  50E5               	movf	postdec1,w,c
  1414  012800  50E1               	movf	fsr1l,w,c
  1415  012802  E1FC               	bnz	clear_1
  1416  012804  50E2               	movf	fsr1h,w,c
  1417  012806  E1FA               	bnz	clear_1
  1418                           
  1419                           ; Clear objects allocated to BANK3 (170 bytes)
  1420  012808  EE03  F000         	lfsr	0,__pbssBANK3
  1421  01280C  0EAA               	movlw	170
  1422  01280E                     clear_2:
  1423  01280E  6AEE               	clrf	postinc0,c
  1424  012810  06E8               	decf	wreg,f,c
  1425  012812  E1FD               	bnz	clear_2
  1426                           
  1427                           ; Clear objects allocated to BANK2 (232 bytes)
  1428  012814  EE02  F000         	lfsr	0,__pbssBANK2
  1429  012818  0EE8               	movlw	232
  1430  01281A                     clear_3:
  1431  01281A  6AEE               	clrf	postinc0,c
  1432  01281C  06E8               	decf	wreg,f,c
  1433  01281E  E1FD               	bnz	clear_3
  1434                           
  1435                           ; Clear objects allocated to BANK1 (232 bytes)
  1436  012820  EE01  F000         	lfsr	0,__pbssBANK1
  1437  012824  0EE8               	movlw	232
  1438  012826                     clear_4:
  1439  012826  6AEE               	clrf	postinc0,c
  1440  012828  06E8               	decf	wreg,f,c
  1441  01282A  E1FD               	bnz	clear_4
  1442                           
  1443                           ; Clear objects allocated to BANK0 (78 bytes)
  1444  01282C  EE00  F060         	lfsr	0,__pbssBANK0
  1445  012830  0E4E               	movlw	78
  1446  012832                     clear_5:
  1447  012832  6AEE               	clrf	postinc0,c
  1448  012834  06E8               	decf	wreg,f,c
  1449  012836  E1FD               	bnz	clear_5
  1450                           
  1451                           ; Clear objects allocated to COMRAM (37 bytes)
  1452  012838  EE00  F038         	lfsr	0,__pbssCOMRAM
  1453  01283C  0E25               	movlw	37
  1454  01283E                     clear_6:
  1455  01283E  6AEE               	clrf	postinc0,c
  1456  012840  06E8               	decf	wreg,f,c
  1457  012842  E1FD               	bnz	clear_6
  1458  012844                     end_of_initialization:
  1459                           	opt stack 0
  1460  012844                     __end_of__initialization:
  1461                           	opt stack 0
  1462  012844  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1463  012846  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1464  012848  0100               	movlb	0
  1465  01284A  EF92  F0A5         	goto	_main	;jump to C main() function
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           postdec1	equ	0xFE5
  1473                           fsr1h	equ	0xFE2
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476                           	psect	bssCOMRAM
  1477  000038                     __pbssCOMRAM:
  1478                           	opt stack 0
  1479  000038                     _USB1msTickCount:
  1480                           	opt stack 0
  1481  000038                     	ds	4
  1482  00003C                     _gMotor:
  1483                           	opt stack 0
  1484  00003C                     	ds	2
  1485  00003E                     _pBDTEntryEP0OutCurrent:
  1486                           	opt stack 0
  1487  00003E                     	ds	2
  1488  000040                     _pBDTEntryEP0OutNext:
  1489                           	opt stack 0
  1490  000040                     	ds	2
  1491  000042                     TetrisBlockRotate@undo:
  1492                           	opt stack 0
  1493  000042                     	ds	1
  1494  000043                     _BothEP0OutUOWNsSet:
  1495                           	opt stack 0
  1496  000043                     	ds	1
  1497  000044                     _Read:
  1498                           	opt stack 0
  1499  000044                     	ds	1
  1500  000045                     _RemoteWakeup:
  1501                           	opt stack 0
  1502  000045                     	ds	1
  1503  000046                     _USBDeferINDataStagePackets:
  1504                           	opt stack 0
  1505  000046                     	ds	1
  1506  000047                     _USBDeferOUTDataStagePackets:
  1507                           	opt stack 0
  1508  000047                     	ds	1
  1509  000048                     _USBDeferStatusStagePacket:
  1510                           	opt stack 0
  1511  000048                     	ds	1
  1512  000049                     _USBDeviceState:
  1513                           	opt stack 0
  1514  000049                     	ds	1
  1515  00004A                     _USBStatusStageEnabledFlag1:
  1516                           	opt stack 0
  1517  00004A                     	ds	1
  1518  00004B                     _USBStatusStageEnabledFlag2:
  1519                           	opt stack 0
  1520  00004B                     	ds	1
  1521  00004C                     _USBStatusStageTimeoutCounter:
  1522                           	opt stack 0
  1523  00004C                     	ds	1
  1524  00004D                     _controlTransferState:
  1525                           	opt stack 0
  1526  00004D                     	ds	1
  1527  00004E                     _control_signal_bitmap:
  1528                           	opt stack 0
  1529  00004E                     	ds	1
  1530  00004F                     _endpoint_number:
  1531                           	opt stack 0
  1532  00004F                     	ds	1
  1533  000050                     _shortPacketStatus:
  1534                           	opt stack 0
  1535  000050                     	ds	1
  1536  000051                     _I2C1T:
  1537                           	opt stack 0
  1538  000051                     	ds	6
  1539  000057                     _USBAlternateInterface:
  1540                           	opt stack 0
  1541  000057                     	ds	2
  1542  000059                     IMU_ReadReg@r:
  1543                           	opt stack 0
  1544  000059                     	ds	1
  1545  00005A                     IMU_WriteReg@r:
  1546                           	opt stack 0
  1547  00005A                     	ds	1
  1548  00005B                     _USBActiveConfiguration:
  1549                           	opt stack 0
  1550  00005B                     	ds	1
  1551  00005C                     _USTATcopy:
  1552                           	opt stack 0
  1553  00005C                     	ds	1
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	dataCOMRAM
  1565  00005D                     __pdataCOMRAM:
  1566                           	opt stack 0
  1567  00005D                     	ds	1
  1568  00005E                     	ds	1
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1h	equ	0xFE2
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	bssBANK0
  1580  000060                     __pbssBANK0:
  1581                           	opt stack 0
  1582  000060                     _outPipes:
  1583                           	opt stack 0
  1584  000060                     	ds	9
  1585  000069                     _inPipes:
  1586                           	opt stack 0
  1587  000069                     	ds	6
  1588  00006F                     _pBDTEntryIn:
  1589                           	opt stack 0
  1590  00006F                     	ds	6
  1591  000075                     _pBDTEntryOut:
  1592                           	opt stack 0
  1593  000075                     	ds	6
  1594  00007B                     _ep_data_in:
  1595                           	opt stack 0
  1596  00007B                     	ds	3
  1597  00007E                     _ep_data_out:
  1598                           	opt stack 0
  1599  00007E                     	ds	3
  1600  000081                     HMI_GRender@a:
  1601                           	opt stack 0
  1602  000081                     	ds	2
  1603  000083                     _CDCDataInHandle:
  1604                           	opt stack 0
  1605  000083                     	ds	2
  1606  000085                     _CDCDataOutHandle:
  1607                           	opt stack 0
  1608  000085                     	ds	2
  1609  000087                     _COUNTER:
  1610                           	opt stack 0
  1611  000087                     	ds	2
  1612  000089                     _gBackcolour:
  1613                           	opt stack 0
  1614  000089                     	ds	2
  1615  00008B                     _pShiftVal:
  1616                           	opt stack 0
  1617  00008B                     	ds	2
  1618  00008D                     _val:
  1619                           	opt stack 0
  1620  00008D                     	ds	2
  1621  00008F                     Event_TestButton@j:
  1622                           	opt stack 0
  1623  00008F                     	ds	1
  1624  000090                     OutSeg@a:
  1625                           	opt stack 0
  1626  000090                     	ds	1
  1627  000091                     OutSeg@cur:
  1628                           	opt stack 0
  1629  000091                     	ds	1
  1630  000092                     OutSeg@segset:
  1631                           	opt stack 0
  1632  000092                     	ds	1
  1633  000093                     Timer0_Init@PRE:
  1634                           	opt stack 0
  1635  000093                     	ds	1
  1636  000094                     Timer2_Init@INDEX:
  1637                           	opt stack 0
  1638  000094                     	ds	1
  1639  000095                     Timer2_Init@PRE:
  1640                           	opt stack 0
  1641  000095                     	ds	1
  1642  000096                     _INDEX:
  1643                           	opt stack 0
  1644  000096                     	ds	1
  1645  000097                     _USBBusIsSuspended:
  1646                           	opt stack 0
  1647  000097                     	ds	1
  1648  000098                     _USBTicksSinceSuspendEnd:
  1649                           	opt stack 0
  1650  000098                     	ds	1
  1651  000099                     _cdc_mem_type:
  1652                           	opt stack 0
  1653  000099                     	ds	1
  1654  00009A                     _cdc_rx_len:
  1655                           	opt stack 0
  1656  00009A                     	ds	1
  1657  00009B                     _cdc_trf_state:
  1658                           	opt stack 0
  1659  00009B                     	ds	1
  1660  00009C                     _cdc_tx_len:
  1661                           	opt stack 0
  1662  00009C                     	ds	1
  1663  00009D                     _clearall:
  1664                           	opt stack 0
  1665  00009D                     	ds	1
  1666  00009E                     _i:
  1667                           	opt stack 0
  1668  00009E                     	ds	1
  1669  00009F                     _j:
  1670                           	opt stack 0
  1671  00009F                     	ds	1
  1672  0000A0                     _k:
  1673                           	opt stack 0
  1674  0000A0                     	ds	1
  1675  0000A1                     _lBufferX:
  1676                           	opt stack 0
  1677  0000A1                     	ds	1
  1678  0000A2                     _lBufferY:
  1679                           	opt stack 0
  1680  0000A2                     	ds	1
  1681  0000A3                     _u:
  1682                           	opt stack 0
  1683  0000A3                     	ds	1
  1684  0000A4                     _PortC:
  1685                           	opt stack 0
  1686  0000A4                     	ds	10
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1h	equ	0xFE2
  1695                           fsr1l	equ	0xFE1
  1696                           
  1697                           	psect	dataBANK0
  1698  0000F4                     __pdataBANK0:
  1699                           	opt stack 0
  1700  0000F4                     _gCursor:
  1701                           	opt stack 0
  1702  0000F4                     	ds	4
  1703  0000F8                     _Hz:
  1704                           	opt stack 0
  1705  0000F8                     	ds	2
  1706  0000FA                     	ds	1
  1707  0000FB                     _Bus_State:
  1708                           	opt stack 0
  1709  0000FB                     	ds	1
  1710  0000FC                     _change:
  1711                           	opt stack 0
  1712  0000FC                     	ds	1
  1713  0000FD                     _l:
  1714                           	opt stack 0
  1715  0000FD                     	ds	1
  1716  0000FE                     _w:
  1717                           	opt stack 0
  1718  0000FE                     	ds	1
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1h	equ	0xFE2
  1727                           fsr1l	equ	0xFE1
  1728                           
  1729                           	psect	bssBANK1
  1730  000100                     __pbssBANK1:
  1731                           	opt stack 0
  1732  000100                     TetrisFieldDraw@lCorner:
  1733                           	opt stack 0
  1734  000100                     	ds	4
  1735  000104                     TetrisFieldDraw@lSize:
  1736                           	opt stack 0
  1737  000104                     	ds	4
  1738  000108                     Timer0_Init@DIV:
  1739                           	opt stack 0
  1740  000108                     	ds	4
  1741  00010C                     Timer2_Init@DIV:
  1742                           	opt stack 0
  1743  00010C                     	ds	4
  1744  000110                     _BaudRateGen:
  1745                           	opt stack 0
  1746  000110                     	ds	4
  1747  000114                     _pCMD:
  1748                           	opt stack 0
  1749  000114                     	ds	4
  1750  000118                     _I2C1_Done:
  1751                           	opt stack 0
  1752  000118                     	ds	3
  1753  00011B                     _I2C1_More:
  1754                           	opt stack 0
  1755  00011B                     	ds	3
  1756  00011E                     _I2C2_Done:
  1757                           	opt stack 0
  1758  00011E                     	ds	3
  1759  000121                     _I2C2_More:
  1760                           	opt stack 0
  1761  000121                     	ds	3
  1762  000124                     _gISR:
  1763                           	opt stack 0
  1764  000124                     	ds	3
  1765  000127                     _pCDCDst:
  1766                           	opt stack 0
  1767  000127                     	ds	3
  1768  00012A                     _pCDCSrc:
  1769                           	opt stack 0
  1770  00012A                     	ds	3
  1771  00012D                     SPI_Send9@dat:
  1772                           	opt stack 0
  1773  00012D                     	ds	2
  1774  00012F                     _HzOld:
  1775                           	opt stack 0
  1776  00012F                     	ds	2
  1777  000131                     _pDst:
  1778                           	opt stack 0
  1779  000131                     	ds	2
  1780  000133                     _HMIBoard:
  1781                           	opt stack 0
  1782  000133                     	ds	48
  1783  000163                     _SPI1:
  1784                           	opt stack 0
  1785  000163                     	ds	11
  1786  00016E                     _SPI2:
  1787                           	opt stack 0
  1788  00016E                     	ds	11
  1789  000179                     _PortA:
  1790                           	opt stack 0
  1791  000179                     	ds	10
  1792  000183                     _PortB:
  1793                           	opt stack 0
  1794  000183                     	ds	10
  1795  00018D                     _PortD:
  1796                           	opt stack 0
  1797  00018D                     	ds	10
  1798  000197                     _PortE:
  1799                           	opt stack 0
  1800  000197                     	ds	10
  1801  0001A1                     _PortF:
  1802                           	opt stack 0
  1803  0001A1                     	ds	10
  1804  0001AB                     _PortG:
  1805                           	opt stack 0
  1806  0001AB                     	ds	10
  1807  0001B5                     _DIPSwitch:
  1808                           	opt stack 0
  1809  0001B5                     	ds	8
  1810  0001BD                     _TestButton:
  1811                           	opt stack 0
  1812  0001BD                     	ds	8
  1813  0001C5                     _dummy_encapsulated_cmd_response:
  1814                           	opt stack 0
  1815  0001C5                     	ds	8
  1816  0001CD                     _line_coding:
  1817                           	opt stack 0
  1818  0001CD                     	ds	7
  1819  0001D4                     _I2C2T:
  1820                           	opt stack 0
  1821  0001D4                     	ds	6
  1822  0001DA                     _Stepper:
  1823                           	opt stack 0
  1824  0001DA                     	ds	6
  1825  0001E0                     LCD_DrawRectangle@p2:
  1826                           	opt stack 0
  1827  0001E0                     	ds	4
  1828  0001E4                     LCD_DrawRectangle@p4:
  1829                           	opt stack 0
  1830  0001E4                     	ds	4
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           
  1841                           	psect	dataBANK1
  1842  0001E8                     __pdataBANK1:
  1843                           	opt stack 0
  1844  0001E8                     Console_Render@F7891:
  1845                           	opt stack 0
  1846  0001E8                     	ds	4
  1847  0001EC                     _gCharSize:
  1848                           	opt stack 0
  1849  0001EC                     	ds	4
  1850  0001F0                     _gLineSize:
  1851                           	opt stack 0
  1852  0001F0                     	ds	4
  1853  0001F4                     _DIST:
  1854                           	opt stack 0
  1855  0001F4                     	ds	2
  1856  0001F6                     _gForecolour:
  1857                           	opt stack 0
  1858  0001F6                     	ds	2
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           postdec1	equ	0xFE5
  1866                           fsr1h	equ	0xFE2
  1867                           fsr1l	equ	0xFE1
  1868                           
  1869                           	psect	bssBANK2
  1870  000200                     __pbssBANK2:
  1871                           	opt stack 0
  1872  000200                     _lCBuffer:
  1873                           	opt stack 0
  1874  000200                     	ds	30
  1875  00021E                     _cdc_notice:
  1876                           	opt stack 0
  1877  00021E                     	ds	10
  1878  000228                     _USBInputBuffer:
  1879                           	opt stack 0
  1880  000228                     	ds	64
  1881  000268                     _cdc_data_rx:
  1882                           	opt stack 0
  1883  000268                     	ds	64
  1884  0002A8                     _cdc_data_tx:
  1885                           	opt stack 0
  1886  0002A8                     	ds	64
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1h	equ	0xFE2
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	bssBANK3
  1898  000300                     __pbssBANK3:
  1899                           	opt stack 0
  1900  000300                     _USBOutputBuffer:
  1901                           	opt stack 0
  1902  000300                     	ds	64
  1903  000340                     _gTestBlock:
  1904                           	opt stack 0
  1905  000340                     	ds	36
  1906  000364                     Console_MakeField@Fill:
  1907                           	opt stack 0
  1908  000364                     	ds	70
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1h	equ	0xFE2
  1917                           fsr1l	equ	0xFE1
  1918                           
  1919                           	psect	bssBIGRAMh
  1920  000440                     __pbssBIGRAMh:
  1921                           	opt stack 0
  1922  000440                     _gTetrisField:
  1923                           	opt stack 0
  1924  000440                     	ds	2001
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           postinc0	equ	0xFEE
  1930                           wreg	equ	0xFE8
  1931                           postdec1	equ	0xFE5
  1932                           fsr1h	equ	0xFE2
  1933                           fsr1l	equ	0xFE1
  1934                           
  1935                           	psect	bssBIGRAMl
  1936  000C11                     __pbssBIGRAMl:
  1937                           	opt stack 0
  1938  000C11                     _lBuffer:
  1939                           	opt stack 0
  1940  000C11                     	ds	300
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           postdec1	equ	0xFE5
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           
  1951                           	psect	cstackBANK0
  1952  0000AE                     __pcstackBANK0:
  1953                           	opt stack 0
  1954  0000AE                     ??_Console_ClearCursor:
  1955  0000AE                     ??_Console_Init:
  1956  0000AE                     ??_Console_NewLine:
  1957  0000AE                     ??_Console_FormFeed:
  1958  0000AE                     ??_HMI_SetButton:
  1959  0000AE                     ?_strlen:
  1960                           	opt stack 0
  1961  0000AE                     ?_USBTransferOnePacket:
  1962                           	opt stack 0
  1963  0000AE                     ?_GetPortProperties:
  1964                           	opt stack 0
  1965  0000AE                     ?_GetPortPORT:
  1966                           	opt stack 0
  1967  0000AE                     ?_GetPortTRIS:
  1968                           	opt stack 0
  1969  0000AE                     ?___wmul:
  1970                           	opt stack 0
  1971  0000AE                     ?___awdiv:
  1972                           	opt stack 0
  1973  0000AE                     ?___lwdiv:
  1974                           	opt stack 0
  1975  0000AE                     ?___lwmod:
  1976                           	opt stack 0
  1977  0000AE                     ?___lldiv:
  1978                           	opt stack 0
  1979  0000AE                     USBTransferOnePacket@dir:
  1980                           	opt stack 0
  1981  0000AE                     ToSegment@pCHR:
  1982                           	opt stack 0
  1983  0000AE                     HMI_SetLeft@pValue:
  1984                           	opt stack 0
  1985  0000AE                     HMI_SetRight@pValue:
  1986                           	opt stack 0
  1987  0000AE                     HMI_SetUp@pValue:
  1988                           	opt stack 0
  1989  0000AE                     HMI_SetDown@pValue:
  1990                           	opt stack 0
  1991  0000AE                     HMI_SetBar@pValue:
  1992                           	opt stack 0
  1993  0000AE                     putUSBUSART@data:
  1994                           	opt stack 0
  1995  0000AE                     Port_GetPin@pInput:
  1996                           	opt stack 0
  1997  0000AE                     Port_GetQuad@pInput:
  1998                           	opt stack 0
  1999  0000AE                     SPI_DisableISR@pInput:
  2000                           	opt stack 0
  2001  0000AE                     SPI_DCS@pInput:
  2002                           	opt stack 0
  2003  0000AE                     SPI_Send@pInput:
  2004                           	opt stack 0
  2005  0000AE                     SPI_Send9@pInput:
  2006                           	opt stack 0
  2007  0000AE                     Byte_SetBit@pInput:
  2008                           	opt stack 0
  2009  0000AE                     Byte_GetBit@pInput:
  2010                           	opt stack 0
  2011  0000AE                     Byte_SetZone@pInput:
  2012                           	opt stack 0
  2013  0000AE                     Byte_GetZone@pInput:
  2014                           	opt stack 0
  2015  0000AE                     Byte_SetPort@pInput:
  2016                           	opt stack 0
  2017  0000AE                     delay_ms@ms:
  2018                           	opt stack 0
  2019  0000AE                     delay_us@us:
  2020                           	opt stack 0
  2021  0000AE                     reverse@input:
  2022                           	opt stack 0
  2023  0000AE                     Motor_Continious@pMotor:
  2024                           	opt stack 0
  2025  0000AE                     ___wmul@multiplier:
  2026                           	opt stack 0
  2027  0000AE                     ___awdiv@dividend:
  2028                           	opt stack 0
  2029  0000AE                     ___lwdiv@dividend:
  2030                           	opt stack 0
  2031  0000AE                     ___lwmod@dividend:
  2032                           	opt stack 0
  2033  0000AE                     memset@p1:
  2034                           	opt stack 0
  2035  0000AE                     strlen@s:
  2036                           	opt stack 0
  2037  0000AE                     Timer0_Start@pFunction:
  2038                           	opt stack 0
  2039  0000AE                     ___lldiv@dividend:
  2040                           	opt stack 0
  2041                           
  2042                           ; 4 bytes @ 0x0
  2043  0000AE                     	ds	1
  2044  0000AF                     USBTransferOnePacket@data:
  2045                           	opt stack 0
  2046  0000AF                     HMI_SetSegments@pString:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x1
  2050  0000AF                     	ds	1
  2051  0000B0                     ??_strlen:
  2052  0000B0                     putUSBUSART@length:
  2053                           	opt stack 0
  2054  0000B0                     GetPortProperties@pInput:
  2055                           	opt stack 0
  2056  0000B0                     GetPortPORT@pInput:
  2057                           	opt stack 0
  2058  0000B0                     GetPortTRIS@pInput:
  2059                           	opt stack 0
  2060  0000B0                     Port_GetPin@pPin:
  2061                           	opt stack 0
  2062  0000B0                     Port_GetQuad@pQuad:
  2063                           	opt stack 0
  2064  0000B0                     SPI_Send@pData:
  2065                           	opt stack 0
  2066  0000B0                     Byte_SetBit@pBit:
  2067                           	opt stack 0
  2068  0000B0                     Byte_GetBit@pBit:
  2069                           	opt stack 0
  2070  0000B0                     Byte_SetZone@pMax:
  2071                           	opt stack 0
  2072  0000B0                     Byte_GetZone@pMax:
  2073                           	opt stack 0
  2074  0000B0                     Byte_SetPort@pValue:
  2075                           	opt stack 0
  2076  0000B0                     Console_Init@x:
  2077                           	opt stack 0
  2078  0000B0                     Console_FormFeed@x:
  2079                           	opt stack 0
  2080  0000B0                     SPI_Send9@pData:
  2081                           	opt stack 0
  2082  0000B0                     reverse@length:
  2083                           	opt stack 0
  2084  0000B0                     Motor_Continious@pDirection:
  2085                           	opt stack 0
  2086  0000B0                     ___wmul@multiplicand:
  2087                           	opt stack 0
  2088  0000B0                     ___awdiv@divisor:
  2089                           	opt stack 0
  2090  0000B0                     ___lwdiv@divisor:
  2091                           	opt stack 0
  2092  0000B0                     ___lwmod@divisor:
  2093                           	opt stack 0
  2094  0000B0                     memset@c:
  2095                           	opt stack 0
  2096  0000B0                     delay_ms@u:
  2097                           	opt stack 0
  2098  0000B0                     delay_us@u:
  2099                           	opt stack 0
  2100  0000B0                     HMI_SetButton@reindex:
  2101                           	opt stack 0
  2102                           
  2103                           ; 4 bytes @ 0x2
  2104  0000B0                     	ds	1
  2105  0000B1                     ??_Port_GetPin:
  2106  0000B1                     ??_Port_GetQuad:
  2107  0000B1                     ??_Byte_GetBit:
  2108  0000B1                     USBTransferOnePacket@len:
  2109                           	opt stack 0
  2110  0000B1                     Byte_SetBit@pValue:
  2111                           	opt stack 0
  2112  0000B1                     Byte_SetZone@pChunk:
  2113                           	opt stack 0
  2114  0000B1                     Byte_GetZone@pChunk:
  2115                           	opt stack 0
  2116  0000B1                     Console_Init@y:
  2117                           	opt stack 0
  2118  0000B1                     Console_FormFeed@y:
  2119                           	opt stack 0
  2120  0000B1                     OutSeg@pSegment:
  2121                           	opt stack 0
  2122  0000B1                     Motor_Move@pMotor:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x3
  2126  0000B1                     	ds	1
  2127  0000B2                     ??_Byte_SetBit:
  2128  0000B2                     ??_USBTransferOnePacket:
  2129  0000B2                     ??_Console_IncrementCursor:
  2130  0000B2                     ??_OutSeg:
  2131  0000B2                     LCD_Write@mode:
  2132                           	opt stack 0
  2133  0000B2                     Byte_GetBit@Output:
  2134                           	opt stack 0
  2135  0000B2                     Byte_SetZone@pChunkSize:
  2136                           	opt stack 0
  2137  0000B2                     Byte_GetZone@pChunkSize:
  2138                           	opt stack 0
  2139  0000B2                     reverse@tempVar:
  2140                           	opt stack 0
  2141  0000B2                     ___awdiv@counter:
  2142                           	opt stack 0
  2143  0000B2                     ___lwmod@counter:
  2144                           	opt stack 0
  2145  0000B2                     HMI_SetSegments@in:
  2146                           	opt stack 0
  2147  0000B2                     ___wmul@product:
  2148                           	opt stack 0
  2149  0000B2                     ___lwdiv@quotient:
  2150                           	opt stack 0
  2151  0000B2                     memset@n:
  2152                           	opt stack 0
  2153  0000B2                     strlen@cp:
  2154                           	opt stack 0
  2155  0000B2                     ___lldiv@divisor:
  2156                           	opt stack 0
  2157                           
  2158                           ; 4 bytes @ 0x4
  2159  0000B2                     	ds	1
  2160  0000B3                     ??_Byte_GetZone:
  2161  0000B3                     ?_Console_MakeField:
  2162                           	opt stack 0
  2163  0000B3                     LCD_Write@value:
  2164                           	opt stack 0
  2165  0000B3                     Port_GetPin@Output:
  2166                           	opt stack 0
  2167  0000B3                     Port_GetQuad@Output:
  2168                           	opt stack 0
  2169  0000B3                     Byte_SetZone@pValue:
  2170                           	opt stack 0
  2171  0000B3                     ___awdiv@sign:
  2172                           	opt stack 0
  2173  0000B3                     reverse@iterator:
  2174                           	opt stack 0
  2175  0000B3                     Motor_Move@pDelta:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x5
  2179  0000B3                     	ds	1
  2180  0000B4                     ??_Byte_SetZone:
  2181  0000B4                     Byte_GetZone@MASK:
  2182                           	opt stack 0
  2183  0000B4                     OutSeg@pInput:
  2184                           	opt stack 0
  2185  0000B4                     HMI_SetButton@pValue:
  2186                           	opt stack 0
  2187  0000B4                     MXK_BlockSwitchTo@CUR:
  2188                           	opt stack 0
  2189  0000B4                     ___lwdiv@counter:
  2190                           	opt stack 0
  2191  0000B4                     Button_State@pInput:
  2192                           	opt stack 0
  2193  0000B4                     LCD_Write@v:
  2194                           	opt stack 0
  2195  0000B4                     USB_Print@pInput:
  2196                           	opt stack 0
  2197  0000B4                     ___awdiv@quotient:
  2198                           	opt stack 0
  2199  0000B4                     memset@p:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x6
  2203  0000B4                     	ds	1
  2204  0000B5                     ??_Console_MakeField:
  2205  0000B5                     Byte_GetZone@Offset:
  2206                           	opt stack 0
  2207  0000B5                     OutSeg@out:
  2208                           	opt stack 0
  2209  0000B5                     HMI_SetButton@v:
  2210                           	opt stack 0
  2211  0000B5                     MXK_BlockSwitchTo@pModule:
  2212                           	opt stack 0
  2213  0000B5                     itos@input:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x7
  2217  0000B5                     	ds	1
  2218  0000B6                     ??_Console_Tab:
  2219  0000B6                     USBDeviceInit@i:
  2220                           	opt stack 0
  2221  0000B6                     USBTransferOnePacket@ep:
  2222                           	opt stack 0
  2223  0000B6                     Byte_GetZone@Output:
  2224                           	opt stack 0
  2225  0000B6                     _LCD_Write$3147:
  2226                           	opt stack 0
  2227  0000B6                     HMI_Render@a:
  2228                           	opt stack 0
  2229  0000B6                     USB_Print@len:
  2230                           	opt stack 0
  2231  0000B6                     ___lldiv@quotient:
  2232                           	opt stack 0
  2233                           
  2234                           ; 4 bytes @ 0x8
  2235  0000B6                     	ds	1
  2236  0000B7                     Byte_SetZone@Offset:
  2237                           	opt stack 0
  2238  0000B7                     USBTransferOnePacket@handle:
  2239                           	opt stack 0
  2240  0000B7                     Byte_GetPair@pInput:
  2241                           	opt stack 0
  2242  0000B7                     itos@destination:
  2243                           	opt stack 0
  2244  0000B7                     Console_MakeField@Index:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x9
  2248  0000B7                     	ds	1
  2249  0000B8                     Set_Addr_Window@ys:
  2250                           	opt stack 0
  2251  0000B8                     Set_Rotation@m:
  2252                           	opt stack 0
  2253  0000B8                     Byte_SetZone@MASK:
  2254                           	opt stack 0
  2255  0000B8                     LCD_Word_Write@value:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0xA
  2259  0000B8                     	ds	1
  2260  0000B9                     CDCTxService@i:
  2261                           	opt stack 0
  2262  0000B9                     Set_Addr_Window@xe:
  2263                           	opt stack 0
  2264  0000B9                     Set_Rotation@rotation:
  2265                           	opt stack 0
  2266  0000B9                     Byte_GetPair@pPair:
  2267                           	opt stack 0
  2268  0000B9                     getsUSBUSART@buffer:
  2269                           	opt stack 0
  2270  0000B9                     Byte_SetPair@pInput:
  2271                           	opt stack 0
  2272  0000B9                     Byte_SetQuad@pInput:
  2273                           	opt stack 0
  2274  0000B9                     itos@Data:
  2275                           	opt stack 0
  2276  0000B9                     Console_MakeField@Column:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0xB
  2280  0000B9                     	ds	1
  2281  0000BA                     CDCTxService@byte_to_send:
  2282                           	opt stack 0
  2283  0000BA                     Set_Addr_Window@ye:
  2284                           	opt stack 0
  2285  0000BA                     ___lldiv@counter:
  2286                           	opt stack 0
  2287  0000BA                     Word_GetPair@pInput:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0xC
  2291  0000BA                     	ds	1
  2292  0000BB                     getsUSBUSART@len:
  2293                           	opt stack 0
  2294  0000BB                     Set_Addr_Window@xs:
  2295                           	opt stack 0
  2296  0000BB                     Byte_SetPair@pPair:
  2297                           	opt stack 0
  2298  0000BB                     Byte_SetQuad@pQuad:
  2299                           	opt stack 0
  2300  0000BB                     Console_Tab@t:
  2301                           	opt stack 0
  2302  0000BB                     itos@Length:
  2303                           	opt stack 0
  2304  0000BB                     _Console_MakeField$11988:
  2305                           	opt stack 0
  2306  0000BB                     Timer0_Init@pFrequency:
  2307                           	opt stack 0
  2308  0000BB                     Timer2_Init@pFrequency:
  2309                           	opt stack 0
  2310                           
  2311                           ; 4 bytes @ 0xD
  2312  0000BB                     	ds	1
  2313  0000BC                     Byte_SetPair@pValue:
  2314                           	opt stack 0
  2315  0000BC                     Byte_SetQuad@pValue:
  2316                           	opt stack 0
  2317  0000BC                     Word_GetPair@pPair:
  2318                           	opt stack 0
  2319  0000BC                     Console_Tab@i:
  2320                           	opt stack 0
  2321  0000BC                     LCD_Fill@pColour:
  2322                           	opt stack 0
  2323  0000BC                     LCD_FillRectangle@pColour:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0xE
  2327  0000BC                     	ds	1
  2328  0000BD                     Console_Tab@c:
  2329                           	opt stack 0
  2330  0000BD                     Console_MakeField@pInput:
  2331                           	opt stack 0
  2332  0000BD                     Port_SetPin@pInput:
  2333                           	opt stack 0
  2334  0000BD                     Port_Set@pInput:
  2335                           	opt stack 0
  2336  0000BD                     SPI_MinSpeed@pInput:
  2337                           	opt stack 0
  2338  0000BD                     SPI_MaxSpeed@pInput:
  2339                           	opt stack 0
  2340  0000BD                     Word_SetPair@pInput:
  2341                           	opt stack 0
  2342  0000BD                     PortProperty_Valid@pInput:
  2343                           	opt stack 0
  2344  0000BD                     itos@Out:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0xF
  2348  0000BD                     	ds	1
  2349  0000BE                     ??_Console_PrintChar:
  2350  0000BE                     LCD_Fill@i:
  2351                           	opt stack 0
  2352  0000BE                     Console_MakeField@x:
  2353                           	opt stack 0
  2354  0000BE                     LCD_FillRectangle@pPoint:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0x10
  2358  0000BE                     	ds	1
  2359  0000BF                     ??_Timer2_Init:
  2360  0000BF                     ??_Timer0_Init:
  2361  0000BF                     LCD_Fill@j:
  2362                           	opt stack 0
  2363  0000BF                     Port_SetPin@pPin:
  2364                           	opt stack 0
  2365  0000BF                     Port_Set@pValue:
  2366                           	opt stack 0
  2367  0000BF                     Word_SetPair@pPair:
  2368                           	opt stack 0
  2369  0000BF                     PortProperty_Valid@pPinDrive:
  2370                           	opt stack 0
  2371  0000BF                     Console_MakeField@y:
  2372                           	opt stack 0
  2373  0000BF                     HMI_SetNumber@pInput:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x11
  2377  0000BF                     	ds	1
  2378  0000C0                     ??_Port_Set:
  2379  0000C0                     Port_SetPin@pValue:
  2380                           	opt stack 0
  2381  0000C0                     Word_SetPair@pValue:
  2382                           	opt stack 0
  2383  0000C0                     PortProperty_Valid@pPin:
  2384                           	opt stack 0
  2385  0000C0                     LCD_DrawField@pField:
  2386                           	opt stack 0
  2387  0000C0                     Timer2_Init@RDIV:
  2388                           	opt stack 0
  2389                           
  2390                           ; 4 bytes @ 0x12
  2391  0000C0                     	ds	1
  2392  0000C1                     ??_PortProperty_Valid:
  2393  0000C1                     Port_SetPin@Type:
  2394                           	opt stack 0
  2395  0000C1                     Console_PrintChar@pInput:
  2396                           	opt stack 0
  2397  0000C1                     Timer0_Init@pCPUClock:
  2398                           	opt stack 0
  2399                           
  2400                           ; 4 bytes @ 0x13
  2401  0000C1                     	ds	1
  2402  0000C2                     LED_Set@pValue:
  2403                           	opt stack 0
  2404  0000C2                     putch@c:
  2405                           	opt stack 0
  2406  0000C2                     Port_TogglePin@pInput:
  2407                           	opt stack 0
  2408  0000C2                     LCD_FillRectangle@pSize:
  2409                           	opt stack 0
  2410  0000C2                     LCD_DrawField@pPoint:
  2411                           	opt stack 0
  2412                           
  2413                           ; 4 bytes @ 0x14
  2414  0000C2                     	ds	1
  2415  0000C3                     ?_printf:
  2416                           	opt stack 0
  2417  0000C3                     LED_Set@pLED:
  2418                           	opt stack 0
  2419  0000C3                     printf@f:
  2420                           	opt stack 0
  2421  0000C3                     PortProperty_Valid@Errors:
  2422                           	opt stack 0
  2423                           
  2424                           ; 16 bytes @ 0x15
  2425  0000C3                     	ds	1
  2426  0000C4                     Port_TogglePin@pPin:
  2427                           	opt stack 0
  2428  0000C4                     Timer2_Init@pCPUClock:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x16
  2432  0000C4                     	ds	1
  2433  0000C5                     Port_TogglePin@Value:
  2434                           	opt stack 0
  2435  0000C5                     Timer0_Init@DIVIDE:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x17
  2439  0000C5                     	ds	1
  2440  0000C6                     ??_LCD_FillRectangle:
  2441  0000C6                     LED_Toggle@pLED:
  2442                           	opt stack 0
  2443  0000C6                     LCD_DrawField@pSize:
  2444                           	opt stack 0
  2445                           
  2446                           ; 4 bytes @ 0x18
  2447  0000C6                     	ds	1
  2448  0000C7                     Event_DIPSwitch@pState:
  2449                           	opt stack 0
  2450  0000C7                     Event_HMI_DIPSwitch@pState:
  2451                           	opt stack 0
  2452  0000C7                     Event_TestButton@pState:
  2453                           	opt stack 0
  2454  0000C7                     Event_HMI_LeftButton@pState:
  2455                           	opt stack 0
  2456  0000C7                     Event_HMI_RightButton@pState:
  2457                           	opt stack 0
  2458  0000C7                     Event_HMI_UpButton@pState:
  2459                           	opt stack 0
  2460  0000C7                     Event_HMI_DownButton@pState:
  2461                           	opt stack 0
  2462  0000C7                     printf@flag:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x19
  2466  0000C7                     	ds	1
  2467  0000C8                     LCD_FillRectangle@i:
  2468                           	opt stack 0
  2469  0000C8                     Event_DIPSwitch@Bar:
  2470                           	opt stack 0
  2471  0000C8                     Event_HMI_DIPSwitch@Bar:
  2472                           	opt stack 0
  2473  0000C8                     printf@ap:
  2474                           	opt stack 0
  2475  0000C8                     Timer2_Init@DIVIDE:
  2476                           	opt stack 0
  2477                           
  2478                           ; 4 bytes @ 0x1A
  2479  0000C8                     	ds	1
  2480  0000C9                     LCD_FillRectangle@j:
  2481                           	opt stack 0
  2482  0000C9                     Button_Poll@pButton:
  2483                           	opt stack 0
  2484  0000C9                     Motor_Speed@pMotor:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x1B
  2488  0000C9                     	ds	1
  2489  0000CA                     ??_LCD_DrawField:
  2490  0000CA                     printf@c:
  2491                           	opt stack 0
  2492                           
  2493                           ; 1 bytes @ 0x1C
  2494  0000CA                     	ds	1
  2495  0000CB                     Button_Poll@pIncrement:
  2496                           	opt stack 0
  2497  0000CB                     Motor_Speed@pFrequency:
  2498                           	opt stack 0
  2499  0000CB                     printf@cp:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x1D
  2503  0000CB                     	ds	1
  2504  0000CC                     ??_Button_Poll:
  2505  0000CC                     LCD_DrawField@count:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x1E
  2509  0000CC                     	ds	1
  2510  0000CD                     Event_USBRecieve@pLength:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x1F
  2514  0000CD                     	ds	1
  2515  0000CE                     LCD_DrawField@xmax:
  2516                           	opt stack 0
  2517  0000CE                     USB_Tasks@Recieved:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x20
  2521  0000CE                     	ds	1
  2522  0000CF                     LCD_DrawField@ymax:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x21
  2526  0000CF                     	ds	1
  2527  0000D0                     LCD_DrawField@i:
  2528                           	opt stack 0
  2529  0000D0                     Port_Set@TypeRequired:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x22
  2533  0000D0                     	ds	1
  2534  0000D1                     ??_Console_Render:
  2535  0000D1                     Button_Poll@Pin:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x23
  2539  0000D1                     	ds	1
  2540  0000D2                     Port_Set@TypeActual:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x24
  2544  0000D2                     	ds	1
  2545  0000D3                     PortProperty_Valid@Pair:
  2546                           	opt stack 0
  2547  0000D3                     Console_Render@temp:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x25
  2551  0000D3                     	ds	1
  2552  0000D4                     Port_Set@Type:
  2553                           	opt stack 0
  2554  0000D4                     Port_CheckPairType@pInput:
  2555                           	opt stack 0
  2556  0000D4                     Port_SetPinType@pInput:
  2557                           	opt stack 0
  2558  0000D4                     Console_Render@lCursor:
  2559                           	opt stack 0
  2560                           
  2561                           ; 4 bytes @ 0x26
  2562  0000D4                     	ds	2
  2563  0000D6                     Port_CheckPairType@pPair:
  2564                           	opt stack 0
  2565  0000D6                     Port_SetPinType@pPin:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x28
  2569  0000D6                     	ds	1
  2570  0000D7                     Port_CheckPairType@pDrive:
  2571                           	opt stack 0
  2572  0000D7                     Port_SetPinType@pType:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x29
  2576  0000D7                     	ds	1
  2577  0000D8                     Port_CheckPairType@Pin1:
  2578                           	opt stack 0
  2579  0000D8                     Port_SetPinType@Output:
  2580                           	opt stack 0
  2581  0000D8                     Console_Render@x:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x2A
  2585  0000D8                     	ds	1
  2586  0000D9                     Port_CheckPairType@Pin2:
  2587                           	opt stack 0
  2588  0000D9                     Console_Render@y:
  2589                           	opt stack 0
  2590  0000D9                     Port_SetPinType@Props:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x2B
  2594  0000D9                     	ds	1
  2595  0000DA                     Port_CheckPairType@Output:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x2C
  2599  0000DA                     	ds	1
  2600  0000DB                     LED_Init@pLED:
  2601                           	opt stack 0
  2602  0000DB                     Port_CheckPairType@Props:
  2603                           	opt stack 0
  2604  0000DB                     SPI_Init@pInput:
  2605                           	opt stack 0
  2606  0000DB                     Motor_Init@pMotor:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x2D
  2610  0000DB                     	ds	2
  2611  0000DD                     Port_CheckQuadType@pInput:
  2612                           	opt stack 0
  2613  0000DD                     SPI_Init@pClock:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x2F
  2617  0000DD                     	ds	2
  2618  0000DF                     Port_CheckQuadType@pQuad:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x31
  2622  0000DF                     	ds	1
  2623  0000E0                     Port_CheckQuadType@pDrive:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x32
  2627  0000E0                     	ds	1
  2628  0000E1                     Port_CheckQuadType@Pair1:
  2629                           	opt stack 0
  2630  0000E1                     SPI_Init@pChannel:
  2631                           	opt stack 0
  2632                           
  2633                           ; 1 bytes @ 0x33
  2634  0000E1                     	ds	1
  2635  0000E2                     Port_CheckQuadType@Pair2:
  2636                           	opt stack 0
  2637  0000E2                     SPI_Init@pMode:
  2638                           	opt stack 0
  2639                           
  2640                           ; 1 bytes @ 0x34
  2641  0000E2                     	ds	1
  2642  0000E3                     ??_LCD_Init:
  2643  0000E3                     Port_CheckQuadType@Output:
  2644                           	opt stack 0
  2645                           
  2646                           ; 1 bytes @ 0x35
  2647  0000E3                     	ds	1
  2648  0000E4                     Port_CheckPortType@pInput:
  2649                           	opt stack 0
  2650  0000E4                     Port_SetQuadType@pInput:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x36
  2654  0000E4                     	ds	1
  2655  0000E5                     LCD_Init@i:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x37
  2659  0000E5                     	ds	1
  2660  0000E6                     Port_CheckPortType@pDrive:
  2661                           	opt stack 0
  2662  0000E6                     Port_SetQuadType@pQuad:
  2663                           	opt stack 0
  2664                           
  2665                           ; 1 bytes @ 0x38
  2666  0000E6                     	ds	1
  2667  0000E7                     Port_CheckPortType@Output:
  2668                           	opt stack 0
  2669  0000E7                     Port_SetQuadType@pType:
  2670                           	opt stack 0
  2671                           
  2672                           ; 1 bytes @ 0x39
  2673  0000E7                     	ds	1
  2674  0000E8                     Port_SetQuadType@Output:
  2675                           	opt stack 0
  2676  0000E8                     Port_SetType@pInput:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x3A
  2680  0000E8                     	ds	1
  2681  0000E9                     Button_Init@pInput:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x3B
  2685  0000E9                     	ds	1
  2686  0000EA                     Port_SetType@pType:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x3C
  2690  0000EA                     	ds	1
  2691  0000EB                     ??_Port_SetType:
  2692  0000EB                     Button_Init@pButton:
  2693                           	opt stack 0
  2694                           
  2695                           ; 1 bytes @ 0x3D
  2696  0000EB                     	ds	1
  2697  0000EC                     Button_Init@pThreshold:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x3E
  2701  0000EC                     	ds	1
  2702  0000ED                     Port_SetType@Output:
  2703                           	opt stack 0
  2704                           
  2705                           ; 1 bytes @ 0x3F
  2706  0000ED                     	ds	1
  2707  0000EE                     Port_Init@pInput:
  2708                           	opt stack 0
  2709  0000EE                     Button_Init@pFunction:
  2710                           	opt stack 0
  2711                           
  2712                           ; 3 bytes @ 0x40
  2713  0000EE                     	ds	2
  2714  0000F0                     Port_Init@pPort:
  2715                           	opt stack 0
  2716                           
  2717                           ; 1 bytes @ 0x42
  2718  0000F0                     	ds	1
  2719  0000F1                     ??_Port_Init:
  2720  0000F1                     HMI_Init@in:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x43
  2724  0000F1                     	ds	2
  2725  0000F3                     Port_Init@i:
  2726                           	opt stack 0
  2727                           
  2728                           ; 1 bytes @ 0x45
  2729  0000F3                     	ds	1
  2730  0000F4                     tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           postdec1	equ	0xFE5
  2737                           fsr1h	equ	0xFE2
  2738                           fsr1l	equ	0xFE1
  2739                           
  2740                           ; 1 bytes @ 0x46
  2741                           
  2742                           	psect	cstackCOMRAM
  2743  000001                     __pcstackCOMRAM:
  2744                           	opt stack 0
  2745  000001                     ??_USBStdGetDscHandler:
  2746  000001                     ??_USBStdGetStatusHandler:
  2747  000001                     ?i2_USBTransferOnePacket:
  2748                           	opt stack 0
  2749  000001                     USBConfigureEndpoint@direction:
  2750                           	opt stack 0
  2751  000001                     USBCtrlTrfTxService@byteToSend:
  2752                           	opt stack 0
  2753  000001                     USBCtrlTrfRxService@i:
  2754                           	opt stack 0
  2755  000001                     i2USBTransferOnePacket@dir:
  2756                           	opt stack 0
  2757  000001                     memcpy@d1:
  2758                           	opt stack 0
  2759  000001                     i2Port_GetPin@pInput:
  2760                           	opt stack 0
  2761  000001                     i2Byte_SetBit@pInput:
  2762                           	opt stack 0
  2763  000001                     i2Byte_GetZone@pInput:
  2764                           	opt stack 0
  2765  000001                     i2memset@p1:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0x0
  2769  000001                     	ds	1
  2770  000002                     ??_USBConfigureEndpoint:
  2771  000002                     USBCtrlTrfRxService@byteToRead:
  2772                           	opt stack 0
  2773  000002                     USBCtrlTrfInHandler@lastDTS:
  2774                           	opt stack 0
  2775  000002                     USBStdGetStatusHandler@p:
  2776                           	opt stack 0
  2777  000002                     i2USBTransferOnePacket@data:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x1
  2781  000002                     	ds	1
  2782  000003                     i2Port_GetPin@pPin:
  2783                           	opt stack 0
  2784  000003                     i2Byte_SetBit@pBit:
  2785                           	opt stack 0
  2786  000003                     i2Byte_GetZone@pMax:
  2787                           	opt stack 0
  2788  000003                     memcpy@s1:
  2789                           	opt stack 0
  2790  000003                     i2memset@c:
  2791                           	opt stack 0
  2792                           
  2793                           ; 2 bytes @ 0x2
  2794  000003                     	ds	1
  2795  000004                     ??i2_Port_GetPin:
  2796  000004                     i2USBTransferOnePacket@len:
  2797                           	opt stack 0
  2798  000004                     i2Byte_SetBit@pValue:
  2799                           	opt stack 0
  2800  000004                     i2Byte_GetZone@pChunk:
  2801                           	opt stack 0
  2802                           
  2803                           ; 1 bytes @ 0x3
  2804  000004                     	ds	1
  2805  000005                     ??i2_USBTransferOnePacket:
  2806  000005                     ??i2_Byte_SetBit:
  2807  000005                     i2Byte_GetZone@pChunkSize:
  2808                           	opt stack 0
  2809  000005                     memcpy@n:
  2810                           	opt stack 0
  2811  000005                     i2memset@n:
  2812                           	opt stack 0
  2813                           
  2814                           ; 2 bytes @ 0x4
  2815  000005                     	ds	1
  2816  000006                     ??i2_Byte_GetZone:
  2817  000006                     USBConfigureEndpoint@EPNum:
  2818                           	opt stack 0
  2819  000006                     i2Port_GetPin@Output:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x5
  2823  000006                     	ds	1
  2824  000007                     i2Byte_GetZone@MASK:
  2825                           	opt stack 0
  2826  000007                     USBConfigureEndpoint@handle:
  2827                           	opt stack 0
  2828  000007                     memcpy@d:
  2829                           	opt stack 0
  2830  000007                     i2memset@p:
  2831                           	opt stack 0
  2832                           
  2833                           ; 2 bytes @ 0x6
  2834  000007                     	ds	1
  2835  000008                     i2Byte_GetZone@Offset:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x7
  2839  000008                     	ds	1
  2840  000009                     USBEnableEndpoint@options:
  2841                           	opt stack 0
  2842  000009                     i2USBDeviceInit@i:
  2843                           	opt stack 0
  2844  000009                     i2USBTransferOnePacket@ep:
  2845                           	opt stack 0
  2846  000009                     i2Byte_GetZone@Output:
  2847                           	opt stack 0
  2848  000009                     memcpy@s:
  2849                           	opt stack 0
  2850                           
  2851                           ; 2 bytes @ 0x8
  2852  000009                     	ds	1
  2853  00000A                     USBEnableEndpoint@p:
  2854                           	opt stack 0
  2855  00000A                     i2USBTransferOnePacket@handle:
  2856                           	opt stack 0
  2857  00000A                     i2Byte_GetPair@pInput:
  2858                           	opt stack 0
  2859                           
  2860                           ; 2 bytes @ 0x9
  2861  00000A                     	ds	2
  2862  00000C                     USBEnableEndpoint@ep:
  2863                           	opt stack 0
  2864  00000C                     i2Byte_GetPair@pPair:
  2865                           	opt stack 0
  2866                           
  2867                           ; 1 bytes @ 0xB
  2868  00000C                     	ds	1
  2869  00000D                     i2Word_GetPair@pInput:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0xC
  2873  00000D                     	ds	2
  2874  00000F                     i2Word_GetPair@pPair:
  2875                           	opt stack 0
  2876                           
  2877                           ; 1 bytes @ 0xE
  2878  00000F                     	ds	1
  2879  000010                     i2Port_SetPin@pInput:
  2880                           	opt stack 0
  2881                           
  2882                           ; 2 bytes @ 0xF
  2883  000010                     	ds	2
  2884  000012                     i2Port_SetPin@pPin:
  2885                           	opt stack 0
  2886                           
  2887                           ; 1 bytes @ 0x11
  2888  000012                     	ds	1
  2889  000013                     i2Port_SetPin@pValue:
  2890                           	opt stack 0
  2891                           
  2892                           ; 1 bytes @ 0x12
  2893  000013                     	ds	1
  2894  000014                     i2Port_SetPin@Type:
  2895                           	opt stack 0
  2896                           
  2897                           ; 1 bytes @ 0x13
  2898  000014                     	ds	1
  2899  000015                     i2Port_TogglePin@pInput:
  2900                           	opt stack 0
  2901                           
  2902                           ; 2 bytes @ 0x14
  2903  000015                     	ds	2
  2904  000017                     i2Port_TogglePin@pPin:
  2905                           	opt stack 0
  2906                           
  2907                           ; 1 bytes @ 0x16
  2908  000017                     	ds	1
  2909  000018                     i2Port_TogglePin@Value:
  2910                           	opt stack 0
  2911                           
  2912                           ; 1 bytes @ 0x17
  2913  000018                     	ds	1
  2914  000019                     i2LED_Toggle@pLED:
  2915                           	opt stack 0
  2916                           
  2917                           ; 1 bytes @ 0x18
  2918  000019                     	ds	1
  2919  00001A                     USER_USB_CALLBACK_EVENT_HANDLER@event:
  2920                           	opt stack 0
  2921                           
  2922                           ; 2 bytes @ 0x19
  2923  00001A                     	ds	2
  2924  00001C                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  2925                           	opt stack 0
  2926                           
  2927                           ; 2 bytes @ 0x1B
  2928  00001C                     	ds	2
  2929  00001E                     USER_USB_CALLBACK_EVENT_HANDLER@size:
  2930                           	opt stack 0
  2931                           
  2932                           ; 2 bytes @ 0x1D
  2933  00001E                     	ds	2
  2934  000020                     ??_USER_USB_CALLBACK_EVENT_HANDLER:
  2935                           
  2936                           ; 1 bytes @ 0x1F
  2937  000020                     	ds	2
  2938  000022                     ??_USBStdFeatureReqHandler:
  2939  000022                     USBStdSetCfgHandler@i:
  2940                           	opt stack 0
  2941                           
  2942                           ; 1 bytes @ 0x21
  2943  000022                     	ds	1
  2944  000023                     USBStdFeatureReqHandler@pUEP:
  2945                           	opt stack 0
  2946                           
  2947                           ; 2 bytes @ 0x22
  2948  000023                     	ds	2
  2949  000025                     USBStdFeatureReqHandler@current_ep_data:
  2950                           	opt stack 0
  2951                           
  2952                           ; 1 bytes @ 0x24
  2953  000025                     	ds	1
  2954  000026                     USBStdFeatureReqHandler@p:
  2955                           	opt stack 0
  2956                           
  2957                           ; 2 bytes @ 0x25
  2958  000026                     	ds	2
  2959  000028                     ??_USBCtrlEPService:
  2960  000028                     
  2961                           ; 1 bytes @ 0x27
  2962  000028                     	ds	1
  2963  000029                     USBDeviceTasks@i:
  2964                           	opt stack 0
  2965                           
  2966                           ; 1 bytes @ 0x28
  2967  000029                     	ds	1
  2968  00002A                     ??_ISR_Function:
  2969                           
  2970                           ; 1 bytes @ 0x29
  2971  00002A                     	ds	14
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1h	equ	0xFE2
  2980                           fsr1l	equ	0xFE1
  2981                           
  2982 ;;
  2983 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2984 ;;
  2985 ;; *************** function _main *****************
  2986 ;; Defined at:
  2987 ;;		line 18 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;Total ram usage:        0 bytes
  3006 ;; Hardware stack levels required when called:   24
  3007 ;; This function calls:
  3008 ;;		_FunctButton
  3009 ;;		_FunctHMI
  3010 ;;		_FunctInitButton
  3011 ;;		_FunctInitHMI
  3012 ;;		_FunctInitLCD
  3013 ;;		_FunctInitMotor
  3014 ;;		_FunctInitUSB
  3015 ;;		_FunctMotor
  3016 ;;		_FunctUSB
  3017 ;;		_ISR_Enable
  3018 ;;		_MXK_Init
  3019 ;; This function is called by:
  3020 ;;		Startup code after reset
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text0
  3025  014B24                     __ptext0:
  3026                           	opt stack 0
  3027  014B24                     _main:
  3028                           	opt stack 7
  3029                           
  3030                           ;main.c: 22: MXK_Init();
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;incstack = 0
  3034  014B24  EC79  F08D         	call	_MXK_Init	;wreg free
  3035                           
  3036                           ;main.c: 27: FunctInitButton ();
  3037  014B28  ECB7  F0A2         	call	_FunctInitButton	;wreg free
  3038                           
  3039                           ;main.c: 30: FunctInitLCD ();
  3040  014B2C  ECDB  F0A7         	call	_FunctInitLCD	;wreg free
  3041                           
  3042                           ;main.c: 33: FunctInitHMI ();
  3043  014B30  ECDE  F0A6         	call	_FunctInitHMI	;wreg free
  3044                           
  3045                           ;main.c: 36: FunctInitMotor ();
  3046  014B34  EC94  F0A2         	call	_FunctInitMotor	;wreg free
  3047                           
  3048                           ;main.c: 42: FunctInitUSB ();
  3049  014B38  EC58  F0A8         	call	_FunctInitUSB	;wreg free
  3050                           
  3051                           ;main.c: 56: ISR_Enable();
  3052  014B3C  EC3E  F0A8         	call	_ISR_Enable	;wreg free
  3053  014B40                     l13533:
  3054                           
  3055                           ;main.c: 58: {
  3056                           ;main.c: 70: FunctUSB();
  3057  014B40  EC56  F0A8         	call	_FunctUSB	;wreg free
  3058                           
  3059                           ;main.c: 73: FunctButton();
  3060  014B44  EC2C  F0A7         	call	_FunctButton	;wreg free
  3061                           
  3062                           ;main.c: 77: FunctHMI();
  3063  014B48  ECB2  F0A7         	call	_FunctHMI	;wreg free
  3064                           
  3065                           ;main.c: 84: FunctMotor();
  3066  014B4C  EC62  F09F         	call	_FunctMotor	;wreg free
  3067                           
  3068                           ;main.c: 86: }
  3069  014B50  D7F7               	goto	l13533
  3070  014B52                     __end_of_main:
  3071                           	opt stack 0
  3072                           tblptru	equ	0xFF8
  3073                           tblptrh	equ	0xFF7
  3074                           tblptrl	equ	0xFF6
  3075                           tablat	equ	0xFF5
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           
  3082 ;; *************** function _MXK_Init *****************
  3083 ;; Defined at:
  3084 ;;		line 12 in file "MXK.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;Total ram usage:        0 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:   23
  3105 ;; This function calls:
  3106 ;;		_LED_Init
  3107 ;;		_Port_Init
  3108 ;;		_Port_SetPin
  3109 ;;		_Port_SetPinType
  3110 ;;		_Port_SetQuadType
  3111 ;;		_Port_SetType
  3112 ;;		_delay_ms
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text1
  3119  011AF2                     __ptext1:
  3120                           	opt stack 0
  3121  011AF2                     _MXK_Init:
  3122                           	opt stack 7
  3123                           
  3124                           ;MXK.c: 14: Bus_State = eMXK_Idle;
  3125                           
  3126                           ;incstack = 0
  3127  011AF2  0E01               	movlw	1
  3128  011AF4  0100               	movlb	0	; () banked
  3129  011AF6  6FFB               	movwf	_Bus_State& (0+255),b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;MXK.c: 16: Port_Init(&PortA, ePortA);
  3133  011AF8  0E79               	movlw	low _PortA
  3134  011AFA  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3135  011AFC  0E01               	movlw	high _PortA
  3136  011AFE  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3137  011B00  6BF0               	clrf	Port_Init@pPort& (0+255),b
  3138  011B02  EC74  F088         	call	_Port_Init	;wreg free
  3139                           
  3140                           ;MXK.c: 17: Port_Init(&PortB, ePortB);
  3141  011B06  0E83               	movlw	low _PortB
  3142  011B08  0100               	movlb	0	; () banked
  3143  011B0A  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3144  011B0C  0E01               	movlw	high _PortB
  3145  011B0E  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3146  011B10  0E01               	movlw	1
  3147  011B12  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3148  011B14  EC74  F088         	call	_Port_Init	;wreg free
  3149                           
  3150                           ;MXK.c: 18: Port_Init(&PortC, ePortC);
  3151  011B18  0EA4               	movlw	low _PortC
  3152  011B1A  0100               	movlb	0	; () banked
  3153  011B1C  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3154  011B1E  0E00               	movlw	high _PortC
  3155  011B20  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3156  011B22  0E02               	movlw	2
  3157  011B24  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3158  011B26  EC74  F088         	call	_Port_Init	;wreg free
  3159                           
  3160                           ;MXK.c: 19: Port_Init(&PortD, ePortD);
  3161  011B2A  0E8D               	movlw	low _PortD
  3162  011B2C  0100               	movlb	0	; () banked
  3163  011B2E  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3164  011B30  0E01               	movlw	high _PortD
  3165  011B32  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3166  011B34  0E03               	movlw	3
  3167  011B36  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3168  011B38  EC74  F088         	call	_Port_Init	;wreg free
  3169                           
  3170                           ;MXK.c: 20: Port_Init(&PortE, ePortE);
  3171  011B3C  0E97               	movlw	low _PortE
  3172  011B3E  0100               	movlb	0	; () banked
  3173  011B40  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3174  011B42  0E01               	movlw	high _PortE
  3175  011B44  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3176  011B46  0E04               	movlw	4
  3177  011B48  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3178  011B4A  EC74  F088         	call	_Port_Init	;wreg free
  3179                           
  3180                           ;MXK.c: 21: Port_Init(&PortF, ePortF);
  3181  011B4E  0EA1               	movlw	low _PortF
  3182  011B50  0100               	movlb	0	; () banked
  3183  011B52  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3184  011B54  0E01               	movlw	high _PortF
  3185  011B56  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3186  011B58  0E05               	movlw	5
  3187  011B5A  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3188  011B5C  EC74  F088         	call	_Port_Init	;wreg free
  3189                           
  3190                           ;MXK.c: 22: Port_Init(&PortG, ePortG);
  3191  011B60  0EAB               	movlw	low _PortG
  3192  011B62  0100               	movlb	0	; () banked
  3193  011B64  6FEE               	movwf	Port_Init@pInput& (0+255),b
  3194  011B66  0E01               	movlw	high _PortG
  3195  011B68  6FEF               	movwf	(Port_Init@pInput+1)& (0+255),b
  3196  011B6A  0E06               	movlw	6
  3197  011B6C  6FF0               	movwf	Port_Init@pPort& (0+255),b
  3198  011B6E  EC74  F088         	call	_Port_Init	;wreg free
  3199                           
  3200                           ;MXK.c: 24: Port_SetPinType (&PortF, eP5, eTypeInput);
  3201  011B72  0EA1               	movlw	low _PortF
  3202  011B74  0100               	movlb	0	; () banked
  3203  011B76  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  3204  011B78  0E01               	movlw	high _PortF
  3205  011B7A  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3206  011B7C  0E05               	movlw	5
  3207  011B7E  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
  3208  011B80  6BD7               	clrf	Port_SetPinType@pType& (0+255),b
  3209  011B82  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3210                           
  3211                           ;MXK.c: 25: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  3212  011B86  0E83               	movlw	low _PortB
  3213  011B88  0100               	movlb	0	; () banked
  3214  011B8A  6FE4               	movwf	Port_SetQuadType@pInput& (0+255),b
  3215  011B8C  0E01               	movlw	high _PortB
  3216  011B8E  6FE5               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  3217  011B90  6BE6               	clrf	Port_SetQuadType@pQuad& (0+255),b
  3218  011B92  6BE7               	clrf	Port_SetQuadType@pType& (0+255),b
  3219  011B94  EC11  F084         	call	_Port_SetQuadType	;wreg free
  3220                           
  3221                           ;MXK.c: 26: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  3222  011B98  0EA1               	movlw	low _PortF
  3223  011B9A  0100               	movlb	0	; () banked
  3224  011B9C  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  3225  011B9E  0E01               	movlw	high _PortF
  3226  011BA0  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3227  011BA2  0E06               	movlw	6
  3228  011BA4  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
  3229  011BA6  0E03               	movlw	3
  3230  011BA8  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  3231  011BAA  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3232                           
  3233                           ;MXK.c: 27: Port_SetType (&PortG, eTypeOutputPushPull);
  3234  011BAE  0EAB               	movlw	low _PortG
  3235  011BB0  0100               	movlb	0	; () banked
  3236  011BB2  6FE8               	movwf	Port_SetType@pInput& (0+255),b
  3237  011BB4  0E01               	movlw	high _PortG
  3238  011BB6  6FE9               	movwf	(Port_SetType@pInput+1)& (0+255),b
  3239  011BB8  0E03               	movlw	3
  3240  011BBA  6FEA               	movwf	Port_SetType@pType& (0+255),b
  3241  011BBC  EC12  F085         	call	_Port_SetType	;wreg free
  3242                           
  3243                           ;MXK.c: 29: Port_SetPin(&PortG, eP4, 0);
  3244  011BC0  0EAB               	movlw	low _PortG
  3245  011BC2  0100               	movlb	0	; () banked
  3246  011BC4  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  3247  011BC6  0E01               	movlw	high _PortG
  3248  011BC8  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3249  011BCA  0E04               	movlw	4
  3250  011BCC  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
  3251  011BCE  6BC0               	clrf	Port_SetPin@pValue& (0+255),b
  3252  011BD0  EC96  F09D         	call	_Port_SetPin	;wreg free
  3253                           
  3254                           ;MXK.c: 30: Port_SetPin(&PortF, eP6,1);
  3255  011BD4  0EA1               	movlw	low _PortF
  3256  011BD6  0100               	movlb	0	; () banked
  3257  011BD8  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  3258  011BDA  0E01               	movlw	high _PortF
  3259  011BDC  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3260  011BDE  0E06               	movlw	6
  3261  011BE0  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
  3262  011BE2  0E01               	movlw	1
  3263  011BE4  6FC0               	movwf	Port_SetPin@pValue& (0+255),b
  3264  011BE6  EC96  F09D         	call	_Port_SetPin	;wreg free
  3265                           
  3266                           ;MXK.c: 33: LED_Init(eLED1);
  3267  011BEA  0E00               	movlw	0
  3268  011BEC  EC05  F0A2         	call	_LED_Init
  3269                           
  3270                           ;MXK.c: 34: LED_Init(eLED2);
  3271  011BF0  0E01               	movlw	1
  3272  011BF2  EC05  F0A2         	call	_LED_Init
  3273                           
  3274                           ;MXK.c: 36: PIR1 = 0;
  3275  011BF6  6A9E               	clrf	3998,c	;volatile
  3276                           
  3277                           ;MXK.c: 37: PIR2 = 0;
  3278  011BF8  6AA1               	clrf	4001,c	;volatile
  3279                           
  3280                           ;MXK.c: 38: PIR3 = 0;
  3281  011BFA  6AA4               	clrf	4004,c	;volatile
  3282                           
  3283                           ;MXK.c: 40: OSCTUNEbits.INTSRC = 1;
  3284  011BFC  8E9B               	bsf	3995,7,c	;volatile
  3285                           
  3286                           ;MXK.c: 41: OSCTUNEbits.PLLEN = 1;
  3287  011BFE  8C9B               	bsf	3995,6,c	;volatile
  3288                           
  3289                           ;MXK.c: 44: delay_ms(100);
  3290  011C00  0100               	movlb	0	; () banked
  3291  011C02  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
  3292  011C04  0E64               	movlw	100
  3293  011C06  6FAE               	movwf	delay_ms@ms& (0+255),b
  3294  011C08  EC94  F0A1         	call	_delay_ms	;wreg free
  3295                           
  3296                           ;MXK.c: 46: RCONbits.IPEN = 1;
  3297  011C0C  8ED0               	bsf	4048,7,c	;volatile
  3298  011C0E  0012               	return		;funcret
  3299  011C10                     __end_of_MXK_Init:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1h	equ	0xFE2
  3309                           fsr1l	equ	0xFE1
  3310                           
  3311 ;; *************** function _Port_Init *****************
  3312 ;; Defined at:
  3313 ;;		line 150 in file "Library/Port.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  3316 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
  3317 ;;		 -> PortE(10), PortD(10), PortB(10), 
  3318 ;;  pPort           1   66[BANK0 ] enum E7724
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  i               1   69[BANK0 ] unsigned char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3330 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;Total ram usage:        6 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:   22
  3337 ;; This function calls:
  3338 ;;		_GetPortPORT
  3339 ;;		_GetPortProperties
  3340 ;;		_GetPortTRIS
  3341 ;;		_Port_Set
  3342 ;;		_Port_SetPinType
  3343 ;;		_Port_SetType
  3344 ;;		_Word_GetPair
  3345 ;; This function is called by:
  3346 ;;		_MXK_Init
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text2
  3351  0110E8                     __ptext2:
  3352                           	opt stack 0
  3353  0110E8                     _Port_Init:
  3354                           	opt stack 7
  3355                           
  3356                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  3357                           
  3358                           ;incstack = 0
  3359  0110E8  0100               	movlb	0	; () banked
  3360  0110EA  51F0               	movf	Port_Init@pPort& (0+255),w,b
  3361  0110EC  ECA1  F09B         	call	_GetPortProperties
  3362  0110F0  C0EE  FFD9         	movff	Port_Init@pInput,fsr2l
  3363  0110F4  C0EF  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3364  0110F8  C0AE  FFDE         	movff	?_GetPortProperties,postinc2
  3365  0110FC  C0AF  FFDD         	movff	?_GetPortProperties+1,postdec2
  3366                           
  3367                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  3368  011100  0100               	movlb	0	; () banked
  3369  011102  51F0               	movf	Port_Init@pPort& (0+255),w,b
  3370  011104  ECE2  F09B         	call	_GetPortPORT
  3371  011108  0100               	movlb	0	; () banked
  3372  01110A  EE20 F006          	lfsr	2,6
  3373  01110E  51EE               	movf	Port_Init@pInput& (0+255),w,b
  3374  011110  26D9               	addwf	fsr2l,f,c
  3375  011112  51EF               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3376  011114  22DA               	addwfc	fsr2h,f,c
  3377  011116  C0AE  FFDE         	movff	?_GetPortPORT,postinc2
  3378  01111A  C0AF  FFDD         	movff	?_GetPortPORT+1,postdec2
  3379                           
  3380                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  3381  01111E  51F0               	movf	Port_Init@pPort& (0+255),w,b
  3382  011120  ECE2  F09B         	call	_GetPortPORT
  3383  011124  0100               	movlb	0	; () banked
  3384  011126  EE20 F004          	lfsr	2,4
  3385  01112A  51EE               	movf	Port_Init@pInput& (0+255),w,b
  3386  01112C  26D9               	addwf	fsr2l,f,c
  3387  01112E  51EF               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3388  011130  22DA               	addwfc	fsr2h,f,c
  3389  011132  C0AE  FFDE         	movff	?_GetPortPORT,postinc2
  3390  011136  C0AF  FFDD         	movff	?_GetPortPORT+1,postdec2
  3391                           
  3392                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  3393  01113A  51F0               	movf	Port_Init@pPort& (0+255),w,b
  3394  01113C  EC60  F09B         	call	_GetPortTRIS
  3395  011140  0100               	movlb	0	; () banked
  3396  011142  EE20 F002          	lfsr	2,2
  3397  011146  51EE               	movf	Port_Init@pInput& (0+255),w,b
  3398  011148  26D9               	addwf	fsr2l,f,c
  3399  01114A  51EF               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3400  01114C  22DA               	addwfc	fsr2h,f,c
  3401  01114E  C0AE  FFDE         	movff	?_GetPortTRIS,postinc2
  3402  011152  C0AF  FFDD         	movff	?_GetPortTRIS+1,postdec2
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  3406  011156  EE20 F004          	lfsr	2,4
  3407  01115A  51EE               	movf	Port_Init@pInput& (0+255),w,b
  3408  01115C  26D9               	addwf	fsr2l,f,c
  3409  01115E  51EF               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3410  011160  22DA               	addwfc	fsr2h,f,c
  3411  011162  CFDE F0F1          	movff	postinc2,??_Port_Init
  3412  011166  CFDD F0F2          	movff	postdec2,??_Port_Init+1
  3413  01116A  C0F1  FFD9         	movff	??_Port_Init,fsr2l
  3414  01116E  C0F2  FFDA         	movff	??_Port_Init+1,fsr2h
  3415  011172  6ADF               	clrf	indf2,c
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  3419  011174  EE20 F002          	lfsr	2,2
  3420  011178  51EE               	movf	Port_Init@pInput& (0+255),w,b
  3421  01117A  26D9               	addwf	fsr2l,f,c
  3422  01117C  51EF               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3423  01117E  22DA               	addwfc	fsr2h,f,c
  3424  011180  CFDE F0F1          	movff	postinc2,??_Port_Init
  3425  011184  CFDD F0F2          	movff	postdec2,??_Port_Init+1
  3426  011188  C0F1  FFD9         	movff	??_Port_Init,fsr2l
  3427  01118C  C0F2  FFDA         	movff	??_Port_Init+1,fsr2h
  3428  011190  68DF               	setf	indf2,c
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  3432  011192  C0EE  F0E8         	movff	Port_Init@pInput,Port_SetType@pInput
  3433  011196  C0EF  F0E9         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  3434  01119A  6BEA               	clrf	Port_SetType@pType& (0+255),b
  3435  01119C  EC12  F085         	call	_Port_SetType	;wreg free
  3436                           
  3437                           ;Port.c: 166: UINT8 i;
  3438                           ;Port.c: 167: for (i=0; i<8; i++)
  3439  0111A0  0100               	movlb	0	; () banked
  3440  0111A2  6BF3               	clrf	Port_Init@i& (0+255),b
  3441  0111A4                     l12087:
  3442                           
  3443                           ; BSR set to: 0
  3444  0111A4  0E07               	movlw	7
  3445  0111A6  0100               	movlb	0	; () banked
  3446  0111A8  65F3               	cpfsgt	Port_Init@i& (0+255),b
  3447  0111AA  D030               	goto	l12101
  3448  0111AC  D046               	goto	l12107
  3449  0111AE                     l12091:
  3450                           
  3451                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  3452  0111AE  C0EE  F0D4         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3453  0111B2  C0EF  F0D5         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3454  0111B6  C0F3  F0D6         	movff	Port_Init@i,Port_SetPinType@pPin
  3455  0111BA  0E03               	movlw	3
  3456  0111BC  0100               	movlb	0	; () banked
  3457  0111BE  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  3458  0111C0  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3459                           
  3460                           ;Port.c: 173: break;
  3461  0111C4  D037               	goto	l12103
  3462  0111C6                     l12093:
  3463                           
  3464                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  3465  0111C6  C0EE  F0D4         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3466  0111CA  C0EF  F0D5         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3467  0111CE  C0F3  F0D6         	movff	Port_Init@i,Port_SetPinType@pPin
  3468  0111D2  0E02               	movlw	2
  3469  0111D4  0100               	movlb	0	; () banked
  3470  0111D6  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  3471  0111D8  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3472                           
  3473                           ;Port.c: 176: break;
  3474  0111DC  D02B               	goto	l12103
  3475  0111DE                     l12095:
  3476                           
  3477                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  3478  0111DE  C0EE  F0D4         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3479  0111E2  C0EF  F0D5         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3480  0111E6  C0F3  F0D6         	movff	Port_Init@i,Port_SetPinType@pPin
  3481  0111EA  0E01               	movlw	1
  3482  0111EC  0100               	movlb	0	; () banked
  3483  0111EE  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  3484  0111F0  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3485                           
  3486                           ;Port.c: 179: break;
  3487  0111F4  D01F               	goto	l12103
  3488  0111F6                     l12097:
  3489                           
  3490                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  3491  0111F6  C0EE  F0D4         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3492  0111FA  C0EF  F0D5         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3493  0111FE  C0F3  F0D6         	movff	Port_Init@i,Port_SetPinType@pPin
  3494  011202  0100               	movlb	0	; () banked
  3495  011204  6BD7               	clrf	Port_SetPinType@pType& (0+255),b
  3496  011206  ECAD  F087         	call	_Port_SetPinType	;wreg free
  3497                           
  3498                           ;Port.c: 183: }
  3499                           
  3500                           ;Port.c: 182: break;
  3501  01120A  D014               	goto	l12103
  3502  01120C                     l12101:
  3503  01120C  C0EE  FFD9         	movff	Port_Init@pInput,fsr2l
  3504  011210  C0EF  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3505  011214  CFDE F0BA          	movff	postinc2,Word_GetPair@pInput
  3506  011218  CFDD F0BB          	movff	postdec2,Word_GetPair@pInput+1
  3507  01121C  C0F3  F0BC         	movff	Port_Init@i,Word_GetPair@pPair
  3508  011220  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  3509                           
  3510                           ; Switch size 1, requested type "space"
  3511                           ; Number of cases is 4, Range of values is 0 to 3
  3512                           ; switch strategies available:
  3513                           ; Name         Instructions Cycles
  3514                           ; simple_byte           13     7 (average)
  3515                           ;	Chosen strategy is simple_byte
  3516  011224  0A00               	xorlw	0	; case 0
  3517  011226  E0C3               	bz	l12091
  3518  011228  0A01               	xorlw	1	; case 1
  3519  01122A  E0D9               	bz	l12095
  3520  01122C  0A03               	xorlw	3	; case 2
  3521  01122E  E0CB               	bz	l12093
  3522  011230  0A01               	xorlw	1	; case 3
  3523  011232  E0E1               	bz	l12097
  3524  011234                     l12103:
  3525  011234  0100               	movlb	0	; () banked
  3526  011236  2BF3               	incf	Port_Init@i& (0+255),f,b
  3527  011238  D7B5               	goto	l12087
  3528  01123A                     l12107:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Port.c: 184: }
  3532                           ;Port.c: 185: Port_Set(pInput, 0x00);
  3533  01123A  C0EE  F0BD         	movff	Port_Init@pInput,Port_Set@pInput
  3534  01123E  C0EF  F0BE         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  3535  011242  0100               	movlb	0	; () banked
  3536  011244  6BBF               	clrf	Port_Set@pValue& (0+255),b
  3537  011246  EFA5  F081         	goto	_Port_Set	;wreg free
  3538  01124A                     __end_of_Port_Init:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           
  3555 ;; *************** function _Port_SetType *****************
  3556 ;; Defined at:
  3557 ;;		line 513 in file "Library/Port.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  3560 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
  3561 ;;		 -> PortE(10), PortD(10), PortB(10), 
  3562 ;;  pType           1   60[BANK0 ] enum E7733
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  Output          1   63[BANK0 ] enum E7416
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      enum E7416
  3567 ;; Registers used:
  3568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;Total ram usage:        6 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:   21
  3581 ;; This function calls:
  3582 ;;		_Port_CheckPortType
  3583 ;;		_Word_SetPair
  3584 ;; This function is called by:
  3585 ;;		_Port_Init
  3586 ;;		_MXK_Init
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text3
  3591  010A24                     __ptext3:
  3592                           	opt stack 0
  3593  010A24                     _Port_SetType:
  3594                           	opt stack 8
  3595                           
  3596                           ;Port.c: 515: ePinError Output = ePinErrorState;
  3597                           
  3598                           ;incstack = 0
  3599  010A24  0E05               	movlw	5
  3600  010A26  0100               	movlb	0	; () banked
  3601  010A28  6FED               	movwf	Port_SetType@Output& (0+255),b
  3602                           
  3603                           ;Port.c: 517: switch (pType)
  3604  010A2A  D06E               	goto	l11649
  3605  010A2C                     l11633:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  3609  010A2C  0100               	movlb	0	; () banked
  3610  010A2E  EE20 F002          	lfsr	2,2
  3611  010A32  D03F               	goto	L1
  3612  010A34                     l11635:
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  3616  010A34  C0E8  F0E4         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3617  010A38  C0E9  F0E5         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3618  010A3C  0E01               	movlw	1
  3619  010A3E  0100               	movlb	0	; () banked
  3620  010A40  6FE6               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3621  010A42  EC80  F0A3         	call	_Port_CheckPortType	;wreg free
  3622  010A46  0100               	movlb	0	; () banked
  3623  010A48  6FED               	movwf	Port_SetType@Output& (0+255),b
  3624  010A4A  51ED               	movf	Port_SetType@Output& (0+255),w,b
  3625  010A4C  A4D8               	btfss	status,2,c
  3626  010A4E  0012               	return	
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;Port.c: 527: {
  3630                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  3631  010A50  EE20 F002          	lfsr	2,2
  3632  010A54  51E8               	movf	Port_SetType@pInput& (0+255),w,b
  3633  010A56  26D9               	addwf	fsr2l,f,c
  3634  010A58  51E9               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3635  010A5A  22DA               	addwfc	fsr2h,f,c
  3636  010A5C  CFDE F0EB          	movff	postinc2,??_Port_SetType
  3637  010A60  CFDD F0EC          	movff	postdec2,??_Port_SetType+1
  3638  010A64  C0EB  FFD9         	movff	??_Port_SetType,fsr2l
  3639  010A68  C0EC  FFDA         	movff	??_Port_SetType+1,fsr2h
  3640  010A6C  6ADF               	clrf	indf2,c
  3641                           
  3642                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  3643  010A6E  EE20 F004          	lfsr	2,4
  3644  010A72  D03C               	goto	L2
  3645  010A74                     l11639:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  3649  010A74  C0E8  F0E4         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3650  010A78  C0E9  F0E5         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3651  010A7C  0E02               	movlw	2
  3652  010A7E  0100               	movlb	0	; () banked
  3653  010A80  6FE6               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3654  010A82  EC80  F0A3         	call	_Port_CheckPortType	;wreg free
  3655  010A86  0100               	movlb	0	; () banked
  3656  010A88  6FED               	movwf	Port_SetType@Output& (0+255),b
  3657  010A8A  51ED               	movf	Port_SetType@Output& (0+255),w,b
  3658  010A8C  A4D8               	btfss	status,2,c
  3659  010A8E  0012               	return	
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;Port.c: 538: {
  3663                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  3664  010A90  EE20 F002          	lfsr	2,2
  3665  010A94  51E8               	movf	Port_SetType@pInput& (0+255),w,b
  3666  010A96  26D9               	addwf	fsr2l,f,c
  3667  010A98  51E9               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3668  010A9A  22DA               	addwfc	fsr2h,f,c
  3669  010A9C  CFDE F0EB          	movff	postinc2,??_Port_SetType
  3670  010AA0  CFDD F0EC          	movff	postdec2,??_Port_SetType+1
  3671  010AA4  C0EB  FFD9         	movff	??_Port_SetType,fsr2l
  3672  010AA8  C0EC  FFDA         	movff	??_Port_SetType+1,fsr2h
  3673  010AAC  68DF               	setf	indf2,c
  3674                           
  3675                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  3676  010AAE  EE20 F004          	lfsr	2,4
  3677  010AB2                     L1:
  3678  010AB2  51E8               	movf	Port_SetType@pInput& (0+255),w,b
  3679  010AB4  26D9               	addwf	fsr2l,f,c
  3680  010AB6  51E9               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3681  010AB8  22DA               	addwfc	fsr2h,f,c
  3682  010ABA  CFDE F0EB          	movff	postinc2,??_Port_SetType
  3683  010ABE  CFDD F0EC          	movff	postdec2,??_Port_SetType+1
  3684  010AC2  C0EB  FFD9         	movff	??_Port_SetType,fsr2l
  3685  010AC6  C0EC  FFDA         	movff	??_Port_SetType+1,fsr2h
  3686  010ACA  68DF               	setf	indf2,c
  3687                           
  3688                           ;Port.c: 544: }
  3689  010ACC  D026               	goto	l11651
  3690  010ACE                     l11643:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  3694  010ACE  C0E8  F0E4         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3695  010AD2  C0E9  F0E5         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3696  010AD6  0100               	movlb	0	; () banked
  3697  010AD8  6BE6               	clrf	Port_CheckPortType@pDrive& (0+255),b
  3698  010ADA  EC80  F0A3         	call	_Port_CheckPortType	;wreg free
  3699  010ADE  0100               	movlb	0	; () banked
  3700  010AE0  6FED               	movwf	Port_SetType@Output& (0+255),b
  3701  010AE2  51ED               	movf	Port_SetType@Output& (0+255),w,b
  3702  010AE4  A4D8               	btfss	status,2,c
  3703  010AE6  0012               	return	
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;Port.c: 549: {
  3707                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  3708  010AE8  EE20 F002          	lfsr	2,2
  3709  010AEC                     L2:
  3710  010AEC  51E8               	movf	Port_SetType@pInput& (0+255),w,b
  3711  010AEE  26D9               	addwf	fsr2l,f,c
  3712  010AF0  51E9               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3713  010AF2  22DA               	addwfc	fsr2h,f,c
  3714  010AF4  CFDE F0EB          	movff	postinc2,??_Port_SetType
  3715  010AF8  CFDD F0EC          	movff	postdec2,??_Port_SetType+1
  3716  010AFC  C0EB  FFD9         	movff	??_Port_SetType,fsr2l
  3717  010B00  C0EC  FFDA         	movff	??_Port_SetType+1,fsr2h
  3718  010B04  6ADF               	clrf	indf2,c
  3719                           
  3720                           ;Port.c: 552: }
  3721  010B06  D009               	goto	l11651
  3722  010B08                     l11649:
  3723                           
  3724                           ; BSR set to: 0
  3725  010B08  0100               	movlb	0	; () banked
  3726  010B0A  51EA               	movf	Port_SetType@pType& (0+255),w,b
  3727                           
  3728                           ; Switch size 1, requested type "space"
  3729                           ; Number of cases is 4, Range of values is 0 to 3
  3730                           ; switch strategies available:
  3731                           ; Name         Instructions Cycles
  3732                           ; simple_byte           13     7 (average)
  3733                           ;	Chosen strategy is simple_byte
  3734  010B0C  E08F               	bz	l11633
  3735  010B0E  0A01               	xorlw	1	; case 1
  3736  010B10  E091               	bz	l11635
  3737  010B12  0A03               	xorlw	3	; case 2
  3738  010B14  E0AF               	bz	l11639
  3739  010B16  0A01               	xorlw	1	; case 3
  3740  010B18  E0DA               	bz	l11643
  3741  010B1A                     l11651:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  3745  010B1A  0E08               	movlw	8
  3746  010B1C  0100               	movlb	0	; () banked
  3747  010B1E  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3748  010B20  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3749  010B22  0E00               	movlw	0
  3750  010B24  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3751  010B26  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3752  010B28  6BBF               	clrf	Word_SetPair@pPair& (0+255),b
  3753  010B2A  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3754  010B2E  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3755                           
  3756                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  3757  010B32  0E08               	movlw	8
  3758  010B34  0100               	movlb	0	; () banked
  3759  010B36  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3760  010B38  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3761  010B3A  0E00               	movlw	0
  3762  010B3C  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3763  010B3E  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3764  010B40  0E01               	movlw	1
  3765  010B42  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3766  010B44  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3767  010B48  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3768                           
  3769                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  3770  010B4C  0E08               	movlw	8
  3771  010B4E  0100               	movlb	0	; () banked
  3772  010B50  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3773  010B52  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3774  010B54  0E00               	movlw	0
  3775  010B56  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3776  010B58  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3777  010B5A  0E02               	movlw	2
  3778  010B5C  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3779  010B5E  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3780  010B62  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3781                           
  3782                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  3783  010B66  0E08               	movlw	8
  3784  010B68  0100               	movlb	0	; () banked
  3785  010B6A  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3786  010B6C  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3787  010B6E  0E00               	movlw	0
  3788  010B70  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3789  010B72  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3790  010B74  0E03               	movlw	3
  3791  010B76  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3792  010B78  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3793  010B7C  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3794                           
  3795                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  3796  010B80  0E08               	movlw	8
  3797  010B82  0100               	movlb	0	; () banked
  3798  010B84  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3799  010B86  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3800  010B88  0E00               	movlw	0
  3801  010B8A  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3802  010B8C  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3803  010B8E  0E04               	movlw	4
  3804  010B90  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3805  010B92  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3806  010B96  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3807                           
  3808                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  3809  010B9A  0E08               	movlw	8
  3810  010B9C  0100               	movlb	0	; () banked
  3811  010B9E  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3812  010BA0  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3813  010BA2  0E00               	movlw	0
  3814  010BA4  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3815  010BA6  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3816  010BA8  0E05               	movlw	5
  3817  010BAA  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3818  010BAC  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3819  010BB0  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3820                           
  3821                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  3822  010BB4  0E08               	movlw	8
  3823  010BB6  0100               	movlb	0	; () banked
  3824  010BB8  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3825  010BBA  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3826  010BBC  0E00               	movlw	0
  3827  010BBE  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3828  010BC0  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3829  010BC2  0E06               	movlw	6
  3830  010BC4  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3831  010BC6  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3832  010BCA  ECD7  F0A5         	call	_Word_SetPair	;wreg free
  3833                           
  3834                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  3835  010BCE  0E08               	movlw	8
  3836  010BD0  0100               	movlb	0	; () banked
  3837  010BD2  25E8               	addwf	Port_SetType@pInput& (0+255),w,b
  3838  010BD4  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
  3839  010BD6  0E00               	movlw	0
  3840  010BD8  21E9               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3841  010BDA  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3842  010BDC  0E07               	movlw	7
  3843  010BDE  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
  3844  010BE0  C0EA  F0C0         	movff	Port_SetType@pType,Word_SetPair@pValue
  3845  010BE4  EFD7  F0A5         	goto	_Word_SetPair	;wreg free
  3846  010BE8                     __end_of_Port_SetType:
  3847                           	opt stack 0
  3848                           tblptru	equ	0xFF8
  3849                           tblptrh	equ	0xFF7
  3850                           tblptrl	equ	0xFF6
  3851                           tablat	equ	0xFF5
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           postdec1	equ	0xFE5
  3855                           fsr1h	equ	0xFE2
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _Port_CheckPortType *****************
  3865 ;; Defined at:
  3866 ;;		line 138 in file "Library/Port.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  3869 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
  3870 ;;		 -> PortE(10), PortD(10), PortB(10), 
  3871 ;;  pDrive          1   56[BANK0 ] enum E7410
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  Output          1   57[BANK0 ] enum E7416
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      enum E7416
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        4 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:   20
  3890 ;; This function calls:
  3891 ;;		_Port_CheckQuadType
  3892 ;; This function is called by:
  3893 ;;		_Port_SetType
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text4
  3898  014700                     __ptext4:
  3899                           	opt stack 0
  3900  014700                     _Port_CheckPortType:
  3901                           	opt stack 8
  3902                           
  3903                           ;Port.c: 140: ePinError Output = ePinErrorState;
  3904                           
  3905                           ;incstack = 0
  3906  014700  0E05               	movlw	5
  3907  014702  0100               	movlb	0	; () banked
  3908  014704  6FE7               	movwf	Port_CheckPortType@Output& (0+255),b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  3912  014706  C0E4  F0DD         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3913  01470A  C0E5  F0DE         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3914  01470E  6BDF               	clrf	Port_CheckQuadType@pQuad& (0+255),b
  3915  014710  C0E6  F0E0         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3916  014714  EC45  F0A1         	call	_Port_CheckQuadType	;wreg free
  3917  014718  0100               	movlb	0	; () banked
  3918  01471A  6FE7               	movwf	Port_CheckPortType@Output& (0+255),b
  3919  01471C  51E7               	movf	Port_CheckPortType@Output& (0+255),w,b
  3920  01471E  E10C               	bnz	l10977
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  3924  014720  C0E4  F0DD         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3925  014724  C0E5  F0DE         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3926  014728  0E01               	movlw	1
  3927  01472A  6FDF               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  3928  01472C  C0E6  F0E0         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3929  014730  EC45  F0A1         	call	_Port_CheckQuadType	;wreg free
  3930  014734  0100               	movlb	0	; () banked
  3931  014736  6FE7               	movwf	Port_CheckPortType@Output& (0+255),b
  3932  014738                     l10977:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;Port.c: 146: return Output;
  3936  014738  0100               	movlb	0	; () banked
  3937  01473A  51E7               	movf	Port_CheckPortType@Output& (0+255),w,b
  3938  01473C  0012               	return	
  3939  01473E                     __end_of_Port_CheckPortType:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1h	equ	0xFE2
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _Port_Set *****************
  3958 ;; Defined at:
  3959 ;;		line 570 in file "Library/Port.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  3962 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
  3963 ;;		 -> PortE(10), PortD(10), PortB(10), 
  3964 ;;  pValue          1   17[BANK0 ] unsigned char 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  3967 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  3968 ;;  Type            1   38[BANK0 ] enum E7733
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      void 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:       24 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:   17
  3985 ;; This function calls:
  3986 ;;		_Byte_SetPort
  3987 ;;		_Word_GetPair
  3988 ;; This function is called by:
  3989 ;;		_Port_Init
  3990 ;;		_Port_Toggle
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text5
  3995  01034A                     __ptext5:
  3996                           	opt stack 0
  3997  01034A                     _Port_Set:
  3998                           	opt stack 11
  3999                           
  4000                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;incstack = 0
  4004  01034A  0E08               	movlw	8
  4005  01034C  0100               	movlb	0	; () banked
  4006  01034E  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4007  010350  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4008  010352  0E00               	movlw	0
  4009  010354  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4010  010356  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4011  010358  6BBC               	clrf	Word_GetPair@pPair& (0+255),b
  4012  01035A  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4013  01035E  0100               	movlb	0	; () banked
  4014  010360  6FD4               	movwf	Port_Set@Type& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  4018  010362  51D4               	movf	Port_Set@Type& (0+255),w,b
  4019  010364  6FC0               	movwf	??_Port_Set& (0+255),b
  4020  010366  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4021  010368  0E0E               	movlw	14
  4022  01036A                     u8205:
  4023  01036A  90D8               	bcf	status,0,c
  4024  01036C  0100               	movlb	0	; () banked
  4025  01036E  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4026  010370  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4027  010372  2EE8               	decfsz	wreg,f,c
  4028  010374  D7FA               	goto	u8205
  4029  010376  51D4               	movf	Port_Set@Type& (0+255),w,b
  4030  010378  6FC2               	movwf	(??_Port_Set+2)& (0+255),b
  4031  01037A  6BC3               	clrf	(??_Port_Set+3)& (0+255),b
  4032  01037C  0E0C               	movlw	12
  4033  01037E                     u8215:
  4034  01037E  90D8               	bcf	status,0,c
  4035  010380  0100               	movlb	0	; () banked
  4036  010382  37C2               	rlcf	(??_Port_Set+2)& (0+255),f,b
  4037  010384  37C3               	rlcf	(??_Port_Set+3)& (0+255),f,b
  4038  010386  2EE8               	decfsz	wreg,f,c
  4039  010388  D7FA               	goto	u8215
  4040  01038A  51D4               	movf	Port_Set@Type& (0+255),w,b
  4041  01038C  6FC4               	movwf	(??_Port_Set+4)& (0+255),b
  4042  01038E  6BC5               	clrf	(??_Port_Set+5)& (0+255),b
  4043  010390  0E0A               	movlw	10
  4044  010392                     u8225:
  4045  010392  90D8               	bcf	status,0,c
  4046  010394  0100               	movlb	0	; () banked
  4047  010396  37C4               	rlcf	(??_Port_Set+4)& (0+255),f,b
  4048  010398  37C5               	rlcf	(??_Port_Set+5)& (0+255),f,b
  4049  01039A  2EE8               	decfsz	wreg,f,c
  4050  01039C  D7FA               	goto	u8225
  4051  01039E  51D4               	movf	Port_Set@Type& (0+255),w,b
  4052  0103A0  6FC7               	movwf	(??_Port_Set+7)& (0+255),b
  4053  0103A2  6BC6               	clrf	(??_Port_Set+6)& (0+255),b
  4054  0103A4  51D4               	movf	Port_Set@Type& (0+255),w,b
  4055  0103A6  6FC8               	movwf	(??_Port_Set+8)& (0+255),b
  4056  0103A8  6BC9               	clrf	(??_Port_Set+9)& (0+255),b
  4057  0103AA  0E06               	movlw	6
  4058  0103AC                     u8235:
  4059  0103AC  90D8               	bcf	status,0,c
  4060  0103AE  0100               	movlb	0	; () banked
  4061  0103B0  37C8               	rlcf	(??_Port_Set+8)& (0+255),f,b
  4062  0103B2  37C9               	rlcf	(??_Port_Set+9)& (0+255),f,b
  4063  0103B4  2EE8               	decfsz	wreg,f,c
  4064  0103B6  D7FA               	goto	u8235
  4065  0103B8  51D4               	movf	Port_Set@Type& (0+255),w,b
  4066  0103BA  6FCA               	movwf	(??_Port_Set+10)& (0+255),b
  4067  0103BC  6BCB               	clrf	(??_Port_Set+11)& (0+255),b
  4068  0103BE  3BCA               	swapf	(??_Port_Set+10)& (0+255),f,b
  4069  0103C0  3BCB               	swapf	(??_Port_Set+11)& (0+255),f,b
  4070  0103C2  0EF0               	movlw	240
  4071  0103C4  17CB               	andwf	(??_Port_Set+11)& (0+255),f,b
  4072  0103C6  51CA               	movf	(??_Port_Set+10)& (0+255),w,b
  4073  0103C8  0B0F               	andlw	15
  4074  0103CA  13CB               	iorwf	(??_Port_Set+11)& (0+255),f,b
  4075  0103CC  0EF0               	movlw	240
  4076  0103CE  17CA               	andwf	(??_Port_Set+10)& (0+255),f,b
  4077  0103D0  51D4               	movf	Port_Set@Type& (0+255),w,b
  4078  0103D2  6FCC               	movwf	(??_Port_Set+12)& (0+255),b
  4079  0103D4  6BCD               	clrf	(??_Port_Set+13)& (0+255),b
  4080  0103D6  90D8               	bcf	status,0,c
  4081  0103D8  37CC               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4082  0103DA  37CD               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4083  0103DC  90D8               	bcf	status,0,c
  4084  0103DE  37CC               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4085  0103E0  37CD               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4086  0103E2  51D4               	movf	Port_Set@Type& (0+255),w,b
  4087  0103E4  6FCE               	movwf	(??_Port_Set+14)& (0+255),b
  4088  0103E6  6BCF               	clrf	(??_Port_Set+15)& (0+255),b
  4089  0103E8  51CC               	movf	(??_Port_Set+12)& (0+255),w,b
  4090  0103EA  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4091  0103EC  51CD               	movf	(??_Port_Set+13)& (0+255),w,b
  4092  0103EE  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4093  0103F0  51CA               	movf	(??_Port_Set+10)& (0+255),w,b
  4094  0103F2  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4095  0103F4  51CB               	movf	(??_Port_Set+11)& (0+255),w,b
  4096  0103F6  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4097  0103F8  51C8               	movf	(??_Port_Set+8)& (0+255),w,b
  4098  0103FA  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4099  0103FC  51C9               	movf	(??_Port_Set+9)& (0+255),w,b
  4100  0103FE  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4101  010400  51C6               	movf	(??_Port_Set+6)& (0+255),w,b
  4102  010402  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4103  010404  51C7               	movf	(??_Port_Set+7)& (0+255),w,b
  4104  010406  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4105  010408  51C4               	movf	(??_Port_Set+4)& (0+255),w,b
  4106  01040A  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4107  01040C  51C5               	movf	(??_Port_Set+5)& (0+255),w,b
  4108  01040E  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4109  010410  51C2               	movf	(??_Port_Set+2)& (0+255),w,b
  4110  010412  13CE               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4111  010414  51C3               	movf	(??_Port_Set+3)& (0+255),w,b
  4112  010416  13CF               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4113  010418  51C0               	movf	??_Port_Set& (0+255),w,b
  4114  01041A  11CE               	iorwf	(??_Port_Set+14)& (0+255),w,b
  4115  01041C  6FD0               	movwf	Port_Set@TypeRequired& (0+255),b
  4116  01041E  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4117  010420  11CF               	iorwf	(??_Port_Set+15)& (0+255),w,b
  4118  010422  6FD1               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;Port.c: 574: UINT16 TypeActual = Type;
  4122  010424  C0D4  F0D2         	movff	Port_Set@Type,Port_Set@TypeActual
  4123  010428  6BD3               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  4127  01042A  0E08               	movlw	8
  4128  01042C  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4129  01042E  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4130  010430  0E00               	movlw	0
  4131  010432  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4132  010434  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4133  010436  0E01               	movlw	1
  4134  010438  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4135  01043A  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4136  01043E  0100               	movlb	0	; () banked
  4137  010440  6FC0               	movwf	??_Port_Set& (0+255),b
  4138  010442  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4139  010444  90D8               	bcf	status,0,c
  4140  010446  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4141  010448  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4142  01044A  90D8               	bcf	status,0,c
  4143  01044C  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4144  01044E  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4145  010450  51C0               	movf	??_Port_Set& (0+255),w,b
  4146  010452  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4147  010454  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4148  010456  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  4152  010458  0E08               	movlw	8
  4153  01045A  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4154  01045C  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4155  01045E  0E00               	movlw	0
  4156  010460  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4157  010462  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4158  010464  0E02               	movlw	2
  4159  010466  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4160  010468  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4161  01046C  0100               	movlb	0	; () banked
  4162  01046E  6FC0               	movwf	??_Port_Set& (0+255),b
  4163  010470  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4164  010472  3BC0               	swapf	??_Port_Set& (0+255),f,b
  4165  010474  3BC1               	swapf	(??_Port_Set+1)& (0+255),f,b
  4166  010476  0EF0               	movlw	240
  4167  010478  17C1               	andwf	(??_Port_Set+1)& (0+255),f,b
  4168  01047A  51C0               	movf	??_Port_Set& (0+255),w,b
  4169  01047C  0B0F               	andlw	15
  4170  01047E  13C1               	iorwf	(??_Port_Set+1)& (0+255),f,b
  4171  010480  0EF0               	movlw	240
  4172  010482  17C0               	andwf	??_Port_Set& (0+255),f,b
  4173  010484  51C0               	movf	??_Port_Set& (0+255),w,b
  4174  010486  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4175  010488  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4176  01048A  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  4180  01048C  0E08               	movlw	8
  4181  01048E  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4182  010490  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4183  010492  0E00               	movlw	0
  4184  010494  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4185  010496  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4186  010498  0E03               	movlw	3
  4187  01049A  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4188  01049C  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4189  0104A0  0100               	movlb	0	; () banked
  4190  0104A2  6FC0               	movwf	??_Port_Set& (0+255),b
  4191  0104A4  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4192  0104A6  0E06               	movlw	6
  4193  0104A8                     u8245:
  4194  0104A8  90D8               	bcf	status,0,c
  4195  0104AA  0100               	movlb	0	; () banked
  4196  0104AC  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4197  0104AE  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4198  0104B0  2EE8               	decfsz	wreg,f,c
  4199  0104B2  D7FA               	goto	u8245
  4200  0104B4  51C0               	movf	??_Port_Set& (0+255),w,b
  4201  0104B6  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4202  0104B8  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4203  0104BA  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  4207  0104BC  0E08               	movlw	8
  4208  0104BE  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4209  0104C0  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4210  0104C2  0E00               	movlw	0
  4211  0104C4  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4212  0104C6  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4213  0104C8  0E04               	movlw	4
  4214  0104CA  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4215  0104CC  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4216  0104D0  0100               	movlb	0	; () banked
  4217  0104D2  6FC0               	movwf	??_Port_Set& (0+255),b
  4218  0104D4  51C0               	movf	??_Port_Set& (0+255),w,b
  4219  0104D6  6FC2               	movwf	(??_Port_Set+2)& (0+255),b
  4220  0104D8  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4221  0104DA  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4222  0104DC  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4223  0104DE  51C2               	movf	(??_Port_Set+2)& (0+255),w,b
  4224  0104E0  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  4228  0104E2  0E08               	movlw	8
  4229  0104E4  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4230  0104E6  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4231  0104E8  0E00               	movlw	0
  4232  0104EA  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4233  0104EC  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4234  0104EE  0E05               	movlw	5
  4235  0104F0  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4236  0104F2  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4237  0104F6  0100               	movlb	0	; () banked
  4238  0104F8  6FC0               	movwf	??_Port_Set& (0+255),b
  4239  0104FA  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4240  0104FC  0E0A               	movlw	10
  4241  0104FE                     u8255:
  4242  0104FE  90D8               	bcf	status,0,c
  4243  010500  0100               	movlb	0	; () banked
  4244  010502  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4245  010504  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4246  010506  2EE8               	decfsz	wreg,f,c
  4247  010508  D7FA               	goto	u8255
  4248  01050A  51C0               	movf	??_Port_Set& (0+255),w,b
  4249  01050C  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4250  01050E  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4251  010510  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  4255  010512  0E08               	movlw	8
  4256  010514  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4257  010516  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4258  010518  0E00               	movlw	0
  4259  01051A  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4260  01051C  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4261  01051E  0E06               	movlw	6
  4262  010520  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4263  010522  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4264  010526  0100               	movlb	0	; () banked
  4265  010528  6FC0               	movwf	??_Port_Set& (0+255),b
  4266  01052A  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4267  01052C  0E0C               	movlw	12
  4268  01052E                     u8265:
  4269  01052E  90D8               	bcf	status,0,c
  4270  010530  0100               	movlb	0	; () banked
  4271  010532  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4272  010534  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4273  010536  2EE8               	decfsz	wreg,f,c
  4274  010538  D7FA               	goto	u8265
  4275  01053A  51C0               	movf	??_Port_Set& (0+255),w,b
  4276  01053C  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4277  01053E  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4278  010540  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  4282  010542  0E08               	movlw	8
  4283  010544  25BD               	addwf	Port_Set@pInput& (0+255),w,b
  4284  010546  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
  4285  010548  0E00               	movlw	0
  4286  01054A  21BE               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4287  01054C  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4288  01054E  0E07               	movlw	7
  4289  010550  6FBC               	movwf	Word_GetPair@pPair& (0+255),b
  4290  010552  EC5E  F0A6         	call	_Word_GetPair	;wreg free
  4291  010556  0100               	movlb	0	; () banked
  4292  010558  6FC0               	movwf	??_Port_Set& (0+255),b
  4293  01055A  6BC1               	clrf	(??_Port_Set+1)& (0+255),b
  4294  01055C  0E0E               	movlw	14
  4295  01055E                     u8275:
  4296  01055E  90D8               	bcf	status,0,c
  4297  010560  0100               	movlb	0	; () banked
  4298  010562  37C0               	rlcf	??_Port_Set& (0+255),f,b
  4299  010564  37C1               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4300  010566  2EE8               	decfsz	wreg,f,c
  4301  010568  D7FA               	goto	u8275
  4302  01056A  51C0               	movf	??_Port_Set& (0+255),w,b
  4303  01056C  13D2               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4304  01056E  51C1               	movf	(??_Port_Set+1)& (0+255),w,b
  4305  010570  13D3               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4306                           
  4307                           ;Port.c: 584: if (TypeRequired == TypeActual)
  4308  010572  51D2               	movf	Port_Set@TypeActual& (0+255),w,b
  4309  010574  19D0               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  4310  010576  E124               	bnz	l1121
  4311  010578  51D3               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  4312  01057A  19D1               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  4313  01057C  E016               	bz	l11687
  4314  01057E  0012               	return	
  4315  010580                     l11679:
  4316                           
  4317                           ;Port.c: 597: pValue = ~pValue;
  4318  010580  0100               	movlb	0	; () banked
  4319  010582  1FBF               	comf	Port_Set@pValue& (0+255),f,b
  4320  010584                     l11681:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;Port.c: 598: Byte_SetPort(pInput->mDirection, pValue);
  4324  010584  0100               	movlb	0	; () banked
  4325  010586  EE20 F002          	lfsr	2,2
  4326  01058A  D003               	goto	L25
  4327  01058C                     l11683:
  4328                           
  4329                           ;Port.c: 602: Byte_SetPort(pInput->mOutput, pValue);
  4330  01058C  0100               	movlb	0	; () banked
  4331  01058E  EE20 F004          	lfsr	2,4
  4332  010592                     L25:
  4333  010592  51BD               	movf	Port_Set@pInput& (0+255),w,b
  4334  010594  26D9               	addwf	fsr2l,f,c
  4335  010596  51BE               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4336  010598  22DA               	addwfc	fsr2h,f,c
  4337  01059A  CFDE F0AE          	movff	postinc2,Byte_SetPort@pInput
  4338  01059E  CFDD F0AF          	movff	postdec2,Byte_SetPort@pInput+1
  4339  0105A2  C0BF  F0B0         	movff	Port_Set@pValue,Byte_SetPort@pValue
  4340  0105A6  EF2B  F0A8         	goto	_Byte_SetPort	;wreg free
  4341  0105AA                     l11687:
  4342  0105AA  0100               	movlb	0	; () banked
  4343  0105AC  51D4               	movf	Port_Set@Type& (0+255),w,b
  4344                           
  4345                           ; Switch size 1, requested type "space"
  4346                           ; Number of cases is 4, Range of values is 0 to 3
  4347                           ; switch strategies available:
  4348                           ; Name         Instructions Cycles
  4349                           ; simple_byte           13     7 (average)
  4350                           ;	Chosen strategy is simple_byte
  4351  0105AE  B4D8               	btfsc	status,2,c
  4352  0105B0  0012               	return	
  4353  0105B2  0A01               	xorlw	1	; case 1
  4354  0105B4  E0E7               	bz	l11681
  4355  0105B6  0A03               	xorlw	3	; case 2
  4356  0105B8  E0E3               	bz	l11679
  4357  0105BA  0A01               	xorlw	1	; case 3
  4358  0105BC  E0E7               	bz	l11683
  4359                           
  4360                           ; BSR set to: 0
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;Port.c: 607: }
  4364  0105BE  0012               	return	
  4365  0105C0                     l1121:
  4366  0105C0  0012               	return		;funcret
  4367  0105C2                     __end_of_Port_Set:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           postdec1	equ	0xFE5
  4376                           fsr1h	equ	0xFE2
  4377                           fsr1l	equ	0xFE1
  4378                           indf2	equ	0xFDF
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _Byte_SetPort *****************
  4386 ;; Defined at:
  4387 ;;		line 110 in file "Library/Types.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  4390 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  4391 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  4392 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  4393 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  4394 ;;		 -> NULL(0), 
  4395 ;;  pValue          1    2[BANK0 ] unsigned char 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		fsr2l, fsr2h
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        3 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:   14
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_Port_Set
  4418 ;;		_I2C_Init
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text6
  4423  015056                     __ptext6:
  4424                           	opt stack 0
  4425  015056                     _Byte_SetPort:
  4426                           	opt stack 13
  4427                           
  4428                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  4429                           
  4430                           ;incstack = 0
  4431  015056  C0AE  FFD9         	movff	Byte_SetPort@pInput,fsr2l
  4432  01505A  C0AF  FFDA         	movff	Byte_SetPort@pInput+1,fsr2h
  4433  01505E  C0B0  FFDF         	movff	Byte_SetPort@pValue,indf2
  4434  015062  0012               	return		;funcret
  4435  015064                     __end_of_Byte_SetPort:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           indf2	equ	0xFDF
  4447                           postinc2	equ	0xFDE
  4448                           postdec2	equ	0xFDD
  4449                           fsr2h	equ	0xFDA
  4450                           fsr2l	equ	0xFD9
  4451                           status	equ	0xFD8
  4452                           
  4453 ;; *************** function _GetPortTRIS *****************
  4454 ;; Defined at:
  4455 ;;		line 67 in file "Library/Port.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  pInput          1    wreg     enum E7724
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  pInput          1    2[BANK0 ] enum E7724
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  2    0[BANK0 ] PTR struct Byte
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4469 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;Total ram usage:        3 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:   14
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_Port_Init
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text7
  4484  0136C0                     __ptext7:
  4485                           	opt stack 0
  4486  0136C0                     _GetPortTRIS:
  4487                           	opt stack 14
  4488                           
  4489                           ;incstack = 0
  4490                           ;GetPortTRIS@pInput stored from wreg
  4491  0136C0  0100               	movlb	0	; () banked
  4492  0136C2  6FB0               	movwf	GetPortTRIS@pInput& (0+255),b
  4493                           
  4494                           ;Port.c: 69: switch (pInput)
  4495  0136C4  D02E               	goto	l11629
  4496  0136C6                     l11595:
  4497                           
  4498                           ;Port.c: 72: return (BytePtr)&TRISA;
  4499  0136C6  0E92               	movlw	146
  4500  0136C8  0100               	movlb	0	; () banked
  4501  0136CA  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4502  0136CC  0E0F               	movlw	15
  4503  0136CE  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506  0136D0  0C0F               	retlw	15
  4507  0136D2                     l11599:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;Port.c: 74: return (BytePtr)&TRISB;
  4511  0136D2  0E93               	movlw	147
  4512  0136D4  0100               	movlb	0	; () banked
  4513  0136D6  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4514  0136D8  0E0F               	movlw	15
  4515  0136DA  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4516                           
  4517                           ; BSR set to: 0
  4518  0136DC  0C0F               	retlw	15
  4519  0136DE                     l11603:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;Port.c: 76: return (BytePtr)&TRISC;
  4523  0136DE  0E94               	movlw	148
  4524  0136E0  0100               	movlb	0	; () banked
  4525  0136E2  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4526  0136E4  0E0F               	movlw	15
  4527  0136E6  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4528                           
  4529                           ; BSR set to: 0
  4530  0136E8  0C0F               	retlw	15
  4531  0136EA                     l11607:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;Port.c: 78: return (BytePtr)&TRISD;
  4535  0136EA  0E95               	movlw	149
  4536  0136EC  0100               	movlb	0	; () banked
  4537  0136EE  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4538  0136F0  0E0F               	movlw	15
  4539  0136F2  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542  0136F4  0C0F               	retlw	15
  4543  0136F6                     l11611:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;Port.c: 80: return (BytePtr)&TRISE;
  4547  0136F6  0E96               	movlw	150
  4548  0136F8  0100               	movlb	0	; () banked
  4549  0136FA  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4550  0136FC  0E0F               	movlw	15
  4551  0136FE  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4552                           
  4553                           ; BSR set to: 0
  4554  013700  0C0F               	retlw	15
  4555  013702                     l11615:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;Port.c: 82: return (BytePtr)&TRISF;
  4559  013702  0E97               	movlw	151
  4560  013704  0100               	movlb	0	; () banked
  4561  013706  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4562  013708  0E0F               	movlw	15
  4563  01370A  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4564                           
  4565                           ; BSR set to: 0
  4566  01370C  0C0F               	retlw	15
  4567  01370E                     l11619:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;Port.c: 84: return (BytePtr)&TRISG;
  4571  01370E  0E98               	movlw	152
  4572  013710  0100               	movlb	0	; () banked
  4573  013712  6FAE               	movwf	?_GetPortTRIS& (0+255),b
  4574  013714  0E0F               	movlw	15
  4575  013716  6FAF               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4576                           
  4577                           ; BSR set to: 0
  4578  013718  0C0F               	retlw	15
  4579  01371A                     l11623:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;Port.c: 86: return (void*)0;
  4583  01371A  0100               	movlb	0	; () banked
  4584  01371C  6BAE               	clrf	?_GetPortTRIS& (0+255),b
  4585  01371E  6BAF               	clrf	(?_GetPortTRIS+1)& (0+255),b
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;Port.c: 87: }
  4589                           
  4590                           ; BSR set to: 0
  4591  013720  0C00               	retlw	0
  4592  013722                     l11629:
  4593  013722  0100               	movlb	0	; () banked
  4594  013724  51B0               	movf	GetPortTRIS@pInput& (0+255),w,b
  4595                           
  4596                           ; Switch size 1, requested type "space"
  4597                           ; Number of cases is 7, Range of values is 0 to 6
  4598                           ; switch strategies available:
  4599                           ; Name         Instructions Cycles
  4600                           ; simple_byte           22    12 (average)
  4601                           ;	Chosen strategy is simple_byte
  4602  013726  E0CF               	bz	l11595
  4603  013728  0A01               	xorlw	1	; case 1
  4604  01372A  E0D3               	bz	l11599
  4605  01372C  0A03               	xorlw	3	; case 2
  4606  01372E  E0D7               	bz	l11603
  4607  013730  0A01               	xorlw	1	; case 3
  4608  013732  E0DB               	bz	l11607
  4609  013734  0A07               	xorlw	7	; case 4
  4610  013736  E0DF               	bz	l11611
  4611  013738  0A01               	xorlw	1	; case 5
  4612  01373A  E0E3               	bz	l11615
  4613  01373C  0A03               	xorlw	3	; case 6
  4614  01373E  E0E7               	bz	l11619
  4615  013740  D7EC               	goto	l11623
  4616  013742                     __end_of_GetPortTRIS:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           postdec1	equ	0xFE5
  4625                           fsr1h	equ	0xFE2
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _GetPortProperties *****************
  4635 ;; Defined at:
  4636 ;;		line 21 in file "Library/Port.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  pInput          1    wreg     enum E7724
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  pInput          1    2[BANK0 ] enum E7724
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  2    0[BANK0 ] PTR struct PortProperty
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4650 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;Total ram usage:        3 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:   14
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		_Port_Init
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text8
  4665  013742                     __ptext8:
  4666                           	opt stack 0
  4667  013742                     _GetPortProperties:
  4668                           	opt stack 14
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;incstack = 0
  4672                           ;GetPortProperties@pInput stored from wreg
  4673  013742  0100               	movlb	0	; () banked
  4674  013744  6FB0               	movwf	GetPortProperties@pInput& (0+255),b
  4675                           
  4676                           ;Port.c: 23: switch (pInput)
  4677  013746  D02E               	goto	l11553
  4678  013748                     l11519:
  4679                           
  4680                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  4681  013748  0EB3               	movlw	low _PortA_Property
  4682  01374A  0100               	movlb	0	; () banked
  4683  01374C  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4684  01374E  0EFF               	movlw	high _PortA_Property
  4685  013750  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4686                           
  4687                           ; BSR set to: 0
  4688  013752  0012               	return	
  4689  013754                     l11523:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  4693  013754  0EB5               	movlw	low _PortB_Property
  4694  013756  0100               	movlb	0	; () banked
  4695  013758  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4696  01375A  0EFF               	movlw	high _PortB_Property
  4697  01375C  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4698                           
  4699                           ; BSR set to: 0
  4700  01375E  0012               	return	
  4701  013760                     l11527:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  4705  013760  0EB7               	movlw	low _PortC_Property
  4706  013762  0100               	movlb	0	; () banked
  4707  013764  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4708  013766  0EFF               	movlw	high _PortC_Property
  4709  013768  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4710                           
  4711                           ; BSR set to: 0
  4712  01376A  0012               	return	
  4713  01376C                     l11531:
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  4717  01376C  0EB9               	movlw	low _PortD_Property
  4718  01376E  0100               	movlb	0	; () banked
  4719  013770  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4720  013772  0EFF               	movlw	high _PortD_Property
  4721  013774  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724  013776  0012               	return	
  4725  013778                     l11535:
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  4729  013778  0EBB               	movlw	low _PortE_Property
  4730  01377A  0100               	movlb	0	; () banked
  4731  01377C  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4732  01377E  0EFF               	movlw	high _PortE_Property
  4733  013780  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4734                           
  4735                           ; BSR set to: 0
  4736  013782  0012               	return	
  4737  013784                     l11539:
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  4741  013784  0EBD               	movlw	low _PortF_Property
  4742  013786  0100               	movlb	0	; () banked
  4743  013788  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4744  01378A  0EFF               	movlw	high _PortF_Property
  4745  01378C  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748  01378E  0012               	return	
  4749  013790                     l11543:
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  4753  013790  0EBF               	movlw	low _PortG_Property
  4754  013792  0100               	movlb	0	; () banked
  4755  013794  6FAE               	movwf	?_GetPortProperties& (0+255),b
  4756  013796  0EFF               	movlw	high _PortG_Property
  4757  013798  6FAF               	movwf	(?_GetPortProperties+1)& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760  01379A  0012               	return	
  4761  01379C                     l11547:
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;Port.c: 40: return (void*)0;
  4765  01379C  0100               	movlb	0	; () banked
  4766  01379E  6BAE               	clrf	?_GetPortProperties& (0+255),b
  4767  0137A0  6BAF               	clrf	(?_GetPortProperties+1)& (0+255),b
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;Port.c: 41: }
  4771                           
  4772                           ; BSR set to: 0
  4773  0137A2  0C00               	retlw	0
  4774  0137A4                     l11553:
  4775  0137A4  0100               	movlb	0	; () banked
  4776  0137A6  51B0               	movf	GetPortProperties@pInput& (0+255),w,b
  4777                           
  4778                           ; Switch size 1, requested type "space"
  4779                           ; Number of cases is 7, Range of values is 0 to 6
  4780                           ; switch strategies available:
  4781                           ; Name         Instructions Cycles
  4782                           ; simple_byte           22    12 (average)
  4783                           ;	Chosen strategy is simple_byte
  4784  0137A8  E0CF               	bz	l11519
  4785  0137AA  0A01               	xorlw	1	; case 1
  4786  0137AC  E0D3               	bz	l11523
  4787  0137AE  0A03               	xorlw	3	; case 2
  4788  0137B0  E0D7               	bz	l11527
  4789  0137B2  0A01               	xorlw	1	; case 3
  4790  0137B4  E0DB               	bz	l11531
  4791  0137B6  0A07               	xorlw	7	; case 4
  4792  0137B8  E0DF               	bz	l11535
  4793  0137BA  0A01               	xorlw	1	; case 5
  4794  0137BC  E0E3               	bz	l11539
  4795  0137BE  0A03               	xorlw	3	; case 6
  4796  0137C0  E0E7               	bz	l11543
  4797  0137C2  D7EC               	goto	l11547
  4798  0137C4                     __end_of_GetPortProperties:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           postinc0	equ	0xFEE
  4805                           wreg	equ	0xFE8
  4806                           postdec1	equ	0xFE5
  4807                           fsr1h	equ	0xFE2
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _GetPortPORT *****************
  4817 ;; Defined at:
  4818 ;;		line 44 in file "Library/Port.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;  pInput          1    wreg     enum E7724
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  pInput          1    2[BANK0 ] enum E7724
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  2    0[BANK0 ] PTR struct Byte
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;Total ram usage:        3 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:   14
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_Port_Init
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text9
  4847  0137C4                     __ptext9:
  4848                           	opt stack 0
  4849  0137C4                     _GetPortPORT:
  4850                           	opt stack 14
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854                           ;GetPortPORT@pInput stored from wreg
  4855  0137C4  0100               	movlb	0	; () banked
  4856  0137C6  6FB0               	movwf	GetPortPORT@pInput& (0+255),b
  4857                           
  4858                           ;Port.c: 46: switch (pInput)
  4859  0137C8  D02E               	goto	l11591
  4860  0137CA                     l11557:
  4861                           
  4862                           ;Port.c: 49: return (BytePtr)&PORTA;
  4863  0137CA  0E80               	movlw	128
  4864  0137CC  0100               	movlb	0	; () banked
  4865  0137CE  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4866  0137D0  0E0F               	movlw	15
  4867  0137D2  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4868                           
  4869                           ; BSR set to: 0
  4870  0137D4  0C0F               	retlw	15
  4871  0137D6                     l11561:
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;Port.c: 51: return (BytePtr)&PORTB;
  4875  0137D6  0E81               	movlw	129
  4876  0137D8  0100               	movlb	0	; () banked
  4877  0137DA  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4878  0137DC  0E0F               	movlw	15
  4879  0137DE  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4880                           
  4881                           ; BSR set to: 0
  4882  0137E0  0C0F               	retlw	15
  4883  0137E2                     l11565:
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;Port.c: 53: return (BytePtr)&PORTC;
  4887  0137E2  0E82               	movlw	130
  4888  0137E4  0100               	movlb	0	; () banked
  4889  0137E6  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4890  0137E8  0E0F               	movlw	15
  4891  0137EA  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4892                           
  4893                           ; BSR set to: 0
  4894  0137EC  0C0F               	retlw	15
  4895  0137EE                     l11569:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;Port.c: 55: return (BytePtr)&PORTD;
  4899  0137EE  0E83               	movlw	131
  4900  0137F0  0100               	movlb	0	; () banked
  4901  0137F2  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4902  0137F4  0E0F               	movlw	15
  4903  0137F6  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4904                           
  4905                           ; BSR set to: 0
  4906  0137F8  0C0F               	retlw	15
  4907  0137FA                     l11573:
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;Port.c: 57: return (BytePtr)&PORTE;
  4911  0137FA  0E84               	movlw	132
  4912  0137FC  0100               	movlb	0	; () banked
  4913  0137FE  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4914  013800  0E0F               	movlw	15
  4915  013802  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4916                           
  4917                           ; BSR set to: 0
  4918  013804  0C0F               	retlw	15
  4919  013806                     l11577:
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;Port.c: 59: return (BytePtr)&PORTF;
  4923  013806  0E85               	movlw	133
  4924  013808  0100               	movlb	0	; () banked
  4925  01380A  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4926  01380C  0E0F               	movlw	15
  4927  01380E  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930  013810  0C0F               	retlw	15
  4931  013812                     l11581:
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;Port.c: 61: return (BytePtr)&PORTG;
  4935  013812  0E86               	movlw	134
  4936  013814  0100               	movlb	0	; () banked
  4937  013816  6FAE               	movwf	?_GetPortPORT& (0+255),b
  4938  013818  0E0F               	movlw	15
  4939  01381A  6FAF               	movwf	(?_GetPortPORT+1)& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942  01381C  0C0F               	retlw	15
  4943  01381E                     l11585:
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;Port.c: 63: return (void*)0;
  4947  01381E  0100               	movlb	0	; () banked
  4948  013820  6BAE               	clrf	?_GetPortPORT& (0+255),b
  4949  013822  6BAF               	clrf	(?_GetPortPORT+1)& (0+255),b
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;Port.c: 64: }
  4953                           
  4954                           ; BSR set to: 0
  4955  013824  0C00               	retlw	0
  4956  013826                     l11591:
  4957  013826  0100               	movlb	0	; () banked
  4958  013828  51B0               	movf	GetPortPORT@pInput& (0+255),w,b
  4959                           
  4960                           ; Switch size 1, requested type "space"
  4961                           ; Number of cases is 7, Range of values is 0 to 6
  4962                           ; switch strategies available:
  4963                           ; Name         Instructions Cycles
  4964                           ; simple_byte           22    12 (average)
  4965                           ;	Chosen strategy is simple_byte
  4966  01382A  E0CF               	bz	l11557
  4967  01382C  0A01               	xorlw	1	; case 1
  4968  01382E  E0D3               	bz	l11561
  4969  013830  0A03               	xorlw	3	; case 2
  4970  013832  E0D7               	bz	l11565
  4971  013834  0A01               	xorlw	1	; case 3
  4972  013836  E0DB               	bz	l11569
  4973  013838  0A07               	xorlw	7	; case 4
  4974  01383A  E0DF               	bz	l11573
  4975  01383C  0A01               	xorlw	1	; case 5
  4976  01383E  E0E3               	bz	l11577
  4977  013840  0A03               	xorlw	3	; case 6
  4978  013842  E0E7               	bz	l11581
  4979  013844  D7EC               	goto	l11585
  4980  013846                     __end_of_GetPortPORT:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           postdec1	equ	0xFE5
  4989                           fsr1h	equ	0xFE2
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _LED_Init *****************
  4999 ;; Defined at:
  5000 ;;		line 15 in file "Library/LED.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  pLED            1    wreg     enum E7677
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  pLED            1   45[BANK0 ] enum E7677
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        1 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:   19
  5021 ;; This function calls:
  5022 ;;		_LED_Set
  5023 ;;		_Port_SetPinType
  5024 ;; This function is called by:
  5025 ;;		_MXK_Init
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text10
  5030  01440A                     __ptext10:
  5031                           	opt stack 0
  5032  01440A                     _LED_Init:
  5033                           	opt stack 10
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;incstack = 0
  5037                           ;LED_Init@pLED stored from wreg
  5038  01440A  0100               	movlb	0	; () banked
  5039  01440C  6FDB               	movwf	LED_Init@pLED& (0+255),b
  5040                           
  5041                           ;LED.c: 17: switch (pLED)
  5042  01440E  D017               	goto	l12073
  5043  014410                     l12067:
  5044                           
  5045                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  5046  014410  0EA4               	movlw	low _PortC
  5047  014412  0100               	movlb	0	; () banked
  5048  014414  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  5049  014416  0E00               	movlw	high _PortC
  5050  014418  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5051  01441A  6BD6               	clrf	Port_SetPinType@pPin& (0+255),b
  5052  01441C  0E03               	movlw	3
  5053  01441E  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  5054  014420  ECAD  F087         	call	_Port_SetPinType	;wreg free
  5055                           
  5056                           ;LED.c: 21: break;
  5057  014424  D011               	goto	l12075
  5058  014426                     l12069:
  5059                           
  5060                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  5061  014426  0EA4               	movlw	low _PortC
  5062  014428  0100               	movlb	0	; () banked
  5063  01442A  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  5064  01442C  0E00               	movlw	high _PortC
  5065  01442E  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5066  014430  0E01               	movlw	1
  5067  014432  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
  5068  014434  0E03               	movlw	3
  5069  014436  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  5070  014438  ECAD  F087         	call	_Port_SetPinType	;wreg free
  5071                           
  5072                           ;LED.c: 25: }
  5073                           
  5074                           ;LED.c: 24: break;
  5075  01443C  D005               	goto	l12075
  5076  01443E                     l12073:
  5077  01443E  0100               	movlb	0	; () banked
  5078  014440  51DB               	movf	LED_Init@pLED& (0+255),w,b
  5079                           
  5080                           ; Switch size 1, requested type "space"
  5081                           ; Number of cases is 2, Range of values is 0 to 1
  5082                           ; switch strategies available:
  5083                           ; Name         Instructions Cycles
  5084                           ; simple_byte            7     4 (average)
  5085                           ;	Chosen strategy is simple_byte
  5086  014442  E0E6               	bz	l12067
  5087  014444  0A01               	xorlw	1	; case 1
  5088  014446  E0EF               	bz	l12069
  5089  014448                     l12075:
  5090                           
  5091                           ;LED.c: 26: LED_Set(pLED, 0);
  5092  014448  0100               	movlb	0	; () banked
  5093  01444A  6BC2               	clrf	LED_Set@pValue& (0+255),b
  5094  01444C  51DB               	movf	LED_Init@pLED& (0+255),w,b
  5095  01444E  EFC3  F0A4         	goto	_LED_Set
  5096  014452                     __end_of_LED_Init:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           postdec1	equ	0xFE5
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _LED_Set *****************
  5115 ;; Defined at:
  5116 ;;		line 33 in file "Library/LED.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  pLED            1    wreg     enum E7677
  5119 ;;  pValue          1   20[BANK0 ] unsigned char 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  pLED            1   21[BANK0 ] enum E7677
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        2 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:   18
  5138 ;; This function calls:
  5139 ;;		_Port_SetPin
  5140 ;; This function is called by:
  5141 ;;		_LED_Init
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text11
  5146  014986                     __ptext11:
  5147                           	opt stack 0
  5148  014986                     _LED_Set:
  5149                           	opt stack 10
  5150                           
  5151                           ;incstack = 0
  5152                           ;LED_Set@pLED stored from wreg
  5153  014986  0100               	movlb	0	; () banked
  5154  014988  6FC3               	movwf	LED_Set@pLED& (0+255),b
  5155                           
  5156                           ;LED.c: 35: switch (pLED)
  5157  01498A  D012               	goto	l11515
  5158  01498C                     l11509:
  5159                           
  5160                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  5161  01498C  0EA4               	movlw	low _PortC
  5162  01498E  0100               	movlb	0	; () banked
  5163  014990  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  5164  014992  0E00               	movlw	high _PortC
  5165  014994  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5166  014996  6BBF               	clrf	Port_SetPin@pPin& (0+255),b
  5167  014998  D007               	goto	L26
  5168  01499A                     l11511:
  5169                           
  5170                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  5171  01499A  0EA4               	movlw	low _PortC
  5172  01499C  0100               	movlb	0	; () banked
  5173  01499E  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  5174  0149A0  0E00               	movlw	high _PortC
  5175  0149A2  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5176  0149A4  0E01               	movlw	1
  5177  0149A6  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
  5178  0149A8                     L26:
  5179  0149A8  C0C2  F0C0         	movff	LED_Set@pValue,Port_SetPin@pValue
  5180  0149AC  EF96  F09D         	goto	_Port_SetPin	;wreg free
  5181  0149B0                     l11515:
  5182  0149B0  0100               	movlb	0	; () banked
  5183  0149B2  51C3               	movf	LED_Set@pLED& (0+255),w,b
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 2, Range of values is 0 to 1
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte            7     4 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  0149B4  E0EB               	bz	l11509
  5192  0149B6  0A01               	xorlw	1	; case 1
  5193  0149B8  E0F0               	bz	l11511
  5194                           
  5195                           ; BSR set to: 0
  5196  0149BA  0012               	return		;funcret
  5197  0149BC                     __end_of_LED_Set:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           postdec1	equ	0xFE5
  5206                           fsr1h	equ	0xFE2
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function _ISR_Enable *****************
  5216 ;; Defined at:
  5217 ;;		line 29 in file "ISR.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;		None
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		None
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;Total ram usage:        0 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:   14
  5238 ;; This function calls:
  5239 ;;		Nothing
  5240 ;; This function is called by:
  5241 ;;		_main
  5242 ;;		_IMU_Init
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text12
  5247  01507C                     __ptext12:
  5248                           	opt stack 0
  5249  01507C                     _ISR_Enable:
  5250                           	opt stack 16
  5251                           
  5252                           ;ISR.c: 31: INTCONbits.PEIE = 1;
  5253                           
  5254                           ;incstack = 0
  5255  01507C  8CF2               	bsf	intcon,6,c	;volatile
  5256                           
  5257                           ;ISR.c: 32: INTCONbits.GIE = 1;
  5258  01507E  8EF2               	bsf	intcon,7,c	;volatile
  5259                           
  5260                           ;ISR.c: 33: INTCONbits.INT0IE = 1;
  5261  015080  88F2               	bsf	intcon,4,c	;volatile
  5262                           
  5263                           ;ISR.c: 34: INTCONbits.INT0IF = 0;
  5264  015082  92F2               	bcf	intcon,1,c	;volatile
  5265  015084  0012               	return		;funcret
  5266  015086                     __end_of_ISR_Enable:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           intcon	equ	0xFF2
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function _FunctUSB *****************
  5286 ;; Defined at:
  5287 ;;		line 167 in file "Functions.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:   23
  5308 ;; This function calls:
  5309 ;;		_USB_Poll
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text13
  5316  0150AC                     __ptext13:
  5317                           	opt stack 0
  5318  0150AC                     _FunctUSB:
  5319                           	opt stack 7
  5320                           
  5321                           ;Functions.c: 169: USB_Poll();
  5322                           
  5323                           ;incstack = 0
  5324  0150AC  EF23  F0A8         	goto	_USB_Poll	;wreg free
  5325  0150B0                     __end_of_FunctUSB:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           intcon	equ	0xFF2
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _USB_Poll *****************
  5345 ;; Defined at:
  5346 ;;		line 26 in file "USB_Wrap.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;		None
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;Total ram usage:        0 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:   22
  5367 ;; This function calls:
  5368 ;;		_USB_Tasks
  5369 ;; This function is called by:
  5370 ;;		_FunctUSB
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text14
  5375  015046                     __ptext14:
  5376                           	opt stack 0
  5377  015046                     _USB_Poll:
  5378                           	opt stack 7
  5379                           
  5380                           ;USB_Wrap.c: 47: if( USBDeviceState < CONFIGURED_STATE )
  5381                           
  5382                           ;incstack = 0
  5383  015046  0E20               	movlw	32
  5384  015048  6049               	cpfslt	_USBDeviceState,c	;volatile
  5385  01504A  D001               	goto	l2484
  5386  01504C  0C20               	retlw	32
  5387  01504E                     l2484:
  5388                           
  5389                           ;USB_Wrap.c: 54: if( UCONbits.SUSPND== 1 )
  5390  01504E  B265               	btfsc	3941,1,c	;volatile
  5391                           
  5392                           ;USB_Wrap.c: 55: return;
  5393  015050  0012               	return	
  5394                           
  5395                           ;USB_Wrap.c: 58: USB_Tasks();
  5396  015052  EF1E  F0A3         	goto	_USB_Tasks	;wreg free
  5397  015056                     __end_of_USB_Poll:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           intcon	equ	0xFF2
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           postdec1	equ	0xFE5
  5407                           fsr1h	equ	0xFE2
  5408                           fsr1l	equ	0xFE1
  5409                           indf2	equ	0xFDF
  5410                           postinc2	equ	0xFDE
  5411                           postdec2	equ	0xFDD
  5412                           fsr2h	equ	0xFDA
  5413                           fsr2l	equ	0xFD9
  5414                           status	equ	0xFD8
  5415                           
  5416 ;; *************** function _USB_Tasks *****************
  5417 ;; Defined at:
  5418 ;;		line 61 in file "USB_Wrap.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  Recieved        1   32[BANK0 ] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  1    wreg      void 
  5425 ;; Registers used:
  5426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;Total ram usage:        1 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:   21
  5439 ;; This function calls:
  5440 ;;		_CDCTxService
  5441 ;;		_Event_USBRecieve
  5442 ;;		_getsUSBUSART
  5443 ;;		_putUSBUSART
  5444 ;; This function is called by:
  5445 ;;		_USB_Poll
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text15
  5450  01463C                     __ptext15:
  5451                           	opt stack 0
  5452  01463C                     _USB_Tasks:
  5453                           	opt stack 7
  5454                           
  5455                           ;USB_Wrap.c: 63: UINT8 Recieved;
  5456                           ;USB_Wrap.c: 67: if( (cdc_trf_state == 0) == 1)
  5457                           
  5458                           ;incstack = 0
  5459  01463C  0100               	movlb	0	; () banked
  5460  01463E  519B               	movf	_cdc_trf_state& (0+255),w,b
  5461  014640  E002 EFD1  F089    	bnz	_CDCTxService
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;USB_Wrap.c: 68: {
  5465                           ;USB_Wrap.c: 70: Recieved = getsUSBUSART(USBInputBuffer, 64);
  5466  014646  0E28               	movlw	low _USBInputBuffer
  5467  014648  6FB9               	movwf	getsUSBUSART@buffer& (0+255),b
  5468  01464A  0E02               	movlw	high _USBInputBuffer
  5469  01464C  6FBA               	movwf	(getsUSBUSART@buffer+1)& (0+255),b
  5470  01464E  0E40               	movlw	64
  5471  014650  6FBB               	movwf	getsUSBUSART@len& (0+255),b
  5472  014652  ECA0  F098         	call	_getsUSBUSART	;wreg free
  5473  014656  0100               	movlb	0	; () banked
  5474  014658  6FCE               	movwf	USB_Tasks@Recieved& (0+255),b
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;USB_Wrap.c: 71: if (Recieved > 0)
  5478  01465A  51CE               	movf	USB_Tasks@Recieved& (0+255),w,b
  5479  01465C  E102 EFD1  F089    	bz	_CDCTxService
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;USB_Wrap.c: 72: {
  5483                           ;USB_Wrap.c: 74: putUSBUSART(USBInputBuffer, Recieved);
  5484  014662  0E28               	movlw	low _USBInputBuffer
  5485  014664  6FAE               	movwf	putUSBUSART@data& (0+255),b
  5486  014666  0E02               	movlw	high _USBInputBuffer
  5487  014668  6FAF               	movwf	(putUSBUSART@data+1)& (0+255),b
  5488  01466A  C0CE  F0B0         	movff	USB_Tasks@Recieved,putUSBUSART@length
  5489  01466E  ECA3  F0A7         	call	_putUSBUSART	;wreg free
  5490                           
  5491                           ;USB_Wrap.c: 78: Event_USBRecieve(Recieved);
  5492  014672  0100               	movlb	0	; () banked
  5493  014674  51CE               	movf	USB_Tasks@Recieved& (0+255),w,b
  5494  014676  EC1C  F0A6         	call	_Event_USBRecieve
  5495  01467A  EFD1  F089         	goto	_CDCTxService
  5496  01467E                     __end_of_USB_Tasks:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           intcon	equ	0xFF2
  5503                           postinc0	equ	0xFEE
  5504                           wreg	equ	0xFE8
  5505                           postdec1	equ	0xFE5
  5506                           fsr1h	equ	0xFE2
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _getsUSBUSART *****************
  5516 ;; Defined at:
  5517 ;;		line 486 in file "Library/USB/src/usb_device_cdc.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  buffer          2   11[BANK0 ] PTR unsigned char 
  5520 ;;		 -> USBInputBuffer(64), 
  5521 ;;  len             1   13[BANK0 ] unsigned char 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      unsigned char 
  5526 ;; Registers used:
  5527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5533 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;Total ram usage:        4 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:   15
  5540 ;; This function calls:
  5541 ;;		_USBTransferOnePacket
  5542 ;; This function is called by:
  5543 ;;		_USB_Tasks
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text16
  5548  013140                     __ptext16:
  5549                           	opt stack 0
  5550  013140                     _getsUSBUSART:
  5551                           	opt stack 12
  5552                           
  5553                           ;usb_device_cdc.c: 488: cdc_rx_len = 0;
  5554                           
  5555                           ;incstack = 0
  5556  013140  0100               	movlb	0	; () banked
  5557  013142  6B9A               	clrf	_cdc_rx_len& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;usb_device_cdc.c: 490: if(!((CDCDataOutHandle != 0x0000) && ((*(volatile uint8_t*)CDCDa
      +                          taOutHandle & 0x80) != 0x00)))
  5561  013144  5185               	movf	_CDCDataOutHandle& (0+255),w,b
  5562  013146  1186               	iorwf	(_CDCDataOutHandle+1)& (0+255),w,b
  5563  013148  E006               	bz	l10729
  5564                           
  5565                           ; BSR set to: 0
  5566  01314A  C085  FFD9         	movff	_CDCDataOutHandle,fsr2l
  5567  01314E  C086  FFDA         	movff	_CDCDataOutHandle+1,fsr2h
  5568  013152  BEDF               	btfsc	indf2,7,c
  5569  013154  D03E               	goto	l10743
  5570  013156                     l10729:
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;usb_device_cdc.c: 491: {
  5574                           ;usb_device_cdc.c: 496: if(len > (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT))
  5575  013156  0100               	movlb	0	; () banked
  5576  013158  EE20 F001          	lfsr	2,1
  5577  01315C  5185               	movf	_CDCDataOutHandle& (0+255),w,b
  5578  01315E  26D9               	addwf	fsr2l,f,c
  5579  013160  5186               	movf	(_CDCDataOutHandle+1)& (0+255),w,b
  5580  013162  22DA               	addwfc	fsr2h,f,c
  5581  013164  51BB               	movf	getsUSBUSART@len& (0+255),w,b
  5582  013166  5CDE               	subwf	postinc2,w,c
  5583  013168  E208               	bc	l10733
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;usb_device_cdc.c: 497: len = (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT);
  5587  01316A  EE20 F001          	lfsr	2,1
  5588  01316E  5185               	movf	_CDCDataOutHandle& (0+255),w,b
  5589  013170  26D9               	addwf	fsr2l,f,c
  5590  013172  5186               	movf	(_CDCDataOutHandle+1)& (0+255),w,b
  5591  013174  22DA               	addwfc	fsr2h,f,c
  5592  013176  50DF               	movf	indf2,w,c
  5593  013178  6FBB               	movwf	getsUSBUSART@len& (0+255),b
  5594  01317A                     l10733:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;usb_device_cdc.c: 502: for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)
  5598  01317A  0100               	movlb	0	; () banked
  5599  01317C  6B9A               	clrf	_cdc_rx_len& (0+255),b
  5600  01317E  D014               	goto	l10739
  5601  013180                     l10735:
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;usb_device_cdc.c: 503: buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];
  5605  013180  0100               	movlb	0	; () banked
  5606  013182  519A               	movf	_cdc_rx_len& (0+255),w,b
  5607  013184  0D01               	mullw	1
  5608  013186  0E68               	movlw	low _cdc_data_rx
  5609  013188  24F3               	addwf	prodl,w,c
  5610  01318A  6ED9               	movwf	fsr2l,c
  5611  01318C  0E02               	movlw	high _cdc_data_rx
  5612  01318E  20F4               	addwfc	prodh,w,c
  5613  013190  6EDA               	movwf	fsr2h,c
  5614  013192  519A               	movf	_cdc_rx_len& (0+255),w,b
  5615  013194  0D01               	mullw	1
  5616  013196  50F3               	movf	prodl,w,c
  5617  013198  25B9               	addwf	getsUSBUSART@buffer& (0+255),w,b
  5618  01319A  6EE1               	movwf	fsr1l,c
  5619  01319C  50F4               	movf	prodh,w,c
  5620  01319E  21BA               	addwfc	(getsUSBUSART@buffer+1)& (0+255),w,b
  5621  0131A0  6EE2               	movwf	fsr1h,c
  5622  0131A2  CFDF FFE7          	movff	indf2,indf1
  5623                           
  5624                           ; BSR set to: 0
  5625  0131A6  2B9A               	incf	_cdc_rx_len& (0+255),f,b
  5626  0131A8                     l10739:
  5627                           
  5628                           ; BSR set to: 0
  5629  0131A8  0100               	movlb	0	; () banked
  5630  0131AA  51BB               	movf	getsUSBUSART@len& (0+255),w,b
  5631  0131AC  5D9A               	subwf	_cdc_rx_len& (0+255),w,b
  5632  0131AE  E201               	bc	l10741
  5633  0131B0  D7E7               	goto	l10735
  5634  0131B2                     l10741:
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;usb_device_cdc.c: 509: CDCDataOutHandle = USBTransferOnePacket(2,0,(uint8_t*)&cdc_data_
      +                          rx,sizeof(cdc_data_rx));
  5638  0131B2  0E00               	movlw	0
  5639  0131B4  0100               	movlb	0	; () banked
  5640  0131B6  6FAE               	movwf	USBTransferOnePacket@dir& (0+255),b
  5641  0131B8  0E68               	movlw	low _cdc_data_rx
  5642  0131BA  6FAF               	movwf	USBTransferOnePacket@data& (0+255),b
  5643  0131BC  0E02               	movlw	high _cdc_data_rx
  5644  0131BE  6FB0               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
  5645  0131C0  0E40               	movlw	64
  5646  0131C2  6FB1               	movwf	USBTransferOnePacket@len& (0+255),b
  5647  0131C4  0E02               	movlw	2
  5648  0131C6  ECB5  F090         	call	_USBTransferOnePacket
  5649  0131CA  C0AE  F085         	movff	?_USBTransferOnePacket,_CDCDataOutHandle
  5650  0131CE  C0AF  F086         	movff	?_USBTransferOnePacket+1,_CDCDataOutHandle+1
  5651  0131D2                     l10743:
  5652                           
  5653                           ;usb_device_cdc.c: 511: }
  5654                           ;usb_device_cdc.c: 513: return cdc_rx_len;
  5655  0131D2  0100               	movlb	0	; () banked
  5656  0131D4  519A               	movf	_cdc_rx_len& (0+255),w,b
  5657  0131D6  0012               	return	
  5658  0131D8                     __end_of_getsUSBUSART:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon	equ	0xFF2
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           indf1	equ	0xFE7
  5670                           postdec1	equ	0xFE5
  5671                           fsr1h	equ	0xFE2
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _Event_USBRecieve *****************
  5681 ;; Defined at:
  5682 ;;		line 9 in file "Events.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  pLength         1    wreg     unsigned char 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  pLength         1   31[BANK0 ] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        1 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:   20
  5703 ;; This function calls:
  5704 ;;		_printf
  5705 ;; This function is called by:
  5706 ;;		_USB_Tasks
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text17
  5711  014C38                     __ptext17:
  5712                           	opt stack 0
  5713  014C38                     _Event_USBRecieve:
  5714                           	opt stack 7
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;incstack = 0
  5718                           ;Event_USBRecieve@pLength stored from wreg
  5719  014C38  0100               	movlb	0	; () banked
  5720  014C3A  6FCD               	movwf	Event_USBRecieve@pLength& (0+255),b
  5721                           
  5722                           ;Events.c: 36: USBInputBuffer[pLength] = '\0';
  5723  014C3C  51CD               	movf	Event_USBRecieve@pLength& (0+255),w,b
  5724  014C3E  0D01               	mullw	1
  5725  014C40  0E28               	movlw	low _USBInputBuffer
  5726  014C42  24F3               	addwf	prodl,w,c
  5727  014C44  6ED9               	movwf	fsr2l,c
  5728  014C46  0E02               	movlw	high _USBInputBuffer
  5729  014C48  20F4               	addwfc	prodh,w,c
  5730  014C4A  6EDA               	movwf	fsr2h,c
  5731  014C4C  0E00               	movlw	0
  5732  014C4E  6EDF               	movwf	indf2,c
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;Events.c: 38: printf("%s", (str)USBInputBuffer);
  5736  014C50  0EFC               	movlw	low STR_1
  5737  014C52  6FC3               	movwf	printf@f& (0+255),b
  5738  014C54  0EFF               	movlw	high STR_1
  5739  014C56  6FC4               	movwf	(printf@f+1)& (0+255),b
  5740  014C58  0E28               	movlw	low _USBInputBuffer
  5741  014C5A  6FC5               	movwf	(?_printf+2)& (0+255),b
  5742  014C5C  0E02               	movlw	high _USBInputBuffer
  5743  014C5E  6FC6               	movwf	(?_printf+3)& (0+255),b
  5744  014C60  EF21  F092         	goto	_printf	;wreg free
  5745  014C64                     __end_of_Event_USBRecieve:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           postinc0	equ	0xFEE
  5755                           wreg	equ	0xFE8
  5756                           indf1	equ	0xFE7
  5757                           postdec1	equ	0xFE5
  5758                           fsr1h	equ	0xFE2
  5759                           fsr1l	equ	0xFE1
  5760                           indf2	equ	0xFDF
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _printf *****************
  5768 ;; Defined at:
  5769 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  5772 ;;		 -> STR_1(3), 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  tmpval          4    0        struct .
  5775 ;;  cp              2   29[BANK0 ] PTR const unsigned char 
  5776 ;;		 -> STR_10(7), USBInputBuffer(64), 
  5777 ;;  ap              2   26[BANK0 ] PTR void [1]
  5778 ;;		 -> ?_printf(2), 
  5779 ;;  len             2    0        unsigned int 
  5780 ;;  val             2    0        unsigned int 
  5781 ;;  c               1   28[BANK0 ] char 
  5782 ;;  flag            1   25[BANK0 ] unsigned char 
  5783 ;;  prec            1    0        char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2   21[BANK0 ] int 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;Total ram usage:       10 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:   19
  5800 ;; This function calls:
  5801 ;;		_putch
  5802 ;; This function is called by:
  5803 ;;		_Event_USBRecieve
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text18
  5808  012442                     __ptext18:
  5809                           	opt stack 0
  5810  012442                     _printf:
  5811                           	opt stack 7
  5812                           
  5813                           ;doprnt.c: 466: va_list ap;
  5814                           ;doprnt.c: 499: signed char c;
  5815                           ;doprnt.c: 506: signed char prec;
  5816                           ;doprnt.c: 508: unsigned char flag;
  5817                           ;doprnt.c: 523: union {
  5818                           ;doprnt.c: 524: unsigned long vd;
  5819                           ;doprnt.c: 525: double integ;
  5820                           ;doprnt.c: 526: } tmpval;
  5821                           ;doprnt.c: 528: unsigned int val;
  5822                           ;doprnt.c: 529: unsigned len;
  5823                           ;doprnt.c: 530: const char * cp;
  5824                           ;doprnt.c: 533: *ap = __va_start();
  5825                           
  5826                           ;incstack = 0
  5827  012442  0EC5               	movlw	low (?_printf+2)
  5828  012444  0100               	movlb	0	; () banked
  5829  012446  6FC8               	movwf	printf@ap& (0+255),b
  5830  012448  0E00               	movlw	high (?_printf+2)
  5831  01244A  6FC9               	movwf	(printf@ap+1)& (0+255),b
  5832                           
  5833                           ;doprnt.c: 536: while(c = *f++) {
  5834  01244C  D05B               	goto	l10623
  5835  01244E                     l10599:
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;doprnt.c: 538: if(c != '%')
  5839  01244E  0E25               	movlw	37
  5840  012450  0100               	movlb	0	; () banked
  5841  012452  19CA               	xorwf	printf@c& (0+255),w,b
  5842  012454  E004               	bz	l10603
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;doprnt.c: 540: {
  5846                           ;doprnt.c: 541: (putch(c) );
  5847  012456  51CA               	movf	printf@c& (0+255),w,b
  5848  012458  EC25  F089         	call	_putch
  5849                           
  5850                           ;doprnt.c: 542: continue;
  5851  01245C  D053               	goto	l10623
  5852  01245E                     l10603:
  5853                           
  5854                           ;doprnt.c: 543: }
  5855                           ;doprnt.c: 548: flag = 0;
  5856  01245E  0100               	movlb	0	; () banked
  5857  012460  6BC7               	clrf	printf@flag& (0+255),b
  5858                           
  5859                           ;doprnt.c: 635: switch(c = *f++) {
  5860  012462  D03F               	goto	l10621
  5861  012464                     l10605:
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5865  012464  C0C8  FFD9         	movff	printf@ap,fsr2l
  5866  012468  C0C9  FFDA         	movff	printf@ap+1,fsr2h
  5867  01246C  CFDE F0CB          	movff	postinc2,printf@cp
  5868  012470  CFDD F0CC          	movff	postdec2,printf@cp+1
  5869                           
  5870                           ; BSR set to: 0
  5871  012474  0E02               	movlw	2
  5872  012476  0100               	movlb	0	; () banked
  5873  012478  27C8               	addwf	printf@ap& (0+255),f,b
  5874  01247A  0E00               	movlw	0
  5875  01247C  23C9               	addwfc	(printf@ap+1)& (0+255),f,b
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;doprnt.c: 740: if(!cp)
  5879  01247E  51CB               	movf	printf@cp& (0+255),w,b
  5880  012480  11CC               	iorwf	(printf@cp+1)& (0+255),w,b
  5881  012482  E11B               	bnz	l10617
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;doprnt.c: 741: cp = "(null)";
  5885  012484  0ED7               	movlw	low STR_10
  5886  012486  6FCB               	movwf	printf@cp& (0+255),b
  5887  012488  0EFF               	movlw	high STR_10
  5888  01248A  6FCC               	movwf	(printf@cp+1)& (0+255),b
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;doprnt.c: 777: while(*cp)
  5892  01248C  D016               	goto	l10617
  5893  01248E                     l10613:
  5894                           
  5895                           ;doprnt.c: 778: (putch(*cp++) );
  5896  01248E  C0CB  FFF6         	movff	printf@cp,tblptrl
  5897  012492  C0CC  FFF7         	movff	printf@cp+1,tblptrh
  5898  012496  0E00               	movlw	low (__mediumconst shr (0+16))
  5899  012498  6EF8               	movwf	tblptru,c
  5900  01249A  0E0F               	movlw	(high __ramtop+-1)
  5901  01249C  64F7               	cpfsgt	tblptrh,c
  5902  01249E  D003               	bra	u7327
  5903  0124A0  0008               	tblrd		*
  5904  0124A2  50F5               	movf	tablat,w,c
  5905  0124A4  D005               	bra	u7320
  5906  0124A6                     u7327:
  5907  0124A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  5908  0124AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  5909  0124AE  50EF               	movf	indf0,w,c
  5910  0124B0                     u7320:
  5911  0124B0  EC25  F089         	call	_putch
  5912  0124B4  0100               	movlb	0	; () banked
  5913  0124B6  4BCB               	infsnz	printf@cp& (0+255),f,b
  5914  0124B8  2BCC               	incf	(printf@cp+1)& (0+255),f,b
  5915  0124BA                     l10617:
  5916                           
  5917                           ; BSR set to: 0
  5918  0124BA  C0CB  FFF6         	movff	printf@cp,tblptrl
  5919  0124BE  C0CC  FFF7         	movff	printf@cp+1,tblptrh
  5920  0124C2  0E00               	movlw	low (__mediumconst shr (0+16))
  5921  0124C4  6EF8               	movwf	tblptru,c
  5922  0124C6  0E0F               	movlw	(high __ramtop+-1)
  5923  0124C8  64F7               	cpfsgt	tblptrh,c
  5924  0124CA  D003               	bra	u7337
  5925  0124CC  0008               	tblrd		*
  5926  0124CE  50F5               	movf	tablat,w,c
  5927  0124D0  D005               	bra	u7330
  5928  0124D2                     u7337:
  5929  0124D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5930  0124D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5931  0124DA  50EF               	movf	indf0,w,c
  5932  0124DC                     u7330:
  5933  0124DC  0900               	iorlw	0
  5934  0124DE  E012               	bz	l10623
  5935  0124E0  D7D6               	goto	l10613
  5936  0124E2                     l10621:
  5937  0124E2  C0C3  FFF6         	movff	printf@f,tblptrl
  5938  0124E6  C0C4  FFF7         	movff	printf@f+1,tblptrh
  5939  0124EA  0100               	movlb	0	; () banked
  5940  0124EC  4BC3               	infsnz	printf@f& (0+255),f,b
  5941  0124EE  2BC4               	incf	(printf@f+1)& (0+255),f,b
  5942  0124F0                     	if	0	;tblptru may be non-zero
  5943  0124F0                     	endif
  5944  0124F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5945  0124F0  0E00               	movlw	low (__mediumconst shr (0+16))
  5946  0124F2  6EF8               	movwf	tblptru,c
  5947  0124F4                     	endif
  5948  0124F4  0008               	tblrd		*
  5949  0124F6  CFF5 F0CA          	movff	tablat,printf@c
  5950  0124FA  51CA               	movf	printf@c& (0+255),w,b
  5951                           
  5952                           ; Switch size 1, requested type "space"
  5953                           ; Number of cases is 2, Range of values is 0 to 115
  5954                           ; switch strategies available:
  5955                           ; Name         Instructions Cycles
  5956                           ; simple_byte            7     4 (average)
  5957                           ;	Chosen strategy is simple_byte
  5958  0124FC  B4D8               	btfsc	status,2,c
  5959  0124FE  0012               	return	
  5960  012500  0A73               	xorlw	115	; case 115
  5961  012502  E0B0               	bz	l10605
  5962  012504                     l10623:
  5963  012504  C0C3  FFF6         	movff	printf@f,tblptrl
  5964  012508  C0C4  FFF7         	movff	printf@f+1,tblptrh
  5965  01250C  0100               	movlb	0	; () banked
  5966  01250E  4BC3               	infsnz	printf@f& (0+255),f,b
  5967  012510  2BC4               	incf	(printf@f+1)& (0+255),f,b
  5968  012512                     	if	0	;tblptru may be non-zero
  5969  012512                     	endif
  5970  012512                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5971  012512  0E00               	movlw	low (__mediumconst shr (0+16))
  5972  012514  6EF8               	movwf	tblptru,c
  5973  012516                     	endif
  5974  012516  0008               	tblrd		*
  5975  012518  CFF5 F0CA          	movff	tablat,printf@c
  5976  01251C  51CA               	movf	printf@c& (0+255),w,b
  5977  01251E  E197               	bnz	l10599
  5978                           
  5979                           ; BSR set to: 0
  5980  012520  0012               	return	
  5981  012522                     __end_of_printf:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           indf0	equ	0xFEF
  5991                           postinc0	equ	0xFEE
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postdec1	equ	0xFE5
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _putch *****************
  6007 ;; Defined at:
  6008 ;;		line 440 in file "Library/Console.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  c               1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  c               1   20[BANK0 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:   18
  6029 ;; This function calls:
  6030 ;;		_Console_PrintChar
  6031 ;; This function is called by:
  6032 ;;		_printf
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text19
  6037  01124A                     __ptext19:
  6038                           	opt stack 0
  6039  01124A                     _putch:
  6040                           	opt stack 7
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;incstack = 0
  6044                           ;putch@c stored from wreg
  6045  01124A  0100               	movlb	0	; () banked
  6046  01124C  6FC2               	movwf	putch@c& (0+255),b
  6047                           
  6048                           ;Console.c: 442: Console_PrintChar(c);
  6049  01124E  51C2               	movf	putch@c& (0+255),w,b
  6050  011250                     i1L__ptext20:
  6051                           	opt stack 0
  6052  011250                     i1L_Console_PrintChar:
  6053                           	opt stack 7
  6054                           
  6055                           ;incstack = 0
  6056                           ;Console_PrintChar@pInput stored from wreg
  6057  011250  0100               	movlb	0	; () banked
  6058  011252  6FC1               	movwf	Console_PrintChar@pInput& (0+255),b
  6059  011254                     i1Ll9535:
  6060                           	opt stack 0
  6061  011254  D08F               	goto	i1Ll9577
  6062  011256                     i1Ll1682:
  6063                           	opt stack 0
  6064  011256  D000               	goto	i1Ll9537
  6065  011258                     i1Ll1683:
  6066                           	opt stack 0
  6067  011258                     i1Ll9537:
  6068                           	opt stack 7
  6069                           
  6070                           ;Console.c: 315: case '\n':
  6071                           ;Console.c: 316: Console_NewLine();
  6072  011258  EC5A  F09D         	call	_Console_NewLine	;wreg free
  6073  01125C                     i1Ll9539:
  6074                           	opt stack 0
  6075  01125C  0012               	return	
  6076  01125E                     i1Ll1685:
  6077                           	opt stack 0
  6078  01125E                     i1Ll9541:
  6079                           	opt stack 7
  6080                           
  6081                           ;Console.c: 319: Console_Backspace();
  6082  01125E  EC71  F0A2         	call	_Console_Backspace	;wreg free
  6083  011262                     i1Ll9543:
  6084                           	opt stack 0
  6085  011262  0012               	return	
  6086  011264                     i1Ll1686:
  6087                           	opt stack 0
  6088  011264                     i1Ll9545:
  6089                           	opt stack 7
  6090                           
  6091                           ;Console.c: 322: Console_FormFeed();
  6092  011264  EC04  F09E         	call	_Console_FormFeed	;wreg free
  6093  011268                     i1Ll9547:
  6094                           	opt stack 0
  6095  011268  0012               	return	
  6096  01126A                     i1Ll1687:
  6097                           	opt stack 0
  6098  01126A                     i1Ll9549:
  6099                           	opt stack 7
  6100                           
  6101                           ;Console.c: 325: Console_Tab();
  6102  01126A  ECC6  F099         	call	_Console_Tab	;wreg free
  6103  01126E                     i1Ll9551:
  6104                           	opt stack 0
  6105  01126E  0012               	return	
  6106  011270                     i1Ll1688:
  6107                           	opt stack 0
  6108  011270                     i1Ll9553:
  6109                           	opt stack 7
  6110                           
  6111                           ;Console.c: 328: Console_IncrementCursor();
  6112  011270  EC6D  F0A1         	call	_Console_IncrementCursor	;wreg free
  6113  011274                     i1Ll9555:
  6114                           	opt stack 0
  6115  011274  0012               	return	
  6116  011276                     i1Ll1689:
  6117                           	opt stack 0
  6118  011276  D000               	goto	i1Ll9557
  6119  011278                     i1Ll1690:
  6120                           	opt stack 0
  6121  011278                     i1Ll9557:
  6122                           	opt stack 7
  6123                           
  6124                           ;Console.c: 335: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6125  011278  C0C1  F0BE         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6126  01127C  0E7F               	movlw	127
  6127  01127E  0100               	movlb	0	; () banked
  6128  011280  17BE               	andwf	??_Console_PrintChar& (0+255),f,b
  6129  011282  51A2               	movf	_lBufferY& (0+255),w,b
  6130  011284  0D14               	mullw	20
  6131  011286  0E11               	movlw	low _lBuffer
  6132  011288  6FBF               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6133  01128A  0E0C               	movlw	high _lBuffer
  6134  01128C  6FC0               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6135  01128E  50F3               	movf	prodl,w,c
  6136  011290  27BF               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6137  011292  50F4               	movf	prodh,w,c
  6138  011294  23C0               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6139  011296  51A1               	movf	_lBufferX& (0+255),w,b
  6140  011298  0D01               	mullw	1
  6141  01129A  50F3               	movf	prodl,w,c
  6142  01129C  25BF               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6143  01129E  6ED9               	movwf	fsr2l,c
  6144  0112A0  50F4               	movf	prodh,w,c
  6145  0112A2  21C0               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6146  0112A4  6EDA               	movwf	fsr2h,c
  6147  0112A6  50DF               	movf	indf2,w,c
  6148  0112A8  0B7F               	andlw	127
  6149  0112AA  19BE               	xorwf	??_Console_PrintChar& (0+255),w,b
  6150  0112AC  B4D8               	btfsc	status,2,c
  6151  0112AE                     i1Lu6081:
  6152                           	opt stack 0
  6153  0112AE  D027               	goto	i1Ll9565
  6154  0112B0                     i1Lu6080:
  6155                           	opt stack 0
  6156  0112B0                     i1Ll9559:
  6157                           	opt stack 7
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;Console.c: 336: {
  6161                           ;Console.c: 337: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6162  0112B0  0E01               	movlw	1
  6163  0112B2  0100               	movlb	0	; () banked
  6164  0112B4  6FFC               	movwf	_change& (0+255),b
  6165  0112B6                     i1Ll9561:
  6166                           	opt stack 7
  6167                           
  6168                           ; BSR set to: 0
  6169  0112B6  0100               	movlb	0	; () banked
  6170  0112B8  51A2               	movf	_lBufferY& (0+255),w,b
  6171  0112BA  0D14               	mullw	20
  6172  0112BC  0E11               	movlw	low _lBuffer
  6173  0112BE  6FBE               	movwf	??_Console_PrintChar& (0+255),b
  6174  0112C0  0E0C               	movlw	high _lBuffer
  6175  0112C2  6FBF               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6176  0112C4  50F3               	movf	prodl,w,c
  6177  0112C6  27BE               	addwf	??_Console_PrintChar& (0+255),f,b
  6178  0112C8  50F4               	movf	prodh,w,c
  6179  0112CA  23BF               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6180  0112CC  51A1               	movf	_lBufferX& (0+255),w,b
  6181  0112CE  0D01               	mullw	1
  6182  0112D0  50F3               	movf	prodl,w,c
  6183  0112D2  25BE               	addwf	??_Console_PrintChar& (0+255),w,b
  6184  0112D4  6ED9               	movwf	fsr2l,c
  6185  0112D6  50F4               	movf	prodh,w,c
  6186  0112D8  21BF               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6187  0112DA  6EDA               	movwf	fsr2h,c
  6188  0112DC  51C1               	movf	Console_PrintChar@pInput& (0+255),w,b
  6189  0112DE  0980               	iorlw	128
  6190  0112E0  6EDF               	movwf	indf2,c
  6191  0112E2                     i1Ll9563:
  6192                           	opt stack 7
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;Console.c: 338: lCBuffer[lBufferY] = gForecolour;
  6196  0112E2  0100               	movlb	0	; () banked
  6197  0112E4  51A2               	movf	_lBufferY& (0+255),w,b
  6198  0112E6  0D02               	mullw	2
  6199  0112E8  0E00               	movlw	low _lCBuffer
  6200  0112EA  24F3               	addwf	prodl,w,c
  6201  0112EC  6ED9               	movwf	fsr2l,c
  6202  0112EE  0E02               	movlw	high _lCBuffer
  6203  0112F0  20F4               	addwfc	prodh,w,c
  6204  0112F2  6EDA               	movwf	fsr2h,c
  6205  0112F4  C1F6  FFDE         	movff	_gForecolour,postinc2
  6206  0112F8  C1F7  FFDD         	movff	_gForecolour+1,postdec2
  6207  0112FC  D000               	goto	i1Ll9565
  6208  0112FE                     i1Ll1691:
  6209                           	opt stack 0
  6210  0112FE                     i1Ll9565:
  6211                           	opt stack 7
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;Console.c: 339: }
  6215                           ;Console.c: 353: if(Console_IncrementCursor())
  6216  0112FE  EC6D  F0A1         	call	_Console_IncrementCursor	;wreg free
  6217  011302  0900               	iorlw	0
  6218  011304  B4D8               	btfsc	status,2,c
  6219  011306                     i1Lu6091:
  6220                           	opt stack 0
  6221  011306  0012               	return	
  6222  011308                     i1Lu6090:
  6223                           	opt stack 0
  6224  011308                     i1Ll9567:
  6225                           	opt stack 7
  6226                           
  6227                           ;Console.c: 354: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6228  011308  C0C1  F0BE         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6229  01130C  0E7F               	movlw	127
  6230  01130E  0100               	movlb	0	; () banked
  6231  011310  17BE               	andwf	??_Console_PrintChar& (0+255),f,b
  6232  011312  51A2               	movf	_lBufferY& (0+255),w,b
  6233  011314  0D14               	mullw	20
  6234  011316  0E11               	movlw	low _lBuffer
  6235  011318  6FBF               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6236  01131A  0E0C               	movlw	high _lBuffer
  6237  01131C  6FC0               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6238  01131E  50F3               	movf	prodl,w,c
  6239  011320  27BF               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6240  011322  50F4               	movf	prodh,w,c
  6241  011324  23C0               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6242  011326  51A1               	movf	_lBufferX& (0+255),w,b
  6243  011328  0D01               	mullw	1
  6244  01132A  50F3               	movf	prodl,w,c
  6245  01132C  25BF               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6246  01132E  6ED9               	movwf	fsr2l,c
  6247  011330  50F4               	movf	prodh,w,c
  6248  011332  21C0               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6249  011334  6EDA               	movwf	fsr2h,c
  6250  011336  50DF               	movf	indf2,w,c
  6251  011338  0B7F               	andlw	127
  6252  01133A  19BE               	xorwf	??_Console_PrintChar& (0+255),w,b
  6253  01133C  B4D8               	btfsc	status,2,c
  6254  01133E                     i1Lu6101:
  6255                           	opt stack 0
  6256  01133E  0012               	return	
  6257  011340                     i1Lu6100:
  6258                           	opt stack 0
  6259  011340                     i1Ll9569:
  6260                           	opt stack 7
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;Console.c: 355: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6264  011340  0E01               	movlw	1
  6265  011342  0100               	movlb	0	; () banked
  6266  011344  6FFC               	movwf	_change& (0+255),b
  6267  011346                     i1Ll9571:
  6268                           	opt stack 7
  6269                           
  6270                           ; BSR set to: 0
  6271  011346  0100               	movlb	0	; () banked
  6272  011348  51A2               	movf	_lBufferY& (0+255),w,b
  6273  01134A  0D14               	mullw	20
  6274  01134C  0E11               	movlw	low _lBuffer
  6275  01134E  6FBE               	movwf	??_Console_PrintChar& (0+255),b
  6276  011350  0E0C               	movlw	high _lBuffer
  6277  011352  6FBF               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6278  011354  50F3               	movf	prodl,w,c
  6279  011356  27BE               	addwf	??_Console_PrintChar& (0+255),f,b
  6280  011358  50F4               	movf	prodh,w,c
  6281  01135A  23BF               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6282  01135C  51A1               	movf	_lBufferX& (0+255),w,b
  6283  01135E  0D01               	mullw	1
  6284  011360  50F3               	movf	prodl,w,c
  6285  011362  25BE               	addwf	??_Console_PrintChar& (0+255),w,b
  6286  011364  6ED9               	movwf	fsr2l,c
  6287  011366  50F4               	movf	prodh,w,c
  6288  011368  21BF               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6289  01136A  6EDA               	movwf	fsr2h,c
  6290  01136C  51C1               	movf	Console_PrintChar@pInput& (0+255),w,b
  6291  01136E  0980               	iorlw	128
  6292  011370  6EDF               	movwf	indf2,c
  6293  011372                     i1Ll1693:
  6294                           	opt stack 0
  6295  011372                     i1Ll1692:
  6296                           	opt stack 0
  6297  011372                     i1Ll9573:
  6298                           	opt stack 0
  6299  011372                     i1Ll9575:
  6300                           	opt stack 0
  6301  011372  0012               	return	
  6302  011374                     i1Ll1681:
  6303                           	opt stack 0
  6304  011374                     i1Ll9577:
  6305                           	opt stack 7
  6306  011374  0100               	movlb	0	; () banked
  6307  011376  51C1               	movf	Console_PrintChar@pInput& (0+255),w,b
  6308                           
  6309                           ; Switch size 1, requested type "space"
  6310                           ; Number of cases is 7, Range of values is 7 to 32
  6311                           ; switch strategies available:
  6312                           ; Name         Instructions Cycles
  6313                           ; simple_byte           22    12 (average)
  6314                           ;	Chosen strategy is simple_byte
  6315  011378  0A07               	xorlw	7	; case 7
  6316  01137A  E101 D779          	bz	i1Ll9553
  6317  01137E  0A0F               	xorlw	15	; case 8
  6318  011380  E101 D76D          	bz	i1Ll9541
  6319  011384  0A01               	xorlw	1	; case 9
  6320  011386  E101 D770          	bz	i1Ll9549
  6321  01138A  0A03               	xorlw	3	; case 10
  6322  01138C  E101 D764          	bz	i1Ll9537
  6323  011390  0A06               	xorlw	6	; case 12
  6324  011392  E101 D767          	bz	i1Ll9545
  6325  011396  0A01               	xorlw	1	; case 13
  6326  011398  E101 D75E          	bz	i1Ll9537
  6327  01139C  0A2D               	xorlw	45	; case 32
  6328  01139E  D76C               	goto	i1Ll9557
  6329  0113A0                     i1Ll1694:
  6330                           	opt stack 0
  6331  0113A0                     i1Ll1684:
  6332                           	opt stack 0
  6333  0113A0  0012               	return	
  6334  0113A2                     __end_of_putch:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           indf0	equ	0xFEF
  6344                           postinc0	equ	0xFEE
  6345                           fsr0h	equ	0xFEA
  6346                           fsr0l	equ	0xFE9
  6347                           wreg	equ	0xFE8
  6348                           indf1	equ	0xFE7
  6349                           postdec1	equ	0xFE5
  6350                           fsr1h	equ	0xFE2
  6351                           fsr1l	equ	0xFE1
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           fsr2h	equ	0xFDA
  6356                           fsr2l	equ	0xFD9
  6357                           status	equ	0xFD8
  6358                           
  6359 ;; *************** function _Console_PrintChar *****************
  6360 ;; Defined at:
  6361 ;;		line 310 in file "Library/Console.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  pInput          1    wreg     unsigned char 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  pInput          1   19[BANK0 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;Total ram usage:        4 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:   17
  6382 ;; This function calls:
  6383 ;;		_Console_Backspace
  6384 ;;		_Console_FormFeed
  6385 ;;		_Console_IncrementCursor
  6386 ;;		_Console_NewLine
  6387 ;;		_Console_Tab
  6388 ;; This function is called by:
  6389 ;;		_putch
  6390 ;;		_Console_PrintString
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text20
  6395  000000                     __ptext20:
  6396                           	opt stack 0
  6397  000000                     _Console_PrintChar:
  6398                           	opt stack 0
  6399  000000                     __end_of_Console_PrintChar:
  6400                           	opt stack 0
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodh	equ	0xFF4
  6406                           prodl	equ	0xFF3
  6407                           intcon	equ	0xFF2
  6408                           indf0	equ	0xFEF
  6409                           postinc0	equ	0xFEE
  6410                           fsr0h	equ	0xFEA
  6411                           fsr0l	equ	0xFE9
  6412                           wreg	equ	0xFE8
  6413                           indf1	equ	0xFE7
  6414                           postdec1	equ	0xFE5
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _Console_Tab *****************
  6425 ;; Defined at:
  6426 ;;		line 258 in file "Library/Console.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  c               1   15[BANK0 ] unsigned char 
  6431 ;;  i               1   14[BANK0 ] unsigned char 
  6432 ;;  t               1   13[BANK0 ] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        8 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:   16
  6449 ;; This function calls:
  6450 ;;		_Console_ClearCursor
  6451 ;;		_Console_IncrementCursor
  6452 ;;		___awdiv
  6453 ;; This function is called by:
  6454 ;;		_Console_PrintChar
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text21
  6459  01338C                     __ptext21:
  6460                           	opt stack 0
  6461  01338C                     _Console_Tab:
  6462                           	opt stack 7
  6463                           
  6464                           ;Console.c: 260: UINT8 i = 0;
  6465                           
  6466                           ;incstack = 0
  6467  01338C  0100               	movlb	0	; () banked
  6468  01338E  6BBC               	clrf	Console_Tab@i& (0+255),b
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;Console.c: 261: UINT8 c = (gCursor.x-6)/6;
  6472  013390  0EFA               	movlw	250
  6473  013392  25F4               	addwf	_gCursor& (0+255),w,b
  6474  013394  6FAE               	movwf	___awdiv@dividend& (0+255),b
  6475  013396  0EFF               	movlw	255
  6476  013398  21F5               	addwfc	(_gCursor+1)& (0+255),w,b
  6477  01339A  6FAF               	movwf	(___awdiv@dividend+1)& (0+255),b
  6478  01339C  6BB1               	clrf	(___awdiv@divisor+1)& (0+255),b
  6479  01339E  0E06               	movlw	6
  6480  0133A0  6FB0               	movwf	___awdiv@divisor& (0+255),b
  6481  0133A2  EC97  F09A         	call	___awdiv	;wreg free
  6482  0133A6  0100               	movlb	0	; () banked
  6483  0133A8  51AE               	movf	?___awdiv& (0+255),w,b
  6484  0133AA  6FBD               	movwf	Console_Tab@c& (0+255),b
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;Console.c: 262: UINT8 t = c/4;
  6488  0133AC  C0BD  F0AE         	movff	Console_Tab@c,___awdiv@dividend
  6489  0133B0  6BAF               	clrf	(___awdiv@dividend+1)& (0+255),b
  6490  0133B2  6BB1               	clrf	(___awdiv@divisor+1)& (0+255),b
  6491  0133B4  0E04               	movlw	4
  6492  0133B6  6FB0               	movwf	___awdiv@divisor& (0+255),b
  6493  0133B8  EC97  F09A         	call	___awdiv	;wreg free
  6494  0133BC  0100               	movlb	0	; () banked
  6495  0133BE  51AE               	movf	?___awdiv& (0+255),w,b
  6496  0133C0  6FBB               	movwf	Console_Tab@t& (0+255),b
  6497                           
  6498                           ;Console.c: 263: for (i = 0; i<(4-(c-4*t)); i++)
  6499  0133C2  6BBC               	clrf	Console_Tab@i& (0+255),b
  6500  0133C4  D006               	goto	l9135
  6501  0133C6                     l9131:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;Console.c: 264: {
  6505                           ;Console.c: 265: Console_ClearCursor();
  6506  0133C6  EC7A  F0A5         	call	_Console_ClearCursor	;wreg free
  6507                           
  6508                           ;Console.c: 266: Console_IncrementCursor();
  6509  0133CA  EC6D  F0A1         	call	_Console_IncrementCursor	;wreg free
  6510  0133CE  0100               	movlb	0	; () banked
  6511  0133D0  2BBC               	incf	Console_Tab@i& (0+255),f,b
  6512  0133D2                     l9135:
  6513                           
  6514                           ; BSR set to: 0
  6515  0133D2  0100               	movlb	0	; () banked
  6516  0133D4  51BB               	movf	Console_Tab@t& (0+255),w,b
  6517  0133D6  0D04               	mullw	4
  6518  0133D8  1EF3               	comf	prodl,f,c
  6519  0133DA  1EF4               	comf	prodh,f,c
  6520  0133DC  4AF3               	infsnz	prodl,f,c
  6521  0133DE  2AF4               	incf	prodh,f,c
  6522  0133E0  51BD               	movf	Console_Tab@c& (0+255),w,b
  6523  0133E2  6FB6               	movwf	??_Console_Tab& (0+255),b
  6524  0133E4  6BB7               	clrf	(??_Console_Tab+1)& (0+255),b
  6525  0133E6  50F3               	movf	prodl,w,c
  6526  0133E8  27B6               	addwf	??_Console_Tab& (0+255),f,b
  6527  0133EA  50F4               	movf	prodh,w,c
  6528  0133EC  23B7               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6529  0133EE  1FB6               	comf	??_Console_Tab& (0+255),f,b
  6530  0133F0  1FB7               	comf	(??_Console_Tab+1)& (0+255),f,b
  6531  0133F2  4BB6               	infsnz	??_Console_Tab& (0+255),f,b
  6532  0133F4  2BB7               	incf	(??_Console_Tab+1)& (0+255),f,b
  6533  0133F6  0E04               	movlw	4
  6534  0133F8  27B6               	addwf	??_Console_Tab& (0+255),f,b
  6535  0133FA  0E00               	movlw	0
  6536  0133FC  23B7               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6537  0133FE  51BC               	movf	Console_Tab@i& (0+255),w,b
  6538  013400  6FB8               	movwf	(??_Console_Tab+2)& (0+255),b
  6539  013402  6BB9               	clrf	(??_Console_Tab+3)& (0+255),b
  6540  013404  51B6               	movf	??_Console_Tab& (0+255),w,b
  6541  013406  5DB8               	subwf	(??_Console_Tab+2)& (0+255),w,b
  6542  013408  51B9               	movf	(??_Console_Tab+3)& (0+255),w,b
  6543  01340A  0A80               	xorlw	128
  6544  01340C  6FBA               	movwf	(??_Console_Tab+4)& (0+255),b
  6545  01340E  51B7               	movf	(??_Console_Tab+1)& (0+255),w,b
  6546  013410  0A80               	xorlw	128
  6547  013412  59BA               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  6548  013414  E3D8               	bnc	l9131
  6549  013416  0012               	return	
  6550  013418                     __end_of_Console_Tab:
  6551                           	opt stack 0
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           prodh	equ	0xFF4
  6557                           prodl	equ	0xFF3
  6558                           intcon	equ	0xFF2
  6559                           indf0	equ	0xFEF
  6560                           postinc0	equ	0xFEE
  6561                           fsr0h	equ	0xFEA
  6562                           fsr0l	equ	0xFE9
  6563                           wreg	equ	0xFE8
  6564                           indf1	equ	0xFE7
  6565                           postdec1	equ	0xFE5
  6566                           fsr1h	equ	0xFE2
  6567                           fsr1l	equ	0xFE1
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function ___awdiv *****************
  6576 ;; Defined at:
  6577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  dividend        2    0[BANK0 ] int 
  6580 ;;  divisor         2    2[BANK0 ] int 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  quotient        2    6[BANK0 ] int 
  6583 ;;  sign            1    5[BANK0 ] unsigned char 
  6584 ;;  counter         1    4[BANK0 ] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  2    0[BANK0 ] int 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;Total ram usage:        8 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:   14
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_Console_Tab
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text22
  6609  01352E                     __ptext22:
  6610                           	opt stack 0
  6611  01352E                     ___awdiv:
  6612                           	opt stack 8
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;incstack = 0
  6616  01352E  0100               	movlb	0	; () banked
  6617  013530  6BB3               	clrf	___awdiv@sign& (0+255),b
  6618                           
  6619                           ; BSR set to: 0
  6620  013532  AFB1               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6621  013534  D006               	goto	l8943
  6622                           
  6623                           ; BSR set to: 0
  6624  013536  6DB0               	negf	___awdiv@divisor& (0+255),b
  6625  013538  1FB1               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6626  01353A  B0D8               	btfsc	status,0,c
  6627  01353C  2BB1               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6628                           
  6629                           ; BSR set to: 0
  6630  01353E  0E01               	movlw	1
  6631  013540  6FB3               	movwf	___awdiv@sign& (0+255),b
  6632  013542                     l8943:
  6633                           
  6634                           ; BSR set to: 0
  6635  013542  0100               	movlb	0	; () banked
  6636  013544  AFAF               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6637  013546  D006               	goto	l8949
  6638                           
  6639                           ; BSR set to: 0
  6640  013548  6DAE               	negf	___awdiv@dividend& (0+255),b
  6641  01354A  1FAF               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6642  01354C  B0D8               	btfsc	status,0,c
  6643  01354E  2BAF               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6644                           
  6645                           ; BSR set to: 0
  6646  013550  0E01               	movlw	1
  6647  013552  1BB3               	xorwf	___awdiv@sign& (0+255),f,b
  6648  013554                     l8949:
  6649                           
  6650                           ; BSR set to: 0
  6651  013554  0100               	movlb	0	; () banked
  6652  013556  6BB5               	clrf	(___awdiv@quotient+1)& (0+255),b
  6653  013558  6BB4               	clrf	___awdiv@quotient& (0+255),b
  6654                           
  6655                           ; BSR set to: 0
  6656  01355A  51B0               	movf	___awdiv@divisor& (0+255),w,b
  6657  01355C  11B1               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6658  01355E  E01F               	bz	l8971
  6659                           
  6660                           ; BSR set to: 0
  6661  013560  0E01               	movlw	1
  6662  013562  6FB2               	movwf	___awdiv@counter& (0+255),b
  6663  013564  D005               	goto	l8957
  6664  013566                     l8955:
  6665                           
  6666                           ; BSR set to: 0
  6667  013566  0100               	movlb	0	; () banked
  6668  013568  90D8               	bcf	status,0,c
  6669  01356A  37B0               	rlcf	___awdiv@divisor& (0+255),f,b
  6670  01356C  37B1               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6671  01356E  2BB2               	incf	___awdiv@counter& (0+255),f,b
  6672  013570                     l8957:
  6673                           
  6674                           ; BSR set to: 0
  6675  013570  0100               	movlb	0	; () banked
  6676  013572  AFB1               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6677  013574  D7F8               	goto	l8955
  6678  013576                     l8959:
  6679                           
  6680                           ; BSR set to: 0
  6681  013576  0100               	movlb	0	; () banked
  6682  013578  90D8               	bcf	status,0,c
  6683  01357A  37B4               	rlcf	___awdiv@quotient& (0+255),f,b
  6684  01357C  37B5               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6685                           
  6686                           ; BSR set to: 0
  6687  01357E  51B0               	movf	___awdiv@divisor& (0+255),w,b
  6688  013580  5DAE               	subwf	___awdiv@dividend& (0+255),w,b
  6689  013582  51B1               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6690  013584  59AF               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6691  013586  E305               	bnc	l8967
  6692                           
  6693                           ; BSR set to: 0
  6694  013588  51B0               	movf	___awdiv@divisor& (0+255),w,b
  6695  01358A  5FAE               	subwf	___awdiv@dividend& (0+255),f,b
  6696  01358C  51B1               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6697  01358E  5BAF               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6698                           
  6699                           ; BSR set to: 0
  6700  013590  81B4               	bsf	___awdiv@quotient& (0+255),0,b
  6701  013592                     l8967:
  6702                           
  6703                           ; BSR set to: 0
  6704  013592  0100               	movlb	0	; () banked
  6705  013594  90D8               	bcf	status,0,c
  6706  013596  33B1               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6707  013598  33B0               	rrcf	___awdiv@divisor& (0+255),f,b
  6708                           
  6709                           ; BSR set to: 0
  6710  01359A  2FB2               	decfsz	___awdiv@counter& (0+255),f,b
  6711  01359C  D7EC               	goto	l8959
  6712  01359E                     l8971:
  6713                           
  6714                           ; BSR set to: 0
  6715  01359E  0100               	movlb	0	; () banked
  6716  0135A0  51B3               	movf	___awdiv@sign& (0+255),w,b
  6717  0135A2  E004               	bz	l8975
  6718                           
  6719                           ; BSR set to: 0
  6720  0135A4  6DB4               	negf	___awdiv@quotient& (0+255),b
  6721  0135A6  1FB5               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6722  0135A8  B0D8               	btfsc	status,0,c
  6723  0135AA  2BB5               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6724  0135AC                     l8975:
  6725                           
  6726                           ; BSR set to: 0
  6727  0135AC  C0B4  F0AE         	movff	___awdiv@quotient,?___awdiv
  6728  0135B0  C0B5  F0AF         	movff	___awdiv@quotient+1,?___awdiv+1
  6729  0135B4  0012               	return	
  6730  0135B6                     __end_of___awdiv:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           indf0	equ	0xFEF
  6740                           postinc0	equ	0xFEE
  6741                           fsr0h	equ	0xFEA
  6742                           fsr0l	equ	0xFE9
  6743                           wreg	equ	0xFE8
  6744                           indf1	equ	0xFE7
  6745                           postdec1	equ	0xFE5
  6746                           fsr1h	equ	0xFE2
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function _Console_IncrementCursor *****************
  6756 ;; Defined at:
  6757 ;;		line 241 in file "Library/Console.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      unsigned char 
  6764 ;; Registers used:
  6765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;Total ram usage:        2 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:   15
  6778 ;; This function calls:
  6779 ;;		_Console_FormFeed
  6780 ;;		_Console_NewLine
  6781 ;; This function is called by:
  6782 ;;		_Console_Tab
  6783 ;;		_Console_PrintChar
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text23
  6788  0142DA                     __ptext23:
  6789                           	opt stack 0
  6790  0142DA                     _Console_IncrementCursor:
  6791                           	opt stack 7
  6792                           
  6793                           ;Console.c: 244: lBufferX += 1;
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;incstack = 0
  6797  0142DA  0100               	movlb	0	; () banked
  6798  0142DC  2BA1               	incf	_lBufferX& (0+255),f,b
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;Console.c: 246: gCursor.x += 6;
  6802  0142DE  0E06               	movlw	6
  6803  0142E0  27F4               	addwf	_gCursor& (0+255),f,b
  6804  0142E2  0E00               	movlw	0
  6805  0142E4  23F5               	addwfc	(_gCursor+1)& (0+255),f,b
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;Console.c: 247: if (gCursor.x + 6 >= 128)
  6809  0142E6  0E06               	movlw	6
  6810  0142E8  25F4               	addwf	_gCursor& (0+255),w,b
  6811  0142EA  6FB2               	movwf	??_Console_IncrementCursor& (0+255),b
  6812  0142EC  0E00               	movlw	0
  6813  0142EE  21F5               	addwfc	(_gCursor+1)& (0+255),w,b
  6814  0142F0  6FB3               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  6815  0142F2  BFB3               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  6816  0142F4  D007               	goto	l8923
  6817  0142F6  51B3               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  6818  0142F8  E103               	bnz	u5710
  6819  0142FA  0E80               	movlw	128
  6820  0142FC  5DB2               	subwf	??_Console_IncrementCursor& (0+255),w,b
  6821  0142FE  E302               	bnc	l8923
  6822  014300                     u5710:
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;Console.c: 248: Console_NewLine();
  6826  014300  EC5A  F09D         	call	_Console_NewLine	;wreg free
  6827  014304                     l8923:
  6828                           
  6829                           ;Console.c: 249: if (gCursor.y + 8>= 128)
  6830  014304  0E08               	movlw	8
  6831  014306  0100               	movlb	0	; () banked
  6832  014308  25F6               	addwf	(_gCursor+2)& (0+255),w,b
  6833  01430A  6FB2               	movwf	??_Console_IncrementCursor& (0+255),b
  6834  01430C  0E00               	movlw	0
  6835  01430E  21F7               	addwfc	(_gCursor+3)& (0+255),w,b
  6836  014310  6FB3               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  6837  014312  BFB3               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  6838  014314  0C00               	retlw	0
  6839  014316  51B3               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  6840  014318  E104               	bnz	u5720
  6841  01431A  0E80               	movlw	128
  6842  01431C  5DB2               	subwf	??_Console_IncrementCursor& (0+255),w,b
  6843  01431E  A0D8               	btfss	status,0,c
  6844  014320  0C00               	retlw	0
  6845  014322                     u5720:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;Console.c: 250: {
  6849                           ;Console.c: 251: Console_FormFeed();
  6850  014322  EC04  F09E         	call	_Console_FormFeed	;wreg free
  6851                           
  6852                           ;Console.c: 252: return 1;
  6853  014326  0C01               	retlw	1
  6854  014328                     __end_of_Console_IncrementCursor:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           indf0	equ	0xFEF
  6864                           postinc0	equ	0xFEE
  6865                           fsr0h	equ	0xFEA
  6866                           fsr0l	equ	0xFE9
  6867                           wreg	equ	0xFE8
  6868                           indf1	equ	0xFE7
  6869                           postdec1	equ	0xFE5
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _Console_NewLine *****************
  6880 ;; Defined at:
  6881 ;;		line 173 in file "Library/Console.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:        2 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:   14
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_Console_IncrementCursor
  6906 ;;		_Console_PrintChar
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text24
  6911  013AB4                     __ptext24:
  6912                           	opt stack 0
  6913  013AB4                     _Console_NewLine:
  6914                           	opt stack 7
  6915                           
  6916                           ;Console.c: 176: while (lBufferX < (UINT8)((128-6)/6))
  6917                           
  6918                           ;incstack = 0
  6919  013AB4  D02D               	goto	l8831
  6920  013AB6                     l8823:
  6921                           
  6922                           ;Console.c: 177: {
  6923                           ;Console.c: 178: if (lBuffer[lBufferY][lBufferX] != '\0')
  6924  013AB6  0100               	movlb	0	; () banked
  6925  013AB8  51A2               	movf	_lBufferY& (0+255),w,b
  6926  013ABA  0D14               	mullw	20
  6927  013ABC  0E11               	movlw	low _lBuffer
  6928  013ABE  6FAE               	movwf	??_Console_NewLine& (0+255),b
  6929  013AC0  0E0C               	movlw	high _lBuffer
  6930  013AC2  6FAF               	movwf	(??_Console_NewLine+1)& (0+255),b
  6931  013AC4  50F3               	movf	prodl,w,c
  6932  013AC6  27AE               	addwf	??_Console_NewLine& (0+255),f,b
  6933  013AC8  50F4               	movf	prodh,w,c
  6934  013ACA  23AF               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  6935  013ACC  51A1               	movf	_lBufferX& (0+255),w,b
  6936  013ACE  0D01               	mullw	1
  6937  013AD0  50F3               	movf	prodl,w,c
  6938  013AD2  25AE               	addwf	??_Console_NewLine& (0+255),w,b
  6939  013AD4  6ED9               	movwf	fsr2l,c
  6940  013AD6  50F4               	movf	prodh,w,c
  6941  013AD8  21AF               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  6942  013ADA  6EDA               	movwf	fsr2h,c
  6943  013ADC  50DF               	movf	indf2,w,c
  6944  013ADE  E016               	bz	l8829
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;Console.c: 179: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  6948  013AE0  0E01               	movlw	1
  6949  013AE2  6FFC               	movwf	_change& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952  013AE4  51A2               	movf	_lBufferY& (0+255),w,b
  6953  013AE6  0D14               	mullw	20
  6954  013AE8  0E11               	movlw	low _lBuffer
  6955  013AEA  6FAE               	movwf	??_Console_NewLine& (0+255),b
  6956  013AEC  0E0C               	movlw	high _lBuffer
  6957  013AEE  6FAF               	movwf	(??_Console_NewLine+1)& (0+255),b
  6958  013AF0  50F3               	movf	prodl,w,c
  6959  013AF2  27AE               	addwf	??_Console_NewLine& (0+255),f,b
  6960  013AF4  50F4               	movf	prodh,w,c
  6961  013AF6  23AF               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  6962  013AF8  51A1               	movf	_lBufferX& (0+255),w,b
  6963  013AFA  0D01               	mullw	1
  6964  013AFC  50F3               	movf	prodl,w,c
  6965  013AFE  25AE               	addwf	??_Console_NewLine& (0+255),w,b
  6966  013B00  6ED9               	movwf	fsr2l,c
  6967  013B02  50F4               	movf	prodh,w,c
  6968  013B04  21AF               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  6969  013B06  6EDA               	movwf	fsr2h,c
  6970  013B08  0E80               	movlw	128
  6971  013B0A  6EDF               	movwf	indf2,c
  6972  013B0C                     l8829:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;Console.c: 180: lBufferX ++;
  6976  013B0C  0100               	movlb	0	; () banked
  6977  013B0E  2BA1               	incf	_lBufferX& (0+255),f,b
  6978  013B10                     l8831:
  6979  013B10  0E13               	movlw	19
  6980  013B12  0100               	movlb	0	; () banked
  6981  013B14  65A1               	cpfsgt	_lBufferX& (0+255),b
  6982  013B16  D7CF               	goto	l8823
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;Console.c: 181: }
  6986                           ;Console.c: 183: lBufferX = 0;
  6987                           
  6988                           ; BSR set to: 0
  6989  013B18  6BA1               	clrf	_lBufferX& (0+255),b
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;Console.c: 184: lBufferY ++;
  6993  013B1A  2BA2               	incf	_lBufferY& (0+255),f,b
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;Console.c: 186: gCursor.y += 8;
  6997  013B1C  0E08               	movlw	8
  6998  013B1E  27F6               	addwf	(_gCursor+2)& (0+255),f,b
  6999  013B20  0E00               	movlw	0
  7000  013B22  23F7               	addwfc	(_gCursor+3)& (0+255),f,b
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;Console.c: 187: gCursor.x = 6;
  7004  013B24  6BF5               	clrf	(_gCursor+1)& (0+255),b
  7005  013B26  0E06               	movlw	6
  7006  013B28  6FF4               	movwf	_gCursor& (0+255),b
  7007                           
  7008                           ; BSR set to: 0
  7009  013B2A  0C06               	retlw	6	;funcret
  7010  013B2C                     __end_of_Console_NewLine:
  7011                           	opt stack 0
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           indf0	equ	0xFEF
  7020                           postinc0	equ	0xFEE
  7021                           fsr0h	equ	0xFEA
  7022                           fsr0l	equ	0xFE9
  7023                           wreg	equ	0xFE8
  7024                           indf1	equ	0xFE7
  7025                           postdec1	equ	0xFE5
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _Console_FormFeed *****************
  7036 ;; Defined at:
  7037 ;;		line 190 in file "Library/Console.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  y               1    3[BANK0 ] unsigned char 
  7042 ;;  x               1    2[BANK0 ] unsigned char 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;Total ram usage:        4 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:   14
  7059 ;; This function calls:
  7060 ;;		Nothing
  7061 ;; This function is called by:
  7062 ;;		_Console_IncrementCursor
  7063 ;;		_Console_PrintChar
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text25
  7068  013C08                     __ptext25:
  7069                           	opt stack 0
  7070  013C08                     _Console_FormFeed:
  7071                           	opt stack 7
  7072                           
  7073                           ;Console.c: 193: lBufferX = 0;
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;incstack = 0
  7077  013C08  0100               	movlb	0	; () banked
  7078  013C0A  6BA1               	clrf	_lBufferX& (0+255),b
  7079                           
  7080                           ;Console.c: 194: lBufferY = 0;
  7081  013C0C  6BA2               	clrf	_lBufferY& (0+255),b
  7082                           
  7083                           ;Console.c: 195: UINT8 x, y;
  7084                           ;Console.c: 197: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7085  013C0E  6BB0               	clrf	Console_FormFeed@x& (0+255),b
  7086  013C10                     l8843:
  7087                           
  7088                           ; BSR set to: 0
  7089  013C10  0E13               	movlw	19
  7090  013C12  0100               	movlb	0	; () banked
  7091  013C14  65B0               	cpfsgt	Console_FormFeed@x& (0+255),b
  7092  013C16  D001               	goto	l8847
  7093  013C18  D023               	goto	l8865
  7094  013C1A                     l8847:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;Console.c: 198: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7098  013C1A  0100               	movlb	0	; () banked
  7099  013C1C  6BB1               	clrf	Console_FormFeed@y& (0+255),b
  7100  013C1E                     l8849:
  7101                           
  7102                           ; BSR set to: 0
  7103  013C1E  0E0E               	movlw	14
  7104  013C20  0100               	movlb	0	; () banked
  7105  013C22  65B1               	cpfsgt	Console_FormFeed@y& (0+255),b
  7106  013C24  D001               	goto	l8853
  7107  013C26  D019               	goto	l8861
  7108  013C28                     l8853:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;Console.c: 199: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7112  013C28  0E01               	movlw	1
  7113  013C2A  0100               	movlb	0	; () banked
  7114  013C2C  6FFC               	movwf	_change& (0+255),b
  7115                           
  7116                           ; BSR set to: 0
  7117  013C2E  51B1               	movf	Console_FormFeed@y& (0+255),w,b
  7118  013C30  0D14               	mullw	20
  7119  013C32  0E11               	movlw	low _lBuffer
  7120  013C34  6FAE               	movwf	??_Console_FormFeed& (0+255),b
  7121  013C36  0E0C               	movlw	high _lBuffer
  7122  013C38  6FAF               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7123  013C3A  50F3               	movf	prodl,w,c
  7124  013C3C  27AE               	addwf	??_Console_FormFeed& (0+255),f,b
  7125  013C3E  50F4               	movf	prodh,w,c
  7126  013C40  23AF               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7127  013C42  51B0               	movf	Console_FormFeed@x& (0+255),w,b
  7128  013C44  0D01               	mullw	1
  7129  013C46  50F3               	movf	prodl,w,c
  7130  013C48  25AE               	addwf	??_Console_FormFeed& (0+255),w,b
  7131  013C4A  6ED9               	movwf	fsr2l,c
  7132  013C4C  50F4               	movf	prodh,w,c
  7133  013C4E  21AF               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7134  013C50  6EDA               	movwf	fsr2h,c
  7135  013C52  0E80               	movlw	128
  7136  013C54  6EDF               	movwf	indf2,c
  7137                           
  7138                           ; BSR set to: 0
  7139  013C56  2BB1               	incf	Console_FormFeed@y& (0+255),f,b
  7140  013C58  D7E2               	goto	l8849
  7141  013C5A                     l8861:
  7142                           
  7143                           ; BSR set to: 0
  7144  013C5A  0100               	movlb	0	; () banked
  7145  013C5C  2BB0               	incf	Console_FormFeed@x& (0+255),f,b
  7146  013C5E  D7D8               	goto	l8843
  7147  013C60                     l8865:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;Console.c: 202: clearall = 1;
  7151  013C60  0E01               	movlw	1
  7152  013C62  0100               	movlb	0	; () banked
  7153  013C64  6F9D               	movwf	_clearall& (0+255),b
  7154                           
  7155                           ;Console.c: 203: gCursor.x = 6;
  7156  013C66  6BF5               	clrf	(_gCursor+1)& (0+255),b
  7157  013C68  0E06               	movlw	6
  7158  013C6A  6FF4               	movwf	_gCursor& (0+255),b
  7159                           
  7160                           ;Console.c: 204: gCursor.y = 6;
  7161  013C6C  6BF7               	clrf	(_gCursor+3)& (0+255),b
  7162  013C6E  6FF6               	movwf	(_gCursor+2)& (0+255),b
  7163                           
  7164                           ; BSR set to: 0
  7165  013C70  0C06               	retlw	6	;funcret
  7166  013C72                     __end_of_Console_FormFeed:
  7167                           	opt stack 0
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           indf0	equ	0xFEF
  7176                           postinc0	equ	0xFEE
  7177                           fsr0h	equ	0xFEA
  7178                           fsr0l	equ	0xFE9
  7179                           wreg	equ	0xFE8
  7180                           indf1	equ	0xFE7
  7181                           postdec1	equ	0xFE5
  7182                           fsr1h	equ	0xFE2
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _Console_Backspace *****************
  7192 ;; Defined at:
  7193 ;;		line 207 in file "Library/Console.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;Total ram usage:        0 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:   15
  7214 ;; This function calls:
  7215 ;;		_Console_ClearCursor
  7216 ;; This function is called by:
  7217 ;;		_Console_PrintChar
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text26
  7222  0144E2                     __ptext26:
  7223                           	opt stack 0
  7224  0144E2                     _Console_Backspace:
  7225                           	opt stack 8
  7226                           
  7227                           ;Console.c: 209: if (lBufferX > 0)
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;incstack = 0
  7231  0144E2  0100               	movlb	0	; () banked
  7232  0144E4  51A1               	movf	_lBufferX& (0+255),w,b
  7233  0144E6  E007               	bz	l9111
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;Console.c: 210: {
  7237                           ;Console.c: 211: gCursor.x -= 6;
  7238  0144E8  0EFA               	movlw	250
  7239  0144EA  27F4               	addwf	_gCursor& (0+255),f,b
  7240  0144EC  0EFF               	movlw	255
  7241  0144EE  23F5               	addwfc	(_gCursor+1)& (0+255),f,b
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;Console.c: 214: lBufferX --;
  7245  0144F0  07A1               	decf	_lBufferX& (0+255),f,b
  7246                           
  7247                           ;Console.c: 216: }
  7248  0144F2  EF7A  F0A5         	goto	_Console_ClearCursor
  7249  0144F6                     l9111:
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;Console.c: 217: else if (lBufferY > 0)
  7253  0144F6  0100               	movlb	0	; () banked
  7254  0144F8  51A2               	movf	_lBufferY& (0+255),w,b
  7255  0144FA  E00C               	bz	l9121
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;Console.c: 218: {
  7259                           ;Console.c: 219: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7260  0144FC  6BF5               	clrf	(_gCursor+1)& (0+255),b
  7261  0144FE  0E72               	movlw	114
  7262  014500  6FF4               	movwf	_gCursor& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;Console.c: 220: gCursor.y -= 8;
  7266  014502  0EF8               	movlw	248
  7267  014504  27F6               	addwf	(_gCursor+2)& (0+255),f,b
  7268  014506  0EFF               	movlw	255
  7269  014508  23F7               	addwfc	(_gCursor+3)& (0+255),f,b
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;Console.c: 223: lBufferX = (UINT8)((128-6)/6) - 1;
  7273  01450A  0E13               	movlw	19
  7274  01450C  6FA1               	movwf	_lBufferX& (0+255),b
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;Console.c: 224: lBufferY --;
  7278  01450E  07A2               	decf	_lBufferY& (0+255),f,b
  7279                           
  7280                           ;Console.c: 226: }
  7281  014510  EF7A  F0A5         	goto	_Console_ClearCursor
  7282  014514                     l9121:
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;Console.c: 227: else
  7286                           ;Console.c: 228: {
  7287                           ;Console.c: 229: gCursor.x = 6;
  7288  014514  0100               	movlb	0	; () banked
  7289  014516  6BF5               	clrf	(_gCursor+1)& (0+255),b
  7290  014518  0E06               	movlw	6
  7291  01451A  6FF4               	movwf	_gCursor& (0+255),b
  7292                           
  7293                           ;Console.c: 230: gCursor.y = 6;
  7294  01451C  6BF7               	clrf	(_gCursor+3)& (0+255),b
  7295  01451E  6FF6               	movwf	(_gCursor+2)& (0+255),b
  7296                           
  7297                           ;Console.c: 233: lBufferX = 0;
  7298  014520  6BA1               	clrf	_lBufferX& (0+255),b
  7299                           
  7300                           ;Console.c: 234: lBufferY = 0;
  7301  014522  6BA2               	clrf	_lBufferY& (0+255),b
  7302                           
  7303                           ; BSR set to: 0
  7304  014524  EF7A  F0A5         	goto	_Console_ClearCursor
  7305  014528                     __end_of_Console_Backspace:
  7306                           	opt stack 0
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           prodh	equ	0xFF4
  7312                           prodl	equ	0xFF3
  7313                           intcon	equ	0xFF2
  7314                           indf0	equ	0xFEF
  7315                           postinc0	equ	0xFEE
  7316                           fsr0h	equ	0xFEA
  7317                           fsr0l	equ	0xFE9
  7318                           wreg	equ	0xFE8
  7319                           indf1	equ	0xFE7
  7320                           postdec1	equ	0xFE5
  7321                           fsr1h	equ	0xFE2
  7322                           fsr1l	equ	0xFE1
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function _Console_ClearCursor *****************
  7331 ;; Defined at:
  7332 ;;		line 296 in file "Library/Console.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;Total ram usage:        2 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:   14
  7353 ;; This function calls:
  7354 ;;		Nothing
  7355 ;; This function is called by:
  7356 ;;		_Console_Backspace
  7357 ;;		_Console_Tab
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text27
  7362  014AF4                     __ptext27:
  7363                           	opt stack 0
  7364  014AF4                     _Console_ClearCursor:
  7365                           	opt stack 8
  7366                           
  7367                           ;Console.c: 299: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  7368                           
  7369                           ;incstack = 0
  7370  014AF4  0E01               	movlw	1
  7371  014AF6  0100               	movlb	0	; () banked
  7372  014AF8  6FFC               	movwf	_change& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375  014AFA  51A2               	movf	_lBufferY& (0+255),w,b
  7376  014AFC  0D14               	mullw	20
  7377  014AFE  0E11               	movlw	low _lBuffer
  7378  014B00  6FAE               	movwf	??_Console_ClearCursor& (0+255),b
  7379  014B02  0E0C               	movlw	high _lBuffer
  7380  014B04  6FAF               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  7381  014B06  50F3               	movf	prodl,w,c
  7382  014B08  27AE               	addwf	??_Console_ClearCursor& (0+255),f,b
  7383  014B0A  50F4               	movf	prodh,w,c
  7384  014B0C  23AF               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  7385  014B0E  51A1               	movf	_lBufferX& (0+255),w,b
  7386  014B10  0D01               	mullw	1
  7387  014B12  50F3               	movf	prodl,w,c
  7388  014B14  25AE               	addwf	??_Console_ClearCursor& (0+255),w,b
  7389  014B16  6ED9               	movwf	fsr2l,c
  7390  014B18  50F4               	movf	prodh,w,c
  7391  014B1A  21AF               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  7392  014B1C  6EDA               	movwf	fsr2h,c
  7393  014B1E  0E80               	movlw	128
  7394  014B20  6EDF               	movwf	indf2,c
  7395                           
  7396                           ; BSR set to: 0
  7397  014B22  0C80               	retlw	128	;funcret
  7398  014B24                     __end_of_Console_ClearCursor:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           indf0	equ	0xFEF
  7408                           postinc0	equ	0xFEE
  7409                           fsr0h	equ	0xFEA
  7410                           fsr0l	equ	0xFE9
  7411                           wreg	equ	0xFE8
  7412                           indf1	equ	0xFE7
  7413                           postdec1	equ	0xFE5
  7414                           fsr1h	equ	0xFE2
  7415                           fsr1l	equ	0xFE1
  7416                           indf2	equ	0xFDF
  7417                           postinc2	equ	0xFDE
  7418                           postdec2	equ	0xFDD
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function _CDCTxService *****************
  7424 ;; Defined at:
  7425 ;;		line 902 in file "Library/USB/src/usb_device_cdc.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  byte_to_send    1   12[BANK0 ] unsigned char 
  7430 ;;  i               1   11[BANK0 ] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;Total ram usage:        2 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:   15
  7447 ;; This function calls:
  7448 ;;		_USBTransferOnePacket
  7449 ;; This function is called by:
  7450 ;;		_USB_Tasks
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text28
  7455  0113A2                     __ptext28:
  7456                           	opt stack 0
  7457  0113A2                     _CDCTxService:
  7458                           	opt stack 12
  7459                           
  7460                           ;usb_device_cdc.c: 904: uint8_t byte_to_send;
  7461                           ;usb_device_cdc.c: 905: uint8_t i;
  7462                           ;usb_device_cdc.c: 907: {PIE2bits.USBIE = 0;};
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;incstack = 0
  7466  0113A2  98A0               	bcf	4000,4,c	;volatile
  7467                           
  7468                           ;usb_device_cdc.c: 909: {};
  7469                           ;usb_device_cdc.c: 911: if(((CDCDataInHandle != 0x0000) && ((*(volatile uint8_t*)CDCData
      +                          InHandle & 0x80) != 0x00)))
  7470  0113A4  0100               	movlb	0	; () banked
  7471  0113A6  5183               	movf	_CDCDataInHandle& (0+255),w,b
  7472  0113A8  1184               	iorwf	(_CDCDataInHandle+1)& (0+255),w,b
  7473  0113AA  E008               	bz	l10755
  7474                           
  7475                           ; BSR set to: 0
  7476  0113AC  C083  FFD9         	movff	_CDCDataInHandle,fsr2l
  7477  0113B0  C084  FFDA         	movff	_CDCDataInHandle+1,fsr2h
  7478  0113B4  AEDF               	btfss	indf2,7,c
  7479  0113B6  D002               	goto	l10755
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;usb_device_cdc.c: 912: {
  7483                           ;usb_device_cdc.c: 913: {PIE2bits.USBIE = 1;};
  7484  0113B8  88A0               	bsf	4000,4,c	;volatile
  7485                           
  7486                           ;usb_device_cdc.c: 914: return;
  7487  0113BA  0012               	return	
  7488  0113BC                     l10755:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;usb_device_cdc.c: 915: }
  7492                           ;usb_device_cdc.c: 922: if(cdc_trf_state == 3)
  7493  0113BC  0E03               	movlw	3
  7494  0113BE  0100               	movlb	0	; () banked
  7495  0113C0  199B               	xorwf	_cdc_trf_state& (0+255),w,b
  7496  0113C2  E102               	bnz	l516
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;usb_device_cdc.c: 923: cdc_trf_state = 0;
  7500  0113C4  0E00               	movlw	0
  7501  0113C6  6F9B               	movwf	_cdc_trf_state& (0+255),b
  7502  0113C8                     l516:
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;usb_device_cdc.c: 928: if(cdc_trf_state == 0)
  7506  0113C8  0100               	movlb	0	; () banked
  7507  0113CA  519B               	movf	_cdc_trf_state& (0+255),w,b
  7508  0113CC  E102               	bnz	l10761
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;usb_device_cdc.c: 929: {
  7512                           ;usb_device_cdc.c: 930: {PIE2bits.USBIE = 1;};
  7513  0113CE  88A0               	bsf	4000,4,c	;volatile
  7514                           
  7515                           ;usb_device_cdc.c: 931: return;
  7516  0113D0  0012               	return	
  7517  0113D2                     l10761:
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;usb_device_cdc.c: 932: }
  7521                           ;usb_device_cdc.c: 937: if(cdc_trf_state == 2)
  7522  0113D2  0E02               	movlw	2
  7523  0113D4  0100               	movlb	0	; () banked
  7524  0113D6  199B               	xorwf	_cdc_trf_state& (0+255),w,b
  7525  0113D8  E111               	bnz	l10767
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;usb_device_cdc.c: 938: {
  7529                           ;usb_device_cdc.c: 939: CDCDataInHandle = USBTransferOnePacket(2,1,(0),0);
  7530  0113DA  0E01               	movlw	1
  7531  0113DC  6FAE               	movwf	USBTransferOnePacket@dir& (0+255),b
  7532  0113DE  0E00               	movlw	0
  7533  0113E0  6FAF               	movwf	USBTransferOnePacket@data& (0+255),b
  7534  0113E2  6FB0               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
  7535  0113E4  6FB1               	movwf	USBTransferOnePacket@len& (0+255),b
  7536  0113E6  0E02               	movlw	2
  7537  0113E8  ECB5  F090         	call	_USBTransferOnePacket
  7538  0113EC  C0AE  F083         	movff	?_USBTransferOnePacket,_CDCDataInHandle
  7539  0113F0  C0AF  F084         	movff	?_USBTransferOnePacket+1,_CDCDataInHandle+1
  7540                           
  7541                           ;usb_device_cdc.c: 941: cdc_trf_state = 3;
  7542  0113F4  0E03               	movlw	3
  7543  0113F6  0100               	movlb	0	; () banked
  7544  0113F8  6F9B               	movwf	_cdc_trf_state& (0+255),b
  7545                           
  7546                           ;usb_device_cdc.c: 942: }
  7547  0113FA  D074               	goto	l10811
  7548  0113FC                     l10767:
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;usb_device_cdc.c: 943: else if(cdc_trf_state == 1)
  7552  0113FC  0100               	movlb	0	; () banked
  7553  0113FE  059B               	decf	_cdc_trf_state& (0+255),w,b
  7554  011400  E171               	bnz	l10811
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;usb_device_cdc.c: 944: {
  7558                           ;usb_device_cdc.c: 948: if(cdc_tx_len > sizeof(cdc_data_tx))
  7559  011402  0E40               	movlw	64
  7560  011404  659C               	cpfsgt	_cdc_tx_len& (0+255),b
  7561  011406  D002               	goto	l521
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;usb_device_cdc.c: 949: byte_to_send = sizeof(cdc_data_tx);
  7565  011408  6FBA               	movwf	CDCTxService@byte_to_send& (0+255),b
  7566  01140A  D002               	goto	l10773
  7567  01140C                     l521:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;usb_device_cdc.c: 950: else
  7571                           ;usb_device_cdc.c: 951: byte_to_send = cdc_tx_len;
  7572  01140C  C09C  F0BA         	movff	_cdc_tx_len,CDCTxService@byte_to_send
  7573  011410                     l10773:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;usb_device_cdc.c: 956: cdc_tx_len = cdc_tx_len - byte_to_send;
  7577  011410  0100               	movlb	0	; () banked
  7578  011412  51BA               	movf	CDCTxService@byte_to_send& (0+255),w,b
  7579  011414  0800               	sublw	0
  7580  011416  279C               	addwf	_cdc_tx_len& (0+255),f,b
  7581                           
  7582                           ;usb_device_cdc.c: 958: pCDCDst.bRam = (uint8_t*)&cdc_data_tx;
  7583  011418  0EA8               	movlw	low _cdc_data_tx
  7584  01141A  0101               	movlb	1	; () banked
  7585  01141C  6F27               	movwf	_pCDCDst& (0+255),b
  7586  01141E  0E02               	movlw	high _cdc_data_tx
  7587  011420  6F28               	movwf	(_pCDCDst+1)& (0+255),b
  7588                           
  7589                           ; BSR set to: 1
  7590                           ;usb_device_cdc.c: 960: i = byte_to_send;
  7591  011422  C0BA  F0B9         	movff	CDCTxService@byte_to_send,CDCTxService@i
  7592                           
  7593                           ; BSR set to: 1
  7594                           ;usb_device_cdc.c: 961: if(cdc_mem_type == 0x00)
  7595  011426  0100               	movlb	0	; () banked
  7596  011428  5199               	movf	_cdc_mem_type& (0+255),w,b
  7597  01142A  E01E               	bz	l10789
  7598  01142C  D03E               	goto	l10799
  7599  01142E                     l10781:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;usb_device_cdc.c: 964: {
  7603                           ;usb_device_cdc.c: 965: *pCDCDst.bRam = *pCDCSrc.bRom;
  7604  01142E  C12A  FFF6         	movff	_pCDCSrc,tblptrl
  7605  011432  C12B  FFF7         	movff	_pCDCSrc+1,tblptrh
  7606  011436  0E00               	movlw	low (__mediumconst shr (0+16))
  7607  011438  6EF8               	movwf	tblptru,c
  7608  01143A  C127  FFD9         	movff	_pCDCDst,fsr2l
  7609  01143E  C128  FFDA         	movff	_pCDCDst+1,fsr2h
  7610  011442  0E0F               	movlw	(high __ramtop+-1)
  7611  011444  64F7               	cpfsgt	tblptrh,c
  7612  011446  D003               	bra	u7587
  7613  011448  0008               	tblrd		*
  7614  01144A  50F5               	movf	tablat,w,c
  7615  01144C  D005               	bra	u7580
  7616  01144E                     u7587:
  7617  01144E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7618  011452  CFF7 FFEA          	movff	tblptrh,fsr0h
  7619  011456  50EF               	movf	indf0,w,c
  7620  011458                     u7580:
  7621  011458  6EDF               	movwf	indf2,c
  7622                           
  7623                           ;usb_device_cdc.c: 966: pCDCDst.bRam++;
  7624  01145A  0101               	movlb	1	; () banked
  7625  01145C  4B27               	infsnz	_pCDCDst& (0+255),f,b
  7626  01145E  2B28               	incf	(_pCDCDst+1)& (0+255),f,b
  7627                           
  7628                           ; BSR set to: 1
  7629                           ;usb_device_cdc.c: 967: pCDCSrc.bRom++;
  7630  011460  4B2A               	infsnz	_pCDCSrc& (0+255),f,b
  7631  011462  2B2B               	incf	(_pCDCSrc+1)& (0+255),f,b
  7632                           
  7633                           ; BSR set to: 1
  7634                           ;usb_device_cdc.c: 968: i--;
  7635  011464  0100               	movlb	0	; () banked
  7636  011466  07B9               	decf	CDCTxService@i& (0+255),f,b
  7637  011468                     l10789:
  7638                           
  7639                           ; BSR set to: 0
  7640  011468  0100               	movlb	0	; () banked
  7641  01146A  51B9               	movf	CDCTxService@i& (0+255),w,b
  7642  01146C  E022               	bz	l10801
  7643  01146E  D7DF               	goto	l10781
  7644  011470                     l10791:
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;usb_device_cdc.c: 974: {
  7648                           ;usb_device_cdc.c: 975: *pCDCDst.bRam = *pCDCSrc.bRam;
  7649  011470  C12A  FFF6         	movff	_pCDCSrc,tblptrl
  7650  011474  C12B  FFF7         	movff	_pCDCSrc+1,tblptrh
  7651  011478  0E00               	movlw	low (__mediumconst shr (0+16))
  7652  01147A  6EF8               	movwf	tblptru,c
  7653  01147C  C127  FFD9         	movff	_pCDCDst,fsr2l
  7654  011480  C128  FFDA         	movff	_pCDCDst+1,fsr2h
  7655  011484  0E0F               	movlw	(high __ramtop+-1)
  7656  011486  64F7               	cpfsgt	tblptrh,c
  7657  011488  D003               	bra	u7607
  7658  01148A  0008               	tblrd		*
  7659  01148C  50F5               	movf	tablat,w,c
  7660  01148E  D005               	bra	u7600
  7661  011490                     u7607:
  7662  011490  CFF6 FFE9          	movff	tblptrl,fsr0l
  7663  011494  CFF7 FFEA          	movff	tblptrh,fsr0h
  7664  011498  50EF               	movf	indf0,w,c
  7665  01149A                     u7600:
  7666  01149A  6EDF               	movwf	indf2,c
  7667                           
  7668                           ;usb_device_cdc.c: 976: pCDCDst.bRam++;
  7669  01149C  0101               	movlb	1	; () banked
  7670  01149E  4B27               	infsnz	_pCDCDst& (0+255),f,b
  7671  0114A0  2B28               	incf	(_pCDCDst+1)& (0+255),f,b
  7672                           
  7673                           ; BSR set to: 1
  7674                           ;usb_device_cdc.c: 977: pCDCSrc.bRam++;
  7675  0114A2  4B2A               	infsnz	_pCDCSrc& (0+255),f,b
  7676  0114A4  2B2B               	incf	(_pCDCSrc+1)& (0+255),f,b
  7677                           
  7678                           ; BSR set to: 1
  7679                           ;usb_device_cdc.c: 978: i--;
  7680  0114A6  0100               	movlb	0	; () banked
  7681  0114A8  07B9               	decf	CDCTxService@i& (0+255),f,b
  7682  0114AA                     l10799:
  7683                           
  7684                           ; BSR set to: 0
  7685  0114AA  0100               	movlb	0	; () banked
  7686  0114AC  51B9               	movf	CDCTxService@i& (0+255),w,b
  7687  0114AE  E001               	bz	l10801
  7688  0114B0  D7DF               	goto	l10791
  7689  0114B2                     l10801:
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;usb_device_cdc.c: 979: }
  7693                           ;usb_device_cdc.c: 980: }
  7694                           ;usb_device_cdc.c: 986: if(cdc_tx_len == 0)
  7695  0114B2  0100               	movlb	0	; () banked
  7696  0114B4  519C               	movf	_cdc_tx_len& (0+255),w,b
  7697  0114B6  E106               	bnz	l10809
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;usb_device_cdc.c: 987: {
  7701                           ;usb_device_cdc.c: 988: if(byte_to_send == 64)
  7702  0114B8  0E40               	movlw	64
  7703  0114BA  19BA               	xorwf	CDCTxService@byte_to_send& (0+255),w,b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;usb_device_cdc.c: 989: cdc_trf_state = 2;
  7707  0114BC  0E02               	movlw	2
  7708  0114BE  A4D8               	btfss	status,2,c
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;usb_device_cdc.c: 990: else
  7712                           ;usb_device_cdc.c: 991: cdc_trf_state = 3;
  7713  0114C0  0E03               	movlw	3
  7714                           
  7715                           ; BSR set to: 0
  7716  0114C2  6F9B               	movwf	_cdc_trf_state& (0+255),b
  7717  0114C4                     l10809:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;usb_device_cdc.c: 992: }
  7721                           ;usb_device_cdc.c: 993: CDCDataInHandle = USBTransferOnePacket(2,1,(uint8_t*)&cdc_data_t
      +                          x,byte_to_send);
  7722  0114C4  0E01               	movlw	1
  7723  0114C6  0100               	movlb	0	; () banked
  7724  0114C8  6FAE               	movwf	USBTransferOnePacket@dir& (0+255),b
  7725  0114CA  0EA8               	movlw	low _cdc_data_tx
  7726  0114CC  6FAF               	movwf	USBTransferOnePacket@data& (0+255),b
  7727  0114CE  0E02               	movlw	high _cdc_data_tx
  7728  0114D0  6FB0               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
  7729  0114D2  C0BA  F0B1         	movff	CDCTxService@byte_to_send,USBTransferOnePacket@len
  7730  0114D6  0E02               	movlw	2
  7731  0114D8  ECB5  F090         	call	_USBTransferOnePacket
  7732  0114DC  C0AE  F083         	movff	?_USBTransferOnePacket,_CDCDataInHandle
  7733  0114E0  C0AF  F084         	movff	?_USBTransferOnePacket+1,_CDCDataInHandle+1
  7734  0114E4                     l10811:
  7735                           
  7736                           ;usb_device_cdc.c: 995: }
  7737                           ;usb_device_cdc.c: 997: {PIE2bits.USBIE = 1;};
  7738  0114E4  88A0               	bsf	4000,4,c	;volatile
  7739  0114E6  0012               	return		;funcret
  7740  0114E8                     __end_of_CDCTxService:
  7741                           	opt stack 0
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           indf0	equ	0xFEF
  7750                           postinc0	equ	0xFEE
  7751                           fsr0h	equ	0xFEA
  7752                           fsr0l	equ	0xFE9
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _USBTransferOnePacket *****************
  7766 ;; Defined at:
  7767 ;;		line 995 in file "Library/USB/src/usb_device.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  ep              1    wreg     unsigned char 
  7770 ;;  dir             1    0[BANK0 ] unsigned char 
  7771 ;;  data            2    1[BANK0 ] PTR unsigned char 
  7772 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
  7773 ;;  len             1    3[BANK0 ] unsigned char 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  ep              1    8[BANK0 ] unsigned char 
  7776 ;;  handle          2    9[BANK0 ] PTR volatile struct __BD
  7777 ;;		 -> RAM(3903), NULL(0), BDT(48), 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  2    0[BANK0 ] PTR void 
  7780 ;; Registers used:
  7781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;Total ram usage:       11 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:   14
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_getsUSBUSART
  7798 ;;		_CDCTxService
  7799 ;;		_USBCDCEventHandler
  7800 ;;		_getUSBUSART_FIFO
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text29
  7805  01216A                     __ptext29:
  7806                           	opt stack 0
  7807  01216A                     _USBTransferOnePacket:
  7808                           	opt stack 12
  7809                           
  7810                           ;incstack = 0
  7811                           ;USBTransferOnePacket@ep stored from wreg
  7812  01216A  0100               	movlb	0	; () banked
  7813  01216C  6FB6               	movwf	USBTransferOnePacket@ep& (0+255),b
  7814                           
  7815                           ;usb_device.c: 997: volatile BDT_ENTRY* handle;
  7816                           ;usb_device.c: 1000: if(dir != 0)
  7817  01216E  51AE               	movf	USBTransferOnePacket@dir& (0+255),w,b
  7818  012170  E007               	bz	l10139
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;usb_device.c: 1001: {
  7822                           ;usb_device.c: 1003: handle = pBDTEntryIn[ep];
  7823  012172  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7824  012174  0D02               	mullw	2
  7825  012176  0E6F               	movlw	low _pBDTEntryIn
  7826  012178  24F3               	addwf	prodl,w,c
  7827  01217A  6ED9               	movwf	fsr2l,c
  7828  01217C  0E00               	movlw	high _pBDTEntryIn
  7829  01217E  D007               	goto	L4
  7830  012180                     l10139:
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;usb_device.c: 1005: else
  7834                           ;usb_device.c: 1006: {
  7835                           ;usb_device.c: 1008: handle = pBDTEntryOut[ep];
  7836  012180  0100               	movlb	0	; () banked
  7837  012182  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7838  012184  0D02               	mullw	2
  7839  012186  0E75               	movlw	low _pBDTEntryOut
  7840  012188  24F3               	addwf	prodl,w,c
  7841  01218A  6ED9               	movwf	fsr2l,c
  7842  01218C  0E00               	movlw	high _pBDTEntryOut
  7843  01218E                     L4:
  7844  01218E  20F4               	addwfc	prodh,w,c
  7845  012190  6EDA               	movwf	fsr2h,c
  7846  012192  CFDE F0B7          	movff	postinc2,USBTransferOnePacket@handle
  7847  012196  CFDD F0B8          	movff	postdec2,USBTransferOnePacket@handle+1
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;usb_device.c: 1009: }
  7851                           ;usb_device.c: 1013: if(handle == 0)
  7852                           
  7853                           ; BSR set to: 0
  7854  01219A  0100               	movlb	0	; () banked
  7855  01219C  51B7               	movf	USBTransferOnePacket@handle& (0+255),w,b
  7856  01219E  11B8               	iorwf	(USBTransferOnePacket@handle+1)& (0+255),w,b
  7857  0121A0  E103               	bnz	l10147
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;usb_device.c: 1014: {
  7861                           ;usb_device.c: 1015: return 0;
  7862  0121A2  6BAE               	clrf	?_USBTransferOnePacket& (0+255),b
  7863  0121A4  6BAF               	clrf	(?_USBTransferOnePacket+1)& (0+255),b
  7864                           
  7865                           ; BSR set to: 0
  7866  0121A6  0C00               	retlw	0
  7867  0121A8                     l10147:
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;usb_device.c: 1016: }
  7871                           ;usb_device.c: 1029: handle->ADR = ((uint16_t)(data));
  7872  0121A8  0100               	movlb	0	; () banked
  7873  0121AA  EE20 F002          	lfsr	2,2
  7874  0121AE  51B7               	movf	USBTransferOnePacket@handle& (0+255),w,b
  7875  0121B0  26D9               	addwf	fsr2l,f,c
  7876  0121B2  51B8               	movf	(USBTransferOnePacket@handle+1)& (0+255),w,b
  7877  0121B4  22DA               	addwfc	fsr2h,f,c
  7878  0121B6  C0AF  FFDE         	movff	USBTransferOnePacket@data,postinc2
  7879  0121BA  C0B0  FFDD         	movff	USBTransferOnePacket@data+1,postdec2
  7880                           
  7881                           ;usb_device.c: 1030: handle->CNT = len;
  7882  0121BE  EE20 F001          	lfsr	2,1
  7883  0121C2  51B7               	movf	USBTransferOnePacket@handle& (0+255),w,b
  7884  0121C4  26D9               	addwf	fsr2l,f,c
  7885  0121C6  51B8               	movf	(USBTransferOnePacket@handle+1)& (0+255),w,b
  7886  0121C8  22DA               	addwfc	fsr2h,f,c
  7887  0121CA  C0B1  FFDF         	movff	USBTransferOnePacket@len,indf2
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;usb_device.c: 1031: handle->STAT.Val &= 0x40;
  7891  0121CE  C0B7  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
  7892  0121D2  C0B8  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
  7893  0121D6  0E40               	movlw	64
  7894  0121D8  16DF               	andwf	indf2,f,c
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;usb_device.c: 1032: handle->STAT.Val |= (0x08 & 0x08);
  7898  0121DA  C0B7  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
  7899  0121DE  C0B8  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
  7900  0121E2  0E00               	movlw	0
  7901  0121E4  86DB               	bsf	plusw2,3,c
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;usb_device.c: 1033: handle->STAT.Val |= 0x80;
  7905  0121E6  C0B7  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
  7906  0121EA  C0B8  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
  7907  0121EE  8EDB               	bsf	plusw2,7,c
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;usb_device.c: 1036: if(dir != 0)
  7911  0121F0  51AE               	movf	USBTransferOnePacket@dir& (0+255),w,b
  7912  0121F2  E018               	bz	l10159
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;usb_device.c: 1037: {
  7916                           ;usb_device.c: 1039: pBDTEntryIn[ep] = (BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[ep]) ^ 0x000
      +                          4);
  7917  0121F4  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7918  0121F6  0D02               	mullw	2
  7919  0121F8  0E6F               	movlw	low _pBDTEntryIn
  7920  0121FA  24F3               	addwf	prodl,w,c
  7921  0121FC  6ED9               	movwf	fsr2l,c
  7922  0121FE  0E00               	movlw	high _pBDTEntryIn
  7923  012200  20F4               	addwfc	prodh,w,c
  7924  012202  6EDA               	movwf	fsr2h,c
  7925  012204  CFDE F0B2          	movff	postinc2,??_USBTransferOnePacket
  7926  012208  CFDD F0B3          	movff	postdec2,??_USBTransferOnePacket+1
  7927  01220C  0E04               	movlw	4
  7928  01220E  19B2               	xorwf	??_USBTransferOnePacket& (0+255),w,b
  7929  012210  6FB4               	movwf	(??_USBTransferOnePacket+2)& (0+255),b
  7930  012212  51B3               	movf	(??_USBTransferOnePacket+1)& (0+255),w,b
  7931  012214  6FB5               	movwf	(??_USBTransferOnePacket+3)& (0+255),b
  7932  012216  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7933  012218  0D02               	mullw	2
  7934  01221A  0E6F               	movlw	low _pBDTEntryIn
  7935  01221C  24F3               	addwf	prodl,w,c
  7936  01221E  6ED9               	movwf	fsr2l,c
  7937  012220  0E00               	movlw	high _pBDTEntryIn
  7938  012222  D018               	goto	L5
  7939  012224                     l10159:
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;usb_device.c: 1041: else
  7943                           ;usb_device.c: 1042: {
  7944                           ;usb_device.c: 1044: pBDTEntryOut[ep] = (BDT_ENTRY*)(((uintptr_t)pBDTEntryOut[ep]) ^ 0x0
      +                          004);
  7945  012224  0100               	movlb	0	; () banked
  7946  012226  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7947  012228  0D02               	mullw	2
  7948  01222A  0E75               	movlw	low _pBDTEntryOut
  7949  01222C  24F3               	addwf	prodl,w,c
  7950  01222E  6ED9               	movwf	fsr2l,c
  7951  012230  0E00               	movlw	high _pBDTEntryOut
  7952  012232  20F4               	addwfc	prodh,w,c
  7953  012234  6EDA               	movwf	fsr2h,c
  7954  012236  CFDE F0B2          	movff	postinc2,??_USBTransferOnePacket
  7955  01223A  CFDD F0B3          	movff	postdec2,??_USBTransferOnePacket+1
  7956  01223E  0E04               	movlw	4
  7957  012240  19B2               	xorwf	??_USBTransferOnePacket& (0+255),w,b
  7958  012242  6FB4               	movwf	(??_USBTransferOnePacket+2)& (0+255),b
  7959  012244  51B3               	movf	(??_USBTransferOnePacket+1)& (0+255),w,b
  7960  012246  6FB5               	movwf	(??_USBTransferOnePacket+3)& (0+255),b
  7961  012248  51B6               	movf	USBTransferOnePacket@ep& (0+255),w,b
  7962  01224A  0D02               	mullw	2
  7963  01224C  0E75               	movlw	low _pBDTEntryOut
  7964  01224E  24F3               	addwf	prodl,w,c
  7965  012250  6ED9               	movwf	fsr2l,c
  7966  012252  0E00               	movlw	high _pBDTEntryOut
  7967  012254                     L5:
  7968  012254  20F4               	addwfc	prodh,w,c
  7969  012256  6EDA               	movwf	fsr2h,c
  7970  012258  C0B4  FFDE         	movff	??_USBTransferOnePacket+2,postinc2
  7971  01225C  C0B5  FFDD         	movff	??_USBTransferOnePacket+3,postdec2
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;usb_device.c: 1045: }
  7975                           ;usb_device.c: 1046: return (void*)handle;
  7976                           
  7977                           ; BSR set to: 0
  7978  012260  C0B7  F0AE         	movff	USBTransferOnePacket@handle,?_USBTransferOnePacket
  7979  012264  C0B8  F0AF         	movff	USBTransferOnePacket@handle+1,?_USBTransferOnePacket+1
  7980  012268  0012               	return	
  7981  01226A                     __end_of_USBTransferOnePacket:
  7982                           	opt stack 0
  7983                           tblptru	equ	0xFF8
  7984                           tblptrh	equ	0xFF7
  7985                           tblptrl	equ	0xFF6
  7986                           tablat	equ	0xFF5
  7987                           prodh	equ	0xFF4
  7988                           prodl	equ	0xFF3
  7989                           intcon	equ	0xFF2
  7990                           indf0	equ	0xFEF
  7991                           postinc0	equ	0xFEE
  7992                           fsr0h	equ	0xFEA
  7993                           fsr0l	equ	0xFE9
  7994                           wreg	equ	0xFE8
  7995                           indf1	equ	0xFE7
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           plusw2	equ	0xFDB
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _FunctMotor *****************
  8008 ;; Defined at:
  8009 ;;		line 187 in file "Functions.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;Total ram usage:        0 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:   17
  8030 ;; This function calls:
  8031 ;;		_MXK_BlockSwitchTo
  8032 ;;		_MXK_Release
  8033 ;;		_Motor_Speed
  8034 ;;		___wmul
  8035 ;; This function is called by:
  8036 ;;		_main
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text30
  8041  013EC4                     __ptext30:
  8042                           	opt stack 0
  8043  013EC4                     _FunctMotor:
  8044                           	opt stack 13
  8045                           
  8046                           ;Functions.c: 189: if (MXK_BlockSwitchTo(eMXK_Motor))
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;incstack = 0
  8050  013EC4  0E0F               	movlw	15
  8051  013EC6  EC48  F0A5         	call	_MXK_BlockSwitchTo
  8052  013ECA  0900               	iorlw	0
  8053  013ECC  E102 EF4C  F0A8    	bz	_MXK_Release
  8054                           
  8055                           ;Functions.c: 190: {
  8056                           ;Functions.c: 192: Hz = u*500;
  8057  013ED2  C0A3  F0AE         	movff	_u,___wmul@multiplier
  8058  013ED6  0100               	movlb	0	; () banked
  8059  013ED8  6BAF               	clrf	(___wmul@multiplier+1)& (0+255),b
  8060  013EDA  0E01               	movlw	1
  8061  013EDC  6FB1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8062  013EDE  0EF4               	movlw	244
  8063  013EE0  6FB0               	movwf	___wmul@multiplicand& (0+255),b
  8064  013EE2  ECF2  F0A6         	call	___wmul	;wreg free
  8065  013EE6  C0AE  F0F8         	movff	?___wmul,_Hz
  8066  013EEA  C0AF  F0F9         	movff	?___wmul+1,_Hz+1
  8067                           
  8068                           ;Functions.c: 193: if (Hz != HzOld)
  8069  013EEE  0101               	movlb	1	; () banked
  8070  013EF0  512F               	movf	_HzOld& (0+255),w,b
  8071  013EF2  0100               	movlb	0	; () banked
  8072  013EF4  19F8               	xorwf	_Hz& (0+255),w,b
  8073  013EF6  E105               	bnz	u9820
  8074  013EF8  0101               	movlb	1	; () banked
  8075  013EFA  5130               	movf	(_HzOld+1)& (0+255),w,b
  8076  013EFC  0100               	movlb	0	; () banked
  8077  013EFE  19F9               	xorwf	(_Hz+1)& (0+255),w,b
  8078  013F00  E00B               	bz	l12911
  8079  013F02                     u9820:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;Functions.c: 194: Motor_Speed(&Stepper, Hz);
  8083  013F02  0EDA               	movlw	low _Stepper
  8084  013F04  0100               	movlb	0	; () banked
  8085  013F06  6FC9               	movwf	Motor_Speed@pMotor& (0+255),b
  8086  013F08  0E01               	movlw	high _Stepper
  8087  013F0A  6FCA               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  8088  013F0C  C0F8  F0CB         	movff	_Hz,Motor_Speed@pFrequency
  8089  013F10  C0F9  F0CC         	movff	_Hz+1,Motor_Speed@pFrequency+1
  8090  013F14  EC06  F0A7         	call	_Motor_Speed	;wreg free
  8091  013F18                     l12911:
  8092                           
  8093                           ;Functions.c: 195: HzOld = Hz;
  8094  013F18  C0F8  F12F         	movff	_Hz,_HzOld
  8095  013F1C  C0F9  F130         	movff	_Hz+1,_HzOld+1
  8096  013F20  EF4C  F0A8         	goto	_MXK_Release
  8097  013F24                     __end_of_FunctMotor:
  8098                           	opt stack 0
  8099                           tblptru	equ	0xFF8
  8100                           tblptrh	equ	0xFF7
  8101                           tblptrl	equ	0xFF6
  8102                           tablat	equ	0xFF5
  8103                           prodh	equ	0xFF4
  8104                           prodl	equ	0xFF3
  8105                           intcon	equ	0xFF2
  8106                           indf0	equ	0xFEF
  8107                           postinc0	equ	0xFEE
  8108                           fsr0h	equ	0xFEA
  8109                           fsr0l	equ	0xFE9
  8110                           wreg	equ	0xFE8
  8111                           indf1	equ	0xFE7
  8112                           postdec1	equ	0xFE5
  8113                           fsr1h	equ	0xFE2
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           plusw2	equ	0xFDB
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _Motor_Speed *****************
  8124 ;; Defined at:
  8125 ;;		line 115 in file "Motor.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8128 ;;		 -> Stepper(6), 
  8129 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      unsigned char 
  8134 ;; Registers used:
  8135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;Total ram usage:        4 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:   16
  8148 ;; This function calls:
  8149 ;;		_Timer0_Init
  8150 ;; This function is called by:
  8151 ;;		_FunctMotor
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text31
  8156  014E0C                     __ptext31:
  8157                           	opt stack 0
  8158  014E0C                     _Motor_Speed:
  8159                           	opt stack 13
  8160                           
  8161                           ;Motor.c: 117: gMotor->mFrequency = pFrequency;
  8162                           
  8163                           ;incstack = 0
  8164  014E0C  EE20 F002          	lfsr	2,2
  8165  014E10  503C               	movf	_gMotor,w,c
  8166  014E12  26D9               	addwf	fsr2l,f,c
  8167  014E14  503D               	movf	_gMotor+1,w,c
  8168  014E16  22DA               	addwfc	fsr2h,f,c
  8169  014E18  C0CB  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8170  014E1C  C0CC  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8171                           
  8172                           ;Motor.c: 118: Timer0_Init(pFrequency);
  8173  014E20  C0CB  F0BB         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8174  014E24  C0CC  F0BC         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8175  014E28  0100               	movlb	0	; () banked
  8176  014E2A  6BBD               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8177  014E2C  6BBE               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8178  014E2E  EF74  F08A         	goto	_Timer0_Init	;wreg free
  8179  014E32                     __end_of_Motor_Speed:
  8180                           	opt stack 0
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           indf0	equ	0xFEF
  8189                           postinc0	equ	0xFEE
  8190                           fsr0h	equ	0xFEA
  8191                           fsr0l	equ	0xFE9
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           plusw2	equ	0xFDB
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function _FunctInitUSB *****************
  8206 ;; Defined at:
  8207 ;;		line 136 in file "Functions.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:   17
  8228 ;; This function calls:
  8229 ;;		_USB_Init
  8230 ;; This function is called by:
  8231 ;;		_main
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text32
  8236  0150B0                     __ptext32:
  8237                           	opt stack 0
  8238  0150B0                     _FunctInitUSB:
  8239                           	opt stack 13
  8240                           
  8241                           ;Functions.c: 138: USB_Init();
  8242                           
  8243                           ;incstack = 0
  8244  0150B0  EF94  F0A7         	goto	_USB_Init	;wreg free
  8245  0150B4                     __end_of_FunctInitUSB:
  8246                           	opt stack 0
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           intcon	equ	0xFF2
  8254                           indf0	equ	0xFEF
  8255                           postinc0	equ	0xFEE
  8256                           fsr0h	equ	0xFEA
  8257                           fsr0l	equ	0xFE9
  8258                           wreg	equ	0xFE8
  8259                           indf1	equ	0xFE7
  8260                           postdec1	equ	0xFE5
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           plusw2	equ	0xFDB
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _USB_Init *****************
  8272 ;; Defined at:
  8273 ;;		line 15 in file "USB_Wrap.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;		None
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;Total ram usage:        0 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:   16
  8294 ;; This function calls:
  8295 ;;		_USBDeviceAttach
  8296 ;;		_USBDeviceInit
  8297 ;; This function is called by:
  8298 ;;		_FunctInitUSB
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           	psect	text33
  8303  014F28                     __ptext33:
  8304                           	opt stack 0
  8305  014F28                     _USB_Init:
  8306                           	opt stack 13
  8307                           
  8308                           ;USB_Wrap.c: 17: line_coding.bCharFormat = 0;
  8309                           
  8310                           ;incstack = 0
  8311  014F28  0101               	movlb	1	; () banked
  8312  014F2A  6BD1               	clrf	(_line_coding+4)& (0+255),b
  8313                           
  8314                           ;USB_Wrap.c: 18: line_coding.bDataBits = 8;
  8315  014F2C  0E08               	movlw	8
  8316  014F2E  6FD3               	movwf	(_line_coding+6)& (0+255),b
  8317                           
  8318                           ;USB_Wrap.c: 19: line_coding.bParityType = 0;
  8319  014F30  6BD2               	clrf	(_line_coding+5)& (0+255),b
  8320                           
  8321                           ;USB_Wrap.c: 20: line_coding.dwDTERate = 9600;
  8322  014F32  0E80               	movlw	128
  8323  014F34  6FCD               	movwf	_line_coding& (0+255),b
  8324  014F36  0E25               	movlw	37
  8325  014F38  6FCE               	movwf	(_line_coding+1)& (0+255),b
  8326  014F3A  6BCF               	clrf	(_line_coding+2)& (0+255),b
  8327  014F3C  6BD0               	clrf	(_line_coding+3)& (0+255),b
  8328                           
  8329                           ; BSR set to: 1
  8330                           ;USB_Wrap.c: 22: USBDeviceInit();
  8331  014F3E  EC08  F08E         	call	_USBDeviceInit	;wreg free
  8332                           
  8333                           ;USB_Wrap.c: 23: USBDeviceAttach();
  8334  014F42  EFC0  F0A5         	goto	_USBDeviceAttach	;wreg free
  8335  014F46                     __end_of_USB_Init:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           intcon	equ	0xFF2
  8344                           indf0	equ	0xFEF
  8345                           postinc0	equ	0xFEE
  8346                           fsr0h	equ	0xFEA
  8347                           fsr0l	equ	0xFE9
  8348                           wreg	equ	0xFE8
  8349                           indf1	equ	0xFE7
  8350                           postdec1	equ	0xFE5
  8351                           fsr1h	equ	0xFE2
  8352                           fsr1l	equ	0xFE1
  8353                           indf2	equ	0xFDF
  8354                           postinc2	equ	0xFDE
  8355                           postdec2	equ	0xFDD
  8356                           plusw2	equ	0xFDB
  8357                           fsr2h	equ	0xFDA
  8358                           fsr2l	equ	0xFD9
  8359                           status	equ	0xFD8
  8360                           
  8361 ;; *************** function _USBDeviceInit *****************
  8362 ;; Defined at:
  8363 ;;		line 277 in file "Library/USB/src/usb_device.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;		None
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  i               1    8[BANK0 ] unsigned char 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      void 
  8370 ;; Registers used:
  8371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;Total ram usage:        1 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:   15
  8384 ;; This function calls:
  8385 ;;		_memset
  8386 ;; This function is called by:
  8387 ;;		_USB_Init
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           	psect	text34
  8392  011C10                     __ptext34:
  8393                           	opt stack 0
  8394  011C10                     _USBDeviceInit:
  8395                           	opt stack 13
  8396                           
  8397                           ;usb_device.c: 279: uint8_t i;
  8398                           ;usb_device.c: 281: {PIE2bits.USBIE = 0;};
  8399                           
  8400                           ;incstack = 0
  8401  011C10  98A0               	bcf	4000,4,c	;volatile
  8402                           
  8403                           ;usb_device.c: 285: TRISFbits.RF5=1;;
  8404  011C12  8A97               	bsf	3991,5,c	;volatile
  8405                           
  8406                           ;usb_device.c: 288: {UEIR = 0;};
  8407  011C14  6A63               	clrf	3939,c	;volatile
  8408                           
  8409                           ;usb_device.c: 291: {UIR = 0;};
  8410  011C16  6A62               	clrf	3938,c	;volatile
  8411                           
  8412                           ;usb_device.c: 294: UEP0 = 0;
  8413  011C18  010F               	movlb	15	; () banked
  8414  011C1A  6B4C               	clrf	76,b	;volatile
  8415                           
  8416                           ; BSR set to: 15
  8417                           ;usb_device.c: 296: memset((void*)&UEP1,0x00,(2));;
  8418  011C1C  0E4D               	movlw	77
  8419  011C1E  0100               	movlb	0	; () banked
  8420  011C20  6FAE               	movwf	memset@p1& (0+255),b
  8421  011C22  0E0F               	movlw	15
  8422  011C24  6FAF               	movwf	(memset@p1+1)& (0+255),b
  8423  011C26  6BB1               	clrf	(memset@c+1)& (0+255),b
  8424  011C28  6BB0               	clrf	memset@c& (0+255),b
  8425  011C2A  6BB3               	clrf	(memset@n+1)& (0+255),b
  8426  011C2C  0E02               	movlw	2
  8427  011C2E  6FB2               	movwf	memset@n& (0+255),b
  8428  011C30  ECA9  F0A5         	call	_memset	;wreg free
  8429                           
  8430                           ;usb_device.c: 298: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8431  011C34  0E16               	movlw	22
  8432  011C36  010F               	movlb	15	; () banked
  8433  011C38  6F5F               	movwf	95,b	;volatile
  8434                           
  8435                           ; BSR set to: 15
  8436  011C3A  0E9F               	movlw	159
  8437  011C3C  6F5D               	movwf	93,b	;volatile
  8438                           
  8439                           ; BSR set to: 15
  8440  011C3E  0E7B               	movlw	123
  8441  011C40  6F5C               	movwf	92,b	;volatile
  8442                           
  8443                           ; BSR set to: 15
  8444                           ;usb_device.c: 301: ;
  8445                           ;usb_device.c: 304: ;
  8446                           ;usb_device.c: 307: for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  8447  011C42  0100               	movlb	0	; () banked
  8448  011C44  6BB6               	clrf	USBDeviceInit@i& (0+255),b
  8449  011C46                     l11217:
  8450                           
  8451                           ; BSR set to: 0
  8452  011C46  0E0B               	movlw	11
  8453  011C48  0100               	movlb	0	; () banked
  8454  011C4A  65B6               	cpfsgt	USBDeviceInit@i& (0+255),b
  8455  011C4C  D001               	goto	l11221
  8456  011C4E  D00F               	goto	l142
  8457  011C50                     l11221:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;usb_device.c: 308: {
  8461                           ;usb_device.c: 309: BDT[i].Val = 0x00;
  8462  011C50  0100               	movlb	0	; () banked
  8463  011C52  51B6               	movf	USBDeviceInit@i& (0+255),w,b
  8464  011C54  0D04               	mullw	4
  8465  011C56  0E00               	movlw	0
  8466  011C58  24F3               	addwf	prodl,w,c
  8467  011C5A  6ED9               	movwf	fsr2l,c
  8468  011C5C  0E04               	movlw	4
  8469  011C5E  20F4               	addwfc	prodh,w,c
  8470  011C60  6EDA               	movwf	fsr2h,c
  8471  011C62  6ADE               	clrf	postinc2,c
  8472  011C64  6ADE               	clrf	postinc2,c
  8473  011C66  6ADE               	clrf	postinc2,c
  8474  011C68  6ADD               	clrf	postdec2,c
  8475                           
  8476                           ; BSR set to: 0
  8477  011C6A  2BB6               	incf	USBDeviceInit@i& (0+255),f,b
  8478  011C6C  D7EC               	goto	l11217
  8479  011C6E                     l142:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;usb_device.c: 310: }
  8483                           ;usb_device.c: 313: UCONbits.PPBRST = 1;
  8484  011C6E  8C65               	bsf	3941,6,c	;volatile
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;usb_device.c: 316: UADDR = 0x00;
  8488  011C70  010F               	movlb	15	; () banked
  8489  011C72  6B5E               	clrf	94,b	;volatile
  8490                           
  8491                           ; BSR set to: 15
  8492                           ;usb_device.c: 319: UCONbits.PKTDIS = 0;
  8493  011C74  9865               	bcf	3941,4,c	;volatile
  8494                           
  8495                           ; BSR set to: 15
  8496                           ;usb_device.c: 322: UCONbits.PPBRST = 0;
  8497  011C76  9C65               	bcf	3941,6,c	;volatile
  8498  011C78                     l11233:
  8499                           
  8500                           ;usb_device.c: 326: {
  8501                           ;usb_device.c: 327: (UIR &= 0xF7);
  8502  011C78  9662               	bcf	3938,3,c	;volatile
  8503                           
  8504                           ;usb_device.c: 329: inPipes[0].info.Val = 0;
  8505  011C7A  0100               	movlb	0	; () banked
  8506  011C7C  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;usb_device.c: 330: outPipes[0].info.Val = 0;
  8510  011C7E  6B63               	clrf	(_outPipes+3)& (0+255),b	;volatile
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;usb_device.c: 331: outPipes[0].wCount.Val = 0;
  8514  011C80  6B65               	clrf	(_outPipes+5)& (0+255),b	;volatile
  8515  011C82  6B64               	clrf	(_outPipes+4)& (0+255),b	;volatile
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;usb_device.c: 332: }while(UIRbits.TRNIF == 1);
  8519  011C84  B662               	btfsc	3938,3,c	;volatile
  8520  011C86  D7F8               	goto	l11233
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;usb_device.c: 336: USBStatusStageEnabledFlag1 = 1;
  8524                           
  8525                           ; BSR set to: 0
  8526  011C88  0E01               	movlw	1
  8527  011C8A  6E4A               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
  8528                           
  8529                           ;usb_device.c: 337: USBStatusStageEnabledFlag2 = 1;
  8530  011C8C  6E4B               	movwf	_USBStatusStageEnabledFlag2,c	;volatile
  8531                           
  8532                           ;usb_device.c: 339: USBDeferINDataStagePackets = 0;
  8533  011C8E  6A46               	clrf	_USBDeferINDataStagePackets,c	;volatile
  8534                           
  8535                           ;usb_device.c: 340: USBDeferOUTDataStagePackets = 0;
  8536  011C90  6A47               	clrf	_USBDeferOUTDataStagePackets,c	;volatile
  8537                           
  8538                           ;usb_device.c: 341: USBBusIsSuspended = 0;
  8539  011C92  6B97               	clrf	_USBBusIsSuspended& (0+255),b	;volatile
  8540                           
  8541                           ;usb_device.c: 345: for(i = 0; i < (uint8_t)(2+1u); i++)
  8542  011C94  6BB6               	clrf	USBDeviceInit@i& (0+255),b
  8543  011C96                     l11245:
  8544                           
  8545                           ; BSR set to: 0
  8546  011C96  0E02               	movlw	2
  8547  011C98  0100               	movlb	0	; () banked
  8548  011C9A  65B6               	cpfsgt	USBDeviceInit@i& (0+255),b
  8549  011C9C  D001               	goto	l11249
  8550  011C9E  D029               	goto	l11255
  8551  011CA0                     l11249:
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;usb_device.c: 346: {
  8555                           ;usb_device.c: 347: pBDTEntryIn[i] = 0u;
  8556  011CA0  0100               	movlb	0	; () banked
  8557  011CA2  51B6               	movf	USBDeviceInit@i& (0+255),w,b
  8558  011CA4  0D02               	mullw	2
  8559  011CA6  0E6F               	movlw	low _pBDTEntryIn
  8560  011CA8  24F3               	addwf	prodl,w,c
  8561  011CAA  6ED9               	movwf	fsr2l,c
  8562  011CAC  0E00               	movlw	high _pBDTEntryIn
  8563  011CAE  20F4               	addwfc	prodh,w,c
  8564  011CB0  6EDA               	movwf	fsr2h,c
  8565  011CB2  6ADE               	clrf	postinc2,c
  8566  011CB4  6ADD               	clrf	postdec2,c
  8567                           
  8568                           ;usb_device.c: 348: pBDTEntryOut[i] = 0u;
  8569  011CB6  51B6               	movf	USBDeviceInit@i& (0+255),w,b
  8570  011CB8  0D02               	mullw	2
  8571  011CBA  0E75               	movlw	low _pBDTEntryOut
  8572  011CBC  24F3               	addwf	prodl,w,c
  8573  011CBE  6ED9               	movwf	fsr2l,c
  8574  011CC0  0E00               	movlw	high _pBDTEntryOut
  8575  011CC2  20F4               	addwfc	prodh,w,c
  8576  011CC4  6EDA               	movwf	fsr2h,c
  8577  011CC6  6ADE               	clrf	postinc2,c
  8578  011CC8  6ADD               	clrf	postdec2,c
  8579                           
  8580                           ;usb_device.c: 349: ep_data_in[i].Val = 0u;
  8581  011CCA  51B6               	movf	USBDeviceInit@i& (0+255),w,b
  8582  011CCC  0D01               	mullw	1
  8583  011CCE  0E7B               	movlw	low _ep_data_in
  8584  011CD0  24F3               	addwf	prodl,w,c
  8585  011CD2  6ED9               	movwf	fsr2l,c
  8586  011CD4  0E00               	movlw	high _ep_data_in
  8587  011CD6  20F4               	addwfc	prodh,w,c
  8588  011CD8  6EDA               	movwf	fsr2h,c
  8589  011CDA  6ADF               	clrf	indf2,c
  8590                           
  8591                           ;usb_device.c: 350: ep_data_out[i].Val = 0u;
  8592  011CDC  51B6               	movf	USBDeviceInit@i& (0+255),w,b
  8593  011CDE  0D01               	mullw	1
  8594  011CE0  0E7E               	movlw	low _ep_data_out
  8595  011CE2  24F3               	addwf	prodl,w,c
  8596  011CE4  6ED9               	movwf	fsr2l,c
  8597  011CE6  0E00               	movlw	high _ep_data_out
  8598  011CE8  20F4               	addwfc	prodh,w,c
  8599  011CEA  6EDA               	movwf	fsr2h,c
  8600  011CEC  6ADF               	clrf	indf2,c
  8601                           
  8602                           ; BSR set to: 0
  8603  011CEE  2BB6               	incf	USBDeviceInit@i& (0+255),f,b
  8604  011CF0  D7D2               	goto	l11245
  8605  011CF2                     l11255:
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;usb_device.c: 351: }
  8609                           ;usb_device.c: 354: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  8610  011CF2  0E08               	movlw	8
  8611  011CF4  0100               	movlb	0	; () banked
  8612  011CF6  6F6F               	movwf	_pBDTEntryIn& (0+255),b
  8613  011CF8  0E04               	movlw	4
  8614  011CFA  6F70               	movwf	(_pBDTEntryIn+1)& (0+255),b
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;usb_device.c: 356: UEP0 = 0x06|0x10;
  8618  011CFC  0E16               	movlw	22
  8619  011CFE  010F               	movlb	15	; () banked
  8620  011D00  6F4C               	movwf	76,b	;volatile
  8621                           
  8622                           ; BSR set to: 15
  8623                           ;usb_device.c: 358: BDT[0].ADR = ((uint16_t)(&SetupPkt));
  8624  011D02  0E04               	movlw	4
  8625  011D04  0104               	movlb	4	; () banked
  8626  011D06  6F03               	movwf	3,b	;volatile
  8627  011D08  0E30               	movlw	48
  8628  011D0A  6F02               	movwf	2,b	;volatile
  8629                           
  8630                           ; BSR set to: 4
  8631                           ;usb_device.c: 359: BDT[0].CNT = 8;
  8632  011D0C  0E08               	movlw	8
  8633  011D0E  6F01               	movwf	1,b	;volatile
  8634                           
  8635                           ; BSR set to: 4
  8636                           ;usb_device.c: 360: BDT[0].STAT.Val = 0x00|0x04;
  8637  011D10  0E04               	movlw	4
  8638  011D12  6F00               	movwf	0,b	;volatile
  8639                           
  8640                           ; BSR set to: 4
  8641                           ;usb_device.c: 361: BDT[0].STAT.Val |= 0x80;
  8642  011D14  8F00               	bsf	0,7,b	;volatile
  8643                           
  8644                           ; BSR set to: 4
  8645                           ;usb_device.c: 364: USBActiveConfiguration = 0;
  8646  011D16  6A5B               	clrf	_USBActiveConfiguration,c	;volatile
  8647                           
  8648                           ; BSR set to: 4
  8649                           ;usb_device.c: 366: USB1msTickCount = 0;
  8650  011D18  6A38               	clrf	_USB1msTickCount,c	;volatile
  8651  011D1A  6A39               	clrf	_USB1msTickCount+1,c	;volatile
  8652  011D1C  6A3A               	clrf	_USB1msTickCount+2,c	;volatile
  8653  011D1E  6A3B               	clrf	_USB1msTickCount+3,c	;volatile
  8654                           
  8655                           ; BSR set to: 4
  8656                           ;usb_device.c: 367: USBTicksSinceSuspendEnd = 0;
  8657  011D20  0100               	movlb	0	; () banked
  8658  011D22  6B98               	clrf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;usb_device.c: 370: USBDeviceState = DETACHED_STATE;
  8662  011D24  6A49               	clrf	_USBDeviceState,c	;volatile
  8663                           
  8664                           ; BSR set to: 0
  8665  011D26  0C00               	retlw	0	;funcret
  8666  011D28                     __end_of_USBDeviceInit:
  8667                           	opt stack 0
  8668                           tblptru	equ	0xFF8
  8669                           tblptrh	equ	0xFF7
  8670                           tblptrl	equ	0xFF6
  8671                           tablat	equ	0xFF5
  8672                           prodh	equ	0xFF4
  8673                           prodl	equ	0xFF3
  8674                           intcon	equ	0xFF2
  8675                           indf0	equ	0xFEF
  8676                           postinc0	equ	0xFEE
  8677                           fsr0h	equ	0xFEA
  8678                           fsr0l	equ	0xFE9
  8679                           wreg	equ	0xFE8
  8680                           indf1	equ	0xFE7
  8681                           postdec1	equ	0xFE5
  8682                           fsr1h	equ	0xFE2
  8683                           fsr1l	equ	0xFE1
  8684                           indf2	equ	0xFDF
  8685                           postinc2	equ	0xFDE
  8686                           postdec2	equ	0xFDD
  8687                           plusw2	equ	0xFDB
  8688                           fsr2h	equ	0xFDA
  8689                           fsr2l	equ	0xFD9
  8690                           status	equ	0xFD8
  8691                           
  8692 ;; *************** function _memset *****************
  8693 ;; Defined at:
  8694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  p1              2    0[BANK0 ] PTR void 
  8697 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
  8698 ;;  c               2    2[BANK0 ] int 
  8699 ;;  n               2    4[BANK0 ] unsigned int 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  p               2    6[BANK0 ] PTR unsigned char 
  8702 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  2    0[BANK0 ] PTR void 
  8705 ;; Registers used:
  8706 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8712 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;Total ram usage:        8 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:   14
  8719 ;; This function calls:
  8720 ;;		Nothing
  8721 ;; This function is called by:
  8722 ;;		_USBDeviceInit
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           	psect	text35
  8727  014B52                     __ptext35:
  8728                           	opt stack 0
  8729  014B52                     _memset:
  8730                           	opt stack 13
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;incstack = 0
  8734  014B52  C0AE  F0B4         	movff	memset@p1,memset@p
  8735  014B56  C0AF  F0B5         	movff	memset@p1+1,memset@p+1
  8736  014B5A  D009               	goto	l10631
  8737  014B5C                     l10627:
  8738  014B5C  C0B4  FFD9         	movff	memset@p,fsr2l
  8739  014B60  C0B5  FFDA         	movff	memset@p+1,fsr2h
  8740  014B64  C0B0  FFDF         	movff	memset@c,indf2
  8741  014B68  0100               	movlb	0	; () banked
  8742  014B6A  4BB4               	infsnz	memset@p& (0+255),f,b
  8743  014B6C  2BB5               	incf	(memset@p+1)& (0+255),f,b
  8744  014B6E                     l10631:
  8745  014B6E  0100               	movlb	0	; () banked
  8746  014B70  07B2               	decf	memset@n& (0+255),f,b
  8747  014B72  A0D8               	btfss	status,0,c
  8748  014B74  07B3               	decf	(memset@n+1)& (0+255),f,b
  8749  014B76  29B2               	incf	memset@n& (0+255),w,b
  8750  014B78  E1F1               	bnz	l10627
  8751  014B7A  29B3               	incf	(memset@n+1)& (0+255),w,b
  8752  014B7C  E1EF               	bnz	l10627
  8753  014B7E  0012               	return	
  8754  014B80                     __end_of_memset:
  8755                           	opt stack 0
  8756                           tblptru	equ	0xFF8
  8757                           tblptrh	equ	0xFF7
  8758                           tblptrl	equ	0xFF6
  8759                           tablat	equ	0xFF5
  8760                           prodh	equ	0xFF4
  8761                           prodl	equ	0xFF3
  8762                           intcon	equ	0xFF2
  8763                           indf0	equ	0xFEF
  8764                           postinc0	equ	0xFEE
  8765                           fsr0h	equ	0xFEA
  8766                           fsr0l	equ	0xFE9
  8767                           wreg	equ	0xFE8
  8768                           indf1	equ	0xFE7
  8769                           postdec1	equ	0xFE5
  8770                           fsr1h	equ	0xFE2
  8771                           fsr1l	equ	0xFE1
  8772                           indf2	equ	0xFDF
  8773                           postinc2	equ	0xFDE
  8774                           postdec2	equ	0xFDD
  8775                           plusw2	equ	0xFDB
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _USBDeviceAttach *****************
  8781 ;; Defined at:
  8782 ;;		line 1352 in file "Library/USB/src/usb_device.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  1    wreg      void 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;Total ram usage:        0 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:   14
  8803 ;; This function calls:
  8804 ;;		Nothing
  8805 ;; This function is called by:
  8806 ;;		_USB_Init
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text36
  8811  014B80                     __ptext36:
  8812                           	opt stack 0
  8813  014B80                     _USBDeviceAttach:
  8814                           	opt stack 14
  8815                           
  8816                           ;usb_device.c: 1356: {
  8817                           ;usb_device.c: 1357: if(1 == 1)
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;incstack = 0
  8821  014B80  5049               	movf	_USBDeviceState,w,c	;volatile
  8822  014B82  A4D8               	btfss	status,2,c
  8823  014B84  0012               	return	
  8824                           
  8825                           ;usb_device.c: 1358: {
  8826                           ;usb_device.c: 1360: UCON = 0;
  8827  014B86  6A65               	clrf	3941,c	;volatile
  8828                           
  8829                           ;usb_device.c: 1363: UIE = 0;
  8830  014B88  010F               	movlb	15	; () banked
  8831  014B8A  6B5C               	clrf	92,b	;volatile
  8832                           
  8833                           ;usb_device.c: 1367: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 
      +                          | 0x02; };
  8834  014B8C  0E16               	movlw	22
  8835  014B8E  6F5F               	movwf	95,b	;volatile
  8836  014B90  0E9F               	movlw	159
  8837  014B92  6F5D               	movwf	93,b	;volatile
  8838  014B94  0E7B               	movlw	123
  8839  014B96  6F5C               	movwf	92,b	;volatile
  8840                           
  8841                           ; BSR set to: 15
  8842                           ;usb_device.c: 1369: {RCONbits.IPEN = 1;IPR2bits.USBIP = 1;PIE2bits.USBIE = 1;INTCONbits
      +                          .GIEH = 1;};
  8843  014B98  8ED0               	bsf	4048,7,c	;volatile
  8844                           
  8845                           ; BSR set to: 15
  8846  014B9A  88A2               	bsf	4002,4,c	;volatile
  8847                           
  8848                           ; BSR set to: 15
  8849  014B9C  88A0               	bsf	4000,4,c	;volatile
  8850                           
  8851                           ; BSR set to: 15
  8852  014B9E  8EF2               	bsf	intcon,7,c	;volatile
  8853                           
  8854                           ;usb_device.c: 1372: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  8855  014BA0  D001               	goto	l202
  8856  014BA2                     l203:
  8857  014BA2  8665               	bsf	3941,3,c	;volatile
  8858  014BA4                     l202:
  8859  014BA4  A665               	btfss	3941,3,c	;volatile
  8860  014BA6  D7FD               	goto	l203
  8861                           
  8862                           ;usb_device.c: 1375: USBDeviceState = ATTACHED_STATE;
  8863  014BA8  0E01               	movlw	1
  8864  014BAA  6E49               	movwf	_USBDeviceState,c	;volatile
  8865  014BAC  0C01               	retlw	1
  8866  014BAE                     __end_of_USBDeviceAttach:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           indf0	equ	0xFEF
  8876                           postinc0	equ	0xFEE
  8877                           fsr0h	equ	0xFEA
  8878                           fsr0l	equ	0xFE9
  8879                           wreg	equ	0xFE8
  8880                           indf1	equ	0xFE7
  8881                           postdec1	equ	0xFE5
  8882                           fsr1h	equ	0xFE2
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           postdec2	equ	0xFDD
  8887                           plusw2	equ	0xFDB
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _FunctInitMotor *****************
  8893 ;; Defined at:
  8894 ;;		line 50 in file "Functions.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:   20
  8915 ;; This function calls:
  8916 ;;		_MXK_BlockSwitchTo
  8917 ;;		_MXK_Release
  8918 ;;		_Motor_Continious
  8919 ;;		_Motor_Init
  8920 ;;		_Motor_Move
  8921 ;; This function is called by:
  8922 ;;		_main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text37
  8927  014528                     __ptext37:
  8928                           	opt stack 0
  8929  014528                     _FunctInitMotor:
  8930                           	opt stack 10
  8931                           
  8932                           ;Functions.c: 52: if (MXK_BlockSwitchTo(eMXK_Motor))
  8933                           
  8934                           ;incstack = 0
  8935  014528  0E0F               	movlw	15
  8936  01452A  EC48  F0A5         	call	_MXK_BlockSwitchTo
  8937  01452E  0900               	iorlw	0
  8938  014530  B4D8               	btfsc	status,2,c
  8939  014532  0012               	return	
  8940                           
  8941                           ;Functions.c: 53: {
  8942                           ;Functions.c: 55: Motor_Init(&Stepper);
  8943  014534  0EDA               	movlw	low _Stepper
  8944  014536  0100               	movlb	0	; () banked
  8945  014538  6FDB               	movwf	Motor_Init@pMotor& (0+255),b
  8946  01453A  0E01               	movlw	high _Stepper
  8947  01453C  6FDC               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  8948  01453E  EC63  F09C         	call	_Motor_Init	;wreg free
  8949                           
  8950                           ;Functions.c: 56: Motor_Move(&Stepper, 100);
  8951  014542  0EDA               	movlw	low _Stepper
  8952  014544  0100               	movlb	0	; () banked
  8953  014546  6FB1               	movwf	Motor_Move@pMotor& (0+255),b
  8954  014548  0E01               	movlw	high _Stepper
  8955  01454A  6FB2               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  8956  01454C  6BB4               	clrf	(Motor_Move@pDelta+1)& (0+255),b
  8957  01454E  0E64               	movlw	100
  8958  014550  6FB3               	movwf	Motor_Move@pDelta& (0+255),b
  8959  014552  EC18  F0A4         	call	_Motor_Move	;wreg free
  8960                           
  8961                           ;Functions.c: 61: Motor_Continious(&Stepper, 1);
  8962  014556  0EDA               	movlw	low _Stepper
  8963  014558  0100               	movlb	0	; () banked
  8964  01455A  6FAE               	movwf	Motor_Continious@pMotor& (0+255),b
  8965  01455C  0E01               	movlw	high _Stepper
  8966  01455E  6FAF               	movwf	(Motor_Continious@pMotor+1)& (0+255),b
  8967  014560  6BB1               	clrf	(Motor_Continious@pDirection+1)& (0+255),b
  8968  014562  0E01               	movlw	1
  8969  014564  6FB0               	movwf	Motor_Continious@pDirection& (0+255),b
  8970  014566  EC35  F0A4         	call	_Motor_Continious	;wreg free
  8971                           
  8972                           ;Functions.c: 63: MXK_Release();
  8973  01456A  EF4C  F0A8         	goto	_MXK_Release	;wreg free
  8974  01456E                     __end_of_FunctInitMotor:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           intcon	equ	0xFF2
  8983                           indf0	equ	0xFEF
  8984                           postinc0	equ	0xFEE
  8985                           fsr0h	equ	0xFEA
  8986                           fsr0l	equ	0xFE9
  8987                           wreg	equ	0xFE8
  8988                           indf1	equ	0xFE7
  8989                           postdec1	equ	0xFE5
  8990                           fsr1h	equ	0xFE2
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           plusw2	equ	0xFDB
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _Motor_Move *****************
  9001 ;; Defined at:
  9002 ;;		line 60 in file "Motor.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9005 ;;		 -> Stepper(6), 
  9006 ;;  pDelta          2    5[BANK0 ] short 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      unsigned char 
  9011 ;; Registers used:
  9012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;Total ram usage:        6 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:   15
  9025 ;; This function calls:
  9026 ;;		_Timer0_Start
  9027 ;; This function is called by:
  9028 ;;		_FunctInitMotor
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text38
  9033  014830                     __ptext38:
  9034                           	opt stack 0
  9035  014830                     _Motor_Move:
  9036                           	opt stack 14
  9037                           
  9038                           ;Motor.c: 62: gMotor = pMotor;
  9039                           
  9040                           ;incstack = 0
  9041  014830  C0B1  F03C         	movff	Motor_Move@pMotor,_gMotor
  9042  014834  C0B2  F03D         	movff	Motor_Move@pMotor+1,_gMotor+1
  9043                           
  9044                           ;Motor.c: 65: if (pMotor->mDelta != 0)
  9045  014838  C0B1  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9046  01483C  C0B2  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9047  014840  50DE               	movf	postinc2,w,c
  9048  014842  10DE               	iorwf	postinc2,w,c
  9049  014844  E001               	bz	l12199
  9050                           
  9051                           ;Motor.c: 66: return 0;
  9052                           ;	Return value of _Motor_Move is never used
  9053  014846  0012               	return	
  9054  014848                     l12199:
  9055                           
  9056                           ;Motor.c: 70: pMotor->mDelta = pDelta;
  9057  014848  C0B1  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9058  01484C  C0B2  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9059  014850  C0B3  FFDE         	movff	Motor_Move@pDelta,postinc2
  9060  014854  C0B4  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9061                           
  9062                           ;Motor.c: 74: Timer0_Start(Motor_Step);
  9063  014858  0EFE               	movlw	low _Motor_Step
  9064  01485A  0100               	movlb	0	; () banked
  9065  01485C  6FAE               	movwf	Timer0_Start@pFunction& (0+255),b
  9066  01485E  0E2B               	movlw	high _Motor_Step
  9067  014860  6FAF               	movwf	(Timer0_Start@pFunction+1)& (0+255),b
  9068  014862  0E01               	movlw	low (_Motor_Step shr (0+16))
  9069  014864  6FB0               	movwf	(Timer0_Start@pFunction+2)& (0+255),b
  9070  014866  EF19  F0A7         	goto	_Timer0_Start	;wreg free
  9071  01486A                     __end_of_Motor_Move:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           indf0	equ	0xFEF
  9081                           postinc0	equ	0xFEE
  9082                           fsr0h	equ	0xFEA
  9083                           fsr0l	equ	0xFE9
  9084                           wreg	equ	0xFE8
  9085                           indf1	equ	0xFE7
  9086                           postdec1	equ	0xFE5
  9087                           fsr1h	equ	0xFE2
  9088                           fsr1l	equ	0xFE1
  9089                           indf2	equ	0xFDF
  9090                           postinc2	equ	0xFDE
  9091                           postdec2	equ	0xFDD
  9092                           plusw2	equ	0xFDB
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _Timer0_Start *****************
  9098 ;; Defined at:
  9099 ;;		line 74 in file "Timer0.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9102 ;;		 -> Motor_Step(1), 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2, status,0
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9114 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;Total ram usage:        3 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:   14
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_Motor_Move
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text39
  9129  014E32                     __ptext39:
  9130                           	opt stack 0
  9131  014E32                     _Timer0_Start:
  9132                           	opt stack 14
  9133                           
  9134                           ;Timer0.c: 76: gISR = pFunction;
  9135                           
  9136                           ;incstack = 0
  9137  014E32  C0AE  F124         	movff	Timer0_Start@pFunction,_gISR
  9138  014E36  C0AF  F125         	movff	Timer0_Start@pFunction+1,_gISR+1
  9139  014E3A  C0B0  F126         	movff	Timer0_Start@pFunction+2,_gISR+2
  9140                           
  9141                           ;Timer0.c: 77: TMR0 = COUNTER;
  9142  014E3E  C087  FFD6         	movff	_COUNTER,4054	;volatile
  9143  014E42  C088  FFD7         	movff	_COUNTER+1,4055	;volatile
  9144                           
  9145                           ;Timer0.c: 78: T0CONbits.T0PS = INDEX;
  9146  014E46  50D5               	movf	4053,w,c	;volatile
  9147  014E48  0100               	movlb	0	; () banked
  9148  014E4A  1996               	xorwf	_INDEX& (0+255),w,b
  9149  014E4C  0BF8               	andlw	-8
  9150  014E4E  1996               	xorwf	_INDEX& (0+255),w,b
  9151  014E50  6ED5               	movwf	4053,c	;volatile
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;Timer0.c: 79: INTCONbits.TMR0IF = 0;
  9155  014E52  94F2               	bcf	intcon,2,c	;volatile
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;Timer0.c: 80: INTCONbits.TMR0IE = 1;
  9159  014E54  8AF2               	bsf	intcon,5,c	;volatile
  9160                           
  9161                           ; BSR set to: 0
  9162  014E56  0012               	return		;funcret
  9163  014E58                     __end_of_Timer0_Start:
  9164                           	opt stack 0
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           indf0	equ	0xFEF
  9173                           postinc0	equ	0xFEE
  9174                           fsr0h	equ	0xFEA
  9175                           fsr0l	equ	0xFE9
  9176                           wreg	equ	0xFE8
  9177                           indf1	equ	0xFE7
  9178                           postdec1	equ	0xFE5
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           plusw2	equ	0xFDB
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _Motor_Init *****************
  9190 ;; Defined at:
  9191 ;;		line 37 in file "Motor.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  9194 ;;		 -> Stepper(6), 
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;Total ram usage:        2 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:   19
  9213 ;; This function calls:
  9214 ;;		_Port_SetPin
  9215 ;;		_Port_SetPinType
  9216 ;;		_Timer0_Init
  9217 ;; This function is called by:
  9218 ;;		_FunctInitMotor
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text40
  9223  0138C6                     __ptext40:
  9224                           	opt stack 0
  9225  0138C6                     _Motor_Init:
  9226                           	opt stack 10
  9227                           
  9228                           ;Motor.c: 39: pMotor->mDelta = 0;
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;incstack = 0
  9232  0138C6  C0DB  FFD9         	movff	Motor_Init@pMotor,fsr2l
  9233  0138CA  C0DC  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  9234  0138CE  6ADE               	clrf	postinc2,c
  9235  0138D0  6ADD               	clrf	postdec2,c
  9236                           
  9237                           ;Motor.c: 40: pMotor->mFrequency = 0;
  9238  0138D2  0100               	movlb	0	; () banked
  9239  0138D4  EE20 F002          	lfsr	2,2
  9240  0138D8  51DB               	movf	Motor_Init@pMotor& (0+255),w,b
  9241  0138DA  26D9               	addwf	fsr2l,f,c
  9242  0138DC  51DC               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9243  0138DE  22DA               	addwfc	fsr2h,f,c
  9244  0138E0  6ADE               	clrf	postinc2,c
  9245  0138E2  6ADD               	clrf	postdec2,c
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;Motor.c: 43: Port_SetPinType(&PortE, eP0, eTypeOutputPushPull);
  9249  0138E4  0E97               	movlw	low _PortE
  9250  0138E6  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  9251  0138E8  0E01               	movlw	high _PortE
  9252  0138EA  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9253  0138EC  6BD6               	clrf	Port_SetPinType@pPin& (0+255),b
  9254  0138EE  0E03               	movlw	3
  9255  0138F0  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  9256  0138F2  ECAD  F087         	call	_Port_SetPinType	;wreg free
  9257                           
  9258                           ;Motor.c: 44: Port_SetPinType(&PortE, eP1, eTypeOutputPushPull);
  9259  0138F6  0E97               	movlw	low _PortE
  9260  0138F8  0100               	movlb	0	; () banked
  9261  0138FA  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
  9262  0138FC  0E01               	movlw	high _PortE
  9263  0138FE  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9264  013900  0E01               	movlw	1
  9265  013902  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
  9266  013904  0E03               	movlw	3
  9267  013906  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
  9268  013908  ECAD  F087         	call	_Port_SetPinType	;wreg free
  9269                           
  9270                           ;Motor.c: 45: Port_SetPin(&PortE, eP0, 0);
  9271  01390C  0E97               	movlw	low _PortE
  9272  01390E  0100               	movlb	0	; () banked
  9273  013910  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  9274  013912  0E01               	movlw	high _PortE
  9275  013914  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9276  013916  6BBF               	clrf	Port_SetPin@pPin& (0+255),b
  9277  013918  6BC0               	clrf	Port_SetPin@pValue& (0+255),b
  9278  01391A  EC96  F09D         	call	_Port_SetPin	;wreg free
  9279                           
  9280                           ;Motor.c: 46: Port_SetPin(&PortE, eP1, 0);
  9281  01391E  0E97               	movlw	low _PortE
  9282  013920  0100               	movlb	0	; () banked
  9283  013922  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
  9284  013924  0E01               	movlw	high _PortE
  9285  013926  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9286  013928  0E01               	movlw	1
  9287  01392A  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
  9288  01392C  6BC0               	clrf	Port_SetPin@pValue& (0+255),b
  9289  01392E  EC96  F09D         	call	_Port_SetPin	;wreg free
  9290                           
  9291                           ;Motor.c: 48: Timer0_Init(1000);
  9292  013932  0EE8               	movlw	232
  9293  013934  0100               	movlb	0	; () banked
  9294  013936  6FBB               	movwf	Timer0_Init@pFrequency& (0+255),b
  9295  013938  0E03               	movlw	3
  9296  01393A  6FBC               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  9297  01393C  6BBD               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9298  01393E  6BBE               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9299  013940  EF74  F08A         	goto	_Timer0_Init	;wreg free
  9300  013944                     __end_of_Motor_Init:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           indf0	equ	0xFEF
  9310                           postinc0	equ	0xFEE
  9311                           fsr0h	equ	0xFEA
  9312                           fsr0l	equ	0xFE9
  9313                           wreg	equ	0xFE8
  9314                           indf1	equ	0xFE7
  9315                           postdec1	equ	0xFE5
  9316                           fsr1h	equ	0xFE2
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           plusw2	equ	0xFDB
  9322                           fsr2h	equ	0xFDA
  9323                           fsr2l	equ	0xFD9
  9324                           status	equ	0xFD8
  9325                           
  9326 ;; *************** function _Timer0_Init *****************
  9327 ;; Defined at:
  9328 ;;		line 25 in file "Timer0.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  9333 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;Total ram usage:       14 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:   15
  9350 ;; This function calls:
  9351 ;;		_Timer0_Clear
  9352 ;;		___lldiv
  9353 ;; This function is called by:
  9354 ;;		_Motor_Init
  9355 ;;		_Motor_Speed
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text41
  9360  0114E8                     __ptext41:
  9361                           	opt stack 0
  9362  0114E8                     _Timer0_Init:
  9363                           	opt stack 13
  9364                           
  9365                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  9366                           
  9367                           ;incstack = 0
  9368  0114E8  0E80               	movlw	128
  9369  0114EA  0100               	movlb	0	; () banked
  9370  0114EC  6FC1               	movwf	Timer0_Init@pCPUClock& (0+255),b
  9371  0114EE  0E8D               	movlw	141
  9372  0114F0  6FC2               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  9373  0114F2  0E5B               	movlw	91
  9374  0114F4  6FC3               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  9375  0114F6  6BC4               	clrf	(Timer0_Init@pCPUClock+3)& (0+255),b
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  9379                           ;Timer0.c: 31: static UINT8 PRE = 0;
  9380                           ;Timer0.c: 32: static UINT32 DIV = 0;
  9381                           ;Timer0.c: 34: UINT32 DIVIDE;
  9382                           ;Timer0.c: 36: T0CONbits.TMR0ON = 0;
  9383  0114F8  9ED5               	bcf	4053,7,c	;volatile
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;Timer0.c: 37: if (pFrequency == 0)
  9387  0114FA  51BB               	movf	Timer0_Init@pFrequency& (0+255),w,b
  9388  0114FC  11BC               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  9389  0114FE  11BD               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  9390  011500  11BE               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  9391  011502  E101               	bnz	l1757
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;Timer0.c: 38: return;
  9395  011504  0012               	return	
  9396  011506                     l1757:
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;Timer0.c: 40: T0CONbits.PSA = 0;
  9400  011506  96D5               	bcf	4053,3,c	;volatile
  9401                           
  9402                           ;Timer0.c: 41: T0CONbits.T08BIT = 0;
  9403  011508  9CD5               	bcf	4053,6,c	;volatile
  9404                           
  9405                           ;Timer0.c: 42: T0CONbits.T0CS = 0;
  9406  01150A  9AD5               	bcf	4053,5,c	;volatile
  9407                           
  9408                           ;Timer0.c: 43: T0CONbits.T0SE = 0;
  9409  01150C  98D5               	bcf	4053,4,c	;volatile
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;Timer0.c: 45: DIVIDE = pCPUClock / pFrequency;
  9413  01150E  C0C1  F0AE         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  9414  011512  C0C2  F0AF         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  9415  011516  C0C3  F0B0         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  9416  01151A  C0C4  F0B1         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  9417  01151E  C0BB  F0B2         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  9418  011522  C0BC  F0B3         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  9419  011526  C0BD  F0B4         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  9420  01152A  C0BE  F0B5         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  9421  01152E  EC23  F09C         	call	___lldiv	;wreg free
  9422  011532  C0AE  F0C5         	movff	?___lldiv,Timer0_Init@DIVIDE
  9423  011536  C0AF  F0C6         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  9424  01153A  C0B0  F0C7         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  9425  01153E  C0B1  F0C8         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  9426                           
  9427                           ;Timer0.c: 48: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  9428  011542  D00B               	goto	l11763
  9429  011544                     l11753:
  9430                           
  9431                           ;Timer0.c: 49: {
  9432                           ;Timer0.c: 50: INDEX ++;
  9433  011544  0100               	movlb	0	; () banked
  9434  011546  2B96               	incf	_INDEX& (0+255),f,b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;Timer0.c: 51: if (INDEX >= 3)
  9438  011548  0E02               	movlw	2
  9439  01154A  6596               	cpfsgt	_INDEX& (0+255),b
  9440  01154C  D001               	goto	l11759
  9441  01154E  D02D               	goto	l11765
  9442  011550                     l11759:
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;Timer0.c: 55: if (INDEX >= 8)
  9446  011550  0E07               	movlw	7
  9447  011552  0100               	movlb	0	; () banked
  9448  011554  6596               	cpfsgt	_INDEX& (0+255),b
  9449  011556  D001               	goto	l11763
  9450  011558  0C07               	retlw	7
  9451  01155A                     l11763:
  9452  01155A  C0C5  F0AE         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  9453  01155E  C0C6  F0AF         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  9454  011562  C0C7  F0B0         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  9455  011566  C0C8  F0B1         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  9456  01156A  0100               	movlb	0	; () banked
  9457  01156C  5196               	movf	_INDEX& (0+255),w,b
  9458  01156E  0D02               	mullw	2
  9459  011570  0EB1               	movlw	low Timer0_Init@PRESCALE
  9460  011572  24F3               	addwf	prodl,w,c
  9461  011574  6EF6               	movwf	tblptrl,c
  9462  011576  0EFC               	movlw	high Timer0_Init@PRESCALE
  9463  011578  20F4               	addwfc	prodh,w,c
  9464  01157A  6EF7               	movwf	tblptrh,c
  9465  01157C                     	if	1	;There are 3 active tblptr bytes
  9466  01157C  6AF8               	clrf	tblptru,c
  9467  01157E  0E00               	movlw	low (__mediumconst shr (0+16))
  9468  011580  22F8               	addwfc	tblptru,f,c
  9469  011582                     	endif
  9470  011582  0009               	tblrd		*+
  9471  011584  CFF5 F0BF          	movff	tablat,??_Timer0_Init
  9472  011588  0009               	tblrd		*+
  9473  01158A  CFF5 F0C0          	movff	tablat,??_Timer0_Init+1
  9474  01158E  C0BF  F0B2         	movff	??_Timer0_Init,___lldiv@divisor
  9475  011592  C0C0  F0B3         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  9476  011596  6BB4               	clrf	(___lldiv@divisor+2)& (0+255),b
  9477  011598  6BB5               	clrf	(___lldiv@divisor+3)& (0+255),b
  9478  01159A  EC23  F09C         	call	___lldiv	;wreg free
  9479  01159E  0100               	movlb	0	; () banked
  9480  0115A0  51B1               	movf	(?___lldiv+3)& (0+255),w,b
  9481  0115A2  E1D0               	bnz	l11753
  9482  0115A4  05B0               	decf	(?___lldiv+2)& (0+255),w,b
  9483  0115A6  E301               	bnc	l11765
  9484  0115A8  D7CD               	goto	l11753
  9485  0115AA                     l11765:
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;Timer0.c: 57: }
  9489                           ;Timer0.c: 61: PRE = PRESCALE[INDEX];
  9490  0115AA  0100               	movlb	0	; () banked
  9491  0115AC  5196               	movf	_INDEX& (0+255),w,b
  9492  0115AE  0D02               	mullw	2
  9493  0115B0  0EB1               	movlw	low Timer0_Init@PRESCALE
  9494  0115B2  24F3               	addwf	prodl,w,c
  9495  0115B4  6EF6               	movwf	tblptrl,c
  9496  0115B6  0EFC               	movlw	high Timer0_Init@PRESCALE
  9497  0115B8  20F4               	addwfc	prodh,w,c
  9498  0115BA  6EF7               	movwf	tblptrh,c
  9499  0115BC                     	if	1	;There are 3 active tblptr bytes
  9500  0115BC  6AF8               	clrf	tblptru,c
  9501  0115BE  0E00               	movlw	low (__mediumconst shr (0+16))
  9502  0115C0  22F8               	addwfc	tblptru,f,c
  9503  0115C2                     	endif
  9504  0115C2  0008               	tblrd		*
  9505  0115C4  CFF5 F093          	movff	tablat,Timer0_Init@PRE
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;Timer0.c: 62: DIV = (DIVIDE-1);
  9509  0115C8  0EFF               	movlw	255
  9510  0115CA  25C5               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  9511  0115CC  0101               	movlb	1	; () banked
  9512  0115CE  6F08               	movwf	Timer0_Init@DIV& (0+255),b
  9513  0115D0  0EFF               	movlw	255
  9514  0115D2  0100               	movlb	0	; () banked
  9515  0115D4  21C6               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  9516  0115D6  0101               	movlb	1	; () banked
  9517  0115D8  6F09               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  9518  0115DA  0EFF               	movlw	255
  9519  0115DC  0100               	movlb	0	; () banked
  9520  0115DE  21C7               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  9521  0115E0  0101               	movlb	1	; () banked
  9522  0115E2  6F0A               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  9523  0115E4  0EFF               	movlw	255
  9524  0115E6  0100               	movlb	0	; () banked
  9525  0115E8  21C8               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  9526  0115EA  0101               	movlb	1	; () banked
  9527  0115EC  6F0B               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  9528                           
  9529                           ; BSR set to: 1
  9530                           ;Timer0.c: 64: COUNTER = 0xFFFF-DIV/PRE;
  9531  0115EE  C108  F0AE         	movff	Timer0_Init@DIV,___lldiv@dividend
  9532  0115F2  C109  F0AF         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  9533  0115F6  C10A  F0B0         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  9534  0115FA  C10B  F0B1         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  9535  0115FE  0100               	movlb	0	; () banked
  9536  011600  5193               	movf	Timer0_Init@PRE& (0+255),w,b
  9537  011602  6FB2               	movwf	___lldiv@divisor& (0+255),b
  9538  011604  6BB3               	clrf	(___lldiv@divisor+1)& (0+255),b
  9539  011606  6BB4               	clrf	(___lldiv@divisor+2)& (0+255),b
  9540  011608  6BB5               	clrf	(___lldiv@divisor+3)& (0+255),b
  9541  01160A  EC23  F09C         	call	___lldiv	;wreg free
  9542  01160E  0100               	movlb	0	; () banked
  9543  011610  1FAE               	comf	?___lldiv& (0+255),f,b
  9544  011612  1FAF               	comf	(?___lldiv+1)& (0+255),f,b
  9545  011614  4BAE               	infsnz	?___lldiv& (0+255),f,b
  9546  011616  2BAF               	incf	(?___lldiv+1)& (0+255),f,b
  9547  011618  0EFF               	movlw	255
  9548  01161A  25AE               	addwf	?___lldiv& (0+255),w,b
  9549  01161C  6F87               	movwf	_COUNTER& (0+255),b
  9550  01161E  0EFF               	movlw	255
  9551  011620  21AF               	addwfc	(?___lldiv+1)& (0+255),w,b
  9552  011622  6F88               	movwf	(_COUNTER+1)& (0+255),b
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;Timer0.c: 67: Timer0_Clear();
  9556  011624  EC32  F0A8         	call	_Timer0_Clear	;wreg free
  9557                           
  9558                           ;Timer0.c: 70: T0CONbits.TMR0ON = 1;
  9559  011628  8ED5               	bsf	4053,7,c	;volatile
  9560  01162A  0012               	return		;funcret
  9561  01162C                     __end_of_Timer0_Init:
  9562                           	opt stack 0
  9563                           tblptru	equ	0xFF8
  9564                           tblptrh	equ	0xFF7
  9565                           tblptrl	equ	0xFF6
  9566                           tablat	equ	0xFF5
  9567                           prodh	equ	0xFF4
  9568                           prodl	equ	0xFF3
  9569                           intcon	equ	0xFF2
  9570                           indf0	equ	0xFEF
  9571                           postinc0	equ	0xFEE
  9572                           fsr0h	equ	0xFEA
  9573                           fsr0l	equ	0xFE9
  9574                           wreg	equ	0xFE8
  9575                           indf1	equ	0xFE7
  9576                           postdec1	equ	0xFE5
  9577                           fsr1h	equ	0xFE2
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           postdec2	equ	0xFDD
  9582                           plusw2	equ	0xFDB
  9583                           fsr2h	equ	0xFDA
  9584                           fsr2l	equ	0xFD9
  9585                           status	equ	0xFD8
  9586                           
  9587 ;; *************** function _Timer0_Clear *****************
  9588 ;; Defined at:
  9589 ;;		line 20 in file "Timer0.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;		None
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		None
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        0 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:   14
  9610 ;; This function calls:
  9611 ;;		Nothing
  9612 ;; This function is called by:
  9613 ;;		_Timer0_Init
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           	psect	text42
  9618  015064                     __ptext42:
  9619                           	opt stack 0
  9620  015064                     _Timer0_Clear:
  9621                           	opt stack 13
  9622                           
  9623                           ;Timer0.c: 22: TMR0 = COUNTER;
  9624                           
  9625                           ;incstack = 0
  9626  015064  C087  FFD6         	movff	_COUNTER,4054	;volatile
  9627  015068  C088  FFD7         	movff	_COUNTER+1,4055	;volatile
  9628                           
  9629                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
  9630  01506C  94F2               	bcf	intcon,2,c	;volatile
  9631  01506E  0012               	return		;funcret
  9632  015070                     __end_of_Timer0_Clear:
  9633                           	opt stack 0
  9634                           tblptru	equ	0xFF8
  9635                           tblptrh	equ	0xFF7
  9636                           tblptrl	equ	0xFF6
  9637                           tablat	equ	0xFF5
  9638                           prodh	equ	0xFF4
  9639                           prodl	equ	0xFF3
  9640                           intcon	equ	0xFF2
  9641                           indf0	equ	0xFEF
  9642                           postinc0	equ	0xFEE
  9643                           fsr0h	equ	0xFEA
  9644                           fsr0l	equ	0xFE9
  9645                           wreg	equ	0xFE8
  9646                           indf1	equ	0xFE7
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _Motor_Continious *****************
  9659 ;; Defined at:
  9660 ;;		line 134 in file "Motor.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  pMotor          2    0[BANK0 ] PTR struct Motor
  9663 ;;		 -> Stepper(6), 
  9664 ;;  pDirection      2    2[BANK0 ] short 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  1    wreg      unsigned char 
  9669 ;; Registers used:
  9670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9676 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:        4 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:   14
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		_FunctInitMotor
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           	psect	text43
  9691  01486A                     __ptext43:
  9692                           	opt stack 0
  9693  01486A                     _Motor_Continious:
  9694                           	opt stack 15
  9695                           
  9696                           ;Motor.c: 136: if (pMotor == 0)
  9697                           
  9698                           ;incstack = 0
  9699  01486A  0100               	movlb	0	; () banked
  9700  01486C  51AE               	movf	Motor_Continious@pMotor& (0+255),w,b
  9701  01486E  11AF               	iorwf	(Motor_Continious@pMotor+1)& (0+255),w,b
  9702  014870  E101               	bnz	l12241
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;Motor.c: 137: return 0;
  9706                           ;	Return value of _Motor_Continious is never used
  9707  014872  0012               	return	
  9708  014874                     l12241:
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;Motor.c: 139: if (pDirection > 0)
  9712  014874  0100               	movlb	0	; () banked
  9713  014876  BFB1               	btfsc	(Motor_Continious@pDirection+1)& (0+255),7,b
  9714  014878  D00C               	goto	l12245
  9715  01487A  51B1               	movf	(Motor_Continious@pDirection+1)& (0+255),w,b
  9716  01487C  E102               	bnz	u9030
  9717  01487E  05B0               	decf	Motor_Continious@pDirection& (0+255),w,b
  9718  014880  E308               	bnc	l12245
  9719  014882                     u9030:
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;Motor.c: 140: pMotor->mDelta = 32767;
  9723  014882  C0AE  FFD9         	movff	Motor_Continious@pMotor,fsr2l
  9724  014886  C0AF  FFDA         	movff	Motor_Continious@pMotor+1,fsr2h
  9725  01488A  68DE               	setf	postinc2,c
  9726  01488C  0E7F               	movlw	127
  9727  01488E  6EDD               	movwf	postdec2,c
  9728  014890  0C7F               	retlw	127
  9729  014892                     l12245:
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;Motor.c: 141: else
  9733                           ;Motor.c: 142: pMotor->mDelta = -32767;
  9734  014892  C0AE  FFD9         	movff	Motor_Continious@pMotor,fsr2l
  9735  014896  C0AF  FFDA         	movff	Motor_Continious@pMotor+1,fsr2h
  9736  01489A  0E01               	movlw	1
  9737  01489C  6EDE               	movwf	postinc2,c
  9738  01489E  0E80               	movlw	128
  9739  0148A0  6EDD               	movwf	postdec2,c
  9740                           
  9741                           ; BSR set to: 0
  9742  0148A2  0C80               	retlw	128
  9743  0148A4                     __end_of_Motor_Continious:
  9744                           	opt stack 0
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           intcon	equ	0xFF2
  9752                           indf0	equ	0xFEF
  9753                           postinc0	equ	0xFEE
  9754                           fsr0h	equ	0xFEA
  9755                           fsr0l	equ	0xFE9
  9756                           wreg	equ	0xFE8
  9757                           indf1	equ	0xFE7
  9758                           postdec1	equ	0xFE5
  9759                           fsr1h	equ	0xFE2
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           plusw2	equ	0xFDB
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function _FunctInitLCD *****************
  9770 ;; Defined at:
  9771 ;;		line 66 in file "Functions.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;		None
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;Total ram usage:        0 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:   23
  9792 ;; This function calls:
  9793 ;;		_Console_Init
  9794 ;;		_LCD_Init
  9795 ;;		_MXK_BlockSwitchTo
  9796 ;;		_MXK_Release
  9797 ;; This function is called by:
  9798 ;;		_main
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           	psect	text44
  9803  014FB6                     __ptext44:
  9804                           	opt stack 0
  9805  014FB6                     _FunctInitLCD:
  9806                           	opt stack 7
  9807                           
  9808                           ;Functions.c: 68: if (MXK_BlockSwitchTo(eMXK_HMI))
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;incstack = 0
  9812  014FB6  0E06               	movlw	6
  9813  014FB8  EC48  F0A5         	call	_MXK_BlockSwitchTo
  9814  014FBC  0900               	iorlw	0
  9815  014FBE  B4D8               	btfsc	status,2,c
  9816  014FC0  0012               	return	
  9817                           
  9818                           ;Functions.c: 69: {
  9819                           ;Functions.c: 76: LCD_Init();
  9820  014FC2  EC4E  F08C         	call	_LCD_Init	;wreg free
  9821                           
  9822                           ;Functions.c: 105: Console_Init();
  9823  014FC6  EC39  F09E         	call	_Console_Init	;wreg free
  9824                           
  9825                           ;Functions.c: 109: MXK_Release();
  9826  014FCA  EF4C  F0A8         	goto	_MXK_Release	;wreg free
  9827  014FCE                     __end_of_FunctInitLCD:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           intcon	equ	0xFF2
  9836                           indf0	equ	0xFEF
  9837                           postinc0	equ	0xFEE
  9838                           fsr0h	equ	0xFEA
  9839                           fsr0l	equ	0xFE9
  9840                           wreg	equ	0xFE8
  9841                           indf1	equ	0xFE7
  9842                           postdec1	equ	0xFE5
  9843                           fsr1h	equ	0xFE2
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           plusw2	equ	0xFDB
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function _LCD_Init *****************
  9854 ;; Defined at:
  9855 ;;		line 134 in file "Library/LCD.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;		None
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;  i               2   55[BANK0 ] unsigned short 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      void 
  9862 ;; Registers used:
  9863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;Total ram usage:        4 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:   22
  9876 ;; This function calls:
  9877 ;;		_Configure_GPIOs
  9878 ;;		_LCD_Fill
  9879 ;;		_LCD_Write
  9880 ;;		_Set_Rotation
  9881 ;;		_delay_ms
  9882 ;; This function is called by:
  9883 ;;		_FunctInitLCD
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text45
  9888  01189C                     __ptext45:
  9889                           	opt stack 0
  9890  01189C                     _LCD_Init:
  9891                           	opt stack 7
  9892                           
  9893                           ;LCD.c: 136: UINT16 i;
  9894                           ;LCD.c: 137: Configure_GPIOs();
  9895                           
  9896                           ;incstack = 0
  9897  01189C  ECBB  F0A1         	call	_Configure_GPIOs	;wreg free
  9898                           
  9899                           ;LCD.c: 139: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9900  0118A0  0E00               	movlw	0
  9901  0118A2  0100               	movlb	0	; () banked
  9902  0118A4  6FE6               	movwf	(LCD_Init@i+1)& (0+255),b
  9903  0118A6  6FE5               	movwf	LCD_Init@i& (0+255),b
  9904  0118A8                     
  9905                           ; BSR set to: 0
  9906  0118A8  51E6               	movf	(LCD_Init@i+1)& (0+255),w,b
  9907  0118AA  E176               	bnz	l12055
  9908  0118AC  0E59               	movlw	89
  9909  0118AE  5DE5               	subwf	LCD_Init@i& (0+255),w,b
  9910  0118B0  E273               	bc	l12055
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;LCD.c: 140: {
  9914                           ;LCD.c: 141: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9915                           
  9916                           ; BSR set to: 0
  9917                           
  9918                           ; BSR set to: 0
  9919  0118B2  90D8               	bcf	status,0,c
  9920  0118B4  0100               	movlb	0	; () banked
  9921  0118B6  35E5               	rlcf	LCD_Init@i& (0+255),w,b
  9922  0118B8  6EF6               	movwf	tblptrl,c
  9923  0118BA  35E6               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9924  0118BC  6EF7               	movwf	tblptrh,c
  9925  0118BE  0EEF               	movlw	low _InitList
  9926  0118C0  26F6               	addwf	tblptrl,f,c
  9927  0118C2  0EFB               	movlw	high _InitList
  9928  0118C4  22F7               	addwfc	tblptrh,f,c
  9929  0118C6                     	if	1	;There are 3 active tblptr bytes
  9930  0118C6  6AF8               	clrf	tblptru,c
  9931  0118C8  0E00               	movlw	low (__mediumconst shr (0+16))
  9932  0118CA  22F8               	addwfc	tblptru,f,c
  9933  0118CC                     	endif
  9934  0118CC  0009               	tblrd		*+
  9935  0118CE  0E80               	movlw	128
  9936  0118D0  18F5               	xorwf	tablat,w,c
  9937  0118D2  0009               	tblrd		*+
  9938  0118D4  10F5               	iorwf	tablat,w,c
  9939  0118D6  E11C               	bnz	l12045
  9940                           
  9941                           ; BSR set to: 0
  9942  0118D8  51E6               	movf	(LCD_Init@i+1)& (0+255),w,b
  9943  0118DA  E11A               	bnz	l12045
  9944  0118DC  0E58               	movlw	88
  9945  0118DE  5DE5               	subwf	LCD_Init@i& (0+255),w,b
  9946  0118E0  E217               	bc	l12045
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;LCD.c: 142: delay_ms(InitList[++i]);
  9950  0118E2  4BE5               	infsnz	LCD_Init@i& (0+255),f,b
  9951  0118E4  2BE6               	incf	(LCD_Init@i+1)& (0+255),f,b
  9952  0118E6  90D8               	bcf	status,0,c
  9953  0118E8  35E5               	rlcf	LCD_Init@i& (0+255),w,b
  9954  0118EA  6EF6               	movwf	tblptrl,c
  9955  0118EC  35E6               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9956  0118EE  6EF7               	movwf	tblptrh,c
  9957  0118F0  0EEF               	movlw	low _InitList
  9958  0118F2  26F6               	addwf	tblptrl,f,c
  9959  0118F4  0EFB               	movlw	high _InitList
  9960  0118F6  22F7               	addwfc	tblptrh,f,c
  9961  0118F8                     	if	1	;There are 3 active tblptr bytes
  9962  0118F8  6AF8               	clrf	tblptru,c
  9963  0118FA  0E00               	movlw	low (__mediumconst shr (0+16))
  9964  0118FC  22F8               	addwfc	tblptru,f,c
  9965  0118FE                     	endif
  9966  0118FE  0009               	tblrd		*+
  9967  011900  CFF5 F0AE          	movff	tablat,delay_ms@ms
  9968  011904  000A               	tblrd		*-
  9969  011906  CFF5 F0AF          	movff	tablat,delay_ms@ms+1
  9970  01190A  EC94  F0A1         	call	_delay_ms	;wreg free
  9971  01190E  D040               	goto	l12051
  9972  011910                     l12045:
  9973                           
  9974                           ;LCD.c: 143: else
  9975                           ;LCD.c: 144: {
  9976                           ;LCD.c: 145: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9977  011910  90D8               	bcf	status,0,c
  9978  011912  0100               	movlb	0	; () banked
  9979  011914  35E5               	rlcf	LCD_Init@i& (0+255),w,b
  9980  011916  6EF6               	movwf	tblptrl,c
  9981  011918  35E6               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9982  01191A  6EF7               	movwf	tblptrh,c
  9983  01191C  0EEF               	movlw	low _InitList
  9984  01191E  26F6               	addwf	tblptrl,f,c
  9985  011920  0EFB               	movlw	high _InitList
  9986  011922  22F7               	addwfc	tblptrh,f,c
  9987  011924                     	if	1	;There are 3 active tblptr bytes
  9988  011924  6AF8               	clrf	tblptru,c
  9989  011926  0E00               	movlw	low (__mediumconst shr (0+16))
  9990  011928  22F8               	addwfc	tblptru,f,c
  9991  01192A                     	endif
  9992  01192A  0009               	tblrd		*+
  9993  01192C  80D8               	bsf	status,0,c
  9994  01192E  0009               	tblrd		*+
  9995  011930  0E01               	movlw	1
  9996  011932  5AF5               	subwfb	tablat,f,c
  9997  011934  E31A               	bnc	l12049
  9998                           
  9999                           ; BSR set to: 0
 10000  011936  6BB2               	clrf	LCD_Write@mode& (0+255),b
 10001  011938  90D8               	bcf	status,0,c
 10002  01193A  35E5               	rlcf	LCD_Init@i& (0+255),w,b
 10003  01193C  6EF6               	movwf	tblptrl,c
 10004  01193E  35E6               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 10005  011940  6EF7               	movwf	tblptrh,c
 10006  011942  0EEF               	movlw	low _InitList
 10007  011944  26F6               	addwf	tblptrl,f,c
 10008  011946  0EFB               	movlw	high _InitList
 10009  011948  22F7               	addwfc	tblptrh,f,c
 10010  01194A                     	if	1	;There are 3 active tblptr bytes
 10011  01194A  6AF8               	clrf	tblptru,c
 10012  01194C  0E00               	movlw	low (__mediumconst shr (0+16))
 10013  01194E  22F8               	addwfc	tblptru,f,c
 10014  011950                     	endif
 10015  011950  0009               	tblrd		*+
 10016  011952  CFF5 F0E3          	movff	tablat,??_LCD_Init
 10017  011956  0009               	tblrd		*+
 10018  011958  CFF5 F0E4          	movff	tablat,??_LCD_Init+1
 10019  01195C  C0E4  F0E3         	movff	??_LCD_Init+1,??_LCD_Init
 10020  011960  6BE4               	clrf	(??_LCD_Init+1)& (0+255),b
 10021  011962  51E3               	movf	??_LCD_Init& (0+255),w,b
 10022  011964  ECA7  F0A4         	call	_LCD_Write
 10023  011968  D013               	goto	l12051
 10024  01196A                     l12049:
 10025                           
 10026                           ;LCD.c: 146: else LCD_Write(InitList[i], eData);
 10027  01196A  0E01               	movlw	1
 10028  01196C  0100               	movlb	0	; () banked
 10029  01196E  6FB2               	movwf	LCD_Write@mode& (0+255),b
 10030  011970  90D8               	bcf	status,0,c
 10031  011972  35E5               	rlcf	LCD_Init@i& (0+255),w,b
 10032  011974  6EF6               	movwf	tblptrl,c
 10033  011976  35E6               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 10034  011978  6EF7               	movwf	tblptrh,c
 10035  01197A  0EEF               	movlw	low _InitList
 10036  01197C  26F6               	addwf	tblptrl,f,c
 10037  01197E  0EFB               	movlw	high _InitList
 10038  011980  22F7               	addwfc	tblptrh,f,c
 10039  011982                     	if	1	;There are 3 active tblptr bytes
 10040  011982  6AF8               	clrf	tblptru,c
 10041  011984  0E00               	movlw	low (__mediumconst shr (0+16))
 10042  011986  22F8               	addwfc	tblptru,f,c
 10043  011988                     	endif
 10044  011988  0008               	tblrd		*
 10045  01198A  50F5               	movf	tablat,w,c
 10046  01198C  ECA7  F0A4         	call	_LCD_Write
 10047  011990                     l12051:
 10048  011990  0100               	movlb	0	; () banked
 10049  011992  4BE5               	infsnz	LCD_Init@i& (0+255),f,b
 10050  011994  2BE6               	incf	(LCD_Init@i+1)& (0+255),f,b
 10051  011996  D788               	goto	L27
 10052  011998                     l12055:
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;LCD.c: 147: }
 10056                           ;LCD.c: 148: }
 10057                           ;LCD.c: 149: delay_ms(100);
 10058  011998  0100               	movlb	0	; () banked
 10059  01199A  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
 10060  01199C  0E64               	movlw	100
 10061  01199E  6FAE               	movwf	delay_ms@ms& (0+255),b
 10062  0119A0  EC94  F0A1         	call	_delay_ms	;wreg free
 10063                           
 10064                           ;LCD.c: 150: LCD_Write(0x29, eCommand);
 10065  0119A4  0100               	movlb	0	; () banked
 10066  0119A6  6BB2               	clrf	LCD_Write@mode& (0+255),b
 10067  0119A8  0E29               	movlw	41
 10068  0119AA  ECA7  F0A4         	call	_LCD_Write
 10069                           
 10070                           ;LCD.c: 151: Set_Rotation(1);
 10071  0119AE  0E01               	movlw	1
 10072  0119B0  EC1E  F09B         	call	_Set_Rotation
 10073                           
 10074                           ;LCD.c: 153: delay_ms(100);
 10075  0119B4  0100               	movlb	0	; () banked
 10076  0119B6  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
 10077  0119B8  0E64               	movlw	100
 10078  0119BA  6FAE               	movwf	delay_ms@ms& (0+255),b
 10079  0119BC  EC94  F0A1         	call	_delay_ms	;wreg free
 10080                           
 10081                           ;LCD.c: 154: LCD_Fill(0x0000);
 10082  0119C0  0100               	movlb	0	; () banked
 10083  0119C2  6BBD               	clrf	(LCD_Fill@pColour+1)& (0+255),b
 10084  0119C4  6BBC               	clrf	LCD_Fill@pColour& (0+255),b
 10085  0119C6  EFDA  F0A2         	goto	_LCD_Fill	;wreg free
 10086  0119CA                     __end_of_LCD_Init:
 10087                           	opt stack 0
 10088                           tblptru	equ	0xFF8
 10089                           tblptrh	equ	0xFF7
 10090                           tblptrl	equ	0xFF6
 10091                           tablat	equ	0xFF5
 10092                           prodh	equ	0xFF4
 10093                           prodl	equ	0xFF3
 10094                           intcon	equ	0xFF2
 10095                           indf0	equ	0xFEF
 10096                           postinc0	equ	0xFEE
 10097                           fsr0h	equ	0xFEA
 10098                           fsr0l	equ	0xFE9
 10099                           wreg	equ	0xFE8
 10100                           indf1	equ	0xFE7
 10101                           postdec1	equ	0xFE5
 10102                           fsr1h	equ	0xFE2
 10103                           fsr1l	equ	0xFE1
 10104                           indf2	equ	0xFDF
 10105                           postinc2	equ	0xFDE
 10106                           postdec2	equ	0xFDD
 10107                           plusw2	equ	0xFDB
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _Set_Rotation *****************
 10113 ;; Defined at:
 10114 ;;		line 210 in file "Library/LCD.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  m               1    wreg     unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  m               1   10[BANK0 ] unsigned char 
 10119 ;;  rotation        1   11[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:        2 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:   16
 10136 ;; This function calls:
 10137 ;;		_LCD_Write
 10138 ;; This function is called by:
 10139 ;;		_LCD_Init
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text46
 10144  01363C                     __ptext46:
 10145                           	opt stack 0
 10146  01363C                     _Set_Rotation:
 10147                           	opt stack 12
 10148                           
 10149                           ;incstack = 0
 10150                           ;Set_Rotation@m stored from wreg
 10151  01363C  0100               	movlb	0	; () banked
 10152  01363E  6FB8               	movwf	Set_Rotation@m& (0+255),b
 10153                           
 10154                           ;LCD.c: 212: UINT8 rotation = 0x00;
 10155  013640  6BB9               	clrf	Set_Rotation@rotation& (0+255),b
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;LCD.c: 214: LCD_Write(0x36, 0x0);
 10159  013642  6BB2               	clrf	LCD_Write@mode& (0+255),b
 10160  013644  0E36               	movlw	54
 10161  013646  ECA7  F0A4         	call	_LCD_Write
 10162                           
 10163                           ;LCD.c: 215: rotation = (m % 4);
 10164  01364A  0100               	movlb	0	; () banked
 10165  01364C  51B8               	movf	Set_Rotation@m& (0+255),w,b
 10166  01364E  0B03               	andlw	3
 10167  013650  6FB9               	movwf	Set_Rotation@rotation& (0+255),b
 10168                           
 10169                           ;LCD.c: 217: switch(rotation)
 10170  013652  D02C               	goto	l11439
 10171  013654                     l11413:
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;LCD.c: 220: {
 10175                           ;LCD.c: 221: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 10176  013654  0E01               	movlw	1
 10177  013656  0100               	movlb	0	; () banked
 10178  013658  6FB2               	movwf	LCD_Write@mode& (0+255),b
 10179  01365A  0EC8               	movlw	200
 10180  01365C  ECA7  F0A4         	call	_LCD_Write
 10181                           
 10182                           ;LCD.c: 222: w = 128;
 10183  013660  0E80               	movlw	128
 10184  013662  0100               	movlb	0	; () banked
 10185  013664  6FFE               	movwf	_w& (0+255),b
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;LCD.c: 223: l = 128;
 10189  013666  6FFD               	movwf	_l& (0+255),b
 10190                           
 10191                           ;LCD.c: 224: break;
 10192  013668  0C80               	retlw	128
 10193  01366A                     l11419:
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;LCD.c: 227: {
 10197                           ;LCD.c: 228: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 10198  01366A  0E01               	movlw	1
 10199  01366C  0100               	movlb	0	; () banked
 10200  01366E  6FB2               	movwf	LCD_Write@mode& (0+255),b
 10201  013670  0EA8               	movlw	168
 10202  013672  ECA7  F0A4         	call	_LCD_Write
 10203                           
 10204                           ;LCD.c: 229: w = 128;
 10205  013676  0E80               	movlw	128
 10206  013678  0100               	movlb	0	; () banked
 10207  01367A  6FFE               	movwf	_w& (0+255),b
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;LCD.c: 230: l = 128;
 10211  01367C  6FFD               	movwf	_l& (0+255),b
 10212                           
 10213                           ;LCD.c: 231: break;
 10214  01367E  0C80               	retlw	128
 10215  013680                     l11425:
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;LCD.c: 234: {
 10219                           ;LCD.c: 235: LCD_Write((0x08), 0x1);
 10220  013680  0E01               	movlw	1
 10221  013682  0100               	movlb	0	; () banked
 10222  013684  6FB2               	movwf	LCD_Write@mode& (0+255),b
 10223  013686  0E08               	movlw	8
 10224  013688  ECA7  F0A4         	call	_LCD_Write
 10225                           
 10226                           ;LCD.c: 236: w = 128;
 10227  01368C  0E80               	movlw	128
 10228  01368E  0100               	movlb	0	; () banked
 10229  013690  6FFE               	movwf	_w& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;LCD.c: 237: l = 128;
 10233  013692  6FFD               	movwf	_l& (0+255),b
 10234                           
 10235                           ;LCD.c: 238: break;
 10236  013694  0C80               	retlw	128
 10237  013696                     l11431:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;LCD.c: 241: {
 10241                           ;LCD.c: 242: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 10242  013696  0E01               	movlw	1
 10243  013698  0100               	movlb	0	; () banked
 10244  01369A  6FB2               	movwf	LCD_Write@mode& (0+255),b
 10245  01369C  0E68               	movlw	104
 10246  01369E  ECA7  F0A4         	call	_LCD_Write
 10247                           
 10248                           ;LCD.c: 243: w = 128;
 10249  0136A2  0E80               	movlw	128
 10250  0136A4  0100               	movlb	0	; () banked
 10251  0136A6  6FFE               	movwf	_w& (0+255),b
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;LCD.c: 244: l = 128;
 10255  0136A8  6FFD               	movwf	_l& (0+255),b
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;LCD.c: 246: }
 10259                           ;LCD.c: 247: }
 10260                           
 10261                           ;LCD.c: 245: break;
 10262  0136AA  0C80               	retlw	128
 10263  0136AC                     l11439:
 10264                           
 10265                           ; BSR set to: 0
 10266  0136AC  0100               	movlb	0	; () banked
 10267  0136AE  51B9               	movf	Set_Rotation@rotation& (0+255),w,b
 10268                           
 10269                           ; Switch size 1, requested type "space"
 10270                           ; Number of cases is 4, Range of values is 0 to 3
 10271                           ; switch strategies available:
 10272                           ; Name         Instructions Cycles
 10273                           ; simple_byte           13     7 (average)
 10274                           ;	Chosen strategy is simple_byte
 10275  0136B0  E0D1               	bz	l11413
 10276  0136B2  0A01               	xorlw	1	; case 1
 10277  0136B4  E0DA               	bz	l11419
 10278  0136B6  0A03               	xorlw	3	; case 2
 10279  0136B8  E0E3               	bz	l11425
 10280  0136BA  0A01               	xorlw	1	; case 3
 10281  0136BC  E0EC               	bz	l11431
 10282                           
 10283                           ; BSR set to: 0
 10284                           
 10285                           ; BSR set to: 0
 10286  0136BE  0012               	return		;funcret
 10287  0136C0                     __end_of_Set_Rotation:
 10288                           	opt stack 0
 10289                           tblptru	equ	0xFF8
 10290                           tblptrh	equ	0xFF7
 10291                           tblptrl	equ	0xFF6
 10292                           tablat	equ	0xFF5
 10293                           prodh	equ	0xFF4
 10294                           prodl	equ	0xFF3
 10295                           intcon	equ	0xFF2
 10296                           indf0	equ	0xFEF
 10297                           postinc0	equ	0xFEE
 10298                           fsr0h	equ	0xFEA
 10299                           fsr0l	equ	0xFE9
 10300                           wreg	equ	0xFE8
 10301                           indf1	equ	0xFE7
 10302                           postdec1	equ	0xFE5
 10303                           fsr1h	equ	0xFE2
 10304                           fsr1l	equ	0xFE1
 10305                           indf2	equ	0xFDF
 10306                           postinc2	equ	0xFDE
 10307                           postdec2	equ	0xFDD
 10308                           plusw2	equ	0xFDB
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function _LCD_Fill *****************
 10314 ;; Defined at:
 10315 ;;		line 249 in file "Library/LCD.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  pColour         2   14[BANK0 ] unsigned short 
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;  j               1   17[BANK0 ] unsigned char 
 10320 ;;  i               1   16[BANK0 ] unsigned char 
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  1    wreg      void 
 10323 ;; Registers used:
 10324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10325 ;; Tracked objects:
 10326 ;;		On entry : 0/0
 10327 ;;		On exit  : 0/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10330 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;Total ram usage:        4 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; Hardware stack levels required when called:   17
 10337 ;; This function calls:
 10338 ;;		_LCD_Word_Write
 10339 ;;		_Set_Addr_Window
 10340 ;; This function is called by:
 10341 ;;		_LCD_Init
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           	psect	text47
 10346  0145B4                     __ptext47:
 10347                           	opt stack 0
 10348  0145B4                     _LCD_Fill:
 10349                           	opt stack 11
 10350                           
 10351                           ;LCD.c: 258: UINT8 i = 0x00;
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;incstack = 0
 10355  0145B4  0100               	movlb	0	; () banked
 10356  0145B6  6BBE               	clrf	LCD_Fill@i& (0+255),b
 10357                           
 10358                           ;LCD.c: 259: UINT8 j = 0x00;
 10359  0145B8  6BBF               	clrf	LCD_Fill@j& (0+255),b
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;LCD.c: 260: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 10363  0145BA  6BB8               	clrf	Set_Addr_Window@ys& (0+255),b
 10364  0145BC  05FE               	decf	_w& (0+255),w,b
 10365  0145BE  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 10366  0145C0  05FD               	decf	_l& (0+255),w,b
 10367  0145C2  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 10368  0145C4  0E00               	movlw	0
 10369  0145C6  EC0C  F09A         	call	_Set_Addr_Window
 10370                           
 10371                           ;LCD.c: 261: for (j = l; j > 0; j--)
 10372  0145CA  C0FD  F0BF         	movff	_l,LCD_Fill@j
 10373  0145CE                     l11447:
 10374  0145CE  0100               	movlb	0	; () banked
 10375  0145D0  51BF               	movf	LCD_Fill@j& (0+255),w,b
 10376  0145D2  E101               	bnz	l719
 10377                           
 10378                           ; BSR set to: 0
 10379  0145D4  0012               	return	
 10380  0145D6                     l719:
 10381                           
 10382                           ; BSR set to: 0
 10383                           ;LCD.c: 262: for (i = w; i > 0; i--)
 10384  0145D6  C0FE  F0BE         	movff	_w,LCD_Fill@i
 10385  0145DA                     l11451:
 10386                           
 10387                           ; BSR set to: 0
 10388  0145DA  0100               	movlb	0	; () banked
 10389  0145DC  51BE               	movf	LCD_Fill@i& (0+255),w,b
 10390  0145DE  E009               	bz	l11461
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;LCD.c: 263: LCD_Word_Write(pColour);
 10394                           
 10395                           ; BSR set to: 0
 10396                           
 10397                           ; BSR set to: 0
 10398  0145E0  C0BC  F0B8         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 10399  0145E4  C0BD  F0B9         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 10400  0145E8  ECE7  F0A7         	call	_LCD_Word_Write	;wreg free
 10401  0145EC  0100               	movlb	0	; () banked
 10402  0145EE  07BE               	decf	LCD_Fill@i& (0+255),f,b
 10403  0145F0  D7F4               	goto	l11451
 10404  0145F2                     l11461:
 10405                           
 10406                           ; BSR set to: 0
 10407  0145F2  0100               	movlb	0	; () banked
 10408  0145F4  07BF               	decf	LCD_Fill@j& (0+255),f,b
 10409  0145F6  D7EB               	goto	l11447
 10410  0145F8                     __end_of_LCD_Fill:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           indf0	equ	0xFEF
 10420                           postinc0	equ	0xFEE
 10421                           fsr0h	equ	0xFEA
 10422                           fsr0l	equ	0xFE9
 10423                           wreg	equ	0xFE8
 10424                           indf1	equ	0xFE7
 10425                           postdec1	equ	0xFE5
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           plusw2	equ	0xFDB
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function _Configure_GPIOs *****************
 10437 ;; Defined at:
 10438 ;;		line 38 in file "Library/LCD.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;		None
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:        0 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:   21
 10459 ;; This function calls:
 10460 ;;		_LCD_Reset
 10461 ;;		_Port_SetPinType
 10462 ;;		_SPI_Init
 10463 ;;		_SPI_MaxSpeed
 10464 ;; This function is called by:
 10465 ;;		_LCD_Init
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           	psect	text48
 10470  014376                     __ptext48:
 10471                           	opt stack 0
 10472  014376                     _Configure_GPIOs:
 10473                           	opt stack 7
 10474                           
 10475                           ;LCD.c: 41: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;incstack = 0
 10479  014376  0EA1               	movlw	low _PortF
 10480  014378  0100               	movlb	0	; () banked
 10481  01437A  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 10482  01437C  0E01               	movlw	high _PortF
 10483  01437E  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10484  014380  0E06               	movlw	6
 10485  014382  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 10486  014384  0E03               	movlw	3
 10487  014386  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 10488  014388  ECAD  F087         	call	_Port_SetPinType	;wreg free
 10489                           
 10490                           ;LCD.c: 42: LCD_Reset();
 10491  01438C  ECE0  F09C         	call	_LCD_Reset	;wreg free
 10492                           
 10493                           ;LCD.c: 50: SPI_Init(&SPI2, (3*1000000L), eSPI2, eSPI_Mode1);
 10494  014390  0E6E               	movlw	low _SPI2
 10495  014392  0100               	movlb	0	; () banked
 10496  014394  6FDB               	movwf	SPI_Init@pInput& (0+255),b
 10497  014396  0E01               	movlw	high _SPI2
 10498  014398  6FDC               	movwf	(SPI_Init@pInput+1)& (0+255),b
 10499  01439A  0EC0               	movlw	192
 10500  01439C  6FDD               	movwf	SPI_Init@pClock& (0+255),b
 10501  01439E  0EC6               	movlw	198
 10502  0143A0  6FDE               	movwf	(SPI_Init@pClock+1)& (0+255),b
 10503  0143A2  0E2D               	movlw	45
 10504  0143A4  6FDF               	movwf	(SPI_Init@pClock+2)& (0+255),b
 10505  0143A6  6BE0               	clrf	(SPI_Init@pClock+3)& (0+255),b
 10506  0143A8  0E01               	movlw	1
 10507  0143AA  6FE1               	movwf	SPI_Init@pChannel& (0+255),b
 10508  0143AC  6FE2               	movwf	SPI_Init@pMode& (0+255),b
 10509  0143AE  EC00  F080         	call	_SPI_Init	;wreg free
 10510                           
 10511                           ;LCD.c: 51: SPI_MaxSpeed(&SPI2);
 10512  0143B2  0E6E               	movlw	low _SPI2
 10513  0143B4  0100               	movlb	0	; () banked
 10514  0143B6  6FBD               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 10515  0143B8  0E01               	movlw	high _SPI2
 10516  0143BA  6FBE               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 10517  0143BC  EF92  F09F         	goto	_SPI_MaxSpeed	;wreg free
 10518  0143C0                     __end_of_Configure_GPIOs:
 10519                           	opt stack 0
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           indf0	equ	0xFEF
 10528                           postinc0	equ	0xFEE
 10529                           fsr0h	equ	0xFEA
 10530                           fsr0l	equ	0xFE9
 10531                           wreg	equ	0xFE8
 10532                           indf1	equ	0xFE7
 10533                           postdec1	equ	0xFE5
 10534                           fsr1h	equ	0xFE2
 10535                           fsr1l	equ	0xFE1
 10536                           indf2	equ	0xFDF
 10537                           postinc2	equ	0xFDE
 10538                           postdec2	equ	0xFDD
 10539                           plusw2	equ	0xFDB
 10540                           fsr2h	equ	0xFDA
 10541                           fsr2l	equ	0xFD9
 10542                           status	equ	0xFD8
 10543                           
 10544 ;; *************** function _SPI_MaxSpeed *****************
 10545 ;; Defined at:
 10546 ;;		line 188 in file "Library/SPI.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  pInput          2   15[BANK0 ] const PTR struct SPI
 10549 ;;		 -> SPI2(11), 
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;		None
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  1    wreg      void 
 10554 ;; Registers used:
 10555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10561 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;Total ram usage:        2 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:   16
 10568 ;; This function calls:
 10569 ;;		_Byte_SetBit
 10570 ;;		_Byte_SetQuad
 10571 ;; This function is called by:
 10572 ;;		_Configure_GPIOs
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text49
 10577  013F24                     __ptext49:
 10578                           	opt stack 0
 10579  013F24                     _SPI_MaxSpeed:
 10580                           	opt stack 11
 10581                           
 10582                           ;SPI.c: 192: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 10583                           
 10584                           ;incstack = 0
 10585  013F24  0100               	movlb	0	; () banked
 10586  013F26  EE20 F006          	lfsr	2,6
 10587  013F2A  51BD               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10588  013F2C  26D9               	addwf	fsr2l,f,c
 10589  013F2E  51BE               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10590  013F30  22DA               	addwfc	fsr2h,f,c
 10591  013F32  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 10592  013F36  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 10593  013F3A  0E05               	movlw	5
 10594  013F3C  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 10595  013F3E  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 10596  013F40  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 10597                           
 10598                           ;SPI.c: 195: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 10599  013F44  0100               	movlb	0	; () banked
 10600  013F46  EE20 F006          	lfsr	2,6
 10601  013F4A  51BD               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10602  013F4C  26D9               	addwf	fsr2l,f,c
 10603  013F4E  51BE               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10604  013F50  22DA               	addwfc	fsr2h,f,c
 10605  013F52  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 10606  013F56  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 10607  013F5A  6BBB               	clrf	Byte_SetQuad@pQuad& (0+255),b
 10608  013F5C  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 10609  013F5E  EC87  F094         	call	_Byte_SetQuad	;wreg free
 10610                           
 10611                           ;SPI.c: 196: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 10612  013F62  0100               	movlb	0	; () banked
 10613  013F64  EE20 F006          	lfsr	2,6
 10614  013F68  51BD               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 10615  013F6A  26D9               	addwf	fsr2l,f,c
 10616  013F6C  51BE               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 10617  013F6E  22DA               	addwfc	fsr2h,f,c
 10618  013F70  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 10619  013F74  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 10620  013F78  0E05               	movlw	5
 10621  013F7A  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 10622  013F7C  0E01               	movlw	1
 10623  013F7E  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 10624  013F80  EF1C  F0A1         	goto	_Byte_SetBit	;wreg free
 10625  013F84                     __end_of_SPI_MaxSpeed:
 10626                           	opt stack 0
 10627                           tblptru	equ	0xFF8
 10628                           tblptrh	equ	0xFF7
 10629                           tblptrl	equ	0xFF6
 10630                           tablat	equ	0xFF5
 10631                           prodh	equ	0xFF4
 10632                           prodl	equ	0xFF3
 10633                           intcon	equ	0xFF2
 10634                           indf0	equ	0xFEF
 10635                           postinc0	equ	0xFEE
 10636                           fsr0h	equ	0xFEA
 10637                           fsr0l	equ	0xFE9
 10638                           wreg	equ	0xFE8
 10639                           indf1	equ	0xFE7
 10640                           postdec1	equ	0xFE5
 10641                           fsr1h	equ	0xFE2
 10642                           fsr1l	equ	0xFE1
 10643                           indf2	equ	0xFDF
 10644                           postinc2	equ	0xFDE
 10645                           postdec2	equ	0xFDD
 10646                           plusw2	equ	0xFDB
 10647                           fsr2h	equ	0xFDA
 10648                           fsr2l	equ	0xFD9
 10649                           status	equ	0xFD8
 10650                           
 10651 ;; *************** function _LCD_Reset *****************
 10652 ;; Defined at:
 10653 ;;		line 82 in file "Library/LCD.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;		None
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  1    wreg      void 
 10660 ;; Registers used:
 10661 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;Total ram usage:        0 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:   20
 10674 ;; This function calls:
 10675 ;;		_LED_Toggle
 10676 ;;		_Reset_High
 10677 ;;		_Reset_Low
 10678 ;;		_delay_ms
 10679 ;; This function is called by:
 10680 ;;		_Configure_GPIOs
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text50
 10685  0139C0                     __ptext50:
 10686                           	opt stack 0
 10687  0139C0                     _LCD_Reset:
 10688                           	opt stack 0
 10689  0139C0                     i2L__ptext53:
 10690                           	opt stack 0
 10691  0139C0                     i2L_Reset_High:
 10692                           	opt stack 0
 10693  0139C0                     i2Ll10349:
 10694                           	opt stack 8
 10695                           
 10696                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 0);
 10697  0139C0  0EA1               	movlw	low _PortF
 10698  0139C2  0100               	movlb	0	; () banked
 10699  0139C4  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
 10700  0139C6  0E01               	movlw	high _PortF
 10701  0139C8  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10702  0139CA  0E06               	movlw	6
 10703  0139CC  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
 10704  0139CE  6BC0               	clrf	Port_SetPin@pValue& (0+255),b
 10705  0139D0  EC96  F09D         	call	_Port_SetPin	;wreg free
 10706  0139D4                     i2Ll651:
 10707                           	opt stack 7
 10708                           
 10709                           ;LCD.c: 85: LED_Toggle(eLED2);
 10710  0139D4  0E01               	movlw	1
 10711  0139D6  EC2E  F0A5         	call	_LED_Toggle
 10712                           
 10713                           ;LCD.c: 86: delay_ms(0x80);
 10714  0139DA  0100               	movlb	0	; () banked
 10715  0139DC  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
 10716  0139DE  0E80               	movlw	128
 10717  0139E0  6FAE               	movwf	delay_ms@ms& (0+255),b
 10718  0139E2  EC94  F0A1         	call	_delay_ms	;wreg free
 10719                           
 10720                           ;LCD.c: 87: LED_Toggle(eLED2);
 10721  0139E6  0E01               	movlw	1
 10722  0139E8  EC2E  F0A5         	call	_LED_Toggle
 10723  0139EC                     i3L__ptext52:
 10724                           	opt stack 0
 10725  0139EC                     i3L_Reset_Low:
 10726                           	opt stack 0
 10727  0139EC                     i3Ll10347:
 10728                           	opt stack 8
 10729                           
 10730                           ;LCD.c: 30: Port_SetPin(&PortF, eP6, 1);
 10731  0139EC  0EA1               	movlw	low _PortF
 10732  0139EE  0100               	movlb	0	; () banked
 10733  0139F0  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
 10734  0139F2  0E01               	movlw	high _PortF
 10735  0139F4  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10736  0139F6  0E06               	movlw	6
 10737  0139F8  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
 10738  0139FA  0E01               	movlw	1
 10739  0139FC  6FC0               	movwf	Port_SetPin@pValue& (0+255),b
 10740  0139FE  EC96  F09D         	call	_Port_SetPin	;wreg free
 10741  013A02                     i3Ll648:
 10742                           	opt stack 7
 10743                           
 10744                           ;LCD.c: 89: delay_ms(0x80);
 10745  013A02  0100               	movlb	0	; () banked
 10746  013A04  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
 10747  013A06  0E80               	movlw	128
 10748  013A08  6FAE               	movwf	delay_ms@ms& (0+255),b
 10749  013A0A  EC94  F0A1         	call	_delay_ms	;wreg free
 10750                           
 10751                           ;LCD.c: 90: LED_Toggle(eLED2);
 10752  013A0E  0E01               	movlw	1
 10753  013A10  EC2E  F0A5         	call	_LED_Toggle
 10754  013A14                     i4L__ptext53:
 10755                           	opt stack 0
 10756  013A14                     i4L_Reset_High:
 10757                           	opt stack 0
 10758  013A14                     i4Ll10349:
 10759                           	opt stack 8
 10760                           
 10761                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 0);
 10762  013A14  0EA1               	movlw	low _PortF
 10763  013A16  0100               	movlb	0	; () banked
 10764  013A18  6FBD               	movwf	Port_SetPin@pInput& (0+255),b
 10765  013A1A  0E01               	movlw	high _PortF
 10766  013A1C  6FBE               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10767  013A1E  0E06               	movlw	6
 10768  013A20  6FBF               	movwf	Port_SetPin@pPin& (0+255),b
 10769  013A22  6BC0               	clrf	Port_SetPin@pValue& (0+255),b
 10770  013A24  EC96  F09D         	call	_Port_SetPin	;wreg free
 10771  013A28                     i4Ll651:
 10772                           	opt stack 7
 10773                           
 10774                           ;LCD.c: 92: delay_ms(0x80);
 10775  013A28  0100               	movlb	0	; () banked
 10776  013A2A  6BAF               	clrf	(delay_ms@ms+1)& (0+255),b
 10777  013A2C  0E80               	movlw	128
 10778  013A2E  6FAE               	movwf	delay_ms@ms& (0+255),b
 10779  013A30  EC94  F0A1         	call	_delay_ms	;wreg free
 10780                           
 10781                           ;LCD.c: 93: LED_Toggle(eLED2);
 10782  013A34  0E01               	movlw	1
 10783  013A36  EF2E  F0A5         	goto	_LED_Toggle
 10784  013A3A                     __end_of_LCD_Reset:
 10785                           	opt stack 0
 10786                           tblptru	equ	0xFF8
 10787                           tblptrh	equ	0xFF7
 10788                           tblptrl	equ	0xFF6
 10789                           tablat	equ	0xFF5
 10790                           prodh	equ	0xFF4
 10791                           prodl	equ	0xFF3
 10792                           intcon	equ	0xFF2
 10793                           indf0	equ	0xFEF
 10794                           postinc0	equ	0xFEE
 10795                           fsr0h	equ	0xFEA
 10796                           fsr0l	equ	0xFE9
 10797                           wreg	equ	0xFE8
 10798                           indf1	equ	0xFE7
 10799                           postdec1	equ	0xFE5
 10800                           fsr1h	equ	0xFE2
 10801                           fsr1l	equ	0xFE1
 10802                           indf2	equ	0xFDF
 10803                           postinc2	equ	0xFDE
 10804                           postdec2	equ	0xFDD
 10805                           plusw2	equ	0xFDB
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810 ;; *************** function _delay_ms *****************
 10811 ;; Defined at:
 10812 ;;		line 240 in file "Library/Types.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;  ms              2    0[BANK0 ] unsigned short 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  u               4    2[BANK0 ] volatile unsigned long 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;Total ram usage:        6 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:   14
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_LCD_Reset
 10837 ;;		_LCD_Init
 10838 ;;		_MXK_Init
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text51
 10843  014328                     __ptext51:
 10844                           	opt stack 0
 10845  014328                     _delay_ms:
 10846                           	opt stack 15
 10847                           
 10848                           ;Types.c: 242: volatile unsigned long u;
 10849                           ;Types.c: 243: while (ms--)
 10850                           
 10851                           ;incstack = 0
 10852  014328  D015               	goto	l10373
 10853  01432A                     l10365:
 10854                           
 10855                           ;Types.c: 244: {
 10856                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 10857  01432A  0100               	movlb	0	; () banked
 10858  01432C  6BB0               	clrf	delay_ms@u& (0+255),b	;volatile
 10859  01432E  6BB1               	clrf	(delay_ms@u+1)& (0+255),b	;volatile
 10860  014330  6BB2               	clrf	(delay_ms@u+2)& (0+255),b	;volatile
 10861  014332  6BB3               	clrf	(delay_ms@u+3)& (0+255),b	;volatile
 10862  014334  51B3               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 10863  014336  11B2               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 10864  014338  E10D               	bnz	l10373
 10865  01433A  0EB0               	movlw	176
 10866  01433C  5DB0               	subwf	delay_ms@u& (0+255),w,b	;volatile
 10867  01433E  0E04               	movlw	4
 10868  014340  59B1               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 10869  014342  E208               	bc	l10373
 10870                           
 10871                           ; BSR set to: 0
 10872                           
 10873                           ; BSR set to: 0
 10874  014344  F000               	nop		; ;# 
 10875  014346  0100               	movlb	0	; () banked
 10876  014348  2BB0               	incf	delay_ms@u& (0+255),f,b	;volatile
 10877  01434A  0E00               	movlw	0
 10878  01434C  23B1               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 10879  01434E  23B2               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 10880  014350  23B3               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 10881  014352  D7F0               	goto	L7
 10882  014354                     l10373:
 10883  014354  0100               	movlb	0	; () banked
 10884  014356  07AE               	decf	delay_ms@ms& (0+255),f,b
 10885  014358  A0D8               	btfss	status,0,c
 10886  01435A  07AF               	decf	(delay_ms@ms+1)& (0+255),f,b
 10887  01435C  29AE               	incf	delay_ms@ms& (0+255),w,b
 10888  01435E  E1E5               	bnz	l10365
 10889  014360  29AF               	incf	(delay_ms@ms+1)& (0+255),w,b
 10890  014362  E001               	bz	l10375
 10891  014364  D7E2               	goto	l10365
 10892  014366                     l10375:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;Types.c: 251: }
 10896                           ;Types.c: 252: }
 10897                           ;Types.c: 253: u = 0x8008;
 10898  014366  0E08               	movlw	8
 10899  014368  0100               	movlb	0	; () banked
 10900  01436A  6FB0               	movwf	delay_ms@u& (0+255),b	;volatile
 10901  01436C  0E80               	movlw	128
 10902  01436E  6FB1               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10903  014370  6BB2               	clrf	(delay_ms@u+2)& (0+255),b	;volatile
 10904  014372  6BB3               	clrf	(delay_ms@u+3)& (0+255),b	;volatile
 10905                           
 10906                           ; BSR set to: 0
 10907  014374  0C00               	retlw	0	;funcret
 10908  014376                     __end_of_delay_ms:
 10909                           	opt stack 0
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           indf0	equ	0xFEF
 10918                           postinc0	equ	0xFEE
 10919                           fsr0h	equ	0xFEA
 10920                           fsr0l	equ	0xFE9
 10921                           wreg	equ	0xFE8
 10922                           indf1	equ	0xFE7
 10923                           postdec1	equ	0xFE5
 10924                           fsr1h	equ	0xFE2
 10925                           fsr1l	equ	0xFE1
 10926                           indf2	equ	0xFDF
 10927                           postinc2	equ	0xFDE
 10928                           postdec2	equ	0xFDD
 10929                           plusw2	equ	0xFDB
 10930                           fsr2h	equ	0xFDA
 10931                           fsr2l	equ	0xFD9
 10932                           status	equ	0xFD8
 10933                           
 10934 ;; *************** function _Reset_Low *****************
 10935 ;; Defined at:
 10936 ;;		line 28 in file "Library/LCD.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;		None
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;		None
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  1    wreg      void 
 10943 ;; Registers used:
 10944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;Total ram usage:        0 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:   18
 10957 ;; This function calls:
 10958 ;;		_Port_SetPin
 10959 ;; This function is called by:
 10960 ;;		_LCD_Reset
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           	psect	text52
 10965  000000                     __ptext52:
 10966                           	opt stack 0
 10967  000000                     _Reset_Low:
 10968                           	opt stack 0
 10969  000000                     __end_of_Reset_Low:
 10970                           	opt stack 0
 10971                           tblptru	equ	0xFF8
 10972                           tblptrh	equ	0xFF7
 10973                           tblptrl	equ	0xFF6
 10974                           tablat	equ	0xFF5
 10975                           prodh	equ	0xFF4
 10976                           prodl	equ	0xFF3
 10977                           intcon	equ	0xFF2
 10978                           indf0	equ	0xFEF
 10979                           postinc0	equ	0xFEE
 10980                           fsr0h	equ	0xFEA
 10981                           fsr0l	equ	0xFE9
 10982                           wreg	equ	0xFE8
 10983                           indf1	equ	0xFE7
 10984                           postdec1	equ	0xFE5
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           plusw2	equ	0xFDB
 10991                           fsr2h	equ	0xFDA
 10992                           fsr2l	equ	0xFD9
 10993                           status	equ	0xFD8
 10994                           
 10995 ;; *************** function _Reset_High *****************
 10996 ;; Defined at:
 10997 ;;		line 32 in file "Library/LCD.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;		None
 11002 ;; Return value:  Size  Location     Type
 11003 ;;                  1    wreg      void 
 11004 ;; Registers used:
 11005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;Total ram usage:        0 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:   18
 11018 ;; This function calls:
 11019 ;;		_Port_SetPin
 11020 ;; This function is called by:
 11021 ;;		_LCD_Reset
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           	psect	text53
 11026  000000                     __ptext53:
 11027                           	opt stack 0
 11028  000000                     _Reset_High:
 11029                           	opt stack 0
 11030  000000                     __end_of_Reset_High:
 11031                           	opt stack 0
 11032                           tblptru	equ	0xFF8
 11033                           tblptrh	equ	0xFF7
 11034                           tblptrl	equ	0xFF6
 11035                           tablat	equ	0xFF5
 11036                           prodh	equ	0xFF4
 11037                           prodl	equ	0xFF3
 11038                           intcon	equ	0xFF2
 11039                           indf0	equ	0xFEF
 11040                           postinc0	equ	0xFEE
 11041                           fsr0h	equ	0xFEA
 11042                           fsr0l	equ	0xFE9
 11043                           wreg	equ	0xFE8
 11044                           indf1	equ	0xFE7
 11045                           postdec1	equ	0xFE5
 11046                           fsr1h	equ	0xFE2
 11047                           fsr1l	equ	0xFE1
 11048                           indf2	equ	0xFDF
 11049                           postinc2	equ	0xFDE
 11050                           postdec2	equ	0xFDD
 11051                           plusw2	equ	0xFDB
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function _Console_Init *****************
 11057 ;; Defined at:
 11058 ;;		line 154 in file "Library/Console.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;		None
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;  y               1    3[BANK0 ] unsigned char 
 11063 ;;  x               1    2[BANK0 ] unsigned char 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  1    wreg      void 
 11066 ;; Registers used:
 11067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;Total ram usage:        4 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:   14
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		_FunctInitLCD
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text54
 11088  013C72                     __ptext54:
 11089                           	opt stack 0
 11090  013C72                     _Console_Init:
 11091                           	opt stack 15
 11092                           
 11093                           ;Console.c: 157: UINT8 x, y;
 11094                           ;Console.c: 159: lBufferX = 0;
 11095                           
 11096                           ;incstack = 0
 11097  013C72  0100               	movlb	0	; () banked
 11098  013C74  6BA1               	clrf	_lBufferX& (0+255),b
 11099                           
 11100                           ;Console.c: 160: lBufferY = 0;
 11101  013C76  6BA2               	clrf	_lBufferY& (0+255),b
 11102                           
 11103                           ;Console.c: 162: for (x = 0; x < (UINT8)((128-6)/6); x++)
 11104  013C78  6BB0               	clrf	Console_Init@x& (0+255),b
 11105  013C7A                     l12111:
 11106                           
 11107                           ; BSR set to: 0
 11108  013C7A  0E13               	movlw	19
 11109  013C7C  0100               	movlb	0	; () banked
 11110  013C7E  65B0               	cpfsgt	Console_Init@x& (0+255),b
 11111  013C80  D001               	goto	l12115
 11112  013C82  0C13               	retlw	19
 11113  013C84                     l12115:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;Console.c: 163: {
 11117                           ;Console.c: 164: for (y = 0; y < (UINT8)((128-6)/8); y++)
 11118  013C84  0100               	movlb	0	; () banked
 11119  013C86  6BB1               	clrf	Console_Init@y& (0+255),b
 11120  013C88                     l12117:
 11121                           
 11122                           ; BSR set to: 0
 11123  013C88  0E0E               	movlw	14
 11124  013C8A  0100               	movlb	0	; () banked
 11125  013C8C  65B1               	cpfsgt	Console_Init@y& (0+255),b
 11126  013C8E  D001               	goto	l12121
 11127  013C90  D020               	goto	l12127
 11128  013C92                     l12121:
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;Console.c: 165: {
 11132                           ;Console.c: 166: lBuffer[y][x] = '\0';
 11133  013C92  0100               	movlb	0	; () banked
 11134  013C94  51B1               	movf	Console_Init@y& (0+255),w,b
 11135  013C96  0D14               	mullw	20
 11136  013C98  0E11               	movlw	low _lBuffer
 11137  013C9A  6FAE               	movwf	??_Console_Init& (0+255),b
 11138  013C9C  0E0C               	movlw	high _lBuffer
 11139  013C9E  6FAF               	movwf	(??_Console_Init+1)& (0+255),b
 11140  013CA0  50F3               	movf	prodl,w,c
 11141  013CA2  27AE               	addwf	??_Console_Init& (0+255),f,b
 11142  013CA4  50F4               	movf	prodh,w,c
 11143  013CA6  23AF               	addwfc	(??_Console_Init+1)& (0+255),f,b
 11144  013CA8  51B0               	movf	Console_Init@x& (0+255),w,b
 11145  013CAA  0D01               	mullw	1
 11146  013CAC  50F3               	movf	prodl,w,c
 11147  013CAE  25AE               	addwf	??_Console_Init& (0+255),w,b
 11148  013CB0  6ED9               	movwf	fsr2l,c
 11149  013CB2  50F4               	movf	prodh,w,c
 11150  013CB4  21AF               	addwfc	(??_Console_Init+1)& (0+255),w,b
 11151  013CB6  6EDA               	movwf	fsr2h,c
 11152  013CB8  6ADF               	clrf	indf2,c
 11153                           
 11154                           ;Console.c: 167: lCBuffer[y] = 0xFFFF;
 11155  013CBA  51B1               	movf	Console_Init@y& (0+255),w,b
 11156  013CBC  0D02               	mullw	2
 11157  013CBE  0E00               	movlw	low _lCBuffer
 11158  013CC0  24F3               	addwf	prodl,w,c
 11159  013CC2  6ED9               	movwf	fsr2l,c
 11160  013CC4  0E02               	movlw	high _lCBuffer
 11161  013CC6  20F4               	addwfc	prodh,w,c
 11162  013CC8  6EDA               	movwf	fsr2h,c
 11163  013CCA  68DE               	setf	postinc2,c
 11164  013CCC  68DD               	setf	postdec2,c
 11165                           
 11166                           ; BSR set to: 0
 11167  013CCE  2BB1               	incf	Console_Init@y& (0+255),f,b
 11168  013CD0  D7DB               	goto	l12117
 11169  013CD2                     l12127:
 11170                           
 11171                           ; BSR set to: 0
 11172  013CD2  0100               	movlb	0	; () banked
 11173  013CD4  2BB0               	incf	Console_Init@x& (0+255),f,b
 11174  013CD6  D7D1               	goto	l12111
 11175  013CD8                     __end_of_Console_Init:
 11176                           	opt stack 0
 11177                           tblptru	equ	0xFF8
 11178                           tblptrh	equ	0xFF7
 11179                           tblptrl	equ	0xFF6
 11180                           tablat	equ	0xFF5
 11181                           prodh	equ	0xFF4
 11182                           prodl	equ	0xFF3
 11183                           intcon	equ	0xFF2
 11184                           indf0	equ	0xFEF
 11185                           postinc0	equ	0xFEE
 11186                           fsr0h	equ	0xFEA
 11187                           fsr0l	equ	0xFE9
 11188                           wreg	equ	0xFE8
 11189                           indf1	equ	0xFE7
 11190                           postdec1	equ	0xFE5
 11191                           fsr1h	equ	0xFE2
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           plusw2	equ	0xFDB
 11197                           fsr2h	equ	0xFDA
 11198                           fsr2l	equ	0xFD9
 11199                           status	equ	0xFD8
 11200                           
 11201 ;; *************** function _FunctInitHMI *****************
 11202 ;; Defined at:
 11203 ;;		line 112 in file "Functions.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;		None
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;		None
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  1    wreg      void 
 11210 ;; Registers used:
 11211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;Total ram usage:        0 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:   23
 11224 ;; This function calls:
 11225 ;;		_HMI_Init
 11226 ;;		_HMI_SetBar
 11227 ;;		_HMI_SetSegments
 11228 ;;		_MXK_BlockSwitchTo
 11229 ;;		_MXK_Release
 11230 ;; This function is called by:
 11231 ;;		_main
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           	psect	text55
 11236  014DBC                     __ptext55:
 11237                           	opt stack 0
 11238  014DBC                     _FunctInitHMI:
 11239                           	opt stack 7
 11240                           
 11241                           ;Functions.c: 115: if (MXK_BlockSwitchTo(eMXK_HMI))
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;incstack = 0
 11245  014DBC  0E06               	movlw	6
 11246  014DBE  EC48  F0A5         	call	_MXK_BlockSwitchTo
 11247  014DC2  0900               	iorlw	0
 11248  014DC4  B4D8               	btfsc	status,2,c
 11249  014DC6  0012               	return	
 11250                           
 11251                           ;Functions.c: 117: {
 11252                           ;Functions.c: 119: HMI_Init();
 11253  014DC8  EC94  F08E         	call	_HMI_Init	;wreg free
 11254                           
 11255                           ;Functions.c: 122: HMI_SetBar(0x00);
 11256  014DCC  0E00               	movlw	0
 11257  014DCE  EC43  F0A8         	call	_HMI_SetBar
 11258                           
 11259                           ;Functions.c: 128: HMI_SetSegments((str)"Printf");
 11260  014DD2  0EDE               	movlw	low STR_9
 11261  014DD4  0100               	movlb	0	; () banked
 11262  014DD6  6FAF               	movwf	HMI_SetSegments@pString& (0+255),b
 11263  014DD8  0EFF               	movlw	high STR_9
 11264  014DDA  6FB0               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 11265  014DDC  EC5F  F093         	call	_HMI_SetSegments	;wreg free
 11266                           
 11267                           ;Functions.c: 132: MXK_Release();
 11268  014DE0  EF4C  F0A8         	goto	_MXK_Release	;wreg free
 11269  014DE4                     __end_of_FunctInitHMI:
 11270                           	opt stack 0
 11271                           tblptru	equ	0xFF8
 11272                           tblptrh	equ	0xFF7
 11273                           tblptrl	equ	0xFF6
 11274                           tablat	equ	0xFF5
 11275                           prodh	equ	0xFF4
 11276                           prodl	equ	0xFF3
 11277                           intcon	equ	0xFF2
 11278                           indf0	equ	0xFEF
 11279                           postinc0	equ	0xFEE
 11280                           fsr0h	equ	0xFEA
 11281                           fsr0l	equ	0xFE9
 11282                           wreg	equ	0xFE8
 11283                           indf1	equ	0xFE7
 11284                           postdec1	equ	0xFE5
 11285                           fsr1h	equ	0xFE2
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           plusw2	equ	0xFDB
 11291                           fsr2h	equ	0xFDA
 11292                           fsr2l	equ	0xFD9
 11293                           status	equ	0xFD8
 11294                           
 11295 ;; *************** function _HMI_Init *****************
 11296 ;; Defined at:
 11297 ;;		line 73 in file "HMI.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  in              2   67[BANK0 ] unsigned short 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  1    wreg      void 
 11304 ;; Registers used:
 11305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;Total ram usage:        2 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:   22
 11318 ;; This function calls:
 11319 ;;		_Button_Init
 11320 ;;		_SPI_Init
 11321 ;;		_SPI_MinSpeed
 11322 ;; This function is called by:
 11323 ;;		_FunctInitHMI
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           	psect	text56
 11328  011D28                     __ptext56:
 11329                           	opt stack 0
 11330  011D28                     _HMI_Init:
 11331                           	opt stack 7
 11332                           
 11333                           ;HMI.c: 75: Button_Init(&(HMIBoard.mDIP), eHMI_DIP, 2, Event_HMI_DIPSwitch);
 11334                           
 11335                           ;incstack = 0
 11336  011D28  0E5B               	movlw	low (_HMIBoard+40)
 11337  011D2A  0100               	movlb	0	; () banked
 11338  011D2C  6FE9               	movwf	Button_Init@pInput& (0+255),b
 11339  011D2E  0E01               	movlw	high (_HMIBoard+40)
 11340  011D30  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 11341  011D32  0E07               	movlw	7
 11342  011D34  6FEB               	movwf	Button_Init@pButton& (0+255),b
 11343  011D36  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 11344  011D38  0E02               	movlw	2
 11345  011D3A  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 11346  011D3C  0E0A               	movlw	low _Event_HMI_DIPSwitch
 11347  011D3E  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 11348  011D40  0E4C               	movlw	high _Event_HMI_DIPSwitch
 11349  011D42  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11350  011D44  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 11351  011D46  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11352  011D48  EC53  F098         	call	_Button_Init	;wreg free
 11353                           
 11354                           ;HMI.c: 76: Button_Init(&(HMIBoard.mLeft), eHMI_Left, 2, Event_HMI_LeftButton);
 11355  011D4C  0E43               	movlw	low (_HMIBoard+16)
 11356  011D4E  0100               	movlb	0	; () banked
 11357  011D50  6FE9               	movwf	Button_Init@pInput& (0+255),b
 11358  011D52  0E01               	movlw	high (_HMIBoard+16)
 11359  011D54  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 11360  011D56  0E03               	movlw	3
 11361  011D58  6FEB               	movwf	Button_Init@pButton& (0+255),b
 11362  011D5A  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 11363  011D5C  0E02               	movlw	2
 11364  011D5E  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 11365  011D60  0EC0               	movlw	low _Event_HMI_LeftButton
 11366  011D62  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 11367  011D64  0E43               	movlw	high _Event_HMI_LeftButton
 11368  011D66  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11369  011D68  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 11370  011D6A  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11371  011D6C  EC53  F098         	call	_Button_Init	;wreg free
 11372                           
 11373                           ;HMI.c: 77: Button_Init(&(HMIBoard.mRight), eHMI_Right, 2, Event_HMI_RightButton);
 11374  011D70  0E3B               	movlw	low (_HMIBoard+8)
 11375  011D72  0100               	movlb	0	; () banked
 11376  011D74  6FE9               	movwf	Button_Init@pInput& (0+255),b
 11377  011D76  0E01               	movlw	high (_HMIBoard+8)
 11378  011D78  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 11379  011D7A  0E04               	movlw	4
 11380  011D7C  6FEB               	movwf	Button_Init@pButton& (0+255),b
 11381  011D7E  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 11382  011D80  0E02               	movlw	2
 11383  011D82  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 11384  011D84  0E7C               	movlw	low _Event_HMI_RightButton
 11385  011D86  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 11386  011D88  0E47               	movlw	high _Event_HMI_RightButton
 11387  011D8A  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11388  011D8C  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 11389  011D8E  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11390  011D90  EC53  F098         	call	_Button_Init	;wreg free
 11391                           
 11392                           ;HMI.c: 78: Button_Init(&(HMIBoard.mUp), eHMI_Up, 2, Event_HMI_UpButton);
 11393  011D94  0E4B               	movlw	low (_HMIBoard+24)
 11394  011D96  0100               	movlb	0	; () banked
 11395  011D98  6FE9               	movwf	Button_Init@pInput& (0+255),b
 11396  011D9A  0E01               	movlw	high (_HMIBoard+24)
 11397  011D9C  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 11398  011D9E  0E05               	movlw	5
 11399  011DA0  6FEB               	movwf	Button_Init@pButton& (0+255),b
 11400  011DA2  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 11401  011DA4  0E02               	movlw	2
 11402  011DA6  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 11403  011DA8  0E28               	movlw	low _Event_HMI_UpButton
 11404  011DAA  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 11405  011DAC  0E4A               	movlw	high _Event_HMI_UpButton
 11406  011DAE  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11407  011DB0  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 11408  011DB2  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11409  011DB4  EC53  F098         	call	_Button_Init	;wreg free
 11410                           
 11411                           ;HMI.c: 79: Button_Init(&(HMIBoard.mDown), eHMI_Down, 2, Event_HMI_DownButton);
 11412  011DB8  0E53               	movlw	low (_HMIBoard+32)
 11413  011DBA  0100               	movlb	0	; () banked
 11414  011DBC  6FE9               	movwf	Button_Init@pInput& (0+255),b
 11415  011DBE  0E01               	movlw	high (_HMIBoard+32)
 11416  011DC0  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 11417  011DC2  0E06               	movlw	6
 11418  011DC4  6FEB               	movwf	Button_Init@pButton& (0+255),b
 11419  011DC6  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 11420  011DC8  0E02               	movlw	2
 11421  011DCA  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 11422  011DCC  0EBC               	movlw	low _Event_HMI_DownButton
 11423  011DCE  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 11424  011DD0  0E49               	movlw	high _Event_HMI_DownButton
 11425  011DD2  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11426  011DD4  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 11427  011DD6  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11428  011DD8  EC53  F098         	call	_Button_Init	;wreg free
 11429                           
 11430                           ;HMI.c: 83: SPI_Init(&SPI1, (100*1000L), eSPI1, eSPI_Mode2);
 11431  011DDC  0E63               	movlw	low _SPI1
 11432  011DDE  0100               	movlb	0	; () banked
 11433  011DE0  6FDB               	movwf	SPI_Init@pInput& (0+255),b
 11434  011DE2  0E01               	movlw	high _SPI1
 11435  011DE4  6FDC               	movwf	(SPI_Init@pInput+1)& (0+255),b
 11436  011DE6  0EA0               	movlw	160
 11437  011DE8  6FDD               	movwf	SPI_Init@pClock& (0+255),b
 11438  011DEA  0E86               	movlw	134
 11439  011DEC  6FDE               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11440  011DEE  0E01               	movlw	1
 11441  011DF0  6FDF               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11442  011DF2  6BE0               	clrf	(SPI_Init@pClock+3)& (0+255),b
 11443  011DF4  6BE1               	clrf	SPI_Init@pChannel& (0+255),b
 11444  011DF6  0E02               	movlw	2
 11445  011DF8  6FE2               	movwf	SPI_Init@pMode& (0+255),b
 11446  011DFA  EC00  F080         	call	_SPI_Init	;wreg free
 11447                           
 11448                           ;HMI.c: 84: SPI_MinSpeed(&SPI1);
 11449  011DFE  0E63               	movlw	low _SPI1
 11450  011E00  0100               	movlb	0	; () banked
 11451  011E02  6FBD               	movwf	SPI_MinSpeed@pInput& (0+255),b
 11452  011E04  0E01               	movlw	high _SPI1
 11453  011E06  6FBE               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 11454  011E08  EC9E  F09E         	call	_SPI_MinSpeed	;wreg free
 11455                           
 11456                           ;HMI.c: 86: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 11457  011E0C  0E00               	movlw	0
 11458  011E0E  0100               	movlb	0	; () banked
 11459  011E10  6FF2               	movwf	(HMI_Init@in+1)& (0+255),b
 11460  011E12  6FF1               	movwf	HMI_Init@in& (0+255),b
 11461  011E14                     l12327:
 11462                           
 11463                           ; BSR set to: 0
 11464  011E14  0100               	movlb	0	; () banked
 11465  011E16  51F2               	movf	(HMI_Init@in+1)& (0+255),w,b
 11466  011E18  E110               	bnz	l2188
 11467  011E1A  0E08               	movlw	8
 11468  011E1C  5DF1               	subwf	HMI_Init@in& (0+255),w,b
 11469  011E1E  E301               	bnc	l12331
 11470                           
 11471                           ; BSR set to: 0
 11472  011E20  0012               	return	
 11473  011E22                     l12331:
 11474                           
 11475                           ; BSR set to: 0
 11476                           ;HMI.c: 87: HMIBoard.Bytes[in] = 0;
 11477  011E22  0E33               	movlw	low _HMIBoard
 11478  011E24  0100               	movlb	0	; () banked
 11479  011E26  25F1               	addwf	HMI_Init@in& (0+255),w,b
 11480  011E28  6ED9               	movwf	fsr2l,c
 11481  011E2A  0E01               	movlw	high _HMIBoard
 11482  011E2C  21F2               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 11483  011E2E  6EDA               	movwf	fsr2h,c
 11484  011E30  0E00               	movlw	0
 11485  011E32  6EDF               	movwf	indf2,c
 11486                           
 11487                           ; BSR set to: 0
 11488  011E34  4BF1               	infsnz	HMI_Init@in& (0+255),f,b
 11489  011E36  2BF2               	incf	(HMI_Init@in+1)& (0+255),f,b
 11490  011E38  D7ED               	goto	l12327
 11491  011E3A                     l2188:
 11492                           
 11493                           ; BSR set to: 0
 11494  011E3A  0012               	return		;funcret
 11495  011E3C                     __end_of_HMI_Init:
 11496                           	opt stack 0
 11497                           tblptru	equ	0xFF8
 11498                           tblptrh	equ	0xFF7
 11499                           tblptrl	equ	0xFF6
 11500                           tablat	equ	0xFF5
 11501                           prodh	equ	0xFF4
 11502                           prodl	equ	0xFF3
 11503                           intcon	equ	0xFF2
 11504                           indf0	equ	0xFEF
 11505                           postinc0	equ	0xFEE
 11506                           fsr0h	equ	0xFEA
 11507                           fsr0l	equ	0xFE9
 11508                           wreg	equ	0xFE8
 11509                           indf1	equ	0xFE7
 11510                           postdec1	equ	0xFE5
 11511                           fsr1h	equ	0xFE2
 11512                           fsr1l	equ	0xFE1
 11513                           indf2	equ	0xFDF
 11514                           postinc2	equ	0xFDE
 11515                           postdec2	equ	0xFDD
 11516                           plusw2	equ	0xFDB
 11517                           fsr2h	equ	0xFDA
 11518                           fsr2l	equ	0xFD9
 11519                           status	equ	0xFD8
 11520                           
 11521 ;; *************** function _SPI_MinSpeed *****************
 11522 ;; Defined at:
 11523 ;;		line 177 in file "Library/SPI.c"
 11524 ;; Parameters:    Size  Location     Type
 11525 ;;  pInput          2   15[BANK0 ] const PTR struct SPI
 11526 ;;		 -> SPI1(11), 
 11527 ;; Auto vars:     Size  Location     Type
 11528 ;;		None
 11529 ;; Return value:  Size  Location     Type
 11530 ;;                  1    wreg      void 
 11531 ;; Registers used:
 11532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11533 ;; Tracked objects:
 11534 ;;		On entry : 0/0
 11535 ;;		On exit  : 0/0
 11536 ;;		Unchanged: 0/0
 11537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11538 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11542 ;;Total ram usage:        2 bytes
 11543 ;; Hardware stack levels used:    1
 11544 ;; Hardware stack levels required when called:   16
 11545 ;; This function calls:
 11546 ;;		_Byte_SetBit
 11547 ;;		_Byte_SetQuad
 11548 ;; This function is called by:
 11549 ;;		_HMI_Init
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text57
 11554  013D3C                     __ptext57:
 11555                           	opt stack 0
 11556  013D3C                     _SPI_MinSpeed:
 11557                           	opt stack 12
 11558                           
 11559                           ;SPI.c: 181: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;incstack = 0
 11563  013D3C  0100               	movlb	0	; () banked
 11564  013D3E  EE20 F006          	lfsr	2,6
 11565  013D42  51BD               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11566  013D44  26D9               	addwf	fsr2l,f,c
 11567  013D46  51BE               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11568  013D48  22DA               	addwfc	fsr2h,f,c
 11569  013D4A  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11570  013D4E  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11571  013D52  0E05               	movlw	5
 11572  013D54  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11573  013D56  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11574  013D58  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11575                           
 11576                           ;SPI.c: 184: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 11577  013D5C  0100               	movlb	0	; () banked
 11578  013D5E  EE20 F006          	lfsr	2,6
 11579  013D62  51BD               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11580  013D64  26D9               	addwf	fsr2l,f,c
 11581  013D66  51BE               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11582  013D68  22DA               	addwfc	fsr2h,f,c
 11583  013D6A  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 11584  013D6E  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 11585  013D72  6BBB               	clrf	Byte_SetQuad@pQuad& (0+255),b
 11586  013D74  0E02               	movlw	2
 11587  013D76  6FBC               	movwf	Byte_SetQuad@pValue& (0+255),b
 11588  013D78  EC87  F094         	call	_Byte_SetQuad	;wreg free
 11589                           
 11590                           ;SPI.c: 185: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11591  013D7C  0100               	movlb	0	; () banked
 11592  013D7E  EE20 F006          	lfsr	2,6
 11593  013D82  51BD               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 11594  013D84  26D9               	addwf	fsr2l,f,c
 11595  013D86  51BE               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 11596  013D88  22DA               	addwfc	fsr2h,f,c
 11597  013D8A  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11598  013D8E  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11599  013D92  0E05               	movlw	5
 11600  013D94  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11601  013D96  0E01               	movlw	1
 11602  013D98  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 11603  013D9A  EF1C  F0A1         	goto	_Byte_SetBit	;wreg free
 11604  013D9E                     __end_of_SPI_MinSpeed:
 11605                           	opt stack 0
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           indf0	equ	0xFEF
 11614                           postinc0	equ	0xFEE
 11615                           fsr0h	equ	0xFEA
 11616                           fsr0l	equ	0xFE9
 11617                           wreg	equ	0xFE8
 11618                           indf1	equ	0xFE7
 11619                           postdec1	equ	0xFE5
 11620                           fsr1h	equ	0xFE2
 11621                           fsr1l	equ	0xFE1
 11622                           indf2	equ	0xFDF
 11623                           postinc2	equ	0xFDE
 11624                           postdec2	equ	0xFDD
 11625                           plusw2	equ	0xFDB
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _SPI_Init *****************
 11631 ;; Defined at:
 11632 ;;		line 11 in file "Library/SPI.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  pInput          2   45[BANK0 ] const PTR struct SPI
 11635 ;;		 -> SPI1(11), SPI2(11), 
 11636 ;;  pClock          4   47[BANK0 ] unsigned long 
 11637 ;;  pChannel        1   51[BANK0 ] enum E7734
 11638 ;;  pMode           1   52[BANK0 ] enum E7738
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      void 
 11643 ;; Registers used:
 11644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11650 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;Total ram usage:        8 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:   19
 11657 ;; This function calls:
 11658 ;;		_Byte_SetBit
 11659 ;;		_Byte_SetQuad
 11660 ;;		_Port_SetPinType
 11661 ;;		_SPI_DCS
 11662 ;;		_SPI_DisableISR
 11663 ;;		_Timer2_Init
 11664 ;; This function is called by:
 11665 ;;		_Configure_GPIOs
 11666 ;;		_HMI_Init
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           	psect	text58
 11671  010000                     __ptext58:
 11672                           	opt stack 0
 11673  010000                     _SPI_Init:
 11674                           	opt stack 8
 11675                           
 11676                           ;SPI.c: 13: pInput->mChannel = pChannel;
 11677                           
 11678                           ;incstack = 0
 11679  010000  0100               	movlb	0	; () banked
 11680  010002  EE20 F002          	lfsr	2,2
 11681  010006  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11682  010008  26D9               	addwf	fsr2l,f,c
 11683  01000A  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11684  01000C  22DA               	addwfc	fsr2h,f,c
 11685  01000E  C0E1  FFDF         	movff	SPI_Init@pChannel,indf2
 11686                           
 11687                           ;SPI.c: 22: switch (pChannel)
 11688  010012  D092               	goto	l10909
 11689  010014                     l10891:
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;SPI.c: 26: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 11693  010014  0EA4               	movlw	low _PortC
 11694  010016  0100               	movlb	0	; () banked
 11695  010018  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11696  01001A  0E00               	movlw	high _PortC
 11697  01001C  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11698  01001E  0E02               	movlw	2
 11699  010020  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11700  010022  0E03               	movlw	3
 11701  010024  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11702  010026  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11703                           
 11704                           ;SPI.c: 27: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 11705  01002A  0EA4               	movlw	low _PortC
 11706  01002C  0100               	movlb	0	; () banked
 11707  01002E  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11708  010030  0E00               	movlw	high _PortC
 11709  010032  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11710  010034  0E03               	movlw	3
 11711  010036  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11712  010038  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11713  01003A  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11714                           
 11715                           ;SPI.c: 28: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 11716  01003E  0EA4               	movlw	low _PortC
 11717  010040  0100               	movlb	0	; () banked
 11718  010042  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11719  010044  0E00               	movlw	high _PortC
 11720  010046  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11721  010048  0E05               	movlw	5
 11722  01004A  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11723  01004C  0E03               	movlw	3
 11724  01004E  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11725  010050  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11726                           
 11727                           ;SPI.c: 29: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 11728  010054  0EA4               	movlw	low _PortC
 11729  010056  0100               	movlb	0	; () banked
 11730  010058  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11731  01005A  0E00               	movlw	high _PortC
 11732  01005C  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11733  01005E  0E04               	movlw	4
 11734  010060  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11735  010062  6BD7               	clrf	Port_SetPinType@pType& (0+255),b
 11736  010064  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11737                           
 11738                           ;SPI.c: 31: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 11739  010068  0100               	movlb	0	; () banked
 11740  01006A  EE20 F003          	lfsr	2,3
 11741  01006E  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11742  010070  26D9               	addwf	fsr2l,f,c
 11743  010072  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11744  010074  22DA               	addwfc	fsr2h,f,c
 11745  010076  0EC7               	movlw	199
 11746  010078  6EDE               	movwf	postinc2,c
 11747  01007A  0E0F               	movlw	15
 11748  01007C  6EDD               	movwf	postdec2,c
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;SPI.c: 32: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 11752  01007E  EE20 F006          	lfsr	2,6
 11753  010082  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11754  010084  26D9               	addwf	fsr2l,f,c
 11755  010086  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11756  010088  22DA               	addwfc	fsr2h,f,c
 11757  01008A  0EC6               	movlw	198
 11758  01008C  6EDE               	movwf	postinc2,c
 11759  01008E  0E0F               	movlw	15
 11760  010090  6EDD               	movwf	postdec2,c
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;SPI.c: 33: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 11764  010092  EE20 F009          	lfsr	2,9
 11765  010096  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11766  010098  26D9               	addwf	fsr2l,f,c
 11767  01009A  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11768  01009C  22DA               	addwfc	fsr2h,f,c
 11769  01009E  0EC9               	movlw	201
 11770  0100A0  D047               	goto	L8
 11771  0100A2                     l10899:
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;SPI.c: 42: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 11775  0100A2  0E8D               	movlw	low _PortD
 11776  0100A4  0100               	movlb	0	; () banked
 11777  0100A6  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11778  0100A8  0E01               	movlw	high _PortD
 11779  0100AA  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11780  0100AC  0E07               	movlw	7
 11781  0100AE  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11782  0100B0  0E03               	movlw	3
 11783  0100B2  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11784  0100B4  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11785                           
 11786                           ;SPI.c: 43: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 11787  0100B8  0E8D               	movlw	low _PortD
 11788  0100BA  0100               	movlb	0	; () banked
 11789  0100BC  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11790  0100BE  0E01               	movlw	high _PortD
 11791  0100C0  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11792  0100C2  0E06               	movlw	6
 11793  0100C4  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11794  0100C6  0E03               	movlw	3
 11795  0100C8  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11796  0100CA  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11797                           
 11798                           ;SPI.c: 44: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 11799  0100CE  0E8D               	movlw	low _PortD
 11800  0100D0  0100               	movlb	0	; () banked
 11801  0100D2  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11802  0100D4  0E01               	movlw	high _PortD
 11803  0100D6  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11804  0100D8  0E04               	movlw	4
 11805  0100DA  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11806  0100DC  0E03               	movlw	3
 11807  0100DE  6FD7               	movwf	Port_SetPinType@pType& (0+255),b
 11808  0100E0  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11809                           
 11810                           ;SPI.c: 45: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 11811  0100E4  0E8D               	movlw	low _PortD
 11812  0100E6  0100               	movlb	0	; () banked
 11813  0100E8  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 11814  0100EA  0E01               	movlw	high _PortD
 11815  0100EC  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11816  0100EE  0E05               	movlw	5
 11817  0100F0  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 11818  0100F2  6BD7               	clrf	Port_SetPinType@pType& (0+255),b
 11819  0100F4  ECAD  F087         	call	_Port_SetPinType	;wreg free
 11820                           
 11821                           ;SPI.c: 47: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 11822  0100F8  0100               	movlb	0	; () banked
 11823  0100FA  EE20 F003          	lfsr	2,3
 11824  0100FE  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11825  010100  26D9               	addwf	fsr2l,f,c
 11826  010102  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11827  010104  22DA               	addwfc	fsr2h,f,c
 11828  010106  0E6D               	movlw	109
 11829  010108  6EDE               	movwf	postinc2,c
 11830  01010A  0E0F               	movlw	15
 11831  01010C  6EDD               	movwf	postdec2,c
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;SPI.c: 48: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 11835  01010E  EE20 F006          	lfsr	2,6
 11836  010112  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11837  010114  26D9               	addwf	fsr2l,f,c
 11838  010116  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11839  010118  22DA               	addwfc	fsr2h,f,c
 11840  01011A  0E6C               	movlw	108
 11841  01011C  6EDE               	movwf	postinc2,c
 11842  01011E  0E0F               	movlw	15
 11843  010120  6EDD               	movwf	postdec2,c
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;SPI.c: 49: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 11847  010122  EE20 F009          	lfsr	2,9
 11848  010126  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11849  010128  26D9               	addwf	fsr2l,f,c
 11850  01012A  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11851  01012C  22DA               	addwfc	fsr2h,f,c
 11852  01012E  0E6F               	movlw	111
 11853  010130                     L8:
 11854  010130  6EDE               	movwf	postinc2,c
 11855  010132  0E0F               	movlw	15
 11856  010134  6EDD               	movwf	postdec2,c
 11857                           
 11858                           ;SPI.c: 55: break;
 11859  010136  D008               	goto	l10911
 11860  010138                     l10909:
 11861                           
 11862                           ; BSR set to: 0
 11863  010138  0100               	movlb	0	; () banked
 11864  01013A  51E1               	movf	SPI_Init@pChannel& (0+255),w,b
 11865                           
 11866                           ; Switch size 1, requested type "space"
 11867                           ; Number of cases is 2, Range of values is 0 to 1
 11868                           ; switch strategies available:
 11869                           ; Name         Instructions Cycles
 11870                           ; simple_byte            7     4 (average)
 11871                           ;	Chosen strategy is simple_byte
 11872  01013C  E101 D76A          	bz	l10891
 11873  010140  0A01               	xorlw	1	; case 1
 11874  010142  A4D8               	btfss	status,2,c
 11875  010144  0012               	return	
 11876  010146  D7AD               	goto	l10899
 11877  010148                     l10911:
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;SPI.c: 61: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11881  010148  0100               	movlb	0	; () banked
 11882  01014A  EE20 F006          	lfsr	2,6
 11883  01014E  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11884  010150  26D9               	addwf	fsr2l,f,c
 11885  010152  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11886  010154  22DA               	addwfc	fsr2h,f,c
 11887  010156  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11888  01015A  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11889  01015E  0E05               	movlw	5
 11890  010160  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11891  010162  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11892  010164  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11893                           
 11894                           ;SPI.c: 64: switch(pMode)
 11895  010168  D088               	goto	l10923
 11896  01016A                     l10913:
 11897                           
 11898                           ;SPI.c: 67: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 11899  01016A  0100               	movlb	0	; () banked
 11900  01016C  EE20 F006          	lfsr	2,6
 11901  010170  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11902  010172  26D9               	addwf	fsr2l,f,c
 11903  010174  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11904  010176  22DA               	addwfc	fsr2h,f,c
 11905  010178  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11906  01017C  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11907  010180  0E04               	movlw	4
 11908  010182  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11909  010184  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11910  010186  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11911                           
 11912                           ;SPI.c: 68: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 11913  01018A  0100               	movlb	0	; () banked
 11914  01018C  EE20 F003          	lfsr	2,3
 11915  010190  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11916  010192  26D9               	addwf	fsr2l,f,c
 11917  010194  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11918  010196  22DA               	addwfc	fsr2h,f,c
 11919  010198  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11920  01019C  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11921  0101A0  0E06               	movlw	6
 11922  0101A2  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11923  0101A4  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11924  0101A6  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11925                           
 11926                           ;SPI.c: 69: break;
 11927  0101AA  D073               	goto	l10925
 11928  0101AC                     l10915:
 11929                           
 11930                           ;SPI.c: 71: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 11931  0101AC  0100               	movlb	0	; () banked
 11932  0101AE  EE20 F006          	lfsr	2,6
 11933  0101B2  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11934  0101B4  26D9               	addwf	fsr2l,f,c
 11935  0101B6  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11936  0101B8  22DA               	addwfc	fsr2h,f,c
 11937  0101BA  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11938  0101BE  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11939  0101C2  0E04               	movlw	4
 11940  0101C4  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11941  0101C6  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11942  0101C8  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11943                           
 11944                           ;SPI.c: 72: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 11945  0101CC  0100               	movlb	0	; () banked
 11946  0101CE  EE20 F003          	lfsr	2,3
 11947  0101D2  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11948  0101D4  26D9               	addwf	fsr2l,f,c
 11949  0101D6  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11950  0101D8  22DA               	addwfc	fsr2h,f,c
 11951  0101DA  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11952  0101DE  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11953  0101E2  0E06               	movlw	6
 11954  0101E4  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11955  0101E6  0E01               	movlw	1
 11956  0101E8  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 11957  0101EA  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11958                           
 11959                           ;SPI.c: 73: break;
 11960  0101EE  D051               	goto	l10925
 11961  0101F0                     l10917:
 11962                           
 11963                           ;SPI.c: 75: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 11964  0101F0  0100               	movlb	0	; () banked
 11965  0101F2  EE20 F006          	lfsr	2,6
 11966  0101F6  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11967  0101F8  26D9               	addwf	fsr2l,f,c
 11968  0101FA  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11969  0101FC  22DA               	addwfc	fsr2h,f,c
 11970  0101FE  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11971  010202  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11972  010206  0E04               	movlw	4
 11973  010208  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11974  01020A  0E01               	movlw	1
 11975  01020C  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 11976  01020E  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11977                           
 11978                           ;SPI.c: 76: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 11979  010212  0100               	movlb	0	; () banked
 11980  010214  EE20 F003          	lfsr	2,3
 11981  010218  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 11982  01021A  26D9               	addwf	fsr2l,f,c
 11983  01021C  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 11984  01021E  22DA               	addwfc	fsr2h,f,c
 11985  010220  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 11986  010224  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 11987  010228  0E06               	movlw	6
 11988  01022A  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 11989  01022C  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 11990  01022E  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 11991                           
 11992                           ;SPI.c: 77: break;
 11993  010232  D02F               	goto	l10925
 11994  010234                     l10919:
 11995                           
 11996                           ;SPI.c: 79: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 11997  010234  0100               	movlb	0	; () banked
 11998  010236  EE20 F006          	lfsr	2,6
 11999  01023A  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12000  01023C  26D9               	addwf	fsr2l,f,c
 12001  01023E  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12002  010240  22DA               	addwfc	fsr2h,f,c
 12003  010242  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 12004  010246  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 12005  01024A  0E04               	movlw	4
 12006  01024C  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 12007  01024E  0E01               	movlw	1
 12008  010250  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 12009  010252  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 12010                           
 12011                           ;SPI.c: 80: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12012  010256  0100               	movlb	0	; () banked
 12013  010258  EE20 F003          	lfsr	2,3
 12014  01025C  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12015  01025E  26D9               	addwf	fsr2l,f,c
 12016  010260  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12017  010262  22DA               	addwfc	fsr2h,f,c
 12018  010264  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 12019  010268  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 12020  01026C  0E06               	movlw	6
 12021  01026E  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 12022  010270  0E01               	movlw	1
 12023  010272  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 12024  010274  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 12025                           
 12026                           ;SPI.c: 81: break;
 12027  010278  D00C               	goto	l10925
 12028  01027A                     l10923:
 12029  01027A  0100               	movlb	0	; () banked
 12030  01027C  51E2               	movf	SPI_Init@pMode& (0+255),w,b
 12031                           
 12032                           ; Switch size 1, requested type "space"
 12033                           ; Number of cases is 4, Range of values is 0 to 3
 12034                           ; switch strategies available:
 12035                           ; Name         Instructions Cycles
 12036                           ; simple_byte           13     7 (average)
 12037                           ;	Chosen strategy is simple_byte
 12038  01027E  E101 D774          	bz	l10913
 12039  010282  0A01               	xorlw	1	; case 1
 12040  010284  E093               	bz	l10915
 12041  010286  0A03               	xorlw	3	; case 2
 12042  010288  E0B3               	bz	l10917
 12043  01028A  0A01               	xorlw	1	; case 3
 12044  01028C  A4D8               	btfss	status,2,c
 12045  01028E  0012               	return	
 12046  010290  D7D1               	goto	l10919
 12047  010292                     l10925:
 12048                           
 12049                           ;SPI.c: 87: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 12050  010292  0100               	movlb	0	; () banked
 12051  010294  EE20 F006          	lfsr	2,6
 12052  010298  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12053  01029A  26D9               	addwf	fsr2l,f,c
 12054  01029C  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12055  01029E  22DA               	addwfc	fsr2h,f,c
 12056  0102A0  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 12057  0102A4  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 12058  0102A8  0E07               	movlw	7
 12059  0102AA  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 12060  0102AC  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 12061  0102AE  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 12062                           
 12063                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 12064  0102B2  0100               	movlb	0	; () banked
 12065  0102B4  EE20 F006          	lfsr	2,6
 12066  0102B8  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12067  0102BA  26D9               	addwf	fsr2l,f,c
 12068  0102BC  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12069  0102BE  22DA               	addwfc	fsr2h,f,c
 12070  0102C0  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 12071  0102C4  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 12072  0102C8  0E06               	movlw	6
 12073  0102CA  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 12074  0102CC  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 12075  0102CE  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 12076                           
 12077                           ;SPI.c: 93: Timer2_Init(pClock);
 12078  0102D2  C0DD  F0BB         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 12079  0102D6  C0DE  F0BC         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 12080  0102DA  C0DF  F0BD         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 12081  0102DE  C0E0  F0BE         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 12082  0102E2  EC16  F08B         	call	_Timer2_Init	;wreg free
 12083                           
 12084                           ;SPI.c: 99: SPI_DisableISR(pInput);
 12085  0102E6  C0DB  F0AE         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 12086  0102EA  C0DC  F0AF         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 12087  0102EE  EC62  F0A7         	call	_SPI_DisableISR	;wreg free
 12088                           
 12089                           ;SPI.c: 111: SPI_DCS(pInput);
 12090  0102F2  C0DB  F0AE         	movff	SPI_Init@pInput,SPI_DCS@pInput
 12091  0102F6  C0DC  F0AF         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 12092  0102FA  EC32  F0A6         	call	_SPI_DCS	;wreg free
 12093                           
 12094                           ;SPI.c: 113: pInput->mBusy = 0;
 12095  0102FE  C0DB  FFD9         	movff	SPI_Init@pInput,fsr2l
 12096  010302  C0DC  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 12097  010306  6ADF               	clrf	indf2,c
 12098                           
 12099                           ;SPI.c: 116: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 12100  010308  0100               	movlb	0	; () banked
 12101  01030A  EE20 F006          	lfsr	2,6
 12102  01030E  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12103  010310  26D9               	addwf	fsr2l,f,c
 12104  010312  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12105  010314  22DA               	addwfc	fsr2h,f,c
 12106  010316  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 12107  01031A  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 12108  01031E  6BBB               	clrf	Byte_SetQuad@pQuad& (0+255),b
 12109  010320  0E03               	movlw	3
 12110  010322  6FBC               	movwf	Byte_SetQuad@pValue& (0+255),b
 12111  010324  EC87  F094         	call	_Byte_SetQuad	;wreg free
 12112                           
 12113                           ;SPI.c: 117: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12114  010328  0100               	movlb	0	; () banked
 12115  01032A  EE20 F006          	lfsr	2,6
 12116  01032E  51DB               	movf	SPI_Init@pInput& (0+255),w,b
 12117  010330  26D9               	addwf	fsr2l,f,c
 12118  010332  51DC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12119  010334  22DA               	addwfc	fsr2h,f,c
 12120  010336  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 12121  01033A  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 12122  01033E  0E05               	movlw	5
 12123  010340  6FB0               	movwf	Byte_SetBit@pBit& (0+255),b
 12124  010342  0E01               	movlw	1
 12125  010344  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 12126  010346  EF1C  F0A1         	goto	_Byte_SetBit	;wreg free
 12127  01034A                     __end_of_SPI_Init:
 12128                           	opt stack 0
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           intcon	equ	0xFF2
 12136                           indf0	equ	0xFEF
 12137                           postinc0	equ	0xFEE
 12138                           fsr0h	equ	0xFEA
 12139                           fsr0l	equ	0xFE9
 12140                           wreg	equ	0xFE8
 12141                           indf1	equ	0xFE7
 12142                           postdec1	equ	0xFE5
 12143                           fsr1h	equ	0xFE2
 12144                           fsr1l	equ	0xFE1
 12145                           indf2	equ	0xFDF
 12146                           postinc2	equ	0xFDE
 12147                           postdec2	equ	0xFDD
 12148                           plusw2	equ	0xFDB
 12149                           fsr2h	equ	0xFDA
 12150                           fsr2l	equ	0xFD9
 12151                           status	equ	0xFD8
 12152                           
 12153 ;; *************** function _Timer2_Init *****************
 12154 ;; Defined at:
 12155 ;;		line 10 in file "Timer2.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 12160 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 12161 ;;  RDIV            4   18[BANK0 ] unsigned long 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:       17 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:   15
 12178 ;; This function calls:
 12179 ;;		_Timer2_Clear
 12180 ;;		___lldiv
 12181 ;; This function is called by:
 12182 ;;		_SPI_Init
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text59
 12187  01162C                     __ptext59:
 12188                           	opt stack 0
 12189  01162C                     _Timer2_Init:
 12190                           	opt stack 11
 12191                           
 12192                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 12193                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 12194                           ;Timer2.c: 14: static UINT8 PRE = 0;
 12195                           ;Timer2.c: 15: static UINT32 DIV = 0;
 12196                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 12197                           
 12198                           ;incstack = 0
 12199  01162C  0100               	movlb	0	; () banked
 12200  01162E  6BC4               	clrf	Timer2_Init@pCPUClock& (0+255),b
 12201  011630  0E6C               	movlw	108
 12202  011632  6FC5               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 12203  011634  0EDC               	movlw	220
 12204  011636  6FC6               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 12205  011638  0E02               	movlw	2
 12206  01163A  6FC7               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 12210                           ;Timer2.c: 20: pFrequency *= 2;
 12211  01163C  90D8               	bcf	status,0,c
 12212  01163E  37BB               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 12213  011640  37BC               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 12214  011642  37BD               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 12215  011644  37BE               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;Timer2.c: 23: pCPUClock /= 4;
 12219  011646  6FBF               	movwf	??_Timer2_Init& (0+255),b
 12220  011648                     u7115:
 12221  011648  90D8               	bcf	status,0,c
 12222  01164A  0100               	movlb	0	; () banked
 12223  01164C  33C7               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 12224  01164E  33C6               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 12225  011650  33C5               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 12226  011652  33C4               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 12227  011654  2FBF               	decfsz	??_Timer2_Init& (0+255),f,b
 12228  011656  D7F8               	goto	u7115
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 12232  011658  C0C4  F0AE         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 12233  01165C  C0C5  F0AF         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 12234  011660  C0C6  F0B0         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 12235  011664  C0C7  F0B1         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 12236  011668  C0BB  F0B2         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 12237  01166C  C0BC  F0B3         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 12238  011670  C0BD  F0B4         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 12239  011674  C0BE  F0B5         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 12240  011678  EC23  F09C         	call	___lldiv	;wreg free
 12241  01167C  C0AE  F0C8         	movff	?___lldiv,Timer2_Init@DIVIDE
 12242  011680  C0AF  F0C9         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 12243  011684  C0B0  F0CA         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 12244  011688  C0B1  F0CB         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 12245                           
 12246                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 12247  01168C  D00A               	goto	l10409
 12248  01168E                     l10401:
 12249                           
 12250                           ;Timer2.c: 28: {
 12251                           ;Timer2.c: 29: RDIV = 0;
 12252  01168E  0100               	movlb	0	; () banked
 12253  011690  6BC0               	clrf	Timer2_Init@RDIV& (0+255),b
 12254  011692  6BC1               	clrf	(Timer2_Init@RDIV+1)& (0+255),b
 12255  011694  6BC2               	clrf	(Timer2_Init@RDIV+2)& (0+255),b
 12256  011696  6BC3               	clrf	(Timer2_Init@RDIV+3)& (0+255),b
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;Timer2.c: 30: INDEX ++;
 12260  011698  2B94               	incf	Timer2_Init@INDEX& (0+255),f,b
 12261                           
 12262                           ; BSR set to: 0
 12263                           ;Timer2.c: 31: if (INDEX >= 3)
 12264  01169A  0E02               	movlw	2
 12265  01169C  6594               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 12266  01169E  D001               	goto	l10409
 12267  0116A0  D023               	goto	l10411
 12268  0116A2                     l10409:
 12269  0116A2  C0C8  F0AE         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 12270  0116A6  C0C9  F0AF         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 12271  0116AA  C0CA  F0B0         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 12272  0116AE  C0CB  F0B1         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 12273  0116B2  0100               	movlb	0	; () banked
 12274  0116B4  5194               	movf	Timer2_Init@INDEX& (0+255),w,b
 12275  0116B6  0D01               	mullw	1
 12276  0116B8  0E0C               	movlw	low Timer2_Init@PRESCALE
 12277  0116BA  24F3               	addwf	prodl,w,c
 12278  0116BC  6EF6               	movwf	tblptrl,c
 12279  0116BE  0EFD               	movlw	high Timer2_Init@PRESCALE
 12280  0116C0  20F4               	addwfc	prodh,w,c
 12281  0116C2  6EF7               	movwf	tblptrh,c
 12282  0116C4                     	if	1	;There are 3 active tblptr bytes
 12283  0116C4  6AF8               	clrf	tblptru,c
 12284  0116C6  0E00               	movlw	low (__mediumconst shr (0+16))
 12285  0116C8  22F8               	addwfc	tblptru,f,c
 12286  0116CA                     	endif
 12287  0116CA  0008               	tblrd		*
 12288  0116CC  50F5               	movf	tablat,w,c
 12289  0116CE  6FB2               	movwf	___lldiv@divisor& (0+255),b
 12290  0116D0  6BB3               	clrf	(___lldiv@divisor+1)& (0+255),b
 12291  0116D2  6BB4               	clrf	(___lldiv@divisor+2)& (0+255),b
 12292  0116D4  6BB5               	clrf	(___lldiv@divisor+3)& (0+255),b
 12293  0116D6  EC23  F09C         	call	___lldiv	;wreg free
 12294  0116DA  0100               	movlb	0	; () banked
 12295  0116DC  51B1               	movf	(?___lldiv+3)& (0+255),w,b
 12296  0116DE  11B0               	iorwf	(?___lldiv+2)& (0+255),w,b
 12297  0116E0  E1D6               	bnz	l10401
 12298  0116E2  05AF               	decf	(?___lldiv+1)& (0+255),w,b
 12299  0116E4  E301               	bnc	l10411
 12300  0116E6  D7D3               	goto	l10401
 12301  0116E8                     l10411:
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;Timer2.c: 33: }
 12305                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 12306  0116E8  50CA               	movf	4042,w,c	;volatile
 12307  0116EA  0100               	movlb	0	; () banked
 12308  0116EC  1994               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 12309  0116EE  0BFC               	andlw	-4
 12310  0116F0  1994               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 12311  0116F2  6ECA               	movwf	4042,c	;volatile
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 12315  0116F4  84CA               	bsf	4042,2,c	;volatile
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;Timer2.c: 44: Timer2_Clear();
 12319  0116F6  EC48  F0A8         	call	_Timer2_Clear	;wreg free
 12320                           
 12321                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 12322  0116FA  0100               	movlb	0	; () banked
 12323  0116FC  5194               	movf	Timer2_Init@INDEX& (0+255),w,b
 12324  0116FE  0D01               	mullw	1
 12325  011700  0E0C               	movlw	low Timer2_Init@PRESCALE
 12326  011702  24F3               	addwf	prodl,w,c
 12327  011704  6EF6               	movwf	tblptrl,c
 12328  011706  0EFD               	movlw	high Timer2_Init@PRESCALE
 12329  011708  20F4               	addwfc	prodh,w,c
 12330  01170A  6EF7               	movwf	tblptrh,c
 12331  01170C                     	if	1	;There are 3 active tblptr bytes
 12332  01170C  6AF8               	clrf	tblptru,c
 12333  01170E  0E00               	movlw	low (__mediumconst shr (0+16))
 12334  011710  22F8               	addwfc	tblptru,f,c
 12335  011712                     	endif
 12336  011712  0008               	tblrd		*
 12337  011714  CFF5 F095          	movff	tablat,Timer2_Init@PRE
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 12341  011718  0EFF               	movlw	255
 12342  01171A  25C8               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 12343  01171C  0101               	movlb	1	; () banked
 12344  01171E  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 12345  011720  0EFF               	movlw	255
 12346  011722  0100               	movlb	0	; () banked
 12347  011724  21C9               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 12348  011726  0101               	movlb	1	; () banked
 12349  011728  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 12350  01172A  0EFF               	movlw	255
 12351  01172C  0100               	movlb	0	; () banked
 12352  01172E  21CA               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 12353  011730  0101               	movlb	1	; () banked
 12354  011732  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 12355  011734  0EFF               	movlw	255
 12356  011736  0100               	movlb	0	; () banked
 12357  011738  21CB               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 12358  01173A  0101               	movlb	1	; () banked
 12359  01173C  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 12360                           
 12361                           ; BSR set to: 1
 12362                           ;Timer2.c: 48: INDEX = DIV/PRE;
 12363  01173E  C10C  F0AE         	movff	Timer2_Init@DIV,___lldiv@dividend
 12364  011742  C10D  F0AF         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 12365  011746  C10E  F0B0         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 12366  01174A  C10F  F0B1         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 12367  01174E  0100               	movlb	0	; () banked
 12368  011750  5195               	movf	Timer2_Init@PRE& (0+255),w,b
 12369  011752  6FB2               	movwf	___lldiv@divisor& (0+255),b
 12370  011754  6BB3               	clrf	(___lldiv@divisor+1)& (0+255),b
 12371  011756  6BB4               	clrf	(___lldiv@divisor+2)& (0+255),b
 12372  011758  6BB5               	clrf	(___lldiv@divisor+3)& (0+255),b
 12373  01175A  EC23  F09C         	call	___lldiv	;wreg free
 12374  01175E  0100               	movlb	0	; () banked
 12375  011760  51AE               	movf	?___lldiv& (0+255),w,b
 12376  011762  6F94               	movwf	Timer2_Init@INDEX& (0+255),b
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;Timer2.c: 49: PR2 = INDEX;
 12380  011764  C094  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 12381                           
 12382                           ; BSR set to: 0
 12383  011768  0012               	return		;funcret
 12384  01176A                     __end_of_Timer2_Init:
 12385                           	opt stack 0
 12386                           tblptru	equ	0xFF8
 12387                           tblptrh	equ	0xFF7
 12388                           tblptrl	equ	0xFF6
 12389                           tablat	equ	0xFF5
 12390                           prodh	equ	0xFF4
 12391                           prodl	equ	0xFF3
 12392                           intcon	equ	0xFF2
 12393                           indf0	equ	0xFEF
 12394                           postinc0	equ	0xFEE
 12395                           fsr0h	equ	0xFEA
 12396                           fsr0l	equ	0xFE9
 12397                           wreg	equ	0xFE8
 12398                           indf1	equ	0xFE7
 12399                           postdec1	equ	0xFE5
 12400                           fsr1h	equ	0xFE2
 12401                           fsr1l	equ	0xFE1
 12402                           indf2	equ	0xFDF
 12403                           postinc2	equ	0xFDE
 12404                           postdec2	equ	0xFDD
 12405                           plusw2	equ	0xFDB
 12406                           fsr2h	equ	0xFDA
 12407                           fsr2l	equ	0xFD9
 12408                           status	equ	0xFD8
 12409                           
 12410 ;; *************** function ___lldiv *****************
 12411 ;; Defined at:
 12412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  dividend        4    0[BANK0 ] unsigned long 
 12415 ;;  divisor         4    4[BANK0 ] unsigned long 
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;  quotient        4    8[BANK0 ] unsigned long 
 12418 ;;  counter         1   12[BANK0 ] unsigned char 
 12419 ;; Return value:  Size  Location     Type
 12420 ;;                  4    0[BANK0 ] unsigned long 
 12421 ;; Registers used:
 12422 ;;		wreg, status,2, status,0
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12428 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12429 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12431 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;Total ram usage:       13 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; Hardware stack levels required when called:   14
 12435 ;; This function calls:
 12436 ;;		Nothing
 12437 ;; This function is called by:
 12438 ;;		_Timer0_Init
 12439 ;;		_Timer2_Init
 12440 ;;		_I2C_Init
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           	psect	text60
 12445  013846                     __ptext60:
 12446                           	opt stack 0
 12447  013846                     ___lldiv:
 12448                           	opt stack 13
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;incstack = 0
 12452  013846  0100               	movlb	0	; () banked
 12453  013848  6BB6               	clrf	___lldiv@quotient& (0+255),b
 12454  01384A  6BB7               	clrf	(___lldiv@quotient+1)& (0+255),b
 12455  01384C  6BB8               	clrf	(___lldiv@quotient+2)& (0+255),b
 12456  01384E  6BB9               	clrf	(___lldiv@quotient+3)& (0+255),b
 12457                           
 12458                           ; BSR set to: 0
 12459  013850  51B2               	movf	___lldiv@divisor& (0+255),w,b
 12460  013852  11B3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12461  013854  11B4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12462  013856  11B5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12463  013858  E02D               	bz	l3157
 12464                           
 12465                           ; BSR set to: 0
 12466  01385A  0E01               	movlw	1
 12467  01385C  6FBA               	movwf	___lldiv@counter& (0+255),b
 12468  01385E  D007               	goto	l10121
 12469  013860                     l10119:
 12470                           
 12471                           ; BSR set to: 0
 12472  013860  0100               	movlb	0	; () banked
 12473  013862  90D8               	bcf	status,0,c
 12474  013864  37B2               	rlcf	___lldiv@divisor& (0+255),f,b
 12475  013866  37B3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12476  013868  37B4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12477  01386A  37B5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12478  01386C  2BBA               	incf	___lldiv@counter& (0+255),f,b
 12479  01386E                     l10121:
 12480                           
 12481                           ; BSR set to: 0
 12482  01386E  0100               	movlb	0	; () banked
 12483  013870  AFB5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12484  013872  D7F6               	goto	l10119
 12485  013874                     l10123:
 12486                           
 12487                           ; BSR set to: 0
 12488  013874  0100               	movlb	0	; () banked
 12489  013876  90D8               	bcf	status,0,c
 12490  013878  37B6               	rlcf	___lldiv@quotient& (0+255),f,b
 12491  01387A  37B7               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12492  01387C  37B8               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12493  01387E  37B9               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12494                           
 12495                           ; BSR set to: 0
 12496  013880  51B2               	movf	___lldiv@divisor& (0+255),w,b
 12497  013882  5DAE               	subwf	___lldiv@dividend& (0+255),w,b
 12498  013884  51B3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12499  013886  59AF               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12500  013888  51B4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12501  01388A  59B0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12502  01388C  51B5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12503  01388E  59B1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12504  013890  E309               	bnc	l10131
 12505                           
 12506                           ; BSR set to: 0
 12507  013892  51B2               	movf	___lldiv@divisor& (0+255),w,b
 12508  013894  5FAE               	subwf	___lldiv@dividend& (0+255),f,b
 12509  013896  51B3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12510  013898  5BAF               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12511  01389A  51B4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12512  01389C  5BB0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12513  01389E  51B5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12514  0138A0  5BB1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12515                           
 12516                           ; BSR set to: 0
 12517  0138A2  81B6               	bsf	___lldiv@quotient& (0+255),0,b
 12518  0138A4                     l10131:
 12519                           
 12520                           ; BSR set to: 0
 12521  0138A4  0100               	movlb	0	; () banked
 12522  0138A6  90D8               	bcf	status,0,c
 12523  0138A8  33B5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12524  0138AA  33B4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12525  0138AC  33B3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12526  0138AE  33B2               	rrcf	___lldiv@divisor& (0+255),f,b
 12527                           
 12528                           ; BSR set to: 0
 12529  0138B0  2FBA               	decfsz	___lldiv@counter& (0+255),f,b
 12530  0138B2  D7E0               	goto	l10123
 12531  0138B4                     l3157:
 12532                           
 12533                           ; BSR set to: 0
 12534  0138B4  C0B6  F0AE         	movff	___lldiv@quotient,?___lldiv
 12535  0138B8  C0B7  F0AF         	movff	___lldiv@quotient+1,?___lldiv+1
 12536  0138BC  C0B8  F0B0         	movff	___lldiv@quotient+2,?___lldiv+2
 12537  0138C0  C0B9  F0B1         	movff	___lldiv@quotient+3,?___lldiv+3
 12538                           
 12539                           ; BSR set to: 0
 12540  0138C4  0012               	return		;funcret
 12541  0138C6                     __end_of___lldiv:
 12542                           	opt stack 0
 12543                           tblptru	equ	0xFF8
 12544                           tblptrh	equ	0xFF7
 12545                           tblptrl	equ	0xFF6
 12546                           tablat	equ	0xFF5
 12547                           prodh	equ	0xFF4
 12548                           prodl	equ	0xFF3
 12549                           intcon	equ	0xFF2
 12550                           indf0	equ	0xFEF
 12551                           postinc0	equ	0xFEE
 12552                           fsr0h	equ	0xFEA
 12553                           fsr0l	equ	0xFE9
 12554                           wreg	equ	0xFE8
 12555                           indf1	equ	0xFE7
 12556                           postdec1	equ	0xFE5
 12557                           fsr1h	equ	0xFE2
 12558                           fsr1l	equ	0xFE1
 12559                           indf2	equ	0xFDF
 12560                           postinc2	equ	0xFDE
 12561                           postdec2	equ	0xFDD
 12562                           plusw2	equ	0xFDB
 12563                           fsr2h	equ	0xFDA
 12564                           fsr2l	equ	0xFD9
 12565                           status	equ	0xFD8
 12566                           
 12567 ;; *************** function _Timer2_Clear *****************
 12568 ;; Defined at:
 12569 ;;		line 3 in file "Timer2.c"
 12570 ;; Parameters:    Size  Location     Type
 12571 ;;		None
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;		None
 12574 ;; Return value:  Size  Location     Type
 12575 ;;                  1    wreg      void 
 12576 ;; Registers used:
 12577 ;;		None
 12578 ;; Tracked objects:
 12579 ;;		On entry : 0/0
 12580 ;;		On exit  : 0/0
 12581 ;;		Unchanged: 0/0
 12582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;Total ram usage:        0 bytes
 12588 ;; Hardware stack levels used:    1
 12589 ;; Hardware stack levels required when called:   14
 12590 ;; This function calls:
 12591 ;;		Nothing
 12592 ;; This function is called by:
 12593 ;;		_Timer2_Init
 12594 ;; This function uses a non-reentrant model
 12595 ;;
 12596                           
 12597                           	psect	text61
 12598  015090                     __ptext61:
 12599                           	opt stack 0
 12600  015090                     _Timer2_Clear:
 12601                           	opt stack 11
 12602                           
 12603                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;incstack = 0
 12607  015090  929E               	bcf	3998,1,c	;volatile
 12608                           
 12609                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 12610  015092  929D               	bcf	3997,1,c	;volatile
 12611                           
 12612                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 12613  015094  929F               	bcf	3999,1,c	;volatile
 12614  015096  0012               	return		;funcret
 12615  015098                     __end_of_Timer2_Clear:
 12616                           	opt stack 0
 12617                           tblptru	equ	0xFF8
 12618                           tblptrh	equ	0xFF7
 12619                           tblptrl	equ	0xFF6
 12620                           tablat	equ	0xFF5
 12621                           prodh	equ	0xFF4
 12622                           prodl	equ	0xFF3
 12623                           intcon	equ	0xFF2
 12624                           indf0	equ	0xFEF
 12625                           postinc0	equ	0xFEE
 12626                           fsr0h	equ	0xFEA
 12627                           fsr0l	equ	0xFE9
 12628                           wreg	equ	0xFE8
 12629                           indf1	equ	0xFE7
 12630                           postdec1	equ	0xFE5
 12631                           fsr1h	equ	0xFE2
 12632                           fsr1l	equ	0xFE1
 12633                           indf2	equ	0xFDF
 12634                           postinc2	equ	0xFDE
 12635                           postdec2	equ	0xFDD
 12636                           plusw2	equ	0xFDB
 12637                           fsr2h	equ	0xFDA
 12638                           fsr2l	equ	0xFD9
 12639                           status	equ	0xFD8
 12640                           
 12641 ;; *************** function _SPI_DisableISR *****************
 12642 ;; Defined at:
 12643 ;;		line 168 in file "Library/SPI.c"
 12644 ;; Parameters:    Size  Location     Type
 12645 ;;  pInput          2    0[BANK0 ] const PTR struct SPI
 12646 ;;		 -> SPI1(11), SPI2(11), 
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;		None
 12649 ;; Return value:  Size  Location     Type
 12650 ;;                  1    wreg      void 
 12651 ;; Registers used:
 12652 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12653 ;; Tracked objects:
 12654 ;;		On entry : 0/0
 12655 ;;		On exit  : 0/0
 12656 ;;		Unchanged: 0/0
 12657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;Total ram usage:        2 bytes
 12663 ;; Hardware stack levels used:    1
 12664 ;; Hardware stack levels required when called:   14
 12665 ;; This function calls:
 12666 ;;		Nothing
 12667 ;; This function is called by:
 12668 ;;		_SPI_Init
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text62
 12673  014EC4                     __ptext62:
 12674                           	opt stack 0
 12675  014EC4                     _SPI_DisableISR:
 12676                           	opt stack 12
 12677                           
 12678                           ;SPI.c: 170: switch (pInput->mChannel)
 12679                           
 12680                           ;incstack = 0
 12681  014EC4  D004               	goto	l10429
 12682  014EC6                     l1235:
 12683                           
 12684                           ; BSR set to: 0
 12685  014EC6  969D               	bcf	3997,3,c	;volatile
 12686  014EC8  0012               	return	
 12687  014ECA                     l1237:
 12688                           
 12689                           ; BSR set to: 0
 12690  014ECA  9EA3               	bcf	4003,7,c	;volatile
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;SPI.c: 175: };
 12694                           
 12695                           ; BSR set to: 0
 12696                           
 12697                           ;SPI.c: 174: default: return;
 12698  014ECC  0012               	return	
 12699  014ECE                     l10429:
 12700  014ECE  0100               	movlb	0	; () banked
 12701  014ED0  EE20 F002          	lfsr	2,2
 12702  014ED4  51AE               	movf	SPI_DisableISR@pInput& (0+255),w,b
 12703  014ED6  26D9               	addwf	fsr2l,f,c
 12704  014ED8  51AF               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 12705  014EDA  22DA               	addwfc	fsr2h,f,c
 12706  014EDC  50DF               	movf	indf2,w,c
 12707                           
 12708                           ; Switch size 1, requested type "space"
 12709                           ; Number of cases is 2, Range of values is 0 to 1
 12710                           ; switch strategies available:
 12711                           ; Name         Instructions Cycles
 12712                           ; simple_byte            7     4 (average)
 12713                           ;	Chosen strategy is simple_byte
 12714  014EDE  E0F3               	bz	l1235
 12715  014EE0  0A01               	xorlw	1	; case 1
 12716  014EE2  E0F3               	bz	l1237
 12717                           
 12718                           ; BSR set to: 0
 12719                           
 12720                           ; BSR set to: 0
 12721  014EE4  0012               	return		;funcret
 12722  014EE6                     __end_of_SPI_DisableISR:
 12723                           	opt stack 0
 12724                           tblptru	equ	0xFF8
 12725                           tblptrh	equ	0xFF7
 12726                           tblptrl	equ	0xFF6
 12727                           tablat	equ	0xFF5
 12728                           prodh	equ	0xFF4
 12729                           prodl	equ	0xFF3
 12730                           intcon	equ	0xFF2
 12731                           indf0	equ	0xFEF
 12732                           postinc0	equ	0xFEE
 12733                           fsr0h	equ	0xFEA
 12734                           fsr0l	equ	0xFE9
 12735                           wreg	equ	0xFE8
 12736                           indf1	equ	0xFE7
 12737                           postdec1	equ	0xFE5
 12738                           fsr1h	equ	0xFE2
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           plusw2	equ	0xFDB
 12744                           fsr2h	equ	0xFDA
 12745                           fsr2l	equ	0xFD9
 12746                           status	equ	0xFD8
 12747                           
 12748 ;; *************** function _SPI_DCS *****************
 12749 ;; Defined at:
 12750 ;;		line 206 in file "Library/SPI.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;  pInput          2    0[BANK0 ] const PTR struct SPI
 12753 ;;		 -> SPI1(11), SPI2(11), 
 12754 ;; Auto vars:     Size  Location     Type
 12755 ;;		None
 12756 ;; Return value:  Size  Location     Type
 12757 ;;                  1    wreg      void 
 12758 ;; Registers used:
 12759 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12760 ;; Tracked objects:
 12761 ;;		On entry : 0/0
 12762 ;;		On exit  : 0/0
 12763 ;;		Unchanged: 0/0
 12764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12769 ;;Total ram usage:        2 bytes
 12770 ;; Hardware stack levels used:    1
 12771 ;; Hardware stack levels required when called:   14
 12772 ;; This function calls:
 12773 ;;		Nothing
 12774 ;; This function is called by:
 12775 ;;		_SPI_Init
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text63
 12780  014C64                     __ptext63:
 12781                           	opt stack 0
 12782  014C64                     _SPI_DCS:
 12783                           	opt stack 12
 12784                           
 12785                           ;SPI.c: 208: if (pInput->mChannel == eSPI1)
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;incstack = 0
 12789  014C64  0100               	movlb	0	; () banked
 12790  014C66  EE20 F002          	lfsr	2,2
 12791  014C6A  51AE               	movf	SPI_DCS@pInput& (0+255),w,b
 12792  014C6C  26D9               	addwf	fsr2l,f,c
 12793  014C6E  51AF               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 12794  014C70  22DA               	addwfc	fsr2h,f,c
 12795  014C72  50DF               	movf	indf2,w,c
 12796  014C74  E106               	bnz	l10435
 12797                           
 12798                           ; BSR set to: 0
 12799                           ;SPI.c: 209: PortC.mOutput->mBit2 = 1;
 12800  014C76  C0A8  FFD9         	movff	_PortC+4,fsr2l
 12801  014C7A  C0A9  FFDA         	movff	_PortC+5,fsr2h
 12802  014C7E  84DF               	bsf	indf2,2,c
 12803  014C80  0012               	return	
 12804  014C82                     l10435:
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;SPI.c: 210: else
 12808                           ;SPI.c: 211: PortD.mOutput->mBit7 = 1;
 12809  014C82  C191  FFD9         	movff	_PortD+4,fsr2l
 12810  014C86  C192  FFDA         	movff	_PortD+5,fsr2h
 12811  014C8A  0101               	movlb	1	; () banked
 12812  014C8C  8EDF               	bsf	indf2,7,c
 12813  014C8E  0012               	return	
 12814  014C90                     __end_of_SPI_DCS:
 12815                           	opt stack 0
 12816                           tblptru	equ	0xFF8
 12817                           tblptrh	equ	0xFF7
 12818                           tblptrl	equ	0xFF6
 12819                           tablat	equ	0xFF5
 12820                           prodh	equ	0xFF4
 12821                           prodl	equ	0xFF3
 12822                           intcon	equ	0xFF2
 12823                           indf0	equ	0xFEF
 12824                           postinc0	equ	0xFEE
 12825                           fsr0h	equ	0xFEA
 12826                           fsr0l	equ	0xFE9
 12827                           wreg	equ	0xFE8
 12828                           indf1	equ	0xFE7
 12829                           postdec1	equ	0xFE5
 12830                           fsr1h	equ	0xFE2
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           plusw2	equ	0xFDB
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8
 12839                           
 12840 ;; *************** function _FunctInitButton *****************
 12841 ;; Defined at:
 12842 ;;		line 32 in file "Functions.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;		None
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;		None
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  1    wreg      void 
 12849 ;; Registers used:
 12850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12860 ;;Total ram usage:        0 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; Hardware stack levels required when called:   22
 12863 ;; This function calls:
 12864 ;;		_Button_Init
 12865 ;; This function is called by:
 12866 ;;		_main
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           	psect	text64
 12871  01456E                     __ptext64:
 12872                           	opt stack 0
 12873  01456E                     _FunctInitButton:
 12874                           	opt stack 8
 12875                           
 12876                           ;Functions.c: 36: Button_Init(&TestButton, eTST1, 2, Event_TestButton);
 12877                           
 12878                           ;incstack = 0
 12879  01456E  0EBD               	movlw	low _TestButton
 12880  014570  0100               	movlb	0	; () banked
 12881  014572  6FE9               	movwf	Button_Init@pInput& (0+255),b
 12882  014574  0E01               	movlw	high _TestButton
 12883  014576  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 12884  014578  0E01               	movlw	1
 12885  01457A  6FEB               	movwf	Button_Init@pButton& (0+255),b
 12886  01457C  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 12887  01457E  0E02               	movlw	2
 12888  014580  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 12889  014582  0EB8               	movlw	low _Event_TestButton
 12890  014584  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 12891  014586  0E47               	movlw	high _Event_TestButton
 12892  014588  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12893  01458A  0E01               	movlw	low (_Event_TestButton shr (0+16))
 12894  01458C  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12895  01458E  EC53  F098         	call	_Button_Init	;wreg free
 12896                           
 12897                           ;Functions.c: 40: Button_Init(&DIPSwitch, eDIP4, 2, Event_DIPSwitch);
 12898  014592  0EB5               	movlw	low _DIPSwitch
 12899  014594  0100               	movlb	0	; () banked
 12900  014596  6FE9               	movwf	Button_Init@pInput& (0+255),b
 12901  014598  0E01               	movlw	high _DIPSwitch
 12902  01459A  6FEA               	movwf	(Button_Init@pInput+1)& (0+255),b
 12903  01459C  0E02               	movlw	2
 12904  01459E  6FEB               	movwf	Button_Init@pButton& (0+255),b
 12905  0145A0  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 12906  0145A2  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 12907  0145A4  0EC2               	movlw	low _Event_DIPSwitch
 12908  0145A6  6FEE               	movwf	Button_Init@pFunction& (0+255),b
 12909  0145A8  0E4A               	movlw	high _Event_DIPSwitch
 12910  0145AA  6FEF               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12911  0145AC  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 12912  0145AE  6FF0               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12913  0145B0  EF53  F098         	goto	_Button_Init	;wreg free
 12914  0145B4                     __end_of_FunctInitButton:
 12915                           	opt stack 0
 12916                           tblptru	equ	0xFF8
 12917                           tblptrh	equ	0xFF7
 12918                           tblptrl	equ	0xFF6
 12919                           tablat	equ	0xFF5
 12920                           prodh	equ	0xFF4
 12921                           prodl	equ	0xFF3
 12922                           intcon	equ	0xFF2
 12923                           indf0	equ	0xFEF
 12924                           postinc0	equ	0xFEE
 12925                           fsr0h	equ	0xFEA
 12926                           fsr0l	equ	0xFE9
 12927                           wreg	equ	0xFE8
 12928                           indf1	equ	0xFE7
 12929                           postdec1	equ	0xFE5
 12930                           fsr1h	equ	0xFE2
 12931                           fsr1l	equ	0xFE1
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           postdec2	equ	0xFDD
 12935                           plusw2	equ	0xFDB
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _Button_Init *****************
 12941 ;; Defined at:
 12942 ;;		line 18 in file "Library/Button.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 12945 ;;		 -> DIPSwitch(8), TestButton(8), HMIBoard(48), 
 12946 ;;  pButton         1   61[BANK0 ] enum E7677
 12947 ;;  pThreshold      2   62[BANK0 ] unsigned short 
 12948 ;;  pFunction       3   64[BANK0 ] PTR FTN(unsigned char ,)
 12949 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 12950 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;		None
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  1    wreg      void 
 12955 ;; Registers used:
 12956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12962 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;Total ram usage:        8 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; Hardware stack levels required when called:   21
 12969 ;; This function calls:
 12970 ;;		_Port_SetPinType
 12971 ;;		_Port_SetQuadType
 12972 ;; This function is called by:
 12973 ;;		_HMI_Init
 12974 ;;		_FunctInitButton
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978                           	psect	text65
 12979  0130A6                     __ptext65:
 12980                           	opt stack 0
 12981  0130A6                     _Button_Init:
 12982                           	opt stack 7
 12983                           
 12984                           ;Button.c: 20: if(pThreshold == 0)
 12985                           
 12986                           ;incstack = 0
 12987  0130A6  0100               	movlb	0	; () banked
 12988  0130A8  51EC               	movf	Button_Init@pThreshold& (0+255),w,b
 12989  0130AA  11ED               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 12990  0130AC  E103               	bnz	l11363
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;Button.c: 21: pThreshold = 1;
 12994  0130AE  6BED               	clrf	(Button_Init@pThreshold+1)& (0+255),b
 12995  0130B0  0E01               	movlw	1
 12996  0130B2  6FEC               	movwf	Button_Init@pThreshold& (0+255),b
 12997  0130B4                     l11363:
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;Button.c: 23: pInput->mButton = pButton;
 13001  0130B4  C0E9  FFD9         	movff	Button_Init@pInput,fsr2l
 13002  0130B8  C0EA  FFDA         	movff	Button_Init@pInput+1,fsr2h
 13003  0130BC  C0EB  FFDF         	movff	Button_Init@pButton,indf2
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;Button.c: 24: pInput->mState = 0;
 13007  0130C0  0100               	movlb	0	; () banked
 13008  0130C2  EE20 F001          	lfsr	2,1
 13009  0130C6  51E9               	movf	Button_Init@pInput& (0+255),w,b
 13010  0130C8  26D9               	addwf	fsr2l,f,c
 13011  0130CA  51EA               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13012  0130CC  22DA               	addwfc	fsr2h,f,c
 13013  0130CE  6ADF               	clrf	indf2,c
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;Button.c: 25: pInput->mCount = 0;
 13017  0130D0  EE20 F002          	lfsr	2,2
 13018  0130D4  51E9               	movf	Button_Init@pInput& (0+255),w,b
 13019  0130D6  26D9               	addwf	fsr2l,f,c
 13020  0130D8  51EA               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13021  0130DA  22DA               	addwfc	fsr2h,f,c
 13022  0130DC  6ADF               	clrf	indf2,c
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;Button.c: 26: pInput->mThreshold = pThreshold;
 13026  0130DE  EE20 F003          	lfsr	2,3
 13027  0130E2  51E9               	movf	Button_Init@pInput& (0+255),w,b
 13028  0130E4  26D9               	addwf	fsr2l,f,c
 13029  0130E6  51EA               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13030  0130E8  22DA               	addwfc	fsr2h,f,c
 13031  0130EA  C0EC  FFDE         	movff	Button_Init@pThreshold,postinc2
 13032  0130EE  C0ED  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 13033                           
 13034                           ; BSR set to: 0
 13035                           ;Button.c: 27: pInput->mFunction = pFunction;
 13036  0130F2  EE20 F005          	lfsr	2,5
 13037  0130F6  51E9               	movf	Button_Init@pInput& (0+255),w,b
 13038  0130F8  26D9               	addwf	fsr2l,f,c
 13039  0130FA  51EA               	movf	(Button_Init@pInput+1)& (0+255),w,b
 13040  0130FC  22DA               	addwfc	fsr2h,f,c
 13041  0130FE  C0EE  FFDE         	movff	Button_Init@pFunction,postinc2
 13042  013102  C0EF  FFDE         	movff	Button_Init@pFunction+1,postinc2
 13043  013106  C0F0  FFDE         	movff	Button_Init@pFunction+2,postinc2
 13044                           
 13045                           ;Button.c: 29: switch(pButton)
 13046  01310A  D013               	goto	l11379
 13047  01310C                     l11373:
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;Button.c: 32: Port_SetPinType(&PortB, eP4, eTypeInput);
 13051  01310C  0E83               	movlw	low _PortB
 13052  01310E  0100               	movlb	0	; () banked
 13053  013110  6FD4               	movwf	Port_SetPinType@pInput& (0+255),b
 13054  013112  0E01               	movlw	high _PortB
 13055  013114  6FD5               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13056  013116  0E04               	movlw	4
 13057  013118  6FD6               	movwf	Port_SetPinType@pPin& (0+255),b
 13058  01311A  6BD7               	clrf	Port_SetPinType@pType& (0+255),b
 13059  01311C  EFAD  F087         	goto	_Port_SetPinType	;wreg free
 13060  013120                     l11375:
 13061                           
 13062                           ;Button.c: 35: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 13063  013120  0E8D               	movlw	low _PortD
 13064  013122  0100               	movlb	0	; () banked
 13065  013124  6FE4               	movwf	Port_SetQuadType@pInput& (0+255),b
 13066  013126  0E01               	movlw	high _PortD
 13067  013128  6FE5               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 13068  01312A  6BE6               	clrf	Port_SetQuadType@pQuad& (0+255),b
 13069  01312C  6BE7               	clrf	Port_SetQuadType@pType& (0+255),b
 13070  01312E  EF11  F084         	goto	_Port_SetQuadType	;wreg free
 13071  013132                     l11379:
 13072  013132  0100               	movlb	0	; () banked
 13073  013134  51EB               	movf	Button_Init@pButton& (0+255),w,b
 13074                           
 13075                           ; Switch size 1, requested type "space"
 13076                           ; Number of cases is 2, Range of values is 1 to 2
 13077                           ; switch strategies available:
 13078                           ; Name         Instructions Cycles
 13079                           ; simple_byte            7     4 (average)
 13080                           ;	Chosen strategy is simple_byte
 13081  013136  0A01               	xorlw	1	; case 1
 13082  013138  E0E9               	bz	l11373
 13083  01313A  0A03               	xorlw	3	; case 2
 13084  01313C  E0F1               	bz	l11375
 13085                           
 13086                           ; BSR set to: 0
 13087  01313E  0012               	return		;funcret
 13088  013140                     __end_of_Button_Init:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           indf0	equ	0xFEF
 13098                           postinc0	equ	0xFEE
 13099                           fsr0h	equ	0xFEA
 13100                           fsr0l	equ	0xFE9
 13101                           wreg	equ	0xFE8
 13102                           indf1	equ	0xFE7
 13103                           postdec1	equ	0xFE5
 13104                           fsr1h	equ	0xFE2
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           postdec2	equ	0xFDD
 13109                           plusw2	equ	0xFDB
 13110                           fsr2h	equ	0xFDA
 13111                           fsr2l	equ	0xFD9
 13112                           status	equ	0xFD8
 13113                           
 13114 ;; *************** function _Port_SetQuadType *****************
 13115 ;; Defined at:
 13116 ;;		line 399 in file "Library/Port.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 13119 ;;		 -> PortD(10), PortB(10), 
 13120 ;;  pQuad           1   56[BANK0 ] enum E7714
 13121 ;;  pType           1   57[BANK0 ] enum E7733
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  Output          1   58[BANK0 ] enum E7416
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      enum E7416
 13126 ;; Registers used:
 13127 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13133 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;Total ram usage:        5 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:   20
 13140 ;; This function calls:
 13141 ;;		_Byte_SetQuad
 13142 ;;		_Port_CheckQuadType
 13143 ;;		_Word_SetPair
 13144 ;; This function is called by:
 13145 ;;		_Button_Init
 13146 ;;		_MXK_Init
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           	psect	text66
 13151  010822                     __ptext66:
 13152                           	opt stack 0
 13153  010822                     _Port_SetQuadType:
 13154                           	opt stack 9
 13155                           
 13156                           ;Port.c: 401: ePinError Output = ePinErrorState;
 13157                           
 13158                           ;incstack = 0
 13159  010822  0E05               	movlw	5
 13160  010824  0100               	movlb	0	; () banked
 13161  010826  6FE8               	movwf	Port_SetQuadType@Output& (0+255),b
 13162                           
 13163                           ;Port.c: 403: switch (pType)
 13164  010828  D0B4               	goto	l10831
 13165  01082A                     l10815:
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;Port.c: 407: {
 13169                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 13170  01082A  0100               	movlb	0	; () banked
 13171  01082C  EE20 F002          	lfsr	2,2
 13172  010830  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13173  010832  26D9               	addwf	fsr2l,f,c
 13174  010834  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13175  010836  22DA               	addwfc	fsr2h,f,c
 13176  010838  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13177  01083C  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13178  010840  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13179  010844  0E0F               	movlw	15
 13180  010846  6FBC               	movwf	Byte_SetQuad@pValue& (0+255),b
 13181  010848  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13182                           
 13183                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 13184  01084C  0100               	movlb	0	; () banked
 13185  01084E  EE20 F004          	lfsr	2,4
 13186  010852  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13187  010854  26D9               	addwf	fsr2l,f,c
 13188  010856  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13189  010858  22DA               	addwfc	fsr2h,f,c
 13190  01085A  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13191  01085E  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13192  010862  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13193  010866  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 13194  010868  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13195                           
 13196                           ;Port.c: 413: }
 13197                           ;Port.c: 415: break;
 13198  01086C  D09D               	goto	l10833
 13199  01086E                     l10817:
 13200                           
 13201                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 13202  01086E  C0E4  F0DD         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 13203  010872  C0E5  F0DE         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 13204  010876  C0E6  F0DF         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 13205  01087A  0E03               	movlw	3
 13206  01087C  0100               	movlb	0	; () banked
 13207  01087E  6FE0               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 13208  010880  EC45  F0A1         	call	_Port_CheckQuadType	;wreg free
 13209  010884  0100               	movlb	0	; () banked
 13210  010886  6FE8               	movwf	Port_SetQuadType@Output& (0+255),b
 13211  010888  51E8               	movf	Port_SetQuadType@Output& (0+255),w,b
 13212  01088A  A4D8               	btfss	status,2,c
 13213  01088C  0012               	return	
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;Port.c: 418: {
 13217                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 13218  01088E  EE20 F002          	lfsr	2,2
 13219  010892  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13220  010894  26D9               	addwf	fsr2l,f,c
 13221  010896  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13222  010898  22DA               	addwfc	fsr2h,f,c
 13223  01089A  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13224  01089E  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13225  0108A2  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13226  0108A6  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 13227  0108A8  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13228                           
 13229                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 13230  0108AC  0100               	movlb	0	; () banked
 13231  0108AE  EE20 F004          	lfsr	2,4
 13232  0108B2  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13233  0108B4  26D9               	addwf	fsr2l,f,c
 13234  0108B6  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13235  0108B8  22DA               	addwfc	fsr2h,f,c
 13236  0108BA  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13237  0108BE  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13238  0108C2  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13239  0108C6  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 13240  0108C8  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13241                           
 13242                           ;Port.c: 424: }
 13243  0108CC  D06D               	goto	l10833
 13244  0108CE                     l10821:
 13245                           
 13246                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 13247  0108CE  C0E4  F0DD         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 13248  0108D2  C0E5  F0DE         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 13249  0108D6  C0E6  F0DF         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 13250  0108DA  0E03               	movlw	3
 13251  0108DC  0100               	movlb	0	; () banked
 13252  0108DE  6FE0               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 13253  0108E0  EC45  F0A1         	call	_Port_CheckQuadType	;wreg free
 13254  0108E4  0100               	movlb	0	; () banked
 13255  0108E6  6FE8               	movwf	Port_SetQuadType@Output& (0+255),b
 13256  0108E8  51E8               	movf	Port_SetQuadType@Output& (0+255),w,b
 13257  0108EA  A4D8               	btfss	status,2,c
 13258  0108EC  0012               	return	
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;Port.c: 429: {
 13262                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 13263  0108EE  EE20 F002          	lfsr	2,2
 13264  0108F2  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13265  0108F4  26D9               	addwf	fsr2l,f,c
 13266  0108F6  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13267  0108F8  22DA               	addwfc	fsr2h,f,c
 13268  0108FA  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13269  0108FE  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13270  010902  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13271  010906  0E0F               	movlw	15
 13272  010908  6FBC               	movwf	Byte_SetQuad@pValue& (0+255),b
 13273  01090A  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13274                           
 13275                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 13276  01090E  0100               	movlb	0	; () banked
 13277  010910  EE20 F004          	lfsr	2,4
 13278  010914  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13279  010916  26D9               	addwf	fsr2l,f,c
 13280  010918  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13281  01091A  22DA               	addwfc	fsr2h,f,c
 13282  01091C  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13283  010920  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13284  010924  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13285  010928  0E0F               	movlw	15
 13286  01092A  6FBC               	movwf	Byte_SetQuad@pValue& (0+255),b
 13287  01092C  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13288                           
 13289                           ;Port.c: 435: }
 13290  010930  D03B               	goto	l10833
 13291  010932                     l10825:
 13292                           
 13293                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 13294  010932  C0E4  F0DD         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 13295  010936  C0E5  F0DE         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 13296  01093A  C0E6  F0DF         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 13297  01093E  0E03               	movlw	3
 13298  010940  0100               	movlb	0	; () banked
 13299  010942  6FE0               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 13300  010944  EC45  F0A1         	call	_Port_CheckQuadType	;wreg free
 13301  010948  0100               	movlb	0	; () banked
 13302  01094A  6FE8               	movwf	Port_SetQuadType@Output& (0+255),b
 13303  01094C  51E8               	movf	Port_SetQuadType@Output& (0+255),w,b
 13304  01094E  A4D8               	btfss	status,2,c
 13305  010950  0012               	return	
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;Port.c: 440: {
 13309                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 13310  010952  EE20 F002          	lfsr	2,2
 13311  010956  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13312  010958  26D9               	addwf	fsr2l,f,c
 13313  01095A  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13314  01095C  22DA               	addwfc	fsr2h,f,c
 13315  01095E  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13316  010962  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13317  010966  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13318  01096A  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 13319  01096C  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13320                           
 13321                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 13322  010970  0100               	movlb	0	; () banked
 13323  010972  EE20 F004          	lfsr	2,4
 13324  010976  51E4               	movf	Port_SetQuadType@pInput& (0+255),w,b
 13325  010978  26D9               	addwf	fsr2l,f,c
 13326  01097A  51E5               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13327  01097C  22DA               	addwfc	fsr2h,f,c
 13328  01097E  CFDE F0B9          	movff	postinc2,Byte_SetQuad@pInput
 13329  010982  CFDD F0BA          	movff	postdec2,Byte_SetQuad@pInput+1
 13330  010986  C0E6  F0BB         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 13331  01098A  6BBC               	clrf	Byte_SetQuad@pValue& (0+255),b
 13332  01098C  EC87  F094         	call	_Byte_SetQuad	;wreg free
 13333                           
 13334                           ;Port.c: 446: }
 13335  010990  D00B               	goto	l10833
 13336  010992                     l10831:
 13337  010992  0100               	movlb	0	; () banked
 13338  010994  51E7               	movf	Port_SetQuadType@pType& (0+255),w,b
 13339                           
 13340                           ; Switch size 1, requested type "space"
 13341                           ; Number of cases is 4, Range of values is 0 to 3
 13342                           ; switch strategies available:
 13343                           ; Name         Instructions Cycles
 13344                           ; simple_byte           13     7 (average)
 13345                           ;	Chosen strategy is simple_byte
 13346  010996  E101 D748          	bz	l10815
 13347  01099A  0A01               	xorlw	1	; case 1
 13348  01099C  E101 D767          	bz	l10817
 13349  0109A0  0A03               	xorlw	3	; case 2
 13350  0109A2  E095               	bz	l10821
 13351  0109A4  0A01               	xorlw	1	; case 3
 13352  0109A6  E0C5               	bz	l10825
 13353  0109A8                     l10833:
 13354                           
 13355                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 13356  0109A8  0E08               	movlw	8
 13357  0109AA  0100               	movlb	0	; () banked
 13358  0109AC  25E4               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 13359  0109AE  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
 13360  0109B0  0E00               	movlw	0
 13361  0109B2  21E5               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13362  0109B4  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13363  0109B6  51E6               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 13364  0109B8  0D04               	mullw	4
 13365  0109BA  CFF3 F0BF          	movff	prodl,Word_SetPair@pPair
 13366  0109BE  C0E7  F0C0         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 13367  0109C2  ECD7  F0A5         	call	_Word_SetPair	;wreg free
 13368                           
 13369                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 13370  0109C6  0E08               	movlw	8
 13371  0109C8  0100               	movlb	0	; () banked
 13372  0109CA  25E4               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 13373  0109CC  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
 13374  0109CE  0E00               	movlw	0
 13375  0109D0  21E5               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13376  0109D2  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13377  0109D4  51E6               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 13378  0109D6  0D04               	mullw	4
 13379  0109D8  28F3               	incf	prodl,w,c
 13380  0109DA  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
 13381  0109DC  C0E7  F0C0         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 13382  0109E0  ECD7  F0A5         	call	_Word_SetPair	;wreg free
 13383                           
 13384                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 13385  0109E4  0E08               	movlw	8
 13386  0109E6  0100               	movlb	0	; () banked
 13387  0109E8  25E4               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 13388  0109EA  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
 13389  0109EC  0E00               	movlw	0
 13390  0109EE  21E5               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13391  0109F0  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13392  0109F2  51E6               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 13393  0109F4  0D04               	mullw	4
 13394  0109F6  50F3               	movf	prodl,w,c
 13395  0109F8  0F02               	addlw	2
 13396  0109FA  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
 13397  0109FC  C0E7  F0C0         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 13398  010A00  ECD7  F0A5         	call	_Word_SetPair	;wreg free
 13399                           
 13400                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 13401  010A04  0E08               	movlw	8
 13402  010A06  0100               	movlb	0	; () banked
 13403  010A08  25E4               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 13404  010A0A  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
 13405  010A0C  0E00               	movlw	0
 13406  010A0E  21E5               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 13407  010A10  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13408  010A12  51E6               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 13409  010A14  0D04               	mullw	4
 13410  010A16  50F3               	movf	prodl,w,c
 13411  010A18  0F03               	addlw	3
 13412  010A1A  6FBF               	movwf	Word_SetPair@pPair& (0+255),b
 13413  010A1C  C0E7  F0C0         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 13414  010A20  EFD7  F0A5         	goto	_Word_SetPair	;wreg free
 13415  010A24                     __end_of_Port_SetQuadType:
 13416                           	opt stack 0
 13417                           tblptru	equ	0xFF8
 13418                           tblptrh	equ	0xFF7
 13419                           tblptrl	equ	0xFF6
 13420                           tablat	equ	0xFF5
 13421                           prodh	equ	0xFF4
 13422                           prodl	equ	0xFF3
 13423                           intcon	equ	0xFF2
 13424                           indf0	equ	0xFEF
 13425                           postinc0	equ	0xFEE
 13426                           fsr0h	equ	0xFEA
 13427                           fsr0l	equ	0xFE9
 13428                           wreg	equ	0xFE8
 13429                           indf1	equ	0xFE7
 13430                           postdec1	equ	0xFE5
 13431                           fsr1h	equ	0xFE2
 13432                           fsr1l	equ	0xFE1
 13433                           indf2	equ	0xFDF
 13434                           postinc2	equ	0xFDE
 13435                           postdec2	equ	0xFDD
 13436                           plusw2	equ	0xFDB
 13437                           fsr2h	equ	0xFDA
 13438                           fsr2l	equ	0xFD9
 13439                           status	equ	0xFD8
 13440                           
 13441 ;; *************** function _Port_CheckQuadType *****************
 13442 ;; Defined at:
 13443 ;;		line 126 in file "Library/Port.c"
 13444 ;; Parameters:    Size  Location     Type
 13445 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 13446 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
 13447 ;;		 -> PortE(10), PortD(10), PortB(10), 
 13448 ;;  pQuad           1   49[BANK0 ] enum E7714
 13449 ;;  pDrive          1   50[BANK0 ] enum E7410
 13450 ;; Auto vars:     Size  Location     Type
 13451 ;;  Output          1   53[BANK0 ] enum E7416
 13452 ;;  Pair2           1   52[BANK0 ] enum E7698
 13453 ;;  Pair1           1   51[BANK0 ] enum E7698
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  1    wreg      enum E7416
 13456 ;; Registers used:
 13457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;Total ram usage:        7 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; Hardware stack levels required when called:   19
 13470 ;; This function calls:
 13471 ;;		_Port_CheckPairType
 13472 ;; This function is called by:
 13473 ;;		_Port_CheckPortType
 13474 ;;		_Port_SetQuadType
 13475 ;; This function uses a non-reentrant model
 13476 ;;
 13477                           
 13478                           	psect	text67
 13479  01428A                     __ptext67:
 13480                           	opt stack 0
 13481  01428A                     _Port_CheckQuadType:
 13482                           	opt stack 8
 13483                           
 13484                           ;Port.c: 128: ePinError Output = ePinErrorState;
 13485                           
 13486                           ;incstack = 0
 13487  01428A  0E05               	movlw	5
 13488  01428C  0100               	movlb	0	; () banked
 13489  01428E  6FE3               	movwf	Port_CheckQuadType@Output& (0+255),b
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 13493  014290  51DF               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 13494  014292  0D02               	mullw	2
 13495  014294  CFF3 F0E1          	movff	prodl,Port_CheckQuadType@Pair1
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 13499  014298  51DF               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 13500  01429A  0D02               	mullw	2
 13501  01429C  28F3               	incf	prodl,w,c
 13502  01429E  6FE2               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 13506  0142A0  C0DD  F0D4         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 13507  0142A4  C0DE  F0D5         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 13508  0142A8  C0E1  F0D6         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 13509  0142AC  C0E0  F0D7         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 13510  0142B0  ECC2  F09F         	call	_Port_CheckPairType	;wreg free
 13511  0142B4  0100               	movlb	0	; () banked
 13512  0142B6  6FE3               	movwf	Port_CheckQuadType@Output& (0+255),b
 13513  0142B8  51E3               	movf	Port_CheckQuadType@Output& (0+255),w,b
 13514  0142BA  E10C               	bnz	l10387
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 13518  0142BC  C0DD  F0D4         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 13519  0142C0  C0DE  F0D5         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 13520  0142C4  C0E2  F0D6         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 13521  0142C8  C0E0  F0D7         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 13522  0142CC  ECC2  F09F         	call	_Port_CheckPairType	;wreg free
 13523  0142D0  0100               	movlb	0	; () banked
 13524  0142D2  6FE3               	movwf	Port_CheckQuadType@Output& (0+255),b
 13525  0142D4                     l10387:
 13526                           
 13527                           ; BSR set to: 0
 13528                           ;Port.c: 136: return Output;
 13529  0142D4  0100               	movlb	0	; () banked
 13530  0142D6  51E3               	movf	Port_CheckQuadType@Output& (0+255),w,b
 13531  0142D8  0012               	return	
 13532  0142DA                     __end_of_Port_CheckQuadType:
 13533                           	opt stack 0
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           indf0	equ	0xFEF
 13542                           postinc0	equ	0xFEE
 13543                           fsr0h	equ	0xFEA
 13544                           fsr0l	equ	0xFE9
 13545                           wreg	equ	0xFE8
 13546                           indf1	equ	0xFE7
 13547                           postdec1	equ	0xFE5
 13548                           fsr1h	equ	0xFE2
 13549                           fsr1l	equ	0xFE1
 13550                           indf2	equ	0xFDF
 13551                           postinc2	equ	0xFDE
 13552                           postdec2	equ	0xFDD
 13553                           plusw2	equ	0xFDB
 13554                           fsr2h	equ	0xFDA
 13555                           fsr2l	equ	0xFD9
 13556                           status	equ	0xFD8
 13557                           
 13558 ;; *************** function _Port_CheckPairType *****************
 13559 ;; Defined at:
 13560 ;;		line 112 in file "Library/Port.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 13563 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
 13564 ;;		 -> PortE(10), PortD(10), PortB(10), 
 13565 ;;  pPair           1   40[BANK0 ] enum E7698
 13566 ;;  pDrive          1   41[BANK0 ] enum E7410
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 13569 ;;		 -> PortG(10), PortA(10), PortG_Property(2), PortF_Property(2), 
 13570 ;;		 -> PortE_Property(2), PortD_Property(2), PortC_Property(2), PortB_Property(2), 
 13571 ;;		 -> PortA_Property(2), PortC(10), PortF(10), PortE(10), 
 13572 ;;		 -> PortD(10), PortB(10), NULL(0), 
 13573 ;;  Output          1   44[BANK0 ] enum E7416
 13574 ;;  Pin2            1   43[BANK0 ] enum E7688
 13575 ;;  Pin1            1   42[BANK0 ] enum E7688
 13576 ;; Return value:  Size  Location     Type
 13577 ;;                  1    wreg      enum E7416
 13578 ;; Registers used:
 13579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13580 ;; Tracked objects:
 13581 ;;		On entry : 0/0
 13582 ;;		On exit  : 0/0
 13583 ;;		Unchanged: 0/0
 13584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13586 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13588 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;Total ram usage:        9 bytes
 13590 ;; Hardware stack levels used:    1
 13591 ;; Hardware stack levels required when called:   18
 13592 ;; This function calls:
 13593 ;;		_PortProperty_Valid
 13594 ;; This function is called by:
 13595 ;;		_Port_CheckQuadType
 13596 ;;		_Port_SetPairType
 13597 ;; This function uses a non-reentrant model
 13598 ;;
 13599                           
 13600                           	psect	text68
 13601  013F84                     __ptext68:
 13602                           	opt stack 0
 13603  013F84                     _Port_CheckPairType:
 13604                           	opt stack 8
 13605                           
 13606                           ;Port.c: 114: ePinError Output = ePinErrorState;
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;incstack = 0
 13610  013F84  0E05               	movlw	5
 13611  013F86  0100               	movlb	0	; () banked
 13612  013F88  6FDA               	movwf	Port_CheckPairType@Output& (0+255),b
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 13616  013F8A  C0D4  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 13617  013F8E  C0D5  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 13618  013F92  CFDE F0DB          	movff	postinc2,Port_CheckPairType@Props
 13619  013F96  CFDD F0DC          	movff	postdec2,Port_CheckPairType@Props+1
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 13623  013F9A  51D6               	movf	Port_CheckPairType@pPair& (0+255),w,b
 13624  013F9C  0D02               	mullw	2
 13625  013F9E  CFF3 F0D8          	movff	prodl,Port_CheckPairType@Pin1
 13626                           
 13627                           ; BSR set to: 0
 13628                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 13629  013FA2  51D6               	movf	Port_CheckPairType@pPair& (0+255),w,b
 13630  013FA4  0D02               	mullw	2
 13631  013FA6  28F3               	incf	prodl,w,c
 13632  013FA8  6FD9               	movwf	Port_CheckPairType@Pin2& (0+255),b
 13633                           
 13634                           ; BSR set to: 0
 13635                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 13636  013FAA  C0DB  F0BD         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 13637  013FAE  C0DC  F0BE         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 13638  013FB2  C0D7  F0BF         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 13639  013FB6  C0D8  F0C0         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 13640  013FBA  ECCF  F09E         	call	_PortProperty_Valid	;wreg free
 13641  013FBE  0100               	movlb	0	; () banked
 13642  013FC0  6FDA               	movwf	Port_CheckPairType@Output& (0+255),b
 13643  013FC2  51DA               	movf	Port_CheckPairType@Output& (0+255),w,b
 13644  013FC4  E10C               	bnz	l9967
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 13648  013FC6  C0DB  F0BD         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 13649  013FCA  C0DC  F0BE         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 13650  013FCE  C0D7  F0BF         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 13651  013FD2  C0D9  F0C0         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 13652  013FD6  ECCF  F09E         	call	_PortProperty_Valid	;wreg free
 13653  013FDA  0100               	movlb	0	; () banked
 13654  013FDC  6FDA               	movwf	Port_CheckPairType@Output& (0+255),b
 13655  013FDE                     l9967:
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;Port.c: 124: return Output;
 13659  013FDE  0100               	movlb	0	; () banked
 13660  013FE0  51DA               	movf	Port_CheckPairType@Output& (0+255),w,b
 13661  013FE2  0012               	return	
 13662  013FE4                     __end_of_Port_CheckPairType:
 13663                           	opt stack 0
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           indf0	equ	0xFEF
 13672                           postinc0	equ	0xFEE
 13673                           fsr0h	equ	0xFEA
 13674                           fsr0l	equ	0xFE9
 13675                           wreg	equ	0xFE8
 13676                           indf1	equ	0xFE7
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           plusw2	equ	0xFDB
 13684                           fsr2h	equ	0xFDA
 13685                           fsr2l	equ	0xFD9
 13686                           status	equ	0xFD8
 13687                           
 13688 ;; *************** function _Byte_SetQuad *****************
 13689 ;; Defined at:
 13690 ;;		line 101 in file "Library/Types.c"
 13691 ;; Parameters:    Size  Location     Type
 13692 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 13693 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 13694 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13695 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13696 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13697 ;;		 -> NULL(0), 
 13698 ;;  pQuad           1   13[BANK0 ] unsigned char 
 13699 ;;  pValue          1   14[BANK0 ] unsigned char 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;		None
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  1    wreg      void 
 13704 ;; Registers used:
 13705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;Total ram usage:        4 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:   15
 13718 ;; This function calls:
 13719 ;;		_Byte_SetZone
 13720 ;; This function is called by:
 13721 ;;		_Port_SetQuadType
 13722 ;;		_SPI_Init
 13723 ;;		_SPI_MinSpeed
 13724 ;;		_SPI_MaxSpeed
 13725 ;;		_Port_SetQuad
 13726 ;;		_Word_SetQuad
 13727 ;;		_I2C_Init
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text69
 13732  01290E                     __ptext69:
 13733                           	opt stack 0
 13734  01290E                     _Byte_SetQuad:
 13735                           	opt stack 13
 13736                           
 13737                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;incstack = 0
 13741  01290E  C0B9  F0AE         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 13742  012912  C0BA  F0AF         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 13743  012916  0E02               	movlw	2
 13744  012918  0100               	movlb	0	; () banked
 13745  01291A  6FB0               	movwf	Byte_SetZone@pMax& (0+255),b
 13746  01291C  C0BB  F0B1         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 13747  012920  0E04               	movlw	4
 13748  012922  6FB2               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 13749  012924  C0BC  F0B3         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 13750  012928                     i5L__ptext73:
 13751                           	opt stack 0
 13752  012928                     i5L_Byte_SetZone:
 13753                           	opt stack 0
 13754  012928                     i5Ll9085:
 13755                           	opt stack 12
 13756                           
 13757                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 13758  012928  0100               	movlb	0	; () banked
 13759  01292A  51B2               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 13760  01292C  0D01               	mullw	1
 13761  01292E  0EC1               	movlw	low _MASKS
 13762  012930  24F3               	addwf	prodl,w,c
 13763  012932  6EF6               	movwf	tblptrl,c
 13764  012934  0EFC               	movlw	high _MASKS
 13765  012936  20F4               	addwfc	prodh,w,c
 13766  012938  6EF7               	movwf	tblptrh,c
 13767  01293A                     	if	1	;There are 3 active tblptr bytes
 13768  01293A  6AF8               	clrf	tblptru,c
 13769  01293C  0E00               	movlw	low (__mediumconst shr (0+16))
 13770  01293E  22F8               	addwfc	tblptru,f,c
 13771  012940                     	endif
 13772  012940  0008               	tblrd		*
 13773  012942  CFF5 F0B8          	movff	tablat,Byte_SetZone@MASK
 13774  012946                     i5Ll9087:
 13775                           	opt stack 12
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;Types.c: 50: UINT8 Offset = 0;
 13779  012946  0100               	movlb	0	; () banked
 13780  012948  6BB7               	clrf	Byte_SetZone@Offset& (0+255),b
 13781  01294A  D006               	goto	i5Ll9093
 13782  01294C                     i5Ll1307:
 13783                           	opt stack 0
 13784  01294C                     i5Ll9089:
 13785                           	opt stack 12
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;Types.c: 53: {
 13789                           ;Types.c: 54: pChunk -= pMax;
 13790  01294C  0100               	movlb	0	; () banked
 13791  01294E  51B0               	movf	Byte_SetZone@pMax& (0+255),w,b
 13792  012950  5FB1               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 13793  012952                     i5Ll9091:
 13794                           	opt stack 12
 13795                           
 13796                           ; BSR set to: 0
 13797                           ;Types.c: 55: Offset += 1;
 13798  012952  0100               	movlb	0	; () banked
 13799  012954  2BB7               	incf	Byte_SetZone@Offset& (0+255),f,b
 13800  012956  D000               	goto	i5Ll9093
 13801  012958                     i5Ll1306:
 13802                           	opt stack 0
 13803  012958                     i5Ll9093:
 13804                           	opt stack 12
 13805                           
 13806                           ; BSR set to: 0
 13807  012958  0100               	movlb	0	; () banked
 13808  01295A  51B0               	movf	Byte_SetZone@pMax& (0+255),w,b
 13809  01295C  5DB1               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 13810  01295E  E302               	bnc	i5Ll9095
 13811  012960                     i5Lu5891:
 13812                           	opt stack 0
 13813  012960  D7F5               	goto	i5Ll9089
 13814  012962                     i5Lu5890:
 13815                           	opt stack 0
 13816  012962  D000               	goto	i5Ll9095
 13817  012964                     i5Ll1308:
 13818                           	opt stack 0
 13819  012964                     i5Ll9095:
 13820                           	opt stack 12
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;Types.c: 56: }
 13824                           ;Types.c: 57: pChunk *= pChunkSize;
 13825  012964  0100               	movlb	0	; () banked
 13826  012966  51B2               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 13827  012968  03B1               	mulwf	Byte_SetZone@pChunk& (0+255),b
 13828  01296A  50F3               	movf	prodl,w,c
 13829  01296C  6FB1               	movwf	Byte_SetZone@pChunk& (0+255),b
 13830  01296E                     i5Ll9097:
 13831                           	opt stack 12
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;Types.c: 58: pChunk += Offset;
 13835  01296E  0100               	movlb	0	; () banked
 13836  012970  51B7               	movf	Byte_SetZone@Offset& (0+255),w,b
 13837  012972  27B1               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 13838  012974                     i5Ll9099:
 13839                           	opt stack 12
 13840                           
 13841                           ; BSR set to: 0
 13842                           ;Types.c: 60: pValue &= MASK;
 13843  012974  0100               	movlb	0	; () banked
 13844  012976  51B8               	movf	Byte_SetZone@MASK& (0+255),w,b
 13845  012978  17B3               	andwf	Byte_SetZone@pValue& (0+255),f,b
 13846  01297A                     i5Ll9101:
 13847                           	opt stack 12
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 13851  01297A  C0B1  F0B4         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 13852  01297E  C0B8  F0B5         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 13853  012982  0100               	movlb	0	; () banked
 13854  012984  2BB4               	incf	??_Byte_SetZone& (0+255),f,b
 13855  012986  D003               	goto	i5Lu5904
 13856  012988                     i5Lu5905:
 13857                           	opt stack 12
 13858  012988  0100               	movlb	0	; () banked
 13859  01298A  90D8               	bcf	status,0,c
 13860  01298C  37B5               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 13861  01298E                     i5Lu5904:
 13862                           	opt stack 12
 13863  01298E  0100               	movlb	0	; () banked
 13864  012990  2FB4               	decfsz	??_Byte_SetZone& (0+255),f,b
 13865  012992  D7FA               	goto	i5Lu5905
 13866  012994  1DB5               	comf	(??_Byte_SetZone+1)& (0+255),w,b
 13867  012996  6FB6               	movwf	(??_Byte_SetZone+2)& (0+255),b
 13868  012998  C0AE  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 13869  01299C  C0AF  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 13870  0129A0  51B6               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 13871  0129A2  16DF               	andwf	indf2,f,c
 13872  0129A4                     i5Ll9103:
 13873                           	opt stack 12
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 13877  0129A4  C0B1  F0B4         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 13878  0129A8  C0B3  F0B5         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 13879  0129AC  0100               	movlb	0	; () banked
 13880  0129AE  2BB4               	incf	??_Byte_SetZone& (0+255),f,b
 13881  0129B0  D003               	goto	i5Lu5914
 13882  0129B2                     i5Lu5915:
 13883                           	opt stack 12
 13884  0129B2  0100               	movlb	0	; () banked
 13885  0129B4  90D8               	bcf	status,0,c
 13886  0129B6  37B5               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 13887  0129B8                     i5Lu5914:
 13888                           	opt stack 12
 13889  0129B8  0100               	movlb	0	; () banked
 13890  0129BA  2FB4               	decfsz	??_Byte_SetZone& (0+255),f,b
 13891  0129BC  D7FA               	goto	i5Lu5915
 13892  0129BE  C0AE  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 13893  0129C2  C0AF  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 13894  0129C6  51B5               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 13895  0129C8  12DF               	iorwf	indf2,f,c
 13896  0129CA                     i5Ll1309:
 13897                           	opt stack 0
 13898  0129CA  0012               	return	
 13899  0129CC                     __end_of_Byte_SetQuad:
 13900                           	opt stack 0
 13901                           tblptru	equ	0xFF8
 13902                           tblptrh	equ	0xFF7
 13903                           tblptrl	equ	0xFF6
 13904                           tablat	equ	0xFF5
 13905                           prodh	equ	0xFF4
 13906                           prodl	equ	0xFF3
 13907                           intcon	equ	0xFF2
 13908                           indf0	equ	0xFEF
 13909                           postinc0	equ	0xFEE
 13910                           fsr0h	equ	0xFEA
 13911                           fsr0l	equ	0xFE9
 13912                           wreg	equ	0xFE8
 13913                           indf1	equ	0xFE7
 13914                           postdec1	equ	0xFE5
 13915                           fsr1h	equ	0xFE2
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           plusw2	equ	0xFDB
 13921                           fsr2h	equ	0xFDA
 13922                           fsr2l	equ	0xFD9
 13923                           status	equ	0xFD8
 13924                           
 13925 ;; *************** function _Port_SetPinType *****************
 13926 ;; Defined at:
 13927 ;;		line 189 in file "Library/Port.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 13930 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
 13931 ;;		 -> PortE(10), PortD(10), PortB(10), 
 13932 ;;  pPin            1   40[BANK0 ] enum E7688
 13933 ;;  pType           1   41[BANK0 ] enum E7733
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 13936 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 13937 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 13938 ;;  Output          1   42[BANK0 ] enum E7416
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      enum E7416
 13941 ;; Registers used:
 13942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:        7 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:   18
 13955 ;; This function calls:
 13956 ;;		_Byte_SetBit
 13957 ;;		_PortProperty_Valid
 13958 ;;		_Word_SetPair
 13959 ;; This function is called by:
 13960 ;;		_Button_Init
 13961 ;;		_Configure_GPIOs
 13962 ;;		_LED_Init
 13963 ;;		_Port_Init
 13964 ;;		_SPI_Init
 13965 ;;		_Motor_Init
 13966 ;;		_MXK_Init
 13967 ;;		_I2C_Init
 13968 ;; This function uses a non-reentrant model
 13969 ;;
 13970                           
 13971                           	psect	text70
 13972  010F5A                     __ptext70:
 13973                           	opt stack 0
 13974  010F5A                     _Port_SetPinType:
 13975                           	opt stack 11
 13976                           
 13977                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 13978                           
 13979                           ;incstack = 0
 13980  010F5A  C0D4  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 13981  010F5E  C0D5  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 13982  010F62  CFDE F0D9          	movff	postinc2,Port_SetPinType@Props
 13983  010F66  CFDD F0DA          	movff	postdec2,Port_SetPinType@Props+1
 13984                           
 13985                           ;Port.c: 192: ePinError Output = ePinErrorState;
 13986  010F6A  0E05               	movlw	5
 13987  010F6C  0100               	movlb	0	; () banked
 13988  010F6E  6FD8               	movwf	Port_SetPinType@Output& (0+255),b
 13989                           
 13990                           ;Port.c: 193: switch (pType)
 13991  010F70  D0A3               	goto	l10331
 13992  010F72                     l10311:
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Port.c: 197: {
 13996                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 13997  010F72  0100               	movlb	0	; () banked
 13998  010F74  EE20 F002          	lfsr	2,2
 13999  010F78  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14000  010F7A  26D9               	addwf	fsr2l,f,c
 14001  010F7C  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14002  010F7E  22DA               	addwfc	fsr2h,f,c
 14003  010F80  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14004  010F84  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14005  010F88  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14006  010F8C  0E01               	movlw	1
 14007  010F8E  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 14008  010F90  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14009                           
 14010                           ;Port.c: 203: break;
 14011  010F94  D09C               	goto	l10333
 14012  010F96                     l10313:
 14013                           
 14014                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 14015  010F96  C0D9  F0BD         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 14016  010F9A  C0DA  F0BE         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 14017  010F9E  0E01               	movlw	1
 14018  010FA0  0100               	movlb	0	; () banked
 14019  010FA2  6FBF               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 14020  010FA4  C0D6  F0C0         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 14021  010FA8  ECCF  F09E         	call	_PortProperty_Valid	;wreg free
 14022  010FAC  0100               	movlb	0	; () banked
 14023  010FAE  6FD8               	movwf	Port_SetPinType@Output& (0+255),b
 14024  010FB0  51D8               	movf	Port_SetPinType@Output& (0+255),w,b
 14025  010FB2  A4D8               	btfss	status,2,c
 14026  010FB4  0012               	return	
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;Port.c: 208: {
 14030                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 14031  010FB6  EE20 F002          	lfsr	2,2
 14032  010FBA  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14033  010FBC  26D9               	addwf	fsr2l,f,c
 14034  010FBE  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14035  010FC0  22DA               	addwfc	fsr2h,f,c
 14036  010FC2  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14037  010FC6  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14038  010FCA  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14039  010FCE  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 14040  010FD0  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14041                           
 14042                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 14043  010FD4  0100               	movlb	0	; () banked
 14044  010FD6  EE20 F004          	lfsr	2,4
 14045  010FDA  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14046  010FDC  26D9               	addwf	fsr2l,f,c
 14047  010FDE  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14048  010FE0  22DA               	addwfc	fsr2h,f,c
 14049  010FE2  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14050  010FE6  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14051  010FEA  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14052  010FEE  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 14053  010FF0  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14054                           
 14055                           ;Port.c: 214: break;
 14056  010FF4  D06C               	goto	l10333
 14057  010FF6                     l10319:
 14058                           
 14059                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 14060  010FF6  C0D9  F0BD         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 14061  010FFA  C0DA  F0BE         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 14062  010FFE  0E02               	movlw	2
 14063  011000  0100               	movlb	0	; () banked
 14064  011002  6FBF               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 14065  011004  C0D6  F0C0         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 14066  011008  ECCF  F09E         	call	_PortProperty_Valid	;wreg free
 14067  01100C  0100               	movlb	0	; () banked
 14068  01100E  6FD8               	movwf	Port_SetPinType@Output& (0+255),b
 14069  011010  51D8               	movf	Port_SetPinType@Output& (0+255),w,b
 14070  011012  A4D8               	btfss	status,2,c
 14071  011014  0012               	return	
 14072                           
 14073                           ; BSR set to: 0
 14074                           ;Port.c: 220: {
 14075                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 14076  011016  EE20 F002          	lfsr	2,2
 14077  01101A  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14078  01101C  26D9               	addwf	fsr2l,f,c
 14079  01101E  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14080  011020  22DA               	addwfc	fsr2h,f,c
 14081  011022  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14082  011026  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14083  01102A  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14084  01102E  0E01               	movlw	1
 14085  011030  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 14086  011032  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14087                           
 14088                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 14089  011036  0100               	movlb	0	; () banked
 14090  011038  EE20 F004          	lfsr	2,4
 14091  01103C  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14092  01103E  26D9               	addwf	fsr2l,f,c
 14093  011040  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14094  011042  22DA               	addwfc	fsr2h,f,c
 14095  011044  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14096  011048  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14097  01104C  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14098  011050  0E01               	movlw	1
 14099  011052  6FB1               	movwf	Byte_SetBit@pValue& (0+255),b
 14100  011054  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14101                           
 14102                           ;Port.c: 226: break;
 14103  011058  D03A               	goto	l10333
 14104  01105A                     l10325:
 14105                           
 14106                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 14107  01105A  C0D9  F0BD         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 14108  01105E  C0DA  F0BE         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 14109  011062  0100               	movlb	0	; () banked
 14110  011064  6BBF               	clrf	PortProperty_Valid@pPinDrive& (0+255),b
 14111  011066  C0D6  F0C0         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 14112  01106A  ECCF  F09E         	call	_PortProperty_Valid	;wreg free
 14113  01106E  0100               	movlb	0	; () banked
 14114  011070  6FD8               	movwf	Port_SetPinType@Output& (0+255),b
 14115  011072  51D8               	movf	Port_SetPinType@Output& (0+255),w,b
 14116  011074  A4D8               	btfss	status,2,c
 14117  011076  0012               	return	
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;Port.c: 232: {
 14121                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 14122  011078  EE20 F002          	lfsr	2,2
 14123  01107C  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14124  01107E  26D9               	addwf	fsr2l,f,c
 14125  011080  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14126  011082  22DA               	addwfc	fsr2h,f,c
 14127  011084  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14128  011088  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14129  01108C  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14130  011090  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 14131  011092  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14132                           
 14133                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 14134  011096  0100               	movlb	0	; () banked
 14135  011098  EE20 F004          	lfsr	2,4
 14136  01109C  51D4               	movf	Port_SetPinType@pInput& (0+255),w,b
 14137  01109E  26D9               	addwf	fsr2l,f,c
 14138  0110A0  51D5               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 14139  0110A2  22DA               	addwfc	fsr2h,f,c
 14140  0110A4  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 14141  0110A8  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 14142  0110AC  C0D6  F0B0         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 14143  0110B0  6BB1               	clrf	Byte_SetBit@pValue& (0+255),b
 14144  0110B2  EC1C  F0A1         	call	_Byte_SetBit	;wreg free
 14145                           
 14146                           ;Port.c: 239: }
 14147                           
 14148                           ;Port.c: 238: break;
 14149  0110B6  D00B               	goto	l10333
 14150  0110B8                     l10331:
 14151  0110B8  0100               	movlb	0	; () banked
 14152  0110BA  51D7               	movf	Port_SetPinType@pType& (0+255),w,b
 14153                           
 14154                           ; Switch size 1, requested type "space"
 14155                           ; Number of cases is 4, Range of values is 0 to 3
 14156                           ; switch strategies available:
 14157                           ; Name         Instructions Cycles
 14158                           ; simple_byte           13     7 (average)
 14159                           ;	Chosen strategy is simple_byte
 14160  0110BC  E101 D759          	bz	l10311
 14161  0110C0  0A01               	xorlw	1	; case 1
 14162  0110C2  E101 D768          	bz	l10313
 14163  0110C6  0A03               	xorlw	3	; case 2
 14164  0110C8  E096               	bz	l10319
 14165  0110CA  0A01               	xorlw	1	; case 3
 14166  0110CC  E0C6               	bz	l10325
 14167  0110CE                     l10333:
 14168                           
 14169                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 14170  0110CE  0E08               	movlw	8
 14171  0110D0  0100               	movlb	0	; () banked
 14172  0110D2  25D4               	addwf	Port_SetPinType@pInput& (0+255),w,b
 14173  0110D4  6FBD               	movwf	Word_SetPair@pInput& (0+255),b
 14174  0110D6  0E00               	movlw	0
 14175  0110D8  21D5               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 14176  0110DA  6FBE               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14177  0110DC  C0D6  F0BF         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 14178  0110E0  C0D7  F0C0         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 14179  0110E4  EFD7  F0A5         	goto	_Word_SetPair	;wreg free
 14180  0110E8                     __end_of_Port_SetPinType:
 14181                           	opt stack 0
 14182                           tblptru	equ	0xFF8
 14183                           tblptrh	equ	0xFF7
 14184                           tblptrl	equ	0xFF6
 14185                           tablat	equ	0xFF5
 14186                           prodh	equ	0xFF4
 14187                           prodl	equ	0xFF3
 14188                           intcon	equ	0xFF2
 14189                           indf0	equ	0xFEF
 14190                           postinc0	equ	0xFEE
 14191                           fsr0h	equ	0xFEA
 14192                           fsr0l	equ	0xFE9
 14193                           wreg	equ	0xFE8
 14194                           indf1	equ	0xFE7
 14195                           postdec1	equ	0xFE5
 14196                           fsr1h	equ	0xFE2
 14197                           fsr1l	equ	0xFE1
 14198                           indf2	equ	0xFDF
 14199                           postinc2	equ	0xFDE
 14200                           postdec2	equ	0xFDD
 14201                           plusw2	equ	0xFDB
 14202                           fsr2h	equ	0xFDA
 14203                           fsr2l	equ	0xFD9
 14204                           status	equ	0xFD8
 14205                           
 14206 ;; *************** function _Word_SetPair *****************
 14207 ;; Defined at:
 14208 ;;		line 149 in file "Library/Types.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;  pInput          2   15[BANK0 ] PTR struct Word
 14211 ;;		 -> PortG(10), PortA(10), PortC(10), PortF(10), 
 14212 ;;		 -> PortE(10), PortD(10), PortB(10), 
 14213 ;;  pPair           1   17[BANK0 ] unsigned char 
 14214 ;;  pValue          1   18[BANK0 ] unsigned char 
 14215 ;; Auto vars:     Size  Location     Type
 14216 ;;		None
 14217 ;; Return value:  Size  Location     Type
 14218 ;;                  1    wreg      void 
 14219 ;; Registers used:
 14220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14221 ;; Tracked objects:
 14222 ;;		On entry : 0/0
 14223 ;;		On exit  : 0/0
 14224 ;;		Unchanged: 0/0
 14225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;Total ram usage:        4 bytes
 14231 ;; Hardware stack levels used:    1
 14232 ;; Hardware stack levels required when called:   16
 14233 ;; This function calls:
 14234 ;;		_Byte_SetPair
 14235 ;; This function is called by:
 14236 ;;		_Port_SetPinType
 14237 ;;		_Port_SetQuadType
 14238 ;;		_Port_SetType
 14239 ;;		_Port_SetPairType
 14240 ;;		_PortProperty_Init
 14241 ;; This function uses a non-reentrant model
 14242 ;;
 14243                           
 14244                           	psect	text71
 14245  014BAE                     __ptext71:
 14246                           	opt stack 0
 14247  014BAE                     _Word_SetPair:
 14248                           	opt stack 12
 14249                           
 14250                           ;Types.c: 151: if (pPair >= 4)
 14251                           
 14252                           ;incstack = 0
 14253  014BAE  0E03               	movlw	3
 14254  014BB0  0100               	movlb	0	; () banked
 14255  014BB2  65BF               	cpfsgt	Word_SetPair@pPair& (0+255),b
 14256  014BB4  D009               	goto	l9975
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 14260  014BB6  29BD               	incf	Word_SetPair@pInput& (0+255),w,b
 14261  014BB8  6FB9               	movwf	Byte_SetPair@pInput& (0+255),b
 14262  014BBA  0E00               	movlw	0
 14263  014BBC  21BE               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 14264  014BBE  6FBA               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 14265  014BC0  51BF               	movf	Word_SetPair@pPair& (0+255),w,b
 14266  014BC2  0FFC               	addlw	252
 14267  014BC4  6FBB               	movwf	Byte_SetPair@pPair& (0+255),b
 14268  014BC6  D006               	goto	L9
 14269  014BC8                     l9975:
 14270                           
 14271                           ;Types.c: 153: else
 14272                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 14273  014BC8  C0BD  F0B9         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 14274  014BCC  C0BE  F0BA         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 14275  014BD0  C0BF  F0BB         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 14276  014BD4                     L9:
 14277  014BD4  C0C0  F0BC         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 14278  014BD8  EFE6  F094         	goto	_Byte_SetPair	;wreg free
 14279  014BDC                     __end_of_Word_SetPair:
 14280                           	opt stack 0
 14281                           tblptru	equ	0xFF8
 14282                           tblptrh	equ	0xFF7
 14283                           tblptrl	equ	0xFF6
 14284                           tablat	equ	0xFF5
 14285                           prodh	equ	0xFF4
 14286                           prodl	equ	0xFF3
 14287                           intcon	equ	0xFF2
 14288                           indf0	equ	0xFEF
 14289                           postinc0	equ	0xFEE
 14290                           fsr0h	equ	0xFEA
 14291                           fsr0l	equ	0xFE9
 14292                           wreg	equ	0xFE8
 14293                           indf1	equ	0xFE7
 14294                           postdec1	equ	0xFE5
 14295                           fsr1h	equ	0xFE2
 14296                           fsr1l	equ	0xFE1
 14297                           indf2	equ	0xFDF
 14298                           postinc2	equ	0xFDE
 14299                           postdec2	equ	0xFDD
 14300                           plusw2	equ	0xFDB
 14301                           fsr2h	equ	0xFDA
 14302                           fsr2l	equ	0xFD9
 14303                           status	equ	0xFD8
 14304                           
 14305 ;; *************** function _Byte_SetPair *****************
 14306 ;; Defined at:
 14307 ;;		line 83 in file "Library/Types.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 14310 ;;		 -> PortB..(2), PortD..(2), PortE..(2), PortF..(2), 
 14311 ;;		 -> PortC..(2), PortA..(2), PortG..(2), PortG(10), 
 14312 ;;		 -> PortA(10), TRISG(1), TRISF(1), TRISE(1), 
 14313 ;;		 -> TRISD(1), TRISC(1), TRISB(1), TRISA(1), 
 14314 ;;		 -> PORTG(1), PORTF(1), PORTE(1), PORTD(1), 
 14315 ;;		 -> PORTC(1), PORTB(1), PORTA(1), PortC(10), 
 14316 ;;		 -> PortF(10), PortE(10), PortD(10), PortB(10), 
 14317 ;;		 -> NULL(0), 
 14318 ;;  pPair           1   13[BANK0 ] unsigned char 
 14319 ;;  pValue          1   14[BANK0 ] unsigned char 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;		None
 14322 ;; Return value:  Size  Location     Type
 14323 ;;                  1    wreg      void 
 14324 ;; Registers used:
 14325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14326 ;; Tracked objects:
 14327 ;;		On entry : 0/0
 14328 ;;		On exit  : 0/0
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14335 ;;Total ram usage:        4 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; Hardware stack levels required when called:   15
 14338 ;; This function calls:
 14339 ;;		_Byte_SetZone
 14340 ;; This function is called by:
 14341 ;;		_Word_SetPair
 14342 ;;		_Port_SetPairType
 14343 ;;		_Port_SetPair
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           	psect	text72
 14348  0129CC                     __ptext72:
 14349                           	opt stack 0
 14350  0129CC                     _Byte_SetPair:
 14351                           	opt stack 12
 14352                           
 14353                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 14354                           
 14355                           ;incstack = 0
 14356  0129CC  C0B9  F0AE         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 14357  0129D0  C0BA  F0AF         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 14358  0129D4  0E04               	movlw	4
 14359  0129D6  0100               	movlb	0	; () banked
 14360  0129D8  6FB0               	movwf	Byte_SetZone@pMax& (0+255),b
 14361  0129DA  C0BB  F0B1         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 14362  0129DE  0E02               	movlw	2
 14363  0129E0  6FB2               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 14364  0129E2  C0BC  F0B3         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 14365  0129E6                     i6L__ptext73:
 14366                           	opt stack 0
 14367  0129E6                     i6L_Byte_SetZone:
 14368                           	opt stack 0
 14369  0129E6                     i6Ll9085:
 14370                           	opt stack 12
 14371                           
 14372                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 14373  0129E6  0100               	movlb	0	; () banked
 14374  0129E8  51B2               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 14375  0129EA  0D01               	mullw	1
 14376  0129EC  0EC1               	movlw	low _MASKS
 14377  0129EE  24F3               	addwf	prodl,w,c
 14378  0129F0  6EF6               	movwf	tblptrl,c
 14379  0129F2  0EFC               	movlw	high _MASKS
 14380  0129F4  20F4               	addwfc	prodh,w,c
 14381  0129F6  6EF7               	movwf	tblptrh,c
 14382  0129F8                     	if	1	;There are 3 active tblptr bytes
 14383  0129F8  6AF8               	clrf	tblptru,c
 14384  0129FA  0E00               	movlw	low (__mediumconst shr (0+16))
 14385  0129FC  22F8               	addwfc	tblptru,f,c
 14386  0129FE                     	endif
 14387  0129FE  0008               	tblrd		*
 14388  012A00  CFF5 F0B8          	movff	tablat,Byte_SetZone@MASK
 14389  012A04                     i6Ll9087:
 14390                           	opt stack 12
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;Types.c: 50: UINT8 Offset = 0;
 14394  012A04  0100               	movlb	0	; () banked
 14395  012A06  6BB7               	clrf	Byte_SetZone@Offset& (0+255),b
 14396  012A08  D006               	goto	i6Ll9093
 14397  012A0A                     i6Ll1307:
 14398                           	opt stack 0
 14399  012A0A                     i6Ll9089:
 14400                           	opt stack 12
 14401                           
 14402                           ; BSR set to: 0
 14403                           ;Types.c: 53: {
 14404                           ;Types.c: 54: pChunk -= pMax;
 14405  012A0A  0100               	movlb	0	; () banked
 14406  012A0C  51B0               	movf	Byte_SetZone@pMax& (0+255),w,b
 14407  012A0E  5FB1               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 14408  012A10                     i6Ll9091:
 14409                           	opt stack 12
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;Types.c: 55: Offset += 1;
 14413  012A10  0100               	movlb	0	; () banked
 14414  012A12  2BB7               	incf	Byte_SetZone@Offset& (0+255),f,b
 14415  012A14  D000               	goto	i6Ll9093
 14416  012A16                     i6Ll1306:
 14417                           	opt stack 0
 14418  012A16                     i6Ll9093:
 14419                           	opt stack 12
 14420                           
 14421                           ; BSR set to: 0
 14422  012A16  0100               	movlb	0	; () banked
 14423  012A18  51B0               	movf	Byte_SetZone@pMax& (0+255),w,b
 14424  012A1A  5DB1               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 14425  012A1C  E302               	bnc	i6Ll9095
 14426  012A1E                     i6Lu5891:
 14427                           	opt stack 0
 14428  012A1E  D7F5               	goto	i6Ll9089
 14429  012A20                     i6Lu5890:
 14430                           	opt stack 0
 14431  012A20  D000               	goto	i6Ll9095
 14432  012A22                     i6Ll1308:
 14433                           	opt stack 0
 14434  012A22                     i6Ll9095:
 14435                           	opt stack 12
 14436                           
 14437                           ; BSR set to: 0
 14438                           ;Types.c: 56: }
 14439                           ;Types.c: 57: pChunk *= pChunkSize;
 14440  012A22  0100               	movlb	0	; () banked
 14441  012A24  51B2               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 14442  012A26  03B1               	mulwf	Byte_SetZone@pChunk& (0+255),b
 14443  012A28  50F3               	movf	prodl,w,c
 14444  012A2A  6FB1               	movwf	Byte_SetZone@pChunk& (0+255),b
 14445  012A2C                     i6Ll9097:
 14446                           	opt stack 12
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;Types.c: 58: pChunk += Offset;
 14450  012A2C  0100               	movlb	0	; () banked
 14451  012A2E  51B7               	movf	Byte_SetZone@Offset& (0+255),w,b
 14452  012A30  27B1               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 14453  012A32                     i6Ll9099:
 14454                           	opt stack 12
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;Types.c: 60: pValue &= MASK;
 14458  012A32  0100               	movlb	0	; () banked
 14459  012A34  51B8               	movf	Byte_SetZone@MASK& (0+255),w,b
 14460  012A36  17B3               	andwf	Byte_SetZone@pValue& (0+255),f,b
 14461  012A38                     i6Ll9101:
 14462                           	opt stack 12
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 14466  012A38  C0B1  F0B4         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 14467  012A3C  C0B8  F0B5         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 14468  012A40  0100               	movlb	0	; () banked
 14469  012A42  2BB4               	incf	??_Byte_SetZone& (0+255),f,b
 14470  012A44  D003               	goto	i6Lu5904
 14471  012A46                     i6Lu5905:
 14472                           	opt stack 12
 14473  012A46  0100               	movlb	0	; () banked
 14474  012A48  90D8               	bcf	status,0,c
 14475  012A4A  37B5               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 14476  012A4C                     i6Lu5904:
 14477                           	opt stack 12
 14478  012A4C  0100               	movlb	0	; () banked
 14479  012A4E  2FB4               	decfsz	??_Byte_SetZone& (0+255),f,b
 14480  012A50  D7FA               	goto	i6Lu5905
 14481  012A52  1DB5               	comf	(??_Byte_SetZone+1)& (0+255),w,b
 14482  012A54  6FB6               	movwf	(??_Byte_SetZone+2)& (0+255),b
 14483  012A56  C0AE  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 14484  012A5A  C0AF  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 14485  012A5E  51B6               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 14486  012A60  16DF               	andwf	indf2,f,c
 14487  012A62                     i6Ll9103:
 14488                           	opt stack 12
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 14492  012A62  C0B1  F0B4         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 14493  012A66  C0B3  F0B5         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 14494  012A6A  0100               	movlb	0	; () banked
 14495  012A6C  2BB4               	incf	??_Byte_SetZone& (0+255),f,b
 14496  012A6E  D003               	goto	i6Lu5914
 14497  012A70                     i6Lu5915:
 14498                           	opt stack 12
 14499  012A70  0100               	movlb	0	; () banked
 14500  012A72  90D8               	bcf	status,0,c
 14501  012A74  37B5               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 14502  012A76                     i6Lu5914:
 14503                           	opt stack 12
 14504  012A76  0100               	movlb	0	; () banked
 14505  012A78  2FB4               	decfsz	??_Byte_SetZone& (0+255),f,b
 14506  012A7A  D7FA               	goto	i6Lu5915
 14507  012A7C  C0AE  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 14508  012A80  C0AF  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 14509  012A84  51B5               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 14510  012A86  12DF               	iorwf	indf2,f,c
 14511  012A88                     i6Ll1309:
 14512                           	opt stack 0
 14513  012A88  0012               	return	
 14514  012A8A                     __end_of_Byte_SetPair:
 14515                           	opt stack 0
 14516                           tblptru	equ	0xFF8
 14517                           tblptrh	equ	0xFF7
 14518                           tblptrl	equ	0xFF6
 14519                           tablat	equ	0xFF5
 14520                           prodh	equ	0xFF4
 14521                           prodl	equ	0xFF3
 14522                           intcon	equ	0xFF2
 14523                           indf0	equ	0xFEF
 14524                           postinc0	equ	0xFEE
 14525                           fsr0h	equ	0xFEA
 14526                           fsr0l	equ	0xFE9
 14527                           wreg	equ	0xFE8
 14528                           indf1	equ	0xFE7
 14529                           postdec1	equ	0xFE5
 14530                           fsr1h	equ	0xFE2
 14531                           fsr1l	equ	0xFE1
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           plusw2	equ	0xFDB
 14536                           fsr2h	equ	0xFDA
 14537                           fsr2l	equ	0xFD9
 14538                           status	equ	0xFD8
 14539                           
 14540 ;; *************** function _Byte_SetZone *****************
 14541 ;; Defined at:
 14542 ;;		line 47 in file "Library/Types.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 14545 ;;		 -> PortB..(2), PortD..(2), PortE..(2), PortF..(2), 
 14546 ;;		 -> PortC..(2), PortA..(2), PortG..(2), PortG(10), 
 14547 ;;		 -> PortA(10), SSP2CON1(1), SSP1CON1(1), TRISG(1), 
 14548 ;;		 -> TRISF(1), TRISE(1), TRISD(1), TRISC(1), 
 14549 ;;		 -> TRISB(1), TRISA(1), PORTG(1), PORTF(1), 
 14550 ;;		 -> PORTE(1), PORTD(1), PORTC(1), PORTB(1), 
 14551 ;;		 -> PORTA(1), PortC(10), PortF(10), PortE(10), 
 14552 ;;		 -> PortD(10), PortB(10), NULL(0), 
 14553 ;;  pMax            1    2[BANK0 ] unsigned char 
 14554 ;;  pChunk          1    3[BANK0 ] unsigned char 
 14555 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 14556 ;;  pValue          1    5[BANK0 ] unsigned char 
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;  MASK            1   10[BANK0 ] unsigned char 
 14559 ;;  Offset          1    9[BANK0 ] unsigned char 
 14560 ;; Return value:  Size  Location     Type
 14561 ;;                  1    wreg      void 
 14562 ;; Registers used:
 14563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14564 ;; Tracked objects:
 14565 ;;		On entry : 0/0
 14566 ;;		On exit  : 0/0
 14567 ;;		Unchanged: 0/0
 14568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14569 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14570 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14571 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14572 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14573 ;;Total ram usage:       11 bytes
 14574 ;; Hardware stack levels used:    1
 14575 ;; Hardware stack levels required when called:   14
 14576 ;; This function calls:
 14577 ;;		Nothing
 14578 ;; This function is called by:
 14579 ;;		_Byte_SetPair
 14580 ;;		_Byte_SetQuad
 14581 ;;		_Byte_SetTriple
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           	psect	text73
 14586  000000                     __ptext73:
 14587                           	opt stack 0
 14588  000000                     _Byte_SetZone:
 14589                           	opt stack 0
 14590  000000                     __end_of_Byte_SetZone:
 14591                           	opt stack 0
 14592                           tblptru	equ	0xFF8
 14593                           tblptrh	equ	0xFF7
 14594                           tblptrl	equ	0xFF6
 14595                           tablat	equ	0xFF5
 14596                           prodh	equ	0xFF4
 14597                           prodl	equ	0xFF3
 14598                           intcon	equ	0xFF2
 14599                           indf0	equ	0xFEF
 14600                           postinc0	equ	0xFEE
 14601                           fsr0h	equ	0xFEA
 14602                           fsr0l	equ	0xFE9
 14603                           wreg	equ	0xFE8
 14604                           indf1	equ	0xFE7
 14605                           postdec1	equ	0xFE5
 14606                           fsr1h	equ	0xFE2
 14607                           fsr1l	equ	0xFE1
 14608                           indf2	equ	0xFDF
 14609                           postinc2	equ	0xFDE
 14610                           postdec2	equ	0xFDD
 14611                           plusw2	equ	0xFDB
 14612                           fsr2h	equ	0xFDA
 14613                           fsr2l	equ	0xFD9
 14614                           status	equ	0xFD8
 14615                           
 14616 ;; *************** function _PortProperty_Valid *****************
 14617 ;; Defined at:
 14618 ;;		line 220 in file "Library/Types.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 14621 ;;		 -> PortG(10), PortA(10), PortG_Property(2), PortF_Property(2), 
 14622 ;;		 -> PortE_Property(2), PortD_Property(2), PortC_Property(2), PortB_Property(2), 
 14623 ;;		 -> PortA_Property(2), PortC(10), PortF(10), PortE(10), 
 14624 ;;		 -> PortD(10), PortB(10), NULL(0), 
 14625 ;;  pPinDrive       1   17[BANK0 ] enum E7410
 14626 ;;  pPin            1   18[BANK0 ] unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  Errors         16   21[BANK0 ] const enum E7416[4][4]
 14629 ;;  Pair            1   37[BANK0 ] enum E7410
 14630 ;; Return value:  Size  Location     Type
 14631 ;;                  1    wreg      enum E7416
 14632 ;; Registers used:
 14633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14634 ;; Tracked objects:
 14635 ;;		On entry : 0/0
 14636 ;;		On exit  : 0/0
 14637 ;;		Unchanged: 0/0
 14638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14639 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14642 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14643 ;;Total ram usage:       23 bytes
 14644 ;; Hardware stack levels used:    1
 14645 ;; Hardware stack levels required when called:   17
 14646 ;; This function calls:
 14647 ;;		_Word_GetPair
 14648 ;; This function is called by:
 14649 ;;		_Port_CheckPairType
 14650 ;;		_Port_SetPinType
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           	psect	text74
 14655  013D9E                     __ptext74:
 14656                           	opt stack 0
 14657  013D9E                     _PortProperty_Valid:
 14658                           	opt stack 8
 14659                           
 14660                           ;Types.c: 222: ePinDrive Pair;
 14661                           ;Types.c: 223: const ePinError Errors[4][4] =
 14662                           ;Types.c: 224: {
 14663                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 14664                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 14665                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 14666                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 14667                           ;Types.c: 230: };
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;incstack = 0
 14671  013D9E  0EA1               	movlw	low PortProperty_Valid@F7768
 14672  013DA0  6EF6               	movwf	tblptrl,c
 14673  013DA2                     	if	1	;There is more than 1 active tblptr byte
 14674  013DA2  0EFC               	movlw	high PortProperty_Valid@F7768
 14675  013DA4  6EF7               	movwf	tblptrh,c
 14676  013DA6                     	endif
 14677  013DA6                     	if	1	;There are 3 active tblptr bytes
 14678  013DA6  0E00               	movlw	low (PortProperty_Valid@F7768 shr (0+16))
 14679  013DA8  6EF8               	movwf	tblptru,c
 14680  013DAA                     	endif
 14681  013DAA  EE20  F0C3         	lfsr	2,PortProperty_Valid@Errors
 14682  013DAE  0E0F               	movlw	15
 14683  013DB0                     u6040:
 14684  013DB0  0009               	tblrd		*+
 14685  013DB2  CFF5 FFDE          	movff	tablat,postinc2
 14686  013DB6  06E8               	decf	wreg,f,c
 14687  013DB8  E2FB               	bc	u6040
 14688                           
 14689                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 14690  013DBA  C0BD  F0BA         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 14691  013DBE  C0BE  F0BB         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 14692  013DC2  C0C0  F0BC         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 14693  013DC6  EC5E  F0A6         	call	_Word_GetPair	;wreg free
 14694  013DCA  0100               	movlb	0	; () banked
 14695  013DCC  6FD3               	movwf	PortProperty_Valid@Pair& (0+255),b
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 14699  013DCE  0E04               	movlw	4
 14700  013DD0  61BF               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 14701  013DD2  0C05               	retlw	5
 14702                           
 14703                           ; BSR set to: 0
 14704  013DD4  61D3               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 14705  013DD6  0C05               	retlw	5
 14706                           
 14707                           ; BSR set to: 0
 14708                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 14709  013DD8  51BF               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 14710  013DDA  0D04               	mullw	4
 14711  013DDC  0EC3               	movlw	low PortProperty_Valid@Errors
 14712  013DDE  6FC1               	movwf	??_PortProperty_Valid& (0+255),b
 14713  013DE0  0E00               	movlw	high PortProperty_Valid@Errors
 14714  013DE2  6FC2               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 14715  013DE4  50F3               	movf	prodl,w,c
 14716  013DE6  27C1               	addwf	??_PortProperty_Valid& (0+255),f,b
 14717  013DE8  50F4               	movf	prodh,w,c
 14718  013DEA  23C2               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 14719  013DEC  51D3               	movf	PortProperty_Valid@Pair& (0+255),w,b
 14720  013DEE  0D01               	mullw	1
 14721  013DF0  50F3               	movf	prodl,w,c
 14722  013DF2  25C1               	addwf	??_PortProperty_Valid& (0+255),w,b
 14723  013DF4  6ED9               	movwf	fsr2l,c
 14724  013DF6  50F4               	movf	prodh,w,c
 14725  013DF8  21C2               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 14726  013DFA  6EDA               	movwf	fsr2h,c
 14727  013DFC  50DF               	movf	indf2,w,c
 14728                           
 14729                           ; BSR set to: 0
 14730  013DFE  0012               	return	
 14731  013E00                     __end_of_PortProperty_Valid:
 14732                           	opt stack 0
 14733                           tblptru	equ	0xFF8
 14734                           tblptrh	equ	0xFF7
 14735                           tblptrl	equ	0xFF6
 14736                           tablat	equ	0xFF5
 14737                           prodh	equ	0xFF4
 14738                           prodl	equ	0xFF3
 14739                           intcon	equ	0xFF2
 14740                           indf0	equ	0xFEF
 14741                           postinc0	equ	0xFEE
 14742                           fsr0h	equ	0xFEA
 14743                           fsr0l	equ	0xFE9
 14744                           wreg	equ	0xFE8
 14745                           indf1	equ	0xFE7
 14746                           postdec1	equ	0xFE5
 14747                           fsr1h	equ	0xFE2
 14748                           fsr1l	equ	0xFE1
 14749                           indf2	equ	0xFDF
 14750                           postinc2	equ	0xFDE
 14751                           postdec2	equ	0xFDD
 14752                           plusw2	equ	0xFDB
 14753                           fsr2h	equ	0xFDA
 14754                           fsr2l	equ	0xFD9
 14755                           status	equ	0xFD8
 14756                           
 14757 ;; *************** function _FunctHMI *****************
 14758 ;; Defined at:
 14759 ;;		line 212 in file "Functions.c"
 14760 ;; Parameters:    Size  Location     Type
 14761 ;;		None
 14762 ;; Auto vars:     Size  Location     Type
 14763 ;;		None
 14764 ;; Return value:  Size  Location     Type
 14765 ;;                  1    wreg      void 
 14766 ;; Registers used:
 14767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 14768 ;; Tracked objects:
 14769 ;;		On entry : 0/0
 14770 ;;		On exit  : 0/0
 14771 ;;		Unchanged: 0/0
 14772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14777 ;;Total ram usage:        0 bytes
 14778 ;; Hardware stack levels used:    1
 14779 ;; Hardware stack levels required when called:   23
 14780 ;; This function calls:
 14781 ;;		_Console_Render
 14782 ;;		_HMI_Poll
 14783 ;;		_HMI_Render
 14784 ;;		_MXK_BlockSwitchTo
 14785 ;;		_MXK_Release
 14786 ;; This function is called by:
 14787 ;;		_main
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           	psect	text75
 14792  014F64                     __ptext75:
 14793                           	opt stack 0
 14794  014F64                     _FunctHMI:
 14795                           	opt stack 7
 14796                           
 14797                           ;Functions.c: 214: if (MXK_BlockSwitchTo(eMXK_HMI))
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;incstack = 0
 14801  014F64  0E06               	movlw	6
 14802  014F66  EC48  F0A5         	call	_MXK_BlockSwitchTo
 14803  014F6A  0900               	iorlw	0
 14804  014F6C  B4D8               	btfsc	status,2,c
 14805  014F6E  0012               	return	
 14806                           
 14807                           ;Functions.c: 215: {
 14808                           ;Functions.c: 217: HMI_Poll();
 14809  014F70  ECF2  F09F         	call	_HMI_Poll	;wreg free
 14810                           
 14811                           ;Functions.c: 220: HMI_Render();
 14812  014F74  EC8B  F0A4         	call	_HMI_Render	;wreg free
 14813                           
 14814                           ;Functions.c: 261: Console_Render();
 14815  014F78  ECD1  F086         	call	_Console_Render	;wreg free
 14816                           
 14817                           ;Functions.c: 264: MXK_Release();
 14818  014F7C  EF4C  F0A8         	goto	_MXK_Release	;wreg free
 14819  014F80                     __end_of_FunctHMI:
 14820                           	opt stack 0
 14821                           tblptru	equ	0xFF8
 14822                           tblptrh	equ	0xFF7
 14823                           tblptrl	equ	0xFF6
 14824                           tablat	equ	0xFF5
 14825                           prodh	equ	0xFF4
 14826                           prodl	equ	0xFF3
 14827                           intcon	equ	0xFF2
 14828                           indf0	equ	0xFEF
 14829                           postinc0	equ	0xFEE
 14830                           fsr0h	equ	0xFEA
 14831                           fsr0l	equ	0xFE9
 14832                           wreg	equ	0xFE8
 14833                           indf1	equ	0xFE7
 14834                           postdec1	equ	0xFE5
 14835                           fsr1h	equ	0xFE2
 14836                           fsr1l	equ	0xFE1
 14837                           indf2	equ	0xFDF
 14838                           postinc2	equ	0xFDE
 14839                           postdec2	equ	0xFDD
 14840                           plusw2	equ	0xFDB
 14841                           fsr2h	equ	0xFDA
 14842                           fsr2l	equ	0xFD9
 14843                           status	equ	0xFD8
 14844                           
 14845 ;; *************** function _MXK_Release *****************
 14846 ;; Defined at:
 14847 ;;		line 100 in file "MXK.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;		None
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;		None
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  1    wreg      void 
 14854 ;; Registers used:
 14855 ;;		wreg, status,2
 14856 ;; Tracked objects:
 14857 ;;		On entry : 0/0
 14858 ;;		On exit  : 0/0
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;Total ram usage:        0 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; Hardware stack levels required when called:   14
 14868 ;; This function calls:
 14869 ;;		Nothing
 14870 ;; This function is called by:
 14871 ;;		_FunctInitMotor
 14872 ;;		_FunctInitLCD
 14873 ;;		_FunctInitHMI
 14874 ;;		_FunctMotor
 14875 ;;		_FunctHMI
 14876 ;;		_FunctInitIMU
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           	psect	text76
 14881  015098                     __ptext76:
 14882                           	opt stack 0
 14883  015098                     _MXK_Release:
 14884                           	opt stack 15
 14885                           
 14886                           ;MXK.c: 102: Bus_State = eMXK_Idle;
 14887                           
 14888                           ;incstack = 0
 14889  015098  0E01               	movlw	1
 14890  01509A  0100               	movlb	0	; () banked
 14891  01509C  6FFB               	movwf	_Bus_State& (0+255),b
 14892                           
 14893                           ; BSR set to: 0
 14894  01509E  0C01               	retlw	1	;funcret
 14895  0150A0                     __end_of_MXK_Release:
 14896                           	opt stack 0
 14897                           tblptru	equ	0xFF8
 14898                           tblptrh	equ	0xFF7
 14899                           tblptrl	equ	0xFF6
 14900                           tablat	equ	0xFF5
 14901                           prodh	equ	0xFF4
 14902                           prodl	equ	0xFF3
 14903                           intcon	equ	0xFF2
 14904                           indf0	equ	0xFEF
 14905                           postinc0	equ	0xFEE
 14906                           fsr0h	equ	0xFEA
 14907                           fsr0l	equ	0xFE9
 14908                           wreg	equ	0xFE8
 14909                           indf1	equ	0xFE7
 14910                           postdec1	equ	0xFE5
 14911                           fsr1h	equ	0xFE2
 14912                           fsr1l	equ	0xFE1
 14913                           indf2	equ	0xFDF
 14914                           postinc2	equ	0xFDE
 14915                           postdec2	equ	0xFDD
 14916                           plusw2	equ	0xFDB
 14917                           fsr2h	equ	0xFDA
 14918                           fsr2l	equ	0xFD9
 14919                           status	equ	0xFD8
 14920                           
 14921 ;; *************** function _MXK_BlockSwitchTo *****************
 14922 ;; Defined at:
 14923 ;;		line 53 in file "MXK.c"
 14924 ;; Parameters:    Size  Location     Type
 14925 ;;  pModule         1    wreg     enum E7818
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;  pModule         1    7[BANK0 ] enum E7818
 14928 ;;  CUR             1    6[BANK0 ] unsigned char 
 14929 ;; Return value:  Size  Location     Type
 14930 ;;                  1    wreg      unsigned char 
 14931 ;; Registers used:
 14932 ;;		wreg, status,2, status,0, cstack
 14933 ;; Tracked objects:
 14934 ;;		On entry : 0/0
 14935 ;;		On exit  : 0/0
 14936 ;;		Unchanged: 0/0
 14937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14942 ;;Total ram usage:        2 bytes
 14943 ;; Hardware stack levels used:    1
 14944 ;; Hardware stack levels required when called:   15
 14945 ;; This function calls:
 14946 ;;		_delay_us
 14947 ;; This function is called by:
 14948 ;;		_FunctInitMotor
 14949 ;;		_FunctInitLCD
 14950 ;;		_FunctInitHMI
 14951 ;;		_FunctMotor
 14952 ;;		_FunctHMI
 14953 ;;		_FunctInitIMU
 14954 ;; This function uses a non-reentrant model
 14955 ;;
 14956                           
 14957                           	psect	text77
 14958  014A90                     __ptext77:
 14959                           	opt stack 0
 14960  014A90                     _MXK_BlockSwitchTo:
 14961                           	opt stack 14
 14962                           
 14963                           ; BSR set to: 0
 14964                           ;incstack = 0
 14965                           ;MXK_BlockSwitchTo@pModule stored from wreg
 14966  014A90  0100               	movlb	0	; () banked
 14967  014A92  6FB5               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 14968                           
 14969                           ;MXK.c: 56: UINT8 CUR = 0xF & PORTG;
 14970  014A94  5086               	movf	3974,w,c	;volatile
 14971  014A96  0B0F               	andlw	15
 14972  014A98  6FB4               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 14973  014A9A                     l12443:
 14974                           
 14975                           ; BSR set to: 0
 14976  014A9A  0100               	movlb	0	; () banked
 14977  014A9C  51FB               	movf	_Bus_State& (0+255),w,b
 14978  014A9E  E101               	bnz	l12445
 14979  014AA0  D7FC               	goto	l12443
 14980  014AA2                     l12445:
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;MXK.c: 59: Bus_State = eMXK_Busy;
 14984  014AA2  0100               	movlb	0	; () banked
 14985  014AA4  6BFB               	clrf	_Bus_State& (0+255),b
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;MXK.c: 61: if (CUR != pModule)
 14989  014AA6  51B5               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 14990  014AA8  19B4               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 14991  014AAA  B4D8               	btfsc	status,2,c
 14992  014AAC  0C01               	retlw	1
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;MXK.c: 62: {
 14996                           ;MXK.c: 63: PORTG &= ~(0xF);
 14997  014AAE  0EF0               	movlw	240
 14998  014AB0  1686               	andwf	3974,f,c	;volatile
 14999                           
 15000                           ;MXK.c: 64: PORTG |= pModule;
 15001  014AB2  51B5               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15002  014AB4  1286               	iorwf	3974,f,c	;volatile
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;MXK.c: 67: delay_us(10);
 15006  014AB6  6BAF               	clrf	(delay_us@us+1)& (0+255),b
 15007  014AB8  0E0A               	movlw	10
 15008  014ABA  6FAE               	movwf	delay_us@us& (0+255),b
 15009  014ABC  EC6F  F0A4         	call	_delay_us	;wreg free
 15010  014AC0  0C01               	retlw	1
 15011  014AC2                     __end_of_MXK_BlockSwitchTo:
 15012                           	opt stack 0
 15013                           tblptru	equ	0xFF8
 15014                           tblptrh	equ	0xFF7
 15015                           tblptrl	equ	0xFF6
 15016                           tablat	equ	0xFF5
 15017                           prodh	equ	0xFF4
 15018                           prodl	equ	0xFF3
 15019                           intcon	equ	0xFF2
 15020                           indf0	equ	0xFEF
 15021                           postinc0	equ	0xFEE
 15022                           fsr0h	equ	0xFEA
 15023                           fsr0l	equ	0xFE9
 15024                           wreg	equ	0xFE8
 15025                           indf1	equ	0xFE7
 15026                           postdec1	equ	0xFE5
 15027                           fsr1h	equ	0xFE2
 15028                           fsr1l	equ	0xFE1
 15029                           indf2	equ	0xFDF
 15030                           postinc2	equ	0xFDE
 15031                           postdec2	equ	0xFDD
 15032                           plusw2	equ	0xFDB
 15033                           fsr2h	equ	0xFDA
 15034                           fsr2l	equ	0xFD9
 15035                           status	equ	0xFD8
 15036                           
 15037 ;; *************** function _delay_us *****************
 15038 ;; Defined at:
 15039 ;;		line 255 in file "Library/Types.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;  us              2    0[BANK0 ] unsigned short 
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;  u               4    2[BANK0 ] unsigned long 
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  1    wreg      void 
 15046 ;; Registers used:
 15047 ;;		wreg, status,2, status,0
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15054 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15057 ;;Total ram usage:        6 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; Hardware stack levels required when called:   14
 15060 ;; This function calls:
 15061 ;;		Nothing
 15062 ;; This function is called by:
 15063 ;;		_MXK_BlockSwitchTo
 15064 ;;		_MXK_SwitchTo
 15065 ;; This function uses a non-reentrant model
 15066 ;;
 15067                           
 15068                           	psect	text78
 15069  0148DE                     __ptext78:
 15070                           	opt stack 0
 15071  0148DE                     _delay_us:
 15072                           	opt stack 14
 15073                           
 15074                           ;Types.c: 256: unsigned long u;
 15075                           ;Types.c: 257: while (us--) {
 15076                           
 15077                           ;incstack = 0
 15078  0148DE  D012               	goto	l11705
 15079  0148E0                     l11697:
 15080                           
 15081                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15082  0148E0  0100               	movlb	0	; () banked
 15083  0148E2  6BB0               	clrf	delay_us@u& (0+255),b
 15084  0148E4  6BB1               	clrf	(delay_us@u+1)& (0+255),b
 15085  0148E6  6BB2               	clrf	(delay_us@u+2)& (0+255),b
 15086  0148E8  6BB3               	clrf	(delay_us@u+3)& (0+255),b
 15087  0148EA  51B0               	movf	delay_us@u& (0+255),w,b
 15088  0148EC  11B1               	iorwf	(delay_us@u+1)& (0+255),w,b
 15089  0148EE  11B2               	iorwf	(delay_us@u+2)& (0+255),w,b
 15090  0148F0  11B3               	iorwf	(delay_us@u+3)& (0+255),w,b
 15091  0148F2  E108               	bnz	l11705
 15092                           
 15093                           ; BSR set to: 0
 15094                           
 15095                           ; BSR set to: 0
 15096  0148F4  F000               	nop		; ;# 
 15097  0148F6  0100               	movlb	0	; () banked
 15098  0148F8  2BB0               	incf	delay_us@u& (0+255),f,b
 15099  0148FA  0E00               	movlw	0
 15100  0148FC  23B1               	addwfc	(delay_us@u+1)& (0+255),f,b
 15101  0148FE  23B2               	addwfc	(delay_us@u+2)& (0+255),f,b
 15102  014900  23B3               	addwfc	(delay_us@u+3)& (0+255),f,b
 15103  014902  D7F3               	goto	L10
 15104  014904                     l11705:
 15105  014904  0100               	movlb	0	; () banked
 15106  014906  07AE               	decf	delay_us@us& (0+255),f,b
 15107  014908  A0D8               	btfss	status,0,c
 15108  01490A  07AF               	decf	(delay_us@us+1)& (0+255),f,b
 15109  01490C  29AE               	incf	delay_us@us& (0+255),w,b
 15110  01490E  E1E8               	bnz	l11697
 15111  014910  29AF               	incf	(delay_us@us+1)& (0+255),w,b
 15112  014912  E1E6               	bnz	l11697
 15113  014914  0012               	return	
 15114  014916                     __end_of_delay_us:
 15115                           	opt stack 0
 15116                           tblptru	equ	0xFF8
 15117                           tblptrh	equ	0xFF7
 15118                           tblptrl	equ	0xFF6
 15119                           tablat	equ	0xFF5
 15120                           prodh	equ	0xFF4
 15121                           prodl	equ	0xFF3
 15122                           intcon	equ	0xFF2
 15123                           indf0	equ	0xFEF
 15124                           postinc0	equ	0xFEE
 15125                           fsr0h	equ	0xFEA
 15126                           fsr0l	equ	0xFE9
 15127                           wreg	equ	0xFE8
 15128                           indf1	equ	0xFE7
 15129                           postdec1	equ	0xFE5
 15130                           fsr1h	equ	0xFE2
 15131                           fsr1l	equ	0xFE1
 15132                           indf2	equ	0xFDF
 15133                           postinc2	equ	0xFDE
 15134                           postdec2	equ	0xFDD
 15135                           plusw2	equ	0xFDB
 15136                           fsr2h	equ	0xFDA
 15137                           fsr2l	equ	0xFD9
 15138                           status	equ	0xFD8
 15139                           
 15140 ;; *************** function _HMI_Render *****************
 15141 ;; Defined at:
 15142 ;;		line 97 in file "HMI.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;		None
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;  a               2    8[BANK0 ] unsigned short 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      void 
 15149 ;; Registers used:
 15150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;Total ram usage:        2 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:   16
 15163 ;; This function calls:
 15164 ;;		_OutSeg
 15165 ;; This function is called by:
 15166 ;;		_FunctHMI
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           	psect	text79
 15171  014916                     __ptext79:
 15172                           	opt stack 0
 15173  014916                     _HMI_Render:
 15174                           	opt stack 13
 15175                           
 15176                           ;HMI.c: 100: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;incstack = 0
 15180  014916  0E00               	movlw	0
 15181  014918  0100               	movlb	0	; () banked
 15182  01491A  6FB7               	movwf	(HMI_Render@a+1)& (0+255),b
 15183  01491C  6FB6               	movwf	HMI_Render@a& (0+255),b
 15184  01491E                     l12339:
 15185                           
 15186                           ; BSR set to: 0
 15187  01491E  0100               	movlb	0	; () banked
 15188  014920  51B7               	movf	(HMI_Render@a+1)& (0+255),w,b
 15189  014922  E114               	bnz	l2193
 15190  014924  0E08               	movlw	8
 15191  014926  5DB6               	subwf	HMI_Render@a& (0+255),w,b
 15192  014928  E301               	bnc	l12343
 15193                           
 15194                           ; BSR set to: 0
 15195  01492A  0012               	return	
 15196  01492C                     l12343:
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;HMI.c: 101: OutSeg(HMIBoard.Bytes[a], a);
 15200  01492C  C0B6  F0B1         	movff	HMI_Render@a,OutSeg@pSegment
 15201  014930  0E33               	movlw	low _HMIBoard
 15202  014932  0100               	movlb	0	; () banked
 15203  014934  25B6               	addwf	HMI_Render@a& (0+255),w,b
 15204  014936  6ED9               	movwf	fsr2l,c
 15205  014938  0E01               	movlw	high _HMIBoard
 15206  01493A  21B7               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 15207  01493C  6EDA               	movwf	fsr2h,c
 15208  01493E  50DF               	movf	indf2,w,c
 15209  014940  ECCE  F09D         	call	_OutSeg
 15210  014944  0100               	movlb	0	; () banked
 15211  014946  4BB6               	infsnz	HMI_Render@a& (0+255),f,b
 15212  014948  2BB7               	incf	(HMI_Render@a+1)& (0+255),f,b
 15213  01494A  D7E9               	goto	l12339
 15214  01494C                     l2193:
 15215                           
 15216                           ; BSR set to: 0
 15217  01494C  0012               	return		;funcret
 15218  01494E                     __end_of_HMI_Render:
 15219                           	opt stack 0
 15220                           tblptru	equ	0xFF8
 15221                           tblptrh	equ	0xFF7
 15222                           tblptrl	equ	0xFF6
 15223                           tablat	equ	0xFF5
 15224                           prodh	equ	0xFF4
 15225                           prodl	equ	0xFF3
 15226                           intcon	equ	0xFF2
 15227                           indf0	equ	0xFEF
 15228                           postinc0	equ	0xFEE
 15229                           fsr0h	equ	0xFEA
 15230                           fsr0l	equ	0xFE9
 15231                           wreg	equ	0xFE8
 15232                           indf1	equ	0xFE7
 15233                           postdec1	equ	0xFE5
 15234                           fsr1h	equ	0xFE2
 15235                           fsr1l	equ	0xFE1
 15236                           indf2	equ	0xFDF
 15237                           postinc2	equ	0xFDE
 15238                           postdec2	equ	0xFDD
 15239                           plusw2	equ	0xFDB
 15240                           fsr2h	equ	0xFDA
 15241                           fsr2l	equ	0xFD9
 15242                           status	equ	0xFD8
 15243                           
 15244 ;; *************** function _OutSeg *****************
 15245 ;; Defined at:
 15246 ;;		line 23 in file "HMI.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  pInput          1    wreg     unsigned char 
 15249 ;;  pSegment        1    3[BANK0 ] unsigned char 
 15250 ;; Auto vars:     Size  Location     Type
 15251 ;;  pInput          1    6[BANK0 ] unsigned char 
 15252 ;;  out             1    7[BANK0 ] volatile unsigned char 
 15253 ;; Return value:  Size  Location     Type
 15254 ;;                  1    wreg      void 
 15255 ;; Registers used:
 15256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15257 ;; Tracked objects:
 15258 ;;		On entry : 0/0
 15259 ;;		On exit  : 0/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15262 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;Total ram usage:        5 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:   15
 15269 ;; This function calls:
 15270 ;;		_SPI_Send
 15271 ;; This function is called by:
 15272 ;;		_HMI_Render
 15273 ;;		_HMI_GRender
 15274 ;; This function uses a non-reentrant model
 15275 ;;
 15276                           
 15277                           	psect	text80
 15278  013B9C                     __ptext80:
 15279                           	opt stack 0
 15280  013B9C                     _OutSeg:
 15281                           	opt stack 13
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;incstack = 0
 15285                           ;OutSeg@pInput stored from wreg
 15286  013B9C  0100               	movlb	0	; () banked
 15287  013B9E  6FB4               	movwf	OutSeg@pInput& (0+255),b
 15288                           
 15289                           ;HMI.c: 27: static UINT8 cur;
 15290                           ;HMI.c: 28: volatile UINT8 out;
 15291                           ;HMI.c: 29: static UINT8 segset;
 15292                           ;HMI.c: 30: static UINT8 a;
 15293                           ;HMI.c: 52: if (pSegment <= 8)
 15294  013BA0  0E09               	movlw	9
 15295  013BA2  61B1               	cpfslt	OutSeg@pSegment& (0+255),b
 15296  013BA4  0C09               	retlw	9
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;HMI.c: 53: {
 15300                           ;HMI.c: 54: cur = pInput;
 15301  013BA6  C0B4  F091         	movff	OutSeg@pInput,OutSeg@cur
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;HMI.c: 55: for (a = 0; a<8; a++)
 15305  013BAA  6B90               	clrf	OutSeg@a& (0+255),b
 15306  013BAC                     l11829:
 15307                           
 15308                           ; BSR set to: 0
 15309  013BAC  0E07               	movlw	7
 15310  013BAE  0100               	movlb	0	; () banked
 15311  013BB0  6590               	cpfsgt	OutSeg@a& (0+255),b
 15312  013BB2  D001               	goto	l11833
 15313  013BB4  D021               	goto	l11841
 15314  013BB6                     l11833:
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;HMI.c: 56: {
 15318                           ;HMI.c: 57: segset = (cur & 1)<<6;
 15319  013BB6  C091  F0B2         	movff	OutSeg@cur,??_OutSeg
 15320  013BBA  0E01               	movlw	1
 15321  013BBC  0100               	movlb	0	; () banked
 15322  013BBE  17B2               	andwf	??_OutSeg& (0+255),f,b
 15323  013BC0  0E06               	movlw	6
 15324  013BC2  6FB3               	movwf	(??_OutSeg+1)& (0+255),b
 15325  013BC4                     u8455:
 15326  013BC4  0100               	movlb	0	; () banked
 15327  013BC6  90D8               	bcf	status,0,c
 15328  013BC8  37B2               	rlcf	??_OutSeg& (0+255),f,b
 15329  013BCA  2FB3               	decfsz	(??_OutSeg+1)& (0+255),f,b
 15330  013BCC  D7FB               	goto	u8455
 15331  013BCE  51B2               	movf	??_OutSeg& (0+255),w,b
 15332  013BD0  6F92               	movwf	OutSeg@segset& (0+255),b
 15333                           
 15334                           ;HMI.c: 58: out = (pSegment<<3) | a | segset;
 15335  013BD2  39B1               	swapf	OutSeg@pSegment& (0+255),w,b
 15336  013BD4  42E8               	rrncf	wreg,f,c
 15337  013BD6  0BF8               	andlw	248
 15338  013BD8  1190               	iorwf	OutSeg@a& (0+255),w,b
 15339  013BDA  1192               	iorwf	OutSeg@segset& (0+255),w,b
 15340  013BDC  6FB5               	movwf	OutSeg@out& (0+255),b	;volatile
 15341                           
 15342                           ;HMI.c: 59: cur >>= 1;
 15343  013BDE  90D8               	bcf	status,0,c
 15344  013BE0  3391               	rrcf	OutSeg@cur& (0+255),f,b
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;HMI.c: 60: SPI_Send(&SPI1, out);
 15348  013BE2  0E63               	movlw	low _SPI1
 15349  013BE4  6FAE               	movwf	SPI_Send@pInput& (0+255),b
 15350  013BE6  0E01               	movlw	high _SPI1
 15351  013BE8  6FAF               	movwf	(SPI_Send@pInput+1)& (0+255),b
 15352  013BEA  C0B5  F0B0         	movff	OutSeg@out,SPI_Send@pData	;volatile
 15353  013BEE  EC00  F09F         	call	_SPI_Send	;wreg free
 15354  013BF2  0100               	movlb	0	; () banked
 15355  013BF4  2B90               	incf	OutSeg@a& (0+255),f,b
 15356  013BF6  D7DA               	goto	l11829
 15357  013BF8                     l11841:
 15358                           
 15359                           ; BSR set to: 0
 15360                           ;HMI.c: 65: }
 15361                           ;HMI.c: 66: SPI_Send(&SPI1, 0);
 15362  013BF8  0E63               	movlw	low _SPI1
 15363  013BFA  0100               	movlb	0	; () banked
 15364  013BFC  6FAE               	movwf	SPI_Send@pInput& (0+255),b
 15365  013BFE  0E01               	movlw	high _SPI1
 15366  013C00  6FAF               	movwf	(SPI_Send@pInput+1)& (0+255),b
 15367  013C02  6BB0               	clrf	SPI_Send@pData& (0+255),b
 15368  013C04  EF00  F09F         	goto	_SPI_Send	;wreg free
 15369  013C08                     __end_of_OutSeg:
 15370                           	opt stack 0
 15371                           tblptru	equ	0xFF8
 15372                           tblptrh	equ	0xFF7
 15373                           tblptrl	equ	0xFF6
 15374                           tablat	equ	0xFF5
 15375                           prodh	equ	0xFF4
 15376                           prodl	equ	0xFF3
 15377                           intcon	equ	0xFF2
 15378                           indf0	equ	0xFEF
 15379                           postinc0	equ	0xFEE
 15380                           fsr0h	equ	0xFEA
 15381                           fsr0l	equ	0xFE9
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postdec1	equ	0xFE5
 15385                           fsr1h	equ	0xFE2
 15386                           fsr1l	equ	0xFE1
 15387                           indf2	equ	0xFDF
 15388                           postinc2	equ	0xFDE
 15389                           postdec2	equ	0xFDD
 15390                           plusw2	equ	0xFDB
 15391                           fsr2h	equ	0xFDA
 15392                           fsr2l	equ	0xFD9
 15393                           status	equ	0xFD8
 15394                           
 15395 ;; *************** function _SPI_Send *****************
 15396 ;; Defined at:
 15397 ;;		line 213 in file "Library/SPI.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;  pInput          2    0[BANK0 ] const PTR struct SPI
 15400 ;;		 -> SPI1(11), 
 15401 ;;  pData           1    2[BANK0 ] unsigned char 
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;		None
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      unsigned char 
 15406 ;; Registers used:
 15407 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15413 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;Total ram usage:        3 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:   14
 15420 ;; This function calls:
 15421 ;;		Nothing
 15422 ;; This function is called by:
 15423 ;;		_OutSeg
 15424 ;; This function uses a non-reentrant model
 15425 ;;
 15426                           
 15427                           	psect	text81
 15428  013E00                     __ptext81:
 15429                           	opt stack 0
 15430  013E00                     _SPI_Send:
 15431                           	opt stack 13
 15432                           
 15433                           ;SPI.c: 240: switch (pInput->mChannel)
 15434                           
 15435                           ;incstack = 0
 15436  013E00  D024               	goto	l11003
 15437  013E02                     l10985:
 15438                           
 15439                           ;SPI.c: 243: PortC.mOutput->mBit2 = 0;
 15440  013E02  C0A8  FFD9         	movff	_PortC+4,fsr2l
 15441  013E06  C0A9  FFDA         	movff	_PortC+5,fsr2h
 15442  013E0A  94DF               	bcf	indf2,2,c
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;SPI.c: 244: SSP1BUF = pData;
 15446  013E0C  C0B0  FFC9         	movff	SPI_Send@pData,4041	;volatile
 15447  013E10                     l1260:
 15448  013E10  A0C7               	btfss	4039,0,c	;volatile
 15449  013E12  D7FE               	goto	l1260
 15450                           
 15451                           ;SPI.c: 246: pData = SSP1BUF;
 15452  013E14  CFC9 F0B0          	movff	4041,SPI_Send@pData	;volatile
 15453                           
 15454                           ;SPI.c: 247: PortC.mOutput->mBit2 = 1;
 15455  013E18  C0A8  FFD9         	movff	_PortC+4,fsr2l
 15456  013E1C  C0A9  FFDA         	movff	_PortC+5,fsr2h
 15457  013E20  0100               	movlb	0	; () banked
 15458  013E22  84DF               	bsf	indf2,2,c
 15459                           
 15460                           ; BSR set to: 0
 15461                           ;SPI.c: 248: return pData;
 15462                           ;	Return value of _SPI_Send is never used
 15463  013E24  0012               	return	
 15464  013E26                     l10993:
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;SPI.c: 250: PortD.mOutput->mBit7 = 0;
 15468  013E26  C191  FFD9         	movff	_PortD+4,fsr2l
 15469  013E2A  C192  FFDA         	movff	_PortD+5,fsr2h
 15470  013E2E  9EDF               	bcf	indf2,7,c
 15471                           
 15472                           ; BSR set to: 1
 15473                           ;SPI.c: 251: SSP2BUF = pData;
 15474  013E30  C0B0  FF6F         	movff	SPI_Send@pData,3951	;volatile
 15475  013E34                     l1265:
 15476  013E34  A06D               	btfss	3949,0,c	;volatile
 15477  013E36  D7FE               	goto	l1265
 15478                           
 15479                           ;SPI.c: 253: pData = SSP2BUF;
 15480  013E38  CF6F F0B0          	movff	3951,SPI_Send@pData	;volatile
 15481                           
 15482                           ;SPI.c: 254: PortD.mOutput->mBit7 = 1;
 15483  013E3C  C191  FFD9         	movff	_PortD+4,fsr2l
 15484  013E40  C192  FFDA         	movff	_PortD+5,fsr2h
 15485  013E44  0101               	movlb	1	; () banked
 15486  013E46  8EDF               	bsf	indf2,7,c
 15487                           
 15488                           ; BSR set to: 1
 15489                           ;SPI.c: 256: };
 15490                           
 15491                           ; BSR set to: 1
 15492                           ;SPI.c: 255: return pData;
 15493                           ;	Return value of _SPI_Send is never used
 15494  013E48  0012               	return	
 15495  013E4A                     l11003:
 15496  013E4A  0100               	movlb	0	; () banked
 15497  013E4C  EE20 F002          	lfsr	2,2
 15498  013E50  51AE               	movf	SPI_Send@pInput& (0+255),w,b
 15499  013E52  26D9               	addwf	fsr2l,f,c
 15500  013E54  51AF               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 15501  013E56  22DA               	addwfc	fsr2h,f,c
 15502  013E58  50DF               	movf	indf2,w,c
 15503                           
 15504                           ; Switch size 1, requested type "space"
 15505                           ; Number of cases is 2, Range of values is 0 to 1
 15506                           ; switch strategies available:
 15507                           ; Name         Instructions Cycles
 15508                           ; simple_byte            7     4 (average)
 15509                           ;	Chosen strategy is simple_byte
 15510  013E5A  E0D3               	bz	l10985
 15511  013E5C  0A01               	xorlw	1	; case 1
 15512  013E5E  E0E3               	bz	l10993
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;SPI.c: 257: return pData;
 15516                           ;	Return value of _SPI_Send is never used
 15517  013E60  0012               	return		;funcret
 15518  013E62                     __end_of_SPI_Send:
 15519                           	opt stack 0
 15520                           tblptru	equ	0xFF8
 15521                           tblptrh	equ	0xFF7
 15522                           tblptrl	equ	0xFF6
 15523                           tablat	equ	0xFF5
 15524                           prodh	equ	0xFF4
 15525                           prodl	equ	0xFF3
 15526                           intcon	equ	0xFF2
 15527                           indf0	equ	0xFEF
 15528                           postinc0	equ	0xFEE
 15529                           fsr0h	equ	0xFEA
 15530                           fsr0l	equ	0xFE9
 15531                           wreg	equ	0xFE8
 15532                           indf1	equ	0xFE7
 15533                           postdec1	equ	0xFE5
 15534                           fsr1h	equ	0xFE2
 15535                           fsr1l	equ	0xFE1
 15536                           indf2	equ	0xFDF
 15537                           postinc2	equ	0xFDE
 15538                           postdec2	equ	0xFDD
 15539                           plusw2	equ	0xFDB
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function _HMI_Poll *****************
 15545 ;; Defined at:
 15546 ;;		line 211 in file "HMI.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;		None
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;		None
 15551 ;; Return value:  Size  Location     Type
 15552 ;;                  1    wreg      void 
 15553 ;; Registers used:
 15554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;Total ram usage:        0 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:   22
 15567 ;; This function calls:
 15568 ;;		_Button_Poll
 15569 ;; This function is called by:
 15570 ;;		_FunctHMI
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           	psect	text82
 15575  013FE4                     __ptext82:
 15576                           	opt stack 0
 15577  013FE4                     _HMI_Poll:
 15578                           	opt stack 7
 15579                           
 15580                           ;HMI.c: 213: TRISE = 0xFF;
 15581                           
 15582                           ;incstack = 0
 15583  013FE4  6896               	setf	3990,c	;volatile
 15584                           
 15585                           ;HMI.c: 214: Button_Poll(&(HMIBoard.mDIP), 1);
 15586  013FE6  0E5B               	movlw	low (_HMIBoard+40)
 15587  013FE8  0100               	movlb	0	; () banked
 15588  013FEA  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 15589  013FEC  0E01               	movlw	high (_HMIBoard+40)
 15590  013FEE  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15591  013FF0  0E01               	movlw	1
 15592  013FF2  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 15593  013FF4  EC1E  F08F         	call	_Button_Poll	;wreg free
 15594                           
 15595                           ;HMI.c: 215: Button_Poll(&(HMIBoard.mLeft), 1);
 15596  013FF8  0E43               	movlw	low (_HMIBoard+16)
 15597  013FFA  0100               	movlb	0	; () banked
 15598  013FFC  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 15599  013FFE  0E01               	movlw	high (_HMIBoard+16)
 15600  014000  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15601  014002  0E01               	movlw	1
 15602  014004  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 15603  014006  EC1E  F08F         	call	_Button_Poll	;wreg free
 15604                           
 15605                           ;HMI.c: 216: Button_Poll(&(HMIBoard.mRight), 1);
 15606  01400A  0E3B               	movlw	low (_HMIBoard+8)
 15607  01400C  0100               	movlb	0	; () banked
 15608  01400E  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 15609  014010  0E01               	movlw	high (_HMIBoard+8)
 15610  014012  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15611  014014  0E01               	movlw	1
 15612  014016  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 15613  014018  EC1E  F08F         	call	_Button_Poll	;wreg free
 15614                           
 15615                           ;HMI.c: 217: Button_Poll(&(HMIBoard.mUp), 1);
 15616  01401C  0E4B               	movlw	low (_HMIBoard+24)
 15617  01401E  0100               	movlb	0	; () banked
 15618  014020  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 15619  014022  0E01               	movlw	high (_HMIBoard+24)
 15620  014024  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15621  014026  0E01               	movlw	1
 15622  014028  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 15623  01402A  EC1E  F08F         	call	_Button_Poll	;wreg free
 15624                           
 15625                           ;HMI.c: 218: Button_Poll(&(HMIBoard.mDown), 1);
 15626  01402E  0E53               	movlw	low (_HMIBoard+32)
 15627  014030  0100               	movlb	0	; () banked
 15628  014032  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 15629  014034  0E01               	movlw	high (_HMIBoard+32)
 15630  014036  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15631  014038  0E01               	movlw	1
 15632  01403A  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 15633  01403C  EF1E  F08F         	goto	_Button_Poll	;wreg free
 15634  014040                     __end_of_HMI_Poll:
 15635                           	opt stack 0
 15636                           tblptru	equ	0xFF8
 15637                           tblptrh	equ	0xFF7
 15638                           tblptrl	equ	0xFF6
 15639                           tablat	equ	0xFF5
 15640                           prodh	equ	0xFF4
 15641                           prodl	equ	0xFF3
 15642                           intcon	equ	0xFF2
 15643                           indf0	equ	0xFEF
 15644                           postinc0	equ	0xFEE
 15645                           fsr0h	equ	0xFEA
 15646                           fsr0l	equ	0xFE9
 15647                           wreg	equ	0xFE8
 15648                           indf1	equ	0xFE7
 15649                           postdec1	equ	0xFE5
 15650                           fsr1h	equ	0xFE2
 15651                           fsr1l	equ	0xFE1
 15652                           indf2	equ	0xFDF
 15653                           postinc2	equ	0xFDE
 15654                           postdec2	equ	0xFDD
 15655                           plusw2	equ	0xFDB
 15656                           fsr2h	equ	0xFDA
 15657                           fsr2l	equ	0xFD9
 15658                           status	equ	0xFD8
 15659                           
 15660 ;; *************** function _Console_Render *****************
 15661 ;; Defined at:
 15662 ;;		line 362 in file "Library/Console.c"
 15663 ;; Parameters:    Size  Location     Type
 15664 ;;		None
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;  lCursor         4   38[BANK0 ] struct Point
 15667 ;;  y               1   43[BANK0 ] unsigned char 
 15668 ;;  x               1   42[BANK0 ] unsigned char 
 15669 ;;  temp            1   37[BANK0 ] unsigned char 
 15670 ;; Return value:  Size  Location     Type
 15671 ;;                  1    wreg      void 
 15672 ;; Registers used:
 15673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15674 ;; Tracked objects:
 15675 ;;		On entry : 0/0
 15676 ;;		On exit  : 0/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;Total ram usage:        9 bytes
 15684 ;; Hardware stack levels used:    1
 15685 ;; Hardware stack levels required when called:   18
 15686 ;; This function calls:
 15687 ;;		_Console_MakeField
 15688 ;;		_LCD_DrawField
 15689 ;;		_LCD_FillRectangle
 15690 ;; This function is called by:
 15691 ;;		_FunctHMI
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           	psect	text83
 15696  010DA2                     __ptext83:
 15697                           	opt stack 0
 15698  010DA2                     _Console_Render:
 15699                           	opt stack 11
 15700                           
 15701                           ;Console.c: 364: if (change)
 15702                           
 15703                           ;incstack = 0
 15704  010DA2  0100               	movlb	0	; () banked
 15705  010DA4  51FC               	movf	_change& (0+255),w,b
 15706  010DA6  B4D8               	btfsc	status,2,c
 15707  010DA8  0012               	return	
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;Console.c: 365: {
 15711                           ;Console.c: 366: change = 0;
 15712  010DAA  0E00               	movlw	0
 15713  010DAC  6FFC               	movwf	_change& (0+255),b
 15714                           
 15715                           ; BSR set to: 0
 15716                           ;Console.c: 368: UINT8 x, y, temp;
 15717                           ;Console.c: 369: Point lCursor = {6,6};
 15718  010DAE  C1E8  F0D4         	movff	Console_Render@F7891,Console_Render@lCursor
 15719  010DB2  C1E9  F0D5         	movff	Console_Render@F7891+1,Console_Render@lCursor+1
 15720  010DB6  C1EA  F0D6         	movff	Console_Render@F7891+2,Console_Render@lCursor+2
 15721  010DBA  C1EB  F0D7         	movff	Console_Render@F7891+3,Console_Render@lCursor+3
 15722                           
 15723                           ;Console.c: 371: if (clearall)
 15724  010DBE  519D               	movf	_clearall& (0+255),w,b
 15725  010DC0  E004               	bz	l1700
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;Console.c: 372: {
 15729                           ;Console.c: 375: temp = lBufferY;
 15730  010DC2  C0A2  F0D3         	movff	_lBufferY,Console_Render@temp
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;Console.c: 376: lBufferY = (UINT8)((128-6)/8);
 15734  010DC6  0E0F               	movlw	15
 15735  010DC8  6FA2               	movwf	_lBufferY& (0+255),b
 15736  010DCA                     l1700:
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;Console.c: 377: }
 15740                           ;Console.c: 379: for (y = 0; y <= lBufferY; y++)
 15741  010DCA  0100               	movlb	0	; () banked
 15742  010DCC  6BD9               	clrf	Console_Render@y& (0+255),b
 15743  010DCE  D0B8               	goto	l12171
 15744  010DD0                     l12141:
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;Console.c: 380: {
 15748                           ;Console.c: 381: gForecolour = lCBuffer[y];
 15749  010DD0  0100               	movlb	0	; () banked
 15750  010DD2  51D9               	movf	Console_Render@y& (0+255),w,b
 15751  010DD4  0D02               	mullw	2
 15752  010DD6  0E00               	movlw	low _lCBuffer
 15753  010DD8  24F3               	addwf	prodl,w,c
 15754  010DDA  6ED9               	movwf	fsr2l,c
 15755  010DDC  0E02               	movlw	high _lCBuffer
 15756  010DDE  20F4               	addwfc	prodh,w,c
 15757  010DE0  6EDA               	movwf	fsr2h,c
 15758  010DE2  CFDE F1F6          	movff	postinc2,_gForecolour
 15759  010DE6  CFDD F1F7          	movff	postdec2,_gForecolour+1
 15760                           
 15761                           ; BSR set to: 0
 15762                           ;Console.c: 382: for (x = 0; x < (UINT8)((128-6)/6); x++)
 15763  010DEA  6BD8               	clrf	Console_Render@x& (0+255),b
 15764  010DEC                     l12145:
 15765                           
 15766                           ; BSR set to: 0
 15767  010DEC  0E13               	movlw	19
 15768  010DEE  0100               	movlb	0	; () banked
 15769  010DF0  65D8               	cpfsgt	Console_Render@x& (0+255),b
 15770  010DF2  D001               	goto	l12149
 15771  010DF4  D09C               	goto	l12165
 15772  010DF6                     l12149:
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;Console.c: 383: {
 15776                           ;Console.c: 384: if ((lBuffer[y][x] & 0b10000000))
 15777  010DF6  0100               	movlb	0	; () banked
 15778  010DF8  51D9               	movf	Console_Render@y& (0+255),w,b
 15779  010DFA  0D14               	mullw	20
 15780  010DFC  0E11               	movlw	low _lBuffer
 15781  010DFE  6FD1               	movwf	??_Console_Render& (0+255),b
 15782  010E00  0E0C               	movlw	high _lBuffer
 15783  010E02  6FD2               	movwf	(??_Console_Render+1)& (0+255),b
 15784  010E04  50F3               	movf	prodl,w,c
 15785  010E06  27D1               	addwf	??_Console_Render& (0+255),f,b
 15786  010E08  50F4               	movf	prodh,w,c
 15787  010E0A  23D2               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15788  010E0C  51D8               	movf	Console_Render@x& (0+255),w,b
 15789  010E0E  0D01               	mullw	1
 15790  010E10  50F3               	movf	prodl,w,c
 15791  010E12  25D1               	addwf	??_Console_Render& (0+255),w,b
 15792  010E14  6ED9               	movwf	fsr2l,c
 15793  010E16  50F4               	movf	prodh,w,c
 15794  010E18  21D2               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15795  010E1A  6EDA               	movwf	fsr2h,c
 15796  010E1C  AEDF               	btfss	indf2,7,c
 15797  010E1E  D080               	goto	l12159
 15798                           
 15799                           ; BSR set to: 0
 15800                           ;Console.c: 385: {
 15801                           ;Console.c: 386: lBuffer[y][x] &= 0x7F;
 15802  010E20  51D9               	movf	Console_Render@y& (0+255),w,b
 15803  010E22  0D14               	mullw	20
 15804  010E24  0E11               	movlw	low _lBuffer
 15805  010E26  6FD1               	movwf	??_Console_Render& (0+255),b
 15806  010E28  0E0C               	movlw	high _lBuffer
 15807  010E2A  6FD2               	movwf	(??_Console_Render+1)& (0+255),b
 15808  010E2C  50F3               	movf	prodl,w,c
 15809  010E2E  27D1               	addwf	??_Console_Render& (0+255),f,b
 15810  010E30  50F4               	movf	prodh,w,c
 15811  010E32  23D2               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15812  010E34  51D8               	movf	Console_Render@x& (0+255),w,b
 15813  010E36  0D01               	mullw	1
 15814  010E38  50F3               	movf	prodl,w,c
 15815  010E3A  25D1               	addwf	??_Console_Render& (0+255),w,b
 15816  010E3C  6ED9               	movwf	fsr2l,c
 15817  010E3E  50F4               	movf	prodh,w,c
 15818  010E40  21D2               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15819  010E42  6EDA               	movwf	fsr2h,c
 15820  010E44  0E7F               	movlw	127
 15821  010E46  16DF               	andwf	indf2,f,c
 15822                           
 15823                           ;Console.c: 387: if (lBuffer[y][x])
 15824  010E48  51D9               	movf	Console_Render@y& (0+255),w,b
 15825  010E4A  0D14               	mullw	20
 15826  010E4C  0E11               	movlw	low _lBuffer
 15827  010E4E  6FD1               	movwf	??_Console_Render& (0+255),b
 15828  010E50  0E0C               	movlw	high _lBuffer
 15829  010E52  6FD2               	movwf	(??_Console_Render+1)& (0+255),b
 15830  010E54  50F3               	movf	prodl,w,c
 15831  010E56  27D1               	addwf	??_Console_Render& (0+255),f,b
 15832  010E58  50F4               	movf	prodh,w,c
 15833  010E5A  23D2               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15834  010E5C  51D8               	movf	Console_Render@x& (0+255),w,b
 15835  010E5E  0D01               	mullw	1
 15836  010E60  50F3               	movf	prodl,w,c
 15837  010E62  25D1               	addwf	??_Console_Render& (0+255),w,b
 15838  010E64  6ED9               	movwf	fsr2l,c
 15839  010E66  50F4               	movf	prodh,w,c
 15840  010E68  21D2               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15841  010E6A  6EDA               	movwf	fsr2h,c
 15842  010E6C  50DF               	movf	indf2,w,c
 15843  010E6E  E043               	bz	l12157
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;Console.c: 388: {
 15847                           ;Console.c: 389: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 15848  010E70  C089  F0BC         	movff	_gBackcolour,LCD_FillRectangle@pColour
 15849  010E74  C08A  F0BD         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 15850  010E78  C0D4  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 15851  010E7C  C0D5  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 15852  010E80  C0D6  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 15853  010E84  C0D7  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 15854  010E88  C1EC  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 15855  010E8C  C1ED  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 15856  010E90  C1EE  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 15857  010E94  C1EF  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 15858  010E98  ECF3  F0A0         	call	_LCD_FillRectangle	;wreg free
 15859                           
 15860                           ;Console.c: 390: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 15861  010E9C  0100               	movlb	0	; () banked
 15862  010E9E  51D9               	movf	Console_Render@y& (0+255),w,b
 15863  010EA0  0D14               	mullw	20
 15864  010EA2  0E11               	movlw	low _lBuffer
 15865  010EA4  6FD1               	movwf	??_Console_Render& (0+255),b
 15866  010EA6  0E0C               	movlw	high _lBuffer
 15867  010EA8  6FD2               	movwf	(??_Console_Render+1)& (0+255),b
 15868  010EAA  50F3               	movf	prodl,w,c
 15869  010EAC  27D1               	addwf	??_Console_Render& (0+255),f,b
 15870  010EAE  50F4               	movf	prodh,w,c
 15871  010EB0  23D2               	addwfc	(??_Console_Render+1)& (0+255),f,b
 15872  010EB2  51D8               	movf	Console_Render@x& (0+255),w,b
 15873  010EB4  0D01               	mullw	1
 15874  010EB6  50F3               	movf	prodl,w,c
 15875  010EB8  25D1               	addwf	??_Console_Render& (0+255),w,b
 15876  010EBA  6ED9               	movwf	fsr2l,c
 15877  010EBC  50F4               	movf	prodh,w,c
 15878  010EBE  21D2               	addwfc	(??_Console_Render+1)& (0+255),w,b
 15879  010EC0  6EDA               	movwf	fsr2h,c
 15880  010EC2  50DF               	movf	indf2,w,c
 15881  010EC4  EC60  F097         	call	_Console_MakeField
 15882  010EC8  C0B3  F0C0         	movff	?_Console_MakeField,LCD_DrawField@pField
 15883  010ECC  C0B4  F0C1         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 15884  010ED0  C0D4  F0C2         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 15885  010ED4  C0D5  F0C3         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 15886  010ED8  C0D6  F0C4         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 15887  010EDC  C0D7  F0C5         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 15888  010EE0  C1EC  F0C6         	movff	_gCharSize,LCD_DrawField@pSize
 15889  010EE4  C1ED  F0C7         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 15890  010EE8  C1EE  F0C8         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 15891  010EEC  C1EF  F0C9         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 15892  010EF0  ECA2  F09C         	call	_LCD_DrawField	;wreg free
 15893                           
 15894                           ;Console.c: 391: }
 15895  010EF4  D015               	goto	l12159
 15896  010EF6                     l12157:
 15897                           
 15898                           ;Console.c: 392: else
 15899                           ;Console.c: 393: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 15900  010EF6  0100               	movlb	0	; () banked
 15901  010EF8  6BBD               	clrf	(LCD_FillRectangle@pColour+1)& (0+255),b
 15902  010EFA  6BBC               	clrf	LCD_FillRectangle@pColour& (0+255),b
 15903  010EFC  C0D4  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 15904  010F00  C0D5  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 15905  010F04  C0D6  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 15906  010F08  C0D7  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 15907  010F0C  C1EC  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 15908  010F10  C1ED  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 15909  010F14  C1EE  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 15910  010F18  C1EF  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 15911  010F1C  ECF3  F0A0         	call	_LCD_FillRectangle	;wreg free
 15912  010F20                     l12159:
 15913                           
 15914                           ;Console.c: 394: }
 15915                           ;Console.c: 395: lCursor.x += (5 + 1);
 15916  010F20  0E06               	movlw	6
 15917  010F22  0100               	movlb	0	; () banked
 15918  010F24  27D4               	addwf	Console_Render@lCursor& (0+255),f,b
 15919  010F26  0E00               	movlw	0
 15920  010F28  23D5               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 15921                           
 15922                           ; BSR set to: 0
 15923  010F2A  2BD8               	incf	Console_Render@x& (0+255),f,b
 15924  010F2C  D75F               	goto	l12145
 15925  010F2E                     l12165:
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;Console.c: 396: }
 15929                           ;Console.c: 397: lCursor.y += (7 + 1);
 15930  010F2E  0E08               	movlw	8
 15931  010F30  0100               	movlb	0	; () banked
 15932  010F32  27D6               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 15933  010F34  0E00               	movlw	0
 15934  010F36  23D7               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;Console.c: 398: lCursor.x = 6;
 15938  010F38  6BD5               	clrf	(Console_Render@lCursor+1)& (0+255),b
 15939  010F3A  0E06               	movlw	6
 15940  010F3C  6FD4               	movwf	Console_Render@lCursor& (0+255),b
 15941                           
 15942                           ; BSR set to: 0
 15943  010F3E  2BD9               	incf	Console_Render@y& (0+255),f,b
 15944  010F40                     l12171:
 15945                           
 15946                           ; BSR set to: 0
 15947  010F40  0100               	movlb	0	; () banked
 15948  010F42  51D9               	movf	Console_Render@y& (0+255),w,b
 15949  010F44  5DA2               	subwf	_lBufferY& (0+255),w,b
 15950  010F46  E301               	bnc	l12173
 15951  010F48  D743               	goto	l12141
 15952  010F4A                     l12173:
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;Console.c: 399: }
 15956                           ;Console.c: 401: if (clearall)
 15957  010F4A  0100               	movlb	0	; () banked
 15958  010F4C  519D               	movf	_clearall& (0+255),w,b
 15959  010F4E  B4D8               	btfsc	status,2,c
 15960  010F50  0012               	return	
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;Console.c: 402: {
 15964                           ;Console.c: 403: clearall = 0;
 15965  010F52  6B9D               	clrf	_clearall& (0+255),b
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;Console.c: 404: lBufferY = temp;
 15969  010F54  C0D3  F0A2         	movff	Console_Render@temp,_lBufferY
 15970                           
 15971                           ; BSR set to: 0
 15972  010F58  0C00               	retlw	0
 15973  010F5A                     __end_of_Console_Render:
 15974                           	opt stack 0
 15975                           tblptru	equ	0xFF8
 15976                           tblptrh	equ	0xFF7
 15977                           tblptrl	equ	0xFF6
 15978                           tablat	equ	0xFF5
 15979                           prodh	equ	0xFF4
 15980                           prodl	equ	0xFF3
 15981                           intcon	equ	0xFF2
 15982                           indf0	equ	0xFEF
 15983                           postinc0	equ	0xFEE
 15984                           fsr0h	equ	0xFEA
 15985                           fsr0l	equ	0xFE9
 15986                           wreg	equ	0xFE8
 15987                           indf1	equ	0xFE7
 15988                           postdec1	equ	0xFE5
 15989                           fsr1h	equ	0xFE2
 15990                           fsr1l	equ	0xFE1
 15991                           indf2	equ	0xFDF
 15992                           postinc2	equ	0xFDE
 15993                           postdec2	equ	0xFDD
 15994                           plusw2	equ	0xFDB
 15995                           fsr2h	equ	0xFDA
 15996                           fsr2l	equ	0xFD9
 15997                           status	equ	0xFD8
 15998                           
 15999 ;; *************** function _LCD_FillRectangle *****************
 16000 ;; Defined at:
 16001 ;;		line 280 in file "Library/LCD.c"
 16002 ;; Parameters:    Size  Location     Type
 16003 ;;  pColour         2   14[BANK0 ] unsigned short 
 16004 ;;  pPoint          4   16[BANK0 ] struct Point
 16005 ;;  pSize           4   20[BANK0 ] struct Point
 16006 ;; Auto vars:     Size  Location     Type
 16007 ;;  j               1   27[BANK0 ] unsigned char 
 16008 ;;  i               1   26[BANK0 ] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;                  1    wreg      void 
 16011 ;; Registers used:
 16012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16013 ;; Tracked objects:
 16014 ;;		On entry : 0/0
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16018 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16021 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16022 ;;Total ram usage:       14 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:   17
 16025 ;; This function calls:
 16026 ;;		_LCD_Word_Write
 16027 ;;		_Set_Addr_Window
 16028 ;; This function is called by:
 16029 ;;		_Console_Render
 16030 ;;		_Console_ClearLine
 16031 ;;		_TetrisFieldDraw
 16032 ;; This function uses a non-reentrant model
 16033 ;;
 16034                           
 16035                           	psect	text84
 16036  0141E6                     __ptext84:
 16037                           	opt stack 0
 16038  0141E6                     _LCD_FillRectangle:
 16039                           	opt stack 11
 16040                           
 16041                           ;LCD.c: 282: UINT8 i = 0x00;
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;incstack = 0
 16045  0141E6  0100               	movlb	0	; () banked
 16046  0141E8  6BC8               	clrf	LCD_FillRectangle@i& (0+255),b
 16047                           
 16048                           ;LCD.c: 283: UINT8 j = 0x00;
 16049  0141EA  6BC9               	clrf	LCD_FillRectangle@j& (0+255),b
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;LCD.c: 292: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 16053  0141EC  C0C0  F0B8         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 16054  0141F0  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 16055  0141F2  25C2               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 16056  0141F4  6FC6               	movwf	??_LCD_FillRectangle& (0+255),b
 16057  0141F6  05C6               	decf	??_LCD_FillRectangle& (0+255),w,b
 16058  0141F8  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 16059  0141FA  51C0               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 16060  0141FC  25C4               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 16061  0141FE  6FC7               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 16062  014200  05C7               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 16063  014202  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 16064  014204  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 16065  014206  EC0C  F09A         	call	_Set_Addr_Window
 16066                           
 16067                           ;LCD.c: 293: for(j = pSize.y; j > 0; j--)
 16068  01420A  C0C4  F0C9         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 16069  01420E                     l11471:
 16070  01420E  0100               	movlb	0	; () banked
 16071  014210  51C9               	movf	LCD_FillRectangle@j& (0+255),w,b
 16072  014212  E101               	bnz	l726
 16073                           
 16074                           ; BSR set to: 0
 16075  014214  0012               	return	
 16076  014216                     l726:
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;LCD.c: 294: for(i = pSize.x; i > 0; i--)
 16080  014216  C0C2  F0C8         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 16081  01421A                     l11475:
 16082                           
 16083                           ; BSR set to: 0
 16084  01421A  0100               	movlb	0	; () banked
 16085  01421C  51C8               	movf	LCD_FillRectangle@i& (0+255),w,b
 16086  01421E  E009               	bz	l11485
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;LCD.c: 295: LCD_Word_Write(pColour);
 16090                           
 16091                           ; BSR set to: 0
 16092                           
 16093                           ; BSR set to: 0
 16094  014220  C0BC  F0B8         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 16095  014224  C0BD  F0B9         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 16096  014228  ECE7  F0A7         	call	_LCD_Word_Write	;wreg free
 16097  01422C  0100               	movlb	0	; () banked
 16098  01422E  07C8               	decf	LCD_FillRectangle@i& (0+255),f,b
 16099  014230  D7F4               	goto	l11475
 16100  014232                     l11485:
 16101                           
 16102                           ; BSR set to: 0
 16103  014232  0100               	movlb	0	; () banked
 16104  014234  07C9               	decf	LCD_FillRectangle@j& (0+255),f,b
 16105  014236  D7EB               	goto	l11471
 16106  014238                     __end_of_LCD_FillRectangle:
 16107                           	opt stack 0
 16108                           tblptru	equ	0xFF8
 16109                           tblptrh	equ	0xFF7
 16110                           tblptrl	equ	0xFF6
 16111                           tablat	equ	0xFF5
 16112                           prodh	equ	0xFF4
 16113                           prodl	equ	0xFF3
 16114                           intcon	equ	0xFF2
 16115                           indf0	equ	0xFEF
 16116                           postinc0	equ	0xFEE
 16117                           fsr0h	equ	0xFEA
 16118                           fsr0l	equ	0xFE9
 16119                           wreg	equ	0xFE8
 16120                           indf1	equ	0xFE7
 16121                           postdec1	equ	0xFE5
 16122                           fsr1h	equ	0xFE2
 16123                           fsr1l	equ	0xFE1
 16124                           indf2	equ	0xFDF
 16125                           postinc2	equ	0xFDE
 16126                           postdec2	equ	0xFDD
 16127                           plusw2	equ	0xFDB
 16128                           fsr2h	equ	0xFDA
 16129                           fsr2l	equ	0xFD9
 16130                           status	equ	0xFD8
 16131                           
 16132 ;; *************** function _LCD_DrawField *****************
 16133 ;; Defined at:
 16134 ;;		line 355 in file "Library/LCD.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 16137 ;;		 -> Console_MakeField@Fill(70), 
 16138 ;;  pPoint          4   20[BANK0 ] struct Point
 16139 ;;  pSize           4   24[BANK0 ] struct Point
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  count           2   30[BANK0 ] unsigned short 
 16142 ;;  i               1   34[BANK0 ] unsigned char 
 16143 ;;  ymax            1   33[BANK0 ] unsigned char 
 16144 ;;  xmax            1   32[BANK0 ] unsigned char 
 16145 ;; Return value:  Size  Location     Type
 16146 ;;                  1    wreg      void 
 16147 ;; Registers used:
 16148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16149 ;; Tracked objects:
 16150 ;;		On entry : 0/0
 16151 ;;		On exit  : 0/0
 16152 ;;		Unchanged: 0/0
 16153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16154 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16155 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16157 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16158 ;;Total ram usage:       17 bytes
 16159 ;; Hardware stack levels used:    1
 16160 ;; Hardware stack levels required when called:   17
 16161 ;; This function calls:
 16162 ;;		_LCD_Word_Write
 16163 ;;		_Set_Addr_Window
 16164 ;;		___wmul
 16165 ;; This function is called by:
 16166 ;;		_Console_Render
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           	psect	text85
 16171  013944                     __ptext85:
 16172                           	opt stack 0
 16173  013944                     _LCD_DrawField:
 16174                           	opt stack 11
 16175                           
 16176                           ;LCD.c: 358: UINT8 i = 0x00;
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;incstack = 0
 16180  013944  0100               	movlb	0	; () banked
 16181  013946  6BD0               	clrf	LCD_DrawField@i& (0+255),b
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;LCD.c: 359: UINT8 xmax = pPoint.x + pSize.x;
 16185  013948  51C2               	movf	LCD_DrawField@pPoint& (0+255),w,b
 16186  01394A  25C6               	addwf	LCD_DrawField@pSize& (0+255),w,b
 16187  01394C  6FCE               	movwf	LCD_DrawField@xmax& (0+255),b
 16188                           
 16189                           ; BSR set to: 0
 16190                           ;LCD.c: 360: UINT8 ymax = pPoint.y + pSize.y;
 16191  01394E  51C4               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 16192  013950  25C8               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 16193  013952  6FCF               	movwf	LCD_DrawField@ymax& (0+255),b
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;LCD.c: 361: UINT16 count = pSize.x * pSize.y;
 16197  013954  C0C8  F0AE         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 16198  013958  C0C9  F0AF         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 16199  01395C  C0C6  F0B0         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 16200  013960  C0C7  F0B1         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 16201  013964  ECF2  F0A6         	call	___wmul	;wreg free
 16202  013968  C0AE  F0CC         	movff	?___wmul,LCD_DrawField@count
 16203  01396C  C0AF  F0CD         	movff	?___wmul+1,LCD_DrawField@count+1
 16204                           
 16205                           ;LCD.c: 363: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 16206  013970  C0C4  F0B8         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 16207  013974  0100               	movlb	0	; () banked
 16208  013976  05CE               	decf	LCD_DrawField@xmax& (0+255),w,b
 16209  013978  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 16210  01397A  05CF               	decf	LCD_DrawField@ymax& (0+255),w,b
 16211  01397C  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 16212  01397E  51C2               	movf	LCD_DrawField@pPoint& (0+255),w,b
 16213  013980  EC0C  F09A         	call	_Set_Addr_Window
 16214                           
 16215                           ;LCD.c: 365: for(i = 0; i < count; i++)
 16216  013984  0100               	movlb	0	; () banked
 16217  013986  6BD0               	clrf	LCD_DrawField@i& (0+255),b
 16218  013988  D011               	goto	l11505
 16219  01398A                     l11501:
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;LCD.c: 366: LCD_Word_Write(pField[i]);
 16223  01398A  0100               	movlb	0	; () banked
 16224  01398C  51D0               	movf	LCD_DrawField@i& (0+255),w,b
 16225  01398E  0D02               	mullw	2
 16226  013990  50F3               	movf	prodl,w,c
 16227  013992  25C0               	addwf	LCD_DrawField@pField& (0+255),w,b
 16228  013994  6ED9               	movwf	fsr2l,c
 16229  013996  50F4               	movf	prodh,w,c
 16230  013998  21C1               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 16231  01399A  6EDA               	movwf	fsr2h,c
 16232  01399C  CFDE F0B8          	movff	postinc2,LCD_Word_Write@value
 16233  0139A0  CFDD F0B9          	movff	postdec2,LCD_Word_Write@value+1
 16234  0139A4  ECE7  F0A7         	call	_LCD_Word_Write	;wreg free
 16235  0139A8  0100               	movlb	0	; () banked
 16236  0139AA  2BD0               	incf	LCD_DrawField@i& (0+255),f,b
 16237  0139AC                     l11505:
 16238                           
 16239                           ; BSR set to: 0
 16240  0139AC  0100               	movlb	0	; () banked
 16241  0139AE  51D0               	movf	LCD_DrawField@i& (0+255),w,b
 16242  0139B0  6FCA               	movwf	??_LCD_DrawField& (0+255),b
 16243  0139B2  6BCB               	clrf	(??_LCD_DrawField+1)& (0+255),b
 16244  0139B4  51CC               	movf	LCD_DrawField@count& (0+255),w,b
 16245  0139B6  5DCA               	subwf	??_LCD_DrawField& (0+255),w,b
 16246  0139B8  51CD               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 16247  0139BA  59CB               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 16248  0139BC  E3E6               	bnc	l11501
 16249  0139BE  0012               	return	
 16250  0139C0                     __end_of_LCD_DrawField:
 16251                           	opt stack 0
 16252                           tblptru	equ	0xFF8
 16253                           tblptrh	equ	0xFF7
 16254                           tblptrl	equ	0xFF6
 16255                           tablat	equ	0xFF5
 16256                           prodh	equ	0xFF4
 16257                           prodl	equ	0xFF3
 16258                           intcon	equ	0xFF2
 16259                           indf0	equ	0xFEF
 16260                           postinc0	equ	0xFEE
 16261                           fsr0h	equ	0xFEA
 16262                           fsr0l	equ	0xFE9
 16263                           wreg	equ	0xFE8
 16264                           indf1	equ	0xFE7
 16265                           postdec1	equ	0xFE5
 16266                           fsr1h	equ	0xFE2
 16267                           fsr1l	equ	0xFE1
 16268                           indf2	equ	0xFDF
 16269                           postinc2	equ	0xFDE
 16270                           postdec2	equ	0xFDD
 16271                           plusw2	equ	0xFDB
 16272                           fsr2h	equ	0xFDA
 16273                           fsr2l	equ	0xFD9
 16274                           status	equ	0xFD8
 16275                           
 16276 ;; *************** function ___wmul *****************
 16277 ;; Defined at:
 16278 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 16279 ;; Parameters:    Size  Location     Type
 16280 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16281 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16282 ;; Auto vars:     Size  Location     Type
 16283 ;;  product         2    4[BANK0 ] unsigned int 
 16284 ;; Return value:  Size  Location     Type
 16285 ;;                  2    0[BANK0 ] unsigned int 
 16286 ;; Registers used:
 16287 ;;		wreg, status,2, status,0, prodl, prodh
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 0/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16293 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16297 ;;Total ram usage:        6 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; Hardware stack levels required when called:   14
 16300 ;; This function calls:
 16301 ;;		Nothing
 16302 ;; This function is called by:
 16303 ;;		_LCD_DrawField
 16304 ;;		_FunctMotor
 16305 ;;		_TetrisBlockFrame
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           	psect	text86
 16310  014DE4                     __ptext86:
 16311                           	opt stack 0
 16312  014DE4                     ___wmul:
 16313                           	opt stack 15
 16314                           
 16315                           ; BSR set to: 0
 16316                           ;incstack = 0
 16317  014DE4  0100               	movlb	0	; () banked
 16318  014DE6  51AE               	movf	___wmul@multiplier& (0+255),w,b
 16319  014DE8  03B0               	mulwf	___wmul@multiplicand& (0+255),b
 16320  014DEA  CFF3 F0B2          	movff	prodl,___wmul@product
 16321  014DEE  CFF4 F0B3          	movff	prodh,___wmul@product+1
 16322  014DF2  51AE               	movf	___wmul@multiplier& (0+255),w,b
 16323  014DF4  03B1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16324  014DF6  50F3               	movf	prodl,w,c
 16325  014DF8  27B3               	addwf	(___wmul@product+1)& (0+255),f,b
 16326  014DFA  51AF               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16327  014DFC  03B0               	mulwf	___wmul@multiplicand& (0+255),b
 16328  014DFE  50F3               	movf	prodl,w,c
 16329  014E00  27B3               	addwf	(___wmul@product+1)& (0+255),f,b
 16330                           
 16331                           ; BSR set to: 0
 16332  014E02  C0B2  F0AE         	movff	___wmul@product,?___wmul
 16333  014E06  C0B3  F0AF         	movff	___wmul@product+1,?___wmul+1
 16334  014E0A  0012               	return	
 16335  014E0C                     __end_of___wmul:
 16336                           	opt stack 0
 16337                           tblptru	equ	0xFF8
 16338                           tblptrh	equ	0xFF7
 16339                           tblptrl	equ	0xFF6
 16340                           tablat	equ	0xFF5
 16341                           prodh	equ	0xFF4
 16342                           prodl	equ	0xFF3
 16343                           intcon	equ	0xFF2
 16344                           indf0	equ	0xFEF
 16345                           postinc0	equ	0xFEE
 16346                           fsr0h	equ	0xFEA
 16347                           fsr0l	equ	0xFE9
 16348                           wreg	equ	0xFE8
 16349                           indf1	equ	0xFE7
 16350                           postdec1	equ	0xFE5
 16351                           fsr1h	equ	0xFE2
 16352                           fsr1l	equ	0xFE1
 16353                           indf2	equ	0xFDF
 16354                           postinc2	equ	0xFDE
 16355                           postdec2	equ	0xFDD
 16356                           plusw2	equ	0xFDB
 16357                           fsr2h	equ	0xFDA
 16358                           fsr2l	equ	0xFD9
 16359                           status	equ	0xFD8
 16360                           
 16361 ;; *************** function _Set_Addr_Window *****************
 16362 ;; Defined at:
 16363 ;;		line 176 in file "Library/LCD.c"
 16364 ;; Parameters:    Size  Location     Type
 16365 ;;  xs              1    wreg     unsigned char 
 16366 ;;  ys              1   10[BANK0 ] unsigned char 
 16367 ;;  xe              1   11[BANK0 ] unsigned char 
 16368 ;;  ye              1   12[BANK0 ] unsigned char 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  xs              1   13[BANK0 ] unsigned char 
 16371 ;; Return value:  Size  Location     Type
 16372 ;;                  1    wreg      void 
 16373 ;; Registers used:
 16374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16375 ;; Tracked objects:
 16376 ;;		On entry : 0/0
 16377 ;;		On exit  : 0/0
 16378 ;;		Unchanged: 0/0
 16379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16380 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16384 ;;Total ram usage:        4 bytes
 16385 ;; Hardware stack levels used:    1
 16386 ;; Hardware stack levels required when called:   16
 16387 ;; This function calls:
 16388 ;;		_LCD_Write
 16389 ;; This function is called by:
 16390 ;;		_LCD_Fill
 16391 ;;		_LCD_FillRectangle
 16392 ;;		_LCD_DrawField
 16393 ;;		_RAM_Address_Set
 16394 ;;		_LCD_DrawPixel
 16395 ;;		_BlockDraw
 16396 ;;		_BlockClear
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           	psect	text87
 16401  013418                     __ptext87:
 16402                           	opt stack 0
 16403  013418                     _Set_Addr_Window:
 16404                           	opt stack 11
 16405                           
 16406                           ; BSR set to: 0
 16407                           ;incstack = 0
 16408                           ;Set_Addr_Window@xs stored from wreg
 16409  013418  0100               	movlb	0	; () banked
 16410  01341A  6FBB               	movwf	Set_Addr_Window@xs& (0+255),b
 16411                           
 16412                           ;LCD.c: 178: ys+=2;
 16413  01341C  0E02               	movlw	2
 16414  01341E  27B8               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16415                           
 16416                           ;LCD.c: 179: ye+=2;
 16417  013420  27BA               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16418                           
 16419                           ;LCD.c: 180: xs+=3;
 16420  013422  0E03               	movlw	3
 16421  013424  27BB               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16422                           
 16423                           ;LCD.c: 181: xe+=3;
 16424  013426  27B9               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;LCD.c: 183: LCD_Write(0x2A, 0x0);
 16428  013428  6BB2               	clrf	LCD_Write@mode& (0+255),b
 16429  01342A  0E2A               	movlw	42
 16430  01342C  ECA7  F0A4         	call	_LCD_Write
 16431                           
 16432                           ;LCD.c: 184: LCD_Write(0x00, 0x1);
 16433  013430  0E01               	movlw	1
 16434  013432  0100               	movlb	0	; () banked
 16435  013434  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16436  013436  0E00               	movlw	0
 16437  013438  ECA7  F0A4         	call	_LCD_Write
 16438                           
 16439                           ;LCD.c: 185: LCD_Write(xs, 0x1);
 16440  01343C  0E01               	movlw	1
 16441  01343E  0100               	movlb	0	; () banked
 16442  013440  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16443  013442  51BB               	movf	Set_Addr_Window@xs& (0+255),w,b
 16444  013444  ECA7  F0A4         	call	_LCD_Write
 16445                           
 16446                           ;LCD.c: 186: LCD_Write(0x00, 0x1);
 16447  013448  0E01               	movlw	1
 16448  01344A  0100               	movlb	0	; () banked
 16449  01344C  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16450  01344E  0E00               	movlw	0
 16451  013450  ECA7  F0A4         	call	_LCD_Write
 16452                           
 16453                           ;LCD.c: 187: LCD_Write(xe, 0x1);
 16454  013454  0E01               	movlw	1
 16455  013456  0100               	movlb	0	; () banked
 16456  013458  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16457  01345A  51B9               	movf	Set_Addr_Window@xe& (0+255),w,b
 16458  01345C  ECA7  F0A4         	call	_LCD_Write
 16459                           
 16460                           ;LCD.c: 188: LCD_Write(0x2B, 0x0);
 16461  013460  0100               	movlb	0	; () banked
 16462  013462  6BB2               	clrf	LCD_Write@mode& (0+255),b
 16463  013464  0E2B               	movlw	43
 16464  013466  ECA7  F0A4         	call	_LCD_Write
 16465                           
 16466                           ;LCD.c: 189: LCD_Write(0x00, 0x1);
 16467  01346A  0E01               	movlw	1
 16468  01346C  0100               	movlb	0	; () banked
 16469  01346E  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16470  013470  0E00               	movlw	0
 16471  013472  ECA7  F0A4         	call	_LCD_Write
 16472                           
 16473                           ;LCD.c: 190: LCD_Write(ys, 0x1);
 16474  013476  0E01               	movlw	1
 16475  013478  0100               	movlb	0	; () banked
 16476  01347A  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16477  01347C  51B8               	movf	Set_Addr_Window@ys& (0+255),w,b
 16478  01347E  ECA7  F0A4         	call	_LCD_Write
 16479                           
 16480                           ;LCD.c: 191: LCD_Write(0x00, 0x1);
 16481  013482  0E01               	movlw	1
 16482  013484  0100               	movlb	0	; () banked
 16483  013486  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16484  013488  0E00               	movlw	0
 16485  01348A  ECA7  F0A4         	call	_LCD_Write
 16486                           
 16487                           ;LCD.c: 192: LCD_Write(ye, 0x1);
 16488  01348E  0E01               	movlw	1
 16489  013490  0100               	movlb	0	; () banked
 16490  013492  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16491  013494  51BA               	movf	Set_Addr_Window@ye& (0+255),w,b
 16492  013496  ECA7  F0A4         	call	_LCD_Write
 16493                           
 16494                           ;LCD.c: 193: LCD_Write(0x2C, 0x0);
 16495  01349A  0100               	movlb	0	; () banked
 16496  01349C  6BB2               	clrf	LCD_Write@mode& (0+255),b
 16497  01349E  0E2C               	movlw	44
 16498  0134A0  EFA7  F0A4         	goto	_LCD_Write
 16499  0134A4                     __end_of_Set_Addr_Window:
 16500                           	opt stack 0
 16501                           tblptru	equ	0xFF8
 16502                           tblptrh	equ	0xFF7
 16503                           tblptrl	equ	0xFF6
 16504                           tablat	equ	0xFF5
 16505                           prodh	equ	0xFF4
 16506                           prodl	equ	0xFF3
 16507                           intcon	equ	0xFF2
 16508                           indf0	equ	0xFEF
 16509                           postinc0	equ	0xFEE
 16510                           fsr0h	equ	0xFEA
 16511                           fsr0l	equ	0xFE9
 16512                           wreg	equ	0xFE8
 16513                           indf1	equ	0xFE7
 16514                           postdec1	equ	0xFE5
 16515                           fsr1h	equ	0xFE2
 16516                           fsr1l	equ	0xFE1
 16517                           indf2	equ	0xFDF
 16518                           postinc2	equ	0xFDE
 16519                           postdec2	equ	0xFDD
 16520                           plusw2	equ	0xFDB
 16521                           fsr2h	equ	0xFDA
 16522                           fsr2l	equ	0xFD9
 16523                           status	equ	0xFD8
 16524                           
 16525 ;; *************** function _LCD_Word_Write *****************
 16526 ;; Defined at:
 16527 ;;		line 160 in file "Library/LCD.c"
 16528 ;; Parameters:    Size  Location     Type
 16529 ;;  value           2   10[BANK0 ] unsigned short 
 16530 ;; Auto vars:     Size  Location     Type
 16531 ;;		None
 16532 ;; Return value:  Size  Location     Type
 16533 ;;                  1    wreg      void 
 16534 ;; Registers used:
 16535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16536 ;; Tracked objects:
 16537 ;;		On entry : 0/0
 16538 ;;		On exit  : 0/0
 16539 ;;		Unchanged: 0/0
 16540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16541 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16545 ;;Total ram usage:        2 bytes
 16546 ;; Hardware stack levels used:    1
 16547 ;; Hardware stack levels required when called:   16
 16548 ;; This function calls:
 16549 ;;		_LCD_Write
 16550 ;; This function is called by:
 16551 ;;		_LCD_Fill
 16552 ;;		_LCD_FillRectangle
 16553 ;;		_LCD_DrawField
 16554 ;;		_LCD_DrawPixel
 16555 ;;		_BlockDraw
 16556 ;;		_BlockClear
 16557 ;; This function uses a non-reentrant model
 16558 ;;
 16559                           
 16560                           	psect	text88
 16561  014FCE                     __ptext88:
 16562                           	opt stack 0
 16563  014FCE                     _LCD_Word_Write:
 16564                           	opt stack 11
 16565                           
 16566                           ;LCD.c: 162: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16567                           
 16568                           ;incstack = 0
 16569  014FCE  0E01               	movlw	1
 16570  014FD0  0100               	movlb	0	; () banked
 16571  014FD2  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16572  014FD4  51B9               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16573  014FD6  ECA7  F0A4         	call	_LCD_Write
 16574                           
 16575                           ;LCD.c: 163: LCD_Write((value & 0x00FF), 0x1);
 16576  014FDA  0E01               	movlw	1
 16577  014FDC  0100               	movlb	0	; () banked
 16578  014FDE  6FB2               	movwf	LCD_Write@mode& (0+255),b
 16579  014FE0  51B8               	movf	LCD_Word_Write@value& (0+255),w,b
 16580  014FE2  EFA7  F0A4         	goto	_LCD_Write
 16581  014FE6                     __end_of_LCD_Word_Write:
 16582                           	opt stack 0
 16583                           tblptru	equ	0xFF8
 16584                           tblptrh	equ	0xFF7
 16585                           tblptrl	equ	0xFF6
 16586                           tablat	equ	0xFF5
 16587                           prodh	equ	0xFF4
 16588                           prodl	equ	0xFF3
 16589                           intcon	equ	0xFF2
 16590                           indf0	equ	0xFEF
 16591                           postinc0	equ	0xFEE
 16592                           fsr0h	equ	0xFEA
 16593                           fsr0l	equ	0xFE9
 16594                           wreg	equ	0xFE8
 16595                           indf1	equ	0xFE7
 16596                           postdec1	equ	0xFE5
 16597                           fsr1h	equ	0xFE2
 16598                           fsr1l	equ	0xFE1
 16599                           indf2	equ	0xFDF
 16600                           postinc2	equ	0xFDE
 16601                           postdec2	equ	0xFDD
 16602                           plusw2	equ	0xFDB
 16603                           fsr2h	equ	0xFDA
 16604                           fsr2l	equ	0xFD9
 16605                           status	equ	0xFD8
 16606                           
 16607 ;; *************** function _LCD_Write *****************
 16608 ;; Defined at:
 16609 ;;		line 54 in file "Library/LCD.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;  value           1    wreg     unsigned char 
 16612 ;;  mode            1    4[BANK0 ] enum E7699
 16613 ;; Auto vars:     Size  Location     Type
 16614 ;;  value           1    5[BANK0 ] unsigned char 
 16615 ;;  v               2    6[BANK0 ] unsigned short 
 16616 ;; Return value:  Size  Location     Type
 16617 ;;                  1    wreg      void 
 16618 ;; Registers used:
 16619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16620 ;; Tracked objects:
 16621 ;;		On entry : 0/0
 16622 ;;		On exit  : 0/0
 16623 ;;		Unchanged: 0/0
 16624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16625 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;Total ram usage:        6 bytes
 16630 ;; Hardware stack levels used:    1
 16631 ;; Hardware stack levels required when called:   15
 16632 ;; This function calls:
 16633 ;;		_SPI_Send9
 16634 ;; This function is called by:
 16635 ;;		_LCD_Init
 16636 ;;		_LCD_Word_Write
 16637 ;;		_Set_Addr_Window
 16638 ;;		_Set_Rotation
 16639 ;;		_LCD_WriteCMD
 16640 ;;		_LCD_WriteData
 16641 ;;		_LCD_Data_Write
 16642 ;;		_LCD_Data_Write_4k
 16643 ;;		_Invert_Display
 16644 ;; This function uses a non-reentrant model
 16645 ;;
 16646                           
 16647                           	psect	text89
 16648  01494E                     __ptext89:
 16649                           	opt stack 0
 16650  01494E                     _LCD_Write:
 16651                           	opt stack 12
 16652                           
 16653                           ;incstack = 0
 16654                           ;LCD_Write@value stored from wreg
 16655  01494E  0100               	movlb	0	; () banked
 16656  014950  6FB3               	movwf	LCD_Write@value& (0+255),b
 16657                           
 16658                           ;LCD.c: 72: UINT16 v = value;
 16659  014952  C0B3  F0B4         	movff	LCD_Write@value,LCD_Write@v
 16660  014956  6BB5               	clrf	(LCD_Write@v+1)& (0+255),b
 16661                           
 16662                           ; BSR set to: 0
 16663                           ;LCD.c: 73: v |= (mode == eCommand)?0:(1<<8);
 16664  014958  51B2               	movf	LCD_Write@mode& (0+255),w,b
 16665  01495A  E003               	bz	l10357
 16666                           
 16667                           ; BSR set to: 0
 16668  01495C  0E01               	movlw	1
 16669  01495E  6FB7               	movwf	(_LCD_Write$3147+1)& (0+255),b
 16670  014960  D002               	goto	L11
 16671  014962                     l10357:
 16672                           
 16673                           ; BSR set to: 0
 16674  014962  0100               	movlb	0	; () banked
 16675  014964  6BB7               	clrf	(_LCD_Write$3147+1)& (0+255),b
 16676  014966                     L11:
 16677  014966  6BB6               	clrf	_LCD_Write$3147& (0+255),b
 16678                           
 16679                           ; BSR set to: 0
 16680                           
 16681                           ; BSR set to: 0
 16682  014968  0100               	movlb	0	; () banked
 16683  01496A  51B6               	movf	_LCD_Write$3147& (0+255),w,b
 16684  01496C  13B4               	iorwf	LCD_Write@v& (0+255),f,b
 16685  01496E  51B7               	movf	(_LCD_Write$3147+1)& (0+255),w,b
 16686  014970  13B5               	iorwf	(LCD_Write@v+1)& (0+255),f,b
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;LCD.c: 74: SPI_Send9(&SPI2, v);
 16690  014972  0E6E               	movlw	low _SPI2
 16691  014974  6FAE               	movwf	SPI_Send9@pInput& (0+255),b
 16692  014976  0E01               	movlw	high _SPI2
 16693  014978  6FAF               	movwf	(SPI_Send9@pInput+1)& (0+255),b
 16694  01497A  C0B4  F0B0         	movff	LCD_Write@v,SPI_Send9@pData
 16695  01497E  C0B5  F0B1         	movff	LCD_Write@v+1,SPI_Send9@pData+1
 16696  014982  EFF9  F092         	goto	_SPI_Send9	;wreg free
 16697  014986                     __end_of_LCD_Write:
 16698                           	opt stack 0
 16699                           tblptru	equ	0xFF8
 16700                           tblptrh	equ	0xFF7
 16701                           tblptrl	equ	0xFF6
 16702                           tablat	equ	0xFF5
 16703                           prodh	equ	0xFF4
 16704                           prodl	equ	0xFF3
 16705                           intcon	equ	0xFF2
 16706                           indf0	equ	0xFEF
 16707                           postinc0	equ	0xFEE
 16708                           fsr0h	equ	0xFEA
 16709                           fsr0l	equ	0xFE9
 16710                           wreg	equ	0xFE8
 16711                           indf1	equ	0xFE7
 16712                           postdec1	equ	0xFE5
 16713                           fsr1h	equ	0xFE2
 16714                           fsr1l	equ	0xFE1
 16715                           indf2	equ	0xFDF
 16716                           postinc2	equ	0xFDE
 16717                           postdec2	equ	0xFDD
 16718                           plusw2	equ	0xFDB
 16719                           fsr2h	equ	0xFDA
 16720                           fsr2l	equ	0xFD9
 16721                           status	equ	0xFD8
 16722                           
 16723 ;; *************** function _SPI_Send9 *****************
 16724 ;; Defined at:
 16725 ;;		line 260 in file "Library/SPI.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  pInput          2    0[BANK0 ] const PTR struct SPI
 16728 ;;		 -> SPI2(11), 
 16729 ;;  pData           2    2[BANK0 ] unsigned short 
 16730 ;; Auto vars:     Size  Location     Type
 16731 ;;		None
 16732 ;; Return value:  Size  Location     Type
 16733 ;;                  2    0[BANK0 ] unsigned short 
 16734 ;; Registers used:
 16735 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16736 ;; Tracked objects:
 16737 ;;		On entry : 0/0
 16738 ;;		On exit  : 0/0
 16739 ;;		Unchanged: 0/0
 16740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16745 ;;Total ram usage:        4 bytes
 16746 ;; Hardware stack levels used:    1
 16747 ;; Hardware stack levels required when called:   14
 16748 ;; This function calls:
 16749 ;;		Nothing
 16750 ;; This function is called by:
 16751 ;;		_LCD_Write
 16752 ;; This function uses a non-reentrant model
 16753 ;;
 16754                           
 16755                           	psect	text90
 16756  0125F2                     __ptext90:
 16757                           	opt stack 0
 16758  0125F2                     _SPI_Send9:
 16759                           	opt stack 12
 16760                           
 16761                           ;SPI.c: 262: pData &= 0x1FF;
 16762                           
 16763                           ;incstack = 0
 16764  0125F2  0100               	movlb	0	; () banked
 16765  0125F4  0E01               	movlw	1
 16766  0125F6  17B1               	andwf	(SPI_Send9@pData+1)& (0+255),f,b
 16767                           
 16768                           ; BSR set to: 0
 16769                           ;SPI.c: 287: static Word dat;
 16770                           ;SPI.c: 288: dat.mBits = pData;
 16771  0125F8  C0B0  F12D         	movff	SPI_Send9@pData,SPI_Send9@dat
 16772  0125FC  C0B1  F12E         	movff	SPI_Send9@pData+1,SPI_Send9@dat+1
 16773                           
 16774                           ;SPI.c: 290: switch (pInput->mChannel)
 16775  012600  D052               	goto	l9947
 16776  012602                     l9921:
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;SPI.c: 293: PortC.mOutput->mBit2 = 0;
 16780  012602  C0A8  FFD9         	movff	_PortC+4,fsr2l
 16781  012606  C0A9  FFDA         	movff	_PortC+5,fsr2h
 16782  01260A  94DF               	bcf	indf2,2,c
 16783                           
 16784                           ; BSR set to: 0
 16785                           ;SPI.c: 294: SSP1CON1bits.SSPEN = 0;
 16786  01260C  9AC6               	bcf	4038,5,c	;volatile
 16787                           
 16788                           ;SPI.c: 295: PortC.mOutput->mBit3 = 0;
 16789  01260E  C0A8  FFD9         	movff	_PortC+4,fsr2l
 16790  012612  C0A9  FFDA         	movff	_PortC+5,fsr2h
 16791  012616  96DF               	bcf	indf2,3,c
 16792                           
 16793                           ;SPI.c: 296: PortC.mOutput->mBit5 = dat.H;
 16794  012618  C0A8  FFD9         	movff	_PortC+4,fsr2l
 16795  01261C  C0A9  FFDA         	movff	_PortC+5,fsr2h
 16796  012620  0101               	movlb	1	; () banked
 16797  012622  B12E               	btfsc	(SPI_Send9@dat+1)& (0+255),0,b
 16798  012624  D002               	bra	u6655
 16799  012626  9ADF               	bcf	indf2,5,c
 16800  012628  D001               	bra	u6656
 16801  01262A                     u6655:
 16802  01262A  8ADF               	bsf	indf2,5,c
 16803  01262C                     u6656:
 16804                           
 16805                           ;SPI.c: 297: PortC.mOutput->mBit3 = 1;
 16806  01262C  C0A8  FFD9         	movff	_PortC+4,fsr2l
 16807  012630  C0A9  FFDA         	movff	_PortC+5,fsr2h
 16808  012634  86DF               	bsf	indf2,3,c
 16809                           
 16810                           ; BSR set to: 0
 16811                           ;SPI.c: 298: SSP1CON1bits.SSPEN = 1;
 16812  012636  8AC6               	bsf	4038,5,c	;volatile
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;SPI.c: 299: SSP1BUF = pData;
 16816  012638  C0B0  FFC9         	movff	SPI_Send9@pData,4041	;volatile
 16817  01263C                     l1275:
 16818  01263C  A0C7               	btfss	4039,0,c	;volatile
 16819  01263E  D7FE               	goto	l1275
 16820                           
 16821                           ;SPI.c: 301: PortC.mOutput->mBit2 = 1;
 16822  012640  C0A8  FFD9         	movff	_PortC+4,fsr2l
 16823  012644  C0A9  FFDA         	movff	_PortC+5,fsr2h
 16824  012648  84DF               	bsf	indf2,2,c
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;SPI.c: 302: pData = SSP1BUF;
 16828  01264A  CFC9 F0B0          	movff	4041,SPI_Send9@pData	;volatile
 16829  01264E  0100               	movlb	0	; () banked
 16830  012650  6BB1               	clrf	(SPI_Send9@pData+1)& (0+255),b
 16831                           
 16832                           ;SPI.c: 303: break;
 16833  012652  0012               	return	
 16834  012654                     l9933:
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;SPI.c: 305: PortD.mOutput->mBit7 = 0;
 16838  012654  C191  FFD9         	movff	_PortD+4,fsr2l
 16839  012658  C192  FFDA         	movff	_PortD+5,fsr2h
 16840  01265C  9EDF               	bcf	indf2,7,c
 16841                           
 16842                           ; BSR set to: 1
 16843                           ;SPI.c: 306: SSP2CON1bits.SSPEN = 0;
 16844  01265E  9A6C               	bcf	3948,5,c	;volatile
 16845                           
 16846                           ;SPI.c: 307: PortD.mOutput->mBit6 = 0;
 16847  012660  C191  FFD9         	movff	_PortD+4,fsr2l
 16848  012664  C192  FFDA         	movff	_PortD+5,fsr2h
 16849  012668  9CDF               	bcf	indf2,6,c
 16850                           
 16851                           ;SPI.c: 308: PortD.mOutput->mBit4 = dat.H;
 16852  01266A  C191  FFD9         	movff	_PortD+4,fsr2l
 16853  01266E  C192  FFDA         	movff	_PortD+5,fsr2h
 16854  012672  0101               	movlb	1	; () banked
 16855  012674  B12E               	btfsc	(SPI_Send9@dat+1)& (0+255),0,b
 16856  012676  D002               	bra	u6675
 16857  012678  98DF               	bcf	indf2,4,c
 16858  01267A  D001               	bra	u6676
 16859  01267C                     u6675:
 16860  01267C  88DF               	bsf	indf2,4,c
 16861  01267E                     u6676:
 16862                           
 16863                           ;SPI.c: 309: PortD.mOutput->mBit6 = 1;
 16864  01267E  C191  FFD9         	movff	_PortD+4,fsr2l
 16865  012682  C192  FFDA         	movff	_PortD+5,fsr2h
 16866  012686  8CDF               	bsf	indf2,6,c
 16867                           
 16868                           ; BSR set to: 1
 16869                           ;SPI.c: 310: SSP2CON1bits.SSPEN = 1;
 16870  012688  8A6C               	bsf	3948,5,c	;volatile
 16871                           
 16872                           ; BSR set to: 1
 16873                           ;SPI.c: 311: SSP2BUF = pData;
 16874  01268A  C0B0  FF6F         	movff	SPI_Send9@pData,3951	;volatile
 16875  01268E                     l1280:
 16876  01268E  A06D               	btfss	3949,0,c	;volatile
 16877  012690  D7FE               	goto	l1280
 16878                           
 16879                           ;SPI.c: 313: PortD.mOutput->mBit7 = 1;
 16880  012692  C191  FFD9         	movff	_PortD+4,fsr2l
 16881  012696  C192  FFDA         	movff	_PortD+5,fsr2h
 16882  01269A  8EDF               	bsf	indf2,7,c
 16883                           
 16884                           ; BSR set to: 1
 16885                           ;SPI.c: 314: pData = SSP2BUF;
 16886  01269C  CF6F F0B0          	movff	3951,SPI_Send9@pData	;volatile
 16887  0126A0  0100               	movlb	0	; () banked
 16888  0126A2  6BB1               	clrf	(SPI_Send9@pData+1)& (0+255),b
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;SPI.c: 316: };
 16892                           
 16893                           ;SPI.c: 315: break;
 16894  0126A4  0012               	return	
 16895  0126A6                     l9947:
 16896                           
 16897                           ; BSR set to: 0
 16898  0126A6  0100               	movlb	0	; () banked
 16899  0126A8  EE20 F002          	lfsr	2,2
 16900  0126AC  51AE               	movf	SPI_Send9@pInput& (0+255),w,b
 16901  0126AE  26D9               	addwf	fsr2l,f,c
 16902  0126B0  51AF               	movf	(SPI_Send9@pInput+1)& (0+255),w,b
 16903  0126B2  22DA               	addwfc	fsr2h,f,c
 16904  0126B4  50DF               	movf	indf2,w,c
 16905                           
 16906                           ; Switch size 1, requested type "space"
 16907                           ; Number of cases is 2, Range of values is 0 to 1
 16908                           ; switch strategies available:
 16909                           ; Name         Instructions Cycles
 16910                           ; simple_byte            7     4 (average)
 16911                           ;	Chosen strategy is simple_byte
 16912  0126B6  E0A5               	bz	l9921
 16913  0126B8  0A01               	xorlw	1	; case 1
 16914  0126BA  E0CC               	bz	l9933
 16915                           
 16916                           ; BSR set to: 0
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;SPI.c: 319: return pData;
 16920                           ;	Return value of _SPI_Send9 is never used
 16921  0126BC  0012               	return		;funcret
 16922  0126BE                     __end_of_SPI_Send9:
 16923                           	opt stack 0
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           indf0	equ	0xFEF
 16932                           postinc0	equ	0xFEE
 16933                           fsr0h	equ	0xFEA
 16934                           fsr0l	equ	0xFE9
 16935                           wreg	equ	0xFE8
 16936                           indf1	equ	0xFE7
 16937                           postdec1	equ	0xFE5
 16938                           fsr1h	equ	0xFE2
 16939                           fsr1l	equ	0xFE1
 16940                           indf2	equ	0xFDF
 16941                           postinc2	equ	0xFDE
 16942                           postdec2	equ	0xFDD
 16943                           plusw2	equ	0xFDB
 16944                           fsr2h	equ	0xFDA
 16945                           fsr2l	equ	0xFD9
 16946                           status	equ	0xFD8
 16947                           
 16948 ;; *************** function _Console_MakeField *****************
 16949 ;; Defined at:
 16950 ;;		line 421 in file "Library/Console.c"
 16951 ;; Parameters:    Size  Location     Type
 16952 ;;  pInput          1    wreg     unsigned char 
 16953 ;; Auto vars:     Size  Location     Type
 16954 ;;  pInput          1   15[BANK0 ] unsigned char 
 16955 ;;  y               1   17[BANK0 ] unsigned char 
 16956 ;;  x               1   16[BANK0 ] unsigned char 
 16957 ;;  Column          2   11[BANK0 ] PTR struct Byte
 16958 ;;		 -> Font5x7(480), 
 16959 ;;  Index           2    9[BANK0 ] unsigned short 
 16960 ;; Return value:  Size  Location     Type
 16961 ;;                  2    5[BANK0 ] PTR unsigned short 
 16962 ;; Registers used:
 16963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16964 ;; Tracked objects:
 16965 ;;		On entry : 0/0
 16966 ;;		On exit  : 0/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16969 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16970 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16972 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16973 ;;Total ram usage:       13 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:   15
 16976 ;; This function calls:
 16977 ;;		_Byte_GetBit
 16978 ;; This function is called by:
 16979 ;;		_Console_Render
 16980 ;; This function uses a non-reentrant model
 16981 ;;
 16982                           
 16983                           	psect	text91
 16984  012EC0                     __ptext91:
 16985                           	opt stack 0
 16986  012EC0                     _Console_MakeField:
 16987                           	opt stack 13
 16988                           
 16989                           ; BSR set to: 0
 16990                           ;incstack = 0
 16991                           ;Console_MakeField@pInput stored from wreg
 16992  012EC0  0100               	movlb	0	; () banked
 16993  012EC2  6FBD               	movwf	Console_MakeField@pInput& (0+255),b
 16994                           
 16995                           ;Console.c: 423: static Colour Fill[7][5];
 16996                           ;Console.c: 424: pInput -= 32;
 16997  012EC4  0E20               	movlw	32
 16998  012EC6  5FBD               	subwf	Console_MakeField@pInput& (0+255),f,b
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;Console.c: 426: UINT16 Index = (UINT16) pInput*5;
 17002  012EC8  51BD               	movf	Console_MakeField@pInput& (0+255),w,b
 17003  012ECA  0D05               	mullw	5
 17004  012ECC  CFF3 F0B7          	movff	prodl,Console_MakeField@Index
 17005  012ED0  CFF4 F0B8          	movff	prodh,Console_MakeField@Index+1
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;Console.c: 427: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 17009  012ED4  0E12               	movlw	low _Font5x7
 17010  012ED6  25B7               	addwf	Console_MakeField@Index& (0+255),w,b
 17011  012ED8  6FB9               	movwf	Console_MakeField@Column& (0+255),b
 17012  012EDA  0EFD               	movlw	high _Font5x7
 17013  012EDC  21B8               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 17014  012EDE  6FBA               	movwf	(Console_MakeField@Column+1)& (0+255),b
 17015                           
 17016                           ; BSR set to: 0
 17017                           ;Console.c: 429: for (UINT8 x = 0; x < 5; x++)
 17018  012EE0  6BBE               	clrf	Console_MakeField@x& (0+255),b
 17019  012EE2                     l11715:
 17020                           
 17021                           ; BSR set to: 0
 17022  012EE2  0E04               	movlw	4
 17023  012EE4  0100               	movlb	0	; () banked
 17024  012EE6  65BE               	cpfsgt	Console_MakeField@x& (0+255),b
 17025  012EE8  D001               	goto	l11719
 17026  012EEA  D038               	goto	l11739
 17027  012EEC                     l11719:
 17028                           
 17029                           ; BSR set to: 0
 17030                           ;Console.c: 430: {
 17031                           ;Console.c: 431: for (UINT8 y = 0; y < 7; y++)
 17032  012EEC  0100               	movlb	0	; () banked
 17033  012EEE  6BBF               	clrf	Console_MakeField@y& (0+255),b
 17034  012EF0                     l11721:
 17035                           
 17036                           ; BSR set to: 0
 17037  012EF0  0E06               	movlw	6
 17038  012EF2  0100               	movlb	0	; () banked
 17039  012EF4  65BF               	cpfsgt	Console_MakeField@y& (0+255),b
 17040  012EF6  D001               	goto	l11725
 17041  012EF8  D02C               	goto	l11735
 17042  012EFA                     l11725:
 17043                           
 17044                           ; BSR set to: 0
 17045                           ;Console.c: 432: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 17046  012EFA  C0B9  F0AE         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 17047  012EFE  C0BA  F0AF         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 17048  012F02  C0BF  F0B0         	movff	Console_MakeField@y,Byte_GetBit@pBit
 17049  012F06  ECEE  F0A5         	call	_Byte_GetBit	;wreg free
 17050  012F0A  0900               	iorlw	0
 17051  012F0C  E105               	bnz	l1726
 17052  012F0E  C089  F0BB         	movff	_gBackcolour,_Console_MakeField$11988
 17053  012F12  C08A  F0BC         	movff	_gBackcolour+1,_Console_MakeField$11988+1
 17054  012F16  D004               	goto	l11729
 17055  012F18                     l1726:
 17056  012F18  C1F6  F0BB         	movff	_gForecolour,_Console_MakeField$11988
 17057  012F1C  C1F7  F0BC         	movff	_gForecolour+1,_Console_MakeField$11988+1
 17058  012F20                     l11729:
 17059  012F20  0100               	movlb	0	; () banked
 17060  012F22  51BF               	movf	Console_MakeField@y& (0+255),w,b
 17061  012F24  0D0A               	mullw	10
 17062  012F26  0E64               	movlw	low Console_MakeField@Fill
 17063  012F28  6FB5               	movwf	??_Console_MakeField& (0+255),b
 17064  012F2A  0E03               	movlw	high Console_MakeField@Fill
 17065  012F2C  6FB6               	movwf	(??_Console_MakeField+1)& (0+255),b
 17066  012F2E  50F3               	movf	prodl,w,c
 17067  012F30  27B5               	addwf	??_Console_MakeField& (0+255),f,b
 17068  012F32  50F4               	movf	prodh,w,c
 17069  012F34  23B6               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 17070  012F36  51BE               	movf	Console_MakeField@x& (0+255),w,b
 17071  012F38  0D02               	mullw	2
 17072  012F3A  50F3               	movf	prodl,w,c
 17073  012F3C  25B5               	addwf	??_Console_MakeField& (0+255),w,b
 17074  012F3E  6ED9               	movwf	fsr2l,c
 17075  012F40  50F4               	movf	prodh,w,c
 17076  012F42  21B6               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 17077  012F44  6EDA               	movwf	fsr2h,c
 17078  012F46  C0BB  FFDE         	movff	_Console_MakeField$11988,postinc2
 17079  012F4A  C0BC  FFDD         	movff	_Console_MakeField$11988+1,postdec2
 17080                           
 17081                           ; BSR set to: 0
 17082  012F4E  2BBF               	incf	Console_MakeField@y& (0+255),f,b
 17083  012F50  D7CF               	goto	l11721
 17084  012F52                     l11735:
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;Console.c: 433: Column += 1;
 17088  012F52  0100               	movlb	0	; () banked
 17089  012F54  4BB9               	infsnz	Console_MakeField@Column& (0+255),f,b
 17090  012F56  2BBA               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 17091  012F58  2BBE               	incf	Console_MakeField@x& (0+255),f,b
 17092  012F5A  D7C3               	goto	l11715
 17093  012F5C                     l11739:
 17094                           
 17095                           ; BSR set to: 0
 17096                           ;Console.c: 434: }
 17097                           ;Console.c: 435: return (ColourPtr)Fill;
 17098  012F5C  0E64               	movlw	low Console_MakeField@Fill
 17099  012F5E  0100               	movlb	0	; () banked
 17100  012F60  6FB3               	movwf	?_Console_MakeField& (0+255),b
 17101  012F62  0E03               	movlw	high Console_MakeField@Fill
 17102  012F64  6FB4               	movwf	(?_Console_MakeField+1)& (0+255),b
 17103  012F66  0012               	return	
 17104  012F68                     __end_of_Console_MakeField:
 17105                           	opt stack 0
 17106                           tblptru	equ	0xFF8
 17107                           tblptrh	equ	0xFF7
 17108                           tblptrl	equ	0xFF6
 17109                           tablat	equ	0xFF5
 17110                           prodh	equ	0xFF4
 17111                           prodl	equ	0xFF3
 17112                           intcon	equ	0xFF2
 17113                           indf0	equ	0xFEF
 17114                           postinc0	equ	0xFEE
 17115                           fsr0h	equ	0xFEA
 17116                           fsr0l	equ	0xFE9
 17117                           wreg	equ	0xFE8
 17118                           indf1	equ	0xFE7
 17119                           postdec1	equ	0xFE5
 17120                           fsr1h	equ	0xFE2
 17121                           fsr1l	equ	0xFE1
 17122                           indf2	equ	0xFDF
 17123                           postinc2	equ	0xFDE
 17124                           postdec2	equ	0xFDD
 17125                           plusw2	equ	0xFDB
 17126                           fsr2h	equ	0xFDA
 17127                           fsr2l	equ	0xFD9
 17128                           status	equ	0xFD8
 17129                           
 17130 ;; *************** function _Byte_GetBit *****************
 17131 ;; Defined at:
 17132 ;;		line 38 in file "Library/Types.c"
 17133 ;; Parameters:    Size  Location     Type
 17134 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17135 ;;		 -> Font5x7(480), 
 17136 ;;  pBit            1    2[BANK0 ] unsigned char 
 17137 ;; Auto vars:     Size  Location     Type
 17138 ;;  Output          1    4[BANK0 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  1    wreg      unsigned char 
 17141 ;; Registers used:
 17142 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17148 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;Total ram usage:        5 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:   14
 17155 ;; This function calls:
 17156 ;;		Nothing
 17157 ;; This function is called by:
 17158 ;;		_Console_MakeField
 17159 ;;		_Word_GetBit
 17160 ;; This function uses a non-reentrant model
 17161 ;;
 17162                           
 17163                           	psect	text92
 17164  014BDC                     __ptext92:
 17165                           	opt stack 0
 17166  014BDC                     _Byte_GetBit:
 17167                           	opt stack 13
 17168                           
 17169                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;incstack = 0
 17173  014BDC  C0AE  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 17174  014BE0  C0AF  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 17175  014BE4                     	if	0	;tblptru may be non-zero
 17176  014BE4                     	endif
 17177  014BE4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17178  014BE4  0E00               	movlw	low (__mediumconst shr (0+16))
 17179  014BE6  6EF8               	movwf	tblptru,c
 17180  014BE8                     	endif
 17181  014BE8  0008               	tblrd		*
 17182  014BEA  CFF5 F0B2          	movff	tablat,Byte_GetBit@Output
 17183                           
 17184                           ;Types.c: 42: Output >>= pBit;
 17185  014BEE  0100               	movlb	0	; () banked
 17186  014BF0  29B0               	incf	Byte_GetBit@pBit& (0+255),w,b
 17187  014BF2  6FB1               	movwf	??_Byte_GetBit& (0+255),b
 17188  014BF4  D003               	goto	u7700
 17189  014BF6                     u7705:
 17190  014BF6  0100               	movlb	0	; () banked
 17191  014BF8  90D8               	bcf	status,0,c
 17192  014BFA  33B2               	rrcf	Byte_GetBit@Output& (0+255),f,b
 17193  014BFC                     u7700:
 17194  014BFC  0100               	movlb	0	; () banked
 17195  014BFE  2FB1               	decfsz	??_Byte_GetBit& (0+255),f,b
 17196  014C00  D7FA               	goto	u7705
 17197                           
 17198                           ;Types.c: 43: Output &= 1;
 17199  014C02  0E01               	movlw	1
 17200  014C04  17B2               	andwf	Byte_GetBit@Output& (0+255),f,b
 17201                           
 17202                           ; BSR set to: 0
 17203                           ;Types.c: 44: return Output;
 17204  014C06  51B2               	movf	Byte_GetBit@Output& (0+255),w,b
 17205  014C08  0012               	return	
 17206  014C0A                     __end_of_Byte_GetBit:
 17207                           	opt stack 0
 17208                           tblptru	equ	0xFF8
 17209                           tblptrh	equ	0xFF7
 17210                           tblptrl	equ	0xFF6
 17211                           tablat	equ	0xFF5
 17212                           prodh	equ	0xFF4
 17213                           prodl	equ	0xFF3
 17214                           intcon	equ	0xFF2
 17215                           indf0	equ	0xFEF
 17216                           postinc0	equ	0xFEE
 17217                           fsr0h	equ	0xFEA
 17218                           fsr0l	equ	0xFE9
 17219                           wreg	equ	0xFE8
 17220                           indf1	equ	0xFE7
 17221                           postdec1	equ	0xFE5
 17222                           fsr1h	equ	0xFE2
 17223                           fsr1l	equ	0xFE1
 17224                           indf2	equ	0xFDF
 17225                           postinc2	equ	0xFDE
 17226                           postdec2	equ	0xFDD
 17227                           plusw2	equ	0xFDB
 17228                           fsr2h	equ	0xFDA
 17229                           fsr2l	equ	0xFD9
 17230                           status	equ	0xFD8
 17231                           
 17232 ;; *************** function _FunctButton *****************
 17233 ;; Defined at:
 17234 ;;		line 171 in file "Functions.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;		None
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;		None
 17239 ;; Return value:  Size  Location     Type
 17240 ;;                  1    wreg      void 
 17241 ;; Registers used:
 17242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;Total ram usage:        0 bytes
 17253 ;; Hardware stack levels used:    1
 17254 ;; Hardware stack levels required when called:   22
 17255 ;; This function calls:
 17256 ;;		_Button_Poll
 17257 ;; This function is called by:
 17258 ;;		_main
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           	psect	text93
 17263  014E58                     __ptext93:
 17264                           	opt stack 0
 17265  014E58                     _FunctButton:
 17266                           	opt stack 8
 17267                           
 17268                           ;Functions.c: 175: Button_Poll(&TestButton, 1);
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;incstack = 0
 17272  014E58  0EBD               	movlw	low _TestButton
 17273  014E5A  0100               	movlb	0	; () banked
 17274  014E5C  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 17275  014E5E  0E01               	movlw	high _TestButton
 17276  014E60  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 17277  014E62  0E01               	movlw	1
 17278  014E64  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 17279  014E66  EC1E  F08F         	call	_Button_Poll	;wreg free
 17280                           
 17281                           ;Functions.c: 176: Button_Poll(&DIPSwitch, 1);
 17282  014E6A  0EB5               	movlw	low _DIPSwitch
 17283  014E6C  0100               	movlb	0	; () banked
 17284  014E6E  6FC9               	movwf	Button_Poll@pButton& (0+255),b
 17285  014E70  0E01               	movlw	high _DIPSwitch
 17286  014E72  6FCA               	movwf	(Button_Poll@pButton+1)& (0+255),b
 17287  014E74  0E01               	movlw	1
 17288  014E76  6FCB               	movwf	Button_Poll@pIncrement& (0+255),b
 17289  014E78  EF1E  F08F         	goto	_Button_Poll	;wreg free
 17290  014E7C                     __end_of_FunctButton:
 17291                           	opt stack 0
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           indf0	equ	0xFEF
 17300                           postinc0	equ	0xFEE
 17301                           fsr0h	equ	0xFEA
 17302                           fsr0l	equ	0xFE9
 17303                           wreg	equ	0xFE8
 17304                           indf1	equ	0xFE7
 17305                           postdec1	equ	0xFE5
 17306                           fsr1h	equ	0xFE2
 17307                           fsr1l	equ	0xFE1
 17308                           indf2	equ	0xFDF
 17309                           postinc2	equ	0xFDE
 17310                           postdec2	equ	0xFDD
 17311                           plusw2	equ	0xFDB
 17312                           fsr2h	equ	0xFDA
 17313                           fsr2l	equ	0xFD9
 17314                           status	equ	0xFD8
 17315                           
 17316 ;; *************** function _Button_Poll *****************
 17317 ;; Defined at:
 17318 ;;		line 78 in file "Library/Button.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 17321 ;;		 -> DIPSwitch(8), TestButton(8), HMIBoard(48), 
 17322 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  Pin             1   35[BANK0 ] unsigned char 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;                  1    wreg      unsigned char 
 17327 ;; Registers used:
 17328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;Total ram usage:        9 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:   21
 17341 ;; This function calls:
 17342 ;;		_Button_State
 17343 ;;		_Event_DIPSwitch
 17344 ;;		_Event_HMI_DIPSwitch
 17345 ;;		_Event_HMI_DownButton
 17346 ;;		_Event_HMI_LeftButton
 17347 ;;		_Event_HMI_RightButton
 17348 ;;		_Event_HMI_UpButton
 17349 ;;		_Event_TestButton
 17350 ;; This function is called by:
 17351 ;;		_HMI_Poll
 17352 ;;		_FunctButton
 17353 ;; This function uses a non-reentrant model
 17354 ;;
 17355                           
 17356                           	psect	text94
 17357  011E3C                     __ptext94:
 17358                           	opt stack 0
 17359  011E3C                     _Button_Poll:
 17360                           	opt stack 7
 17361                           
 17362                           ;Button.c: 80: UINT8 Pin = Button_State(pButton);
 17363                           
 17364                           ;incstack = 0
 17365  011E3C  C0C9  F0B4         	movff	Button_Poll@pButton,Button_State@pInput
 17366  011E40  C0CA  F0B5         	movff	Button_Poll@pButton+1,Button_State@pInput+1
 17367  011E44  EC52  F09A         	call	_Button_State	;wreg free
 17368  011E48  0100               	movlb	0	; () banked
 17369  011E4A  6FD1               	movwf	Button_Poll@Pin& (0+255),b
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;Button.c: 82: if (pButton->mState == Pin)
 17373  011E4C  EE20 F001          	lfsr	2,1
 17374  011E50  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17375  011E52  26D9               	addwf	fsr2l,f,c
 17376  011E54  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17377  011E56  22DA               	addwfc	fsr2h,f,c
 17378  011E58  51D1               	movf	Button_Poll@Pin& (0+255),w,b
 17379  011E5A  18DE               	xorwf	postinc2,w,c
 17380  011E5C  E11B               	bnz	l11391
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;Button.c: 83: {
 17384                           ;Button.c: 86: if(pIncrement > pButton->mCount)
 17385  011E5E  EE20 F002          	lfsr	2,2
 17386  011E62  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17387  011E64  26D9               	addwf	fsr2l,f,c
 17388  011E66  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17389  011E68  22DA               	addwfc	fsr2h,f,c
 17390  011E6A  51CB               	movf	Button_Poll@pIncrement& (0+255),w,b
 17391  011E6C  5CDE               	subwf	postinc2,w,c
 17392  011E6E  E208               	bc	l11389
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;Button.c: 87: pButton->mCount = 0;
 17396  011E70  EE20 F002          	lfsr	2,2
 17397  011E74  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17398  011E76  26D9               	addwf	fsr2l,f,c
 17399  011E78  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17400  011E7A  22DA               	addwfc	fsr2h,f,c
 17401  011E7C  6ADF               	clrf	indf2,c
 17402  011E7E  0C00               	retlw	0
 17403  011E80                     l11389:
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;Button.c: 88: else
 17407                           ;Button.c: 89: pButton->mCount -= pIncrement;
 17408  011E80  0100               	movlb	0	; () banked
 17409  011E82  EE20 F002          	lfsr	2,2
 17410  011E86  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17411  011E88  26D9               	addwf	fsr2l,f,c
 17412  011E8A  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17413  011E8C  22DA               	addwfc	fsr2h,f,c
 17414  011E8E  51CB               	movf	Button_Poll@pIncrement& (0+255),w,b
 17415  011E90  5EDF               	subwf	indf2,f,c
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;Button.c: 90: }
 17419  011E92  0012               	return	
 17420  011E94                     l11391:
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;Button.c: 93: else if(pButton->mCount + pIncrement > pButton->mCount)
 17424  011E94  0100               	movlb	0	; () banked
 17425  011E96  EE20 F002          	lfsr	2,2
 17426  011E9A  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17427  011E9C  26D9               	addwf	fsr2l,f,c
 17428  011E9E  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17429  011EA0  22DA               	addwfc	fsr2h,f,c
 17430  011EA2  50DF               	movf	indf2,w,c
 17431  011EA4  6FCC               	movwf	??_Button_Poll& (0+255),b
 17432  011EA6  6BCD               	clrf	(??_Button_Poll+1)& (0+255),b
 17433  011EA8  51CB               	movf	Button_Poll@pIncrement& (0+255),w,b
 17434  011EAA  27CC               	addwf	??_Button_Poll& (0+255),f,b
 17435  011EAC  0E00               	movlw	0
 17436  011EAE  23CD               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 17437  011EB0  EE20 F002          	lfsr	2,2
 17438  011EB4  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17439  011EB6  26D9               	addwf	fsr2l,f,c
 17440  011EB8  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17441  011EBA  22DA               	addwfc	fsr2h,f,c
 17442  011EBC  50DF               	movf	indf2,w,c
 17443  011EBE  6FCE               	movwf	(??_Button_Poll+2)& (0+255),b
 17444  011EC0  6BCF               	clrf	(??_Button_Poll+3)& (0+255),b
 17445  011EC2  51CC               	movf	??_Button_Poll& (0+255),w,b
 17446  011EC4  5DCE               	subwf	(??_Button_Poll+2)& (0+255),w,b
 17447  011EC6  51CF               	movf	(??_Button_Poll+3)& (0+255),w,b
 17448  011EC8  0A80               	xorlw	128
 17449  011ECA  6FD0               	movwf	(??_Button_Poll+4)& (0+255),b
 17450  011ECC  51CD               	movf	(??_Button_Poll+1)& (0+255),w,b
 17451  011ECE  0A80               	xorlw	128
 17452  011ED0  59D0               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 17453  011ED2  B0D8               	btfsc	status,0,c
 17454  011ED4  0012               	return	
 17455                           
 17456                           ; BSR set to: 0
 17457                           ;Button.c: 94: {
 17458                           ;Button.c: 96: pButton->mCount += pIncrement;
 17459  011ED6  EE20 F002          	lfsr	2,2
 17460  011EDA  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17461  011EDC  26D9               	addwf	fsr2l,f,c
 17462  011EDE  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17463  011EE0  22DA               	addwfc	fsr2h,f,c
 17464  011EE2  51CB               	movf	Button_Poll@pIncrement& (0+255),w,b
 17465  011EE4  26DF               	addwf	indf2,f,c
 17466                           
 17467                           ; BSR set to: 0
 17468                           ;Button.c: 97: if(pButton->mCount >= pButton->mThreshold)
 17469  011EE6  EE20 F003          	lfsr	2,3
 17470  011EEA  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17471  011EEC  26D9               	addwf	fsr2l,f,c
 17472  011EEE  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17473  011EF0  22DA               	addwfc	fsr2h,f,c
 17474  011EF2  EE10 F002          	lfsr	1,2
 17475  011EF6  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17476  011EF8  26E1               	addwf	fsr1l,f,c
 17477  011EFA  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17478  011EFC  22E2               	addwfc	fsr1h,f,c
 17479  011EFE  50E7               	movf	indf1,w,c
 17480  011F00  6FCE               	movwf	(??_Button_Poll+2)& (0+255),b
 17481  011F02  6BCF               	clrf	(??_Button_Poll+3)& (0+255),b
 17482  011F04  50DE               	movf	postinc2,w,c
 17483  011F06  5DCE               	subwf	(??_Button_Poll+2)& (0+255),w,b
 17484  011F08  50DE               	movf	postinc2,w,c
 17485  011F0A  59CF               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 17486  011F0C  A0D8               	btfss	status,0,c
 17487  011F0E  0012               	return	
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;Button.c: 98: {
 17491                           ;Button.c: 100: pButton->mState = Pin;
 17492  011F10  EE20 F001          	lfsr	2,1
 17493  011F14  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17494  011F16  26D9               	addwf	fsr2l,f,c
 17495  011F18  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17496  011F1A  22DA               	addwfc	fsr2h,f,c
 17497  011F1C  C0D1  FFDF         	movff	Button_Poll@Pin,indf2
 17498                           
 17499                           ;Button.c: 101: pButton->mCount = 0;
 17500  011F20  EE20 F002          	lfsr	2,2
 17501  011F24  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17502  011F26  26D9               	addwf	fsr2l,f,c
 17503  011F28  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17504  011F2A  22DA               	addwfc	fsr2h,f,c
 17505  011F2C  6ADF               	clrf	indf2,c
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;Button.c: 104: pButton->mFunction(Pin);
 17509  011F2E  EE20 F005          	lfsr	2,5
 17510  011F32  51C9               	movf	Button_Poll@pButton& (0+255),w,b
 17511  011F34  26D9               	addwf	fsr2l,f,c
 17512  011F36  51CA               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 17513  011F38  22DA               	addwfc	fsr2h,f,c
 17514  011F3A  0005               	push	
 17515  011F3C  6EFA               	movwf	pclath,c
 17516  011F3E  50DE               	movf	postinc2,w,c
 17517  011F40  6EFD               	movwf	tosl,c
 17518  011F42  50DE               	movf	postinc2,w,c
 17519  011F44  6EFE               	movwf	tosh,c
 17520  011F46  50DE               	movf	postinc2,w,c
 17521  011F48  6EFF               	movwf	tosu,c
 17522  011F4A  50FA               	movf	pclath,w,c
 17523  011F4C  51D1               	movf	Button_Poll@Pin& (0+255),w,b
 17524  011F4E  0012               	return		;indir
 17525  011F50                     __end_of_Button_Poll:
 17526                           	opt stack 0
 17527                           tosu	equ	0xFFF
 17528                           tosh	equ	0xFFE
 17529                           tosl	equ	0xFFD
 17530                           pclath	equ	0xFFA
 17531                           tblptru	equ	0xFF8
 17532                           tblptrh	equ	0xFF7
 17533                           tblptrl	equ	0xFF6
 17534                           tablat	equ	0xFF5
 17535                           prodh	equ	0xFF4
 17536                           prodl	equ	0xFF3
 17537                           intcon	equ	0xFF2
 17538                           indf0	equ	0xFEF
 17539                           postinc0	equ	0xFEE
 17540                           fsr0h	equ	0xFEA
 17541                           fsr0l	equ	0xFE9
 17542                           wreg	equ	0xFE8
 17543                           indf1	equ	0xFE7
 17544                           postdec1	equ	0xFE5
 17545                           fsr1h	equ	0xFE2
 17546                           fsr1l	equ	0xFE1
 17547                           indf2	equ	0xFDF
 17548                           postinc2	equ	0xFDE
 17549                           postdec2	equ	0xFDD
 17550                           plusw2	equ	0xFDB
 17551                           fsr2h	equ	0xFDA
 17552                           fsr2l	equ	0xFD9
 17553                           status	equ	0xFD8
 17554                           
 17555 ;; *************** function _Event_DIPSwitch *****************
 17556 ;; Defined at:
 17557 ;;		line 43 in file "Events.c"
 17558 ;; Parameters:    Size  Location     Type
 17559 ;;  pState          1    wreg     unsigned char 
 17560 ;; Auto vars:     Size  Location     Type
 17561 ;;  pState          1   25[BANK0 ] unsigned char 
 17562 ;;  Bar             1   26[BANK0 ] unsigned char 
 17563 ;; Return value:  Size  Location     Type
 17564 ;;                  1    wreg      void 
 17565 ;; Registers used:
 17566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17567 ;; Tracked objects:
 17568 ;;		On entry : 0/0
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17576 ;;Total ram usage:        2 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; Hardware stack levels required when called:   20
 17579 ;; This function calls:
 17580 ;;		_HMI_GetBar
 17581 ;;		_HMI_SetBar
 17582 ;;		_LED_Toggle
 17583 ;;		_USB_Print
 17584 ;; This function is called by:
 17585 ;;		_FunctInitButton
 17586 ;;		_Button_Poll
 17587 ;; This function uses a non-reentrant model
 17588 ;;
 17589                           
 17590                           	psect	text95
 17591  014AC2                     __ptext95:
 17592                           	opt stack 0
 17593  014AC2                     _Event_DIPSwitch:
 17594                           	opt stack 7
 17595                           
 17596                           ;incstack = 0
 17597                           ;Event_DIPSwitch@pState stored from wreg
 17598  014AC2  0100               	movlb	0	; () banked
 17599  014AC4  6FC7               	movwf	Event_DIPSwitch@pState& (0+255),b
 17600                           
 17601                           ;Events.c: 45: UINT8 Bar = HMI_GetBar();
 17602  014AC6  EC50  F0A8         	call	_HMI_GetBar
 17603  014ACA  0100               	movlb	0	; () banked
 17604  014ACC  6FC8               	movwf	Event_DIPSwitch@Bar& (0+255),b
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;Events.c: 46: Bar &= 0x0F;
 17608  014ACE  0E0F               	movlw	15
 17609  014AD0  17C8               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;Events.c: 47: pState <<= 4;
 17613  014AD2  3BC7               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 17614  014AD4  0EF0               	movlw	240
 17615  014AD6  17C7               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 17616                           
 17617                           ; BSR set to: 0
 17618                           ;Events.c: 50: HMI_SetBar(pState | Bar);
 17619  014AD8  51C7               	movf	Event_DIPSwitch@pState& (0+255),w,b
 17620  014ADA  11C8               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 17621  014ADC  EC43  F0A8         	call	_HMI_SetBar
 17622                           
 17623                           ;Events.c: 53: USB_Print("DIP\n");
 17624  014AE0  0ED2               	movlw	low (STR_3+4)
 17625  014AE2  0100               	movlb	0	; () banked
 17626  014AE4  6FB4               	movwf	USB_Print@pInput& (0+255),b
 17627  014AE6  0EFF               	movlw	high (STR_3+4)
 17628  014AE8  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 17629  014AEA  EC50  F0A7         	call	_USB_Print	;wreg free
 17630                           
 17631                           ;Events.c: 57: LED_Toggle(eLED1);
 17632  014AEE  0E00               	movlw	0
 17633  014AF0  EF2E  F0A5         	goto	_LED_Toggle
 17634  014AF4                     __end_of_Event_DIPSwitch:
 17635                           	opt stack 0
 17636                           tosu	equ	0xFFF
 17637                           tosh	equ	0xFFE
 17638                           tosl	equ	0xFFD
 17639                           pclath	equ	0xFFA
 17640                           tblptru	equ	0xFF8
 17641                           tblptrh	equ	0xFF7
 17642                           tblptrl	equ	0xFF6
 17643                           tablat	equ	0xFF5
 17644                           prodh	equ	0xFF4
 17645                           prodl	equ	0xFF3
 17646                           intcon	equ	0xFF2
 17647                           indf0	equ	0xFEF
 17648                           postinc0	equ	0xFEE
 17649                           fsr0h	equ	0xFEA
 17650                           fsr0l	equ	0xFE9
 17651                           wreg	equ	0xFE8
 17652                           indf1	equ	0xFE7
 17653                           postdec1	equ	0xFE5
 17654                           fsr1h	equ	0xFE2
 17655                           fsr1l	equ	0xFE1
 17656                           indf2	equ	0xFDF
 17657                           postinc2	equ	0xFDE
 17658                           postdec2	equ	0xFDD
 17659                           plusw2	equ	0xFDB
 17660                           fsr2h	equ	0xFDA
 17661                           fsr2l	equ	0xFD9
 17662                           status	equ	0xFD8
 17663                           
 17664 ;; *************** function _Event_HMI_DownButton *****************
 17665 ;; Defined at:
 17666 ;;		line 177 in file "Events.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;  pState          1    wreg     unsigned char 
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;  pState          1   25[BANK0 ] unsigned char 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  1    wreg      void 
 17673 ;; Registers used:
 17674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;Total ram usage:        1 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:   20
 17687 ;; This function calls:
 17688 ;;		_HMI_SetDown
 17689 ;;		_HMI_SetNumber
 17690 ;;		_LED_Toggle
 17691 ;;		_USB_Print
 17692 ;; This function is called by:
 17693 ;;		_HMI_Init
 17694 ;;		_Button_Poll
 17695 ;; This function uses a non-reentrant model
 17696 ;;
 17697                           
 17698                           	psect	text96
 17699  0149BC                     __ptext96:
 17700                           	opt stack 0
 17701  0149BC                     _Event_HMI_DownButton:
 17702                           	opt stack 7
 17703                           
 17704                           ;incstack = 0
 17705                           ;Event_HMI_DownButton@pState stored from wreg
 17706  0149BC  0100               	movlb	0	; () banked
 17707  0149BE  6FC7               	movwf	Event_HMI_DownButton@pState& (0+255),b
 17708                           
 17709                           ;Events.c: 180: HMI_SetDown(pState);
 17710  0149C0  51C7               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 17711  0149C2  EC11  F0A8         	call	_HMI_SetDown
 17712                           
 17713                           ;Events.c: 182: if (pState == 0)
 17714  0149C6  0100               	movlb	0	; () banked
 17715  0149C8  51C7               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 17716  0149CA  E110               	bnz	l11195
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;Events.c: 183: {
 17720                           ;Events.c: 184: val -= 1;
 17721  0149CC  078D               	decf	_val& (0+255),f,b
 17722  0149CE  A0D8               	btfss	status,0,c
 17723  0149D0  078E               	decf	(_val+1)& (0+255),f,b
 17724                           
 17725                           ; BSR set to: 0
 17726                           ;Events.c: 185: HMI_SetNumber(val);
 17727  0149D2  C08D  F0BF         	movff	_val,HMI_SetNumber@pInput
 17728  0149D6  C08E  F0C0         	movff	_val+1,HMI_SetNumber@pInput+1
 17729  0149DA  EC3E  F0A7         	call	_HMI_SetNumber	;wreg free
 17730                           
 17731                           ;Events.c: 191: USB_Print("Down\n");
 17732  0149DE  0EEC               	movlw	low STR_8
 17733  0149E0  0100               	movlb	0	; () banked
 17734  0149E2  6FB4               	movwf	USB_Print@pInput& (0+255),b
 17735  0149E4  0EFF               	movlw	high STR_8
 17736  0149E6  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 17737  0149E8  EC50  F0A7         	call	_USB_Print	;wreg free
 17738  0149EC                     l11195:
 17739                           
 17740                           ;Events.c: 193: }
 17741                           ;Events.c: 196: LED_Toggle(eLED1);
 17742  0149EC  0E00               	movlw	0
 17743  0149EE  EF2E  F0A5         	goto	_LED_Toggle
 17744  0149F2                     __end_of_Event_HMI_DownButton:
 17745                           	opt stack 0
 17746                           tosu	equ	0xFFF
 17747                           tosh	equ	0xFFE
 17748                           tosl	equ	0xFFD
 17749                           pclath	equ	0xFFA
 17750                           tblptru	equ	0xFF8
 17751                           tblptrh	equ	0xFF7
 17752                           tblptrl	equ	0xFF6
 17753                           tablat	equ	0xFF5
 17754                           prodh	equ	0xFF4
 17755                           prodl	equ	0xFF3
 17756                           intcon	equ	0xFF2
 17757                           indf0	equ	0xFEF
 17758                           postinc0	equ	0xFEE
 17759                           fsr0h	equ	0xFEA
 17760                           fsr0l	equ	0xFE9
 17761                           wreg	equ	0xFE8
 17762                           indf1	equ	0xFE7
 17763                           postdec1	equ	0xFE5
 17764                           fsr1h	equ	0xFE2
 17765                           fsr1l	equ	0xFE1
 17766                           indf2	equ	0xFDF
 17767                           postinc2	equ	0xFDE
 17768                           postdec2	equ	0xFDD
 17769                           plusw2	equ	0xFDB
 17770                           fsr2h	equ	0xFDA
 17771                           fsr2l	equ	0xFD9
 17772                           status	equ	0xFD8
 17773                           
 17774 ;; *************** function _Event_HMI_UpButton *****************
 17775 ;; Defined at:
 17776 ;;		line 156 in file "Events.c"
 17777 ;; Parameters:    Size  Location     Type
 17778 ;;  pState          1    wreg     unsigned char 
 17779 ;; Auto vars:     Size  Location     Type
 17780 ;;  pState          1   25[BANK0 ] unsigned char 
 17781 ;; Return value:  Size  Location     Type
 17782 ;;                  1    wreg      void 
 17783 ;; Registers used:
 17784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17785 ;; Tracked objects:
 17786 ;;		On entry : 0/0
 17787 ;;		On exit  : 0/0
 17788 ;;		Unchanged: 0/0
 17789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17794 ;;Total ram usage:        1 bytes
 17795 ;; Hardware stack levels used:    1
 17796 ;; Hardware stack levels required when called:   20
 17797 ;; This function calls:
 17798 ;;		_HMI_SetNumber
 17799 ;;		_HMI_SetUp
 17800 ;;		_LED_Toggle
 17801 ;;		_USB_Print
 17802 ;; This function is called by:
 17803 ;;		_HMI_Init
 17804 ;;		_Button_Poll
 17805 ;; This function uses a non-reentrant model
 17806 ;;
 17807                           
 17808                           	psect	text97
 17809  014A28                     __ptext97:
 17810                           	opt stack 0
 17811  014A28                     _Event_HMI_UpButton:
 17812                           	opt stack 7
 17813                           
 17814                           ;incstack = 0
 17815                           ;Event_HMI_UpButton@pState stored from wreg
 17816  014A28  0100               	movlb	0	; () banked
 17817  014A2A  6FC7               	movwf	Event_HMI_UpButton@pState& (0+255),b
 17818                           
 17819                           ;Events.c: 159: HMI_SetUp(pState);
 17820  014A2C  51C7               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 17821  014A2E  ECF3  F0A7         	call	_HMI_SetUp
 17822                           
 17823                           ;Events.c: 161: if (pState == 0)
 17824  014A32  0100               	movlb	0	; () banked
 17825  014A34  51C7               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 17826  014A36  E10F               	bnz	l11183
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;Events.c: 162: {
 17830                           ;Events.c: 163: val += 1;
 17831  014A38  4B8D               	infsnz	_val& (0+255),f,b
 17832  014A3A  2B8E               	incf	(_val+1)& (0+255),f,b
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;Events.c: 164: HMI_SetNumber(val);
 17836  014A3C  C08D  F0BF         	movff	_val,HMI_SetNumber@pInput
 17837  014A40  C08E  F0C0         	movff	_val+1,HMI_SetNumber@pInput+1
 17838  014A44  EC3E  F0A7         	call	_HMI_SetNumber	;wreg free
 17839                           
 17840                           ;Events.c: 170: USB_Print("Up\n");
 17841  014A48  0EF8               	movlw	low STR_7
 17842  014A4A  0100               	movlb	0	; () banked
 17843  014A4C  6FB4               	movwf	USB_Print@pInput& (0+255),b
 17844  014A4E  0EFF               	movlw	high STR_7
 17845  014A50  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 17846  014A52  EC50  F0A7         	call	_USB_Print	;wreg free
 17847  014A56                     l11183:
 17848                           
 17849                           ;Events.c: 172: }
 17850                           ;Events.c: 175: LED_Toggle(eLED1);
 17851  014A56  0E00               	movlw	0
 17852  014A58  EF2E  F0A5         	goto	_LED_Toggle
 17853  014A5C                     __end_of_Event_HMI_UpButton:
 17854                           	opt stack 0
 17855                           tosu	equ	0xFFF
 17856                           tosh	equ	0xFFE
 17857                           tosl	equ	0xFFD
 17858                           pclath	equ	0xFFA
 17859                           tblptru	equ	0xFF8
 17860                           tblptrh	equ	0xFF7
 17861                           tblptrl	equ	0xFF6
 17862                           tablat	equ	0xFF5
 17863                           prodh	equ	0xFF4
 17864                           prodl	equ	0xFF3
 17865                           intcon	equ	0xFF2
 17866                           indf0	equ	0xFEF
 17867                           postinc0	equ	0xFEE
 17868                           fsr0h	equ	0xFEA
 17869                           fsr0l	equ	0xFE9
 17870                           wreg	equ	0xFE8
 17871                           indf1	equ	0xFE7
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           plusw2	equ	0xFDB
 17879                           fsr2h	equ	0xFDA
 17880                           fsr2l	equ	0xFD9
 17881                           status	equ	0xFD8
 17882                           
 17883 ;; *************** function _Event_HMI_RightButton *****************
 17884 ;; Defined at:
 17885 ;;		line 133 in file "Events.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;  pState          1    wreg     unsigned char 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  pState          1   25[BANK0 ] unsigned char 
 17890 ;; Return value:  Size  Location     Type
 17891 ;;                  1    wreg      void 
 17892 ;; Registers used:
 17893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;Total ram usage:        1 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:   20
 17906 ;; This function calls:
 17907 ;;		_HMI_SetBar
 17908 ;;		_HMI_SetRight
 17909 ;;		_LED_Toggle
 17910 ;;		_USB_Print
 17911 ;; This function is called by:
 17912 ;;		_HMI_Init
 17913 ;;		_Button_Poll
 17914 ;; This function uses a non-reentrant model
 17915 ;;
 17916                           
 17917                           	psect	text98
 17918  01477C                     __ptext98:
 17919                           	opt stack 0
 17920  01477C                     _Event_HMI_RightButton:
 17921                           	opt stack 7
 17922                           
 17923                           ;incstack = 0
 17924                           ;Event_HMI_RightButton@pState stored from wreg
 17925  01477C  0100               	movlb	0	; () banked
 17926  01477E  6FC7               	movwf	Event_HMI_RightButton@pState& (0+255),b
 17927                           
 17928                           ;Events.c: 136: HMI_SetRight(pState);
 17929  014780  51C7               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 17930  014782  ECFD  F0A7         	call	_HMI_SetRight
 17931                           
 17932                           ;Events.c: 138: if (pState == 0)
 17933  014786  0100               	movlb	0	; () banked
 17934  014788  51C7               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 17935  01478A  E113               	bnz	l11171
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;Events.c: 139: {
 17939                           ;Events.c: 140: if (pShiftVal == 0)
 17940  01478C  518B               	movf	_pShiftVal& (0+255),w,b
 17941  01478E  118C               	iorwf	(_pShiftVal+1)& (0+255),w,b
 17942  014790  E102               	bnz	l11165
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;Events.c: 141: pShiftVal = 0xFF00;
 17946  014792  698C               	setf	(_pShiftVal+1)& (0+255),b
 17947  014794  6B8B               	clrf	_pShiftVal& (0+255),b
 17948  014796                     l11165:
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;Events.c: 142: pShiftVal >>= 1;
 17952  014796  0100               	movlb	0	; () banked
 17953  014798  90D8               	bcf	status,0,c
 17954  01479A  338C               	rrcf	(_pShiftVal+1)& (0+255),f,b
 17955  01479C  338B               	rrcf	_pShiftVal& (0+255),f,b
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;Events.c: 148: USB_Print("Right\n");
 17959  01479E  0EE5               	movlw	low STR_6
 17960  0147A0  6FB4               	movwf	USB_Print@pInput& (0+255),b
 17961  0147A2  0EFF               	movlw	high STR_6
 17962  0147A4  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 17963  0147A6  EC50  F0A7         	call	_USB_Print	;wreg free
 17964                           
 17965                           ;Events.c: 151: HMI_SetBar(pShiftVal & 0xFF);
 17966  0147AA  0100               	movlb	0	; () banked
 17967  0147AC  518B               	movf	_pShiftVal& (0+255),w,b
 17968  0147AE  EC43  F0A8         	call	_HMI_SetBar
 17969  0147B2                     l11171:
 17970                           
 17971                           ;Events.c: 152: }
 17972                           ;Events.c: 154: LED_Toggle(eLED1);
 17973  0147B2  0E00               	movlw	0
 17974  0147B4  EF2E  F0A5         	goto	_LED_Toggle
 17975  0147B8                     __end_of_Event_HMI_RightButton:
 17976                           	opt stack 0
 17977                           tosu	equ	0xFFF
 17978                           tosh	equ	0xFFE
 17979                           tosl	equ	0xFFD
 17980                           pclath	equ	0xFFA
 17981                           tblptru	equ	0xFF8
 17982                           tblptrh	equ	0xFF7
 17983                           tblptrl	equ	0xFF6
 17984                           tablat	equ	0xFF5
 17985                           prodh	equ	0xFF4
 17986                           prodl	equ	0xFF3
 17987                           intcon	equ	0xFF2
 17988                           indf0	equ	0xFEF
 17989                           postinc0	equ	0xFEE
 17990                           fsr0h	equ	0xFEA
 17991                           fsr0l	equ	0xFE9
 17992                           wreg	equ	0xFE8
 17993                           indf1	equ	0xFE7
 17994                           postdec1	equ	0xFE5
 17995                           fsr1h	equ	0xFE2
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           plusw2	equ	0xFDB
 18001                           fsr2h	equ	0xFDA
 18002                           fsr2l	equ	0xFD9
 18003                           status	equ	0xFD8
 18004                           
 18005 ;; *************** function _Event_HMI_LeftButton *****************
 18006 ;; Defined at:
 18007 ;;		line 107 in file "Events.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;  pState          1    wreg     unsigned char 
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;  pState          1   25[BANK0 ] unsigned char 
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  1    wreg      void 
 18014 ;; Registers used:
 18015 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        1 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:   20
 18028 ;; This function calls:
 18029 ;;		_HMI_SetBar
 18030 ;;		_HMI_SetLeft
 18031 ;;		_LED_Toggle
 18032 ;;		_USB_Print
 18033 ;; This function is called by:
 18034 ;;		_HMI_Init
 18035 ;;		_Button_Poll
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           	psect	text99
 18040  0143C0                     __ptext99:
 18041                           	opt stack 0
 18042  0143C0                     _Event_HMI_LeftButton:
 18043                           	opt stack 7
 18044                           
 18045                           ;incstack = 0
 18046                           ;Event_HMI_LeftButton@pState stored from wreg
 18047  0143C0  0100               	movlb	0	; () banked
 18048  0143C2  6FC7               	movwf	Event_HMI_LeftButton@pState& (0+255),b
 18049                           
 18050                           ;Events.c: 110: HMI_SetLeft(pState);
 18051  0143C4  51C7               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 18052  0143C6  EC07  F0A8         	call	_HMI_SetLeft
 18053                           
 18054                           ;Events.c: 112: if (pState == 0)
 18055  0143CA  0100               	movlb	0	; () banked
 18056  0143CC  51C7               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 18057  0143CE  E11A               	bnz	l11155
 18058                           
 18059                           ; BSR set to: 0
 18060                           ;Events.c: 113: {
 18061                           ;Events.c: 114: pShiftVal <<= 1;
 18062  0143D0  90D8               	bcf	status,0,c
 18063  0143D2  378B               	rlcf	_pShiftVal& (0+255),f,b
 18064  0143D4  378C               	rlcf	(_pShiftVal+1)& (0+255),f,b
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;Events.c: 115: if (pShiftVal == 0xFF00)
 18068  0143D6  298C               	incf	(_pShiftVal+1)& (0+255),w,b
 18069  0143D8  118B               	iorwf	_pShiftVal& (0+255),w,b
 18070  0143DA  E103               	bnz	l11147
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;Events.c: 116: pShiftVal = 0;
 18074  0143DC  6B8C               	clrf	(_pShiftVal+1)& (0+255),b
 18075  0143DE  6B8B               	clrf	_pShiftVal& (0+255),b
 18076  0143E0  D006               	goto	l11151
 18077  0143E2                     l11147:
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;Events.c: 117: else if (pShiftVal < 0xFF)
 18081  0143E2  0100               	movlb	0	; () banked
 18082  0143E4  518C               	movf	(_pShiftVal+1)& (0+255),w,b
 18083  0143E6  E103               	bnz	l11151
 18084  0143E8  298B               	incf	_pShiftVal& (0+255),w,b
 18085  0143EA  E201               	bc	l11151
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;Events.c: 118: pShiftVal |= 1;
 18089  0143EC  818B               	bsf	_pShiftVal& (0+255),0,b
 18090  0143EE                     l11151:
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;Events.c: 124: USB_Print("Left\n");
 18094  0143EE  0EF2               	movlw	low STR_5
 18095  0143F0  0100               	movlb	0	; () banked
 18096  0143F2  6FB4               	movwf	USB_Print@pInput& (0+255),b
 18097  0143F4  0EFF               	movlw	high STR_5
 18098  0143F6  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 18099  0143F8  EC50  F0A7         	call	_USB_Print	;wreg free
 18100                           
 18101                           ;Events.c: 127: HMI_SetBar(pShiftVal & 0xFF);
 18102  0143FC  0100               	movlb	0	; () banked
 18103  0143FE  518B               	movf	_pShiftVal& (0+255),w,b
 18104  014400  EC43  F0A8         	call	_HMI_SetBar
 18105  014404                     l11155:
 18106                           
 18107                           ;Events.c: 128: }
 18108                           ;Events.c: 131: LED_Toggle(eLED1);
 18109  014404  0E00               	movlw	0
 18110  014406  EF2E  F0A5         	goto	_LED_Toggle
 18111  01440A                     __end_of_Event_HMI_LeftButton:
 18112                           	opt stack 0
 18113                           tosu	equ	0xFFF
 18114                           tosh	equ	0xFFE
 18115                           tosl	equ	0xFFD
 18116                           pclath	equ	0xFFA
 18117                           tblptru	equ	0xFF8
 18118                           tblptrh	equ	0xFF7
 18119                           tblptrl	equ	0xFF6
 18120                           tablat	equ	0xFF5
 18121                           prodh	equ	0xFF4
 18122                           prodl	equ	0xFF3
 18123                           intcon	equ	0xFF2
 18124                           indf0	equ	0xFEF
 18125                           postinc0	equ	0xFEE
 18126                           fsr0h	equ	0xFEA
 18127                           fsr0l	equ	0xFE9
 18128                           wreg	equ	0xFE8
 18129                           indf1	equ	0xFE7
 18130                           postdec1	equ	0xFE5
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           plusw2	equ	0xFDB
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _Event_HMI_DIPSwitch *****************
 18142 ;; Defined at:
 18143 ;;		line 59 in file "Events.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  pState          1    wreg     unsigned char 
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;  pState          1   25[BANK0 ] unsigned char 
 18148 ;;  Bar             1   26[BANK0 ] unsigned char 
 18149 ;; Return value:  Size  Location     Type
 18150 ;;                  1    wreg      void 
 18151 ;; Registers used:
 18152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18153 ;; Tracked objects:
 18154 ;;		On entry : 0/0
 18155 ;;		On exit  : 0/0
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18162 ;;Total ram usage:        2 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:   20
 18165 ;; This function calls:
 18166 ;;		_HMI_GetBar
 18167 ;;		_HMI_SetBar
 18168 ;;		_LED_Toggle
 18169 ;;		_USB_Print
 18170 ;; This function is called by:
 18171 ;;		_HMI_Init
 18172 ;;		_Button_Poll
 18173 ;; This function uses a non-reentrant model
 18174 ;;
 18175                           
 18176                           	psect	text100
 18177  014C0A                     __ptext100:
 18178                           	opt stack 0
 18179  014C0A                     _Event_HMI_DIPSwitch:
 18180                           	opt stack 7
 18181                           
 18182                           ;incstack = 0
 18183                           ;Event_HMI_DIPSwitch@pState stored from wreg
 18184  014C0A  0100               	movlb	0	; () banked
 18185  014C0C  6FC7               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
 18186                           
 18187                           ;Events.c: 61: UINT8 Bar = HMI_GetBar();
 18188  014C0E  EC50  F0A8         	call	_HMI_GetBar	;wreg free
 18189  014C12  0100               	movlb	0	; () banked
 18190  014C14  6FC8               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
 18191                           
 18192                           ; BSR set to: 0
 18193                           ;Events.c: 62: HMI_SetBar(pState | Bar);
 18194  014C16  11C7               	iorwf	Event_HMI_DIPSwitch@pState& (0+255),w,b
 18195  014C18  EC43  F0A8         	call	_HMI_SetBar
 18196                           
 18197                           ;Events.c: 64: Bar &= 0xF0;
 18198  014C1C  0EF0               	movlw	240
 18199  014C1E  0100               	movlb	0	; () banked
 18200  014C20  17C8               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
 18201                           
 18202                           ; BSR set to: 0
 18203                           ;Events.c: 65: pState &= 0x0F;
 18204  014C22  0E0F               	movlw	15
 18205  014C24  17C7               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;Events.c: 68: USB_Print("HMI DIP\n");
 18209  014C26  0ECE               	movlw	low STR_3
 18210  014C28  6FB4               	movwf	USB_Print@pInput& (0+255),b
 18211  014C2A  0EFF               	movlw	high STR_3
 18212  014C2C  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 18213  014C2E  EC50  F0A7         	call	_USB_Print	;wreg free
 18214                           
 18215                           ;Events.c: 71: LED_Toggle(eLED1);
 18216  014C32  0E00               	movlw	0
 18217  014C34  EF2E  F0A5         	goto	_LED_Toggle
 18218  014C38                     __end_of_Event_HMI_DIPSwitch:
 18219                           	opt stack 0
 18220                           tosu	equ	0xFFF
 18221                           tosh	equ	0xFFE
 18222                           tosl	equ	0xFFD
 18223                           pclath	equ	0xFFA
 18224                           tblptru	equ	0xFF8
 18225                           tblptrh	equ	0xFF7
 18226                           tblptrl	equ	0xFF6
 18227                           tablat	equ	0xFF5
 18228                           prodh	equ	0xFF4
 18229                           prodl	equ	0xFF3
 18230                           intcon	equ	0xFF2
 18231                           indf0	equ	0xFEF
 18232                           postinc0	equ	0xFEE
 18233                           fsr0h	equ	0xFEA
 18234                           fsr0l	equ	0xFE9
 18235                           wreg	equ	0xFE8
 18236                           indf1	equ	0xFE7
 18237                           postdec1	equ	0xFE5
 18238                           fsr1h	equ	0xFE2
 18239                           fsr1l	equ	0xFE1
 18240                           indf2	equ	0xFDF
 18241                           postinc2	equ	0xFDE
 18242                           postdec2	equ	0xFDD
 18243                           plusw2	equ	0xFDB
 18244                           fsr2h	equ	0xFDA
 18245                           fsr2l	equ	0xFD9
 18246                           status	equ	0xFD8
 18247                           
 18248 ;; *************** function _Event_TestButton *****************
 18249 ;; Defined at:
 18250 ;;		line 76 in file "Events.c"
 18251 ;; Parameters:    Size  Location     Type
 18252 ;;  pState          1    wreg     unsigned char 
 18253 ;; Auto vars:     Size  Location     Type
 18254 ;;  pState          1   25[BANK0 ] unsigned char 
 18255 ;; Return value:  Size  Location     Type
 18256 ;;                  1    wreg      void 
 18257 ;; Registers used:
 18258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;Total ram usage:        1 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:   20
 18271 ;; This function calls:
 18272 ;;		_HMI_SetButton
 18273 ;;		_HMI_SetNumber
 18274 ;;		_LED_Toggle
 18275 ;;		_USB_Print
 18276 ;; This function is called by:
 18277 ;;		_FunctInitButton
 18278 ;;		_Button_Poll
 18279 ;; This function uses a non-reentrant model
 18280 ;;
 18281                           
 18282                           	psect	text101
 18283  0147B8                     __ptext101:
 18284                           	opt stack 0
 18285  0147B8                     _Event_TestButton:
 18286                           	opt stack 7
 18287                           
 18288                           ;incstack = 0
 18289                           ;Event_TestButton@pState stored from wreg
 18290  0147B8  0100               	movlb	0	; () banked
 18291  0147BA  6FC7               	movwf	Event_TestButton@pState& (0+255),b
 18292                           
 18293                           ;Events.c: 80: static UINT8 j = 0;
 18294                           ;Events.c: 85: if (pState == 0)
 18295  0147BC  51C7               	movf	Event_TestButton@pState& (0+255),w,b
 18296  0147BE  E117               	bnz	l11135
 18297                           
 18298                           ; BSR set to: 0
 18299                           ;Events.c: 86: {
 18300                           ;Events.c: 91: USB_Print("Test Button\n");
 18301  0147C0  0EC1               	movlw	low STR_4
 18302  0147C2  6FB4               	movwf	USB_Print@pInput& (0+255),b
 18303  0147C4  0EFF               	movlw	high STR_4
 18304  0147C6  6FB5               	movwf	(USB_Print@pInput+1)& (0+255),b
 18305  0147C8  EC50  F0A7         	call	_USB_Print	;wreg free
 18306                           
 18307                           ;Events.c: 93: j++;
 18308  0147CC  0100               	movlb	0	; () banked
 18309  0147CE  2B8F               	incf	Event_TestButton@j& (0+255),f,b
 18310                           
 18311                           ; BSR set to: 0
 18312                           ;Events.c: 94: val += j;
 18313  0147D0  518F               	movf	Event_TestButton@j& (0+255),w,b
 18314  0147D2  278D               	addwf	_val& (0+255),f,b
 18315  0147D4  0E00               	movlw	0
 18316  0147D6  238E               	addwfc	(_val+1)& (0+255),f,b
 18317                           
 18318                           ; BSR set to: 0
 18319                           ;Events.c: 95: HMI_SetNumber(val);
 18320  0147D8  C08D  F0BF         	movff	_val,HMI_SetNumber@pInput
 18321  0147DC  C08E  F0C0         	movff	_val+1,HMI_SetNumber@pInput+1
 18322  0147E0  EC3E  F0A7         	call	_HMI_SetNumber	;wreg free
 18323                           
 18324                           ;Events.c: 98: HMI_SetButton(j&3);
 18325  0147E4  0100               	movlb	0	; () banked
 18326  0147E6  518F               	movf	Event_TestButton@j& (0+255),w,b
 18327  0147E8  0B03               	andlw	3
 18328  0147EA  EC1D  F09D         	call	_HMI_SetButton
 18329  0147EE                     l11135:
 18330                           
 18331                           ;Events.c: 99: }
 18332                           ;Events.c: 103: LED_Toggle(eLED1);
 18333  0147EE  0E00               	movlw	0
 18334  0147F0  EF2E  F0A5         	goto	_LED_Toggle
 18335  0147F4                     __end_of_Event_TestButton:
 18336                           	opt stack 0
 18337                           tosu	equ	0xFFF
 18338                           tosh	equ	0xFFE
 18339                           tosl	equ	0xFFD
 18340                           pclath	equ	0xFFA
 18341                           tblptru	equ	0xFF8
 18342                           tblptrh	equ	0xFF7
 18343                           tblptrl	equ	0xFF6
 18344                           tablat	equ	0xFF5
 18345                           prodh	equ	0xFF4
 18346                           prodl	equ	0xFF3
 18347                           intcon	equ	0xFF2
 18348                           indf0	equ	0xFEF
 18349                           postinc0	equ	0xFEE
 18350                           fsr0h	equ	0xFEA
 18351                           fsr0l	equ	0xFE9
 18352                           wreg	equ	0xFE8
 18353                           indf1	equ	0xFE7
 18354                           postdec1	equ	0xFE5
 18355                           fsr1h	equ	0xFE2
 18356                           fsr1l	equ	0xFE1
 18357                           indf2	equ	0xFDF
 18358                           postinc2	equ	0xFDE
 18359                           postdec2	equ	0xFDD
 18360                           plusw2	equ	0xFDB
 18361                           fsr2h	equ	0xFDA
 18362                           fsr2l	equ	0xFD9
 18363                           status	equ	0xFD8
 18364                           
 18365 ;; *************** function _HMI_SetButton *****************
 18366 ;; Defined at:
 18367 ;;		line 145 in file "HMI.c"
 18368 ;; Parameters:    Size  Location     Type
 18369 ;;  pValue          1    wreg     unsigned char 
 18370 ;; Auto vars:     Size  Location     Type
 18371 ;;  pValue          1    6[BANK0 ] unsigned char 
 18372 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 18373 ;;  v               1    7[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;                  1    wreg      void 
 18376 ;; Registers used:
 18377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18387 ;;Total ram usage:        8 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:   14
 18390 ;; This function calls:
 18391 ;;		Nothing
 18392 ;; This function is called by:
 18393 ;;		_Event_TestButton
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text102
 18398  013A3A                     __ptext102:
 18399                           	opt stack 0
 18400  013A3A                     _HMI_SetButton:
 18401                           	opt stack 12
 18402                           
 18403                           ;incstack = 0
 18404                           ;HMI_SetButton@pValue stored from wreg
 18405  013A3A  0100               	movlb	0	; () banked
 18406  013A3C  6FB4               	movwf	HMI_SetButton@pValue& (0+255),b
 18407                           
 18408                           ;HMI.c: 147: const UINT8 reindex[] = {0, 2, 1, 3};
 18409  013A3E  0E08               	movlw	low HMI_SetButton@F8267
 18410  013A40  6EF6               	movwf	tblptrl,c
 18411  013A42                     	if	1	;There is more than 1 active tblptr byte
 18412  013A42  0EFD               	movlw	high HMI_SetButton@F8267
 18413  013A44  6EF7               	movwf	tblptrh,c
 18414  013A46                     	endif
 18415  013A46                     	if	1	;There are 3 active tblptr bytes
 18416  013A46  0E00               	movlw	low (HMI_SetButton@F8267 shr (0+16))
 18417  013A48  6EF8               	movwf	tblptru,c
 18418  013A4A                     	endif
 18419  013A4A  0009               	tblrd		*+
 18420  013A4C  CFF5 F0B0          	movff	tablat,HMI_SetButton@reindex
 18421  013A50  0009               	tblrd		*+
 18422  013A52  CFF5 F0B1          	movff	tablat,HMI_SetButton@reindex+1
 18423  013A56  0009               	tblrd		*+
 18424  013A58  CFF5 F0B2          	movff	tablat,HMI_SetButton@reindex+2
 18425  013A5C  000A               	tblrd		*-
 18426  013A5E  CFF5 F0B3          	movff	tablat,HMI_SetButton@reindex+3
 18427                           
 18428                           ;HMI.c: 148: UINT8 v = 0b00010001;
 18429  013A62  0E11               	movlw	17
 18430  013A64  6FB5               	movwf	HMI_SetButton@v& (0+255),b
 18431                           
 18432                           ; BSR set to: 0
 18433                           ;HMI.c: 149: pValue &= 3;
 18434  013A66  0E03               	movlw	3
 18435  013A68  17B4               	andwf	HMI_SetButton@pValue& (0+255),f,b
 18436                           
 18437                           ; BSR set to: 0
 18438                           ;HMI.c: 150: v = v << reindex[pValue];
 18439  013A6A  51B4               	movf	HMI_SetButton@pValue& (0+255),w,b
 18440  013A6C  0D01               	mullw	1
 18441  013A6E  0EB0               	movlw	low HMI_SetButton@reindex
 18442  013A70  24F3               	addwf	prodl,w,c
 18443  013A72  6ED9               	movwf	fsr2l,c
 18444  013A74  0E00               	movlw	high HMI_SetButton@reindex
 18445  013A76  20F4               	addwfc	prodh,w,c
 18446  013A78  6EDA               	movwf	fsr2h,c
 18447  013A7A  50DF               	movf	indf2,w,c
 18448  013A7C  6FAE               	movwf	??_HMI_SetButton& (0+255),b
 18449  013A7E  C0B5  F0AF         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 18450  013A82  2BAE               	incf	??_HMI_SetButton& (0+255),f,b
 18451  013A84  D003               	goto	u7294
 18452  013A86                     u7295:
 18453  013A86  0100               	movlb	0	; () banked
 18454  013A88  90D8               	bcf	status,0,c
 18455  013A8A  37AF               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 18456  013A8C                     u7294:
 18457  013A8C  0100               	movlb	0	; () banked
 18458  013A8E  2FAE               	decfsz	??_HMI_SetButton& (0+255),f,b
 18459  013A90  D7FA               	goto	u7295
 18460  013A92  51AF               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 18461  013A94  6FB5               	movwf	HMI_SetButton@v& (0+255),b
 18462                           
 18463                           ; BSR set to: 0
 18464                           ;HMI.c: 151: v = v >> 4;
 18465  013A96  39B5               	swapf	HMI_SetButton@v& (0+255),w,b
 18466  013A98  0B0F               	andlw	15
 18467  013A9A  6FB5               	movwf	HMI_SetButton@v& (0+255),b
 18468                           
 18469                           ; BSR set to: 0
 18470                           ;HMI.c: 152: v = v & 0x0F;
 18471  013A9C  51B5               	movf	HMI_SetButton@v& (0+255),w,b
 18472  013A9E  0B0F               	andlw	15
 18473  013AA0  6FB5               	movwf	HMI_SetButton@v& (0+255),b
 18474                           
 18475                           ; BSR set to: 0
 18476                           ;HMI.c: 153: HMIBoard.pButton = v;
 18477  013AA2  0101               	movlb	1	; () banked
 18478  013AA4  5139               	movf	(_HMIBoard+6)& (0+255),w,b
 18479  013AA6  0100               	movlb	0	; () banked
 18480  013AA8  19B5               	xorwf	HMI_SetButton@v& (0+255),w,b
 18481  013AAA  0BF0               	andlw	-16
 18482  013AAC  19B5               	xorwf	HMI_SetButton@v& (0+255),w,b
 18483  013AAE  0101               	movlb	1	; () banked
 18484  013AB0  6F39               	movwf	(_HMIBoard+6)& (0+255),b
 18485                           
 18486                           ; BSR set to: 1
 18487  013AB2  0012               	return		;funcret
 18488  013AB4                     __end_of_HMI_SetButton:
 18489                           	opt stack 0
 18490                           tosu	equ	0xFFF
 18491                           tosh	equ	0xFFE
 18492                           tosl	equ	0xFFD
 18493                           pclath	equ	0xFFA
 18494                           tblptru	equ	0xFF8
 18495                           tblptrh	equ	0xFF7
 18496                           tblptrl	equ	0xFF6
 18497                           tablat	equ	0xFF5
 18498                           prodh	equ	0xFF4
 18499                           prodl	equ	0xFF3
 18500                           intcon	equ	0xFF2
 18501                           indf0	equ	0xFEF
 18502                           postinc0	equ	0xFEE
 18503                           fsr0h	equ	0xFEA
 18504                           fsr0l	equ	0xFE9
 18505                           wreg	equ	0xFE8
 18506                           indf1	equ	0xFE7
 18507                           postdec1	equ	0xFE5
 18508                           fsr1h	equ	0xFE2
 18509                           fsr1l	equ	0xFE1
 18510                           indf2	equ	0xFDF
 18511                           postinc2	equ	0xFDE
 18512                           postdec2	equ	0xFDD
 18513                           plusw2	equ	0xFDB
 18514                           fsr2h	equ	0xFDA
 18515                           fsr2l	equ	0xFD9
 18516                           status	equ	0xFD8
 18517                           
 18518 ;; *************** function _HMI_SetUp *****************
 18519 ;; Defined at:
 18520 ;;		line 133 in file "HMI.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;  pValue          1    wreg     unsigned char 
 18523 ;; Auto vars:     Size  Location     Type
 18524 ;;  pValue          1    0[BANK0 ] unsigned char 
 18525 ;; Return value:  Size  Location     Type
 18526 ;;                  1    wreg      void 
 18527 ;; Registers used:
 18528 ;;		wreg
 18529 ;; Tracked objects:
 18530 ;;		On entry : 0/0
 18531 ;;		On exit  : 0/0
 18532 ;;		Unchanged: 0/0
 18533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18538 ;;Total ram usage:        1 bytes
 18539 ;; Hardware stack levels used:    1
 18540 ;; Hardware stack levels required when called:   14
 18541 ;; This function calls:
 18542 ;;		Nothing
 18543 ;; This function is called by:
 18544 ;;		_Event_HMI_UpButton
 18545 ;; This function uses a non-reentrant model
 18546 ;;
 18547                           
 18548                           	psect	text103
 18549  014FE6                     __ptext103:
 18550                           	opt stack 0
 18551  014FE6                     _HMI_SetUp:
 18552                           	opt stack 12
 18553                           
 18554                           ; BSR set to: 1
 18555                           ;incstack = 0
 18556                           ;HMI_SetUp@pValue stored from wreg
 18557  014FE6  0100               	movlb	0	; () banked
 18558  014FE8  6FAE               	movwf	HMI_SetUp@pValue& (0+255),b
 18559                           
 18560                           ;HMI.c: 135: HMIBoard.UPLED = pValue;
 18561  014FEA  B1AE               	btfsc	HMI_SetUp@pValue& (0+255),0,b
 18562  014FEC  D003               	bra	u7275
 18563  014FEE  0101               	movlb	1	; () banked
 18564  014FF0  9139               	bcf	(_HMIBoard+6)& (0+255),0,b
 18565  014FF2  D002               	bra	u7276
 18566  014FF4                     u7275:
 18567  014FF4  0101               	movlb	1	; () banked
 18568  014FF6  8139               	bsf	(_HMIBoard+6)& (0+255),0,b
 18569  014FF8                     u7276:
 18570                           
 18571                           ; BSR set to: 1
 18572  014FF8  0012               	return		;funcret
 18573  014FFA                     __end_of_HMI_SetUp:
 18574                           	opt stack 0
 18575                           tosu	equ	0xFFF
 18576                           tosh	equ	0xFFE
 18577                           tosl	equ	0xFFD
 18578                           pclath	equ	0xFFA
 18579                           tblptru	equ	0xFF8
 18580                           tblptrh	equ	0xFF7
 18581                           tblptrl	equ	0xFF6
 18582                           tablat	equ	0xFF5
 18583                           prodh	equ	0xFF4
 18584                           prodl	equ	0xFF3
 18585                           intcon	equ	0xFF2
 18586                           indf0	equ	0xFEF
 18587                           postinc0	equ	0xFEE
 18588                           fsr0h	equ	0xFEA
 18589                           fsr0l	equ	0xFE9
 18590                           wreg	equ	0xFE8
 18591                           indf1	equ	0xFE7
 18592                           postdec1	equ	0xFE5
 18593                           fsr1h	equ	0xFE2
 18594                           fsr1l	equ	0xFE1
 18595                           indf2	equ	0xFDF
 18596                           postinc2	equ	0xFDE
 18597                           postdec2	equ	0xFDD
 18598                           plusw2	equ	0xFDB
 18599                           fsr2h	equ	0xFDA
 18600                           fsr2l	equ	0xFD9
 18601                           status	equ	0xFD8
 18602                           
 18603 ;; *************** function _HMI_SetRight *****************
 18604 ;; Defined at:
 18605 ;;		line 127 in file "HMI.c"
 18606 ;; Parameters:    Size  Location     Type
 18607 ;;  pValue          1    wreg     unsigned char 
 18608 ;; Auto vars:     Size  Location     Type
 18609 ;;  pValue          1    0[BANK0 ] unsigned char 
 18610 ;; Return value:  Size  Location     Type
 18611 ;;                  1    wreg      void 
 18612 ;; Registers used:
 18613 ;;		wreg
 18614 ;; Tracked objects:
 18615 ;;		On entry : 0/0
 18616 ;;		On exit  : 0/0
 18617 ;;		Unchanged: 0/0
 18618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18623 ;;Total ram usage:        1 bytes
 18624 ;; Hardware stack levels used:    1
 18625 ;; Hardware stack levels required when called:   14
 18626 ;; This function calls:
 18627 ;;		Nothing
 18628 ;; This function is called by:
 18629 ;;		_Event_HMI_RightButton
 18630 ;; This function uses a non-reentrant model
 18631 ;;
 18632                           
 18633                           	psect	text104
 18634  014FFA                     __ptext104:
 18635                           	opt stack 0
 18636  014FFA                     _HMI_SetRight:
 18637                           	opt stack 12
 18638                           
 18639                           ; BSR set to: 1
 18640                           ;incstack = 0
 18641                           ;HMI_SetRight@pValue stored from wreg
 18642  014FFA  0100               	movlb	0	; () banked
 18643  014FFC  6FAE               	movwf	HMI_SetRight@pValue& (0+255),b
 18644                           
 18645                           ;HMI.c: 129: HMIBoard.RIGHTLED = pValue;
 18646  014FFE  B1AE               	btfsc	HMI_SetRight@pValue& (0+255),0,b
 18647  015000  D003               	bra	u7265
 18648  015002  0101               	movlb	1	; () banked
 18649  015004  9739               	bcf	(_HMIBoard+6)& (0+255),3,b
 18650  015006  D002               	bra	u7266
 18651  015008                     u7265:
 18652  015008  0101               	movlb	1	; () banked
 18653  01500A  8739               	bsf	(_HMIBoard+6)& (0+255),3,b
 18654  01500C                     u7266:
 18655                           
 18656                           ; BSR set to: 1
 18657  01500C  0012               	return		;funcret
 18658  01500E                     __end_of_HMI_SetRight:
 18659                           	opt stack 0
 18660                           tosu	equ	0xFFF
 18661                           tosh	equ	0xFFE
 18662                           tosl	equ	0xFFD
 18663                           pclath	equ	0xFFA
 18664                           tblptru	equ	0xFF8
 18665                           tblptrh	equ	0xFF7
 18666                           tblptrl	equ	0xFF6
 18667                           tablat	equ	0xFF5
 18668                           prodh	equ	0xFF4
 18669                           prodl	equ	0xFF3
 18670                           intcon	equ	0xFF2
 18671                           indf0	equ	0xFEF
 18672                           postinc0	equ	0xFEE
 18673                           fsr0h	equ	0xFEA
 18674                           fsr0l	equ	0xFE9
 18675                           wreg	equ	0xFE8
 18676                           indf1	equ	0xFE7
 18677                           postdec1	equ	0xFE5
 18678                           fsr1h	equ	0xFE2
 18679                           fsr1l	equ	0xFE1
 18680                           indf2	equ	0xFDF
 18681                           postinc2	equ	0xFDE
 18682                           postdec2	equ	0xFDD
 18683                           plusw2	equ	0xFDB
 18684                           fsr2h	equ	0xFDA
 18685                           fsr2l	equ	0xFD9
 18686                           status	equ	0xFD8
 18687                           
 18688 ;; *************** function _HMI_SetLeft *****************
 18689 ;; Defined at:
 18690 ;;		line 121 in file "HMI.c"
 18691 ;; Parameters:    Size  Location     Type
 18692 ;;  pValue          1    wreg     unsigned char 
 18693 ;; Auto vars:     Size  Location     Type
 18694 ;;  pValue          1    0[BANK0 ] unsigned char 
 18695 ;; Return value:  Size  Location     Type
 18696 ;;                  1    wreg      void 
 18697 ;; Registers used:
 18698 ;;		wreg
 18699 ;; Tracked objects:
 18700 ;;		On entry : 0/0
 18701 ;;		On exit  : 0/0
 18702 ;;		Unchanged: 0/0
 18703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18708 ;;Total ram usage:        1 bytes
 18709 ;; Hardware stack levels used:    1
 18710 ;; Hardware stack levels required when called:   14
 18711 ;; This function calls:
 18712 ;;		Nothing
 18713 ;; This function is called by:
 18714 ;;		_Event_HMI_LeftButton
 18715 ;; This function uses a non-reentrant model
 18716 ;;
 18717                           
 18718                           	psect	text105
 18719  01500E                     __ptext105:
 18720                           	opt stack 0
 18721  01500E                     _HMI_SetLeft:
 18722                           	opt stack 12
 18723                           
 18724                           ; BSR set to: 1
 18725                           ;incstack = 0
 18726                           ;HMI_SetLeft@pValue stored from wreg
 18727  01500E  0100               	movlb	0	; () banked
 18728  015010  6FAE               	movwf	HMI_SetLeft@pValue& (0+255),b
 18729                           
 18730                           ;HMI.c: 123: HMIBoard.LEFTLED = pValue;
 18731  015012  B1AE               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
 18732  015014  D003               	bra	u7255
 18733  015016  0101               	movlb	1	; () banked
 18734  015018  9539               	bcf	(_HMIBoard+6)& (0+255),2,b
 18735  01501A  D002               	bra	u7256
 18736  01501C                     u7255:
 18737  01501C  0101               	movlb	1	; () banked
 18738  01501E  8539               	bsf	(_HMIBoard+6)& (0+255),2,b
 18739  015020                     u7256:
 18740                           
 18741                           ; BSR set to: 1
 18742  015020  0012               	return		;funcret
 18743  015022                     __end_of_HMI_SetLeft:
 18744                           	opt stack 0
 18745                           tosu	equ	0xFFF
 18746                           tosh	equ	0xFFE
 18747                           tosl	equ	0xFFD
 18748                           pclath	equ	0xFFA
 18749                           tblptru	equ	0xFF8
 18750                           tblptrh	equ	0xFF7
 18751                           tblptrl	equ	0xFF6
 18752                           tablat	equ	0xFF5
 18753                           prodh	equ	0xFF4
 18754                           prodl	equ	0xFF3
 18755                           intcon	equ	0xFF2
 18756                           indf0	equ	0xFEF
 18757                           postinc0	equ	0xFEE
 18758                           fsr0h	equ	0xFEA
 18759                           fsr0l	equ	0xFE9
 18760                           wreg	equ	0xFE8
 18761                           indf1	equ	0xFE7
 18762                           postdec1	equ	0xFE5
 18763                           fsr1h	equ	0xFE2
 18764                           fsr1l	equ	0xFE1
 18765                           indf2	equ	0xFDF
 18766                           postinc2	equ	0xFDE
 18767                           postdec2	equ	0xFDD
 18768                           plusw2	equ	0xFDB
 18769                           fsr2h	equ	0xFDA
 18770                           fsr2l	equ	0xFD9
 18771                           status	equ	0xFD8
 18772                           
 18773 ;; *************** function _HMI_SetNumber *****************
 18774 ;; Defined at:
 18775 ;;		line 180 in file "HMI.c"
 18776 ;; Parameters:    Size  Location     Type
 18777 ;;  pInput          2   17[BANK0 ] int 
 18778 ;; Auto vars:     Size  Location     Type
 18779 ;;		None
 18780 ;; Return value:  Size  Location     Type
 18781 ;;                  1    wreg      void 
 18782 ;; Registers used:
 18783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18784 ;; Tracked objects:
 18785 ;;		On entry : 0/0
 18786 ;;		On exit  : 0/0
 18787 ;;		Unchanged: 0/0
 18788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18789 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18793 ;;Total ram usage:        2 bytes
 18794 ;; Hardware stack levels used:    1
 18795 ;; Hardware stack levels required when called:   16
 18796 ;; This function calls:
 18797 ;;		_HMI_SetSegments
 18798 ;;		_itos
 18799 ;; This function is called by:
 18800 ;;		_Event_TestButton
 18801 ;;		_Event_HMI_UpButton
 18802 ;;		_Event_HMI_DownButton
 18803 ;; This function uses a non-reentrant model
 18804 ;;
 18805                           
 18806                           	psect	text106
 18807  014E7C                     __ptext106:
 18808                           	opt stack 0
 18809  014E7C                     _HMI_SetNumber:
 18810                           	opt stack 10
 18811                           
 18812                           ;HMI.c: 182: itos(pInput, HMIBoard.pSevenSegment);
 18813                           
 18814                           ; BSR set to: 1
 18815                           ;incstack = 0
 18816  014E7C  C0BF  F0B5         	movff	HMI_SetNumber@pInput,itos@input
 18817  014E80  C0C0  F0B6         	movff	HMI_SetNumber@pInput+1,itos@input+1
 18818  014E84  0E33               	movlw	low _HMIBoard
 18819  014E86  0100               	movlb	0	; () banked
 18820  014E88  6FB7               	movwf	itos@destination& (0+255),b
 18821  014E8A  0E01               	movlw	high _HMIBoard
 18822  014E8C  6FB8               	movwf	(itos@destination+1)& (0+255),b
 18823  014E8E  EC59  F096         	call	_itos	;wreg free
 18824                           
 18825                           ;HMI.c: 183: HMI_SetSegments(HMIBoard.pSevenSegment);
 18826  014E92  0E33               	movlw	low _HMIBoard
 18827  014E94  0100               	movlb	0	; () banked
 18828  014E96  6FAF               	movwf	HMI_SetSegments@pString& (0+255),b
 18829  014E98  0E01               	movlw	high _HMIBoard
 18830  014E9A  6FB0               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 18831  014E9C  EF5F  F093         	goto	_HMI_SetSegments	;wreg free
 18832  014EA0                     __end_of_HMI_SetNumber:
 18833                           	opt stack 0
 18834                           tosu	equ	0xFFF
 18835                           tosh	equ	0xFFE
 18836                           tosl	equ	0xFFD
 18837                           pclath	equ	0xFFA
 18838                           tblptru	equ	0xFF8
 18839                           tblptrh	equ	0xFF7
 18840                           tblptrl	equ	0xFF6
 18841                           tablat	equ	0xFF5
 18842                           prodh	equ	0xFF4
 18843                           prodl	equ	0xFF3
 18844                           intcon	equ	0xFF2
 18845                           indf0	equ	0xFEF
 18846                           postinc0	equ	0xFEE
 18847                           fsr0h	equ	0xFEA
 18848                           fsr0l	equ	0xFE9
 18849                           wreg	equ	0xFE8
 18850                           indf1	equ	0xFE7
 18851                           postdec1	equ	0xFE5
 18852                           fsr1h	equ	0xFE2
 18853                           fsr1l	equ	0xFE1
 18854                           indf2	equ	0xFDF
 18855                           postinc2	equ	0xFDE
 18856                           postdec2	equ	0xFDD
 18857                           plusw2	equ	0xFDB
 18858                           fsr2h	equ	0xFDA
 18859                           fsr2l	equ	0xFD9
 18860                           status	equ	0xFD8
 18861                           
 18862 ;; *************** function _itos *****************
 18863 ;; Defined at:
 18864 ;;		line 369 in file "Library/Types.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;  input           2    7[BANK0 ] unsigned short 
 18867 ;;  destination     2    9[BANK0 ] PTR unsigned char 
 18868 ;;		 -> HMIBoard..(8), HMIBoard(48), 
 18869 ;; Auto vars:     Size  Location     Type
 18870 ;;  Out             2   15[BANK0 ] unsigned short 
 18871 ;;  Length          2   13[BANK0 ] unsigned short 
 18872 ;;  Data            2   11[BANK0 ] PTR unsigned char 
 18873 ;;		 -> HMIBoard..(8), HMIBoard(48), 
 18874 ;; Return value:  Size  Location     Type
 18875 ;;                  1    wreg      void 
 18876 ;; Registers used:
 18877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18878 ;; Tracked objects:
 18879 ;;		On entry : 0/0
 18880 ;;		On exit  : 0/0
 18881 ;;		Unchanged: 0/0
 18882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18883 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18886 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;Total ram usage:       10 bytes
 18888 ;; Hardware stack levels used:    1
 18889 ;; Hardware stack levels required when called:   15
 18890 ;; This function calls:
 18891 ;;		___lwdiv
 18892 ;;		___lwmod
 18893 ;;		_reverse
 18894 ;; This function is called by:
 18895 ;;		_HMI_SetNumber
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text107
 18900  012CB2                     __ptext107:
 18901                           	opt stack 0
 18902  012CB2                     _itos:
 18903                           	opt stack 10
 18904                           
 18905                           ;Types.c: 371: UINT16 Out = input;
 18906                           
 18907                           ;incstack = 0
 18908  012CB2  C0B5  F0BD         	movff	itos@input,itos@Out
 18909  012CB6  C0B6  F0BE         	movff	itos@input+1,itos@Out+1
 18910                           
 18911                           ;Types.c: 372: UINT16 Length = 0;
 18912  012CBA  0100               	movlb	0	; () banked
 18913  012CBC  6BBC               	clrf	(itos@Length+1)& (0+255),b
 18914  012CBE  6BBB               	clrf	itos@Length& (0+255),b
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;Types.c: 373: char *Data = destination;
 18918  012CC0  C0B7  F0B9         	movff	itos@destination,itos@Data
 18919  012CC4  C0B8  F0BA         	movff	itos@destination+1,itos@Data+1
 18920                           
 18921                           ; BSR set to: 0
 18922                           ;Types.c: 374: if(Out == 0)
 18923  012CC8  51BD               	movf	itos@Out& (0+255),w,b
 18924  012CCA  11BE               	iorwf	(itos@Out+1)& (0+255),w,b
 18925  012CCC  E12E               	bnz	l9997
 18926                           
 18927                           ; BSR set to: 0
 18928                           ;Types.c: 375: {
 18929                           ;Types.c: 376: Data[0] = (UINT16)'0';
 18930  012CCE  C0B9  FFD9         	movff	itos@Data,fsr2l
 18931  012CD2  C0BA  FFDA         	movff	itos@Data+1,fsr2h
 18932  012CD6  0E30               	movlw	48
 18933  012CD8  6EDF               	movwf	indf2,c
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;Types.c: 377: Length = 1;
 18937  012CDA  6BBC               	clrf	(itos@Length+1)& (0+255),b
 18938  012CDC  0E01               	movlw	1
 18939  012CDE  6FBB               	movwf	itos@Length& (0+255),b
 18940                           
 18941                           ;Types.c: 378: }
 18942  012CE0  D038               	goto	l10003
 18943  012CE2                     l9989:
 18944                           
 18945                           ; BSR set to: 0
 18946                           ;Types.c: 382: {
 18947                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 18948  012CE2  C0BD  F0AE         	movff	itos@Out,___lwmod@dividend
 18949  012CE6  C0BE  F0AF         	movff	itos@Out+1,___lwmod@dividend+1
 18950  012CEA  0100               	movlb	0	; () banked
 18951  012CEC  6BB1               	clrf	(___lwmod@divisor+1)& (0+255),b
 18952  012CEE  0E0A               	movlw	10
 18953  012CF0  6FB0               	movwf	___lwmod@divisor& (0+255),b
 18954  012CF2  EC29  F0A2         	call	___lwmod	;wreg free
 18955  012CF6  0100               	movlb	0	; () banked
 18956  012CF8  51AE               	movf	?___lwmod& (0+255),w,b
 18957  012CFA  0F30               	addlw	48
 18958  012CFC  C0B9  FFD9         	movff	itos@Data,fsr2l
 18959  012D00  C0BA  FFDA         	movff	itos@Data+1,fsr2h
 18960  012D04  6EDF               	movwf	indf2,c
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;Types.c: 384: Out /= 10;
 18964  012D06  C0BD  F0AE         	movff	itos@Out,___lwdiv@dividend
 18965  012D0A  C0BE  F0AF         	movff	itos@Out+1,___lwdiv@dividend+1
 18966  012D0E  6BB1               	clrf	(___lwdiv@divisor+1)& (0+255),b
 18967  012D10  0E0A               	movlw	10
 18968  012D12  6FB0               	movwf	___lwdiv@divisor& (0+255),b
 18969  012D14  EC4B  F0A0         	call	___lwdiv	;wreg free
 18970  012D18  C0AE  F0BD         	movff	?___lwdiv,itos@Out
 18971  012D1C  C0AF  F0BE         	movff	?___lwdiv+1,itos@Out+1
 18972                           
 18973                           ;Types.c: 385: Length ++;
 18974  012D20  0100               	movlb	0	; () banked
 18975  012D22  4BBB               	infsnz	itos@Length& (0+255),f,b
 18976  012D24  2BBC               	incf	(itos@Length+1)& (0+255),f,b
 18977                           
 18978                           ; BSR set to: 0
 18979                           ;Types.c: 386: Data++;
 18980  012D26  4BB9               	infsnz	itos@Data& (0+255),f,b
 18981  012D28  2BBA               	incf	(itos@Data+1)& (0+255),f,b
 18982  012D2A                     l9997:
 18983                           
 18984                           ; BSR set to: 0
 18985  012D2A  0100               	movlb	0	; () banked
 18986  012D2C  51BD               	movf	itos@Out& (0+255),w,b
 18987  012D2E  11BE               	iorwf	(itos@Out+1)& (0+255),w,b
 18988  012D30  E006               	bz	l10001
 18989                           
 18990                           ; BSR set to: 0
 18991  012D32  51BC               	movf	(itos@Length+1)& (0+255),w,b
 18992  012D34  E104               	bnz	l10001
 18993  012D36  0E06               	movlw	6
 18994  012D38  5DBB               	subwf	itos@Length& (0+255),w,b
 18995  012D3A  E201               	bc	l10001
 18996  012D3C  D7D2               	goto	l9989
 18997  012D3E                     l10001:
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;Types.c: 387: }
 19001                           ;Types.c: 388: reverse(destination, Length);
 19002  012D3E  C0B7  F0AE         	movff	itos@destination,reverse@input
 19003  012D42  C0B8  F0AF         	movff	itos@destination+1,reverse@input+1
 19004  012D46  C0BB  F0B0         	movff	itos@Length,reverse@length
 19005  012D4A  C0BC  F0B1         	movff	itos@Length+1,reverse@length+1
 19006  012D4E  EC20  F0A0         	call	_reverse	;wreg free
 19007  012D52                     l10003:
 19008                           
 19009                           ;Types.c: 389: }
 19010                           ;Types.c: 390: destination[Length] = '\0';
 19011  012D52  0100               	movlb	0	; () banked
 19012  012D54  51BB               	movf	itos@Length& (0+255),w,b
 19013  012D56  25B7               	addwf	itos@destination& (0+255),w,b
 19014  012D58  6ED9               	movwf	fsr2l,c
 19015  012D5A  51BC               	movf	(itos@Length+1)& (0+255),w,b
 19016  012D5C  21B8               	addwfc	(itos@destination+1)& (0+255),w,b
 19017  012D5E  6EDA               	movwf	fsr2h,c
 19018  012D60  6ADF               	clrf	indf2,c
 19019                           
 19020                           ; BSR set to: 0
 19021  012D62  0C00               	retlw	0	;funcret
 19022  012D64                     __end_of_itos:
 19023                           	opt stack 0
 19024                           tosu	equ	0xFFF
 19025                           tosh	equ	0xFFE
 19026                           tosl	equ	0xFFD
 19027                           pclath	equ	0xFFA
 19028                           tblptru	equ	0xFF8
 19029                           tblptrh	equ	0xFF7
 19030                           tblptrl	equ	0xFF6
 19031                           tablat	equ	0xFF5
 19032                           prodh	equ	0xFF4
 19033                           prodl	equ	0xFF3
 19034                           intcon	equ	0xFF2
 19035                           indf0	equ	0xFEF
 19036                           postinc0	equ	0xFEE
 19037                           fsr0h	equ	0xFEA
 19038                           fsr0l	equ	0xFE9
 19039                           wreg	equ	0xFE8
 19040                           indf1	equ	0xFE7
 19041                           postdec1	equ	0xFE5
 19042                           fsr1h	equ	0xFE2
 19043                           fsr1l	equ	0xFE1
 19044                           indf2	equ	0xFDF
 19045                           postinc2	equ	0xFDE
 19046                           postdec2	equ	0xFDD
 19047                           plusw2	equ	0xFDB
 19048                           fsr2h	equ	0xFDA
 19049                           fsr2l	equ	0xFD9
 19050                           status	equ	0xFD8
 19051                           
 19052 ;; *************** function _reverse *****************
 19053 ;; Defined at:
 19054 ;;		line 357 in file "Library/Types.c"
 19055 ;; Parameters:    Size  Location     Type
 19056 ;;  input           2    0[BANK0 ] PTR unsigned char 
 19057 ;;		 -> HMIBoard..(8), HMIBoard(48), 
 19058 ;;  length          2    2[BANK0 ] unsigned short 
 19059 ;; Auto vars:     Size  Location     Type
 19060 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 19061 ;;		 -> HMIBoard..(8), HMIBoard(48), 
 19062 ;;  tempVar         1    4[BANK0 ] unsigned char 
 19063 ;; Return value:  Size  Location     Type
 19064 ;;                  1    wreg      void 
 19065 ;; Registers used:
 19066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 19067 ;; Tracked objects:
 19068 ;;		On entry : 0/0
 19069 ;;		On exit  : 0/0
 19070 ;;		Unchanged: 0/0
 19071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19073 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19075 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19076 ;;Total ram usage:        7 bytes
 19077 ;; Hardware stack levels used:    1
 19078 ;; Hardware stack levels required when called:   14
 19079 ;; This function calls:
 19080 ;;		Nothing
 19081 ;; This function is called by:
 19082 ;;		_itos
 19083 ;; This function uses a non-reentrant model
 19084 ;;
 19085                           
 19086                           	psect	text108
 19087  014040                     __ptext108:
 19088                           	opt stack 0
 19089  014040                     _reverse:
 19090                           	opt stack 10
 19091                           
 19092                           ;Types.c: 359: char tempVar,
 19093                           ;Types.c: 360: *iterator = input + length;
 19094                           
 19095                           ; BSR set to: 0
 19096                           ;incstack = 0
 19097  014040  0100               	movlb	0	; () banked
 19098  014042  51B0               	movf	reverse@length& (0+255),w,b
 19099  014044  25AE               	addwf	reverse@input& (0+255),w,b
 19100  014046  6FB3               	movwf	reverse@iterator& (0+255),b
 19101  014048  51B1               	movf	(reverse@length+1)& (0+255),w,b
 19102  01404A  21AF               	addwfc	(reverse@input+1)& (0+255),w,b
 19103  01404C  6FB4               	movwf	(reverse@iterator+1)& (0+255),b
 19104                           
 19105                           ;Types.c: 362: while ( --iterator > input )
 19106  01404E  D019               	goto	l9533
 19107  014050                     l9525:
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;Types.c: 363: {
 19111                           ;Types.c: 364: tempVar = *input;
 19112  014050  C0AE  FFD9         	movff	reverse@input,fsr2l
 19113  014054  C0AF  FFDA         	movff	reverse@input+1,fsr2h
 19114  014058  50DF               	movf	indf2,w,c
 19115  01405A  0100               	movlb	0	; () banked
 19116  01405C  6FB2               	movwf	reverse@tempVar& (0+255),b
 19117                           
 19118                           ; BSR set to: 0
 19119                           ;Types.c: 365: *input++=*iterator;
 19120  01405E  C0B3  FFD9         	movff	reverse@iterator,fsr2l
 19121  014062  C0B4  FFDA         	movff	reverse@iterator+1,fsr2h
 19122  014066  C0AE  FFE1         	movff	reverse@input,fsr1l
 19123  01406A  C0AF  FFE2         	movff	reverse@input+1,fsr1h
 19124  01406E  CFDF FFE7          	movff	indf2,indf1
 19125                           
 19126                           ; BSR set to: 0
 19127  014072  4BAE               	infsnz	reverse@input& (0+255),f,b
 19128  014074  2BAF               	incf	(reverse@input+1)& (0+255),f,b
 19129                           
 19130                           ; BSR set to: 0
 19131                           ;Types.c: 366: *iterator=tempVar;
 19132  014076  C0B3  FFD9         	movff	reverse@iterator,fsr2l
 19133  01407A  C0B4  FFDA         	movff	reverse@iterator+1,fsr2h
 19134  01407E  C0B2  FFDF         	movff	reverse@tempVar,indf2
 19135  014082                     l9533:
 19136                           
 19137                           ; BSR set to: 0
 19138  014082  0100               	movlb	0	; () banked
 19139  014084  07B3               	decf	reverse@iterator& (0+255),f,b
 19140  014086  A0D8               	btfss	status,0,c
 19141  014088  07B4               	decf	(reverse@iterator+1)& (0+255),f,b
 19142  01408A  51B3               	movf	reverse@iterator& (0+255),w,b
 19143  01408C  5DAE               	subwf	reverse@input& (0+255),w,b
 19144  01408E  51B4               	movf	(reverse@iterator+1)& (0+255),w,b
 19145  014090  59AF               	subwfb	(reverse@input+1)& (0+255),w,b
 19146  014092  E3DE               	bnc	l9525
 19147  014094  0012               	return	
 19148  014096                     __end_of_reverse:
 19149                           	opt stack 0
 19150                           tosu	equ	0xFFF
 19151                           tosh	equ	0xFFE
 19152                           tosl	equ	0xFFD
 19153                           pclath	equ	0xFFA
 19154                           tblptru	equ	0xFF8
 19155                           tblptrh	equ	0xFF7
 19156                           tblptrl	equ	0xFF6
 19157                           tablat	equ	0xFF5
 19158                           prodh	equ	0xFF4
 19159                           prodl	equ	0xFF3
 19160                           intcon	equ	0xFF2
 19161                           indf0	equ	0xFEF
 19162                           postinc0	equ	0xFEE
 19163                           fsr0h	equ	0xFEA
 19164                           fsr0l	equ	0xFE9
 19165                           wreg	equ	0xFE8
 19166                           indf1	equ	0xFE7
 19167                           postdec1	equ	0xFE5
 19168                           fsr1h	equ	0xFE2
 19169                           fsr1l	equ	0xFE1
 19170                           indf2	equ	0xFDF
 19171                           postinc2	equ	0xFDE
 19172                           postdec2	equ	0xFDD
 19173                           plusw2	equ	0xFDB
 19174                           fsr2h	equ	0xFDA
 19175                           fsr2l	equ	0xFD9
 19176                           status	equ	0xFD8
 19177                           
 19178 ;; *************** function ___lwmod *****************
 19179 ;; Defined at:
 19180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 19181 ;; Parameters:    Size  Location     Type
 19182 ;;  dividend        2    0[BANK0 ] unsigned int 
 19183 ;;  divisor         2    2[BANK0 ] unsigned int 
 19184 ;; Auto vars:     Size  Location     Type
 19185 ;;  counter         1    4[BANK0 ] unsigned char 
 19186 ;; Return value:  Size  Location     Type
 19187 ;;                  2    0[BANK0 ] unsigned int 
 19188 ;; Registers used:
 19189 ;;		wreg, status,2, status,0
 19190 ;; Tracked objects:
 19191 ;;		On entry : 0/0
 19192 ;;		On exit  : 0/0
 19193 ;;		Unchanged: 0/0
 19194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19195 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19198 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19199 ;;Total ram usage:        5 bytes
 19200 ;; Hardware stack levels used:    1
 19201 ;; Hardware stack levels required when called:   14
 19202 ;; This function calls:
 19203 ;;		Nothing
 19204 ;; This function is called by:
 19205 ;;		_itos
 19206 ;; This function uses a non-reentrant model
 19207 ;;
 19208                           
 19209                           	psect	text109
 19210  014452                     __ptext109:
 19211                           	opt stack 0
 19212  014452                     ___lwmod:
 19213                           	opt stack 10
 19214                           
 19215                           ; BSR set to: 0
 19216                           ;incstack = 0
 19217  014452  0100               	movlb	0	; () banked
 19218  014454  51B0               	movf	___lwmod@divisor& (0+255),w,b
 19219  014456  11B1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19220  014458  E01B               	bz	l3220
 19221                           
 19222                           ; BSR set to: 0
 19223  01445A  0E01               	movlw	1
 19224  01445C  6FB2               	movwf	___lwmod@counter& (0+255),b
 19225  01445E  D005               	goto	l9647
 19226  014460                     l9645:
 19227                           
 19228                           ; BSR set to: 0
 19229  014460  0100               	movlb	0	; () banked
 19230  014462  90D8               	bcf	status,0,c
 19231  014464  37B0               	rlcf	___lwmod@divisor& (0+255),f,b
 19232  014466  37B1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19233  014468  2BB2               	incf	___lwmod@counter& (0+255),f,b
 19234  01446A                     l9647:
 19235                           
 19236                           ; BSR set to: 0
 19237  01446A  0100               	movlb	0	; () banked
 19238  01446C  AFB1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19239  01446E  D7F8               	goto	l9645
 19240  014470                     l9649:
 19241                           
 19242                           ; BSR set to: 0
 19243  014470  0100               	movlb	0	; () banked
 19244  014472  51B0               	movf	___lwmod@divisor& (0+255),w,b
 19245  014474  5DAE               	subwf	___lwmod@dividend& (0+255),w,b
 19246  014476  51B1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19247  014478  59AF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19248  01447A  E304               	bnc	l9653
 19249                           
 19250                           ; BSR set to: 0
 19251  01447C  51B0               	movf	___lwmod@divisor& (0+255),w,b
 19252  01447E  5FAE               	subwf	___lwmod@dividend& (0+255),f,b
 19253  014480  51B1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19254  014482  5BAF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19255  014484                     l9653:
 19256                           
 19257                           ; BSR set to: 0
 19258  014484  0100               	movlb	0	; () banked
 19259  014486  90D8               	bcf	status,0,c
 19260  014488  33B1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19261  01448A  33B0               	rrcf	___lwmod@divisor& (0+255),f,b
 19262                           
 19263                           ; BSR set to: 0
 19264  01448C  2FB2               	decfsz	___lwmod@counter& (0+255),f,b
 19265  01448E  D7F0               	goto	l9649
 19266  014490                     l3220:
 19267                           
 19268                           ; BSR set to: 0
 19269  014490  C0AE  F0AE         	movff	___lwmod@dividend,?___lwmod
 19270  014494  C0AF  F0AF         	movff	___lwmod@dividend+1,?___lwmod+1
 19271                           
 19272                           ; BSR set to: 0
 19273  014498  0012               	return		;funcret
 19274  01449A                     __end_of___lwmod:
 19275                           	opt stack 0
 19276                           tosu	equ	0xFFF
 19277                           tosh	equ	0xFFE
 19278                           tosl	equ	0xFFD
 19279                           pclath	equ	0xFFA
 19280                           tblptru	equ	0xFF8
 19281                           tblptrh	equ	0xFF7
 19282                           tblptrl	equ	0xFF6
 19283                           tablat	equ	0xFF5
 19284                           prodh	equ	0xFF4
 19285                           prodl	equ	0xFF3
 19286                           intcon	equ	0xFF2
 19287                           indf0	equ	0xFEF
 19288                           postinc0	equ	0xFEE
 19289                           fsr0h	equ	0xFEA
 19290                           fsr0l	equ	0xFE9
 19291                           wreg	equ	0xFE8
 19292                           indf1	equ	0xFE7
 19293                           postdec1	equ	0xFE5
 19294                           fsr1h	equ	0xFE2
 19295                           fsr1l	equ	0xFE1
 19296                           indf2	equ	0xFDF
 19297                           postinc2	equ	0xFDE
 19298                           postdec2	equ	0xFDD
 19299                           plusw2	equ	0xFDB
 19300                           fsr2h	equ	0xFDA
 19301                           fsr2l	equ	0xFD9
 19302                           status	equ	0xFD8
 19303                           
 19304 ;; *************** function ___lwdiv *****************
 19305 ;; Defined at:
 19306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 19307 ;; Parameters:    Size  Location     Type
 19308 ;;  dividend        2    0[BANK0 ] unsigned int 
 19309 ;;  divisor         2    2[BANK0 ] unsigned int 
 19310 ;; Auto vars:     Size  Location     Type
 19311 ;;  quotient        2    4[BANK0 ] unsigned int 
 19312 ;;  counter         1    6[BANK0 ] unsigned char 
 19313 ;; Return value:  Size  Location     Type
 19314 ;;                  2    0[BANK0 ] unsigned int 
 19315 ;; Registers used:
 19316 ;;		wreg, status,2, status,0
 19317 ;; Tracked objects:
 19318 ;;		On entry : 0/0
 19319 ;;		On exit  : 0/0
 19320 ;;		Unchanged: 0/0
 19321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19323 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19325 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19326 ;;Total ram usage:        7 bytes
 19327 ;; Hardware stack levels used:    1
 19328 ;; Hardware stack levels required when called:   14
 19329 ;; This function calls:
 19330 ;;		Nothing
 19331 ;; This function is called by:
 19332 ;;		_itos
 19333 ;; This function uses a non-reentrant model
 19334 ;;
 19335                           
 19336                           	psect	text110
 19337  014096                     __ptext110:
 19338                           	opt stack 0
 19339  014096                     ___lwdiv:
 19340                           	opt stack 10
 19341                           
 19342                           ; BSR set to: 0
 19343                           ;incstack = 0
 19344  014096  0100               	movlb	0	; () banked
 19345  014098  6BB3               	clrf	(___lwdiv@quotient+1)& (0+255),b
 19346  01409A  6BB2               	clrf	___lwdiv@quotient& (0+255),b
 19347                           
 19348                           ; BSR set to: 0
 19349  01409C  51B0               	movf	___lwdiv@divisor& (0+255),w,b
 19350  01409E  11B1               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19351  0140A0  E01F               	bz	l3210
 19352                           
 19353                           ; BSR set to: 0
 19354  0140A2  0E01               	movlw	1
 19355  0140A4  6FB4               	movwf	___lwdiv@counter& (0+255),b
 19356  0140A6  D005               	goto	l9627
 19357  0140A8                     l9625:
 19358                           
 19359                           ; BSR set to: 0
 19360  0140A8  0100               	movlb	0	; () banked
 19361  0140AA  90D8               	bcf	status,0,c
 19362  0140AC  37B0               	rlcf	___lwdiv@divisor& (0+255),f,b
 19363  0140AE  37B1               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19364  0140B0  2BB4               	incf	___lwdiv@counter& (0+255),f,b
 19365  0140B2                     l9627:
 19366                           
 19367                           ; BSR set to: 0
 19368  0140B2  0100               	movlb	0	; () banked
 19369  0140B4  AFB1               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19370  0140B6  D7F8               	goto	l9625
 19371  0140B8                     l9629:
 19372                           
 19373                           ; BSR set to: 0
 19374  0140B8  0100               	movlb	0	; () banked
 19375  0140BA  90D8               	bcf	status,0,c
 19376  0140BC  37B2               	rlcf	___lwdiv@quotient& (0+255),f,b
 19377  0140BE  37B3               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19378                           
 19379                           ; BSR set to: 0
 19380  0140C0  51B0               	movf	___lwdiv@divisor& (0+255),w,b
 19381  0140C2  5DAE               	subwf	___lwdiv@dividend& (0+255),w,b
 19382  0140C4  51B1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19383  0140C6  59AF               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19384  0140C8  E305               	bnc	l9637
 19385                           
 19386                           ; BSR set to: 0
 19387  0140CA  51B0               	movf	___lwdiv@divisor& (0+255),w,b
 19388  0140CC  5FAE               	subwf	___lwdiv@dividend& (0+255),f,b
 19389  0140CE  51B1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19390  0140D0  5BAF               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19391                           
 19392                           ; BSR set to: 0
 19393  0140D2  81B2               	bsf	___lwdiv@quotient& (0+255),0,b
 19394  0140D4                     l9637:
 19395                           
 19396                           ; BSR set to: 0
 19397  0140D4  0100               	movlb	0	; () banked
 19398  0140D6  90D8               	bcf	status,0,c
 19399  0140D8  33B1               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19400  0140DA  33B0               	rrcf	___lwdiv@divisor& (0+255),f,b
 19401                           
 19402                           ; BSR set to: 0
 19403  0140DC  2FB4               	decfsz	___lwdiv@counter& (0+255),f,b
 19404  0140DE  D7EC               	goto	l9629
 19405  0140E0                     l3210:
 19406                           
 19407                           ; BSR set to: 0
 19408  0140E0  C0B2  F0AE         	movff	___lwdiv@quotient,?___lwdiv
 19409  0140E4  C0B3  F0AF         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19410                           
 19411                           ; BSR set to: 0
 19412  0140E8  0012               	return		;funcret
 19413  0140EA                     __end_of___lwdiv:
 19414                           	opt stack 0
 19415                           tosu	equ	0xFFF
 19416                           tosh	equ	0xFFE
 19417                           tosl	equ	0xFFD
 19418                           pclath	equ	0xFFA
 19419                           tblptru	equ	0xFF8
 19420                           tblptrh	equ	0xFF7
 19421                           tblptrl	equ	0xFF6
 19422                           tablat	equ	0xFF5
 19423                           prodh	equ	0xFF4
 19424                           prodl	equ	0xFF3
 19425                           intcon	equ	0xFF2
 19426                           indf0	equ	0xFEF
 19427                           postinc0	equ	0xFEE
 19428                           fsr0h	equ	0xFEA
 19429                           fsr0l	equ	0xFE9
 19430                           wreg	equ	0xFE8
 19431                           indf1	equ	0xFE7
 19432                           postdec1	equ	0xFE5
 19433                           fsr1h	equ	0xFE2
 19434                           fsr1l	equ	0xFE1
 19435                           indf2	equ	0xFDF
 19436                           postinc2	equ	0xFDE
 19437                           postdec2	equ	0xFDD
 19438                           plusw2	equ	0xFDB
 19439                           fsr2h	equ	0xFDA
 19440                           fsr2l	equ	0xFD9
 19441                           status	equ	0xFD8
 19442                           
 19443 ;; *************** function _HMI_SetSegments *****************
 19444 ;; Defined at:
 19445 ;;		line 185 in file "HMI.c"
 19446 ;; Parameters:    Size  Location     Type
 19447 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 19448 ;;		 -> STR_9(7), HMIBoard..(8), HMIBoard(48), 
 19449 ;; Auto vars:     Size  Location     Type
 19450 ;;  in              2    4[BANK0 ] unsigned short 
 19451 ;; Return value:  Size  Location     Type
 19452 ;;                  1    wreg      void 
 19453 ;; Registers used:
 19454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19455 ;; Tracked objects:
 19456 ;;		On entry : 0/0
 19457 ;;		On exit  : 0/0
 19458 ;;		Unchanged: 0/0
 19459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19460 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19463 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19464 ;;Total ram usage:        5 bytes
 19465 ;; Hardware stack levels used:    1
 19466 ;; Hardware stack levels required when called:   15
 19467 ;; This function calls:
 19468 ;;		_ToSegment
 19469 ;; This function is called by:
 19470 ;;		_HMI_SetNumber
 19471 ;;		_FunctInitHMI
 19472 ;; This function uses a non-reentrant model
 19473 ;;
 19474                           
 19475                           	psect	text111
 19476  0126BE                     __ptext111:
 19477                           	opt stack 0
 19478  0126BE                     _HMI_SetSegments:
 19479                           	opt stack 14
 19480                           
 19481                           ;HMI.c: 187: UINT16 in=0;
 19482                           
 19483                           ; BSR set to: 0
 19484                           ;incstack = 0
 19485  0126BE  0100               	movlb	0	; () banked
 19486  0126C0  6BB3               	clrf	(HMI_SetSegments@in+1)& (0+255),b
 19487  0126C2  6BB2               	clrf	HMI_SetSegments@in& (0+255),b
 19488                           
 19489                           ;HMI.c: 188: while(*pString)
 19490  0126C4  D03A               	goto	l10095
 19491  0126C6                     l10079:
 19492                           
 19493                           ;HMI.c: 189: {
 19494                           ;HMI.c: 190: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 19495  0126C6  0E33               	movlw	low _HMIBoard
 19496  0126C8  0100               	movlb	0	; () banked
 19497  0126CA  25B2               	addwf	HMI_SetSegments@in& (0+255),w,b
 19498  0126CC  6ED9               	movwf	fsr2l,c
 19499  0126CE  0E01               	movlw	high _HMIBoard
 19500  0126D0  21B3               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 19501  0126D2  6EDA               	movwf	fsr2h,c
 19502  0126D4  C0AF  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 19503  0126D8  C0B0  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 19504  0126DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19505  0126DE  6EF8               	movwf	tblptru,c
 19506  0126E0  0E0F               	movlw	(high __ramtop+-1)
 19507  0126E2  64F7               	cpfsgt	tblptrh,c
 19508  0126E4  D003               	bra	u6767
 19509  0126E6  0008               	tblrd		*
 19510  0126E8  50F5               	movf	tablat,w,c
 19511  0126EA  D005               	bra	u6760
 19512  0126EC                     u6767:
 19513  0126EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 19514  0126F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 19515  0126F4  50EF               	movf	indf0,w,c
 19516  0126F6                     u6760:
 19517  0126F6  ECF4  F085         	call	_ToSegment
 19518  0126FA  6EDF               	movwf	indf2,c
 19519                           
 19520                           ;HMI.c: 192: if (HMIBoard.pSevenSegment[in] == eDot)
 19521  0126FC  0E33               	movlw	low _HMIBoard
 19522  0126FE  0100               	movlb	0	; () banked
 19523  012700  25B2               	addwf	HMI_SetSegments@in& (0+255),w,b
 19524  012702  6ED9               	movwf	fsr2l,c
 19525  012704  0E01               	movlw	high _HMIBoard
 19526  012706  21B3               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 19527  012708  6EDA               	movwf	fsr2h,c
 19528  01270A  0E80               	movlw	128
 19529  01270C  18DE               	xorwf	postinc2,w,c
 19530  01270E  E10B               	bnz	l10087
 19531                           
 19532                           ; BSR set to: 0
 19533                           ;HMI.c: 193: {
 19534                           ;HMI.c: 194: in--;
 19535  012710  07B2               	decf	HMI_SetSegments@in& (0+255),f,b
 19536  012712  A0D8               	btfss	status,0,c
 19537  012714  07B3               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 19538                           
 19539                           ; BSR set to: 0
 19540                           ;HMI.c: 195: HMIBoard.pSevenSegment[in] |= eDot;
 19541  012716  0E33               	movlw	low _HMIBoard
 19542  012718  25B2               	addwf	HMI_SetSegments@in& (0+255),w,b
 19543  01271A  6ED9               	movwf	fsr2l,c
 19544  01271C  0E01               	movlw	high _HMIBoard
 19545  01271E  21B3               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 19546  012720  6EDA               	movwf	fsr2h,c
 19547  012722  0E00               	movlw	0
 19548  012724  8EDB               	bsf	plusw2,7,c
 19549  012726                     l10087:
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;HMI.c: 196: }
 19553                           ;HMI.c: 198: pString++;
 19554  012726  0100               	movlb	0	; () banked
 19555  012728  4BAF               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 19556  01272A  2BB0               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;HMI.c: 199: in++;
 19560  01272C  4BB2               	infsnz	HMI_SetSegments@in& (0+255),f,b
 19561  01272E  2BB3               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 19562                           
 19563                           ; BSR set to: 0
 19564                           ;HMI.c: 200: if (in>=6)
 19565  012730  51B3               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 19566  012732  E122               	bnz	l10101
 19567  012734  0E06               	movlw	6
 19568  012736  5DB2               	subwf	HMI_SetSegments@in& (0+255),w,b
 19569  012738  E21F               	bc	l10101
 19570  01273A                     l10095:
 19571                           
 19572                           ; BSR set to: 0
 19573  01273A  C0AF  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 19574  01273E  C0B0  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 19575  012742  0E00               	movlw	low (__mediumconst shr (0+16))
 19576  012744  6EF8               	movwf	tblptru,c
 19577  012746  0E0F               	movlw	(high __ramtop+-1)
 19578  012748  64F7               	cpfsgt	tblptrh,c
 19579  01274A  D003               	bra	u6797
 19580  01274C  0008               	tblrd		*
 19581  01274E  50F5               	movf	tablat,w,c
 19582  012750  D005               	bra	u6790
 19583  012752                     u6797:
 19584  012752  CFF6 FFE9          	movff	tblptrl,fsr0l
 19585  012756  CFF7 FFEA          	movff	tblptrh,fsr0h
 19586  01275A  50EF               	movf	indf0,w,c
 19587  01275C                     u6790:
 19588  01275C  0900               	iorlw	0
 19589  01275E  E00C               	bz	l10101
 19590  012760  D7B2               	goto	l10079
 19591  012762                     l10097:
 19592                           
 19593                           ;HMI.c: 204: {
 19594                           ;HMI.c: 205: HMIBoard.pSevenSegment[in] = 0;
 19595  012762  0E33               	movlw	low _HMIBoard
 19596  012764  0100               	movlb	0	; () banked
 19597  012766  25B2               	addwf	HMI_SetSegments@in& (0+255),w,b
 19598  012768  6ED9               	movwf	fsr2l,c
 19599  01276A  0E01               	movlw	high _HMIBoard
 19600  01276C  21B3               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 19601  01276E  6EDA               	movwf	fsr2h,c
 19602  012770  0E00               	movlw	0
 19603  012772  6EDF               	movwf	indf2,c
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;HMI.c: 206: in++;
 19607  012774  4BB2               	infsnz	HMI_SetSegments@in& (0+255),f,b
 19608  012776  2BB3               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 19609  012778                     l10101:
 19610  012778  0100               	movlb	0	; () banked
 19611  01277A  51B3               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 19612  01277C  E104               	bnz	l2242
 19613  01277E  0E06               	movlw	6
 19614  012780  5DB2               	subwf	HMI_SetSegments@in& (0+255),w,b
 19615  012782  E3EF               	bnc	l10097
 19616  012784  0012               	return	
 19617  012786                     l2242:
 19618                           
 19619                           ; BSR set to: 0
 19620  012786  0012               	return		;funcret
 19621  012788                     __end_of_HMI_SetSegments:
 19622                           	opt stack 0
 19623                           tosu	equ	0xFFF
 19624                           tosh	equ	0xFFE
 19625                           tosl	equ	0xFFD
 19626                           pclath	equ	0xFFA
 19627                           tblptru	equ	0xFF8
 19628                           tblptrh	equ	0xFF7
 19629                           tblptrl	equ	0xFF6
 19630                           tablat	equ	0xFF5
 19631                           prodh	equ	0xFF4
 19632                           prodl	equ	0xFF3
 19633                           intcon	equ	0xFF2
 19634                           indf0	equ	0xFEF
 19635                           postinc0	equ	0xFEE
 19636                           fsr0h	equ	0xFEA
 19637                           fsr0l	equ	0xFE9
 19638                           wreg	equ	0xFE8
 19639                           indf1	equ	0xFE7
 19640                           postdec1	equ	0xFE5
 19641                           fsr1h	equ	0xFE2
 19642                           fsr1l	equ	0xFE1
 19643                           indf2	equ	0xFDF
 19644                           postinc2	equ	0xFDE
 19645                           postdec2	equ	0xFDD
 19646                           plusw2	equ	0xFDB
 19647                           fsr2h	equ	0xFDA
 19648                           fsr2l	equ	0xFD9
 19649                           status	equ	0xFD8
 19650                           
 19651 ;; *************** function _ToSegment *****************
 19652 ;; Defined at:
 19653 ;;		line 284 in file "Library/Types.c"
 19654 ;; Parameters:    Size  Location     Type
 19655 ;;  pCHR            1    wreg     unsigned char 
 19656 ;; Auto vars:     Size  Location     Type
 19657 ;;  pCHR            1    0[BANK0 ] unsigned char 
 19658 ;; Return value:  Size  Location     Type
 19659 ;;                  1    wreg      unsigned char 
 19660 ;; Registers used:
 19661 ;;		wreg, status,2, status,0
 19662 ;; Tracked objects:
 19663 ;;		On entry : 0/0
 19664 ;;		On exit  : 0/0
 19665 ;;		Unchanged: 0/0
 19666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19671 ;;Total ram usage:        1 bytes
 19672 ;; Hardware stack levels used:    1
 19673 ;; Hardware stack levels required when called:   14
 19674 ;; This function calls:
 19675 ;;		Nothing
 19676 ;; This function is called by:
 19677 ;;		_HMI_SetSegments
 19678 ;; This function uses a non-reentrant model
 19679 ;;
 19680                           
 19681                           	psect	text112
 19682  010BE8                     __ptext112:
 19683                           	opt stack 0
 19684  010BE8                     _ToSegment:
 19685                           	opt stack 14
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;incstack = 0
 19689                           ;ToSegment@pCHR stored from wreg
 19690  010BE8  0100               	movlb	0	; () banked
 19691  010BEA  6FAE               	movwf	ToSegment@pCHR& (0+255),b
 19692                           
 19693                           ;Types.c: 286: switch(pCHR)
 19694  010BEC  D03F               	goto	l9517
 19695  010BEE                     l9263:
 19696  010BEE  0C3F               	retlw	63
 19697  010BF0                     l9267:
 19698  010BF0  0C06               	retlw	6
 19699  010BF2                     l9271:
 19700  010BF2  0C5B               	retlw	91
 19701  010BF4                     l9275:
 19702  010BF4  0C4F               	retlw	79
 19703  010BF6                     l9279:
 19704  010BF6  0C66               	retlw	102
 19705  010BF8                     l9283:
 19706  010BF8  0C6D               	retlw	109
 19707  010BFA                     l9287:
 19708  010BFA  0C7D               	retlw	125
 19709  010BFC                     l9291:
 19710  010BFC  0C07               	retlw	7
 19711  010BFE                     l9295:
 19712  010BFE  0C7F               	retlw	127
 19713  010C00                     l9299:
 19714  010C00  0C6F               	retlw	111
 19715  010C02                     l9303:
 19716  010C02  0C5F               	retlw	95
 19717  010C04                     l9307:
 19718  010C04  0C7C               	retlw	124
 19719  010C06                     l9311:
 19720  010C06  0C58               	retlw	88
 19721  010C08                     l9315:
 19722  010C08  0C5E               	retlw	94
 19723  010C0A                     l9319:
 19724  010C0A  0C7B               	retlw	123
 19725  010C0C                     l9323:
 19726  010C0C  0C71               	retlw	113
 19727  010C0E                     l9327:
 19728  010C0E  0C6F               	retlw	111
 19729  010C10                     l9331:
 19730  010C10  0C74               	retlw	116
 19731  010C12                     l9335:
 19732  010C12  0C04               	retlw	4
 19733  010C14                     l9339:
 19734  010C14  0C0E               	retlw	14
 19735  010C16                     l9343:
 19736  010C16  0C7A               	retlw	122
 19737  010C18                     l9347:
 19738  010C18  0C06               	retlw	6
 19739  010C1A                     l9351:
 19740  010C1A  0C14               	retlw	20
 19741  010C1C                     l9355:
 19742  010C1C  0C54               	retlw	84
 19743  010C1E                     l9359:
 19744  010C1E  0C5C               	retlw	92
 19745  010C20                     l9363:
 19746  010C20  0C73               	retlw	115
 19747  010C22                     l9367:
 19748  010C22  0C67               	retlw	103
 19749  010C24                     l9371:
 19750  010C24  0C50               	retlw	80
 19751  010C26                     l9375:
 19752  010C26  0C6D               	retlw	109
 19753  010C28                     l9379:
 19754  010C28  0C78               	retlw	120
 19755  010C2A                     l9383:
 19756  010C2A  0C1C               	retlw	28
 19757  010C2C                     l9387:
 19758  010C2C  0C62               	retlw	98
 19759  010C2E                     l9391:
 19760  010C2E  0C2A               	retlw	42
 19761  010C30                     l9395:
 19762  010C30  0C64               	retlw	100
 19763  010C32                     l9399:
 19764  010C32  0C6E               	retlw	110
 19765  010C34                     l9403:
 19766  010C34  0C5B               	retlw	91
 19767  010C36                     l9407:
 19768  010C36  0C77               	retlw	119
 19769  010C38                     l9411:
 19770  010C38  0C7F               	retlw	127
 19771  010C3A                     l9415:
 19772  010C3A  0C39               	retlw	57
 19773  010C3C                     l9419:
 19774  010C3C  0C3F               	retlw	63
 19775  010C3E                     l9423:
 19776  010C3E  0C79               	retlw	121
 19777  010C40                     l9427:
 19778  010C40  0C71               	retlw	113
 19779  010C42                     l9431:
 19780  010C42  0C3D               	retlw	61
 19781  010C44                     l9435:
 19782  010C44  0C76               	retlw	118
 19783  010C46                     l9439:
 19784  010C46  0C06               	retlw	6
 19785  010C48                     l9443:
 19786  010C48  0C1E               	retlw	30
 19787  010C4A                     l9447:
 19788  010C4A  0C57               	retlw	87
 19789  010C4C                     l9451:
 19790  010C4C  0C38               	retlw	56
 19791  010C4E                     l9455:
 19792  010C4E  0C76               	retlw	118
 19793  010C50                     l9459:
 19794  010C50  0C76               	retlw	118
 19795  010C52                     l9463:
 19796  010C52  0C3F               	retlw	63
 19797  010C54                     l9467:
 19798  010C54  0C73               	retlw	115
 19799  010C56                     l9471:
 19800  010C56  0C3F               	retlw	63
 19801  010C58                     l9475:
 19802  010C58  0C77               	retlw	119
 19803  010C5A                     l9479:
 19804  010C5A  0C6D               	retlw	109
 19805  010C5C                     l9483:
 19806  010C5C  0C31               	retlw	49
 19807  010C5E                     l9487:
 19808  010C5E  0C3E               	retlw	62
 19809  010C60                     l9491:
 19810  010C60  0C3E               	retlw	62
 19811  010C62                     l9495:
 19812  010C62  0C7E               	retlw	126
 19813  010C64                     l9499:
 19814  010C64  0C76               	retlw	118
 19815  010C66                     l9503:
 19816  010C66  0C66               	retlw	102
 19817  010C68                     l9507:
 19818  010C68  0C5B               	retlw	91
 19819  010C6A                     l9511:
 19820  010C6A  0C80               	retlw	128
 19821  010C6C                     l9517:
 19822  010C6C  0100               	movlb	0	; () banked
 19823  010C6E  51AE               	movf	ToSegment@pCHR& (0+255),w,b
 19824                           
 19825                           ; Switch size 1, requested type "space"
 19826                           ; Number of cases is 63, Range of values is 46 to 122
 19827                           ; switch strategies available:
 19828                           ; Name         Instructions Cycles
 19829                           ; simple_byte          190    96 (average)
 19830                           ;	Chosen strategy is simple_byte
 19831  010C70  0A2E               	xorlw	46	; case 46
 19832  010C72  E0FB               	bz	l9511
 19833  010C74  0A1E               	xorlw	30	; case 48
 19834  010C76  E0BB               	bz	l9263
 19835  010C78  0A01               	xorlw	1	; case 49
 19836  010C7A  E0BA               	bz	l9267
 19837  010C7C  0A03               	xorlw	3	; case 50
 19838  010C7E  E0B9               	bz	l9271
 19839  010C80  0A01               	xorlw	1	; case 51
 19840  010C82  E0B8               	bz	l9275
 19841  010C84  0A07               	xorlw	7	; case 52
 19842  010C86  E0B7               	bz	l9279
 19843  010C88  0A01               	xorlw	1	; case 53
 19844  010C8A  E0B6               	bz	l9283
 19845  010C8C  0A03               	xorlw	3	; case 54
 19846  010C8E  E0B5               	bz	l9287
 19847  010C90  0A01               	xorlw	1	; case 55
 19848  010C92  E0B4               	bz	l9291
 19849  010C94  0A0F               	xorlw	15	; case 56
 19850  010C96  E0B3               	bz	l9295
 19851  010C98  0A01               	xorlw	1	; case 57
 19852  010C9A  E0B2               	bz	l9299
 19853  010C9C  0A78               	xorlw	120	; case 65
 19854  010C9E  E0CB               	bz	l9407
 19855  010CA0  0A03               	xorlw	3	; case 66
 19856  010CA2  E0CA               	bz	l9411
 19857  010CA4  0A01               	xorlw	1	; case 67
 19858  010CA6  E0C9               	bz	l9415
 19859  010CA8  0A07               	xorlw	7	; case 68
 19860  010CAA  E0C8               	bz	l9419
 19861  010CAC  0A01               	xorlw	1	; case 69
 19862  010CAE  E0C7               	bz	l9423
 19863  010CB0  0A03               	xorlw	3	; case 70
 19864  010CB2  E0C6               	bz	l9427
 19865  010CB4  0A01               	xorlw	1	; case 71
 19866  010CB6  E0C5               	bz	l9431
 19867  010CB8  0A0F               	xorlw	15	; case 72
 19868  010CBA  E0C4               	bz	l9435
 19869  010CBC  0A01               	xorlw	1	; case 73
 19870  010CBE  E0C3               	bz	l9439
 19871  010CC0  0A03               	xorlw	3	; case 74
 19872  010CC2  E0C2               	bz	l9443
 19873  010CC4  0A01               	xorlw	1	; case 75
 19874  010CC6  E0C1               	bz	l9447
 19875  010CC8  0A07               	xorlw	7	; case 76
 19876  010CCA  E0C0               	bz	l9451
 19877  010CCC  0A01               	xorlw	1	; case 77
 19878  010CCE  E0BF               	bz	l9455
 19879  010CD0  0A03               	xorlw	3	; case 78
 19880  010CD2  E0BE               	bz	l9459
 19881  010CD4  0A01               	xorlw	1	; case 79
 19882  010CD6  E0BD               	bz	l9463
 19883  010CD8  0A1F               	xorlw	31	; case 80
 19884  010CDA  E0BC               	bz	l9467
 19885  010CDC  0A01               	xorlw	1	; case 81
 19886  010CDE  E0BB               	bz	l9471
 19887  010CE0  0A03               	xorlw	3	; case 82
 19888  010CE2  E0BA               	bz	l9475
 19889  010CE4  0A01               	xorlw	1	; case 83
 19890  010CE6  E0B9               	bz	l9479
 19891  010CE8  0A07               	xorlw	7	; case 84
 19892  010CEA  E0B8               	bz	l9483
 19893  010CEC  0A01               	xorlw	1	; case 85
 19894  010CEE  E0B7               	bz	l9487
 19895  010CF0  0A03               	xorlw	3	; case 86
 19896  010CF2  E0B6               	bz	l9491
 19897  010CF4  0A01               	xorlw	1	; case 87
 19898  010CF6  E0B5               	bz	l9495
 19899  010CF8  0A0F               	xorlw	15	; case 88
 19900  010CFA  E0B4               	bz	l9499
 19901  010CFC  0A01               	xorlw	1	; case 89
 19902  010CFE  E0B3               	bz	l9503
 19903  010D00  0A03               	xorlw	3	; case 90
 19904  010D02  E0B2               	bz	l9507
 19905  010D04  0A3B               	xorlw	59	; case 97
 19906  010D06  E101 D77C          	bz	l9303
 19907  010D0A  0A03               	xorlw	3	; case 98
 19908  010D0C  E101 D77A          	bz	l9307
 19909  010D10  0A01               	xorlw	1	; case 99
 19910  010D12  E101 D778          	bz	l9311
 19911  010D16  0A07               	xorlw	7	; case 100
 19912  010D18  E101 D776          	bz	l9315
 19913  010D1C  0A01               	xorlw	1	; case 101
 19914  010D1E  E101 D774          	bz	l9319
 19915  010D22  0A03               	xorlw	3	; case 102
 19916  010D24  E101 D772          	bz	l9323
 19917  010D28  0A01               	xorlw	1	; case 103
 19918  010D2A  E101 D770          	bz	l9327
 19919  010D2E  0A0F               	xorlw	15	; case 104
 19920  010D30  E101 D76E          	bz	l9331
 19921  010D34  0A01               	xorlw	1	; case 105
 19922  010D36  E101 D76C          	bz	l9335
 19923  010D3A  0A03               	xorlw	3	; case 106
 19924  010D3C  E101 D76A          	bz	l9339
 19925  010D40  0A01               	xorlw	1	; case 107
 19926  010D42  E101 D768          	bz	l9343
 19927  010D46  0A07               	xorlw	7	; case 108
 19928  010D48  E101 D766          	bz	l9347
 19929  010D4C  0A01               	xorlw	1	; case 109
 19930  010D4E  E101 D764          	bz	l9351
 19931  010D52  0A03               	xorlw	3	; case 110
 19932  010D54  E101 D762          	bz	l9355
 19933  010D58  0A01               	xorlw	1	; case 111
 19934  010D5A  E101 D760          	bz	l9359
 19935  010D5E  0A1F               	xorlw	31	; case 112
 19936  010D60  E101 D75E          	bz	l9363
 19937  010D64  0A01               	xorlw	1	; case 113
 19938  010D66  E101 D75C          	bz	l9367
 19939  010D6A  0A03               	xorlw	3	; case 114
 19940  010D6C  E101 D75A          	bz	l9371
 19941  010D70  0A01               	xorlw	1	; case 115
 19942  010D72  E101 D758          	bz	l9375
 19943  010D76  0A07               	xorlw	7	; case 116
 19944  010D78  E101 D756          	bz	l9379
 19945  010D7C  0A01               	xorlw	1	; case 117
 19946  010D7E  E101 D754          	bz	l9383
 19947  010D82  0A03               	xorlw	3	; case 118
 19948  010D84  E101 D752          	bz	l9387
 19949  010D88  0A01               	xorlw	1	; case 119
 19950  010D8A  E101 D750          	bz	l9391
 19951  010D8E  0A0F               	xorlw	15	; case 120
 19952  010D90  E101 D74E          	bz	l9395
 19953  010D94  0A01               	xorlw	1	; case 121
 19954  010D96  E101 D74C          	bz	l9399
 19955  010D9A  0A03               	xorlw	3	; case 122
 19956  010D9C  E101 D74A          	bz	l9403
 19957                           
 19958                           ;Types.c: 354: return 0;
 19959                           
 19960                           ; BSR set to: 0
 19961  010DA0  0C00               	retlw	0
 19962  010DA2                     __end_of_ToSegment:
 19963                           	opt stack 0
 19964                           tosu	equ	0xFFF
 19965                           tosh	equ	0xFFE
 19966                           tosl	equ	0xFFD
 19967                           pclath	equ	0xFFA
 19968                           tblptru	equ	0xFF8
 19969                           tblptrh	equ	0xFF7
 19970                           tblptrl	equ	0xFF6
 19971                           tablat	equ	0xFF5
 19972                           prodh	equ	0xFF4
 19973                           prodl	equ	0xFF3
 19974                           intcon	equ	0xFF2
 19975                           indf0	equ	0xFEF
 19976                           postinc0	equ	0xFEE
 19977                           fsr0h	equ	0xFEA
 19978                           fsr0l	equ	0xFE9
 19979                           wreg	equ	0xFE8
 19980                           indf1	equ	0xFE7
 19981                           postdec1	equ	0xFE5
 19982                           fsr1h	equ	0xFE2
 19983                           fsr1l	equ	0xFE1
 19984                           indf2	equ	0xFDF
 19985                           postinc2	equ	0xFDE
 19986                           postdec2	equ	0xFDD
 19987                           plusw2	equ	0xFDB
 19988                           fsr2h	equ	0xFDA
 19989                           fsr2l	equ	0xFD9
 19990                           status	equ	0xFD8
 19991                           
 19992 ;; *************** function _HMI_SetDown *****************
 19993 ;; Defined at:
 19994 ;;		line 139 in file "HMI.c"
 19995 ;; Parameters:    Size  Location     Type
 19996 ;;  pValue          1    wreg     unsigned char 
 19997 ;; Auto vars:     Size  Location     Type
 19998 ;;  pValue          1    0[BANK0 ] unsigned char 
 19999 ;; Return value:  Size  Location     Type
 20000 ;;                  1    wreg      void 
 20001 ;; Registers used:
 20002 ;;		wreg
 20003 ;; Tracked objects:
 20004 ;;		On entry : 0/0
 20005 ;;		On exit  : 0/0
 20006 ;;		Unchanged: 0/0
 20007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20012 ;;Total ram usage:        1 bytes
 20013 ;; Hardware stack levels used:    1
 20014 ;; Hardware stack levels required when called:   14
 20015 ;; This function calls:
 20016 ;;		Nothing
 20017 ;; This function is called by:
 20018 ;;		_Event_HMI_DownButton
 20019 ;; This function uses a non-reentrant model
 20020 ;;
 20021                           
 20022                           	psect	text113
 20023  015022                     __ptext113:
 20024                           	opt stack 0
 20025  015022                     _HMI_SetDown:
 20026                           	opt stack 12
 20027                           
 20028                           ;incstack = 0
 20029                           ;HMI_SetDown@pValue stored from wreg
 20030  015022  0100               	movlb	0	; () banked
 20031  015024  6FAE               	movwf	HMI_SetDown@pValue& (0+255),b
 20032                           
 20033                           ;HMI.c: 141: HMIBoard.DOWNLED = pValue;
 20034  015026  B1AE               	btfsc	HMI_SetDown@pValue& (0+255),0,b
 20035  015028  D003               	bra	u7285
 20036  01502A  0101               	movlb	1	; () banked
 20037  01502C  9339               	bcf	(_HMIBoard+6)& (0+255),1,b
 20038  01502E  D002               	bra	u7286
 20039  015030                     u7285:
 20040  015030  0101               	movlb	1	; () banked
 20041  015032  8339               	bsf	(_HMIBoard+6)& (0+255),1,b
 20042  015034                     u7286:
 20043                           
 20044                           ; BSR set to: 1
 20045  015034  0012               	return		;funcret
 20046  015036                     __end_of_HMI_SetDown:
 20047                           	opt stack 0
 20048                           tosu	equ	0xFFF
 20049                           tosh	equ	0xFFE
 20050                           tosl	equ	0xFFD
 20051                           pclath	equ	0xFFA
 20052                           tblptru	equ	0xFF8
 20053                           tblptrh	equ	0xFF7
 20054                           tblptrl	equ	0xFF6
 20055                           tablat	equ	0xFF5
 20056                           prodh	equ	0xFF4
 20057                           prodl	equ	0xFF3
 20058                           intcon	equ	0xFF2
 20059                           indf0	equ	0xFEF
 20060                           postinc0	equ	0xFEE
 20061                           fsr0h	equ	0xFEA
 20062                           fsr0l	equ	0xFE9
 20063                           wreg	equ	0xFE8
 20064                           indf1	equ	0xFE7
 20065                           postdec1	equ	0xFE5
 20066                           fsr1h	equ	0xFE2
 20067                           fsr1l	equ	0xFE1
 20068                           indf2	equ	0xFDF
 20069                           postinc2	equ	0xFDE
 20070                           postdec2	equ	0xFDD
 20071                           plusw2	equ	0xFDB
 20072                           fsr2h	equ	0xFDA
 20073                           fsr2l	equ	0xFD9
 20074                           status	equ	0xFD8
 20075                           
 20076 ;; *************** function _USB_Print *****************
 20077 ;; Defined at:
 20078 ;;		line 90 in file "USB_Wrap.c"
 20079 ;; Parameters:    Size  Location     Type
 20080 ;;  pInput          2    6[BANK0 ] const PTR unsigned char 
 20081 ;;		 -> STR_8(6), STR_7(4), STR_6(7), STR_5(6), 
 20082 ;;		 -> STR_4(13), STR_3(9), STR_2(5), 
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;  len             2    8[BANK0 ] unsigned short 
 20085 ;; Return value:  Size  Location     Type
 20086 ;;                  1    wreg      void 
 20087 ;; Registers used:
 20088 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;Total ram usage:        4 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; Hardware stack levels required when called:   15
 20101 ;; This function calls:
 20102 ;;		_putUSBUSART
 20103 ;;		_strlen
 20104 ;; This function is called by:
 20105 ;;		_Event_DIPSwitch
 20106 ;;		_Event_HMI_DIPSwitch
 20107 ;;		_Event_TestButton
 20108 ;;		_Event_HMI_LeftButton
 20109 ;;		_Event_HMI_RightButton
 20110 ;;		_Event_HMI_UpButton
 20111 ;;		_Event_HMI_DownButton
 20112 ;; This function uses a non-reentrant model
 20113 ;;
 20114                           
 20115                           	psect	text114
 20116  014EA0                     __ptext114:
 20117                           	opt stack 0
 20118  014EA0                     _USB_Print:
 20119                           	opt stack 11
 20120                           
 20121                           ;USB_Wrap.c: 92: UINT16 len = strlen(pInput);
 20122                           
 20123                           ; BSR set to: 1
 20124                           ;incstack = 0
 20125  014EA0  C0B4  F0AE         	movff	USB_Print@pInput,strlen@s
 20126  014EA4  C0B5  F0AF         	movff	USB_Print@pInput+1,strlen@s+1
 20127  014EA8  ECFC  F0A2         	call	_strlen	;wreg free
 20128  014EAC  C0AE  F0B6         	movff	?_strlen,USB_Print@len
 20129  014EB0  C0AF  F0B7         	movff	?_strlen+1,USB_Print@len+1
 20130                           
 20131                           ;USB_Wrap.c: 93: putUSBUSART(pInput, len);
 20132  014EB4  C0B4  F0AE         	movff	USB_Print@pInput,putUSBUSART@data
 20133  014EB8  C0B5  F0AF         	movff	USB_Print@pInput+1,putUSBUSART@data+1
 20134  014EBC  C0B6  F0B0         	movff	USB_Print@len,putUSBUSART@length
 20135  014EC0  EFA3  F0A7         	goto	_putUSBUSART	;wreg free
 20136  014EC4                     __end_of_USB_Print:
 20137                           	opt stack 0
 20138                           tosu	equ	0xFFF
 20139                           tosh	equ	0xFFE
 20140                           tosl	equ	0xFFD
 20141                           pclath	equ	0xFFA
 20142                           tblptru	equ	0xFF8
 20143                           tblptrh	equ	0xFF7
 20144                           tblptrl	equ	0xFF6
 20145                           tablat	equ	0xFF5
 20146                           prodh	equ	0xFF4
 20147                           prodl	equ	0xFF3
 20148                           intcon	equ	0xFF2
 20149                           indf0	equ	0xFEF
 20150                           postinc0	equ	0xFEE
 20151                           fsr0h	equ	0xFEA
 20152                           fsr0l	equ	0xFE9
 20153                           wreg	equ	0xFE8
 20154                           indf1	equ	0xFE7
 20155                           postdec1	equ	0xFE5
 20156                           fsr1h	equ	0xFE2
 20157                           fsr1l	equ	0xFE1
 20158                           indf2	equ	0xFDF
 20159                           postinc2	equ	0xFDE
 20160                           postdec2	equ	0xFDD
 20161                           plusw2	equ	0xFDB
 20162                           fsr2h	equ	0xFDA
 20163                           fsr2l	equ	0xFD9
 20164                           status	equ	0xFD8
 20165                           
 20166 ;; *************** function _strlen *****************
 20167 ;; Defined at:
 20168 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
 20169 ;; Parameters:    Size  Location     Type
 20170 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20171 ;;		 -> STR_8(6), STR_7(4), STR_6(7), STR_5(6), 
 20172 ;;		 -> STR_4(13), STR_3(9), STR_2(5), 
 20173 ;; Auto vars:     Size  Location     Type
 20174 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 20175 ;;		 -> STR_8(6), STR_7(4), STR_6(7), STR_5(6), 
 20176 ;;		 -> STR_4(13), STR_3(9), STR_2(5), 
 20177 ;; Return value:  Size  Location     Type
 20178 ;;                  2    0[BANK0 ] unsigned int 
 20179 ;; Registers used:
 20180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 20181 ;; Tracked objects:
 20182 ;;		On entry : 0/0
 20183 ;;		On exit  : 0/0
 20184 ;;		Unchanged: 0/0
 20185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20186 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;Total ram usage:        6 bytes
 20191 ;; Hardware stack levels used:    1
 20192 ;; Hardware stack levels required when called:   14
 20193 ;; This function calls:
 20194 ;;		Nothing
 20195 ;; This function is called by:
 20196 ;;		_USB_Print
 20197 ;; This function uses a non-reentrant model
 20198 ;;
 20199                           
 20200                           	psect	text115
 20201  0145F8                     __ptext115:
 20202                           	opt stack 0
 20203  0145F8                     _strlen:
 20204                           	opt stack 11
 20205                           
 20206                           ;incstack = 0
 20207  0145F8  C0AE  F0B2         	movff	strlen@s,strlen@cp
 20208  0145FC  C0AF  F0B3         	movff	strlen@s+1,strlen@cp+1
 20209  014600  D003               	goto	l10107
 20210  014602                     l10105:
 20211  014602  0100               	movlb	0	; () banked
 20212  014604  4BB2               	infsnz	strlen@cp& (0+255),f,b
 20213  014606  2BB3               	incf	(strlen@cp+1)& (0+255),f,b
 20214  014608                     l10107:
 20215  014608  C0B2  FFF6         	movff	strlen@cp,tblptrl
 20216  01460C  C0B3  FFF7         	movff	strlen@cp+1,tblptrh
 20217  014610                     	if	0	;tblptru may be non-zero
 20218  014610                     	endif
 20219  014610                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 20220  014610  0E00               	movlw	low (__mediumconst shr (0+16))
 20221  014612  6EF8               	movwf	tblptru,c
 20222  014614                     	endif
 20223  014614  0008               	tblrd		*
 20224  014616  50F5               	movf	tablat,w,c
 20225  014618  E001               	bz	l10109
 20226  01461A  D7F3               	goto	l10105
 20227  01461C                     l10109:
 20228  01461C  C0AE  F0B0         	movff	strlen@s,??_strlen
 20229  014620  C0AF  F0B1         	movff	strlen@s+1,??_strlen+1
 20230  014624  0100               	movlb	0	; () banked
 20231  014626  1FB0               	comf	??_strlen& (0+255),f,b
 20232  014628  1FB1               	comf	(??_strlen+1)& (0+255),f,b
 20233  01462A  4BB0               	infsnz	??_strlen& (0+255),f,b
 20234  01462C  2BB1               	incf	(??_strlen+1)& (0+255),f,b
 20235  01462E  51B2               	movf	strlen@cp& (0+255),w,b
 20236  014630  25B0               	addwf	??_strlen& (0+255),w,b
 20237  014632  6FAE               	movwf	?_strlen& (0+255),b
 20238  014634  51B3               	movf	(strlen@cp+1)& (0+255),w,b
 20239  014636  21B1               	addwfc	(??_strlen+1)& (0+255),w,b
 20240  014638  6FAF               	movwf	(?_strlen+1)& (0+255),b
 20241  01463A  0012               	return	
 20242  01463C                     __end_of_strlen:
 20243                           	opt stack 0
 20244                           tosu	equ	0xFFF
 20245                           tosh	equ	0xFFE
 20246                           tosl	equ	0xFFD
 20247                           pclath	equ	0xFFA
 20248                           tblptru	equ	0xFF8
 20249                           tblptrh	equ	0xFF7
 20250                           tblptrl	equ	0xFF6
 20251                           tablat	equ	0xFF5
 20252                           prodh	equ	0xFF4
 20253                           prodl	equ	0xFF3
 20254                           intcon	equ	0xFF2
 20255                           indf0	equ	0xFEF
 20256                           postinc0	equ	0xFEE
 20257                           fsr0h	equ	0xFEA
 20258                           fsr0l	equ	0xFE9
 20259                           wreg	equ	0xFE8
 20260                           indf1	equ	0xFE7
 20261                           postdec1	equ	0xFE5
 20262                           fsr1h	equ	0xFE2
 20263                           fsr1l	equ	0xFE1
 20264                           indf2	equ	0xFDF
 20265                           postinc2	equ	0xFDE
 20266                           postdec2	equ	0xFDD
 20267                           plusw2	equ	0xFDB
 20268                           fsr2h	equ	0xFDA
 20269                           fsr2l	equ	0xFD9
 20270                           status	equ	0xFD8
 20271                           
 20272 ;; *************** function _putUSBUSART *****************
 20273 ;; Defined at:
 20274 ;;		line 591 in file "Library/USB/src/usb_device_cdc.c"
 20275 ;; Parameters:    Size  Location     Type
 20276 ;;  data            2    0[BANK0 ] PTR unsigned char 
 20277 ;;		 -> STR_8(6), STR_7(4), STR_6(7), STR_5(6), 
 20278 ;;		 -> STR_4(13), STR_3(9), STR_2(5), USBInputBuffer(64), 
 20279 ;;  length          1    2[BANK0 ] unsigned char 
 20280 ;; Auto vars:     Size  Location     Type
 20281 ;;		None
 20282 ;; Return value:  Size  Location     Type
 20283 ;;                  1    wreg      void 
 20284 ;; Registers used:
 20285 ;;		wreg, status,2, status,0
 20286 ;; Tracked objects:
 20287 ;;		On entry : 0/0
 20288 ;;		On exit  : 0/0
 20289 ;;		Unchanged: 0/0
 20290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20291 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20295 ;;Total ram usage:        3 bytes
 20296 ;; Hardware stack levels used:    1
 20297 ;; Hardware stack levels required when called:   14
 20298 ;; This function calls:
 20299 ;;		Nothing
 20300 ;; This function is called by:
 20301 ;;		_USB_Tasks
 20302 ;;		_USB_Print
 20303 ;; This function uses a non-reentrant model
 20304 ;;
 20305                           
 20306                           	psect	text116
 20307  014F46                     __ptext116:
 20308                           	opt stack 0
 20309  014F46                     _putUSBUSART:
 20310                           	opt stack 13
 20311                           
 20312                           ;usb_device_cdc.c: 616: {PIE2bits.USBIE = 0;};
 20313                           
 20314                           ; BSR set to: 0
 20315                           ;incstack = 0
 20316  014F46  98A0               	bcf	4000,4,c	;volatile
 20317                           
 20318                           ;usb_device_cdc.c: 617: if(cdc_trf_state == 0)
 20319  014F48  0100               	movlb	0	; () banked
 20320  014F4A  519B               	movf	_cdc_trf_state& (0+255),w,b
 20321  014F4C  E109               	bnz	l9915
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;usb_device_cdc.c: 618: {
 20325                           ;usb_device_cdc.c: 619: { pCDCSrc.bRam = (uint8_t*)data; cdc_tx_len = length; cdc_mem_ty
      +                          pe = 0x01; cdc_trf_state = 1; };
 20326  014F4E  C0AE  F12A         	movff	putUSBUSART@data,_pCDCSrc
 20327  014F52  C0AF  F12B         	movff	putUSBUSART@data+1,_pCDCSrc+1
 20328                           
 20329                           ; BSR set to: 0
 20330  014F56  C0B0  F09C         	movff	putUSBUSART@length,_cdc_tx_len
 20331                           
 20332                           ; BSR set to: 0
 20333  014F5A  0E01               	movlw	1
 20334  014F5C  6F99               	movwf	_cdc_mem_type& (0+255),b
 20335                           
 20336                           ; BSR set to: 0
 20337  014F5E  6F9B               	movwf	_cdc_trf_state& (0+255),b
 20338  014F60                     l9915:
 20339                           
 20340                           ; BSR set to: 0
 20341                           ;usb_device_cdc.c: 620: }
 20342                           ;usb_device_cdc.c: 621: {PIE2bits.USBIE = 1;};
 20343  014F60  88A0               	bsf	4000,4,c	;volatile
 20344                           
 20345                           ; BSR set to: 0
 20346  014F62  0012               	return		;funcret
 20347  014F64                     __end_of_putUSBUSART:
 20348                           	opt stack 0
 20349                           tosu	equ	0xFFF
 20350                           tosh	equ	0xFFE
 20351                           tosl	equ	0xFFD
 20352                           pclath	equ	0xFFA
 20353                           tblptru	equ	0xFF8
 20354                           tblptrh	equ	0xFF7
 20355                           tblptrl	equ	0xFF6
 20356                           tablat	equ	0xFF5
 20357                           prodh	equ	0xFF4
 20358                           prodl	equ	0xFF3
 20359                           intcon	equ	0xFF2
 20360                           indf0	equ	0xFEF
 20361                           postinc0	equ	0xFEE
 20362                           fsr0h	equ	0xFEA
 20363                           fsr0l	equ	0xFE9
 20364                           wreg	equ	0xFE8
 20365                           indf1	equ	0xFE7
 20366                           postdec1	equ	0xFE5
 20367                           fsr1h	equ	0xFE2
 20368                           fsr1l	equ	0xFE1
 20369                           indf2	equ	0xFDF
 20370                           postinc2	equ	0xFDE
 20371                           postdec2	equ	0xFDD
 20372                           plusw2	equ	0xFDB
 20373                           fsr2h	equ	0xFDA
 20374                           fsr2l	equ	0xFD9
 20375                           status	equ	0xFD8
 20376                           
 20377 ;; *************** function _LED_Toggle *****************
 20378 ;; Defined at:
 20379 ;;		line 50 in file "Library/LED.c"
 20380 ;; Parameters:    Size  Location     Type
 20381 ;;  pLED            1    wreg     enum E7677
 20382 ;; Auto vars:     Size  Location     Type
 20383 ;;  pLED            1   24[BANK0 ] enum E7677
 20384 ;; Return value:  Size  Location     Type
 20385 ;;                  1    wreg      void 
 20386 ;; Registers used:
 20387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20388 ;; Tracked objects:
 20389 ;;		On entry : 0/0
 20390 ;;		On exit  : 0/0
 20391 ;;		Unchanged: 0/0
 20392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20396 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20397 ;;Total ram usage:        1 bytes
 20398 ;; Hardware stack levels used:    1
 20399 ;; Hardware stack levels required when called:   19
 20400 ;; This function calls:
 20401 ;;		_Port_TogglePin
 20402 ;; This function is called by:
 20403 ;;		_LCD_Reset
 20404 ;;		_Event_DIPSwitch
 20405 ;;		_Event_HMI_DIPSwitch
 20406 ;;		_Event_TestButton
 20407 ;;		_Event_HMI_LeftButton
 20408 ;;		_Event_HMI_RightButton
 20409 ;;		_Event_HMI_UpButton
 20410 ;;		_Event_HMI_DownButton
 20411 ;; This function uses a non-reentrant model
 20412 ;;
 20413                           
 20414                           	psect	text117
 20415  014A5C                     __ptext117:
 20416                           	opt stack 0
 20417  014A5C                     _LED_Toggle:
 20418                           	opt stack 7
 20419                           
 20420                           ; BSR set to: 0
 20421                           ;incstack = 0
 20422                           ;LED_Toggle@pLED stored from wreg
 20423  014A5C  0100               	movlb	0	; () banked
 20424  014A5E  6FC6               	movwf	LED_Toggle@pLED& (0+255),b
 20425                           
 20426                           ;LED.c: 52: switch (pLED)
 20427  014A60  D011               	goto	l10305
 20428  014A62                     l10299:
 20429                           
 20430                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 20431  014A62  0EA4               	movlw	low _PortC
 20432  014A64  0100               	movlb	0	; () banked
 20433  014A66  6FC2               	movwf	Port_TogglePin@pInput& (0+255),b
 20434  014A68  0E00               	movlw	high _PortC
 20435  014A6A  6FC3               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 20436  014A6C  6BC4               	clrf	Port_TogglePin@pPin& (0+255),b
 20437  014A6E  EF48  F0A6         	goto	_Port_TogglePin	;wreg free
 20438  014A72                     l10301:
 20439                           
 20440                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 20441  014A72  0EA4               	movlw	low _PortC
 20442  014A74  0100               	movlb	0	; () banked
 20443  014A76  6FC2               	movwf	Port_TogglePin@pInput& (0+255),b
 20444  014A78  0E00               	movlw	high _PortC
 20445  014A7A  6FC3               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 20446  014A7C  0E01               	movlw	1
 20447  014A7E  6FC4               	movwf	Port_TogglePin@pPin& (0+255),b
 20448  014A80  EF48  F0A6         	goto	_Port_TogglePin	;wreg free
 20449  014A84                     l10305:
 20450  014A84  0100               	movlb	0	; () banked
 20451  014A86  51C6               	movf	LED_Toggle@pLED& (0+255),w,b
 20452                           
 20453                           ; Switch size 1, requested type "space"
 20454                           ; Number of cases is 2, Range of values is 0 to 1
 20455                           ; switch strategies available:
 20456                           ; Name         Instructions Cycles
 20457                           ; simple_byte            7     4 (average)
 20458                           ;	Chosen strategy is simple_byte
 20459  014A88  E0EC               	bz	l10299
 20460  014A8A  0A01               	xorlw	1	; case 1
 20461  014A8C  E0F2               	bz	l10301
 20462                           
 20463                           ; BSR set to: 0
 20464  014A8E  0012               	return		;funcret
 20465  014A90                     __end_of_LED_Toggle:
 20466                           	opt stack 0
 20467                           tosu	equ	0xFFF
 20468                           tosh	equ	0xFFE
 20469                           tosl	equ	0xFFD
 20470                           pclath	equ	0xFFA
 20471                           tblptru	equ	0xFF8
 20472                           tblptrh	equ	0xFF7
 20473                           tblptrl	equ	0xFF6
 20474                           tablat	equ	0xFF5
 20475                           prodh	equ	0xFF4
 20476                           prodl	equ	0xFF3
 20477                           intcon	equ	0xFF2
 20478                           indf0	equ	0xFEF
 20479                           postinc0	equ	0xFEE
 20480                           fsr0h	equ	0xFEA
 20481                           fsr0l	equ	0xFE9
 20482                           wreg	equ	0xFE8
 20483                           indf1	equ	0xFE7
 20484                           postdec1	equ	0xFE5
 20485                           fsr1h	equ	0xFE2
 20486                           fsr1l	equ	0xFE1
 20487                           indf2	equ	0xFDF
 20488                           postinc2	equ	0xFDE
 20489                           postdec2	equ	0xFDD
 20490                           plusw2	equ	0xFDB
 20491                           fsr2h	equ	0xFDA
 20492                           fsr2l	equ	0xFD9
 20493                           status	equ	0xFD8
 20494                           
 20495 ;; *************** function _Port_TogglePin *****************
 20496 ;; Defined at:
 20497 ;;		line 278 in file "Library/Port.c"
 20498 ;; Parameters:    Size  Location     Type
 20499 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 20500 ;;		 -> PortC(10), 
 20501 ;;  pPin            1   22[BANK0 ] enum E7688
 20502 ;; Auto vars:     Size  Location     Type
 20503 ;;  Value           1   23[BANK0 ] unsigned char 
 20504 ;; Return value:  Size  Location     Type
 20505 ;;                  1    wreg      void 
 20506 ;; Registers used:
 20507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20508 ;; Tracked objects:
 20509 ;;		On entry : 0/0
 20510 ;;		On exit  : 0/0
 20511 ;;		Unchanged: 0/0
 20512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20513 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20517 ;;Total ram usage:        4 bytes
 20518 ;; Hardware stack levels used:    1
 20519 ;; Hardware stack levels required when called:   18
 20520 ;; This function calls:
 20521 ;;		_Port_GetPin
 20522 ;;		_Port_SetPin
 20523 ;; This function is called by:
 20524 ;;		_LED_Toggle
 20525 ;; This function uses a non-reentrant model
 20526 ;;
 20527                           
 20528                           	psect	text118
 20529  014C90                     __ptext118:
 20530                           	opt stack 0
 20531  014C90                     _Port_TogglePin:
 20532                           	opt stack 7
 20533                           
 20534                           ;Port.c: 280: UINT8 Value;
 20535                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 20536                           
 20537                           ;incstack = 0
 20538  014C90  C0C2  F0AE         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 20539  014C94  C0C3  F0AF         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 20540  014C98  C0C4  F0B0         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 20541  014C9C  ECFA  F0A3         	call	_Port_GetPin	;wreg free
 20542  014CA0  0100               	movlb	0	; () banked
 20543  014CA2  6FC5               	movwf	Port_TogglePin@Value& (0+255),b
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;Port.c: 282: Value ^= 0x01;
 20547  014CA4  0E01               	movlw	1
 20548  014CA6  1BC5               	xorwf	Port_TogglePin@Value& (0+255),f,b
 20549                           
 20550                           ; BSR set to: 0
 20551                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 20552  014CA8  C0C2  F0BD         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 20553  014CAC  C0C3  F0BE         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 20554  014CB0  C0C4  F0BF         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 20555  014CB4  C0C5  F0C0         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 20556  014CB8  EF96  F09D         	goto	_Port_SetPin	;wreg free
 20557  014CBC                     __end_of_Port_TogglePin:
 20558                           	opt stack 0
 20559                           tosu	equ	0xFFF
 20560                           tosh	equ	0xFFE
 20561                           tosl	equ	0xFFD
 20562                           pclath	equ	0xFFA
 20563                           tblptru	equ	0xFF8
 20564                           tblptrh	equ	0xFF7
 20565                           tblptrl	equ	0xFF6
 20566                           tablat	equ	0xFF5
 20567                           prodh	equ	0xFF4
 20568                           prodl	equ	0xFF3
 20569                           intcon	equ	0xFF2
 20570                           indf0	equ	0xFEF
 20571                           postinc0	equ	0xFEE
 20572                           fsr0h	equ	0xFEA
 20573                           fsr0l	equ	0xFE9
 20574                           wreg	equ	0xFE8
 20575                           indf1	equ	0xFE7
 20576                           postdec1	equ	0xFE5
 20577                           fsr1h	equ	0xFE2
 20578                           fsr1l	equ	0xFE1
 20579                           indf2	equ	0xFDF
 20580                           postinc2	equ	0xFDE
 20581                           postdec2	equ	0xFDD
 20582                           plusw2	equ	0xFDB
 20583                           fsr2h	equ	0xFDA
 20584                           fsr2l	equ	0xFD9
 20585                           status	equ	0xFD8
 20586                           
 20587 ;; *************** function _Port_SetPin *****************
 20588 ;; Defined at:
 20589 ;;		line 247 in file "Library/Port.c"
 20590 ;; Parameters:    Size  Location     Type
 20591 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 20592 ;;		 -> PortG(10), PortC(10), PortF(10), PortE(10), 
 20593 ;;  pPin            1   17[BANK0 ] enum E7688
 20594 ;;  pValue          1   18[BANK0 ] unsigned char 
 20595 ;; Auto vars:     Size  Location     Type
 20596 ;;  Type            1   19[BANK0 ] enum E7733
 20597 ;; Return value:  Size  Location     Type
 20598 ;;                  1    wreg      void 
 20599 ;; Registers used:
 20600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20601 ;; Tracked objects:
 20602 ;;		On entry : 0/0
 20603 ;;		On exit  : 0/0
 20604 ;;		Unchanged: 0/0
 20605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20606 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20609 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20610 ;;Total ram usage:        5 bytes
 20611 ;; Hardware stack levels used:    1
 20612 ;; Hardware stack levels required when called:   17
 20613 ;; This function calls:
 20614 ;;		_Byte_SetBit
 20615 ;;		_Word_GetPair
 20616 ;; This function is called by:
 20617 ;;		_Reset_Low
 20618 ;;		_Reset_High
 20619 ;;		_LED_Set
 20620 ;;		_Port_TogglePin
 20621 ;;		_Motor_Init
 20622 ;;		_MXK_Init
 20623 ;; This function uses a non-reentrant model
 20624 ;;
 20625                           
 20626                           	psect	text119
 20627  013B2C                     __ptext119:
 20628                           	opt stack 0
 20629  013B2C                     _Port_SetPin:
 20630                           	opt stack 12
 20631                           
 20632                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 20633                           
 20634                           ;incstack = 0
 20635  013B2C  0E08               	movlw	8
 20636  013B2E  0100               	movlb	0	; () banked
 20637  013B30  25BD               	addwf	Port_SetPin@pInput& (0+255),w,b
 20638  013B32  6FBA               	movwf	Word_GetPair@pInput& (0+255),b
 20639  013B34  0E00               	movlw	0
 20640  013B36  21BE               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 20641  013B38  6FBB               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20642  013B3A  C0BF  F0BC         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 20643  013B3E  EC5E  F0A6         	call	_Word_GetPair	;wreg free
 20644  013B42  0100               	movlb	0	; () banked
 20645  013B44  6FC1               	movwf	Port_SetPin@Type& (0+255),b
 20646                           
 20647                           ;Port.c: 250: switch (Type)
 20648  013B46  D01F               	goto	l9241
 20649  013B48                     l9227:
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;Port.c: 256: pValue &= 1;
 20653  013B48  0E01               	movlw	1
 20654  013B4A  0100               	movlb	0	; () banked
 20655  013B4C  17C0               	andwf	Port_SetPin@pValue& (0+255),f,b
 20656  013B4E  D004               	goto	l9233
 20657  013B50                     l9231:
 20658                           
 20659                           ;Port.c: 261: pValue &= 1;
 20660  013B50  0E01               	movlw	1
 20661  013B52  0100               	movlb	0	; () banked
 20662  013B54  17C0               	andwf	Port_SetPin@pValue& (0+255),f,b
 20663                           
 20664                           ;Port.c: 262: pValue ^= 1;
 20665  013B56  1BC0               	xorwf	Port_SetPin@pValue& (0+255),f,b
 20666  013B58                     l9233:
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20670  013B58  0100               	movlb	0	; () banked
 20671  013B5A  EE20 F002          	lfsr	2,2
 20672  013B5E  D005               	goto	L28
 20673  013B60                     l9235:
 20674                           
 20675                           ;Port.c: 266: pValue &= 1;
 20676  013B60  0E01               	movlw	1
 20677  013B62  0100               	movlb	0	; () banked
 20678  013B64  17C0               	andwf	Port_SetPin@pValue& (0+255),f,b
 20679                           
 20680                           ; BSR set to: 0
 20681                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 20682  013B66  EE20 F004          	lfsr	2,4
 20683  013B6A                     L28:
 20684  013B6A  51BD               	movf	Port_SetPin@pInput& (0+255),w,b
 20685  013B6C  26D9               	addwf	fsr2l,f,c
 20686  013B6E  51BE               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 20687  013B70  22DA               	addwfc	fsr2h,f,c
 20688  013B72  CFDE F0AE          	movff	postinc2,Byte_SetBit@pInput
 20689  013B76  CFDD F0AF          	movff	postdec2,Byte_SetBit@pInput+1
 20690  013B7A  C0BF  F0B0         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 20691  013B7E  C0C0  F0B1         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 20692  013B82  EF1C  F0A1         	goto	_Byte_SetBit	;wreg free
 20693  013B86                     l9241:
 20694  013B86  0100               	movlb	0	; () banked
 20695  013B88  51C1               	movf	Port_SetPin@Type& (0+255),w,b
 20696                           
 20697                           ; Switch size 1, requested type "space"
 20698                           ; Number of cases is 4, Range of values is 0 to 3
 20699                           ; switch strategies available:
 20700                           ; Name         Instructions Cycles
 20701                           ; simple_byte           13     7 (average)
 20702                           ;	Chosen strategy is simple_byte
 20703  013B8A  B4D8               	btfsc	status,2,c
 20704  013B8C  0012               	return	
 20705  013B8E  0A01               	xorlw	1	; case 1
 20706  013B90  E0DB               	bz	l9227
 20707  013B92  0A03               	xorlw	3	; case 2
 20708  013B94  E0DD               	bz	l9231
 20709  013B96  0A01               	xorlw	1	; case 3
 20710  013B98  E0E3               	bz	l9235
 20711                           
 20712                           ; BSR set to: 0
 20713  013B9A  0012               	return		;funcret
 20714  013B9C                     __end_of_Port_SetPin:
 20715                           	opt stack 0
 20716                           tosu	equ	0xFFF
 20717                           tosh	equ	0xFFE
 20718                           tosl	equ	0xFFD
 20719                           pclath	equ	0xFFA
 20720                           tblptru	equ	0xFF8
 20721                           tblptrh	equ	0xFF7
 20722                           tblptrl	equ	0xFF6
 20723                           tablat	equ	0xFF5
 20724                           prodh	equ	0xFF4
 20725                           prodl	equ	0xFF3
 20726                           intcon	equ	0xFF2
 20727                           indf0	equ	0xFEF
 20728                           postinc0	equ	0xFEE
 20729                           fsr0h	equ	0xFEA
 20730                           fsr0l	equ	0xFE9
 20731                           wreg	equ	0xFE8
 20732                           indf1	equ	0xFE7
 20733                           postdec1	equ	0xFE5
 20734                           fsr1h	equ	0xFE2
 20735                           fsr1l	equ	0xFE1
 20736                           indf2	equ	0xFDF
 20737                           postinc2	equ	0xFDE
 20738                           postdec2	equ	0xFDD
 20739                           plusw2	equ	0xFDB
 20740                           fsr2h	equ	0xFDA
 20741                           fsr2l	equ	0xFD9
 20742                           status	equ	0xFD8
 20743                           
 20744 ;; *************** function _Word_GetPair *****************
 20745 ;; Defined at:
 20746 ;;		line 156 in file "Library/Types.c"
 20747 ;; Parameters:    Size  Location     Type
 20748 ;;  pInput          2   12[BANK0 ] PTR struct Word
 20749 ;;		 -> PortG(10), PortA(10), PortG_Property(2), PortF_Property(2), 
 20750 ;;		 -> PortE_Property(2), PortD_Property(2), PortC_Property(2), PortB_Property(2), 
 20751 ;;		 -> PortA_Property(2), PortC(10), PortF(10), PortE(10), 
 20752 ;;		 -> PortD(10), PortB(10), NULL(0), 
 20753 ;;  pPair           1   14[BANK0 ] unsigned char 
 20754 ;; Auto vars:     Size  Location     Type
 20755 ;;		None
 20756 ;; Return value:  Size  Location     Type
 20757 ;;                  1    wreg      unsigned char 
 20758 ;; Registers used:
 20759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20760 ;; Tracked objects:
 20761 ;;		On entry : 0/0
 20762 ;;		On exit  : 0/0
 20763 ;;		Unchanged: 0/0
 20764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20765 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20769 ;;Total ram usage:        3 bytes
 20770 ;; Hardware stack levels used:    1
 20771 ;; Hardware stack levels required when called:   16
 20772 ;; This function calls:
 20773 ;;		_Byte_GetPair
 20774 ;; This function is called by:
 20775 ;;		_Port_Init
 20776 ;;		_Port_SetPin
 20777 ;;		_Port_Set
 20778 ;;		_PortProperty_Valid
 20779 ;;		_Port_SetPair
 20780 ;;		_Port_SetQuad
 20781 ;; This function uses a non-reentrant model
 20782 ;;
 20783                           
 20784                           	psect	text120
 20785  014CBC                     __ptext120:
 20786                           	opt stack 0
 20787  014CBC                     _Word_GetPair:
 20788                           	opt stack 8
 20789                           
 20790                           ;Types.c: 158: if (pPair >= 4)
 20791                           
 20792                           ;incstack = 0
 20793  014CBC  0E03               	movlw	3
 20794  014CBE  0100               	movlb	0	; () banked
 20795  014CC0  65BC               	cpfsgt	Word_GetPair@pPair& (0+255),b
 20796  014CC2  D00A               	goto	l9075
 20797                           
 20798                           ; BSR set to: 0
 20799                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20800  014CC4  29BA               	incf	Word_GetPair@pInput& (0+255),w,b
 20801  014CC6  6FB7               	movwf	Byte_GetPair@pInput& (0+255),b
 20802  014CC8  0E00               	movlw	0
 20803  014CCA  21BB               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 20804  014CCC  6FB8               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 20805  014CCE  51BC               	movf	Word_GetPair@pPair& (0+255),w,b
 20806  014CD0  0FFC               	addlw	252
 20807  014CD2  6FB9               	movwf	Byte_GetPair@pPair& (0+255),b
 20808  014CD4  EF0B  F097         	goto	_Byte_GetPair	;wreg free
 20809  014CD8                     l9075:
 20810                           
 20811                           ;Types.c: 160: else
 20812                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20813  014CD8  C0BA  F0B7         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 20814  014CDC  C0BB  F0B8         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 20815  014CE0  C0BC  F0B9         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 20816  014CE4  EF0B  F097         	goto	_Byte_GetPair	;wreg free
 20817  014CE8                     __end_of_Word_GetPair:
 20818                           	opt stack 0
 20819                           tosu	equ	0xFFF
 20820                           tosh	equ	0xFFE
 20821                           tosl	equ	0xFFD
 20822                           pclath	equ	0xFFA
 20823                           tblptru	equ	0xFF8
 20824                           tblptrh	equ	0xFF7
 20825                           tblptrl	equ	0xFF6
 20826                           tablat	equ	0xFF5
 20827                           prodh	equ	0xFF4
 20828                           prodl	equ	0xFF3
 20829                           intcon	equ	0xFF2
 20830                           indf0	equ	0xFEF
 20831                           postinc0	equ	0xFEE
 20832                           fsr0h	equ	0xFEA
 20833                           fsr0l	equ	0xFE9
 20834                           wreg	equ	0xFE8
 20835                           indf1	equ	0xFE7
 20836                           postdec1	equ	0xFE5
 20837                           fsr1h	equ	0xFE2
 20838                           fsr1l	equ	0xFE1
 20839                           indf2	equ	0xFDF
 20840                           postinc2	equ	0xFDE
 20841                           postdec2	equ	0xFDD
 20842                           plusw2	equ	0xFDB
 20843                           fsr2h	equ	0xFDA
 20844                           fsr2l	equ	0xFD9
 20845                           status	equ	0xFD8
 20846                           
 20847 ;; *************** function _Byte_GetPair *****************
 20848 ;; Defined at:
 20849 ;;		line 87 in file "Library/Types.c"
 20850 ;; Parameters:    Size  Location     Type
 20851 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 20852 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20853 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortB..(2), 
 20854 ;;		 -> PortD..(2), PortE..(2), PortF..(2), PortC..(2), 
 20855 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20856 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20857 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), PortC(10), 
 20858 ;;		 -> PortF(10), PortE(10), PortD(10), PortB(10), 
 20859 ;;		 -> NULL(0), 
 20860 ;;  pPair           1   11[BANK0 ] unsigned char 
 20861 ;; Auto vars:     Size  Location     Type
 20862 ;;		None
 20863 ;; Return value:  Size  Location     Type
 20864 ;;                  1    wreg      unsigned char 
 20865 ;; Registers used:
 20866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20867 ;; Tracked objects:
 20868 ;;		On entry : 0/0
 20869 ;;		On exit  : 0/0
 20870 ;;		Unchanged: 0/0
 20871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20872 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20876 ;;Total ram usage:        3 bytes
 20877 ;; Hardware stack levels used:    1
 20878 ;; Hardware stack levels required when called:   15
 20879 ;; This function calls:
 20880 ;;		_Byte_GetZone
 20881 ;; This function is called by:
 20882 ;;		_Word_GetPair
 20883 ;; This function uses a non-reentrant model
 20884 ;;
 20885                           
 20886                           	psect	text121
 20887  012E16                     __ptext121:
 20888                           	opt stack 0
 20889  012E16                     _Byte_GetPair:
 20890                           	opt stack 8
 20891                           
 20892                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20893                           
 20894                           ;incstack = 0
 20895  012E16  C0B7  F0AE         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 20896  012E1A  C0B8  F0AF         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 20897  012E1E  0E04               	movlw	4
 20898  012E20  0100               	movlb	0	; () banked
 20899  012E22  6FB0               	movwf	Byte_GetZone@pMax& (0+255),b
 20900  012E24  C0B9  F0B1         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 20901  012E28  0E02               	movlw	2
 20902  012E2A  6FB2               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 20903  012E2C                     i7L__ptext122:
 20904                           	opt stack 0
 20905  012E2C                     i7L_Byte_GetZone:
 20906                           	opt stack 0
 20907  012E2C                     i7Ll8797:
 20908                           	opt stack 8
 20909                           
 20910                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20911  012E2C  C0AE  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 20912  012E30  C0AF  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 20913  012E34  0E00               	movlw	low (__mediumconst shr (0+16))
 20914  012E36  6EF8               	movwf	tblptru,c
 20915  012E38  0E0F               	movlw	(high __ramtop+-1)
 20916  012E3A  64F7               	cpfsgt	tblptrh,c
 20917  012E3C  D003               	bra	i7Lu5597
 20918  012E3E  0008               	tblrd		*
 20919  012E40  50F5               	movf	tablat,w,c
 20920  012E42  D005               	bra	i7Lu5590
 20921  012E44                     i7Lu5597:
 20922                           	opt stack 8
 20923  012E44  CFF6 FFE9          	movff	tblptrl,fsr0l
 20924  012E48  CFF7 FFEA          	movff	tblptrh,fsr0h
 20925  012E4C  50EF               	movf	indf0,w,c
 20926  012E4E                     i7Lu5590:
 20927                           	opt stack 8
 20928  012E4E  0100               	movlb	0	; () banked
 20929  012E50  6FB6               	movwf	Byte_GetZone@Output& (0+255),b
 20930  012E52                     i7Ll8799:
 20931                           	opt stack 8
 20932                           
 20933                           ; BSR set to: 0
 20934                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20935  012E52  0100               	movlb	0	; () banked
 20936  012E54  51B2               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20937  012E56  0D01               	mullw	1
 20938  012E58  0EC1               	movlw	low _MASKS
 20939  012E5A  24F3               	addwf	prodl,w,c
 20940  012E5C  6EF6               	movwf	tblptrl,c
 20941  012E5E  0EFC               	movlw	high _MASKS
 20942  012E60  20F4               	addwfc	prodh,w,c
 20943  012E62  6EF7               	movwf	tblptrh,c
 20944  012E64                     	if	1	;There are 3 active tblptr bytes
 20945  012E64  6AF8               	clrf	tblptru,c
 20946  012E66  0E00               	movlw	low (__mediumconst shr (0+16))
 20947  012E68  22F8               	addwfc	tblptru,f,c
 20948  012E6A                     	endif
 20949  012E6A  0008               	tblrd		*
 20950  012E6C  CFF5 F0B4          	movff	tablat,Byte_GetZone@MASK
 20951  012E70                     i7Ll8801:
 20952                           	opt stack 8
 20953                           
 20954                           ; BSR set to: 0
 20955                           ;Types.c: 68: UINT8 Offset = 0;
 20956  012E70  0100               	movlb	0	; () banked
 20957  012E72  6BB5               	clrf	Byte_GetZone@Offset& (0+255),b
 20958  012E74  D006               	goto	i7Ll8807
 20959  012E76                     i7Ll1313:
 20960                           	opt stack 0
 20961  012E76                     i7Ll8803:
 20962                           	opt stack 8
 20963                           
 20964                           ; BSR set to: 0
 20965                           ;Types.c: 71: {
 20966                           ;Types.c: 72: pChunk -= pMax;
 20967  012E76  0100               	movlb	0	; () banked
 20968  012E78  51B0               	movf	Byte_GetZone@pMax& (0+255),w,b
 20969  012E7A  5FB1               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 20970  012E7C                     i7Ll8805:
 20971                           	opt stack 8
 20972                           
 20973                           ; BSR set to: 0
 20974                           ;Types.c: 73: Offset += 1;
 20975  012E7C  0100               	movlb	0	; () banked
 20976  012E7E  2BB5               	incf	Byte_GetZone@Offset& (0+255),f,b
 20977  012E80  D000               	goto	i7Ll8807
 20978  012E82                     i7Ll1312:
 20979                           	opt stack 0
 20980  012E82                     i7Ll8807:
 20981                           	opt stack 8
 20982                           
 20983                           ; BSR set to: 0
 20984  012E82  0100               	movlb	0	; () banked
 20985  012E84  51B0               	movf	Byte_GetZone@pMax& (0+255),w,b
 20986  012E86  5DB1               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 20987  012E88  E302               	bnc	i7Ll8809
 20988  012E8A                     i7Lu5601:
 20989                           	opt stack 0
 20990  012E8A  D7F5               	goto	i7Ll8803
 20991  012E8C                     i7Lu5600:
 20992                           	opt stack 0
 20993  012E8C  D000               	goto	i7Ll8809
 20994  012E8E                     i7Ll1314:
 20995                           	opt stack 0
 20996  012E8E                     i7Ll8809:
 20997                           	opt stack 8
 20998                           
 20999                           ; BSR set to: 0
 21000                           ;Types.c: 74: }
 21001                           ;Types.c: 75: pChunk *= pChunkSize;
 21002  012E8E  0100               	movlb	0	; () banked
 21003  012E90  51B2               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 21004  012E92  03B1               	mulwf	Byte_GetZone@pChunk& (0+255),b
 21005  012E94  50F3               	movf	prodl,w,c
 21006  012E96  6FB1               	movwf	Byte_GetZone@pChunk& (0+255),b
 21007  012E98                     i7Ll8811:
 21008                           	opt stack 8
 21009                           
 21010                           ; BSR set to: 0
 21011                           ;Types.c: 76: pChunk += Offset;
 21012  012E98  0100               	movlb	0	; () banked
 21013  012E9A  51B5               	movf	Byte_GetZone@Offset& (0+255),w,b
 21014  012E9C  27B1               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 21015  012E9E                     i7Ll8813:
 21016                           	opt stack 8
 21017                           
 21018                           ; BSR set to: 0
 21019                           ;Types.c: 78: Output >>= pChunk;
 21020  012E9E  0100               	movlb	0	; () banked
 21021  012EA0  29B1               	incf	Byte_GetZone@pChunk& (0+255),w,b
 21022  012EA2  6FB3               	movwf	??_Byte_GetZone& (0+255),b
 21023  012EA4  D003               	goto	i7Lu5610
 21024  012EA6                     i7Lu5615:
 21025                           	opt stack 8
 21026  012EA6  0100               	movlb	0	; () banked
 21027  012EA8  90D8               	bcf	status,0,c
 21028  012EAA  33B6               	rrcf	Byte_GetZone@Output& (0+255),f,b
 21029  012EAC                     i7Lu5610:
 21030                           	opt stack 8
 21031  012EAC  0100               	movlb	0	; () banked
 21032  012EAE  2FB3               	decfsz	??_Byte_GetZone& (0+255),f,b
 21033  012EB0  D7FA               	goto	i7Lu5615
 21034  012EB2                     i7Ll8815:
 21035                           	opt stack 8
 21036                           
 21037                           ;Types.c: 79: Output &= MASK;
 21038  012EB2  0100               	movlb	0	; () banked
 21039  012EB4  51B4               	movf	Byte_GetZone@MASK& (0+255),w,b
 21040  012EB6  17B6               	andwf	Byte_GetZone@Output& (0+255),f,b
 21041  012EB8                     i7Ll8817:
 21042                           	opt stack 8
 21043                           
 21044                           ; BSR set to: 0
 21045                           ;Types.c: 80: return Output;
 21046  012EB8  0100               	movlb	0	; () banked
 21047  012EBA  51B6               	movf	Byte_GetZone@Output& (0+255),w,b
 21048  012EBC  0012               	return	
 21049  012EBE                     i7Ll8819:
 21050                           	opt stack 0
 21051  012EBE                     i7Ll1315:
 21052                           	opt stack 0
 21053  012EBE  0012               	return	
 21054  012EC0                     __end_of_Byte_GetPair:
 21055                           	opt stack 0
 21056                           tosu	equ	0xFFF
 21057                           tosh	equ	0xFFE
 21058                           tosl	equ	0xFFD
 21059                           pclath	equ	0xFFA
 21060                           tblptru	equ	0xFF8
 21061                           tblptrh	equ	0xFF7
 21062                           tblptrl	equ	0xFF6
 21063                           tablat	equ	0xFF5
 21064                           prodh	equ	0xFF4
 21065                           prodl	equ	0xFF3
 21066                           intcon	equ	0xFF2
 21067                           indf0	equ	0xFEF
 21068                           postinc0	equ	0xFEE
 21069                           fsr0h	equ	0xFEA
 21070                           fsr0l	equ	0xFE9
 21071                           wreg	equ	0xFE8
 21072                           indf1	equ	0xFE7
 21073                           postdec1	equ	0xFE5
 21074                           fsr1h	equ	0xFE2
 21075                           fsr1l	equ	0xFE1
 21076                           indf2	equ	0xFDF
 21077                           postinc2	equ	0xFDE
 21078                           postdec2	equ	0xFDD
 21079                           plusw2	equ	0xFDB
 21080                           fsr2h	equ	0xFDA
 21081                           fsr2l	equ	0xFD9
 21082                           status	equ	0xFD8
 21083                           
 21084 ;; *************** function _Byte_GetZone *****************
 21085 ;; Defined at:
 21086 ;;		line 64 in file "Library/Types.c"
 21087 ;; Parameters:    Size  Location     Type
 21088 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21089 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 21090 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortB..(2), 
 21091 ;;		 -> PortD..(2), PortE..(2), PortF..(2), PortC..(2), 
 21092 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 21093 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 21094 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), PortC(10), 
 21095 ;;		 -> PortF(10), PortE(10), PortD(10), PortB(10), 
 21096 ;;		 -> NULL(0), 
 21097 ;;  pMax            1    2[BANK0 ] unsigned char 
 21098 ;;  pChunk          1    3[BANK0 ] unsigned char 
 21099 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 21100 ;; Auto vars:     Size  Location     Type
 21101 ;;  Output          1    8[BANK0 ] unsigned char 
 21102 ;;  Offset          1    7[BANK0 ] unsigned char 
 21103 ;;  MASK            1    6[BANK0 ] unsigned char 
 21104 ;; Return value:  Size  Location     Type
 21105 ;;                  1    wreg      unsigned char 
 21106 ;; Registers used:
 21107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 21108 ;; Tracked objects:
 21109 ;;		On entry : 0/0
 21110 ;;		On exit  : 0/0
 21111 ;;		Unchanged: 0/0
 21112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21113 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21114 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21116 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21117 ;;Total ram usage:        9 bytes
 21118 ;; Hardware stack levels used:    1
 21119 ;; Hardware stack levels required when called:   14
 21120 ;; This function calls:
 21121 ;;		Nothing
 21122 ;; This function is called by:
 21123 ;;		_Byte_GetPair
 21124 ;;		_Byte_GetTriple
 21125 ;;		_Byte_GetQuad
 21126 ;; This function uses a non-reentrant model
 21127 ;;
 21128                           
 21129                           	psect	text122
 21130  000000                     __ptext122:
 21131                           	opt stack 0
 21132  000000                     _Byte_GetZone:
 21133                           	opt stack 0
 21134  000000                     __end_of_Byte_GetZone:
 21135                           	opt stack 0
 21136                           tosu	equ	0xFFF
 21137                           tosh	equ	0xFFE
 21138                           tosl	equ	0xFFD
 21139                           pclath	equ	0xFFA
 21140                           tblptru	equ	0xFF8
 21141                           tblptrh	equ	0xFF7
 21142                           tblptrl	equ	0xFF6
 21143                           tablat	equ	0xFF5
 21144                           prodh	equ	0xFF4
 21145                           prodl	equ	0xFF3
 21146                           intcon	equ	0xFF2
 21147                           indf0	equ	0xFEF
 21148                           postinc0	equ	0xFEE
 21149                           fsr0h	equ	0xFEA
 21150                           fsr0l	equ	0xFE9
 21151                           wreg	equ	0xFE8
 21152                           indf1	equ	0xFE7
 21153                           postdec1	equ	0xFE5
 21154                           fsr1h	equ	0xFE2
 21155                           fsr1l	equ	0xFE1
 21156                           indf2	equ	0xFDF
 21157                           postinc2	equ	0xFDE
 21158                           postdec2	equ	0xFDD
 21159                           plusw2	equ	0xFDB
 21160                           fsr2h	equ	0xFDA
 21161                           fsr2l	equ	0xFD9
 21162                           status	equ	0xFD8
 21163                           
 21164 ;; *************** function _Byte_SetBit *****************
 21165 ;; Defined at:
 21166 ;;		line 32 in file "Library/Types.c"
 21167 ;; Parameters:    Size  Location     Type
 21168 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21169 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 21170 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 21171 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21172 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21173 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21174 ;;		 -> NULL(0), 
 21175 ;;  pBit            1    2[BANK0 ] unsigned char 
 21176 ;;  pValue          1    3[BANK0 ] unsigned char 
 21177 ;; Auto vars:     Size  Location     Type
 21178 ;;		None
 21179 ;; Return value:  Size  Location     Type
 21180 ;;                  1    wreg      void 
 21181 ;; Registers used:
 21182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21183 ;; Tracked objects:
 21184 ;;		On entry : 0/0
 21185 ;;		On exit  : 0/0
 21186 ;;		Unchanged: 0/0
 21187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21190 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21191 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21192 ;;Total ram usage:        7 bytes
 21193 ;; Hardware stack levels used:    1
 21194 ;; Hardware stack levels required when called:   14
 21195 ;; This function calls:
 21196 ;;		Nothing
 21197 ;; This function is called by:
 21198 ;;		_Port_SetPinType
 21199 ;;		_Port_SetPin
 21200 ;;		_SPI_Init
 21201 ;;		_SPI_MinSpeed
 21202 ;;		_SPI_MaxSpeed
 21203 ;;		_Word_SetBit
 21204 ;;		_I2C_Init
 21205 ;; This function uses a non-reentrant model
 21206 ;;
 21207                           
 21208                           	psect	text123
 21209  014238                     __ptext123:
 21210                           	opt stack 0
 21211  014238                     _Byte_SetBit:
 21212                           	opt stack 14
 21213                           
 21214                           ;Types.c: 34: pValue &= 1;
 21215                           
 21216                           ; BSR set to: 0
 21217                           ;incstack = 0
 21218  014238  0E01               	movlw	1
 21219  01423A  0100               	movlb	0	; () banked
 21220  01423C  17B1               	andwf	Byte_SetBit@pValue& (0+255),f,b
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21224  01423E  C0B0  F0B2         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21225  014242  6FB3               	movwf	(??_Byte_SetBit+1)& (0+255),b
 21226  014244  2BB2               	incf	??_Byte_SetBit& (0+255),f,b
 21227  014246  D003               	goto	u5874
 21228  014248                     u5875:
 21229  014248  0100               	movlb	0	; () banked
 21230  01424A  90D8               	bcf	status,0,c
 21231  01424C  37B3               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21232  01424E                     u5874:
 21233  01424E  0100               	movlb	0	; () banked
 21234  014250  2FB2               	decfsz	??_Byte_SetBit& (0+255),f,b
 21235  014252  D7FA               	goto	u5875
 21236  014254  1DB3               	comf	(??_Byte_SetBit+1)& (0+255),w,b
 21237  014256  6FB4               	movwf	(??_Byte_SetBit+2)& (0+255),b
 21238  014258  C0AE  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21239  01425C  C0AF  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21240  014260  51B4               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 21241  014262  16DF               	andwf	indf2,f,c
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21245  014264  C0B0  F0B2         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21246  014268  C0B1  F0B3         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 21247  01426C  2BB2               	incf	??_Byte_SetBit& (0+255),f,b
 21248  01426E  D003               	goto	u5884
 21249  014270                     u5885:
 21250  014270  0100               	movlb	0	; () banked
 21251  014272  90D8               	bcf	status,0,c
 21252  014274  37B3               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21253  014276                     u5884:
 21254  014276  0100               	movlb	0	; () banked
 21255  014278  2FB2               	decfsz	??_Byte_SetBit& (0+255),f,b
 21256  01427A  D7FA               	goto	u5885
 21257  01427C  C0AE  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21258  014280  C0AF  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21259  014284  51B3               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21260  014286  12DF               	iorwf	indf2,f,c
 21261                           
 21262                           ; BSR set to: 0
 21263  014288  0012               	return		;funcret
 21264  01428A                     __end_of_Byte_SetBit:
 21265                           	opt stack 0
 21266                           tosu	equ	0xFFF
 21267                           tosh	equ	0xFFE
 21268                           tosl	equ	0xFFD
 21269                           pclath	equ	0xFFA
 21270                           tblptru	equ	0xFF8
 21271                           tblptrh	equ	0xFF7
 21272                           tblptrl	equ	0xFF6
 21273                           tablat	equ	0xFF5
 21274                           prodh	equ	0xFF4
 21275                           prodl	equ	0xFF3
 21276                           intcon	equ	0xFF2
 21277                           indf0	equ	0xFEF
 21278                           postinc0	equ	0xFEE
 21279                           fsr0h	equ	0xFEA
 21280                           fsr0l	equ	0xFE9
 21281                           wreg	equ	0xFE8
 21282                           indf1	equ	0xFE7
 21283                           postdec1	equ	0xFE5
 21284                           fsr1h	equ	0xFE2
 21285                           fsr1l	equ	0xFE1
 21286                           indf2	equ	0xFDF
 21287                           postinc2	equ	0xFDE
 21288                           postdec2	equ	0xFDD
 21289                           plusw2	equ	0xFDB
 21290                           fsr2h	equ	0xFDA
 21291                           fsr2l	equ	0xFD9
 21292                           status	equ	0xFD8
 21293                           
 21294 ;; *************** function _HMI_SetBar *****************
 21295 ;; Defined at:
 21296 ;;		line 164 in file "HMI.c"
 21297 ;; Parameters:    Size  Location     Type
 21298 ;;  pValue          1    wreg     unsigned char 
 21299 ;; Auto vars:     Size  Location     Type
 21300 ;;  pValue          1    0[BANK0 ] unsigned char 
 21301 ;; Return value:  Size  Location     Type
 21302 ;;                  1    wreg      void 
 21303 ;; Registers used:
 21304 ;;		wreg
 21305 ;; Tracked objects:
 21306 ;;		On entry : 0/0
 21307 ;;		On exit  : 0/0
 21308 ;;		Unchanged: 0/0
 21309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21314 ;;Total ram usage:        1 bytes
 21315 ;; Hardware stack levels used:    1
 21316 ;; Hardware stack levels required when called:   14
 21317 ;; This function calls:
 21318 ;;		Nothing
 21319 ;; This function is called by:
 21320 ;;		_Event_DIPSwitch
 21321 ;;		_Event_HMI_DIPSwitch
 21322 ;;		_Event_HMI_LeftButton
 21323 ;;		_Event_HMI_RightButton
 21324 ;;		_FunctInitHMI
 21325 ;; This function uses a non-reentrant model
 21326 ;;
 21327                           
 21328                           	psect	text124
 21329  015086                     __ptext124:
 21330                           	opt stack 0
 21331  015086                     _HMI_SetBar:
 21332                           	opt stack 15
 21333                           
 21334                           ; BSR set to: 0
 21335                           ;incstack = 0
 21336                           ;HMI_SetBar@pValue stored from wreg
 21337  015086  0100               	movlb	0	; () banked
 21338  015088  6FAE               	movwf	HMI_SetBar@pValue& (0+255),b
 21339                           
 21340                           ;HMI.c: 166: HMIBoard.pBarGraph = pValue;
 21341  01508A  C0AE  F13A         	movff	HMI_SetBar@pValue,_HMIBoard+7
 21342  01508E  0012               	return		;funcret
 21343  015090                     __end_of_HMI_SetBar:
 21344                           	opt stack 0
 21345                           tosu	equ	0xFFF
 21346                           tosh	equ	0xFFE
 21347                           tosl	equ	0xFFD
 21348                           pclath	equ	0xFFA
 21349                           tblptru	equ	0xFF8
 21350                           tblptrh	equ	0xFF7
 21351                           tblptrl	equ	0xFF6
 21352                           tablat	equ	0xFF5
 21353                           prodh	equ	0xFF4
 21354                           prodl	equ	0xFF3
 21355                           intcon	equ	0xFF2
 21356                           indf0	equ	0xFEF
 21357                           postinc0	equ	0xFEE
 21358                           fsr0h	equ	0xFEA
 21359                           fsr0l	equ	0xFE9
 21360                           wreg	equ	0xFE8
 21361                           indf1	equ	0xFE7
 21362                           postdec1	equ	0xFE5
 21363                           fsr1h	equ	0xFE2
 21364                           fsr1l	equ	0xFE1
 21365                           indf2	equ	0xFDF
 21366                           postinc2	equ	0xFDE
 21367                           postdec2	equ	0xFDD
 21368                           plusw2	equ	0xFDB
 21369                           fsr2h	equ	0xFDA
 21370                           fsr2l	equ	0xFD9
 21371                           status	equ	0xFD8
 21372                           
 21373 ;; *************** function _HMI_GetBar *****************
 21374 ;; Defined at:
 21375 ;;		line 168 in file "HMI.c"
 21376 ;; Parameters:    Size  Location     Type
 21377 ;;		None
 21378 ;; Auto vars:     Size  Location     Type
 21379 ;;		None
 21380 ;; Return value:  Size  Location     Type
 21381 ;;                  1    wreg      unsigned char 
 21382 ;; Registers used:
 21383 ;;		wreg, status,2
 21384 ;; Tracked objects:
 21385 ;;		On entry : 0/0
 21386 ;;		On exit  : 0/0
 21387 ;;		Unchanged: 0/0
 21388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21393 ;;Total ram usage:        0 bytes
 21394 ;; Hardware stack levels used:    1
 21395 ;; Hardware stack levels required when called:   14
 21396 ;; This function calls:
 21397 ;;		Nothing
 21398 ;; This function is called by:
 21399 ;;		_Event_DIPSwitch
 21400 ;;		_Event_HMI_DIPSwitch
 21401 ;; This function uses a non-reentrant model
 21402 ;;
 21403                           
 21404                           	psect	text125
 21405  0150A0                     __ptext125:
 21406                           	opt stack 0
 21407  0150A0                     _HMI_GetBar:
 21408                           	opt stack 12
 21409                           
 21410                           ;HMI.c: 170: return HMIBoard.pBarGraph;
 21411                           
 21412                           ;incstack = 0
 21413  0150A0  0101               	movlb	1	; () banked
 21414  0150A2  513A               	movf	(_HMIBoard+7)& (0+255),w,b
 21415  0150A4  0012               	return	
 21416  0150A6                     __end_of_HMI_GetBar:
 21417                           	opt stack 0
 21418                           tosu	equ	0xFFF
 21419                           tosh	equ	0xFFE
 21420                           tosl	equ	0xFFD
 21421                           pclath	equ	0xFFA
 21422                           tblptru	equ	0xFF8
 21423                           tblptrh	equ	0xFF7
 21424                           tblptrl	equ	0xFF6
 21425                           tablat	equ	0xFF5
 21426                           prodh	equ	0xFF4
 21427                           prodl	equ	0xFF3
 21428                           intcon	equ	0xFF2
 21429                           indf0	equ	0xFEF
 21430                           postinc0	equ	0xFEE
 21431                           fsr0h	equ	0xFEA
 21432                           fsr0l	equ	0xFE9
 21433                           wreg	equ	0xFE8
 21434                           indf1	equ	0xFE7
 21435                           postdec1	equ	0xFE5
 21436                           fsr1h	equ	0xFE2
 21437                           fsr1l	equ	0xFE1
 21438                           indf2	equ	0xFDF
 21439                           postinc2	equ	0xFDE
 21440                           postdec2	equ	0xFDD
 21441                           plusw2	equ	0xFDB
 21442                           fsr2h	equ	0xFDA
 21443                           fsr2l	equ	0xFD9
 21444                           status	equ	0xFD8
 21445                           
 21446 ;; *************** function _Button_State *****************
 21447 ;; Defined at:
 21448 ;;		line 44 in file "Library/Button.c"
 21449 ;; Parameters:    Size  Location     Type
 21450 ;;  pInput          2    6[BANK0 ] const PTR struct Button
 21451 ;;		 -> DIPSwitch(8), TestButton(8), HMIBoard(48), 
 21452 ;; Auto vars:     Size  Location     Type
 21453 ;;		None
 21454 ;; Return value:  Size  Location     Type
 21455 ;;                  1    wreg      unsigned char 
 21456 ;; Registers used:
 21457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21458 ;; Tracked objects:
 21459 ;;		On entry : 0/0
 21460 ;;		On exit  : 0/0
 21461 ;;		Unchanged: 0/0
 21462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21467 ;;Total ram usage:        2 bytes
 21468 ;; Hardware stack levels used:    1
 21469 ;; Hardware stack levels required when called:   15
 21470 ;; This function calls:
 21471 ;;		_Port_GetPin
 21472 ;;		_Port_GetQuad
 21473 ;; This function is called by:
 21474 ;;		_Button_Poll
 21475 ;; This function uses a non-reentrant model
 21476 ;;
 21477                           
 21478                           	psect	text126
 21479  0134A4                     __ptext126:
 21480                           	opt stack 0
 21481  0134A4                     _Button_State:
 21482                           	opt stack 12
 21483                           
 21484                           ;Button.c: 46: switch(pInput->mButton)
 21485                           
 21486                           ; BSR set to: 1
 21487                           ;incstack = 0
 21488  0134A4  D030               	goto	l10869
 21489  0134A6                     l10839:
 21490                           
 21491                           ;Button.c: 49: return Port_GetPin(&PortB, eP4);
 21492  0134A6  0E83               	movlw	low _PortB
 21493  0134A8  0100               	movlb	0	; () banked
 21494  0134AA  6FAE               	movwf	Port_GetPin@pInput& (0+255),b
 21495  0134AC  0E01               	movlw	high _PortB
 21496  0134AE  6FAF               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 21497  0134B0  0E04               	movlw	4
 21498  0134B2  D01E               	goto	L33
 21499  0134B4                     l10843:
 21500                           
 21501                           ;Button.c: 51: return Port_GetQuad(&PortD, eP0_3);
 21502  0134B4  0E8D               	movlw	low _PortD
 21503  0134B6  0100               	movlb	0	; () banked
 21504  0134B8  6FAE               	movwf	Port_GetQuad@pInput& (0+255),b
 21505  0134BA  0E01               	movlw	high _PortD
 21506  0134BC  D020               	goto	L30
 21507  0134BE                     l10847:
 21508                           
 21509                           ;Button.c: 53: return Port_GetPin(&PortE, eP5);
 21510  0134BE  0E97               	movlw	low _PortE
 21511  0134C0  0100               	movlb	0	; () banked
 21512  0134C2  6FAE               	movwf	Port_GetPin@pInput& (0+255),b
 21513  0134C4  0E01               	movlw	high _PortE
 21514  0134C6  6FAF               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 21515  0134C8  0E05               	movlw	5
 21516  0134CA  D012               	goto	L33
 21517  0134CC                     l10851:
 21518                           
 21519                           ;Button.c: 55: return Port_GetPin(&PortE, eP4);
 21520  0134CC  0E97               	movlw	low _PortE
 21521  0134CE  0100               	movlb	0	; () banked
 21522  0134D0  6FAE               	movwf	Port_GetPin@pInput& (0+255),b
 21523  0134D2  0E01               	movlw	high _PortE
 21524  0134D4  D7EC               	goto	L34
 21525  0134D6                     l10855:
 21526                           
 21527                           ;Button.c: 57: return Port_GetPin(&PortE, eP7);
 21528  0134D6  0E97               	movlw	low _PortE
 21529  0134D8  0100               	movlb	0	; () banked
 21530  0134DA  6FAE               	movwf	Port_GetPin@pInput& (0+255),b
 21531  0134DC  0E01               	movlw	high _PortE
 21532  0134DE  6FAF               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 21533  0134E0  0E07               	movlw	7
 21534  0134E2  D006               	goto	L33
 21535  0134E4                     l10859:
 21536                           
 21537                           ;Button.c: 59: return Port_GetPin(&PortE, eP6);
 21538  0134E4  0E97               	movlw	low _PortE
 21539  0134E6  0100               	movlb	0	; () banked
 21540  0134E8  6FAE               	movwf	Port_GetPin@pInput& (0+255),b
 21541  0134EA  0E01               	movlw	high _PortE
 21542  0134EC  6FAF               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 21543  0134EE  0E06               	movlw	6
 21544  0134F0                     L33:
 21545  0134F0  6FB0               	movwf	Port_GetPin@pPin& (0+255),b
 21546  0134F2  EFFA  F0A3         	goto	_Port_GetPin	;wreg free
 21547  0134F6                     l10863:
 21548                           
 21549                           ;Button.c: 61: return Port_GetQuad(&PortE, eP0_3);
 21550  0134F6  0E97               	movlw	low _PortE
 21551  0134F8  0100               	movlb	0	; () banked
 21552  0134FA  6FAE               	movwf	Port_GetQuad@pInput& (0+255),b
 21553  0134FC  0E01               	movlw	high _PortE
 21554  0134FE                     L30:
 21555  0134FE  6FAF               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 21556  013500  6BB0               	clrf	Port_GetQuad@pQuad& (0+255),b
 21557  013502  EF60  F0A3         	goto	_Port_GetQuad	;wreg free
 21558  013506                     l10869:
 21559  013506  C0B4  FFD9         	movff	Button_State@pInput,fsr2l
 21560  01350A  C0B5  FFDA         	movff	Button_State@pInput+1,fsr2h
 21561  01350E  50DF               	movf	indf2,w,c
 21562                           
 21563                           ; Switch size 1, requested type "space"
 21564                           ; Number of cases is 7, Range of values is 1 to 7
 21565                           ; switch strategies available:
 21566                           ; Name         Instructions Cycles
 21567                           ; simple_byte           22    12 (average)
 21568                           ;	Chosen strategy is simple_byte
 21569  013510  0A01               	xorlw	1	; case 1
 21570  013512  E0C9               	bz	l10839
 21571  013514  0A03               	xorlw	3	; case 2
 21572  013516  E0CE               	bz	l10843
 21573  013518  0A01               	xorlw	1	; case 3
 21574  01351A  E0D1               	bz	l10847
 21575  01351C  0A07               	xorlw	7	; case 4
 21576  01351E  E0D6               	bz	l10851
 21577  013520  0A01               	xorlw	1	; case 5
 21578  013522  E0D9               	bz	l10855
 21579  013524  0A03               	xorlw	3	; case 6
 21580  013526  E0DE               	bz	l10859
 21581  013528  0A01               	xorlw	1	; case 7
 21582  01352A  E0E5               	bz	l10863
 21583                           
 21584                           ;Button.c: 63: return 0;
 21585  01352C  0C00               	retlw	0
 21586  01352E                     __end_of_Button_State:
 21587                           	opt stack 0
 21588                           tosu	equ	0xFFF
 21589                           tosh	equ	0xFFE
 21590                           tosl	equ	0xFFD
 21591                           pclath	equ	0xFFA
 21592                           tblptru	equ	0xFF8
 21593                           tblptrh	equ	0xFF7
 21594                           tblptrl	equ	0xFF6
 21595                           tablat	equ	0xFF5
 21596                           prodh	equ	0xFF4
 21597                           prodl	equ	0xFF3
 21598                           intcon	equ	0xFF2
 21599                           indf0	equ	0xFEF
 21600                           postinc0	equ	0xFEE
 21601                           fsr0h	equ	0xFEA
 21602                           fsr0l	equ	0xFE9
 21603                           wreg	equ	0xFE8
 21604                           indf1	equ	0xFE7
 21605                           postdec1	equ	0xFE5
 21606                           fsr1h	equ	0xFE2
 21607                           fsr1l	equ	0xFE1
 21608                           indf2	equ	0xFDF
 21609                           postinc2	equ	0xFDE
 21610                           postdec2	equ	0xFDD
 21611                           plusw2	equ	0xFDB
 21612                           fsr2h	equ	0xFDA
 21613                           fsr2l	equ	0xFD9
 21614                           status	equ	0xFD8
 21615                           
 21616 ;; *************** function _Port_GetQuad *****************
 21617 ;; Defined at:
 21618 ;;		line 498 in file "Library/Port.c"
 21619 ;; Parameters:    Size  Location     Type
 21620 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 21621 ;;		 -> PortE(10), PortD(10), 
 21622 ;;  pQuad           1    2[BANK0 ] enum E7714
 21623 ;; Auto vars:     Size  Location     Type
 21624 ;;  Output          1    5[BANK0 ] unsigned char 
 21625 ;; Return value:  Size  Location     Type
 21626 ;;                  1    wreg      unsigned char 
 21627 ;; Registers used:
 21628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21629 ;; Tracked objects:
 21630 ;;		On entry : 0/0
 21631 ;;		On exit  : 0/0
 21632 ;;		Unchanged: 0/0
 21633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21634 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21636 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21637 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21638 ;;Total ram usage:        6 bytes
 21639 ;; Hardware stack levels used:    1
 21640 ;; Hardware stack levels required when called:   14
 21641 ;; This function calls:
 21642 ;;		Nothing
 21643 ;; This function is called by:
 21644 ;;		_Button_State
 21645 ;;		_Port_ToggleQuad
 21646 ;; This function uses a non-reentrant model
 21647 ;;
 21648                           
 21649                           	psect	text127
 21650  0146C0                     __ptext127:
 21651                           	opt stack 0
 21652  0146C0                     _Port_GetQuad:
 21653                           	opt stack 12
 21654                           
 21655                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 21656                           
 21657                           ;incstack = 0
 21658  0146C0  0100               	movlb	0	; () banked
 21659  0146C2  EE20 F006          	lfsr	2,6
 21660  0146C6  51AE               	movf	Port_GetQuad@pInput& (0+255),w,b
 21661  0146C8  26D9               	addwf	fsr2l,f,c
 21662  0146CA  51AF               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 21663  0146CC  22DA               	addwfc	fsr2h,f,c
 21664  0146CE  CFDE F0B1          	movff	postinc2,??_Port_GetQuad
 21665  0146D2  CFDD F0B2          	movff	postdec2,??_Port_GetQuad+1
 21666  0146D6  C0B1  FFD9         	movff	??_Port_GetQuad,fsr2l
 21667  0146DA  C0B2  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 21668  0146DE  50DF               	movf	indf2,w,c
 21669  0146E0  6FB3               	movwf	Port_GetQuad@Output& (0+255),b
 21670                           
 21671                           ; BSR set to: 0
 21672                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 21673  0146E2  51B0               	movf	Port_GetQuad@pQuad& (0+255),w,b
 21674  0146E4  0D04               	mullw	4
 21675  0146E6  28F3               	incf	prodl,w,c
 21676  0146E8  6FB1               	movwf	??_Port_GetQuad& (0+255),b
 21677  0146EA  D003               	goto	u7050
 21678  0146EC                     u7055:
 21679  0146EC  0100               	movlb	0	; () banked
 21680  0146EE  90D8               	bcf	status,0,c
 21681  0146F0  33B3               	rrcf	Port_GetQuad@Output& (0+255),f,b
 21682  0146F2                     u7050:
 21683  0146F2  0100               	movlb	0	; () banked
 21684  0146F4  2FB1               	decfsz	??_Port_GetQuad& (0+255),f,b
 21685  0146F6  D7FA               	goto	u7055
 21686                           
 21687                           ;Port.c: 502: Output &= 0xF;
 21688  0146F8  0E0F               	movlw	15
 21689  0146FA  17B3               	andwf	Port_GetQuad@Output& (0+255),f,b
 21690                           
 21691                           ; BSR set to: 0
 21692                           ;Port.c: 503: return Output;
 21693  0146FC  51B3               	movf	Port_GetQuad@Output& (0+255),w,b
 21694  0146FE  0012               	return	
 21695  014700                     __end_of_Port_GetQuad:
 21696                           	opt stack 0
 21697                           tosu	equ	0xFFF
 21698                           tosh	equ	0xFFE
 21699                           tosl	equ	0xFFD
 21700                           pclath	equ	0xFFA
 21701                           tblptru	equ	0xFF8
 21702                           tblptrh	equ	0xFF7
 21703                           tblptrl	equ	0xFF6
 21704                           tablat	equ	0xFF5
 21705                           prodh	equ	0xFF4
 21706                           prodl	equ	0xFF3
 21707                           intcon	equ	0xFF2
 21708                           indf0	equ	0xFEF
 21709                           postinc0	equ	0xFEE
 21710                           fsr0h	equ	0xFEA
 21711                           fsr0l	equ	0xFE9
 21712                           wreg	equ	0xFE8
 21713                           indf1	equ	0xFE7
 21714                           postdec1	equ	0xFE5
 21715                           fsr1h	equ	0xFE2
 21716                           fsr1l	equ	0xFE1
 21717                           indf2	equ	0xFDF
 21718                           postinc2	equ	0xFDE
 21719                           postdec2	equ	0xFDD
 21720                           plusw2	equ	0xFDB
 21721                           fsr2h	equ	0xFDA
 21722                           fsr2l	equ	0xFD9
 21723                           status	equ	0xFD8
 21724                           
 21725 ;; *************** function _Port_GetPin *****************
 21726 ;; Defined at:
 21727 ;;		line 271 in file "Library/Port.c"
 21728 ;; Parameters:    Size  Location     Type
 21729 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 21730 ;;		 -> PortC(10), PortE(10), PortB(10), 
 21731 ;;  pPin            1    2[BANK0 ] enum E7688
 21732 ;; Auto vars:     Size  Location     Type
 21733 ;;  Output          1    5[BANK0 ] unsigned char 
 21734 ;; Return value:  Size  Location     Type
 21735 ;;                  1    wreg      unsigned char 
 21736 ;; Registers used:
 21737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21738 ;; Tracked objects:
 21739 ;;		On entry : 0/0
 21740 ;;		On exit  : 0/0
 21741 ;;		Unchanged: 0/0
 21742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21743 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21746 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21747 ;;Total ram usage:        6 bytes
 21748 ;; Hardware stack levels used:    1
 21749 ;; Hardware stack levels required when called:   14
 21750 ;; This function calls:
 21751 ;;		Nothing
 21752 ;; This function is called by:
 21753 ;;		_Button_State
 21754 ;;		_Port_TogglePin
 21755 ;; This function uses a non-reentrant model
 21756 ;;
 21757                           
 21758                           	psect	text128
 21759  0147F4                     __ptext128:
 21760                           	opt stack 0
 21761  0147F4                     _Port_GetPin:
 21762                           	opt stack 10
 21763                           
 21764                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 21765                           
 21766                           ; BSR set to: 0
 21767                           ;incstack = 0
 21768  0147F4  0100               	movlb	0	; () banked
 21769  0147F6  EE20 F006          	lfsr	2,6
 21770  0147FA  51AE               	movf	Port_GetPin@pInput& (0+255),w,b
 21771  0147FC  26D9               	addwf	fsr2l,f,c
 21772  0147FE  51AF               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 21773  014800  22DA               	addwfc	fsr2h,f,c
 21774  014802  CFDE F0B1          	movff	postinc2,??_Port_GetPin
 21775  014806  CFDD F0B2          	movff	postdec2,??_Port_GetPin+1
 21776  01480A  C0B1  FFD9         	movff	??_Port_GetPin,fsr2l
 21777  01480E  C0B2  FFDA         	movff	??_Port_GetPin+1,fsr2h
 21778  014812  50DF               	movf	indf2,w,c
 21779  014814  6FB3               	movwf	Port_GetPin@Output& (0+255),b
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;Port.c: 274: Output >>= (UINT8)pPin;
 21783  014816  29B0               	incf	Port_GetPin@pPin& (0+255),w,b
 21784  014818  6FB1               	movwf	??_Port_GetPin& (0+255),b
 21785  01481A  D003               	goto	u6030
 21786  01481C                     u6035:
 21787  01481C  0100               	movlb	0	; () banked
 21788  01481E  90D8               	bcf	status,0,c
 21789  014820  33B3               	rrcf	Port_GetPin@Output& (0+255),f,b
 21790  014822                     u6030:
 21791  014822  0100               	movlb	0	; () banked
 21792  014824  2FB1               	decfsz	??_Port_GetPin& (0+255),f,b
 21793  014826  D7FA               	goto	u6035
 21794                           
 21795                           ;Port.c: 275: Output &= 1;
 21796  014828  0E01               	movlw	1
 21797  01482A  17B3               	andwf	Port_GetPin@Output& (0+255),f,b
 21798                           
 21799                           ; BSR set to: 0
 21800                           ;Port.c: 276: return Output;
 21801  01482C  51B3               	movf	Port_GetPin@Output& (0+255),w,b
 21802  01482E  0012               	return	
 21803  014830                     __end_of_Port_GetPin:
 21804                           	opt stack 0
 21805                           tosu	equ	0xFFF
 21806                           tosh	equ	0xFFE
 21807                           tosl	equ	0xFFD
 21808                           pclath	equ	0xFFA
 21809                           tblptru	equ	0xFF8
 21810                           tblptrh	equ	0xFF7
 21811                           tblptrl	equ	0xFF6
 21812                           tablat	equ	0xFF5
 21813                           prodh	equ	0xFF4
 21814                           prodl	equ	0xFF3
 21815                           intcon	equ	0xFF2
 21816                           indf0	equ	0xFEF
 21817                           postinc0	equ	0xFEE
 21818                           fsr0h	equ	0xFEA
 21819                           fsr0l	equ	0xFE9
 21820                           wreg	equ	0xFE8
 21821                           indf1	equ	0xFE7
 21822                           postdec1	equ	0xFE5
 21823                           fsr1h	equ	0xFE2
 21824                           fsr1l	equ	0xFE1
 21825                           indf2	equ	0xFDF
 21826                           postinc2	equ	0xFDE
 21827                           postdec2	equ	0xFDD
 21828                           plusw2	equ	0xFDB
 21829                           fsr2h	equ	0xFDA
 21830                           fsr2l	equ	0xFD9
 21831                           status	equ	0xFD8
 21832                           
 21833 ;; *************** function _ISR_Function *****************
 21834 ;; Defined at:
 21835 ;;		line 40 in file "ISR.c"
 21836 ;; Parameters:    Size  Location     Type
 21837 ;;		None
 21838 ;; Auto vars:     Size  Location     Type
 21839 ;;		None
 21840 ;; Return value:  Size  Location     Type
 21841 ;;                  1    wreg      void 
 21842 ;; Registers used:
 21843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
 21844 ;; Tracked objects:
 21845 ;;		On entry : 0/0
 21846 ;;		On exit  : 0/0
 21847 ;;		Unchanged: 0/0
 21848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21851 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21852 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21853 ;;Total ram usage:       14 bytes
 21854 ;; Hardware stack levels used:    1
 21855 ;; Hardware stack levels required when called:   13
 21856 ;; This function calls:
 21857 ;;		_Timer0_ISR
 21858 ;;		_USB_ISR
 21859 ;; This function is called by:
 21860 ;;		Interrupt level 2
 21861 ;; This function uses a non-reentrant model
 21862 ;;
 21863                           
 21864                           	psect	intcode
 21865  000008                     __pintcode:
 21866                           	opt stack 0
 21867  000008                     _ISR_Function:
 21868                           	opt stack 7
 21869                           
 21870                           ; BSR set to: 0
 21871                           ;incstack = 0
 21872  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21873  00000A  CFFA F02A          	movff	pclath,??_ISR_Function
 21874  00000E  CFFB F02B          	movff	pclatu,??_ISR_Function+1
 21875  000012  CFE9 F02C          	movff	fsr0l,??_ISR_Function+2
 21876  000016  CFEA F02D          	movff	fsr0h,??_ISR_Function+3
 21877  00001A  CFE1 F02E          	movff	fsr1l,??_ISR_Function+4
 21878  00001E  CFE2 F02F          	movff	fsr1h,??_ISR_Function+5
 21879  000022  CFD9 F030          	movff	fsr2l,??_ISR_Function+6
 21880  000026  CFDA F031          	movff	fsr2h,??_ISR_Function+7
 21881  00002A  CFF3 F032          	movff	prodl,??_ISR_Function+8
 21882  00002E  CFF4 F033          	movff	prodh,??_ISR_Function+9
 21883  000032  CFF6 F034          	movff	tblptrl,??_ISR_Function+10
 21884  000036  CFF7 F035          	movff	tblptrh,??_ISR_Function+11
 21885  00003A  CFF8 F036          	movff	tblptru,??_ISR_Function+12
 21886  00003E  CFF5 F037          	movff	tablat,??_ISR_Function+13
 21887                           
 21888                           ;ISR.c: 43: INTCONbits.INT0IF = 0;
 21889  000042  92F2               	bcf	intcon,1,c	;volatile
 21890                           
 21891                           ;ISR.c: 50: if ((PIR2bits.USBIF && PIE2bits.USBIE))
 21892  000044  B8A1               	btfsc	4001,4,c	;volatile
 21893  000046  A8A0               	btfss	4000,4,c	;volatile
 21894  000048  D002               	goto	i2l13515
 21895  00004A                     i8L__ptext130:
 21896                           	opt stack 0
 21897  00004A                     i8L_USB_ISR:
 21898                           	opt stack 0
 21899  00004A                     i8Li2l12819:
 21900                           	opt stack 7
 21901                           
 21902                           ;USB_Wrap.c: 87: USBDeviceTasks();
 21903  00004A  ECE5  F08C         	call	_USBDeviceTasks	;wreg free
 21904  00004E                     i8Li2l2494:
 21905                           	opt stack 7
 21906  00004E                     i2l13515:
 21907                           
 21908                           ;ISR.c: 74: if ((INTCONbits.TMR0IF && INTCONbits.TMR0IE))
 21909  00004E  B4F2               	btfsc	intcon,2,c	;volatile
 21910  000050  AAF2               	btfss	intcon,5,c	;volatile
 21911  000052  D002               	goto	i2l2590
 21912                           
 21913                           ;ISR.c: 75: Timer0_ISR();
 21914  000054  EC84  F0A7         	call	_Timer0_ISR	;wreg free
 21915  000058                     i2l2590:
 21916  000058  C037  FFF5         	movff	??_ISR_Function+13,tablat
 21917  00005C  C036  FFF8         	movff	??_ISR_Function+12,tblptru
 21918  000060  C035  FFF7         	movff	??_ISR_Function+11,tblptrh
 21919  000064  C034  FFF6         	movff	??_ISR_Function+10,tblptrl
 21920  000068  C033  FFF4         	movff	??_ISR_Function+9,prodh
 21921  00006C  C032  FFF3         	movff	??_ISR_Function+8,prodl
 21922  000070  C031  FFDA         	movff	??_ISR_Function+7,fsr2h
 21923  000074  C030  FFD9         	movff	??_ISR_Function+6,fsr2l
 21924  000078  C02F  FFE2         	movff	??_ISR_Function+5,fsr1h
 21925  00007C  C02E  FFE1         	movff	??_ISR_Function+4,fsr1l
 21926  000080  C02D  FFEA         	movff	??_ISR_Function+3,fsr0h
 21927  000084  C02C  FFE9         	movff	??_ISR_Function+2,fsr0l
 21928  000088  C02B  FFFB         	movff	??_ISR_Function+1,pclatu
 21929  00008C  C02A  FFFA         	movff	??_ISR_Function,pclath
 21930  000090  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21931  000092  0011               	retfie		f
 21932  000094                     __end_of_ISR_Function:
 21933                           	opt stack 0
 21934                           tosu	equ	0xFFF
 21935                           tosh	equ	0xFFE
 21936                           tosl	equ	0xFFD
 21937                           pclatu	equ	0xFFB
 21938                           pclath	equ	0xFFA
 21939                           tblptru	equ	0xFF8
 21940                           tblptrh	equ	0xFF7
 21941                           tblptrl	equ	0xFF6
 21942                           tablat	equ	0xFF5
 21943                           prodh	equ	0xFF4
 21944                           prodl	equ	0xFF3
 21945                           intcon	equ	0xFF2
 21946                           indf0	equ	0xFEF
 21947                           postinc0	equ	0xFEE
 21948                           fsr0h	equ	0xFEA
 21949                           fsr0l	equ	0xFE9
 21950                           wreg	equ	0xFE8
 21951                           indf1	equ	0xFE7
 21952                           postdec1	equ	0xFE5
 21953                           fsr1h	equ	0xFE2
 21954                           fsr1l	equ	0xFE1
 21955                           indf2	equ	0xFDF
 21956                           postinc2	equ	0xFDE
 21957                           postdec2	equ	0xFDD
 21958                           plusw2	equ	0xFDB
 21959                           fsr2h	equ	0xFDA
 21960                           fsr2l	equ	0xFD9
 21961                           status	equ	0xFD8
 21962                           
 21963 ;; *************** function _USB_ISR *****************
 21964 ;; Defined at:
 21965 ;;		line 84 in file "USB_Wrap.c"
 21966 ;; Parameters:    Size  Location     Type
 21967 ;;		None
 21968 ;; Auto vars:     Size  Location     Type
 21969 ;;		None
 21970 ;; Return value:  Size  Location     Type
 21971 ;;                  1    wreg      void 
 21972 ;; Registers used:
 21973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21974 ;; Tracked objects:
 21975 ;;		On entry : 0/0
 21976 ;;		On exit  : 0/0
 21977 ;;		Unchanged: 0/0
 21978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21983 ;;Total ram usage:        0 bytes
 21984 ;; Hardware stack levels used:    1
 21985 ;; Hardware stack levels required when called:   12
 21986 ;; This function calls:
 21987 ;;		_USBDeviceTasks
 21988 ;; This function is called by:
 21989 ;;		_ISR_Function
 21990 ;; This function uses a non-reentrant model
 21991 ;;
 21992                           
 21993                           	psect	text130
 21994  000000                     __ptext130:
 21995                           	opt stack 0
 21996  000000                     _USB_ISR:
 21997                           	opt stack 0
 21998  000000                     __end_of_USB_ISR:
 21999                           	opt stack 0
 22000                           tosu	equ	0xFFF
 22001                           tosh	equ	0xFFE
 22002                           tosl	equ	0xFFD
 22003                           pclatu	equ	0xFFB
 22004                           pclath	equ	0xFFA
 22005                           tblptru	equ	0xFF8
 22006                           tblptrh	equ	0xFF7
 22007                           tblptrl	equ	0xFF6
 22008                           tablat	equ	0xFF5
 22009                           prodh	equ	0xFF4
 22010                           prodl	equ	0xFF3
 22011                           intcon	equ	0xFF2
 22012                           indf0	equ	0xFEF
 22013                           postinc0	equ	0xFEE
 22014                           fsr0h	equ	0xFEA
 22015                           fsr0l	equ	0xFE9
 22016                           wreg	equ	0xFE8
 22017                           indf1	equ	0xFE7
 22018                           postdec1	equ	0xFE5
 22019                           fsr1h	equ	0xFE2
 22020                           fsr1l	equ	0xFE1
 22021                           indf2	equ	0xFDF
 22022                           postinc2	equ	0xFDE
 22023                           postdec2	equ	0xFDD
 22024                           plusw2	equ	0xFDB
 22025                           fsr2h	equ	0xFDA
 22026                           fsr2l	equ	0xFD9
 22027                           status	equ	0xFD8
 22028                           
 22029 ;; *************** function _USBDeviceTasks *****************
 22030 ;; Defined at:
 22031 ;;		line 477 in file "Library/USB/src/usb_device.c"
 22032 ;; Parameters:    Size  Location     Type
 22033 ;;		None
 22034 ;; Auto vars:     Size  Location     Type
 22035 ;;  i               1   40[COMRAM] unsigned char 
 22036 ;; Return value:  Size  Location     Type
 22037 ;;                  1    wreg      void 
 22038 ;; Registers used:
 22039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22040 ;; Tracked objects:
 22041 ;;		On entry : 0/0
 22042 ;;		On exit  : 0/0
 22043 ;;		Unchanged: 0/0
 22044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22049 ;;Total ram usage:        1 bytes
 22050 ;; Hardware stack levels used:    1
 22051 ;; Hardware stack levels required when called:   11
 22052 ;; This function calls:
 22053 ;;		_USBCtrlEPAllowStatusStage
 22054 ;;		_USBCtrlEPService
 22055 ;;		_USBIncrement1msInternalTimers
 22056 ;;		_USBStallHandler
 22057 ;;		_USBSuspend
 22058 ;;		_USBWakeFromSuspend
 22059 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 22060 ;;		i2_USBDeviceInit
 22061 ;; This function is called by:
 22062 ;;		_USB_ISR
 22063 ;; This function uses a non-reentrant model
 22064 ;;
 22065                           
 22066                           	psect	text131
 22067  0119CA                     __ptext131:
 22068                           	opt stack 0
 22069  0119CA                     _USBDeviceTasks:
 22070                           	opt stack 7
 22071                           
 22072                           ;usb_device.c: 479: uint8_t i;
 22073                           ;usb_device.c: 590: if(USBDeviceState == ATTACHED_STATE)
 22074                           
 22075                           ;incstack = 0
 22076  0119CA  0449               	decf	_USBDeviceState,w,c	;volatile
 22077  0119CC  E108               	bnz	i2l11939
 22078                           
 22079                           ;usb_device.c: 591: {
 22080                           ;usb_device.c: 601: if(!UCONbits.SE0)
 22081  0119CE  BA65               	btfsc	3941,5,c	;volatile
 22082  0119D0  D006               	goto	i2l11939
 22083                           
 22084                           ;usb_device.c: 602: {
 22085                           ;usb_device.c: 608: {UIR = 0;};
 22086  0119D2  6A62               	clrf	3938,c	;volatile
 22087                           
 22088                           ;usb_device.c: 614: UIEbits.URSTIE = 1;
 22089  0119D4  010F               	movlb	15	; () banked
 22090  0119D6  815C               	bsf	92,0,b	;volatile
 22091                           
 22092                           ; BSR set to: 15
 22093                           ;usb_device.c: 615: UIEbits.IDLEIE = 1;
 22094  0119D8  895C               	bsf	92,4,b	;volatile
 22095                           
 22096                           ;usb_device.c: 616: USBDeviceState = POWERED_STATE;
 22097  0119DA  0E02               	movlw	2
 22098  0119DC  6E49               	movwf	_USBDeviceState,c	;volatile
 22099  0119DE                     i2l11939:
 22100                           
 22101                           ;usb_device.c: 617: }
 22102                           ;usb_device.c: 618: }
 22103                           ;usb_device.c: 634: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
 22104  0119DE  A462               	btfss	3938,2,c	;volatile
 22105  0119E0  D006               	goto	i2l11947
 22106  0119E2  010F               	movlb	15	; () banked
 22107  0119E4  A55C               	btfss	92,2,b	;volatile
 22108  0119E6  D003               	goto	i2l11947
 22109                           
 22110                           ; BSR set to: 15
 22111                           ;usb_device.c: 635: {
 22112                           ;usb_device.c: 636: (UIR &= 0xFB);
 22113  0119E8  9462               	bcf	3938,2,c	;volatile
 22114                           
 22115                           ; BSR set to: 15
 22116                           ;usb_device.c: 640: USBWakeFromSuspend();
 22117  0119EA  EC8A  F0A6         	call	_USBWakeFromSuspend	;wreg free
 22118  0119EE                     i2l11947:
 22119                           
 22120                           ;usb_device.c: 642: }
 22121                           ;usb_device.c: 647: if(UCONbits.SUSPND==1)
 22122  0119EE  A265               	btfss	3941,1,c	;volatile
 22123  0119F0  D002               	goto	i2l153
 22124                           
 22125                           ;usb_device.c: 648: {
 22126                           ;usb_device.c: 649: {PIR2bits.USBIF = 0;};
 22127  0119F2  98A1               	bcf	4001,4,c	;volatile
 22128                           
 22129                           ;usb_device.c: 650: return;
 22130  0119F4  0012               	return	
 22131  0119F6                     i2l153:
 22132                           
 22133                           ;usb_device.c: 651: }
 22134                           ;usb_device.c: 663: if(UIRbits.URSTIF && UIEbits.URSTIE)
 22135  0119F6  A062               	btfss	3938,0,c	;volatile
 22136  0119F8  D009               	goto	i2l11961
 22137  0119FA  010F               	movlb	15	; () banked
 22138  0119FC  A15C               	btfss	92,0,b	;volatile
 22139  0119FE  D006               	goto	i2l11961
 22140                           
 22141                           ; BSR set to: 15
 22142                           ;usb_device.c: 664: {
 22143                           ;usb_device.c: 665: USBDeviceInit();
 22144  011A00  EC2F  F090         	call	i2_USBDeviceInit	;wreg free
 22145                           
 22146                           ;usb_device.c: 669: {PIE2bits.USBIE = 1;};
 22147  011A04  88A0               	bsf	4000,4,c	;volatile
 22148                           
 22149                           ;usb_device.c: 671: USBDeviceState = DEFAULT_STATE;
 22150  011A06  0E04               	movlw	4
 22151  011A08  6E49               	movwf	_USBDeviceState,c	;volatile
 22152                           
 22153                           ;usb_device.c: 681: (UIR &= 0xFE);
 22154  011A0A  9062               	bcf	3938,0,c	;volatile
 22155  011A0C                     i2l11961:
 22156                           
 22157                           ;usb_device.c: 682: }
 22158                           ;usb_device.c: 687: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
 22159  011A0C  A862               	btfss	3938,4,c	;volatile
 22160  011A0E  D004               	goto	i2l11967
 22161  011A10  010F               	movlb	15	; () banked
 22162  011A12  B95C               	btfsc	92,4,b	;volatile
 22163                           
 22164                           ; BSR set to: 15
 22165                           ;usb_device.c: 688: {
 22166                           ;usb_device.c: 694: USBSuspend();
 22167  011A14  EC73  F0A7         	call	_USBSuspend	;wreg free
 22168  011A18                     i2l11967:
 22169                           
 22170                           ;usb_device.c: 696: }
 22171                           ;usb_device.c: 708: if(UIRbits.SOFIF)
 22172  011A18  AC62               	btfss	3938,6,c	;volatile
 22173  011A1A  D017               	goto	i2l11985
 22174                           
 22175                           ;usb_device.c: 709: {
 22176                           ;usb_device.c: 711: if(UIEbits.SOFIE)
 22177  011A1C  010F               	movlb	15	; () banked
 22178  011A1E  AD5C               	btfss	92,6,b	;volatile
 22179  011A20  D00A               	goto	i2l11973
 22180                           
 22181                           ; BSR set to: 15
 22182                           ;usb_device.c: 712: {
 22183                           ;usb_device.c: 713: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
 22184  011A22  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 22185  011A24  0E73               	movlw	115
 22186  011A26  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 22187  011A28  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 22188  011A2A  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 22189  011A2C  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 22190  011A2E  0E01               	movlw	1
 22191  011A30  6E1E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 22192  011A32  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 22193  011A36                     i2l11973:
 22194                           
 22195                           ;usb_device.c: 714: }
 22196                           ;usb_device.c: 715: (UIR &= 0xBF);
 22197  011A36  9C62               	bcf	3938,6,c	;volatile
 22198                           
 22199                           ;usb_device.c: 718: USBIncrement1msInternalTimers();
 22200  011A38  ECC0  F0A7         	call	_USBIncrement1msInternalTimers	;wreg free
 22201                           
 22202                           ;usb_device.c: 735: if(USBStatusStageTimeoutCounter != 0u)
 22203  011A3C  504C               	movf	_USBStatusStageTimeoutCounter,w,c	;volatile
 22204  011A3E  E001               	bz	i2l11981
 22205                           
 22206                           ;usb_device.c: 736: {
 22207                           ;usb_device.c: 737: USBStatusStageTimeoutCounter--;
 22208  011A40  064C               	decf	_USBStatusStageTimeoutCounter,f,c	;volatile
 22209  011A42                     i2l11981:
 22210                           
 22211                           ;usb_device.c: 738: }
 22212                           ;usb_device.c: 744: if(USBStatusStageTimeoutCounter == 0)
 22213  011A42  504C               	movf	_USBStatusStageTimeoutCounter,w,c	;volatile
 22214  011A44  E102               	bnz	i2l11985
 22215                           
 22216                           ;usb_device.c: 745: {
 22217                           ;usb_device.c: 746: USBCtrlEPAllowStatusStage();
 22218  011A46  EC45  F095         	call	_USBCtrlEPAllowStatusStage	;wreg free
 22219  011A4A                     i2l11985:
 22220                           
 22221                           ;usb_device.c: 747: }
 22222                           ;usb_device.c: 749: }
 22223                           ;usb_device.c: 751: if(UIRbits.STALLIF && UIEbits.STALLIE)
 22224  011A4A  AA62               	btfss	3938,5,c	;volatile
 22225  011A4C  D004               	goto	i2l11991
 22226  011A4E  010F               	movlb	15	; () banked
 22227  011A50  BB5C               	btfsc	92,5,b	;volatile
 22228                           
 22229                           ; BSR set to: 15
 22230                           ;usb_device.c: 752: {
 22231                           ;usb_device.c: 753: USBStallHandler();
 22232  011A52  EC3F  F0A3         	call	_USBStallHandler	;wreg free
 22233  011A56                     i2l11991:
 22234                           
 22235                           ;usb_device.c: 754: }
 22236                           ;usb_device.c: 756: if(UIRbits.UERRIF && UIEbits.UERRIE)
 22237  011A56  A262               	btfss	3938,1,c	;volatile
 22238  011A58  D00E               	goto	i2l11999
 22239  011A5A  010F               	movlb	15	; () banked
 22240  011A5C  A35C               	btfss	92,1,b	;volatile
 22241  011A5E  D00B               	goto	i2l11999
 22242                           
 22243                           ; BSR set to: 15
 22244                           ;usb_device.c: 757: {
 22245                           ;usb_device.c: 758: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
 22246  011A60  0E7F               	movlw	127
 22247  011A62  6E1B               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 22248  011A64  681A               	setf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 22249  011A66  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 22250  011A68  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 22251  011A6A  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 22252  011A6C  0E01               	movlw	1
 22253  011A6E  6E1E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 22254  011A70  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 22255                           
 22256                           ;usb_device.c: 759: {UEIR = 0;};
 22257  011A74  6A63               	clrf	3939,c	;volatile
 22258  011A76                     i2l11999:
 22259                           
 22260                           ;usb_device.c: 767: }
 22261                           ;usb_device.c: 774: if(USBDeviceState < DEFAULT_STATE)
 22262  011A76  0E04               	movlw	4
 22263  011A78  6049               	cpfslt	_USBDeviceState,c	;volatile
 22264  011A7A  D002               	goto	i2l163
 22265                           
 22266                           ;usb_device.c: 775: {
 22267                           ;usb_device.c: 776: {PIR2bits.USBIF = 0;};
 22268  011A7C  98A1               	bcf	4001,4,c	;volatile
 22269                           
 22270                           ;usb_device.c: 777: return;
 22271  011A7E  0C04               	retlw	4
 22272  011A80                     i2l163:
 22273                           
 22274                           ;usb_device.c: 778: }
 22275                           ;usb_device.c: 783: if(UIEbits.TRNIE)
 22276  011A80  010F               	movlb	15	; () banked
 22277  011A82  A75C               	btfss	92,3,b	;volatile
 22278  011A84  D034               	goto	i2l164
 22279                           
 22280                           ; BSR set to: 15
 22281                           ;usb_device.c: 784: {
 22282                           ;usb_device.c: 785: for(i = 0; i < 4u; i++)
 22283  011A86  6A29               	clrf	USBDeviceTasks@i,c
 22284  011A88                     i2l12005:
 22285                           
 22286                           ; BSR set to: 15
 22287  011A88  0E03               	movlw	3
 22288  011A8A  6429               	cpfsgt	USBDeviceTasks@i,c
 22289  011A8C  D001               	goto	i2l165
 22290  011A8E  D02F               	goto	i2l164
 22291  011A90                     i2l165:
 22292                           
 22293                           ;usb_device.c: 786: {
 22294                           ;usb_device.c: 787: if(UIRbits.TRNIF)
 22295  011A90  A662               	btfss	3938,3,c	;volatile
 22296  011A92  D02D               	goto	i2l164
 22297                           
 22298                           ;usb_device.c: 788: {
 22299                           ;usb_device.c: 790: USTATcopy.Val = USTAT;
 22300  011A94  CF64 F05C          	movff	3940,_USTATcopy	;volatile
 22301                           
 22302                           ;usb_device.c: 791: endpoint_number = USTATcopy.endpoint_number;
 22303  011A98  305C               	rrcf	_USTATcopy,w,c	;volatile
 22304  011A9A  32E8               	rrcf	wreg,f,c
 22305  011A9C  32E8               	rrcf	wreg,f,c
 22306  011A9E  0B0F               	andlw	15
 22307  011AA0  6E4F               	movwf	_endpoint_number,c	;volatile
 22308                           
 22309                           ;usb_device.c: 793: (UIR &= 0xF7);
 22310  011AA2  9662               	bcf	3938,3,c	;volatile
 22311                           
 22312                           ;usb_device.c: 798: if(USTATcopy.direction == 0)
 22313  011AA4  B45C               	btfsc	_USTATcopy,2,c	;volatile
 22314  011AA6  D007               	goto	i2l12019
 22315                           
 22316                           ;usb_device.c: 799: {
 22317                           ;usb_device.c: 800: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
 22318  011AA8  504F               	movf	_endpoint_number,w,c	;volatile
 22319  011AAA  0D01               	mullw	1
 22320  011AAC  0E7E               	movlw	low _ep_data_out
 22321  011AAE  24F3               	addwf	prodl,w,c
 22322  011AB0  6ED9               	movwf	fsr2l,c
 22323  011AB2  0E00               	movlw	high _ep_data_out
 22324  011AB4  D006               	goto	L12
 22325  011AB6                     i2l12019:
 22326                           
 22327                           ;usb_device.c: 802: else
 22328                           ;usb_device.c: 803: {
 22329                           ;usb_device.c: 804: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
 22330  011AB6  504F               	movf	_endpoint_number,w,c	;volatile
 22331  011AB8  0D01               	mullw	1
 22332  011ABA  0E7B               	movlw	low _ep_data_in
 22333  011ABC  24F3               	addwf	prodl,w,c
 22334  011ABE  6ED9               	movwf	fsr2l,c
 22335  011AC0  0E00               	movlw	high _ep_data_in
 22336  011AC2                     L12:
 22337  011AC2  20F4               	addwfc	prodh,w,c
 22338  011AC4  6EDA               	movwf	fsr2h,c
 22339  011AC6  0100               	movlb	0	; () banked
 22340  011AC8  70DF               	btg	indf2,0,c
 22341                           
 22342                           ; BSR set to: 0
 22343                           ;usb_device.c: 805: }
 22344                           ;usb_device.c: 810: if(endpoint_number == 0)
 22345                           
 22346                           ; BSR set to: 0
 22347  011ACA  504F               	movf	_endpoint_number,w,c	;volatile
 22348  011ACC  E103               	bnz	i2l12025
 22349                           
 22350                           ; BSR set to: 0
 22351                           ;usb_device.c: 811: {
 22352                           ;usb_device.c: 812: USBCtrlEPService();
 22353  011ACE  ECDB  F09A         	call	_USBCtrlEPService	;wreg free
 22354                           
 22355                           ;usb_device.c: 813: }
 22356  011AD2  D00B               	goto	i2l12027
 22357  011AD4                     i2l12025:
 22358                           
 22359                           ;usb_device.c: 814: else
 22360                           ;usb_device.c: 815: {
 22361                           ;usb_device.c: 816: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(uint8_t*)&USTATcopy.
      +                          Val,0);
 22362  011AD4  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 22363  011AD6  0E72               	movlw	114
 22364  011AD8  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 22365  011ADA  0E5C               	movlw	low _USTATcopy
 22366  011ADC  6E1C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 22367  011ADE  0E00               	movlw	high _USTATcopy
 22368  011AE0  6E1D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 22369  011AE2  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 22370  011AE4  6A1E               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 22371  011AE6  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 22372  011AEA                     i2l12027:
 22373  011AEA  2A29               	incf	USBDeviceTasks@i,f,c
 22374  011AEC  D7CD               	goto	i2l12005
 22375  011AEE                     i2l164:
 22376                           
 22377                           ;usb_device.c: 822: }
 22378                           ;usb_device.c: 823: }
 22379                           ;usb_device.c: 824: }
 22380                           ;usb_device.c: 826: {PIR2bits.USBIF = 0;};
 22381  011AEE  98A1               	bcf	4001,4,c	;volatile
 22382  011AF0  0012               	return		;funcret
 22383  011AF2                     __end_of_USBDeviceTasks:
 22384                           	opt stack 0
 22385                           tosu	equ	0xFFF
 22386                           tosh	equ	0xFFE
 22387                           tosl	equ	0xFFD
 22388                           pclatu	equ	0xFFB
 22389                           pclath	equ	0xFFA
 22390                           tblptru	equ	0xFF8
 22391                           tblptrh	equ	0xFF7
 22392                           tblptrl	equ	0xFF6
 22393                           tablat	equ	0xFF5
 22394                           prodh	equ	0xFF4
 22395                           prodl	equ	0xFF3
 22396                           intcon	equ	0xFF2
 22397                           indf0	equ	0xFEF
 22398                           postinc0	equ	0xFEE
 22399                           fsr0h	equ	0xFEA
 22400                           fsr0l	equ	0xFE9
 22401                           wreg	equ	0xFE8
 22402                           indf1	equ	0xFE7
 22403                           postdec1	equ	0xFE5
 22404                           fsr1h	equ	0xFE2
 22405                           fsr1l	equ	0xFE1
 22406                           indf2	equ	0xFDF
 22407                           postinc2	equ	0xFDE
 22408                           postdec2	equ	0xFDD
 22409                           plusw2	equ	0xFDB
 22410                           fsr2h	equ	0xFDA
 22411                           fsr2l	equ	0xFD9
 22412                           status	equ	0xFD8
 22413                           
 22414 ;; *************** function i2_USBDeviceInit *****************
 22415 ;; Defined at:
 22416 ;;		line 277 in file "Library/USB/src/usb_device.c"
 22417 ;; Parameters:    Size  Location     Type
 22418 ;;		None
 22419 ;; Auto vars:     Size  Location     Type
 22420 ;;  USBDeviceIni    1    8[COMRAM] unsigned char 
 22421 ;; Return value:  Size  Location     Type
 22422 ;;                  1    wreg      void 
 22423 ;; Registers used:
 22424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22425 ;; Tracked objects:
 22426 ;;		On entry : 0/0
 22427 ;;		On exit  : 0/0
 22428 ;;		Unchanged: 0/0
 22429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22434 ;;Total ram usage:        1 bytes
 22435 ;; Hardware stack levels used:    1
 22436 ;; Hardware stack levels required when called:    1
 22437 ;; This function calls:
 22438 ;;		i2_memset
 22439 ;; This function is called by:
 22440 ;;		_USBDeviceTasks
 22441 ;; This function uses a non-reentrant model
 22442 ;;
 22443                           
 22444                           	psect	text132
 22445  01205E                     __ptext132:
 22446                           	opt stack 0
 22447  01205E                     i2_USBDeviceInit:
 22448                           	opt stack 16
 22449                           
 22450                           ;usb_device.c: 279: uint8_t i;
 22451                           ;usb_device.c: 281: {PIE2bits.USBIE = 0;};
 22452                           
 22453                           ;incstack = 0
 22454  01205E  98A0               	bcf	4000,4,c	;volatile
 22455                           
 22456                           ;usb_device.c: 285: TRISFbits.RF5=1;;
 22457  012060  8A97               	bsf	3991,5,c	;volatile
 22458                           
 22459                           ;usb_device.c: 288: {UEIR = 0;};
 22460  012062  6A63               	clrf	3939,c	;volatile
 22461                           
 22462                           ;usb_device.c: 291: {UIR = 0;};
 22463  012064  6A62               	clrf	3938,c	;volatile
 22464                           
 22465                           ;usb_device.c: 294: UEP0 = 0;
 22466  012066  010F               	movlb	15	; () banked
 22467  012068  6B4C               	clrf	76,b	;volatile
 22468                           
 22469                           ; BSR set to: 15
 22470                           ;usb_device.c: 296: memset((void*)&UEP1,0x00,(2));;
 22471  01206A  0E4D               	movlw	77
 22472  01206C  6E01               	movwf	i2memset@p1,c
 22473  01206E  0E0F               	movlw	15
 22474  012070  6E02               	movwf	i2memset@p1+1,c
 22475  012072  6A04               	clrf	i2memset@c+1,c
 22476  012074  6A03               	clrf	i2memset@c,c
 22477  012076  6A06               	clrf	i2memset@n+1,c
 22478  012078  0E02               	movlw	2
 22479  01207A  6E05               	movwf	i2memset@n,c
 22480  01207C  EC9F  F0A6         	call	i2_memset	;wreg free
 22481                           
 22482                           ;usb_device.c: 298: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 22483  012080  0E16               	movlw	22
 22484  012082  010F               	movlb	15	; () banked
 22485  012084  6F5F               	movwf	95,b	;volatile
 22486                           
 22487                           ; BSR set to: 15
 22488  012086  0E9F               	movlw	159
 22489  012088  6F5D               	movwf	93,b	;volatile
 22490                           
 22491                           ; BSR set to: 15
 22492  01208A  0E7B               	movlw	123
 22493  01208C  6F5C               	movwf	92,b	;volatile
 22494                           
 22495                           ; BSR set to: 15
 22496                           ;usb_device.c: 301: ;
 22497                           ;usb_device.c: 304: ;
 22498                           ;usb_device.c: 307: for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 22499  01208E  6A09               	clrf	i2USBDeviceInit@i,c
 22500  012090                     i2l11871:
 22501                           
 22502                           ; BSR set to: 15
 22503  012090  0E0B               	movlw	11
 22504  012092  6409               	cpfsgt	i2USBDeviceInit@i,c
 22505  012094  D001               	goto	i2l11875
 22506  012096  D00E               	goto	i2l142
 22507  012098                     i2l11875:
 22508                           
 22509                           ;usb_device.c: 308: {
 22510                           ;usb_device.c: 309: BDT[i].Val = 0x00;
 22511  012098  5009               	movf	i2USBDeviceInit@i,w,c
 22512  01209A  0D04               	mullw	4
 22513  01209C  0E00               	movlw	0
 22514  01209E  24F3               	addwf	prodl,w,c
 22515  0120A0  6ED9               	movwf	fsr2l,c
 22516  0120A2  0E04               	movlw	4
 22517  0120A4  20F4               	addwfc	prodh,w,c
 22518  0120A6  6EDA               	movwf	fsr2h,c
 22519  0120A8  6ADE               	clrf	postinc2,c
 22520  0120AA  6ADE               	clrf	postinc2,c
 22521  0120AC  6ADE               	clrf	postinc2,c
 22522  0120AE  6ADD               	clrf	postdec2,c
 22523  0120B0  2A09               	incf	i2USBDeviceInit@i,f,c
 22524  0120B2  D7EE               	goto	i2l11871
 22525  0120B4                     i2l142:
 22526                           
 22527                           ;usb_device.c: 310: }
 22528                           ;usb_device.c: 313: UCONbits.PPBRST = 1;
 22529  0120B4  8C65               	bsf	3941,6,c	;volatile
 22530                           
 22531                           ;usb_device.c: 316: UADDR = 0x00;
 22532  0120B6  010F               	movlb	15	; () banked
 22533  0120B8  6B5E               	clrf	94,b	;volatile
 22534                           
 22535                           ; BSR set to: 15
 22536                           ;usb_device.c: 319: UCONbits.PKTDIS = 0;
 22537  0120BA  9865               	bcf	3941,4,c	;volatile
 22538                           
 22539                           ; BSR set to: 15
 22540                           ;usb_device.c: 322: UCONbits.PPBRST = 0;
 22541  0120BC  9C65               	bcf	3941,6,c	;volatile
 22542  0120BE                     i2l11887:
 22543                           
 22544                           ;usb_device.c: 326: {
 22545                           ;usb_device.c: 327: (UIR &= 0xF7);
 22546  0120BE  9662               	bcf	3938,3,c	;volatile
 22547                           
 22548                           ;usb_device.c: 329: inPipes[0].info.Val = 0;
 22549  0120C0  0100               	movlb	0	; () banked
 22550  0120C2  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
 22551                           
 22552                           ; BSR set to: 0
 22553                           ;usb_device.c: 330: outPipes[0].info.Val = 0;
 22554  0120C4  6B63               	clrf	(_outPipes+3)& (0+255),b	;volatile
 22555                           
 22556                           ; BSR set to: 0
 22557                           ;usb_device.c: 331: outPipes[0].wCount.Val = 0;
 22558  0120C6  6B65               	clrf	(_outPipes+5)& (0+255),b	;volatile
 22559  0120C8  6B64               	clrf	(_outPipes+4)& (0+255),b	;volatile
 22560                           
 22561                           ; BSR set to: 0
 22562                           ;usb_device.c: 332: }while(UIRbits.TRNIF == 1);
 22563  0120CA  B662               	btfsc	3938,3,c	;volatile
 22564  0120CC  D7F8               	goto	i2l11887
 22565                           
 22566                           ; BSR set to: 0
 22567                           ;usb_device.c: 336: USBStatusStageEnabledFlag1 = 1;
 22568                           
 22569                           ; BSR set to: 0
 22570  0120CE  0E01               	movlw	1
 22571  0120D0  6E4A               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 22572                           
 22573                           ;usb_device.c: 337: USBStatusStageEnabledFlag2 = 1;
 22574  0120D2  6E4B               	movwf	_USBStatusStageEnabledFlag2,c	;volatile
 22575                           
 22576                           ;usb_device.c: 339: USBDeferINDataStagePackets = 0;
 22577  0120D4  6A46               	clrf	_USBDeferINDataStagePackets,c	;volatile
 22578                           
 22579                           ;usb_device.c: 340: USBDeferOUTDataStagePackets = 0;
 22580  0120D6  6A47               	clrf	_USBDeferOUTDataStagePackets,c	;volatile
 22581                           
 22582                           ;usb_device.c: 341: USBBusIsSuspended = 0;
 22583  0120D8  6B97               	clrf	_USBBusIsSuspended& (0+255),b	;volatile
 22584                           
 22585                           ;usb_device.c: 345: for(i = 0; i < (uint8_t)(2+1u); i++)
 22586  0120DA  6A09               	clrf	i2USBDeviceInit@i,c
 22587  0120DC                     i2l11899:
 22588                           
 22589                           ; BSR set to: 0
 22590  0120DC  0E02               	movlw	2
 22591  0120DE  6409               	cpfsgt	i2USBDeviceInit@i,c
 22592  0120E0  D001               	goto	i2l11903
 22593  0120E2  D028               	goto	i2l11909
 22594  0120E4                     i2l11903:
 22595                           
 22596                           ;usb_device.c: 346: {
 22597                           ;usb_device.c: 347: pBDTEntryIn[i] = 0u;
 22598  0120E4  5009               	movf	i2USBDeviceInit@i,w,c
 22599  0120E6  0D02               	mullw	2
 22600  0120E8  0E6F               	movlw	low _pBDTEntryIn
 22601  0120EA  24F3               	addwf	prodl,w,c
 22602  0120EC  6ED9               	movwf	fsr2l,c
 22603  0120EE  0E00               	movlw	high _pBDTEntryIn
 22604  0120F0  20F4               	addwfc	prodh,w,c
 22605  0120F2  6EDA               	movwf	fsr2h,c
 22606  0120F4  6ADE               	clrf	postinc2,c
 22607  0120F6  6ADD               	clrf	postdec2,c
 22608                           
 22609                           ;usb_device.c: 348: pBDTEntryOut[i] = 0u;
 22610  0120F8  5009               	movf	i2USBDeviceInit@i,w,c
 22611  0120FA  0D02               	mullw	2
 22612  0120FC  0E75               	movlw	low _pBDTEntryOut
 22613  0120FE  24F3               	addwf	prodl,w,c
 22614  012100  6ED9               	movwf	fsr2l,c
 22615  012102  0E00               	movlw	high _pBDTEntryOut
 22616  012104  20F4               	addwfc	prodh,w,c
 22617  012106  6EDA               	movwf	fsr2h,c
 22618  012108  6ADE               	clrf	postinc2,c
 22619  01210A  6ADD               	clrf	postdec2,c
 22620                           
 22621                           ;usb_device.c: 349: ep_data_in[i].Val = 0u;
 22622  01210C  5009               	movf	i2USBDeviceInit@i,w,c
 22623  01210E  0D01               	mullw	1
 22624  012110  0E7B               	movlw	low _ep_data_in
 22625  012112  24F3               	addwf	prodl,w,c
 22626  012114  6ED9               	movwf	fsr2l,c
 22627  012116  0E00               	movlw	high _ep_data_in
 22628  012118  20F4               	addwfc	prodh,w,c
 22629  01211A  6EDA               	movwf	fsr2h,c
 22630  01211C  6ADF               	clrf	indf2,c
 22631                           
 22632                           ;usb_device.c: 350: ep_data_out[i].Val = 0u;
 22633  01211E  5009               	movf	i2USBDeviceInit@i,w,c
 22634  012120  0D01               	mullw	1
 22635  012122  0E7E               	movlw	low _ep_data_out
 22636  012124  24F3               	addwf	prodl,w,c
 22637  012126  6ED9               	movwf	fsr2l,c
 22638  012128  0E00               	movlw	high _ep_data_out
 22639  01212A  20F4               	addwfc	prodh,w,c
 22640  01212C  6EDA               	movwf	fsr2h,c
 22641  01212E  6ADF               	clrf	indf2,c
 22642  012130  2A09               	incf	i2USBDeviceInit@i,f,c
 22643  012132  D7D4               	goto	i2l11899
 22644  012134                     i2l11909:
 22645                           
 22646                           ;usb_device.c: 351: }
 22647                           ;usb_device.c: 354: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 22648  012134  0E08               	movlw	8
 22649  012136  0100               	movlb	0	; () banked
 22650  012138  6F6F               	movwf	_pBDTEntryIn& (0+255),b
 22651  01213A  0E04               	movlw	4
 22652  01213C  6F70               	movwf	(_pBDTEntryIn+1)& (0+255),b
 22653                           
 22654                           ; BSR set to: 0
 22655                           ;usb_device.c: 356: UEP0 = 0x06|0x10;
 22656  01213E  0E16               	movlw	22
 22657  012140  010F               	movlb	15	; () banked
 22658  012142  6F4C               	movwf	76,b	;volatile
 22659                           
 22660                           ; BSR set to: 15
 22661                           ;usb_device.c: 358: BDT[0].ADR = ((uint16_t)(&SetupPkt));
 22662  012144  0E04               	movlw	4
 22663  012146  0104               	movlb	4	; () banked
 22664  012148  6F03               	movwf	3,b	;volatile
 22665  01214A  0E30               	movlw	48
 22666  01214C  6F02               	movwf	2,b	;volatile
 22667                           
 22668                           ; BSR set to: 4
 22669                           ;usb_device.c: 359: BDT[0].CNT = 8;
 22670  01214E  0E08               	movlw	8
 22671  012150  6F01               	movwf	1,b	;volatile
 22672                           
 22673                           ; BSR set to: 4
 22674                           ;usb_device.c: 360: BDT[0].STAT.Val = 0x00|0x04;
 22675  012152  0E04               	movlw	4
 22676  012154  6F00               	movwf	0,b	;volatile
 22677                           
 22678                           ; BSR set to: 4
 22679                           ;usb_device.c: 361: BDT[0].STAT.Val |= 0x80;
 22680  012156  8F00               	bsf	0,7,b	;volatile
 22681                           
 22682                           ; BSR set to: 4
 22683                           ;usb_device.c: 364: USBActiveConfiguration = 0;
 22684  012158  6A5B               	clrf	_USBActiveConfiguration,c	;volatile
 22685                           
 22686                           ; BSR set to: 4
 22687                           ;usb_device.c: 366: USB1msTickCount = 0;
 22688  01215A  6A38               	clrf	_USB1msTickCount,c	;volatile
 22689  01215C  6A39               	clrf	_USB1msTickCount+1,c	;volatile
 22690  01215E  6A3A               	clrf	_USB1msTickCount+2,c	;volatile
 22691  012160  6A3B               	clrf	_USB1msTickCount+3,c	;volatile
 22692                           
 22693                           ; BSR set to: 4
 22694                           ;usb_device.c: 367: USBTicksSinceSuspendEnd = 0;
 22695  012162  0100               	movlb	0	; () banked
 22696  012164  6B98               	clrf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 22697                           
 22698                           ; BSR set to: 0
 22699                           ;usb_device.c: 370: USBDeviceState = DETACHED_STATE;
 22700  012166  6A49               	clrf	_USBDeviceState,c	;volatile
 22701                           
 22702                           ; BSR set to: 0
 22703  012168  0C00               	retlw	0	;funcret
 22704  01216A                     __end_ofi2_USBDeviceInit:
 22705                           	opt stack 0
 22706                           tosu	equ	0xFFF
 22707                           tosh	equ	0xFFE
 22708                           tosl	equ	0xFFD
 22709                           pclatu	equ	0xFFB
 22710                           pclath	equ	0xFFA
 22711                           tblptru	equ	0xFF8
 22712                           tblptrh	equ	0xFF7
 22713                           tblptrl	equ	0xFF6
 22714                           tablat	equ	0xFF5
 22715                           prodh	equ	0xFF4
 22716                           prodl	equ	0xFF3
 22717                           intcon	equ	0xFF2
 22718                           indf0	equ	0xFEF
 22719                           postinc0	equ	0xFEE
 22720                           fsr0h	equ	0xFEA
 22721                           fsr0l	equ	0xFE9
 22722                           wreg	equ	0xFE8
 22723                           indf1	equ	0xFE7
 22724                           postdec1	equ	0xFE5
 22725                           fsr1h	equ	0xFE2
 22726                           fsr1l	equ	0xFE1
 22727                           indf2	equ	0xFDF
 22728                           postinc2	equ	0xFDE
 22729                           postdec2	equ	0xFDD
 22730                           plusw2	equ	0xFDB
 22731                           fsr2h	equ	0xFDA
 22732                           fsr2l	equ	0xFD9
 22733                           status	equ	0xFD8
 22734                           
 22735 ;; *************** function _USBWakeFromSuspend *****************
 22736 ;; Defined at:
 22737 ;;		line 2303 in file "Library/USB/src/usb_device.c"
 22738 ;; Parameters:    Size  Location     Type
 22739 ;;		None
 22740 ;; Auto vars:     Size  Location     Type
 22741 ;;		None
 22742 ;; Return value:  Size  Location     Type
 22743 ;;                  1    wreg      void 
 22744 ;; Registers used:
 22745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22746 ;; Tracked objects:
 22747 ;;		On entry : 0/0
 22748 ;;		On exit  : 0/0
 22749 ;;		Unchanged: 0/0
 22750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22755 ;;Total ram usage:        0 bytes
 22756 ;; Hardware stack levels used:    1
 22757 ;; Hardware stack levels required when called:    7
 22758 ;; This function calls:
 22759 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 22760 ;; This function is called by:
 22761 ;;		_USBDeviceTasks
 22762 ;; This function uses a non-reentrant model
 22763 ;;
 22764                           
 22765                           	psect	text133
 22766  014D14                     __ptext133:
 22767                           	opt stack 0
 22768  014D14                     _USBWakeFromSuspend:
 22769                           	opt stack 10
 22770                           
 22771                           ;usb_device.c: 2305: USBBusIsSuspended = 0;
 22772                           
 22773                           ; BSR set to: 0
 22774                           ;incstack = 0
 22775  014D14  0100               	movlb	0	; () banked
 22776  014D16  6B97               	clrf	_USBBusIsSuspended& (0+255),b	;volatile
 22777                           
 22778                           ; BSR set to: 0
 22779                           ;usb_device.c: 2311: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 22780  014D18  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 22781  014D1A  0E74               	movlw	116
 22782  014D1C  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 22783  014D1E  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 22784  014D20  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 22785  014D22  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 22786  014D24  6A1E               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 22787  014D26  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 22788                           
 22789                           ;usb_device.c: 2318: UCONbits.SUSPND = 0;
 22790  014D2A  9265               	bcf	3941,1,c	;volatile
 22791                           
 22792                           ;usb_device.c: 2323: UIEbits.ACTVIE = 0;
 22793  014D2C  010F               	movlb	15	; () banked
 22794  014D2E  955C               	bcf	92,2,b	;volatile
 22795                           
 22796                           ;usb_device.c: 2341: while(UIRbits.ACTVIF)
 22797  014D30  D001               	goto	i2l11285
 22798  014D32                     i2l11283:
 22799                           
 22800                           ;usb_device.c: 2343: {
 22801                           ;usb_device.c: 2344: (UIR &= 0xFB);
 22802  014D32  9462               	bcf	3938,2,c	;volatile
 22803  014D34                     i2l11285:
 22804  014D34  B462               	btfsc	3938,2,c	;volatile
 22805  014D36  D7FD               	goto	i2l11283
 22806                           
 22807                           ;usb_device.c: 2345: }
 22808                           ;usb_device.c: 2347: USBTicksSinceSuspendEnd = 0;
 22809  014D38  0100               	movlb	0	; () banked
 22810  014D3A  6B98               	clrf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 22811                           
 22812                           ; BSR set to: 0
 22813  014D3C  0C00               	retlw	0	;funcret
 22814  014D3E                     __end_of_USBWakeFromSuspend:
 22815                           	opt stack 0
 22816                           tosu	equ	0xFFF
 22817                           tosh	equ	0xFFE
 22818                           tosl	equ	0xFFD
 22819                           pclatu	equ	0xFFB
 22820                           pclath	equ	0xFFA
 22821                           tblptru	equ	0xFF8
 22822                           tblptrh	equ	0xFF7
 22823                           tblptrl	equ	0xFF6
 22824                           tablat	equ	0xFF5
 22825                           prodh	equ	0xFF4
 22826                           prodl	equ	0xFF3
 22827                           intcon	equ	0xFF2
 22828                           indf0	equ	0xFEF
 22829                           postinc0	equ	0xFEE
 22830                           fsr0h	equ	0xFEA
 22831                           fsr0l	equ	0xFE9
 22832                           wreg	equ	0xFE8
 22833                           indf1	equ	0xFE7
 22834                           postdec1	equ	0xFE5
 22835                           fsr1h	equ	0xFE2
 22836                           fsr1l	equ	0xFE1
 22837                           indf2	equ	0xFDF
 22838                           postinc2	equ	0xFDE
 22839                           postdec2	equ	0xFDD
 22840                           plusw2	equ	0xFDB
 22841                           fsr2h	equ	0xFDA
 22842                           fsr2l	equ	0xFD9
 22843                           status	equ	0xFD8
 22844                           
 22845 ;; *************** function _USBSuspend *****************
 22846 ;; Defined at:
 22847 ;;		line 2245 in file "Library/USB/src/usb_device.c"
 22848 ;; Parameters:    Size  Location     Type
 22849 ;;		None
 22850 ;; Auto vars:     Size  Location     Type
 22851 ;;		None
 22852 ;; Return value:  Size  Location     Type
 22853 ;;                  1    wreg      void 
 22854 ;; Registers used:
 22855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22856 ;; Tracked objects:
 22857 ;;		On entry : 0/0
 22858 ;;		On exit  : 0/0
 22859 ;;		Unchanged: 0/0
 22860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;Total ram usage:        0 bytes
 22866 ;; Hardware stack levels used:    1
 22867 ;; Hardware stack levels required when called:    7
 22868 ;; This function calls:
 22869 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 22870 ;; This function is called by:
 22871 ;;		_USBDeviceTasks
 22872 ;; This function uses a non-reentrant model
 22873 ;;
 22874                           
 22875                           	psect	text134
 22876  014EE6                     __ptext134:
 22877                           	opt stack 0
 22878  014EE6                     _USBSuspend:
 22879                           	opt stack 10
 22880                           
 22881                           ;usb_device.c: 2270: UIEbits.ACTVIE = 1;
 22882                           
 22883                           ; BSR set to: 0
 22884                           ;incstack = 0
 22885  014EE6  010F               	movlb	15	; () banked
 22886  014EE8  855C               	bsf	92,2,b	;volatile
 22887                           
 22888                           ; BSR set to: 15
 22889                           ;usb_device.c: 2271: (UIR &= 0xEF);
 22890  014EEA  9862               	bcf	3938,4,c	;volatile
 22891                           
 22892                           ; BSR set to: 15
 22893                           ;usb_device.c: 2274: UCONbits.SUSPND = 1;
 22894  014EEC  8265               	bsf	3941,1,c	;volatile
 22895                           
 22896                           ; BSR set to: 15
 22897                           ;usb_device.c: 2277: USBBusIsSuspended = 1;
 22898  014EEE  0E01               	movlw	1
 22899  014EF0  0100               	movlb	0	; () banked
 22900  014EF2  6F97               	movwf	_USBBusIsSuspended& (0+255),b	;volatile
 22901                           
 22902                           ; BSR set to: 0
 22903                           ;usb_device.c: 2278: USBTicksSinceSuspendEnd = 0;
 22904  014EF4  6B98               	clrf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;usb_device.c: 2285: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 22908  014EF6  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 22909  014EF8  0E75               	movlw	117
 22910  014EFA  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 22911  014EFC  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 22912  014EFE  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 22913  014F00  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 22914  014F02  6A1E               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 22915  014F04  EF75  F0A0         	goto	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 22916  014F08                     __end_of_USBSuspend:
 22917                           	opt stack 0
 22918                           tosu	equ	0xFFF
 22919                           tosh	equ	0xFFE
 22920                           tosl	equ	0xFFD
 22921                           pclatu	equ	0xFFB
 22922                           pclath	equ	0xFFA
 22923                           tblptru	equ	0xFF8
 22924                           tblptrh	equ	0xFF7
 22925                           tblptrl	equ	0xFF6
 22926                           tablat	equ	0xFF5
 22927                           prodh	equ	0xFF4
 22928                           prodl	equ	0xFF3
 22929                           intcon	equ	0xFF2
 22930                           indf0	equ	0xFEF
 22931                           postinc0	equ	0xFEE
 22932                           fsr0h	equ	0xFEA
 22933                           fsr0l	equ	0xFE9
 22934                           wreg	equ	0xFE8
 22935                           indf1	equ	0xFE7
 22936                           postdec1	equ	0xFE5
 22937                           fsr1h	equ	0xFE2
 22938                           fsr1l	equ	0xFE1
 22939                           indf2	equ	0xFDF
 22940                           postinc2	equ	0xFDE
 22941                           postdec2	equ	0xFDD
 22942                           plusw2	equ	0xFDB
 22943                           fsr2h	equ	0xFDA
 22944                           fsr2l	equ	0xFD9
 22945                           status	equ	0xFD8
 22946                           
 22947 ;; *************** function _USBStallHandler *****************
 22948 ;; Defined at:
 22949 ;;		line 2202 in file "Library/USB/src/usb_device.c"
 22950 ;; Parameters:    Size  Location     Type
 22951 ;;		None
 22952 ;; Auto vars:     Size  Location     Type
 22953 ;;		None
 22954 ;; Return value:  Size  Location     Type
 22955 ;;                  1    wreg      void 
 22956 ;; Registers used:
 22957 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22958 ;; Tracked objects:
 22959 ;;		On entry : 0/0
 22960 ;;		On exit  : 0/0
 22961 ;;		Unchanged: 0/0
 22962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22967 ;;Total ram usage:        1 bytes
 22968 ;; Hardware stack levels used:    1
 22969 ;; This function calls:
 22970 ;;		Nothing
 22971 ;; This function is called by:
 22972 ;;		_USBDeviceTasks
 22973 ;; This function uses a non-reentrant model
 22974 ;;
 22975                           
 22976                           	psect	text135
 22977  01467E                     __ptext135:
 22978                           	opt stack 0
 22979  01467E                     _USBStallHandler:
 22980                           	opt stack 17
 22981                           
 22982                           ;usb_device.c: 2214: if(UEP0bits.EPSTALL == 1)
 22983                           
 22984                           ;incstack = 0
 22985  01467E  010F               	movlb	15	; () banked
 22986  014680  A14C               	btfss	76,0,b	;volatile
 22987  014682  D01C               	goto	i2l303
 22988                           
 22989                           ; BSR set to: 15
 22990                           ;usb_device.c: 2215: {
 22991                           ;usb_device.c: 2217: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
 22992  014684  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 22993  014688  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 22994  01468C  0E80               	movlw	128
 22995  01468E  18DE               	xorwf	postinc2,w,c
 22996  014690  E113               	bnz	i2l11321
 22997                           
 22998                           ; BSR set to: 15
 22999  014692  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23000  014696  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23001  01469A  0E84               	movlw	132
 23002  01469C  18DE               	xorwf	postinc2,w,c
 23003  01469E  E10C               	bnz	i2l11321
 23004                           
 23005                           ; BSR set to: 15
 23006                           ;usb_device.c: 2218: {
 23007                           ;usb_device.c: 2220: pBDTEntryEP0OutCurrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 23008  0146A0  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 23009  0146A4  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 23010  0146A8  0E0C               	movlw	12
 23011  0146AA  6EDF               	movwf	indf2,c
 23012                           
 23013                           ; BSR set to: 15
 23014                           ;usb_device.c: 2221: pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 23015  0146AC  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 23016  0146B0  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 23017  0146B4  0E00               	movlw	0
 23018  0146B6  8EDB               	bsf	plusw2,7,c
 23019  0146B8                     i2l11321:
 23020                           
 23021                           ; BSR set to: 15
 23022                           ;usb_device.c: 2222: }
 23023                           ;usb_device.c: 2223: UEP0bits.EPSTALL = 0;
 23024  0146B8  010F               	movlb	15	; () banked
 23025  0146BA  914C               	bcf	76,0,b	;volatile
 23026  0146BC                     i2l303:
 23027                           
 23028                           ; BSR set to: 15
 23029                           ;usb_device.c: 2224: }
 23030                           ;usb_device.c: 2226: (UIR &= 0xDF);
 23031  0146BC  9A62               	bcf	3938,5,c	;volatile
 23032                           
 23033                           ; BSR set to: 15
 23034  0146BE  0012               	return		;funcret
 23035  0146C0                     __end_of_USBStallHandler:
 23036                           	opt stack 0
 23037                           tosu	equ	0xFFF
 23038                           tosh	equ	0xFFE
 23039                           tosl	equ	0xFFD
 23040                           pclatu	equ	0xFFB
 23041                           pclath	equ	0xFFA
 23042                           tblptru	equ	0xFF8
 23043                           tblptrh	equ	0xFF7
 23044                           tblptrl	equ	0xFF6
 23045                           tablat	equ	0xFF5
 23046                           prodh	equ	0xFF4
 23047                           prodl	equ	0xFF3
 23048                           intcon	equ	0xFF2
 23049                           indf0	equ	0xFEF
 23050                           postinc0	equ	0xFEE
 23051                           fsr0h	equ	0xFEA
 23052                           fsr0l	equ	0xFE9
 23053                           wreg	equ	0xFE8
 23054                           indf1	equ	0xFE7
 23055                           postdec1	equ	0xFE5
 23056                           fsr1h	equ	0xFE2
 23057                           fsr1l	equ	0xFE1
 23058                           indf2	equ	0xFDF
 23059                           postinc2	equ	0xFDE
 23060                           postdec2	equ	0xFDD
 23061                           plusw2	equ	0xFDB
 23062                           fsr2h	equ	0xFDA
 23063                           fsr2l	equ	0xFD9
 23064                           status	equ	0xFD8
 23065                           
 23066 ;; *************** function _USBIncrement1msInternalTimers *****************
 23067 ;; Defined at:
 23068 ;;		line 3025 in file "Library/USB/src/usb_device.c"
 23069 ;; Parameters:    Size  Location     Type
 23070 ;;		None
 23071 ;; Auto vars:     Size  Location     Type
 23072 ;;		None
 23073 ;; Return value:  Size  Location     Type
 23074 ;;                  1    wreg      void 
 23075 ;; Registers used:
 23076 ;;		wreg, status,2, status,0
 23077 ;; Tracked objects:
 23078 ;;		On entry : 0/0
 23079 ;;		On exit  : 0/0
 23080 ;;		Unchanged: 0/0
 23081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23086 ;;Total ram usage:        0 bytes
 23087 ;; Hardware stack levels used:    1
 23088 ;; This function calls:
 23089 ;;		Nothing
 23090 ;; This function is called by:
 23091 ;;		_USBDeviceTasks
 23092 ;; This function uses a non-reentrant model
 23093 ;;
 23094                           
 23095                           	psect	text136
 23096  014F80                     __ptext136:
 23097                           	opt stack 0
 23098  014F80                     _USBIncrement1msInternalTimers:
 23099                           	opt stack 17
 23100                           
 23101                           ;usb_device.c: 3033: USB1msTickCount++;
 23102                           
 23103                           ; BSR set to: 15
 23104                           ;incstack = 0
 23105  014F80  2A38               	incf	_USB1msTickCount,f,c	;volatile
 23106  014F82  0E00               	movlw	0
 23107  014F84  2239               	addwfc	_USB1msTickCount+1,f,c	;volatile
 23108  014F86  223A               	addwfc	_USB1msTickCount+2,f,c	;volatile
 23109  014F88  223B               	addwfc	_USB1msTickCount+3,f,c	;volatile
 23110                           
 23111                           ;usb_device.c: 3034: if(USBBusIsSuspended == 0)
 23112  014F8A  0100               	movlb	0	; () banked
 23113  014F8C  5197               	movf	_USBBusIsSuspended& (0+255),w,b	;volatile
 23114  014F8E  A4D8               	btfss	status,2,c
 23115  014F90  0012               	return	
 23116                           
 23117                           ; BSR set to: 0
 23118                           ;usb_device.c: 3035: {
 23119                           ;usb_device.c: 3036: USBTicksSinceSuspendEnd++;
 23120  014F92  2B98               	incf	_USBTicksSinceSuspendEnd& (0+255),f,b	;volatile
 23121                           
 23122                           ; BSR set to: 0
 23123                           ;usb_device.c: 3038: if(USBTicksSinceSuspendEnd == 0)
 23124  014F94  5198               	movf	_USBTicksSinceSuspendEnd& (0+255),w,b	;volatile
 23125  014F96  B4D8               	btfsc	status,2,c
 23126                           
 23127                           ; BSR set to: 0
 23128                           ;usb_device.c: 3039: {
 23129                           ;usb_device.c: 3040: USBTicksSinceSuspendEnd = 255;
 23130  014F98  6998               	setf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 23131                           
 23132                           ; BSR set to: 0
 23133  014F9A  0012               	return	
 23134  014F9C                     __end_of_USBIncrement1msInternalTimers:
 23135                           	opt stack 0
 23136                           tosu	equ	0xFFF
 23137                           tosh	equ	0xFFE
 23138                           tosl	equ	0xFFD
 23139                           pclatu	equ	0xFFB
 23140                           pclath	equ	0xFFA
 23141                           tblptru	equ	0xFF8
 23142                           tblptrh	equ	0xFF7
 23143                           tblptrl	equ	0xFF6
 23144                           tablat	equ	0xFF5
 23145                           prodh	equ	0xFF4
 23146                           prodl	equ	0xFF3
 23147                           intcon	equ	0xFF2
 23148                           indf0	equ	0xFEF
 23149                           postinc0	equ	0xFEE
 23150                           fsr0h	equ	0xFEA
 23151                           fsr0l	equ	0xFE9
 23152                           wreg	equ	0xFE8
 23153                           indf1	equ	0xFE7
 23154                           postdec1	equ	0xFE5
 23155                           fsr1h	equ	0xFE2
 23156                           fsr1l	equ	0xFE1
 23157                           indf2	equ	0xFDF
 23158                           postinc2	equ	0xFDE
 23159                           postdec2	equ	0xFDD
 23160                           plusw2	equ	0xFDB
 23161                           fsr2h	equ	0xFDA
 23162                           fsr2l	equ	0xFD9
 23163                           status	equ	0xFD8
 23164                           
 23165 ;; *************** function _USBCtrlEPService *****************
 23166 ;; Defined at:
 23167 ;;		line 2372 in file "Library/USB/src/usb_device.c"
 23168 ;; Parameters:    Size  Location     Type
 23169 ;;		None
 23170 ;; Auto vars:     Size  Location     Type
 23171 ;;		None
 23172 ;; Return value:  Size  Location     Type
 23173 ;;                  1    wreg      void 
 23174 ;; Registers used:
 23175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23176 ;; Tracked objects:
 23177 ;;		On entry : 0/0
 23178 ;;		On exit  : 0/0
 23179 ;;		Unchanged: 0/0
 23180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23185 ;;Total ram usage:        1 bytes
 23186 ;; Hardware stack levels used:    1
 23187 ;; Hardware stack levels required when called:   10
 23188 ;; This function calls:
 23189 ;;		_USBCtrlTrfInHandler
 23190 ;;		_USBCtrlTrfOutHandler
 23191 ;;		_USBCtrlTrfSetupHandler
 23192 ;;		_memcpy
 23193 ;; This function is called by:
 23194 ;;		_USBDeviceTasks
 23195 ;; This function uses a non-reentrant model
 23196 ;;
 23197                           
 23198                           	psect	text137
 23199  0135B6                     __ptext137:
 23200                           	opt stack 0
 23201  0135B6                     _USBCtrlEPService:
 23202                           	opt stack 7
 23203                           
 23204                           ;usb_device.c: 2378: USBStatusStageTimeoutCounter = (uint8_t)45;
 23205                           
 23206                           ; BSR set to: 0
 23207                           ;incstack = 0
 23208  0135B6  0E2D               	movlw	45
 23209  0135B8  6E4C               	movwf	_USBStatusStageTimeoutCounter,c	;volatile
 23210                           
 23211                           ;usb_device.c: 2382: if((USTATcopy.Val & ~0x02) == 0x00)
 23212  0135BA  C05C  F028         	movff	_USTATcopy,??_USBCtrlEPService	;volatile
 23213  0135BE  0EFD               	movlw	253
 23214  0135C0  1628               	andwf	??_USBCtrlEPService,f,c
 23215  0135C2  E135               	bnz	i2l11341
 23216                           
 23217                           ;usb_device.c: 2383: {
 23218                           ;usb_device.c: 2386: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
 23219  0135C4  C05C  F028         	movff	_USTATcopy,??_USBCtrlEPService	;volatile
 23220  0135C8  90D8               	bcf	status,0,c
 23221  0135CA  3228               	rrcf	??_USBCtrlEPService,f,c
 23222  0135CC  0E3F               	movlw	63
 23223  0135CE  1628               	andwf	??_USBCtrlEPService,f,c
 23224  0135D0  5028               	movf	??_USBCtrlEPService,w,c
 23225  0135D2  0D04               	mullw	4
 23226  0135D4  0E00               	movlw	0
 23227  0135D6  24F3               	addwf	prodl,w,c
 23228  0135D8  6E3E               	movwf	_pBDTEntryEP0OutCurrent,c
 23229  0135DA  0E04               	movlw	4
 23230  0135DC  20F4               	addwfc	prodh,w,c
 23231  0135DE  6E3F               	movwf	_pBDTEntryEP0OutCurrent+1,c
 23232                           
 23233                           ;usb_device.c: 2394: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 23234  0135E0  C03E  F040         	movff	_pBDTEntryEP0OutCurrent,_pBDTEntryEP0OutNext
 23235  0135E4  C03F  F041         	movff	_pBDTEntryEP0OutCurrent+1,_pBDTEntryEP0OutNext+1
 23236                           
 23237                           ;usb_device.c: 2396: pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryEP
      +                          0OutNext) ^ 0x0004);
 23238  0135E8  0E04               	movlw	4
 23239  0135EA  1A40               	xorwf	_pBDTEntryEP0OutNext,f,c
 23240  0135EC  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23241                           
 23242                           ;usb_device.c: 2399: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 23243  0135EE  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 23244  0135F2  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 23245  0135F6  30DF               	rrcf	indf2,w,c
 23246  0135F8  32E8               	rrcf	wreg,f,c
 23247  0135FA  0B0F               	andlw	15
 23248  0135FC  0A0D               	xorlw	13
 23249  0135FE  E002 EFC9  F0A0    	bnz	_USBCtrlTrfOutHandler
 23250                           
 23251                           ;usb_device.c: 2400: {
 23252                           ;usb_device.c: 2405: memcpy((uint8_t*)&SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurr
      +                          ent->ADR)), 8);
 23253  013604  0E30               	movlw	48
 23254  013606  6E01               	movwf	memcpy@d1,c
 23255  013608  0E04               	movlw	4
 23256  01360A  6E02               	movwf	memcpy@d1+1,c
 23257  01360C  EE20 F002          	lfsr	2,2
 23258  013610  503E               	movf	_pBDTEntryEP0OutCurrent,w,c
 23259  013612  26D9               	addwf	fsr2l,f,c
 23260  013614  503F               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 23261  013616  22DA               	addwfc	fsr2h,f,c
 23262  013618  CFDE F003          	movff	postinc2,memcpy@s1
 23263  01361C  CFDD F004          	movff	postdec2,memcpy@s1+1
 23264  013620  6A06               	clrf	memcpy@n+1,c
 23265  013622  0E08               	movlw	8
 23266  013624  6E05               	movwf	memcpy@n,c
 23267  013626  EC9F  F0A3         	call	_memcpy	;wreg free
 23268                           
 23269                           ;usb_device.c: 2408: USBCtrlTrfSetupHandler();
 23270  01362A  EF6C  F09E         	goto	_USBCtrlTrfSetupHandler	;wreg free
 23271  01362E                     i2l11341:
 23272                           
 23273                           ;usb_device.c: 2416: else if((USTATcopy.Val & ~0x02) == 0x04)
 23274  01362E  505C               	movf	_USTATcopy,w,c	;volatile
 23275  013630  0BFD               	andlw	253
 23276  013632  0A04               	xorlw	4
 23277  013634  B4D8               	btfsc	status,2,c
 23278                           
 23279                           ;usb_device.c: 2417: {
 23280                           ;usb_device.c: 2420: USBCtrlTrfInHandler();
 23281  013636  ECB2  F096         	call	_USBCtrlTrfInHandler	;wreg free
 23282  01363A  0012               	return	
 23283  01363C                     __end_of_USBCtrlEPService:
 23284                           	opt stack 0
 23285                           tosu	equ	0xFFF
 23286                           tosh	equ	0xFFE
 23287                           tosl	equ	0xFFD
 23288                           pclatu	equ	0xFFB
 23289                           pclath	equ	0xFFA
 23290                           tblptru	equ	0xFF8
 23291                           tblptrh	equ	0xFF7
 23292                           tblptrl	equ	0xFF6
 23293                           tablat	equ	0xFF5
 23294                           prodh	equ	0xFF4
 23295                           prodl	equ	0xFF3
 23296                           intcon	equ	0xFF2
 23297                           indf0	equ	0xFEF
 23298                           postinc0	equ	0xFEE
 23299                           fsr0h	equ	0xFEA
 23300                           fsr0l	equ	0xFE9
 23301                           wreg	equ	0xFE8
 23302                           indf1	equ	0xFE7
 23303                           postdec1	equ	0xFE5
 23304                           fsr1h	equ	0xFE2
 23305                           fsr1l	equ	0xFE1
 23306                           indf2	equ	0xFDF
 23307                           postinc2	equ	0xFDE
 23308                           postdec2	equ	0xFDD
 23309                           plusw2	equ	0xFDB
 23310                           fsr2h	equ	0xFDA
 23311                           fsr2l	equ	0xFD9
 23312                           status	equ	0xFD8
 23313                           
 23314 ;; *************** function _memcpy *****************
 23315 ;; Defined at:
 23316 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
 23317 ;; Parameters:    Size  Location     Type
 23318 ;;  d1              2    0[COMRAM] PTR void 
 23319 ;;		 -> SetupPkt(8), 
 23320 ;;  s1              2    2[COMRAM] PTR const void 
 23321 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), CtrlTrfData(8), RAM(3903), 
 23322 ;;		 -> SetupPkt(8), NULL(0), 
 23323 ;;  n               2    4[COMRAM] unsigned int 
 23324 ;; Auto vars:     Size  Location     Type
 23325 ;;  s               2    8[COMRAM] PTR const unsigned char 
 23326 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), CtrlTrfData(8), RAM(3903), 
 23327 ;;		 -> SetupPkt(8), NULL(0), 
 23328 ;;  d               2    6[COMRAM] PTR unsigned char 
 23329 ;;		 -> SetupPkt(8), 
 23330 ;; Return value:  Size  Location     Type
 23331 ;;                  2    0[COMRAM] PTR void 
 23332 ;; Registers used:
 23333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23334 ;; Tracked objects:
 23335 ;;		On entry : 0/0
 23336 ;;		On exit  : 0/0
 23337 ;;		Unchanged: 0/0
 23338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23339 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23342 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23343 ;;Total ram usage:       10 bytes
 23344 ;; Hardware stack levels used:    1
 23345 ;; This function calls:
 23346 ;;		Nothing
 23347 ;; This function is called by:
 23348 ;;		_USBCtrlEPService
 23349 ;; This function uses a non-reentrant model
 23350 ;;
 23351                           
 23352                           	psect	text138
 23353  01473E                     __ptext138:
 23354                           	opt stack 0
 23355  01473E                     _memcpy:
 23356                           	opt stack 16
 23357                           
 23358                           ;incstack = 0
 23359  01473E  C003  F009         	movff	memcpy@s1,memcpy@s
 23360  014742  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
 23361  014746  C001  F007         	movff	memcpy@d1,memcpy@d
 23362  01474A  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
 23363  01474E  D00E               	goto	i2l10641
 23364  014750                     i2l10635:
 23365  014750  C009  FFD9         	movff	memcpy@s,fsr2l
 23366  014754  C00A  FFDA         	movff	memcpy@s+1,fsr2h
 23367  014758  C007  FFE1         	movff	memcpy@d,fsr1l
 23368  01475C  C008  FFE2         	movff	memcpy@d+1,fsr1h
 23369  014760  CFDF FFE7          	movff	indf2,indf1
 23370  014764  4A09               	infsnz	memcpy@s,f,c
 23371  014766  2A0A               	incf	memcpy@s+1,f,c
 23372  014768  4A07               	infsnz	memcpy@d,f,c
 23373  01476A  2A08               	incf	memcpy@d+1,f,c
 23374  01476C                     i2l10641:
 23375  01476C  0605               	decf	memcpy@n,f,c
 23376  01476E  A0D8               	btfss	status,0,c
 23377  014770  0606               	decf	memcpy@n+1,f,c
 23378  014772  2805               	incf	memcpy@n,w,c
 23379  014774  E1ED               	bnz	i2l10635
 23380  014776  2806               	incf	memcpy@n+1,w,c
 23381  014778  E1EB               	bnz	i2l10635
 23382  01477A  0012               	return	
 23383  01477C                     __end_of_memcpy:
 23384                           	opt stack 0
 23385                           tosu	equ	0xFFF
 23386                           tosh	equ	0xFFE
 23387                           tosl	equ	0xFFD
 23388                           pclatu	equ	0xFFB
 23389                           pclath	equ	0xFFA
 23390                           tblptru	equ	0xFF8
 23391                           tblptrh	equ	0xFF7
 23392                           tblptrl	equ	0xFF6
 23393                           tablat	equ	0xFF5
 23394                           prodh	equ	0xFF4
 23395                           prodl	equ	0xFF3
 23396                           intcon	equ	0xFF2
 23397                           indf0	equ	0xFEF
 23398                           postinc0	equ	0xFEE
 23399                           fsr0h	equ	0xFEA
 23400                           fsr0l	equ	0xFE9
 23401                           wreg	equ	0xFE8
 23402                           indf1	equ	0xFE7
 23403                           postdec1	equ	0xFE5
 23404                           fsr1h	equ	0xFE2
 23405                           fsr1l	equ	0xFE1
 23406                           indf2	equ	0xFDF
 23407                           postinc2	equ	0xFDE
 23408                           postdec2	equ	0xFDD
 23409                           plusw2	equ	0xFDB
 23410                           fsr2h	equ	0xFDA
 23411                           fsr2l	equ	0xFD9
 23412                           status	equ	0xFD8
 23413                           
 23414 ;; *************** function _USBCtrlTrfSetupHandler *****************
 23415 ;; Defined at:
 23416 ;;		line 2465 in file "Library/USB/src/usb_device.c"
 23417 ;; Parameters:    Size  Location     Type
 23418 ;;		None
 23419 ;; Auto vars:     Size  Location     Type
 23420 ;;		None
 23421 ;; Return value:  Size  Location     Type
 23422 ;;                  1    wreg      void 
 23423 ;; Registers used:
 23424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23425 ;; Tracked objects:
 23426 ;;		On entry : 0/0
 23427 ;;		On exit  : 0/0
 23428 ;;		Unchanged: 0/0
 23429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23434 ;;Total ram usage:        0 bytes
 23435 ;; Hardware stack levels used:    1
 23436 ;; Hardware stack levels required when called:    9
 23437 ;; This function calls:
 23438 ;;		_USBCheckStdRequest
 23439 ;;		_USBCtrlEPServiceComplete
 23440 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 23441 ;; This function is called by:
 23442 ;;		_USBCtrlEPService
 23443 ;; This function uses a non-reentrant model
 23444 ;;
 23445                           
 23446                           	psect	text139
 23447  013CD8                     __ptext139:
 23448                           	opt stack 0
 23449  013CD8                     _USBCtrlTrfSetupHandler:
 23450                           	opt stack 7
 23451                           
 23452                           ;usb_device.c: 2470: shortPacketStatus = 0;
 23453                           
 23454                           ;incstack = 0
 23455  013CD8  6A50               	clrf	_shortPacketStatus,c	;volatile
 23456                           
 23457                           ;usb_device.c: 2471: USBDeferStatusStagePacket = 0;
 23458  013CDA  6A48               	clrf	_USBDeferStatusStagePacket,c	;volatile
 23459                           
 23460                           ;usb_device.c: 2472: USBDeferINDataStagePackets = 0;
 23461  013CDC  6A46               	clrf	_USBDeferINDataStagePackets,c	;volatile
 23462                           
 23463                           ;usb_device.c: 2473: USBDeferOUTDataStagePackets = 0;
 23464  013CDE  6A47               	clrf	_USBDeferOUTDataStagePackets,c	;volatile
 23465                           
 23466                           ;usb_device.c: 2474: BothEP0OutUOWNsSet = 0;
 23467  013CE0  6A43               	clrf	_BothEP0OutUOWNsSet,c	;volatile
 23468                           
 23469                           ;usb_device.c: 2475: controlTransferState = 0;
 23470  013CE2  6A4D               	clrf	_controlTransferState,c	;volatile
 23471                           
 23472                           ;usb_device.c: 2484: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 23473  013CE4  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23474  013CE8  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23475  013CEC  0E7F               	movlw	127
 23476  013CEE  16DF               	andwf	indf2,f,c
 23477                           
 23478                           ;usb_device.c: 2486: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 23479  013CF0  0E04               	movlw	4
 23480  013CF2  0100               	movlb	0	; () banked
 23481  013CF4  1B6F               	xorwf	_pBDTEntryIn& (0+255),f,b
 23482  013CF6  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 23483                           
 23484                           ; BSR set to: 0
 23485                           ;usb_device.c: 2487: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 23486  013CF8  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23487  013CFC  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23488  013D00  0E7F               	movlw	127
 23489  013D02  16DF               	andwf	indf2,f,c
 23490                           
 23491                           ; BSR set to: 0
 23492                           ;usb_device.c: 2488: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 23493  013D04  0E04               	movlw	4
 23494  013D06  1B6F               	xorwf	_pBDTEntryIn& (0+255),f,b
 23495  013D08  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 23496                           
 23497                           ; BSR set to: 0
 23498                           ;usb_device.c: 2489: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 23499  013D0A  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23500  013D0E  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23501  013D12  0E7F               	movlw	127
 23502  013D14  16DF               	andwf	indf2,f,c
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;usb_device.c: 2491: inPipes[0].info.Val = 0;
 23506  013D16  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;usb_device.c: 2492: inPipes[0].wCount.Val = 0;
 23510  013D18  6B6E               	clrf	(_inPipes+5)& (0+255),b	;volatile
 23511  013D1A  6B6D               	clrf	(_inPipes+4)& (0+255),b	;volatile
 23512                           
 23513                           ; BSR set to: 0
 23514                           ;usb_device.c: 2493: outPipes[0].info.Val = 0;
 23515  013D1C  6B63               	clrf	(_outPipes+3)& (0+255),b	;volatile
 23516                           
 23517                           ; BSR set to: 0
 23518                           ;usb_device.c: 2494: outPipes[0].wCount.Val = 0;
 23519  013D1E  6B65               	clrf	(_outPipes+5)& (0+255),b	;volatile
 23520  013D20  6B64               	clrf	(_outPipes+4)& (0+255),b	;volatile
 23521                           
 23522                           ; BSR set to: 0
 23523                           ;usb_device.c: 2500: USBCheckStdRequest();
 23524  013D22  ECA3  F095         	call	_USBCheckStdRequest	;wreg free
 23525                           
 23526                           ;usb_device.c: 2501: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
 23527  013D26  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 23528  013D28  0E03               	movlw	3
 23529  013D2A  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 23530  013D2C  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 23531  013D2E  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 23532  013D30  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 23533  013D32  6A1E               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 23534  013D34  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 23535                           
 23536                           ;usb_device.c: 2514: USBCtrlEPServiceComplete();
 23537  013D38  EFB0  F091         	goto	_USBCtrlEPServiceComplete	;wreg free
 23538  013D3C                     __end_of_USBCtrlTrfSetupHandler:
 23539                           	opt stack 0
 23540                           tosu	equ	0xFFF
 23541                           tosh	equ	0xFFE
 23542                           tosl	equ	0xFFD
 23543                           pclatu	equ	0xFFB
 23544                           pclath	equ	0xFFA
 23545                           tblptru	equ	0xFF8
 23546                           tblptrh	equ	0xFF7
 23547                           tblptrl	equ	0xFF6
 23548                           tablat	equ	0xFF5
 23549                           prodh	equ	0xFF4
 23550                           prodl	equ	0xFF3
 23551                           intcon	equ	0xFF2
 23552                           indf0	equ	0xFEF
 23553                           postinc0	equ	0xFEE
 23554                           fsr0h	equ	0xFEA
 23555                           fsr0l	equ	0xFE9
 23556                           wreg	equ	0xFE8
 23557                           indf1	equ	0xFE7
 23558                           postdec1	equ	0xFE5
 23559                           fsr1h	equ	0xFE2
 23560                           fsr1l	equ	0xFE1
 23561                           indf2	equ	0xFDF
 23562                           postinc2	equ	0xFDE
 23563                           postdec2	equ	0xFDD
 23564                           plusw2	equ	0xFDB
 23565                           fsr2h	equ	0xFDA
 23566                           fsr2l	equ	0xFD9
 23567                           status	equ	0xFD8
 23568                           
 23569 ;; *************** function _USBCtrlEPServiceComplete *****************
 23570 ;; Defined at:
 23571 ;;		line 1616 in file "Library/USB/src/usb_device.c"
 23572 ;; Parameters:    Size  Location     Type
 23573 ;;		None
 23574 ;; Auto vars:     Size  Location     Type
 23575 ;;		None
 23576 ;; Return value:  Size  Location     Type
 23577 ;;                  1    wreg      void 
 23578 ;; Registers used:
 23579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23580 ;; Tracked objects:
 23581 ;;		On entry : 0/0
 23582 ;;		On exit  : 0/0
 23583 ;;		Unchanged: 0/0
 23584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23589 ;;Total ram usage:        0 bytes
 23590 ;; Hardware stack levels used:    1
 23591 ;; Hardware stack levels required when called:    2
 23592 ;; This function calls:
 23593 ;;		_USBCtrlEPAllowDataStage
 23594 ;;		_USBCtrlEPAllowStatusStage
 23595 ;; This function is called by:
 23596 ;;		_USBCtrlTrfSetupHandler
 23597 ;; This function uses a non-reentrant model
 23598 ;;
 23599                           
 23600                           	psect	text140
 23601  012360                     __ptext140:
 23602                           	opt stack 0
 23603  012360                     _USBCtrlEPServiceComplete:
 23604                           	opt stack 13
 23605                           
 23606                           ;usb_device.c: 1622: UCONbits.PKTDIS = 0;
 23607                           
 23608                           ;incstack = 0
 23609  012360  9865               	bcf	3941,4,c	;volatile
 23610                           
 23611                           ;usb_device.c: 1628: if(inPipes[0].info.bits.busy == 0)
 23612  012362  0100               	movlb	0	; () banked
 23613  012364  BF6C               	btfsc	(_inPipes+3)& (0+255),7,b	;volatile
 23614  012366  D036               	goto	i2l227
 23615                           
 23616                           ; BSR set to: 0
 23617                           ;usb_device.c: 1629: {
 23618                           ;usb_device.c: 1630: if(outPipes[0].info.bits.busy == 1)
 23619  012368  AF63               	btfss	(_outPipes+3)& (0+255),7,b	;volatile
 23620  01236A  D009               	goto	i2l10177
 23621                           
 23622                           ; BSR set to: 0
 23623                           ;usb_device.c: 1631: {
 23624                           ;usb_device.c: 1632: controlTransferState = 2;
 23625  01236C  0E02               	movlw	2
 23626  01236E  6E4D               	movwf	_controlTransferState,c	;volatile
 23627                           
 23628                           ;usb_device.c: 1643: if(USBDeferOUTDataStagePackets == 0)
 23629  012370  5047               	movf	_USBDeferOUTDataStagePackets,w,c	;volatile
 23630  012372  E102               	bnz	i2l10173
 23631                           
 23632                           ; BSR set to: 0
 23633                           ;usb_device.c: 1644: {
 23634                           ;usb_device.c: 1645: USBCtrlEPAllowDataStage();
 23635  012374  ECEC  F098         	call	_USBCtrlEPAllowDataStage	;wreg free
 23636  012378                     i2l10173:
 23637                           
 23638                           ;usb_device.c: 1646: }
 23639                           ;usb_device.c: 1650: USBStatusStageEnabledFlag2 = 0;
 23640  012378  6A4B               	clrf	_USBStatusStageEnabledFlag2,c	;volatile
 23641                           
 23642                           ;usb_device.c: 1651: USBStatusStageEnabledFlag1 = 0;
 23643  01237A  6A4A               	clrf	_USBStatusStageEnabledFlag1,c	;volatile
 23644                           
 23645                           ;usb_device.c: 1652: }
 23646  01237C  0C00               	retlw	0
 23647  01237E                     i2l10177:
 23648                           
 23649                           ;usb_device.c: 1653: else
 23650                           ;usb_device.c: 1654: {
 23651                           ;usb_device.c: 1659: pBDTEntryEP0OutNext->CNT = 8;
 23652  01237E  EE20 F001          	lfsr	2,1
 23653  012382  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23654  012384  26D9               	addwf	fsr2l,f,c
 23655  012386  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23656  012388  22DA               	addwfc	fsr2h,f,c
 23657  01238A  0E08               	movlw	8
 23658  01238C  6EDF               	movwf	indf2,c
 23659                           
 23660                           ;usb_device.c: 1660: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 23661  01238E  EE20 F002          	lfsr	2,2
 23662  012392  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23663  012394  26D9               	addwf	fsr2l,f,c
 23664  012396  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23665  012398  22DA               	addwfc	fsr2h,f,c
 23666  01239A  0E30               	movlw	48
 23667  01239C  6EDE               	movwf	postinc2,c
 23668  01239E  0E04               	movlw	4
 23669  0123A0  6EDD               	movwf	postdec2,c
 23670                           
 23671                           ;usb_device.c: 1661: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 23672  0123A2  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23673  0123A6  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23674  0123AA  0E0C               	movlw	12
 23675  0123AC  6EDF               	movwf	indf2,c
 23676                           
 23677                           ;usb_device.c: 1662: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 23678  0123AE  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23679  0123B2  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23680  0123B6  0E00               	movlw	0
 23681  0123B8  8EDB               	bsf	plusw2,7,c
 23682                           
 23683                           ;usb_device.c: 1663: pBDTEntryIn[0]->STAT.Val = 0x04;
 23684  0123BA  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23685  0123BE  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23686  0123C2  0E04               	movlw	4
 23687  0123C4  6EDF               	movwf	indf2,c
 23688                           
 23689                           ;usb_device.c: 1664: pBDTEntryIn[0]->STAT.Val |= 0x80;
 23690  0123C6  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23691  0123CA  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23692  0123CE  0E00               	movlw	0
 23693  0123D0  8EDB               	bsf	plusw2,7,c
 23694                           
 23695                           ;usb_device.c: 1665: }
 23696                           ;usb_device.c: 1666: }
 23697  0123D2  0C00               	retlw	0
 23698  0123D4                     i2l227:
 23699                           
 23700                           ; BSR set to: 0
 23701                           ;usb_device.c: 1667: else
 23702                           ;usb_device.c: 1668: {
 23703                           ;usb_device.c: 1669: if(SetupPkt.DataDir == (0x80>>7))
 23704  0123D4  0104               	movlb	4	; () banked
 23705  0123D6  AF30               	btfss	48,7,b	;volatile
 23706  0123D8  D00E               	goto	i2l10197
 23707                           
 23708                           ; BSR set to: 4
 23709                           ;usb_device.c: 1670: {
 23710                           ;usb_device.c: 1671: controlTransferState = 1;
 23711  0123DA  0E01               	movlw	1
 23712  0123DC  6E4D               	movwf	_controlTransferState,c	;volatile
 23713                           
 23714                           ;usb_device.c: 1685: if(USBDeferINDataStagePackets == 0)
 23715  0123DE  5046               	movf	_USBDeferINDataStagePackets,w,c	;volatile
 23716  0123E0  E102               	bnz	i2l10189
 23717                           
 23718                           ; BSR set to: 4
 23719                           ;usb_device.c: 1686: {
 23720                           ;usb_device.c: 1687: USBCtrlEPAllowDataStage();
 23721  0123E2  ECEC  F098         	call	_USBCtrlEPAllowDataStage	;wreg free
 23722  0123E6                     i2l10189:
 23723                           
 23724                           ;usb_device.c: 1688: }
 23725                           ;usb_device.c: 1710: USBStatusStageEnabledFlag2 = 0;
 23726  0123E6  0E00               	movlw	0
 23727  0123E8  6E4B               	movwf	_USBStatusStageEnabledFlag2,c	;volatile
 23728                           
 23729                           ;usb_device.c: 1711: USBStatusStageEnabledFlag1 = 0;
 23730  0123EA  6E4A               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 23731                           
 23732                           ;usb_device.c: 1712: if(USBDeferStatusStagePacket == 0)
 23733  0123EC  5048               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 23734  0123EE  B4D8               	btfsc	status,2,c
 23735                           
 23736                           ;usb_device.c: 1713: {
 23737                           ;usb_device.c: 1714: USBCtrlEPAllowStatusStage();
 23738  0123F0  EC45  F095         	call	_USBCtrlEPAllowStatusStage	;wreg free
 23739                           
 23740                           ;usb_device.c: 1715: }
 23741                           ;usb_device.c: 1716: }
 23742  0123F4  0012               	return	
 23743  0123F6                     i2l10197:
 23744                           
 23745                           ;usb_device.c: 1717: else
 23746                           ;usb_device.c: 1718: {
 23747                           ;usb_device.c: 1729: controlTransferState = 2;
 23748  0123F6  0E02               	movlw	2
 23749  0123F8  6E4D               	movwf	_controlTransferState,c	;volatile
 23750                           
 23751                           ;usb_device.c: 1732: pBDTEntryEP0OutNext->CNT = 8;
 23752  0123FA  EE20 F001          	lfsr	2,1
 23753  0123FE  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23754  012400  26D9               	addwf	fsr2l,f,c
 23755  012402  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23756  012404  22DA               	addwfc	fsr2h,f,c
 23757  012406  0E08               	movlw	8
 23758  012408  6EDF               	movwf	indf2,c
 23759                           
 23760                           ;usb_device.c: 1733: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 23761  01240A  EE20 F002          	lfsr	2,2
 23762  01240E  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23763  012410  26D9               	addwf	fsr2l,f,c
 23764  012412  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23765  012414  22DA               	addwfc	fsr2h,f,c
 23766  012416  0E30               	movlw	48
 23767  012418  6EDE               	movwf	postinc2,c
 23768  01241A  0E04               	movlw	4
 23769  01241C  6EDD               	movwf	postdec2,c
 23770                           
 23771                           ;usb_device.c: 1734: pBDTEntryEP0OutNext->STAT.Val = 0x04;
 23772  01241E  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23773  012422  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23774  012426  6EDF               	movwf	indf2,c
 23775                           
 23776                           ;usb_device.c: 1735: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 23777  012428  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23778  01242C  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23779  012430  0E00               	movlw	0
 23780  012432  8EDB               	bsf	plusw2,7,c
 23781                           
 23782                           ;usb_device.c: 1738: USBStatusStageEnabledFlag2 = 0;
 23783  012434  6E4B               	movwf	_USBStatusStageEnabledFlag2,c	;volatile
 23784                           
 23785                           ;usb_device.c: 1739: USBStatusStageEnabledFlag1 = 0;
 23786  012436  6E4A               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 23787                           
 23788                           ;usb_device.c: 1740: if(USBDeferStatusStagePacket == 0)
 23789  012438  5048               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 23790  01243A  B4D8               	btfsc	status,2,c
 23791                           
 23792                           ;usb_device.c: 1741: {
 23793                           ;usb_device.c: 1742: USBCtrlEPAllowStatusStage();
 23794  01243C  EC45  F095         	call	_USBCtrlEPAllowStatusStage	;wreg free
 23795  012440  0012               	return	
 23796  012442                     __end_of_USBCtrlEPServiceComplete:
 23797                           	opt stack 0
 23798                           tosu	equ	0xFFF
 23799                           tosh	equ	0xFFE
 23800                           tosl	equ	0xFFD
 23801                           pclatu	equ	0xFFB
 23802                           pclath	equ	0xFFA
 23803                           tblptru	equ	0xFF8
 23804                           tblptrh	equ	0xFF7
 23805                           tblptrl	equ	0xFF6
 23806                           tablat	equ	0xFF5
 23807                           prodh	equ	0xFF4
 23808                           prodl	equ	0xFF3
 23809                           intcon	equ	0xFF2
 23810                           indf0	equ	0xFEF
 23811                           postinc0	equ	0xFEE
 23812                           fsr0h	equ	0xFEA
 23813                           fsr0l	equ	0xFE9
 23814                           wreg	equ	0xFE8
 23815                           indf1	equ	0xFE7
 23816                           postdec1	equ	0xFE5
 23817                           fsr1h	equ	0xFE2
 23818                           fsr1l	equ	0xFE1
 23819                           indf2	equ	0xFDF
 23820                           postinc2	equ	0xFDE
 23821                           postdec2	equ	0xFDD
 23822                           plusw2	equ	0xFDB
 23823                           fsr2h	equ	0xFDA
 23824                           fsr2l	equ	0xFD9
 23825                           status	equ	0xFD8
 23826                           
 23827 ;; *************** function _USBCtrlEPAllowDataStage *****************
 23828 ;; Defined at:
 23829 ;;		line 1488 in file "Library/USB/src/usb_device.c"
 23830 ;; Parameters:    Size  Location     Type
 23831 ;;		None
 23832 ;; Auto vars:     Size  Location     Type
 23833 ;;		None
 23834 ;; Return value:  Size  Location     Type
 23835 ;;                  1    wreg      void 
 23836 ;; Registers used:
 23837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23838 ;; Tracked objects:
 23839 ;;		On entry : 0/0
 23840 ;;		On exit  : 0/0
 23841 ;;		Unchanged: 0/0
 23842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23847 ;;Total ram usage:        0 bytes
 23848 ;; Hardware stack levels used:    1
 23849 ;; Hardware stack levels required when called:    1
 23850 ;; This function calls:
 23851 ;;		_USBCtrlTrfTxService
 23852 ;; This function is called by:
 23853 ;;		_USBCtrlEPServiceComplete
 23854 ;; This function uses a non-reentrant model
 23855 ;;
 23856                           
 23857                           	psect	text141
 23858  0131D8                     __ptext141:
 23859                           	opt stack 0
 23860  0131D8                     _USBCtrlEPAllowDataStage:
 23861                           	opt stack 13
 23862                           
 23863                           ;usb_device.c: 1490: USBDeferINDataStagePackets = 0;
 23864                           
 23865                           ;incstack = 0
 23866  0131D8  6A46               	clrf	_USBDeferINDataStagePackets,c	;volatile
 23867                           
 23868                           ;usb_device.c: 1491: USBDeferOUTDataStagePackets = 0;
 23869  0131DA  6A47               	clrf	_USBDeferOUTDataStagePackets,c	;volatile
 23870                           
 23871                           ;usb_device.c: 1493: if(controlTransferState == 2)
 23872  0131DC  0E02               	movlw	2
 23873  0131DE  184D               	xorwf	_controlTransferState,w,c	;volatile
 23874  0131E0  E11F               	bnz	i2l9709
 23875                           
 23876                           ;usb_device.c: 1494: {
 23877                           ;usb_device.c: 1496: pBDTEntryEP0OutNext->CNT = 8;
 23878  0131E2  EE20 F001          	lfsr	2,1
 23879  0131E6  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23880  0131E8  26D9               	addwf	fsr2l,f,c
 23881  0131EA  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23882  0131EC  22DA               	addwfc	fsr2h,f,c
 23883  0131EE  0E08               	movlw	8
 23884  0131F0  6EDF               	movwf	indf2,c
 23885                           
 23886                           ;usb_device.c: 1497: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&CtrlTrfData));
 23887  0131F2  EE20 F002          	lfsr	2,2
 23888  0131F6  5040               	movf	_pBDTEntryEP0OutNext,w,c
 23889  0131F8  26D9               	addwf	fsr2l,f,c
 23890  0131FA  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 23891  0131FC  22DA               	addwfc	fsr2h,f,c
 23892  0131FE  0E38               	movlw	56
 23893  013200  6EDE               	movwf	postinc2,c
 23894  013202  0E04               	movlw	4
 23895  013204  6EDD               	movwf	postdec2,c
 23896                           
 23897                           ;usb_device.c: 1498: pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 23898  013206  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23899  01320A  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23900  01320E  0E48               	movlw	72
 23901  013210  6EDF               	movwf	indf2,c
 23902                           
 23903                           ;usb_device.c: 1499: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 23904  013212  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 23905  013216  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 23906  01321A  0E00               	movlw	0
 23907  01321C  8EDB               	bsf	plusw2,7,c
 23908                           
 23909                           ;usb_device.c: 1500: }
 23910  01321E  0C00               	retlw	0
 23911  013220                     i2l9709:
 23912                           
 23913                           ;usb_device.c: 1501: else
 23914                           ;usb_device.c: 1502: {
 23915                           ;usb_device.c: 1505: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 23916  013220  0100               	movlb	0	; () banked
 23917  013222  516D               	movf	(_inPipes+4)& (0+255),w,b	;volatile
 23918  013224  0104               	movlb	4	; () banked
 23919  013226  5D36               	subwf	54,w,b	;volatile
 23920  013228  0100               	movlb	0	; () banked
 23921  01322A  516E               	movf	(_inPipes+5)& (0+255),w,b	;volatile
 23922  01322C  0104               	movlb	4	; () banked
 23923  01322E  5937               	subwfb	55,w,b	;volatile
 23924  013230  E204               	bc	i2l9713
 23925                           
 23926                           ; BSR set to: 4
 23927                           ;usb_device.c: 1506: {
 23928                           ;usb_device.c: 1507: inPipes[0].wCount.Val = SetupPkt.wLength;
 23929  013232  C436 F06D          	movff	1078,_inPipes+4	;volatile
 23930  013236  C437 F06E          	movff	1079,_inPipes+5	;volatile
 23931  01323A                     i2l9713:
 23932                           
 23933                           ; BSR set to: 4
 23934                           ;usb_device.c: 1508: }
 23935                           ;usb_device.c: 1509: USBCtrlTrfTxService();
 23936  01323A  EC91  F092         	call	_USBCtrlTrfTxService	;wreg free
 23937                           
 23938                           ;usb_device.c: 1514: pBDTEntryIn[0]->ADR = ((uint16_t)(&CtrlTrfData));
 23939  01323E  0100               	movlb	0	; () banked
 23940  013240  EE20 F002          	lfsr	2,2
 23941  013244  516F               	movf	_pBDTEntryIn& (0+255),w,b
 23942  013246  26D9               	addwf	fsr2l,f,c
 23943  013248  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 23944  01324A  22DA               	addwfc	fsr2h,f,c
 23945  01324C  0E38               	movlw	56
 23946  01324E  6EDE               	movwf	postinc2,c
 23947  013250  0E04               	movlw	4
 23948  013252  6EDD               	movwf	postdec2,c
 23949                           
 23950                           ; BSR set to: 0
 23951                           ;usb_device.c: 1515: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 23952  013254  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23953  013258  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23954  01325C  0E48               	movlw	72
 23955  01325E  6EDF               	movwf	indf2,c
 23956                           
 23957                           ; BSR set to: 0
 23958                           ;usb_device.c: 1516: pBDTEntryIn[0]->STAT.Val |= 0x80;
 23959  013260  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 23960  013264  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 23961  013268  0E00               	movlw	0
 23962  01326A  8EDB               	bsf	plusw2,7,c
 23963  01326C  0C00               	retlw	0
 23964  01326E                     __end_of_USBCtrlEPAllowDataStage:
 23965                           	opt stack 0
 23966                           tosu	equ	0xFFF
 23967                           tosh	equ	0xFFE
 23968                           tosl	equ	0xFFD
 23969                           pclatu	equ	0xFFB
 23970                           pclath	equ	0xFFA
 23971                           tblptru	equ	0xFF8
 23972                           tblptrh	equ	0xFF7
 23973                           tblptrl	equ	0xFF6
 23974                           tablat	equ	0xFF5
 23975                           prodh	equ	0xFF4
 23976                           prodl	equ	0xFF3
 23977                           intcon	equ	0xFF2
 23978                           indf0	equ	0xFEF
 23979                           postinc0	equ	0xFEE
 23980                           fsr0h	equ	0xFEA
 23981                           fsr0l	equ	0xFE9
 23982                           wreg	equ	0xFE8
 23983                           indf1	equ	0xFE7
 23984                           postdec1	equ	0xFE5
 23985                           fsr1h	equ	0xFE2
 23986                           fsr1l	equ	0xFE1
 23987                           indf2	equ	0xFDF
 23988                           postinc2	equ	0xFDE
 23989                           postdec2	equ	0xFDD
 23990                           plusw2	equ	0xFDB
 23991                           fsr2h	equ	0xFDA
 23992                           fsr2l	equ	0xFD9
 23993                           status	equ	0xFD8
 23994                           
 23995 ;; *************** function _USBCheckStdRequest *****************
 23996 ;; Defined at:
 23997 ;;		line 2686 in file "Library/USB/src/usb_device.c"
 23998 ;; Parameters:    Size  Location     Type
 23999 ;;		None
 24000 ;; Auto vars:     Size  Location     Type
 24001 ;;		None
 24002 ;; Return value:  Size  Location     Type
 24003 ;;                  1    wreg      void 
 24004 ;; Registers used:
 24005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24006 ;; Tracked objects:
 24007 ;;		On entry : 0/0
 24008 ;;		On exit  : 0/0
 24009 ;;		Unchanged: 0/0
 24010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24015 ;;Total ram usage:        0 bytes
 24016 ;; Hardware stack levels used:    1
 24017 ;; Hardware stack levels required when called:    8
 24018 ;; This function calls:
 24019 ;;		_USBStdFeatureReqHandler
 24020 ;;		_USBStdGetDscHandler
 24021 ;;		_USBStdGetStatusHandler
 24022 ;;		_USBStdSetCfgHandler
 24023 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 24024 ;; This function is called by:
 24025 ;;		_USBCtrlTrfSetupHandler
 24026 ;; This function uses a non-reentrant model
 24027 ;;
 24028                           
 24029                           	psect	text142
 24030  012B46                     __ptext142:
 24031                           	opt stack 0
 24032  012B46                     _USBCheckStdRequest:
 24033                           	opt stack 7
 24034                           
 24035                           ;usb_device.c: 2688: if(SetupPkt.RequestType != (0x00>>5)) return;
 24036                           
 24037                           ;incstack = 0
 24038  012B46  0104               	movlb	4	; () banked
 24039  012B48  3930               	swapf	48,w,b	;volatile
 24040  012B4A  32E8               	rrcf	wreg,f,c
 24041  012B4C  0B03               	andlw	3
 24042  012B4E  E036               	bz	i2l10295
 24043                           
 24044                           ; BSR set to: 4
 24045  012B50  0012               	return	
 24046  012B52                     i2l352:
 24047                           
 24048                           ; BSR set to: 4
 24049                           ;usb_device.c: 2693: inPipes[0].info.bits.busy = 1;
 24050  012B52  0100               	movlb	0	; () banked
 24051  012B54  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24052                           
 24053                           ; BSR set to: 0
 24054                           ;usb_device.c: 2694: USBDeviceState = ADR_PENDING_STATE;
 24055  012B56  0E08               	movlw	8
 24056  012B58  6E49               	movwf	_USBDeviceState,c	;volatile
 24057                           
 24058                           ;usb_device.c: 2696: break;
 24059  012B5A  0C08               	retlw	8
 24060  012B5C                     i2l10269:
 24061                           
 24062                           ;usb_device.c: 2704: inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfiguration;
 24063  012B5C  0E5B               	movlw	low _USBActiveConfiguration
 24064  012B5E  0100               	movlb	0	; () banked
 24065  012B60  6F69               	movwf	_inPipes& (0+255),b	;volatile
 24066  012B62  0E00               	movlw	high _USBActiveConfiguration
 24067  012B64  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 24068                           
 24069                           ; BSR set to: 0
 24070                           ;usb_device.c: 2705: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 24071  012B66  816C               	bsf	(_inPipes+3)& (0+255),0,b	;volatile
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;usb_device.c: 2706: inPipes[0].wCount.v[0] = 1;
 24075  012B68  0E01               	movlw	1
 24076  012B6A  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24077                           
 24078                           ; BSR set to: 0
 24079                           ;usb_device.c: 2707: inPipes[0].info.bits.busy = 1;
 24080  012B6C  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24081                           
 24082                           ;usb_device.c: 2708: break;
 24083  012B6E  0C01               	retlw	1
 24084  012B70                     i2l10281:
 24085                           
 24086                           ;usb_device.c: 2717: inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInterface[SetupPkt.bI
      +                          ntfID];
 24087  012B70  0104               	movlb	4	; () banked
 24088  012B72  5134               	movf	52,w,b	;volatile
 24089  012B74  0D01               	mullw	1
 24090  012B76  0E57               	movlw	low _USBAlternateInterface
 24091  012B78  24F3               	addwf	prodl,w,c
 24092  012B7A  0100               	movlb	0	; () banked
 24093  012B7C  6F69               	movwf	_inPipes& (0+255),b	;volatile
 24094  012B7E  0E00               	movlw	high _USBAlternateInterface
 24095  012B80  20F4               	addwfc	prodh,w,c
 24096  012B82  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 24097                           
 24098                           ; BSR set to: 0
 24099                           ;usb_device.c: 2718: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 24100  012B84  816C               	bsf	(_inPipes+3)& (0+255),0,b	;volatile
 24101                           
 24102                           ; BSR set to: 0
 24103                           ;usb_device.c: 2719: inPipes[0].wCount.v[0] = 1;
 24104  012B86  0E01               	movlw	1
 24105  012B88  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24106                           
 24107                           ; BSR set to: 0
 24108                           ;usb_device.c: 2720: inPipes[0].info.bits.busy = 1;
 24109  012B8A  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24110                           
 24111                           ;usb_device.c: 2721: break;
 24112  012B8C  0C01               	retlw	1
 24113  012B8E                     i2l361:
 24114                           
 24115                           ; BSR set to: 4
 24116                           ;usb_device.c: 2723: inPipes[0].info.bits.busy = 1;
 24117  012B8E  0100               	movlb	0	; () banked
 24118  012B90  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24119                           
 24120                           ; BSR set to: 0
 24121                           ;usb_device.c: 2724: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
 24122  012B92  0104               	movlb	4	; () banked
 24123  012B94  5134               	movf	52,w,b	;volatile
 24124  012B96  0D01               	mullw	1
 24125  012B98  0E57               	movlw	low _USBAlternateInterface
 24126  012B9A  24F3               	addwf	prodl,w,c
 24127  012B9C  6ED9               	movwf	fsr2l,c
 24128  012B9E  0E00               	movlw	high _USBAlternateInterface
 24129  012BA0  20F4               	addwfc	prodh,w,c
 24130  012BA2  6EDA               	movwf	fsr2h,c
 24131  012BA4  C432 FFDF          	movff	1074,indf2	;volatile
 24132                           
 24133                           ;usb_device.c: 2725: break;
 24134  012BA8  0012               	return	
 24135  012BAA                     i2l10291:
 24136                           
 24137                           ; BSR set to: 4
 24138                           ;usb_device.c: 2727: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
 24139  012BAA  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 24140  012BAC  0E02               	movlw	2
 24141  012BAE  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 24142  012BB0  6A1C               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 24143  012BB2  6A1D               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 24144  012BB4  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 24145  012BB6  6A1E               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 24146  012BB8  EF75  F0A0         	goto	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 24147  012BBC                     i2l10295:
 24148  012BBC  0104               	movlb	4	; () banked
 24149  012BBE  5131               	movf	49,w,b	;volatile
 24150                           
 24151                           ; Switch size 1, requested type "space"
 24152                           ; Number of cases is 11, Range of values is 0 to 12
 24153                           ; switch strategies available:
 24154                           ; Name         Instructions Cycles
 24155                           ; simple_byte           34    18 (average)
 24156                           ;	Chosen strategy is simple_byte
 24157  012BC0  E102 EFB4  F097    	bz	_USBStdGetStatusHandler
 24158  012BC6  0A01               	xorlw	1	; case 1
 24159  012BC8  E102 EFE1  F082    	bz	_USBStdFeatureReqHandler
 24160  012BCE  0A02               	xorlw	2	; case 3
 24161  012BD0  E102 EFE1  F082    	bz	_USBStdFeatureReqHandler
 24162  012BD6  0A06               	xorlw	6	; case 5
 24163  012BD8  E0BC               	bz	i2l352
 24164  012BDA  0A03               	xorlw	3	; case 6
 24165  012BDC  E102 EFB5  F08B    	bz	_USBStdGetDscHandler
 24166  012BE2  0A01               	xorlw	1	; case 7
 24167  012BE4  E0E2               	bz	i2l10291
 24168  012BE6  0A0F               	xorlw	15	; case 8
 24169  012BE8  E0B9               	bz	i2l10269
 24170  012BEA  0A01               	xorlw	1	; case 9
 24171  012BEC  E102 EF27  F094    	bz	_USBStdSetCfgHandler
 24172  012BF2  0A03               	xorlw	3	; case 10
 24173  012BF4  E0BD               	bz	i2l10281
 24174  012BF6  0A01               	xorlw	1	; case 11
 24175  012BF8  E0CA               	bz	i2l361
 24176  012BFA  0A07               	xorlw	7	; case 12
 24177  012BFC  0012               	return	
 24178  012BFE                     __end_of_USBCheckStdRequest:
 24179                           	opt stack 0
 24180                           tosu	equ	0xFFF
 24181                           tosh	equ	0xFFE
 24182                           tosl	equ	0xFFD
 24183                           pclatu	equ	0xFFB
 24184                           pclath	equ	0xFFA
 24185                           tblptru	equ	0xFF8
 24186                           tblptrh	equ	0xFF7
 24187                           tblptrl	equ	0xFF6
 24188                           tablat	equ	0xFF5
 24189                           prodh	equ	0xFF4
 24190                           prodl	equ	0xFF3
 24191                           intcon	equ	0xFF2
 24192                           indf0	equ	0xFEF
 24193                           postinc0	equ	0xFEE
 24194                           fsr0h	equ	0xFEA
 24195                           fsr0l	equ	0xFE9
 24196                           wreg	equ	0xFE8
 24197                           indf1	equ	0xFE7
 24198                           postdec1	equ	0xFE5
 24199                           fsr1h	equ	0xFE2
 24200                           fsr1l	equ	0xFE1
 24201                           indf2	equ	0xFDF
 24202                           postinc2	equ	0xFDE
 24203                           postdec2	equ	0xFDD
 24204                           plusw2	equ	0xFDB
 24205                           fsr2h	equ	0xFDA
 24206                           fsr2l	equ	0xFD9
 24207                           status	equ	0xFD8
 24208                           
 24209 ;; *************** function _USBStdSetCfgHandler *****************
 24210 ;; Defined at:
 24211 ;;		line 1968 in file "Library/USB/src/usb_device.c"
 24212 ;; Parameters:    Size  Location     Type
 24213 ;;		None
 24214 ;; Auto vars:     Size  Location     Type
 24215 ;;  i               1   33[COMRAM] unsigned char 
 24216 ;; Return value:  Size  Location     Type
 24217 ;;                  1    wreg      void 
 24218 ;; Registers used:
 24219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24220 ;; Tracked objects:
 24221 ;;		On entry : 0/0
 24222 ;;		On exit  : 0/0
 24223 ;;		Unchanged: 0/0
 24224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24228 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24229 ;;Total ram usage:        1 bytes
 24230 ;; Hardware stack levels used:    1
 24231 ;; Hardware stack levels required when called:    7
 24232 ;; This function calls:
 24233 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 24234 ;;		i2_memset
 24235 ;; This function is called by:
 24236 ;;		_USBCheckStdRequest
 24237 ;; This function uses a non-reentrant model
 24238 ;;
 24239                           
 24240                           	psect	text143
 24241  01284E                     __ptext143:
 24242                           	opt stack 0
 24243  01284E                     _USBStdSetCfgHandler:
 24244                           	opt stack 7
 24245                           
 24246                           ;usb_device.c: 1970: uint8_t i;
 24247                           ;usb_device.c: 1973: inPipes[0].info.bits.busy = 1;
 24248                           
 24249                           ;incstack = 0
 24250  01284E  0100               	movlb	0	; () banked
 24251  012850  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24252                           
 24253                           ; BSR set to: 0
 24254                           ;usb_device.c: 1976: memset((void*)&UEP1,0x00,(2));;
 24255  012852  0E4D               	movlw	77
 24256  012854  6E01               	movwf	i2memset@p1,c
 24257  012856  0E0F               	movlw	15
 24258  012858  6E02               	movwf	i2memset@p1+1,c
 24259  01285A  6A04               	clrf	i2memset@c+1,c
 24260  01285C  6A03               	clrf	i2memset@c,c
 24261  01285E  6A06               	clrf	i2memset@n+1,c
 24262  012860  0E02               	movlw	2
 24263  012862  6E05               	movwf	i2memset@n,c
 24264  012864  EC9F  F0A6         	call	i2_memset	;wreg free
 24265                           
 24266                           ;usb_device.c: 1979: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 24267  012868  6A01               	clrf	i2memset@p1,c
 24268  01286A  0E04               	movlw	4
 24269  01286C  6E02               	movwf	i2memset@p1+1,c
 24270  01286E  6A04               	clrf	i2memset@c+1,c
 24271  012870  6A03               	clrf	i2memset@c,c
 24272  012872  6A06               	clrf	i2memset@n+1,c
 24273  012874  0E30               	movlw	48
 24274  012876  6E05               	movwf	i2memset@n,c
 24275  012878  EC9F  F0A6         	call	i2_memset	;wreg free
 24276                           
 24277                           ;usb_device.c: 1982: UCONbits.PPBRST = 1;
 24278  01287C  8C65               	bsf	3941,6,c	;volatile
 24279                           
 24280                           ;usb_device.c: 1987: for(i = 0; i < (uint8_t)(2+1u); i++)
 24281  01287E  6A22               	clrf	USBStdSetCfgHandler@i,c
 24282  012880                     i2l9729:
 24283  012880  0E02               	movlw	2
 24284  012882  6422               	cpfsgt	USBStdSetCfgHandler@i,c
 24285  012884  D001               	goto	i2l9733
 24286  012886  D014               	goto	i2l9739
 24287  012888                     i2l9733:
 24288                           
 24289                           ;usb_device.c: 1988: {
 24290                           ;usb_device.c: 1989: ep_data_in[i].Val = 0u;
 24291  012888  5022               	movf	USBStdSetCfgHandler@i,w,c
 24292  01288A  0D01               	mullw	1
 24293  01288C  0E7B               	movlw	low _ep_data_in
 24294  01288E  24F3               	addwf	prodl,w,c
 24295  012890  6ED9               	movwf	fsr2l,c
 24296  012892  0E00               	movlw	high _ep_data_in
 24297  012894  20F4               	addwfc	prodh,w,c
 24298  012896  6EDA               	movwf	fsr2h,c
 24299  012898  6ADF               	clrf	indf2,c
 24300                           
 24301                           ;usb_device.c: 1990: ep_data_out[i].Val = 0u;
 24302  01289A  5022               	movf	USBStdSetCfgHandler@i,w,c
 24303  01289C  0D01               	mullw	1
 24304  01289E  0E7E               	movlw	low _ep_data_out
 24305  0128A0  24F3               	addwf	prodl,w,c
 24306  0128A2  6ED9               	movwf	fsr2l,c
 24307  0128A4  0E00               	movlw	high _ep_data_out
 24308  0128A6  20F4               	addwfc	prodh,w,c
 24309  0128A8  6EDA               	movwf	fsr2h,c
 24310  0128AA  6ADF               	clrf	indf2,c
 24311  0128AC  2A22               	incf	USBStdSetCfgHandler@i,f,c
 24312  0128AE  D7E8               	goto	i2l9729
 24313  0128B0                     i2l9739:
 24314                           
 24315                           ;usb_device.c: 1991: }
 24316                           ;usb_device.c: 1994: memset((void*)&USBAlternateInterface,0x00,2);
 24317  0128B0  0E57               	movlw	low _USBAlternateInterface
 24318  0128B2  6E01               	movwf	i2memset@p1,c
 24319  0128B4  0E00               	movlw	high _USBAlternateInterface
 24320  0128B6  6E02               	movwf	i2memset@p1+1,c
 24321  0128B8  6A04               	clrf	i2memset@c+1,c
 24322  0128BA  6A03               	clrf	i2memset@c,c
 24323  0128BC  6A06               	clrf	i2memset@n+1,c
 24324  0128BE  0E02               	movlw	2
 24325  0128C0  6E05               	movwf	i2memset@n,c
 24326  0128C2  EC9F  F0A6         	call	i2_memset	;wreg free
 24327                           
 24328                           ;usb_device.c: 1997: UCONbits.PPBRST = 0;
 24329  0128C6  9C65               	bcf	3941,6,c	;volatile
 24330                           
 24331                           ;usb_device.c: 1999: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 24332  0128C8  0E08               	movlw	8
 24333  0128CA  0100               	movlb	0	; () banked
 24334  0128CC  6F6F               	movwf	_pBDTEntryIn& (0+255),b
 24335  0128CE  0E04               	movlw	4
 24336  0128D0  6F70               	movwf	(_pBDTEntryIn+1)& (0+255),b
 24337                           
 24338                           ; BSR set to: 0
 24339                           ;usb_device.c: 2002: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 24340  0128D2  0E00               	movlw	0
 24341  0128D4  6E3E               	movwf	_pBDTEntryEP0OutCurrent,c
 24342  0128D6  0E04               	movlw	4
 24343  0128D8  6E3F               	movwf	_pBDTEntryEP0OutCurrent+1,c
 24344                           
 24345                           ; BSR set to: 0
 24346                           ;usb_device.c: 2003: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 24347  0128DA  C03E  F040         	movff	_pBDTEntryEP0OutCurrent,_pBDTEntryEP0OutNext
 24348  0128DE  C03F  F041         	movff	_pBDTEntryEP0OutCurrent+1,_pBDTEntryEP0OutNext+1
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;usb_device.c: 2006: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 24352  0128E2  C432 F05B          	movff	1074,_USBActiveConfiguration	;volatile
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;usb_device.c: 2009: if(USBActiveConfiguration == 0)
 24356  0128E6  505B               	movf	_USBActiveConfiguration,w,c	;volatile
 24357  0128E8  E103               	bnz	i2l9755
 24358                           
 24359                           ; BSR set to: 0
 24360                           ;usb_device.c: 2010: {
 24361                           ;usb_device.c: 2012: USBDeviceState = ADDRESS_STATE;
 24362  0128EA  0E10               	movlw	16
 24363  0128EC  6E49               	movwf	_USBDeviceState,c	;volatile
 24364                           
 24365                           ;usb_device.c: 2013: }
 24366  0128EE  0C10               	retlw	16
 24367  0128F0                     i2l9755:
 24368                           
 24369                           ; BSR set to: 0
 24370                           ;usb_device.c: 2014: else
 24371                           ;usb_device.c: 2015: {
 24372                           ;usb_device.c: 2017: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 24373  0128F0  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 24374  0128F2  0E01               	movlw	1
 24375  0128F4  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 24376  0128F6  0E5B               	movlw	low _USBActiveConfiguration
 24377  0128F8  6E1C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 24378  0128FA  0E00               	movlw	high _USBActiveConfiguration
 24379  0128FC  6E1D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 24380  0128FE  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 24381  012900  0E01               	movlw	1
 24382  012902  6E1E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 24383  012904  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 24384                           
 24385                           ;usb_device.c: 2022: USBDeviceState = CONFIGURED_STATE;
 24386  012908  0E20               	movlw	32
 24387  01290A  6E49               	movwf	_USBDeviceState,c	;volatile
 24388  01290C  0C20               	retlw	32
 24389  01290E                     __end_of_USBStdSetCfgHandler:
 24390                           	opt stack 0
 24391                           tosu	equ	0xFFF
 24392                           tosh	equ	0xFFE
 24393                           tosl	equ	0xFFD
 24394                           pclatu	equ	0xFFB
 24395                           pclath	equ	0xFFA
 24396                           tblptru	equ	0xFF8
 24397                           tblptrh	equ	0xFF7
 24398                           tblptrl	equ	0xFF6
 24399                           tablat	equ	0xFF5
 24400                           prodh	equ	0xFF4
 24401                           prodl	equ	0xFF3
 24402                           intcon	equ	0xFF2
 24403                           indf0	equ	0xFEF
 24404                           postinc0	equ	0xFEE
 24405                           fsr0h	equ	0xFEA
 24406                           fsr0l	equ	0xFE9
 24407                           wreg	equ	0xFE8
 24408                           indf1	equ	0xFE7
 24409                           postdec1	equ	0xFE5
 24410                           fsr1h	equ	0xFE2
 24411                           fsr1l	equ	0xFE1
 24412                           indf2	equ	0xFDF
 24413                           postinc2	equ	0xFDE
 24414                           postdec2	equ	0xFDD
 24415                           plusw2	equ	0xFDB
 24416                           fsr2h	equ	0xFDA
 24417                           fsr2l	equ	0xFD9
 24418                           status	equ	0xFD8
 24419                           
 24420 ;; *************** function i2_memset *****************
 24421 ;; Defined at:
 24422 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 24423 ;; Parameters:    Size  Location     Type
 24424 ;;  p1              2    0[COMRAM] PTR void 
 24425 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 24426 ;;  c               2    2[COMRAM] int 
 24427 ;;  n               2    4[COMRAM] unsigned int 
 24428 ;; Auto vars:     Size  Location     Type
 24429 ;;  memset          2    6[COMRAM] PTR unsigned char 
 24430 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 24431 ;; Return value:  Size  Location     Type
 24432 ;;                  2    0[COMRAM] PTR void 
 24433 ;; Registers used:
 24434 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24435 ;; Tracked objects:
 24436 ;;		On entry : 0/0
 24437 ;;		On exit  : 0/0
 24438 ;;		Unchanged: 0/0
 24439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24440 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24443 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24444 ;;Total ram usage:        8 bytes
 24445 ;; Hardware stack levels used:    1
 24446 ;; This function calls:
 24447 ;;		Nothing
 24448 ;; This function is called by:
 24449 ;;		_USBStdSetCfgHandler
 24450 ;;		i2_USBDeviceInit
 24451 ;; This function uses a non-reentrant model
 24452 ;;
 24453                           
 24454                           	psect	text144
 24455  014D3E                     __ptext144:
 24456                           	opt stack 0
 24457  014D3E                     i2_memset:
 24458                           	opt stack 16
 24459                           
 24460                           ;incstack = 0
 24461  014D3E  C001  F007         	movff	i2memset@p1,i2memset@p
 24462  014D42  C002  F008         	movff	i2memset@p1+1,i2memset@p+1
 24463  014D46  D008               	goto	i2l9663
 24464  014D48                     i2l9659:
 24465  014D48  C007  FFD9         	movff	i2memset@p,fsr2l
 24466  014D4C  C008  FFDA         	movff	i2memset@p+1,fsr2h
 24467  014D50  C003  FFDF         	movff	i2memset@c,indf2
 24468  014D54  4A07               	infsnz	i2memset@p,f,c
 24469  014D56  2A08               	incf	i2memset@p+1,f,c
 24470  014D58                     i2l9663:
 24471  014D58  0605               	decf	i2memset@n,f,c
 24472  014D5A  A0D8               	btfss	status,0,c
 24473  014D5C  0606               	decf	i2memset@n+1,f,c
 24474  014D5E  2805               	incf	i2memset@n,w,c
 24475  014D60  E1F3               	bnz	i2l9659
 24476  014D62  2806               	incf	i2memset@n+1,w,c
 24477  014D64  E1F1               	bnz	i2l9659
 24478  014D66  0012               	return	
 24479  014D68                     __end_ofi2_memset:
 24480                           	opt stack 0
 24481                           tosu	equ	0xFFF
 24482                           tosh	equ	0xFFE
 24483                           tosl	equ	0xFFD
 24484                           pclatu	equ	0xFFB
 24485                           pclath	equ	0xFFA
 24486                           tblptru	equ	0xFF8
 24487                           tblptrh	equ	0xFF7
 24488                           tblptrl	equ	0xFF6
 24489                           tablat	equ	0xFF5
 24490                           prodh	equ	0xFF4
 24491                           prodl	equ	0xFF3
 24492                           intcon	equ	0xFF2
 24493                           indf0	equ	0xFEF
 24494                           postinc0	equ	0xFEE
 24495                           fsr0h	equ	0xFEA
 24496                           fsr0l	equ	0xFE9
 24497                           wreg	equ	0xFE8
 24498                           indf1	equ	0xFE7
 24499                           postdec1	equ	0xFE5
 24500                           fsr1h	equ	0xFE2
 24501                           fsr1l	equ	0xFE1
 24502                           indf2	equ	0xFDF
 24503                           postinc2	equ	0xFDE
 24504                           postdec2	equ	0xFDD
 24505                           plusw2	equ	0xFDB
 24506                           fsr2h	equ	0xFDA
 24507                           fsr2l	equ	0xFD9
 24508                           status	equ	0xFD8
 24509                           
 24510 ;; *************** function _USBStdGetStatusHandler *****************
 24511 ;; Defined at:
 24512 ;;		line 2129 in file "Library/USB/src/usb_device.c"
 24513 ;; Parameters:    Size  Location     Type
 24514 ;;		None
 24515 ;; Auto vars:     Size  Location     Type
 24516 ;;  p               2    1[COMRAM] PTR struct __BDT
 24517 ;;		 -> RAM(3903), NULL(0), BDT(48), 
 24518 ;; Return value:  Size  Location     Type
 24519 ;;                  1    wreg      void 
 24520 ;; Registers used:
 24521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24522 ;; Tracked objects:
 24523 ;;		On entry : 0/0
 24524 ;;		On exit  : 0/0
 24525 ;;		Unchanged: 0/0
 24526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24530 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24531 ;;Total ram usage:        3 bytes
 24532 ;; Hardware stack levels used:    1
 24533 ;; This function calls:
 24534 ;;		Nothing
 24535 ;; This function is called by:
 24536 ;;		_USBCheckStdRequest
 24537 ;; This function uses a non-reentrant model
 24538 ;;
 24539                           
 24540                           	psect	text145
 24541  012F68                     __ptext145:
 24542                           	opt stack 0
 24543  012F68                     _USBStdGetStatusHandler:
 24544                           	opt stack 14
 24545                           
 24546                           ;usb_device.c: 2131: CtrlTrfData[0] = 0;
 24547                           
 24548                           ;incstack = 0
 24549  012F68  0104               	movlb	4	; () banked
 24550  012F6A  6B38               	clrf	56,b	;volatile
 24551                           
 24552                           ;usb_device.c: 2132: CtrlTrfData[1] = 0;
 24553  012F6C  6B39               	clrf	57,b	;volatile
 24554                           
 24555                           ;usb_device.c: 2134: switch(SetupPkt.Recipient)
 24556  012F6E  D039               	goto	i2l9811
 24557  012F70                     i2l290:
 24558                           
 24559                           ; BSR set to: 4
 24560                           ;usb_device.c: 2137: inPipes[0].info.bits.busy = 1;
 24561  012F70  0100               	movlb	0	; () banked
 24562  012F72  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24563                           
 24564                           ;usb_device.c: 2145: }
 24565                           ;usb_device.c: 2147: if(RemoteWakeup == 1)
 24566                           
 24567                           ; BSR set to: 4
 24568                           
 24569                           ; BSR set to: 0
 24570                           ;usb_device.c: 2143: {
 24571                           ;usb_device.c: 2144: CtrlTrfData[0]|=0x01;
 24572                           
 24573                           ;usb_device.c: 2142: if(0 == 1)
 24574  012F74  0445               	decf	_RemoteWakeup,w,c	;volatile
 24575  012F76  E13D               	bnz	i2l293
 24576                           
 24577                           ;usb_device.c: 2148: {
 24578                           ;usb_device.c: 2149: CtrlTrfData[0]|=0x02;
 24579  012F78  0104               	movlb	4	; () banked
 24580  012F7A  8338               	bsf	56,1,b	;volatile
 24581                           
 24582                           ; BSR set to: 4
 24583                           ;usb_device.c: 2150: }
 24584                           ;usb_device.c: 2151: break;
 24585  012F7C  D03A               	goto	i2l293
 24586  012F7E                     i2l294:
 24587                           
 24588                           ; BSR set to: 4
 24589                           ;usb_device.c: 2153: inPipes[0].info.bits.busy = 1;
 24590  012F7E  0100               	movlb	0	; () banked
 24591  012F80  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24592                           
 24593                           ;usb_device.c: 2154: break;
 24594  012F82  D037               	goto	i2l293
 24595  012F84                     i2l295:
 24596                           
 24597                           ; BSR set to: 4
 24598                           ;usb_device.c: 2156: inPipes[0].info.bits.busy = 1;
 24599  012F84  0100               	movlb	0	; () banked
 24600  012F86  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 24601                           
 24602                           ;usb_device.c: 2160: {
 24603                           ;usb_device.c: 2161: BDT_ENTRY *p;
 24604                           ;usb_device.c: 2163: if(SetupPkt.EPDir == 0)
 24605  012F88  0104               	movlb	4	; () banked
 24606  012F8A  BF34               	btfsc	52,7,b	;volatile
 24607  012F8C  D00A               	goto	i2l9801
 24608                           
 24609                           ; BSR set to: 4
 24610                           ;usb_device.c: 2164: {
 24611                           ;usb_device.c: 2165: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 24612  012F8E  5134               	movf	52,w,b	;volatile
 24613  012F90  0B0F               	andlw	15
 24614  012F92  6E01               	movwf	??_USBStdGetStatusHandler& (0+255),c
 24615  012F94  5001               	movf	??_USBStdGetStatusHandler,w,c
 24616  012F96  0D02               	mullw	2
 24617  012F98  0E75               	movlw	low _pBDTEntryOut
 24618  012F9A  24F3               	addwf	prodl,w,c
 24619  012F9C  6ED9               	movwf	fsr2l,c
 24620  012F9E  0E00               	movlw	high _pBDTEntryOut
 24621  012FA0  D00A               	goto	L13
 24622  012FA2                     i2l9801:
 24623                           
 24624                           ; BSR set to: 4
 24625                           ;usb_device.c: 2167: else
 24626                           ;usb_device.c: 2168: {
 24627                           ;usb_device.c: 2169: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 24628  012FA2  0104               	movlb	4	; () banked
 24629  012FA4  5134               	movf	52,w,b	;volatile
 24630  012FA6  0B0F               	andlw	15
 24631  012FA8  6E01               	movwf	??_USBStdGetStatusHandler& (0+255),c
 24632  012FAA  5001               	movf	??_USBStdGetStatusHandler,w,c
 24633  012FAC  0D02               	mullw	2
 24634  012FAE  0E6F               	movlw	low _pBDTEntryIn
 24635  012FB0  24F3               	addwf	prodl,w,c
 24636  012FB2  6ED9               	movwf	fsr2l,c
 24637  012FB4  0E00               	movlw	high _pBDTEntryIn
 24638  012FB6                     L13:
 24639  012FB6  20F4               	addwfc	prodh,w,c
 24640  012FB8  6EDA               	movwf	fsr2h,c
 24641  012FBA  CFDE F002          	movff	postinc2,USBStdGetStatusHandler@p
 24642  012FBE  CFDD F003          	movff	postdec2,USBStdGetStatusHandler@p+1
 24643                           
 24644                           ; BSR set to: 4
 24645                           ;usb_device.c: 2170: }
 24646                           ;usb_device.c: 2172: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 24647                           
 24648                           ; BSR set to: 4
 24649  012FC2  C002  FFD9         	movff	USBStdGetStatusHandler@p,fsr2l
 24650  012FC6  C003  FFDA         	movff	USBStdGetStatusHandler@p+1,fsr2h
 24651  012FCA  AEDF               	btfss	indf2,7,c
 24652  012FCC  D012               	goto	i2l293
 24653                           
 24654                           ; BSR set to: 4
 24655  012FCE  C002  FFD9         	movff	USBStdGetStatusHandler@p,fsr2l
 24656  012FD2  C003  FFDA         	movff	USBStdGetStatusHandler@p+1,fsr2h
 24657  012FD6  A4DF               	btfss	indf2,2,c
 24658  012FD8  D00C               	goto	i2l293
 24659                           
 24660                           ; BSR set to: 4
 24661                           ;usb_device.c: 2173: CtrlTrfData[0]=0x01;
 24662  012FDA  0E01               	movlw	1
 24663  012FDC  0104               	movlb	4	; () banked
 24664  012FDE  6F38               	movwf	56,b	;volatile
 24665                           
 24666                           ; BSR set to: 4
 24667                           ;usb_device.c: 2175: }
 24668                           ;usb_device.c: 2176: }
 24669                           
 24670                           ; BSR set to: 4
 24671                           ;usb_device.c: 2174: break;
 24672  012FE0  D008               	goto	i2l293
 24673  012FE2                     i2l9811:
 24674                           
 24675                           ; BSR set to: 4
 24676  012FE2  0104               	movlb	4	; () banked
 24677  012FE4  5130               	movf	48,w,b	;volatile
 24678  012FE6  0B1F               	andlw	31
 24679                           
 24680                           ; Switch size 1, requested type "space"
 24681                           ; Number of cases is 3, Range of values is 0 to 2
 24682                           ; switch strategies available:
 24683                           ; Name         Instructions Cycles
 24684                           ; simple_byte           10     6 (average)
 24685                           ;	Chosen strategy is simple_byte
 24686  012FE8  E0C3               	bz	i2l290
 24687  012FEA  0A01               	xorlw	1	; case 1
 24688  012FEC  E0C8               	bz	i2l294
 24689  012FEE  0A03               	xorlw	3	; case 2
 24690  012FF0  E0C9               	bz	i2l295
 24691  012FF2                     i2l293:
 24692                           
 24693                           ;usb_device.c: 2178: if(inPipes[0].info.bits.busy == 1)
 24694  012FF2  0100               	movlb	0	; () banked
 24695  012FF4  AF6C               	btfss	(_inPipes+3)& (0+255),7,b	;volatile
 24696  012FF6  0012               	return	
 24697                           
 24698                           ; BSR set to: 0
 24699                           ;usb_device.c: 2179: {
 24700                           ;usb_device.c: 2180: inPipes[0].pSrc.bRam = (uint8_t*)&CtrlTrfData;
 24701  012FF8  0E38               	movlw	56
 24702  012FFA  6F69               	movwf	_inPipes& (0+255),b	;volatile
 24703  012FFC  0E04               	movlw	4
 24704  012FFE  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 24705                           
 24706                           ; BSR set to: 0
 24707                           ;usb_device.c: 2181: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 24708  013000  816C               	bsf	(_inPipes+3)& (0+255),0,b	;volatile
 24709                           
 24710                           ; BSR set to: 0
 24711                           ;usb_device.c: 2182: inPipes[0].wCount.v[0] = 2;
 24712  013002  0E02               	movlw	2
 24713  013004  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24714  013006  0C02               	retlw	2
 24715  013008                     __end_of_USBStdGetStatusHandler:
 24716                           	opt stack 0
 24717                           tosu	equ	0xFFF
 24718                           tosh	equ	0xFFE
 24719                           tosl	equ	0xFFD
 24720                           pclatu	equ	0xFFB
 24721                           pclath	equ	0xFFA
 24722                           tblptru	equ	0xFF8
 24723                           tblptrh	equ	0xFF7
 24724                           tblptrl	equ	0xFF6
 24725                           tablat	equ	0xFF5
 24726                           prodh	equ	0xFF4
 24727                           prodl	equ	0xFF3
 24728                           intcon	equ	0xFF2
 24729                           indf0	equ	0xFEF
 24730                           postinc0	equ	0xFEE
 24731                           fsr0h	equ	0xFEA
 24732                           fsr0l	equ	0xFE9
 24733                           wreg	equ	0xFE8
 24734                           indf1	equ	0xFE7
 24735                           postdec1	equ	0xFE5
 24736                           fsr1h	equ	0xFE2
 24737                           fsr1l	equ	0xFE1
 24738                           indf2	equ	0xFDF
 24739                           postinc2	equ	0xFDE
 24740                           postdec2	equ	0xFDD
 24741                           plusw2	equ	0xFDB
 24742                           fsr2h	equ	0xFDA
 24743                           fsr2l	equ	0xFD9
 24744                           status	equ	0xFD8
 24745                           
 24746 ;; *************** function _USBStdGetDscHandler *****************
 24747 ;; Defined at:
 24748 ;;		line 2043 in file "Library/USB/src/usb_device.c"
 24749 ;; Parameters:    Size  Location     Type
 24750 ;;		None
 24751 ;; Auto vars:     Size  Location     Type
 24752 ;;		None
 24753 ;; Return value:  Size  Location     Type
 24754 ;;                  1    wreg      void 
 24755 ;; Registers used:
 24756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 24757 ;; Tracked objects:
 24758 ;;		On entry : 0/0
 24759 ;;		On exit  : 0/0
 24760 ;;		Unchanged: 0/0
 24761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24764 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24765 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24766 ;;Total ram usage:        2 bytes
 24767 ;; Hardware stack levels used:    1
 24768 ;; This function calls:
 24769 ;;		Nothing
 24770 ;; This function is called by:
 24771 ;;		_USBCheckStdRequest
 24772 ;; This function uses a non-reentrant model
 24773 ;;
 24774                           
 24775                           	psect	text146
 24776  01176A                     __ptext146:
 24777                           	opt stack 0
 24778  01176A                     _USBStdGetDscHandler:
 24779                           	opt stack 14
 24780                           
 24781                           ;usb_device.c: 2045: if(SetupPkt.bmRequestType == 0x80)
 24782                           
 24783                           ; BSR set to: 0
 24784                           ;incstack = 0
 24785  01176A  0E80               	movlw	128
 24786  01176C  0104               	movlb	4	; () banked
 24787  01176E  1930               	xorwf	48,w,b	;volatile
 24788  011770  A4D8               	btfss	status,2,c
 24789  011772  0012               	return	
 24790                           
 24791                           ; BSR set to: 4
 24792                           ;usb_device.c: 2046: {
 24793                           ;usb_device.c: 2047: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 24794  011774  0EC0               	movlw	192
 24795  011776  0100               	movlb	0	; () banked
 24796  011778  6F6C               	movwf	(_inPipes+3)& (0+255),b	;volatile
 24797                           
 24798                           ;usb_device.c: 2049: switch(SetupPkt.bDescriptorType)
 24799  01177A  D085               	goto	i2l9789
 24800  01177C                     i2l9763:
 24801                           
 24802                           ;usb_device.c: 2055: inPipes[0].pSrc.bRom = (const uint8_t*)&device_dsc;
 24803  01177C  0E9D               	movlw	low _device_dsc
 24804  01177E  0100               	movlb	0	; () banked
 24805  011780  6F69               	movwf	_inPipes& (0+255),b	;volatile
 24806  011782  0EFF               	movlw	high _device_dsc
 24807  011784  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 24808                           
 24809                           ; BSR set to: 0
 24810                           ;usb_device.c: 2057: inPipes[0].wCount.Val = sizeof(device_dsc);
 24811  011786  6B6E               	clrf	(_inPipes+5)& (0+255),b	;volatile
 24812  011788  0E12               	movlw	18
 24813  01178A  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24814                           
 24815                           ;usb_device.c: 2058: break;
 24816  01178C  0C12               	retlw	18
 24817  01178E                     i2l9767:
 24818                           
 24819                           ;usb_device.c: 2063: if(SetupPkt.bDscIndex < 1)
 24820  01178E  0104               	movlb	4	; () banked
 24821  011790  5132               	movf	50,w,b	;volatile
 24822  011792  E145               	bnz	i2l9775
 24823                           
 24824                           ; BSR set to: 4
 24825                           ;usb_device.c: 2064: {
 24826                           ;usb_device.c: 2068: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 24827  011794  5132               	movf	50,w,b	;volatile
 24828  011796  0D02               	mullw	2
 24829  011798  0E0F               	movlw	low _USB_CD_Ptr
 24830  01179A  24F3               	addwf	prodl,w,c
 24831  01179C  6EF6               	movwf	tblptrl,c
 24832  01179E  0EFD               	movlw	high _USB_CD_Ptr
 24833  0117A0  20F4               	addwfc	prodh,w,c
 24834  0117A2  6EF7               	movwf	tblptrh,c
 24835  0117A4                     	if	1	;There are 3 active tblptr bytes
 24836  0117A4  6AF8               	clrf	tblptru,c
 24837  0117A6  0E00               	movlw	low (__mediumconst shr (0+16))
 24838  0117A8  22F8               	addwfc	tblptru,f,c
 24839  0117AA                     	endif
 24840  0117AA  0009               	tblrd		*+
 24841  0117AC  CFF5 F069          	movff	tablat,_inPipes	;volatile
 24842  0117B0  000A               	tblrd		*-
 24843  0117B2  CFF5 F06A          	movff	tablat,_inPipes+1	;volatile
 24844                           
 24845                           ; BSR set to: 4
 24846                           ;usb_device.c: 2074: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 24847  0117B6  0E02               	movlw	2
 24848  0117B8  0100               	movlb	0	; () banked
 24849  0117BA  2569               	addwf	_inPipes& (0+255),w,b	;volatile
 24850  0117BC  6E01               	movwf	??_USBStdGetDscHandler& (0+255),c
 24851  0117BE  0E00               	movlw	0
 24852  0117C0  216A               	addwfc	(_inPipes+1)& (0+255),w,b	;volatile
 24853  0117C2  6E02               	movwf	(??_USBStdGetDscHandler+1)& (0+255),c
 24854  0117C4  C001  FFF6         	movff	??_USBStdGetDscHandler,tblptrl
 24855  0117C8  C002  FFF7         	movff	??_USBStdGetDscHandler+1,tblptrh
 24856  0117CC  0E00               	movlw	low (__mediumconst shr (0+16))
 24857  0117CE  6EF8               	movwf	tblptru,c
 24858  0117D0  0E0F               	movlw	(high __ramtop+-1)
 24859  0117D2  64F7               	cpfsgt	tblptrh,c
 24860  0117D4  D003               	bra	i2u637_47
 24861  0117D6  0008               	tblrd		*
 24862  0117D8  50F5               	movf	tablat,w,c
 24863  0117DA  D005               	bra	i2u637_40
 24864  0117DC                     i2u637_47:
 24865  0117DC  CFF6 FFE9          	movff	tblptrl,fsr0l
 24866  0117E0  CFF7 FFEA          	movff	tblptrh,fsr0h
 24867  0117E4  50EF               	movf	indf0,w,c
 24868  0117E6                     i2u637_40:
 24869  0117E6  0100               	movlb	0	; () banked
 24870  0117E8  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24871                           
 24872                           ; BSR set to: 0
 24873                           ;usb_device.c: 2075: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 24874  0117EA  0E03               	movlw	3
 24875  0117EC  2569               	addwf	_inPipes& (0+255),w,b	;volatile
 24876  0117EE  6E01               	movwf	??_USBStdGetDscHandler& (0+255),c
 24877  0117F0  0E00               	movlw	0
 24878  0117F2  216A               	addwfc	(_inPipes+1)& (0+255),w,b	;volatile
 24879  0117F4  6E02               	movwf	(??_USBStdGetDscHandler+1)& (0+255),c
 24880  0117F6  C001  FFF6         	movff	??_USBStdGetDscHandler,tblptrl
 24881  0117FA  C002  FFF7         	movff	??_USBStdGetDscHandler+1,tblptrh
 24882  0117FE  0E00               	movlw	low (__mediumconst shr (0+16))
 24883  011800  6EF8               	movwf	tblptru,c
 24884  011802  0E0F               	movlw	(high __ramtop+-1)
 24885  011804  64F7               	cpfsgt	tblptrh,c
 24886  011806  D003               	bra	i2u638_47
 24887  011808  0008               	tblrd		*
 24888  01180A  50F5               	movf	tablat,w,c
 24889  01180C  D005               	bra	i2u638_40
 24890  01180E                     i2u638_47:
 24891  01180E  CFF6 FFE9          	movff	tblptrl,fsr0l
 24892  011812  CFF7 FFEA          	movff	tblptrh,fsr0h
 24893  011816  50EF               	movf	indf0,w,c
 24894  011818                     i2u638_40:
 24895  011818  0100               	movlb	0	; () banked
 24896  01181A  6F6E               	movwf	(_inPipes+5)& (0+255),b	;volatile
 24897                           
 24898                           ;usb_device.c: 2076: }
 24899  01181C  0012               	return	
 24900  01181E                     i2l9775:
 24901                           
 24902                           ;usb_device.c: 2077: else
 24903                           ;usb_device.c: 2078: {
 24904                           ;usb_device.c: 2079: inPipes[0].info.Val = 0;
 24905  01181E  0100               	movlb	0	; () banked
 24906  011820  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
 24907                           
 24908                           ; BSR set to: 0
 24909                           ;usb_device.c: 2080: }
 24910                           ;usb_device.c: 2081: break;
 24911  011822  0C00               	retlw	0
 24912  011824                     i2l9777:
 24913                           
 24914                           ;usb_device.c: 2086: if(SetupPkt.bDscIndex<3)
 24915  011824  0E03               	movlw	3
 24916  011826  0104               	movlb	4	; () banked
 24917  011828  6132               	cpfslt	50,b	;volatile
 24918  01182A  D027               	goto	i2l9783
 24919                           
 24920                           ; BSR set to: 4
 24921                           ;usb_device.c: 2087: {
 24922                           ;usb_device.c: 2089: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 24923  01182C  5132               	movf	50,w,b	;volatile
 24924  01182E  0D02               	mullw	2
 24925  011830  0E02               	movlw	low _USB_SD_Ptr
 24926  011832  24F3               	addwf	prodl,w,c
 24927  011834  6EF6               	movwf	tblptrl,c
 24928  011836  0EFD               	movlw	high _USB_SD_Ptr
 24929  011838  20F4               	addwfc	prodh,w,c
 24930  01183A  6EF7               	movwf	tblptrh,c
 24931  01183C                     	if	1	;There are 3 active tblptr bytes
 24932  01183C  6AF8               	clrf	tblptru,c
 24933  01183E  0E00               	movlw	low (__mediumconst shr (0+16))
 24934  011840  22F8               	addwfc	tblptru,f,c
 24935  011842                     	endif
 24936  011842  0009               	tblrd		*+
 24937  011844  CFF5 F069          	movff	tablat,_inPipes	;volatile
 24938  011848  000A               	tblrd		*-
 24939  01184A  CFF5 F06A          	movff	tablat,_inPipes+1	;volatile
 24940                           
 24941                           ; BSR set to: 4
 24942                           ;usb_device.c: 2091: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 24943  01184E  C069  FFF6         	movff	_inPipes,tblptrl	;volatile
 24944  011852  C06A  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 24945  011856  6EF8               	movwf	tblptru,c
 24946  011858  0E0F               	movlw	(high __ramtop+-1)
 24947  01185A  64F7               	cpfsgt	tblptrh,c
 24948  01185C  D003               	bra	i2u640_47
 24949  01185E  0008               	tblrd		*
 24950  011860  50F5               	movf	tablat,w,c
 24951  011862  D005               	bra	i2u640_40
 24952  011864                     i2u640_47:
 24953  011864  CFF6 FFE9          	movff	tblptrl,fsr0l
 24954  011868  CFF7 FFEA          	movff	tblptrh,fsr0h
 24955  01186C  50EF               	movf	indf0,w,c
 24956  01186E                     i2u640_40:
 24957  01186E  6E01               	movwf	??_USBStdGetDscHandler& (0+255),c
 24958  011870  5001               	movf	??_USBStdGetDscHandler,w,c
 24959  011872  0100               	movlb	0	; () banked
 24960  011874  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 24961  011876  6B6E               	clrf	(_inPipes+5)& (0+255),b	;volatile
 24962                           
 24963                           ;usb_device.c: 2092: }
 24964  011878  0012               	return	
 24965  01187A                     i2l9783:
 24966                           
 24967                           ;usb_device.c: 2102: else
 24968                           ;usb_device.c: 2103: {
 24969                           ;usb_device.c: 2104: inPipes[0].info.Val = 0;
 24970  01187A  0100               	movlb	0	; () banked
 24971  01187C  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
 24972                           
 24973                           ; BSR set to: 0
 24974                           ;usb_device.c: 2105: }
 24975                           ;usb_device.c: 2106: break;
 24976  01187E  0C00               	retlw	0
 24977  011880                     i2l9785:
 24978                           
 24979                           ;usb_device.c: 2108: inPipes[0].info.Val = 0;
 24980  011880  0100               	movlb	0	; () banked
 24981  011882  6B6C               	clrf	(_inPipes+3)& (0+255),b	;volatile
 24982                           
 24983                           ; BSR set to: 0
 24984                           ;usb_device.c: 2110: }
 24985                           
 24986                           ;usb_device.c: 2109: break;
 24987  011884  0C00               	retlw	0
 24988  011886                     i2l9789:
 24989                           
 24990                           ; BSR set to: 0
 24991  011886  0104               	movlb	4	; () banked
 24992  011888  5133               	movf	51,w,b	;volatile
 24993                           
 24994                           ; Switch size 1, requested type "space"
 24995                           ; Number of cases is 3, Range of values is 1 to 3
 24996                           ; switch strategies available:
 24997                           ; Name         Instructions Cycles
 24998                           ; simple_byte           10     6 (average)
 24999                           ;	Chosen strategy is simple_byte
 25000  01188A  0A01               	xorlw	1	; case 1
 25001  01188C  E101 D776          	bz	i2l9763
 25002  011890  0A03               	xorlw	3	; case 2
 25003  011892  E101 D77C          	bz	i2l9767
 25004  011896  0A01               	xorlw	1	; case 3
 25005  011898  E0C5               	bz	i2l9777
 25006  01189A  D7F2               	goto	i2l9785
 25007  01189C                     __end_of_USBStdGetDscHandler:
 25008                           	opt stack 0
 25009                           tosu	equ	0xFFF
 25010                           tosh	equ	0xFFE
 25011                           tosl	equ	0xFFD
 25012                           pclatu	equ	0xFFB
 25013                           pclath	equ	0xFFA
 25014                           tblptru	equ	0xFF8
 25015                           tblptrh	equ	0xFF7
 25016                           tblptrl	equ	0xFF6
 25017                           tablat	equ	0xFF5
 25018                           prodh	equ	0xFF4
 25019                           prodl	equ	0xFF3
 25020                           intcon	equ	0xFF2
 25021                           indf0	equ	0xFEF
 25022                           postinc0	equ	0xFEE
 25023                           fsr0h	equ	0xFEA
 25024                           fsr0l	equ	0xFE9
 25025                           wreg	equ	0xFE8
 25026                           indf1	equ	0xFE7
 25027                           postdec1	equ	0xFE5
 25028                           fsr1h	equ	0xFE2
 25029                           fsr1l	equ	0xFE1
 25030                           indf2	equ	0xFDF
 25031                           postinc2	equ	0xFDE
 25032                           postdec2	equ	0xFDD
 25033                           plusw2	equ	0xFDB
 25034                           fsr2h	equ	0xFDA
 25035                           fsr2l	equ	0xFD9
 25036                           status	equ	0xFD8
 25037                           
 25038 ;; *************** function _USBStdFeatureReqHandler *****************
 25039 ;; Defined at:
 25040 ;;		line 2754 in file "Library/USB/src/usb_device.c"
 25041 ;; Parameters:    Size  Location     Type
 25042 ;;		None
 25043 ;; Auto vars:     Size  Location     Type
 25044 ;;  p               2   37[COMRAM] PTR struct __BDT
 25045 ;;		 -> RAM(3903), NULL(0), BDT(48), 
 25046 ;;  pUEP            2   34[COMRAM] PTR unsigned char 
 25047 ;;		 -> UEP0(1), 
 25048 ;;  current_ep_d    1   36[COMRAM] struct .
 25049 ;; Return value:  Size  Location     Type
 25050 ;;                  1    wreg      void 
 25051 ;; Registers used:
 25052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25053 ;; Tracked objects:
 25054 ;;		On entry : 0/0
 25055 ;;		On exit  : 0/0
 25056 ;;		Unchanged: 0/0
 25057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25059 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25062 ;;Total ram usage:        6 bytes
 25063 ;; Hardware stack levels used:    1
 25064 ;; Hardware stack levels required when called:    7
 25065 ;; This function calls:
 25066 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 25067 ;; This function is called by:
 25068 ;;		_USBCheckStdRequest
 25069 ;; This function uses a non-reentrant model
 25070 ;;
 25071                           
 25072                           	psect	text147
 25073  0105C2                     __ptext147:
 25074                           	opt stack 0
 25075  0105C2                     _USBStdFeatureReqHandler:
 25076                           	opt stack 7
 25077                           
 25078                           ;usb_device.c: 2756: BDT_ENTRY *p;
 25079                           ;usb_device.c: 2757: EP_STATUS current_ep_data;
 25080                           ;usb_device.c: 2761: unsigned char* pUEP;
 25081                           ;usb_device.c: 2799: if((SetupPkt.bFeature == 1)&&
 25082                           ;usb_device.c: 2800: (SetupPkt.Recipient == (0x00)))
 25083                           
 25084                           ;incstack = 0
 25085  0105C2  0104               	movlb	4	; () banked
 25086  0105C4  0532               	decf	50,w,b	;volatile
 25087  0105C6  E10C               	bnz	i2l367
 25088                           
 25089                           ; BSR set to: 4
 25090  0105C8  5130               	movf	48,w,b	;volatile
 25091  0105CA  0B1F               	andlw	31
 25092  0105CC  E109               	bnz	i2l367
 25093                           
 25094                           ; BSR set to: 4
 25095                           ;usb_device.c: 2801: {
 25096                           ;usb_device.c: 2802: inPipes[0].info.bits.busy = 1;
 25097  0105CE  0100               	movlb	0	; () banked
 25098  0105D0  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 25099                           
 25100                           ; BSR set to: 0
 25101                           ;usb_device.c: 2803: if(SetupPkt.bRequest == 3)
 25102  0105D2  0E03               	movlw	3
 25103  0105D4  0104               	movlb	4	; () banked
 25104  0105D6  1931               	xorwf	49,w,b	;volatile
 25105                           
 25106                           ; BSR set to: 4
 25107                           ;usb_device.c: 2804: RemoteWakeup = 1;
 25108  0105D8  0E01               	movlw	1
 25109  0105DA  A4D8               	btfss	status,2,c
 25110                           
 25111                           ; BSR set to: 4
 25112                           ;usb_device.c: 2805: else
 25113                           ;usb_device.c: 2806: RemoteWakeup = 0;
 25114  0105DC  0E00               	movlw	0
 25115                           
 25116                           ; BSR set to: 4
 25117  0105DE  6E45               	movwf	_RemoteWakeup,c	;volatile
 25118  0105E0                     i2l367:
 25119                           
 25120                           ; BSR set to: 4
 25121                           ;usb_device.c: 2807: }
 25122                           ;usb_device.c: 2810: if((SetupPkt.bFeature == 0)&&
 25123                           ;usb_device.c: 2811: (SetupPkt.Recipient == (0x02))&&
 25124                           ;usb_device.c: 2812: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 2)&&
 25125                           ;usb_device.c: 2813: (USBDeviceState == CONFIGURED_STATE))
 25126  0105E0  0104               	movlb	4	; () banked
 25127  0105E2  5132               	movf	50,w,b	;volatile
 25128  0105E4  A4D8               	btfss	status,2,c
 25129  0105E6  0012               	return	
 25130                           
 25131                           ; BSR set to: 4
 25132  0105E8  5130               	movf	48,w,b	;volatile
 25133  0105EA  0B1F               	andlw	31
 25134  0105EC  0A02               	xorlw	2
 25135  0105EE  A4D8               	btfss	status,2,c
 25136  0105F0  0012               	return	
 25137                           
 25138                           ; BSR set to: 4
 25139  0105F2  5134               	movf	52,w,b	;volatile
 25140  0105F4  0B0F               	andlw	15
 25141  0105F6  B4D8               	btfsc	status,2,c
 25142  0105F8  0012               	return	
 25143                           
 25144                           ; BSR set to: 4
 25145  0105FA  5134               	movf	52,w,b	;volatile
 25146  0105FC  0B0F               	andlw	15
 25147  0105FE  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25148  010600  0E03               	movlw	3
 25149  010602  6022               	cpfslt	??_USBStdFeatureReqHandler,c
 25150  010604  0C03               	retlw	3
 25151                           
 25152                           ; BSR set to: 4
 25153  010606  0E20               	movlw	32
 25154  010608  1849               	xorwf	_USBDeviceState,w,c	;volatile
 25155  01060A  A4D8               	btfss	status,2,c
 25156  01060C  0012               	return	
 25157                           
 25158                           ; BSR set to: 4
 25159                           ;usb_device.c: 2814: {
 25160                           ;usb_device.c: 2817: inPipes[0].info.bits.busy = 1;
 25161  01060E  0100               	movlb	0	; () banked
 25162  010610  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 25163                           
 25164                           ;usb_device.c: 2820: if(SetupPkt.EPDir == 0)
 25165  010612  0104               	movlb	4	; () banked
 25166  010614  BF34               	btfsc	52,7,b	;volatile
 25167  010616  D019               	goto	i2l9843
 25168                           
 25169                           ; BSR set to: 4
 25170                           ;usb_device.c: 2821: {
 25171                           ;usb_device.c: 2822: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 25172  010618  5134               	movf	52,w,b	;volatile
 25173  01061A  0B0F               	andlw	15
 25174  01061C  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25175  01061E  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25176  010620  0D02               	mullw	2
 25177  010622  0E75               	movlw	low _pBDTEntryOut
 25178  010624  24F3               	addwf	prodl,w,c
 25179  010626  6ED9               	movwf	fsr2l,c
 25180  010628  0E00               	movlw	high _pBDTEntryOut
 25181  01062A  20F4               	addwfc	prodh,w,c
 25182  01062C  6EDA               	movwf	fsr2h,c
 25183  01062E  CFDE F026          	movff	postinc2,USBStdFeatureReqHandler@p
 25184  010632  CFDD F027          	movff	postdec2,USBStdFeatureReqHandler@p+1
 25185                           
 25186                           ;usb_device.c: 2823: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
 25187  010636  5134               	movf	52,w,b	;volatile
 25188  010638  0B0F               	andlw	15
 25189  01063A  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25190  01063C  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25191  01063E  0D01               	mullw	1
 25192  010640  0E7E               	movlw	low _ep_data_out
 25193  010642  24F3               	addwf	prodl,w,c
 25194  010644  6ED9               	movwf	fsr2l,c
 25195  010646  0E00               	movlw	high _ep_data_out
 25196  010648  D019               	goto	L15
 25197  01064A                     i2l9843:
 25198                           
 25199                           ; BSR set to: 4
 25200                           ;usb_device.c: 2825: else
 25201                           ;usb_device.c: 2826: {
 25202                           ;usb_device.c: 2827: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 25203  01064A  0104               	movlb	4	; () banked
 25204  01064C  5134               	movf	52,w,b	;volatile
 25205  01064E  0B0F               	andlw	15
 25206  010650  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25207  010652  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25208  010654  0D02               	mullw	2
 25209  010656  0E6F               	movlw	low _pBDTEntryIn
 25210  010658  24F3               	addwf	prodl,w,c
 25211  01065A  6ED9               	movwf	fsr2l,c
 25212  01065C  0E00               	movlw	high _pBDTEntryIn
 25213  01065E  20F4               	addwfc	prodh,w,c
 25214  010660  6EDA               	movwf	fsr2h,c
 25215  010662  CFDE F026          	movff	postinc2,USBStdFeatureReqHandler@p
 25216  010666  CFDD F027          	movff	postdec2,USBStdFeatureReqHandler@p+1
 25217                           
 25218                           ;usb_device.c: 2828: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
 25219  01066A  5134               	movf	52,w,b	;volatile
 25220  01066C  0B0F               	andlw	15
 25221  01066E  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25222  010670  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25223  010672  0D01               	mullw	1
 25224  010674  0E7B               	movlw	low _ep_data_in
 25225  010676  24F3               	addwf	prodl,w,c
 25226  010678  6ED9               	movwf	fsr2l,c
 25227  01067A  0E00               	movlw	high _ep_data_in
 25228  01067C                     L15:
 25229  01067C  20F4               	addwfc	prodh,w,c
 25230  01067E  6EDA               	movwf	fsr2h,c
 25231  010680  50DF               	movf	indf2,w,c
 25232  010682  6E25               	movwf	USBStdFeatureReqHandler@current_ep_data,c
 25233                           
 25234                           ; BSR set to: 4
 25235                           ;usb_device.c: 2829: }
 25236                           ;usb_device.c: 2835: if(current_ep_data.bits.ping_pong_state == 0)
 25237                           
 25238                           ; BSR set to: 4
 25239  010684  B025               	btfsc	USBStdFeatureReqHandler@current_ep_data,0,c
 25240  010686  D003               	goto	i2l9849
 25241                           
 25242                           ; BSR set to: 4
 25243                           ;usb_device.c: 2836: {
 25244                           ;usb_device.c: 2837: p = (BDT_ENTRY*)(((uintptr_t)p) & (~0x0004));
 25245  010688  0EFB               	movlw	251
 25246  01068A  1626               	andwf	USBStdFeatureReqHandler@p,f,c
 25247  01068C  D002               	goto	L16
 25248  01068E                     i2l9849:
 25249                           
 25250                           ; BSR set to: 4
 25251                           ;usb_device.c: 2839: else
 25252                           ;usb_device.c: 2840: {
 25253                           ;usb_device.c: 2841: p = (BDT_ENTRY*)(((uintptr_t)p) | 0x0004);
 25254  01068E  0E04               	movlw	4
 25255  010690  1226               	iorwf	USBStdFeatureReqHandler@p,f,c
 25256  010692                     L16:
 25257  010692  5027               	movf	USBStdFeatureReqHandler@p+1,w,c
 25258                           
 25259                           ; BSR set to: 4
 25260                           ;usb_device.c: 2842: }
 25261                           ;usb_device.c: 2847: if(SetupPkt.EPDir == 0)
 25262                           
 25263                           ; BSR set to: 4
 25264  010694  0104               	movlb	4	; () banked
 25265  010696  BF34               	btfsc	52,7,b	;volatile
 25266  010698  D00A               	goto	i2l9855
 25267                           
 25268                           ; BSR set to: 4
 25269                           ;usb_device.c: 2848: {
 25270                           ;usb_device.c: 2849: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 25271  01069A  5134               	movf	52,w,b	;volatile
 25272  01069C  0B0F               	andlw	15
 25273  01069E  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25274  0106A0  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25275  0106A2  0D02               	mullw	2
 25276  0106A4  0E75               	movlw	low _pBDTEntryOut
 25277  0106A6  24F3               	addwf	prodl,w,c
 25278  0106A8  6ED9               	movwf	fsr2l,c
 25279  0106AA  0E00               	movlw	high _pBDTEntryOut
 25280  0106AC  D00A               	goto	L17
 25281  0106AE                     i2l9855:
 25282                           
 25283                           ; BSR set to: 4
 25284                           ;usb_device.c: 2851: else
 25285                           ;usb_device.c: 2852: {
 25286                           ;usb_device.c: 2853: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 25287  0106AE  0104               	movlb	4	; () banked
 25288  0106B0  5134               	movf	52,w,b	;volatile
 25289  0106B2  0B0F               	andlw	15
 25290  0106B4  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25291  0106B6  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25292  0106B8  0D02               	mullw	2
 25293  0106BA  0E6F               	movlw	low _pBDTEntryIn
 25294  0106BC  24F3               	addwf	prodl,w,c
 25295  0106BE  6ED9               	movwf	fsr2l,c
 25296  0106C0  0E00               	movlw	high _pBDTEntryIn
 25297  0106C2                     L17:
 25298  0106C2  20F4               	addwfc	prodh,w,c
 25299  0106C4  6EDA               	movwf	fsr2h,c
 25300  0106C6  C026  FFDE         	movff	USBStdFeatureReqHandler@p,postinc2
 25301  0106CA  C027  FFDD         	movff	USBStdFeatureReqHandler@p+1,postdec2
 25302                           
 25303                           ; BSR set to: 4
 25304                           ;usb_device.c: 2854: }
 25305                           ;usb_device.c: 2857: if(SetupPkt.bRequest == 3)
 25306                           
 25307                           ; BSR set to: 4
 25308  0106CE  0E03               	movlw	3
 25309  0106D0  0104               	movlb	4	; () banked
 25310  0106D2  1931               	xorwf	49,w,b	;volatile
 25311  0106D4  E12C               	bnz	i2l9871
 25312                           
 25313                           ; BSR set to: 4
 25314                           ;usb_device.c: 2858: {
 25315                           ;usb_device.c: 2859: if(p->STAT.UOWN == 1)
 25316  0106D6  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25317  0106DA  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25318  0106DE  AEDF               	btfss	indf2,7,c
 25319  0106E0  D01A               	goto	i2l9867
 25320                           
 25321                           ; BSR set to: 4
 25322                           ;usb_device.c: 2860: {
 25323                           ;usb_device.c: 2863: if(SetupPkt.EPDir == 0)
 25324  0106E2  BF34               	btfsc	52,7,b	;volatile
 25325  0106E4  D00A               	goto	i2l9865
 25326                           
 25327                           ; BSR set to: 4
 25328                           ;usb_device.c: 2864: {
 25329                           ;usb_device.c: 2865: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 25330  0106E6  5134               	movf	52,w,b	;volatile
 25331  0106E8  0B0F               	andlw	15
 25332  0106EA  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25333  0106EC  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25334  0106EE  0D01               	mullw	1
 25335  0106F0  0E7E               	movlw	low _ep_data_out
 25336  0106F2  24F3               	addwf	prodl,w,c
 25337  0106F4  6ED9               	movwf	fsr2l,c
 25338  0106F6  0E00               	movlw	high _ep_data_out
 25339  0106F8  D00A               	goto	L18
 25340  0106FA                     i2l9865:
 25341                           
 25342                           ;usb_device.c: 2867: else
 25343                           ;usb_device.c: 2868: {
 25344                           ;usb_device.c: 2869: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 25345  0106FA  0104               	movlb	4	; () banked
 25346  0106FC  5134               	movf	52,w,b	;volatile
 25347  0106FE  0B0F               	andlw	15
 25348  010700  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25349  010702  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25350  010704  0D01               	mullw	1
 25351  010706  0E7B               	movlw	low _ep_data_in
 25352  010708  24F3               	addwf	prodl,w,c
 25353  01070A  6ED9               	movwf	fsr2l,c
 25354  01070C  0E00               	movlw	high _ep_data_in
 25355  01070E                     L18:
 25356  01070E  20F4               	addwfc	prodh,w,c
 25357  010710  6EDA               	movwf	fsr2h,c
 25358  010712  0100               	movlb	0	; () banked
 25359  010714  82DF               	bsf	indf2,1,c
 25360  010716                     i2l9867:
 25361                           
 25362                           ;usb_device.c: 2870: }
 25363                           ;usb_device.c: 2871: }
 25364                           ;usb_device.c: 2874: p->STAT.Val |= 0x04;
 25365  010716  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25366  01071A  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25367  01071E  0E00               	movlw	0
 25368  010720  84DB               	bsf	plusw2,2,c
 25369                           
 25370                           ;usb_device.c: 2875: p->STAT.Val |= 0x80;
 25371  010722  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25372  010726  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25373  01072A  8EDB               	bsf	plusw2,7,c
 25374                           
 25375                           ;usb_device.c: 2876: }
 25376  01072C  0C00               	retlw	0
 25377  01072E                     i2l9871:
 25378                           
 25379                           ;usb_device.c: 2877: else
 25380                           ;usb_device.c: 2878: {
 25381                           ;usb_device.c: 2882: p = (BDT_ENTRY*)(((uintptr_t)p) ^ 0x0004);
 25382  01072E  0E04               	movlw	4
 25383  010730  1A26               	xorwf	USBStdFeatureReqHandler@p,f,c
 25384  010732  5027               	movf	USBStdFeatureReqHandler@p+1,w,c
 25385                           
 25386                           ;usb_device.c: 2884: if(p->STAT.UOWN == 1)
 25387  010734  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25388  010738  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25389  01073C  AEDF               	btfss	indf2,7,c
 25390  01073E  D019               	goto	i2l9881
 25391                           
 25392                           ;usb_device.c: 2885: {
 25393                           ;usb_device.c: 2888: p->STAT.Val &= (~0x80);
 25394  010740  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25395  010744  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25396  010748  0E7F               	movlw	127
 25397  01074A  16DF               	andwf	indf2,f,c
 25398                           
 25399                           ;usb_device.c: 2889: p->STAT.Val |= 0x40;
 25400  01074C  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25401  010750  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25402  010754  0E00               	movlw	0
 25403  010756  8CDB               	bsf	plusw2,6,c
 25404                           
 25405                           ;usb_device.c: 2890: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 25406  010758  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 25407  01075A  0E05               	movlw	5
 25408  01075C  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 25409  01075E  C026  F01C         	movff	USBStdFeatureReqHandler@p,USER_USB_CALLBACK_EVENT_HANDLER@pdata
 25410  010762  C027  F01D         	movff	USBStdFeatureReqHandler@p+1,USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 25411  010766  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 25412  010768  0E02               	movlw	2
 25413  01076A  6E1E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 25414  01076C  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 25415                           
 25416                           ;usb_device.c: 2891: }
 25417  010770  D006               	goto	i2l9883
 25418  010772                     i2l9881:
 25419                           
 25420                           ;usb_device.c: 2892: else
 25421                           ;usb_device.c: 2893: {
 25422                           ;usb_device.c: 2895: p->STAT.Val |= 0x40;
 25423  010772  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25424  010776  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25425  01077A  0E00               	movlw	0
 25426  01077C  8CDB               	bsf	plusw2,6,c
 25427  01077E                     i2l9883:
 25428                           
 25429                           ;usb_device.c: 2896: }
 25430                           ;usb_device.c: 2900: p = (BDT_ENTRY*)(((uintptr_t)p) ^ 0x0004);
 25431  01077E  0E04               	movlw	4
 25432  010780  1A26               	xorwf	USBStdFeatureReqHandler@p,f,c
 25433  010782  5027               	movf	USBStdFeatureReqHandler@p+1,w,c
 25434                           
 25435                           ;usb_device.c: 2906: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
 25436  010784  B225               	btfsc	USBStdFeatureReqHandler@current_ep_data,1,c
 25437  010786  D006               	goto	i2l386
 25438  010788  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25439  01078C  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25440  010790  AEDF               	btfss	indf2,7,c
 25441  010792  D02E               	goto	i2l9897
 25442  010794                     i2l386:
 25443                           
 25444                           ;usb_device.c: 2907: {
 25445                           ;usb_device.c: 2908: if(SetupPkt.EPDir == 0)
 25446  010794  0104               	movlb	4	; () banked
 25447  010796  BF34               	btfsc	52,7,b	;volatile
 25448  010798  D00A               	goto	i2l9891
 25449                           
 25450                           ; BSR set to: 4
 25451                           ;usb_device.c: 2909: {
 25452                           ;usb_device.c: 2910: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 25453  01079A  5134               	movf	52,w,b	;volatile
 25454  01079C  0B0F               	andlw	15
 25455  01079E  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25456  0107A0  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25457  0107A2  0D01               	mullw	1
 25458  0107A4  0E7E               	movlw	low _ep_data_out
 25459  0107A6  24F3               	addwf	prodl,w,c
 25460  0107A8  6ED9               	movwf	fsr2l,c
 25461  0107AA  0E00               	movlw	high _ep_data_out
 25462  0107AC  D00A               	goto	L19
 25463  0107AE                     i2l9891:
 25464                           
 25465                           ;usb_device.c: 2912: else
 25466                           ;usb_device.c: 2913: {
 25467                           ;usb_device.c: 2914: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 25468  0107AE  0104               	movlb	4	; () banked
 25469  0107B0  5134               	movf	52,w,b	;volatile
 25470  0107B2  0B0F               	andlw	15
 25471  0107B4  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25472  0107B6  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25473  0107B8  0D01               	mullw	1
 25474  0107BA  0E7B               	movlw	low _ep_data_in
 25475  0107BC  24F3               	addwf	prodl,w,c
 25476  0107BE  6ED9               	movwf	fsr2l,c
 25477  0107C0  0E00               	movlw	high _ep_data_in
 25478  0107C2                     L19:
 25479  0107C2  20F4               	addwfc	prodh,w,c
 25480  0107C4  6EDA               	movwf	fsr2h,c
 25481  0107C6  0100               	movlb	0	; () banked
 25482  0107C8  92DF               	bcf	indf2,1,c
 25483                           
 25484                           ; BSR set to: 0
 25485                           ;usb_device.c: 2915: }
 25486                           ;usb_device.c: 2917: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 25487                           
 25488                           ; BSR set to: 0
 25489  0107CA  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25490  0107CE  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25491  0107D2  0E3B               	movlw	59
 25492  0107D4  16DF               	andwf	indf2,f,c
 25493                           
 25494                           ; BSR set to: 0
 25495                           ;usb_device.c: 2920: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 25496  0107D6  6A1B               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 25497  0107D8  0E05               	movlw	5
 25498  0107DA  6E1A               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 25499  0107DC  C026  F01C         	movff	USBStdFeatureReqHandler@p,USER_USB_CALLBACK_EVENT_HANDLER@pdata
 25500  0107E0  C027  F01D         	movff	USBStdFeatureReqHandler@p+1,USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 25501  0107E4  6A1F               	clrf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 25502  0107E6  0E02               	movlw	2
 25503  0107E8  6E1E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 25504  0107EA  EC75  F0A0         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 25505                           
 25506                           ;usb_device.c: 2921: }
 25507  0107EE  D006               	goto	i2l9899
 25508  0107F0                     i2l9897:
 25509                           
 25510                           ;usb_device.c: 2922: else
 25511                           ;usb_device.c: 2923: {
 25512                           ;usb_device.c: 2925: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 25513  0107F0  C026  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 25514  0107F4  C027  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 25515  0107F8  0E3B               	movlw	59
 25516  0107FA  16DF               	andwf	indf2,f,c
 25517  0107FC                     i2l9899:
 25518                           
 25519                           ;usb_device.c: 2926: }
 25520                           ;usb_device.c: 2973: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 25521  0107FC  0104               	movlb	4	; () banked
 25522  0107FE  5134               	movf	52,w,b	;volatile
 25523  010800  0B0F               	andlw	15
 25524  010802  6E22               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 25525  010804  5022               	movf	??_USBStdFeatureReqHandler,w,c
 25526  010806  0D01               	mullw	1
 25527  010808  0E4C               	movlw	76
 25528  01080A  24F3               	addwf	prodl,w,c
 25529  01080C  6E23               	movwf	USBStdFeatureReqHandler@pUEP,c
 25530  01080E  0E0F               	movlw	15
 25531  010810  20F4               	addwfc	prodh,w,c
 25532  010812  6E24               	movwf	USBStdFeatureReqHandler@pUEP+1,c
 25533                           
 25534                           ; BSR set to: 4
 25535                           ;usb_device.c: 2977: *pUEP &= ~0x0001;
 25536  010814  C023  FFD9         	movff	USBStdFeatureReqHandler@pUEP,fsr2l
 25537  010818  C024  FFDA         	movff	USBStdFeatureReqHandler@pUEP+1,fsr2h
 25538  01081C  0EFE               	movlw	254
 25539  01081E  16DF               	andwf	indf2,f,c
 25540                           
 25541                           ; BSR set to: 4
 25542  010820  0CFE               	retlw	254
 25543  010822                     __end_of_USBStdFeatureReqHandler:
 25544                           	opt stack 0
 25545                           tosu	equ	0xFFF
 25546                           tosh	equ	0xFFE
 25547                           tosl	equ	0xFFD
 25548                           pclatu	equ	0xFFB
 25549                           pclath	equ	0xFFA
 25550                           tblptru	equ	0xFF8
 25551                           tblptrh	equ	0xFF7
 25552                           tblptrl	equ	0xFF6
 25553                           tablat	equ	0xFF5
 25554                           prodh	equ	0xFF4
 25555                           prodl	equ	0xFF3
 25556                           intcon	equ	0xFF2
 25557                           indf0	equ	0xFEF
 25558                           postinc0	equ	0xFEE
 25559                           fsr0h	equ	0xFEA
 25560                           fsr0l	equ	0xFE9
 25561                           wreg	equ	0xFE8
 25562                           indf1	equ	0xFE7
 25563                           postdec1	equ	0xFE5
 25564                           fsr1h	equ	0xFE2
 25565                           fsr1l	equ	0xFE1
 25566                           indf2	equ	0xFDF
 25567                           postinc2	equ	0xFDE
 25568                           postdec2	equ	0xFDD
 25569                           plusw2	equ	0xFDB
 25570                           fsr2h	equ	0xFDA
 25571                           fsr2l	equ	0xFD9
 25572                           status	equ	0xFD8
 25573                           
 25574 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 25575 ;; Defined at:
 25576 ;;		line 48 in file "Library/USB/src/usb_events.c"
 25577 ;; Parameters:    Size  Location     Type
 25578 ;;  event           2   25[COMRAM] enum E7418
 25579 ;;  pdata           2   27[COMRAM] PTR void 
 25580 ;;		 -> RAM(3903), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 25581 ;;		 -> BDT(48), 
 25582 ;;  size            2   29[COMRAM] unsigned int 
 25583 ;; Auto vars:     Size  Location     Type
 25584 ;;		None
 25585 ;; Return value:  Size  Location     Type
 25586 ;;                  1    wreg      unsigned char 
 25587 ;; Registers used:
 25588 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25589 ;; Tracked objects:
 25590 ;;		On entry : 0/0
 25591 ;;		On exit  : 0/0
 25592 ;;		Unchanged: 0/0
 25593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25597 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25598 ;;Total ram usage:        8 bytes
 25599 ;; Hardware stack levels used:    1
 25600 ;; Hardware stack levels required when called:    6
 25601 ;; This function calls:
 25602 ;;		_CDCInitEP
 25603 ;;		_USBCheckCDCRequest
 25604 ;;		i2_LED_Toggle
 25605 ;; This function is called by:
 25606 ;;		_USBDeviceTasks
 25607 ;;		_USBStdSetCfgHandler
 25608 ;;		_USBSuspend
 25609 ;;		_USBWakeFromSuspend
 25610 ;;		_USBCtrlTrfSetupHandler
 25611 ;;		_USBCheckStdRequest
 25612 ;;		_USBStdFeatureReqHandler
 25613 ;; This function uses a non-reentrant model
 25614 ;;
 25615                           
 25616                           	psect	text148
 25617  0140EA                     __ptext148:
 25618                           	opt stack 0
 25619  0140EA                     _USER_USB_CALLBACK_EVENT_HANDLER:
 25620                           	opt stack 11
 25621                           
 25622                           ;usb_events.c: 50: switch( (int) event )
 25623                           
 25624                           ;incstack = 0
 25625  0140EA  D003               	goto	i2l9161
 25626  0140EC                     i2l9153:
 25627                           
 25628                           ;usb_events.c: 75: LED_Toggle(eLED1);
 25629  0140EC  0E00               	movlw	0
 25630  0140EE  EF74  F0A6         	goto	i2_LED_Toggle
 25631  0140F2                     i2l9161:
 25632  0140F2  C01A  F020         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event,??_USER_USB_CALLBACK_EVENT_HANDLER
 25633  0140F6  C01B  F021         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event+1,??_USER_USB_CALLBACK_EVENT_HANDLER+1
 25634                           
 25635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 25636                           ; Switch size 1, requested type "space"
 25637                           ; Number of cases is 2, Range of values is 0 to 127
 25638                           ; switch strategies available:
 25639                           ; Name         Instructions Cycles
 25640                           ; simple_byte            7     4 (average)
 25641                           ;	Chosen strategy is simple_byte
 25642  0140FA  5021               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER+1,w,c
 25643  0140FC  E004               	bz	i2l13581
 25644  0140FE  0A7F               	xorlw	127	; case 127
 25645  014100  A4D8               	btfss	status,2,c
 25646  014102  0012               	return	
 25647  014104  D01A               	goto	i2l13583
 25648  014106                     i2l13581:
 25649                           
 25650                           ; Switch size 1, requested type "space"
 25651                           ; Number of cases is 8, Range of values is 1 to 117
 25652                           ; switch strategies available:
 25653                           ; Name         Instructions Cycles
 25654                           ; simple_byte           25    13 (average)
 25655                           ;	Chosen strategy is simple_byte
 25656  014106  5020               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
 25657  014108  0A01               	xorlw	1	; case 1
 25658  01410A  E102 EF9F  F0A0    	bz	_CDCInitEP
 25659  014110  0A03               	xorlw	3	; case 2
 25660  014112  B4D8               	btfsc	status,2,c
 25661  014114  0012               	return	
 25662  014116  0A01               	xorlw	1	; case 3
 25663  014118  E102 EF04  F098    	bz	_USBCheckCDCRequest
 25664  01411E  0A06               	xorlw	6	; case 5
 25665  014120  B4D8               	btfsc	status,2,c
 25666  014122  0012               	return	
 25667  014124  0A77               	xorlw	119	; case 114
 25668  014126  B4D8               	btfsc	status,2,c
 25669  014128  0012               	return	
 25670  01412A  0A01               	xorlw	1	; case 115
 25671  01412C  E0DF               	bz	i2l9153
 25672  01412E  0A07               	xorlw	7	; case 116
 25673  014130  E0DD               	bz	i2l9153
 25674  014132  0A01               	xorlw	1	; case 117
 25675  014134  A4D8               	btfss	status,2,c
 25676  014136  0012               	return	
 25677  014138  D7D9               	goto	i2l9153
 25678  01413A                     i2l13583:
 25679                           
 25680                           ; Switch size 1, requested type "space"
 25681                           ; Number of cases is 1, Range of values is 255 to 255
 25682                           ; switch strategies available:
 25683                           ; Name         Instructions Cycles
 25684                           ; simple_byte            4     3 (average)
 25685                           ;	Chosen strategy is simple_byte
 25686  01413A  1C20               	comf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
 25687  01413C  0012               	return	
 25688  01413E                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 25689                           	opt stack 0
 25690                           tosu	equ	0xFFF
 25691                           tosh	equ	0xFFE
 25692                           tosl	equ	0xFFD
 25693                           pclatu	equ	0xFFB
 25694                           pclath	equ	0xFFA
 25695                           tblptru	equ	0xFF8
 25696                           tblptrh	equ	0xFF7
 25697                           tblptrl	equ	0xFF6
 25698                           tablat	equ	0xFF5
 25699                           prodh	equ	0xFF4
 25700                           prodl	equ	0xFF3
 25701                           intcon	equ	0xFF2
 25702                           indf0	equ	0xFEF
 25703                           postinc0	equ	0xFEE
 25704                           fsr0h	equ	0xFEA
 25705                           fsr0l	equ	0xFE9
 25706                           wreg	equ	0xFE8
 25707                           indf1	equ	0xFE7
 25708                           postdec1	equ	0xFE5
 25709                           fsr1h	equ	0xFE2
 25710                           fsr1l	equ	0xFE1
 25711                           indf2	equ	0xFDF
 25712                           postinc2	equ	0xFDE
 25713                           postdec2	equ	0xFDD
 25714                           plusw2	equ	0xFDB
 25715                           fsr2h	equ	0xFDA
 25716                           fsr2l	equ	0xFD9
 25717                           status	equ	0xFD8
 25718                           
 25719 ;; *************** function i2_LED_Toggle *****************
 25720 ;; Defined at:
 25721 ;;		line 50 in file "Library/LED.c"
 25722 ;; Parameters:    Size  Location     Type
 25723 ;;  pLED            1    wreg     enum E7677
 25724 ;; Auto vars:     Size  Location     Type
 25725 ;;  pLED            1   24[COMRAM] enum E7677
 25726 ;; Return value:  Size  Location     Type
 25727 ;;                  1    wreg      void 
 25728 ;; Registers used:
 25729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25730 ;; Tracked objects:
 25731 ;;		On entry : 0/0
 25732 ;;		On exit  : 0/0
 25733 ;;		Unchanged: 0/0
 25734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25739 ;;Total ram usage:        1 bytes
 25740 ;; Hardware stack levels used:    1
 25741 ;; Hardware stack levels required when called:    5
 25742 ;; This function calls:
 25743 ;;		i2_Port_TogglePin
 25744 ;; This function is called by:
 25745 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 25746 ;; This function uses a non-reentrant model
 25747 ;;
 25748                           
 25749                           	psect	text149
 25750  014CE8                     __ptext149:
 25751                           	opt stack 0
 25752  014CE8                     i2_LED_Toggle:
 25753                           	opt stack 11
 25754                           
 25755                           ;incstack = 0
 25756                           ;i2LED_Toggle@pLED stored from wreg
 25757  014CE8  6E19               	movwf	i2LED_Toggle@pLED,c
 25758                           
 25759                           ;LED.c: 52: switch (pLED)
 25760  014CEA  D00F               	goto	i2l9145
 25761  014CEC                     i2l9139:
 25762                           
 25763                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 25764  014CEC  0EA4               	movlw	low _PortC
 25765  014CEE  6E15               	movwf	i2Port_TogglePin@pInput,c
 25766  014CF0  0E00               	movlw	high _PortC
 25767  014CF2  6E16               	movwf	i2Port_TogglePin@pInput+1,c
 25768  014CF4  6A17               	clrf	i2Port_TogglePin@pPin,c
 25769  014CF6  EFB4  F0A6         	goto	i2_Port_TogglePin	;wreg free
 25770  014CFA                     i2l9141:
 25771                           
 25772                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 25773  014CFA  0EA4               	movlw	low _PortC
 25774  014CFC  6E15               	movwf	i2Port_TogglePin@pInput,c
 25775  014CFE  0E00               	movlw	high _PortC
 25776  014D00  6E16               	movwf	i2Port_TogglePin@pInput+1,c
 25777  014D02  0E01               	movlw	1
 25778  014D04  6E17               	movwf	i2Port_TogglePin@pPin,c
 25779  014D06  EFB4  F0A6         	goto	i2_Port_TogglePin	;wreg free
 25780  014D0A                     i2l9145:
 25781  014D0A  5019               	movf	i2LED_Toggle@pLED,w,c
 25782                           
 25783                           ; Switch size 1, requested type "space"
 25784                           ; Number of cases is 2, Range of values is 0 to 1
 25785                           ; switch strategies available:
 25786                           ; Name         Instructions Cycles
 25787                           ; simple_byte            7     4 (average)
 25788                           ;	Chosen strategy is simple_byte
 25789  014D0C  E0EF               	bz	i2l9139
 25790  014D0E  0A01               	xorlw	1	; case 1
 25791  014D10  E0F4               	bz	i2l9141
 25792  014D12  0012               	return		;funcret
 25793  014D14                     __end_ofi2_LED_Toggle:
 25794                           	opt stack 0
 25795                           tosu	equ	0xFFF
 25796                           tosh	equ	0xFFE
 25797                           tosl	equ	0xFFD
 25798                           pclatu	equ	0xFFB
 25799                           pclath	equ	0xFFA
 25800                           tblptru	equ	0xFF8
 25801                           tblptrh	equ	0xFF7
 25802                           tblptrl	equ	0xFF6
 25803                           tablat	equ	0xFF5
 25804                           prodh	equ	0xFF4
 25805                           prodl	equ	0xFF3
 25806                           intcon	equ	0xFF2
 25807                           indf0	equ	0xFEF
 25808                           postinc0	equ	0xFEE
 25809                           fsr0h	equ	0xFEA
 25810                           fsr0l	equ	0xFE9
 25811                           wreg	equ	0xFE8
 25812                           indf1	equ	0xFE7
 25813                           postdec1	equ	0xFE5
 25814                           fsr1h	equ	0xFE2
 25815                           fsr1l	equ	0xFE1
 25816                           indf2	equ	0xFDF
 25817                           postinc2	equ	0xFDE
 25818                           postdec2	equ	0xFDD
 25819                           plusw2	equ	0xFDB
 25820                           fsr2h	equ	0xFDA
 25821                           fsr2l	equ	0xFD9
 25822                           status	equ	0xFD8
 25823                           
 25824 ;; *************** function i2_Port_TogglePin *****************
 25825 ;; Defined at:
 25826 ;;		line 278 in file "Library/Port.c"
 25827 ;; Parameters:    Size  Location     Type
 25828 ;;  pInput          2   20[COMRAM] const PTR struct Port
 25829 ;;		 -> PortC(10), 
 25830 ;;  pPin            1   22[COMRAM] enum E7688
 25831 ;; Auto vars:     Size  Location     Type
 25832 ;;  Port_ToggleP    1   23[COMRAM] unsigned char 
 25833 ;; Return value:  Size  Location     Type
 25834 ;;                  1    wreg      void 
 25835 ;; Registers used:
 25836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25837 ;; Tracked objects:
 25838 ;;		On entry : 0/0
 25839 ;;		On exit  : 0/0
 25840 ;;		Unchanged: 0/0
 25841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25842 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25845 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25846 ;;Total ram usage:        4 bytes
 25847 ;; Hardware stack levels used:    1
 25848 ;; Hardware stack levels required when called:    4
 25849 ;; This function calls:
 25850 ;;		i2_Port_GetPin
 25851 ;;		i2_Port_SetPin
 25852 ;; This function is called by:
 25853 ;;		i2_LED_Toggle
 25854 ;; This function uses a non-reentrant model
 25855 ;;
 25856                           
 25857                           	psect	text150
 25858  014D68                     __ptext150:
 25859                           	opt stack 0
 25860  014D68                     i2_Port_TogglePin:
 25861                           	opt stack 11
 25862                           
 25863                           ;Port.c: 280: UINT8 Value;
 25864                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 25865                           
 25866                           ;incstack = 0
 25867  014D68  C015  F001         	movff	i2Port_TogglePin@pInput,i2Port_GetPin@pInput
 25868  014D6C  C016  F002         	movff	i2Port_TogglePin@pInput+1,i2Port_GetPin@pInput+1
 25869  014D70  C017  F003         	movff	i2Port_TogglePin@pPin,i2Port_GetPin@pPin
 25870  014D74  ECF9  F0A4         	call	i2_Port_GetPin	;wreg free
 25871  014D78  6E18               	movwf	i2Port_TogglePin@Value,c
 25872                           
 25873                           ;Port.c: 282: Value ^= 0x01;
 25874  014D7A  0E01               	movlw	1
 25875  014D7C  1A18               	xorwf	i2Port_TogglePin@Value,f,c
 25876                           
 25877                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 25878  014D7E  C015  F010         	movff	i2Port_TogglePin@pInput,i2Port_SetPin@pInput
 25879  014D82  C016  F011         	movff	i2Port_TogglePin@pInput+1,i2Port_SetPin@pInput+1
 25880  014D86  C017  F012         	movff	i2Port_TogglePin@pPin,i2Port_SetPin@pPin
 25881  014D8A  C018  F013         	movff	i2Port_TogglePin@Value,i2Port_SetPin@pValue
 25882  014D8E  EF31  F09F         	goto	i2_Port_SetPin	;wreg free
 25883  014D92                     __end_ofi2_Port_TogglePin:
 25884                           	opt stack 0
 25885                           tosu	equ	0xFFF
 25886                           tosh	equ	0xFFE
 25887                           tosl	equ	0xFFD
 25888                           pclatu	equ	0xFFB
 25889                           pclath	equ	0xFFA
 25890                           tblptru	equ	0xFF8
 25891                           tblptrh	equ	0xFF7
 25892                           tblptrl	equ	0xFF6
 25893                           tablat	equ	0xFF5
 25894                           prodh	equ	0xFF4
 25895                           prodl	equ	0xFF3
 25896                           intcon	equ	0xFF2
 25897                           indf0	equ	0xFEF
 25898                           postinc0	equ	0xFEE
 25899                           fsr0h	equ	0xFEA
 25900                           fsr0l	equ	0xFE9
 25901                           wreg	equ	0xFE8
 25902                           indf1	equ	0xFE7
 25903                           postdec1	equ	0xFE5
 25904                           fsr1h	equ	0xFE2
 25905                           fsr1l	equ	0xFE1
 25906                           indf2	equ	0xFDF
 25907                           postinc2	equ	0xFDE
 25908                           postdec2	equ	0xFDD
 25909                           plusw2	equ	0xFDB
 25910                           fsr2h	equ	0xFDA
 25911                           fsr2l	equ	0xFD9
 25912                           status	equ	0xFD8
 25913                           
 25914 ;; *************** function i2_Port_GetPin *****************
 25915 ;; Defined at:
 25916 ;;		line 271 in file "Library/Port.c"
 25917 ;; Parameters:    Size  Location     Type
 25918 ;;  pInput          2    0[COMRAM] const PTR struct Port
 25919 ;;		 -> PortC(10), PortE(10), PortB(10), 
 25920 ;;  pPin            1    2[COMRAM] enum E7688
 25921 ;; Auto vars:     Size  Location     Type
 25922 ;;  Port_GetPin     1    5[COMRAM] unsigned char 
 25923 ;; Return value:  Size  Location     Type
 25924 ;;                  1    wreg      unsigned char 
 25925 ;; Registers used:
 25926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25927 ;; Tracked objects:
 25928 ;;		On entry : 0/0
 25929 ;;		On exit  : 0/0
 25930 ;;		Unchanged: 0/0
 25931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25935 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25936 ;;Total ram usage:        6 bytes
 25937 ;; Hardware stack levels used:    1
 25938 ;; This function calls:
 25939 ;;		Nothing
 25940 ;; This function is called by:
 25941 ;;		i2_Port_TogglePin
 25942 ;; This function uses a non-reentrant model
 25943 ;;
 25944                           
 25945                           	psect	text151
 25946  0149F2                     __ptext151:
 25947                           	opt stack 0
 25948  0149F2                     i2_Port_GetPin:
 25949                           	opt stack 14
 25950                           
 25951                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 25952                           
 25953                           ;incstack = 0
 25954  0149F2  EE20 F006          	lfsr	2,6
 25955  0149F6  5001               	movf	i2Port_GetPin@pInput,w,c
 25956  0149F8  26D9               	addwf	fsr2l,f,c
 25957  0149FA  5002               	movf	i2Port_GetPin@pInput+1,w,c
 25958  0149FC  22DA               	addwfc	fsr2h,f,c
 25959  0149FE  CFDE F004          	movff	postinc2,??i2_Port_GetPin
 25960  014A02  CFDD F005          	movff	postdec2,??i2_Port_GetPin+1
 25961  014A06  C004  FFD9         	movff	??i2_Port_GetPin,fsr2l
 25962  014A0A  C005  FFDA         	movff	??i2_Port_GetPin+1,fsr2h
 25963  014A0E  50DF               	movf	indf2,w,c
 25964  014A10  6E06               	movwf	i2Port_GetPin@Output,c
 25965                           
 25966                           ;Port.c: 274: Output >>= (UINT8)pPin;
 25967  014A12  2803               	incf	i2Port_GetPin@pPin,w,c
 25968  014A14  6E04               	movwf	??i2_Port_GetPin& (0+255),c
 25969  014A16  D002               	goto	i2u568_40
 25970  014A18                     i2u568_45:
 25971  014A18  90D8               	bcf	status,0,c
 25972  014A1A  3206               	rrcf	i2Port_GetPin@Output,f,c
 25973  014A1C                     i2u568_40:
 25974  014A1C  2E04               	decfsz	??i2_Port_GetPin& (0+255),f,c
 25975  014A1E  D7FC               	goto	i2u568_45
 25976                           
 25977                           ;Port.c: 275: Output &= 1;
 25978  014A20  0E01               	movlw	1
 25979  014A22  1606               	andwf	i2Port_GetPin@Output,f,c
 25980                           
 25981                           ;Port.c: 276: return Output;
 25982  014A24  5006               	movf	i2Port_GetPin@Output,w,c
 25983  014A26  0012               	return	
 25984  014A28                     __end_ofi2_Port_GetPin:
 25985                           	opt stack 0
 25986                           tosu	equ	0xFFF
 25987                           tosh	equ	0xFFE
 25988                           tosl	equ	0xFFD
 25989                           pclatu	equ	0xFFB
 25990                           pclath	equ	0xFFA
 25991                           tblptru	equ	0xFF8
 25992                           tblptrh	equ	0xFF7
 25993                           tblptrl	equ	0xFF6
 25994                           tablat	equ	0xFF5
 25995                           prodh	equ	0xFF4
 25996                           prodl	equ	0xFF3
 25997                           intcon	equ	0xFF2
 25998                           indf0	equ	0xFEF
 25999                           postinc0	equ	0xFEE
 26000                           fsr0h	equ	0xFEA
 26001                           fsr0l	equ	0xFE9
 26002                           wreg	equ	0xFE8
 26003                           indf1	equ	0xFE7
 26004                           postdec1	equ	0xFE5
 26005                           fsr1h	equ	0xFE2
 26006                           fsr1l	equ	0xFE1
 26007                           indf2	equ	0xFDF
 26008                           postinc2	equ	0xFDE
 26009                           postdec2	equ	0xFDD
 26010                           plusw2	equ	0xFDB
 26011                           fsr2h	equ	0xFDA
 26012                           fsr2l	equ	0xFD9
 26013                           status	equ	0xFD8
 26014                           
 26015 ;; *************** function _USBCheckCDCRequest *****************
 26016 ;; Defined at:
 26017 ;;		line 148 in file "Library/USB/src/usb_device_cdc.c"
 26018 ;; Parameters:    Size  Location     Type
 26019 ;;		None
 26020 ;; Auto vars:     Size  Location     Type
 26021 ;;		None
 26022 ;; Return value:  Size  Location     Type
 26023 ;;                  1    wreg      void 
 26024 ;; Registers used:
 26025 ;;		wreg, status,2, status,0
 26026 ;; Tracked objects:
 26027 ;;		On entry : 0/0
 26028 ;;		On exit  : 0/0
 26029 ;;		Unchanged: 0/0
 26030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26035 ;;Total ram usage:        0 bytes
 26036 ;; Hardware stack levels used:    1
 26037 ;; This function calls:
 26038 ;;		Nothing
 26039 ;; This function is called by:
 26040 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 26041 ;; This function uses a non-reentrant model
 26042 ;;
 26043                           
 26044                           	psect	text152
 26045  013008                     __ptext152:
 26046                           	opt stack 0
 26047  013008                     _USBCheckCDCRequest:
 26048                           	opt stack 16
 26049                           
 26050                           ;usb_device_cdc.c: 153: if(SetupPkt.Recipient != (0x01)) return;
 26051                           
 26052                           ;incstack = 0
 26053  013008  0104               	movlb	4	; () banked
 26054  01300A  5130               	movf	48,w,b	;volatile
 26055  01300C  0B1F               	andlw	31
 26056  01300E  06E8               	decf	wreg,f,c
 26057  013010  E001               	bz	i2l9019
 26058                           
 26059                           ; BSR set to: 4
 26060  013012  0012               	return	
 26061  013014                     i2l9019:
 26062                           
 26063                           ; BSR set to: 4
 26064                           ;usb_device_cdc.c: 158: if(SetupPkt.RequestType != (0x20>>5)) return;
 26065  013014  0104               	movlb	4	; () banked
 26066  013016  3930               	swapf	48,w,b	;volatile
 26067  013018  32E8               	rrcf	wreg,f,c
 26068  01301A  0B03               	andlw	3
 26069  01301C  06E8               	decf	wreg,f,c
 26070  01301E  E001               	bz	i2l9023
 26071                           
 26072                           ; BSR set to: 4
 26073  013020  0012               	return	
 26074  013022                     i2l9023:
 26075                           
 26076                           ; BSR set to: 4
 26077                           ;usb_device_cdc.c: 164: if((SetupPkt.bIntfID != 0x0)&&
 26078                           ;usb_device_cdc.c: 165: (SetupPkt.bIntfID != 0x01)) return;
 26079  013022  0104               	movlb	4	; () banked
 26080  013024  5134               	movf	52,w,b	;volatile
 26081  013026  E033               	bz	i2l9053
 26082                           
 26083                           ; BSR set to: 4
 26084  013028  0534               	decf	52,w,b	;volatile
 26085  01302A  E031               	bz	i2l9053
 26086                           
 26087                           ; BSR set to: 4
 26088  01302C  0012               	return	
 26089  01302E                     i2l9029:
 26090                           
 26091                           ; BSR set to: 4
 26092                           ;usb_device_cdc.c: 172: inPipes[0].pSrc.bRam = (uint8_t*)&dummy_encapsulated_cmd_respons
      +                          e;
 26093  01302E  0EC5               	movlw	low _dummy_encapsulated_cmd_response
 26094  013030  0100               	movlb	0	; () banked
 26095  013032  6F69               	movwf	_inPipes& (0+255),b	;volatile
 26096  013034  0E01               	movlw	high _dummy_encapsulated_cmd_response
 26097  013036  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 26098                           
 26099                           ; BSR set to: 0
 26100                           ;usb_device_cdc.c: 173: inPipes[0].wCount.Val = 0x08;
 26101  013038  6B6E               	clrf	(_inPipes+5)& (0+255),b	;volatile
 26102  01303A  0E08               	movlw	8
 26103  01303C  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 26104                           
 26105                           ; BSR set to: 0
 26106                           ;usb_device_cdc.c: 174: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 26107  01303E  816C               	bsf	(_inPipes+3)& (0+255),0,b	;volatile
 26108                           
 26109                           ; BSR set to: 0
 26110                           ;usb_device_cdc.c: 175: inPipes[0].info.bits.busy = 1;
 26111  013040  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 26112                           
 26113                           ;usb_device_cdc.c: 176: break;
 26114  013042  0C08               	retlw	8
 26115  013044                     i2l9037:
 26116                           
 26117                           ;usb_device_cdc.c: 179: inPipes[0].pSrc.bRam = (uint8_t*)&dummy_encapsulated_cmd_respons
      +                          e;
 26118  013044  0EC5               	movlw	low _dummy_encapsulated_cmd_response
 26119  013046  0100               	movlb	0	; () banked
 26120  013048  6F69               	movwf	_inPipes& (0+255),b	;volatile
 26121  01304A  0E01               	movlw	high _dummy_encapsulated_cmd_response
 26122  01304C  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 26123                           
 26124                           ; BSR set to: 0
 26125                           ;usb_device_cdc.c: 180: inPipes[0].info.bits.busy = 1;
 26126  01304E  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 26127                           
 26128                           ;usb_device_cdc.c: 181: break;
 26129  013050  0012               	return	
 26130  013052                     i2l455:
 26131                           
 26132                           ; BSR set to: 4
 26133                           ;usb_device_cdc.c: 186: outPipes[0].wCount.Val = SetupPkt.wLength;
 26134  013052  C436 F064          	movff	1078,_outPipes+4	;volatile
 26135  013056  C437 F065          	movff	1079,_outPipes+5	;volatile
 26136                           
 26137                           ; BSR set to: 4
 26138                           ;usb_device_cdc.c: 187: outPipes[0].pDst.bRam = (uint8_t*)&line_coding._byte[0];
 26139  01305A  0ECD               	movlw	low _line_coding
 26140  01305C  0100               	movlb	0	; () banked
 26141  01305E  6F60               	movwf	_outPipes& (0+255),b	;volatile
 26142  013060  0E01               	movlw	high _line_coding
 26143  013062  6F61               	movwf	(_outPipes+1)& (0+255),b	;volatile
 26144                           
 26145                           ;usb_device_cdc.c: 188: outPipes[0].pFunc = (0);
 26146  013064  6B66               	clrf	(_outPipes+6)& (0+255),b	;volatile
 26147  013066  6B67               	clrf	(_outPipes+7)& (0+255),b	;volatile
 26148  013068  6B68               	clrf	(_outPipes+8)& (0+255),b	;volatile
 26149                           
 26150                           ; BSR set to: 0
 26151                           ;usb_device_cdc.c: 189: outPipes[0].info.bits.busy = 1;
 26152  01306A  8F63               	bsf	(_outPipes+3)& (0+255),7,b	;volatile
 26153                           
 26154                           ;usb_device_cdc.c: 190: break;
 26155  01306C  0C00               	retlw	0
 26156  01306E                     i2l9045:
 26157                           
 26158                           ;usb_device_cdc.c: 193: { inPipes[0].pSrc.bRam = (uint8_t*)&line_coding; inPipes[0].wCou
      +                          nt.Val = 0x07; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 26159  01306E  0ECD               	movlw	low _line_coding
 26160  013070  0100               	movlb	0	; () banked
 26161  013072  6F69               	movwf	_inPipes& (0+255),b	;volatile
 26162  013074  0E01               	movlw	high _line_coding
 26163  013076  6F6A               	movwf	(_inPipes+1)& (0+255),b	;volatile
 26164                           
 26165                           ; BSR set to: 0
 26166  013078  6B6E               	clrf	(_inPipes+5)& (0+255),b	;volatile
 26167  01307A  0E07               	movlw	7
 26168  01307C  6F6D               	movwf	(_inPipes+4)& (0+255),b	;volatile
 26169                           
 26170                           ; BSR set to: 0
 26171  01307E  0EC1               	movlw	193
 26172  013080  6F6C               	movwf	(_inPipes+3)& (0+255),b	;volatile
 26173                           
 26174                           ;usb_device_cdc.c: 197: break;
 26175  013082  0CC1               	retlw	193
 26176  013084                     i2l457:
 26177                           
 26178                           ; BSR set to: 4
 26179                           ;usb_device_cdc.c: 200: control_signal_bitmap._byte = (uint8_t)SetupPkt.wValue;
 26180  013084  C432 F04E          	movff	1074,_control_signal_bitmap	;volatile
 26181                           
 26182                           ;usb_device_cdc.c: 232: inPipes[0].info.bits.busy = 1;
 26183  013088  0100               	movlb	0	; () banked
 26184  01308A  8F6C               	bsf	(_inPipes+3)& (0+255),7,b	;volatile
 26185                           
 26186                           ; BSR set to: 0
 26187                           ;usb_device_cdc.c: 259: }
 26188                           
 26189                           ; BSR set to: 0
 26190                           ;usb_device_cdc.c: 258: break;
 26191                           
 26192                           ;usb_device_cdc.c: 257: default:
 26193                           
 26194                           ;usb_device_cdc.c: 233: break;
 26195  01308C  0012               	return	
 26196  01308E                     i2l9053:
 26197  01308E  0104               	movlb	4	; () banked
 26198  013090  5131               	movf	49,w,b	;volatile
 26199                           
 26200                           ; Switch size 1, requested type "space"
 26201                           ; Number of cases is 5, Range of values is 0 to 34
 26202                           ; switch strategies available:
 26203                           ; Name         Instructions Cycles
 26204                           ; simple_byte           16     9 (average)
 26205                           ;	Chosen strategy is simple_byte
 26206  013092  E0CD               	bz	i2l9029
 26207  013094  0A01               	xorlw	1	; case 1
 26208  013096  E0D6               	bz	i2l9037
 26209  013098  0A21               	xorlw	33	; case 32
 26210  01309A  E0DB               	bz	i2l455
 26211  01309C  0A01               	xorlw	1	; case 33
 26212  01309E  E0E7               	bz	i2l9045
 26213  0130A0  0A03               	xorlw	3	; case 34
 26214  0130A2  E0F0               	bz	i2l457
 26215                           
 26216                           ; BSR set to: 4
 26217  0130A4  0012               	return		;funcret
 26218  0130A6                     __end_of_USBCheckCDCRequest:
 26219                           	opt stack 0
 26220                           tosu	equ	0xFFF
 26221                           tosh	equ	0xFFE
 26222                           tosl	equ	0xFFD
 26223                           pclatu	equ	0xFFB
 26224                           pclath	equ	0xFFA
 26225                           tblptru	equ	0xFF8
 26226                           tblptrh	equ	0xFF7
 26227                           tblptrl	equ	0xFF6
 26228                           tablat	equ	0xFF5
 26229                           prodh	equ	0xFF4
 26230                           prodl	equ	0xFF3
 26231                           intcon	equ	0xFF2
 26232                           indf0	equ	0xFEF
 26233                           postinc0	equ	0xFEE
 26234                           fsr0h	equ	0xFEA
 26235                           fsr0l	equ	0xFE9
 26236                           wreg	equ	0xFE8
 26237                           indf1	equ	0xFE7
 26238                           postdec1	equ	0xFE5
 26239                           fsr1h	equ	0xFE2
 26240                           fsr1l	equ	0xFE1
 26241                           indf2	equ	0xFDF
 26242                           postinc2	equ	0xFDE
 26243                           postdec2	equ	0xFDD
 26244                           plusw2	equ	0xFDB
 26245                           fsr2h	equ	0xFDA
 26246                           fsr2l	equ	0xFD9
 26247                           status	equ	0xFD8
 26248                           
 26249 ;; *************** function _CDCInitEP *****************
 26250 ;; Defined at:
 26251 ;;		line 295 in file "Library/USB/src/usb_device_cdc.c"
 26252 ;; Parameters:    Size  Location     Type
 26253 ;;		None
 26254 ;; Auto vars:     Size  Location     Type
 26255 ;;		None
 26256 ;; Return value:  Size  Location     Type
 26257 ;;                  1    wreg      void 
 26258 ;; Registers used:
 26259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26260 ;; Tracked objects:
 26261 ;;		On entry : 0/0
 26262 ;;		On exit  : 0/0
 26263 ;;		Unchanged: 0/0
 26264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26269 ;;Total ram usage:        0 bytes
 26270 ;; Hardware stack levels used:    1
 26271 ;; Hardware stack levels required when called:    2
 26272 ;; This function calls:
 26273 ;;		_USBEnableEndpoint
 26274 ;;		i2_USBTransferOnePacket
 26275 ;; This function is called by:
 26276 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 26277 ;; This function uses a non-reentrant model
 26278 ;;
 26279                           
 26280                           	psect	text153
 26281  01413E                     __ptext153:
 26282                           	opt stack 0
 26283  01413E                     _CDCInitEP:
 26284                           	opt stack 14
 26285                           
 26286                           ;usb_device_cdc.c: 298: line_coding.dwDTERate = 19200;
 26287                           
 26288                           ;incstack = 0
 26289  01413E  0101               	movlb	1	; () banked
 26290  014140  6BCD               	clrf	_line_coding& (0+255),b
 26291  014142  0E4B               	movlw	75
 26292  014144  6FCE               	movwf	(_line_coding+1)& (0+255),b
 26293  014146  6BCF               	clrf	(_line_coding+2)& (0+255),b
 26294  014148  6BD0               	clrf	(_line_coding+3)& (0+255),b
 26295                           
 26296                           ;usb_device_cdc.c: 299: line_coding.bCharFormat = 0x00;
 26297  01414A  6BD1               	clrf	(_line_coding+4)& (0+255),b
 26298                           
 26299                           ;usb_device_cdc.c: 300: line_coding.bParityType = 0x00;
 26300  01414C  6BD2               	clrf	(_line_coding+5)& (0+255),b
 26301                           
 26302                           ;usb_device_cdc.c: 301: line_coding.bDataBits = 0x08;
 26303  01414E  0E08               	movlw	8
 26304  014150  6FD3               	movwf	(_line_coding+6)& (0+255),b
 26305                           
 26306                           ;usb_device_cdc.c: 303: cdc_rx_len = 0;
 26307  014152  0100               	movlb	0	; () banked
 26308  014154  6B9A               	clrf	_cdc_rx_len& (0+255),b
 26309                           
 26310                           ; BSR set to: 0
 26311                           ;usb_device_cdc.c: 316: USBEnableEndpoint(1,0x02|0x10|0x08);
 26312  014156  0E1A               	movlw	26
 26313  014158  6E09               	movwf	USBEnableEndpoint@options,c
 26314  01415A  0E01               	movlw	1
 26315  01415C  EC52  F0A4         	call	_USBEnableEndpoint
 26316                           
 26317                           ;usb_device_cdc.c: 317: USBEnableEndpoint(2,0x02|0x04|0x10|0x08);
 26318  014160  0E1E               	movlw	30
 26319  014162  6E09               	movwf	USBEnableEndpoint@options,c
 26320  014164  0E02               	movlw	2
 26321  014166  EC52  F0A4         	call	_USBEnableEndpoint
 26322                           
 26323                           ;usb_device_cdc.c: 319: CDCDataOutHandle = USBTransferOnePacket(2,0,(uint8_t*)&cdc_data_
      +                          rx,sizeof(cdc_data_rx));
 26324  01416A  0E00               	movlw	0
 26325  01416C  6E01               	movwf	i2USBTransferOnePacket@dir,c
 26326  01416E  0E68               	movlw	low _cdc_data_rx
 26327  014170  6E02               	movwf	i2USBTransferOnePacket@data,c
 26328  014172  0E02               	movlw	high _cdc_data_rx
 26329  014174  6E03               	movwf	i2USBTransferOnePacket@data+1,c
 26330  014176  0E40               	movlw	64
 26331  014178  6E04               	movwf	i2USBTransferOnePacket@len,c
 26332  01417A  0E02               	movlw	2
 26333  01417C  EC35  F091         	call	i2_USBTransferOnePacket
 26334  014180  C001  F085         	movff	?i2_USBTransferOnePacket,_CDCDataOutHandle
 26335  014184  C002  F086         	movff	?i2_USBTransferOnePacket+1,_CDCDataOutHandle+1
 26336                           
 26337                           ;usb_device_cdc.c: 320: CDCDataInHandle = (0);
 26338  014188  0100               	movlb	0	; () banked
 26339  01418A  6B83               	clrf	_CDCDataInHandle& (0+255),b
 26340  01418C  6B84               	clrf	(_CDCDataInHandle+1)& (0+255),b
 26341                           
 26342                           ; BSR set to: 0
 26343                           ;usb_device_cdc.c: 347: cdc_trf_state = 0;
 26344  01418E  6B9B               	clrf	_cdc_trf_state& (0+255),b
 26345                           
 26346                           ; BSR set to: 0
 26347  014190  0C00               	retlw	0	;funcret
 26348  014192                     __end_of_CDCInitEP:
 26349                           	opt stack 0
 26350                           tosu	equ	0xFFF
 26351                           tosh	equ	0xFFE
 26352                           tosl	equ	0xFFD
 26353                           pclatu	equ	0xFFB
 26354                           pclath	equ	0xFFA
 26355                           tblptru	equ	0xFF8
 26356                           tblptrh	equ	0xFF7
 26357                           tblptrl	equ	0xFF6
 26358                           tablat	equ	0xFF5
 26359                           prodh	equ	0xFF4
 26360                           prodl	equ	0xFF3
 26361                           intcon	equ	0xFF2
 26362                           indf0	equ	0xFEF
 26363                           postinc0	equ	0xFEE
 26364                           fsr0h	equ	0xFEA
 26365                           fsr0l	equ	0xFE9
 26366                           wreg	equ	0xFE8
 26367                           indf1	equ	0xFE7
 26368                           postdec1	equ	0xFE5
 26369                           fsr1h	equ	0xFE2
 26370                           fsr1l	equ	0xFE1
 26371                           indf2	equ	0xFDF
 26372                           postinc2	equ	0xFDE
 26373                           postdec2	equ	0xFDD
 26374                           plusw2	equ	0xFDB
 26375                           fsr2h	equ	0xFDA
 26376                           fsr2l	equ	0xFD9
 26377                           status	equ	0xFD8
 26378                           
 26379 ;; *************** function i2_USBTransferOnePacket *****************
 26380 ;; Defined at:
 26381 ;;		line 995 in file "Library/USB/src/usb_device.c"
 26382 ;; Parameters:    Size  Location     Type
 26383 ;;  ep              1    wreg     unsigned char 
 26384 ;;  dir             1    0[COMRAM] unsigned char 
 26385 ;;  data            2    1[COMRAM] PTR unsigned char 
 26386 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
 26387 ;;  len             1    3[COMRAM] unsigned char 
 26388 ;; Auto vars:     Size  Location     Type
 26389 ;;  ep              1    8[COMRAM] unsigned char 
 26390 ;;  USBTransferO    2    9[COMRAM] PTR volatile struct __BD
 26391 ;;		 -> RAM(3903), NULL(0), BDT(48), 
 26392 ;; Return value:  Size  Location     Type
 26393 ;;                  2    0[COMRAM] PTR void 
 26394 ;; Registers used:
 26395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26396 ;; Tracked objects:
 26397 ;;		On entry : 0/0
 26398 ;;		On exit  : 0/0
 26399 ;;		Unchanged: 0/0
 26400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26402 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26403 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26404 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26405 ;;Total ram usage:       11 bytes
 26406 ;; Hardware stack levels used:    1
 26407 ;; This function calls:
 26408 ;;		Nothing
 26409 ;; This function is called by:
 26410 ;;		_CDCInitEP
 26411 ;; This function uses a non-reentrant model
 26412 ;;
 26413                           
 26414                           	psect	text154
 26415  01226A                     __ptext154:
 26416                           	opt stack 0
 26417  01226A                     i2_USBTransferOnePacket:
 26418                           	opt stack 15
 26419                           
 26420                           ; BSR set to: 0
 26421                           ;incstack = 0
 26422                           ;i2USBTransferOnePacket@ep stored from wreg
 26423  01226A  6E09               	movwf	i2USBTransferOnePacket@ep,c
 26424                           
 26425                           ;usb_device.c: 997: volatile BDT_ENTRY* handle;
 26426                           ;usb_device.c: 1000: if(dir != 0)
 26427  01226C  5001               	movf	i2USBTransferOnePacket@dir,w,c
 26428  01226E  E007               	bz	i2l8983
 26429                           
 26430                           ;usb_device.c: 1001: {
 26431                           ;usb_device.c: 1003: handle = pBDTEntryIn[ep];
 26432  012270  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26433  012272  0D02               	mullw	2
 26434  012274  0E6F               	movlw	low _pBDTEntryIn
 26435  012276  24F3               	addwf	prodl,w,c
 26436  012278  6ED9               	movwf	fsr2l,c
 26437  01227A  0E00               	movlw	high _pBDTEntryIn
 26438  01227C  D006               	goto	L20
 26439  01227E                     i2l8983:
 26440                           
 26441                           ;usb_device.c: 1005: else
 26442                           ;usb_device.c: 1006: {
 26443                           ;usb_device.c: 1008: handle = pBDTEntryOut[ep];
 26444  01227E  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26445  012280  0D02               	mullw	2
 26446  012282  0E75               	movlw	low _pBDTEntryOut
 26447  012284  24F3               	addwf	prodl,w,c
 26448  012286  6ED9               	movwf	fsr2l,c
 26449  012288  0E00               	movlw	high _pBDTEntryOut
 26450  01228A                     L20:
 26451  01228A  20F4               	addwfc	prodh,w,c
 26452  01228C  6EDA               	movwf	fsr2h,c
 26453  01228E  CFDE F00A          	movff	postinc2,i2USBTransferOnePacket@handle
 26454  012292  CFDD F00B          	movff	postdec2,i2USBTransferOnePacket@handle+1
 26455                           
 26456                           ;usb_device.c: 1009: }
 26457                           ;usb_device.c: 1013: if(handle == 0)
 26458  012296  500A               	movf	i2USBTransferOnePacket@handle,w,c
 26459  012298  100B               	iorwf	i2USBTransferOnePacket@handle+1,w,c
 26460  01229A  E103               	bnz	i2l8991
 26461                           
 26462                           ;usb_device.c: 1014: {
 26463                           ;usb_device.c: 1015: return 0;
 26464  01229C  6A01               	clrf	?i2_USBTransferOnePacket,c
 26465  01229E  6A02               	clrf	?i2_USBTransferOnePacket+1,c
 26466  0122A0  0C00               	retlw	0
 26467  0122A2                     i2l8991:
 26468                           
 26469                           ;usb_device.c: 1016: }
 26470                           ;usb_device.c: 1029: handle->ADR = ((uint16_t)(data));
 26471  0122A2  EE20 F002          	lfsr	2,2
 26472  0122A6  500A               	movf	i2USBTransferOnePacket@handle,w,c
 26473  0122A8  26D9               	addwf	fsr2l,f,c
 26474  0122AA  500B               	movf	i2USBTransferOnePacket@handle+1,w,c
 26475  0122AC  22DA               	addwfc	fsr2h,f,c
 26476  0122AE  C002  FFDE         	movff	i2USBTransferOnePacket@data,postinc2
 26477  0122B2  C003  FFDD         	movff	i2USBTransferOnePacket@data+1,postdec2
 26478                           
 26479                           ;usb_device.c: 1030: handle->CNT = len;
 26480  0122B6  EE20 F001          	lfsr	2,1
 26481  0122BA  500A               	movf	i2USBTransferOnePacket@handle,w,c
 26482  0122BC  26D9               	addwf	fsr2l,f,c
 26483  0122BE  500B               	movf	i2USBTransferOnePacket@handle+1,w,c
 26484  0122C0  22DA               	addwfc	fsr2h,f,c
 26485  0122C2  C004  FFDF         	movff	i2USBTransferOnePacket@len,indf2
 26486                           
 26487                           ;usb_device.c: 1031: handle->STAT.Val &= 0x40;
 26488  0122C6  C00A  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 26489  0122CA  C00B  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 26490  0122CE  0E40               	movlw	64
 26491  0122D0  16DF               	andwf	indf2,f,c
 26492                           
 26493                           ;usb_device.c: 1032: handle->STAT.Val |= (0x08 & 0x08);
 26494  0122D2  C00A  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 26495  0122D6  C00B  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 26496  0122DA  0E00               	movlw	0
 26497  0122DC  86DB               	bsf	plusw2,3,c
 26498                           
 26499                           ;usb_device.c: 1033: handle->STAT.Val |= 0x80;
 26500  0122DE  C00A  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 26501  0122E2  C00B  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 26502  0122E6  8EDB               	bsf	plusw2,7,c
 26503                           
 26504                           ;usb_device.c: 1036: if(dir != 0)
 26505  0122E8  5001               	movf	i2USBTransferOnePacket@dir,w,c
 26506  0122EA  E018               	bz	i2l9003
 26507                           
 26508                           ;usb_device.c: 1037: {
 26509                           ;usb_device.c: 1039: pBDTEntryIn[ep] = (BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[ep]) ^ 0x000
      +                          4);
 26510  0122EC  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26511  0122EE  0D02               	mullw	2
 26512  0122F0  0E6F               	movlw	low _pBDTEntryIn
 26513  0122F2  24F3               	addwf	prodl,w,c
 26514  0122F4  6ED9               	movwf	fsr2l,c
 26515  0122F6  0E00               	movlw	high _pBDTEntryIn
 26516  0122F8  20F4               	addwfc	prodh,w,c
 26517  0122FA  6EDA               	movwf	fsr2h,c
 26518  0122FC  CFDE F005          	movff	postinc2,??i2_USBTransferOnePacket
 26519  012300  CFDD F006          	movff	postdec2,??i2_USBTransferOnePacket+1
 26520  012304  0E04               	movlw	4
 26521  012306  1805               	xorwf	??i2_USBTransferOnePacket,w,c
 26522  012308  6E07               	movwf	(??i2_USBTransferOnePacket+2)& (0+255),c
 26523  01230A  5006               	movf	??i2_USBTransferOnePacket+1,w,c
 26524  01230C  6E08               	movwf	(??i2_USBTransferOnePacket+3)& (0+255),c
 26525  01230E  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26526  012310  0D02               	mullw	2
 26527  012312  0E6F               	movlw	low _pBDTEntryIn
 26528  012314  24F3               	addwf	prodl,w,c
 26529  012316  6ED9               	movwf	fsr2l,c
 26530  012318  0E00               	movlw	high _pBDTEntryIn
 26531  01231A  D017               	goto	L21
 26532  01231C                     i2l9003:
 26533                           
 26534                           ;usb_device.c: 1041: else
 26535                           ;usb_device.c: 1042: {
 26536                           ;usb_device.c: 1044: pBDTEntryOut[ep] = (BDT_ENTRY*)(((uintptr_t)pBDTEntryOut[ep]) ^ 0x0
      +                          004);
 26537  01231C  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26538  01231E  0D02               	mullw	2
 26539  012320  0E75               	movlw	low _pBDTEntryOut
 26540  012322  24F3               	addwf	prodl,w,c
 26541  012324  6ED9               	movwf	fsr2l,c
 26542  012326  0E00               	movlw	high _pBDTEntryOut
 26543  012328  20F4               	addwfc	prodh,w,c
 26544  01232A  6EDA               	movwf	fsr2h,c
 26545  01232C  CFDE F005          	movff	postinc2,??i2_USBTransferOnePacket
 26546  012330  CFDD F006          	movff	postdec2,??i2_USBTransferOnePacket+1
 26547  012334  0E04               	movlw	4
 26548  012336  1805               	xorwf	??i2_USBTransferOnePacket,w,c
 26549  012338  6E07               	movwf	(??i2_USBTransferOnePacket+2)& (0+255),c
 26550  01233A  5006               	movf	??i2_USBTransferOnePacket+1,w,c
 26551  01233C  6E08               	movwf	(??i2_USBTransferOnePacket+3)& (0+255),c
 26552  01233E  5009               	movf	i2USBTransferOnePacket@ep,w,c
 26553  012340  0D02               	mullw	2
 26554  012342  0E75               	movlw	low _pBDTEntryOut
 26555  012344  24F3               	addwf	prodl,w,c
 26556  012346  6ED9               	movwf	fsr2l,c
 26557  012348  0E00               	movlw	high _pBDTEntryOut
 26558  01234A                     L21:
 26559  01234A  20F4               	addwfc	prodh,w,c
 26560  01234C  6EDA               	movwf	fsr2h,c
 26561  01234E  C007  FFDE         	movff	??i2_USBTransferOnePacket+2,postinc2
 26562  012352  C008  FFDD         	movff	??i2_USBTransferOnePacket+3,postdec2
 26563                           
 26564                           ;usb_device.c: 1045: }
 26565                           ;usb_device.c: 1046: return (void*)handle;
 26566  012356  C00A  F001         	movff	i2USBTransferOnePacket@handle,?i2_USBTransferOnePacket
 26567  01235A  C00B  F002         	movff	i2USBTransferOnePacket@handle+1,?i2_USBTransferOnePacket+1
 26568  01235E  0012               	return	
 26569  012360                     __end_ofi2_USBTransferOnePacket:
 26570                           	opt stack 0
 26571                           tosu	equ	0xFFF
 26572                           tosh	equ	0xFFE
 26573                           tosl	equ	0xFFD
 26574                           pclatu	equ	0xFFB
 26575                           pclath	equ	0xFFA
 26576                           tblptru	equ	0xFF8
 26577                           tblptrh	equ	0xFF7
 26578                           tblptrl	equ	0xFF6
 26579                           tablat	equ	0xFF5
 26580                           prodh	equ	0xFF4
 26581                           prodl	equ	0xFF3
 26582                           intcon	equ	0xFF2
 26583                           indf0	equ	0xFEF
 26584                           postinc0	equ	0xFEE
 26585                           fsr0h	equ	0xFEA
 26586                           fsr0l	equ	0xFE9
 26587                           wreg	equ	0xFE8
 26588                           indf1	equ	0xFE7
 26589                           postdec1	equ	0xFE5
 26590                           fsr1h	equ	0xFE2
 26591                           fsr1l	equ	0xFE1
 26592                           indf2	equ	0xFDF
 26593                           postinc2	equ	0xFDE
 26594                           postdec2	equ	0xFDD
 26595                           plusw2	equ	0xFDB
 26596                           fsr2h	equ	0xFDA
 26597                           fsr2l	equ	0xFD9
 26598                           status	equ	0xFD8
 26599                           
 26600 ;; *************** function _USBEnableEndpoint *****************
 26601 ;; Defined at:
 26602 ;;		line 878 in file "Library/USB/src/usb_device.c"
 26603 ;; Parameters:    Size  Location     Type
 26604 ;;  ep              1    wreg     unsigned char 
 26605 ;;  options         1    8[COMRAM] unsigned char 
 26606 ;; Auto vars:     Size  Location     Type
 26607 ;;  ep              1   11[COMRAM] unsigned char 
 26608 ;;  p               2    9[COMRAM] PTR unsigned char 
 26609 ;;		 -> UEP0(1), 
 26610 ;; Return value:  Size  Location     Type
 26611 ;;                  1    wreg      void 
 26612 ;; Registers used:
 26613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26614 ;; Tracked objects:
 26615 ;;		On entry : 0/0
 26616 ;;		On exit  : 0/0
 26617 ;;		Unchanged: 0/0
 26618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26619 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26620 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26622 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26623 ;;Total ram usage:        4 bytes
 26624 ;; Hardware stack levels used:    1
 26625 ;; Hardware stack levels required when called:    1
 26626 ;; This function calls:
 26627 ;;		_USBConfigureEndpoint
 26628 ;; This function is called by:
 26629 ;;		_CDCInitEP
 26630 ;; This function uses a non-reentrant model
 26631 ;;
 26632                           
 26633                           	psect	text155
 26634  0148A4                     __ptext155:
 26635                           	opt stack 0
 26636  0148A4                     _USBEnableEndpoint:
 26637                           	opt stack 14
 26638                           
 26639                           ;incstack = 0
 26640                           ;USBEnableEndpoint@ep stored from wreg
 26641  0148A4  6E0C               	movwf	USBEnableEndpoint@ep,c
 26642                           
 26643                           ;usb_device.c: 880: unsigned char* p;
 26644                           ;usb_device.c: 884: if(options & 0x04)
 26645  0148A6  A409               	btfss	USBEnableEndpoint@options,2,c
 26646  0148A8  D004               	goto	i2l8899
 26647                           
 26648                           ;usb_device.c: 885: {
 26649                           ;usb_device.c: 886: USBConfigureEndpoint(ep, 0);
 26650  0148AA  6A01               	clrf	USBConfigureEndpoint@direction,c
 26651  0148AC  500C               	movf	USBEnableEndpoint@ep,w,c
 26652  0148AE  EC37  F099         	call	_USBConfigureEndpoint
 26653  0148B2                     i2l8899:
 26654                           
 26655                           ;usb_device.c: 887: }
 26656                           ;usb_device.c: 888: if(options & 0x02)
 26657  0148B2  A209               	btfss	USBEnableEndpoint@options,1,c
 26658  0148B4  D005               	goto	i2l8903
 26659                           
 26660                           ;usb_device.c: 889: {
 26661                           ;usb_device.c: 890: USBConfigureEndpoint(ep, 1);
 26662  0148B6  0E01               	movlw	1
 26663  0148B8  6E01               	movwf	USBConfigureEndpoint@direction,c
 26664  0148BA  500C               	movf	USBEnableEndpoint@ep,w,c
 26665  0148BC  EC37  F099         	call	_USBConfigureEndpoint
 26666  0148C0                     i2l8903:
 26667                           
 26668                           ;usb_device.c: 891: }
 26669                           ;usb_device.c: 899: p = (unsigned char*)(&UEP0+ep);
 26670  0148C0  500C               	movf	USBEnableEndpoint@ep,w,c
 26671  0148C2  0D01               	mullw	1
 26672  0148C4  0E4C               	movlw	76
 26673  0148C6  24F3               	addwf	prodl,w,c
 26674  0148C8  6E0A               	movwf	USBEnableEndpoint@p,c
 26675  0148CA  0E0F               	movlw	15
 26676  0148CC  20F4               	addwfc	prodh,w,c
 26677  0148CE  6E0B               	movwf	USBEnableEndpoint@p+1,c
 26678                           
 26679                           ;usb_device.c: 901: *p = options;
 26680  0148D0  C00A  FFD9         	movff	USBEnableEndpoint@p,fsr2l
 26681  0148D4  C00B  FFDA         	movff	USBEnableEndpoint@p+1,fsr2h
 26682  0148D8  C009  FFDF         	movff	USBEnableEndpoint@options,indf2
 26683  0148DC  0012               	return		;funcret
 26684  0148DE                     __end_of_USBEnableEndpoint:
 26685                           	opt stack 0
 26686                           tosu	equ	0xFFF
 26687                           tosh	equ	0xFFE
 26688                           tosl	equ	0xFFD
 26689                           pclatu	equ	0xFFB
 26690                           pclath	equ	0xFFA
 26691                           tblptru	equ	0xFF8
 26692                           tblptrh	equ	0xFF7
 26693                           tblptrl	equ	0xFF6
 26694                           tablat	equ	0xFF5
 26695                           prodh	equ	0xFF4
 26696                           prodl	equ	0xFF3
 26697                           intcon	equ	0xFF2
 26698                           indf0	equ	0xFEF
 26699                           postinc0	equ	0xFEE
 26700                           fsr0h	equ	0xFEA
 26701                           fsr0l	equ	0xFE9
 26702                           wreg	equ	0xFE8
 26703                           indf1	equ	0xFE7
 26704                           postdec1	equ	0xFE5
 26705                           fsr1h	equ	0xFE2
 26706                           fsr1l	equ	0xFE1
 26707                           indf2	equ	0xFDF
 26708                           postinc2	equ	0xFDE
 26709                           postdec2	equ	0xFDD
 26710                           plusw2	equ	0xFDB
 26711                           fsr2h	equ	0xFDA
 26712                           fsr2l	equ	0xFD9
 26713                           status	equ	0xFD8
 26714                           
 26715 ;; *************** function _USBConfigureEndpoint *****************
 26716 ;; Defined at:
 26717 ;;		line 1543 in file "Library/USB/src/usb_device.c"
 26718 ;; Parameters:    Size  Location     Type
 26719 ;;  EPNum           1    wreg     unsigned char 
 26720 ;;  direction       1    0[COMRAM] unsigned char 
 26721 ;; Auto vars:     Size  Location     Type
 26722 ;;  EPNum           1    5[COMRAM] unsigned char 
 26723 ;;  handle          2    6[COMRAM] PTR volatile struct __BD
 26724 ;;		 -> BDT(48), 
 26725 ;; Return value:  Size  Location     Type
 26726 ;;                  1    wreg      void 
 26727 ;; Registers used:
 26728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26729 ;; Tracked objects:
 26730 ;;		On entry : 0/0
 26731 ;;		On exit  : 0/0
 26732 ;;		Unchanged: 0/0
 26733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26734 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26736 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26737 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26738 ;;Total ram usage:        8 bytes
 26739 ;; Hardware stack levels used:    1
 26740 ;; This function calls:
 26741 ;;		Nothing
 26742 ;; This function is called by:
 26743 ;;		_USBEnableEndpoint
 26744 ;; This function uses a non-reentrant model
 26745 ;;
 26746                           
 26747                           	psect	text156
 26748  01326E                     __ptext156:
 26749                           	opt stack 0
 26750  01326E                     _USBConfigureEndpoint:
 26751                           	opt stack 14
 26752                           
 26753                           ;incstack = 0
 26754                           ;USBConfigureEndpoint@EPNum stored from wreg
 26755  01326E  6E06               	movwf	USBConfigureEndpoint@EPNum,c
 26756                           
 26757                           ;usb_device.c: 1545: volatile BDT_ENTRY* handle;
 26758                           ;usb_device.c: 1549: handle = (volatile BDT_ENTRY*)&BDT[0];
 26759  013270  6A07               	clrf	USBConfigureEndpoint@handle,c
 26760  013272  0E04               	movlw	4
 26761  013274  6E08               	movwf	USBConfigureEndpoint@handle+1,c
 26762                           
 26763                           ;usb_device.c: 1550: handle += (4*EPNum+2*direction+0u);
 26764  013276  5001               	movf	USBConfigureEndpoint@direction,w,c
 26765  013278  6E02               	movwf	??_USBConfigureEndpoint& (0+255),c
 26766  01327A  6A03               	clrf	(??_USBConfigureEndpoint+1)& (0+255),c
 26767  01327C  90D8               	bcf	status,0,c
 26768  01327E  3602               	rlcf	??_USBConfigureEndpoint,f,c
 26769  013280  3603               	rlcf	??_USBConfigureEndpoint+1,f,c
 26770  013282  5006               	movf	USBConfigureEndpoint@EPNum,w,c
 26771  013284  6E04               	movwf	(??_USBConfigureEndpoint+2)& (0+255),c
 26772  013286  6A05               	clrf	(??_USBConfigureEndpoint+3)& (0+255),c
 26773  013288  90D8               	bcf	status,0,c
 26774  01328A  3604               	rlcf	??_USBConfigureEndpoint+2,f,c
 26775  01328C  3605               	rlcf	??_USBConfigureEndpoint+3,f,c
 26776  01328E  90D8               	bcf	status,0,c
 26777  013290  3604               	rlcf	??_USBConfigureEndpoint+2,f,c
 26778  013292  3605               	rlcf	??_USBConfigureEndpoint+3,f,c
 26779  013294  5002               	movf	??_USBConfigureEndpoint,w,c
 26780  013296  2604               	addwf	??_USBConfigureEndpoint+2,f,c
 26781  013298  5003               	movf	??_USBConfigureEndpoint+1,w,c
 26782  01329A  2205               	addwfc	??_USBConfigureEndpoint+3,f,c
 26783  01329C  90D8               	bcf	status,0,c
 26784  01329E  3604               	rlcf	??_USBConfigureEndpoint+2,f,c
 26785  0132A0  3605               	rlcf	??_USBConfigureEndpoint+3,f,c
 26786  0132A2  90D8               	bcf	status,0,c
 26787  0132A4  3604               	rlcf	??_USBConfigureEndpoint+2,f,c
 26788  0132A6  3605               	rlcf	??_USBConfigureEndpoint+3,f,c
 26789  0132A8  5004               	movf	??_USBConfigureEndpoint+2,w,c
 26790  0132AA  2607               	addwf	USBConfigureEndpoint@handle,f,c
 26791  0132AC  5005               	movf	??_USBConfigureEndpoint+3,w,c
 26792  0132AE  2208               	addwfc	USBConfigureEndpoint@handle+1,f,c
 26793                           
 26794                           ;usb_device.c: 1552: handle->STAT.UOWN = 0;
 26795  0132B0  C007  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
 26796  0132B4  C008  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
 26797  0132B8  9EDF               	bcf	indf2,7,c
 26798                           
 26799                           ;usb_device.c: 1557: if(direction == 0)
 26800  0132BA  5001               	movf	USBConfigureEndpoint@direction,w,c
 26801  0132BC  E107               	bnz	i2l8791
 26802                           
 26803                           ;usb_device.c: 1558: {
 26804                           ;usb_device.c: 1559: pBDTEntryOut[EPNum] = handle;
 26805  0132BE  5006               	movf	USBConfigureEndpoint@EPNum,w,c
 26806  0132C0  0D02               	mullw	2
 26807  0132C2  0E75               	movlw	low _pBDTEntryOut
 26808  0132C4  24F3               	addwf	prodl,w,c
 26809  0132C6  6ED9               	movwf	fsr2l,c
 26810  0132C8  0E00               	movlw	high _pBDTEntryOut
 26811  0132CA  D006               	goto	L22
 26812  0132CC                     i2l8791:
 26813                           
 26814                           ;usb_device.c: 1561: else
 26815                           ;usb_device.c: 1562: {
 26816                           ;usb_device.c: 1563: pBDTEntryIn[EPNum] = handle;
 26817  0132CC  5006               	movf	USBConfigureEndpoint@EPNum,w,c
 26818  0132CE  0D02               	mullw	2
 26819  0132D0  0E6F               	movlw	low _pBDTEntryIn
 26820  0132D2  24F3               	addwf	prodl,w,c
 26821  0132D4  6ED9               	movwf	fsr2l,c
 26822  0132D6  0E00               	movlw	high _pBDTEntryIn
 26823  0132D8                     L22:
 26824  0132D8  20F4               	addwfc	prodh,w,c
 26825  0132DA  6EDA               	movwf	fsr2h,c
 26826  0132DC  C007  FFDE         	movff	USBConfigureEndpoint@handle,postinc2
 26827  0132E0  C008  FFDD         	movff	USBConfigureEndpoint@handle+1,postdec2
 26828                           
 26829                           ;usb_device.c: 1564: }
 26830                           ;usb_device.c: 1567: handle->STAT.DTS = 0;
 26831  0132E4  C007  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
 26832  0132E8  C008  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
 26833  0132EC  9CDF               	bcf	indf2,6,c
 26834                           
 26835                           ;usb_device.c: 1568: (handle+1)->STAT.DTS = 1;
 26836  0132EE  EE20 F004          	lfsr	2,4
 26837  0132F2  5007               	movf	USBConfigureEndpoint@handle,w,c
 26838  0132F4  26D9               	addwf	fsr2l,f,c
 26839  0132F6  5008               	movf	USBConfigureEndpoint@handle+1,w,c
 26840  0132F8  22DA               	addwfc	fsr2h,f,c
 26841  0132FA  8CDF               	bsf	indf2,6,c
 26842  0132FC  0012               	return		;funcret
 26843  0132FE                     __end_of_USBConfigureEndpoint:
 26844                           	opt stack 0
 26845                           tosu	equ	0xFFF
 26846                           tosh	equ	0xFFE
 26847                           tosl	equ	0xFFD
 26848                           pclatu	equ	0xFFB
 26849                           pclath	equ	0xFFA
 26850                           tblptru	equ	0xFF8
 26851                           tblptrh	equ	0xFF7
 26852                           tblptrl	equ	0xFF6
 26853                           tablat	equ	0xFF5
 26854                           prodh	equ	0xFF4
 26855                           prodl	equ	0xFF3
 26856                           intcon	equ	0xFF2
 26857                           indf0	equ	0xFEF
 26858                           postinc0	equ	0xFEE
 26859                           fsr0h	equ	0xFEA
 26860                           fsr0l	equ	0xFE9
 26861                           wreg	equ	0xFE8
 26862                           indf1	equ	0xFE7
 26863                           postdec1	equ	0xFE5
 26864                           fsr1h	equ	0xFE2
 26865                           fsr1l	equ	0xFE1
 26866                           indf2	equ	0xFDF
 26867                           postinc2	equ	0xFDE
 26868                           postdec2	equ	0xFDD
 26869                           plusw2	equ	0xFDB
 26870                           fsr2h	equ	0xFDA
 26871                           fsr2l	equ	0xFD9
 26872                           status	equ	0xFD8
 26873                           
 26874 ;; *************** function _USBCtrlTrfOutHandler *****************
 26875 ;; Defined at:
 26876 ;;		line 2538 in file "Library/USB/src/usb_device.c"
 26877 ;; Parameters:    Size  Location     Type
 26878 ;;		None
 26879 ;; Auto vars:     Size  Location     Type
 26880 ;;		None
 26881 ;; Return value:  Size  Location     Type
 26882 ;;                  1    wreg      void 
 26883 ;; Registers used:
 26884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26885 ;; Tracked objects:
 26886 ;;		On entry : 0/0
 26887 ;;		On exit  : 0/0
 26888 ;;		Unchanged: 0/0
 26889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26894 ;;Total ram usage:        0 bytes
 26895 ;; Hardware stack levels used:    1
 26896 ;; Hardware stack levels required when called:    2
 26897 ;; This function calls:
 26898 ;;		_USBCtrlTrfRxService
 26899 ;; This function is called by:
 26900 ;;		_USBCtrlEPService
 26901 ;; This function uses a non-reentrant model
 26902 ;;
 26903                           
 26904                           	psect	text157
 26905  014192                     __ptext157:
 26906                           	opt stack 0
 26907  014192                     _USBCtrlTrfOutHandler:
 26908                           	opt stack 14
 26909                           
 26910                           ;usb_device.c: 2540: if(controlTransferState == 2)
 26911                           
 26912                           ;incstack = 0
 26913  014192  0E02               	movlw	2
 26914  014194  184D               	xorwf	_controlTransferState,w,c	;volatile
 26915  014196  E102               	bnz	i2l10673
 26916                           
 26917                           ;usb_device.c: 2541: {
 26918                           ;usb_device.c: 2542: USBCtrlTrfRxService();
 26919  014198  EFA8  F08F         	goto	_USBCtrlTrfRxService	;wreg free
 26920  01419C                     i2l10673:
 26921                           
 26922                           ;usb_device.c: 2544: else
 26923                           ;usb_device.c: 2545: {
 26924                           ;usb_device.c: 2548: controlTransferState = 0;
 26925  01419C  0E00               	movlw	0
 26926  01419E  6E4D               	movwf	_controlTransferState,c	;volatile
 26927                           
 26928                           ;usb_device.c: 2555: if(BothEP0OutUOWNsSet == 0)
 26929  0141A0  5043               	movf	_BothEP0OutUOWNsSet,w,c	;volatile
 26930  0141A2  E11F               	bnz	i2l10681
 26931                           
 26932                           ;usb_device.c: 2556: {
 26933                           ;usb_device.c: 2557: pBDTEntryEP0OutNext->CNT = 8;
 26934  0141A4  EE20 F001          	lfsr	2,1
 26935  0141A8  5040               	movf	_pBDTEntryEP0OutNext,w,c
 26936  0141AA  26D9               	addwf	fsr2l,f,c
 26937  0141AC  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 26938  0141AE  22DA               	addwfc	fsr2h,f,c
 26939  0141B0  0E08               	movlw	8
 26940  0141B2  6EDF               	movwf	indf2,c
 26941                           
 26942                           ;usb_device.c: 2558: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 26943  0141B4  EE20 F002          	lfsr	2,2
 26944  0141B8  5040               	movf	_pBDTEntryEP0OutNext,w,c
 26945  0141BA  26D9               	addwf	fsr2l,f,c
 26946  0141BC  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 26947  0141BE  22DA               	addwfc	fsr2h,f,c
 26948  0141C0  0E30               	movlw	48
 26949  0141C2  6EDE               	movwf	postinc2,c
 26950  0141C4  0E04               	movlw	4
 26951  0141C6  6EDD               	movwf	postdec2,c
 26952                           
 26953                           ;usb_device.c: 2559: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 26954  0141C8  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 26955  0141CC  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 26956  0141D0  0E0C               	movlw	12
 26957  0141D2  6EDF               	movwf	indf2,c
 26958                           
 26959                           ;usb_device.c: 2560: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 26960  0141D4  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 26961  0141D8  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 26962  0141DC  0E00               	movlw	0
 26963  0141DE  8EDB               	bsf	plusw2,7,c
 26964                           
 26965                           ;usb_device.c: 2561: }
 26966  0141E0  0C00               	retlw	0
 26967  0141E2                     i2l10681:
 26968                           
 26969                           ;usb_device.c: 2562: else
 26970                           ;usb_device.c: 2563: {
 26971                           ;usb_device.c: 2564: BothEP0OutUOWNsSet = 0;
 26972  0141E2  6A43               	clrf	_BothEP0OutUOWNsSet,c	;volatile
 26973  0141E4  0C00               	retlw	0
 26974  0141E6                     __end_of_USBCtrlTrfOutHandler:
 26975                           	opt stack 0
 26976                           tosu	equ	0xFFF
 26977                           tosh	equ	0xFFE
 26978                           tosl	equ	0xFFD
 26979                           pclatu	equ	0xFFB
 26980                           pclath	equ	0xFFA
 26981                           tblptru	equ	0xFF8
 26982                           tblptrh	equ	0xFF7
 26983                           tblptrl	equ	0xFF6
 26984                           tablat	equ	0xFF5
 26985                           prodh	equ	0xFF4
 26986                           prodl	equ	0xFF3
 26987                           intcon	equ	0xFF2
 26988                           indf0	equ	0xFEF
 26989                           postinc0	equ	0xFEE
 26990                           fsr0h	equ	0xFEA
 26991                           fsr0l	equ	0xFE9
 26992                           wreg	equ	0xFE8
 26993                           indf1	equ	0xFE7
 26994                           postdec1	equ	0xFE5
 26995                           fsr1h	equ	0xFE2
 26996                           fsr1l	equ	0xFE1
 26997                           indf2	equ	0xFDF
 26998                           postinc2	equ	0xFDE
 26999                           postdec2	equ	0xFDD
 27000                           plusw2	equ	0xFDB
 27001                           fsr2h	equ	0xFDA
 27002                           fsr2l	equ	0xFD9
 27003                           status	equ	0xFD8
 27004                           
 27005 ;; *************** function _USBCtrlTrfRxService *****************
 27006 ;; Defined at:
 27007 ;;		line 1852 in file "Library/USB/src/usb_device.c"
 27008 ;; Parameters:    Size  Location     Type
 27009 ;;		None
 27010 ;; Auto vars:     Size  Location     Type
 27011 ;;  byteToRead      1    1[COMRAM] unsigned char 
 27012 ;;  i               1    0[COMRAM] unsigned char 
 27013 ;; Return value:  Size  Location     Type
 27014 ;;                  1    wreg      void 
 27015 ;; Registers used:
 27016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27017 ;; Tracked objects:
 27018 ;;		On entry : 0/0
 27019 ;;		On exit  : 0/0
 27020 ;;		Unchanged: 0/0
 27021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27025 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27026 ;;Total ram usage:        2 bytes
 27027 ;; Hardware stack levels used:    1
 27028 ;; Hardware stack levels required when called:    1
 27029 ;; This function calls:
 27030 ;;		_USBCtrlEPAllowStatusStage
 27031 ;; This function is called by:
 27032 ;;		_USBCtrlTrfOutHandler
 27033 ;; This function uses a non-reentrant model
 27034 ;;
 27035                           
 27036                           	psect	text158
 27037  011F50                     __ptext158:
 27038                           	opt stack 0
 27039  011F50                     _USBCtrlTrfRxService:
 27040                           	opt stack 14
 27041                           
 27042                           ;usb_device.c: 1854: uint8_t byteToRead;
 27043                           ;usb_device.c: 1855: uint8_t i;
 27044                           ;usb_device.c: 1859: byteToRead = pBDTEntryEP0OutCurrent->CNT;
 27045                           
 27046                           ;incstack = 0
 27047  011F50  EE20 F001          	lfsr	2,1
 27048  011F54  503E               	movf	_pBDTEntryEP0OutCurrent,w,c
 27049  011F56  26D9               	addwf	fsr2l,f,c
 27050  011F58  503F               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 27051  011F5A  22DA               	addwfc	fsr2h,f,c
 27052  011F5C  50DF               	movf	indf2,w,c
 27053  011F5E  6E02               	movwf	USBCtrlTrfRxService@byteToRead,c
 27054                           
 27055                           ;usb_device.c: 1865: if(byteToRead > outPipes[0].wCount.Val)
 27056  011F60  5002               	movf	USBCtrlTrfRxService@byteToRead,w,c
 27057  011F62  0100               	movlb	0	; () banked
 27058  011F64  5D64               	subwf	(_outPipes+4)& (0+255),w,b	;volatile
 27059  011F66  0E00               	movlw	0
 27060  011F68  5965               	subwfb	(_outPipes+5)& (0+255),w,b	;volatile
 27061  011F6A  E202               	bc	i2l10221
 27062                           
 27063                           ; BSR set to: 0
 27064                           ;usb_device.c: 1866: {
 27065                           ;usb_device.c: 1867: byteToRead = outPipes[0].wCount.Val;
 27066  011F6C  C064  F002         	movff	_outPipes+4,USBCtrlTrfRxService@byteToRead	;volatile
 27067  011F70                     i2l10221:
 27068                           
 27069                           ; BSR set to: 0
 27070                           ;usb_device.c: 1868: }
 27071                           ;usb_device.c: 1870: outPipes[0].wCount.Val -= byteToRead;
 27072  011F70  5002               	movf	USBCtrlTrfRxService@byteToRead,w,c
 27073  011F72  0100               	movlb	0	; () banked
 27074  011F74  5F64               	subwf	(_outPipes+4)& (0+255),f,b	;volatile
 27075  011F76  0E00               	movlw	0
 27076  011F78  5B65               	subwfb	(_outPipes+5)& (0+255),f,b	;volatile
 27077                           
 27078                           ; BSR set to: 0
 27079                           ;usb_device.c: 1874: for(i=0;i<byteToRead;i++)
 27080  011F7A  6A01               	clrf	USBCtrlTrfRxService@i,c
 27081  011F7C  D012               	goto	i2l10231
 27082  011F7E                     i2l10225:
 27083                           
 27084                           ; BSR set to: 0
 27085                           ;usb_device.c: 1875: {
 27086                           ;usb_device.c: 1876: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
 27087  011F7E  5001               	movf	USBCtrlTrfRxService@i,w,c
 27088  011F80  0D01               	mullw	1
 27089  011F82  0E38               	movlw	56
 27090  011F84  24F3               	addwf	prodl,w,c
 27091  011F86  6ED9               	movwf	fsr2l,c
 27092  011F88  0E04               	movlw	4
 27093  011F8A  20F4               	addwfc	prodh,w,c
 27094  011F8C  6EDA               	movwf	fsr2h,c
 27095  011F8E  C060  FFE1         	movff	_outPipes,fsr1l	;volatile
 27096  011F92  C061  FFE2         	movff	_outPipes+1,fsr1h	;volatile
 27097  011F96  CFDF FFE7          	movff	indf2,indf1
 27098                           
 27099                           ; BSR set to: 0
 27100  011F9A  0100               	movlb	0	; () banked
 27101  011F9C  4B60               	infsnz	_outPipes& (0+255),f,b	;volatile
 27102  011F9E  2B61               	incf	(_outPipes+1)& (0+255),f,b	;volatile
 27103                           
 27104                           ; BSR set to: 0
 27105  011FA0  2A01               	incf	USBCtrlTrfRxService@i,f,c
 27106  011FA2                     i2l10231:
 27107                           
 27108                           ; BSR set to: 0
 27109  011FA2  5002               	movf	USBCtrlTrfRxService@byteToRead,w,c
 27110  011FA4  5C01               	subwf	USBCtrlTrfRxService@i,w,c
 27111  011FA6  E201               	bc	i2l10233
 27112  011FA8  D7EA               	goto	i2l10225
 27113  011FAA                     i2l10233:
 27114                           
 27115                           ; BSR set to: 0
 27116                           ;usb_device.c: 1877: }
 27117                           ;usb_device.c: 1881: if(outPipes[0].wCount.Val > 0)
 27118  011FAA  0100               	movlb	0	; () banked
 27119  011FAC  5164               	movf	(_outPipes+4)& (0+255),w,b	;volatile
 27120  011FAE  1165               	iorwf	(_outPipes+5)& (0+255),w,b	;volatile
 27121  011FB0  E032               	bz	i2l10247
 27122                           
 27123                           ; BSR set to: 0
 27124                           ;usb_device.c: 1882: {
 27125                           ;usb_device.c: 1883: pBDTEntryEP0OutNext->CNT = 8;
 27126  011FB2  EE20 F001          	lfsr	2,1
 27127  011FB6  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27128  011FB8  26D9               	addwf	fsr2l,f,c
 27129  011FBA  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27130  011FBC  22DA               	addwfc	fsr2h,f,c
 27131  011FBE  0E08               	movlw	8
 27132  011FC0  6EDF               	movwf	indf2,c
 27133                           
 27134                           ;usb_device.c: 1884: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&CtrlTrfData));
 27135  011FC2  EE20 F002          	lfsr	2,2
 27136  011FC6  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27137  011FC8  26D9               	addwf	fsr2l,f,c
 27138  011FCA  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27139  011FCC  22DA               	addwfc	fsr2h,f,c
 27140  011FCE  0E38               	movlw	56
 27141  011FD0  6EDE               	movwf	postinc2,c
 27142  011FD2  0E04               	movlw	4
 27143  011FD4  6EDD               	movwf	postdec2,c
 27144                           
 27145                           ; BSR set to: 0
 27146                           ;usb_device.c: 1885: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 27147  011FD6  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 27148  011FDA  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 27149  011FDE  BCDF               	btfsc	indf2,6,c
 27150  011FE0  D00D               	goto	i2l10243
 27151                           
 27152                           ; BSR set to: 0
 27153                           ;usb_device.c: 1886: {
 27154                           ;usb_device.c: 1887: pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 27155  011FE2  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27156  011FE6  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27157  011FEA  0E48               	movlw	72
 27158  011FEC  6EDF               	movwf	indf2,c
 27159                           
 27160                           ; BSR set to: 0
 27161                           ;usb_device.c: 1888: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 27162  011FEE  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27163  011FF2  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27164  011FF6  0E00               	movlw	0
 27165  011FF8  8EDB               	bsf	plusw2,7,c
 27166                           
 27167                           ;usb_device.c: 1889: }
 27168  011FFA  0C00               	retlw	0
 27169  011FFC                     i2l10243:
 27170                           
 27171                           ; BSR set to: 0
 27172                           ;usb_device.c: 1890: else
 27173                           ;usb_device.c: 1891: {
 27174                           ;usb_device.c: 1892: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08);
 27175  011FFC  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27176  012000  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27177  012004  0E08               	movlw	8
 27178  012006  6EDF               	movwf	indf2,c
 27179                           
 27180                           ; BSR set to: 0
 27181                           ;usb_device.c: 1893: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 27182  012008  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27183  01200C  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27184  012010  0E00               	movlw	0
 27185  012012  8EDB               	bsf	plusw2,7,c
 27186                           
 27187                           ; BSR set to: 0
 27188                           ;usb_device.c: 1894: }
 27189                           ;usb_device.c: 1895: }
 27190  012014  0C00               	retlw	0
 27191  012016                     i2l10247:
 27192                           
 27193                           ; BSR set to: 0
 27194                           ;usb_device.c: 1896: else
 27195                           ;usb_device.c: 1897: {
 27196                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->CNT = 8;
 27197  012016  EE20 F001          	lfsr	2,1
 27198  01201A  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27199  01201C  26D9               	addwf	fsr2l,f,c
 27200  01201E  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27201  012020  22DA               	addwfc	fsr2h,f,c
 27202  012022  0E08               	movlw	8
 27203  012024  6EDF               	movwf	indf2,c
 27204                           
 27205                           ;usb_device.c: 1902: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 27206  012026  EE20 F002          	lfsr	2,2
 27207  01202A  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27208  01202C  26D9               	addwf	fsr2l,f,c
 27209  01202E  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27210  012030  22DA               	addwfc	fsr2h,f,c
 27211  012032  0E30               	movlw	48
 27212  012034  6EDE               	movwf	postinc2,c
 27213  012036  0E04               	movlw	4
 27214  012038  6EDD               	movwf	postdec2,c
 27215                           
 27216                           ; BSR set to: 0
 27217                           ;usb_device.c: 1906: pBDTEntryEP0OutNext->STAT.Val = 0x04;
 27218  01203A  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27219  01203E  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27220  012042  6EDF               	movwf	indf2,c
 27221                           
 27222                           ; BSR set to: 0
 27223                           ;usb_device.c: 1907: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 27224  012044  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27225  012048  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27226  01204C  0E00               	movlw	0
 27227  01204E  8EDB               	bsf	plusw2,7,c
 27228                           
 27229                           ; BSR set to: 0
 27230                           ;usb_device.c: 1926: }
 27231                           ;usb_device.c: 1927: outPipes[0].info.bits.busy = 0;
 27232                           
 27233                           ; BSR set to: 0
 27234                           ;usb_device.c: 1915: {
 27235                           ;usb_device.c: 1921: outPipes[0].pFunc();
 27236  012050  0100               	movlb	0	; () banked
 27237  012052  9F63               	bcf	(_outPipes+3)& (0+255),7,b	;volatile
 27238                           
 27239                           ; BSR set to: 0
 27240                           ;usb_device.c: 1941: if(USBDeferStatusStagePacket == 0)
 27241  012054  5048               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 27242  012056  B4D8               	btfsc	status,2,c
 27243                           
 27244                           ; BSR set to: 0
 27245                           ;usb_device.c: 1942: {
 27246                           ;usb_device.c: 1943: USBCtrlEPAllowStatusStage();
 27247  012058  EC45  F095         	call	_USBCtrlEPAllowStatusStage	;wreg free
 27248  01205C  0012               	return	
 27249  01205E                     __end_of_USBCtrlTrfRxService:
 27250                           	opt stack 0
 27251                           tosu	equ	0xFFF
 27252                           tosh	equ	0xFFE
 27253                           tosl	equ	0xFFD
 27254                           pclatu	equ	0xFFB
 27255                           pclath	equ	0xFFA
 27256                           tblptru	equ	0xFF8
 27257                           tblptrh	equ	0xFF7
 27258                           tblptrl	equ	0xFF6
 27259                           tablat	equ	0xFF5
 27260                           prodh	equ	0xFF4
 27261                           prodl	equ	0xFF3
 27262                           intcon	equ	0xFF2
 27263                           indf0	equ	0xFEF
 27264                           postinc0	equ	0xFEE
 27265                           fsr0h	equ	0xFEA
 27266                           fsr0l	equ	0xFE9
 27267                           wreg	equ	0xFE8
 27268                           indf1	equ	0xFE7
 27269                           postdec1	equ	0xFE5
 27270                           fsr1h	equ	0xFE2
 27271                           fsr1l	equ	0xFE1
 27272                           indf2	equ	0xFDF
 27273                           postinc2	equ	0xFDE
 27274                           postdec2	equ	0xFDD
 27275                           plusw2	equ	0xFDB
 27276                           fsr2h	equ	0xFDA
 27277                           fsr2l	equ	0xFD9
 27278                           status	equ	0xFD8
 27279                           
 27280 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 27281 ;; Defined at:
 27282 ;;		line 1416 in file "Library/USB/src/usb_device.c"
 27283 ;; Parameters:    Size  Location     Type
 27284 ;;		None
 27285 ;; Auto vars:     Size  Location     Type
 27286 ;;		None
 27287 ;; Return value:  Size  Location     Type
 27288 ;;                  1    wreg      void 
 27289 ;; Registers used:
 27290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27291 ;; Tracked objects:
 27292 ;;		On entry : 0/0
 27293 ;;		On exit  : 0/0
 27294 ;;		Unchanged: 0/0
 27295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27300 ;;Total ram usage:        0 bytes
 27301 ;; Hardware stack levels used:    1
 27302 ;; This function calls:
 27303 ;;		Nothing
 27304 ;; This function is called by:
 27305 ;;		_USBDeviceTasks
 27306 ;;		_USBCtrlEPServiceComplete
 27307 ;;		_USBCtrlTrfRxService
 27308 ;; This function uses a non-reentrant model
 27309 ;;
 27310                           
 27311                           	psect	text159
 27312  012A8A                     __ptext159:
 27313                           	opt stack 0
 27314  012A8A                     _USBCtrlEPAllowStatusStage:
 27315                           	opt stack 14
 27316                           
 27317                           ;usb_device.c: 1423: if(USBStatusStageEnabledFlag1 == 0)
 27318                           
 27319                           ;incstack = 0
 27320  012A8A  504A               	movf	_USBStatusStageEnabledFlag1,w,c	;volatile
 27321  012A8C  A4D8               	btfss	status,2,c
 27322  012A8E  0012               	return	
 27323                           
 27324                           ;usb_device.c: 1424: {
 27325                           ;usb_device.c: 1425: USBStatusStageEnabledFlag1 = 1;
 27326  012A90  0E01               	movlw	1
 27327  012A92  6E4A               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 27328                           
 27329                           ;usb_device.c: 1426: if(USBStatusStageEnabledFlag2 == 0)
 27330  012A94  504B               	movf	_USBStatusStageEnabledFlag2,w,c	;volatile
 27331  012A96  A4D8               	btfss	status,2,c
 27332  012A98  0012               	return	
 27333                           
 27334                           ;usb_device.c: 1427: {
 27335                           ;usb_device.c: 1428: USBStatusStageEnabledFlag2 = 1;
 27336  012A9A  0E01               	movlw	1
 27337  012A9C  6E4B               	movwf	_USBStatusStageEnabledFlag2,c	;volatile
 27338                           
 27339                           ;usb_device.c: 1432: if(controlTransferState == 2)
 27340  012A9E  0E02               	movlw	2
 27341  012AA0  184D               	xorwf	_controlTransferState,w,c	;volatile
 27342  012AA2  E115               	bnz	i2l9679
 27343                           
 27344                           ;usb_device.c: 1433: {
 27345                           ;usb_device.c: 1434: pBDTEntryIn[0]->CNT = 0;
 27346  012AA4  0100               	movlb	0	; () banked
 27347  012AA6  EE20 F001          	lfsr	2,1
 27348  012AAA  516F               	movf	_pBDTEntryIn& (0+255),w,b
 27349  012AAC  26D9               	addwf	fsr2l,f,c
 27350  012AAE  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 27351  012AB0  22DA               	addwfc	fsr2h,f,c
 27352  012AB2  6ADF               	clrf	indf2,c
 27353                           
 27354                           ; BSR set to: 0
 27355                           ;usb_device.c: 1435: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 27356  012AB4  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27357  012AB8  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27358  012ABC  0E48               	movlw	72
 27359  012ABE  6EDF               	movwf	indf2,c
 27360                           
 27361                           ; BSR set to: 0
 27362                           ;usb_device.c: 1436: pBDTEntryIn[0]->STAT.Val |= 0x80;
 27363  012AC0  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27364  012AC4  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27365  012AC8  0E00               	movlw	0
 27366  012ACA  8EDB               	bsf	plusw2,7,c
 27367                           
 27368                           ;usb_device.c: 1437: }
 27369  012ACC  0C00               	retlw	0
 27370  012ACE                     i2l9679:
 27371                           
 27372                           ;usb_device.c: 1438: else if(controlTransferState == 1)
 27373  012ACE  044D               	decf	_controlTransferState,w,c	;volatile
 27374  012AD0  A4D8               	btfss	status,2,c
 27375  012AD2  0012               	return	
 27376                           
 27377                           ;usb_device.c: 1439: {
 27378                           ;usb_device.c: 1440: BothEP0OutUOWNsSet = 0;
 27379  012AD4  6A43               	clrf	_BothEP0OutUOWNsSet,c	;volatile
 27380                           
 27381                           ;usb_device.c: 1445: pBDTEntryEP0OutCurrent->CNT = 8;
 27382  012AD6  EE20 F001          	lfsr	2,1
 27383  012ADA  503E               	movf	_pBDTEntryEP0OutCurrent,w,c
 27384  012ADC  26D9               	addwf	fsr2l,f,c
 27385  012ADE  503F               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 27386  012AE0  22DA               	addwfc	fsr2h,f,c
 27387  012AE2  0E08               	movlw	8
 27388  012AE4  6EDF               	movwf	indf2,c
 27389                           
 27390                           ;usb_device.c: 1446: pBDTEntryEP0OutCurrent->ADR = ((uint16_t)(&SetupPkt));
 27391  012AE6  EE20 F002          	lfsr	2,2
 27392  012AEA  503E               	movf	_pBDTEntryEP0OutCurrent,w,c
 27393  012AEC  26D9               	addwf	fsr2l,f,c
 27394  012AEE  503F               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 27395  012AF0  22DA               	addwfc	fsr2h,f,c
 27396  012AF2  0E30               	movlw	48
 27397  012AF4  6EDE               	movwf	postinc2,c
 27398  012AF6  0E04               	movlw	4
 27399  012AF8  6EDD               	movwf	postdec2,c
 27400                           
 27401                           ;usb_device.c: 1447: pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 27402  012AFA  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 27403  012AFE  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 27404  012B02  6EDF               	movwf	indf2,c
 27405                           
 27406                           ;usb_device.c: 1448: pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 27407  012B04  C03E  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 27408  012B08  C03F  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 27409  012B0C  0E00               	movlw	0
 27410  012B0E  8EDB               	bsf	plusw2,7,c
 27411                           
 27412                           ;usb_device.c: 1449: BothEP0OutUOWNsSet = 1;
 27413  012B10  0E01               	movlw	1
 27414  012B12  6E43               	movwf	_BothEP0OutUOWNsSet,c	;volatile
 27415                           
 27416                           ;usb_device.c: 1453: pBDTEntryEP0OutNext->CNT = 8;
 27417  012B14  EE20 F001          	lfsr	2,1
 27418  012B18  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27419  012B1A  26D9               	addwf	fsr2l,f,c
 27420  012B1C  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27421  012B1E  22DA               	addwfc	fsr2h,f,c
 27422  012B20  0E08               	movlw	8
 27423  012B22  6EDF               	movwf	indf2,c
 27424                           
 27425                           ;usb_device.c: 1454: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 27426  012B24  EE20 F002          	lfsr	2,2
 27427  012B28  5040               	movf	_pBDTEntryEP0OutNext,w,c
 27428  012B2A  26D9               	addwf	fsr2l,f,c
 27429  012B2C  5041               	movf	_pBDTEntryEP0OutNext+1,w,c
 27430  012B2E  22DA               	addwfc	fsr2h,f,c
 27431  012B30  0E30               	movlw	48
 27432  012B32  6EDE               	movwf	postinc2,c
 27433  012B34  0E04               	movlw	4
 27434  012B36  6EDD               	movwf	postdec2,c
 27435                           
 27436                           ;usb_device.c: 1455: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 27437  012B38  C040  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 27438  012B3C  C041  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 27439  012B40  0E80               	movlw	128
 27440  012B42  6EDF               	movwf	indf2,c
 27441  012B44  0C80               	retlw	128
 27442  012B46                     __end_of_USBCtrlEPAllowStatusStage:
 27443                           	opt stack 0
 27444                           tosu	equ	0xFFF
 27445                           tosh	equ	0xFFE
 27446                           tosl	equ	0xFFD
 27447                           pclatu	equ	0xFFB
 27448                           pclath	equ	0xFFA
 27449                           tblptru	equ	0xFF8
 27450                           tblptrh	equ	0xFF7
 27451                           tblptrl	equ	0xFF6
 27452                           tablat	equ	0xFF5
 27453                           prodh	equ	0xFF4
 27454                           prodl	equ	0xFF3
 27455                           intcon	equ	0xFF2
 27456                           indf0	equ	0xFEF
 27457                           postinc0	equ	0xFEE
 27458                           fsr0h	equ	0xFEA
 27459                           fsr0l	equ	0xFE9
 27460                           wreg	equ	0xFE8
 27461                           indf1	equ	0xFE7
 27462                           postdec1	equ	0xFE5
 27463                           fsr1h	equ	0xFE2
 27464                           fsr1l	equ	0xFE1
 27465                           indf2	equ	0xFDF
 27466                           postinc2	equ	0xFDE
 27467                           postdec2	equ	0xFDD
 27468                           plusw2	equ	0xFDB
 27469                           fsr2h	equ	0xFDA
 27470                           fsr2l	equ	0xFD9
 27471                           status	equ	0xFD8
 27472                           
 27473 ;; *************** function _USBCtrlTrfInHandler *****************
 27474 ;; Defined at:
 27475 ;;		line 2592 in file "Library/USB/src/usb_device.c"
 27476 ;; Parameters:    Size  Location     Type
 27477 ;;		None
 27478 ;; Auto vars:     Size  Location     Type
 27479 ;;  lastDTS         1    1[COMRAM] unsigned char 
 27480 ;; Return value:  Size  Location     Type
 27481 ;;                  1    wreg      void 
 27482 ;; Registers used:
 27483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 27484 ;; Tracked objects:
 27485 ;;		On entry : 0/0
 27486 ;;		On exit  : 0/0
 27487 ;;		Unchanged: 0/0
 27488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27492 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27493 ;;Total ram usage:        1 bytes
 27494 ;; Hardware stack levels used:    1
 27495 ;; Hardware stack levels required when called:    1
 27496 ;; This function calls:
 27497 ;;		_USBCtrlTrfTxService
 27498 ;; This function is called by:
 27499 ;;		_USBCtrlEPService
 27500 ;; This function uses a non-reentrant model
 27501 ;;
 27502                           
 27503                           	psect	text160
 27504  012D64                     __ptext160:
 27505                           	opt stack 0
 27506  012D64                     _USBCtrlTrfInHandler:
 27507                           	opt stack 15
 27508                           
 27509                           ;usb_device.c: 2594: uint8_t lastDTS;
 27510                           ;usb_device.c: 2596: lastDTS = pBDTEntryIn[0]->STAT.DTS;
 27511                           
 27512                           ;incstack = 0
 27513  012D64  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27514  012D68  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27515  012D6C  0E00               	movlw	0
 27516  012D6E  BCDF               	btfsc	indf2,6,c
 27517  012D70  0E01               	movlw	1
 27518  012D72  6E02               	movwf	USBCtrlTrfInHandler@lastDTS,c
 27519                           
 27520                           ; BSR set to: 0
 27521                           ;usb_device.c: 2599: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 27522  012D74  0E04               	movlw	4
 27523  012D76  0100               	movlb	0	; () banked
 27524  012D78  1B6F               	xorwf	_pBDTEntryIn& (0+255),f,b
 27525  012D7A  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 27526                           
 27527                           ; BSR set to: 0
 27528                           ;usb_device.c: 2604: if(USBDeviceState == ADR_PENDING_STATE)
 27529  012D7C  0E08               	movlw	8
 27530  012D7E  1849               	xorwf	_USBDeviceState,w,c	;volatile
 27531  012D80  E10A               	bnz	i2l10697
 27532                           
 27533                           ; BSR set to: 0
 27534                           ;usb_device.c: 2605: {
 27535                           ;usb_device.c: 2606: UADDR = (SetupPkt.bDevADR & 0x7F);
 27536  012D82  0104               	movlb	4	; () banked
 27537  012D84  5132               	movf	50,w,b	;volatile
 27538  012D86  0B7F               	andlw	127
 27539  012D88  010F               	movlb	15	; () banked
 27540  012D8A  6F5E               	movwf	94,b	;volatile
 27541                           
 27542                           ; BSR set to: 15
 27543                           ;usb_device.c: 2607: if(UADDR != 0u)
 27544  012D8C  515E               	movf	94,w,b	;volatile
 27545                           
 27546                           ; BSR set to: 15
 27547                           ;usb_device.c: 2608: {
 27548                           ;usb_device.c: 2609: USBDeviceState=ADDRESS_STATE;
 27549  012D8E  0E10               	movlw	16
 27550  012D90  B4D8               	btfsc	status,2,c
 27551                           
 27552                           ; BSR set to: 15
 27553                           ;usb_device.c: 2611: else
 27554                           ;usb_device.c: 2612: {
 27555                           ;usb_device.c: 2613: USBDeviceState=DEFAULT_STATE;
 27556  012D92  0E04               	movlw	4
 27557                           
 27558                           ; BSR set to: 15
 27559                           
 27560                           ;usb_device.c: 2610: }
 27561  012D94  6E49               	movwf	_USBDeviceState,c	;volatile
 27562  012D96                     i2l10697:
 27563                           
 27564                           ;usb_device.c: 2614: }
 27565                           ;usb_device.c: 2615: }
 27566                           ;usb_device.c: 2618: if(controlTransferState == 1)
 27567  012D96  044D               	decf	_controlTransferState,w,c	;volatile
 27568  012D98  E139               	bnz	i2l338
 27569                           
 27570                           ;usb_device.c: 2619: {
 27571                           ;usb_device.c: 2620: pBDTEntryIn[0]->ADR = ((uint16_t)(CtrlTrfData));
 27572  012D9A  0100               	movlb	0	; () banked
 27573  012D9C  EE20 F002          	lfsr	2,2
 27574  012DA0  516F               	movf	_pBDTEntryIn& (0+255),w,b
 27575  012DA2  26D9               	addwf	fsr2l,f,c
 27576  012DA4  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 27577  012DA6  22DA               	addwfc	fsr2h,f,c
 27578  012DA8  0E38               	movlw	56
 27579  012DAA  6EDE               	movwf	postinc2,c
 27580  012DAC  0E04               	movlw	4
 27581  012DAE  6EDD               	movwf	postdec2,c
 27582                           
 27583                           ; BSR set to: 0
 27584                           ;usb_device.c: 2621: USBCtrlTrfTxService();
 27585  012DB0  EC91  F092         	call	_USBCtrlTrfTxService	;wreg free
 27586                           
 27587                           ;usb_device.c: 2627: if(shortPacketStatus == 2)
 27588  012DB4  0E02               	movlw	2
 27589  012DB6  1850               	xorwf	_shortPacketStatus,w,c	;volatile
 27590  012DB8  E10D               	bnz	i2l10709
 27591                           
 27592                           ;usb_device.c: 2628: {
 27593                           ;usb_device.c: 2631: pBDTEntryIn[0]->STAT.Val = 0x04;
 27594  012DBA  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27595  012DBE  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27596  012DC2  0E04               	movlw	4
 27597  012DC4  6EDF               	movwf	indf2,c
 27598                           
 27599                           ;usb_device.c: 2632: pBDTEntryIn[0]->STAT.Val |= 0x80;
 27600  012DC6  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27601  012DCA  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27602  012DCE  0E00               	movlw	0
 27603  012DD0  8EDB               	bsf	plusw2,7,c
 27604                           
 27605                           ;usb_device.c: 2633: }
 27606  012DD2  0C00               	retlw	0
 27607  012DD4                     i2l10709:
 27608                           
 27609                           ;usb_device.c: 2634: else
 27610                           ;usb_device.c: 2635: {
 27611                           ;usb_device.c: 2636: if(lastDTS == 0)
 27612  012DD4  5002               	movf	USBCtrlTrfInHandler@lastDTS,w,c
 27613  012DD6  E10D               	bnz	i2l10715
 27614                           
 27615                           ;usb_device.c: 2637: {
 27616                           ;usb_device.c: 2638: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 27617  012DD8  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27618  012DDC  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27619  012DE0  0E48               	movlw	72
 27620  012DE2  6EDF               	movwf	indf2,c
 27621                           
 27622                           ;usb_device.c: 2639: pBDTEntryIn[0]->STAT.Val |= 0x80;
 27623  012DE4  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27624  012DE8  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27625  012DEC  0E00               	movlw	0
 27626  012DEE  8EDB               	bsf	plusw2,7,c
 27627                           
 27628                           ;usb_device.c: 2640: }
 27629  012DF0  0C00               	retlw	0
 27630  012DF2                     i2l10715:
 27631                           
 27632                           ;usb_device.c: 2641: else
 27633                           ;usb_device.c: 2642: {
 27634                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val = 0x00|(0x08 & 0x08);
 27635  012DF2  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27636  012DF6  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27637  012DFA  0E08               	movlw	8
 27638  012DFC  6EDF               	movwf	indf2,c
 27639                           
 27640                           ;usb_device.c: 2644: pBDTEntryIn[0]->STAT.Val |= 0x80;
 27641  012DFE  C06F  FFD9         	movff	_pBDTEntryIn,fsr2l
 27642  012E02  C070  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 27643  012E06  0E00               	movlw	0
 27644  012E08  8EDB               	bsf	plusw2,7,c
 27645                           
 27646                           ;usb_device.c: 2645: }
 27647                           ;usb_device.c: 2646: }
 27648                           ;usb_device.c: 2647: }
 27649  012E0A  0C00               	retlw	0
 27650  012E0C                     i2l338:
 27651                           
 27652                           ;usb_device.c: 2648: else
 27653                           ;usb_device.c: 2649: {
 27654                           ;usb_device.c: 2653: if(outPipes[0].info.bits.busy == 1)
 27655  012E0C  0100               	movlb	0	; () banked
 27656  012E0E  BF63               	btfsc	(_outPipes+3)& (0+255),7,b	;volatile
 27657                           
 27658                           ; BSR set to: 0
 27659                           ;usb_device.c: 2658: }
 27660                           ;usb_device.c: 2659: outPipes[0].info.bits.busy = 0;
 27661                           
 27662                           ; BSR set to: 0
 27663                           ;usb_device.c: 2656: {
 27664                           ;usb_device.c: 2657: outPipes[0].pFunc();
 27665  012E10  9F63               	bcf	(_outPipes+3)& (0+255),7,b	;volatile
 27666                           
 27667                           ; BSR set to: 0
 27668                           ;usb_device.c: 2660: }
 27669                           ;usb_device.c: 2662: controlTransferState = 0;
 27670                           
 27671                           ; BSR set to: 0
 27672  012E12  6A4D               	clrf	_controlTransferState,c	;volatile
 27673  012E14  0C00               	retlw	0
 27674  012E16                     __end_of_USBCtrlTrfInHandler:
 27675                           	opt stack 0
 27676                           tosu	equ	0xFFF
 27677                           tosh	equ	0xFFE
 27678                           tosl	equ	0xFFD
 27679                           pclatu	equ	0xFFB
 27680                           pclath	equ	0xFFA
 27681                           tblptru	equ	0xFF8
 27682                           tblptrh	equ	0xFF7
 27683                           tblptrl	equ	0xFF6
 27684                           tablat	equ	0xFF5
 27685                           prodh	equ	0xFF4
 27686                           prodl	equ	0xFF3
 27687                           intcon	equ	0xFF2
 27688                           indf0	equ	0xFEF
 27689                           postinc0	equ	0xFEE
 27690                           fsr0h	equ	0xFEA
 27691                           fsr0l	equ	0xFE9
 27692                           wreg	equ	0xFE8
 27693                           indf1	equ	0xFE7
 27694                           postdec1	equ	0xFE5
 27695                           fsr1h	equ	0xFE2
 27696                           fsr1l	equ	0xFE1
 27697                           indf2	equ	0xFDF
 27698                           postinc2	equ	0xFDE
 27699                           postdec2	equ	0xFDD
 27700                           plusw2	equ	0xFDB
 27701                           fsr2h	equ	0xFDA
 27702                           fsr2l	equ	0xFD9
 27703                           status	equ	0xFD8
 27704                           
 27705 ;; *************** function _USBCtrlTrfTxService *****************
 27706 ;; Defined at:
 27707 ;;		line 1771 in file "Library/USB/src/usb_device.c"
 27708 ;; Parameters:    Size  Location     Type
 27709 ;;		None
 27710 ;; Auto vars:     Size  Location     Type
 27711 ;;  byteToSend      1    0[COMRAM] unsigned char 
 27712 ;; Return value:  Size  Location     Type
 27713 ;;                  1    wreg      void 
 27714 ;; Registers used:
 27715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 27716 ;; Tracked objects:
 27717 ;;		On entry : 0/0
 27718 ;;		On exit  : 0/0
 27719 ;;		Unchanged: 0/0
 27720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27724 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27725 ;;Total ram usage:        1 bytes
 27726 ;; Hardware stack levels used:    1
 27727 ;; This function calls:
 27728 ;;		Nothing
 27729 ;; This function is called by:
 27730 ;;		_USBCtrlEPAllowDataStage
 27731 ;;		_USBCtrlTrfInHandler
 27732 ;; This function uses a non-reentrant model
 27733 ;;
 27734                           
 27735                           	psect	text161
 27736  012522                     __ptext161:
 27737                           	opt stack 0
 27738  012522                     _USBCtrlTrfTxService:
 27739                           	opt stack 13
 27740                           
 27741                           ;usb_device.c: 1773: uint8_t byteToSend;
 27742                           ;usb_device.c: 1777: byteToSend = 8;
 27743                           
 27744                           ;incstack = 0
 27745  012522  0E08               	movlw	8
 27746  012524  6E01               	movwf	USBCtrlTrfTxService@byteToSend,c
 27747                           
 27748                           ;usb_device.c: 1778: if(inPipes[0].wCount.Val < (uint8_t)8)
 27749  012526  0100               	movlb	0	; () banked
 27750  012528  516E               	movf	(_inPipes+5)& (0+255),w,b	;volatile
 27751  01252A  E10D               	bnz	i2l9185
 27752  01252C  0E08               	movlw	8
 27753  01252E  5D6D               	subwf	(_inPipes+4)& (0+255),w,b	;volatile
 27754  012530  E20A               	bc	i2l9185
 27755                           
 27756                           ; BSR set to: 0
 27757                           ;usb_device.c: 1779: {
 27758                           ;usb_device.c: 1780: byteToSend = inPipes[0].wCount.Val;
 27759  012532  C06D  F001         	movff	_inPipes+4,USBCtrlTrfTxService@byteToSend	;volatile
 27760                           
 27761                           ; BSR set to: 0
 27762                           ;usb_device.c: 1787: if(shortPacketStatus == 0)
 27763  012536  5050               	movf	_shortPacketStatus,w,c	;volatile
 27764  012538  E102               	bnz	i2l9181
 27765                           
 27766                           ; BSR set to: 0
 27767                           ;usb_device.c: 1788: {
 27768                           ;usb_device.c: 1789: shortPacketStatus = 1;
 27769  01253A  0E01               	movlw	1
 27770  01253C  D003               	goto	L24
 27771  01253E                     i2l9181:
 27772                           
 27773                           ; BSR set to: 0
 27774                           ;usb_device.c: 1791: else if(shortPacketStatus == 1)
 27775  01253E  0450               	decf	_shortPacketStatus,w,c	;volatile
 27776  012540  E102               	bnz	i2l9185
 27777                           
 27778                           ; BSR set to: 0
 27779                           ;usb_device.c: 1792: {
 27780                           ;usb_device.c: 1793: shortPacketStatus = 2;
 27781  012542  0E02               	movlw	2
 27782  012544                     L24:
 27783  012544  6E50               	movwf	_shortPacketStatus,c	;volatile
 27784  012546                     i2l9185:
 27785                           
 27786                           ; BSR set to: 0
 27787                           ;usb_device.c: 1794: }
 27788                           ;usb_device.c: 1795: }
 27789                           ;usb_device.c: 1799: inPipes[0].wCount.Val -= byteToSend;
 27790  012546  5001               	movf	USBCtrlTrfTxService@byteToSend,w,c
 27791  012548  0100               	movlb	0	; () banked
 27792  01254A  5F6D               	subwf	(_inPipes+4)& (0+255),f,b	;volatile
 27793  01254C  0E00               	movlw	0
 27794  01254E  5B6E               	subwfb	(_inPipes+5)& (0+255),f,b	;volatile
 27795                           
 27796                           ; BSR set to: 0
 27797                           ;usb_device.c: 1804: pBDTEntryIn[0]->CNT = byteToSend;
 27798  012550  EE20 F001          	lfsr	2,1
 27799  012554  516F               	movf	_pBDTEntryIn& (0+255),w,b
 27800  012556  26D9               	addwf	fsr2l,f,c
 27801  012558  5170               	movf	(_pBDTEntryIn+1)& (0+255),w,b
 27802  01255A  22DA               	addwfc	fsr2h,f,c
 27803  01255C  C001  FFDF         	movff	USBCtrlTrfTxService@byteToSend,indf2
 27804                           
 27805                           ; BSR set to: 0
 27806                           ;usb_device.c: 1808: pDst = (volatile uint8_t*)CtrlTrfData;
 27807  012560  0E38               	movlw	56
 27808  012562  0101               	movlb	1	; () banked
 27809  012564  6F31               	movwf	_pDst& (0+255),b
 27810  012566  0E04               	movlw	4
 27811  012568  6F32               	movwf	(_pDst+1)& (0+255),b
 27812                           
 27813                           ; BSR set to: 1
 27814                           ;usb_device.c: 1809: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 27815  01256A  0100               	movlb	0	; () banked
 27816  01256C  B16C               	btfsc	(_inPipes+3)& (0+255),0,b	;volatile
 27817  01256E  D03E               	goto	i2l9213
 27818                           
 27819                           ; BSR set to: 0
 27820                           ;usb_device.c: 1810: {
 27821                           ;usb_device.c: 1811: while(byteToSend)
 27822  012570  D01D               	goto	i2l9203
 27823  012572                     i2l9195:
 27824                           
 27825                           ;usb_device.c: 1812: {
 27826                           ;usb_device.c: 1813: *pDst++ = *inPipes[0].pSrc.bRom++;
 27827  012572  C069  FFF6         	movff	_inPipes,tblptrl	;volatile
 27828  012576  C06A  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 27829  01257A  0E00               	movlw	low (__mediumconst shr (0+16))
 27830  01257C  6EF8               	movwf	tblptru,c
 27831  01257E  C131  FFD9         	movff	_pDst,fsr2l
 27832  012582  C132  FFDA         	movff	_pDst+1,fsr2h
 27833  012586  0E0F               	movlw	(high __ramtop+-1)
 27834  012588  64F7               	cpfsgt	tblptrh,c
 27835  01258A  D003               	bra	i2u599_47
 27836  01258C  0008               	tblrd		*
 27837  01258E  50F5               	movf	tablat,w,c
 27838  012590  D005               	bra	i2u599_40
 27839  012592                     i2u599_47:
 27840  012592  CFF6 FFE9          	movff	tblptrl,fsr0l
 27841  012596  CFF7 FFEA          	movff	tblptrh,fsr0h
 27842  01259A  50EF               	movf	indf0,w,c
 27843  01259C                     i2u599_40:
 27844  01259C  6EDF               	movwf	indf2,c
 27845  01259E  0100               	movlb	0	; () banked
 27846  0125A0  4B69               	infsnz	_inPipes& (0+255),f,b	;volatile
 27847  0125A2  2B6A               	incf	(_inPipes+1)& (0+255),f,b	;volatile
 27848                           
 27849                           ; BSR set to: 0
 27850  0125A4  0101               	movlb	1	; () banked
 27851  0125A6  4B31               	infsnz	_pDst& (0+255),f,b
 27852  0125A8  2B32               	incf	(_pDst+1)& (0+255),f,b
 27853                           
 27854                           ; BSR set to: 1
 27855                           ;usb_device.c: 1814: byteToSend--;
 27856  0125AA  0601               	decf	USBCtrlTrfTxService@byteToSend,f,c
 27857  0125AC                     i2l9203:
 27858  0125AC  5001               	movf	USBCtrlTrfTxService@byteToSend,w,c
 27859  0125AE  E1E1               	bnz	i2l9195
 27860                           
 27861                           ;usb_device.c: 1815: }
 27862                           ;usb_device.c: 1816: }
 27863  0125B0  0012               	return	
 27864  0125B2                     i2l9205:
 27865                           
 27866                           ;usb_device.c: 1820: {
 27867                           ;usb_device.c: 1821: *pDst++ = *inPipes[0].pSrc.bRam++;
 27868  0125B2  C069  FFF6         	movff	_inPipes,tblptrl	;volatile
 27869  0125B6  C06A  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 27870  0125BA  0E00               	movlw	low (__mediumconst shr (0+16))
 27871  0125BC  6EF8               	movwf	tblptru,c
 27872  0125BE  C131  FFD9         	movff	_pDst,fsr2l
 27873  0125C2  C132  FFDA         	movff	_pDst+1,fsr2h
 27874  0125C6  0E0F               	movlw	(high __ramtop+-1)
 27875  0125C8  64F7               	cpfsgt	tblptrh,c
 27876  0125CA  D003               	bra	i2u601_47
 27877  0125CC  0008               	tblrd		*
 27878  0125CE  50F5               	movf	tablat,w,c
 27879  0125D0  D005               	bra	i2u601_40
 27880  0125D2                     i2u601_47:
 27881  0125D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 27882  0125D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 27883  0125DA  50EF               	movf	indf0,w,c
 27884  0125DC                     i2u601_40:
 27885  0125DC  6EDF               	movwf	indf2,c
 27886  0125DE  0100               	movlb	0	; () banked
 27887  0125E0  4B69               	infsnz	_inPipes& (0+255),f,b	;volatile
 27888  0125E2  2B6A               	incf	(_inPipes+1)& (0+255),f,b	;volatile
 27889                           
 27890                           ; BSR set to: 0
 27891  0125E4  0101               	movlb	1	; () banked
 27892  0125E6  4B31               	infsnz	_pDst& (0+255),f,b
 27893  0125E8  2B32               	incf	(_pDst+1)& (0+255),f,b
 27894                           
 27895                           ; BSR set to: 1
 27896                           ;usb_device.c: 1822: byteToSend--;
 27897  0125EA  0601               	decf	USBCtrlTrfTxService@byteToSend,f,c
 27898  0125EC                     i2l9213:
 27899  0125EC  5001               	movf	USBCtrlTrfTxService@byteToSend,w,c
 27900  0125EE  E1E1               	bnz	i2l9205
 27901  0125F0  0012               	return	
 27902  0125F2                     __end_of_USBCtrlTrfTxService:
 27903                           	opt stack 0
 27904                           tosu	equ	0xFFF
 27905                           tosh	equ	0xFFE
 27906                           tosl	equ	0xFFD
 27907                           pclatu	equ	0xFFB
 27908                           pclath	equ	0xFFA
 27909                           tblptru	equ	0xFF8
 27910                           tblptrh	equ	0xFF7
 27911                           tblptrl	equ	0xFF6
 27912                           tablat	equ	0xFF5
 27913                           prodh	equ	0xFF4
 27914                           prodl	equ	0xFF3
 27915                           intcon	equ	0xFF2
 27916                           indf0	equ	0xFEF
 27917                           postinc0	equ	0xFEE
 27918                           fsr0h	equ	0xFEA
 27919                           fsr0l	equ	0xFE9
 27920                           wreg	equ	0xFE8
 27921                           indf1	equ	0xFE7
 27922                           postdec1	equ	0xFE5
 27923                           fsr1h	equ	0xFE2
 27924                           fsr1l	equ	0xFE1
 27925                           indf2	equ	0xFDF
 27926                           postinc2	equ	0xFDE
 27927                           postdec2	equ	0xFDD
 27928                           plusw2	equ	0xFDB
 27929                           fsr2h	equ	0xFDA
 27930                           fsr2l	equ	0xFD9
 27931                           status	equ	0xFD8
 27932                           
 27933 ;; *************** function _Timer0_ISR *****************
 27934 ;; Defined at:
 27935 ;;		line 94 in file "Timer0.c"
 27936 ;; Parameters:    Size  Location     Type
 27937 ;;		None
 27938 ;; Auto vars:     Size  Location     Type
 27939 ;;		None
 27940 ;; Return value:  Size  Location     Type
 27941 ;;                  1    wreg      void 
 27942 ;; Registers used:
 27943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27944 ;; Tracked objects:
 27945 ;;		On entry : 0/0
 27946 ;;		On exit  : 0/0
 27947 ;;		Unchanged: 0/0
 27948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27953 ;;Total ram usage:        0 bytes
 27954 ;; Hardware stack levels used:    1
 27955 ;; Hardware stack levels required when called:    5
 27956 ;; This function calls:
 27957 ;;		Absolute function
 27958 ;;		_Motor_Step
 27959 ;; This function is called by:
 27960 ;;		_ISR_Function
 27961 ;; This function uses a non-reentrant model
 27962 ;;
 27963                           
 27964                           	psect	text162
 27965  014F08                     __ptext162:
 27966                           	opt stack 0
 27967  014F08                     _Timer0_ISR:
 27968                           	opt stack 14
 27969                           
 27970                           ;Timer0.c: 96: if (gISR != 0)
 27971                           
 27972                           ;incstack = 0
 27973  014F08  0101               	movlb	1	; () banked
 27974  014F0A  5124               	movf	_gISR& (0+255),w,b
 27975  014F0C  1125               	iorwf	(_gISR+1)& (0+255),w,b
 27976  014F0E  1126               	iorwf	(_gISR+2)& (0+255),w,b
 27977  014F10  B4D8               	btfsc	status,2,c
 27978  014F12  0012               	return	
 27979                           
 27980                           ; BSR set to: 1
 27981                           ;Timer0.c: 97: gISR();
 27982  014F14  0005               	push	
 27983  014F16  6EFA               	movwf	pclath,c
 27984  014F18  5124               	movf	_gISR& (0+255),w,b
 27985  014F1A  6EFD               	movwf	tosl,c
 27986  014F1C  5125               	movf	(_gISR+1)& (0+255),w,b
 27987  014F1E  6EFE               	movwf	tosh,c
 27988  014F20  5126               	movf	(_gISR+2)& (0+255),w,b
 27989  014F22  6EFF               	movwf	tosu,c
 27990  014F24  50FA               	movf	pclath,w,c
 27991  014F26  0012               	return		;indir
 27992  014F28                     __end_of_Timer0_ISR:
 27993                           	opt stack 0
 27994                           tosu	equ	0xFFF
 27995                           tosh	equ	0xFFE
 27996                           tosl	equ	0xFFD
 27997                           pclatu	equ	0xFFB
 27998                           pclath	equ	0xFFA
 27999                           tblptru	equ	0xFF8
 28000                           tblptrh	equ	0xFF7
 28001                           tblptrl	equ	0xFF6
 28002                           tablat	equ	0xFF5
 28003                           prodh	equ	0xFF4
 28004                           prodl	equ	0xFF3
 28005                           intcon	equ	0xFF2
 28006                           indf0	equ	0xFEF
 28007                           postinc0	equ	0xFEE
 28008                           fsr0h	equ	0xFEA
 28009                           fsr0l	equ	0xFE9
 28010                           wreg	equ	0xFE8
 28011                           indf1	equ	0xFE7
 28012                           postdec1	equ	0xFE5
 28013                           fsr1h	equ	0xFE2
 28014                           fsr1l	equ	0xFE1
 28015                           indf2	equ	0xFDF
 28016                           postinc2	equ	0xFDE
 28017                           postdec2	equ	0xFDD
 28018                           plusw2	equ	0xFDB
 28019                           fsr2h	equ	0xFDA
 28020                           fsr2l	equ	0xFD9
 28021                           status	equ	0xFD8
 28022                           
 28023 ;; *************** function _Motor_Step *****************
 28024 ;; Defined at:
 28025 ;;		line 82 in file "Motor.c"
 28026 ;; Parameters:    Size  Location     Type
 28027 ;;		None
 28028 ;; Auto vars:     Size  Location     Type
 28029 ;;		None
 28030 ;; Return value:  Size  Location     Type
 28031 ;;                  1    wreg      void 
 28032 ;; Registers used:
 28033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28034 ;; Tracked objects:
 28035 ;;		On entry : 0/0
 28036 ;;		On exit  : 0/0
 28037 ;;		Unchanged: 0/0
 28038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28041 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28043 ;;Total ram usage:        2 bytes
 28044 ;; Hardware stack levels used:    1
 28045 ;; Hardware stack levels required when called:    4
 28046 ;; This function calls:
 28047 ;;		_Timer0_Restart
 28048 ;;		_Timer0_Stop
 28049 ;;		i2_Port_SetPin
 28050 ;; This function is called by:
 28051 ;;		_Motor_Move
 28052 ;;		_Timer0_ISR
 28053 ;; This function uses a non-reentrant model
 28054 ;;
 28055                           
 28056                           	psect	text163
 28057  012BFE                     __ptext163:
 28058                           	opt stack 0
 28059  012BFE                     _Motor_Step:
 28060                           	opt stack 14
 28061                           
 28062                           ;Motor.c: 84: if (gMotor->mDelta != 0)
 28063                           
 28064                           ;incstack = 0
 28065  012BFE  C03C  FFD9         	movff	_gMotor,fsr2l
 28066  012C02  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28067  012C06  50DE               	movf	postinc2,w,c
 28068  012C08  10DE               	iorwf	postinc2,w,c
 28069  012C0A  E102 EF53  F0A8    	bz	_Timer0_Stop
 28070                           
 28071                           ;Motor.c: 85: {
 28072                           ;Motor.c: 87: if (gMotor->mDelta > 0)
 28073  012C10  C03C  FFD9         	movff	_gMotor,fsr2l
 28074  012C14  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28075  012C18  0E01               	movlw	1
 28076  012C1A  BEDB               	btfsc	plusw2,7,c
 28077  012C1C  D01E               	goto	i2l12215
 28078  012C1E  50DB               	movf	plusw2,w,c
 28079  012C20  E102               	bnz	i2u899_40
 28080  012C22  04DE               	decf	postinc2,w,c
 28081  012C24  E31A               	bnc	i2l12215
 28082  012C26                     i2u899_40:
 28083                           
 28084                           ;Motor.c: 88: {
 28085                           ;Motor.c: 89: if (gMotor->mDelta != 32767)
 28086  012C26  C03C  FFD9         	movff	_gMotor,fsr2l
 28087  012C2A  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28088  012C2E  28DE               	incf	postinc2,w,c
 28089  012C30  E103               	bnz	i2u900_40
 28090  012C32  0E7F               	movlw	127
 28091  012C34  18DE               	xorwf	postinc2,w,c
 28092  012C36  E007               	bz	i2l12213
 28093  012C38                     i2u900_40:
 28094                           
 28095                           ;Motor.c: 90: gMotor->mDelta --;
 28096  012C38  C03C  FFD9         	movff	_gMotor,fsr2l
 28097  012C3C  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28098  012C40  06DE               	decf	postinc2,f,c
 28099  012C42  0E00               	movlw	0
 28100  012C44  5ADD               	subwfb	postdec2,f,c
 28101  012C46                     i2l12213:
 28102                           
 28103                           ;Motor.c: 92: Port_SetPin(&PortE, eP0, 1);
 28104  012C46  0E97               	movlw	low _PortE
 28105  012C48  6E10               	movwf	i2Port_SetPin@pInput,c
 28106  012C4A  0E01               	movlw	high _PortE
 28107  012C4C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28108  012C4E  6A12               	clrf	i2Port_SetPin@pPin,c
 28109  012C50  0E01               	movlw	1
 28110  012C52  6E13               	movwf	i2Port_SetPin@pValue,c
 28111  012C54  EC31  F09F         	call	i2_Port_SetPin	;wreg free
 28112                           
 28113                           ;Motor.c: 93: }
 28114  012C58  D018               	goto	i2l12221
 28115  012C5A                     i2l12215:
 28116                           
 28117                           ;Motor.c: 94: else
 28118                           ;Motor.c: 95: {
 28119                           ;Motor.c: 96: if (gMotor->mDelta != -32767)
 28120  012C5A  C03C  FFD9         	movff	_gMotor,fsr2l
 28121  012C5E  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28122  012C62  04DE               	decf	postinc2,w,c
 28123  012C64  E103               	bnz	i2u901_40
 28124  012C66  0E80               	movlw	128
 28125  012C68  18DE               	xorwf	postinc2,w,c
 28126  012C6A  E007               	bz	i2l12219
 28127  012C6C                     i2u901_40:
 28128                           
 28129                           ;Motor.c: 97: gMotor->mDelta ++;
 28130  012C6C  C03C  FFD9         	movff	_gMotor,fsr2l
 28131  012C70  C03D  FFDA         	movff	_gMotor+1,fsr2h
 28132  012C74  2ADE               	incf	postinc2,f,c
 28133  012C76  0E00               	movlw	0
 28134  012C78  22DD               	addwfc	postdec2,f,c
 28135  012C7A                     i2l12219:
 28136                           
 28137                           ;Motor.c: 99: Port_SetPin(&PortE, eP0, 0);
 28138  012C7A  0E97               	movlw	low _PortE
 28139  012C7C  6E10               	movwf	i2Port_SetPin@pInput,c
 28140  012C7E  0E01               	movlw	high _PortE
 28141  012C80  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28142  012C82  6A12               	clrf	i2Port_SetPin@pPin,c
 28143  012C84  6A13               	clrf	i2Port_SetPin@pValue,c
 28144  012C86  EC31  F09F         	call	i2_Port_SetPin	;wreg free
 28145  012C8A                     i2l12221:
 28146                           
 28147                           ;Motor.c: 100: }
 28148                           ;Motor.c: 103: Port_SetPin(&PortE, eP1, 1);
 28149  012C8A  0E97               	movlw	low _PortE
 28150  012C8C  6E10               	movwf	i2Port_SetPin@pInput,c
 28151  012C8E  0E01               	movlw	high _PortE
 28152  012C90  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28153  012C92  0E01               	movlw	1
 28154  012C94  6E12               	movwf	i2Port_SetPin@pPin,c
 28155  012C96  6E13               	movwf	i2Port_SetPin@pValue,c
 28156  012C98  EC31  F09F         	call	i2_Port_SetPin	;wreg free
 28157                           
 28158                           ;Motor.c: 104: Port_SetPin(&PortE, eP1, 0);
 28159  012C9C  0E97               	movlw	low _PortE
 28160  012C9E  6E10               	movwf	i2Port_SetPin@pInput,c
 28161  012CA0  0E01               	movlw	high _PortE
 28162  012CA2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28163  012CA4  0E01               	movlw	1
 28164  012CA6  6E12               	movwf	i2Port_SetPin@pPin,c
 28165  012CA8  6A13               	clrf	i2Port_SetPin@pValue,c
 28166  012CAA  EC31  F09F         	call	i2_Port_SetPin	;wreg free
 28167                           
 28168                           ;Motor.c: 106: Timer0_Restart();
 28169  012CAE  EFCE  F0A7         	goto	_Timer0_Restart	;wreg free
 28170  012CB2                     __end_of_Motor_Step:
 28171                           	opt stack 0
 28172                           tosu	equ	0xFFF
 28173                           tosh	equ	0xFFE
 28174                           tosl	equ	0xFFD
 28175                           pclatu	equ	0xFFB
 28176                           pclath	equ	0xFFA
 28177                           tblptru	equ	0xFF8
 28178                           tblptrh	equ	0xFF7
 28179                           tblptrl	equ	0xFF6
 28180                           tablat	equ	0xFF5
 28181                           prodh	equ	0xFF4
 28182                           prodl	equ	0xFF3
 28183                           intcon	equ	0xFF2
 28184                           indf0	equ	0xFEF
 28185                           postinc0	equ	0xFEE
 28186                           fsr0h	equ	0xFEA
 28187                           fsr0l	equ	0xFE9
 28188                           wreg	equ	0xFE8
 28189                           indf1	equ	0xFE7
 28190                           postdec1	equ	0xFE5
 28191                           fsr1h	equ	0xFE2
 28192                           fsr1l	equ	0xFE1
 28193                           indf2	equ	0xFDF
 28194                           postinc2	equ	0xFDE
 28195                           postdec2	equ	0xFDD
 28196                           plusw2	equ	0xFDB
 28197                           fsr2h	equ	0xFDA
 28198                           fsr2l	equ	0xFD9
 28199                           status	equ	0xFD8
 28200                           
 28201 ;; *************** function i2_Port_SetPin *****************
 28202 ;; Defined at:
 28203 ;;		line 247 in file "Library/Port.c"
 28204 ;; Parameters:    Size  Location     Type
 28205 ;;  pInput          2   15[COMRAM] const PTR struct Port
 28206 ;;		 -> PortG(10), PortC(10), PortF(10), PortE(10), 
 28207 ;;  pPin            1   17[COMRAM] enum E7688
 28208 ;;  pValue          1   18[COMRAM] unsigned char 
 28209 ;; Auto vars:     Size  Location     Type
 28210 ;;  Port_SetPin     1   19[COMRAM] enum E7733
 28211 ;; Return value:  Size  Location     Type
 28212 ;;                  1    wreg      void 
 28213 ;; Registers used:
 28214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28215 ;; Tracked objects:
 28216 ;;		On entry : 0/0
 28217 ;;		On exit  : 0/0
 28218 ;;		Unchanged: 0/0
 28219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28223 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28224 ;;Total ram usage:        5 bytes
 28225 ;; Hardware stack levels used:    1
 28226 ;; Hardware stack levels required when called:    3
 28227 ;; This function calls:
 28228 ;;		i2_Byte_SetBit
 28229 ;;		i2_Word_GetPair
 28230 ;; This function is called by:
 28231 ;;		_Motor_Step
 28232 ;;		i2_Port_TogglePin
 28233 ;; This function uses a non-reentrant model
 28234 ;;
 28235                           
 28236                           	psect	text164
 28237  013E62                     __ptext164:
 28238                           	opt stack 0
 28239  013E62                     i2_Port_SetPin:
 28240                           	opt stack 11
 28241                           
 28242                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28243                           
 28244                           ;incstack = 0
 28245  013E62  0E08               	movlw	8
 28246  013E64  2410               	addwf	i2Port_SetPin@pInput,w,c
 28247  013E66  6E0D               	movwf	i2Word_GetPair@pInput,c
 28248  013E68  0E00               	movlw	0
 28249  013E6A  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 28250  013E6C  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 28251  013E6E  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 28252  013E72  ECC9  F0A6         	call	i2_Word_GetPair	;wreg free
 28253  013E76  6E14               	movwf	i2Port_SetPin@Type,c
 28254                           
 28255                           ;Port.c: 250: switch (Type)
 28256  013E78  D01B               	goto	i2l8883
 28257  013E7A                     i2l8869:
 28258                           
 28259                           ;Port.c: 256: pValue &= 1;
 28260  013E7A  0E01               	movlw	1
 28261  013E7C  1613               	andwf	i2Port_SetPin@pValue,f,c
 28262  013E7E  D003               	goto	i2l8875
 28263  013E80                     i2l8873:
 28264                           
 28265                           ;Port.c: 261: pValue &= 1;
 28266  013E80  0E01               	movlw	1
 28267  013E82  1613               	andwf	i2Port_SetPin@pValue,f,c
 28268                           
 28269                           ;Port.c: 262: pValue ^= 1;
 28270  013E84  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 28271  013E86                     i2l8875:
 28272                           
 28273                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28274  013E86  EE20 F002          	lfsr	2,2
 28275  013E8A  D004               	goto	L35
 28276  013E8C                     i2l8877:
 28277                           
 28278                           ;Port.c: 266: pValue &= 1;
 28279  013E8C  0E01               	movlw	1
 28280  013E8E  1613               	andwf	i2Port_SetPin@pValue,f,c
 28281                           
 28282                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28283  013E90  EE20 F004          	lfsr	2,4
 28284  013E94                     L35:
 28285  013E94  5010               	movf	i2Port_SetPin@pInput,w,c
 28286  013E96  26D9               	addwf	fsr2l,f,c
 28287  013E98  5011               	movf	i2Port_SetPin@pInput+1,w,c
 28288  013E9A  22DA               	addwfc	fsr2h,f,c
 28289  013E9C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 28290  013EA0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 28291  013EA4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 28292  013EA8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 28293  013EAC  EF4D  F0A2         	goto	i2_Byte_SetBit	;wreg free
 28294  013EB0                     i2l8883:
 28295  013EB0  5014               	movf	i2Port_SetPin@Type,w,c
 28296                           
 28297                           ; Switch size 1, requested type "space"
 28298                           ; Number of cases is 4, Range of values is 0 to 3
 28299                           ; switch strategies available:
 28300                           ; Name         Instructions Cycles
 28301                           ; simple_byte           13     7 (average)
 28302                           ;	Chosen strategy is simple_byte
 28303  013EB2  B4D8               	btfsc	status,2,c
 28304  013EB4  0012               	return	
 28305  013EB6  0A01               	xorlw	1	; case 1
 28306  013EB8  E0E0               	bz	i2l8869
 28307  013EBA  0A03               	xorlw	3	; case 2
 28308  013EBC  E0E1               	bz	i2l8873
 28309  013EBE  0A01               	xorlw	1	; case 3
 28310  013EC0  E0E5               	bz	i2l8877
 28311  013EC2  0012               	return		;funcret
 28312  013EC4                     __end_ofi2_Port_SetPin:
 28313                           	opt stack 0
 28314                           tosu	equ	0xFFF
 28315                           tosh	equ	0xFFE
 28316                           tosl	equ	0xFFD
 28317                           pclatu	equ	0xFFB
 28318                           pclath	equ	0xFFA
 28319                           tblptru	equ	0xFF8
 28320                           tblptrh	equ	0xFF7
 28321                           tblptrl	equ	0xFF6
 28322                           tablat	equ	0xFF5
 28323                           prodh	equ	0xFF4
 28324                           prodl	equ	0xFF3
 28325                           intcon	equ	0xFF2
 28326                           indf0	equ	0xFEF
 28327                           postinc0	equ	0xFEE
 28328                           fsr0h	equ	0xFEA
 28329                           fsr0l	equ	0xFE9
 28330                           wreg	equ	0xFE8
 28331                           indf1	equ	0xFE7
 28332                           postdec1	equ	0xFE5
 28333                           fsr1h	equ	0xFE2
 28334                           fsr1l	equ	0xFE1
 28335                           indf2	equ	0xFDF
 28336                           postinc2	equ	0xFDE
 28337                           postdec2	equ	0xFDD
 28338                           plusw2	equ	0xFDB
 28339                           fsr2h	equ	0xFDA
 28340                           fsr2l	equ	0xFD9
 28341                           status	equ	0xFD8
 28342                           
 28343 ;; *************** function i2_Word_GetPair *****************
 28344 ;; Defined at:
 28345 ;;		line 156 in file "Library/Types.c"
 28346 ;; Parameters:    Size  Location     Type
 28347 ;;  pInput          2   12[COMRAM] PTR struct Word
 28348 ;;		 -> PortG(10), PortA(10), PortG_Property(2), PortF_Property(2), 
 28349 ;;		 -> PortE_Property(2), PortD_Property(2), PortC_Property(2), PortB_Property(2), 
 28350 ;;		 -> PortA_Property(2), PortC(10), PortF(10), PortE(10), 
 28351 ;;		 -> PortD(10), PortB(10), NULL(0), 
 28352 ;;  pPair           1   14[COMRAM] unsigned char 
 28353 ;; Auto vars:     Size  Location     Type
 28354 ;;		None
 28355 ;; Return value:  Size  Location     Type
 28356 ;;                  1    wreg      unsigned char 
 28357 ;; Registers used:
 28358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28359 ;; Tracked objects:
 28360 ;;		On entry : 0/0
 28361 ;;		On exit  : 0/0
 28362 ;;		Unchanged: 0/0
 28363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28364 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28368 ;;Total ram usage:        3 bytes
 28369 ;; Hardware stack levels used:    1
 28370 ;; Hardware stack levels required when called:    2
 28371 ;; This function calls:
 28372 ;;		i2_Byte_GetPair
 28373 ;; This function is called by:
 28374 ;;		i2_Port_SetPin
 28375 ;; This function uses a non-reentrant model
 28376 ;;
 28377                           
 28378                           	psect	text165
 28379  014D92                     __ptext165:
 28380                           	opt stack 0
 28381  014D92                     i2_Word_GetPair:
 28382                           	opt stack 11
 28383                           
 28384                           ;Types.c: 158: if (pPair >= 4)
 28385                           
 28386                           ;incstack = 0
 28387  014D92  0E03               	movlw	3
 28388  014D94  640F               	cpfsgt	i2Word_GetPair@pPair,c
 28389  014D96  D00A               	goto	i2l8777
 28390                           
 28391                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28392  014D98  280D               	incf	i2Word_GetPair@pInput,w,c
 28393  014D9A  6E0A               	movwf	i2Byte_GetPair@pInput,c
 28394  014D9C  0E00               	movlw	0
 28395  014D9E  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 28396  014DA0  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 28397  014DA2  500F               	movf	i2Word_GetPair@pPair,w,c
 28398  014DA4  0FFC               	addlw	252
 28399  014DA6  6E0C               	movwf	i2Byte_GetPair@pPair,c
 28400  014DA8  EF7F  F099         	goto	i2_Byte_GetPair	;wreg free
 28401  014DAC                     i2l8777:
 28402                           
 28403                           ;Types.c: 160: else
 28404                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28405  014DAC  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 28406  014DB0  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 28407  014DB4  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 28408  014DB8  EF7F  F099         	goto	i2_Byte_GetPair	;wreg free
 28409  014DBC                     __end_ofi2_Word_GetPair:
 28410                           	opt stack 0
 28411                           tosu	equ	0xFFF
 28412                           tosh	equ	0xFFE
 28413                           tosl	equ	0xFFD
 28414                           pclatu	equ	0xFFB
 28415                           pclath	equ	0xFFA
 28416                           tblptru	equ	0xFF8
 28417                           tblptrh	equ	0xFF7
 28418                           tblptrl	equ	0xFF6
 28419                           tablat	equ	0xFF5
 28420                           prodh	equ	0xFF4
 28421                           prodl	equ	0xFF3
 28422                           intcon	equ	0xFF2
 28423                           indf0	equ	0xFEF
 28424                           postinc0	equ	0xFEE
 28425                           fsr0h	equ	0xFEA
 28426                           fsr0l	equ	0xFE9
 28427                           wreg	equ	0xFE8
 28428                           indf1	equ	0xFE7
 28429                           postdec1	equ	0xFE5
 28430                           fsr1h	equ	0xFE2
 28431                           fsr1l	equ	0xFE1
 28432                           indf2	equ	0xFDF
 28433                           postinc2	equ	0xFDE
 28434                           postdec2	equ	0xFDD
 28435                           plusw2	equ	0xFDB
 28436                           fsr2h	equ	0xFDA
 28437                           fsr2l	equ	0xFD9
 28438                           status	equ	0xFD8
 28439                           
 28440 ;; *************** function i2_Byte_GetPair *****************
 28441 ;; Defined at:
 28442 ;;		line 87 in file "Library/Types.c"
 28443 ;; Parameters:    Size  Location     Type
 28444 ;;  pInput          2    9[COMRAM] PTR struct Byte
 28445 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28446 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortB..(2), 
 28447 ;;		 -> PortD..(2), PortE..(2), PortF..(2), PortC..(2), 
 28448 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28449 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 28450 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), PortC(10), 
 28451 ;;		 -> PortF(10), PortE(10), PortD(10), PortB(10), 
 28452 ;;		 -> NULL(0), 
 28453 ;;  pPair           1   11[COMRAM] unsigned char 
 28454 ;; Auto vars:     Size  Location     Type
 28455 ;;		None
 28456 ;; Return value:  Size  Location     Type
 28457 ;;                  1    wreg      unsigned char 
 28458 ;; Registers used:
 28459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28460 ;; Tracked objects:
 28461 ;;		On entry : 0/0
 28462 ;;		On exit  : 0/0
 28463 ;;		Unchanged: 0/0
 28464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28465 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28468 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28469 ;;Total ram usage:        3 bytes
 28470 ;; Hardware stack levels used:    1
 28471 ;; Hardware stack levels required when called:    1
 28472 ;; This function calls:
 28473 ;;		i2_Byte_GetZone
 28474 ;; This function is called by:
 28475 ;;		i2_Word_GetPair
 28476 ;; This function uses a non-reentrant model
 28477 ;;
 28478                           
 28479                           	psect	text166
 28480  0132FE                     __ptext166:
 28481                           	opt stack 0
 28482  0132FE                     i2_Byte_GetPair:
 28483                           	opt stack 11
 28484                           
 28485                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28486                           
 28487                           ;incstack = 0
 28488  0132FE  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 28489  013302  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 28490  013306  0E04               	movlw	4
 28491  013308  6E03               	movwf	i2Byte_GetZone@pMax,c
 28492  01330A  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 28493  01330E  0E02               	movlw	2
 28494  013310  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 28495  013312                     i9L__ptext167:
 28496                           	opt stack 0
 28497  013312                     i9Li2_Byte_GetZone:
 28498                           	opt stack 0
 28499  013312                     i9Li2l8735:
 28500                           	opt stack 11
 28501                           
 28502                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28503  013312  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 28504  013316  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 28505  01331A  0E00               	movlw	low (__mediumconst shr (0+16))
 28506  01331C  6EF8               	movwf	tblptru,c
 28507  01331E  0E0F               	movlw	(high __ramtop+-1)
 28508  013320  64F7               	cpfsgt	tblptrh,c
 28509  013322  D003               	bra	i9Li2u552_47
 28510  013324  0008               	tblrd		*
 28511  013326  50F5               	movf	tablat,w,c
 28512  013328  D005               	bra	i9Li2u552_40
 28513  01332A                     i9Li2u552_47:
 28514                           	opt stack 11
 28515  01332A  CFF6 FFE9          	movff	tblptrl,fsr0l
 28516  01332E  CFF7 FFEA          	movff	tblptrh,fsr0h
 28517  013332  50EF               	movf	indf0,w,c
 28518  013334                     i9Li2u552_40:
 28519                           	opt stack 11
 28520  013334  6E09               	movwf	i2Byte_GetZone@Output,c
 28521  013336                     i9Li2l8737:
 28522                           	opt stack 11
 28523                           
 28524                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28525  013336  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28526  013338  0D01               	mullw	1
 28527  01333A  0EC1               	movlw	low _MASKS
 28528  01333C  24F3               	addwf	prodl,w,c
 28529  01333E  6EF6               	movwf	tblptrl,c
 28530  013340  0EFC               	movlw	high _MASKS
 28531  013342  20F4               	addwfc	prodh,w,c
 28532  013344  6EF7               	movwf	tblptrh,c
 28533  013346                     	if	1	;There are 3 active tblptr bytes
 28534  013346  6AF8               	clrf	tblptru,c
 28535  013348  0E00               	movlw	low (__mediumconst shr (0+16))
 28536  01334A  22F8               	addwfc	tblptru,f,c
 28537  01334C                     	endif
 28538  01334C  0008               	tblrd		*
 28539  01334E  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 28540  013352                     i9Li2l8739:
 28541                           	opt stack 11
 28542                           
 28543                           ;Types.c: 68: UINT8 Offset = 0;
 28544  013352  6A08               	clrf	i2Byte_GetZone@Offset,c
 28545  013354  D004               	goto	i9Li2l8745
 28546  013356                     i9Li2l1313:
 28547                           	opt stack 0
 28548  013356                     i9Li2l8741:
 28549                           	opt stack 11
 28550                           
 28551                           ;Types.c: 71: {
 28552                           ;Types.c: 72: pChunk -= pMax;
 28553  013356  5003               	movf	i2Byte_GetZone@pMax,w,c
 28554  013358  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 28555  01335A                     i9Li2l8743:
 28556                           	opt stack 11
 28557                           
 28558                           ;Types.c: 73: Offset += 1;
 28559  01335A  2A08               	incf	i2Byte_GetZone@Offset,f,c
 28560  01335C  D000               	goto	i9Li2l8745
 28561  01335E                     i9Li2l1312:
 28562                           	opt stack 0
 28563  01335E                     i9Li2l8745:
 28564                           	opt stack 11
 28565  01335E  5003               	movf	i2Byte_GetZone@pMax,w,c
 28566  013360  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 28567  013362  E302               	bnc	i9Li2l8747
 28568  013364                     i9Li2u553_41:
 28569                           	opt stack 0
 28570  013364  D7F8               	goto	i9Li2l8741
 28571  013366                     i9Li2u553_40:
 28572                           	opt stack 0
 28573  013366  D000               	goto	i9Li2l8747
 28574  013368                     i9Li2l1314:
 28575                           	opt stack 0
 28576  013368                     i9Li2l8747:
 28577                           	opt stack 11
 28578                           
 28579                           ;Types.c: 74: }
 28580                           ;Types.c: 75: pChunk *= pChunkSize;
 28581  013368  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28582  01336A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 28583  01336C  50F3               	movf	prodl,w,c
 28584  01336E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 28585  013370                     i9Li2l8749:
 28586                           	opt stack 11
 28587                           
 28588                           ;Types.c: 76: pChunk += Offset;
 28589  013370  5008               	movf	i2Byte_GetZone@Offset,w,c
 28590  013372  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 28591  013374                     i9Li2l8751:
 28592                           	opt stack 11
 28593                           
 28594                           ;Types.c: 78: Output >>= pChunk;
 28595  013374  2804               	incf	i2Byte_GetZone@pChunk,w,c
 28596  013376  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 28597  013378  D002               	goto	i9Li2u554_40
 28598  01337A                     i9Li2u554_45:
 28599                           	opt stack 11
 28600  01337A  90D8               	bcf	status,0,c
 28601  01337C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 28602  01337E                     i9Li2u554_40:
 28603                           	opt stack 11
 28604  01337E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 28605  013380  D7FC               	goto	i9Li2u554_45
 28606  013382                     i9Li2l8753:
 28607                           	opt stack 11
 28608                           
 28609                           ;Types.c: 79: Output &= MASK;
 28610  013382  5007               	movf	i2Byte_GetZone@MASK,w,c
 28611  013384  1609               	andwf	i2Byte_GetZone@Output,f,c
 28612  013386                     i9Li2l8755:
 28613                           	opt stack 11
 28614                           
 28615                           ;Types.c: 80: return Output;
 28616  013386  5009               	movf	i2Byte_GetZone@Output,w,c
 28617  013388  0012               	return	
 28618  01338A                     i9Li2l8757:
 28619                           	opt stack 0
 28620  01338A                     i9Li2l1315:
 28621                           	opt stack 0
 28622  01338A  0012               	return	
 28623  01338C                     __end_ofi2_Byte_GetPair:
 28624                           	opt stack 0
 28625                           tosu	equ	0xFFF
 28626                           tosh	equ	0xFFE
 28627                           tosl	equ	0xFFD
 28628                           pclatu	equ	0xFFB
 28629                           pclath	equ	0xFFA
 28630                           tblptru	equ	0xFF8
 28631                           tblptrh	equ	0xFF7
 28632                           tblptrl	equ	0xFF6
 28633                           tablat	equ	0xFF5
 28634                           prodh	equ	0xFF4
 28635                           prodl	equ	0xFF3
 28636                           intcon	equ	0xFF2
 28637                           indf0	equ	0xFEF
 28638                           postinc0	equ	0xFEE
 28639                           fsr0h	equ	0xFEA
 28640                           fsr0l	equ	0xFE9
 28641                           wreg	equ	0xFE8
 28642                           indf1	equ	0xFE7
 28643                           postdec1	equ	0xFE5
 28644                           fsr1h	equ	0xFE2
 28645                           fsr1l	equ	0xFE1
 28646                           indf2	equ	0xFDF
 28647                           postinc2	equ	0xFDE
 28648                           postdec2	equ	0xFDD
 28649                           plusw2	equ	0xFDB
 28650                           fsr2h	equ	0xFDA
 28651                           fsr2l	equ	0xFD9
 28652                           status	equ	0xFD8
 28653                           
 28654 ;; *************** function i2_Byte_GetZone *****************
 28655 ;; Defined at:
 28656 ;;		line 64 in file "Library/Types.c"
 28657 ;; Parameters:    Size  Location     Type
 28658 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28659 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28660 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortB..(2), 
 28661 ;;		 -> PortD..(2), PortE..(2), PortF..(2), PortC..(2), 
 28662 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28663 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 28664 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), PortC(10), 
 28665 ;;		 -> PortF(10), PortE(10), PortD(10), PortB(10), 
 28666 ;;		 -> NULL(0), 
 28667 ;;  pMax            1    2[COMRAM] unsigned char 
 28668 ;;  pChunk          1    3[COMRAM] unsigned char 
 28669 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 28670 ;; Auto vars:     Size  Location     Type
 28671 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 28672 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 28673 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 28674 ;; Return value:  Size  Location     Type
 28675 ;;                  1    wreg      unsigned char 
 28676 ;; Registers used:
 28677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28678 ;; Tracked objects:
 28679 ;;		On entry : 0/0
 28680 ;;		On exit  : 0/0
 28681 ;;		Unchanged: 0/0
 28682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28683 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28684 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28685 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28686 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28687 ;;Total ram usage:        9 bytes
 28688 ;; Hardware stack levels used:    1
 28689 ;; This function calls:
 28690 ;;		Nothing
 28691 ;; This function is called by:
 28692 ;;		i2_Byte_GetPair
 28693 ;; This function uses a non-reentrant model
 28694 ;;
 28695                           
 28696                           	psect	text167
 28697  000000                     __ptext167:
 28698                           	opt stack 0
 28699  000000                     __end_ofi2_Byte_GetZone:
 28700                           	opt stack 0
 28701                           tosu	equ	0xFFF
 28702                           tosh	equ	0xFFE
 28703                           tosl	equ	0xFFD
 28704                           pclatu	equ	0xFFB
 28705                           pclath	equ	0xFFA
 28706                           tblptru	equ	0xFF8
 28707                           tblptrh	equ	0xFF7
 28708                           tblptrl	equ	0xFF6
 28709                           tablat	equ	0xFF5
 28710                           prodh	equ	0xFF4
 28711                           prodl	equ	0xFF3
 28712                           intcon	equ	0xFF2
 28713                           indf0	equ	0xFEF
 28714                           postinc0	equ	0xFEE
 28715                           fsr0h	equ	0xFEA
 28716                           fsr0l	equ	0xFE9
 28717                           wreg	equ	0xFE8
 28718                           indf1	equ	0xFE7
 28719                           postdec1	equ	0xFE5
 28720                           fsr1h	equ	0xFE2
 28721                           fsr1l	equ	0xFE1
 28722                           indf2	equ	0xFDF
 28723                           postinc2	equ	0xFDE
 28724                           postdec2	equ	0xFDD
 28725                           plusw2	equ	0xFDB
 28726                           fsr2h	equ	0xFDA
 28727                           fsr2l	equ	0xFD9
 28728                           status	equ	0xFD8
 28729                           
 28730 ;; *************** function i2_Byte_SetBit *****************
 28731 ;; Defined at:
 28732 ;;		line 32 in file "Library/Types.c"
 28733 ;; Parameters:    Size  Location     Type
 28734 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28735 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28736 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28737 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28738 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28739 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28740 ;;		 -> NULL(0), 
 28741 ;;  pBit            1    2[COMRAM] unsigned char 
 28742 ;;  pValue          1    3[COMRAM] unsigned char 
 28743 ;; Auto vars:     Size  Location     Type
 28744 ;;		None
 28745 ;; Return value:  Size  Location     Type
 28746 ;;                  1    wreg      void 
 28747 ;; Registers used:
 28748 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28749 ;; Tracked objects:
 28750 ;;		On entry : 0/0
 28751 ;;		On exit  : 0/0
 28752 ;;		Unchanged: 0/0
 28753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28756 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28757 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28758 ;;Total ram usage:        7 bytes
 28759 ;; Hardware stack levels used:    1
 28760 ;; This function calls:
 28761 ;;		Nothing
 28762 ;; This function is called by:
 28763 ;;		i2_Port_SetPin
 28764 ;; This function uses a non-reentrant model
 28765 ;;
 28766                           
 28767                           	psect	text168
 28768  01449A                     __ptext168:
 28769                           	opt stack 0
 28770  01449A                     i2_Byte_SetBit:
 28771                           	opt stack 13
 28772                           
 28773                           ;Types.c: 34: pValue &= 1;
 28774                           
 28775                           ;incstack = 0
 28776  01449A  0E01               	movlw	1
 28777  01449C  1604               	andwf	i2Byte_SetBit@pValue,f,c
 28778                           
 28779                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28780  01449E  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28781  0144A2  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 28782  0144A4  2A05               	incf	??i2_Byte_SetBit,f,c
 28783  0144A6  D002               	goto	i2u555_44
 28784  0144A8                     i2u555_45:
 28785  0144A8  90D8               	bcf	status,0,c
 28786  0144AA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28787  0144AC                     i2u555_44:
 28788  0144AC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28789  0144AE  D7FC               	goto	i2u555_45
 28790  0144B0  1C06               	comf	??i2_Byte_SetBit+1,w,c
 28791  0144B2  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 28792  0144B4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28793  0144B8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28794  0144BC  5007               	movf	??i2_Byte_SetBit+2,w,c
 28795  0144BE  16DF               	andwf	indf2,f,c
 28796                           
 28797                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28798  0144C0  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28799  0144C4  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 28800  0144C8  2A05               	incf	??i2_Byte_SetBit,f,c
 28801  0144CA  D002               	goto	i2u556_44
 28802  0144CC                     i2u556_45:
 28803  0144CC  90D8               	bcf	status,0,c
 28804  0144CE  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28805  0144D0                     i2u556_44:
 28806  0144D0  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28807  0144D2  D7FC               	goto	i2u556_45
 28808  0144D4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28809  0144D8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28810  0144DC  5006               	movf	??i2_Byte_SetBit+1,w,c
 28811  0144DE  12DF               	iorwf	indf2,f,c
 28812  0144E0  0012               	return		;funcret
 28813  0144E2                     __end_ofi2_Byte_SetBit:
 28814                           	opt stack 0
 28815                           tosu	equ	0xFFF
 28816                           tosh	equ	0xFFE
 28817                           tosl	equ	0xFFD
 28818                           pclatu	equ	0xFFB
 28819                           pclath	equ	0xFFA
 28820                           tblptru	equ	0xFF8
 28821                           tblptrh	equ	0xFF7
 28822                           tblptrl	equ	0xFF6
 28823                           tablat	equ	0xFF5
 28824                           prodh	equ	0xFF4
 28825                           prodl	equ	0xFF3
 28826                           intcon	equ	0xFF2
 28827                           indf0	equ	0xFEF
 28828                           postinc0	equ	0xFEE
 28829                           fsr0h	equ	0xFEA
 28830                           fsr0l	equ	0xFE9
 28831                           wreg	equ	0xFE8
 28832                           indf1	equ	0xFE7
 28833                           postdec1	equ	0xFE5
 28834                           fsr1h	equ	0xFE2
 28835                           fsr1l	equ	0xFE1
 28836                           indf2	equ	0xFDF
 28837                           postinc2	equ	0xFDE
 28838                           postdec2	equ	0xFDD
 28839                           plusw2	equ	0xFDB
 28840                           fsr2h	equ	0xFDA
 28841                           fsr2l	equ	0xFD9
 28842                           status	equ	0xFD8
 28843                           
 28844 ;; *************** function _Timer0_Stop *****************
 28845 ;; Defined at:
 28846 ;;		line 89 in file "Timer0.c"
 28847 ;; Parameters:    Size  Location     Type
 28848 ;;		None
 28849 ;; Auto vars:     Size  Location     Type
 28850 ;;		None
 28851 ;; Return value:  Size  Location     Type
 28852 ;;                  1    wreg      void 
 28853 ;; Registers used:
 28854 ;;		None
 28855 ;; Tracked objects:
 28856 ;;		On entry : 0/0
 28857 ;;		On exit  : 0/0
 28858 ;;		Unchanged: 0/0
 28859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28864 ;;Total ram usage:        0 bytes
 28865 ;; Hardware stack levels used:    1
 28866 ;; This function calls:
 28867 ;;		Nothing
 28868 ;; This function is called by:
 28869 ;;		_Motor_Step
 28870 ;; This function uses a non-reentrant model
 28871 ;;
 28872                           
 28873                           	psect	text169
 28874  0150A6                     __ptext169:
 28875                           	opt stack 0
 28876  0150A6                     _Timer0_Stop:
 28877                           	opt stack 17
 28878                           
 28879                           ;Timer0.c: 91: INTCONbits.TMR0IF = 0;
 28880                           
 28881                           ;incstack = 0
 28882  0150A6  94F2               	bcf	intcon,2,c	;volatile
 28883                           
 28884                           ;Timer0.c: 92: INTCONbits.TMR0IE = 0;
 28885  0150A8  9AF2               	bcf	intcon,5,c	;volatile
 28886  0150AA  0012               	return		;funcret
 28887  0150AC                     __end_of_Timer0_Stop:
 28888                           	opt stack 0
 28889                           tosu	equ	0xFFF
 28890                           tosh	equ	0xFFE
 28891                           tosl	equ	0xFFD
 28892                           pclatu	equ	0xFFB
 28893                           pclath	equ	0xFFA
 28894                           tblptru	equ	0xFF8
 28895                           tblptrh	equ	0xFF7
 28896                           tblptrl	equ	0xFF6
 28897                           tablat	equ	0xFF5
 28898                           prodh	equ	0xFF4
 28899                           prodl	equ	0xFF3
 28900                           intcon	equ	0xFF2
 28901                           indf0	equ	0xFEF
 28902                           postinc0	equ	0xFEE
 28903                           fsr0h	equ	0xFEA
 28904                           fsr0l	equ	0xFE9
 28905                           wreg	equ	0xFE8
 28906                           indf1	equ	0xFE7
 28907                           postdec1	equ	0xFE5
 28908                           fsr1h	equ	0xFE2
 28909                           fsr1l	equ	0xFE1
 28910                           indf2	equ	0xFDF
 28911                           postinc2	equ	0xFDE
 28912                           postdec2	equ	0xFDD
 28913                           plusw2	equ	0xFDB
 28914                           fsr2h	equ	0xFDA
 28915                           fsr2l	equ	0xFD9
 28916                           status	equ	0xFD8
 28917                           
 28918 ;; *************** function _Timer0_Restart *****************
 28919 ;; Defined at:
 28920 ;;		line 82 in file "Timer0.c"
 28921 ;; Parameters:    Size  Location     Type
 28922 ;;		None
 28923 ;; Auto vars:     Size  Location     Type
 28924 ;;		None
 28925 ;; Return value:  Size  Location     Type
 28926 ;;                  1    wreg      void 
 28927 ;; Registers used:
 28928 ;;		wreg, status,2, status,0
 28929 ;; Tracked objects:
 28930 ;;		On entry : 0/0
 28931 ;;		On exit  : 0/0
 28932 ;;		Unchanged: 0/0
 28933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28938 ;;Total ram usage:        0 bytes
 28939 ;; Hardware stack levels used:    1
 28940 ;; This function calls:
 28941 ;;		Nothing
 28942 ;; This function is called by:
 28943 ;;		_Motor_Step
 28944 ;; This function uses a non-reentrant model
 28945 ;;
 28946                           
 28947                           	psect	text170
 28948  014F9C                     __ptext170:
 28949                           	opt stack 0
 28950  014F9C                     _Timer0_Restart:
 28951                           	opt stack 17
 28952                           
 28953                           ;Timer0.c: 84: TMR0 = COUNTER;
 28954                           
 28955                           ;incstack = 0
 28956  014F9C  C087  FFD6         	movff	_COUNTER,4054	;volatile
 28957  014FA0  C088  FFD7         	movff	_COUNTER+1,4055	;volatile
 28958                           
 28959                           ;Timer0.c: 85: T0CONbits.T0PS = INDEX;
 28960  014FA4  50D5               	movf	4053,w,c	;volatile
 28961  014FA6  0100               	movlb	0	; () banked
 28962  014FA8  1996               	xorwf	_INDEX& (0+255),w,b
 28963  014FAA  0BF8               	andlw	-8
 28964  014FAC  1996               	xorwf	_INDEX& (0+255),w,b
 28965  014FAE  6ED5               	movwf	4053,c	;volatile
 28966                           
 28967                           ; BSR set to: 0
 28968                           ;Timer0.c: 86: INTCONbits.TMR0IF = 0;
 28969  014FB0  94F2               	bcf	intcon,2,c	;volatile
 28970                           
 28971                           ; BSR set to: 0
 28972                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 28973  014FB2  8AF2               	bsf	intcon,5,c	;volatile
 28974                           
 28975                           ; BSR set to: 0
 28976  014FB4  0012               	return		;funcret
 28977  014FB6                     __end_of_Timer0_Restart:
 28978                           	opt stack 0
 28979                           tosu	equ	0xFFF
 28980                           tosh	equ	0xFFE
 28981                           tosl	equ	0xFFD
 28982                           pclatu	equ	0xFFB
 28983                           pclath	equ	0xFFA
 28984                           tblptru	equ	0xFF8
 28985                           tblptrh	equ	0xFF7
 28986                           tblptrl	equ	0xFF6
 28987                           tablat	equ	0xFF5
 28988                           prodh	equ	0xFF4
 28989                           prodl	equ	0xFF3
 28990                           intcon	equ	0xFF2
 28991                           indf0	equ	0xFEF
 28992                           postinc0	equ	0xFEE
 28993                           fsr0h	equ	0xFEA
 28994                           fsr0l	equ	0xFE9
 28995                           wreg	equ	0xFE8
 28996                           indf1	equ	0xFE7
 28997                           postdec1	equ	0xFE5
 28998                           fsr1h	equ	0xFE2
 28999                           fsr1l	equ	0xFE1
 29000                           indf2	equ	0xFDF
 29001                           postinc2	equ	0xFDE
 29002                           postdec2	equ	0xFDD
 29003                           plusw2	equ	0xFDB
 29004                           fsr2h	equ	0xFDA
 29005                           fsr2l	equ	0xFD9
 29006                           status	equ	0xFD8
 29007                           tosu	equ	0xFFF
 29008                           tosh	equ	0xFFE
 29009                           tosl	equ	0xFFD
 29010                           pclatu	equ	0xFFB
 29011                           pclath	equ	0xFFA
 29012                           tblptru	equ	0xFF8
 29013                           tblptrh	equ	0xFF7
 29014                           tblptrl	equ	0xFF6
 29015                           tablat	equ	0xFF5
 29016                           prodh	equ	0xFF4
 29017                           prodl	equ	0xFF3
 29018                           intcon	equ	0xFF2
 29019                           indf0	equ	0xFEF
 29020                           postinc0	equ	0xFEE
 29021                           fsr0h	equ	0xFEA
 29022                           fsr0l	equ	0xFE9
 29023                           wreg	equ	0xFE8
 29024                           indf1	equ	0xFE7
 29025                           postdec1	equ	0xFE5
 29026                           fsr1h	equ	0xFE2
 29027                           fsr1l	equ	0xFE1
 29028                           indf2	equ	0xFDF
 29029                           postinc2	equ	0xFDE
 29030                           postdec2	equ	0xFDD
 29031                           plusw2	equ	0xFDB
 29032                           fsr2h	equ	0xFDA
 29033                           fsr2l	equ	0xFD9
 29034                           status	equ	0xFD8
 29035                           
 29036                           	psect	text171
 29037  000000                     __ptext171:
 29038                           	opt stack 0
 29039                           tosu	equ	0xFFF
 29040                           tosh	equ	0xFFE
 29041                           tosl	equ	0xFFD
 29042                           pclatu	equ	0xFFB
 29043                           pclath	equ	0xFFA
 29044                           tblptru	equ	0xFF8
 29045                           tblptrh	equ	0xFF7
 29046                           tblptrl	equ	0xFF6
 29047                           tablat	equ	0xFF5
 29048                           prodh	equ	0xFF4
 29049                           prodl	equ	0xFF3
 29050                           intcon	equ	0xFF2
 29051                           indf0	equ	0xFEF
 29052                           postinc0	equ	0xFEE
 29053                           fsr0h	equ	0xFEA
 29054                           fsr0l	equ	0xFE9
 29055                           wreg	equ	0xFE8
 29056                           indf1	equ	0xFE7
 29057                           postdec1	equ	0xFE5
 29058                           fsr1h	equ	0xFE2
 29059                           fsr1l	equ	0xFE1
 29060                           indf2	equ	0xFDF
 29061                           postinc2	equ	0xFDE
 29062                           postdec2	equ	0xFDD
 29063                           plusw2	equ	0xFDB
 29064                           fsr2h	equ	0xFDA
 29065                           fsr2l	equ	0xFD9
 29066                           status	equ	0xFD8
 29067                           
 29068                           	psect	rparam
 29069  0000                     tosu	equ	0xFFF
 29070                           tosh	equ	0xFFE
 29071                           tosl	equ	0xFFD
 29072                           pclatu	equ	0xFFB
 29073                           pclath	equ	0xFFA
 29074                           tblptru	equ	0xFF8
 29075                           tblptrh	equ	0xFF7
 29076                           tblptrl	equ	0xFF6
 29077                           tablat	equ	0xFF5
 29078                           prodh	equ	0xFF4
 29079                           prodl	equ	0xFF3
 29080                           intcon	equ	0xFF2
 29081                           indf0	equ	0xFEF
 29082                           postinc0	equ	0xFEE
 29083                           fsr0h	equ	0xFEA
 29084                           fsr0l	equ	0xFE9
 29085                           wreg	equ	0xFE8
 29086                           indf1	equ	0xFE7
 29087                           postdec1	equ	0xFE5
 29088                           fsr1h	equ	0xFE2
 29089                           fsr1l	equ	0xFE1
 29090                           indf2	equ	0xFDF
 29091                           postinc2	equ	0xFDE
 29092                           postdec2	equ	0xFDD
 29093                           plusw2	equ	0xFDB
 29094                           fsr2h	equ	0xFDA
 29095                           fsr2l	equ	0xFD9
 29096                           status	equ	0xFD8
 29097                           
 29098                           	psect	temp
 29099  00005F                     btemp:
 29100                           	opt stack 0
 29101  00005F                     	ds	1
 29102  0000                     int$flags	set	btemp
 29103                           tosu	equ	0xFFF
 29104                           tosh	equ	0xFFE
 29105                           tosl	equ	0xFFD
 29106                           pclatu	equ	0xFFB
 29107                           pclath	equ	0xFFA
 29108                           tblptru	equ	0xFF8
 29109                           tblptrh	equ	0xFF7
 29110                           tblptrl	equ	0xFF6
 29111                           tablat	equ	0xFF5
 29112                           prodh	equ	0xFF4
 29113                           prodl	equ	0xFF3
 29114                           intcon	equ	0xFF2
 29115                           indf0	equ	0xFEF
 29116                           postinc0	equ	0xFEE
 29117                           fsr0h	equ	0xFEA
 29118                           fsr0l	equ	0xFE9
 29119                           wreg	equ	0xFE8
 29120                           indf1	equ	0xFE7
 29121                           postdec1	equ	0xFE5
 29122                           fsr1h	equ	0xFE2
 29123                           fsr1l	equ	0xFE1
 29124                           indf2	equ	0xFDF
 29125                           postinc2	equ	0xFDE
 29126                           postdec2	equ	0xFDD
 29127                           plusw2	equ	0xFDB
 29128                           fsr2h	equ	0xFDA
 29129                           fsr2l	equ	0xFD9
 29130                           status	equ	0xFD8


Data Sizes:
    Strings     62
    Constant    978
    Data        29
    BSS         3050
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      94
    BANK0           160     70     159
    BANK1           256      0     248
    BANK2           256      0     232
    BANK3           256      0     170
    BANK4           192      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    I2C2_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), USTATcopy(COMRAM[1]), USBActiveConfiguration(COMRAM[1]), NULL(NULL[0]), 
		 -> BDT(BIGRAMl[48]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_8(CODE[6]), STR_7(CODE[4]), STR_6(CODE[7]), STR_5(CODE[6]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_8(CODE[6]), STR_7(CODE[4]), STR_6(CODE[7]), STR_5(CODE[6]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(COMRAM[2]), BDT(BIGRAMl[48]), UEP1(SFR[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> USBAlternateInterface(COMRAM[2]), BDT(BIGRAMl[48]), UEP1(SFR[1]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> SetupPkt(BIGRAMh[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> SetupPkt(BIGRAMh[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 3903
		 -> cdc_data_tx(BANK2[64]), cdc_data_rx(BANK2[64]), CtrlTrfData(BIGRAMh[8]), RAM(DATA[3903]), 
		 -> SetupPkt(BIGRAMh[8]), NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 3903
		 -> cdc_data_tx(BANK2[64]), cdc_data_rx(BANK2[64]), CtrlTrfData(BIGRAMh[8]), RAM(DATA[3903]), 
		 -> SetupPkt(BIGRAMh[8]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_10(CODE[7]), USBInputBuffer(BANK2[64]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    USB_Print@pInput	const PTR unsigned char  size(2) Largest target is 13
		 -> STR_8(CODE[6]), STR_7(CODE[4]), STR_6(CODE[7]), STR_5(CODE[6]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[5]), 

    TetrisMoveD@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveU@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveR@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveL@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockReframe@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftD@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftU@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftR@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftL@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockColumnClear@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockRowClear@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockColumnOccupied@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockRowOccupied@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockAnticlockwise@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockClockwise@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockDraw@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockInit@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockFrame@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    S13928TetrisBlock$mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    gTestBlock.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 48
		 -> STR_9(CODE[7]), HMIBoard..(BANK1[8]), HMIBoard(BANK1[48]), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    S13259IMU_CMD$pData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), NULL(NULL[0]), 

    pCMD.pData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), NULL(NULL[0]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> IMU_WriteRegContinue(), IMU_WriteRegFinish(), IMU_ReadRegContinue(), IMU_ReadRegFinish(), 
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> IMU_ReadComplete(), Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> IMU_WriteRegContinue(), IMU_WriteRegFinish(), IMU_ReadRegContinue(), IMU_ReadRegFinish(), 
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> IMU_ReadComplete(), Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    S12394I2CT$mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    Motor_Continious@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    gMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    FIFO_Half@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Half@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Full@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Full@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Empty@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Empty@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Items@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Items@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Read16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Read16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Read@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Read@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_PRead@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_PRead@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Get16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Get16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Get@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Get@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Put16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Put16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Put@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Put@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Register@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Register@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Init@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Init@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    End_2@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    End_2@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    Start_2@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    Start_2@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    itos@destination	PTR unsigned char  size(2) Largest target is 48
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[48]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 48
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[48]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 48
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[48]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 48
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[48]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), 
		 -> PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), 
		 -> PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortB(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), 
		 -> PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), 
		 -> PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortB(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Byte_SetPort@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortB..(BANK1[2]), 
		 -> PortD..(BANK1[2]), PortE..(BANK1[2]), PortF..(BANK1[2]), PortC..(BANK0[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), 
		 -> PortF(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortB..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), 
		 -> TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), 
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), 
		 -> PortF(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortB..(BANK1[2]), 
		 -> PortD..(BANK1[2]), PortE..(BANK1[2]), PortF..(BANK1[2]), PortC..(BANK0[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), 
		 -> PortF(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortB..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), 
		 -> TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), 
		 -> TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), 
		 -> PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), 
		 -> PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortB(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_BUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BUF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BUF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BUF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BUF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	const PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), PortE(BANK1[10]), PortB(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), PortE(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> PortE(BANK1[10]), PortD(BANK1[10]), PortB(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), 
		 -> PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), 
		 -> PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortB(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    S3012SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S3009$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S2961$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S2961$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 48
		 -> DIPSwitch(BANK1[8]), TestButton(BANK1[8]), HMIBoard(BANK1[48]), 

    Button_State@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_State@pInput	const PTR struct Button size(2) Largest target is 48
		 -> DIPSwitch(BANK1[8]), TestButton(BANK1[8]), HMIBoard(BANK1[48]), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    S2079Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 48
		 -> DIPSwitch(BANK1[8]), TestButton(BANK1[8]), HMIBoard(BANK1[48]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    S2168Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S2168Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S2168Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S2168Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    putUSBUSART@data	PTR unsigned char  size(2) Largest target is 64
		 -> STR_8(CODE[6]), STR_7(CODE[4]), STR_6(CODE[7]), STR_5(CODE[6]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[5]), USBInputBuffer(BANK2[64]), 

    S1771$mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    getUSBUSART_FIFO@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    S1771$mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    getUSBUSART_FIFO@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    getsUSBUSART@buffer	PTR unsigned char  size(2) Largest target is 64
		 -> USBInputBuffer(BANK2[64]), 

    CDCDataInHandle	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    CDCDataOutHandle	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pCDCDst.wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCDst.bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCDst.wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S1511_POINTER$wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S1511_POINTER$bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S1511_POINTER$wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S1511_POINTER$bRam	PTR unsigned char  size(2) Largest target is 0

    pCDCSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> SetupPkt(BIGRAMh[8]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 67
		 -> configDescriptor1(CODE[67]), 

    pDst	PTR volatile unsigned char  size(2) Largest target is 8
		 -> CtrlTrfData(BIGRAMh[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(2) Largest target is 48
		 -> BDT(BIGRAMl[48]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 64
		 -> cdc_data_tx(BANK2[64]), cdc_data_rx(BANK2[64]), NULL(NULL[0]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    S102$pFunc	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    outPipes.pFunc	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    S92$wRam	PTR unsigned int  size(2) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned int  size(2) Largest target is 0

    S92$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S68$wRom	PTR const unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S68$wRam	PTR unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S68$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S68$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(COMRAM[2]), BDT(BIGRAMl[48]), UEP1(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _USB_ISR->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    i2_USBDeviceInit->i2_memset
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USER_USB_CALLBACK_EVENT_HANDLER->i2_LED_Toggle
    i2_LED_Toggle->i2_Port_TogglePin
    i2_Port_TogglePin->i2_Port_SetPin
    _CDCInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _Timer0_ISR->_Motor_Step
    _Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone

Critical Paths under _main in BANK0

    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _USB_Poll->_USB_Tasks
    _USB_Tasks->_Event_USBRecieve
    _getsUSBUSART->_USBTransferOnePacket
    _Event_USBRecieve->_printf
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _CDCTxService->_USBTransferOnePacket
    _FunctMotor->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _USB_Init->_USBDeviceInit
    _USBDeviceInit->_memset
    _FunctInitMotor->_Motor_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _FunctInitLCD->_LCD_Init
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _FunctInitHMI->_HMI_Init
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _Button_Init->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _Byte_SetQuad->_Byte_SetZone
    _Port_SetPinType->_PortProperty_Valid
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _PortProperty_Valid->_Word_GetPair
    _FunctHMI->_Console_Render
    _MXK_BlockSwitchTo->_delay_us
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send9
    _Console_MakeField->_Byte_GetBit
    _FunctButton->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _USB_Print->_strlen
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Button_State->_Port_GetPin
    _Button_State->_Port_GetQuad

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1488081
                        _FunctButton
                           _FunctHMI
                    _FunctInitButton
                       _FunctInitHMI
                       _FunctInitLCD
                     _FunctInitMotor
                       _FunctInitUSB
                         _FunctMotor
                           _FunctUSB
                         _ISR_Enable
                           _MXK_Init
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  313104
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3   96267
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   29934
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   14617
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3    9340
                                             15 BANK0     24    21      3
                       _Byte_SetPort
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPort                                         3     0      3    1116
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   73727
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   26245
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctUSB                                             0     0      0    8348
                           _USB_Poll
 ---------------------------------------------------------------------------------
 (2) _USB_Poll                                             0     0      0    8348
                          _USB_Tasks
 ---------------------------------------------------------------------------------
 (3) _USB_Tasks                                            1     1      0    8348
                                             32 BANK0      1     1      0
                       _CDCTxService
                   _Event_USBRecieve
                       _getsUSBUSART
                        _putUSBUSART
 ---------------------------------------------------------------------------------
 (4) _getsUSBUSART                                         4     1      3    3045
                                             11 BANK0      4     1      3
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (4) _Event_USBRecieve                                     1     1      0    1809
                                             31 BANK0      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              19    15      4    1787
                                             21 BANK0     10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0    1469
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (7) _Console_PrintChar                                    4     4      0    1447
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (8) _Console_Tab                                          8     8      0    1065
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     836
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (9) _Console_IncrementCursor                              2     2      0     136
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (10) _Console_NewLine                                     2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (10) _Console_FormFeed                                    4     4      0     136
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (8) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (9) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _CDCTxService                                         2     2      0    2847
                                             11 BANK0      2     2      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (5) _USBTransferOnePacket                                11     7      4    2710
                                              0 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (1) _FunctMotor                                           0     0      0   38062
                  _MXK_BlockSwitchTo
                        _MXK_Release
                        _Motor_Speed
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    2730
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _FunctInitUSB                                         0     0      0    1672
                           _USB_Init
 ---------------------------------------------------------------------------------
 (2) _USB_Init                                             0     0      0    1672
                    _USBDeviceAttach
                      _USBDeviceInit
 ---------------------------------------------------------------------------------
 (3) _USBDeviceInit                                        1     1      0    1672
                                              8 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1470
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctInitMotor                                       0     0      0   77350
                  _MXK_BlockSwitchTo
                        _MXK_Release
                   _Motor_Continious
                         _Motor_Init
                         _Motor_Move
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4     512
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     156
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           2     0      2   76079
                                             45 BANK0      2     0      2
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    2418
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Continious                                     4     0      4     356
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _FunctInitLCD                                         0     0      0  251682
                       _Console_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  251121
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    4791
                                             10 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   13628
                                             14 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  226772
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   23182
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   81489
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1007
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   26045
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   26045
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     158
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _FunctInitHMI                                         0     0      0  188906
                           _HMI_Init
                         _HMI_SetBar
                    _HMI_SetSegments
                  _MXK_BlockSwitchTo
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  188010
                                             67 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   23182
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     0      8   74663
                                             45 BANK0      8     0      8
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2265
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2038
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     156
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     156
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0   90097
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                          8     0      8   90097
                                             59 BANK0      8     0      8
                    _Port_SetPinType
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   38686
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   13700
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   11487
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4    9203
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   47438
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   14181
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    7595
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2303
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4    9251
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (1) _FunctHMI                                             0     0      0  293477
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                  _MXK_BlockSwitchTo
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     403
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     336
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1069
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1     979
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3     622
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0  225383
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                       9     9      0   66622
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16086
                                             14 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   49027
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4   34929
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    7651
                                             10 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    5727
                                             10 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            6     5      1    4745
                                              4 BANK0      6     5      1
                          _SPI_Send9
 ---------------------------------------------------------------------------------
 (5) _SPI_Send9                                            4     0      4     365
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1125
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3     873
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _FunctButton                                          0     0      0  225383
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3  225383
                                             27 BANK0      9     6      3
                       _Button_State
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   33144
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     139
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_HMI_UpButton                                   1     1      0   33049
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _HMI_SetUp                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Event_HMI_RightButton                                1     1      0   30289
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _HMI_SetRight                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Event_HMI_LeftButton                                 1     1      0   30289
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _HMI_SetLeft                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Event_HMI_DownButton                                 1     1      0   33049
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    2782
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    1887
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     469
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     427
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     430
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     471
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetDown                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Event_HMI_DIPSwitch                                  2     2      0   30270
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   30270
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
                          _USB_Print
 ---------------------------------------------------------------------------------
 (5) _USB_Print                                            4     2      2    1809
                                              6 BANK0      4     2      2
                        _putUSBUSART
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     224
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _putUSBUSART                                          3     0      3     580
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   28392
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   28370
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   26045
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    7083
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2417
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    1837
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   13779
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetBar                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State                                         2     0      2    2706
                                              6 BANK0      2     0      2
                        _Port_GetPin
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3     873
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1677
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       14    14      0   56066
                                             41 COMRAM    14    14      0
                         _Timer0_ISR
                            _USB_ISR
 ---------------------------------------------------------------------------------
 (12) _USB_ISR                                             0     0      0   54419
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (13) _USBDeviceTasks                                      1     1      0   54419
                                             40 COMRAM     1     1      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i2_USBDeviceInit
 ---------------------------------------------------------------------------------
 (14) i2_USBDeviceInit                                     1     1      0     610
                                              8 COMRAM     1     1      0
                           i2_memset
 ---------------------------------------------------------------------------------
 (14) _USBWakeFromSuspend                                  0     0      0    7415
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USBSuspend                                          0     0      0    7415
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USBStallHandler                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) _USBIncrement1msInternalTimers                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPService                                    1     1      0   31518
                                             39 COMRAM     1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                             _memcpy
 ---------------------------------------------------------------------------------
 (15) _memcpy                                             10     4      6     522
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfSetupHandler                              0     0      0   30767
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (16) _USBCtrlEPServiceComplete                            0     0      0      92
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (17) _USBCtrlEPAllowDataStage                             0     0      0      92
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (16) _USBCheckStdRequest                                  0     0      0   23260
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (17) _USBStdSetCfgHandler                                 1     1      0    7913
                                             33 COMRAM     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i2_memset
 ---------------------------------------------------------------------------------
 (15) i2_memset                                            8     2      6     408
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (17) _USBStdGetStatusHandler                              3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (17) _USBStdGetDscHandler                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (17) _USBStdFeatureReqHandler                             6     6      0    7886
                                             33 COMRAM     6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USER_USB_CALLBACK_EVENT_HANDLER                     8     2      6    7415
                                             25 COMRAM     8     2      6
                          _CDCInitEP
                 _USBCheckCDCRequest
                       i2_LED_Toggle
 ---------------------------------------------------------------------------------
 (15) i2_LED_Toggle                                        1     1      0    2006
                                             24 COMRAM     1     1      0
                   i2_Port_TogglePin
 ---------------------------------------------------------------------------------
 (16) i2_Port_TogglePin                                    4     1      3    1984
                                             20 COMRAM     4     1      3
                      i2_Port_GetPin
                      i2_Port_SetPin
 ---------------------------------------------------------------------------------
 (17) i2_Port_GetPin                                       6     3      3     121
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (15) _USBCheckCDCRequest                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _CDCInitEP                                           0     0      0    1367
                  _USBEnableEndpoint
             i2_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (16) i2_USBTransferOnePacket                             11     7      4     454
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (16) _USBEnableEndpoint                                   4     3      1     913
                                              8 COMRAM     4     3      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (17) _USBConfigureEndpoint                                8     7      1     490
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfOutHandler                                0     0      0     114
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (16) _USBCtrlTrfRxService                                 2     2      0     114
                                              0 COMRAM     2     2      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (17) _USBCtrlEPAllowStatusStage                           0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfInHandler                                 1     1      0     115
                                              1 COMRAM     1     1      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (18) _USBCtrlTrfTxService                                 1     1      0      92
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1647
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (13) _Motor_Step                                          2     2      0    1647
                                             20 COMRAM     2     2      0
                     _Timer0_Restart
                        _Timer0_Stop
                      i2_Port_SetPin
 ---------------------------------------------------------------------------------
 (17) i2_Port_SetPin                                       5     1      4    1647
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (18) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (18) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) _Timer0_Stop                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Timer0_Restart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FunctButton
     _Button_Poll
       _Button_State
         _Port_GetPin
         _Port_GetQuad
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_HMI_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_HMI_DownButton *
         _HMI_SetDown
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_HMI_LeftButton *
         _HMI_SetBar
         _HMI_SetLeft
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_HMI_RightButton *
         _HMI_SetBar
         _HMI_SetRight
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_HMI_UpButton *
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _HMI_SetUp
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _USB_Print
           _putUSBUSART
           _strlen
   _FunctHMI
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _SPI_Send9
         _Set_Addr_Window (ARG)
           _LCD_Write
             _SPI_Send9
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _SPI_Send9
         _Set_Addr_Window
           _LCD_Write
             _SPI_Send9
     _HMI_Poll
       _Button_Poll
         _Button_State
           _Port_GetPin
           _Port_GetQuad
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_HMI_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_HMI_DownButton *
           _HMI_SetDown
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_HMI_LeftButton *
           _HMI_SetBar
           _HMI_SetLeft
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_HMI_RightButton *
           _HMI_SetBar
           _HMI_SetRight
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_HMI_UpButton *
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _HMI_SetUp
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _USB_Print
             _putUSBUSART
             _strlen
     _HMI_Render
       _OutSeg
         _SPI_Send
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Release
   _FunctInitButton
     _Button_Init
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
   _FunctInitHMI
     _HMI_Init
       _Button_Init
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _HMI_SetBar
     _HMI_SetSegments
       _ToSegment
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Release
   _FunctInitLCD
     _Console_Init
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _SPI_Send9
         _Set_Addr_Window
           _LCD_Write
             _SPI_Send9
       _LCD_Write
         _SPI_Send9
       _Set_Rotation
         _LCD_Write
           _SPI_Send9
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Release
   _FunctInitMotor
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Release
     _Motor_Continious
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _Motor_Move
       _Timer0_Start
   _FunctInitUSB
     _USB_Init
       _USBDeviceAttach
       _USBDeviceInit
         _memset
   _FunctMotor
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Release
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___wmul
   _FunctUSB
     _USB_Poll
       _USB_Tasks
         _CDCTxService
           _USBTransferOnePacket
         _Event_USBRecieve
           _printf
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _getsUSBUSART
           _USBTransferOnePacket
         _putUSBUSART
   _ISR_Enable
   _MXK_Init
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetPort
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     _Motor_Step *
       _Timer0_Restart
       _Timer0_Stop
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
   _USB_ISR
     _USBDeviceTasks
       _USBCtrlEPAllowStatusStage
       _USBCtrlEPService
         _USBCtrlTrfInHandler
           _USBCtrlTrfTxService
         _USBCtrlTrfOutHandler
           _USBCtrlTrfRxService
             _USBCtrlEPAllowStatusStage
         _USBCtrlTrfSetupHandler
           _USBCheckStdRequest
             _USBStdFeatureReqHandler
               _USER_USB_CALLBACK_EVENT_HANDLER
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i2_USBTransferOnePacket
                 _USBCheckCDCRequest
                 i2_LED_Toggle
                   i2_Port_TogglePin
                     i2_Port_GetPin
                     i2_Port_SetPin
                       i2_Byte_SetBit
                       i2_Word_GetPair
                         i2_Byte_GetPair
                           i2_Byte_GetZone
             _USBStdGetDscHandler
             _USBStdGetStatusHandler
             _USBStdSetCfgHandler
               _USER_USB_CALLBACK_EVENT_HANDLER
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i2_USBTransferOnePacket
                 _USBCheckCDCRequest
                 i2_LED_Toggle
                   i2_Port_TogglePin
                     i2_Port_GetPin
                     i2_Port_SetPin
                       i2_Byte_SetBit
                       i2_Word_GetPair
                         i2_Byte_GetPair
                           i2_Byte_GetZone
               i2_memset
             _USER_USB_CALLBACK_EVENT_HANDLER
               _CDCInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i2_USBTransferOnePacket
               _USBCheckCDCRequest
               i2_LED_Toggle
                 i2_Port_TogglePin
                   i2_Port_GetPin
                   i2_Port_SetPin
                     i2_Byte_SetBit
                     i2_Word_GetPair
                       i2_Byte_GetPair
                         i2_Byte_GetZone
           _USBCtrlEPServiceComplete
             _USBCtrlEPAllowDataStage
               _USBCtrlTrfTxService
             _USBCtrlEPAllowStatusStage
           _USER_USB_CALLBACK_EVENT_HANDLER
             _CDCInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               i2_USBTransferOnePacket
             _USBCheckCDCRequest
             i2_LED_Toggle
               i2_Port_TogglePin
                 i2_Port_GetPin
                 i2_Port_SetPin
                   i2_Byte_SetBit
                   i2_Word_GetPair
                     i2_Byte_GetPair
                       i2_Byte_GetZone
         _memcpy
       _USBIncrement1msInternalTimers
       _USBStallHandler
       _USBSuspend
         _USER_USB_CALLBACK_EVENT_HANDLER
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i2_USBTransferOnePacket
           _USBCheckCDCRequest
           i2_LED_Toggle
             i2_Port_TogglePin
               i2_Port_GetPin
               i2_Port_SetPin
                 i2_Byte_SetBit
                 i2_Word_GetPair
                   i2_Byte_GetPair
                     i2_Byte_GetZone
       _USBWakeFromSuspend
         _USER_USB_CALLBACK_EVENT_HANDLER
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i2_USBTransferOnePacket
           _USBCheckCDCRequest
           i2_LED_Toggle
             i2_Port_TogglePin
               i2_Port_GetPin
               i2_Port_SetPin
                 i2_Byte_SetBit
                 i2_Word_GetPair
                   i2_Byte_GetPair
                     i2_Byte_GetZone
       _USER_USB_CALLBACK_EVENT_HANDLER
         _CDCInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           i2_USBTransferOnePacket
         _USBCheckCDCRequest
         i2_LED_Toggle
           i2_Port_TogglePin
             i2_Port_GetPin
             i2_Port_SetPin
               i2_Byte_SetBit
               i2_Word_GetPair
                 i2_Byte_GetPair
                   i2_Byte_GetZone
       i2_USBDeviceInit
         i2_memset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            B00      0     7D1      37       71.1%
BIGRAMl            3FF      0     12C      38       29.3%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      AA      11       66.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      E8       9       90.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F8       7       96.9%
BITBANK4            C0      0       0      13        0.0%
BANK4               C0      0       0      14        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      5E       1      100.0%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     387      12        0.0%
DATA                 0      0     C84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Mar 27 17:57:30 2017

                        SPI_Init@pChannel 00E1                __size_of_MXK_BlockSwitchTo 0032  
                                       _A 00FA                                _USB_SD_Ptr FD02  
                                       _a 005D                      __end_of_BLOCKS_COUNT FD12  
                                       _i 009E                                         _j 009F  
                                       _k 00A0                                         _l 00FD  
                                       _u 00A3                                         _w 00FE  
                                      _Hz 00F8                              ___awdiv@sign 00B3  
                           _USBDeviceInit 1C10                       ___wmul@multiplicand 00B0  
                      __size_of_CDCInitEP 0054                        LCD_DrawField@pSize 00C6  
                      LCD_DrawField@count 00CC                         ?_Event_TestButton 0001  
    USER_USB_CALLBACK_EVENT_HANDLER@event 001A      USER_USB_CALLBACK_EVENT_HANDLER@pdata 001C  
                                     l202 4BA4                                       l203 4BA2  
                                     l142 1C6E                               ?_LED_Toggle 0001  
                           ??_Console_Tab 00B6               __end_of_USBStdGetDscHandler 189C  
                                     l521 140C                               ?_HMI_GetBar 0001  
                                     l516 13C8                                       l651 001C  
                                     l726 4216                                       l719 45D6  
                                     l648 001C                                       _BDT 000400  
                                     _PR2 000FCB                                       _UIE 000F5C  
                                     _UIR 000F62                                _USBSuspend 4EE6  
                                     _val 008D                               ?_HMI_SetBar 0001  
                      ??_Event_TestButton 00C7                      USBStdSetCfgHandler@i 0022  
                            _Word_GetPair 4CBC                                       prod 000FF3  
                             ?_HMI_Render 0001                                       tosl 000FFD  
                                     wreg 000FE8                        Console_MakeField@x 00BE  
                      Console_MakeField@y 00BF                            _USBDeviceTasks 19CA  
                          _USBDeviceState 0049                              Console_Tab@c 00BD  
                            Console_Tab@i 00BC                       LCD_DrawField@pField 00C0  
                            Console_Tab@t 00BB              __end_of_Event_HMI_LeftButton 440A  
                    Port_Set@TypeRequired 00D0                             i2_Port_GetPin 49F2  
                       Console_FormFeed@x 00B0                         Console_FormFeed@y 00B1  
                     LCD_DrawField@pPoint 00C2                     ??_USBCtrlTrfRxService 0001  
            __end_of_Event_HMI_DownButton 49F2                            ?_LCD_DrawField 00C0  
                __size_ofi2_USBDeviceInit 010C                            ??_getsUSBUSART 00BC  
                USBEnableEndpoint@options 0009                     Port_SetPinType@Output 00D8  
                         Port_SetPin@Type 00C1                           Port_SetPin@pPin 00BF  
                           ?_Byte_GetPair 00B7                           __end_of_LED_Set 49BC  
                 __size_ofi2_Word_GetPair 002A                       i2Port_GetPin@Output 0006  
                           i2_Port_SetPin 3E62                              _Word_SetPair 4BAE  
                           ?_Byte_GetZone 00AE                                      l1121 05C0  
                                    l1312 005A                                      l1313 004C  
                                    l1314 006C                                      l1306 0034  
                                    l1315 00A4                                      l1307 0026  
                                    l1235 4EC6                                      l1260 3E10  
                                    l1308 0046                                      l1309 00BC  
                                    l1237 4ECA                                      l1280 268E  
                                    l1265 3E34                                      l2242 2786  
                                    l3210 40E0                                      l1275 263C  
                                    l3220 4490                                      l1700 0DCA  
                                    l2193 494C                                      l2188 1E3A  
              USBConfigureEndpoint@handle 0007                                      l3157 38B4  
                                    l1726 2F18                                      l1681 0186  
                                    l1690 0032                                      l1682 0006  
                                    l1691 00DE                                      l1683 0008  
                                    l1692 0180                                      l1684 01B6  
                                    l2484 504E                                      l1757 1506  
                                    l1693 017E                                      l1685 0010  
                                    l1694 01B6                                      l1686 0018  
                                    l1687 0020                                      l1688 0028  
                                    l1689 0030                                      l9101 0062  
                                    l9103 0094                                      l9111 44F6  
                                    l9121 4514                                      l9131 33C6  
                                    l9231 3B50                                      l9311 0C06  
                                    l9303 0C02                                      l9135 33D2  
                          ??_Console_Init 00AE                                      l9233 3B58  
                                    l9241 3B86                                      l9075 4CD8  
                                    l9235 3B60                                      l9227 3B48  
                                    l9411 0C38                                      l9403 0C34  
                                    l9331 0C10                                      l9323 0C0C  
                                    l9315 0C08                                      l9307 0C04  
                                    l9091 002E                                      l9093 0034  
                                    l9085 0000                                      l9511 0C6A  
                                    l9503 0C66                                      l9431 0C42  
                                    l9423 0C3E                                      l9415 0C3A  
                                    l9407 0C36                                      l9351 0C1A  
                                    l9343 0C16                                      l9335 0C12  
                                    l9327 0C0E                                      l9319 0C0A  
                                    l9271 0BF2                                      l9263 0BEE  
                                    l9095 0046                                      l9087 001E  
                                    l8801 0044                                      l9097 0052  
                                    l9089 0026                                      l8811 0078  
                                    l8803 004C                                      l9507 0C68  
                                    l9451 0C4C                                      l9443 0C48  
                                    l9435 0C44                                      l9427 0C40  
                                    l9419 0C3C                                      l9371 0C24  
                                    l9363 0C20                                      l9355 0C1C  
                                    l9347 0C18                                      l9339 0C14  
                                    l9291 0BFC                                      l9283 0BF8  
                                    l9275 0BF4                                      l9267 0BF0  
                                    l9099 005A                                      l8813 0080  
                                    l8805 0054                                      l9517 0C6C  
                                    l9525 4050                                      l9533 4082  
                                    l9541 0010                                      l8815 0096  
                                    l8807 005A                                      l9471 0C56  
                                    l9463 0C52                                      l9455 0C4E  
                                    l9447 0C4A                                      l9439 0C46  
                                    l9391 0C2E                                      l9383 0C2A  
                                    l9375 0C26                                      l9367 0C22  
                                    l9359 0C1E                                      l9295 0BFE  
                                    l9287 0BFA                                      l9279 0BF6  
                                    l8823 3AB6                                      l8831 3B10  
                                    l9551 0026                                      l9543 0016  
                                    l9535 0004                     Port_SetPinType@pInput 00D4  
                                    l8817 009E                                      l8809 006C  
                                    l9625 40A8                                      l9561 0086  
                                    l9553 0028                                      l9545 0018  
                                    l9537 0008                                      l8819 00A4  
                                    l9491 0C60                                      l9483 0C5C  
                                    l9475 0C58                                      l9467 0C54  
                                    l9459 0C50                                      l9395 0C30  
                                    l9387 0C2C                                      l9379 0C28  
                                    l9299 0C00                                      l9627 40B2  
                                    l8843 3C10                                      l8923 4304  
                                    l9571 0140                                      l9563 00C2  
                                    l9555 002E                                      l9547 001E  
                                    l9539 000E                                      l9637 40D4  
                                    l9629 40B8                                      l9653 4484  
                                    l9645 4460                                      l8861 3C5A  
                                    l8853 3C28                                      l8829 3B0C  
                                    l9573 0182                                      l9565 00DE  
                                    l9557 0032                                      l9549 0020  
                                    l9495 0C62                                      l9487 0C5E  
                                    l9479 0C5A                                      l9399 0C32  
                                    l9647 446A                                      l8847 3C1A  
                                    l8943 3542                                      l9575 0184  
                                    l9567 00EC                                      l9559 0080  
                                    l9649 4470                                      l9921 2602  
                                    l8849 3C1E                                      l8865 3C60  
                                    l9569 013A                                      l9577 0186  
                                    l9915 4F60                                      l9499 0C64  
                                    l8955 3566                                      l8971 359E  
                                    l8797 0000                                      l9933 2654  
                                    l8957 3570                                      l8949 3554  
                                    l8799 0026                                      l8975 35AC  
                                    l8967 3592                                      l8959 3576  
                                    STR_1 FFFC                                      STR_2 FFD2  
                                    STR_3 FFCE                                      STR_4 FFC1  
                                    l9947 26A6                                      STR_5 FFF2  
                                    STR_6 FFE5                                      STR_7 FFF8  
                                    STR_8 FFEC                                      l9975 4BC8  
                                    l9967 3FDE                                      STR_9 FFDE  
                                    l9989 2CE2                                      l9997 2D2A  
                                    _DIST 01F4                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    _LATF 000F8E                                      _LATG 000F8F  
                                    u6100 013A                                      u6101 0138  
                                    u6030 4822                       __end_of_GetPortPORT 3846  
                                    u6040 3DB0                                      u6035 481C  
                                    u5600 006A                                      u6080 0080  
                                    u5601 0068                                      u6081 007E  
                                    u7050 46F2                                      u5610 0090  
                                    u6090 00EC                                      u7115 1648  
                                    u6091 00EA                                      u5710 4300  
                                    u7055 46EC                                      u5615 008A  
                                    u5720 4322                                      u7320 24B0  
                                    _PIR1 000F9E                                      u7330 24DC  
                                    _PIR2 000FA1                                      _PIR3 000FA4  
                                    u8205 036A                                      u5590 0022  
                                    u9030 4882                                      u7255 501C  
                                    u7327 24A6                                      u8215 037E  
                   ??_USBCtrlTrfTxService 0001                                      u7256 5020  
                                    u5904 0076                                      u7600 149A  
                     __end_of_GetPortTRIS 3742                                      u7265 5008  
                                    u5905 0070                                      u7337 24D2  
                                    u8225 0392                                      u7266 500C  
                                    u5914 00A8                                      u7275 4FF4  
                                    u5915 00A2                                      u8235 03AC  
                                    u7276 4FF8                                      u7700 4BFC  
                                    u5597 0018                                      u7285 5030  
                                    u8245 04A8                                      u7286 5034  
                                    u7294 3A8C                                      u7295 3A86  
                                    u6655 262A                                      u7607 1490  
                                    u8255 04FE                                      _UCFG 000F5F  
                                    u6760 26F6                                      u6656 262C  
                                    u7705 4BF6                                      u8265 052E  
                                    u5874 424E                                      u5890 0044  
                                    u5875 4248                                      u6675 267C  
                                    u5891 0042                                      u8275 055E  
                                    u5884 4276                                      u6676 267E  
                                    u7580 1458                                      _UEP0 000F4C  
                                    u5885 4270                                      _UEP1 000F4D  
                                    u6790 275C                                      u6767 26EC  
                                    u8455 3BC4                                      u7587 144E  
                                    _UEIE 000F5D                       i2Port_GetPin@pInput 0001  
                                    u6797 2752                                      _SPI1 0163  
                                    u9820 3F02                                      _SPI2 016E  
                                    _UEIR 000F63                                      _UCON 000F65  
                                    _TMR0 000FD6                                      _Read 0044  
                                    _gISR 0124                                      _pCMD 0114  
                         _CDCDataInHandle 0083                        Event_DIPSwitch@Bar 00C8  
                           ??_Byte_GetBit 00B1    USBStdFeatureReqHandler@current_ep_data 0025  
                                    _pDst 0131                        SPI_MaxSpeed@pInput 00BD  
                           ?_Byte_SetPair 00B9                           __end_of_SPI_DCS 4C90  
                                    _main 4B24                  ??i2_USBTransferOnePacket 0005  
                         ??i2_Byte_SetBit 0005                             ?_Byte_SetQuad 00B9  
                                    _itos 2CB2                             ?_Byte_SetPort 00AE  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      indf1 000FE7  
                             _BaudRateGen 0110                                      fsr1l 000FE1  
                                    indf2 000FDF                                      fsr2l 000FD9  
                         _USBDeviceAttach 4B80                             ?_Byte_SetZone 00AE  
                                    btemp 005F                                      _zero 005E  
                         __end_of_USB_ISR 0000                                      pclat 000FFA  
                           ??_Byte_SetBit 00B2                              ?_HMI_SetLeft 0001  
                      __size_of_LCD_Reset 007A                              ?_HMI_SetDown 0001  
                                    prodh 000FF4                                      prodl 000FF3  
                        Motor_Move@pDelta 00B3                                      start 0094  
                      __size_of_LCD_Write 0038                             __CFG_IESO$OFF 000000  
                       Timer0_Init@DIVIDE 00C5                           ?_SPI_DisableISR 00AE  
                        Motor_Move@pMotor 00B1                       HMI_SetButton@pValue 00B4  
              __end_of_USBCheckStdRequest 2BFE                    ??_USBCtrlTrfOutHandler 0003  
                           Console_Init@x 00B0                             Console_Init@y 00B1  
                      __size_of_HMI_SetUp 0014                         i2Byte_SetBit@pBit 0003  
                            ___param_bank 000010                           __end_of_Font5x7 FEF2  
               ??_USBStdFeatureReqHandler 0022                      Set_Rotation@rotation 00B9  
                  __size_of_HMI_SetButton 007A                  ??_USBStdGetStatusHandler 0001  
                  __size_of_HMI_SetNumber 0024                               ?_ISR_Enable 0001  
                          ?_USBDeviceInit 0001              __size_of_Console_ClearCursor 0030  
                        __end_of_LCD_Fill 45F8                          __end_of_LCD_Init 19CA  
                 __size_of_FunctInitMotor 0046                             __CFG_PLLDIV$3 000000  
                        __end_of_LED_Init 4452                             ??_Button_Init 00F1  
                           ??_FunctButton 00D2                   GetPortProperties@pInput 00B0  
                           ??_Button_Poll 00CC                                     l10001 2D3E  
                                   l10003 2D52                                     l10101 2778  
                                   l10105 4602                                     l10121 386E  
                                   l10107 4608                                     l11003 3E4A  
                                   l10131 38A4                                     l10123 3874  
                        __end_of_HMI_Init 1E3C                                     l10301 4A72  
                                   l10109 461C                                     l10311 0F72  
                                   l10119 3860                                     l10305 4A84  
                                   l10313 0F96                                     l10401 168E  
                                   l10331 10B8                                     l10411 16E8  
                                   l10147 21A8                                     l10139 2180  
                                   l10325 105A                                     l10333 10CE  
                                   l11221 1C50                                     l12101 120C  
                                   l10087 2726                                     l10079 26C6  
                                   l10095 273A                                     l11135 47EE  
                                   l11151 43EE                                     l10319 0FF6  
                                   l12111 3C7A                                     l10159 2224  
                                   l12103 1234                                     l10097 2762  
                                   l10409 16A2                                     l12121 3C92  
                                   l11233 1C78                                     l11217 1C46  
                                   l11147 43E2                                     l11155 4404  
                                   l11171 47B2                                     l10435 4C82  
                                   l12115 3C84                                     l10347 0000  
                                   l12051 1990                                     l10603 245E  
                                   l12107 123A                                     l11165 4796  
                                   l10357 4962                                     l11501 398A  
                                   l12141 0DD0                                     l10429 4ECE  
                                   l12117 3C88                                     l10349 0000  
                                   l10365 432A                                     l10373 4354  
                                   l11413 3654                                     l12045 1910  
                                   l11245 1C96                                     l10613 248E  
                                   l10605 2464                                     l10621 24E2  
                                   l11183 4A56                                     l12127 3CD2  
                                   l10375 4366                                     l11431 3696  
                                   l12055 1998                                     l10631 4B6E  
                                   l11255 1CF2                                     l10623 2504  
                                   l11511 499A                                     l11505 39AC  
                                   l12145 0DEC                                     l11425 3680  
                                   l12049 196A                                     l12241 4874  
                                   l11249 1CA0                                     l10801 14B2  
                                   l10617 24BA                                     l12073 443E  
                                   l10299 4A62                                     l11195 49EC  
                                   l12171 0F40                                     l10387 42D4  
                                   l11363 30B4                                     l12331 1E22  
                                   l11451 45DA                                     l11419 366A  
                                   l10627 4B5C                                     l10811 14E4  
                                   l11515 49B0                                     l12075 4448  
                                   l12067 4410                                     l11531 376C  
                                   l11523 3754                                     l11611 36F6  
                                   l11603 36DE                                     l12091 11AE  
                                   l12173 0F4A                                     l12157 0EF6  
                                   l12165 0F2E                                     l12149 0DF6  
                                   l10821 08CE                                     l11373 310C  
                                   l11461 45F2                                     l12245 4892  
                                   l10741 31B2                                     l10733 317A  
                                   l11509 498C                                     l12069 4426  
                                   l12093 11C6                                     l11391 1E94  
                                   l11471 420E                                     l12159 0F20  
                                   l12343 492C                                     l10815 082A  
                                   l10831 0992                                     l11375 3120  
                                   l10911 0148                                     l12327 1E14  
                                   l11447 45CE                                     l11439 36AC  
                                   l10735 3180                                     l10743 31D2  
                                   l11543 3790                                     l11535 3778  
                                   l11527 3760                                     l11519 3748  
                                   l11623 371A                                     l11615 3702  
                                   l11607 36EA                                     l12095 11DE  
                                   l12087 11A4                                     l11721 2EF0  
                                   l11705 4904                                     l10825 0932  
                                   l10817 086E                                     l10833 09A8  
                                   l10913 016A                                     l10809 14C4  
                                   l10761 13D2                                     l10729 3156  
                                   l11561 37D6                                     l11553 37A4  
                                   l11633 0A2C                                     l12097 11F6  
                                   l10851 34CC                                     l10843 34B4  
                                   l11715 2EE2                                     l11475 421A  
                                   l12339 491E                                     l12443 4A9A  
                                   l11379 3132                                     l10915 01AC  
                                   l10923 027A                                     l10755 13BC  
                                   l10739 31A8                                     l11547 379C  
                                   l11539 3784                                     l11619 370E  
                                   l11643 0ACE                                     l11635 0A34  
                                   l11651 0B1A                                     l11389 1E80  
                                   l11725 2EFA                                     l11485 4232  
                                   l12445 4AA2                                     l10917 01F0  
                                   l10925 0292                                     l10909 0138  
                                   l10781 142E                                     l10773 1410  
                                   l11581 3812                                     l11573 37FA  
                                   l11565 37E2                                     l11557 37CA  
                                   l11629 3722                                     l10863 34F6  
                                   l10855 34D6                                     l10847 34BE  
                                   l10839 34A6                                     l11735 2F52  
                                   l11719 2EEC                                     l10919 0234  
                                   l12199 4848                                     l10791 1470  
                                   l10767 13FC                                     l10599 244E  
                                   l11591 3826                                     l11639 0A74  
                                   l11729 2F20                                     l11841 3BF8  
                                   l11833 3BB6                                     l11753 1544  
                                   l11585 381E                                     l11577 3806  
                                   l11569 37EE                                     l11681 0584  
                                   l11649 0B08                                     l10859 34E4  
                                   l11739 2F5C                                     l10891 0014  
                                   l11763 155A                                     l11595 36C6  
                                   l11683 058C                                     l10869 3506  
                                   l11829 3BAC                                     l11765 15AA  
                                   l10789 1468                                     l13533 4B40  
                                   l11759 1550                                     l12911 3F18  
                                   l10799 14AA                                     l11599 36D2  
                                   l11679 0580                                     l11687 05AA  
                                   l10993 3E26                                     l10985 3E02  
                                   l11697 48E0                                     l10977 4738  
                                   l10899 00A2                          __end_of_HMI_Poll 4040  
                                   _I2C1T 0051                                     _I2C2T 01D4  
                                   ?_main 0001                           __end_of___awdiv 35B6  
                                   ?_itos 00B5                                     STR_10 FFD7  
       __size_of_USBCtrlEPServiceComplete 00E2                           _Event_DIPSwitch 4AC2  
                         __end_of___lldiv 38C6                           ___awdiv@divisor 00B0  
                  __end_of_USBDeviceTasks 1AF2                 ?_USBCtrlEPServiceComplete 0001  
                                   _INDEX 0096                           __end_of___lwdiv 40EA  
                                   _MASKS FCC1                           __end_of___lwmod 449A  
                                   i2l142 20B4                                     i2l303 46BC  
                                   i2l153 19F6                                     i2l227 23D4  
                                   i2l163 1A80                                     i2l164 1AEE  
                                   i2l165 1A90                                     i2l352 2B52  
                                   i2l361 2B8E                                     i2l338 2E0C  
                                   i2l290 2F70                                     i2l293 2FF2  
                                   i2l294 2F7E                                     i2l455 3052  
                                   i2l367 05E0                                     i2l295 2F84  
                                   i2l457 3084                                     i2l386 0794  
                                   _UADDR 000F5E                           ___awdiv@counter 00B2  
                                   _PORTA 000F80                                     _PORTB 000F81  
                                   _PORTC 000F82                                     _PORTD 000F83  
                                   _PORTE 000F84                                     _PORTF 000F85  
                                   _PORTG 000F86                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                                   _TRISF 000F97                                     _TRISG 000F98  
                                   _USTAT 000F64                          ??i2_Byte_GetPair 000D  
      __size_of_USBCtrlEPAllowStatusStage 00BC                                     _HzOld 012F  
                          ?i2_Port_GetPin 0001                          ??i2_Byte_GetZone 0006  
                           ?_FunctInitLCD 0001                        Port_TogglePin@pPin 00C4  
                           ?_FunctInitHMI 0001                            __CFG_FCMEN$OFF 000000  
                           ?_FunctInitUSB 0001                                     _PortA 0179  
                                   _PortB 0183                                     _PortC 00A4  
                                   _PortD 018D                                     _PortE 0197  
                                   _PortF 01A1                                     _PortG 01AB  
         __end_of_USBCtrlEPAllowDataStage 326E                   __end_of_Port_SetPinType 10E8  
                                   _sd000 FFAF                                     _sd001 FF35  
                                   _sd002 FF69            ?_USBIncrement1msInternalTimers 0001  
                          ??_Byte_GetPair 00BA                             ?_Button_State 00B4  
                              i2memset@p1 0001                            ?i2_Port_SetPin 0010  
                             LED_Set@pLED 00C3                            ??_Byte_GetZone 00B3  
                          Button_Poll@Pin 00D1                  __size_of_Set_Addr_Window 008C  
                     __end_of_Console_Tab 3418                          __end_of_MXK_Init 1C10  
                    i2Byte_GetPair@pInput 000A                            _LCD_Write$3147 00B6  
                                   _putch 124A                          __end_of_SPI_Init 034A  
                        __end_of_SPI_Send 3E62                                     pclath 000FFA  
                                   tablat 000FF5                          __end_of_USB_Init 4F46  
                         __end_of_reverse 4096                          __end_of_USB_Poll 5056  
                         SPI_Send9@pInput 00AE                            ??_Byte_SetPair 00BD  
                          ??_Byte_SetQuad 00BD                            ??_Byte_SetPort 00B1  
                                   plusw2 000FDB                         __end_of_CDCInitEP 4192  
                          ??_Byte_SetZone 00B4                             ?_HMI_SetRight 0001  
                      __size_of_SPI_Send9 00CC                                     status 000FD8  
               __size_of_Event_USBRecieve 002C                           _Configure_GPIOs 4376  
                        __end_ofi2_memset 4D68                            _LCD_Word_Write 4FCE  
                __end_of_Motor_Continious 48A4                       __size_of_LED_Toggle 0034  
                     __size_of_HMI_GetBar 0006                        __size_of_USB_Tasks 0042  
                      __size_of_USB_Print 0024               __size_of_Port_CheckPairType 0060  
                         putUSBUSART@data 00AE              __size_of_USBStdSetCfgHandler 00C0  
                     __size_of_HMI_SetBar 000A                           __initialization 2788  
                     __size_of_HMI_Render 0038                       __end_of_Byte_GetBit 4C0A  
                            __end_of_main 4B52                              __end_of_itos 2D64  
                    HMI_SetButton@reindex 00B0                              SPI_Send9@dat 012D  
                   _control_signal_bitmap 004E                       __end_of_Byte_SetBit 428A  
                        __end_of_InitList FCA1                          __end_of_FunctHMI 4F80  
                              _FunctMotor 3EC4                          __end_of_FunctUSB 50B0  
             __size_of_Port_CheckQuadType 0050                              _gTetrisField 0440  
             __size_of_Port_CheckPortType 003E                 __size_of_USBCtrlEPService 0086  
                             HMI_Render@a 00B6                 __size_ofi2_Port_TogglePin 002A  
                                  ??_main 00F4                                    ??_itos 00B9  
                __size_of_FunctInitButton 0046                   _Console_MakeField$11988 00BB  
                           __activetblptr 000003                           ?_USBDeviceTasks 0001  
                       Port_SetPin@pInput 00BD                         __end_of_LCD_Reset 3A3A  
                             ?_USBSuspend 0001                         Port_SetPin@pValue 00C0  
                               ??_LED_Set 00C3                         GetPortPORT@pInput 00B0  
                          ??_FunctInitLCD 00E7                            ??_FunctInitHMI 00F3  
                  Port_CheckPairType@Pin1 00D8                    Port_CheckPairType@Pin2 00D9  
                       __end_of_LCD_Write 4986                            ??_FunctInitUSB 00B7  
                             _GetPortPORT 37C4                               _GetPortTRIS 36C0  
                         ??_LCD_DrawField 00CA                __end_of_PortProperty_Valid 3E00  
                        __end_of_Port_Set 05C2          __size_of_Console_IncrementCursor 004E  
                          ??_Button_State 00B6                       __end_of_Button_Init 3140  
                     __end_of_FunctButton 4E7C                              _cdc_mem_type 0099  
                     __end_of_Button_Poll 1F50                         Word_GetPair@pPair 00BC  
                 LCD_FillRectangle@pPoint 00BE                         __end_of_HMI_SetUp 4FFA  
                           _HMI_SetButton 3A3A                   __end_of_USBDeviceAttach 4BAE  
                        _CDCDataOutHandle 0085                                 ??_SPI_DCS 00B0  
                           _HMI_SetNumber 4E7C                    Port_SetQuadType@Output 00E8  
                        ___awdiv@dividend 00AE                                 ??_USB_ISR 002A  
                                  ?_putch 0001                          ??_Console_Render 00D1  
                           ToSegment@pCHR 00AE                           getsUSBUSART@len 00BB  
                        _Console_FormFeed 3C08                    Port_SetQuadType@pInput 00E4  
                   __size_of_CDCTxService 0146                                    i2l1312 004E  
                                  i2l1313 0046                                    i2l1314 005C  
                                  i2l1315 007E                            __CFG_WDTEN$OFF 000000  
                                  i2l2494 0004                                    i2l2590 0058  
                     __size_of_ISR_Enable 000A                                    i2l9003 231C  
                                  i2l9023 3022                                    i2l9203 25AC  
                                  i2l9019 3014                                    i2l9205 25B2  
                                  i2l9213 25EC                                    i2l9045 306E  
                                  i2l9037 3044                                    i2l9029 302E  
                                  i2l9053 308E                                    i2l9141 4CFA  
                          ??_HMI_SetRight 00AE                                    i2l9145 4D0A  
                                  i2l9153 40EC                                    i2l9161 40F2  
                                  i2l9139 4CEC                                    i2l9181 253E  
                                  i2l9185 2546                                    i2l9195 2572  
                                  i2l8741 0046                                    i2l8751 0068  
                                  i2l8743 004A                                    i2l8735 0000  
                                  i2l8903 48C0                                    i2l8753 0076  
                                  i2l8745 004E                                    i2l8737 0024  
                                  i2l9801 2FA2                                    i2l9713 323A  
                                  i2l8755 007A                                    i2l8747 005C  
                                  i2l8739 0040                                    i2l9811 2FE2  
                                  i2l8757 007E                                    i2l8749 0064  
                                  i2l9733 2888                                    i2l9709 3220  
                                  i2l8791 32CC                                    i2l9663 4D58  
                                  i2l8777 4DAC                                    i2l8873 3E80  
                                  i2l9729 2880                                    i2l8875 3E86  
                                  i2l8883 3EB0                                    i2l9843 064A  
                                  i2l9763 177C                                    i2l9659 4D48  
                                  i2l9755 28F0                                    i2l9739 28B0  
                                  i2l8877 3E8C                                    i2l8869 3E7A  
                                  i2l9679 2ACE                                    i2l8991 22A2  
                                  i2l8983 227E                                    i2l9871 072E  
                                  i2l9855 06AE                                    i2l9783 187A  
                                  i2l9775 181E                                    i2l9767 178E  
                                  i2l9881 0772                                    i2l9865 06FA  
                                  i2l9849 068E                                    i2l9785 1880  
                                  i2l9777 1824                                    i2l8899 48B2  
                                  i2l9891 07AE                                    i2l9883 077E  
                                  i2l9867 0716                                    i2l9789 1886  
                                  i2l9897 07F0                                    i2l9899 07FC  
                                  _LLVALS FCCA                                    _LNVALS FCD2  
                  __end_of_LCD_Word_Write 4FE6                            _Timer0_Restart 4F9C  
                           CDCTxService@i 00B9                                    _TEVALS FCFA  
                                  _RLVALS FCE2                                    _LZVALS FCDA  
                                  _SQVALS FCF2                  i2USBTransferOnePacket@ep 0009  
                                  _RZVALS FCEA                         ??i2_USBDeviceInit 0009  
                         Byte_GetBit@pBit 00B0                                _Reset_High 0000  
                      Console_Render@temp 00D3           __size_ofi2_USBTransferOnePacket 00F6  
                          OutSeg@pSegment 00B1                       Port_TogglePin@Value 00C5  
                        __end_of_delay_ms 4376                              LED_Init@pLED 00DB  
                        __end_of_delay_us 4916                             ??_Timer0_Init 00BF  
                           ??_Timer2_Init 00BF                             ??_Timer0_Stop 0001  
                              _Timer0_ISR 4F08                         _shortPacketStatus 0050  
                __size_of_Console_NewLine 0078                         Timer2_Init@DIVIDE 00C8  
                          __CFG_XINST$OFF 000000                            _USBInputBuffer 0228  
                                  _OutSeg 3B9C                           USBDeviceTasks@i 0029  
                              _Motor_Init 38C6               USBStdFeatureReqHandler@pUEP 0023  
             __size_of_Event_HMI_UpButton 0034                  USBTransferOnePacket@data 00AF  
                              _Motor_Move 4830                USBCtrlTrfInHandler@lastDTS 0002  
                           ??_Motor_Speed 00CD                           ??_USBDeviceInit 00B6  
                              _Motor_Step 2BFE                      _Event_HMI_LeftButton 43C0  
                                  _gMotor 003C                              ?_putUSBUSART 00AE  
                 __end_of_Event_DIPSwitch 4AF4            __size_of_Event_HMI_RightButton 003C  
                                  ___wmul 4DE4                                 ??___awdiv 00B2  
                          __CFG_STVREN$ON 000000                                    _change 00FC  
           __end_of_Event_HMI_RightButton 47B8                                 ??___lldiv 00B6  
                    __end_of_getsUSBUSART 31D8                                _TestButton 01BD  
                    _Event_HMI_DownButton 49BC                                 ??___lwdiv 00B2  
                      __size_of_ToSegment 01BA                                 ??___lwmod 00B2  
                __end_of_Port_SetQuadType 0A24                         _USBEnableEndpoint 48A4  
         __size_of_USBStdGetStatusHandler 00A0                  i2Byte_GetZone@pChunkSize 0005  
                                  _memcpy 473E                              HMI_GRender@a 0081  
                    __end_of_Console_Init 3CD8                                    _memset 4B52  
                       GetPortTRIS@pInput 00B0                        __size_of_Reset_Low 0000  
                                  clear_0 27E8                                    clear_1 27FC  
                                  clear_2 280E                                    clear_3 281A  
                                  clear_4 2826                                    clear_5 2832  
                                  clear_6 283E                          ___awdiv@quotient 00B4  
                              Port_Init@i 00F3                __end_ofHMI_SetButton@F8267 FD0C  
                                  _printf 2442                        ?_USBEnableEndpoint 0009  
                          HMI_SetButton@v 00B5                                    _strlen 45F8  
                       __end_of_SPI_Send9 26BE                    Motor_Continious@pMotor 00AE  
                           ?i2_LED_Toggle 0001                    HMI_SetSegments@pString 00AF  
           __size_of_USBTransferOnePacket 0100                           ??i2_Port_GetPin 0004  
                             _Console_Tab 338C                       LCD_Word_Write@value 00B8  
                            __pdataCOMRAM 005D                        __size_of_Port_Init 0162  
                           ??_Port_GetPin 00B1                  Port_CheckPortType@Output 00E7  
                            _CDCTxService 13A2                         __end_of_USB_Tasks 467E  
                         ??i2_Port_SetPin 0014                         __end_of_USB_Print 4EC4  
                            __mediumconst FBEE               __end_ofTimer2_Init@PRESCALE FD0F  
                Port_CheckPortType@pDrive 00E6                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                          ?_HMI_SetButton 0001                  Port_CheckPortType@pInput 00E4  
                           ??_Port_SetPin 00C1                                 ??_reverse 00B2  
                     ??_USBEnableEndpoint 000A                     Console_MakeField@Fill 0364  
                        ?_Port_SetPinType 00D4                                    putch@c 00C2  
                       Motor_Speed@pMotor 00C9                            ?_HMI_SetNumber 00BF  
                          i2_Word_GetPair 4D92                   __end_of_Configure_GPIOs 43C0  
                            _BLOCKS_COUNT FD11                               _CtrlTrfData 000438  
                  __end_of_Timer0_Restart 4FB6                             Set_Rotation@m 00B8  
                            ?_MXK_Release 0001                      _controlTransferState 004D  
            __size_of_Event_HMI_DIPSwitch 002E                           __CFG_FOSC$HSPLL 000000  
               Event_HMI_DIPSwitch@pState 00C7                             IMU_WriteReg@r 005A  
                         ?_LCD_Word_Write 00B8                                __accesstop 0060  
                 __end_of__initialization 2844                                 ?_LCD_Fill 00BC  
                               ?_LCD_Init 0001                             SPI_Init@pMode 00E2  
                            __pbssBIGRAMh 0440                              __pbssBIGRAMl 0C11  
                             _Byte_GetBit 4BDC                                 ?_LED_Init 0001  
                               ?_HMI_Init 0001                         ??_Set_Addr_Window 00BB  
                               ?_HMI_Poll 0001                             ___rparam_used 000001  
                __size_of_USBStallHandler 0042                               _Byte_SetBit 4238  
                           __end_of_MASKS FCCA                            _PortA_Property FFB3  
                               LCD_Fill@i 00BE                                 LCD_Fill@j 00BF  
                     __size_of_USBSuspend 0022                                 LCD_Init@i 00E5  
                    __size_of_HMI_SetLeft 0014                      __size_of_HMI_SetDown 0014  
                   ?_Event_HMI_LeftButton 0001                            __pcstackCOMRAM 0001  
               __end_of_USBEnableEndpoint 48DE                            _PortB_Property FFB5  
                           __end_of_sd000 FFB3                             __end_of_sd001 FF69  
                           __end_of_sd002 FF9D                              __pidataBANK0 5070  
                            __pidataBANK1 5036                     ?_Event_HMI_DownButton 0001  
                     i2Byte_SetBit@pInput 0001                      __end_of_Byte_GetPair 2EC0  
                         Console_Render@x 00D8                           Console_Render@y 00D9  
                     i2Byte_SetBit@pValue 0004          __size_of_USBCtrlEPAllowDataStage 0096  
                           ?_Set_Rotation 0001                       Timer0_Init@PRESCALE FCB1  
                    __end_of_Byte_GetZone 0000               Event_HMI_RightButton@pState 00C7  
                          _FunctInitMotor 4528                               ?_FunctMotor 0001  
                              _gTestBlock 0340                            _PortC_Property FFB7  
           __size_of_USBConfigureEndpoint 0090                       __end_of_Timer0_Init 162C  
                           __end_of_putch 13A2               __end_of_USBCtrlTrfInHandler 2E16  
                               ?_MXK_Init 0001                       __end_of_Timer2_Init 176A  
                     __end_of_Timer0_Stop 50AC                                 ?_SPI_Init 00DB  
                               ?_SPI_Send 00AE                               _Button_Init 30A6  
                             _FunctButton 4E58                         Port_SetType@pType 00EA  
                          ??i2_LED_Toggle 0019                               _Button_Poll 1E3C  
                    __end_of_Byte_SetPair 2A8A                            _PortD_Property FFB9  
                    __end_of_Byte_SetQuad 29CC                                 ?_USB_Init 0001  
                  i2_USBTransferOnePacket 226A                      __end_of_Byte_SetPort 5064  
                            ??_LED_Toggle 00C6                              ??_HMI_GetBar 00AE  
                               ?_USB_Poll 0001                      __end_of_Byte_SetZone 0000  
                     __end_of_Motor_Speed 4E32                              USB_Print@len 00B6  
                           SPI_Send@pData 00B0                              ??_HMI_SetBar 00AE  
                            ??_HMI_Render 00B6                            _PortE_Property FFBB  
                              _cdc_notice 021E                  __size_of_HMI_SetSegments 00CA  
                  __end_ofi2_Word_GetPair 4DBC                                 ?i2_memset 0001  
                              _cdc_rx_len 009A                                _cdc_tx_len 009C  
                          _PortF_Property FFBD                  ??_USBCtrlTrfSetupHandler 0028  
                 _USBTicksSinceSuspendEnd 0098                   Port_CheckQuadType@Pair1 00E1  
                 Port_CheckQuadType@Pair2 00E2                  MXK_BlockSwitchTo@pModule 00B5  
                         USB_Print@pInput 00B4                         ??_FunctInitButton 00F1  
                        ?_USBDeviceAttach 0001                         _Console_Backspace 44E2  
                  _USBStdGetStatusHandler 2F68                           ?_Timer0_Restart 0001  
                                 ??_putch 00C2                       _Console_ClearCursor 4AF4  
                       __end_of_ToSegment 0DA2                            _PortG_Property FFBF  
                              __pbssBANK0 0060                                __pbssBANK1 0100  
                              __pbssBANK2 0200                                __pbssBANK3 0300  
                     __end_of_Port_GetPin 4830                   Port_CheckQuadType@pQuad 00DF  
                         reverse@iterator 00B3                          ??_SPI_DisableISR 00B0  
                      ?_Console_Backspace 0001                         __end_of_Reset_Low 0000  
                               ?_FunctHMI 0001                 __size_of_Event_TestButton 003C  
                 __size_of_Port_TogglePin 002C                                ??_LCD_Fill 00BE  
                               ?_FunctUSB 0001                                ??_LCD_Init 00E3  
                     __end_of_Port_SetPin 3B9C                    __end_of_PortA_Property FFB5  
                        _Event_USBRecieve 4C38                                ??_LED_Init 00DB  
                           ?_ISR_Function 0001                               ?_Reset_High 0001  
                           ?_Timer0_Clear 0001                                ??_HMI_Init 00F1  
                              ??_HMI_Poll 00D2                             ?_Timer2_Clear 0001  
             __size_of_USBWakeFromSuspend 002A                               _pBDTEntryIn 006F  
                 Port_CheckPairType@Props 00DB                    __end_of_PortB_Property FFB7  
                           ?_Timer0_Start 00AE                         __end_of_Port_Init 124A  
        __end_of_USBCtrlEPServiceComplete 2442                               ?_Timer0_ISR 0001  
                 Port_CheckPairType@pPair 00D6                        __end_of_LED_Toggle 4A90  
                      __end_of_HMI_GetBar 50A6                  LCD_FillRectangle@pColour 00BC  
                    __end_of_FunctInitLCD 4FCE                       ??_Console_Backspace 00B0  
                    __end_of_FunctInitHMI 4DE4               __size_of_USBCheckCDCRequest 009E  
                       Set_Addr_Window@xe 00B9                         Set_Addr_Window@ye 00BA  
                    __end_of_FunctInitUSB 50B4                         Set_Addr_Window@xs 00BB  
                       Set_Addr_Window@ys 00B8                                   ?_OutSeg 00B1  
                             ?_Motor_Init 00DB                        Byte_SetPair@pInput 00B9  
                    USBCtrlTrfRxService@i 0001                               ?_Motor_Move 00B1  
                  __end_of_FunctInitMotor 456E                               ?_Motor_Step 0001  
                      Byte_SetPair@pValue 00BC                        __end_of_HMI_SetBar 5090  
                  __end_of_PortC_Property FFB9                        Word_GetPair@pInput 00BA  
                    __end_of_Button_State 352E                        __end_of_HMI_Render 494E  
                          ??_Set_Rotation 00B8                                 ?_Port_Set 00BD  
                                 ?___wmul 00AE                          ?_Event_DIPSwitch 0001  
                       Port_GetPin@Output 00B3                              ??_ISR_Enable 00AE  
                    ?_Console_ClearCursor 0001                    __end_of_PortD_Property FFBB  
              Event_HMI_DownButton@pState 00C7                                ??_MXK_Init 00F4  
                                 ?_memcpy 0001                         Port_GetPin@pInput 00AE  
                                 ?_memset 00AE                         _Console_MakeField 2EC0  
                              _device_dsc FF9D                         ??_Console_NewLine 00AE  
                              ??_SPI_Init 00E3                          _USBCtrlEPService 35B6  
                  Event_TestButton@pState 00C7                                ??_SPI_Send 00B1  
                    __end_of_HMI_SetRight 500E                                   ?_printf 00C3  
                              _ep_data_in 007B                          i2_Port_TogglePin 4D68  
                              ??_USB_Init 00B7                    __end_of_PortE_Property FFBD  
                              ??_USB_Poll 00CF                                   ?_strlen 00AE  
                     Console_Render@F7891 01E8                        ?_Console_MakeField 00B3  
             __end_of_USBCtrlTrfRxService 205E                                   _COUNTER 0087  
                      _USBCheckStdRequest 2B46                         _configDescriptor1 FEF2  
                                 i2l10221 1F70                                   i2l10231 1FA2  
                                 i2l10233 1FAA                                   i2l10225 1F7E  
                                 i2l10243 1FFC                                   i2l10173 2378  
                                 i2l12005 1A88                                   i2l10247 2016  
                                 i2l10281 2B70                                   i2l10177 237E  
                                 i2l11321 46B8                                   i2l12025 1AD4  
                                 i2l10291 2BAA                                   i2l12027 1AEA  
                                 i2l12019 1AB6                                   i2l12221 2C8A  
                                 i2l12213 2C46                                   i2l10269 2B5C  
                                 i2l10189 23E6                                   i2l10197 23F6  
                                 i2l11341 362E                                   i2l12215 2C5A  
                                 i2l10295 2BBC                                   i2l10641 476C  
                                 i2l12219 2C7A                                   i2l10715 2DF2  
                                 i2l10635 4750                                   i2l11283 4D32  
                                 i2l10709 2DD4                                   i2l11285 4D34  
                                 i2l10681 41E2                                   i2l10673 419C  
                         ??_HMI_SetButton 00AE                                   i2l11903 20E4  
                                 i2l10697 2D96                                   i2l13515 004E  
                                 i2l11909 2134                                   i2l11871 2090  
                                 i2l11961 1A0C                                   i2l11875 2098  
                                 i2l11947 19EE                                   i2l11939 19DE  
                                 i2l12819 0000                                   i2l13581 4106  
                                 i2l11981 1A42                                   i2l11973 1A36  
                                 i2l13583 413A                                   i2l11887 20BE  
                                 i2l11991 1A56                                   i2l11967 1A18  
                                 i2l11985 1A4A                                   i2l11899 20DC  
                                 i2l11999 1A76                                   _LED_Set 4986  
                 _Console_IncrementCursor 42DA                    __end_of_PortF_Property FFBF  
                             _gBackcolour 0089                           ??_HMI_SetNumber 00C1  
                              ??i2_memset 0007                                 _I2C1_Done 0118  
             __end_of_USBCtrlTrfTxService 25F2                           ?i2_Word_GetPair 000D  
                               _I2C2_Done 011E                       _USBStdSetCfgHandler 284E  
                        _IMU_ReadComplete 000000                                 _I2C1_More 011B  
                               _I2C2_More 0121                                 ?_delay_ms 00AE  
               __end_of_Console_Backspace 4528                                 ?_delay_us 00AE  
                                 _SSP1ADD 000FC8                                   _SSP1BUF 000FC9  
                                 _SSP2BUF 000F6F                    __end_of_PortG_Property FFC1  
                     ??_Console_MakeField 00B5                                   _SPI_DCS 4C64  
                     ?_USBCheckStdRequest 0001              __size_of_USBStdGetDscHandler 0132  
                        ?_Configure_GPIOs 0001                                   _UIEbits 000F5C  
                                 _USB_ISR 0000                                   _UIRbits 000F62  
                    i2Byte_GetZone@Offset 0008                       __size_of_FunctMotor 0060  
                           _cdc_trf_state 009B                                ??_FunctHMI 00DA  
                      __end_of_ISR_Enable 5086                                ??_FunctUSB 00CF  
                          ??_ISR_Function 002A                      i2Byte_GetZone@Output 0009  
                          ??_Timer0_Clear 00AE                         Event_TestButton@j 008F  
                          ??_Timer2_Clear 00AE                                   _Font5x7 FD12  
                    i2Byte_GetZone@pChunk 0004                      i2Byte_GetZone@pInput 0001  
                          ??_Timer0_Start 00B1                      SPI_DisableISR@pInput 00AE  
                           ?_Port_GetQuad 00AE                           Byte_SetBit@pBit 00B0  
                    Port_TogglePin@pInput 00C2                                   _pCDCDst 0127  
                   __end_ofi2_Byte_SetBit 44E2                                   _pCDCSrc 012A  
                       ?_Motor_Continious 00AE                     __size_of_getsUSBUSART 0098  
                  ??_Event_HMI_LeftButton 00C7                                   __Hparam 0000  
         ??_USBIncrement1msInternalTimers 0001                      ?_USBStdSetCfgHandler 0001  
                       Port_GetQuad@pQuad 00B0                                 _CDCInitEP 413E  
                             _Timer0_Init 14E8                               _Timer2_Init 162C  
                                 __Lparam 0000                               _Timer0_Stop 50A6  
                   __size_of_Console_Init 0066                                   OutSeg@a 0090  
                  ??_Event_HMI_DownButton 00C7           __end_ofPortProperty_Valid@F7768 FCB1  
                           LCD_Write@mode 00B2                        ??_Motor_Continious 00B2  
              __size_of_USBEnableEndpoint 003A                           __size_of_OutSeg 006C  
                         ?_FunctInitMotor 0001                                ??_Port_Set 00C0  
                    ??_USBCheckStdRequest 0028                 __end_of_Console_MakeField 2F68  
                       _Console_PrintChar 0000                               _Motor_Speed 4E0C  
                                 _Stepper 01DA             __size_of_USBCtrlTrfOutHandler 0054  
                           ?_Port_SetType 00E8                                   _gCursor 00F4  
                                 ___awdiv 352E                     ??_Console_ClearCursor 00AE  
                                 _lBuffer 0C11                                   ___lldiv 3846  
                        ??_USBDeviceTasks 0029                           __size_of___wmul 0028  
                                 ___lwdiv 4096                         ??_USBStallHandler 0001  
                                 ___lwmod 4452                  __end_of_Console_FormFeed 3C72  
                      ?_Console_PrintChar 0001                      __size_of_putUSBUSART 001E  
                                 __pcinit 2788                        getsUSBUSART@buffer 00B9  
                         __size_of_memcpy 003E                           __size_of_memset 002E  
               __end_of_configDescriptor1 FF35                                   __ramtop 1000  
                                 __ptext0 4B24                                   __ptext1 1AF2  
                                 __ptext2 10E8                                   __ptext3 0A24  
                                 __ptext4 4700                                   __ptext5 034A  
                                 __ptext6 5056                                   __ptext7 36C0  
                                 __ptext8 3742                                   __ptext9 37C4  
                                 _inPipes 0069                           __size_of_printf 00E0  
             _USBDeferOUTDataStagePackets 0047                                 _T0CONbits 000FD5  
                         __size_of_strlen 0044                              ??_USBSuspend 0022  
                               _T2CONbits 000FCA                             LED_Set@pValue 00C2  
                     __size_of_Reset_High 0000                     Event_DIPSwitch@pState 00C7  
                            ?_GetPortPORT 00AE                              ?_GetPortTRIS 00AE  
                     ??_Console_PrintChar 00BE                               _Port_GetPin 47F4  
                       __CFG_MSSPMSK$MSK5 000000                       LCD_DrawRectangle@p2 01E0  
                     LCD_DrawRectangle@p4 01E4                                ??_delay_ms 00B0  
                              ??_delay_us 00B0                           i2_USBDeviceInit 205E  
                        i2USBDeviceInit@i 0009                                   _reverse 4040  
                               _DIPSwitch 01B5                       __size_of_Timer0_ISR 0020  
                             _Port_SetPin 3B2C                            LCD_DrawField@i 00D0  
                      __end_of_USB_CD_Ptr FD11                                 _LCD_Reset 39C0  
                     __size_of_Motor_Init 007E                       __size_of_Motor_Move 003A  
         __size_of_USBCtrlTrfSetupHandler 0064                       __size_of_Motor_Step 00B4  
                               _LCD_Write 494E                                delay_ms@ms 00AE  
                    end_of_initialization 2844                              _getsUSBUSART 3140  
                              delay_us@us 00AE                        __end_of_USB_SD_Ptr FD08  
                       ??_HMI_SetSegments 00B1                   Console_PrintChar@pInput 00C1  
                               _HMI_SetUp 4FE6                              _Console_Init 3C72  
                         HMI_SetUp@pValue 00AE                                   memcpy@d 0007  
                                 memcpy@n 0005                                   memcpy@s 0009  
                     _pBDTEntryEP0OutNext 0040                                   memset@c 00B0  
                                 memset@n 00B2                                   memset@p 00B4  
                         _USB1msTickCount 0038                      __size_of_MXK_Release 0008  
              __end_of_Port_CheckPairType 3FE4           _dummy_encapsulated_cmd_response 01C5  
                                 itos@Out 00BD                            ??_Port_GetQuad 00B1  
                    __end_ofi2_LED_Toggle 4D14                  ?_USBStdFeatureReqHandler 0001  
                      _PortProperty_Valid 3D9E                        Byte_SetQuad@pInput 00B9  
                      SPI_MinSpeed@pInput 00BD                        Byte_SetQuad@pValue 00BC  
                   __size_of_Byte_GetPair 00AA                     ??_USBStdSetCfgHandler 0022  
                         ___lldiv@divisor 00B2                     __size_of_Byte_GetZone 0000  
                              ?_CDCInitEP 0001                           ___lldiv@counter 00BA  
               __end_of_Console_PrintChar 0000                        __end_of_USBSuspend 4F08  
                          ??_Port_SetType 00EB                __end_of_Port_CheckQuadType 42DA  
                 _USBCtrlEPAllowDataStage 31D8                                   printf@c 00CA  
                                 printf@f 00C3                            Port_Init@pPort 00F0  
                                 postdec1 000FE5                                   postdec2 000FDD  
                   __size_of_Byte_SetPair 00BE                    Console_MakeField@Index 00B7  
                                 postinc0 000FEE                                   postinc2 000FDE  
                     ?_PortProperty_Valid 00BD                     __size_of_Byte_SetQuad 00BE  
                   __size_of_Byte_SetPort 000E                __end_of_Port_CheckPortType 473E  
                   __size_of_Byte_SetZone 0000                        Button_Init@pButton 00EB  
                _USBCtrlEPServiceComplete 2360                     Timer0_Init@pFrequency 00BB  
                     _Event_HMI_DIPSwitch 4C0A                         ?_Port_SetQuadType 00E4  
                             _gForecolour 01F6                                   strlen@s 00AE  
              _USBStatusStageEnabledFlag1 004A                _USBStatusStageEnabledFlag2 004B  
               ??_Console_IncrementCursor 00B2                        USBEnableEndpoint@p 000A  
                      ??_Port_SetQuadType 00E8                              ?_Console_Tab 0001  
                        Byte_GetZone@MASK 00B4                     Console_Render@lCursor 00D4  
                      Byte_SetPort@pInput 00AE                          __CFG_CPUDIV$OSC1 000000  
                      Byte_SetPort@pValue 00B0                      i2Port_TogglePin@pPin 0017  
                        Byte_GetZone@pMax 00B0                __size_of_Console_Backspace 0046  
                               _TRISFbits 000F97                                 _SPI_Send9 25F2  
                      _BothEP0OutUOWNsSet 0043                           _Set_Addr_Window 3418  
                          SPI_Init@pClock 00DD                          ??_LCD_Word_Write 00BA  
                   __end_of_LCD_DrawField 39C0                            Port_Set@pInput 00BD  
                          SPI_Init@pInput 00DB                      ??_PortProperty_Valid 00C1  
                          Port_Set@pValue 00BF                                ?_LCD_Reset 0001  
                    __end_of_Set_Rotation 36C0                                ?_LCD_Write 00B2  
               USBConfigureEndpoint@EPNum 0006                              _Byte_GetPair 2E16  
                               _USB_Tasks 463C                ?_USBCtrlEPAllowStatusStage 0001  
                               _USB_Print 4EA0                              _Byte_GetZone 0000  
                      HMI_SetButton@F8267 FD08                         i2Port_GetPin@pPin 0003  
     USER_USB_CALLBACK_EVENT_HANDLER@size 001E                         LCD_DrawField@xmax 00CE  
                       LCD_DrawField@ymax 00CF                      ?_Event_HMI_DIPSwitch 0001  
                               _USTATcopy 005C                            _Port_TogglePin 4C90  
                              ?_HMI_SetUp 0001                          _Event_TestButton 47B8  
                   __size_of_FunctInitLCD 0018                     __size_of_FunctInitHMI 0028  
                   __size_of_FunctInitUSB 0004                      Port_SetPinType@Props 00D9  
            __end_of_USBTransferOnePacket 226A                              ?_Byte_GetBit 00AE  
                 __size_ofi2_Byte_GetPair 008E                              _Byte_SetPair 29CC  
                          __end_of_LLVALS FCD2                              _Byte_SetQuad 290E  
                            _Byte_SetPort 5056                            __end_of_LNVALS FCDA  
                 __size_ofi2_Byte_GetZone 0000                     __size_of_Button_State 008A  
                            _Byte_SetZone 0000                      Port_SetPinType@pType 00D7  
                 Event_USBRecieve@pLength 00CD                            __end_of_TEVALS FD02  
                          __end_of_RLVALS FCEA                            __end_of_LZVALS FCE2  
                            ?_Byte_SetBit 00AE                __end_of_Event_HMI_UpButton 4A5C  
                          __end_of_SQVALS FCFA                             ?_SPI_MaxSpeed 00BD  
                       __size_of_LCD_Fill 0044                         __size_of_LCD_Init 012E  
                          __end_of_RZVALS FCF2                         __size_of_LED_Init 0048  
                           ?_SPI_MinSpeed 00BD                         putUSBUSART@length 00B0  
                       __size_of_HMI_Init 0114                         __size_of_HMI_Poll 005C  
                   __size_of_HMI_SetRight 0014                    _USBCtrlTrfSetupHandler 3CD8  
              __size_of_Console_MakeField 00A8                            __end_of_OutSeg 3C08  
                 ?i2_USBTransferOnePacket 0001                              ??_FunctMotor 00CD  
                   __end_of_USBDeviceInit 1D28     __end_of_USBIncrement1msInternalTimers 4F9C  
  __size_of_USBIncrement1msInternalTimers 001C             _USBIncrement1msInternalTimers 4F80  
                          __end_of___wmul 4E0C                             __pidataCOMRAM 50B4  
                   _Event_HMI_RightButton 477C                   __end_ofi2_USBDeviceInit 216A  
                              LCD_Write@v 00B4                              ?_Button_Init 00E9  
                         _FunctInitButton 456E                              ?_FunctButton 0001  
                            ?_Button_Poll 00C9                                 i2memset@c 0003  
                               i2memset@n 0005                                 i2memset@p 0007  
                          __end_of_memcpy 477C                                 _Bus_State 00FB  
                          __end_of_memset 4B80                       i2Byte_GetPair@pPair 000C  
                __end_of_Event_USBRecieve 4C64                      __end_of_ISR_Function 0094  
                          SPI_Send9@pData 00B0                      __end_of_Timer0_Clear 5070  
                       __size_of_MXK_Init 011E                              IMU_ReadReg@r 0059  
                       _USBBusIsSuspended 0097                      __end_of_Timer2_Clear 5098  
                          __end_of_printf 2522                         __size_of_SPI_Init 034A  
                       __size_of_SPI_Send 0062                             ?_Word_GetPair 00BA  
                          __end_of_strlen 463C                          ??_Timer0_Restart 0001  
                    __end_of_Timer0_Start 4E58                        Port_SetType@Output 00ED  
                     start_initialization 2788                         __size_of_USB_Init 001E  
                 ?_USBStdGetStatusHandler 0001                         __size_of_USB_Poll 0010  
                   __end_ofi2_Port_GetPin 4A28             USBCtrlTrfRxService@byteToRead 0002  
                            _FunctInitLCD 4FB6                                ?_SPI_Send9 00AE  
                            _FunctInitHMI 4DBC                  PortProperty_Valid@Errors 00C3  
                       _LCD_FillRectangle 41E6                        Port_SetType@pInput 00E8  
                            _FunctInitUSB 50B0                                HMI_Init@in 00F1  
                     HMI_SetNumber@pInput 00BF                     __end_ofi2_Port_SetPin 3EC4  
                            _Button_State 34A4                               _cdc_data_rx 0268  
                             _cdc_data_tx 02A8                    __end_of_Port_TogglePin 4CBC  
                           ?_Word_SetPair 00BD                         __size_ofi2_memset 002A  
                       Byte_SetBit@pInput 00AE              __end_of_USBConfigureEndpoint 32FE  
                       Byte_SetBit@pValue 00B1                        ?_LCD_FillRectangle 00BC  
                              ?_USB_Tasks 0001                     ??_Event_HMI_DIPSwitch 00C7  
             PortProperty_Valid@pPinDrive 00BF                                ?_USB_Print 00B4  
         __end_of_USBStdFeatureReqHandler 0822                      MXK_BlockSwitchTo@CUR 00B4  
                PortProperty_Valid@pInput 00BD         __end_of_USBCtrlEPAllowStatusStage 2B46  
                __end_of_USBCtrlEPService 363C                    LCD_FillRectangle@pSize 00C2  
                          SPI_Send@pInput 00AE                        __end_of_FunctMotor 3F24  
                __end_ofi2_Port_TogglePin 4D92                              _HMI_SetRight 4FFA  
                            ??_Reset_High 00C2                  __size_of_Port_SetPinType 018E  
                           ??_HMI_SetLeft 00AE                             ??_HMI_SetDown 00AE  
                          ??_SPI_MaxSpeed 00BF                     Port_SetQuadType@pQuad 00E6  
                               _ToSegment 0BE8                       ??_LCD_FillRectangle 00C6  
                   Port_SetQuadType@pType 00E7                           _Console_NewLine 3AB4  
               ??_USBCtrlEPAllowDataStage 0002                         __size_of_FunctHMI 001C  
                          ??_SPI_MinSpeed 00BF                         __size_of_FunctUSB 0004  
                               _Reset_Low 0000                              ??_Timer0_ISR 0017  
                             ??_CDCInitEP 000D                            USBDeviceInit@i 00B6  
              __size_of_Console_PrintChar 0000                                 _gCharSize 01EC  
                  _pBDTEntryEP0OutCurrent 003E                          Timer2_Init@INDEX 0094  
                               OutSeg@cur 0091                              ??_Motor_Init 00DD  
                                ??_OutSeg 00B2                                 OutSeg@out 00B5  
                 __size_of_Console_Render 01B8                              ??_Motor_Move 00B5  
                 USBTransferOnePacket@dir 00AE                   USBTransferOnePacket@len 00B1  
                            ??_Motor_Step 0015            __end_ofi2_USBTransferOnePacket 2360  
                      Byte_SetZone@Offset 00B7                                  ??___wmul 00B2  
                     _USBStdGetDscHandler 176A                                 _Port_Init 10E8  
                             __pdataBANK0 00F4                               __pdataBANK1 01E8  
                                ??_memcpy 0007                                  ??_memset 00B4  
                       __size_of_Port_Set 0278                        Byte_SetZone@pChunk 00B1  
                        ??i2_Word_GetPair 0010                        Byte_SetZone@pInput 00AE  
                      Byte_SetZone@pValue 00B3                                  ??_printf 00C7  
                 __end_of_Set_Addr_Window 34A4                  Port_CheckQuadType@Output 00E3  
                                ??_strlen 00B0                                 _gLineSize 01F0  
                Port_CheckQuadType@pDrive 00E0                            ??_Word_GetPair 00BD  
                  _USBActiveConfiguration 005B            __end_of_USBStdGetStatusHandler 3008  
                Port_CheckQuadType@pInput 00DD                      __end_of_Port_GetQuad 4700  
               __end_of_LCD_FillRectangle 4238                                  ?_LED_Set 00C2  
                             __pbssCOMRAM 0038                        __end_of_Reset_High 0000  
                           __pcstackBANK0 00AE              __size_of_USBCtrlTrfInHandler 00B2  
                              itos@Length 00BB                            ??_Word_SetPair 00C1  
                      __end_of_Timer0_ISR 4F28                      __size_of_GetPortPORT 0082  
                             ??_LCD_Reset 00C7                      __size_of_GetPortTRIS 0082  
                    __end_of_Port_SetType 0BE8                      ?_USBStdGetDscHandler 0001  
                                ?_SPI_DCS 00AE                           ?_Port_TogglePin 00C2  
                             ??_LCD_Write 00B3                     __size_ofi2_LED_Toggle 002C  
                                ?_USB_ISR 0001                         __size_of_delay_ms 004E  
                       __size_of_delay_us 0038                        __end_of_Motor_Init 3944  
                     __CFG_CCP2MX$DEFAULT 000000                        __end_of_Motor_Move 486A  
                      __end_of_Motor_Step 2CB2                     Timer2_Init@pFrequency 00BB  
                             ??_HMI_SetUp 00AE                __end_of_USBWakeFromSuspend 4D3E  
                         _USBStallHandler 467E                              _pBDTEntryOut 0075  
                        ??_FunctInitMotor 00DD                  Port_CheckPairType@Output 00DA  
              __end_of_USBCheckCDCRequest 30A6                                ?_ToSegment 0001  
                Port_CheckPairType@pDrive 00D7                  __size_of_USBDeviceAttach 002E  
                Port_CheckPairType@pInput 00D4                            reverse@tempVar 00B2  
                              ?_Reset_Low 0001                              ?_Timer0_Init 00BB  
                            ?_Timer2_Init 00BB                              ?_Timer0_Stop 0001  
                        ___lwdiv@dividend 00AE                         Byte_SetPair@pPair 00BB  
                 __end_of_FunctInitButton 45B4                                 __pintcode 0008  
                           __pmediumconst FBEE                              ?_Motor_Speed 00C9  
                                ?___awdiv 00AE                                 __ptext100 4C0A  
                               __ptext101 47B8                                 __ptext110 4096  
                               __ptext102 3A3A                                 __ptext111 26BE  
                               __ptext103 4FE6                                 __ptext120 4CBC  
                               __ptext112 0BE8                                 __ptext104 4FFA  
                               __ptext121 2E16                                 __ptext113 5022  
                               __ptext105 500E                                 __ptext130 0000  
                               __ptext122 0000                                 __ptext114 4EA0  
                               __ptext106 4E7C                                 __ptext131 19CA  
                               __ptext123 4238                                 __ptext115 45F8  
                               __ptext107 2CB2                                 __ptext140 2360  
                               __ptext132 205E                                 __ptext124 5086  
                               __ptext116 4F46                                 __ptext108 4040  
                               __ptext141 31D8                                 __ptext133 4D14  
                               __ptext125 50A0                                 __ptext117 4A5C  
                               __ptext109 4452                                 __ptext150 4D68  
                               __ptext142 2B46                                 __ptext134 4EE6  
                               __ptext126 34A4                                 __ptext118 4C90  
                               __ptext151 49F2                                 __ptext143 284E  
                               __ptext135 467E                                 __ptext127 46C0  
                               __ptext119 3B2C                                 __ptext160 2D64  
                               __ptext152 3008                                 __ptext144 4D3E  
                               __ptext136 4F80                                 __ptext128 47F4  
                               __ptext161 2522                                 __ptext153 413E  
                               __ptext145 2F68                                 __ptext137 35B6  
                               __ptext170 4F9C                                 __ptext162 4F08  
                               __ptext154 226A                                 __ptext146 176A  
                               __ptext138 473E                                 __ptext171 0000  
                               __ptext163 2BFE                                 __ptext155 48A4  
                               __ptext147 05C2                                 __ptext139 3CD8  
                               __ptext164 3E62                                 __ptext156 326E  
                               __ptext148 40EA                                 __ptext165 4D92  
                               __ptext157 4192                                 __ptext149 4CE8  
                               __ptext166 32FE                                 __ptext158 1F50  
                               _pShiftVal 008B                                 __ptext167 0000  
                               __ptext159 2A8A                                 __ptext168 449A  
                               __ptext169 50A6                       __end_of_HMI_SetLeft 5022  
                     __end_of_HMI_SetDown 5036                                  ?___lldiv 00AE  
                              ?_Port_Init 00EE                      Timer0_Init@pCPUClock 00C1  
              Motor_Continious@pDirection 00B0                                  ?___lwdiv 00AE  
                                ?___lwmod 00AE                    ?_Event_HMI_RightButton 0001  
                      _IMU_WriteRegFinish 000000                         ?_Console_FormFeed 0001  
                       _GetPortProperties 3742                          ?i2_USBDeviceInit 0001  
             __end_ofTimer0_Init@PRESCALE FCC1                      _USBTransferOnePacket 216A  
                      ??_Console_FormFeed 00AE                 __size_of_Motor_Continious 003A  
                            i2_LED_Toggle 4CE8                           _HMI_SetSegments 26BE  
                      ?_GetPortProperties 00AE                        HMI_SetRight@pValue 00AE  
                __size_of_Event_DIPSwitch 0032                     __size_of_Set_Rotation 0084  
                            ?_Port_GetPin 00AE                         HMI_SetLeft@pValue 00AE  
                   __end_of_HMI_SetButton 3AB4                               ??_SPI_Send9 00B2  
                    __size_of_Console_Tab 008C                                  ?_reverse 00AE  
            __end_of_USBCtrlTrfOutHandler 41E6                              ?_Port_SetPin 00BD  
                   ??_USBStdGetDscHandler 0001                     __end_of_HMI_SetNumber 4EA0  
                             _ep_data_out 007E                          ___lwdiv@quotient 00B2  
                       HMI_SetDown@pValue 00AE                       ??_GetPortProperties 00B0  
            __size_of_USBCtrlTrfRxService 010E                               ??_USB_Tasks 00CE  
           USBConfigureEndpoint@direction 0001                               ??_USB_Print 00B6  
                 __end_of_Console_NewLine 3B2C                        Byte_GetPair@pInput 00B7  
                          __size_of_putch 0158                         i2Port_SetPin@Type 0014  
                       i2Port_SetPin@pPin 0012              __size_of_USBCtrlTrfTxService 00D0  
                          i2_Byte_GetPair 32FE                                  _LCD_Fill 45B4  
                    _IMU_WriteRegContinue 000000                                  _LCD_Init 189C  
                          ___wmul@product 00B2                                  _HMIBoard 0133  
                          i2_Byte_GetZone 0000                                  _LED_Init 440A  
                               delay_ms@u 00B0                        Button_Poll@pButton 00C9  
                               delay_us@u 00B0                                  _HMI_Init 1D28  
              ??_USBCtrlEPServiceComplete 0002                                  _HMI_Poll 3FE4  
                                _IPR1bits 000F9F                                  _IPR2bits 000FA2  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                                _PIE3bits 000FA3               __end_of_Console_ClearCursor 4B24  
                __size_of_Configure_GPIOs 004A                      __size_of_Byte_GetBit 002E  
                       Byte_SetQuad@pQuad 00BB                                  i2u601_40 25DC  
                                _PIR1bits 000F9E                                  i2u601_47 25D2  
                                _PIR2bits 000FA1                                  _PIR3bits 000FA4  
                                i2u552_40 0022                                  i2u640_40 186E  
                                i2u552_47 0018                                  i2u640_47 1864  
                                i2u553_40 005A                                  i2u553_41 0058  
                                i2u554_40 0072                                  i2u554_45 006E  
                                i2u555_44 44AC                                  i2u555_45 44A8  
                                i2u900_40 2C38                                  i2u556_44 44D0  
                                i2u556_45 44CC                                  i2u901_40 2C6C  
                                i2u637_40 17E6                                  i2u637_47 17DC  
                                i2u638_40 1818                                  i2u638_47 180E  
                                i2u568_40 4A1C                                  i2u568_45 4A18  
                                i2u599_40 259C                                  i2u599_47 2592  
                    __size_of_Byte_SetBit 0052                                  _RCONbits 000FD0  
                    i2Word_GetPair@pInput 000D                                  i2u899_40 2C26  
                           ??_putUSBUSART 00B1                          __CFG_WDTPS$32768 000000  
                                _UEP0bits 000F4C             __size_of_Event_HMI_LeftButton 004A  
                        HMI_SetBar@pValue 00AE                _USBDeferINDataStagePackets 0046  
                       Button_Init@pInput 00E9                   __size_of_SPI_DisableISR 0022  
                                _SSP1CON1 000FC6                         ??_Port_SetPinType 00D8  
                                _SSP1CON2 000FC5                                  _SSP2CON1 000F6C  
                                _SSP2CON2 000F6B               __size_of_USBCheckStdRequest 00B8  
                   __size_of_ISR_Function 008C             __size_of_Event_HMI_DownButton 0036  
                   __size_of_Timer0_Clear 000C                                  _SSP1STAT 000FC7  
                                _UCONbits 000F65                 __end_of_GetPortProperties 37C4  
                                _SSP2STAT 000F6D                              _Set_Rotation 363C  
                   __size_of_Timer2_Clear 0008                         _IMU_ReadRegFinish 000000  
                    _USBConfigureEndpoint 326E                        _Port_CheckPairType 3F84  
                                _MXK_Init 1AF2                     __size_of_Timer0_Start 0026  
                                _SPI_Init 0000                  __end_of_Event_TestButton 47F4  
                                _SPI_Send 3E00          __size_of_USBStdFeatureReqHandler 0260  
                        ?_Set_Addr_Window 00B8                                  _USB_Init 4F28  
                       ___wmul@multiplier 00AE                     ?_USBTransferOnePacket 00AE  
                                _USB_Poll 5046                         Byte_GetBit@Output 00B2  
                              printf@flag 00C7                      Timer2_Init@pCPUClock 00C4  
              __size_of_LCD_FillRectangle 0052                      __size_of_Button_Init 009A  
                    __end_of_SPI_MaxSpeed 3F84                             ?_CDCTxService 0001  
                    __size_of_FunctButton 0024                     Motor_Speed@pFrequency 00CB  
                       Byte_GetBit@pInput 00AE                       Port_SetPinType@pPin 00D6  
                    __size_of_Button_Poll 0114                        _Port_CheckQuadType 428A  
                     ?_Port_CheckPairType 00D4                              _RemoteWakeup 0045  
                    __end_of_SPI_MinSpeed 3D9E                                  i2_memset 4D3E  
                         _USBOutputBuffer 0300                          __size_of_LED_Set 0036  
                  __size_ofi2_Byte_SetBit 0048                        _Port_CheckPortType 4700  
                   Button_Poll@pIncrement 00CB                   PortProperty_Valid@F7768 FCA1  
                 __end_of_USBStallHandler 46C0                                 copy_data0 279C  
                               copy_data1 27BC                             ??_MXK_Release 00AE  
                  __end_ofi2_Byte_GetPair 338C                 __size_of_Port_SetQuadType 0202  
                        __size_of_SPI_DCS 002C                       ?_Port_CheckQuadType 00DD  
             ??_USBCtrlEPAllowStatusStage 0001                    __end_ofi2_Byte_GetZone 0000  
             __end_of_USBStdSetCfgHandler 290E                          __size_of_USB_ISR 0000  
                     ?_Port_CheckPortType 00E4                           itos@destination 00B7  
                                _InitList FBEF                                  _FunctHMI 4F64  
                                _FunctUSB 50AC                        Port_GetQuad@Output 00B3  
                      __end_of_device_dsc FFAF                               ??_ToSegment 00AE  
                            _ISR_Function 0008                              _Timer0_Clear 5064  
                             _HMI_SetLeft 500E                               _HMI_SetDown 5022  
                      Port_GetQuad@pInput 00AE                   ?_USBCtrlTrfSetupHandler 0001  
                            _Timer2_Clear 5090                      __end_of_Word_GetPair 4CE8  
                                _lCBuffer 0200                      ??_Port_CheckPairType 00D8  
                             ??_Reset_Low 00C2                   USBStdGetStatusHandler@p 0002  
                                __Hrparam 0000                              _Timer0_Start 4E32  
                            OutSeg@pInput 00B4                            _Console_Render 0DA2  
                                __Lrparam 0000                    USBTransferOnePacket@ep 00B6  
                         Timer2_Init@RDIV 00C0                          ?_FunctInitButton 0001  
                                _SetupPkt 000430                Event_HMI_LeftButton@pState 00C7  
                          LCD_Write@value 00B3                                  _Port_Set 034A  
                            OutSeg@segset 0092                      __end_of_Word_SetPair 4BDC  
                             ??_Port_Init 00F1                   __end_of_HMI_SetSegments 2788  
                   ?_USBConfigureEndpoint 0001                      ??_Port_CheckQuadType 00E1  
                        i2LED_Toggle@pLED 0019                         ??_USBDeviceAttach 00AE  
                   __size_of_Port_GetQuad 0040                          __size_of___awdiv 0088  
                        __size_of___lldiv 0080                         _MXK_BlockSwitchTo 4A90  
                        __size_of___lwdiv 0054                      ??_Port_CheckPortType 00E7  
                        __size_of___lwmod 0048                                  _lBufferX 00A1  
                                _lBufferY 00A2                       Timer2_Init@PRESCALE FD0C  
                      _Event_HMI_UpButton 4A28                           LCD_Fill@pColour 00BC  
                      ?_MXK_BlockSwitchTo 0001                       __end_of_putUSBUSART 4F64  
                             _line_coding 01CD                            ??_CDCTxService 00B9  
                       ?_Event_USBRecieve 0001                    Byte_GetZone@pChunkSize 00B2  
                  Byte_SetZone@pChunkSize 00B2                     __size_of_Port_SetType 01C4  
                           reverse@length 00B0                                 itos@input 00B5  
                      ??_Event_USBRecieve 00CD                                  _delay_ms 4328  
                                _delay_us 48DE                   __size_of_USBDeviceTasks 0128  
                                _clearall 009D                           ___lwdiv@divisor 00B0  
                     ?_Event_HMI_UpButton 0001                           ___lwdiv@counter 00B4  
                         Port_GetPin@pPin 00B0                                  __ptext10 440A  
                                __ptext11 4986                                  __ptext20 0000  
                                __ptext12 507C                                  __ptext21 338C  
                                __ptext13 50AC                                  __ptext30 3EC4  
                                __ptext22 352E                                  __ptext14 5046  
                                __ptext31 4E0C                                  __ptext23 42DA  
                                __ptext15 463C                                  __ptext40 38C6  
                                __ptext32 50B0                                  __ptext24 3AB4  
                                __ptext16 3140                                  __ptext41 14E8  
                                __ptext33 4F28                                  __ptext25 3C08  
                                __ptext17 4C38                                  __ptext50 39C0  
                                __ptext42 5064                                  __ptext34 1C10  
                                __ptext26 44E2                                  __ptext18 2442  
                                __ptext51 4328                                  __ptext43 486A  
                                __ptext35 4B52                                  __ptext27 4AF4  
                                __ptext19 124A                                  __ptext60 3846  
                                __ptext52 0000                                  __ptext44 4FB6  
                                __ptext36 4B80                                  __ptext28 13A2  
                                __ptext61 5090                                  __ptext53 0000  
                                __ptext45 189C                                  __ptext37 4528  
                                __ptext29 216A                                  __ptext70 0F5A  
                                __ptext62 4EC4                                  __ptext54 3C72  
                                __ptext46 363C                                  __ptext38 4830  
                                __ptext71 4BAE                                  __ptext63 4C64  
                                __ptext55 4DBC                                  __ptext47 45B4  
                                __ptext39 4E32                       ??_MXK_BlockSwitchTo 00B4  
                                __ptext80 3B9C                                  __ptext72 29CC  
                                __ptext64 456E                                  __ptext56 1D28  
                                __ptext48 4376                                  __ptext81 3E00  
                                __ptext73 0000                                  __ptext65 30A6  
                                __ptext57 3D3C                                  __ptext49 3F24  
                                __ptext90 25F2                                  __ptext82 3FE4  
                                __ptext74 3D9E                                  __ptext66 0822  
                                __ptext58 0000                                  __ptext91 2EC0  
                                __ptext83 0DA2                                  __ptext75 4F64  
                                __ptext67 428A                                  __ptext59 162C  
                                __ptext92 4BDC                                  __ptext84 41E6  
                                __ptext76 5098                                  __ptext68 3F84  
                                __ptext93 4E58                                  __ptext85 3944  
                                __ptext77 4A90                                  __ptext69 290E  
                                __ptext94 1E3C                                  __ptext86 4DE4  
                                __ptext78 48DE                                  __ptext95 4AC2  
                                __ptext87 3418                                  __ptext79 4916  
                                __ptext96 49BC                                  __ptext88 4FCE  
                                __ptext97 4A28                                  __ptext89 494E  
                                __ptext98 477C                                  __ptext99 43C0  
                            _SSP1CON1bits 000FC6                          __size_of_reverse 0056  
                            _SSP1CON2bits 000FC5               __size_of_PortProperty_Valid 0062  
                      i2Byte_GetZone@MASK 0007                              _SSP2CON1bits 000F6C  
                            _SSP2CON2bits 000F6B                           ?i2_Byte_GetPair 000A  
                        ?_Console_NewLine 0001                         ??_Event_DIPSwitch 00C7  
                         ?i2_Byte_GetZone 0001                        i2Byte_GetZone@pMax 0003  
                       HMI_SetSegments@in 00B2                     Button_Init@pThreshold 00EC  
                       USB_Tasks@Recieved 00CE            __end_of_USBCtrlTrfSetupHandler 3D3C  
                           __size_of_main 002E                         ?_USBCtrlEPService 0001  
                           __size_of_itos 00B2                         Byte_GetPair@pPair 00B9  
                       ?i2_Port_TogglePin 0015                    __end_of_Console_Render 0F5A  
                     i2Port_SetPin@pInput 0010                       i2Port_SetPin@pValue 0013  
                            _Port_GetQuad 46C0                       __end_of_MXK_Release 50A0  
                      ??_USBCtrlEPService 0028                        ??i2_Port_TogglePin 0018  
                           i2_Byte_SetBit 449A                       _USBCtrlTrfInHandler 2D64  
                    ??_Event_HMI_UpButton 00C7                       i2Word_GetPair@pPair 000F  
                                _outPipes 0060                 __end_of_MXK_BlockSwitchTo 4AC2  
                ?_Console_IncrementCursor 0001                      __size_of_Timer0_Init 0144  
                    _USBCtrlTrfOutHandler 4192                      __size_of_Timer2_Init 013E  
                                int$flags 005F                      __size_of_Timer0_Stop 0006  
                            _Port_SetType 0A24                              Port_Set@Type 00D4  
               _USBCtrlEPAllowStatusStage 2A8A                __size_of_GetPortProperties 0082  
                  __size_of_LCD_DrawField 007C                         ??_Configure_GPIOs 00E3  
                   TetrisBlockRotate@undo 0042                              _SSP1STATbits 000FC7  
                    __size_of_Motor_Speed 0026                    ??_USBTransferOnePacket 00B2  
                          Timer0_Init@DIV 0108                            Timer0_Init@PRE 0093  
                            _SSP2STATbits 000F6D                        Button_State@pInput 00B4  
                              _LED_Toggle 4A5C                                _HMI_GetBar 50A0  
                        _Motor_Continious 486A                 _USBDeferStatusStagePacket 0048  
                  PortProperty_Valid@Pair 00D3                  CDCTxService@byte_to_send 00BA  
                        ??_Port_TogglePin 00C5                               _OSCTUNEbits 000F9B  
                              _INTCONbits 000FF2               __end_of_Event_HMI_DIPSwitch 4C38  
                  PortProperty_Valid@pPin 00C0                                _HMI_SetBar 5086  
                              _HMI_Render 4916                          Byte_SetZone@MASK 00B8  
                    ?_USBCtrlTrfInHandler 0001                                  memcpy@d1 0001  
                                memcpy@s1 0003                            Timer2_Init@DIV 010C  
           USBCtrlTrfTxService@byteToSend 0001                            Timer2_Init@PRE 0095  
                                memset@p1 00AE                          Byte_SetZone@pMax 00B0  
                    __size_of_Port_GetPin 003C                          ?_USBStallHandler 0001  
                USBStdFeatureReqHandler@p 0026                      Button_Init@pFunction 00EE  
                                itos@Data 00B9                        LCD_FillRectangle@i 00C8  
                      LCD_FillRectangle@j 00C9                    TetrisFieldDraw@lCorner 0100  
                    __size_of_Port_SetPin 0070                                  intlevel2 0000  
                            reverse@input 00AE                    __size_of_USBDeviceInit 0118  
 __end_of_USER_USB_CALLBACK_EVENT_HANDLER 413E  __size_of_USER_USB_CALLBACK_EVENT_HANDLER 0054  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 0020          ?_USER_USB_CALLBACK_EVENT_HANDLER 001A  
         _USER_USB_CALLBACK_EVENT_HANDLER 40EA                          ___lwmod@dividend 00AE  
            i2USBTransferOnePacket@handle 000A                          ___lldiv@dividend 00AE  
                         ?_Console_Render 0001                   __size_of_LCD_Word_Write 0018  
                          ?i2_Byte_SetBit 0001                   ??_Event_HMI_RightButton 00C7  
              i2USBTransferOnePacket@data 0002                    __size_ofi2_Port_GetPin 0036  
                          _SPI_DisableISR 4EC4                    ??_USBConfigureEndpoint 0002  
                   ?_USBCtrlTrfOutHandler 0001                           Port_Init@pInput 00EE  
                             _putUSBUSART 4F46                                  printf@ap 00C8  
                                printf@cp 00CB                  Event_HMI_UpButton@pState 00C7  
                     _USBCtrlTrfRxService 1F50                    __size_ofi2_Port_SetPin 0062  
                              _ISR_Enable 507C                        _USBWakeFromSuspend 4D14  
                        ?_HMI_SetSegments 00AF                   Console_MakeField@Column 00B9  
                 _USBStdFeatureReqHandler 05C2                     __size_of_SPI_MaxSpeed 0060  
                           SPI_DCS@pInput 00AE                        _USBCheckCDCRequest 3008  
                   __size_of_SPI_MinSpeed 0062                       _USBCtrlTrfTxService 2522  
                  Event_HMI_DIPSwitch@Bar 00C8                   Console_MakeField@pInput 00BD  
                     ?_USBWakeFromSuspend 0001                          ___lldiv@quotient 00B6  
                           ??_GetPortPORT 00B0                           ___lwmod@divisor 00B0  
                           ??_GetPortTRIS 00B0                     ??_USBCtrlTrfInHandler 0002  
                   Timer0_Start@pFunction 00AE                        Word_SetPair@pInput 00BD  
                                strlen@cp 00B2                     _USBAlternateInterface 0057  
                         ___lwmod@counter 00B2                        Word_SetPair@pValue 00C0  
                        Motor_Init@pMotor 00DB                       ?_USBCheckCDCRequest 0001  
               i2USBTransferOnePacket@dir 0001                 i2USBTransferOnePacket@len 0004  
                     USBEnableEndpoint@ep 000C                           _endpoint_number 004F  
                          LED_Toggle@pLED 00C6                      ?_USBCtrlTrfRxService 0001  
                           _LCD_DrawField 3944                             ?_getsUSBUSART 00B9  
                        _Port_SetQuadType 0822                               _MXK_Release 5098  
                     _IMU_ReadRegContinue 000000                      TetrisFieldDraw@lSize 0104  
               __size_of_Console_FormFeed 006A                     __size_of_Word_GetPair 002C  
                ?_USBCtrlEPAllowDataStage 0001                        Byte_GetZone@Offset 00B5  
                           ?_Console_Init 0001                         Word_SetPair@pPair 00BF  
                    ?_USBCtrlTrfTxService 0001                           _Port_SetPinType 0F5A  
                 __size_of_Timer0_Restart 001A                        Byte_GetZone@Output 00B6  
            _USBStatusStageTimeoutCounter 004C                        Byte_GetZone@pChunk 00B1  
                  i2Port_TogglePin@pInput 0015                     i2Port_TogglePin@Value 0018  
                    ??_USBWakeFromSuspend 0022                        Byte_GetZone@pInput 00AE  
         __end_of_Console_IncrementCursor 4328                     __size_of_Word_SetPair 002E  
              USBTransferOnePacket@handle 00B7                      __end_of_CDCTxService 14E8  
                  __end_of_SPI_DisableISR 4EE6                              _SPI_MaxSpeed 3F24  
                    ??_USBCheckCDCRequest 0001                                _USB_CD_Ptr FD0F  
                            _SPI_MinSpeed 3D3C                        Port_Set@TypeActual 00D2  
