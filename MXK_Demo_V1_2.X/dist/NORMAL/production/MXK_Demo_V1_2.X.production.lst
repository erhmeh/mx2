

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Aug 11 13:02:16 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAMh,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBIGRAMl,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1,inline
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	text86,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text100,global,reloc=2,class=CODE,delta=1
   125                           	psect	text101,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   127                           	psect	text103,global,reloc=2,class=CODE,delta=1
   128                           	psect	text104,global,reloc=2,class=CODE,delta=1
   129                           	psect	text105,global,reloc=2,class=CODE,delta=1
   130                           	psect	text106,global,reloc=2,class=CODE,delta=1
   131                           	psect	text107,global,reloc=2,class=CODE,delta=1
   132                           	psect	text108,global,reloc=2,class=CODE,delta=1
   133                           	psect	text109,global,reloc=2,class=CODE,delta=1
   134                           	psect	text110,global,reloc=2,class=CODE,delta=1,inline
   135                           	psect	text111,global,reloc=2,class=CODE,delta=1
   136                           	psect	text112,global,reloc=2,class=CODE,delta=1
   137                           	psect	text113,global,reloc=2,class=CODE,delta=1
   138                           	psect	text114,global,reloc=2,class=CODE,delta=1
   139                           	psect	text115,global,reloc=2,class=CODE,delta=1
   140                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   141                           	psect	text116,global,reloc=2,class=CODE,delta=1
   142                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   143                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   144                           	dabs	1,0x400,48,_BDT
   145                           	dabs	1,0x438,8,_CtrlTrfData
   146                           	dabs	1,0x430,8,_SetupPkt
   147  0000                     
   148                           ; Version 1.43
   149                           ; Generated 25/07/2017 GMT
   150                           ; 
   151                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   152                           ; All rights reserved.
   153                           ; 
   154                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   155                           ; 
   156                           ; Redistribution and use in source and binary forms, with or without modification, are
   157                           ; permitted provided that the following conditions are met:
   158                           ; 
   159                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   160                           ;        conditions and the following disclaimer.
   161                           ; 
   162                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   163                           ;        of conditions and the following disclaimer in the documentation and/or other
   164                           ;        materials provided with the distribution.
   165                           ; 
   166                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   167                           ;        software without specific prior written permission.
   168                           ; 
   169                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   170                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   171                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   172                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   173                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   174                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   175                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   176                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   177                           ; 
   178                           ; 
   179                           ; Code-generator required, PIC18F67J50 Definitions
   180                           ; 
   181                           ; SFR Addresses
   182  0000                     
   183 ;; Function _HMI_LeftSwitch is unused but had its address taken
   184  0000                     
   185 ;; Function _HMI_RightSwitch is unused but had its address taken
   186  0000                     
   187 ;; Function _HMI_UpSwitch is unused but had its address taken
   188  0000                     
   189 ;; Function _HMI_DownSwitch is unused but had its address taken
   190  0000                     
   191 ;; Function _HMI_DIPSwitch is unused but had its address taken
   192  0000                     
   193 ;; Function _IMU_ReadRegFinish is unused but had its address taken
   194  0000                     
   195 ;; Function _IMU_ReadRegContinue is unused but had its address taken
   196  0000                     
   197 ;; Function _IMU_WriteRegFinish is unused but had its address taken
   198  0000                     
   199 ;; Function _IMU_WriteRegContinue is unused but had its address taken
   200  0000                     
   201 ;; Function _IMU_ReadComplete is unused but had its address taken
   202  0000                     
   203 ;; Function _MXK_TestButton is unused but had its address taken
   204  0000                     
   205 ;; Function _MXK_DIPSwitch is unused but had its address taken
   206  0000                     
   207 ;; Function _Event_DIPSwitch is unused but had its address taken
   208  0000                     
   209 ;; Function _Event_HMI_DIPSwitch is unused but had its address taken
   210  0000                     
   211 ;; Function _Event_TestButton is unused but had its address taken
   212  0000                     
   213 ;; Function _Event_HMI_LeftButton is unused but had its address taken
   214  0000                     
   215 ;; Function _Event_HMI_RightButton is unused but had its address taken
   216  0000                     
   217 ;; Function _Event_HMI_UpButton is unused but had its address taken
   218  0000                     
   219 ;; Function _Event_HMI_DownButton is unused but had its address taken
   220  0000                     
   221                           	psect	idataCOMRAM
   222  014230                     __pidataCOMRAM:
   223                           	opt stack 0
   224                           
   225                           ;initializer for _Bus_State
   226  014230  01                 	db	1
   227                           
   228                           ;initializer for _l
   229  014231  80                 	db	128
   230                           
   231                           ;initializer for _w
   232  014232  80                 	db	128
   233                           
   234                           	psect	idataBANK0
   235  01417C                     __pidataBANK0:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCursor
   239  01417C  0006               	dw	6
   240  01417E  0006               	dw	6
   241                           
   242                           ;initializer for _DIST
   243  014180  0064               	dw	100
   244                           
   245                           ;initializer for _Hz
   246  014182  000A               	dw	10
   247                           
   248                           ;initializer for _gForecolour
   249  014184  FFFF               	dw	65535
   250                           
   251                           ;initializer for FunctHMI@v
   252  014186  C8                 	db	200
   253                           
   254                           ;initializer for _change
   255  014187  01                 	db	1
   256                           
   257                           ;initializer for _A
   258  014188  41                 	db	65
   259                           
   260                           ;initializer for _a
   261  014189  61                 	db	97
   262                           
   263                           ;initializer for _zero
   264  01418A  30                 	db	48
   265                           
   266                           	psect	idataBANK1
   267  0141C4                     __pidataBANK1:
   268                           	opt stack 0
   269                           
   270                           ;initializer for Console_Render@F6956
   271  0141C4  0006               	dw	6
   272  0141C6  0006               	dw	6
   273                           
   274                           ;initializer for _gLineSize
   275  0141C8  0080               	dw	128
   276  0141CA  0007               	dw	7
   277                           
   278                           ;initializer for _gCharSize
   279  0141CC  0005               	dw	5
   280  0141CE  0007               	dw	7
   281                           
   282                           	psect	mediumconst
   283  00FBE2                     __pmediumconst:
   284                           	opt stack 0
   285  00FBE2  00                 	db	0
   286  00FBE3                     _InitList:
   287                           	opt stack 0
   288  00FBE3  1100               	dw	4352
   289  00FBE5  0080               	dw	128
   290  00FBE7  012C               	dw	300
   291  00FBE9  B100               	dw	45312
   292  00FBEB  0002               	dw	2
   293  00FBED  0035               	dw	53
   294  00FBEF  0036               	dw	54
   295  00FBF1  B200               	dw	45568
   296  00FBF3  0002               	dw	2
   297  00FBF5  0035               	dw	53
   298  00FBF7  0036               	dw	54
   299  00FBF9  B300               	dw	45824
   300  00FBFB  0002               	dw	2
   301  00FBFD  0035               	dw	53
   302  00FBFF  0036               	dw	54
   303  00FC01  0002               	dw	2
   304  00FC03  0035               	dw	53
   305  00FC05  0036               	dw	54
   306  00FC07  B400               	dw	46080
   307  00FC09  0000               	dw	0
   308  00FC0B  C000               	dw	49152
   309  00FC0D  00A2               	dw	162
   310  00FC0F  0002               	dw	2
   311  00FC11  0084               	dw	132
   312  00FC13  C100               	dw	49408
   313  00FC15  00C5               	dw	197
   314  00FC17  C200               	dw	49664
   315  00FC19  000D               	dw	13
   316  00FC1B  0000               	dw	0
   317  00FC1D  C300               	dw	49920
   318  00FC1F  008D               	dw	141
   319  00FC21  002A               	dw	42
   320  00FC23  C400               	dw	50176
   321  00FC25  008D               	dw	141
   322  00FC27  00EE               	dw	238
   323  00FC29  C500               	dw	50432
   324  00FC2B  000A               	dw	10
   325  00FC2D  3600               	dw	13824
   326  00FC2F  00C8               	dw	200
   327  00FC31  E000               	dw	57344
   328  00FC33  0012               	dw	18
   329  00FC35  001C               	dw	28
   330  00FC37  0010               	dw	16
   331  00FC39  0018               	dw	24
   332  00FC3B  0033               	dw	51
   333  00FC3D  002C               	dw	44
   334  00FC3F  0025               	dw	37
   335  00FC41  0028               	dw	40
   336  00FC43  0028               	dw	40
   337  00FC45  0027               	dw	39
   338  00FC47  002F               	dw	47
   339  00FC49  003C               	dw	60
   340  00FC4B  0000               	dw	0
   341  00FC4D  0003               	dw	3
   342  00FC4F  0003               	dw	3
   343  00FC51  0010               	dw	16
   344  00FC53  0080               	dw	128
   345  00FC55  0078               	dw	120
   346  00FC57  E100               	dw	57600
   347  00FC59  0012               	dw	18
   348  00FC5B  001C               	dw	28
   349  00FC5D  0010               	dw	16
   350  00FC5F  0018               	dw	24
   351  00FC61  002D               	dw	45
   352  00FC63  0028               	dw	40
   353  00FC65  0023               	dw	35
   354  00FC67  0028               	dw	40
   355  00FC69  0028               	dw	40
   356  00FC6B  0026               	dw	38
   357  00FC6D  002F               	dw	47
   358  00FC6F  003B               	dw	59
   359  00FC71  0000               	dw	0
   360  00FC73  0003               	dw	3
   361  00FC75  0003               	dw	3
   362  00FC77  0010               	dw	16
   363  00FC79  3A00               	dw	14848
   364  00FC7B  0005               	dw	5
   365  00FC7D  2A00               	dw	10752
   366  00FC7F  0000               	dw	0
   367  00FC81  0002               	dw	2
   368  00FC83  0000               	dw	0
   369  00FC85  0081               	dw	129
   370  00FC87  2B00               	dw	11008
   371  00FC89  0000               	dw	0
   372  00FC8B  0003               	dw	3
   373  00FC8D  0000               	dw	0
   374  00FC8F  00A2               	dw	162
   375  00FC91  2900               	dw	10496
   376  00FC93  2C00               	dw	11264
   377  00FC95                     __end_of_InitList:
   378                           	opt stack 0
   379  00FC95                     Timer0_Init@PRESCALE:
   380                           	opt stack 0
   381  00FC95  0002               	dw	2
   382  00FC97  0004               	dw	4
   383  00FC99  0008               	dw	8
   384  00FC9B  0010               	dw	16
   385  00FC9D  0020               	dw	32
   386  00FC9F  0040               	dw	64
   387  00FCA1  0080               	dw	128
   388  00FCA3  0100               	dw	256
   389  00FCA5                     __end_ofTimer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FCA5                     PortProperty_Valid@F6830:
   392                           	opt stack 0
   393  00FCA5  00                 	db	0
   394  00FCA6  01                 	db	1
   395  00FCA7  02                 	db	2
   396  00FCA8  00                 	db	0
   397  00FCA9  01                 	db	1
   398  00FCAA  00                 	db	0
   399  00FCAB  01                 	db	1
   400  00FCAC  00                 	db	0
   401  00FCAD  02                 	db	2
   402  00FCAE  02                 	db	2
   403  00FCAF  00                 	db	0
   404  00FCB0  00                 	db	0
   405  00FCB1  03                 	db	3
   406  00FCB2  03                 	db	3
   407  00FCB3  03                 	db	3
   408  00FCB4  00                 	db	0
   409  00FCB5                     __end_ofPortProperty_Valid@F6830:
   410                           	opt stack 0
   411  00FCB5                     _dpowers:
   412                           	opt stack 0
   413  00FCB5  0001               	dw	1
   414  00FCB7  000A               	dw	10
   415  00FCB9  0064               	dw	100
   416  00FCBB  03E8               	dw	1000
   417  00FCBD  2710               	dw	10000
   418  00FCBF                     __end_of_dpowers:
   419                           	opt stack 0
   420  00FCBF                     _MASKS:
   421                           	opt stack 0
   422  00FCBF  00                 	db	0
   423  00FCC0  01                 	db	1
   424  00FCC1  03                 	db	3
   425  00FCC2  07                 	db	7
   426  00FCC3  0F                 	db	15
   427  00FCC4  1F                 	db	31
   428  00FCC5  3F                 	db	63
   429  00FCC6  7F                 	db	127
   430  00FCC7  FF                 	db	255
   431  00FCC8                     __end_of_MASKS:
   432                           	opt stack 0
   433  00FCC8                     _RZVALS:
   434                           	opt stack 0
   435  00FCC8  0630               	dw	1584
   436  00FCCA  0132               	dw	306
   437  00FCCC  0630               	dw	1584
   438  00FCCE  0132               	dw	306
   439  00FCD0                     __end_of_RZVALS:
   440                           	opt stack 0
   441  00FCD0                     _LZVALS:
   442                           	opt stack 0
   443  00FCD0  0360               	dw	864
   444  00FCD2  0462               	dw	1122
   445  00FCD4  0360               	dw	864
   446  00FCD6  0462               	dw	1122
   447  00FCD8                     __end_of_LZVALS:
   448                           	opt stack 0
   449  00FCD8                     _TEVALS:
   450                           	opt stack 0
   451  00FCD8  0E40               	dw	3648
   452  00FCDA  0464               	dw	1124
   453  00FCDC  04E0               	dw	1248
   454  00FCDE  0262               	dw	610
   455  00FCE0                     __end_of_TEVALS:
   456                           	opt stack 0
   457  00FCE0                     _RLVALS:
   458                           	opt stack 0
   459  00FCE0  0644               	dw	1604
   460  00FCE2  0E20               	dw	3616
   461  00FCE4  0446               	dw	1094
   462  00FCE6  0170               	dw	368
   463  00FCE8                     __end_of_RLVALS:
   464                           	opt stack 0
   465  00FCE8                     _LLVALS:
   466                           	opt stack 0
   467  00FCE8  0622               	dw	1570
   468  00FCEA  02E0               	dw	736
   469  00FCEC  4460               	dw	17504
   470  00FCEE  0740               	dw	1856
   471  00FCF0                     __end_of_LLVALS:
   472                           	opt stack 0
   473  00FCF0                     _SQVALS:
   474                           	opt stack 0
   475  00FCF0  0660               	dw	1632
   476  00FCF2  0660               	dw	1632
   477  00FCF4  0660               	dw	1632
   478  00FCF6  0660               	dw	1632
   479  00FCF8                     __end_of_SQVALS:
   480                           	opt stack 0
   481  00FCF8                     _LNVALS:
   482                           	opt stack 0
   483  00FCF8  00F0               	dw	240
   484  00FCFA  4444               	dw	17476
   485  00FCFC  0F00               	dw	3840
   486  00FCFE  2222               	dw	8738
   487  00FD00                     __end_of_LNVALS:
   488                           	opt stack 0
   489  00FD00                     _USB_SD_Ptr:
   490                           	opt stack 0
   491  00FD00  AF                 	db	low _sd000
   492  00FD01  FF                 	db	high _sd000
   493  00FD02  69                 	db	low _sd001
   494  00FD03  FF                 	db	high _sd001
   495  00FD04  35                 	db	low _sd002
   496  00FD05  FF                 	db	high _sd002
   497  00FD06                     __end_of_USB_SD_Ptr:
   498                           	opt stack 0
   499  00FD06                     HMI_SetButton@F7369:
   500                           	opt stack 0
   501  00FD06  00                 	db	0
   502  00FD07  02                 	db	2
   503  00FD08  01                 	db	1
   504  00FD09  03                 	db	3
   505  00FD0A                     __end_ofHMI_SetButton@F7369:
   506                           	opt stack 0
   507  00FD0A                     Timer2_Init@PRESCALE:
   508                           	opt stack 0
   509  00FD0A  01                 	db	1
   510  00FD0B  04                 	db	4
   511  00FD0C  10                 	db	16
   512  00FD0D                     __end_ofTimer2_Init@PRESCALE:
   513                           	opt stack 0
   514  00FD0D                     _HzInc:
   515                           	opt stack 0
   516  00FD0D  000A               	dw	10
   517  00FD0F                     __end_of_HzInc:
   518                           	opt stack 0
   519  00FD0F                     _USB_CD_Ptr:
   520                           	opt stack 0
   521  00FD0F  F2                 	db	low _configDescriptor1
   522  00FD10  FE                 	db	high _configDescriptor1
   523  00FD11                     __end_of_USB_CD_Ptr:
   524                           	opt stack 0
   525  00FD11                     _BLOCKS_COUNT:
   526                           	opt stack 0
   527  00FD11  C8                 	db	200
   528  00FD12                     __end_of_BLOCKS_COUNT:
   529                           	opt stack 0
   530  00FD12                     _Font5x7:
   531                           	opt stack 0
   532  00FD12  00                 	db	0
   533  00FD13  00                 	db	0
   534  00FD14  00                 	db	0
   535  00FD15  00                 	db	0
   536  00FD16  00                 	db	0
   537  00FD17  00                 	db	0
   538  00FD18  00                 	db	0
   539  00FD19  5F                 	db	95
   540  00FD1A  00                 	db	0
   541  00FD1B  00                 	db	0
   542  00FD1C  00                 	db	0
   543  00FD1D  07                 	db	7
   544  00FD1E  00                 	db	0
   545  00FD1F  07                 	db	7
   546  00FD20  00                 	db	0
   547  00FD21  14                 	db	20
   548  00FD22  7F                 	db	127
   549  00FD23  14                 	db	20
   550  00FD24  7F                 	db	127
   551  00FD25  14                 	db	20
   552  00FD26  24                 	db	36
   553  00FD27  2A                 	db	42
   554  00FD28  7F                 	db	127
   555  00FD29  2A                 	db	42
   556  00FD2A  12                 	db	18
   557  00FD2B  23                 	db	35
   558  00FD2C  13                 	db	19
   559  00FD2D  08                 	db	8
   560  00FD2E  64                 	db	100
   561  00FD2F  62                 	db	98
   562  00FD30  36                 	db	54
   563  00FD31  49                 	db	73
   564  00FD32  55                 	db	85
   565  00FD33  22                 	db	34
   566  00FD34  50                 	db	80
   567  00FD35  00                 	db	0
   568  00FD36  05                 	db	5
   569  00FD37  03                 	db	3
   570  00FD38  00                 	db	0
   571  00FD39  00                 	db	0
   572  00FD3A  00                 	db	0
   573  00FD3B  1C                 	db	28
   574  00FD3C  22                 	db	34
   575  00FD3D  41                 	db	65
   576  00FD3E  00                 	db	0
   577  00FD3F  00                 	db	0
   578  00FD40  41                 	db	65
   579  00FD41  22                 	db	34
   580  00FD42  1C                 	db	28
   581  00FD43  00                 	db	0
   582  00FD44  08                 	db	8
   583  00FD45  2A                 	db	42
   584  00FD46  1C                 	db	28
   585  00FD47  2A                 	db	42
   586  00FD48  08                 	db	8
   587  00FD49  08                 	db	8
   588  00FD4A  08                 	db	8
   589  00FD4B  3E                 	db	62
   590  00FD4C  08                 	db	8
   591  00FD4D  08                 	db	8
   592  00FD4E  00                 	db	0
   593  00FD4F  50                 	db	80
   594  00FD50  30                 	db	48
   595  00FD51  00                 	db	0
   596  00FD52  00                 	db	0
   597  00FD53  08                 	db	8
   598  00FD54  08                 	db	8
   599  00FD55  08                 	db	8
   600  00FD56  08                 	db	8
   601  00FD57  08                 	db	8
   602  00FD58  00                 	db	0
   603  00FD59  60                 	db	96
   604  00FD5A  60                 	db	96
   605  00FD5B  00                 	db	0
   606  00FD5C  00                 	db	0
   607  00FD5D  20                 	db	32
   608  00FD5E  10                 	db	16
   609  00FD5F  08                 	db	8
   610  00FD60  04                 	db	4
   611  00FD61  02                 	db	2
   612  00FD62  3E                 	db	62
   613  00FD63  51                 	db	81
   614  00FD64  49                 	db	73
   615  00FD65  45                 	db	69
   616  00FD66  3E                 	db	62
   617  00FD67  00                 	db	0
   618  00FD68  42                 	db	66
   619  00FD69  7F                 	db	127
   620  00FD6A  40                 	db	64
   621  00FD6B  00                 	db	0
   622  00FD6C  42                 	db	66
   623  00FD6D  61                 	db	97
   624  00FD6E  51                 	db	81
   625  00FD6F  49                 	db	73
   626  00FD70  46                 	db	70
   627  00FD71  21                 	db	33
   628  00FD72  41                 	db	65
   629  00FD73  45                 	db	69
   630  00FD74  4B                 	db	75
   631  00FD75  31                 	db	49
   632  00FD76  18                 	db	24
   633  00FD77  14                 	db	20
   634  00FD78  12                 	db	18
   635  00FD79  7F                 	db	127
   636  00FD7A  10                 	db	16
   637  00FD7B  27                 	db	39
   638  00FD7C  45                 	db	69
   639  00FD7D  45                 	db	69
   640  00FD7E  45                 	db	69
   641  00FD7F  39                 	db	57
   642  00FD80  3C                 	db	60
   643  00FD81  4A                 	db	74
   644  00FD82  49                 	db	73
   645  00FD83  49                 	db	73
   646  00FD84  30                 	db	48
   647  00FD85  01                 	db	1
   648  00FD86  71                 	db	113
   649  00FD87  09                 	db	9
   650  00FD88  05                 	db	5
   651  00FD89  03                 	db	3
   652  00FD8A  36                 	db	54
   653  00FD8B  49                 	db	73
   654  00FD8C  49                 	db	73
   655  00FD8D  49                 	db	73
   656  00FD8E  36                 	db	54
   657  00FD8F  06                 	db	6
   658  00FD90  49                 	db	73
   659  00FD91  49                 	db	73
   660  00FD92  29                 	db	41
   661  00FD93  1E                 	db	30
   662  00FD94  00                 	db	0
   663  00FD95  36                 	db	54
   664  00FD96  36                 	db	54
   665  00FD97  00                 	db	0
   666  00FD98  00                 	db	0
   667  00FD99  00                 	db	0
   668  00FD9A  56                 	db	86
   669  00FD9B  36                 	db	54
   670  00FD9C  00                 	db	0
   671  00FD9D  00                 	db	0
   672  00FD9E  00                 	db	0
   673  00FD9F  08                 	db	8
   674  00FDA0  14                 	db	20
   675  00FDA1  22                 	db	34
   676  00FDA2  41                 	db	65
   677  00FDA3  14                 	db	20
   678  00FDA4  14                 	db	20
   679  00FDA5  14                 	db	20
   680  00FDA6  14                 	db	20
   681  00FDA7  14                 	db	20
   682  00FDA8  41                 	db	65
   683  00FDA9  22                 	db	34
   684  00FDAA  14                 	db	20
   685  00FDAB  08                 	db	8
   686  00FDAC  00                 	db	0
   687  00FDAD  02                 	db	2
   688  00FDAE  01                 	db	1
   689  00FDAF  51                 	db	81
   690  00FDB0  09                 	db	9
   691  00FDB1  06                 	db	6
   692  00FDB2  32                 	db	50
   693  00FDB3  49                 	db	73
   694  00FDB4  79                 	db	121
   695  00FDB5  41                 	db	65
   696  00FDB6  3E                 	db	62
   697  00FDB7  7E                 	db	126
   698  00FDB8  11                 	db	17
   699  00FDB9  11                 	db	17
   700  00FDBA  11                 	db	17
   701  00FDBB  7E                 	db	126
   702  00FDBC  7F                 	db	127
   703  00FDBD  49                 	db	73
   704  00FDBE  49                 	db	73
   705  00FDBF  49                 	db	73
   706  00FDC0  36                 	db	54
   707  00FDC1  3E                 	db	62
   708  00FDC2  41                 	db	65
   709  00FDC3  41                 	db	65
   710  00FDC4  41                 	db	65
   711  00FDC5  22                 	db	34
   712  00FDC6  7F                 	db	127
   713  00FDC7  41                 	db	65
   714  00FDC8  41                 	db	65
   715  00FDC9  22                 	db	34
   716  00FDCA  1C                 	db	28
   717  00FDCB  7F                 	db	127
   718  00FDCC  49                 	db	73
   719  00FDCD  49                 	db	73
   720  00FDCE  49                 	db	73
   721  00FDCF  41                 	db	65
   722  00FDD0  7F                 	db	127
   723  00FDD1  09                 	db	9
   724  00FDD2  09                 	db	9
   725  00FDD3  01                 	db	1
   726  00FDD4  01                 	db	1
   727  00FDD5  3E                 	db	62
   728  00FDD6  41                 	db	65
   729  00FDD7  41                 	db	65
   730  00FDD8  51                 	db	81
   731  00FDD9  32                 	db	50
   732  00FDDA  7F                 	db	127
   733  00FDDB  08                 	db	8
   734  00FDDC  08                 	db	8
   735  00FDDD  08                 	db	8
   736  00FDDE  7F                 	db	127
   737  00FDDF  00                 	db	0
   738  00FDE0  41                 	db	65
   739  00FDE1  7F                 	db	127
   740  00FDE2  41                 	db	65
   741  00FDE3  00                 	db	0
   742  00FDE4  20                 	db	32
   743  00FDE5  40                 	db	64
   744  00FDE6  41                 	db	65
   745  00FDE7  3F                 	db	63
   746  00FDE8  01                 	db	1
   747  00FDE9  7F                 	db	127
   748  00FDEA  08                 	db	8
   749  00FDEB  14                 	db	20
   750  00FDEC  22                 	db	34
   751  00FDED  41                 	db	65
   752  00FDEE  7F                 	db	127
   753  00FDEF  40                 	db	64
   754  00FDF0  40                 	db	64
   755  00FDF1  40                 	db	64
   756  00FDF2  40                 	db	64
   757  00FDF3  7F                 	db	127
   758  00FDF4  02                 	db	2
   759  00FDF5  04                 	db	4
   760  00FDF6  02                 	db	2
   761  00FDF7  7F                 	db	127
   762  00FDF8  7F                 	db	127
   763  00FDF9  04                 	db	4
   764  00FDFA  08                 	db	8
   765  00FDFB  10                 	db	16
   766  00FDFC  7F                 	db	127
   767  00FDFD  3E                 	db	62
   768  00FDFE  41                 	db	65
   769  00FDFF  41                 	db	65
   770  00FE00  41                 	db	65
   771  00FE01  3E                 	db	62
   772  00FE02  7F                 	db	127
   773  00FE03  09                 	db	9
   774  00FE04  09                 	db	9
   775  00FE05  09                 	db	9
   776  00FE06  06                 	db	6
   777  00FE07  3E                 	db	62
   778  00FE08  41                 	db	65
   779  00FE09  51                 	db	81
   780  00FE0A  21                 	db	33
   781  00FE0B  5E                 	db	94
   782  00FE0C  7F                 	db	127
   783  00FE0D  09                 	db	9
   784  00FE0E  19                 	db	25
   785  00FE0F  29                 	db	41
   786  00FE10  46                 	db	70
   787  00FE11  46                 	db	70
   788  00FE12  49                 	db	73
   789  00FE13  49                 	db	73
   790  00FE14  49                 	db	73
   791  00FE15  31                 	db	49
   792  00FE16  01                 	db	1
   793  00FE17  01                 	db	1
   794  00FE18  7F                 	db	127
   795  00FE19  01                 	db	1
   796  00FE1A  01                 	db	1
   797  00FE1B  3F                 	db	63
   798  00FE1C  40                 	db	64
   799  00FE1D  40                 	db	64
   800  00FE1E  40                 	db	64
   801  00FE1F  3F                 	db	63
   802  00FE20  1F                 	db	31
   803  00FE21  20                 	db	32
   804  00FE22  40                 	db	64
   805  00FE23  20                 	db	32
   806  00FE24  1F                 	db	31
   807  00FE25  7F                 	db	127
   808  00FE26  20                 	db	32
   809  00FE27  18                 	db	24
   810  00FE28  20                 	db	32
   811  00FE29  7F                 	db	127
   812  00FE2A  63                 	db	99
   813  00FE2B  14                 	db	20
   814  00FE2C  08                 	db	8
   815  00FE2D  14                 	db	20
   816  00FE2E  63                 	db	99
   817  00FE2F  03                 	db	3
   818  00FE30  04                 	db	4
   819  00FE31  78                 	db	120
   820  00FE32  04                 	db	4
   821  00FE33  03                 	db	3
   822  00FE34  61                 	db	97
   823  00FE35  51                 	db	81
   824  00FE36  49                 	db	73
   825  00FE37  45                 	db	69
   826  00FE38  43                 	db	67
   827  00FE39  00                 	db	0
   828  00FE3A  00                 	db	0
   829  00FE3B  7F                 	db	127
   830  00FE3C  41                 	db	65
   831  00FE3D  41                 	db	65
   832  00FE3E  02                 	db	2
   833  00FE3F  04                 	db	4
   834  00FE40  08                 	db	8
   835  00FE41  10                 	db	16
   836  00FE42  20                 	db	32
   837  00FE43  41                 	db	65
   838  00FE44  41                 	db	65
   839  00FE45  7F                 	db	127
   840  00FE46  00                 	db	0
   841  00FE47  00                 	db	0
   842  00FE48  04                 	db	4
   843  00FE49  02                 	db	2
   844  00FE4A  01                 	db	1
   845  00FE4B  02                 	db	2
   846  00FE4C  04                 	db	4
   847  00FE4D  40                 	db	64
   848  00FE4E  40                 	db	64
   849  00FE4F  40                 	db	64
   850  00FE50  40                 	db	64
   851  00FE51  40                 	db	64
   852  00FE52  00                 	db	0
   853  00FE53  01                 	db	1
   854  00FE54  02                 	db	2
   855  00FE55  04                 	db	4
   856  00FE56  00                 	db	0
   857  00FE57  20                 	db	32
   858  00FE58  54                 	db	84
   859  00FE59  54                 	db	84
   860  00FE5A  54                 	db	84
   861  00FE5B  78                 	db	120
   862  00FE5C  7F                 	db	127
   863  00FE5D  48                 	db	72
   864  00FE5E  44                 	db	68
   865  00FE5F  44                 	db	68
   866  00FE60  38                 	db	56
   867  00FE61  38                 	db	56
   868  00FE62  44                 	db	68
   869  00FE63  44                 	db	68
   870  00FE64  44                 	db	68
   871  00FE65  20                 	db	32
   872  00FE66  38                 	db	56
   873  00FE67  44                 	db	68
   874  00FE68  44                 	db	68
   875  00FE69  48                 	db	72
   876  00FE6A  7F                 	db	127
   877  00FE6B  38                 	db	56
   878  00FE6C  54                 	db	84
   879  00FE6D  54                 	db	84
   880  00FE6E  54                 	db	84
   881  00FE6F  18                 	db	24
   882  00FE70  08                 	db	8
   883  00FE71  7E                 	db	126
   884  00FE72  09                 	db	9
   885  00FE73  01                 	db	1
   886  00FE74  02                 	db	2
   887  00FE75  08                 	db	8
   888  00FE76  14                 	db	20
   889  00FE77  54                 	db	84
   890  00FE78  54                 	db	84
   891  00FE79  3C                 	db	60
   892  00FE7A  7F                 	db	127
   893  00FE7B  08                 	db	8
   894  00FE7C  04                 	db	4
   895  00FE7D  04                 	db	4
   896  00FE7E  78                 	db	120
   897  00FE7F  00                 	db	0
   898  00FE80  44                 	db	68
   899  00FE81  7D                 	db	125
   900  00FE82  40                 	db	64
   901  00FE83  00                 	db	0
   902  00FE84  20                 	db	32
   903  00FE85  40                 	db	64
   904  00FE86  44                 	db	68
   905  00FE87  3D                 	db	61
   906  00FE88  00                 	db	0
   907  00FE89  00                 	db	0
   908  00FE8A  7F                 	db	127
   909  00FE8B  10                 	db	16
   910  00FE8C  28                 	db	40
   911  00FE8D  44                 	db	68
   912  00FE8E  00                 	db	0
   913  00FE8F  41                 	db	65
   914  00FE90  7F                 	db	127
   915  00FE91  40                 	db	64
   916  00FE92  00                 	db	0
   917  00FE93  7C                 	db	124
   918  00FE94  04                 	db	4
   919  00FE95  18                 	db	24
   920  00FE96  04                 	db	4
   921  00FE97  78                 	db	120
   922  00FE98  7C                 	db	124
   923  00FE99  08                 	db	8
   924  00FE9A  04                 	db	4
   925  00FE9B  04                 	db	4
   926  00FE9C  78                 	db	120
   927  00FE9D  38                 	db	56
   928  00FE9E  44                 	db	68
   929  00FE9F  44                 	db	68
   930  00FEA0  44                 	db	68
   931  00FEA1  38                 	db	56
   932  00FEA2  7C                 	db	124
   933  00FEA3  14                 	db	20
   934  00FEA4  14                 	db	20
   935  00FEA5  14                 	db	20
   936  00FEA6  08                 	db	8
   937  00FEA7  08                 	db	8
   938  00FEA8  14                 	db	20
   939  00FEA9  14                 	db	20
   940  00FEAA  18                 	db	24
   941  00FEAB  7C                 	db	124
   942  00FEAC  7C                 	db	124
   943  00FEAD  08                 	db	8
   944  00FEAE  04                 	db	4
   945  00FEAF  04                 	db	4
   946  00FEB0  08                 	db	8
   947  00FEB1  48                 	db	72
   948  00FEB2  54                 	db	84
   949  00FEB3  54                 	db	84
   950  00FEB4  54                 	db	84
   951  00FEB5  20                 	db	32
   952  00FEB6  04                 	db	4
   953  00FEB7  3F                 	db	63
   954  00FEB8  44                 	db	68
   955  00FEB9  40                 	db	64
   956  00FEBA  20                 	db	32
   957  00FEBB  3C                 	db	60
   958  00FEBC  40                 	db	64
   959  00FEBD  40                 	db	64
   960  00FEBE  20                 	db	32
   961  00FEBF  7C                 	db	124
   962  00FEC0  1C                 	db	28
   963  00FEC1  20                 	db	32
   964  00FEC2  40                 	db	64
   965  00FEC3  20                 	db	32
   966  00FEC4  1C                 	db	28
   967  00FEC5  3C                 	db	60
   968  00FEC6  40                 	db	64
   969  00FEC7  30                 	db	48
   970  00FEC8  40                 	db	64
   971  00FEC9  3C                 	db	60
   972  00FECA  44                 	db	68
   973  00FECB  28                 	db	40
   974  00FECC  10                 	db	16
   975  00FECD  28                 	db	40
   976  00FECE  44                 	db	68
   977  00FECF  0C                 	db	12
   978  00FED0  50                 	db	80
   979  00FED1  50                 	db	80
   980  00FED2  50                 	db	80
   981  00FED3  3C                 	db	60
   982  00FED4  44                 	db	68
   983  00FED5  64                 	db	100
   984  00FED6  54                 	db	84
   985  00FED7  4C                 	db	76
   986  00FED8  44                 	db	68
   987  00FED9  00                 	db	0
   988  00FEDA  08                 	db	8
   989  00FEDB  36                 	db	54
   990  00FEDC  41                 	db	65
   991  00FEDD  00                 	db	0
   992  00FEDE  00                 	db	0
   993  00FEDF  00                 	db	0
   994  00FEE0  7F                 	db	127
   995  00FEE1  00                 	db	0
   996  00FEE2  00                 	db	0
   997  00FEE3  00                 	db	0
   998  00FEE4  41                 	db	65
   999  00FEE5  36                 	db	54
  1000  00FEE6  08                 	db	8
  1001  00FEE7  00                 	db	0
  1002  00FEE8  08                 	db	8
  1003  00FEE9  08                 	db	8
  1004  00FEEA  2A                 	db	42
  1005  00FEEB  1C                 	db	28
  1006  00FEEC  08                 	db	8
  1007  00FEED  08                 	db	8
  1008  00FEEE  1C                 	db	28
  1009  00FEEF  2A                 	db	42
  1010  00FEF0  08                 	db	8
  1011  00FEF1  08                 	db	8
  1012  00FEF2                     __end_of_Font5x7:
  1013                           	opt stack 0
  1014  00FEF2                     _configDescriptor1:
  1015                           	opt stack 0
  1016  00FEF2  09                 	db	9
  1017  00FEF3  02                 	db	2
  1018  00FEF4  43                 	db	67
  1019  00FEF5  00                 	db	0
  1020  00FEF6  02                 	db	2
  1021  00FEF7  01                 	db	1
  1022  00FEF8  00                 	db	0
  1023  00FEF9  C0                 	db	192
  1024  00FEFA  32                 	db	50
  1025  00FEFB  09                 	db	9
  1026  00FEFC  04                 	db	4
  1027  00FEFD  00                 	db	0
  1028  00FEFE  00                 	db	0
  1029  00FEFF  01                 	db	1
  1030  00FF00  02                 	db	2
  1031  00FF01  02                 	db	2
  1032  00FF02  01                 	db	1
  1033  00FF03  00                 	db	0
  1034  00FF04  05                 	db	5
  1035  00FF05  24                 	db	36
  1036  00FF06  00                 	db	0
  1037  00FF07  10                 	db	16
  1038  00FF08  01                 	db	1
  1039  00FF09  04                 	db	4
  1040  00FF0A  24                 	db	36
  1041  00FF0B  02                 	db	2
  1042  00FF0C  02                 	db	2
  1043  00FF0D  05                 	db	5
  1044  00FF0E  24                 	db	36
  1045  00FF0F  06                 	db	6
  1046  00FF10  00                 	db	0
  1047  00FF11  01                 	db	1
  1048  00FF12  05                 	db	5
  1049  00FF13  24                 	db	36
  1050  00FF14  01                 	db	1
  1051  00FF15  00                 	db	0
  1052  00FF16  01                 	db	1
  1053  00FF17  07                 	db	7
  1054  00FF18  05                 	db	5
  1055  00FF19  81                 	db	129
  1056  00FF1A  03                 	db	3
  1057  00FF1B  08                 	db	8
  1058  00FF1C  00                 	db	0
  1059  00FF1D  02                 	db	2
  1060  00FF1E  09                 	db	9
  1061  00FF1F  04                 	db	4
  1062  00FF20  01                 	db	1
  1063  00FF21  00                 	db	0
  1064  00FF22  02                 	db	2
  1065  00FF23  0A                 	db	10
  1066  00FF24  00                 	db	0
  1067  00FF25  00                 	db	0
  1068  00FF26  00                 	db	0
  1069  00FF27  07                 	db	7
  1070  00FF28  05                 	db	5
  1071  00FF29  02                 	db	2
  1072  00FF2A  02                 	db	2
  1073  00FF2B  40                 	db	64
  1074  00FF2C  00                 	db	0
  1075  00FF2D  00                 	db	0
  1076  00FF2E  07                 	db	7
  1077  00FF2F  05                 	db	5
  1078  00FF30  82                 	db	130
  1079  00FF31  02                 	db	2
  1080  00FF32  40                 	db	64
  1081  00FF33  00                 	db	0
  1082  00FF34  00                 	db	0
  1083  00FF35                     __end_of_configDescriptor1:
  1084                           	opt stack 0
  1085  00FF35                     _sd002:
  1086                           	opt stack 0
  1087  00FF35  34                 	db	52
  1088  00FF36  03                 	db	3
  1089  00FF37  0043               	dw	67
  1090  00FF39  0044               	dw	68
  1091  00FF3B  0043               	dw	67
  1092  00FF3D  0020               	dw	32
  1093  00FF3F  004D               	dw	77
  1094  00FF41  0058               	dw	88
  1095  00FF43  004B               	dw	75
  1096  00FF45  0020               	dw	32
  1097  00FF47  004B               	dw	75
  1098  00FF49  0049               	dw	73
  1099  00FF4B  0054               	dw	84
  1100  00FF4D  0020               	dw	32
  1101  00FF4F  0020               	dw	32
  1102  00FF51  0020               	dw	32
  1103  00FF53  0020               	dw	32
  1104  00FF55  0020               	dw	32
  1105  00FF57  0020               	dw	32
  1106  00FF59  0020               	dw	32
  1107  00FF5B  0020               	dw	32
  1108  00FF5D  0020               	dw	32
  1109  00FF5F  0020               	dw	32
  1110  00FF61  0044               	dw	68
  1111  00FF63  0065               	dw	101
  1112  00FF65  006D               	dw	109
  1113  00FF67  006F               	dw	111
  1114  00FF69                     __end_of_sd002:
  1115                           	opt stack 0
  1116  00FF69                     _sd001:
  1117                           	opt stack 0
  1118  00FF69  34                 	db	52
  1119  00FF6A  03                 	db	3
  1120  00FF6B  0055               	dw	85
  1121  00FF6D  0054               	dw	84
  1122  00FF6F  0053               	dw	83
  1123  00FF71  0020               	dw	32
  1124  00FF73  004D               	dw	77
  1125  00FF75  0058               	dw	88
  1126  00FF77  004B               	dw	75
  1127  00FF79  0020               	dw	32
  1128  00FF7B  004B               	dw	75
  1129  00FF7D  0049               	dw	73
  1130  00FF7F  0054               	dw	84
  1131  00FF81  0020               	dw	32
  1132  00FF83  0056               	dw	86
  1133  00FF85  0031               	dw	49
  1134  00FF87  0020               	dw	32
  1135  00FF89  0020               	dw	32
  1136  00FF8B  0020               	dw	32
  1137  00FF8D  0020               	dw	32
  1138  00FF8F  0020               	dw	32
  1139  00FF91  0020               	dw	32
  1140  00FF93  0030               	dw	48
  1141  00FF95  0032               	dw	50
  1142  00FF97  0031               	dw	49
  1143  00FF99  0037               	dw	55
  1144  00FF9B  002E               	dw	46
  1145  00FF9D                     __end_of_sd001:
  1146                           	opt stack 0
  1147  00FF9D                     _device_dsc:
  1148                           	opt stack 0
  1149  00FF9D  12                 	db	18
  1150  00FF9E  01                 	db	1
  1151  00FF9F  0200               	dw	512
  1152  00FFA1  02                 	db	2
  1153  00FFA2  00                 	db	0
  1154  00FFA3  00                 	db	0
  1155  00FFA4  08                 	db	8
  1156  00FFA5  04D8               	dw	1240
  1157  00FFA7  000A               	dw	10
  1158  00FFA9  0100               	dw	256
  1159  00FFAB  01                 	db	1
  1160  00FFAC  02                 	db	2
  1161  00FFAD  00                 	db	0
  1162  00FFAE  01                 	db	1
  1163  00FFAF                     __end_of_device_dsc:
  1164                           	opt stack 0
  1165  00FFAF                     _sd000:
  1166                           	opt stack 0
  1167  00FFAF  04                 	db	4
  1168  00FFB0  03                 	db	3
  1169  00FFB1  0409               	dw	1033
  1170  00FFB3                     __end_of_sd000:
  1171                           	opt stack 0
  1172  00FFB3                     _PortG_Property:
  1173                           	opt stack 0
  1174  00FFB3  FC00               	dw	64512
  1175  00FFB5                     __end_of_PortG_Property:
  1176                           	opt stack 0
  1177  00FFB5                     _PortF_Property:
  1178                           	opt stack 0
  1179  00FFB5  0FFF               	dw	4095
  1180  00FFB7                     __end_of_PortF_Property:
  1181                           	opt stack 0
  1182  00FFB7                     _PortE_Property:
  1183                           	opt stack 0
  1184  00FFB7  0000               	dw	0
  1185  00FFB9                     __end_of_PortE_Property:
  1186                           	opt stack 0
  1187  00FFB9                     _PortD_Property:
  1188                           	opt stack 0
  1189  00FFB9  FFFF               	dw	65535
  1190  00FFBB                     __end_of_PortD_Property:
  1191                           	opt stack 0
  1192  00FFBB                     _PortC_Property:
  1193                           	opt stack 0
  1194  00FFBB  FFF0               	dw	65520
  1195  00FFBD                     __end_of_PortC_Property:
  1196                           	opt stack 0
  1197  00FFBD                     _PortB_Property:
  1198                           	opt stack 0
  1199  00FFBD  FF00               	dw	65280
  1200  00FFBF                     __end_of_PortB_Property:
  1201                           	opt stack 0
  1202  00FFBF                     _PortA_Property:
  1203                           	opt stack 0
  1204  00FFBF  00FF               	dw	255
  1205  00FFC1                     __end_of_PortA_Property:
  1206                           	opt stack 0
  1207  0000                     _UEP0bits	set	3916
  1208  0000                     _UIEbits	set	3932
  1209  0000                     _UADDR	set	3934
  1210  0000                     _UIE	set	3932
  1211  0000                     _UEIE	set	3933
  1212  0000                     _UCFG	set	3935
  1213  0000                     _UEP1	set	3917
  1214  0000                     _UEP0	set	3916
  1215  0000                     _TMR0	set	4054
  1216  0000                     _PR2	set	4043
  1217  0000                     _T2CONbits	set	4042
  1218  0000                     _T0CONbits	set	4053
  1219  0000                     _RCONbits	set	4048
  1220  0000                     _OSCTUNEbits	set	3995
  1221  0000                     _PIR3	set	4004
  1222  0000                     _PIR2	set	4001
  1223  0000                     _PIR1	set	3998
  1224  0000                     _INTCONbits	set	4082
  1225  0000                     _SSP2CON2bits	set	3947
  1226  0000                     _SSP1CON2bits	set	4037
  1227  0000                     _SSP1ADD	set	4040
  1228  0000                     _ANCON0	set	4033
  1229  0000                     _ADRESL	set	4035
  1230  0000                     _ADRESH	set	4036
  1231  0000                     _ADCON1bits	set	4033
  1232  0000                     _ADCON0bits	set	4034
  1233  0000                     _SSP2CON1bits	set	3948
  1234  0000                     _SSP1CON1bits	set	4038
  1235  0000                     _SSP2STATbits	set	3949
  1236  0000                     _SSP1STATbits	set	4039
  1237  0000                     _PIE3bits	set	4003
  1238  0000                     _PIE1bits	set	3997
  1239  0000                     _PIR3bits	set	4004
  1240  0000                     _PIR1bits	set	3998
  1241  0000                     _IPR3bits	set	4005
  1242  0000                     _IPR1bits	set	3999
  1243  0000                     _PORTFbits	set	3973
  1244  0000                     _USTAT	set	3940
  1245  0000                     _PIR2bits	set	4001
  1246  0000                     _UCON	set	3941
  1247  0000                     _UIRbits	set	3938
  1248  0000                     _UCONbits	set	3941
  1249  0000                     _UIR	set	3938
  1250  0000                     _UEIR	set	3939
  1251  0000                     _TRISFbits	set	3991
  1252  0000                     _PIE2bits	set	4000
  1253  0000                     _SSP2CON2	set	3947
  1254  0000                     _SSP1CON2	set	4037
  1255  0000                     _SSP2BUF	set	3951
  1256  0000                     _SSP2CON1	set	3948
  1257  0000                     _SSP2STAT	set	3949
  1258  0000                     _SSP1BUF	set	4041
  1259  0000                     _SSP1CON1	set	4038
  1260  0000                     _SSP1STAT	set	4039
  1261  0000                     _LATG	set	3983
  1262  0000                     _LATF	set	3982
  1263  0000                     _LATE	set	3981
  1264  0000                     _LATD	set	3980
  1265  0000                     _LATC	set	3979
  1266  0000                     _LATB	set	3978
  1267  0000                     _LATA	set	3977
  1268  0000                     _TRISG	set	3992
  1269  0000                     _TRISF	set	3991
  1270  0000                     _TRISE	set	3990
  1271  0000                     _TRISD	set	3989
  1272  0000                     _TRISC	set	3988
  1273  0000                     _TRISB	set	3987
  1274  0000                     _TRISA	set	3986
  1275  0000                     _PORTG	set	3974
  1276  0000                     _PORTF	set	3973
  1277  0000                     _PORTE	set	3972
  1278  0000                     _PORTD	set	3971
  1279  0000                     _PORTC	set	3970
  1280  0000                     _PORTB	set	3969
  1281  0000                     _PORTA	set	3968
  1282  00FFC1                     STR_8:
  1283  00FFC1  53                 	db	83	;'S'
  1284  00FFC2  74                 	db	116	;'t'
  1285  00FFC3  65                 	db	101	;'e'
  1286  00FFC4  70                 	db	112	;'p'
  1287  00FFC5  20                 	db	32
  1288  00FFC6  72                 	db	114	;'r'
  1289  00FFC7  61                 	db	97	;'a'
  1290  00FFC8  74                 	db	116	;'t'
  1291  00FFC9  65                 	db	101	;'e'
  1292  00FFCA  09                 	db	9
  1293  00FFCB  3D                 	db	61	;'='
  1294  00FFCC  25                 	db	37
  1295  00FFCD  75                 	db	117	;'u'
  1296  00FFCE  20                 	db	32
  1297  00FFCF  48                 	db	72	;'H'
  1298  00FFD0  7A                 	db	122	;'z'
  1299  00FFD1  0A                 	db	10
  1300  00FFD2  00                 	db	0
  1301  00FFD3                     STR_3:
  1302  00FFD3  53                 	db	83	;'S'
  1303  00FFD4  59                 	db	89	;'Y'
  1304  00FFD5  53                 	db	83	;'S'
  1305  00FFD6  54                 	db	84	;'T'
  1306  00FFD7  45                 	db	69	;'E'
  1307  00FFD8  4D                 	db	77	;'M'
  1308  00FFD9  20                 	db	32
  1309  00FFDA  53                 	db	83	;'S'
  1310  00FFDB  54                 	db	84	;'T'
  1311  00FFDC  41                 	db	65	;'A'
  1312  00FFDD  54                 	db	84	;'T'
  1313  00FFDE  55                 	db	85	;'U'
  1314  00FFDF  53                 	db	83	;'S'
  1315  00FFE0  3A                 	db	58	;':'
  1316  00FFE1  0A                 	db	10
  1317  00FFE2  00                 	db	0
  1318  00FFE3                     STR_4:
  1319  00FFE3  41                 	db	65	;'A'
  1320  00FFE4  75                 	db	117	;'u'
  1321  00FFE5  67                 	db	103	;'g'
  1322  00FFE6  20                 	db	32
  1323  00FFE7  31                 	db	49	;'1'
  1324  00FFE8  31                 	db	49	;'1'
  1325  00FFE9  20                 	db	32
  1326  00FFEA  32                 	db	50	;'2'
  1327  00FFEB  30                 	db	48	;'0'
  1328  00FFEC  31                 	db	49	;'1'
  1329  00FFED  37                 	db	55	;'7'
  1330  00FFEE  00                 	db	0
  1331  00FFEF                     STR_1:
  1332  00FFEF  50                 	db	80	;'P'
  1333  00FFF0  72                 	db	114	;'r'
  1334  00FFF1  69                 	db	105	;'i'
  1335  00FFF2  6E                 	db	110	;'n'
  1336  00FFF3  74                 	db	116	;'t'
  1337  00FFF4  66                 	db	102	;'f'
  1338  00FFF5  00                 	db	0
  1339  00FFF6                     STR_6:
  1340  00FFF6  31                 	db	49	;'1'
  1341  00FFF7  2E                 	db	46
  1342  00FFF8  30                 	db	48	;'0'
  1343  00FFF9  00                 	db	0
  1344  00FFFA                     STR_2:
  1345  00FFFA  25                 	db	37
  1346  00FFFB  63                 	db	99	;'c'
  1347  00FFFC  00                 	db	0
  1348  00FFFD                     STR_5:
  1349  00FFFD  20                 	db	32
  1350  00FFFE  00                 	db	0
  1351  0000                     
  1352                           ; #config settings
  1353  00FFFF  00                 	db	0	; dummy byte at the end
  1354  0000                     
  1355                           	psect	cinit
  1356  012558                     __pcinit:
  1357                           	opt stack 0
  1358  012558                     start_initialization:
  1359                           	opt stack 0
  1360  012558                     __initialization:
  1361                           	opt stack 0
  1362                           
  1363                           ; Initialize objects allocated to BANK1 (12 bytes)
  1364                           ; load TBLPTR registers with __pidataBANK1
  1365  012558  0EC4               	movlw	low __pidataBANK1
  1366  01255A  6EF6               	movwf	tblptrl,c
  1367  01255C  0E41               	movlw	high __pidataBANK1
  1368  01255E  6EF7               	movwf	tblptrh,c
  1369  012560  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1370  012562  6EF8               	movwf	tblptru,c
  1371  012564  EE01  F0F2         	lfsr	0,__pdataBANK1
  1372  012568  EE10 F00C          	lfsr	1,12
  1373  01256C                     copy_data0:
  1374  01256C  0009               	tblrd		*+
  1375  01256E  CFF5 FFEE          	movff	tablat,postinc0
  1376  012572  50E5               	movf	postdec1,w,c
  1377  012574  50E1               	movf	fsr1l,w,c
  1378  012576  E1FA               	bnz	copy_data0
  1379                           
  1380                           ; Initialize objects allocated to BANK0 (15 bytes)
  1381                           ; load TBLPTR registers with __pidataBANK0
  1382  012578  0E7C               	movlw	low __pidataBANK0
  1383  01257A  6EF6               	movwf	tblptrl,c
  1384  01257C  0E41               	movlw	high __pidataBANK0
  1385  01257E  6EF7               	movwf	tblptrh,c
  1386  012580  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1387  012582  6EF8               	movwf	tblptru,c
  1388  012584  EE00  F0F1         	lfsr	0,__pdataBANK0
  1389  012588  EE10 F00F          	lfsr	1,15
  1390  01258C                     copy_data1:
  1391  01258C  0009               	tblrd		*+
  1392  01258E  CFF5 FFEE          	movff	tablat,postinc0
  1393  012592  50E5               	movf	postdec1,w,c
  1394  012594  50E1               	movf	fsr1l,w,c
  1395  012596  E1FA               	bnz	copy_data1
  1396                           
  1397                           ; Initialize objects allocated to COMRAM (3 bytes)
  1398                           ; load TBLPTR registers with __pidataCOMRAM
  1399  012598  0E30               	movlw	low __pidataCOMRAM
  1400  01259A  6EF6               	movwf	tblptrl,c
  1401  01259C  0E42               	movlw	high __pidataCOMRAM
  1402  01259E  6EF7               	movwf	tblptrh,c
  1403  0125A0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1404  0125A2  6EF8               	movwf	tblptru,c
  1405  0125A4  0009               	tblrd		*+	;fetch initializer
  1406  0125A6  CFF5 F04E          	movff	tablat,__pdataCOMRAM
  1407  0125AA  0009               	tblrd		*+	;fetch initializer
  1408  0125AC  CFF5 F04F          	movff	tablat,__pdataCOMRAM+1
  1409  0125B0  0009               	tblrd		*+	;fetch initializer
  1410  0125B2  CFF5 F050          	movff	tablat,__pdataCOMRAM+2
  1411                           
  1412                           ; Clear objects allocated to BIGRAMh (2001 bytes)
  1413  0125B6  EE04  F040         	lfsr	0,__pbssBIGRAMh
  1414  0125BA  EE17 F0D1          	lfsr	1,2001
  1415  0125BE                     clear_0:
  1416  0125BE  6AEE               	clrf	postinc0,c
  1417  0125C0  50E5               	movf	postdec1,w,c
  1418  0125C2  50E1               	movf	fsr1l,w,c
  1419  0125C4  E1FC               	bnz	clear_0
  1420  0125C6  50E2               	movf	fsr1h,w,c
  1421  0125C8  E1FA               	bnz	clear_0
  1422                           
  1423                           ; Clear objects allocated to BIGRAMl (300 bytes)
  1424  0125CA  EE0C  F011         	lfsr	0,__pbssBIGRAMl
  1425  0125CE  EE11 F02C          	lfsr	1,300
  1426  0125D2                     clear_1:
  1427  0125D2  6AEE               	clrf	postinc0,c
  1428  0125D4  50E5               	movf	postdec1,w,c
  1429  0125D6  50E1               	movf	fsr1l,w,c
  1430  0125D8  E1FC               	bnz	clear_1
  1431  0125DA  50E2               	movf	fsr1h,w,c
  1432  0125DC  E1FA               	bnz	clear_1
  1433                           
  1434                           ; Clear objects allocated to BANK3 (198 bytes)
  1435  0125DE  EE03  F000         	lfsr	0,__pbssBANK3
  1436  0125E2  0EC6               	movlw	198
  1437  0125E4                     clear_2:
  1438  0125E4  6AEE               	clrf	postinc0,c
  1439  0125E6  06E8               	decf	wreg,f,c
  1440  0125E8  E1FD               	bnz	clear_2
  1441                           
  1442                           ; Clear objects allocated to BANK2 (232 bytes)
  1443  0125EA  EE02  F000         	lfsr	0,__pbssBANK2
  1444  0125EE  0EE8               	movlw	232
  1445  0125F0                     clear_3:
  1446  0125F0  6AEE               	clrf	postinc0,c
  1447  0125F2  06E8               	decf	wreg,f,c
  1448  0125F4  E1FD               	bnz	clear_3
  1449                           
  1450                           ; Clear objects allocated to BANK1 (242 bytes)
  1451  0125F6  EE01  F000         	lfsr	0,__pbssBANK1
  1452  0125FA  0EF2               	movlw	242
  1453  0125FC                     clear_4:
  1454  0125FC  6AEE               	clrf	postinc0,c
  1455  0125FE  06E8               	decf	wreg,f,c
  1456  012600  E1FD               	bnz	clear_4
  1457                           
  1458                           ; Clear objects allocated to BANK0 (84 bytes)
  1459  012602  EE00  F060         	lfsr	0,__pbssBANK0
  1460  012606  0E54               	movlw	84
  1461  012608                     clear_5:
  1462  012608  6AEE               	clrf	postinc0,c
  1463  01260A  06E8               	decf	wreg,f,c
  1464  01260C  E1FD               	bnz	clear_5
  1465                           
  1466                           ; Clear objects allocated to COMRAM (37 bytes)
  1467  01260E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1468  012612  0E25               	movlw	37
  1469  012614                     clear_6:
  1470  012614  6AEE               	clrf	postinc0,c
  1471  012616  06E8               	decf	wreg,f,c
  1472  012618  E1FD               	bnz	clear_6
  1473  01261A                     end_of_initialization:
  1474                           	opt stack 0
  1475  01261A                     __end_of__initialization:
  1476                           	opt stack 0
  1477  01261A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1478  01261C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1479  01261E  0100               	movlb	0
  1480  012620  EF31  F0A0         	goto	_main	;jump to C main() function
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	bssCOMRAM
  1492  000029                     __pbssCOMRAM:
  1493                           	opt stack 0
  1494  000029                     _inPipes:
  1495                           	opt stack 0
  1496  000029                     	ds	6
  1497  00002F                     _pBDTEntryIn:
  1498                           	opt stack 0
  1499  00002F                     	ds	6
  1500  000035                     _CDCDataOutHandle:
  1501                           	opt stack 0
  1502  000035                     	ds	2
  1503  000037                     _pBDTEntryEP0OutNext:
  1504                           	opt stack 0
  1505  000037                     	ds	2
  1506  000039                     _pBDTEntryEP0OutCurrent:
  1507                           	opt stack 0
  1508  000039                     	ds	2
  1509  00003B                     TetrisBlockRotate@undo:
  1510                           	opt stack 0
  1511  00003B                     	ds	1
  1512  00003C                     OutSeg@a:
  1513                           	opt stack 0
  1514  00003C                     	ds	1
  1515  00003D                     _cdc_tx_len:
  1516                           	opt stack 0
  1517  00003D                     	ds	1
  1518  00003E                     _cdc_trf_state:
  1519                           	opt stack 0
  1520  00003E                     	ds	1
  1521  00003F                     _cdc_rx_len:
  1522                           	opt stack 0
  1523  00003F                     	ds	1
  1524  000040                     _USBDeferOUTDataStagePackets:
  1525                           	opt stack 0
  1526  000040                     	ds	1
  1527  000041                     _USBDeferINDataStagePackets:
  1528                           	opt stack 0
  1529  000041                     	ds	1
  1530  000042                     _USBStatusStageEnabledFlag2:
  1531                           	opt stack 0
  1532  000042                     	ds	1
  1533  000043                     _USBStatusStageEnabledFlag1:
  1534                           	opt stack 0
  1535  000043                     	ds	1
  1536  000044                     _USBDeferStatusStagePacket:
  1537                           	opt stack 0
  1538  000044                     	ds	1
  1539  000045                     _USBStatusStageTimeoutCounter:
  1540                           	opt stack 0
  1541  000045                     	ds	1
  1542  000046                     _endpoint_number:
  1543                           	opt stack 0
  1544  000046                     	ds	1
  1545  000047                     _controlTransferState:
  1546                           	opt stack 0
  1547  000047                     	ds	1
  1548  000048                     _shortPacketStatus:
  1549                           	opt stack 0
  1550  000048                     	ds	1
  1551  000049                     _USBDeviceState:
  1552                           	opt stack 0
  1553  000049                     	ds	1
  1554  00004A                     IMU_WriteReg@r:
  1555                           	opt stack 0
  1556  00004A                     	ds	1
  1557  00004B                     IMU_ReadReg@r:
  1558                           	opt stack 0
  1559  00004B                     	ds	1
  1560  00004C                     _USTATcopy:
  1561                           	opt stack 0
  1562  00004C                     	ds	1
  1563  00004D                     _USBActiveConfiguration:
  1564                           	opt stack 0
  1565  00004D                     	ds	1
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1h	equ	0xFE2
  1574                           fsr1l	equ	0xFE1
  1575                           
  1576                           	psect	dataCOMRAM
  1577  00004E                     __pdataCOMRAM:
  1578                           	opt stack 0
  1579  00004E                     _Bus_State:
  1580                           	opt stack 0
  1581  00004E                     	ds	1
  1582  00004F                     _l:
  1583                           	opt stack 0
  1584  00004F                     	ds	1
  1585  000050                     _w:
  1586                           	opt stack 0
  1587  000050                     	ds	1
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           
  1598                           	psect	bssBANK0
  1599  000060                     __pbssBANK0:
  1600                           	opt stack 0
  1601  000060                     _outPipes:
  1602                           	opt stack 0
  1603  000060                     	ds	9
  1604  000069                     TetrisFieldDraw@lSize:
  1605                           	opt stack 0
  1606  000069                     	ds	4
  1607  00006D                     TetrisFieldDraw@lCorner:
  1608                           	opt stack 0
  1609  00006D                     	ds	4
  1610  000071                     _pCMD:
  1611                           	opt stack 0
  1612  000071                     	ds	4
  1613  000075                     _lQueue:
  1614                           	opt stack 0
  1615  000075                     	ds	3
  1616  000078                     _lStepFunction:
  1617                           	opt stack 0
  1618  000078                     	ds	3
  1619  00007B                     _pShiftVal:
  1620                           	opt stack 0
  1621  00007B                     	ds	2
  1622  00007D                     _val:
  1623                           	opt stack 0
  1624  00007D                     	ds	2
  1625  00007F                     _COUNTER:
  1626                           	opt stack 0
  1627  00007F                     	ds	2
  1628  000081                     _lMotor:
  1629                           	opt stack 0
  1630  000081                     	ds	2
  1631  000083                     _lCurrent:
  1632                           	opt stack 0
  1633  000083                     	ds	2
  1634  000085                     HMI_GRender@a:
  1635                           	opt stack 0
  1636  000085                     	ds	2
  1637  000087                     _gBackcolour:
  1638                           	opt stack 0
  1639  000087                     	ds	2
  1640  000089                     _CDCDataInHandle:
  1641                           	opt stack 0
  1642  000089                     	ds	2
  1643  00008B                     _pDst:
  1644                           	opt stack 0
  1645  00008B                     	ds	2
  1646  00008D                     _k:
  1647                           	opt stack 0
  1648  00008D                     	ds	1
  1649  00008E                     Event_TestButton@j:
  1650                           	opt stack 0
  1651  00008E                     	ds	1
  1652  00008F                     _u:
  1653                           	opt stack 0
  1654  00008F                     	ds	1
  1655  000090                     _j:
  1656                           	opt stack 0
  1657  000090                     	ds	1
  1658  000091                     _i:
  1659                           	opt stack 0
  1660  000091                     	ds	1
  1661  000092                     Timer2_Init@PRE:
  1662                           	opt stack 0
  1663  000092                     	ds	1
  1664  000093                     Timer2_Init@INDEX:
  1665                           	opt stack 0
  1666  000093                     	ds	1
  1667  000094                     Timer0_Init@PRE:
  1668                           	opt stack 0
  1669  000094                     	ds	1
  1670  000095                     _INDEX:
  1671                           	opt stack 0
  1672  000095                     	ds	1
  1673  000096                     _Read:
  1674                           	opt stack 0
  1675  000096                     	ds	1
  1676  000097                     rand@screw:
  1677                           	opt stack 0
  1678  000097                     	ds	1
  1679  000098                     _ADC_Initialised:
  1680                           	opt stack 0
  1681  000098                     	ds	1
  1682  000099                     OutSeg@segset:
  1683                           	opt stack 0
  1684  000099                     	ds	1
  1685  00009A                     OutSeg@cur:
  1686                           	opt stack 0
  1687  00009A                     	ds	1
  1688  00009B                     _lBufferY:
  1689                           	opt stack 0
  1690  00009B                     	ds	1
  1691  00009C                     _lBufferX:
  1692                           	opt stack 0
  1693  00009C                     	ds	1
  1694  00009D                     _clearall:
  1695                           	opt stack 0
  1696  00009D                     	ds	1
  1697  00009E                     _control_signal_bitmap:
  1698                           	opt stack 0
  1699  00009E                     	ds	1
  1700  00009F                     _cdc_mem_type:
  1701                           	opt stack 0
  1702  00009F                     	ds	1
  1703  0000A0                     _USBTicksSinceSuspendEnd:
  1704                           	opt stack 0
  1705  0000A0                     	ds	1
  1706  0000A1                     _BothEP0OutUOWNsSet:
  1707                           	opt stack 0
  1708  0000A1                     	ds	1
  1709  0000A2                     _USBBusIsSuspended:
  1710                           	opt stack 0
  1711  0000A2                     	ds	1
  1712  0000A3                     _RemoteWakeup:
  1713                           	opt stack 0
  1714  0000A3                     	ds	1
  1715  0000A4                     _PortC:
  1716                           	opt stack 0
  1717  0000A4                     	ds	10
  1718  0000AE                     _I2C1T:
  1719                           	opt stack 0
  1720  0000AE                     	ds	6
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1h	equ	0xFE2
  1729                           fsr1l	equ	0xFE1
  1730                           
  1731                           	psect	dataBANK0
  1732  0000F1                     __pdataBANK0:
  1733                           	opt stack 0
  1734  0000F1                     _gCursor:
  1735                           	opt stack 0
  1736  0000F1                     	ds	4
  1737  0000F5                     _DIST:
  1738                           	opt stack 0
  1739  0000F5                     	ds	2
  1740  0000F7                     _Hz:
  1741                           	opt stack 0
  1742  0000F7                     	ds	2
  1743  0000F9                     _gForecolour:
  1744                           	opt stack 0
  1745  0000F9                     	ds	2
  1746  0000FB                     FunctHMI@v:
  1747                           	opt stack 0
  1748  0000FB                     	ds	1
  1749  0000FC                     _change:
  1750                           	opt stack 0
  1751  0000FC                     	ds	1
  1752  0000FD                     	ds	1
  1753  0000FE                     	ds	1
  1754  0000FF                     	ds	1
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1h	equ	0xFE2
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK1
  1766  000100                     __pbssBANK1:
  1767                           	opt stack 0
  1768  000100                     _pBDTEntryOut:
  1769                           	opt stack 0
  1770  000100                     	ds	6
  1771  000106                     Timer2_Init@DIV:
  1772                           	opt stack 0
  1773  000106                     	ds	4
  1774  00010A                     Timer0_Init@DIV:
  1775                           	opt stack 0
  1776  00010A                     	ds	4
  1777  00010E                     _BaudRateGen:
  1778                           	opt stack 0
  1779  00010E                     	ds	4
  1780  000112                     _USB1msTickCount:
  1781                           	opt stack 0
  1782  000112                     	ds	4
  1783  000116                     _gISR:
  1784                           	opt stack 0
  1785  000116                     	ds	3
  1786  000119                     _I2C2_More:
  1787                           	opt stack 0
  1788  000119                     	ds	3
  1789  00011C                     _I2C1_More:
  1790                           	opt stack 0
  1791  00011C                     	ds	3
  1792  00011F                     _I2C2_Done:
  1793                           	opt stack 0
  1794  00011F                     	ds	3
  1795  000122                     _I2C1_Done:
  1796                           	opt stack 0
  1797  000122                     	ds	3
  1798  000125                     _pCDCDst:
  1799                           	opt stack 0
  1800  000125                     	ds	3
  1801  000128                     _pCDCSrc:
  1802                           	opt stack 0
  1803  000128                     	ds	3
  1804  00012B                     _ep_data_out:
  1805                           	opt stack 0
  1806  00012B                     	ds	3
  1807  00012E                     _ep_data_in:
  1808                           	opt stack 0
  1809  00012E                     	ds	3
  1810  000131                     _HzOld:
  1811                           	opt stack 0
  1812  000131                     	ds	2
  1813  000133                     SPI_Send9@dat:
  1814                           	opt stack 0
  1815  000133                     	ds	2
  1816  000135                     _HMIBoard:
  1817                           	opt stack 0
  1818  000135                     	ds	58
  1819  00016F                     _SPI1:
  1820                           	opt stack 0
  1821  00016F                     	ds	11
  1822  00017A                     _SPI2:
  1823                           	opt stack 0
  1824  00017A                     	ds	11
  1825  000185                     _TestButton:
  1826                           	opt stack 0
  1827  000185                     	ds	10
  1828  00018F                     _PortG:
  1829                           	opt stack 0
  1830  00018F                     	ds	10
  1831  000199                     _PortE:
  1832                           	opt stack 0
  1833  000199                     	ds	10
  1834  0001A3                     _PortD:
  1835                           	opt stack 0
  1836  0001A3                     	ds	10
  1837  0001AD                     _PortB:
  1838                           	opt stack 0
  1839  0001AD                     	ds	10
  1840  0001B7                     _PortF:
  1841                           	opt stack 0
  1842  0001B7                     	ds	10
  1843  0001C1                     _line_coding:
  1844                           	opt stack 0
  1845  0001C1                     	ds	7
  1846  0001C8                     _Stepper:
  1847                           	opt stack 0
  1848  0001C8                     	ds	6
  1849  0001CE                     _I2C2T:
  1850                           	opt stack 0
  1851  0001CE                     	ds	6
  1852  0001D4                     _ADC_AN3:
  1853                           	opt stack 0
  1854  0001D4                     	ds	5
  1855  0001D9                     _ADC_AN2:
  1856                           	opt stack 0
  1857  0001D9                     	ds	5
  1858  0001DE                     _ADC_AN1:
  1859                           	opt stack 0
  1860  0001DE                     	ds	5
  1861  0001E3                     _ADC_AN0:
  1862                           	opt stack 0
  1863  0001E3                     	ds	5
  1864  0001E8                     LCD_DrawRectangle@p4:
  1865                           	opt stack 0
  1866  0001E8                     	ds	4
  1867  0001EC                     LCD_DrawRectangle@p2:
  1868                           	opt stack 0
  1869  0001EC                     	ds	4
  1870  0001F0                     _USBAlternateInterface:
  1871                           	opt stack 0
  1872  0001F0                     	ds	2
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1h	equ	0xFE2
  1881                           fsr1l	equ	0xFE1
  1882                           
  1883                           	psect	dataBANK1
  1884  0001F2                     __pdataBANK1:
  1885                           	opt stack 0
  1886  0001F2                     Console_Render@F6956:
  1887                           	opt stack 0
  1888  0001F2                     	ds	4
  1889  0001F6                     _gLineSize:
  1890                           	opt stack 0
  1891  0001F6                     	ds	4
  1892  0001FA                     _gCharSize:
  1893                           	opt stack 0
  1894  0001FA                     	ds	4
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1h	equ	0xFE2
  1903                           fsr1l	equ	0xFE1
  1904                           
  1905                           	psect	bssBANK2
  1906  000200                     __pbssBANK2:
  1907                           	opt stack 0
  1908  000200                     _gTestBlock:
  1909                           	opt stack 0
  1910  000200                     	ds	36
  1911  000224                     _lCBuffer:
  1912                           	opt stack 0
  1913  000224                     	ds	30
  1914  000242                     _cdc_notice:
  1915                           	opt stack 0
  1916  000242                     	ds	10
  1917  00024C                     _cdc_data_rx:
  1918                           	opt stack 0
  1919  00024C                     	ds	64
  1920  00028C                     _cdc_data_tx:
  1921                           	opt stack 0
  1922  00028C                     	ds	64
  1923  0002CC                     _DIPSwitch:
  1924                           	opt stack 0
  1925  0002CC                     	ds	10
  1926  0002D6                     _PortA:
  1927                           	opt stack 0
  1928  0002D6                     	ds	10
  1929  0002E0                     _dummy_encapsulated_cmd_response:
  1930                           	opt stack 0
  1931  0002E0                     	ds	8
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1h	equ	0xFE2
  1940                           fsr1l	equ	0xFE1
  1941                           
  1942                           	psect	bssBANK3
  1943  000300                     __pbssBANK3:
  1944                           	opt stack 0
  1945  000300                     _USBOutputBuffer:
  1946                           	opt stack 0
  1947  000300                     	ds	64
  1948  000340                     Console_MakeField@Fill:
  1949                           	opt stack 0
  1950  000340                     	ds	70
  1951  000386                     _USBInputBuffer:
  1952                           	opt stack 0
  1953  000386                     	ds	64
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           postdec1	equ	0xFE5
  1961                           fsr1h	equ	0xFE2
  1962                           fsr1l	equ	0xFE1
  1963                           
  1964                           	psect	bssBIGRAMh
  1965  000440                     __pbssBIGRAMh:
  1966                           	opt stack 0
  1967  000440                     _gTetrisField:
  1968                           	opt stack 0
  1969  000440                     	ds	2001
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postdec1	equ	0xFE5
  1977                           fsr1h	equ	0xFE2
  1978                           fsr1l	equ	0xFE1
  1979                           
  1980                           	psect	bssBIGRAMl
  1981  000C11                     __pbssBIGRAMl:
  1982                           	opt stack 0
  1983  000C11                     _lBuffer:
  1984                           	opt stack 0
  1985  000C11                     	ds	300
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1h	equ	0xFE2
  1994                           fsr1l	equ	0xFE1
  1995                           
  1996                           	psect	cstackBANK2
  1997  0002E8                     __pcstackBANK2:
  1998                           	opt stack 0
  1999  0002E8                     Port_SetType@Output:
  2000                           	opt stack 0
  2001  0002E8                     Button_Init@pInput:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x0
  2005  0002E8                     	ds	1
  2006  0002E9                     Port_Init@pInput:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x1
  2010  0002E9                     	ds	1
  2011  0002EA                     Button_Init@pThreshold:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x2
  2015  0002EA                     	ds	1
  2016  0002EB                     Port_Init@pPort:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x3
  2020  0002EB                     	ds	1
  2021  0002EC                     ??_Port_Init:
  2022  0002EC                     Button_Init@pInitIO:
  2023                           	opt stack 0
  2024                           
  2025                           ; 3 bytes @ 0x4
  2026  0002EC                     	ds	2
  2027  0002EE                     Port_Init@i:
  2028                           	opt stack 0
  2029                           
  2030                           ; 1 bytes @ 0x6
  2031  0002EE                     	ds	1
  2032  0002EF                     Button_Init@pGetState:
  2033                           	opt stack 0
  2034                           
  2035                           ; 3 bytes @ 0x7
  2036  0002EF                     	ds	3
  2037  0002F2                     Button_Init@pFunction:
  2038                           	opt stack 0
  2039                           
  2040                           ; 3 bytes @ 0xA
  2041  0002F2                     	ds	3
  2042                           tblptru	equ	0xFF8
  2043                           tblptrh	equ	0xFF7
  2044                           tblptrl	equ	0xFF6
  2045                           tablat	equ	0xFF5
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           postdec1	equ	0xFE5
  2049                           fsr1h	equ	0xFE2
  2050                           fsr1l	equ	0xFE1
  2051                           
  2052                           	psect	cstackBANK1
  2053  0001FE                     __pcstackBANK1:
  2054                           	opt stack 0
  2055  0001FE                     ??_Port_SetType:
  2056                           
  2057                           ; 1 bytes @ 0x0
  2058  0001FE                     	ds	2
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           postdec1	equ	0xFE5
  2066                           fsr1h	equ	0xFE2
  2067                           fsr1l	equ	0xFE1
  2068                           
  2069                           	psect	cstackBANK0
  2070  0000B4                     __pcstackBANK0:
  2071                           	opt stack 0
  2072  0000B4                     ??_Console_ClearCursor:
  2073  0000B4                     ??_Console_Init:
  2074  0000B4                     ??_Console_NewLine:
  2075  0000B4                     ??_Console_FormFeed:
  2076  0000B4                     ?_GetPortProperties:
  2077                           	opt stack 0
  2078  0000B4                     ?_GetPortPORT:
  2079                           	opt stack 0
  2080  0000B4                     ?_GetPortTRIS:
  2081                           	opt stack 0
  2082  0000B4                     ?___wmul:
  2083                           	opt stack 0
  2084  0000B4                     ?___awdiv:
  2085                           	opt stack 0
  2086  0000B4                     ?___lwdiv:
  2087                           	opt stack 0
  2088  0000B4                     ?___lldiv:
  2089                           	opt stack 0
  2090  0000B4                     Mode_Set@pMode:
  2091                           	opt stack 0
  2092  0000B4                     ToSegment@pCHR:
  2093                           	opt stack 0
  2094  0000B4                     HMI_SetBar@pValue:
  2095                           	opt stack 0
  2096  0000B4                     Port_GetPin@pInput:
  2097                           	opt stack 0
  2098  0000B4                     SPI_DisableISR@pInput:
  2099                           	opt stack 0
  2100  0000B4                     SPI_DCS@pInput:
  2101                           	opt stack 0
  2102  0000B4                     SPI_Send@pInput:
  2103                           	opt stack 0
  2104  0000B4                     Byte_SetBit@pInput:
  2105                           	opt stack 0
  2106  0000B4                     Byte_GetBit@pInput:
  2107                           	opt stack 0
  2108  0000B4                     Byte_SetZone@pInput:
  2109                           	opt stack 0
  2110  0000B4                     Byte_GetZone@pInput:
  2111                           	opt stack 0
  2112  0000B4                     Byte_SetByte@pInput:
  2113                           	opt stack 0
  2114  0000B4                     delay_ms@ms:
  2115                           	opt stack 0
  2116  0000B4                     delay_us@us:
  2117                           	opt stack 0
  2118  0000B4                     Console_SetForecolour@pColour:
  2119                           	opt stack 0
  2120  0000B4                     ___wmul@multiplier:
  2121                           	opt stack 0
  2122  0000B4                     ___awdiv@dividend:
  2123                           	opt stack 0
  2124  0000B4                     ___lwdiv@dividend:
  2125                           	opt stack 0
  2126  0000B4                     MXK_Queue@pCallback:
  2127                           	opt stack 0
  2128  0000B4                     Timer0_Start@pFunction:
  2129                           	opt stack 0
  2130  0000B4                     ___lldiv@dividend:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x0
  2134  0000B4                     	ds	1
  2135  0000B5                     HMI_SetSegments@pString:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x1
  2139  0000B5                     	ds	1
  2140  0000B6                     GetPortProperties@pInput:
  2141                           	opt stack 0
  2142  0000B6                     GetPortPORT@pInput:
  2143                           	opt stack 0
  2144  0000B6                     GetPortTRIS@pInput:
  2145                           	opt stack 0
  2146  0000B6                     Port_GetPin@pPin:
  2147                           	opt stack 0
  2148  0000B6                     SPI_Send@pData:
  2149                           	opt stack 0
  2150  0000B6                     Byte_SetBit@pBit:
  2151                           	opt stack 0
  2152  0000B6                     Byte_GetBit@pBit:
  2153                           	opt stack 0
  2154  0000B6                     Byte_SetZone@pMax:
  2155                           	opt stack 0
  2156  0000B6                     Byte_GetZone@pMax:
  2157                           	opt stack 0
  2158  0000B6                     Byte_SetByte@pValue:
  2159                           	opt stack 0
  2160  0000B6                     Console_Init@x:
  2161                           	opt stack 0
  2162  0000B6                     Console_FormFeed@x:
  2163                           	opt stack 0
  2164  0000B6                     ___wmul@multiplicand:
  2165                           	opt stack 0
  2166  0000B6                     ___awdiv@divisor:
  2167                           	opt stack 0
  2168  0000B6                     ___lwdiv@divisor:
  2169                           	opt stack 0
  2170  0000B6                     delay_ms@u:
  2171                           	opt stack 0
  2172  0000B6                     delay_us@u:
  2173                           	opt stack 0
  2174                           
  2175                           ; 4 bytes @ 0x2
  2176  0000B6                     	ds	1
  2177  0000B7                     ??_Port_GetPin:
  2178  0000B7                     ??_Byte_GetBit:
  2179  0000B7                     LCD_Write@mode:
  2180                           	opt stack 0
  2181  0000B7                     Byte_SetBit@pValue:
  2182                           	opt stack 0
  2183  0000B7                     Byte_SetZone@pChunk:
  2184                           	opt stack 0
  2185  0000B7                     Byte_GetZone@pChunk:
  2186                           	opt stack 0
  2187  0000B7                     Console_Init@y:
  2188                           	opt stack 0
  2189  0000B7                     Console_FormFeed@y:
  2190                           	opt stack 0
  2191  0000B7                     OutSeg@pSegment:
  2192                           	opt stack 0
  2193  0000B7                     Motor_Move@pMotor:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x3
  2197  0000B7                     	ds	1
  2198  0000B8                     ??_Byte_SetBit:
  2199  0000B8                     ??_Console_IncrementCursor:
  2200  0000B8                     ??_OutSeg:
  2201  0000B8                     LCD_Write@value:
  2202                           	opt stack 0
  2203  0000B8                     Byte_GetBit@Output:
  2204                           	opt stack 0
  2205  0000B8                     Byte_SetZone@pChunkSize:
  2206                           	opt stack 0
  2207  0000B8                     Byte_GetZone@pChunkSize:
  2208                           	opt stack 0
  2209  0000B8                     ___awdiv@counter:
  2210                           	opt stack 0
  2211  0000B8                     ___lwdiv@counter:
  2212                           	opt stack 0
  2213  0000B8                     HMI_SetSegments@in:
  2214                           	opt stack 0
  2215  0000B8                     ___wmul@product:
  2216                           	opt stack 0
  2217  0000B8                     ___lldiv@divisor:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x4
  2221  0000B8                     	ds	1
  2222  0000B9                     ??_Byte_GetZone:
  2223  0000B9                     ?_Console_MakeField:
  2224                           	opt stack 0
  2225  0000B9                     Set_Addr_Window@ys:
  2226                           	opt stack 0
  2227  0000B9                     Set_Rotation@m:
  2228                           	opt stack 0
  2229  0000B9                     Port_GetPin@Output:
  2230                           	opt stack 0
  2231  0000B9                     Byte_SetZone@pValue:
  2232                           	opt stack 0
  2233  0000B9                     ___awdiv@sign:
  2234                           	opt stack 0
  2235  0000B9                     LCD_Word_Write@value:
  2236                           	opt stack 0
  2237  0000B9                     Motor_Move@pDelta:
  2238                           	opt stack 0
  2239  0000B9                     ___lwdiv@quotient:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x5
  2243  0000B9                     	ds	1
  2244  0000BA                     ??_Byte_SetZone:
  2245  0000BA                     Set_Addr_Window@xe:
  2246                           	opt stack 0
  2247  0000BA                     Set_Rotation@rotation:
  2248                           	opt stack 0
  2249  0000BA                     Byte_GetZone@MASK:
  2250                           	opt stack 0
  2251  0000BA                     OutSeg@pInput:
  2252                           	opt stack 0
  2253  0000BA                     MXK_BlockSwitchTo@CUR:
  2254                           	opt stack 0
  2255  0000BA                     MXK_SwitchTo@CUR:
  2256                           	opt stack 0
  2257  0000BA                     ___awdiv@quotient:
  2258                           	opt stack 0
  2259                           
  2260                           ; 2 bytes @ 0x6
  2261  0000BA                     	ds	1
  2262  0000BB                     ??_Console_MakeField:
  2263  0000BB                     ?___lwmod:
  2264                           	opt stack 0
  2265  0000BB                     Set_Addr_Window@ye:
  2266                           	opt stack 0
  2267  0000BB                     Byte_GetZone@Offset:
  2268                           	opt stack 0
  2269  0000BB                     OutSeg@out:
  2270                           	opt stack 0
  2271  0000BB                     MXK_BlockSwitchTo@pModule:
  2272                           	opt stack 0
  2273  0000BB                     MXK_SwitchTo@pModule:
  2274                           	opt stack 0
  2275  0000BB                     ___lwmod@dividend:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x7
  2279  0000BB                     	ds	1
  2280  0000BC                     ??_Console_Tab:
  2281  0000BC                     Set_Addr_Window@xs:
  2282                           	opt stack 0
  2283  0000BC                     Byte_GetZone@Output:
  2284                           	opt stack 0
  2285  0000BC                     HMI_Render@a:
  2286                           	opt stack 0
  2287  0000BC                     ___lldiv@quotient:
  2288                           	opt stack 0
  2289                           
  2290                           ; 4 bytes @ 0x8
  2291  0000BC                     	ds	1
  2292  0000BD                     Byte_SetZone@Offset:
  2293                           	opt stack 0
  2294  0000BD                     LCD_Fill@pColour:
  2295                           	opt stack 0
  2296  0000BD                     LCD_FillRectangle@pColour:
  2297                           	opt stack 0
  2298  0000BD                     Byte_GetPair@pInput:
  2299                           	opt stack 0
  2300  0000BD                     Console_MakeField@Index:
  2301                           	opt stack 0
  2302  0000BD                     ___lwmod@divisor:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x9
  2306  0000BD                     	ds	1
  2307  0000BE                     Byte_SetZone@MASK:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0xA
  2311  0000BE                     	ds	1
  2312  0000BF                     LCD_Fill@i:
  2313                           	opt stack 0
  2314  0000BF                     Byte_GetPair@pPair:
  2315                           	opt stack 0
  2316  0000BF                     Console_MakeField@pInput:
  2317                           	opt stack 0
  2318  0000BF                     ___lwmod@counter:
  2319                           	opt stack 0
  2320  0000BF                     Byte_SetPair@pInput:
  2321                           	opt stack 0
  2322  0000BF                     Byte_SetQuad@pInput:
  2323                           	opt stack 0
  2324  0000BF                     LCD_FillRectangle@pPoint:
  2325                           	opt stack 0
  2326                           
  2327                           ; 4 bytes @ 0xB
  2328  0000BF                     	ds	1
  2329  0000C0                     LCD_Fill@j:
  2330                           	opt stack 0
  2331  0000C0                     ___lldiv@counter:
  2332                           	opt stack 0
  2333  0000C0                     Word_GetPair@pInput:
  2334                           	opt stack 0
  2335  0000C0                     Console_MakeField@Column:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0xC
  2339  0000C0                     	ds	1
  2340  0000C1                     Byte_SetPair@pPair:
  2341                           	opt stack 0
  2342  0000C1                     Byte_SetQuad@pQuad:
  2343                           	opt stack 0
  2344  0000C1                     Console_Tab@t:
  2345                           	opt stack 0
  2346  0000C1                     Timer0_Init@pFrequency:
  2347                           	opt stack 0
  2348  0000C1                     Timer2_Init@pFrequency:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0xD
  2352  0000C1                     	ds	1
  2353  0000C2                     Byte_SetPair@pValue:
  2354                           	opt stack 0
  2355  0000C2                     Byte_SetQuad@pValue:
  2356                           	opt stack 0
  2357  0000C2                     Word_GetPair@pPair:
  2358                           	opt stack 0
  2359  0000C2                     Console_Tab@i:
  2360                           	opt stack 0
  2361  0000C2                     _Console_MakeField$13393:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0xE
  2365  0000C2                     	ds	1
  2366  0000C3                     Console_Tab@c:
  2367                           	opt stack 0
  2368  0000C3                     Port_SetPin@pInput:
  2369                           	opt stack 0
  2370  0000C3                     Port_Set@pInput:
  2371                           	opt stack 0
  2372  0000C3                     SPI_MinSpeed@pInput:
  2373                           	opt stack 0
  2374  0000C3                     SPI_MaxSpeed@pInput:
  2375                           	opt stack 0
  2376  0000C3                     Word_SetPair@pInput:
  2377                           	opt stack 0
  2378  0000C3                     PortProperty_Valid@pInput:
  2379                           	opt stack 0
  2380  0000C3                     LCD_FillRectangle@pSize:
  2381                           	opt stack 0
  2382                           
  2383                           ; 4 bytes @ 0xF
  2384  0000C3                     	ds	1
  2385  0000C4                     ??_Console_PrintChar:
  2386  0000C4                     Console_MakeField@x:
  2387                           	opt stack 0
  2388                           
  2389                           ; 1 bytes @ 0x10
  2390  0000C4                     	ds	1
  2391  0000C5                     ??_Timer2_Init:
  2392  0000C5                     ??_Timer0_Init:
  2393  0000C5                     Port_SetPin@pPin:
  2394                           	opt stack 0
  2395  0000C5                     Port_Set@pValue:
  2396                           	opt stack 0
  2397  0000C5                     Word_SetPair@pPair:
  2398                           	opt stack 0
  2399  0000C5                     PortProperty_Valid@pPinDrive:
  2400                           	opt stack 0
  2401  0000C5                     Console_MakeField@y:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0x11
  2405  0000C5                     	ds	1
  2406  0000C6                     ??_Port_Set:
  2407  0000C6                     Port_SetPin@pValue:
  2408                           	opt stack 0
  2409  0000C6                     Word_SetPair@pValue:
  2410                           	opt stack 0
  2411  0000C6                     PortProperty_Valid@pPin:
  2412                           	opt stack 0
  2413  0000C6                     LCD_DrawField@pField:
  2414                           	opt stack 0
  2415  0000C6                     Timer2_Init@RDIV:
  2416                           	opt stack 0
  2417                           
  2418                           ; 4 bytes @ 0x12
  2419  0000C6                     	ds	1
  2420  0000C7                     ??_PortProperty_Valid:
  2421  0000C7                     ??_LCD_FillRectangle:
  2422  0000C7                     Port_SetPin@Type:
  2423                           	opt stack 0
  2424  0000C7                     Console_PrintChar@pInput:
  2425                           	opt stack 0
  2426  0000C7                     Timer0_Init@pCPUClock:
  2427                           	opt stack 0
  2428                           
  2429                           ; 4 bytes @ 0x13
  2430  0000C7                     	ds	1
  2431  0000C8                     LED_Set@pValue:
  2432                           	opt stack 0
  2433  0000C8                     putch@c:
  2434                           	opt stack 0
  2435  0000C8                     Port_TogglePin@pInput:
  2436                           	opt stack 0
  2437  0000C8                     LCD_DrawField@pPoint:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0x14
  2441  0000C8                     	ds	1
  2442  0000C9                     ?_printf:
  2443                           	opt stack 0
  2444  0000C9                     LCD_FillRectangle@i:
  2445                           	opt stack 0
  2446  0000C9                     LED_Set@pLED:
  2447                           	opt stack 0
  2448  0000C9                     printf@f:
  2449                           	opt stack 0
  2450  0000C9                     PortProperty_Valid@Errors:
  2451                           	opt stack 0
  2452                           
  2453                           ; 16 bytes @ 0x15
  2454  0000C9                     	ds	1
  2455  0000CA                     LCD_FillRectangle@j:
  2456                           	opt stack 0
  2457  0000CA                     Port_TogglePin@pPin:
  2458                           	opt stack 0
  2459  0000CA                     Timer2_Init@pCPUClock:
  2460                           	opt stack 0
  2461                           
  2462                           ; 4 bytes @ 0x16
  2463  0000CA                     	ds	1
  2464  0000CB                     Port_TogglePin@Value:
  2465                           	opt stack 0
  2466  0000CB                     Timer0_Init@DIVIDE:
  2467                           	opt stack 0
  2468                           
  2469                           ; 4 bytes @ 0x17
  2470  0000CB                     	ds	1
  2471  0000CC                     LED_Toggle@pLED:
  2472                           	opt stack 0
  2473  0000CC                     LCD_DrawField@pSize:
  2474                           	opt stack 0
  2475                           
  2476                           ; 4 bytes @ 0x18
  2477  0000CC                     	ds	1
  2478  0000CD                     printf@flag:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x19
  2482  0000CD                     	ds	1
  2483  0000CE                     printf@val:
  2484                           	opt stack 0
  2485  0000CE                     Timer2_Init@DIVIDE:
  2486                           	opt stack 0
  2487                           
  2488                           ; 4 bytes @ 0x1A
  2489  0000CE                     	ds	1
  2490  0000CF                     Motor_Speed@pMotor:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x1B
  2494  0000CF                     	ds	1
  2495  0000D0                     ??_LCD_DrawField:
  2496  0000D0                     printf@prec:
  2497                           	opt stack 0
  2498                           
  2499                           ; 1 bytes @ 0x1C
  2500  0000D0                     	ds	1
  2501  0000D1                     Motor_Speed@pFrequency:
  2502                           	opt stack 0
  2503  0000D1                     printf@ap:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x1D
  2507  0000D1                     	ds	1
  2508  0000D2                     LCD_DrawField@count:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x1E
  2512  0000D2                     	ds	1
  2513  0000D3                     ??_FunctMotor:
  2514  0000D3                     printf@c:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x1F
  2518  0000D3                     	ds	1
  2519  0000D4                     LCD_DrawField@xmax:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x20
  2523  0000D4                     	ds	1
  2524  0000D5                     LCD_DrawField@ymax:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x21
  2528  0000D5                     	ds	1
  2529  0000D6                     LCD_DrawField@i:
  2530                           	opt stack 0
  2531  0000D6                     Port_Set@TypeRequired:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x22
  2535  0000D6                     	ds	1
  2536  0000D7                     ??_Console_Render:
  2537                           
  2538                           ; 1 bytes @ 0x23
  2539  0000D7                     	ds	1
  2540  0000D8                     Port_Set@TypeActual:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x24
  2544  0000D8                     	ds	1
  2545  0000D9                     PortProperty_Valid@Pair:
  2546                           	opt stack 0
  2547  0000D9                     Console_Render@temp:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x25
  2551  0000D9                     	ds	1
  2552  0000DA                     Port_Set@Type:
  2553                           	opt stack 0
  2554  0000DA                     Port_CheckPairType@pInput:
  2555                           	opt stack 0
  2556  0000DA                     Port_SetPinType@pInput:
  2557                           	opt stack 0
  2558  0000DA                     Console_Render@lCursor:
  2559                           	opt stack 0
  2560                           
  2561                           ; 4 bytes @ 0x26
  2562  0000DA                     	ds	2
  2563  0000DC                     Port_CheckPairType@pPair:
  2564                           	opt stack 0
  2565  0000DC                     Port_SetPinType@pPin:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x28
  2569  0000DC                     	ds	1
  2570  0000DD                     Port_CheckPairType@pDrive:
  2571                           	opt stack 0
  2572  0000DD                     Port_SetPinType@pType:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x29
  2576  0000DD                     	ds	1
  2577  0000DE                     Port_CheckPairType@Pin1:
  2578                           	opt stack 0
  2579  0000DE                     Port_SetPinType@Output:
  2580                           	opt stack 0
  2581  0000DE                     Console_Render@x:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x2A
  2585  0000DE                     	ds	1
  2586  0000DF                     Port_CheckPairType@Pin2:
  2587                           	opt stack 0
  2588  0000DF                     Console_Render@y:
  2589                           	opt stack 0
  2590  0000DF                     Port_SetPinType@Props:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x2B
  2594  0000DF                     	ds	1
  2595  0000E0                     Port_CheckPairType@Output:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x2C
  2599  0000E0                     	ds	1
  2600  0000E1                     LED_Init@pLED:
  2601                           	opt stack 0
  2602  0000E1                     Port_CheckPairType@Props:
  2603                           	opt stack 0
  2604  0000E1                     Motor_Init@pMotor:
  2605                           	opt stack 0
  2606  0000E1                     SPI_Init@pClock:
  2607                           	opt stack 0
  2608                           
  2609                           ; 4 bytes @ 0x2D
  2610  0000E1                     	ds	2
  2611  0000E3                     Port_CheckQuadType@pInput:
  2612                           	opt stack 0
  2613  0000E3                     Motor_Init@pAddress:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x2F
  2617  0000E3                     	ds	2
  2618  0000E5                     Port_CheckQuadType@pQuad:
  2619                           	opt stack 0
  2620  0000E5                     SPI_Init@pChannel:
  2621                           	opt stack 0
  2622                           
  2623                           ; 1 bytes @ 0x31
  2624  0000E5                     	ds	1
  2625  0000E6                     Port_CheckQuadType@pDrive:
  2626                           	opt stack 0
  2627  0000E6                     SPI_Init@pMode:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x32
  2631  0000E6                     	ds	1
  2632  0000E7                     Port_CheckQuadType@Pair1:
  2633                           	opt stack 0
  2634  0000E7                     SPI_Init@pInput:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x33
  2638  0000E7                     	ds	1
  2639  0000E8                     Port_CheckQuadType@Pair2:
  2640                           	opt stack 0
  2641                           
  2642                           ; 1 bytes @ 0x34
  2643  0000E8                     	ds	1
  2644  0000E9                     ??_LCD_Init:
  2645  0000E9                     Port_CheckQuadType@Output:
  2646                           	opt stack 0
  2647                           
  2648                           ; 1 bytes @ 0x35
  2649  0000E9                     	ds	1
  2650  0000EA                     Port_CheckPortType@pInput:
  2651                           	opt stack 0
  2652  0000EA                     Port_SetQuadType@pInput:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0x36
  2656  0000EA                     	ds	1
  2657  0000EB                     LCD_Init@i:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x37
  2661  0000EB                     	ds	1
  2662  0000EC                     Port_CheckPortType@pDrive:
  2663                           	opt stack 0
  2664  0000EC                     Port_SetQuadType@pQuad:
  2665                           	opt stack 0
  2666                           
  2667                           ; 1 bytes @ 0x38
  2668  0000EC                     	ds	1
  2669  0000ED                     Port_CheckPortType@Output:
  2670                           	opt stack 0
  2671  0000ED                     Port_SetQuadType@pType:
  2672                           	opt stack 0
  2673                           
  2674                           ; 1 bytes @ 0x39
  2675  0000ED                     	ds	1
  2676  0000EE                     Port_SetQuadType@Output:
  2677                           	opt stack 0
  2678  0000EE                     Port_SetType@pInput:
  2679                           	opt stack 0
  2680                           
  2681                           ; 2 bytes @ 0x3A
  2682  0000EE                     	ds	1
  2683  0000EF                     HMI_Init@in:
  2684                           	opt stack 0
  2685                           
  2686                           ; 2 bytes @ 0x3B
  2687  0000EF                     	ds	1
  2688  0000F0                     Port_SetType@pType:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x3C
  2692  0000F0                     	ds	1
  2693  0000F1                     tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           
  2703                           ; 1 bytes @ 0x3D
  2704                           
  2705                           	psect	cstackCOMRAM
  2706  000001                     __pcstackCOMRAM:
  2707                           	opt stack 0
  2708  000001                     i2Byte_SetBit@pInput:
  2709                           	opt stack 0
  2710  000001                     i2Byte_GetZone@pInput:
  2711                           	opt stack 0
  2712  000001                     i2delay_us@us:
  2713                           	opt stack 0
  2714  000001                     i2MXK_Queue@pCallback:
  2715                           	opt stack 0
  2716                           
  2717                           ; 3 bytes @ 0x0
  2718  000001                     	ds	2
  2719  000003                     i2Byte_SetBit@pBit:
  2720                           	opt stack 0
  2721  000003                     i2Byte_GetZone@pMax:
  2722                           	opt stack 0
  2723  000003                     i2delay_us@u:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x2
  2727  000003                     	ds	1
  2728  000004                     i2Byte_SetBit@pValue:
  2729                           	opt stack 0
  2730  000004                     i2Byte_GetZone@pChunk:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x3
  2734  000004                     	ds	1
  2735  000005                     ??i2_Byte_SetBit:
  2736  000005                     i2Byte_GetZone@pChunkSize:
  2737                           	opt stack 0
  2738                           
  2739                           ; 1 bytes @ 0x4
  2740  000005                     	ds	1
  2741  000006                     ??i2_Byte_GetZone:
  2742                           
  2743                           ; 1 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     i2Byte_GetZone@MASK:
  2746                           	opt stack 0
  2747  000007                     i2MXK_SwitchTo@CUR:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2Byte_GetZone@Offset:
  2753                           	opt stack 0
  2754  000008                     i2MXK_SwitchTo@pModule:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x7
  2758  000008                     	ds	1
  2759  000009                     i2Byte_GetZone@Output:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0x8
  2763  000009                     	ds	1
  2764  00000A                     i2Byte_GetPair@pInput:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0x9
  2768  00000A                     	ds	2
  2769  00000C                     i2Byte_GetPair@pPair:
  2770                           	opt stack 0
  2771                           
  2772                           ; 1 bytes @ 0xB
  2773  00000C                     	ds	1
  2774  00000D                     i2Word_GetPair@pInput:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0xC
  2778  00000D                     	ds	2
  2779  00000F                     i2Word_GetPair@pPair:
  2780                           	opt stack 0
  2781                           
  2782                           ; 1 bytes @ 0xE
  2783  00000F                     	ds	1
  2784  000010                     i2Port_SetPin@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0xF
  2788  000010                     	ds	2
  2789  000012                     i2Port_SetPin@pPin:
  2790                           	opt stack 0
  2791                           
  2792                           ; 1 bytes @ 0x11
  2793  000012                     	ds	1
  2794  000013                     i2Port_SetPin@pValue:
  2795                           	opt stack 0
  2796                           
  2797                           ; 1 bytes @ 0x12
  2798  000013                     	ds	1
  2799  000014                     i2Port_SetPin@Type:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x13
  2803  000014                     	ds	1
  2804  000015                     
  2805                           ; 1 bytes @ 0x14
  2806  000015                     	ds	2
  2807  000017                     ??_ISR_Function:
  2808                           
  2809                           ; 1 bytes @ 0x16
  2810  000017                     	ds	18
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           
  2821 ;;
  2822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2823 ;;
  2824 ;; *************** function _main *****************
  2825 ;; Defined at:
  2826 ;;		line 18 in file "main.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels required when called:   18
  2846 ;; This function calls:
  2847 ;;		_FunctHMI
  2848 ;;		_FunctInitHMI
  2849 ;;		_FunctInitLCD
  2850 ;;		_FunctInitMotor
  2851 ;;		_FunctMotor
  2852 ;;		_ISR_Enable
  2853 ;;		_MXK_Init
  2854 ;; This function is called by:
  2855 ;;		Startup code after reset
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text0
  2860  014062                     __ptext0:
  2861                           	opt stack 0
  2862  014062                     _main:
  2863                           	opt stack 13
  2864                           
  2865                           ;main.c: 22: MXK_Init();
  2866                           
  2867                           ;incstack = 0
  2868  014062  ECEB  F08B         	call	_MXK_Init	;wreg free
  2869                           
  2870                           ;main.c: 33: FunctInitLCD ();
  2871  014066  ECDB  F09F         	call	_FunctInitLCD	;wreg free
  2872                           
  2873                           ;main.c: 36: FunctInitHMI ();
  2874  01406A  ECBB  F09E         	call	_FunctInitHMI	;wreg free
  2875                           
  2876                           ;main.c: 45: FunctInitMotor ();
  2877  01406E  EC0C  F09F         	call	_FunctInitMotor	;wreg free
  2878                           
  2879                           ;main.c: 60: ISR_Enable();
  2880  014072  ECFA  F0A0         	call	_ISR_Enable	;wreg free
  2881  014076                     
  2882                           ;main.c: 62: {
  2883                           ;main.c: 87: FunctHMI();
  2884  014076  ECDA  F091         	call	_FunctHMI	;wreg free
  2885                           
  2886                           ;main.c: 94: FunctMotor();
  2887  01407A  EC36  F094         	call	_FunctMotor	;wreg free
  2888                           
  2889                           ;main.c: 96: }
  2890  01407E  D7FB               	goto	l3013
  2891  014080                     __end_of_main:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1h	equ	0xFE2
  2901                           fsr1l	equ	0xFE1
  2902                           
  2903 ;; *************** function _MXK_Init *****************
  2904 ;; Defined at:
  2905 ;;		line 33 in file "Library/MXK.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:   16
  2926 ;; This function calls:
  2927 ;;		_LED_Init
  2928 ;;		_Port_Init
  2929 ;;		_Port_SetPin
  2930 ;;		_Port_SetPinType
  2931 ;;		_Port_SetQuadType
  2932 ;;		_Port_SetType
  2933 ;;		_delay_ms
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text1
  2940  0117D6                     __ptext1:
  2941                           	opt stack 0
  2942  0117D6                     _MXK_Init:
  2943                           	opt stack 14
  2944                           
  2945                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  2946                           
  2947                           ;incstack = 0
  2948  0117D6  0E01               	movlw	1
  2949  0117D8  6E4E               	movwf	_Bus_State,c
  2950                           
  2951                           ;MXK.c: 36: lQueue = (Function)0;
  2952  0117DA  0E00               	movlw	0
  2953  0117DC  0100               	movlb	0	; () banked
  2954  0117DE  6F75               	movwf	_lQueue& (0+255),b	;volatile
  2955  0117E0  0E00               	movlw	0
  2956  0117E2  0100               	movlb	0	; () banked
  2957  0117E4  6F76               	movwf	(_lQueue+1)& (0+255),b	;volatile
  2958  0117E6  0E00               	movlw	0
  2959  0117E8  0100               	movlb	0	; () banked
  2960  0117EA  6F77               	movwf	(_lQueue+2)& (0+255),b	;volatile
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  2964  0117EC  0ED6               	movlw	low _PortA
  2965  0117EE  0102               	movlb	2	; () banked
  2966  0117F0  6FE9               	movwf	Port_Init@pInput& (0+255),b
  2967  0117F2  0E02               	movlw	high _PortA
  2968  0117F4  0102               	movlb	2	; () banked
  2969  0117F6  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  2970  0117F8  0E00               	movlw	0
  2971  0117FA  0102               	movlb	2	; () banked
  2972  0117FC  6FEB               	movwf	Port_Init@pPort& (0+255),b
  2973  0117FE  EC22  F08B         	call	_Port_Init	;wreg free
  2974                           
  2975                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  2976  011802  0EAD               	movlw	low _PortB
  2977  011804  0102               	movlb	2	; () banked
  2978  011806  6FE9               	movwf	Port_Init@pInput& (0+255),b
  2979  011808  0E01               	movlw	high _PortB
  2980  01180A  0102               	movlb	2	; () banked
  2981  01180C  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  2982  01180E  0E01               	movlw	1
  2983  011810  0102               	movlb	2	; () banked
  2984  011812  6FEB               	movwf	Port_Init@pPort& (0+255),b
  2985  011814  EC22  F08B         	call	_Port_Init	;wreg free
  2986                           
  2987                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  2988  011818  0EA4               	movlw	low _PortC
  2989  01181A  0102               	movlb	2	; () banked
  2990  01181C  6FE9               	movwf	Port_Init@pInput& (0+255),b
  2991  01181E  0E00               	movlw	high _PortC
  2992  011820  0102               	movlb	2	; () banked
  2993  011822  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  2994  011824  0E02               	movlw	2
  2995  011826  0102               	movlb	2	; () banked
  2996  011828  6FEB               	movwf	Port_Init@pPort& (0+255),b
  2997  01182A  EC22  F08B         	call	_Port_Init	;wreg free
  2998                           
  2999                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  3000  01182E  0EA3               	movlw	low _PortD
  3001  011830  0102               	movlb	2	; () banked
  3002  011832  6FE9               	movwf	Port_Init@pInput& (0+255),b
  3003  011834  0E01               	movlw	high _PortD
  3004  011836  0102               	movlb	2	; () banked
  3005  011838  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  3006  01183A  0E03               	movlw	3
  3007  01183C  0102               	movlb	2	; () banked
  3008  01183E  6FEB               	movwf	Port_Init@pPort& (0+255),b
  3009  011840  EC22  F08B         	call	_Port_Init	;wreg free
  3010                           
  3011                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  3012  011844  0E99               	movlw	low _PortE
  3013  011846  0102               	movlb	2	; () banked
  3014  011848  6FE9               	movwf	Port_Init@pInput& (0+255),b
  3015  01184A  0E01               	movlw	high _PortE
  3016  01184C  0102               	movlb	2	; () banked
  3017  01184E  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  3018  011850  0E04               	movlw	4
  3019  011852  0102               	movlb	2	; () banked
  3020  011854  6FEB               	movwf	Port_Init@pPort& (0+255),b
  3021  011856  EC22  F08B         	call	_Port_Init	;wreg free
  3022                           
  3023                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  3024  01185A  0EB7               	movlw	low _PortF
  3025  01185C  0102               	movlb	2	; () banked
  3026  01185E  6FE9               	movwf	Port_Init@pInput& (0+255),b
  3027  011860  0E01               	movlw	high _PortF
  3028  011862  0102               	movlb	2	; () banked
  3029  011864  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  3030  011866  0E05               	movlw	5
  3031  011868  0102               	movlb	2	; () banked
  3032  01186A  6FEB               	movwf	Port_Init@pPort& (0+255),b
  3033  01186C  EC22  F08B         	call	_Port_Init	;wreg free
  3034                           
  3035                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  3036  011870  0E8F               	movlw	low _PortG
  3037  011872  0102               	movlb	2	; () banked
  3038  011874  6FE9               	movwf	Port_Init@pInput& (0+255),b
  3039  011876  0E01               	movlw	high _PortG
  3040  011878  0102               	movlb	2	; () banked
  3041  01187A  6FEA               	movwf	(Port_Init@pInput+1)& (0+255),b
  3042  01187C  0E06               	movlw	6
  3043  01187E  0102               	movlb	2	; () banked
  3044  011880  6FEB               	movwf	Port_Init@pPort& (0+255),b
  3045  011882  EC22  F08B         	call	_Port_Init	;wreg free
  3046                           
  3047                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  3048  011886  0EB7               	movlw	low _PortF
  3049  011888  0100               	movlb	0	; () banked
  3050  01188A  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  3051  01188C  0E01               	movlw	high _PortF
  3052  01188E  0100               	movlb	0	; () banked
  3053  011890  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3054  011892  0E05               	movlw	5
  3055  011894  0100               	movlb	0	; () banked
  3056  011896  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  3057  011898  0E00               	movlw	0
  3058  01189A  0100               	movlb	0	; () banked
  3059  01189C  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3060  01189E  EC73  F089         	call	_Port_SetPinType	;wreg free
  3061                           
  3062                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  3063  0118A2  0EAD               	movlw	low _PortB
  3064  0118A4  0100               	movlb	0	; () banked
  3065  0118A6  6FEA               	movwf	Port_SetQuadType@pInput& (0+255),b
  3066  0118A8  0E01               	movlw	high _PortB
  3067  0118AA  0100               	movlb	0	; () banked
  3068  0118AC  6FEB               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  3069  0118AE  0E00               	movlw	0
  3070  0118B0  0100               	movlb	0	; () banked
  3071  0118B2  6FEC               	movwf	Port_SetQuadType@pQuad& (0+255),b
  3072  0118B4  0E00               	movlw	0
  3073  0118B6  0100               	movlb	0	; () banked
  3074  0118B8  6FED               	movwf	Port_SetQuadType@pType& (0+255),b
  3075  0118BA  EC2E  F085         	call	_Port_SetQuadType	;wreg free
  3076                           
  3077                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  3078  0118BE  0EB7               	movlw	low _PortF
  3079  0118C0  0100               	movlb	0	; () banked
  3080  0118C2  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  3081  0118C4  0E01               	movlw	high _PortF
  3082  0118C6  0100               	movlb	0	; () banked
  3083  0118C8  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3084  0118CA  0E06               	movlw	6
  3085  0118CC  0100               	movlb	0	; () banked
  3086  0118CE  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  3087  0118D0  0E03               	movlw	3
  3088  0118D2  0100               	movlb	0	; () banked
  3089  0118D4  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3090  0118D6  EC73  F089         	call	_Port_SetPinType	;wreg free
  3091                           
  3092                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  3093  0118DA  0E8F               	movlw	low _PortG
  3094  0118DC  0100               	movlb	0	; () banked
  3095  0118DE  6FEE               	movwf	Port_SetType@pInput& (0+255),b
  3096  0118E0  0E01               	movlw	high _PortG
  3097  0118E2  0100               	movlb	0	; () banked
  3098  0118E4  6FEF               	movwf	(Port_SetType@pInput+1)& (0+255),b
  3099  0118E6  0E03               	movlw	3
  3100  0118E8  0100               	movlb	0	; () banked
  3101  0118EA  6FF0               	movwf	Port_SetType@pType& (0+255),b
  3102  0118EC  EC59  F086         	call	_Port_SetType	;wreg free
  3103                           
  3104                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  3105  0118F0  0E8F               	movlw	low _PortG
  3106  0118F2  0100               	movlb	0	; () banked
  3107  0118F4  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  3108  0118F6  0E01               	movlw	high _PortG
  3109  0118F8  0100               	movlb	0	; () banked
  3110  0118FA  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3111  0118FC  0E04               	movlw	4
  3112  0118FE  0100               	movlb	0	; () banked
  3113  011900  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  3114  011902  0E00               	movlw	0
  3115  011904  0100               	movlb	0	; () banked
  3116  011906  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  3117  011908  EC75  F093         	call	_Port_SetPin	;wreg free
  3118                           
  3119                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  3120  01190C  0EB7               	movlw	low _PortF
  3121  01190E  0100               	movlb	0	; () banked
  3122  011910  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  3123  011912  0E01               	movlw	high _PortF
  3124  011914  0100               	movlb	0	; () banked
  3125  011916  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3126  011918  0E06               	movlw	6
  3127  01191A  0100               	movlb	0	; () banked
  3128  01191C  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  3129  01191E  0E01               	movlw	1
  3130  011920  0100               	movlb	0	; () banked
  3131  011922  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  3132  011924  EC75  F093         	call	_Port_SetPin	;wreg free
  3133                           
  3134                           ;MXK.c: 55: LED_Init(eLED1);
  3135  011928  0E00               	movlw	0
  3136  01192A  ECD9  F09B         	call	_LED_Init
  3137                           
  3138                           ;MXK.c: 56: LED_Init(eLED2);
  3139  01192E  0E01               	movlw	1
  3140  011930  ECD9  F09B         	call	_LED_Init
  3141                           
  3142                           ;MXK.c: 58: PIR1 = 0;
  3143  011934  0E00               	movlw	0
  3144  011936  6E9E               	movwf	3998,c	;volatile
  3145                           
  3146                           ;MXK.c: 59: PIR2 = 0;
  3147  011938  0E00               	movlw	0
  3148  01193A  6EA1               	movwf	4001,c	;volatile
  3149                           
  3150                           ;MXK.c: 60: PIR3 = 0;
  3151  01193C  0E00               	movlw	0
  3152  01193E  6EA4               	movwf	4004,c	;volatile
  3153                           
  3154                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  3155  011940  8E9B               	bsf	3995,7,c	;volatile
  3156                           
  3157                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  3158  011942  8C9B               	bsf	3995,6,c	;volatile
  3159                           
  3160                           ;MXK.c: 66: delay_ms(100);
  3161  011944  0E00               	movlw	0
  3162  011946  0100               	movlb	0	; () banked
  3163  011948  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  3164  01194A  0E64               	movlw	100
  3165  01194C  6FB4               	movwf	delay_ms@ms& (0+255),b
  3166  01194E  EC0A  F09B         	call	_delay_ms	;wreg free
  3167                           
  3168                           ;MXK.c: 68: RCONbits.IPEN = 1;
  3169  011952  8ED0               	bsf	4048,7,c	;volatile
  3170  011954  0012               	return		;funcret
  3171  011956                     __end_of_MXK_Init:
  3172                           	opt stack 0
  3173                           tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           postdec1	equ	0xFE5
  3180                           fsr1h	equ	0xFE2
  3181                           fsr1l	equ	0xFE1
  3182                           
  3183 ;; *************** function _Port_Init *****************
  3184 ;; Defined at:
  3185 ;;		line 150 in file "Library/Port.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  pInput          2    1[BANK2 ] const PTR struct Port
  3188 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3189 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3190 ;;  pPort           1    3[BANK2 ] enum E6786
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  i               1    6[BANK2 ] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        6 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:   15
  3209 ;; This function calls:
  3210 ;;		_GetPortPORT
  3211 ;;		_GetPortProperties
  3212 ;;		_GetPortTRIS
  3213 ;;		_Port_Set
  3214 ;;		_Port_SetPinType
  3215 ;;		_Port_SetType
  3216 ;;		_Word_GetPair
  3217 ;; This function is called by:
  3218 ;;		_MXK_Init
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text2
  3223  011644                     __ptext2:
  3224                           	opt stack 0
  3225  011644                     _Port_Init:
  3226                           	opt stack 14
  3227                           
  3228                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  3229                           
  3230                           ;incstack = 0
  3231  011644  0102               	movlb	2	; () banked
  3232  011646  51EB               	movf	Port_Init@pPort& (0+255),w,b
  3233  011648  EC4A  F096         	call	_GetPortProperties
  3234  01164C  C2E9  FFD9         	movff	Port_Init@pInput,fsr2l
  3235  011650  C2EA  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3236  011654  0100               	movlb	0	; () banked
  3237  011656  C0B4  FFDE         	movff	?_GetPortProperties,postinc2
  3238  01165A  0100               	movlb	0	; () banked
  3239  01165C  C0B5  FFDD         	movff	?_GetPortProperties+1,postdec2
  3240                           
  3241                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  3242  011660  0102               	movlb	2	; () banked
  3243  011662  51EB               	movf	Port_Init@pPort& (0+255),w,b
  3244  011664  EC9D  F096         	call	_GetPortPORT
  3245  011668  0102               	movlb	2	; () banked
  3246  01166A  EE20 F006          	lfsr	2,6
  3247  01166E  51E9               	movf	Port_Init@pInput& (0+255),w,b
  3248  011670  26D9               	addwf	fsr2l,f,c
  3249  011672  51EA               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3250  011674  22DA               	addwfc	fsr2h,f,c
  3251  011676  0100               	movlb	0	; () banked
  3252  011678  C0B4  FFDE         	movff	?_GetPortPORT,postinc2
  3253  01167C  0100               	movlb	0	; () banked
  3254  01167E  C0B5  FFDD         	movff	?_GetPortPORT+1,postdec2
  3255                           
  3256                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  3257  011682  0102               	movlb	2	; () banked
  3258  011684  51EB               	movf	Port_Init@pPort& (0+255),w,b
  3259  011686  EC9D  F096         	call	_GetPortPORT
  3260  01168A  0102               	movlb	2	; () banked
  3261  01168C  EE20 F004          	lfsr	2,4
  3262  011690  51E9               	movf	Port_Init@pInput& (0+255),w,b
  3263  011692  26D9               	addwf	fsr2l,f,c
  3264  011694  51EA               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3265  011696  22DA               	addwfc	fsr2h,f,c
  3266  011698  0100               	movlb	0	; () banked
  3267  01169A  C0B4  FFDE         	movff	?_GetPortPORT,postinc2
  3268  01169E  0100               	movlb	0	; () banked
  3269  0116A0  C0B5  FFDD         	movff	?_GetPortPORT+1,postdec2
  3270                           
  3271                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  3272  0116A4  0102               	movlb	2	; () banked
  3273  0116A6  51EB               	movf	Port_Init@pPort& (0+255),w,b
  3274  0116A8  ECF7  F095         	call	_GetPortTRIS
  3275  0116AC  0102               	movlb	2	; () banked
  3276  0116AE  EE20 F002          	lfsr	2,2
  3277  0116B2  51E9               	movf	Port_Init@pInput& (0+255),w,b
  3278  0116B4  26D9               	addwf	fsr2l,f,c
  3279  0116B6  51EA               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3280  0116B8  22DA               	addwfc	fsr2h,f,c
  3281  0116BA  0100               	movlb	0	; () banked
  3282  0116BC  C0B4  FFDE         	movff	?_GetPortTRIS,postinc2
  3283  0116C0  0100               	movlb	0	; () banked
  3284  0116C2  C0B5  FFDD         	movff	?_GetPortTRIS+1,postdec2
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  3288  0116C6  0102               	movlb	2	; () banked
  3289  0116C8  EE20 F004          	lfsr	2,4
  3290  0116CC  51E9               	movf	Port_Init@pInput& (0+255),w,b
  3291  0116CE  26D9               	addwf	fsr2l,f,c
  3292  0116D0  51EA               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3293  0116D2  22DA               	addwfc	fsr2h,f,c
  3294  0116D4  CFDE F2EC          	movff	postinc2,??_Port_Init
  3295  0116D8  CFDD F2ED          	movff	postdec2,??_Port_Init+1
  3296  0116DC  C2EC  FFD9         	movff	??_Port_Init,fsr2l
  3297  0116E0  C2ED  FFDA         	movff	??_Port_Init+1,fsr2h
  3298  0116E4  0E00               	movlw	0
  3299  0116E6  6EDF               	movwf	indf2,c
  3300                           
  3301                           ; BSR set to: 2
  3302                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  3303  0116E8  0102               	movlb	2	; () banked
  3304  0116EA  EE20 F002          	lfsr	2,2
  3305  0116EE  51E9               	movf	Port_Init@pInput& (0+255),w,b
  3306  0116F0  26D9               	addwf	fsr2l,f,c
  3307  0116F2  51EA               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3308  0116F4  22DA               	addwfc	fsr2h,f,c
  3309  0116F6  CFDE F2EC          	movff	postinc2,??_Port_Init
  3310  0116FA  CFDD F2ED          	movff	postdec2,??_Port_Init+1
  3311  0116FE  C2EC  FFD9         	movff	??_Port_Init,fsr2l
  3312  011702  C2ED  FFDA         	movff	??_Port_Init+1,fsr2h
  3313  011706  0EFF               	movlw	255
  3314  011708  6EDF               	movwf	indf2,c
  3315                           
  3316                           ; BSR set to: 2
  3317                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  3318  01170A  C2E9  F0EE         	movff	Port_Init@pInput,Port_SetType@pInput
  3319  01170E  C2EA  F0EF         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  3320  011712  0E00               	movlw	0
  3321  011714  0100               	movlb	0	; () banked
  3322  011716  6FF0               	movwf	Port_SetType@pType& (0+255),b
  3323  011718  EC59  F086         	call	_Port_SetType	;wreg free
  3324                           
  3325                           ;Port.c: 166: UINT8 i;
  3326                           ;Port.c: 167: for (i=0; i<8; i++)
  3327  01171C  0E00               	movlw	0
  3328  01171E  0102               	movlb	2	; () banked
  3329  011720  6FEE               	movwf	Port_Init@i& (0+255),b
  3330  011722                     l16231:
  3331                           
  3332                           ; BSR set to: 2
  3333  011722  0E07               	movlw	7
  3334  011724  0102               	movlb	2	; () banked
  3335  011726  65EE               	cpfsgt	Port_Init@i& (0+255),b
  3336  011728  D031               	goto	l955
  3337  01172A  D04B               	goto	u13030
  3338  01172C                     
  3339                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  3340                           
  3341                           ; BSR set to: 2
  3342  01172C  C2E9  F0DA         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3343  011730  C2EA  F0DB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3344  011734  C2EE  F0DC         	movff	Port_Init@i,Port_SetPinType@pPin
  3345  011738  0E03               	movlw	3
  3346  01173A  0100               	movlb	0	; () banked
  3347  01173C  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3348  01173E  EC73  F089         	call	_Port_SetPinType	;wreg free
  3349                           
  3350                           ;Port.c: 173: break;
  3351  011742  D03C               	goto	l957
  3352  011744                     
  3353                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  3354  011744  C2E9  F0DA         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3355  011748  C2EA  F0DB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3356  01174C  C2EE  F0DC         	movff	Port_Init@i,Port_SetPinType@pPin
  3357  011750  0E02               	movlw	2
  3358  011752  0100               	movlb	0	; () banked
  3359  011754  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3360  011756  EC73  F089         	call	_Port_SetPinType	;wreg free
  3361                           
  3362                           ;Port.c: 176: break;
  3363  01175A  D030               	goto	l957
  3364  01175C                     
  3365                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  3366  01175C  C2E9  F0DA         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3367  011760  C2EA  F0DB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3368  011764  C2EE  F0DC         	movff	Port_Init@i,Port_SetPinType@pPin
  3369  011768  0E01               	movlw	1
  3370  01176A  0100               	movlb	0	; () banked
  3371  01176C  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3372  01176E  EC73  F089         	call	_Port_SetPinType	;wreg free
  3373                           
  3374                           ;Port.c: 179: break;
  3375  011772  D024               	goto	l957
  3376  011774                     
  3377                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  3378  011774  C2E9  F0DA         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3379  011778  C2EA  F0DB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3380  01177C  C2EE  F0DC         	movff	Port_Init@i,Port_SetPinType@pPin
  3381  011780  0E00               	movlw	0
  3382  011782  0100               	movlb	0	; () banked
  3383  011784  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  3384  011786  EC73  F089         	call	_Port_SetPinType	;wreg free
  3385                           
  3386                           ;Port.c: 183: }
  3387                           
  3388                           ;Port.c: 182: break;
  3389  01178A  D018               	goto	l957
  3390  01178C                     l955:
  3391  01178C  C2E9  FFD9         	movff	Port_Init@pInput,fsr2l
  3392  011790  C2EA  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3393  011794  CFDE F0C0          	movff	postinc2,Word_GetPair@pInput
  3394  011798  CFDD F0C1          	movff	postdec2,Word_GetPair@pInput+1
  3395  01179C  C2EE  F0C2         	movff	Port_Init@i,Word_GetPair@pPair
  3396  0117A0  EC41  F09E         	call	_Word_GetPair	;wreg free
  3397                           
  3398                           ; Switch size 1, requested type "space"
  3399                           ; Number of cases is 4, Range of values is 0 to 3
  3400                           ; switch strategies available:
  3401                           ; Name         Instructions Cycles
  3402                           ; simple_byte           13     7 (average)
  3403                           ;	Chosen strategy is simple_byte
  3404  0117A4  0A00               	xorlw	0	; case 0
  3405  0117A6  B4D8               	btfsc	status,2,c
  3406  0117A8  D7C1               	goto	l956
  3407  0117AA  0A01               	xorlw	1	; case 1
  3408  0117AC  B4D8               	btfsc	status,2,c
  3409  0117AE  D7D6               	goto	l959
  3410  0117B0  0A03               	xorlw	3	; case 2
  3411  0117B2  B4D8               	btfsc	status,2,c
  3412  0117B4  D7C7               	goto	l958
  3413  0117B6  0A01               	xorlw	1	; case 3
  3414  0117B8  B4D8               	btfsc	status,2,c
  3415  0117BA  D7DC               	goto	l960
  3416  0117BC                     l957:
  3417  0117BC  0102               	movlb	2	; () banked
  3418  0117BE  2BEE               	incf	Port_Init@i& (0+255),f,b
  3419  0117C0  D7B0               	goto	l16231
  3420  0117C2                     u13030:
  3421                           
  3422                           ; BSR set to: 2
  3423                           ;Port.c: 184: }
  3424                           ;Port.c: 185: Port_Set(pInput, 0x00);
  3425                           
  3426                           ; BSR set to: 2
  3427  0117C2  C2E9  F0C3         	movff	Port_Init@pInput,Port_Set@pInput
  3428  0117C6  C2EA  F0C4         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  3429  0117CA  0E00               	movlw	0
  3430  0117CC  0100               	movlb	0	; () banked
  3431  0117CE  6FC5               	movwf	Port_Set@pValue& (0+255),b
  3432  0117D0  EC0F  F082         	call	_Port_Set	;wreg free
  3433  0117D4  0012               	return		;funcret
  3434  0117D6                     __end_of_Port_Init:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           postinc0	equ	0xFEE
  3441                           wreg	equ	0xFE8
  3442                           postdec1	equ	0xFE5
  3443                           fsr1h	equ	0xFE2
  3444                           fsr1l	equ	0xFE1
  3445                           indf2	equ	0xFDF
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _Port_SetType *****************
  3453 ;; Defined at:
  3454 ;;		line 513 in file "Library/Port.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  3457 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3458 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3459 ;;  pType           1   60[BANK0 ] enum E6795
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  Output          1    0[BANK2 ] enum E6475
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  1    wreg      enum E6475
  3464 ;; Registers used:
  3465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3471 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Totals:         0       3       2       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;Total ram usage:        6 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:   14
  3478 ;; This function calls:
  3479 ;;		_Port_CheckPortType
  3480 ;;		_Word_SetPair
  3481 ;; This function is called by:
  3482 ;;		_Port_Init
  3483 ;;		_MXK_Init
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text3
  3488  010CB2                     __ptext3:
  3489                           	opt stack 0
  3490  010CB2                     _Port_SetType:
  3491                           	opt stack 15
  3492                           
  3493                           ;Port.c: 515: ePinError Output = ePinErrorState;
  3494                           
  3495                           ;incstack = 0
  3496  010CB2  0E05               	movlw	5
  3497  010CB4  0102               	movlb	2	; () banked
  3498  010CB6  6FE8               	movwf	Port_SetType@Output& (0+255),b
  3499                           
  3500                           ;Port.c: 517: switch (pType)
  3501  010CB8  D07A               	goto	l1061
  3502  010CBA                     
  3503                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  3504                           
  3505                           ; BSR set to: 2
  3506  010CBA  0100               	movlb	0	; () banked
  3507  010CBC  EE20 F002          	lfsr	2,2
  3508  010CC0  51EE               	movf	Port_SetType@pInput& (0+255),w,b
  3509  010CC2  26D9               	addwf	fsr2l,f,c
  3510  010CC4  51EF               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3511  010CC6  22DA               	addwfc	fsr2h,f,c
  3512  010CC8  CFDE F1FE          	movff	postinc2,??_Port_SetType
  3513  010CCC  CFDD F1FF          	movff	postdec2,??_Port_SetType+1
  3514  010CD0  C1FE  FFD9         	movff	??_Port_SetType,fsr2l
  3515  010CD4  C1FF  FFDA         	movff	??_Port_SetType+1,fsr2h
  3516  010CD8  0EFF               	movlw	255
  3517  010CDA  D067               	goto	L3
  3518  010CDC                     
  3519                           ; BSR set to: 0
  3520                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  3521                           
  3522                           ; BSR set to: 0
  3523  010CDC  C0EE  F0EA         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3524  010CE0  C0EF  F0EB         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3525  010CE4  0E01               	movlw	1
  3526  010CE6  0100               	movlb	0	; () banked
  3527  010CE8  6FEC               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3528  010CEA  EC33  F09D         	call	_Port_CheckPortType	;wreg free
  3529  010CEE  0102               	movlb	2	; () banked
  3530  010CF0  6FE8               	movwf	Port_SetType@Output& (0+255),b
  3531  010CF2  0102               	movlb	2	; () banked
  3532  010CF4  51E8               	movf	Port_SetType@Output& (0+255),w,b
  3533  010CF6  A4D8               	btfss	status,2,c
  3534  010CF8  0012               	return	
  3535                           
  3536                           ; BSR set to: 2
  3537                           ;Port.c: 527: {
  3538                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  3539  010CFA  0100               	movlb	0	; () banked
  3540  010CFC  EE20 F002          	lfsr	2,2
  3541  010D00  51EE               	movf	Port_SetType@pInput& (0+255),w,b
  3542  010D02  26D9               	addwf	fsr2l,f,c
  3543  010D04  51EF               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3544  010D06  22DA               	addwfc	fsr2h,f,c
  3545  010D08  CFDE F1FE          	movff	postinc2,??_Port_SetType
  3546  010D0C  CFDD F1FF          	movff	postdec2,??_Port_SetType+1
  3547  010D10  C1FE  FFD9         	movff	??_Port_SetType,fsr2l
  3548  010D14  C1FF  FFDA         	movff	??_Port_SetType+1,fsr2h
  3549  010D18  0E00               	movlw	0
  3550  010D1A  6EDF               	movwf	indf2,c
  3551                           
  3552                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  3553  010D1C  0100               	movlb	0	; () banked
  3554  010D1E  EE20 F004          	lfsr	2,4
  3555  010D22  D036               	goto	L8
  3556  010D24                     
  3557                           ; BSR set to: 0
  3558                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  3559                           
  3560                           ; BSR set to: 0
  3561  010D24  C0EE  F0EA         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3562  010D28  C0EF  F0EB         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3563  010D2C  0E02               	movlw	2
  3564  010D2E  0100               	movlb	0	; () banked
  3565  010D30  6FEC               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3566  010D32  EC33  F09D         	call	_Port_CheckPortType	;wreg free
  3567  010D36  0102               	movlb	2	; () banked
  3568  010D38  6FE8               	movwf	Port_SetType@Output& (0+255),b
  3569  010D3A  0102               	movlb	2	; () banked
  3570  010D3C  51E8               	movf	Port_SetType@Output& (0+255),w,b
  3571  010D3E  A4D8               	btfss	status,2,c
  3572  010D40  0012               	return	
  3573                           
  3574                           ; BSR set to: 2
  3575                           ;Port.c: 538: {
  3576                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  3577  010D42  0100               	movlb	0	; () banked
  3578  010D44  EE20 F002          	lfsr	2,2
  3579  010D48  51EE               	movf	Port_SetType@pInput& (0+255),w,b
  3580  010D4A  26D9               	addwf	fsr2l,f,c
  3581  010D4C  51EF               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3582  010D4E  22DA               	addwfc	fsr2h,f,c
  3583  010D50  CFDE F1FE          	movff	postinc2,??_Port_SetType
  3584  010D54  CFDD F1FF          	movff	postdec2,??_Port_SetType+1
  3585  010D58  C1FE  FFD9         	movff	??_Port_SetType,fsr2l
  3586  010D5C  C1FF  FFDA         	movff	??_Port_SetType+1,fsr2h
  3587  010D60  0EFF               	movlw	255
  3588  010D62  6EDF               	movwf	indf2,c
  3589                           
  3590                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  3591  010D64  0100               	movlb	0	; () banked
  3592  010D66  EE20 F004          	lfsr	2,4
  3593  010D6A  D7AA               	goto	L4
  3594  010D6C                     
  3595                           ; BSR set to: 0
  3596                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  3597                           
  3598                           ; BSR set to: 0
  3599  010D6C  C0EE  F0EA         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3600  010D70  C0EF  F0EB         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3601  010D74  0E00               	movlw	0
  3602  010D76  0100               	movlb	0	; () banked
  3603  010D78  6FEC               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3604  010D7A  EC33  F09D         	call	_Port_CheckPortType	;wreg free
  3605  010D7E  0102               	movlb	2	; () banked
  3606  010D80  6FE8               	movwf	Port_SetType@Output& (0+255),b
  3607  010D82  0102               	movlb	2	; () banked
  3608  010D84  51E8               	movf	Port_SetType@Output& (0+255),w,b
  3609  010D86  A4D8               	btfss	status,2,c
  3610  010D88  0012               	return	
  3611                           
  3612                           ; BSR set to: 2
  3613                           ;Port.c: 549: {
  3614                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  3615  010D8A  0100               	movlb	0	; () banked
  3616  010D8C  EE20 F002          	lfsr	2,2
  3617  010D90                     L8:
  3618  010D90  51EE               	movf	Port_SetType@pInput& (0+255),w,b
  3619  010D92  26D9               	addwf	fsr2l,f,c
  3620  010D94  51EF               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3621  010D96  22DA               	addwfc	fsr2h,f,c
  3622  010D98  CFDE F1FE          	movff	postinc2,??_Port_SetType
  3623  010D9C  CFDD F1FF          	movff	postdec2,??_Port_SetType+1
  3624  010DA0  C1FE  FFD9         	movff	??_Port_SetType,fsr2l
  3625  010DA4  C1FF  FFDA         	movff	??_Port_SetType+1,fsr2h
  3626  010DA8  0E00               	movlw	0
  3627  010DAA                     L3:
  3628  010DAA  6EDF               	movwf	indf2,c
  3629                           
  3630                           ;Port.c: 552: }
  3631  010DAC  D00E               	goto	l1063
  3632  010DAE                     l1061:
  3633                           
  3634                           ; BSR set to: 0
  3635  010DAE  0100               	movlb	0	; () banked
  3636  010DB0  51F0               	movf	Port_SetType@pType& (0+255),w,b
  3637                           
  3638                           ; Switch size 1, requested type "space"
  3639                           ; Number of cases is 4, Range of values is 0 to 3
  3640                           ; switch strategies available:
  3641                           ; Name         Instructions Cycles
  3642                           ; simple_byte           13     7 (average)
  3643                           ;	Chosen strategy is simple_byte
  3644  010DB2  0A00               	xorlw	0	; case 0
  3645  010DB4  B4D8               	btfsc	status,2,c
  3646  010DB6  D781               	goto	l1062
  3647  010DB8  0A01               	xorlw	1	; case 1
  3648  010DBA  B4D8               	btfsc	status,2,c
  3649  010DBC  D78F               	goto	l1064
  3650  010DBE  0A03               	xorlw	3	; case 2
  3651  010DC0  B4D8               	btfsc	status,2,c
  3652  010DC2  D7B0               	goto	l1068
  3653  010DC4  0A01               	xorlw	1	; case 3
  3654  010DC6  B4D8               	btfsc	status,2,c
  3655  010DC8  D7D1               	goto	l1071
  3656  010DCA                     l1063:
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  3660                           
  3661                           ; BSR set to: 0
  3662  010DCA  0E08               	movlw	8
  3663  010DCC  0100               	movlb	0	; () banked
  3664  010DCE  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3665  010DD0  0100               	movlb	0	; () banked
  3666  010DD2  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3667  010DD4  0E00               	movlw	0
  3668  010DD6  0100               	movlb	0	; () banked
  3669  010DD8  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3670  010DDA  0100               	movlb	0	; () banked
  3671  010DDC  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3672  010DDE  0E00               	movlw	0
  3673  010DE0  0100               	movlb	0	; () banked
  3674  010DE2  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3675  010DE4  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3676  010DE8  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3677                           
  3678                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  3679  010DEC  0E08               	movlw	8
  3680  010DEE  0100               	movlb	0	; () banked
  3681  010DF0  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3682  010DF2  0100               	movlb	0	; () banked
  3683  010DF4  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3684  010DF6  0E00               	movlw	0
  3685  010DF8  0100               	movlb	0	; () banked
  3686  010DFA  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3687  010DFC  0100               	movlb	0	; () banked
  3688  010DFE  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3689  010E00  0E01               	movlw	1
  3690  010E02  0100               	movlb	0	; () banked
  3691  010E04  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3692  010E06  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3693  010E0A  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3694                           
  3695                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  3696  010E0E  0E08               	movlw	8
  3697  010E10  0100               	movlb	0	; () banked
  3698  010E12  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3699  010E14  0100               	movlb	0	; () banked
  3700  010E16  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3701  010E18  0E00               	movlw	0
  3702  010E1A  0100               	movlb	0	; () banked
  3703  010E1C  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3704  010E1E  0100               	movlb	0	; () banked
  3705  010E20  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3706  010E22  0E02               	movlw	2
  3707  010E24  0100               	movlb	0	; () banked
  3708  010E26  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3709  010E28  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3710  010E2C  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3711                           
  3712                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  3713  010E30  0E08               	movlw	8
  3714  010E32  0100               	movlb	0	; () banked
  3715  010E34  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3716  010E36  0100               	movlb	0	; () banked
  3717  010E38  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3718  010E3A  0E00               	movlw	0
  3719  010E3C  0100               	movlb	0	; () banked
  3720  010E3E  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3721  010E40  0100               	movlb	0	; () banked
  3722  010E42  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3723  010E44  0E03               	movlw	3
  3724  010E46  0100               	movlb	0	; () banked
  3725  010E48  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3726  010E4A  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3727  010E4E  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3728                           
  3729                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  3730  010E52  0E08               	movlw	8
  3731  010E54  0100               	movlb	0	; () banked
  3732  010E56  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3733  010E58  0100               	movlb	0	; () banked
  3734  010E5A  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3735  010E5C  0E00               	movlw	0
  3736  010E5E  0100               	movlb	0	; () banked
  3737  010E60  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3738  010E62  0100               	movlb	0	; () banked
  3739  010E64  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3740  010E66  0E04               	movlw	4
  3741  010E68  0100               	movlb	0	; () banked
  3742  010E6A  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3743  010E6C  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3744  010E70  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3745                           
  3746                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  3747  010E74  0E08               	movlw	8
  3748  010E76  0100               	movlb	0	; () banked
  3749  010E78  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3750  010E7A  0100               	movlb	0	; () banked
  3751  010E7C  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3752  010E7E  0E00               	movlw	0
  3753  010E80  0100               	movlb	0	; () banked
  3754  010E82  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3755  010E84  0100               	movlb	0	; () banked
  3756  010E86  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3757  010E88  0E05               	movlw	5
  3758  010E8A  0100               	movlb	0	; () banked
  3759  010E8C  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3760  010E8E  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3761  010E92  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3762                           
  3763                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  3764  010E96  0E08               	movlw	8
  3765  010E98  0100               	movlb	0	; () banked
  3766  010E9A  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3767  010E9C  0100               	movlb	0	; () banked
  3768  010E9E  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3769  010EA0  0E00               	movlw	0
  3770  010EA2  0100               	movlb	0	; () banked
  3771  010EA4  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3772  010EA6  0100               	movlb	0	; () banked
  3773  010EA8  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3774  010EAA  0E06               	movlw	6
  3775  010EAC  0100               	movlb	0	; () banked
  3776  010EAE  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3777  010EB0  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3778  010EB4  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3779                           
  3780                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  3781  010EB8  0E08               	movlw	8
  3782  010EBA  0100               	movlb	0	; () banked
  3783  010EBC  25EE               	addwf	Port_SetType@pInput& (0+255),w,b
  3784  010EBE  0100               	movlb	0	; () banked
  3785  010EC0  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
  3786  010EC2  0E00               	movlw	0
  3787  010EC4  0100               	movlb	0	; () banked
  3788  010EC6  21EF               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3789  010EC8  0100               	movlb	0	; () banked
  3790  010ECA  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3791  010ECC  0E07               	movlw	7
  3792  010ECE  0100               	movlb	0	; () banked
  3793  010ED0  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
  3794  010ED2  C0F0  F0C6         	movff	Port_SetType@pType,Word_SetPair@pValue
  3795  010ED6  EC9E  F09D         	call	_Word_SetPair	;wreg free
  3796  010EDA  0012               	return	
  3797  010EDC                     __end_of_Port_SetType:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           postdec1	equ	0xFE5
  3806                           fsr1h	equ	0xFE2
  3807                           fsr1l	equ	0xFE1
  3808                           indf2	equ	0xFDF
  3809                           postinc2	equ	0xFDE
  3810                           postdec2	equ	0xFDD
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function _Port_CheckPortType *****************
  3816 ;; Defined at:
  3817 ;;		line 138 in file "Library/Port.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  3820 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3821 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3822 ;;  pDrive          1   56[BANK0 ] enum E6469
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  Output          1   57[BANK0 ] enum E6475
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      enum E6475
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:        4 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:   13
  3841 ;; This function calls:
  3842 ;;		_Port_CheckQuadType
  3843 ;; This function is called by:
  3844 ;;		_Port_SetType
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text4
  3849  013A66                     __ptext4:
  3850                           	opt stack 0
  3851  013A66                     _Port_CheckPortType:
  3852                           	opt stack 15
  3853                           
  3854                           ;Port.c: 140: ePinError Output = ePinErrorState;
  3855                           
  3856                           ;incstack = 0
  3857  013A66  0E05               	movlw	5
  3858  013A68  0100               	movlb	0	; () banked
  3859  013A6A  6FED               	movwf	Port_CheckPortType@Output& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  3863  013A6C  C0EA  F0E3         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3864  013A70  C0EB  F0E4         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3865  013A74  0E00               	movlw	0
  3866  013A76  0100               	movlb	0	; () banked
  3867  013A78  6FE5               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  3868  013A7A  C0EC  F0E6         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3869  013A7E  EC3B  F09C         	call	_Port_CheckQuadType	;wreg free
  3870  013A82  0100               	movlb	0	; () banked
  3871  013A84  6FED               	movwf	Port_CheckPortType@Output& (0+255),b
  3872  013A86  0100               	movlb	0	; () banked
  3873  013A88  51ED               	movf	Port_CheckPortType@Output& (0+255),w,b
  3874  013A8A  A4D8               	btfss	status,2,c
  3875  013A8C  D00D               	goto	l949
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  3879  013A8E  C0EA  F0E3         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3880  013A92  C0EB  F0E4         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3881  013A96  0E01               	movlw	1
  3882  013A98  0100               	movlb	0	; () banked
  3883  013A9A  6FE5               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  3884  013A9C  C0EC  F0E6         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3885  013AA0  EC3B  F09C         	call	_Port_CheckQuadType	;wreg free
  3886  013AA4  0100               	movlb	0	; () banked
  3887  013AA6  6FED               	movwf	Port_CheckPortType@Output& (0+255),b
  3888  013AA8                     l949:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;Port.c: 146: return Output;
  3892                           
  3893                           ; BSR set to: 0
  3894  013AA8  0100               	movlb	0	; () banked
  3895  013AAA  51ED               	movf	Port_CheckPortType@Output& (0+255),w,b
  3896  013AAC  0012               	return	
  3897  013AAE                     __end_of_Port_CheckPortType:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1h	equ	0xFE2
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _Port_Set *****************
  3916 ;; Defined at:
  3917 ;;		line 570 in file "Library/Port.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  3920 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3921 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3922 ;;  pValue          1   17[BANK0 ] unsigned char 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  3925 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  3926 ;;  Type            1   38[BANK0 ] enum E6795
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:       24 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:   10
  3943 ;; This function calls:
  3944 ;;		_Byte_SetByte
  3945 ;;		_Word_GetPair
  3946 ;; This function is called by:
  3947 ;;		_Port_Init
  3948 ;;		_Port_Toggle
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text5
  3953  01041E                     __ptext5:
  3954                           	opt stack 0
  3955  01041E                     _Port_Set:
  3956                           	opt stack 18
  3957                           
  3958                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;incstack = 0
  3962  01041E  0E08               	movlw	8
  3963  010420  0100               	movlb	0	; () banked
  3964  010422  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  3965  010424  0100               	movlb	0	; () banked
  3966  010426  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  3967  010428  0E00               	movlw	0
  3968  01042A  0100               	movlb	0	; () banked
  3969  01042C  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  3970  01042E  0100               	movlb	0	; () banked
  3971  010430  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  3972  010432  0E00               	movlw	0
  3973  010434  0100               	movlb	0	; () banked
  3974  010436  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  3975  010438  EC41  F09E         	call	_Word_GetPair	;wreg free
  3976  01043C  0100               	movlb	0	; () banked
  3977  01043E  6FDA               	movwf	Port_Set@Type& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  3981  010440  0100               	movlb	0	; () banked
  3982  010442  51DA               	movf	Port_Set@Type& (0+255),w,b
  3983  010444  0100               	movlb	0	; () banked
  3984  010446  6FC6               	movwf	??_Port_Set& (0+255),b
  3985  010448  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  3986  01044A  0E0E               	movlw	14
  3987  01044C                     u12225:
  3988  01044C  90D8               	bcf	status,0,c
  3989  01044E  0100               	movlb	0	; () banked
  3990  010450  37C6               	rlcf	??_Port_Set& (0+255),f,b
  3991  010452  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  3992  010454  2EE8               	decfsz	wreg,f,c
  3993  010456  D7FA               	goto	u12225
  3994  010458  0100               	movlb	0	; () banked
  3995  01045A  51DA               	movf	Port_Set@Type& (0+255),w,b
  3996  01045C  0100               	movlb	0	; () banked
  3997  01045E  6FC8               	movwf	(??_Port_Set+2)& (0+255),b
  3998  010460  6BC9               	clrf	(??_Port_Set+3)& (0+255),b
  3999  010462  0E0C               	movlw	12
  4000  010464                     u12235:
  4001  010464  90D8               	bcf	status,0,c
  4002  010466  0100               	movlb	0	; () banked
  4003  010468  37C8               	rlcf	(??_Port_Set+2)& (0+255),f,b
  4004  01046A  37C9               	rlcf	(??_Port_Set+3)& (0+255),f,b
  4005  01046C  2EE8               	decfsz	wreg,f,c
  4006  01046E  D7FA               	goto	u12235
  4007  010470  0100               	movlb	0	; () banked
  4008  010472  51DA               	movf	Port_Set@Type& (0+255),w,b
  4009  010474  0100               	movlb	0	; () banked
  4010  010476  6FCA               	movwf	(??_Port_Set+4)& (0+255),b
  4011  010478  6BCB               	clrf	(??_Port_Set+5)& (0+255),b
  4012  01047A  0E0A               	movlw	10
  4013  01047C                     u12245:
  4014  01047C  90D8               	bcf	status,0,c
  4015  01047E  0100               	movlb	0	; () banked
  4016  010480  37CA               	rlcf	(??_Port_Set+4)& (0+255),f,b
  4017  010482  37CB               	rlcf	(??_Port_Set+5)& (0+255),f,b
  4018  010484  2EE8               	decfsz	wreg,f,c
  4019  010486  D7FA               	goto	u12245
  4020  010488  0100               	movlb	0	; () banked
  4021  01048A  51DA               	movf	Port_Set@Type& (0+255),w,b
  4022  01048C  0100               	movlb	0	; () banked
  4023  01048E  6FCD               	movwf	(??_Port_Set+7)& (0+255),b
  4024  010490  6BCC               	clrf	(??_Port_Set+6)& (0+255),b
  4025  010492  0100               	movlb	0	; () banked
  4026  010494  51DA               	movf	Port_Set@Type& (0+255),w,b
  4027  010496  0100               	movlb	0	; () banked
  4028  010498  6FCE               	movwf	(??_Port_Set+8)& (0+255),b
  4029  01049A  6BCF               	clrf	(??_Port_Set+9)& (0+255),b
  4030  01049C  0E06               	movlw	6
  4031  01049E                     u12255:
  4032  01049E  90D8               	bcf	status,0,c
  4033  0104A0  0100               	movlb	0	; () banked
  4034  0104A2  37CE               	rlcf	(??_Port_Set+8)& (0+255),f,b
  4035  0104A4  37CF               	rlcf	(??_Port_Set+9)& (0+255),f,b
  4036  0104A6  2EE8               	decfsz	wreg,f,c
  4037  0104A8  D7FA               	goto	u12255
  4038  0104AA  0100               	movlb	0	; () banked
  4039  0104AC  51DA               	movf	Port_Set@Type& (0+255),w,b
  4040  0104AE  0100               	movlb	0	; () banked
  4041  0104B0  6FD0               	movwf	(??_Port_Set+10)& (0+255),b
  4042  0104B2  6BD1               	clrf	(??_Port_Set+11)& (0+255),b
  4043  0104B4  0100               	movlb	0	; () banked
  4044  0104B6  3BD0               	swapf	(??_Port_Set+10)& (0+255),f,b
  4045  0104B8  3BD1               	swapf	(??_Port_Set+11)& (0+255),f,b
  4046  0104BA  0EF0               	movlw	240
  4047  0104BC  17D1               	andwf	(??_Port_Set+11)& (0+255),f,b
  4048  0104BE  51D0               	movf	(??_Port_Set+10)& (0+255),w,b
  4049  0104C0  0B0F               	andlw	15
  4050  0104C2  13D1               	iorwf	(??_Port_Set+11)& (0+255),f,b
  4051  0104C4  0EF0               	movlw	240
  4052  0104C6  17D0               	andwf	(??_Port_Set+10)& (0+255),f,b
  4053  0104C8  0100               	movlb	0	; () banked
  4054  0104CA  51DA               	movf	Port_Set@Type& (0+255),w,b
  4055  0104CC  0100               	movlb	0	; () banked
  4056  0104CE  6FD2               	movwf	(??_Port_Set+12)& (0+255),b
  4057  0104D0  6BD3               	clrf	(??_Port_Set+13)& (0+255),b
  4058  0104D2  0100               	movlb	0	; () banked
  4059  0104D4  90D8               	bcf	status,0,c
  4060  0104D6  37D2               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4061  0104D8  37D3               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4062  0104DA  0100               	movlb	0	; () banked
  4063  0104DC  90D8               	bcf	status,0,c
  4064  0104DE  37D2               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4065  0104E0  37D3               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4066  0104E2  0100               	movlb	0	; () banked
  4067  0104E4  51DA               	movf	Port_Set@Type& (0+255),w,b
  4068  0104E6  0100               	movlb	0	; () banked
  4069  0104E8  6FD4               	movwf	(??_Port_Set+14)& (0+255),b
  4070  0104EA  6BD5               	clrf	(??_Port_Set+15)& (0+255),b
  4071  0104EC  0100               	movlb	0	; () banked
  4072  0104EE  51D2               	movf	(??_Port_Set+12)& (0+255),w,b
  4073  0104F0  0100               	movlb	0	; () banked
  4074  0104F2  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4075  0104F4  0100               	movlb	0	; () banked
  4076  0104F6  51D3               	movf	(??_Port_Set+13)& (0+255),w,b
  4077  0104F8  0100               	movlb	0	; () banked
  4078  0104FA  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4079  0104FC  0100               	movlb	0	; () banked
  4080  0104FE  51D0               	movf	(??_Port_Set+10)& (0+255),w,b
  4081  010500  0100               	movlb	0	; () banked
  4082  010502  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4083  010504  0100               	movlb	0	; () banked
  4084  010506  51D1               	movf	(??_Port_Set+11)& (0+255),w,b
  4085  010508  0100               	movlb	0	; () banked
  4086  01050A  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4087  01050C  0100               	movlb	0	; () banked
  4088  01050E  51CE               	movf	(??_Port_Set+8)& (0+255),w,b
  4089  010510  0100               	movlb	0	; () banked
  4090  010512  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4091  010514  0100               	movlb	0	; () banked
  4092  010516  51CF               	movf	(??_Port_Set+9)& (0+255),w,b
  4093  010518  0100               	movlb	0	; () banked
  4094  01051A  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4095  01051C  0100               	movlb	0	; () banked
  4096  01051E  51CC               	movf	(??_Port_Set+6)& (0+255),w,b
  4097  010520  0100               	movlb	0	; () banked
  4098  010522  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4099  010524  0100               	movlb	0	; () banked
  4100  010526  51CD               	movf	(??_Port_Set+7)& (0+255),w,b
  4101  010528  0100               	movlb	0	; () banked
  4102  01052A  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4103  01052C  0100               	movlb	0	; () banked
  4104  01052E  51CA               	movf	(??_Port_Set+4)& (0+255),w,b
  4105  010530  0100               	movlb	0	; () banked
  4106  010532  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4107  010534  0100               	movlb	0	; () banked
  4108  010536  51CB               	movf	(??_Port_Set+5)& (0+255),w,b
  4109  010538  0100               	movlb	0	; () banked
  4110  01053A  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4111  01053C  0100               	movlb	0	; () banked
  4112  01053E  51C8               	movf	(??_Port_Set+2)& (0+255),w,b
  4113  010540  0100               	movlb	0	; () banked
  4114  010542  13D4               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4115  010544  0100               	movlb	0	; () banked
  4116  010546  51C9               	movf	(??_Port_Set+3)& (0+255),w,b
  4117  010548  0100               	movlb	0	; () banked
  4118  01054A  13D5               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4119  01054C  0100               	movlb	0	; () banked
  4120  01054E  51C6               	movf	??_Port_Set& (0+255),w,b
  4121  010550  0100               	movlb	0	; () banked
  4122  010552  11D4               	iorwf	(??_Port_Set+14)& (0+255),w,b
  4123  010554  0100               	movlb	0	; () banked
  4124  010556  6FD6               	movwf	Port_Set@TypeRequired& (0+255),b
  4125  010558  0100               	movlb	0	; () banked
  4126  01055A  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4127  01055C  0100               	movlb	0	; () banked
  4128  01055E  11D5               	iorwf	(??_Port_Set+15)& (0+255),w,b
  4129  010560  0100               	movlb	0	; () banked
  4130  010562  6FD7               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;Port.c: 574: UINT16 TypeActual = Type;
  4134  010564  C0DA  F0D8         	movff	Port_Set@Type,Port_Set@TypeActual
  4135  010568  0100               	movlb	0	; () banked
  4136  01056A  6BD9               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1u) << 2u;
  4140  01056C  0E08               	movlw	8
  4141  01056E  0100               	movlb	0	; () banked
  4142  010570  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4143  010572  0100               	movlb	0	; () banked
  4144  010574  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4145  010576  0E00               	movlw	0
  4146  010578  0100               	movlb	0	; () banked
  4147  01057A  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4148  01057C  0100               	movlb	0	; () banked
  4149  01057E  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4150  010580  0E01               	movlw	1
  4151  010582  0100               	movlb	0	; () banked
  4152  010584  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4153  010586  EC41  F09E         	call	_Word_GetPair	;wreg free
  4154  01058A  0100               	movlb	0	; () banked
  4155  01058C  6FC6               	movwf	??_Port_Set& (0+255),b
  4156  01058E  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4157  010590  0100               	movlb	0	; () banked
  4158  010592  90D8               	bcf	status,0,c
  4159  010594  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4160  010596  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4161  010598  0100               	movlb	0	; () banked
  4162  01059A  90D8               	bcf	status,0,c
  4163  01059C  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4164  01059E  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4165  0105A0  0100               	movlb	0	; () banked
  4166  0105A2  51C6               	movf	??_Port_Set& (0+255),w,b
  4167  0105A4  0100               	movlb	0	; () banked
  4168  0105A6  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4169  0105A8  0100               	movlb	0	; () banked
  4170  0105AA  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4171  0105AC  0100               	movlb	0	; () banked
  4172  0105AE  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2u) << 4u;
  4176  0105B0  0E08               	movlw	8
  4177  0105B2  0100               	movlb	0	; () banked
  4178  0105B4  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4179  0105B6  0100               	movlb	0	; () banked
  4180  0105B8  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4181  0105BA  0E00               	movlw	0
  4182  0105BC  0100               	movlb	0	; () banked
  4183  0105BE  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4184  0105C0  0100               	movlb	0	; () banked
  4185  0105C2  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4186  0105C4  0E02               	movlw	2
  4187  0105C6  0100               	movlb	0	; () banked
  4188  0105C8  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4189  0105CA  EC41  F09E         	call	_Word_GetPair	;wreg free
  4190  0105CE  0100               	movlb	0	; () banked
  4191  0105D0  6FC6               	movwf	??_Port_Set& (0+255),b
  4192  0105D2  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4193  0105D4  0100               	movlb	0	; () banked
  4194  0105D6  3BC6               	swapf	??_Port_Set& (0+255),f,b
  4195  0105D8  3BC7               	swapf	(??_Port_Set+1)& (0+255),f,b
  4196  0105DA  0EF0               	movlw	240
  4197  0105DC  17C7               	andwf	(??_Port_Set+1)& (0+255),f,b
  4198  0105DE  51C6               	movf	??_Port_Set& (0+255),w,b
  4199  0105E0  0B0F               	andlw	15
  4200  0105E2  13C7               	iorwf	(??_Port_Set+1)& (0+255),f,b
  4201  0105E4  0EF0               	movlw	240
  4202  0105E6  17C6               	andwf	??_Port_Set& (0+255),f,b
  4203  0105E8  0100               	movlb	0	; () banked
  4204  0105EA  51C6               	movf	??_Port_Set& (0+255),w,b
  4205  0105EC  0100               	movlb	0	; () banked
  4206  0105EE  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4207  0105F0  0100               	movlb	0	; () banked
  4208  0105F2  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4209  0105F4  0100               	movlb	0	; () banked
  4210  0105F6  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3u) << 6u;
  4214  0105F8  0E08               	movlw	8
  4215  0105FA  0100               	movlb	0	; () banked
  4216  0105FC  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4217  0105FE  0100               	movlb	0	; () banked
  4218  010600  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4219  010602  0E00               	movlw	0
  4220  010604  0100               	movlb	0	; () banked
  4221  010606  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4222  010608  0100               	movlb	0	; () banked
  4223  01060A  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4224  01060C  0E03               	movlw	3
  4225  01060E  0100               	movlb	0	; () banked
  4226  010610  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4227  010612  EC41  F09E         	call	_Word_GetPair	;wreg free
  4228  010616  0100               	movlb	0	; () banked
  4229  010618  6FC6               	movwf	??_Port_Set& (0+255),b
  4230  01061A  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4231  01061C  0E06               	movlw	6
  4232  01061E                     u12265:
  4233  01061E  90D8               	bcf	status,0,c
  4234  010620  0100               	movlb	0	; () banked
  4235  010622  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4236  010624  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4237  010626  2EE8               	decfsz	wreg,f,c
  4238  010628  D7FA               	goto	u12265
  4239  01062A  0100               	movlb	0	; () banked
  4240  01062C  51C6               	movf	??_Port_Set& (0+255),w,b
  4241  01062E  0100               	movlb	0	; () banked
  4242  010630  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4243  010632  0100               	movlb	0	; () banked
  4244  010634  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4245  010636  0100               	movlb	0	; () banked
  4246  010638  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4u) << 8u;
  4250  01063A  0E08               	movlw	8
  4251  01063C  0100               	movlb	0	; () banked
  4252  01063E  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4253  010640  0100               	movlb	0	; () banked
  4254  010642  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4255  010644  0E00               	movlw	0
  4256  010646  0100               	movlb	0	; () banked
  4257  010648  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4258  01064A  0100               	movlb	0	; () banked
  4259  01064C  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4260  01064E  0E04               	movlw	4
  4261  010650  0100               	movlb	0	; () banked
  4262  010652  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4263  010654  EC41  F09E         	call	_Word_GetPair	;wreg free
  4264  010658  0100               	movlb	0	; () banked
  4265  01065A  6FC6               	movwf	??_Port_Set& (0+255),b
  4266  01065C  0100               	movlb	0	; () banked
  4267  01065E  51C6               	movf	??_Port_Set& (0+255),w,b
  4268  010660  0100               	movlb	0	; () banked
  4269  010662  6FC8               	movwf	(??_Port_Set+2)& (0+255),b
  4270  010664  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4271  010666  0100               	movlb	0	; () banked
  4272  010668  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4273  01066A  0100               	movlb	0	; () banked
  4274  01066C  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4275  01066E  0100               	movlb	0	; () banked
  4276  010670  51C8               	movf	(??_Port_Set+2)& (0+255),w,b
  4277  010672  0100               	movlb	0	; () banked
  4278  010674  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5u) << 10u;
  4282  010676  0E08               	movlw	8
  4283  010678  0100               	movlb	0	; () banked
  4284  01067A  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4285  01067C  0100               	movlb	0	; () banked
  4286  01067E  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4287  010680  0E00               	movlw	0
  4288  010682  0100               	movlb	0	; () banked
  4289  010684  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4290  010686  0100               	movlb	0	; () banked
  4291  010688  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4292  01068A  0E05               	movlw	5
  4293  01068C  0100               	movlb	0	; () banked
  4294  01068E  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4295  010690  EC41  F09E         	call	_Word_GetPair	;wreg free
  4296  010694  0100               	movlb	0	; () banked
  4297  010696  6FC6               	movwf	??_Port_Set& (0+255),b
  4298  010698  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4299  01069A  0E0A               	movlw	10
  4300  01069C                     u12275:
  4301  01069C  90D8               	bcf	status,0,c
  4302  01069E  0100               	movlb	0	; () banked
  4303  0106A0  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4304  0106A2  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4305  0106A4  2EE8               	decfsz	wreg,f,c
  4306  0106A6  D7FA               	goto	u12275
  4307  0106A8  0100               	movlb	0	; () banked
  4308  0106AA  51C6               	movf	??_Port_Set& (0+255),w,b
  4309  0106AC  0100               	movlb	0	; () banked
  4310  0106AE  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4311  0106B0  0100               	movlb	0	; () banked
  4312  0106B2  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4313  0106B4  0100               	movlb	0	; () banked
  4314  0106B6  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6u) << 12u;
  4318  0106B8  0E08               	movlw	8
  4319  0106BA  0100               	movlb	0	; () banked
  4320  0106BC  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4321  0106BE  0100               	movlb	0	; () banked
  4322  0106C0  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4323  0106C2  0E00               	movlw	0
  4324  0106C4  0100               	movlb	0	; () banked
  4325  0106C6  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4326  0106C8  0100               	movlb	0	; () banked
  4327  0106CA  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4328  0106CC  0E06               	movlw	6
  4329  0106CE  0100               	movlb	0	; () banked
  4330  0106D0  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4331  0106D2  EC41  F09E         	call	_Word_GetPair	;wreg free
  4332  0106D6  0100               	movlb	0	; () banked
  4333  0106D8  6FC6               	movwf	??_Port_Set& (0+255),b
  4334  0106DA  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4335  0106DC  0E0C               	movlw	12
  4336  0106DE                     u12285:
  4337  0106DE  90D8               	bcf	status,0,c
  4338  0106E0  0100               	movlb	0	; () banked
  4339  0106E2  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4340  0106E4  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4341  0106E6  2EE8               	decfsz	wreg,f,c
  4342  0106E8  D7FA               	goto	u12285
  4343  0106EA  0100               	movlb	0	; () banked
  4344  0106EC  51C6               	movf	??_Port_Set& (0+255),w,b
  4345  0106EE  0100               	movlb	0	; () banked
  4346  0106F0  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4347  0106F2  0100               	movlb	0	; () banked
  4348  0106F4  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4349  0106F6  0100               	movlb	0	; () banked
  4350  0106F8  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7u) << 14u;
  4354  0106FA  0E08               	movlw	8
  4355  0106FC  0100               	movlb	0	; () banked
  4356  0106FE  25C3               	addwf	Port_Set@pInput& (0+255),w,b
  4357  010700  0100               	movlb	0	; () banked
  4358  010702  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
  4359  010704  0E00               	movlw	0
  4360  010706  0100               	movlb	0	; () banked
  4361  010708  21C4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4362  01070A  0100               	movlb	0	; () banked
  4363  01070C  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4364  01070E  0E07               	movlw	7
  4365  010710  0100               	movlb	0	; () banked
  4366  010712  6FC2               	movwf	Word_GetPair@pPair& (0+255),b
  4367  010714  EC41  F09E         	call	_Word_GetPair	;wreg free
  4368  010718  0100               	movlb	0	; () banked
  4369  01071A  6FC6               	movwf	??_Port_Set& (0+255),b
  4370  01071C  6BC7               	clrf	(??_Port_Set+1)& (0+255),b
  4371  01071E  0E0E               	movlw	14
  4372  010720                     u12295:
  4373  010720  90D8               	bcf	status,0,c
  4374  010722  0100               	movlb	0	; () banked
  4375  010724  37C6               	rlcf	??_Port_Set& (0+255),f,b
  4376  010726  37C7               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4377  010728  2EE8               	decfsz	wreg,f,c
  4378  01072A  D7FA               	goto	u12295
  4379  01072C  0100               	movlb	0	; () banked
  4380  01072E  51C6               	movf	??_Port_Set& (0+255),w,b
  4381  010730  0100               	movlb	0	; () banked
  4382  010732  13D8               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4383  010734  0100               	movlb	0	; () banked
  4384  010736  51C7               	movf	(??_Port_Set+1)& (0+255),w,b
  4385  010738  0100               	movlb	0	; () banked
  4386  01073A  13D9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4387                           
  4388                           ;Port.c: 584: if (TypeRequired == TypeActual)
  4389  01073C  0100               	movlb	0	; () banked
  4390  01073E  51D8               	movf	Port_Set@TypeActual& (0+255),w,b
  4391  010740  0100               	movlb	0	; () banked
  4392  010742  19D6               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  4393  010744  E148               	bnz	l1080
  4394  010746  0100               	movlb	0	; () banked
  4395  010748  51D9               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  4396  01074A  0100               	movlb	0	; () banked
  4397  01074C  19D7               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  4398  01074E  A4D8               	btfss	status,2,c
  4399  010750  0012               	return	
  4400  010752  D032               	goto	l1078
  4401  010754                     
  4402                           ; BSR set to: 0
  4403                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  4404                           
  4405                           ; BSR set to: 0
  4406  010754  0100               	movlb	0	; () banked
  4407  010756  EE20 F002          	lfsr	2,2
  4408  01075A  51C3               	movf	Port_Set@pInput& (0+255),w,b
  4409  01075C  26D9               	addwf	fsr2l,f,c
  4410  01075E  51C4               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4411  010760  22DA               	addwfc	fsr2h,f,c
  4412  010762  CFDE F0B4          	movff	postinc2,Byte_SetByte@pInput
  4413  010766  CFDD F0B5          	movff	postdec2,Byte_SetByte@pInput+1
  4414  01076A  C0C5  F0B6         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4415  01076E  ECC6  F0A0         	call	_Byte_SetByte	;wreg free
  4416                           
  4417                           ;Port.c: 594: break;
  4418  010772  0012               	return	
  4419  010774                     
  4420                           ;Port.c: 597: pValue = ~pValue;
  4421  010774  0100               	movlb	0	; () banked
  4422  010776  1FC5               	comf	Port_Set@pValue& (0+255),f,b
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  4426  010778  0100               	movlb	0	; () banked
  4427  01077A  EE20 F002          	lfsr	2,2
  4428  01077E  51C3               	movf	Port_Set@pInput& (0+255),w,b
  4429  010780  26D9               	addwf	fsr2l,f,c
  4430  010782  51C4               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4431  010784  22DA               	addwfc	fsr2h,f,c
  4432  010786  CFDE F0B4          	movff	postinc2,Byte_SetByte@pInput
  4433  01078A  CFDD F0B5          	movff	postdec2,Byte_SetByte@pInput+1
  4434  01078E  C0C5  F0B6         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4435  010792  ECC6  F0A0         	call	_Byte_SetByte	;wreg free
  4436                           
  4437                           ;Port.c: 599: break;
  4438  010796  0012               	return	
  4439  010798                     
  4440                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  4441  010798  0100               	movlb	0	; () banked
  4442  01079A  EE20 F004          	lfsr	2,4
  4443  01079E  51C3               	movf	Port_Set@pInput& (0+255),w,b
  4444  0107A0  26D9               	addwf	fsr2l,f,c
  4445  0107A2  51C4               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4446  0107A4  22DA               	addwfc	fsr2h,f,c
  4447  0107A6  CFDE F0B4          	movff	postinc2,Byte_SetByte@pInput
  4448  0107AA  CFDD F0B5          	movff	postdec2,Byte_SetByte@pInput+1
  4449  0107AE  C0C5  F0B6         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4450  0107B2  ECC6  F0A0         	call	_Byte_SetByte	;wreg free
  4451                           
  4452                           ;Port.c: 606: }
  4453                           
  4454                           ;Port.c: 605: break;
  4455                           
  4456                           ;Port.c: 604: default:
  4457                           
  4458                           ;Port.c: 603: break;
  4459  0107B6  0012               	return	
  4460  0107B8                     l1078:
  4461  0107B8  0100               	movlb	0	; () banked
  4462  0107BA  51DA               	movf	Port_Set@Type& (0+255),w,b
  4463                           
  4464                           ; Switch size 1, requested type "space"
  4465                           ; Number of cases is 4, Range of values is 0 to 3
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte           13     7 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470  0107BC  0A00               	xorlw	0	; case 0
  4471  0107BE  B4D8               	btfsc	status,2,c
  4472  0107C0  0012               	return	
  4473  0107C2  0A01               	xorlw	1	; case 1
  4474  0107C4  B4D8               	btfsc	status,2,c
  4475  0107C6  D7C6               	goto	l1081
  4476  0107C8  0A03               	xorlw	3	; case 2
  4477  0107CA  B4D8               	btfsc	status,2,c
  4478  0107CC  D7D3               	goto	l1083
  4479  0107CE  0A01               	xorlw	1	; case 3
  4480  0107D0  A4D8               	btfss	status,2,c
  4481                           
  4482                           ; BSR set to: 0
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;Port.c: 607: }
  4486  0107D2  0012               	return	
  4487  0107D4  D7E1               	goto	l1084
  4488  0107D6                     l1080:
  4489  0107D6  0012               	return		;funcret
  4490  0107D8                     __end_of_Port_Set:
  4491                           	opt stack 0
  4492                           tblptru	equ	0xFF8
  4493                           tblptrh	equ	0xFF7
  4494                           tblptrl	equ	0xFF6
  4495                           tablat	equ	0xFF5
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           postdec1	equ	0xFE5
  4499                           fsr1h	equ	0xFE2
  4500                           fsr1l	equ	0xFE1
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _Byte_SetByte *****************
  4509 ;; Defined at:
  4510 ;;		line 110 in file "Library/Types.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  4513 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  4514 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  4515 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  4516 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  4517 ;;		 -> NULL(0), 
  4518 ;;  pValue          1    2[BANK0 ] unsigned char 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		fsr2l, fsr2h
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        3 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    7
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_Port_Set
  4541 ;;		_I2C_Init
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text6
  4546  01418C                     __ptext6:
  4547                           	opt stack 0
  4548  01418C                     _Byte_SetByte:
  4549                           	opt stack 20
  4550                           
  4551                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  4552                           
  4553                           ;incstack = 0
  4554  01418C  C0B4  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  4555  014190  C0B5  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  4556  014194  C0B6  FFDF         	movff	Byte_SetByte@pValue,indf2
  4557  014198  0012               	return		;funcret
  4558  01419A                     __end_of_Byte_SetByte:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           postdec1	equ	0xFE5
  4567                           fsr1h	equ	0xFE2
  4568                           fsr1l	equ	0xFE1
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _GetPortTRIS *****************
  4577 ;; Defined at:
  4578 ;;		line 67 in file "Library/Port.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  pInput          1    wreg     enum E6786
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  pInput          1    2[BANK0 ] enum E6786
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  2    0[BANK0 ] PTR struct Byte
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;Total ram usage:        3 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    7
  4599 ;; This function calls:
  4600 ;;		Nothing
  4601 ;; This function is called by:
  4602 ;;		_Port_Init
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text7
  4607  012BEE                     __ptext7:
  4608                           	opt stack 0
  4609  012BEE                     _GetPortTRIS:
  4610                           	opt stack 21
  4611                           
  4612                           ;incstack = 0
  4613                           ;GetPortTRIS@pInput stored from wreg
  4614  012BEE  0100               	movlb	0	; () banked
  4615  012BF0  6FB6               	movwf	GetPortTRIS@pInput& (0+255),b
  4616                           
  4617                           ;Port.c: 69: switch (pInput)
  4618  012BF2  D038               	goto	l915
  4619  012BF4                     
  4620                           ;Port.c: 72: return (BytePtr)&TRISA;
  4621  012BF4  0E92               	movlw	146
  4622  012BF6  0100               	movlb	0	; () banked
  4623  012BF8  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4624  012BFA  0E0F               	movlw	15
  4625  012BFC  0100               	movlb	0	; () banked
  4626  012BFE  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629  012C00  0012               	return	
  4630  012C02                     
  4631                           ; BSR set to: 0
  4632                           ;Port.c: 74: return (BytePtr)&TRISB;
  4633                           
  4634                           ; BSR set to: 0
  4635  012C02  0E93               	movlw	147
  4636  012C04  0100               	movlb	0	; () banked
  4637  012C06  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4638  012C08  0E0F               	movlw	15
  4639  012C0A  0100               	movlb	0	; () banked
  4640  012C0C  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643  012C0E  0012               	return	
  4644  012C10                     
  4645                           ; BSR set to: 0
  4646                           ;Port.c: 76: return (BytePtr)&TRISC;
  4647                           
  4648                           ; BSR set to: 0
  4649  012C10  0E94               	movlw	148
  4650  012C12  0100               	movlb	0	; () banked
  4651  012C14  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4652  012C16  0E0F               	movlw	15
  4653  012C18  0100               	movlb	0	; () banked
  4654  012C1A  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657  012C1C  0012               	return	
  4658  012C1E                     
  4659                           ; BSR set to: 0
  4660                           ;Port.c: 78: return (BytePtr)&TRISD;
  4661                           
  4662                           ; BSR set to: 0
  4663  012C1E  0E95               	movlw	149
  4664  012C20  0100               	movlb	0	; () banked
  4665  012C22  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4666  012C24  0E0F               	movlw	15
  4667  012C26  0100               	movlb	0	; () banked
  4668  012C28  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4669                           
  4670                           ; BSR set to: 0
  4671  012C2A  0012               	return	
  4672  012C2C                     
  4673                           ; BSR set to: 0
  4674                           ;Port.c: 80: return (BytePtr)&TRISE;
  4675                           
  4676                           ; BSR set to: 0
  4677  012C2C  0E96               	movlw	150
  4678  012C2E  0100               	movlb	0	; () banked
  4679  012C30  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4680  012C32  0E0F               	movlw	15
  4681  012C34  0100               	movlb	0	; () banked
  4682  012C36  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4683                           
  4684                           ; BSR set to: 0
  4685  012C38  0012               	return	
  4686  012C3A                     
  4687                           ; BSR set to: 0
  4688                           ;Port.c: 82: return (BytePtr)&TRISF;
  4689                           
  4690                           ; BSR set to: 0
  4691  012C3A  0E97               	movlw	151
  4692  012C3C  0100               	movlb	0	; () banked
  4693  012C3E  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4694  012C40  0E0F               	movlw	15
  4695  012C42  0100               	movlb	0	; () banked
  4696  012C44  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699  012C46  0012               	return	
  4700  012C48                     
  4701                           ; BSR set to: 0
  4702                           ;Port.c: 84: return (BytePtr)&TRISG;
  4703                           
  4704                           ; BSR set to: 0
  4705  012C48  0E98               	movlw	152
  4706  012C4A  0100               	movlb	0	; () banked
  4707  012C4C  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4708  012C4E  0E0F               	movlw	15
  4709  012C50  0100               	movlb	0	; () banked
  4710  012C52  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4711                           
  4712                           ; BSR set to: 0
  4713  012C54  0012               	return	
  4714  012C56                     
  4715                           ; BSR set to: 0
  4716                           ;Port.c: 86: return (void*)0;
  4717                           
  4718                           ; BSR set to: 0
  4719  012C56  0E00               	movlw	0
  4720  012C58  0100               	movlb	0	; () banked
  4721  012C5A  6FB4               	movwf	?_GetPortTRIS& (0+255),b
  4722  012C5C  0E00               	movlw	0
  4723  012C5E  0100               	movlb	0	; () banked
  4724  012C60  6FB5               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;Port.c: 87: }
  4728                           
  4729                           ; BSR set to: 0
  4730  012C62  0012               	return	
  4731  012C64                     l915:
  4732                           
  4733                           ; BSR set to: 0
  4734  012C64  0100               	movlb	0	; () banked
  4735  012C66  51B6               	movf	GetPortTRIS@pInput& (0+255),w,b
  4736                           
  4737                           ; Switch size 1, requested type "space"
  4738                           ; Number of cases is 7, Range of values is 0 to 6
  4739                           ; switch strategies available:
  4740                           ; Name         Instructions Cycles
  4741                           ; simple_byte           22    12 (average)
  4742                           ;	Chosen strategy is simple_byte
  4743  012C68  0A00               	xorlw	0	; case 0
  4744  012C6A  B4D8               	btfsc	status,2,c
  4745  012C6C  D7C3               	goto	l916
  4746  012C6E  0A01               	xorlw	1	; case 1
  4747  012C70  B4D8               	btfsc	status,2,c
  4748  012C72  D7C7               	goto	l918
  4749  012C74  0A03               	xorlw	3	; case 2
  4750  012C76  B4D8               	btfsc	status,2,c
  4751  012C78  D7CB               	goto	l919
  4752  012C7A  0A01               	xorlw	1	; case 3
  4753  012C7C  B4D8               	btfsc	status,2,c
  4754  012C7E  D7CF               	goto	l920
  4755  012C80  0A07               	xorlw	7	; case 4
  4756  012C82  B4D8               	btfsc	status,2,c
  4757  012C84  D7D3               	goto	l921
  4758  012C86  0A01               	xorlw	1	; case 5
  4759  012C88  B4D8               	btfsc	status,2,c
  4760  012C8A  D7D7               	goto	l922
  4761  012C8C  0A03               	xorlw	3	; case 6
  4762  012C8E  B4D8               	btfsc	status,2,c
  4763  012C90  D7DB               	goto	l923
  4764  012C92  D7E1               	goto	l924
  4765  012C94                     __end_of_GetPortTRIS:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           postinc0	equ	0xFEE
  4772                           wreg	equ	0xFE8
  4773                           postdec1	equ	0xFE5
  4774                           fsr1h	equ	0xFE2
  4775                           fsr1l	equ	0xFE1
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           postdec2	equ	0xFDD
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _GetPortProperties *****************
  4784 ;; Defined at:
  4785 ;;		line 21 in file "Library/Port.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  pInput          1    wreg     enum E6786
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  pInput          1    2[BANK0 ] enum E6786
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  2    0[BANK0 ] PTR struct PortProperty
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        3 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_Port_Init
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text8
  4814  012C94                     __ptext8:
  4815                           	opt stack 0
  4816  012C94                     _GetPortProperties:
  4817                           	opt stack 21
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;incstack = 0
  4821                           ;GetPortProperties@pInput stored from wreg
  4822  012C94  0100               	movlb	0	; () banked
  4823  012C96  6FB6               	movwf	GetPortProperties@pInput& (0+255),b
  4824                           
  4825                           ;Port.c: 23: switch (pInput)
  4826  012C98  D038               	goto	l889
  4827  012C9A                     
  4828                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  4829  012C9A  0EBF               	movlw	low _PortA_Property
  4830  012C9C  0100               	movlb	0	; () banked
  4831  012C9E  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4832  012CA0  0EFF               	movlw	high _PortA_Property
  4833  012CA2  0100               	movlb	0	; () banked
  4834  012CA4  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4835                           
  4836                           ; BSR set to: 0
  4837  012CA6  0012               	return	
  4838  012CA8                     
  4839                           ; BSR set to: 0
  4840                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  4841                           
  4842                           ; BSR set to: 0
  4843  012CA8  0EBD               	movlw	low _PortB_Property
  4844  012CAA  0100               	movlb	0	; () banked
  4845  012CAC  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4846  012CAE  0EFF               	movlw	high _PortB_Property
  4847  012CB0  0100               	movlb	0	; () banked
  4848  012CB2  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4849                           
  4850                           ; BSR set to: 0
  4851  012CB4  0012               	return	
  4852  012CB6                     
  4853                           ; BSR set to: 0
  4854                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  4855                           
  4856                           ; BSR set to: 0
  4857  012CB6  0EBB               	movlw	low _PortC_Property
  4858  012CB8  0100               	movlb	0	; () banked
  4859  012CBA  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4860  012CBC  0EFF               	movlw	high _PortC_Property
  4861  012CBE  0100               	movlb	0	; () banked
  4862  012CC0  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4863                           
  4864                           ; BSR set to: 0
  4865  012CC2  0012               	return	
  4866  012CC4                     
  4867                           ; BSR set to: 0
  4868                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  4869                           
  4870                           ; BSR set to: 0
  4871  012CC4  0EB9               	movlw	low _PortD_Property
  4872  012CC6  0100               	movlb	0	; () banked
  4873  012CC8  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4874  012CCA  0EFF               	movlw	high _PortD_Property
  4875  012CCC  0100               	movlb	0	; () banked
  4876  012CCE  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4877                           
  4878                           ; BSR set to: 0
  4879  012CD0  0012               	return	
  4880  012CD2                     
  4881                           ; BSR set to: 0
  4882                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  4883                           
  4884                           ; BSR set to: 0
  4885  012CD2  0EB7               	movlw	low _PortE_Property
  4886  012CD4  0100               	movlb	0	; () banked
  4887  012CD6  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4888  012CD8  0EFF               	movlw	high _PortE_Property
  4889  012CDA  0100               	movlb	0	; () banked
  4890  012CDC  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4891                           
  4892                           ; BSR set to: 0
  4893  012CDE  0012               	return	
  4894  012CE0                     
  4895                           ; BSR set to: 0
  4896                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  4897                           
  4898                           ; BSR set to: 0
  4899  012CE0  0EB5               	movlw	low _PortF_Property
  4900  012CE2  0100               	movlb	0	; () banked
  4901  012CE4  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4902  012CE6  0EFF               	movlw	high _PortF_Property
  4903  012CE8  0100               	movlb	0	; () banked
  4904  012CEA  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907  012CEC  0012               	return	
  4908  012CEE                     
  4909                           ; BSR set to: 0
  4910                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  4911                           
  4912                           ; BSR set to: 0
  4913  012CEE  0EB3               	movlw	low _PortG_Property
  4914  012CF0  0100               	movlb	0	; () banked
  4915  012CF2  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4916  012CF4  0EFF               	movlw	high _PortG_Property
  4917  012CF6  0100               	movlb	0	; () banked
  4918  012CF8  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4919                           
  4920                           ; BSR set to: 0
  4921  012CFA  0012               	return	
  4922  012CFC                     
  4923                           ; BSR set to: 0
  4924                           ;Port.c: 40: return (void*)0;
  4925                           
  4926                           ; BSR set to: 0
  4927  012CFC  0E00               	movlw	0
  4928  012CFE  0100               	movlb	0	; () banked
  4929  012D00  6FB4               	movwf	?_GetPortProperties& (0+255),b
  4930  012D02  0E00               	movlw	0
  4931  012D04  0100               	movlb	0	; () banked
  4932  012D06  6FB5               	movwf	(?_GetPortProperties+1)& (0+255),b
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;Port.c: 41: }
  4936                           
  4937                           ; BSR set to: 0
  4938  012D08  0012               	return	
  4939  012D0A                     l889:
  4940                           
  4941                           ; BSR set to: 0
  4942  012D0A  0100               	movlb	0	; () banked
  4943  012D0C  51B6               	movf	GetPortProperties@pInput& (0+255),w,b
  4944                           
  4945                           ; Switch size 1, requested type "space"
  4946                           ; Number of cases is 7, Range of values is 0 to 6
  4947                           ; switch strategies available:
  4948                           ; Name         Instructions Cycles
  4949                           ; simple_byte           22    12 (average)
  4950                           ;	Chosen strategy is simple_byte
  4951  012D0E  0A00               	xorlw	0	; case 0
  4952  012D10  B4D8               	btfsc	status,2,c
  4953  012D12  D7C3               	goto	l890
  4954  012D14  0A01               	xorlw	1	; case 1
  4955  012D16  B4D8               	btfsc	status,2,c
  4956  012D18  D7C7               	goto	l892
  4957  012D1A  0A03               	xorlw	3	; case 2
  4958  012D1C  B4D8               	btfsc	status,2,c
  4959  012D1E  D7CB               	goto	l893
  4960  012D20  0A01               	xorlw	1	; case 3
  4961  012D22  B4D8               	btfsc	status,2,c
  4962  012D24  D7CF               	goto	l894
  4963  012D26  0A07               	xorlw	7	; case 4
  4964  012D28  B4D8               	btfsc	status,2,c
  4965  012D2A  D7D3               	goto	l895
  4966  012D2C  0A01               	xorlw	1	; case 5
  4967  012D2E  B4D8               	btfsc	status,2,c
  4968  012D30  D7D7               	goto	l896
  4969  012D32  0A03               	xorlw	3	; case 6
  4970  012D34  B4D8               	btfsc	status,2,c
  4971  012D36  D7DB               	goto	l897
  4972  012D38  D7E1               	goto	l898
  4973  012D3A                     __end_of_GetPortProperties:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           postdec1	equ	0xFE5
  4982                           fsr1h	equ	0xFE2
  4983                           fsr1l	equ	0xFE1
  4984                           indf2	equ	0xFDF
  4985                           postinc2	equ	0xFDE
  4986                           postdec2	equ	0xFDD
  4987                           fsr2h	equ	0xFDA
  4988                           fsr2l	equ	0xFD9
  4989                           status	equ	0xFD8
  4990                           
  4991 ;; *************** function _GetPortPORT *****************
  4992 ;; Defined at:
  4993 ;;		line 44 in file "Library/Port.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  pInput          1    wreg     enum E6786
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  pInput          1    2[BANK0 ] enum E6786
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  2    0[BANK0 ] PTR struct Byte
  5000 ;; Registers used:
  5001 ;;		wreg, status,2, status,0
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;Total ram usage:        3 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    7
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_Port_Init
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text9
  5022  012D3A                     __ptext9:
  5023                           	opt stack 0
  5024  012D3A                     _GetPortPORT:
  5025                           	opt stack 21
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;incstack = 0
  5029                           ;GetPortPORT@pInput stored from wreg
  5030  012D3A  0100               	movlb	0	; () banked
  5031  012D3C  6FB6               	movwf	GetPortPORT@pInput& (0+255),b
  5032                           
  5033                           ;Port.c: 46: switch (pInput)
  5034  012D3E  D038               	goto	l902
  5035  012D40                     
  5036                           ;Port.c: 49: return (BytePtr)&PORTA;
  5037  012D40  0E80               	movlw	128
  5038  012D42  0100               	movlb	0	; () banked
  5039  012D44  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5040  012D46  0E0F               	movlw	15
  5041  012D48  0100               	movlb	0	; () banked
  5042  012D4A  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5043                           
  5044                           ; BSR set to: 0
  5045  012D4C  0012               	return	
  5046  012D4E                     
  5047                           ; BSR set to: 0
  5048                           ;Port.c: 51: return (BytePtr)&PORTB;
  5049                           
  5050                           ; BSR set to: 0
  5051  012D4E  0E81               	movlw	129
  5052  012D50  0100               	movlb	0	; () banked
  5053  012D52  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5054  012D54  0E0F               	movlw	15
  5055  012D56  0100               	movlb	0	; () banked
  5056  012D58  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5057                           
  5058                           ; BSR set to: 0
  5059  012D5A  0012               	return	
  5060  012D5C                     
  5061                           ; BSR set to: 0
  5062                           ;Port.c: 53: return (BytePtr)&PORTC;
  5063                           
  5064                           ; BSR set to: 0
  5065  012D5C  0E82               	movlw	130
  5066  012D5E  0100               	movlb	0	; () banked
  5067  012D60  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5068  012D62  0E0F               	movlw	15
  5069  012D64  0100               	movlb	0	; () banked
  5070  012D66  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073  012D68  0012               	return	
  5074  012D6A                     
  5075                           ; BSR set to: 0
  5076                           ;Port.c: 55: return (BytePtr)&PORTD;
  5077                           
  5078                           ; BSR set to: 0
  5079  012D6A  0E83               	movlw	131
  5080  012D6C  0100               	movlb	0	; () banked
  5081  012D6E  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5082  012D70  0E0F               	movlw	15
  5083  012D72  0100               	movlb	0	; () banked
  5084  012D74  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087  012D76  0012               	return	
  5088  012D78                     
  5089                           ; BSR set to: 0
  5090                           ;Port.c: 57: return (BytePtr)&PORTE;
  5091                           
  5092                           ; BSR set to: 0
  5093  012D78  0E84               	movlw	132
  5094  012D7A  0100               	movlb	0	; () banked
  5095  012D7C  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5096  012D7E  0E0F               	movlw	15
  5097  012D80  0100               	movlb	0	; () banked
  5098  012D82  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5099                           
  5100                           ; BSR set to: 0
  5101  012D84  0012               	return	
  5102  012D86                     
  5103                           ; BSR set to: 0
  5104                           ;Port.c: 59: return (BytePtr)&PORTF;
  5105                           
  5106                           ; BSR set to: 0
  5107  012D86  0E85               	movlw	133
  5108  012D88  0100               	movlb	0	; () banked
  5109  012D8A  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5110  012D8C  0E0F               	movlw	15
  5111  012D8E  0100               	movlb	0	; () banked
  5112  012D90  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5113                           
  5114                           ; BSR set to: 0
  5115  012D92  0012               	return	
  5116  012D94                     
  5117                           ; BSR set to: 0
  5118                           ;Port.c: 61: return (BytePtr)&PORTG;
  5119                           
  5120                           ; BSR set to: 0
  5121  012D94  0E86               	movlw	134
  5122  012D96  0100               	movlb	0	; () banked
  5123  012D98  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5124  012D9A  0E0F               	movlw	15
  5125  012D9C  0100               	movlb	0	; () banked
  5126  012D9E  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5127                           
  5128                           ; BSR set to: 0
  5129  012DA0  0012               	return	
  5130  012DA2                     
  5131                           ; BSR set to: 0
  5132                           ;Port.c: 63: return (void*)0;
  5133                           
  5134                           ; BSR set to: 0
  5135  012DA2  0E00               	movlw	0
  5136  012DA4  0100               	movlb	0	; () banked
  5137  012DA6  6FB4               	movwf	?_GetPortPORT& (0+255),b
  5138  012DA8  0E00               	movlw	0
  5139  012DAA  0100               	movlb	0	; () banked
  5140  012DAC  6FB5               	movwf	(?_GetPortPORT+1)& (0+255),b
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;Port.c: 64: }
  5144                           
  5145                           ; BSR set to: 0
  5146  012DAE  0012               	return	
  5147  012DB0                     l902:
  5148                           
  5149                           ; BSR set to: 0
  5150  012DB0  0100               	movlb	0	; () banked
  5151  012DB2  51B6               	movf	GetPortPORT@pInput& (0+255),w,b
  5152                           
  5153                           ; Switch size 1, requested type "space"
  5154                           ; Number of cases is 7, Range of values is 0 to 6
  5155                           ; switch strategies available:
  5156                           ; Name         Instructions Cycles
  5157                           ; simple_byte           22    12 (average)
  5158                           ;	Chosen strategy is simple_byte
  5159  012DB4  0A00               	xorlw	0	; case 0
  5160  012DB6  B4D8               	btfsc	status,2,c
  5161  012DB8  D7C3               	goto	l903
  5162  012DBA  0A01               	xorlw	1	; case 1
  5163  012DBC  B4D8               	btfsc	status,2,c
  5164  012DBE  D7C7               	goto	l905
  5165  012DC0  0A03               	xorlw	3	; case 2
  5166  012DC2  B4D8               	btfsc	status,2,c
  5167  012DC4  D7CB               	goto	l906
  5168  012DC6  0A01               	xorlw	1	; case 3
  5169  012DC8  B4D8               	btfsc	status,2,c
  5170  012DCA  D7CF               	goto	l907
  5171  012DCC  0A07               	xorlw	7	; case 4
  5172  012DCE  B4D8               	btfsc	status,2,c
  5173  012DD0  D7D3               	goto	l908
  5174  012DD2  0A01               	xorlw	1	; case 5
  5175  012DD4  B4D8               	btfsc	status,2,c
  5176  012DD6  D7D7               	goto	l909
  5177  012DD8  0A03               	xorlw	3	; case 6
  5178  012DDA  B4D8               	btfsc	status,2,c
  5179  012DDC  D7DB               	goto	l910
  5180  012DDE  D7E1               	goto	l911
  5181  012DE0                     __end_of_GetPortPORT:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           postinc0	equ	0xFEE
  5188                           wreg	equ	0xFE8
  5189                           postdec1	equ	0xFE5
  5190                           fsr1h	equ	0xFE2
  5191                           fsr1l	equ	0xFE1
  5192                           indf2	equ	0xFDF
  5193                           postinc2	equ	0xFDE
  5194                           postdec2	equ	0xFDD
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _LED_Init *****************
  5200 ;; Defined at:
  5201 ;;		line 15 in file "Library/LED.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  pLED            1    wreg     enum E6739
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  pLED            1   45[BANK0 ] enum E6739
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;Total ram usage:        1 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:   12
  5222 ;; This function calls:
  5223 ;;		_LED_Set
  5224 ;;		_Port_SetPinType
  5225 ;; This function is called by:
  5226 ;;		_MXK_Init
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text10
  5231  0137B2                     __ptext10:
  5232                           	opt stack 0
  5233  0137B2                     _LED_Init:
  5234                           	opt stack 17
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;incstack = 0
  5238                           ;LED_Init@pLED stored from wreg
  5239  0137B2  0100               	movlb	0	; () banked
  5240  0137B4  6FE1               	movwf	LED_Init@pLED& (0+255),b
  5241                           
  5242                           ;LED.c: 17: switch (pLED)
  5243  0137B6  D01E               	goto	l772
  5244  0137B8                     
  5245                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  5246  0137B8  0EA4               	movlw	low _PortC
  5247  0137BA  0100               	movlb	0	; () banked
  5248  0137BC  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  5249  0137BE  0E00               	movlw	high _PortC
  5250  0137C0  0100               	movlb	0	; () banked
  5251  0137C2  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5252  0137C4  0E00               	movlw	0
  5253  0137C6  0100               	movlb	0	; () banked
  5254  0137C8  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  5255  0137CA  0E03               	movlw	3
  5256  0137CC  0100               	movlb	0	; () banked
  5257  0137CE  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  5258  0137D0  EC73  F089         	call	_Port_SetPinType	;wreg free
  5259                           
  5260                           ;LED.c: 21: break;
  5261  0137D4  D017               	goto	l774
  5262  0137D6                     
  5263                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  5264  0137D6  0EA4               	movlw	low _PortC
  5265  0137D8  0100               	movlb	0	; () banked
  5266  0137DA  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  5267  0137DC  0E00               	movlw	high _PortC
  5268  0137DE  0100               	movlb	0	; () banked
  5269  0137E0  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5270  0137E2  0E01               	movlw	1
  5271  0137E4  0100               	movlb	0	; () banked
  5272  0137E6  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  5273  0137E8  0E03               	movlw	3
  5274  0137EA  0100               	movlb	0	; () banked
  5275  0137EC  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  5276  0137EE  EC73  F089         	call	_Port_SetPinType	;wreg free
  5277                           
  5278                           ;LED.c: 25: }
  5279                           
  5280                           ;LED.c: 24: break;
  5281  0137F2  D008               	goto	l774
  5282  0137F4                     l772:
  5283  0137F4  0100               	movlb	0	; () banked
  5284  0137F6  51E1               	movf	LED_Init@pLED& (0+255),w,b
  5285                           
  5286                           ; Switch size 1, requested type "space"
  5287                           ; Number of cases is 2, Range of values is 0 to 1
  5288                           ; switch strategies available:
  5289                           ; Name         Instructions Cycles
  5290                           ; simple_byte            7     4 (average)
  5291                           ;	Chosen strategy is simple_byte
  5292  0137F8  0A00               	xorlw	0	; case 0
  5293  0137FA  B4D8               	btfsc	status,2,c
  5294  0137FC  D7DD               	goto	l773
  5295  0137FE  0A01               	xorlw	1	; case 1
  5296  013800  B4D8               	btfsc	status,2,c
  5297  013802  D7E9               	goto	l775
  5298  013804                     l774:
  5299                           
  5300                           ;LED.c: 26: LED_Set(pLED, 0);
  5301                           
  5302                           ; BSR set to: 0
  5303  013804  0E00               	movlw	0
  5304  013806  0100               	movlb	0	; () banked
  5305  013808  6FC8               	movwf	LED_Set@pValue& (0+255),b
  5306  01380A  0100               	movlb	0	; () banked
  5307  01380C  51E1               	movf	LED_Init@pLED& (0+255),w,b
  5308  01380E  ECBD  F09C         	call	_LED_Set
  5309  013812  0012               	return		;funcret
  5310  013814                     __end_of_LED_Init:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           postinc0	equ	0xFEE
  5317                           wreg	equ	0xFE8
  5318                           postdec1	equ	0xFE5
  5319                           fsr1h	equ	0xFE2
  5320                           fsr1l	equ	0xFE1
  5321                           indf2	equ	0xFDF
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function _LED_Set *****************
  5329 ;; Defined at:
  5330 ;;		line 33 in file "Library/LED.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  pLED            1    wreg     enum E6739
  5333 ;;  pValue          1   20[BANK0 ] unsigned char 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  pLED            1   21[BANK0 ] enum E6739
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5345 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;Total ram usage:        2 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:   11
  5352 ;; This function calls:
  5353 ;;		_Port_SetPin
  5354 ;; This function is called by:
  5355 ;;		_LED_Init
  5356 ;;		_SYSTEM_Initialize
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text11
  5361  01397A                     __ptext11:
  5362                           	opt stack 0
  5363  01397A                     _LED_Set:
  5364                           	opt stack 17
  5365                           
  5366                           ;incstack = 0
  5367                           ;LED_Set@pLED stored from wreg
  5368  01397A  0100               	movlb	0	; () banked
  5369  01397C  6FC9               	movwf	LED_Set@pLED& (0+255),b
  5370                           
  5371                           ;LED.c: 35: switch (pLED)
  5372  01397E  D01C               	goto	l779
  5373  013980                     
  5374                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  5375  013980  0EA4               	movlw	low _PortC
  5376  013982  0100               	movlb	0	; () banked
  5377  013984  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  5378  013986  0E00               	movlw	high _PortC
  5379  013988  0100               	movlb	0	; () banked
  5380  01398A  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5381  01398C  0E00               	movlw	0
  5382  01398E  0100               	movlb	0	; () banked
  5383  013990  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  5384  013992  C0C8  F0C6         	movff	LED_Set@pValue,Port_SetPin@pValue
  5385  013996  EC75  F093         	call	_Port_SetPin	;wreg free
  5386                           
  5387                           ;LED.c: 39: break;
  5388  01399A  0012               	return	
  5389  01399C                     
  5390                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  5391  01399C  0EA4               	movlw	low _PortC
  5392  01399E  0100               	movlb	0	; () banked
  5393  0139A0  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  5394  0139A2  0E00               	movlw	high _PortC
  5395  0139A4  0100               	movlb	0	; () banked
  5396  0139A6  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5397  0139A8  0E01               	movlw	1
  5398  0139AA  0100               	movlb	0	; () banked
  5399  0139AC  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  5400  0139AE  C0C8  F0C6         	movff	LED_Set@pValue,Port_SetPin@pValue
  5401  0139B2  EC75  F093         	call	_Port_SetPin	;wreg free
  5402                           
  5403                           ;LED.c: 43: }
  5404                           
  5405                           ;LED.c: 42: break;
  5406  0139B6  0012               	return	
  5407  0139B8                     l779:
  5408  0139B8  0100               	movlb	0	; () banked
  5409  0139BA  51C9               	movf	LED_Set@pLED& (0+255),w,b
  5410                           
  5411                           ; Switch size 1, requested type "space"
  5412                           ; Number of cases is 2, Range of values is 0 to 1
  5413                           ; switch strategies available:
  5414                           ; Name         Instructions Cycles
  5415                           ; simple_byte            7     4 (average)
  5416                           ;	Chosen strategy is simple_byte
  5417  0139BC  0A00               	xorlw	0	; case 0
  5418  0139BE  B4D8               	btfsc	status,2,c
  5419  0139C0  D7DF               	goto	l780
  5420  0139C2  0A01               	xorlw	1	; case 1
  5421  0139C4  A4D8               	btfss	status,2,c
  5422  0139C6  0012               	return	
  5423  0139C8  D7E9               	goto	l782
  5424  0139CA                     __end_of_LED_Set:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           postinc0	equ	0xFEE
  5431                           wreg	equ	0xFE8
  5432                           postdec1	equ	0xFE5
  5433                           fsr1h	equ	0xFE2
  5434                           fsr1l	equ	0xFE1
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _ISR_Enable *****************
  5443 ;; Defined at:
  5444 ;;		line 30 in file "Library/ISR.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		None
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    7
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_main
  5469 ;;		_IMU_Init
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text12
  5474  0141F4                     __ptext12:
  5475                           	opt stack 0
  5476  0141F4                     _ISR_Enable:
  5477                           	opt stack 23
  5478                           
  5479                           ;ISR.c: 32: INTCONbits.PEIE = 1;
  5480                           
  5481                           ;incstack = 0
  5482  0141F4  8CF2               	bsf	intcon,6,c	;volatile
  5483                           
  5484                           ;ISR.c: 33: INTCONbits.GIE = 1;
  5485  0141F6  8EF2               	bsf	intcon,7,c	;volatile
  5486                           
  5487                           ;ISR.c: 34: INTCONbits.INT0IE = 1;
  5488  0141F8  88F2               	bsf	intcon,4,c	;volatile
  5489                           
  5490                           ;ISR.c: 35: INTCONbits.INT0IF = 0;
  5491  0141FA  92F2               	bcf	intcon,1,c	;volatile
  5492  0141FC  0012               	return		;funcret
  5493  0141FE                     __end_of_ISR_Enable:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           postdec1	equ	0xFE5
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function _FunctMotor *****************
  5513 ;; Defined at:
  5514 ;;		line 217 in file "Functions.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;		None
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;		None
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      void 
  5521 ;; Registers used:
  5522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;Total ram usage:        2 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:   13
  5535 ;; This function calls:
  5536 ;;		_LED_Toggle
  5537 ;;		_MXK_BlockSwitchTo
  5538 ;;		_MXK_Dequeue
  5539 ;;		_MXK_Release
  5540 ;;		_Motor_Move
  5541 ;;		_Motor_Speed
  5542 ;; This function is called by:
  5543 ;;		_main
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text13
  5548  01286C                     __ptext13:
  5549                           	opt stack 0
  5550  01286C                     _FunctMotor:
  5551                           	opt stack 17
  5552                           
  5553                           ;Functions.c: 219: if (MXK_BlockSwitchTo(eMXK_Motor))
  5554                           
  5555                           ;incstack = 0
  5556  01286C  0E08               	movlw	8
  5557  01286E  EC60  F09E         	call	_MXK_BlockSwitchTo
  5558  012872  0900               	iorlw	0
  5559  012874  B4D8               	btfsc	status,2,c
  5560  012876  0012               	return	
  5561                           
  5562                           ;Functions.c: 220: {
  5563                           ;Functions.c: 227: if (Stepper.mDelta == 0)
  5564  012878  0101               	movlb	1	; () banked
  5565  01287A  51C8               	movf	_Stepper& (0+255),w,b
  5566  01287C  0101               	movlb	1	; () banked
  5567  01287E  11C9               	iorwf	(_Stepper+1)& (0+255),w,b
  5568  012880  A4D8               	btfss	status,2,c
  5569  012882  D04A               	goto	l2980
  5570                           
  5571                           ; BSR set to: 1
  5572                           ;Functions.c: 228: {
  5573                           ;Functions.c: 229: Hz += HzInc;
  5574  012884  0E0D               	movlw	low _HzInc
  5575  012886  6EF6               	movwf	tblptrl,c
  5576  012888                     	if	1	;There is more than 1 active tblptr byte
  5577  012888  0EFD               	movlw	high _HzInc
  5578  01288A  6EF7               	movwf	tblptrh,c
  5579  01288C                     	endif
  5580  01288C                     	if	1	;There are 3 active tblptr bytes
  5581  01288C  0E00               	movlw	low (_HzInc shr (0+16))
  5582  01288E  6EF8               	movwf	tblptru,c
  5583  012890                     	endif
  5584  012890  0009               	tblrd		*+
  5585  012892  CFF5 F0D3          	movff	tablat,??_FunctMotor
  5586  012896  0009               	tblrd		*+
  5587  012898  CFF5 F0D4          	movff	tablat,??_FunctMotor+1
  5588  01289C  0100               	movlb	0	; () banked
  5589  01289E  51D3               	movf	??_FunctMotor& (0+255),w,b
  5590  0128A0  0100               	movlb	0	; () banked
  5591  0128A2  27F7               	addwf	_Hz& (0+255),f,b
  5592  0128A4  0100               	movlb	0	; () banked
  5593  0128A6  51D4               	movf	(??_FunctMotor+1)& (0+255),w,b
  5594  0128A8  0100               	movlb	0	; () banked
  5595  0128AA  23F8               	addwfc	(_Hz+1)& (0+255),f,b
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;Functions.c: 230: if (Hz >= DIST)
  5599  0128AC  0100               	movlb	0	; () banked
  5600  0128AE  51F5               	movf	_DIST& (0+255),w,b
  5601  0128B0  0100               	movlb	0	; () banked
  5602  0128B2  5DF7               	subwf	_Hz& (0+255),w,b
  5603  0128B4  0100               	movlb	0	; () banked
  5604  0128B6  51F6               	movf	(_DIST+1)& (0+255),w,b
  5605  0128B8  0100               	movlb	0	; () banked
  5606  0128BA  59F8               	subwfb	(_Hz+1)& (0+255),w,b
  5607  0128BC  A0D8               	btfss	status,0,c
  5608  0128BE  D00C               	goto	l2981
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;Functions.c: 231: Hz = HzInc;
  5612  0128C0  0E0D               	movlw	low _HzInc
  5613  0128C2  6EF6               	movwf	tblptrl,c
  5614  0128C4                     	if	1	;There is more than 1 active tblptr byte
  5615  0128C4  0EFD               	movlw	high _HzInc
  5616  0128C6  6EF7               	movwf	tblptrh,c
  5617  0128C8                     	endif
  5618  0128C8                     	if	1	;There are 3 active tblptr bytes
  5619  0128C8  0E00               	movlw	low (_HzInc shr (0+16))
  5620  0128CA  6EF8               	movwf	tblptru,c
  5621  0128CC                     	endif
  5622  0128CC  0009               	tblrd		*+
  5623  0128CE  CFF5 F0F7          	movff	tablat,_Hz
  5624  0128D2  000A               	tblrd		*-
  5625  0128D4  CFF5 F0F8          	movff	tablat,_Hz+1
  5626  0128D8                     l2981:
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;Functions.c: 233: LED_Toggle(eLED1);
  5630                           
  5631                           ; BSR set to: 0
  5632  0128D8  0E00               	movlw	0
  5633  0128DA  EC57  F09D         	call	_LED_Toggle
  5634                           
  5635                           ;Functions.c: 234: DIST = -DIST;
  5636  0128DE  0100               	movlb	0	; () banked
  5637  0128E0  6DF5               	negf	_DIST& (0+255),b
  5638  0128E2  1FF6               	comf	(_DIST+1)& (0+255),f,b
  5639  0128E4  B0D8               	btfsc	status,0,c
  5640  0128E6  2BF6               	incf	(_DIST+1)& (0+255),f,b
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;Functions.c: 236: Motor_Speed(&Stepper, Hz);
  5644  0128E8  0EC8               	movlw	low _Stepper
  5645  0128EA  0100               	movlb	0	; () banked
  5646  0128EC  6FCF               	movwf	Motor_Speed@pMotor& (0+255),b
  5647  0128EE  0E01               	movlw	high _Stepper
  5648  0128F0  0100               	movlb	0	; () banked
  5649  0128F2  6FD0               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5650  0128F4  C0F7  F0D1         	movff	_Hz,Motor_Speed@pFrequency
  5651  0128F8  C0F8  F0D2         	movff	_Hz+1,Motor_Speed@pFrequency+1
  5652  0128FC  EC9F  F09F         	call	_Motor_Speed	;wreg free
  5653                           
  5654                           ;Functions.c: 237: Motor_Move(&Stepper, DIST);
  5655  012900  0EC8               	movlw	low _Stepper
  5656  012902  0100               	movlb	0	; () banked
  5657  012904  6FB7               	movwf	Motor_Move@pMotor& (0+255),b
  5658  012906  0E01               	movlw	high _Stepper
  5659  012908  0100               	movlb	0	; () banked
  5660  01290A  6FB8               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5661  01290C  C0F5  F0B9         	movff	_DIST,Motor_Move@pDelta
  5662  012910  C0F6  F0BA         	movff	_DIST+1,Motor_Move@pDelta+1
  5663  012914  EC9E  F09E         	call	_Motor_Move	;wreg free
  5664  012918                     l2980:
  5665                           
  5666                           ;Functions.c: 238: }
  5667                           ;Functions.c: 240: if(MXK_Release())
  5668  012918  EC9A  F0A0         	call	_MXK_Release	;wreg free
  5669  01291C  0900               	iorlw	0
  5670  01291E  B4D8               	btfsc	status,2,c
  5671  012920  0012               	return	
  5672                           
  5673                           ;Functions.c: 241: MXK_Dequeue();
  5674  012922  EC22  F09E         	call	_MXK_Dequeue	;wreg free
  5675  012926  0012               	return	
  5676  012928                     __end_of_FunctMotor:
  5677                           	opt stack 0
  5678                           tblptru	equ	0xFF8
  5679                           tblptrh	equ	0xFF7
  5680                           tblptrl	equ	0xFF6
  5681                           tablat	equ	0xFF5
  5682                           intcon	equ	0xFF2
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           postdec1	equ	0xFE5
  5686                           fsr1h	equ	0xFE2
  5687                           fsr1l	equ	0xFE1
  5688                           indf2	equ	0xFDF
  5689                           postinc2	equ	0xFDE
  5690                           postdec2	equ	0xFDD
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function _Motor_Speed *****************
  5696 ;; Defined at:
  5697 ;;		line 117 in file "Library/Motor.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  5700 ;;		 -> Stepper(6), 
  5701 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      unsigned char 
  5706 ;; Registers used:
  5707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:        4 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    9
  5720 ;; This function calls:
  5721 ;;		_Timer0_Init
  5722 ;; This function is called by:
  5723 ;;		_FunctMotor
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text14
  5728  013F3E                     __ptext14:
  5729                           	opt stack 0
  5730  013F3E                     _Motor_Speed:
  5731                           	opt stack 20
  5732                           
  5733                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  5734                           
  5735                           ;incstack = 0
  5736  013F3E  0100               	movlb	0	; () banked
  5737  013F40  EE20 F002          	lfsr	2,2
  5738  013F44  51CF               	movf	Motor_Speed@pMotor& (0+255),w,b
  5739  013F46  26D9               	addwf	fsr2l,f,c
  5740  013F48  51D0               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  5741  013F4A  22DA               	addwfc	fsr2h,f,c
  5742  013F4C  C0D1  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  5743  013F50  C0D2  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;Motor.c: 120: Timer0_Init(pFrequency);
  5747  013F54  C0D1  F0C1         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  5748  013F58  C0D2  F0C2         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  5749  013F5C  0100               	movlb	0	; () banked
  5750  013F5E  6BC3               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  5751  013F60  6BC4               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  5752  013F62  EC1A  F08E         	call	_Timer0_Init	;wreg free
  5753  013F66  0012               	return	
  5754  013F68                     __end_of_Motor_Speed:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           intcon	equ	0xFF2
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1h	equ	0xFE2
  5765                           fsr1l	equ	0xFE1
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _FunctInitMotor *****************
  5774 ;; Defined at:
  5775 ;;		line 52 in file "Functions.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:   13
  5796 ;; This function calls:
  5797 ;;		_Motor_Init
  5798 ;;		_Motor_Move
  5799 ;; This function is called by:
  5800 ;;		_main
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text15
  5805  013E18                     __ptext15:
  5806                           	opt stack 0
  5807  013E18                     _FunctInitMotor:
  5808                           	opt stack 17
  5809                           
  5810                           ;Functions.c: 57: Motor_Init(&Stepper, 0b1000);
  5811                           
  5812                           ;incstack = 0
  5813  013E18  0EC8               	movlw	low _Stepper
  5814  013E1A  0100               	movlb	0	; () banked
  5815  013E1C  6FE1               	movwf	Motor_Init@pMotor& (0+255),b
  5816  013E1E  0E01               	movlw	high _Stepper
  5817  013E20  0100               	movlb	0	; () banked
  5818  013E22  6FE2               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  5819  013E24  0E00               	movlw	0
  5820  013E26  0100               	movlb	0	; () banked
  5821  013E28  6FE4               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  5822  013E2A  0E08               	movlw	8
  5823  013E2C  6FE3               	movwf	Motor_Init@pAddress& (0+255),b
  5824  013E2E  EC05  F091         	call	_Motor_Init	;wreg free
  5825                           
  5826                           ;Functions.c: 58: Motor_Move(&Stepper, DIST);
  5827  013E32  0EC8               	movlw	low _Stepper
  5828  013E34  0100               	movlb	0	; () banked
  5829  013E36  6FB7               	movwf	Motor_Move@pMotor& (0+255),b
  5830  013E38  0E01               	movlw	high _Stepper
  5831  013E3A  0100               	movlb	0	; () banked
  5832  013E3C  6FB8               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5833  013E3E  C0F5  F0B9         	movff	_DIST,Motor_Move@pDelta
  5834  013E42  C0F6  F0BA         	movff	_DIST+1,Motor_Move@pDelta+1
  5835  013E46  EC9E  F09E         	call	_Motor_Move	;wreg free
  5836  013E4A  0012               	return		;funcret
  5837  013E4C                     __end_of_FunctInitMotor:
  5838                           	opt stack 0
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           intcon	equ	0xFF2
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           postdec1	equ	0xFE5
  5847                           fsr1h	equ	0xFE2
  5848                           fsr1l	equ	0xFE1
  5849                           indf2	equ	0xFDF
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _Motor_Move *****************
  5857 ;; Defined at:
  5858 ;;		line 51 in file "Library/Motor.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  5861 ;;		 -> Stepper(6), 
  5862 ;;  pDelta          2    5[BANK0 ] short 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      unsigned char 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:        6 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    8
  5881 ;; This function calls:
  5882 ;;		_Timer0_Start
  5883 ;; This function is called by:
  5884 ;;		_FunctInitMotor
  5885 ;;		_FunctMotor
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text16
  5890  013D3C                     __ptext16:
  5891                           	opt stack 0
  5892  013D3C                     _Motor_Move:
  5893                           	opt stack 21
  5894                           
  5895                           ;Motor.c: 54: lMotor = pMotor;
  5896                           
  5897                           ;incstack = 0
  5898  013D3C  C0B7  F081         	movff	Motor_Move@pMotor,_lMotor
  5899  013D40  C0B8  F082         	movff	Motor_Move@pMotor+1,_lMotor+1
  5900                           
  5901                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  5902  013D44  C0B7  FFD9         	movff	Motor_Move@pMotor,fsr2l
  5903  013D48  C0B8  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  5904  013D4C  50DE               	movf	postinc2,w,c
  5905  013D4E  10DE               	iorwf	postinc2,w,c
  5906  013D50  A4D8               	btfss	status,2,c
  5907  013D52  0012               	return	
  5908                           
  5909                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  5910                           
  5911                           ;Motor.c: 59: return 0;
  5912                           ;	Return value of _Motor_Move is never used
  5913  013D54  C0B7  FFD9         	movff	Motor_Move@pMotor,fsr2l
  5914  013D58  C0B8  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  5915  013D5C  C0B9  FFDE         	movff	Motor_Move@pDelta,postinc2
  5916  013D60  C0BA  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  5917                           
  5918                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  5919  013D64  C078  F0B4         	movff	_lStepFunction,Timer0_Start@pFunction
  5920  013D68  C079  F0B5         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  5921  013D6C  C07A  F0B6         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  5922  013D70  ECC8  F09F         	call	_Timer0_Start	;wreg free
  5923  013D74  0012               	return	
  5924  013D76                     __end_of_Motor_Move:
  5925                           	opt stack 0
  5926                           tblptru	equ	0xFF8
  5927                           tblptrh	equ	0xFF7
  5928                           tblptrl	equ	0xFF6
  5929                           tablat	equ	0xFF5
  5930                           intcon	equ	0xFF2
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           postdec1	equ	0xFE5
  5934                           fsr1h	equ	0xFE2
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _Timer0_Start *****************
  5944 ;; Defined at:
  5945 ;;		line 75 in file "Library/Timer0.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  5948 ;;		 -> Motor_Step(1), Absolute function(1), 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5960 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;Total ram usage:        3 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    7
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_Motor_Move
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text17
  5975  013F90                     __ptext17:
  5976                           	opt stack 0
  5977  013F90                     _Timer0_Start:
  5978                           	opt stack 21
  5979                           
  5980                           ;Timer0.c: 77: gISR = pFunction;
  5981                           
  5982                           ;incstack = 0
  5983  013F90  C0B4  F116         	movff	Timer0_Start@pFunction,_gISR
  5984  013F94  C0B5  F117         	movff	Timer0_Start@pFunction+1,_gISR+1
  5985  013F98  C0B6  F118         	movff	Timer0_Start@pFunction+2,_gISR+2
  5986                           
  5987                           ;Timer0.c: 78: TMR0 = COUNTER;
  5988  013F9C  C07F  FFD6         	movff	_COUNTER,4054	;volatile
  5989  013FA0  C080  FFD7         	movff	_COUNTER+1,4055	;volatile
  5990                           
  5991                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  5992  013FA4  50D5               	movf	4053,w,c	;volatile
  5993  013FA6  0100               	movlb	0	; () banked
  5994  013FA8  1995               	xorwf	_INDEX& (0+255),w,b
  5995  013FAA  0BF8               	andlw	-8
  5996  013FAC  1995               	xorwf	_INDEX& (0+255),w,b
  5997  013FAE  6ED5               	movwf	4053,c	;volatile
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  6001  013FB0  94F2               	bcf	intcon,2,c	;volatile
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  6005  013FB2  8AF2               	bsf	intcon,5,c	;volatile
  6006                           
  6007                           ; BSR set to: 0
  6008  013FB4  0012               	return		;funcret
  6009  013FB6                     __end_of_Timer0_Start:
  6010                           	opt stack 0
  6011                           tblptru	equ	0xFF8
  6012                           tblptrh	equ	0xFF7
  6013                           tblptrl	equ	0xFF6
  6014                           tablat	equ	0xFF5
  6015                           intcon	equ	0xFF2
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           postdec1	equ	0xFE5
  6019                           fsr1h	equ	0xFE2
  6020                           fsr1l	equ	0xFE1
  6021                           indf2	equ	0xFDF
  6022                           postinc2	equ	0xFDE
  6023                           postdec2	equ	0xFDD
  6024                           fsr2h	equ	0xFDA
  6025                           fsr2l	equ	0xFD9
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _Motor_Init *****************
  6029 ;; Defined at:
  6030 ;;		line 26 in file "Library/Motor.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  6033 ;;		 -> Stepper(6), 
  6034 ;;  pAddress        2   47[BANK0 ] unsigned short 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;		None
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      void 
  6039 ;; Registers used:
  6040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6046 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;Total ram usage:        4 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:   12
  6053 ;; This function calls:
  6054 ;;		_Port_SetPin
  6055 ;;		_Port_SetPinType
  6056 ;;		_Timer0_Init
  6057 ;; This function is called by:
  6058 ;;		_FunctInitMotor
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text18
  6063  01220A                     __ptext18:
  6064                           	opt stack 0
  6065  01220A                     _Motor_Init:
  6066                           	opt stack 17
  6067                           
  6068                           ;Motor.c: 28: pMotor->mDelta = 0;
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;incstack = 0
  6072  01220A  C0E1  FFD9         	movff	Motor_Init@pMotor,fsr2l
  6073  01220E  C0E2  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  6074  012212  0E00               	movlw	0
  6075  012214  6EDE               	movwf	postinc2,c
  6076  012216  0E00               	movlw	0
  6077  012218  6EDD               	movwf	postdec2,c
  6078                           
  6079                           ;Motor.c: 29: pMotor->mFrequency = 0;
  6080  01221A  0100               	movlb	0	; () banked
  6081  01221C  EE20 F002          	lfsr	2,2
  6082  012220  51E1               	movf	Motor_Init@pMotor& (0+255),w,b
  6083  012222  26D9               	addwf	fsr2l,f,c
  6084  012224  51E2               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  6085  012226  22DA               	addwfc	fsr2h,f,c
  6086  012228  0E00               	movlw	0
  6087  01222A  6EDE               	movwf	postinc2,c
  6088  01222C  0E00               	movlw	0
  6089  01222E  6EDD               	movwf	postdec2,c
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  6093  012230  0100               	movlb	0	; () banked
  6094  012232  EE20 F004          	lfsr	2,4
  6095  012236  51E1               	movf	Motor_Init@pMotor& (0+255),w,b
  6096  012238  26D9               	addwf	fsr2l,f,c
  6097  01223A  51E2               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  6098  01223C  22DA               	addwfc	fsr2h,f,c
  6099  01223E  C0E3  FFDE         	movff	Motor_Init@pAddress,postinc2
  6100  012242  C0E4  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  6104  012246  0E99               	movlw	low _PortE
  6105  012248  0100               	movlb	0	; () banked
  6106  01224A  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  6107  01224C  0E01               	movlw	high _PortE
  6108  01224E  0100               	movlb	0	; () banked
  6109  012250  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6110  012252  0E00               	movlw	0
  6111  012254  0100               	movlb	0	; () banked
  6112  012256  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  6113  012258  0E03               	movlw	3
  6114  01225A  0100               	movlb	0	; () banked
  6115  01225C  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  6116  01225E  EC73  F089         	call	_Port_SetPinType	;wreg free
  6117                           
  6118                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  6119  012262  0E99               	movlw	low _PortE
  6120  012264  0100               	movlb	0	; () banked
  6121  012266  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  6122  012268  0E01               	movlw	high _PortE
  6123  01226A  0100               	movlb	0	; () banked
  6124  01226C  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  6125  01226E  0E01               	movlw	1
  6126  012270  0100               	movlb	0	; () banked
  6127  012272  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  6128  012274  0E03               	movlw	3
  6129  012276  0100               	movlb	0	; () banked
  6130  012278  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  6131  01227A  EC73  F089         	call	_Port_SetPinType	;wreg free
  6132                           
  6133                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  6134  01227E  0E99               	movlw	low _PortE
  6135  012280  0100               	movlb	0	; () banked
  6136  012282  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  6137  012284  0E01               	movlw	high _PortE
  6138  012286  0100               	movlb	0	; () banked
  6139  012288  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6140  01228A  0E00               	movlw	0
  6141  01228C  0100               	movlb	0	; () banked
  6142  01228E  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  6143  012290  0E00               	movlw	0
  6144  012292  0100               	movlb	0	; () banked
  6145  012294  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  6146  012296  EC75  F093         	call	_Port_SetPin	;wreg free
  6147                           
  6148                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  6149  01229A  0E99               	movlw	low _PortE
  6150  01229C  0100               	movlb	0	; () banked
  6151  01229E  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  6152  0122A0  0E01               	movlw	high _PortE
  6153  0122A2  0100               	movlb	0	; () banked
  6154  0122A4  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6155  0122A6  0E01               	movlw	1
  6156  0122A8  0100               	movlb	0	; () banked
  6157  0122AA  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  6158  0122AC  0E00               	movlw	0
  6159  0122AE  0100               	movlb	0	; () banked
  6160  0122B0  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  6161  0122B2  EC75  F093         	call	_Port_SetPin	;wreg free
  6162                           
  6163                           ;Motor.c: 38: lStepFunction = Motor_Step;
  6164  0122B6  0EF8               	movlw	low _Motor_Step
  6165  0122B8  0100               	movlb	0	; () banked
  6166  0122BA  6F78               	movwf	_lStepFunction& (0+255),b
  6167  0122BC  0E1E               	movlw	high _Motor_Step
  6168  0122BE  0100               	movlb	0	; () banked
  6169  0122C0  6F79               	movwf	(_lStepFunction+1)& (0+255),b
  6170  0122C2  0E01               	movlw	low (_Motor_Step shr (0+16))
  6171  0122C4  0100               	movlb	0	; () banked
  6172  0122C6  6F7A               	movwf	(_lStepFunction+2)& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;Motor.c: 39: Timer0_Init(1000);
  6176  0122C8  0EE8               	movlw	232
  6177  0122CA  0100               	movlb	0	; () banked
  6178  0122CC  6FC1               	movwf	Timer0_Init@pFrequency& (0+255),b
  6179  0122CE  0E03               	movlw	3
  6180  0122D0  6FC2               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  6181  0122D2  0E00               	movlw	0
  6182  0122D4  6FC3               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  6183  0122D6  0E00               	movlw	0
  6184  0122D8  6FC4               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  6185  0122DA  EC1A  F08E         	call	_Timer0_Init	;wreg free
  6186  0122DE  0012               	return		;funcret
  6187  0122E0                     __end_of_Motor_Init:
  6188                           	opt stack 0
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           intcon	equ	0xFF2
  6194                           postinc0	equ	0xFEE
  6195                           wreg	equ	0xFE8
  6196                           postdec1	equ	0xFE5
  6197                           fsr1h	equ	0xFE2
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           postinc2	equ	0xFDE
  6201                           postdec2	equ	0xFDD
  6202                           fsr2h	equ	0xFDA
  6203                           fsr2l	equ	0xFD9
  6204                           status	equ	0xFD8
  6205                           
  6206 ;; *************** function _Timer0_Init *****************
  6207 ;; Defined at:
  6208 ;;		line 25 in file "Library/Timer0.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  6213 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      void 
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;Total ram usage:       14 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    8
  6230 ;; This function calls:
  6231 ;;		_Timer0_Clear
  6232 ;;		___lldiv
  6233 ;; This function is called by:
  6234 ;;		_Motor_Init
  6235 ;;		_Motor_Speed
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text19
  6240  011C34                     __ptext19:
  6241                           	opt stack 0
  6242  011C34                     _Timer0_Init:
  6243                           	opt stack 20
  6244                           
  6245                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  6246                           
  6247                           ;incstack = 0
  6248  011C34  0E80               	movlw	128
  6249  011C36  0100               	movlb	0	; () banked
  6250  011C38  6FC7               	movwf	Timer0_Init@pCPUClock& (0+255),b
  6251  011C3A  0E8D               	movlw	141
  6252  011C3C  6FC8               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  6253  011C3E  0E5B               	movlw	91
  6254  011C40  6FC9               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  6255  011C42  0E00               	movlw	0
  6256  011C44  6FCA               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  6260                           ;Timer0.c: 31: static UINT8 PRE = 0;
  6261                           ;Timer0.c: 32: static UINT32 DIV = 0;
  6262                           ;Timer0.c: 34: UINT32 DIVIDE;
  6263                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
  6264  011C46  9ED5               	bcf	4053,7,c	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;Timer0.c: 38: if (pFrequency == 0)
  6268  011C48  0100               	movlb	0	; () banked
  6269  011C4A  51C1               	movf	Timer0_Init@pFrequency& (0+255),w,b
  6270  011C4C  0100               	movlb	0	; () banked
  6271  011C4E  11C2               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  6272  011C50  0100               	movlb	0	; () banked
  6273  011C52  11C3               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  6274  011C54  0100               	movlb	0	; () banked
  6275  011C56  11C4               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  6276  011C58  B4D8               	btfsc	status,2,c
  6277  011C5A  0012               	return	
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;Timer0.c: 41: T0CONbits.PSA = 0;
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;Timer0.c: 39: return;
  6284  011C5C  96D5               	bcf	4053,3,c	;volatile
  6285                           
  6286                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
  6287  011C5E  9CD5               	bcf	4053,6,c	;volatile
  6288                           
  6289                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
  6290  011C60  9AD5               	bcf	4053,5,c	;volatile
  6291                           
  6292                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
  6293  011C62  98D5               	bcf	4053,4,c	;volatile
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
  6297  011C64  C0C7  F0B4         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  6298  011C68  C0C8  F0B5         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  6299  011C6C  C0C9  F0B6         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  6300  011C70  C0CA  F0B7         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  6301  011C74  C0C1  F0B8         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  6302  011C78  C0C2  F0B9         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  6303  011C7C  C0C3  F0BA         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  6304  011C80  C0C4  F0BB         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  6305  011C84  EC94  F094         	call	___lldiv	;wreg free
  6306  011C88  C0B4  F0CB         	movff	?___lldiv,Timer0_Init@DIVIDE
  6307  011C8C  C0B5  F0CC         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  6308  011C90  C0B6  F0CD         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  6309  011C94  C0B7  F0CE         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  6310                           
  6311                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  6312  011C98  D00C               	goto	l2690
  6313  011C9A                     l15845:
  6314                           
  6315                           ;Timer0.c: 50: {
  6316                           ;Timer0.c: 51: INDEX ++;
  6317  011C9A  0100               	movlb	0	; () banked
  6318  011C9C  2B95               	incf	_INDEX& (0+255),f,b
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;Timer0.c: 52: if (INDEX >= 3)
  6322  011C9E  0E02               	movlw	2
  6323  011CA0  0100               	movlb	0	; () banked
  6324  011CA2  6595               	cpfsgt	_INDEX& (0+255),b
  6325  011CA4  D001               	goto	l2688
  6326  011CA6  D02F               	goto	u12450
  6327  011CA8                     l2688:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;Timer0.c: 56: if (INDEX >= 8)
  6331                           
  6332                           ; BSR set to: 0
  6333  011CA8  0E07               	movlw	7
  6334  011CAA  0100               	movlb	0	; () banked
  6335  011CAC  6595               	cpfsgt	_INDEX& (0+255),b
  6336  011CAE  D001               	goto	l2690
  6337  011CB0  0012               	return	
  6338  011CB2                     l2690:
  6339                           
  6340                           ; BSR set to: 0
  6341                           
  6342                           ; BSR set to: 0
  6343  011CB2  C0CB  F0B4         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  6344  011CB6  C0CC  F0B5         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  6345  011CBA  C0CD  F0B6         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  6346  011CBE  C0CE  F0B7         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  6347  011CC2  0100               	movlb	0	; () banked
  6348  011CC4  5195               	movf	_INDEX& (0+255),w,b
  6349  011CC6  0D02               	mullw	2
  6350  011CC8  0E95               	movlw	low Timer0_Init@PRESCALE
  6351  011CCA  24F3               	addwf	prodl,w,c
  6352  011CCC  6EF6               	movwf	tblptrl,c
  6353  011CCE  0EFC               	movlw	high Timer0_Init@PRESCALE
  6354  011CD0  20F4               	addwfc	prodh,w,c
  6355  011CD2  6EF7               	movwf	tblptrh,c
  6356  011CD4                     	if	1	;There are 3 active tblptr bytes
  6357  011CD4  6AF8               	clrf	tblptru,c
  6358  011CD6  0E00               	movlw	low (__mediumconst shr (0+16))
  6359  011CD8  22F8               	addwfc	tblptru,f,c
  6360  011CDA                     	endif
  6361  011CDA  0009               	tblrd		*+
  6362  011CDC  CFF5 F0C5          	movff	tablat,??_Timer0_Init
  6363  011CE0  0009               	tblrd		*+
  6364  011CE2  CFF5 F0C6          	movff	tablat,??_Timer0_Init+1
  6365  011CE6  C0C5  F0B8         	movff	??_Timer0_Init,___lldiv@divisor
  6366  011CEA  C0C6  F0B9         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  6367  011CEE  0100               	movlb	0	; () banked
  6368  011CF0  6BBA               	clrf	(___lldiv@divisor+2)& (0+255),b
  6369  011CF2  6BBB               	clrf	(___lldiv@divisor+3)& (0+255),b
  6370  011CF4  EC94  F094         	call	___lldiv	;wreg free
  6371  011CF8  0100               	movlb	0	; () banked
  6372  011CFA  51B7               	movf	(?___lldiv+3)& (0+255),w,b
  6373  011CFC  E1CE               	bnz	l15845
  6374  011CFE  0100               	movlb	0	; () banked
  6375  011D00  05B6               	decf	(?___lldiv+2)& (0+255),w,b
  6376  011D02  B0D8               	btfsc	status,0,c
  6377  011D04  D7CA               	goto	l2687
  6378  011D06                     u12450:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;Timer0.c: 58: }
  6382                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
  6383                           
  6384                           ; BSR set to: 0
  6385  011D06  0100               	movlb	0	; () banked
  6386  011D08  5195               	movf	_INDEX& (0+255),w,b
  6387  011D0A  0D02               	mullw	2
  6388  011D0C  0E95               	movlw	low Timer0_Init@PRESCALE
  6389  011D0E  24F3               	addwf	prodl,w,c
  6390  011D10  6EF6               	movwf	tblptrl,c
  6391  011D12  0EFC               	movlw	high Timer0_Init@PRESCALE
  6392  011D14  20F4               	addwfc	prodh,w,c
  6393  011D16  6EF7               	movwf	tblptrh,c
  6394  011D18                     	if	1	;There are 3 active tblptr bytes
  6395  011D18  6AF8               	clrf	tblptru,c
  6396  011D1A  0E00               	movlw	low (__mediumconst shr (0+16))
  6397  011D1C  22F8               	addwfc	tblptru,f,c
  6398  011D1E                     	endif
  6399  011D1E  0008               	tblrd		*
  6400  011D20  CFF5 F094          	movff	tablat,Timer0_Init@PRE
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;Timer0.c: 63: DIV = (DIVIDE-1);
  6404  011D24  0EFF               	movlw	255
  6405  011D26  0100               	movlb	0	; () banked
  6406  011D28  25CB               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  6407  011D2A  0101               	movlb	1	; () banked
  6408  011D2C  6F0A               	movwf	Timer0_Init@DIV& (0+255),b
  6409  011D2E  0EFF               	movlw	255
  6410  011D30  0100               	movlb	0	; () banked
  6411  011D32  21CC               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  6412  011D34  0101               	movlb	1	; () banked
  6413  011D36  6F0B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  6414  011D38  0EFF               	movlw	255
  6415  011D3A  0100               	movlb	0	; () banked
  6416  011D3C  21CD               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  6417  011D3E  0101               	movlb	1	; () banked
  6418  011D40  6F0C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  6419  011D42  0EFF               	movlw	255
  6420  011D44  0100               	movlb	0	; () banked
  6421  011D46  21CE               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  6422  011D48  0101               	movlb	1	; () banked
  6423  011D4A  6F0D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  6424                           
  6425                           ; BSR set to: 1
  6426                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
  6427  011D4C  C10A  F0B4         	movff	Timer0_Init@DIV,___lldiv@dividend
  6428  011D50  C10B  F0B5         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  6429  011D54  C10C  F0B6         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  6430  011D58  C10D  F0B7         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  6431  011D5C  0100               	movlb	0	; () banked
  6432  011D5E  5194               	movf	Timer0_Init@PRE& (0+255),w,b
  6433  011D60  0100               	movlb	0	; () banked
  6434  011D62  6FB8               	movwf	___lldiv@divisor& (0+255),b
  6435  011D64  6BB9               	clrf	(___lldiv@divisor+1)& (0+255),b
  6436  011D66  6BBA               	clrf	(___lldiv@divisor+2)& (0+255),b
  6437  011D68  6BBB               	clrf	(___lldiv@divisor+3)& (0+255),b
  6438  011D6A  EC94  F094         	call	___lldiv	;wreg free
  6439  011D6E  0100               	movlb	0	; () banked
  6440  011D70  1FB4               	comf	?___lldiv& (0+255),f,b
  6441  011D72  0100               	movlb	0	; () banked
  6442  011D74  1FB5               	comf	(?___lldiv+1)& (0+255),f,b
  6443  011D76  0100               	movlb	0	; () banked
  6444  011D78  4BB4               	infsnz	?___lldiv& (0+255),f,b
  6445  011D7A  2BB5               	incf	(?___lldiv+1)& (0+255),f,b
  6446  011D7C  0EFF               	movlw	255
  6447  011D7E  0100               	movlb	0	; () banked
  6448  011D80  25B4               	addwf	?___lldiv& (0+255),w,b
  6449  011D82  0100               	movlb	0	; () banked
  6450  011D84  6F7F               	movwf	_COUNTER& (0+255),b
  6451  011D86  0EFF               	movlw	255
  6452  011D88  0100               	movlb	0	; () banked
  6453  011D8A  21B5               	addwfc	(?___lldiv+1)& (0+255),w,b
  6454  011D8C  0100               	movlb	0	; () banked
  6455  011D8E  6F80               	movwf	(_COUNTER+1)& (0+255),b
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;Timer0.c: 68: Timer0_Clear();
  6459  011D90  ECE8  F0A0         	call	_Timer0_Clear	;wreg free
  6460                           
  6461                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
  6462  011D94  8ED5               	bsf	4053,7,c	;volatile
  6463  011D96  0012               	return		;funcret
  6464  011D98                     __end_of_Timer0_Init:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           postinc0	equ	0xFEE
  6474                           wreg	equ	0xFE8
  6475                           postdec1	equ	0xFE5
  6476                           fsr1h	equ	0xFE2
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _Timer0_Clear *****************
  6486 ;; Defined at:
  6487 ;;		line 20 in file "Library/Timer0.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		None
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    7
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_Timer0_Init
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text20
  6516  0141D0                     __ptext20:
  6517                           	opt stack 0
  6518  0141D0                     _Timer0_Clear:
  6519                           	opt stack 20
  6520                           
  6521                           ;Timer0.c: 22: TMR0 = COUNTER;
  6522                           
  6523                           ;incstack = 0
  6524  0141D0  C07F  FFD6         	movff	_COUNTER,4054	;volatile
  6525  0141D4  C080  FFD7         	movff	_COUNTER+1,4055	;volatile
  6526                           
  6527                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
  6528  0141D8  94F2               	bcf	intcon,2,c	;volatile
  6529  0141DA  0012               	return		;funcret
  6530  0141DC                     __end_of_Timer0_Clear:
  6531                           	opt stack 0
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodh	equ	0xFF4
  6537                           prodl	equ	0xFF3
  6538                           intcon	equ	0xFF2
  6539                           postinc0	equ	0xFEE
  6540                           wreg	equ	0xFE8
  6541                           postdec1	equ	0xFE5
  6542                           fsr1h	equ	0xFE2
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _FunctInitLCD *****************
  6552 ;; Defined at:
  6553 ;;		line 86 in file "Functions.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;Total ram usage:        0 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:   16
  6574 ;; This function calls:
  6575 ;;		_Console_Init
  6576 ;;		_LCD_Init
  6577 ;;		_MXK_BlockSwitchTo
  6578 ;;		_MXK_Dequeue
  6579 ;;		_MXK_Release
  6580 ;; This function is called by:
  6581 ;;		_main
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text21
  6586  013FB6                     __ptext21:
  6587                           	opt stack 0
  6588  013FB6                     _FunctInitLCD:
  6589                           	opt stack 14
  6590                           
  6591                           ;Functions.c: 88: if (MXK_BlockSwitchTo(eMXK_HMI))
  6592                           
  6593                           ;incstack = 0
  6594  013FB6  0E01               	movlw	1
  6595  013FB8  EC60  F09E         	call	_MXK_BlockSwitchTo
  6596  013FBC  0900               	iorlw	0
  6597  013FBE  B4D8               	btfsc	status,2,c
  6598  013FC0  0012               	return	
  6599                           
  6600                           ;Functions.c: 89: {
  6601                           ;Functions.c: 96: LCD_Init();
  6602  013FC2  ECAB  F08C         	call	_LCD_Init	;wreg free
  6603                           
  6604                           ;Functions.c: 126: Console_Init();
  6605  013FC6  EC78  F098         	call	_Console_Init	;wreg free
  6606                           
  6607                           ;Functions.c: 130: if(MXK_Release())
  6608  013FCA  EC9A  F0A0         	call	_MXK_Release	;wreg free
  6609  013FCE  0900               	iorlw	0
  6610  013FD0  B4D8               	btfsc	status,2,c
  6611  013FD2  0012               	return	
  6612                           
  6613                           ;Functions.c: 131: MXK_Dequeue();
  6614  013FD4  EC22  F09E         	call	_MXK_Dequeue	;wreg free
  6615  013FD8  0012               	return	
  6616  013FDA                     __end_of_FunctInitLCD:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1h	equ	0xFE2
  6629                           fsr1l	equ	0xFE1
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _LCD_Init *****************
  6638 ;; Defined at:
  6639 ;;		line 172 in file "Library/LCD.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;		None
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  i               2   55[BANK0 ] unsigned short 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;Total ram usage:        4 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:   15
  6660 ;; This function calls:
  6661 ;;		_Configure_GPIOs
  6662 ;;		_LCD_Fill
  6663 ;;		_LCD_Write
  6664 ;;		_Set_Rotation
  6665 ;;		_delay_ms
  6666 ;; This function is called by:
  6667 ;;		_FunctInitLCD
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text22
  6672  011956                     __ptext22:
  6673                           	opt stack 0
  6674  011956                     _LCD_Init:
  6675                           	opt stack 14
  6676                           
  6677                           ;LCD.c: 174: UINT16 i;
  6678                           ;LCD.c: 175: Configure_GPIOs();
  6679                           
  6680                           ;incstack = 0
  6681  011956  EC64  F09A         	call	_Configure_GPIOs	;wreg free
  6682                           
  6683                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  6684  01195A  0E00               	movlw	0
  6685  01195C  0100               	movlb	0	; () banked
  6686  01195E  6FEC               	movwf	(LCD_Init@i+1)& (0+255),b
  6687  011960  0E00               	movlw	0
  6688  011962  6FEB               	movwf	LCD_Init@i& (0+255),b
  6689                           
  6690                           ; BSR set to: 0
  6691  011964  0100               	movlb	0	; () banked
  6692  011966  51EC               	movf	(LCD_Init@i+1)& (0+255),w,b
  6693  011968  E106               	bnz	u12970
  6694  01196A  0E59               	movlw	89
  6695  01196C  0100               	movlb	0	; () banked
  6696  01196E  5DEB               	subwf	LCD_Init@i& (0+255),w,b
  6697  011970  B0D8               	btfsc	status,0,c
  6698  011972  D08B               	goto	u13010
  6699  011974  D001               	goto	l637
  6700  011976                     u12970:
  6701                           
  6702                           ; BSR set to: 0
  6703  011976  D089               	goto	u13010
  6704  011978                     l637:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;LCD.c: 178: {
  6708                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  6709                           
  6710                           ; BSR set to: 0
  6711  011978  90D8               	bcf	status,0,c
  6712  01197A  0100               	movlb	0	; () banked
  6713  01197C  35EB               	rlcf	LCD_Init@i& (0+255),w,b
  6714  01197E  6EF6               	movwf	tblptrl,c
  6715  011980  0100               	movlb	0	; () banked
  6716  011982  35EC               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6717  011984  6EF7               	movwf	tblptrh,c
  6718  011986  0EE3               	movlw	low _InitList
  6719  011988  26F6               	addwf	tblptrl,f,c
  6720  01198A  0EFB               	movlw	high _InitList
  6721  01198C  22F7               	addwfc	tblptrh,f,c
  6722  01198E                     	if	1	;There are 3 active tblptr bytes
  6723  01198E  6AF8               	clrf	tblptru,c
  6724  011990  0E00               	movlw	low (__mediumconst shr (0+16))
  6725  011992  22F8               	addwfc	tblptru,f,c
  6726  011994                     	endif
  6727  011994  0009               	tblrd		*+
  6728  011996  0E80               	movlw	128
  6729  011998  18F5               	xorwf	tablat,w,c
  6730  01199A  0009               	tblrd		*+
  6731  01199C  10F5               	iorwf	tablat,w,c
  6732  01199E  A4D8               	btfss	status,2,c
  6733  0119A0  D022               	goto	l639
  6734                           
  6735                           ; BSR set to: 0
  6736  0119A2  0100               	movlb	0	; () banked
  6737  0119A4  51EC               	movf	(LCD_Init@i+1)& (0+255),w,b
  6738  0119A6  E11F               	bnz	l16189
  6739  0119A8  0E58               	movlw	88
  6740  0119AA  0100               	movlb	0	; () banked
  6741  0119AC  5DEB               	subwf	LCD_Init@i& (0+255),w,b
  6742  0119AE  B0D8               	btfsc	status,0,c
  6743  0119B0  D01A               	goto	l639
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;LCD.c: 180: delay_ms(InitList[++i]);
  6747  0119B2  0100               	movlb	0	; () banked
  6748  0119B4  4BEB               	infsnz	LCD_Init@i& (0+255),f,b
  6749  0119B6  2BEC               	incf	(LCD_Init@i+1)& (0+255),f,b
  6750  0119B8  90D8               	bcf	status,0,c
  6751  0119BA  0100               	movlb	0	; () banked
  6752  0119BC  35EB               	rlcf	LCD_Init@i& (0+255),w,b
  6753  0119BE  6EF6               	movwf	tblptrl,c
  6754  0119C0  0100               	movlb	0	; () banked
  6755  0119C2  35EC               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6756  0119C4  6EF7               	movwf	tblptrh,c
  6757  0119C6  0EE3               	movlw	low _InitList
  6758  0119C8  26F6               	addwf	tblptrl,f,c
  6759  0119CA  0EFB               	movlw	high _InitList
  6760  0119CC  22F7               	addwfc	tblptrh,f,c
  6761  0119CE                     	if	1	;There are 3 active tblptr bytes
  6762  0119CE  6AF8               	clrf	tblptru,c
  6763  0119D0  0E00               	movlw	low (__mediumconst shr (0+16))
  6764  0119D2  22F8               	addwfc	tblptru,f,c
  6765  0119D4                     	endif
  6766  0119D4  0009               	tblrd		*+
  6767  0119D6  CFF5 F0B4          	movff	tablat,delay_ms@ms
  6768  0119DA  000A               	tblrd		*-
  6769  0119DC  CFF5 F0B5          	movff	tablat,delay_ms@ms+1
  6770  0119E0  EC0A  F09B         	call	_delay_ms	;wreg free
  6771  0119E4  D04B               	goto	l642
  6772  0119E6                     l639:
  6773  0119E6                     l16189:
  6774                           
  6775                           ;LCD.c: 181: else
  6776                           ;LCD.c: 182: {
  6777                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  6778  0119E6  90D8               	bcf	status,0,c
  6779  0119E8  0100               	movlb	0	; () banked
  6780  0119EA  35EB               	rlcf	LCD_Init@i& (0+255),w,b
  6781  0119EC  6EF6               	movwf	tblptrl,c
  6782  0119EE  0100               	movlb	0	; () banked
  6783  0119F0  35EC               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6784  0119F2  6EF7               	movwf	tblptrh,c
  6785  0119F4  0EE3               	movlw	low _InitList
  6786  0119F6  26F6               	addwf	tblptrl,f,c
  6787  0119F8  0EFB               	movlw	high _InitList
  6788  0119FA  22F7               	addwfc	tblptrh,f,c
  6789  0119FC                     	if	1	;There are 3 active tblptr bytes
  6790  0119FC  6AF8               	clrf	tblptru,c
  6791  0119FE  0E00               	movlw	low (__mediumconst shr (0+16))
  6792  011A00  22F8               	addwfc	tblptru,f,c
  6793  011A02                     	endif
  6794  011A02  0009               	tblrd		*+
  6795  011A04  0E00               	movlw	0
  6796  011A06  5EF5               	subwf	tablat,f,c
  6797  011A08  0009               	tblrd		*+
  6798  011A0A  0E01               	movlw	1
  6799  011A0C  5AF5               	subwfb	tablat,f,c
  6800  011A0E  A0D8               	btfss	status,0,c
  6801  011A10  D020               	goto	l641
  6802                           
  6803                           ; BSR set to: 0
  6804  011A12  0E00               	movlw	0
  6805  011A14  0100               	movlb	0	; () banked
  6806  011A16  6FB7               	movwf	LCD_Write@mode& (0+255),b
  6807  011A18  90D8               	bcf	status,0,c
  6808  011A1A  0100               	movlb	0	; () banked
  6809  011A1C  35EB               	rlcf	LCD_Init@i& (0+255),w,b
  6810  011A1E  6EF6               	movwf	tblptrl,c
  6811  011A20  0100               	movlb	0	; () banked
  6812  011A22  35EC               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6813  011A24  6EF7               	movwf	tblptrh,c
  6814  011A26  0EE3               	movlw	low _InitList
  6815  011A28  26F6               	addwf	tblptrl,f,c
  6816  011A2A  0EFB               	movlw	high _InitList
  6817  011A2C  22F7               	addwfc	tblptrh,f,c
  6818  011A2E                     	if	1	;There are 3 active tblptr bytes
  6819  011A2E  6AF8               	clrf	tblptru,c
  6820  011A30  0E00               	movlw	low (__mediumconst shr (0+16))
  6821  011A32  22F8               	addwfc	tblptru,f,c
  6822  011A34                     	endif
  6823  011A34  0009               	tblrd		*+
  6824  011A36  CFF5 F0E9          	movff	tablat,??_LCD_Init
  6825  011A3A  0009               	tblrd		*+
  6826  011A3C  CFF5 F0EA          	movff	tablat,??_LCD_Init+1
  6827  011A40  C0EA  F0E9         	movff	??_LCD_Init+1,??_LCD_Init
  6828  011A44  0100               	movlb	0	; () banked
  6829  011A46  6BEA               	clrf	(??_LCD_Init+1)& (0+255),b
  6830  011A48  0100               	movlb	0	; () banked
  6831  011A4A  51E9               	movf	??_LCD_Init& (0+255),w,b
  6832  011A4C  EC20  F0A0         	call	_LCD_Write
  6833  011A50  D015               	goto	l642
  6834  011A52                     l641:
  6835                           
  6836                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  6837  011A52  0E01               	movlw	1
  6838  011A54  0100               	movlb	0	; () banked
  6839  011A56  6FB7               	movwf	LCD_Write@mode& (0+255),b
  6840  011A58  90D8               	bcf	status,0,c
  6841  011A5A  0100               	movlb	0	; () banked
  6842  011A5C  35EB               	rlcf	LCD_Init@i& (0+255),w,b
  6843  011A5E  6EF6               	movwf	tblptrl,c
  6844  011A60  0100               	movlb	0	; () banked
  6845  011A62  35EC               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6846  011A64  6EF7               	movwf	tblptrh,c
  6847  011A66  0EE3               	movlw	low _InitList
  6848  011A68  26F6               	addwf	tblptrl,f,c
  6849  011A6A  0EFB               	movlw	high _InitList
  6850  011A6C  22F7               	addwfc	tblptrh,f,c
  6851  011A6E                     	if	1	;There are 3 active tblptr bytes
  6852  011A6E  6AF8               	clrf	tblptru,c
  6853  011A70  0E00               	movlw	low (__mediumconst shr (0+16))
  6854  011A72  22F8               	addwfc	tblptru,f,c
  6855  011A74                     	endif
  6856  011A74  0008               	tblrd		*
  6857  011A76  50F5               	movf	tablat,w,c
  6858  011A78  EC20  F0A0         	call	_LCD_Write
  6859  011A7C                     l642:
  6860  011A7C  0100               	movlb	0	; () banked
  6861  011A7E  4BEB               	infsnz	LCD_Init@i& (0+255),f,b
  6862  011A80  2BEC               	incf	(LCD_Init@i+1)& (0+255),f,b
  6863                           
  6864                           ; BSR set to: 0
  6865  011A82  0100               	movlb	0	; () banked
  6866  011A84  51EC               	movf	(LCD_Init@i+1)& (0+255),w,b
  6867  011A86  E101               	bnz	l16199
  6868  011A88  D770               	goto	L5
  6869  011A8A                     u13010:
  6870  011A8A                     l16199:
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;LCD.c: 185: }
  6874                           ;LCD.c: 186: }
  6875                           ;LCD.c: 187: delay_ms(100);
  6876  011A8A  0E00               	movlw	0
  6877  011A8C  0100               	movlb	0	; () banked
  6878  011A8E  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  6879  011A90  0E64               	movlw	100
  6880  011A92  6FB4               	movwf	delay_ms@ms& (0+255),b
  6881  011A94  EC0A  F09B         	call	_delay_ms	;wreg free
  6882                           
  6883                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  6884  011A98  0E00               	movlw	0
  6885  011A9A  0100               	movlb	0	; () banked
  6886  011A9C  6FB7               	movwf	LCD_Write@mode& (0+255),b
  6887  011A9E  0E29               	movlw	41
  6888  011AA0  EC20  F0A0         	call	_LCD_Write
  6889                           
  6890                           ;LCD.c: 189: Set_Rotation(1);
  6891  011AA4  0E01               	movlw	1
  6892  011AA6  ECE3  F097         	call	_Set_Rotation
  6893                           
  6894                           ;LCD.c: 191: delay_ms(100);
  6895  011AAA  0E00               	movlw	0
  6896  011AAC  0100               	movlb	0	; () banked
  6897  011AAE  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  6898  011AB0  0E64               	movlw	100
  6899  011AB2  6FB4               	movwf	delay_ms@ms& (0+255),b
  6900  011AB4  EC0A  F09B         	call	_delay_ms	;wreg free
  6901                           
  6902                           ;LCD.c: 192: LCD_Fill(0x0000);
  6903  011AB8  0E00               	movlw	0
  6904  011ABA  0100               	movlb	0	; () banked
  6905  011ABC  6FBE               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  6906  011ABE  0E00               	movlw	0
  6907  011AC0  6FBD               	movwf	LCD_Fill@pColour& (0+255),b
  6908  011AC2  EC68  F09C         	call	_LCD_Fill	;wreg free
  6909  011AC6  0012               	return		;funcret
  6910  011AC8                     __end_of_LCD_Init:
  6911                           	opt stack 0
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           intcon	equ	0xFF2
  6919                           postinc0	equ	0xFEE
  6920                           wreg	equ	0xFE8
  6921                           postdec1	equ	0xFE5
  6922                           fsr1h	equ	0xFE2
  6923                           fsr1l	equ	0xFE1
  6924                           indf2	equ	0xFDF
  6925                           postinc2	equ	0xFDE
  6926                           postdec2	equ	0xFDD
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _Set_Rotation *****************
  6932 ;; Defined at:
  6933 ;;		line 248 in file "Library/LCD.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  m               1    wreg     unsigned char 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  m               1    5[BANK0 ] unsigned char 
  6938 ;;  rotation        1    6[BANK0 ] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;Total ram usage:        2 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    9
  6955 ;; This function calls:
  6956 ;;		_LCD_Write
  6957 ;; This function is called by:
  6958 ;;		_LCD_Init
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text23
  6963  012FC6                     __ptext23:
  6964                           	opt stack 0
  6965  012FC6                     _Set_Rotation:
  6966                           	opt stack 19
  6967                           
  6968                           ;incstack = 0
  6969                           ;Set_Rotation@m stored from wreg
  6970  012FC6  0100               	movlb	0	; () banked
  6971  012FC8  6FB9               	movwf	Set_Rotation@m& (0+255),b
  6972                           
  6973                           ;LCD.c: 250: UINT8 rotation = 0x00;
  6974  012FCA  0E00               	movlw	0
  6975  012FCC  0100               	movlb	0	; () banked
  6976  012FCE  6FBA               	movwf	Set_Rotation@rotation& (0+255),b
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  6980  012FD0  0E00               	movlw	0
  6981  012FD2  0100               	movlb	0	; () banked
  6982  012FD4  6FB7               	movwf	LCD_Write@mode& (0+255),b
  6983  012FD6  0E36               	movlw	54
  6984  012FD8  EC20  F0A0         	call	_LCD_Write
  6985                           
  6986                           ;LCD.c: 253: rotation = (m % 4);
  6987  012FDC  0100               	movlb	0	; () banked
  6988  012FDE  51B9               	movf	Set_Rotation@m& (0+255),w,b
  6989  012FE0  0B03               	andlw	3
  6990  012FE2  0100               	movlb	0	; () banked
  6991  012FE4  6FBA               	movwf	Set_Rotation@rotation& (0+255),b
  6992                           
  6993                           ;LCD.c: 255: switch(rotation)
  6994  012FE6  D02C               	goto	l669
  6995  012FE8                     
  6996                           ; BSR set to: 0
  6997                           ;LCD.c: 258: {
  6998                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  6999                           
  7000                           ; BSR set to: 0
  7001  012FE8  0E01               	movlw	1
  7002  012FEA  0100               	movlb	0	; () banked
  7003  012FEC  6FB7               	movwf	LCD_Write@mode& (0+255),b
  7004  012FEE  0EC8               	movlw	200
  7005  012FF0  EC20  F0A0         	call	_LCD_Write
  7006                           
  7007                           ;LCD.c: 260: w = 128;
  7008  012FF4  0E80               	movlw	128
  7009  012FF6  6E50               	movwf	_w,c
  7010                           
  7011                           ;LCD.c: 261: l = 128;
  7012  012FF8  0E80               	movlw	128
  7013  012FFA  6E4F               	movwf	_l,c
  7014                           
  7015                           ;LCD.c: 262: break;
  7016  012FFC  0012               	return	
  7017  012FFE                     
  7018                           ;LCD.c: 265: {
  7019                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  7020  012FFE  0E01               	movlw	1
  7021  013000  0100               	movlb	0	; () banked
  7022  013002  6FB7               	movwf	LCD_Write@mode& (0+255),b
  7023  013004  0EA8               	movlw	168
  7024  013006  EC20  F0A0         	call	_LCD_Write
  7025                           
  7026                           ;LCD.c: 267: w = 128;
  7027  01300A  0E80               	movlw	128
  7028  01300C  6E50               	movwf	_w,c
  7029                           
  7030                           ;LCD.c: 268: l = 128;
  7031  01300E  0E80               	movlw	128
  7032  013010  6E4F               	movwf	_l,c
  7033                           
  7034                           ;LCD.c: 269: break;
  7035  013012  0012               	return	
  7036  013014                     
  7037                           ;LCD.c: 272: {
  7038                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  7039  013014  0E01               	movlw	1
  7040  013016  0100               	movlb	0	; () banked
  7041  013018  6FB7               	movwf	LCD_Write@mode& (0+255),b
  7042  01301A  0E08               	movlw	8
  7043  01301C  EC20  F0A0         	call	_LCD_Write
  7044                           
  7045                           ;LCD.c: 274: w = 128;
  7046  013020  0E80               	movlw	128
  7047  013022  6E50               	movwf	_w,c
  7048                           
  7049                           ;LCD.c: 275: l = 128;
  7050  013024  0E80               	movlw	128
  7051  013026  6E4F               	movwf	_l,c
  7052                           
  7053                           ;LCD.c: 276: break;
  7054  013028  0012               	return	
  7055  01302A                     
  7056                           ;LCD.c: 279: {
  7057                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  7058  01302A  0E01               	movlw	1
  7059  01302C  0100               	movlb	0	; () banked
  7060  01302E  6FB7               	movwf	LCD_Write@mode& (0+255),b
  7061  013030  0E68               	movlw	104
  7062  013032  EC20  F0A0         	call	_LCD_Write
  7063                           
  7064                           ;LCD.c: 281: w = 128;
  7065  013036  0E80               	movlw	128
  7066  013038  6E50               	movwf	_w,c
  7067                           
  7068                           ;LCD.c: 282: l = 128;
  7069  01303A  0E80               	movlw	128
  7070  01303C  6E4F               	movwf	_l,c
  7071                           
  7072                           ;LCD.c: 284: }
  7073                           ;LCD.c: 285: }
  7074                           
  7075                           ;LCD.c: 283: break;
  7076  01303E  0012               	return	
  7077  013040                     l669:
  7078  013040  0100               	movlb	0	; () banked
  7079  013042  51BA               	movf	Set_Rotation@rotation& (0+255),w,b
  7080                           
  7081                           ; Switch size 1, requested type "space"
  7082                           ; Number of cases is 4, Range of values is 0 to 3
  7083                           ; switch strategies available:
  7084                           ; Name         Instructions Cycles
  7085                           ; simple_byte           13     7 (average)
  7086                           ;	Chosen strategy is simple_byte
  7087  013044  0A00               	xorlw	0	; case 0
  7088  013046  B4D8               	btfsc	status,2,c
  7089  013048  D7CF               	goto	l670
  7090  01304A  0A01               	xorlw	1	; case 1
  7091  01304C  B4D8               	btfsc	status,2,c
  7092  01304E  D7D7               	goto	l672
  7093  013050  0A03               	xorlw	3	; case 2
  7094  013052  B4D8               	btfsc	status,2,c
  7095  013054  D7DF               	goto	l673
  7096  013056  0A01               	xorlw	1	; case 3
  7097  013058  A4D8               	btfss	status,2,c
  7098  01305A  0012               	return	
  7099  01305C  D7E6               	goto	l674
  7100  01305E                     __end_of_Set_Rotation:
  7101                           	opt stack 0
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           intcon	equ	0xFF2
  7109                           postinc0	equ	0xFEE
  7110                           wreg	equ	0xFE8
  7111                           postdec1	equ	0xFE5
  7112                           fsr1h	equ	0xFE2
  7113                           fsr1l	equ	0xFE1
  7114                           indf2	equ	0xFDF
  7115                           postinc2	equ	0xFDE
  7116                           postdec2	equ	0xFDD
  7117                           fsr2h	equ	0xFDA
  7118                           fsr2l	equ	0xFD9
  7119                           status	equ	0xFD8
  7120                           
  7121 ;; *************** function _LCD_Fill *****************
  7122 ;; Defined at:
  7123 ;;		line 287 in file "Library/LCD.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  pColour         2    9[BANK0 ] unsigned short 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  j               1   12[BANK0 ] unsigned char 
  7128 ;;  i               1   11[BANK0 ] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  1    wreg      void 
  7131 ;; Registers used:
  7132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        4 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:   10
  7145 ;; This function calls:
  7146 ;;		_LCD_Word_Write
  7147 ;;		_Set_Addr_Window
  7148 ;; This function is called by:
  7149 ;;		_LCD_Init
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text24
  7154  0138D0                     __ptext24:
  7155                           	opt stack 0
  7156  0138D0                     _LCD_Fill:
  7157                           	opt stack 18
  7158                           
  7159                           ;LCD.c: 296: UINT8 i = 0x00;
  7160                           
  7161                           ;incstack = 0
  7162  0138D0  0E00               	movlw	0
  7163  0138D2  0100               	movlb	0	; () banked
  7164  0138D4  6FBF               	movwf	LCD_Fill@i& (0+255),b
  7165                           
  7166                           ;LCD.c: 297: UINT8 j = 0x00;
  7167  0138D6  0E00               	movlw	0
  7168  0138D8  0100               	movlb	0	; () banked
  7169  0138DA  6FC0               	movwf	LCD_Fill@j& (0+255),b
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  7173  0138DC  0E00               	movlw	0
  7174  0138DE  0100               	movlb	0	; () banked
  7175  0138E0  6FB9               	movwf	Set_Addr_Window@ys& (0+255),b
  7176  0138E2  0450               	decf	_w,w,c
  7177  0138E4  0100               	movlb	0	; () banked
  7178  0138E6  6FBA               	movwf	Set_Addr_Window@xe& (0+255),b
  7179  0138E8  044F               	decf	_l,w,c
  7180  0138EA  0100               	movlb	0	; () banked
  7181  0138EC  6FBB               	movwf	Set_Addr_Window@ye& (0+255),b
  7182  0138EE  0E00               	movlw	0
  7183  0138F0  EC4D  F095         	call	_Set_Addr_Window
  7184                           
  7185                           ;LCD.c: 299: for (j = l; j > 0; j--)
  7186  0138F4  C04F  F0C0         	movff	_l,LCD_Fill@j
  7187  0138F8                     l15221:
  7188  0138F8  0100               	movlb	0	; () banked
  7189  0138FA  51C0               	movf	LCD_Fill@j& (0+255),w,b
  7190  0138FC  0100               	movlb	0	; () banked
  7191  0138FE  B4D8               	btfsc	status,2,c
  7192  013900  0012               	return	
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;LCD.c: 300: for (i = w; i > 0; i--)
  7196                           
  7197                           ; BSR set to: 0
  7198  013902  C050  F0BF         	movff	_w,LCD_Fill@i
  7199  013906                     l15225:
  7200                           
  7201                           ; BSR set to: 0
  7202  013906  0100               	movlb	0	; () banked
  7203  013908  51BF               	movf	LCD_Fill@i& (0+255),w,b
  7204  01390A  0100               	movlb	0	; () banked
  7205  01390C  B4D8               	btfsc	status,2,c
  7206  01390E  D009               	goto	u12120
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;LCD.c: 301: LCD_Word_Write(pColour);
  7210                           
  7211                           ; BSR set to: 0
  7212                           
  7213                           ; BSR set to: 0
  7214  013910  C0BD  F0B9         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  7215  013914  C0BE  F0BA         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  7216  013918  EC8B  F0A0         	call	_LCD_Word_Write	;wreg free
  7217  01391C  0100               	movlb	0	; () banked
  7218  01391E  07BF               	decf	LCD_Fill@i& (0+255),f,b
  7219  013920  D7F2               	goto	l15225
  7220  013922                     u12120:
  7221                           
  7222                           ; BSR set to: 0
  7223                           
  7224                           ; BSR set to: 0
  7225  013922  0100               	movlb	0	; () banked
  7226  013924  07C0               	decf	LCD_Fill@j& (0+255),f,b
  7227  013926  D7E8               	goto	l15221
  7228  013928                     __end_of_LCD_Fill:
  7229                           	opt stack 0
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           prodh	equ	0xFF4
  7235                           prodl	equ	0xFF3
  7236                           intcon	equ	0xFF2
  7237                           postinc0	equ	0xFEE
  7238                           wreg	equ	0xFE8
  7239                           postdec1	equ	0xFE5
  7240                           fsr1h	equ	0xFE2
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _Configure_GPIOs *****************
  7250 ;; Defined at:
  7251 ;;		line 46 in file "Library/LCD.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;		None
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        0 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:   14
  7272 ;; This function calls:
  7273 ;;		_LCD_Reset
  7274 ;;		_Port_SetPinType
  7275 ;;		_SPI_Init
  7276 ;;		_SPI_MaxSpeed
  7277 ;; This function is called by:
  7278 ;;		_LCD_Init
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text25
  7283  0134C8                     __ptext25:
  7284                           	opt stack 0
  7285  0134C8                     _Configure_GPIOs:
  7286                           	opt stack 14
  7287                           
  7288                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;incstack = 0
  7292  0134C8  0EB7               	movlw	low _PortF
  7293  0134CA  0100               	movlb	0	; () banked
  7294  0134CC  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  7295  0134CE  0E01               	movlw	high _PortF
  7296  0134D0  0100               	movlb	0	; () banked
  7297  0134D2  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7298  0134D4  0E07               	movlw	7
  7299  0134D6  0100               	movlb	0	; () banked
  7300  0134D8  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  7301  0134DA  0E03               	movlw	3
  7302  0134DC  0100               	movlb	0	; () banked
  7303  0134DE  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  7304  0134E0  EC73  F089         	call	_Port_SetPinType	;wreg free
  7305                           
  7306                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  7307  0134E4  0EB7               	movlw	low _PortF
  7308  0134E6  0100               	movlb	0	; () banked
  7309  0134E8  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  7310  0134EA  0E01               	movlw	high _PortF
  7311  0134EC  0100               	movlb	0	; () banked
  7312  0134EE  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7313  0134F0  0E06               	movlw	6
  7314  0134F2  0100               	movlb	0	; () banked
  7315  0134F4  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  7316  0134F6  0E03               	movlw	3
  7317  0134F8  0100               	movlb	0	; () banked
  7318  0134FA  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  7319  0134FC  EC73  F089         	call	_Port_SetPinType	;wreg free
  7320                           
  7321                           ;LCD.c: 55: LCD_Reset();
  7322  013500  ECE5  F09C         	call	_LCD_Reset	;wreg free
  7323                           
  7324                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  7325  013504  0EC0               	movlw	192
  7326  013506  0100               	movlb	0	; () banked
  7327  013508  6FE1               	movwf	SPI_Init@pClock& (0+255),b
  7328  01350A  0EC6               	movlw	198
  7329  01350C  6FE2               	movwf	(SPI_Init@pClock+1)& (0+255),b
  7330  01350E  0E2D               	movlw	45
  7331  013510  6FE3               	movwf	(SPI_Init@pClock+2)& (0+255),b
  7332  013512  0E00               	movlw	0
  7333  013514  6FE4               	movwf	(SPI_Init@pClock+3)& (0+255),b
  7334  013516  0E01               	movlw	1
  7335  013518  0100               	movlb	0	; () banked
  7336  01351A  6FE5               	movwf	SPI_Init@pChannel& (0+255),b
  7337  01351C  0E01               	movlw	1
  7338  01351E  0100               	movlb	0	; () banked
  7339  013520  6FE6               	movwf	SPI_Init@pMode& (0+255),b
  7340  013522  EC00  F080         	call	_SPI_Init	;wreg free
  7341                           
  7342                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  7343  013526  0E7A               	movlw	low _SPI2
  7344  013528  0100               	movlb	0	; () banked
  7345  01352A  6FC3               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  7346  01352C  0E01               	movlw	high _SPI2
  7347  01352E  0100               	movlb	0	; () banked
  7348  013530  6FC4               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  7349  013532  ECB6  F099         	call	_SPI_MaxSpeed	;wreg free
  7350  013536  0012               	return		;funcret
  7351  013538                     __end_of_Configure_GPIOs:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1h	equ	0xFE2
  7364                           fsr1l	equ	0xFE1
  7365                           indf2	equ	0xFDF
  7366                           postinc2	equ	0xFDE
  7367                           postdec2	equ	0xFDD
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function _SPI_MaxSpeed *****************
  7373 ;; Defined at:
  7374 ;;		line 201 in file "Library/SPI.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  7377 ;;		 -> SPI2(11), 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;		None
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  1    wreg      void 
  7382 ;; Registers used:
  7383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;Total ram usage:        2 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:    9
  7396 ;; This function calls:
  7397 ;;		_Byte_SetBit
  7398 ;;		_Byte_SetQuad
  7399 ;; This function is called by:
  7400 ;;		_Configure_GPIOs
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text26
  7405  01336C                     __ptext26:
  7406                           	opt stack 0
  7407  01336C                     _SPI_MaxSpeed:
  7408                           	opt stack 18
  7409                           
  7410                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  7411                           
  7412                           ;incstack = 0
  7413  01336C  0100               	movlb	0	; () banked
  7414  01336E  EE20 F006          	lfsr	2,6
  7415  013372  51C3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7416  013374  26D9               	addwf	fsr2l,f,c
  7417  013376  51C4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7418  013378  22DA               	addwfc	fsr2h,f,c
  7419  01337A  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  7420  01337E  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  7421  013382  0E05               	movlw	5
  7422  013384  0100               	movlb	0	; () banked
  7423  013386  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  7424  013388  0E00               	movlw	0
  7425  01338A  0100               	movlb	0	; () banked
  7426  01338C  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  7427  01338E  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  7428                           
  7429                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  7430  013392  0100               	movlb	0	; () banked
  7431  013394  EE20 F006          	lfsr	2,6
  7432  013398  51C3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7433  01339A  26D9               	addwf	fsr2l,f,c
  7434  01339C  51C4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7435  01339E  22DA               	addwfc	fsr2h,f,c
  7436  0133A0  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
  7437  0133A4  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
  7438  0133A8  0E00               	movlw	0
  7439  0133AA  0100               	movlb	0	; () banked
  7440  0133AC  6FC1               	movwf	Byte_SetQuad@pQuad& (0+255),b
  7441  0133AE  0E00               	movlw	0
  7442  0133B0  0100               	movlb	0	; () banked
  7443  0133B2  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
  7444  0133B4  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
  7445                           
  7446                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  7447  0133B8  0100               	movlb	0	; () banked
  7448  0133BA  EE20 F006          	lfsr	2,6
  7449  0133BE  51C3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7450  0133C0  26D9               	addwf	fsr2l,f,c
  7451  0133C2  51C4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7452  0133C4  22DA               	addwfc	fsr2h,f,c
  7453  0133C6  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  7454  0133CA  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  7455  0133CE  0E05               	movlw	5
  7456  0133D0  0100               	movlb	0	; () banked
  7457  0133D2  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  7458  0133D4  0E01               	movlw	1
  7459  0133D6  0100               	movlb	0	; () banked
  7460  0133D8  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  7461  0133DA  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  7462  0133DE  0012               	return		;funcret
  7463  0133E0                     __end_of_SPI_MaxSpeed:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           postinc0	equ	0xFEE
  7473                           wreg	equ	0xFE8
  7474                           postdec1	equ	0xFE5
  7475                           fsr1h	equ	0xFE2
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function _LCD_Reset *****************
  7485 ;; Defined at:
  7486 ;;		line 95 in file "Library/LCD.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;		None
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;		None
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  1    wreg      void 
  7493 ;; Registers used:
  7494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7495 ;; Tracked objects:
  7496 ;;		On entry : 0/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7504 ;;Total ram usage:        0 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; Hardware stack levels required when called:   13
  7507 ;; This function calls:
  7508 ;;		_LED_Toggle
  7509 ;;		_Reset_High
  7510 ;;		_Reset_Low
  7511 ;;		_delay_ms
  7512 ;; This function is called by:
  7513 ;;		_Configure_GPIOs
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text27
  7518  0139CA                     __ptext27:
  7519                           	opt stack 0
  7520  0139CA                     _LCD_Reset:
  7521                           	opt stack 14
  7522                           
  7523                           ;LCD.c: 97: Reset_High();
  7524                           
  7525                           ;incstack = 0
  7526  0139CA  EC4F  F0A0         	call	_Reset_High	;wreg free
  7527                           
  7528                           ;LCD.c: 98: LED_Toggle(eLED2);
  7529  0139CE  0E01               	movlw	1
  7530  0139D0  EC57  F09D         	call	_LED_Toggle
  7531                           
  7532                           ;LCD.c: 99: delay_ms(0x80);
  7533  0139D4  0E00               	movlw	0
  7534  0139D6  0100               	movlb	0	; () banked
  7535  0139D8  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  7536  0139DA  0E80               	movlw	128
  7537  0139DC  6FB4               	movwf	delay_ms@ms& (0+255),b
  7538  0139DE  EC0A  F09B         	call	_delay_ms	;wreg free
  7539                           
  7540                           ;LCD.c: 100: LED_Toggle(eLED2);
  7541  0139E2  0E01               	movlw	1
  7542  0139E4  EC57  F09D         	call	_LED_Toggle
  7543                           
  7544                           ;LCD.c: 101: Reset_Low();
  7545  0139E8  EC40  F0A0         	call	_Reset_Low	;wreg free
  7546                           
  7547                           ;LCD.c: 102: delay_ms(0x80);
  7548  0139EC  0E00               	movlw	0
  7549  0139EE  0100               	movlb	0	; () banked
  7550  0139F0  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  7551  0139F2  0E80               	movlw	128
  7552  0139F4  6FB4               	movwf	delay_ms@ms& (0+255),b
  7553  0139F6  EC0A  F09B         	call	_delay_ms	;wreg free
  7554                           
  7555                           ;LCD.c: 103: LED_Toggle(eLED2);
  7556  0139FA  0E01               	movlw	1
  7557  0139FC  EC57  F09D         	call	_LED_Toggle
  7558                           
  7559                           ;LCD.c: 104: Reset_High();
  7560  013A00  EC4F  F0A0         	call	_Reset_High	;wreg free
  7561                           
  7562                           ;LCD.c: 105: delay_ms(0x80);
  7563  013A04  0E00               	movlw	0
  7564  013A06  0100               	movlb	0	; () banked
  7565  013A08  6FB5               	movwf	(delay_ms@ms+1)& (0+255),b
  7566  013A0A  0E80               	movlw	128
  7567  013A0C  6FB4               	movwf	delay_ms@ms& (0+255),b
  7568  013A0E  EC0A  F09B         	call	_delay_ms	;wreg free
  7569                           
  7570                           ;LCD.c: 106: LED_Toggle(eLED2);
  7571  013A12  0E01               	movlw	1
  7572  013A14  EC57  F09D         	call	_LED_Toggle
  7573  013A18  0012               	return		;funcret
  7574  013A1A                     __end_of_LCD_Reset:
  7575                           	opt stack 0
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           postinc0	equ	0xFEE
  7584                           wreg	equ	0xFE8
  7585                           postdec1	equ	0xFE5
  7586                           fsr1h	equ	0xFE2
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _delay_ms *****************
  7596 ;; Defined at:
  7597 ;;		line 240 in file "Library/Types.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  ms              2    0[BANK0 ] unsigned short 
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;  u               4    2[BANK0 ] volatile unsigned long 
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      void 
  7604 ;; Registers used:
  7605 ;;		wreg, status,2, status,0
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7611 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;Total ram usage:        6 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; Hardware stack levels required when called:    7
  7618 ;; This function calls:
  7619 ;;		Nothing
  7620 ;; This function is called by:
  7621 ;;		_LCD_Reset
  7622 ;;		_LCD_Init
  7623 ;;		_MXK_Init
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           	psect	text28
  7628  013614                     __ptext28:
  7629                           	opt stack 0
  7630  013614                     _delay_ms:
  7631                           	opt stack 22
  7632                           
  7633                           ;Types.c: 242: volatile unsigned long u;
  7634                           ;Types.c: 243: while (ms--)
  7635                           
  7636                           ;incstack = 0
  7637  013614  D01F               	goto	u11670
  7638  013616                     l14603:
  7639                           
  7640                           ;Types.c: 244: {
  7641                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  7642  013616  0E00               	movlw	0
  7643  013618  0100               	movlb	0	; () banked
  7644  01361A  6FB6               	movwf	delay_ms@u& (0+255),b	;volatile
  7645  01361C  0E00               	movlw	0
  7646  01361E  6FB7               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  7647  013620  0E00               	movlw	0
  7648  013622  6FB8               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  7649  013624  0E00               	movlw	0
  7650  013626  6FB9               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  7651  013628                     l14605:
  7652                           
  7653                           ; BSR set to: 0
  7654  013628  0100               	movlb	0	; () banked
  7655  01362A  51B9               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  7656  01362C  0100               	movlb	0	; () banked
  7657  01362E  11B8               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  7658  013630  E111               	bnz	l14611
  7659  013632  0EB0               	movlw	176
  7660  013634  0100               	movlb	0	; () banked
  7661  013636  5DB6               	subwf	delay_ms@u& (0+255),w,b	;volatile
  7662  013638  0E04               	movlw	4
  7663  01363A  0100               	movlb	0	; () banked
  7664  01363C  59B7               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  7665  01363E  B0D8               	btfsc	status,0,c
  7666  013640  D009               	goto	u11670
  7667                           
  7668                           ; BSR set to: 0
  7669                           
  7670                           ; BSR set to: 0
  7671  013642  F000               	nop		; ;# 
  7672  013644  0E01               	movlw	1
  7673  013646  0100               	movlb	0	; () banked
  7674  013648  27B6               	addwf	delay_ms@u& (0+255),f,b	;volatile
  7675  01364A  0E00               	movlw	0
  7676  01364C  23B7               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  7677  01364E  23B8               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  7678  013650  23B9               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  7679  013652  D7EA               	goto	l14605
  7680  013654                     u11670:
  7681  013654                     l14611:
  7682  013654  0100               	movlb	0	; () banked
  7683  013656  07B4               	decf	delay_ms@ms& (0+255),f,b
  7684  013658  A0D8               	btfss	status,0,c
  7685  01365A  07B5               	decf	(delay_ms@ms+1)& (0+255),f,b
  7686  01365C  0100               	movlb	0	; () banked
  7687  01365E  29B4               	incf	delay_ms@ms& (0+255),w,b
  7688  013660  E1DA               	bnz	l14603
  7689  013662  0100               	movlb	0	; () banked
  7690  013664  29B5               	incf	(delay_ms@ms+1)& (0+255),w,b
  7691  013666  A4D8               	btfss	status,2,c
  7692  013668  D7D6               	goto	l1376
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;Types.c: 251: }
  7696                           ;Types.c: 252: }
  7697                           ;Types.c: 253: u = 0x8008;
  7698                           
  7699                           ; BSR set to: 0
  7700  01366A  0E08               	movlw	8
  7701  01366C  0100               	movlb	0	; () banked
  7702  01366E  6FB6               	movwf	delay_ms@u& (0+255),b	;volatile
  7703  013670  0E80               	movlw	128
  7704  013672  6FB7               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  7705  013674  0E00               	movlw	0
  7706  013676  6FB8               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  7707  013678  0E00               	movlw	0
  7708  01367A  6FB9               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  7709                           
  7710                           ; BSR set to: 0
  7711  01367C  0012               	return		;funcret
  7712  01367E                     __end_of_delay_ms:
  7713                           	opt stack 0
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           postdec1	equ	0xFE5
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           fsr2h	equ	0xFDA
  7730                           fsr2l	equ	0xFD9
  7731                           status	equ	0xFD8
  7732                           
  7733 ;; *************** function _Reset_Low *****************
  7734 ;; Defined at:
  7735 ;;		line 32 in file "Library/LCD.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;Total ram usage:        0 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:   11
  7756 ;; This function calls:
  7757 ;;		_Port_SetPin
  7758 ;; This function is called by:
  7759 ;;		_LCD_Reset
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text29
  7764  014080                     __ptext29:
  7765                           	opt stack 0
  7766  014080                     _Reset_Low:
  7767                           	opt stack 15
  7768                           
  7769                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;incstack = 0
  7773  014080  0EB7               	movlw	low _PortF
  7774  014082  0100               	movlb	0	; () banked
  7775  014084  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  7776  014086  0E01               	movlw	high _PortF
  7777  014088  0100               	movlb	0	; () banked
  7778  01408A  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7779  01408C  0E06               	movlw	6
  7780  01408E  0100               	movlb	0	; () banked
  7781  014090  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  7782  014092  0E01               	movlw	1
  7783  014094  0100               	movlb	0	; () banked
  7784  014096  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  7785  014098  EC75  F093         	call	_Port_SetPin	;wreg free
  7786  01409C  0012               	return		;funcret
  7787  01409E                     __end_of_Reset_Low:
  7788                           	opt stack 0
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           postinc0	equ	0xFEE
  7797                           wreg	equ	0xFE8
  7798                           postdec1	equ	0xFE5
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _Reset_High *****************
  7809 ;; Defined at:
  7810 ;;		line 36 in file "Library/LCD.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;		None
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      void 
  7817 ;; Registers used:
  7818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;Total ram usage:        0 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:   11
  7831 ;; This function calls:
  7832 ;;		_Port_SetPin
  7833 ;; This function is called by:
  7834 ;;		_LCD_Reset
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text30
  7839  01409E                     __ptext30:
  7840                           	opt stack 0
  7841  01409E                     _Reset_High:
  7842                           	opt stack 15
  7843                           
  7844                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  7845                           
  7846                           ;incstack = 0
  7847  01409E  0EB7               	movlw	low _PortF
  7848  0140A0  0100               	movlb	0	; () banked
  7849  0140A2  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
  7850  0140A4  0E01               	movlw	high _PortF
  7851  0140A6  0100               	movlb	0	; () banked
  7852  0140A8  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7853  0140AA  0E06               	movlw	6
  7854  0140AC  0100               	movlb	0	; () banked
  7855  0140AE  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
  7856  0140B0  0E00               	movlw	0
  7857  0140B2  0100               	movlb	0	; () banked
  7858  0140B4  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
  7859  0140B6  EC75  F093         	call	_Port_SetPin	;wreg free
  7860  0140BA  0012               	return		;funcret
  7861  0140BC                     __end_of_Reset_High:
  7862                           	opt stack 0
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           postinc0	equ	0xFEE
  7871                           wreg	equ	0xFE8
  7872                           postdec1	equ	0xFE5
  7873                           fsr1h	equ	0xFE2
  7874                           fsr1l	equ	0xFE1
  7875                           indf2	equ	0xFDF
  7876                           postinc2	equ	0xFDE
  7877                           postdec2	equ	0xFDD
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882 ;; *************** function _LED_Toggle *****************
  7883 ;; Defined at:
  7884 ;;		line 50 in file "Library/LED.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  pLED            1    wreg     enum E6739
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;  pLED            1   24[BANK0 ] enum E6739
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;Total ram usage:        1 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:   12
  7905 ;; This function calls:
  7906 ;;		_Port_TogglePin
  7907 ;; This function is called by:
  7908 ;;		_LCD_Reset
  7909 ;;		_Event_HMI_DIPSwitch
  7910 ;;		_Event_HMI_LeftButton
  7911 ;;		_Event_HMI_RightButton
  7912 ;;		_Event_HMI_UpButton
  7913 ;;		_Event_HMI_DownButton
  7914 ;;		_FunctMotor
  7915 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7916 ;;		_Event_ADCSequenceComplete
  7917 ;;		_Event_DIPSwitch
  7918 ;;		_Event_TestButton
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text31
  7923  013AAE                     __ptext31:
  7924                           	opt stack 0
  7925  013AAE                     _LED_Toggle:
  7926                           	opt stack 17
  7927                           
  7928                           ;incstack = 0
  7929                           ;LED_Toggle@pLED stored from wreg
  7930  013AAE  0100               	movlb	0	; () banked
  7931  013AB0  6FCC               	movwf	LED_Toggle@pLED& (0+255),b
  7932                           
  7933                           ;LED.c: 52: switch (pLED)
  7934  013AB2  D018               	goto	l786
  7935  013AB4                     
  7936                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
  7937  013AB4  0EA4               	movlw	low _PortC
  7938  013AB6  0100               	movlb	0	; () banked
  7939  013AB8  6FC8               	movwf	Port_TogglePin@pInput& (0+255),b
  7940  013ABA  0E00               	movlw	high _PortC
  7941  013ABC  0100               	movlb	0	; () banked
  7942  013ABE  6FC9               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  7943  013AC0  0E00               	movlw	0
  7944  013AC2  0100               	movlb	0	; () banked
  7945  013AC4  6FCA               	movwf	Port_TogglePin@pPin& (0+255),b
  7946  013AC6  EC40  F09F         	call	_Port_TogglePin	;wreg free
  7947                           
  7948                           ;LED.c: 56: break;
  7949  013ACA  0012               	return	
  7950  013ACC                     
  7951                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
  7952  013ACC  0EA4               	movlw	low _PortC
  7953  013ACE  0100               	movlb	0	; () banked
  7954  013AD0  6FC8               	movwf	Port_TogglePin@pInput& (0+255),b
  7955  013AD2  0E00               	movlw	high _PortC
  7956  013AD4  0100               	movlb	0	; () banked
  7957  013AD6  6FC9               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
  7958  013AD8  0E01               	movlw	1
  7959  013ADA  0100               	movlb	0	; () banked
  7960  013ADC  6FCA               	movwf	Port_TogglePin@pPin& (0+255),b
  7961  013ADE  EC40  F09F         	call	_Port_TogglePin	;wreg free
  7962                           
  7963                           ;LED.c: 60: }
  7964                           
  7965                           ;LED.c: 59: break;
  7966  013AE2  0012               	return	
  7967  013AE4                     l786:
  7968  013AE4  0100               	movlb	0	; () banked
  7969  013AE6  51CC               	movf	LED_Toggle@pLED& (0+255),w,b
  7970                           
  7971                           ; Switch size 1, requested type "space"
  7972                           ; Number of cases is 2, Range of values is 0 to 1
  7973                           ; switch strategies available:
  7974                           ; Name         Instructions Cycles
  7975                           ; simple_byte            7     4 (average)
  7976                           ;	Chosen strategy is simple_byte
  7977  013AE8  0A00               	xorlw	0	; case 0
  7978  013AEA  B4D8               	btfsc	status,2,c
  7979  013AEC  D7E3               	goto	l787
  7980  013AEE  0A01               	xorlw	1	; case 1
  7981  013AF0  A4D8               	btfss	status,2,c
  7982  013AF2  0012               	return	
  7983  013AF4  D7EB               	goto	l789
  7984  013AF6                     __end_of_LED_Toggle:
  7985                           	opt stack 0
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           intcon	equ	0xFF2
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           postdec1	equ	0xFE5
  7996                           fsr1h	equ	0xFE2
  7997                           fsr1l	equ	0xFE1
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           postdec2	equ	0xFDD
  8001                           fsr2h	equ	0xFDA
  8002                           fsr2l	equ	0xFD9
  8003                           status	equ	0xFD8
  8004                           
  8005 ;; *************** function _Port_TogglePin *****************
  8006 ;; Defined at:
  8007 ;;		line 278 in file "Library/Port.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  pInput          2   20[BANK0 ] const PTR struct Port
  8010 ;;		 -> PortC(10), 
  8011 ;;  pPin            1   22[BANK0 ] enum E6750
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  Value           1   23[BANK0 ] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8023 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;Total ram usage:        4 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:   11
  8030 ;; This function calls:
  8031 ;;		_Port_GetPin
  8032 ;;		_Port_SetPin
  8033 ;; This function is called by:
  8034 ;;		_LED_Toggle
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text32
  8039  013E80                     __ptext32:
  8040                           	opt stack 0
  8041  013E80                     _Port_TogglePin:
  8042                           	opt stack 17
  8043                           
  8044                           ;Port.c: 280: UINT8 Value;
  8045                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
  8046                           
  8047                           ;incstack = 0
  8048  013E80  C0C8  F0B4         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
  8049  013E84  C0C9  F0B5         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
  8050  013E88  C0CA  F0B6         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
  8051  013E8C  EC7B  F09D         	call	_Port_GetPin	;wreg free
  8052  013E90  0100               	movlb	0	; () banked
  8053  013E92  6FCB               	movwf	Port_TogglePin@Value& (0+255),b
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;Port.c: 282: Value ^= 0x01;
  8057  013E94  0E01               	movlw	1
  8058  013E96  0100               	movlb	0	; () banked
  8059  013E98  1BCB               	xorwf	Port_TogglePin@Value& (0+255),f,b
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
  8063  013E9A  C0C8  F0C3         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
  8064  013E9E  C0C9  F0C4         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
  8065  013EA2  C0CA  F0C5         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
  8066  013EA6  C0CB  F0C6         	movff	Port_TogglePin@Value,Port_SetPin@pValue
  8067  013EAA  EC75  F093         	call	_Port_SetPin	;wreg free
  8068  013EAE  0012               	return		;funcret
  8069  013EB0                     __end_of_Port_TogglePin:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           postdec1	equ	0xFE5
  8081                           fsr1h	equ	0xFE2
  8082                           fsr1l	equ	0xFE1
  8083                           indf2	equ	0xFDF
  8084                           postinc2	equ	0xFDE
  8085                           postdec2	equ	0xFDD
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _Port_GetPin *****************
  8091 ;; Defined at:
  8092 ;;		line 271 in file "Library/Port.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  8095 ;;		 -> PortB(10), PortE(10), PortC(10), 
  8096 ;;  pPin            1    2[BANK0 ] enum E6750
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  Output          1    5[BANK0 ] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      unsigned char 
  8101 ;; Registers used:
  8102 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        6 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    7
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_Port_TogglePin
  8119 ;;		_HMI_LeftSwitch
  8120 ;;		_HMI_RightSwitch
  8121 ;;		_HMI_UpSwitch
  8122 ;;		_HMI_DownSwitch
  8123 ;;		_MXK_TestButton
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text33
  8128  013AF6                     __ptext33:
  8129                           	opt stack 0
  8130  013AF6                     _Port_GetPin:
  8131                           	opt stack 20
  8132                           
  8133                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
  8134                           
  8135                           ;incstack = 0
  8136  013AF6  0100               	movlb	0	; () banked
  8137  013AF8  EE20 F006          	lfsr	2,6
  8138  013AFC  51B4               	movf	Port_GetPin@pInput& (0+255),w,b
  8139  013AFE  26D9               	addwf	fsr2l,f,c
  8140  013B00  51B5               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
  8141  013B02  22DA               	addwfc	fsr2h,f,c
  8142  013B04  CFDE F0B7          	movff	postinc2,??_Port_GetPin
  8143  013B08  CFDD F0B8          	movff	postdec2,??_Port_GetPin+1
  8144  013B0C  C0B7  FFD9         	movff	??_Port_GetPin,fsr2l
  8145  013B10  C0B8  FFDA         	movff	??_Port_GetPin+1,fsr2h
  8146  013B14  50DF               	movf	indf2,w,c
  8147  013B16  0100               	movlb	0	; () banked
  8148  013B18  6FB9               	movwf	Port_GetPin@Output& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;Port.c: 274: Output >>= (UINT8)pPin;
  8152  013B1A  0100               	movlb	0	; () banked
  8153  013B1C  29B6               	incf	Port_GetPin@pPin& (0+255),w,b
  8154  013B1E  0100               	movlb	0	; () banked
  8155  013B20  6FB7               	movwf	??_Port_GetPin& (0+255),b
  8156  013B22  D003               	goto	u11180
  8157  013B24                     u11185:
  8158  013B24  0100               	movlb	0	; () banked
  8159  013B26  90D8               	bcf	status,0,c
  8160  013B28  33B9               	rrcf	Port_GetPin@Output& (0+255),f,b
  8161  013B2A                     u11180:
  8162  013B2A  0100               	movlb	0	; () banked
  8163  013B2C  2FB7               	decfsz	??_Port_GetPin& (0+255),f,b
  8164  013B2E  D7FA               	goto	u11185
  8165                           
  8166                           ;Port.c: 275: Output &= 1;
  8167  013B30  0E01               	movlw	1
  8168  013B32  0100               	movlb	0	; () banked
  8169  013B34  17B9               	andwf	Port_GetPin@Output& (0+255),f,b
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;Port.c: 276: return Output;
  8173  013B36  0100               	movlb	0	; () banked
  8174  013B38  51B9               	movf	Port_GetPin@Output& (0+255),w,b
  8175  013B3A  0012               	return	
  8176  013B3C                     __end_of_Port_GetPin:
  8177                           	opt stack 0
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           intcon	equ	0xFF2
  8185                           postinc0	equ	0xFEE
  8186                           wreg	equ	0xFE8
  8187                           postdec1	equ	0xFE5
  8188                           fsr1h	equ	0xFE2
  8189                           fsr1l	equ	0xFE1
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           postdec2	equ	0xFDD
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _Console_Init *****************
  8198 ;; Defined at:
  8199 ;;		line 157 in file "Library/Console.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;		None
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  y               1    3[BANK0 ] unsigned char 
  8204 ;;  x               1    2[BANK0 ] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;Total ram usage:        4 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    7
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_FunctInitLCD
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text34
  8229  0130F0                     __ptext34:
  8230                           	opt stack 0
  8231  0130F0                     _Console_Init:
  8232                           	opt stack 22
  8233                           
  8234                           ;Console.c: 160: lBufferX = 0;
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;incstack = 0
  8238  0130F0  0E00               	movlw	0
  8239  0130F2  0100               	movlb	0	; () banked
  8240  0130F4  6F9C               	movwf	_lBufferX& (0+255),b
  8241                           
  8242                           ;Console.c: 161: lBufferY = 0;
  8243  0130F6  0E00               	movlw	0
  8244  0130F8  0100               	movlb	0	; () banked
  8245  0130FA  6F9B               	movwf	_lBufferY& (0+255),b
  8246                           
  8247                           ;Console.c: 163: UINT8 x, y;
  8248                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8249  0130FC  0E00               	movlw	0
  8250  0130FE  0100               	movlb	0	; () banked
  8251  013100  6FB6               	movwf	Console_Init@x& (0+255),b
  8252  013102                     l16255:
  8253                           
  8254                           ; BSR set to: 0
  8255  013102  0E13               	movlw	19
  8256  013104  0100               	movlb	0	; () banked
  8257  013106  65B6               	cpfsgt	Console_Init@x& (0+255),b
  8258  013108  D001               	goto	l1598
  8259  01310A  0012               	return	
  8260  01310C                     l1598:
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;Console.c: 165: {
  8264                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8265                           
  8266                           ; BSR set to: 0
  8267  01310C  0E00               	movlw	0
  8268  01310E  0100               	movlb	0	; () banked
  8269  013110  6FB7               	movwf	Console_Init@y& (0+255),b
  8270  013112                     l16261:
  8271                           
  8272                           ; BSR set to: 0
  8273  013112  0E0E               	movlw	14
  8274  013114  0100               	movlb	0	; () banked
  8275  013116  65B7               	cpfsgt	Console_Init@y& (0+255),b
  8276  013118  D001               	goto	l1600
  8277  01311A  D02C               	goto	u13060
  8278  01311C                     l1600:
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;Console.c: 167: {
  8282                           ;Console.c: 168: lBuffer[y][x] = '\0';
  8283                           
  8284                           ; BSR set to: 0
  8285  01311C  0100               	movlb	0	; () banked
  8286  01311E  51B7               	movf	Console_Init@y& (0+255),w,b
  8287  013120  0D14               	mullw	20
  8288  013122  0E11               	movlw	low _lBuffer
  8289  013124  0100               	movlb	0	; () banked
  8290  013126  6FB4               	movwf	??_Console_Init& (0+255),b
  8291  013128  0E0C               	movlw	high _lBuffer
  8292  01312A  0100               	movlb	0	; () banked
  8293  01312C  6FB5               	movwf	(??_Console_Init+1)& (0+255),b
  8294  01312E  50F3               	movf	prodl,w,c
  8295  013130  0100               	movlb	0	; () banked
  8296  013132  27B4               	addwf	??_Console_Init& (0+255),f,b
  8297  013134  50F4               	movf	prodh,w,c
  8298  013136  0100               	movlb	0	; () banked
  8299  013138  23B5               	addwfc	(??_Console_Init+1)& (0+255),f,b
  8300  01313A  0100               	movlb	0	; () banked
  8301  01313C  51B6               	movf	Console_Init@x& (0+255),w,b
  8302  01313E  0D01               	mullw	1
  8303  013140  50F3               	movf	prodl,w,c
  8304  013142  0100               	movlb	0	; () banked
  8305  013144  25B4               	addwf	??_Console_Init& (0+255),w,b
  8306  013146  6ED9               	movwf	fsr2l,c
  8307  013148  50F4               	movf	prodh,w,c
  8308  01314A  0100               	movlb	0	; () banked
  8309  01314C  21B5               	addwfc	(??_Console_Init+1)& (0+255),w,b
  8310  01314E  6EDA               	movwf	fsr2h,c
  8311  013150  0E00               	movlw	0
  8312  013152  6EDF               	movwf	indf2,c
  8313                           
  8314                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
  8315  013154  0100               	movlb	0	; () banked
  8316  013156  51B7               	movf	Console_Init@y& (0+255),w,b
  8317  013158  0D02               	mullw	2
  8318  01315A  0E24               	movlw	low _lCBuffer
  8319  01315C  24F3               	addwf	prodl,w,c
  8320  01315E  6ED9               	movwf	fsr2l,c
  8321  013160  0E02               	movlw	high _lCBuffer
  8322  013162  20F4               	addwfc	prodh,w,c
  8323  013164  6EDA               	movwf	fsr2h,c
  8324  013166  0EFF               	movlw	255
  8325  013168  6EDE               	movwf	postinc2,c
  8326  01316A  0EFF               	movlw	255
  8327  01316C  6EDD               	movwf	postdec2,c
  8328                           
  8329                           ; BSR set to: 0
  8330  01316E  0100               	movlb	0	; () banked
  8331  013170  2BB7               	incf	Console_Init@y& (0+255),f,b
  8332  013172  D7CF               	goto	l16261
  8333  013174                     u13060:
  8334                           
  8335                           ; BSR set to: 0
  8336                           
  8337                           ; BSR set to: 0
  8338  013174  0100               	movlb	0	; () banked
  8339  013176  2BB6               	incf	Console_Init@x& (0+255),f,b
  8340  013178  D7C4               	goto	l16255
  8341  01317A                     __end_of_Console_Init:
  8342                           	opt stack 0
  8343                           tblptru	equ	0xFF8
  8344                           tblptrh	equ	0xFF7
  8345                           tblptrl	equ	0xFF6
  8346                           tablat	equ	0xFF5
  8347                           prodh	equ	0xFF4
  8348                           prodl	equ	0xFF3
  8349                           intcon	equ	0xFF2
  8350                           postinc0	equ	0xFEE
  8351                           wreg	equ	0xFE8
  8352                           postdec1	equ	0xFE5
  8353                           fsr1h	equ	0xFE2
  8354                           fsr1l	equ	0xFE1
  8355                           indf2	equ	0xFDF
  8356                           postinc2	equ	0xFDE
  8357                           postdec2	equ	0xFDD
  8358                           fsr2h	equ	0xFDA
  8359                           fsr2l	equ	0xFD9
  8360                           status	equ	0xFD8
  8361                           
  8362 ;; *************** function _FunctInitHMI *****************
  8363 ;; Defined at:
  8364 ;;		line 134 in file "Functions.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;		None
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;		None
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      void 
  8371 ;; Registers used:
  8372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;Total ram usage:        0 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:   17
  8385 ;; This function calls:
  8386 ;;		_HMI_Init
  8387 ;;		_HMI_SetBar
  8388 ;;		_HMI_SetSegments
  8389 ;;		_MXK_BlockSwitchTo
  8390 ;;		_MXK_Dequeue
  8391 ;;		_MXK_Release
  8392 ;; This function is called by:
  8393 ;;		_main
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           	psect	text35
  8398  013D76                     __ptext35:
  8399                           	opt stack 0
  8400  013D76                     _FunctInitHMI:
  8401                           	opt stack 13
  8402                           
  8403                           ;Functions.c: 137: if (MXK_BlockSwitchTo(eMXK_HMI))
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;incstack = 0
  8407  013D76  0E01               	movlw	1
  8408  013D78  EC60  F09E         	call	_MXK_BlockSwitchTo
  8409  013D7C  0900               	iorlw	0
  8410  013D7E  B4D8               	btfsc	status,2,c
  8411  013D80  0012               	return	
  8412                           
  8413                           ;Functions.c: 139: {
  8414                           ;Functions.c: 141: HMI_Init();
  8415  013D82  EC76  F088         	call	_HMI_Init	;wreg free
  8416                           
  8417                           ;Functions.c: 144: HMI_SetBar(0x00);
  8418  013D86  0E00               	movlw	0
  8419  013D88  ECFF  F0A0         	call	_HMI_SetBar
  8420                           
  8421                           ;Functions.c: 150: HMI_SetSegments((str)"Printf");
  8422  013D8C  0EEF               	movlw	low STR_1
  8423  013D8E  0100               	movlb	0	; () banked
  8424  013D90  6FB5               	movwf	HMI_SetSegments@pString& (0+255),b
  8425  013D92  0EFF               	movlw	high STR_1
  8426  013D94  0100               	movlb	0	; () banked
  8427  013D96  6FB6               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  8428  013D98  EC8F  F090         	call	_HMI_SetSegments	;wreg free
  8429                           
  8430                           ;Functions.c: 154: if(MXK_Release())
  8431  013D9C  EC9A  F0A0         	call	_MXK_Release	;wreg free
  8432  013DA0  0900               	iorlw	0
  8433  013DA2  B4D8               	btfsc	status,2,c
  8434  013DA4  0012               	return	
  8435                           
  8436                           ;Functions.c: 155: MXK_Dequeue();
  8437  013DA6  EC22  F09E         	call	_MXK_Dequeue	;wreg free
  8438  013DAA  0012               	return	
  8439  013DAC                     __end_of_FunctInitHMI:
  8440                           	opt stack 0
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           postinc0	equ	0xFEE
  8449                           wreg	equ	0xFE8
  8450                           postdec1	equ	0xFE5
  8451                           fsr1h	equ	0xFE2
  8452                           fsr1l	equ	0xFE1
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _HMI_SetSegments *****************
  8461 ;; Defined at:
  8462 ;;		line 226 in file "HMI.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  8465 ;;		 -> STR_1(7), HMIBoard..(8), HMIBoard(58), 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  in              2    4[BANK0 ] unsigned short 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        5 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    8
  8484 ;; This function calls:
  8485 ;;		_ToSegment
  8486 ;; This function is called by:
  8487 ;;		_FunctInitHMI
  8488 ;;		_HMI_SetNumber
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text36
  8493  01211E                     __ptext36:
  8494                           	opt stack 0
  8495  01211E                     _HMI_SetSegments:
  8496                           	opt stack 21
  8497                           
  8498                           ;HMI.c: 228: UINT16 in=0;
  8499                           
  8500                           ;incstack = 0
  8501  01211E  0E00               	movlw	0
  8502  012120  0100               	movlb	0	; () banked
  8503  012122  6FB9               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  8504  012124  0E00               	movlw	0
  8505  012126  6FB8               	movwf	HMI_SetSegments@in& (0+255),b
  8506                           
  8507                           ;HMI.c: 229: while(*pString)
  8508  012128  D044               	goto	l1832
  8509  01212A                     
  8510                           ;HMI.c: 230: {
  8511                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  8512                           
  8513                           ; BSR set to: 0
  8514  01212A  0E35               	movlw	low _HMIBoard
  8515  01212C  0100               	movlb	0	; () banked
  8516  01212E  25B8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8517  012130  6ED9               	movwf	fsr2l,c
  8518  012132  0E01               	movlw	high _HMIBoard
  8519  012134  0100               	movlb	0	; () banked
  8520  012136  21B9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8521  012138  6EDA               	movwf	fsr2h,c
  8522  01213A  C0B5  FFF6         	movff	HMI_SetSegments@pString,tblptrl
  8523  01213E  C0B6  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
  8524  012142  0E00               	movlw	low (__mediumconst shr (0+16))
  8525  012144  6EF8               	movwf	tblptru,c
  8526  012146  0E0F               	movlw	(high __ramtop+-1)
  8527  012148  64F7               	cpfsgt	tblptrh,c
  8528  01214A  D003               	bra	u13207
  8529  01214C  0008               	tblrd		*
  8530  01214E  50F5               	movf	tablat,w,c
  8531  012150  D005               	bra	u13200
  8532  012152                     u13207:
  8533  012152  CFF6 FFE9          	movff	tblptrl,fsr0l
  8534  012156  CFF7 FFEA          	movff	tblptrh,fsr0h
  8535  01215A  50EF               	movf	indf0,w,c
  8536  01215C                     u13200:
  8537  01215C  ECEC  F083         	call	_ToSegment
  8538  012160  6EDF               	movwf	indf2,c
  8539                           
  8540                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  8541  012162  0E35               	movlw	low _HMIBoard
  8542  012164  0100               	movlb	0	; () banked
  8543  012166  25B8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8544  012168  6ED9               	movwf	fsr2l,c
  8545  01216A  0E01               	movlw	high _HMIBoard
  8546  01216C  0100               	movlb	0	; () banked
  8547  01216E  21B9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8548  012170  6EDA               	movwf	fsr2h,c
  8549  012172  0E80               	movlw	128
  8550  012174  18DE               	xorwf	postinc2,w,c
  8551  012176  A4D8               	btfss	status,2,c
  8552  012178  D00E               	goto	l1831
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;HMI.c: 234: {
  8556                           ;HMI.c: 235: in--;
  8557  01217A  0100               	movlb	0	; () banked
  8558  01217C  07B8               	decf	HMI_SetSegments@in& (0+255),f,b
  8559  01217E  A0D8               	btfss	status,0,c
  8560  012180  07B9               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  8564  012182  0E35               	movlw	low _HMIBoard
  8565  012184  0100               	movlb	0	; () banked
  8566  012186  25B8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8567  012188  6ED9               	movwf	fsr2l,c
  8568  01218A  0E01               	movlw	high _HMIBoard
  8569  01218C  0100               	movlb	0	; () banked
  8570  01218E  21B9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8571  012190  6EDA               	movwf	fsr2h,c
  8572  012192  0E00               	movlw	0
  8573  012194  8EDB               	bsf	plusw2,7,c
  8574  012196                     l1831:
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;HMI.c: 237: }
  8578                           ;HMI.c: 239: pString++;
  8579                           
  8580                           ; BSR set to: 0
  8581  012196  0100               	movlb	0	; () banked
  8582  012198  4BB5               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  8583  01219A  2BB6               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;HMI.c: 240: in++;
  8587  01219C  0100               	movlb	0	; () banked
  8588  01219E  4BB8               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8589  0121A0  2BB9               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;HMI.c: 241: if (in>=6)
  8593  0121A2  0100               	movlb	0	; () banked
  8594  0121A4  51B9               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8595  0121A6  E127               	bnz	l16381
  8596  0121A8  0E06               	movlw	6
  8597  0121AA  0100               	movlb	0	; () banked
  8598  0121AC  5DB8               	subwf	HMI_SetSegments@in& (0+255),w,b
  8599  0121AE  B0D8               	btfsc	status,0,c
  8600  0121B0  D022               	goto	l1834
  8601  0121B2                     l1832:
  8602                           
  8603                           ; BSR set to: 0
  8604                           
  8605                           ; BSR set to: 0
  8606                           
  8607                           ; BSR set to: 0
  8608  0121B2  C0B5  FFF6         	movff	HMI_SetSegments@pString,tblptrl
  8609  0121B6  C0B6  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
  8610  0121BA  0E00               	movlw	low (__mediumconst shr (0+16))
  8611  0121BC  6EF8               	movwf	tblptru,c
  8612  0121BE  0E0F               	movlw	(high __ramtop+-1)
  8613  0121C0  64F7               	cpfsgt	tblptrh,c
  8614  0121C2  D003               	bra	u13237
  8615  0121C4  0008               	tblrd		*
  8616  0121C6  50F5               	movf	tablat,w,c
  8617  0121C8  D005               	bra	u13230
  8618  0121CA                     u13237:
  8619  0121CA  CFF6 FFE9          	movff	tblptrl,fsr0l
  8620  0121CE  CFF7 FFEA          	movff	tblptrh,fsr0h
  8621  0121D2  50EF               	movf	indf0,w,c
  8622  0121D4                     u13230:
  8623  0121D4  0900               	iorlw	0
  8624  0121D6  B4D8               	btfsc	status,2,c
  8625  0121D8  D00E               	goto	l1834
  8626  0121DA  D7A7               	goto	l1830
  8627  0121DC                     
  8628                           ;HMI.c: 245: {
  8629                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  8630  0121DC  0E35               	movlw	low _HMIBoard
  8631  0121DE  0100               	movlb	0	; () banked
  8632  0121E0  25B8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8633  0121E2  6ED9               	movwf	fsr2l,c
  8634  0121E4  0E01               	movlw	high _HMIBoard
  8635  0121E6  0100               	movlb	0	; () banked
  8636  0121E8  21B9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8637  0121EA  6EDA               	movwf	fsr2h,c
  8638  0121EC  0E00               	movlw	0
  8639  0121EE  6EDF               	movwf	indf2,c
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;HMI.c: 247: in++;
  8643  0121F0  0100               	movlb	0	; () banked
  8644  0121F2  4BB8               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8645  0121F4  2BB9               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8646  0121F6                     l1834:
  8647  0121F6                     l16381:
  8648  0121F6  0100               	movlb	0	; () banked
  8649  0121F8  51B9               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8650  0121FA  E106               	bnz	l1837
  8651  0121FC  0E06               	movlw	6
  8652  0121FE  0100               	movlb	0	; () banked
  8653  012200  5DB8               	subwf	HMI_SetSegments@in& (0+255),w,b
  8654  012202  B0D8               	btfsc	status,0,c
  8655  012204  0012               	return	
  8656  012206  D7EA               	goto	l1835
  8657  012208                     l1837:
  8658                           
  8659                           ; BSR set to: 0
  8660  012208  0012               	return		;funcret
  8661  01220A                     __end_of_HMI_SetSegments:
  8662                           	opt stack 0
  8663                           tblptru	equ	0xFF8
  8664                           tblptrh	equ	0xFF7
  8665                           tblptrl	equ	0xFF6
  8666                           tablat	equ	0xFF5
  8667                           prodh	equ	0xFF4
  8668                           prodl	equ	0xFF3
  8669                           intcon	equ	0xFF2
  8670                           indf0	equ	0xFEF
  8671                           postinc0	equ	0xFEE
  8672                           fsr0h	equ	0xFEA
  8673                           fsr0l	equ	0xFE9
  8674                           wreg	equ	0xFE8
  8675                           postdec1	equ	0xFE5
  8676                           fsr1h	equ	0xFE2
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           postdec2	equ	0xFDD
  8681                           plusw2	equ	0xFDB
  8682                           fsr2h	equ	0xFDA
  8683                           fsr2l	equ	0xFD9
  8684                           status	equ	0xFD8
  8685                           
  8686 ;; *************** function _ToSegment *****************
  8687 ;; Defined at:
  8688 ;;		line 284 in file "Library/Types.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  pCHR            1    wreg     unsigned char 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  pCHR            1    0[BANK0 ] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      unsigned char 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2, status,0
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;Total ram usage:        1 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    7
  8709 ;; This function calls:
  8710 ;;		Nothing
  8711 ;; This function is called by:
  8712 ;;		_HMI_SetSegments
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           	psect	text37
  8717  0107D8                     __ptext37:
  8718                           	opt stack 0
  8719  0107D8                     _ToSegment:
  8720                           	opt stack 21
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;incstack = 0
  8724                           ;ToSegment@pCHR stored from wreg
  8725  0107D8  0100               	movlb	0	; () banked
  8726  0107DA  6FB4               	movwf	ToSegment@pCHR& (0+255),b
  8727                           
  8728                           ;Types.c: 286: switch(pCHR)
  8729  0107DC  D07E               	goto	l1405
  8730  0107DE  0E3F               	movlw	63
  8731  0107E0  0012               	return	
  8732  0107E2  0E06               	movlw	6
  8733  0107E4  0012               	return	
  8734  0107E6  0E5B               	movlw	91
  8735  0107E8  0012               	return	
  8736  0107EA  0E4F               	movlw	79
  8737  0107EC  0012               	return	
  8738  0107EE  0E66               	movlw	102
  8739  0107F0  0012               	return	
  8740  0107F2  0E6D               	movlw	109
  8741  0107F4  0012               	return	
  8742  0107F6  0E7D               	movlw	125
  8743  0107F8  0012               	return	
  8744  0107FA  0E07               	movlw	7
  8745  0107FC  0012               	return	
  8746  0107FE  0E7F               	movlw	127
  8747  010800  0012               	return	
  8748  010802  0E6F               	movlw	111
  8749  010804  0012               	return	
  8750  010806  0E5F               	movlw	95
  8751  010808  0012               	return	
  8752  01080A  0E7C               	movlw	124
  8753  01080C  0012               	return	
  8754  01080E  0E58               	movlw	88
  8755  010810  0012               	return	
  8756  010812  0E5E               	movlw	94
  8757  010814  0012               	return	
  8758  010816  0E7B               	movlw	123
  8759  010818  0012               	return	
  8760  01081A  0E71               	movlw	113
  8761  01081C  0012               	return	
  8762  01081E  0E6F               	movlw	111
  8763  010820  0012               	return	
  8764  010822  0E74               	movlw	116
  8765  010824  0012               	return	
  8766  010826  0E04               	movlw	4
  8767  010828  0012               	return	
  8768  01082A  0E0E               	movlw	14
  8769  01082C  0012               	return	
  8770  01082E  0E7A               	movlw	122
  8771  010830  0012               	return	
  8772  010832  0E06               	movlw	6
  8773  010834  0012               	return	
  8774  010836  0E14               	movlw	20
  8775  010838  0012               	return	
  8776  01083A  0E54               	movlw	84
  8777  01083C  0012               	return	
  8778  01083E  0E5C               	movlw	92
  8779  010840  0012               	return	
  8780  010842  0E73               	movlw	115
  8781  010844  0012               	return	
  8782  010846  0E67               	movlw	103
  8783  010848  0012               	return	
  8784  01084A  0E50               	movlw	80
  8785  01084C  0012               	return	
  8786  01084E  0E6D               	movlw	109
  8787  010850  0012               	return	
  8788  010852  0E78               	movlw	120
  8789  010854  0012               	return	
  8790  010856  0E1C               	movlw	28
  8791  010858  0012               	return	
  8792  01085A  0E62               	movlw	98
  8793  01085C  0012               	return	
  8794  01085E  0E2A               	movlw	42
  8795  010860  0012               	return	
  8796  010862  0E64               	movlw	100
  8797  010864  0012               	return	
  8798  010866  0E6E               	movlw	110
  8799  010868  0012               	return	
  8800  01086A  0E5B               	movlw	91
  8801  01086C  0012               	return	
  8802  01086E  0E77               	movlw	119
  8803  010870  0012               	return	
  8804  010872  0E7F               	movlw	127
  8805  010874  0012               	return	
  8806  010876  0E39               	movlw	57
  8807  010878  0012               	return	
  8808  01087A  0E3F               	movlw	63
  8809  01087C  0012               	return	
  8810  01087E  0E79               	movlw	121
  8811  010880  0012               	return	
  8812  010882  0E71               	movlw	113
  8813  010884  0012               	return	
  8814  010886  0E3D               	movlw	61
  8815  010888  0012               	return	
  8816  01088A  0E76               	movlw	118
  8817  01088C  0012               	return	
  8818  01088E  0E06               	movlw	6
  8819  010890  0012               	return	
  8820  010892  0E1E               	movlw	30
  8821  010894  0012               	return	
  8822  010896  0E57               	movlw	87
  8823  010898  0012               	return	
  8824  01089A  0E38               	movlw	56
  8825  01089C  0012               	return	
  8826  01089E  0E76               	movlw	118
  8827  0108A0  0012               	return	
  8828  0108A2  0E76               	movlw	118
  8829  0108A4  0012               	return	
  8830  0108A6  0E3F               	movlw	63
  8831  0108A8  0012               	return	
  8832  0108AA  0E73               	movlw	115
  8833  0108AC  0012               	return	
  8834  0108AE  0E3F               	movlw	63
  8835  0108B0  0012               	return	
  8836  0108B2  0E77               	movlw	119
  8837  0108B4  0012               	return	
  8838  0108B6  0E6D               	movlw	109
  8839  0108B8  0012               	return	
  8840  0108BA  0E31               	movlw	49
  8841  0108BC  0012               	return	
  8842  0108BE  0E3E               	movlw	62
  8843  0108C0  0012               	return	
  8844  0108C2  0E3E               	movlw	62
  8845  0108C4  0012               	return	
  8846  0108C6  0E7E               	movlw	126
  8847  0108C8  0012               	return	
  8848  0108CA  0E76               	movlw	118
  8849  0108CC  0012               	return	
  8850  0108CE  0E66               	movlw	102
  8851  0108D0  0012               	return	
  8852  0108D2  0E5B               	movlw	91
  8853  0108D4  0012               	return	
  8854  0108D6  0E80               	movlw	128
  8855  0108D8  0012               	return	
  8856  0108DA                     l1405:
  8857  0108DA  0100               	movlb	0	; () banked
  8858  0108DC  51B4               	movf	ToSegment@pCHR& (0+255),w,b
  8859                           
  8860                           ; Switch size 1, requested type "space"
  8861                           ; Number of cases is 63, Range of values is 46 to 122
  8862                           ; switch strategies available:
  8863                           ; Name         Instructions Cycles
  8864                           ; simple_byte          190    96 (average)
  8865                           ;	Chosen strategy is simple_byte
  8866  0108DE  0A2E               	xorlw	46	; case 46
  8867  0108E0  B4D8               	btfsc	status,2,c
  8868  0108E2  D7F9               	goto	l1469
  8869  0108E4  0A1E               	xorlw	30	; case 48
  8870  0108E6  B4D8               	btfsc	status,2,c
  8871  0108E8  D77A               	goto	l1406
  8872  0108EA  0A01               	xorlw	1	; case 49
  8873  0108EC  B4D8               	btfsc	status,2,c
  8874  0108EE  D779               	goto	l1408
  8875  0108F0  0A03               	xorlw	3	; case 50
  8876  0108F2  B4D8               	btfsc	status,2,c
  8877  0108F4  D778               	goto	l1409
  8878  0108F6  0A01               	xorlw	1	; case 51
  8879  0108F8  B4D8               	btfsc	status,2,c
  8880  0108FA  D777               	goto	l1410
  8881  0108FC  0A07               	xorlw	7	; case 52
  8882  0108FE  B4D8               	btfsc	status,2,c
  8883  010900  D776               	goto	l1411
  8884  010902  0A01               	xorlw	1	; case 53
  8885  010904  B4D8               	btfsc	status,2,c
  8886  010906  D775               	goto	l1412
  8887  010908  0A03               	xorlw	3	; case 54
  8888  01090A  B4D8               	btfsc	status,2,c
  8889  01090C  D774               	goto	l1413
  8890  01090E  0A01               	xorlw	1	; case 55
  8891  010910  B4D8               	btfsc	status,2,c
  8892  010912  D773               	goto	l1414
  8893  010914  0A0F               	xorlw	15	; case 56
  8894  010916  B4D8               	btfsc	status,2,c
  8895  010918  D772               	goto	l1415
  8896  01091A  0A01               	xorlw	1	; case 57
  8897  01091C  B4D8               	btfsc	status,2,c
  8898  01091E  D771               	goto	l1416
  8899  010920  0A78               	xorlw	120	; case 65
  8900  010922  B4D8               	btfsc	status,2,c
  8901  010924  D7A4               	goto	l1443
  8902  010926  0A03               	xorlw	3	; case 66
  8903  010928  B4D8               	btfsc	status,2,c
  8904  01092A  D7A3               	goto	l1444
  8905  01092C  0A01               	xorlw	1	; case 67
  8906  01092E  B4D8               	btfsc	status,2,c
  8907  010930  D7A2               	goto	l1445
  8908  010932  0A07               	xorlw	7	; case 68
  8909  010934  B4D8               	btfsc	status,2,c
  8910  010936  D7A1               	goto	l1446
  8911  010938  0A01               	xorlw	1	; case 69
  8912  01093A  B4D8               	btfsc	status,2,c
  8913  01093C  D7A0               	goto	l1447
  8914  01093E  0A03               	xorlw	3	; case 70
  8915  010940  B4D8               	btfsc	status,2,c
  8916  010942  D79F               	goto	l1448
  8917  010944  0A01               	xorlw	1	; case 71
  8918  010946  B4D8               	btfsc	status,2,c
  8919  010948  D79E               	goto	l1449
  8920  01094A  0A0F               	xorlw	15	; case 72
  8921  01094C  B4D8               	btfsc	status,2,c
  8922  01094E  D79D               	goto	l1450
  8923  010950  0A01               	xorlw	1	; case 73
  8924  010952  B4D8               	btfsc	status,2,c
  8925  010954  D79C               	goto	l1451
  8926  010956  0A03               	xorlw	3	; case 74
  8927  010958  B4D8               	btfsc	status,2,c
  8928  01095A  D79B               	goto	l1452
  8929  01095C  0A01               	xorlw	1	; case 75
  8930  01095E  B4D8               	btfsc	status,2,c
  8931  010960  D79A               	goto	l1453
  8932  010962  0A07               	xorlw	7	; case 76
  8933  010964  B4D8               	btfsc	status,2,c
  8934  010966  D799               	goto	l1454
  8935  010968  0A01               	xorlw	1	; case 77
  8936  01096A  B4D8               	btfsc	status,2,c
  8937  01096C  D798               	goto	l1455
  8938  01096E  0A03               	xorlw	3	; case 78
  8939  010970  B4D8               	btfsc	status,2,c
  8940  010972  D797               	goto	l1456
  8941  010974  0A01               	xorlw	1	; case 79
  8942  010976  B4D8               	btfsc	status,2,c
  8943  010978  D796               	goto	l1457
  8944  01097A  0A1F               	xorlw	31	; case 80
  8945  01097C  B4D8               	btfsc	status,2,c
  8946  01097E  D795               	goto	l1458
  8947  010980  0A01               	xorlw	1	; case 81
  8948  010982  B4D8               	btfsc	status,2,c
  8949  010984  D794               	goto	l1459
  8950  010986  0A03               	xorlw	3	; case 82
  8951  010988  B4D8               	btfsc	status,2,c
  8952  01098A  D793               	goto	l1460
  8953  01098C  0A01               	xorlw	1	; case 83
  8954  01098E  B4D8               	btfsc	status,2,c
  8955  010990  D792               	goto	l1461
  8956  010992  0A07               	xorlw	7	; case 84
  8957  010994  B4D8               	btfsc	status,2,c
  8958  010996  D791               	goto	l1462
  8959  010998  0A01               	xorlw	1	; case 85
  8960  01099A  B4D8               	btfsc	status,2,c
  8961  01099C  D790               	goto	l1463
  8962  01099E  0A03               	xorlw	3	; case 86
  8963  0109A0  B4D8               	btfsc	status,2,c
  8964  0109A2  D78F               	goto	l1464
  8965  0109A4  0A01               	xorlw	1	; case 87
  8966  0109A6  B4D8               	btfsc	status,2,c
  8967  0109A8  D78E               	goto	l1465
  8968  0109AA  0A0F               	xorlw	15	; case 88
  8969  0109AC  B4D8               	btfsc	status,2,c
  8970  0109AE  D78D               	goto	l1466
  8971  0109B0  0A01               	xorlw	1	; case 89
  8972  0109B2  B4D8               	btfsc	status,2,c
  8973  0109B4  D78C               	goto	l1467
  8974  0109B6  0A03               	xorlw	3	; case 90
  8975  0109B8  B4D8               	btfsc	status,2,c
  8976  0109BA  D78B               	goto	l1468
  8977  0109BC  0A3B               	xorlw	59	; case 97
  8978  0109BE  B4D8               	btfsc	status,2,c
  8979  0109C0  D722               	goto	l1417
  8980  0109C2  0A03               	xorlw	3	; case 98
  8981  0109C4  B4D8               	btfsc	status,2,c
  8982  0109C6  D721               	goto	l1418
  8983  0109C8  0A01               	xorlw	1	; case 99
  8984  0109CA  B4D8               	btfsc	status,2,c
  8985  0109CC  D720               	goto	l1419
  8986  0109CE  0A07               	xorlw	7	; case 100
  8987  0109D0  B4D8               	btfsc	status,2,c
  8988  0109D2  D71F               	goto	l1420
  8989  0109D4  0A01               	xorlw	1	; case 101
  8990  0109D6  B4D8               	btfsc	status,2,c
  8991  0109D8  D71E               	goto	l1421
  8992  0109DA  0A03               	xorlw	3	; case 102
  8993  0109DC  B4D8               	btfsc	status,2,c
  8994  0109DE  D71D               	goto	l1422
  8995  0109E0  0A01               	xorlw	1	; case 103
  8996  0109E2  B4D8               	btfsc	status,2,c
  8997  0109E4  D71C               	goto	l1423
  8998  0109E6  0A0F               	xorlw	15	; case 104
  8999  0109E8  B4D8               	btfsc	status,2,c
  9000  0109EA  D71B               	goto	l1424
  9001  0109EC  0A01               	xorlw	1	; case 105
  9002  0109EE  B4D8               	btfsc	status,2,c
  9003  0109F0  D71A               	goto	l1425
  9004  0109F2  0A03               	xorlw	3	; case 106
  9005  0109F4  B4D8               	btfsc	status,2,c
  9006  0109F6  D719               	goto	l1426
  9007  0109F8  0A01               	xorlw	1	; case 107
  9008  0109FA  B4D8               	btfsc	status,2,c
  9009  0109FC  D718               	goto	l1427
  9010  0109FE  0A07               	xorlw	7	; case 108
  9011  010A00  B4D8               	btfsc	status,2,c
  9012  010A02  D717               	goto	l1428
  9013  010A04  0A01               	xorlw	1	; case 109
  9014  010A06  B4D8               	btfsc	status,2,c
  9015  010A08  D716               	goto	l1429
  9016  010A0A  0A03               	xorlw	3	; case 110
  9017  010A0C  B4D8               	btfsc	status,2,c
  9018  010A0E  D715               	goto	l1430
  9019  010A10  0A01               	xorlw	1	; case 111
  9020  010A12  B4D8               	btfsc	status,2,c
  9021  010A14  D714               	goto	l1431
  9022  010A16  0A1F               	xorlw	31	; case 112
  9023  010A18  B4D8               	btfsc	status,2,c
  9024  010A1A  D713               	goto	l1432
  9025  010A1C  0A01               	xorlw	1	; case 113
  9026  010A1E  B4D8               	btfsc	status,2,c
  9027  010A20  D712               	goto	l1433
  9028  010A22  0A03               	xorlw	3	; case 114
  9029  010A24  B4D8               	btfsc	status,2,c
  9030  010A26  D711               	goto	l1434
  9031  010A28  0A01               	xorlw	1	; case 115
  9032  010A2A  B4D8               	btfsc	status,2,c
  9033  010A2C  D710               	goto	l1435
  9034  010A2E  0A07               	xorlw	7	; case 116
  9035  010A30  B4D8               	btfsc	status,2,c
  9036  010A32  D70F               	goto	l1436
  9037  010A34  0A01               	xorlw	1	; case 117
  9038  010A36  B4D8               	btfsc	status,2,c
  9039  010A38  D70E               	goto	l1437
  9040  010A3A  0A03               	xorlw	3	; case 118
  9041  010A3C  B4D8               	btfsc	status,2,c
  9042  010A3E  D70D               	goto	l1438
  9043  010A40  0A01               	xorlw	1	; case 119
  9044  010A42  B4D8               	btfsc	status,2,c
  9045  010A44  D70C               	goto	l1439
  9046  010A46  0A0F               	xorlw	15	; case 120
  9047  010A48  B4D8               	btfsc	status,2,c
  9048  010A4A  D70B               	goto	l1440
  9049  010A4C  0A01               	xorlw	1	; case 121
  9050  010A4E  B4D8               	btfsc	status,2,c
  9051  010A50  D70A               	goto	l1441
  9052  010A52  0A03               	xorlw	3	; case 122
  9053  010A54  B4D8               	btfsc	status,2,c
  9054  010A56  D709               	goto	l1442
  9055                           
  9056                           ;Types.c: 354: return 0;
  9057                           
  9058                           ; BSR set to: 0
  9059  010A58  0E00               	movlw	0
  9060  010A5A  0012               	return	
  9061  010A5C                     __end_of_ToSegment:
  9062                           	opt stack 0
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           indf0	equ	0xFEF
  9071                           postinc0	equ	0xFEE
  9072                           fsr0h	equ	0xFEA
  9073                           fsr0l	equ	0xFE9
  9074                           wreg	equ	0xFE8
  9075                           postdec1	equ	0xFE5
  9076                           fsr1h	equ	0xFE2
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           plusw2	equ	0xFDB
  9082                           fsr2h	equ	0xFDA
  9083                           fsr2l	equ	0xFD9
  9084                           status	equ	0xFD8
  9085                           
  9086 ;; *************** function _HMI_SetBar *****************
  9087 ;; Defined at:
  9088 ;;		line 205 in file "HMI.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  pValue          1    wreg     unsigned char 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  pValue          1    0[BANK0 ] unsigned char 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      void 
  9095 ;; Registers used:
  9096 ;;		wreg
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;Total ram usage:        1 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    7
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_Event_HMI_DIPSwitch
  9113 ;;		_Event_HMI_LeftButton
  9114 ;;		_Event_HMI_RightButton
  9115 ;;		_FunctInitHMI
  9116 ;;		_Event_DIPSwitch
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           	psect	text38
  9121  0141FE                     __ptext38:
  9122                           	opt stack 0
  9123  0141FE                     _HMI_SetBar:
  9124                           	opt stack 22
  9125                           
  9126                           ;incstack = 0
  9127                           ;HMI_SetBar@pValue stored from wreg
  9128  0141FE  0100               	movlb	0	; () banked
  9129  014200  6FB4               	movwf	HMI_SetBar@pValue& (0+255),b
  9130                           
  9131                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9132  014202  C0B4  F13C         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9133  014206  0012               	return		;funcret
  9134  014208                     __end_of_HMI_SetBar:
  9135                           	opt stack 0
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon	equ	0xFF2
  9143                           indf0	equ	0xFEF
  9144                           postinc0	equ	0xFEE
  9145                           fsr0h	equ	0xFEA
  9146                           fsr0l	equ	0xFE9
  9147                           wreg	equ	0xFE8
  9148                           postdec1	equ	0xFE5
  9149                           fsr1h	equ	0xFE2
  9150                           fsr1l	equ	0xFE1
  9151                           indf2	equ	0xFDF
  9152                           postinc2	equ	0xFDE
  9153                           postdec2	equ	0xFDD
  9154                           plusw2	equ	0xFDB
  9155                           fsr2h	equ	0xFDA
  9156                           fsr2l	equ	0xFD9
  9157                           status	equ	0xFD8
  9158                           
  9159 ;; *************** function _HMI_Init *****************
  9160 ;; Defined at:
  9161 ;;		line 104 in file "HMI.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  in              2   59[BANK0 ] unsigned short 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      void 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;Total ram usage:        2 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:   16
  9182 ;; This function calls:
  9183 ;;		_Button_Init
  9184 ;;		_SPI_Init
  9185 ;;		_SPI_MinSpeed
  9186 ;; This function is called by:
  9187 ;;		_FunctInitHMI
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text39
  9192  0110EC                     __ptext39:
  9193                           	opt stack 0
  9194  0110EC                     _HMI_Init:
  9195                           	opt stack 13
  9196                           
  9197                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
  9198                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
  9199                           
  9200                           ;incstack = 0
  9201  0110EC  0E65               	movlw	low (_HMIBoard+48)
  9202  0110EE  0102               	movlb	2	; () banked
  9203  0110F0  6FE8               	movwf	Button_Init@pInput& (0+255),b
  9204  0110F2  0E01               	movlw	high (_HMIBoard+48)
  9205  0110F4  0102               	movlb	2	; () banked
  9206  0110F6  6FE9               	movwf	(Button_Init@pInput+1)& (0+255),b
  9207  0110F8  0E00               	movlw	0
  9208  0110FA  0102               	movlb	2	; () banked
  9209  0110FC  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9210  0110FE  0E02               	movlw	2
  9211  011100  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
  9212  011102  0E2C               	movlw	low _HMI_InitButtons
  9213  011104  0102               	movlb	2	; () banked
  9214  011106  6FEC               	movwf	Button_Init@pInitIO& (0+255),b
  9215  011108  0E42               	movlw	high _HMI_InitButtons
  9216  01110A  0102               	movlb	2	; () banked
  9217  01110C  6FED               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9218  01110E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9219  011110  0102               	movlb	2	; () banked
  9220  011112  6FEE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9221  011114  0E00               	movlw	0
  9222  011116  0102               	movlb	2	; () banked
  9223  011118  6FEF               	movwf	Button_Init@pGetState& (0+255),b
  9224  01111A  0E00               	movlw	0
  9225  01111C  0102               	movlb	2	; () banked
  9226  01111E  6FF0               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9227  011120  0E00               	movlw	0
  9228  011122  0102               	movlb	2	; () banked
  9229  011124  6FF1               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9230  011126  0E00               	movlw	0
  9231  011128  0102               	movlb	2	; () banked
  9232  01112A  6FF2               	movwf	Button_Init@pFunction& (0+255),b
  9233  01112C  0E00               	movlw	0
  9234  01112E  0102               	movlb	2	; () banked
  9235  011130  6FF3               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9236  011132  0E00               	movlw	0
  9237  011134  0102               	movlb	2	; () banked
  9238  011136  6FF4               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9239  011138  EC70  F091         	call	_Button_Init	;wreg free
  9240                           
  9241                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
  9242                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
  9243  01113C  0E47               	movlw	low (_HMIBoard+18)
  9244  01113E  0102               	movlb	2	; () banked
  9245  011140  6FE8               	movwf	Button_Init@pInput& (0+255),b
  9246  011142  0E01               	movlw	high (_HMIBoard+18)
  9247  011144  0102               	movlb	2	; () banked
  9248  011146  6FE9               	movwf	(Button_Init@pInput+1)& (0+255),b
  9249  011148  0E00               	movlw	0
  9250  01114A  0102               	movlb	2	; () banked
  9251  01114C  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9252  01114E  0E02               	movlw	2
  9253  011150  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
  9254  011152  0E2C               	movlw	low _HMI_InitButtons
  9255  011154  0102               	movlb	2	; () banked
  9256  011156  6FEC               	movwf	Button_Init@pInitIO& (0+255),b
  9257  011158  0E42               	movlw	high _HMI_InitButtons
  9258  01115A  0102               	movlb	2	; () banked
  9259  01115C  6FED               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9260  01115E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9261  011160  0102               	movlb	2	; () banked
  9262  011162  6FEE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9263  011164  0E00               	movlw	0
  9264  011166  0102               	movlb	2	; () banked
  9265  011168  6FEF               	movwf	Button_Init@pGetState& (0+255),b
  9266  01116A  0E00               	movlw	0
  9267  01116C  0102               	movlb	2	; () banked
  9268  01116E  6FF0               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9269  011170  0E00               	movlw	0
  9270  011172  0102               	movlb	2	; () banked
  9271  011174  6FF1               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9272  011176  0E00               	movlw	0
  9273  011178  0102               	movlb	2	; () banked
  9274  01117A  6FF2               	movwf	Button_Init@pFunction& (0+255),b
  9275  01117C  0E00               	movlw	0
  9276  01117E  0102               	movlb	2	; () banked
  9277  011180  6FF3               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9278  011182  0E00               	movlw	0
  9279  011184  0102               	movlb	2	; () banked
  9280  011186  6FF4               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9281  011188  EC70  F091         	call	_Button_Init	;wreg free
  9282                           
  9283                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
  9284                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
  9285  01118C  0E3D               	movlw	low (_HMIBoard+8)
  9286  01118E  0102               	movlb	2	; () banked
  9287  011190  6FE8               	movwf	Button_Init@pInput& (0+255),b
  9288  011192  0E01               	movlw	high (_HMIBoard+8)
  9289  011194  0102               	movlb	2	; () banked
  9290  011196  6FE9               	movwf	(Button_Init@pInput+1)& (0+255),b
  9291  011198  0E00               	movlw	0
  9292  01119A  0102               	movlb	2	; () banked
  9293  01119C  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9294  01119E  0E02               	movlw	2
  9295  0111A0  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
  9296  0111A2  0E2C               	movlw	low _HMI_InitButtons
  9297  0111A4  0102               	movlb	2	; () banked
  9298  0111A6  6FEC               	movwf	Button_Init@pInitIO& (0+255),b
  9299  0111A8  0E42               	movlw	high _HMI_InitButtons
  9300  0111AA  0102               	movlb	2	; () banked
  9301  0111AC  6FED               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9302  0111AE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9303  0111B0  0102               	movlb	2	; () banked
  9304  0111B2  6FEE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9305  0111B4  0E00               	movlw	0
  9306  0111B6  0102               	movlb	2	; () banked
  9307  0111B8  6FEF               	movwf	Button_Init@pGetState& (0+255),b
  9308  0111BA  0E00               	movlw	0
  9309  0111BC  0102               	movlb	2	; () banked
  9310  0111BE  6FF0               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9311  0111C0  0E00               	movlw	0
  9312  0111C2  0102               	movlb	2	; () banked
  9313  0111C4  6FF1               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9314  0111C6  0E00               	movlw	0
  9315  0111C8  0102               	movlb	2	; () banked
  9316  0111CA  6FF2               	movwf	Button_Init@pFunction& (0+255),b
  9317  0111CC  0E00               	movlw	0
  9318  0111CE  0102               	movlb	2	; () banked
  9319  0111D0  6FF3               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9320  0111D2  0E00               	movlw	0
  9321  0111D4  0102               	movlb	2	; () banked
  9322  0111D6  6FF4               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9323  0111D8  EC70  F091         	call	_Button_Init	;wreg free
  9324                           
  9325                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
  9326                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
  9327  0111DC  0E51               	movlw	low (_HMIBoard+28)
  9328  0111DE  0102               	movlb	2	; () banked
  9329  0111E0  6FE8               	movwf	Button_Init@pInput& (0+255),b
  9330  0111E2  0E01               	movlw	high (_HMIBoard+28)
  9331  0111E4  0102               	movlb	2	; () banked
  9332  0111E6  6FE9               	movwf	(Button_Init@pInput+1)& (0+255),b
  9333  0111E8  0E00               	movlw	0
  9334  0111EA  0102               	movlb	2	; () banked
  9335  0111EC  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9336  0111EE  0E02               	movlw	2
  9337  0111F0  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
  9338  0111F2  0E2C               	movlw	low _HMI_InitButtons
  9339  0111F4  0102               	movlb	2	; () banked
  9340  0111F6  6FEC               	movwf	Button_Init@pInitIO& (0+255),b
  9341  0111F8  0E42               	movlw	high _HMI_InitButtons
  9342  0111FA  0102               	movlb	2	; () banked
  9343  0111FC  6FED               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9344  0111FE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9345  011200  0102               	movlb	2	; () banked
  9346  011202  6FEE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9347  011204  0E00               	movlw	0
  9348  011206  0102               	movlb	2	; () banked
  9349  011208  6FEF               	movwf	Button_Init@pGetState& (0+255),b
  9350  01120A  0E00               	movlw	0
  9351  01120C  0102               	movlb	2	; () banked
  9352  01120E  6FF0               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9353  011210  0E00               	movlw	0
  9354  011212  0102               	movlb	2	; () banked
  9355  011214  6FF1               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9356  011216  0E00               	movlw	0
  9357  011218  0102               	movlb	2	; () banked
  9358  01121A  6FF2               	movwf	Button_Init@pFunction& (0+255),b
  9359  01121C  0E00               	movlw	0
  9360  01121E  0102               	movlb	2	; () banked
  9361  011220  6FF3               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9362  011222  0E00               	movlw	0
  9363  011224  0102               	movlb	2	; () banked
  9364  011226  6FF4               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9365  011228  EC70  F091         	call	_Button_Init	;wreg free
  9366                           
  9367                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
  9368                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
  9369  01122C  0E5B               	movlw	low (_HMIBoard+38)
  9370  01122E  0102               	movlb	2	; () banked
  9371  011230  6FE8               	movwf	Button_Init@pInput& (0+255),b
  9372  011232  0E01               	movlw	high (_HMIBoard+38)
  9373  011234  0102               	movlb	2	; () banked
  9374  011236  6FE9               	movwf	(Button_Init@pInput+1)& (0+255),b
  9375  011238  0E00               	movlw	0
  9376  01123A  0102               	movlb	2	; () banked
  9377  01123C  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
  9378  01123E  0E02               	movlw	2
  9379  011240  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
  9380  011242  0E2C               	movlw	low _HMI_InitButtons
  9381  011244  0102               	movlb	2	; () banked
  9382  011246  6FEC               	movwf	Button_Init@pInitIO& (0+255),b
  9383  011248  0E42               	movlw	high _HMI_InitButtons
  9384  01124A  0102               	movlb	2	; () banked
  9385  01124C  6FED               	movwf	(Button_Init@pInitIO+1)& (0+255),b
  9386  01124E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
  9387  011250  0102               	movlb	2	; () banked
  9388  011252  6FEE               	movwf	(Button_Init@pInitIO+2)& (0+255),b
  9389  011254  0E00               	movlw	0
  9390  011256  0102               	movlb	2	; () banked
  9391  011258  6FEF               	movwf	Button_Init@pGetState& (0+255),b
  9392  01125A  0E00               	movlw	0
  9393  01125C  0102               	movlb	2	; () banked
  9394  01125E  6FF0               	movwf	(Button_Init@pGetState+1)& (0+255),b
  9395  011260  0E00               	movlw	0
  9396  011262  0102               	movlb	2	; () banked
  9397  011264  6FF1               	movwf	(Button_Init@pGetState+2)& (0+255),b
  9398  011266  0E00               	movlw	0
  9399  011268  0102               	movlb	2	; () banked
  9400  01126A  6FF2               	movwf	Button_Init@pFunction& (0+255),b
  9401  01126C  0E00               	movlw	0
  9402  01126E  0102               	movlb	2	; () banked
  9403  011270  6FF3               	movwf	(Button_Init@pFunction+1)& (0+255),b
  9404  011272  0E00               	movlw	0
  9405  011274  0102               	movlb	2	; () banked
  9406  011276  6FF4               	movwf	(Button_Init@pFunction+2)& (0+255),b
  9407  011278  EC70  F091         	call	_Button_Init	;wreg free
  9408                           
  9409                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
  9410  01127C  0EA0               	movlw	160
  9411  01127E  0100               	movlb	0	; () banked
  9412  011280  6FE1               	movwf	SPI_Init@pClock& (0+255),b
  9413  011282  0E86               	movlw	134
  9414  011284  6FE2               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9415  011286  0E01               	movlw	1
  9416  011288  6FE3               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9417  01128A  0E00               	movlw	0
  9418  01128C  6FE4               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9419  01128E  0E00               	movlw	0
  9420  011290  0100               	movlb	0	; () banked
  9421  011292  6FE5               	movwf	SPI_Init@pChannel& (0+255),b
  9422  011294  0E02               	movlw	2
  9423  011296  0100               	movlb	0	; () banked
  9424  011298  6FE6               	movwf	SPI_Init@pMode& (0+255),b
  9425  01129A  EC00  F080         	call	_SPI_Init	;wreg free
  9426                           
  9427                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
  9428  01129E  0E6F               	movlw	low _SPI1
  9429  0112A0  0100               	movlb	0	; () banked
  9430  0112A2  6FC3               	movwf	SPI_MinSpeed@pInput& (0+255),b
  9431  0112A4  0E01               	movlw	high _SPI1
  9432  0112A6  0100               	movlb	0	; () banked
  9433  0112A8  6FC4               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
  9434  0112AA  ECF0  F099         	call	_SPI_MinSpeed	;wreg free
  9435                           
  9436                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
  9437  0112AE  0E00               	movlw	0
  9438  0112B0  0100               	movlb	0	; () banked
  9439  0112B2  6FF0               	movwf	(HMI_Init@in+1)& (0+255),b
  9440  0112B4  0E00               	movlw	0
  9441  0112B6  6FEF               	movwf	HMI_Init@in& (0+255),b
  9442  0112B8                     l16333:
  9443                           
  9444                           ; BSR set to: 0
  9445  0112B8  0100               	movlb	0	; () banked
  9446  0112BA  51F0               	movf	(HMI_Init@in+1)& (0+255),w,b
  9447  0112BC  E113               	bnz	l1783
  9448  0112BE  0E08               	movlw	8
  9449  0112C0  0100               	movlb	0	; () banked
  9450  0112C2  5DEF               	subwf	HMI_Init@in& (0+255),w,b
  9451  0112C4  B0D8               	btfsc	status,0,c
  9452  0112C6  0012               	return	
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
  9456                           
  9457                           ; BSR set to: 0
  9458                           
  9459                           ; BSR set to: 0
  9460  0112C8  0E35               	movlw	low _HMIBoard
  9461  0112CA  0100               	movlb	0	; () banked
  9462  0112CC  25EF               	addwf	HMI_Init@in& (0+255),w,b
  9463  0112CE  6ED9               	movwf	fsr2l,c
  9464  0112D0  0E01               	movlw	high _HMIBoard
  9465  0112D2  0100               	movlb	0	; () banked
  9466  0112D4  21F0               	addwfc	(HMI_Init@in+1)& (0+255),w,b
  9467  0112D6  6EDA               	movwf	fsr2h,c
  9468  0112D8  0E00               	movlw	0
  9469  0112DA  6EDF               	movwf	indf2,c
  9470                           
  9471                           ; BSR set to: 0
  9472  0112DC  0100               	movlb	0	; () banked
  9473  0112DE  4BEF               	infsnz	HMI_Init@in& (0+255),f,b
  9474  0112E0  2BF0               	incf	(HMI_Init@in+1)& (0+255),f,b
  9475  0112E2  D7EA               	goto	l16333
  9476  0112E4                     l1783:
  9477                           
  9478                           ; BSR set to: 0
  9479  0112E4  0012               	return		;funcret
  9480  0112E6                     __end_of_HMI_Init:
  9481                           	opt stack 0
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           indf0	equ	0xFEF
  9490                           postinc0	equ	0xFEE
  9491                           fsr0h	equ	0xFEA
  9492                           fsr0l	equ	0xFE9
  9493                           wreg	equ	0xFE8
  9494                           postdec1	equ	0xFE5
  9495                           fsr1h	equ	0xFE2
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           plusw2	equ	0xFDB
  9501                           fsr2h	equ	0xFDA
  9502                           fsr2l	equ	0xFD9
  9503                           status	equ	0xFD8
  9504                           
  9505 ;; *************** function _SPI_MinSpeed *****************
  9506 ;; Defined at:
  9507 ;;		line 190 in file "Library/SPI.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9510 ;;		 -> SPI1(11), 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      void 
  9515 ;; Registers used:
  9516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;Total ram usage:        2 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    9
  9529 ;; This function calls:
  9530 ;;		_Byte_SetBit
  9531 ;;		_Byte_SetQuad
  9532 ;; This function is called by:
  9533 ;;		_HMI_Init
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           	psect	text40
  9538  0133E0                     __ptext40:
  9539                           	opt stack 0
  9540  0133E0                     _SPI_MinSpeed:
  9541                           	opt stack 19
  9542                           
  9543                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;incstack = 0
  9547  0133E0  0100               	movlb	0	; () banked
  9548  0133E2  EE20 F006          	lfsr	2,6
  9549  0133E6  51C3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
  9550  0133E8  26D9               	addwf	fsr2l,f,c
  9551  0133EA  51C4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
  9552  0133EC  22DA               	addwfc	fsr2h,f,c
  9553  0133EE  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  9554  0133F2  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  9555  0133F6  0E05               	movlw	5
  9556  0133F8  0100               	movlb	0	; () banked
  9557  0133FA  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  9558  0133FC  0E00               	movlw	0
  9559  0133FE  0100               	movlb	0	; () banked
  9560  013400  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  9561  013402  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  9562                           
  9563                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
  9564  013406  0100               	movlb	0	; () banked
  9565  013408  EE20 F006          	lfsr	2,6
  9566  01340C  51C3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
  9567  01340E  26D9               	addwf	fsr2l,f,c
  9568  013410  51C4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
  9569  013412  22DA               	addwfc	fsr2h,f,c
  9570  013414  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
  9571  013418  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
  9572  01341C  0E00               	movlw	0
  9573  01341E  0100               	movlb	0	; () banked
  9574  013420  6FC1               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9575  013422  0E02               	movlw	2
  9576  013424  0100               	movlb	0	; () banked
  9577  013426  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
  9578  013428  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
  9579                           
  9580                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9581  01342C  0100               	movlb	0	; () banked
  9582  01342E  EE20 F006          	lfsr	2,6
  9583  013432  51C3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
  9584  013434  26D9               	addwf	fsr2l,f,c
  9585  013436  51C4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
  9586  013438  22DA               	addwfc	fsr2h,f,c
  9587  01343A  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  9588  01343E  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  9589  013442  0E05               	movlw	5
  9590  013444  0100               	movlb	0	; () banked
  9591  013446  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  9592  013448  0E01               	movlw	1
  9593  01344A  0100               	movlb	0	; () banked
  9594  01344C  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  9595  01344E  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  9596  013452  0012               	return		;funcret
  9597  013454                     __end_of_SPI_MinSpeed:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           indf0	equ	0xFEF
  9607                           postinc0	equ	0xFEE
  9608                           fsr0h	equ	0xFEA
  9609                           fsr0l	equ	0xFE9
  9610                           wreg	equ	0xFE8
  9611                           postdec1	equ	0xFE5
  9612                           fsr1h	equ	0xFE2
  9613                           fsr1l	equ	0xFE1
  9614                           indf2	equ	0xFDF
  9615                           postinc2	equ	0xFDE
  9616                           postdec2	equ	0xFDD
  9617                           plusw2	equ	0xFDB
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function _SPI_Init *****************
  9623 ;; Defined at:
  9624 ;;		line 12 in file "Library/SPI.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;  pClock          4   45[BANK0 ] unsigned long 
  9627 ;;  pChannel        1   49[BANK0 ] enum E6795
  9628 ;;  pMode           1   50[BANK0 ] enum E6799
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  pInput          2   51[BANK0 ] PTR struct SPI
  9631 ;;		 -> SPI1(11), SPI2(11), 
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;Total ram usage:        8 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:   12
  9648 ;; This function calls:
  9649 ;;		_Byte_SetBit
  9650 ;;		_Byte_SetQuad
  9651 ;;		_Port_SetPinType
  9652 ;;		_SPI_DCS
  9653 ;;		_SPI_DisableISR
  9654 ;;		_Timer2_Init
  9655 ;; This function is called by:
  9656 ;;		_Configure_GPIOs
  9657 ;;		_HMI_Init
  9658 ;; This function uses a non-reentrant model
  9659 ;;
  9660                           
  9661                           	psect	text41
  9662  010000                     __ptext41:
  9663                           	opt stack 0
  9664  010000                     _SPI_Init:
  9665                           	opt stack 15
  9666                           
  9667                           ;SPI.c: 14: SPIPtr pInput;
  9668                           ;SPI.c: 16: switch (pChannel)
  9669                           
  9670                           ;incstack = 0
  9671  010000  D00C               	goto	l1149
  9672  010002                     
  9673                           ;SPI.c: 19: pInput = &SPI1;
  9674  010002  0E6F               	movlw	low _SPI1
  9675  010004  0100               	movlb	0	; () banked
  9676  010006  6FE7               	movwf	SPI_Init@pInput& (0+255),b
  9677  010008  0E01               	movlw	high _SPI1
  9678  01000A  D004               	goto	L6
  9679  01000C                     
  9680                           ; BSR set to: 0
  9681                           ;SPI.c: 22: pInput = &SPI2;
  9682                           
  9683                           ; BSR set to: 0
  9684  01000C  0E7A               	movlw	low _SPI2
  9685  01000E  0100               	movlb	0	; () banked
  9686  010010  6FE7               	movwf	SPI_Init@pInput& (0+255),b
  9687  010012  0E01               	movlw	high _SPI2
  9688  010014                     L6:
  9689  010014  0100               	movlb	0	; () banked
  9690  010016  6FE8               	movwf	(SPI_Init@pInput+1)& (0+255),b
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;SPI.c: 24: };
  9694                           
  9695                           ;SPI.c: 23: break;
  9696  010018  D008               	goto	l1151
  9697  01001A                     l1149:
  9698                           
  9699                           ; BSR set to: 0
  9700  01001A  0100               	movlb	0	; () banked
  9701  01001C  51E5               	movf	SPI_Init@pChannel& (0+255),w,b
  9702                           
  9703                           ; Switch size 1, requested type "space"
  9704                           ; Number of cases is 2, Range of values is 0 to 1
  9705                           ; switch strategies available:
  9706                           ; Name         Instructions Cycles
  9707                           ; simple_byte            7     4 (average)
  9708                           ;	Chosen strategy is simple_byte
  9709  01001E  0A00               	xorlw	0	; case 0
  9710  010020  B4D8               	btfsc	status,2,c
  9711  010022  D7EF               	goto	l1150
  9712  010024  0A01               	xorlw	1	; case 1
  9713  010026  B4D8               	btfsc	status,2,c
  9714  010028  D7F1               	goto	l1152
  9715  01002A                     l1151:
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;SPI.c: 26: pInput->mChannel = pChannel;
  9719                           
  9720                           ; BSR set to: 0
  9721  01002A  0100               	movlb	0	; () banked
  9722  01002C  EE20 F002          	lfsr	2,2
  9723  010030  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9724  010032  26D9               	addwf	fsr2l,f,c
  9725  010034  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9726  010036  22DA               	addwfc	fsr2h,f,c
  9727  010038  C0E5  FFDF         	movff	SPI_Init@pChannel,indf2
  9728                           
  9729                           ;SPI.c: 35: switch (pChannel)
  9730  01003C  D0B1               	goto	l1153
  9731  01003E                     
  9732                           ; BSR set to: 0
  9733                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
  9734                           
  9735                           ; BSR set to: 0
  9736  01003E  0EA4               	movlw	low _PortC
  9737  010040  0100               	movlb	0	; () banked
  9738  010042  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9739  010044  0E00               	movlw	high _PortC
  9740  010046  0100               	movlb	0	; () banked
  9741  010048  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9742  01004A  0E02               	movlw	2
  9743  01004C  0100               	movlb	0	; () banked
  9744  01004E  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9745  010050  0E03               	movlw	3
  9746  010052  0100               	movlb	0	; () banked
  9747  010054  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9748  010056  EC73  F089         	call	_Port_SetPinType	;wreg free
  9749                           
  9750                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
  9751  01005A  0EA4               	movlw	low _PortC
  9752  01005C  0100               	movlb	0	; () banked
  9753  01005E  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9754  010060  0E00               	movlw	high _PortC
  9755  010062  0100               	movlb	0	; () banked
  9756  010064  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9757  010066  0E03               	movlw	3
  9758  010068  0100               	movlb	0	; () banked
  9759  01006A  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9760  01006C  0E03               	movlw	3
  9761  01006E  0100               	movlb	0	; () banked
  9762  010070  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9763  010072  EC73  F089         	call	_Port_SetPinType	;wreg free
  9764                           
  9765                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
  9766  010076  0EA4               	movlw	low _PortC
  9767  010078  0100               	movlb	0	; () banked
  9768  01007A  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9769  01007C  0E00               	movlw	high _PortC
  9770  01007E  0100               	movlb	0	; () banked
  9771  010080  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9772  010082  0E05               	movlw	5
  9773  010084  0100               	movlb	0	; () banked
  9774  010086  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9775  010088  0E03               	movlw	3
  9776  01008A  0100               	movlb	0	; () banked
  9777  01008C  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9778  01008E  EC73  F089         	call	_Port_SetPinType	;wreg free
  9779                           
  9780                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
  9781  010092  0EA4               	movlw	low _PortC
  9782  010094  0100               	movlb	0	; () banked
  9783  010096  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9784  010098  0E00               	movlw	high _PortC
  9785  01009A  0100               	movlb	0	; () banked
  9786  01009C  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9787  01009E  0E04               	movlw	4
  9788  0100A0  0100               	movlb	0	; () banked
  9789  0100A2  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9790  0100A4  0E00               	movlw	0
  9791  0100A6  0100               	movlb	0	; () banked
  9792  0100A8  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9793  0100AA  EC73  F089         	call	_Port_SetPinType	;wreg free
  9794                           
  9795                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
  9796  0100AE  0100               	movlb	0	; () banked
  9797  0100B0  EE20 F003          	lfsr	2,3
  9798  0100B4  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9799  0100B6  26D9               	addwf	fsr2l,f,c
  9800  0100B8  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9801  0100BA  22DA               	addwfc	fsr2h,f,c
  9802  0100BC  0EC7               	movlw	199
  9803  0100BE  6EDE               	movwf	postinc2,c
  9804  0100C0  0E0F               	movlw	15
  9805  0100C2  6EDD               	movwf	postdec2,c
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
  9809  0100C4  0100               	movlb	0	; () banked
  9810  0100C6  EE20 F006          	lfsr	2,6
  9811  0100CA  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9812  0100CC  26D9               	addwf	fsr2l,f,c
  9813  0100CE  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9814  0100D0  22DA               	addwfc	fsr2h,f,c
  9815  0100D2  0EC6               	movlw	198
  9816  0100D4  6EDE               	movwf	postinc2,c
  9817  0100D6  0E0F               	movlw	15
  9818  0100D8  6EDD               	movwf	postdec2,c
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
  9822  0100DA  0100               	movlb	0	; () banked
  9823  0100DC  EE20 F009          	lfsr	2,9
  9824  0100E0  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9825  0100E2  26D9               	addwf	fsr2l,f,c
  9826  0100E4  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9827  0100E6  22DA               	addwfc	fsr2h,f,c
  9828  0100E8  0EC9               	movlw	201
  9829  0100EA  D056               	goto	L7
  9830  0100EC                     
  9831                           ; BSR set to: 0
  9832                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
  9833                           
  9834                           ; BSR set to: 0
  9835  0100EC  0EA3               	movlw	low _PortD
  9836  0100EE  0100               	movlb	0	; () banked
  9837  0100F0  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9838  0100F2  0E01               	movlw	high _PortD
  9839  0100F4  0100               	movlb	0	; () banked
  9840  0100F6  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9841  0100F8  0E07               	movlw	7
  9842  0100FA  0100               	movlb	0	; () banked
  9843  0100FC  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9844  0100FE  0E03               	movlw	3
  9845  010100  0100               	movlb	0	; () banked
  9846  010102  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9847  010104  EC73  F089         	call	_Port_SetPinType	;wreg free
  9848                           
  9849                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
  9850  010108  0EA3               	movlw	low _PortD
  9851  01010A  0100               	movlb	0	; () banked
  9852  01010C  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9853  01010E  0E01               	movlw	high _PortD
  9854  010110  0100               	movlb	0	; () banked
  9855  010112  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9856  010114  0E06               	movlw	6
  9857  010116  0100               	movlb	0	; () banked
  9858  010118  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9859  01011A  0E03               	movlw	3
  9860  01011C  0100               	movlb	0	; () banked
  9861  01011E  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9862  010120  EC73  F089         	call	_Port_SetPinType	;wreg free
  9863                           
  9864                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
  9865  010124  0EA3               	movlw	low _PortD
  9866  010126  0100               	movlb	0	; () banked
  9867  010128  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9868  01012A  0E01               	movlw	high _PortD
  9869  01012C  0100               	movlb	0	; () banked
  9870  01012E  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9871  010130  0E04               	movlw	4
  9872  010132  0100               	movlb	0	; () banked
  9873  010134  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9874  010136  0E03               	movlw	3
  9875  010138  0100               	movlb	0	; () banked
  9876  01013A  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9877  01013C  EC73  F089         	call	_Port_SetPinType	;wreg free
  9878                           
  9879                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
  9880  010140  0EA3               	movlw	low _PortD
  9881  010142  0100               	movlb	0	; () banked
  9882  010144  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
  9883  010146  0E01               	movlw	high _PortD
  9884  010148  0100               	movlb	0	; () banked
  9885  01014A  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9886  01014C  0E05               	movlw	5
  9887  01014E  0100               	movlb	0	; () banked
  9888  010150  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
  9889  010152  0E00               	movlw	0
  9890  010154  0100               	movlb	0	; () banked
  9891  010156  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
  9892  010158  EC73  F089         	call	_Port_SetPinType	;wreg free
  9893                           
  9894                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
  9895  01015C  0100               	movlb	0	; () banked
  9896  01015E  EE20 F003          	lfsr	2,3
  9897  010162  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9898  010164  26D9               	addwf	fsr2l,f,c
  9899  010166  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9900  010168  22DA               	addwfc	fsr2h,f,c
  9901  01016A  0E6D               	movlw	109
  9902  01016C  6EDE               	movwf	postinc2,c
  9903  01016E  0E0F               	movlw	15
  9904  010170  6EDD               	movwf	postdec2,c
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
  9908  010172  0100               	movlb	0	; () banked
  9909  010174  EE20 F006          	lfsr	2,6
  9910  010178  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9911  01017A  26D9               	addwf	fsr2l,f,c
  9912  01017C  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9913  01017E  22DA               	addwfc	fsr2h,f,c
  9914  010180  0E6C               	movlw	108
  9915  010182  6EDE               	movwf	postinc2,c
  9916  010184  0E0F               	movlw	15
  9917  010186  6EDD               	movwf	postdec2,c
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
  9921  010188  0100               	movlb	0	; () banked
  9922  01018A  EE20 F009          	lfsr	2,9
  9923  01018E  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9924  010190  26D9               	addwf	fsr2l,f,c
  9925  010192  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9926  010194  22DA               	addwfc	fsr2h,f,c
  9927  010196  0E6F               	movlw	111
  9928  010198                     L7:
  9929  010198  6EDE               	movwf	postinc2,c
  9930  01019A  0E0F               	movlw	15
  9931  01019C  6EDD               	movwf	postdec2,c
  9932                           
  9933                           ;SPI.c: 68: break;
  9934  01019E  D009               	goto	l1155
  9935  0101A0                     l1153:
  9936                           
  9937                           ; BSR set to: 0
  9938                           
  9939                           ; BSR set to: 0
  9940  0101A0  0100               	movlb	0	; () banked
  9941  0101A2  51E5               	movf	SPI_Init@pChannel& (0+255),w,b
  9942                           
  9943                           ; Switch size 1, requested type "space"
  9944                           ; Number of cases is 2, Range of values is 0 to 1
  9945                           ; switch strategies available:
  9946                           ; Name         Instructions Cycles
  9947                           ; simple_byte            7     4 (average)
  9948                           ;	Chosen strategy is simple_byte
  9949  0101A4  0A00               	xorlw	0	; case 0
  9950  0101A6  B4D8               	btfsc	status,2,c
  9951  0101A8  D74A               	goto	l1154
  9952  0101AA  0A01               	xorlw	1	; case 1
  9953  0101AC  A4D8               	btfss	status,2,c
  9954  0101AE  0012               	return	
  9955  0101B0  D79D               	goto	l1156
  9956  0101B2                     l1155:
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9960                           
  9961                           ; BSR set to: 0
  9962  0101B2  0100               	movlb	0	; () banked
  9963  0101B4  EE20 F006          	lfsr	2,6
  9964  0101B8  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9965  0101BA  26D9               	addwf	fsr2l,f,c
  9966  0101BC  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9967  0101BE  22DA               	addwfc	fsr2h,f,c
  9968  0101C0  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  9969  0101C4  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  9970  0101C8  0E05               	movlw	5
  9971  0101CA  0100               	movlb	0	; () banked
  9972  0101CC  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  9973  0101CE  0E00               	movlw	0
  9974  0101D0  0100               	movlb	0	; () banked
  9975  0101D2  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  9976  0101D4  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  9977                           
  9978                           ;SPI.c: 77: switch(pMode)
  9979  0101D8  D09C               	goto	l1159
  9980  0101DA                     
  9981                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
  9982  0101DA  0100               	movlb	0	; () banked
  9983  0101DC  EE20 F006          	lfsr	2,6
  9984  0101E0  51E7               	movf	SPI_Init@pInput& (0+255),w,b
  9985  0101E2  26D9               	addwf	fsr2l,f,c
  9986  0101E4  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  9987  0101E6  22DA               	addwfc	fsr2h,f,c
  9988  0101E8  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
  9989  0101EC  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
  9990  0101F0  0E04               	movlw	4
  9991  0101F2  0100               	movlb	0	; () banked
  9992  0101F4  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
  9993  0101F6  0E00               	movlw	0
  9994  0101F8  0100               	movlb	0	; () banked
  9995  0101FA  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
  9996  0101FC  ECA7  F09B         	call	_Byte_SetBit	;wreg free
  9997                           
  9998                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
  9999  010200  0100               	movlb	0	; () banked
 10000  010202  EE20 F003          	lfsr	2,3
 10001  010206  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10002  010208  26D9               	addwf	fsr2l,f,c
 10003  01020A  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10004  01020C  22DA               	addwfc	fsr2h,f,c
 10005  01020E  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10006  010212  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10007  010216  0E06               	movlw	6
 10008  010218  0100               	movlb	0	; () banked
 10009  01021A  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10010  01021C  0E00               	movlw	0
 10011  01021E  0100               	movlb	0	; () banked
 10012  010220  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10013  010222  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10014                           
 10015                           ;SPI.c: 82: break;
 10016  010226  D084               	goto	l1161
 10017  010228                     
 10018                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 10019  010228  0100               	movlb	0	; () banked
 10020  01022A  EE20 F006          	lfsr	2,6
 10021  01022E  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10022  010230  26D9               	addwf	fsr2l,f,c
 10023  010232  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10024  010234  22DA               	addwfc	fsr2h,f,c
 10025  010236  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10026  01023A  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10027  01023E  0E04               	movlw	4
 10028  010240  0100               	movlb	0	; () banked
 10029  010242  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10030  010244  0E00               	movlw	0
 10031  010246  0100               	movlb	0	; () banked
 10032  010248  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10033  01024A  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10034                           
 10035                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 10036  01024E  0100               	movlb	0	; () banked
 10037  010250  EE20 F003          	lfsr	2,3
 10038  010254  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10039  010256  26D9               	addwf	fsr2l,f,c
 10040  010258  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10041  01025A  22DA               	addwfc	fsr2h,f,c
 10042  01025C  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10043  010260  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10044  010264  0E06               	movlw	6
 10045  010266  0100               	movlb	0	; () banked
 10046  010268  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10047  01026A  0E01               	movlw	1
 10048  01026C  0100               	movlb	0	; () banked
 10049  01026E  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10050  010270  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10051                           
 10052                           ;SPI.c: 86: break;
 10053  010274  D05D               	goto	l1161
 10054  010276                     
 10055                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 10056  010276  0100               	movlb	0	; () banked
 10057  010278  EE20 F006          	lfsr	2,6
 10058  01027C  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10059  01027E  26D9               	addwf	fsr2l,f,c
 10060  010280  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10061  010282  22DA               	addwfc	fsr2h,f,c
 10062  010284  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10063  010288  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10064  01028C  0E04               	movlw	4
 10065  01028E  0100               	movlb	0	; () banked
 10066  010290  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10067  010292  0E01               	movlw	1
 10068  010294  0100               	movlb	0	; () banked
 10069  010296  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10070  010298  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10071                           
 10072                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 10073  01029C  0100               	movlb	0	; () banked
 10074  01029E  EE20 F003          	lfsr	2,3
 10075  0102A2  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10076  0102A4  26D9               	addwf	fsr2l,f,c
 10077  0102A6  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10078  0102A8  22DA               	addwfc	fsr2h,f,c
 10079  0102AA  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10080  0102AE  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10081  0102B2  0E06               	movlw	6
 10082  0102B4  0100               	movlb	0	; () banked
 10083  0102B6  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10084  0102B8  0E00               	movlw	0
 10085  0102BA  0100               	movlb	0	; () banked
 10086  0102BC  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10087  0102BE  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10088                           
 10089                           ;SPI.c: 90: break;
 10090  0102C2  D036               	goto	l1161
 10091  0102C4                     
 10092                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 10093  0102C4  0100               	movlb	0	; () banked
 10094  0102C6  EE20 F006          	lfsr	2,6
 10095  0102CA  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10096  0102CC  26D9               	addwf	fsr2l,f,c
 10097  0102CE  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10098  0102D0  22DA               	addwfc	fsr2h,f,c
 10099  0102D2  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10100  0102D6  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10101  0102DA  0E04               	movlw	4
 10102  0102DC  0100               	movlb	0	; () banked
 10103  0102DE  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10104  0102E0  0E01               	movlw	1
 10105  0102E2  0100               	movlb	0	; () banked
 10106  0102E4  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10107  0102E6  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10108                           
 10109                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 10110  0102EA  0100               	movlb	0	; () banked
 10111  0102EC  EE20 F003          	lfsr	2,3
 10112  0102F0  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10113  0102F2  26D9               	addwf	fsr2l,f,c
 10114  0102F4  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10115  0102F6  22DA               	addwfc	fsr2h,f,c
 10116  0102F8  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10117  0102FC  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10118  010300  0E06               	movlw	6
 10119  010302  0100               	movlb	0	; () banked
 10120  010304  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10121  010306  0E01               	movlw	1
 10122  010308  0100               	movlb	0	; () banked
 10123  01030A  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10124  01030C  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10125                           
 10126                           ;SPI.c: 94: break;
 10127  010310  D00F               	goto	l1161
 10128  010312                     l1159:
 10129  010312  0100               	movlb	0	; () banked
 10130  010314  51E6               	movf	SPI_Init@pMode& (0+255),w,b
 10131                           
 10132                           ; Switch size 1, requested type "space"
 10133                           ; Number of cases is 4, Range of values is 0 to 3
 10134                           ; switch strategies available:
 10135                           ; Name         Instructions Cycles
 10136                           ; simple_byte           13     7 (average)
 10137                           ;	Chosen strategy is simple_byte
 10138  010316  0A00               	xorlw	0	; case 0
 10139  010318  B4D8               	btfsc	status,2,c
 10140  01031A  D75F               	goto	l1160
 10141  01031C  0A01               	xorlw	1	; case 1
 10142  01031E  B4D8               	btfsc	status,2,c
 10143  010320  D783               	goto	l1162
 10144  010322  0A03               	xorlw	3	; case 2
 10145  010324  B4D8               	btfsc	status,2,c
 10146  010326  D7A7               	goto	l1163
 10147  010328  0A01               	xorlw	1	; case 3
 10148  01032A  A4D8               	btfss	status,2,c
 10149  01032C  0012               	return	
 10150  01032E  D7CA               	goto	l1164
 10151  010330                     l1161:
 10152                           
 10153                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 10154                           
 10155                           ; BSR set to: 0
 10156  010330  0100               	movlb	0	; () banked
 10157  010332  EE20 F006          	lfsr	2,6
 10158  010336  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10159  010338  26D9               	addwf	fsr2l,f,c
 10160  01033A  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10161  01033C  22DA               	addwfc	fsr2h,f,c
 10162  01033E  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10163  010342  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10164  010346  0E07               	movlw	7
 10165  010348  0100               	movlb	0	; () banked
 10166  01034A  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10167  01034C  0E00               	movlw	0
 10168  01034E  0100               	movlb	0	; () banked
 10169  010350  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10170  010352  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10171                           
 10172                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 10173  010356  0100               	movlb	0	; () banked
 10174  010358  EE20 F006          	lfsr	2,6
 10175  01035C  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10176  01035E  26D9               	addwf	fsr2l,f,c
 10177  010360  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10178  010362  22DA               	addwfc	fsr2h,f,c
 10179  010364  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10180  010368  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10181  01036C  0E06               	movlw	6
 10182  01036E  0100               	movlb	0	; () banked
 10183  010370  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10184  010372  0E00               	movlw	0
 10185  010374  0100               	movlb	0	; () banked
 10186  010376  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10187  010378  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10188                           
 10189                           ;SPI.c: 106: Timer2_Init(pClock);
 10190  01037C  C0E1  F0C1         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 10191  010380  C0E2  F0C2         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 10192  010384  C0E3  F0C3         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 10193  010388  C0E4  F0C4         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 10194  01038C  ECCC  F08E         	call	_Timer2_Init	;wreg free
 10195                           
 10196                           ;SPI.c: 112: SPI_DisableISR(pInput);
 10197  010390  C0E7  F0B4         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 10198  010394  C0E8  F0B5         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 10199  010398  ECB4  F09F         	call	_SPI_DisableISR	;wreg free
 10200                           
 10201                           ;SPI.c: 116: switch (pChannel)
 10202  01039C  D004               	goto	l1166
 10203  01039E                     l1167:
 10204                           
 10205                           ; BSR set to: 0
 10206  01039E  869F               	bsf	3999,3,c	;volatile
 10207  0103A0  D00B               	goto	l1168
 10208  0103A2                     l1169:
 10209                           
 10210                           ; BSR set to: 0
 10211  0103A2  8EA5               	bsf	4005,7,c	;volatile
 10212  0103A4  D009               	goto	l1168
 10213  0103A6                     l1166:
 10214                           
 10215                           ; BSR set to: 0
 10216  0103A6  0100               	movlb	0	; () banked
 10217  0103A8  51E5               	movf	SPI_Init@pChannel& (0+255),w,b
 10218                           
 10219                           ; Switch size 1, requested type "space"
 10220                           ; Number of cases is 2, Range of values is 0 to 1
 10221                           ; switch strategies available:
 10222                           ; Name         Instructions Cycles
 10223                           ; simple_byte            7     4 (average)
 10224                           ;	Chosen strategy is simple_byte
 10225  0103AA  0A00               	xorlw	0	; case 0
 10226  0103AC  B4D8               	btfsc	status,2,c
 10227  0103AE  D7F7               	goto	l1167
 10228  0103B0  0A01               	xorlw	1	; case 1
 10229  0103B2  A4D8               	btfss	status,2,c
 10230  0103B4  0012               	return	
 10231  0103B6  D7F5               	goto	l1169
 10232  0103B8                     l1168:
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;SPI.c: 124: SPI_DCS(pInput);
 10236                           
 10237                           ; BSR set to: 0
 10238  0103B8  C0E7  F0B4         	movff	SPI_Init@pInput,SPI_DCS@pInput
 10239  0103BC  C0E8  F0B5         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 10240  0103C0  EC58  F09F         	call	_SPI_DCS	;wreg free
 10241                           
 10242                           ;SPI.c: 126: pInput->mBusy = 0;
 10243  0103C4  C0E7  FFD9         	movff	SPI_Init@pInput,fsr2l
 10244  0103C8  C0E8  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 10245  0103CC  0E00               	movlw	0
 10246  0103CE  6EDF               	movwf	indf2,c
 10247                           
 10248                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 10249  0103D0  0100               	movlb	0	; () banked
 10250  0103D2  EE20 F006          	lfsr	2,6
 10251  0103D6  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10252  0103D8  26D9               	addwf	fsr2l,f,c
 10253  0103DA  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10254  0103DC  22DA               	addwfc	fsr2h,f,c
 10255  0103DE  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 10256  0103E2  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 10257  0103E6  0E00               	movlw	0
 10258  0103E8  0100               	movlb	0	; () banked
 10259  0103EA  6FC1               	movwf	Byte_SetQuad@pQuad& (0+255),b
 10260  0103EC  0E03               	movlw	3
 10261  0103EE  0100               	movlb	0	; () banked
 10262  0103F0  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 10263  0103F2  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 10264                           
 10265                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 10266  0103F6  0100               	movlb	0	; () banked
 10267  0103F8  EE20 F006          	lfsr	2,6
 10268  0103FC  51E7               	movf	SPI_Init@pInput& (0+255),w,b
 10269  0103FE  26D9               	addwf	fsr2l,f,c
 10270  010400  51E8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 10271  010402  22DA               	addwfc	fsr2h,f,c
 10272  010404  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 10273  010408  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 10274  01040C  0E05               	movlw	5
 10275  01040E  0100               	movlb	0	; () banked
 10276  010410  6FB6               	movwf	Byte_SetBit@pBit& (0+255),b
 10277  010412  0E01               	movlw	1
 10278  010414  0100               	movlb	0	; () banked
 10279  010416  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 10280  010418  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 10281  01041C  0012               	return		;funcret
 10282  01041E                     __end_of_SPI_Init:
 10283                           	opt stack 0
 10284                           tblptru	equ	0xFF8
 10285                           tblptrh	equ	0xFF7
 10286                           tblptrl	equ	0xFF6
 10287                           tablat	equ	0xFF5
 10288                           prodh	equ	0xFF4
 10289                           prodl	equ	0xFF3
 10290                           intcon	equ	0xFF2
 10291                           indf0	equ	0xFEF
 10292                           postinc0	equ	0xFEE
 10293                           fsr0h	equ	0xFEA
 10294                           fsr0l	equ	0xFE9
 10295                           wreg	equ	0xFE8
 10296                           postdec1	equ	0xFE5
 10297                           fsr1h	equ	0xFE2
 10298                           fsr1l	equ	0xFE1
 10299                           indf2	equ	0xFDF
 10300                           postinc2	equ	0xFDE
 10301                           postdec2	equ	0xFDD
 10302                           plusw2	equ	0xFDB
 10303                           fsr2h	equ	0xFDA
 10304                           fsr2l	equ	0xFD9
 10305                           status	equ	0xFD8
 10306                           
 10307 ;; *************** function _Timer2_Init *****************
 10308 ;; Defined at:
 10309 ;;		line 10 in file "Library/Timer2.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 10314 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 10315 ;;  RDIV            4   18[BANK0 ] unsigned long 
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      void 
 10318 ;; Registers used:
 10319 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10325 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;Total ram usage:       17 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    8
 10332 ;; This function calls:
 10333 ;;		_Timer2_Clear
 10334 ;;		___lldiv
 10335 ;; This function is called by:
 10336 ;;		_SPI_Init
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text42
 10341  011D98                     __ptext42:
 10342                           	opt stack 0
 10343  011D98                     _Timer2_Init:
 10344                           	opt stack 18
 10345                           
 10346                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 10347                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 10348                           ;Timer2.c: 14: static UINT8 PRE = 0;
 10349                           ;Timer2.c: 15: static UINT32 DIV = 0;
 10350                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 10351                           
 10352                           ;incstack = 0
 10353  011D98  0E00               	movlw	0
 10354  011D9A  0100               	movlb	0	; () banked
 10355  011D9C  6FCA               	movwf	Timer2_Init@pCPUClock& (0+255),b
 10356  011D9E  0E6C               	movlw	108
 10357  011DA0  6FCB               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 10358  011DA2  0EDC               	movlw	220
 10359  011DA4  6FCC               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 10360  011DA6  0E02               	movlw	2
 10361  011DA8  6FCD               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 10362                           
 10363                           ; BSR set to: 0
 10364                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 10365                           ;Timer2.c: 20: pFrequency *= 2;
 10366  011DAA  0100               	movlb	0	; () banked
 10367  011DAC  90D8               	bcf	status,0,c
 10368  011DAE  37C1               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 10369  011DB0  37C2               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 10370  011DB2  37C3               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 10371  011DB4  37C4               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;Timer2.c: 23: pCPUClock /= 4;
 10375  011DB6  0E02               	movlw	2
 10376  011DB8  0100               	movlb	0	; () banked
 10377  011DBA  6FC5               	movwf	??_Timer2_Init& (0+255),b
 10378  011DBC                     u11725:
 10379  011DBC  90D8               	bcf	status,0,c
 10380  011DBE  0100               	movlb	0	; () banked
 10381  011DC0  33CD               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 10382  011DC2  33CC               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 10383  011DC4  33CB               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 10384  011DC6  33CA               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 10385  011DC8  0100               	movlb	0	; () banked
 10386  011DCA  2FC5               	decfsz	??_Timer2_Init& (0+255),f,b
 10387  011DCC  D7F7               	goto	u11725
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 10391  011DCE  C0CA  F0B4         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 10392  011DD2  C0CB  F0B5         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 10393  011DD6  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 10394  011DDA  C0CD  F0B7         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 10395  011DDE  C0C1  F0B8         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 10396  011DE2  C0C2  F0B9         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 10397  011DE6  C0C3  F0BA         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 10398  011DEA  C0C4  F0BB         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 10399  011DEE  EC94  F094         	call	___lldiv	;wreg free
 10400  011DF2  C0B4  F0CE         	movff	?___lldiv,Timer2_Init@DIVIDE
 10401  011DF6  C0B5  F0CF         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 10402  011DFA  C0B6  F0D0         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 10403  011DFE  C0B7  F0D1         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 10404                           
 10405                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 10406  011E02  D010               	goto	l2731
 10407  011E04                     l14647:
 10408                           
 10409                           ;Timer2.c: 28: {
 10410                           ;Timer2.c: 29: RDIV = 0;
 10411  011E04  0E00               	movlw	0
 10412  011E06  0100               	movlb	0	; () banked
 10413  011E08  6FC6               	movwf	Timer2_Init@RDIV& (0+255),b
 10414  011E0A  0E00               	movlw	0
 10415  011E0C  6FC7               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 10416  011E0E  0E00               	movlw	0
 10417  011E10  6FC8               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 10418  011E12  0E00               	movlw	0
 10419  011E14  6FC9               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;Timer2.c: 30: INDEX ++;
 10423  011E16  0100               	movlb	0	; () banked
 10424  011E18  2B93               	incf	Timer2_Init@INDEX& (0+255),f,b
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;Timer2.c: 31: if (INDEX >= 3)
 10428  011E1A  0E02               	movlw	2
 10429  011E1C  0100               	movlb	0	; () banked
 10430  011E1E  6593               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 10431  011E20  D001               	goto	l2731
 10432  011E22  D026               	goto	u11740
 10433  011E24                     l2731:
 10434                           
 10435                           ; BSR set to: 0
 10436                           
 10437                           ; BSR set to: 0
 10438  011E24  C0CE  F0B4         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 10439  011E28  C0CF  F0B5         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 10440  011E2C  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 10441  011E30  C0D1  F0B7         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 10442  011E34  0100               	movlb	0	; () banked
 10443  011E36  5193               	movf	Timer2_Init@INDEX& (0+255),w,b
 10444  011E38  0D01               	mullw	1
 10445  011E3A  0E0A               	movlw	low Timer2_Init@PRESCALE
 10446  011E3C  24F3               	addwf	prodl,w,c
 10447  011E3E  6EF6               	movwf	tblptrl,c
 10448  011E40  0EFD               	movlw	high Timer2_Init@PRESCALE
 10449  011E42  20F4               	addwfc	prodh,w,c
 10450  011E44  6EF7               	movwf	tblptrh,c
 10451  011E46                     	if	1	;There are 3 active tblptr bytes
 10452  011E46  6AF8               	clrf	tblptru,c
 10453  011E48  0E00               	movlw	low (__mediumconst shr (0+16))
 10454  011E4A  22F8               	addwfc	tblptru,f,c
 10455  011E4C                     	endif
 10456  011E4C  0008               	tblrd		*
 10457  011E4E  50F5               	movf	tablat,w,c
 10458  011E50  0100               	movlb	0	; () banked
 10459  011E52  6FB8               	movwf	___lldiv@divisor& (0+255),b
 10460  011E54  6BB9               	clrf	(___lldiv@divisor+1)& (0+255),b
 10461  011E56  6BBA               	clrf	(___lldiv@divisor+2)& (0+255),b
 10462  011E58  6BBB               	clrf	(___lldiv@divisor+3)& (0+255),b
 10463  011E5A  EC94  F094         	call	___lldiv	;wreg free
 10464  011E5E  0100               	movlb	0	; () banked
 10465  011E60  51B7               	movf	(?___lldiv+3)& (0+255),w,b
 10466  011E62  0100               	movlb	0	; () banked
 10467  011E64  11B6               	iorwf	(?___lldiv+2)& (0+255),w,b
 10468  011E66  E1CE               	bnz	l14647
 10469  011E68  0100               	movlb	0	; () banked
 10470  011E6A  05B5               	decf	(?___lldiv+1)& (0+255),w,b
 10471  011E6C  B0D8               	btfsc	status,0,c
 10472  011E6E  D7CA               	goto	l2730
 10473  011E70                     u11740:
 10474                           
 10475                           ; BSR set to: 0
 10476                           ;Timer2.c: 33: }
 10477                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 10478                           
 10479                           ; BSR set to: 0
 10480  011E70  50CA               	movf	4042,w,c	;volatile
 10481  011E72  0100               	movlb	0	; () banked
 10482  011E74  1993               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 10483  011E76  0BFC               	andlw	-4
 10484  011E78  1993               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 10485  011E7A  6ECA               	movwf	4042,c	;volatile
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 10489  011E7C  84CA               	bsf	4042,2,c	;volatile
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;Timer2.c: 44: Timer2_Clear();
 10493  011E7E  EC09  F0A1         	call	_Timer2_Clear	;wreg free
 10494                           
 10495                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 10496  011E82  0100               	movlb	0	; () banked
 10497  011E84  5193               	movf	Timer2_Init@INDEX& (0+255),w,b
 10498  011E86  0D01               	mullw	1
 10499  011E88  0E0A               	movlw	low Timer2_Init@PRESCALE
 10500  011E8A  24F3               	addwf	prodl,w,c
 10501  011E8C  6EF6               	movwf	tblptrl,c
 10502  011E8E  0EFD               	movlw	high Timer2_Init@PRESCALE
 10503  011E90  20F4               	addwfc	prodh,w,c
 10504  011E92  6EF7               	movwf	tblptrh,c
 10505  011E94                     	if	1	;There are 3 active tblptr bytes
 10506  011E94  6AF8               	clrf	tblptru,c
 10507  011E96  0E00               	movlw	low (__mediumconst shr (0+16))
 10508  011E98  22F8               	addwfc	tblptru,f,c
 10509  011E9A                     	endif
 10510  011E9A  0008               	tblrd		*
 10511  011E9C  CFF5 F092          	movff	tablat,Timer2_Init@PRE
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 10515  011EA0  0EFF               	movlw	255
 10516  011EA2  0100               	movlb	0	; () banked
 10517  011EA4  25CE               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 10518  011EA6  0101               	movlb	1	; () banked
 10519  011EA8  6F06               	movwf	Timer2_Init@DIV& (0+255),b
 10520  011EAA  0EFF               	movlw	255
 10521  011EAC  0100               	movlb	0	; () banked
 10522  011EAE  21CF               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 10523  011EB0  0101               	movlb	1	; () banked
 10524  011EB2  6F07               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 10525  011EB4  0EFF               	movlw	255
 10526  011EB6  0100               	movlb	0	; () banked
 10527  011EB8  21D0               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 10528  011EBA  0101               	movlb	1	; () banked
 10529  011EBC  6F08               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 10530  011EBE  0EFF               	movlw	255
 10531  011EC0  0100               	movlb	0	; () banked
 10532  011EC2  21D1               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 10533  011EC4  0101               	movlb	1	; () banked
 10534  011EC6  6F09               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 10535                           
 10536                           ; BSR set to: 1
 10537                           ;Timer2.c: 48: INDEX = DIV/PRE;
 10538  011EC8  C106  F0B4         	movff	Timer2_Init@DIV,___lldiv@dividend
 10539  011ECC  C107  F0B5         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 10540  011ED0  C108  F0B6         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 10541  011ED4  C109  F0B7         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 10542  011ED8  0100               	movlb	0	; () banked
 10543  011EDA  5192               	movf	Timer2_Init@PRE& (0+255),w,b
 10544  011EDC  0100               	movlb	0	; () banked
 10545  011EDE  6FB8               	movwf	___lldiv@divisor& (0+255),b
 10546  011EE0  6BB9               	clrf	(___lldiv@divisor+1)& (0+255),b
 10547  011EE2  6BBA               	clrf	(___lldiv@divisor+2)& (0+255),b
 10548  011EE4  6BBB               	clrf	(___lldiv@divisor+3)& (0+255),b
 10549  011EE6  EC94  F094         	call	___lldiv	;wreg free
 10550  011EEA  0100               	movlb	0	; () banked
 10551  011EEC  51B4               	movf	?___lldiv& (0+255),w,b
 10552  011EEE  0100               	movlb	0	; () banked
 10553  011EF0  6F93               	movwf	Timer2_Init@INDEX& (0+255),b
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;Timer2.c: 49: PR2 = INDEX;
 10557  011EF2  C093  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 10558                           
 10559                           ; BSR set to: 0
 10560  011EF6  0012               	return		;funcret
 10561  011EF8                     __end_of_Timer2_Init:
 10562                           	opt stack 0
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           indf0	equ	0xFEF
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           postdec1	equ	0xFE5
 10576                           fsr1h	equ	0xFE2
 10577                           fsr1l	equ	0xFE1
 10578                           indf2	equ	0xFDF
 10579                           postinc2	equ	0xFDE
 10580                           postdec2	equ	0xFDD
 10581                           plusw2	equ	0xFDB
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function ___lldiv *****************
 10587 ;; Defined at:
 10588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;  dividend        4    0[BANK0 ] unsigned long 
 10591 ;;  divisor         4    4[BANK0 ] unsigned long 
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  quotient        4    8[BANK0 ] unsigned long 
 10594 ;;  counter         1   12[BANK0 ] unsigned char 
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  4    0[BANK0 ] unsigned long 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:       13 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    7
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_Timer0_Init
 10615 ;;		_Timer2_Init
 10616 ;;		_rand_between
 10617 ;;		_I2C_Init
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           	psect	text43
 10622  012928                     __ptext43:
 10623                           	opt stack 0
 10624  012928                     ___lldiv:
 10625                           	opt stack 20
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;incstack = 0
 10629  012928  0E00               	movlw	0
 10630  01292A  0100               	movlb	0	; () banked
 10631  01292C  6FBC               	movwf	___lldiv@quotient& (0+255),b
 10632  01292E  0E00               	movlw	0
 10633  012930  6FBD               	movwf	(___lldiv@quotient+1)& (0+255),b
 10634  012932  0E00               	movlw	0
 10635  012934  6FBE               	movwf	(___lldiv@quotient+2)& (0+255),b
 10636  012936  0E00               	movlw	0
 10637  012938  6FBF               	movwf	(___lldiv@quotient+3)& (0+255),b
 10638                           
 10639                           ; BSR set to: 0
 10640  01293A  0100               	movlb	0	; () banked
 10641  01293C  51B8               	movf	___lldiv@divisor& (0+255),w,b
 10642  01293E  0100               	movlb	0	; () banked
 10643  012940  11B9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10644  012942  0100               	movlb	0	; () banked
 10645  012944  11BA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10646  012946  0100               	movlb	0	; () banked
 10647  012948  11BB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10648  01294A  B4D8               	btfsc	status,2,c
 10649  01294C  D042               	goto	l3399
 10650                           
 10651                           ; BSR set to: 0
 10652  01294E  0E01               	movlw	1
 10653  012950  0100               	movlb	0	; () banked
 10654  012952  6FC0               	movwf	___lldiv@counter& (0+255),b
 10655  012954  D008               	goto	l3394
 10656  012956                     
 10657                           ; BSR set to: 0
 10658                           
 10659                           ; BSR set to: 0
 10660  012956  0100               	movlb	0	; () banked
 10661  012958  90D8               	bcf	status,0,c
 10662  01295A  37B8               	rlcf	___lldiv@divisor& (0+255),f,b
 10663  01295C  37B9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10664  01295E  37BA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10665  012960  37BB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10666  012962  0100               	movlb	0	; () banked
 10667  012964  2BC0               	incf	___lldiv@counter& (0+255),f,b
 10668  012966                     l3394:
 10669                           
 10670                           ; BSR set to: 0
 10671                           
 10672                           ; BSR set to: 0
 10673  012966  0100               	movlb	0	; () banked
 10674  012968  AFBB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10675  01296A  D7F5               	goto	l3395
 10676  01296C                     u11600:
 10677                           
 10678                           ; BSR set to: 0
 10679                           
 10680                           ; BSR set to: 0
 10681                           
 10682                           ; BSR set to: 0
 10683  01296C  0100               	movlb	0	; () banked
 10684  01296E  90D8               	bcf	status,0,c
 10685  012970  37BC               	rlcf	___lldiv@quotient& (0+255),f,b
 10686  012972  37BD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10687  012974  37BE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10688  012976  37BF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10689                           
 10690                           ; BSR set to: 0
 10691  012978  0100               	movlb	0	; () banked
 10692  01297A  51B8               	movf	___lldiv@divisor& (0+255),w,b
 10693  01297C  0100               	movlb	0	; () banked
 10694  01297E  5DB4               	subwf	___lldiv@dividend& (0+255),w,b
 10695  012980  0100               	movlb	0	; () banked
 10696  012982  51B9               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10697  012984  0100               	movlb	0	; () banked
 10698  012986  59B5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10699  012988  0100               	movlb	0	; () banked
 10700  01298A  51BA               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10701  01298C  0100               	movlb	0	; () banked
 10702  01298E  59B6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10703  012990  0100               	movlb	0	; () banked
 10704  012992  51BB               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10705  012994  0100               	movlb	0	; () banked
 10706  012996  59B7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10707  012998  A0D8               	btfss	status,0,c
 10708  01299A  D012               	goto	l3398
 10709                           
 10710                           ; BSR set to: 0
 10711  01299C  0100               	movlb	0	; () banked
 10712  01299E  51B8               	movf	___lldiv@divisor& (0+255),w,b
 10713  0129A0  0100               	movlb	0	; () banked
 10714  0129A2  5FB4               	subwf	___lldiv@dividend& (0+255),f,b
 10715  0129A4  0100               	movlb	0	; () banked
 10716  0129A6  51B9               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10717  0129A8  0100               	movlb	0	; () banked
 10718  0129AA  5BB5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10719  0129AC  0100               	movlb	0	; () banked
 10720  0129AE  51BA               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10721  0129B0  0100               	movlb	0	; () banked
 10722  0129B2  5BB6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10723  0129B4  0100               	movlb	0	; () banked
 10724  0129B6  51BB               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10725  0129B8  0100               	movlb	0	; () banked
 10726  0129BA  5BB7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10727                           
 10728                           ; BSR set to: 0
 10729  0129BC  0100               	movlb	0	; () banked
 10730  0129BE  81BC               	bsf	___lldiv@quotient& (0+255),0,b
 10731  0129C0                     l3398:
 10732                           
 10733                           ; BSR set to: 0
 10734                           
 10735                           ; BSR set to: 0
 10736  0129C0  0100               	movlb	0	; () banked
 10737  0129C2  90D8               	bcf	status,0,c
 10738  0129C4  33BB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10739  0129C6  33BA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10740  0129C8  33B9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10741  0129CA  33B8               	rrcf	___lldiv@divisor& (0+255),f,b
 10742                           
 10743                           ; BSR set to: 0
 10744  0129CC  0100               	movlb	0	; () banked
 10745  0129CE  2FC0               	decfsz	___lldiv@counter& (0+255),f,b
 10746  0129D0  D7CD               	goto	u11600
 10747  0129D2                     l3399:
 10748                           
 10749                           ; BSR set to: 0
 10750                           
 10751                           ; BSR set to: 0
 10752  0129D2  C0BC  F0B4         	movff	___lldiv@quotient,?___lldiv
 10753  0129D6  C0BD  F0B5         	movff	___lldiv@quotient+1,?___lldiv+1
 10754  0129DA  C0BE  F0B6         	movff	___lldiv@quotient+2,?___lldiv+2
 10755  0129DE  C0BF  F0B7         	movff	___lldiv@quotient+3,?___lldiv+3
 10756                           
 10757                           ; BSR set to: 0
 10758  0129E2  0012               	return		;funcret
 10759  0129E4                     __end_of___lldiv:
 10760                           	opt stack 0
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           indf0	equ	0xFEF
 10769                           postinc0	equ	0xFEE
 10770                           fsr0h	equ	0xFEA
 10771                           fsr0l	equ	0xFE9
 10772                           wreg	equ	0xFE8
 10773                           postdec1	equ	0xFE5
 10774                           fsr1h	equ	0xFE2
 10775                           fsr1l	equ	0xFE1
 10776                           indf2	equ	0xFDF
 10777                           postinc2	equ	0xFDE
 10778                           postdec2	equ	0xFDD
 10779                           plusw2	equ	0xFDB
 10780                           fsr2h	equ	0xFDA
 10781                           fsr2l	equ	0xFD9
 10782                           status	equ	0xFD8
 10783                           
 10784 ;; *************** function _Timer2_Clear *****************
 10785 ;; Defined at:
 10786 ;;		line 3 in file "Library/Timer2.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;		None
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;		None
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		None
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;Total ram usage:        0 bytes
 10805 ;; Hardware stack levels used:    1
 10806 ;; Hardware stack levels required when called:    7
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_Timer2_Init
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text44
 10815  014212                     __ptext44:
 10816                           	opt stack 0
 10817  014212                     _Timer2_Clear:
 10818                           	opt stack 18
 10819                           
 10820                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;incstack = 0
 10824  014212  929E               	bcf	3998,1,c	;volatile
 10825                           
 10826                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 10827  014214  929D               	bcf	3997,1,c	;volatile
 10828                           
 10829                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 10830  014216  929F               	bcf	3999,1,c	;volatile
 10831  014218  0012               	return		;funcret
 10832  01421A                     __end_of_Timer2_Clear:
 10833                           	opt stack 0
 10834                           tblptru	equ	0xFF8
 10835                           tblptrh	equ	0xFF7
 10836                           tblptrl	equ	0xFF6
 10837                           tablat	equ	0xFF5
 10838                           prodh	equ	0xFF4
 10839                           prodl	equ	0xFF3
 10840                           intcon	equ	0xFF2
 10841                           indf0	equ	0xFEF
 10842                           postinc0	equ	0xFEE
 10843                           fsr0h	equ	0xFEA
 10844                           fsr0l	equ	0xFE9
 10845                           wreg	equ	0xFE8
 10846                           postdec1	equ	0xFE5
 10847                           fsr1h	equ	0xFE2
 10848                           fsr1l	equ	0xFE1
 10849                           indf2	equ	0xFDF
 10850                           postinc2	equ	0xFDE
 10851                           postdec2	equ	0xFDD
 10852                           plusw2	equ	0xFDB
 10853                           fsr2h	equ	0xFDA
 10854                           fsr2l	equ	0xFD9
 10855                           status	equ	0xFD8
 10856                           
 10857 ;; *************** function _SPI_DisableISR *****************
 10858 ;; Defined at:
 10859 ;;		line 181 in file "Library/SPI.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 10862 ;;		 -> SPI1(11), SPI2(11), 
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  1    wreg      void 
 10867 ;; Registers used:
 10868 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;Total ram usage:        2 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    7
 10881 ;; This function calls:
 10882 ;;		Nothing
 10883 ;; This function is called by:
 10884 ;;		_SPI_Init
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text45
 10889  013F68                     __ptext45:
 10890                           	opt stack 0
 10891  013F68                     _SPI_DisableISR:
 10892                           	opt stack 19
 10893                           
 10894                           ;SPI.c: 183: switch (pInput->mChannel)
 10895                           
 10896                           ;incstack = 0
 10897  013F68  D004               	goto	l1206
 10898  013F6A                     l1207:
 10899                           
 10900                           ; BSR set to: 0
 10901  013F6A  969D               	bcf	3997,3,c	;volatile
 10902  013F6C  0012               	return	
 10903  013F6E                     l1209:
 10904                           
 10905                           ; BSR set to: 0
 10906  013F6E  9EA3               	bcf	4003,7,c	;volatile
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;SPI.c: 188: };
 10910                           
 10911                           ; BSR set to: 0
 10912                           
 10913                           ;SPI.c: 187: default: return;
 10914  013F70  0012               	return	
 10915  013F72                     l1206:
 10916                           
 10917                           ; BSR set to: 0
 10918  013F72  0100               	movlb	0	; () banked
 10919  013F74  EE20 F002          	lfsr	2,2
 10920  013F78  51B4               	movf	SPI_DisableISR@pInput& (0+255),w,b
 10921  013F7A  26D9               	addwf	fsr2l,f,c
 10922  013F7C  51B5               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 10923  013F7E  22DA               	addwfc	fsr2h,f,c
 10924  013F80  50DF               	movf	indf2,w,c
 10925                           
 10926                           ; Switch size 1, requested type "space"
 10927                           ; Number of cases is 2, Range of values is 0 to 1
 10928                           ; switch strategies available:
 10929                           ; Name         Instructions Cycles
 10930                           ; simple_byte            7     4 (average)
 10931                           ;	Chosen strategy is simple_byte
 10932  013F82  0A00               	xorlw	0	; case 0
 10933  013F84  B4D8               	btfsc	status,2,c
 10934  013F86  D7F1               	goto	l1207
 10935  013F88  0A01               	xorlw	1	; case 1
 10936  013F8A  A4D8               	btfss	status,2,c
 10937  013F8C  0012               	return	
 10938  013F8E  D7EF               	goto	l1209
 10939  013F90                     __end_of_SPI_DisableISR:
 10940                           	opt stack 0
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           indf0	equ	0xFEF
 10949                           postinc0	equ	0xFEE
 10950                           fsr0h	equ	0xFEA
 10951                           fsr0l	equ	0xFE9
 10952                           wreg	equ	0xFE8
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           plusw2	equ	0xFDB
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _SPI_DCS *****************
 10965 ;; Defined at:
 10966 ;;		line 219 in file "Library/SPI.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 10969 ;;		 -> SPI1(11), SPI2(11), 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10981 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;Total ram usage:        2 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    7
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_SPI_Init
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text46
 10996  013EB0                     __ptext46:
 10997                           	opt stack 0
 10998  013EB0                     _SPI_DCS:
 10999                           	opt stack 19
 11000                           
 11001                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;incstack = 0
 11005  013EB0  0100               	movlb	0	; () banked
 11006  013EB2  EE20 F002          	lfsr	2,2
 11007  013EB6  51B4               	movf	SPI_DCS@pInput& (0+255),w,b
 11008  013EB8  26D9               	addwf	fsr2l,f,c
 11009  013EBA  51B5               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 11010  013EBC  22DA               	addwfc	fsr2h,f,c
 11011  013EBE  50DF               	movf	indf2,w,c
 11012  013EC0  A4D8               	btfss	status,2,c
 11013  013EC2  D007               	goto	l1225
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 11017  013EC4  C0A8  FFD9         	movff	_PortC+4,fsr2l
 11018  013EC8  C0A9  FFDA         	movff	_PortC+5,fsr2h
 11019  013ECC  0100               	movlb	0	; () banked
 11020  013ECE  84DF               	bsf	indf2,2,c
 11021  013ED0  0012               	return	
 11022  013ED2                     l1225:
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;SPI.c: 223: else
 11026                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 11027                           
 11028                           ; BSR set to: 0
 11029  013ED2  C1A7  FFD9         	movff	_PortD+4,fsr2l
 11030  013ED6  C1A8  FFDA         	movff	_PortD+5,fsr2h
 11031  013EDA  0101               	movlb	1	; () banked
 11032  013EDC  8EDF               	bsf	indf2,7,c
 11033  013EDE  0012               	return	
 11034  013EE0                     __end_of_SPI_DCS:
 11035                           	opt stack 0
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           prodh	equ	0xFF4
 11041                           prodl	equ	0xFF3
 11042                           intcon	equ	0xFF2
 11043                           indf0	equ	0xFEF
 11044                           postinc0	equ	0xFEE
 11045                           fsr0h	equ	0xFEA
 11046                           fsr0l	equ	0xFE9
 11047                           wreg	equ	0xFE8
 11048                           postdec1	equ	0xFE5
 11049                           fsr1h	equ	0xFE2
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           plusw2	equ	0xFDB
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059 ;; *************** function _Button_Init *****************
 11060 ;; Defined at:
 11061 ;;		line 18 in file "Library/Button.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  pInput          2    0[BANK2 ] const PTR struct Button
 11064 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 11065 ;;  pThreshold      2    2[BANK2 ] unsigned short 
 11066 ;;  pInitIO         3    4[BANK2 ] PTR FTN()void 
 11067 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 11068 ;;  pGetState       3    7[BANK2 ] PTR FTN()unsigned char 
 11069 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 11070 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 11071 ;;  pFunction       3   10[BANK2 ] PTR FTN(unsigned char ,)
 11072 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 11073 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;		None
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      void 
 11078 ;; Registers used:
 11079 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11085 ;;      Params:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;Total ram usage:       13 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:   15
 11092 ;; This function calls:
 11093 ;;		_HMI_InitButtons
 11094 ;;		_MXK_InitDIPSwitch
 11095 ;;		_MXK_InitTestButton
 11096 ;; This function is called by:
 11097 ;;		_HMI_Init
 11098 ;;		_FunctInitButton
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text47
 11103  0122E0                     __ptext47:
 11104                           	opt stack 0
 11105  0122E0                     _Button_Init:
 11106                           	opt stack 13
 11107                           
 11108                           ;Button.c: 21: if(pInput==(void*)0)
 11109                           
 11110                           ;incstack = 0
 11111  0122E0  0102               	movlb	2	; () banked
 11112  0122E2  51E8               	movf	Button_Init@pInput& (0+255),w,b
 11113  0122E4  0102               	movlb	2	; () banked
 11114  0122E6  11E9               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 11115  0122E8  B4D8               	btfsc	status,2,c
 11116  0122EA  0012               	return	
 11117                           
 11118                           ; BSR set to: 2
 11119                           ;Button.c: 23: if(pInitIO==(void*)0)
 11120                           
 11121                           ; BSR set to: 2
 11122                           
 11123                           ; BSR set to: 2
 11124                           ;Button.c: 22: return;
 11125  0122EC  0102               	movlb	2	; () banked
 11126  0122EE  51EC               	movf	Button_Init@pInitIO& (0+255),w,b
 11127  0122F0  0102               	movlb	2	; () banked
 11128  0122F2  11ED               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 11129  0122F4  0102               	movlb	2	; () banked
 11130  0122F6  11EE               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 11131  0122F8  B4D8               	btfsc	status,2,c
 11132  0122FA  0012               	return	
 11133                           
 11134                           ; BSR set to: 2
 11135                           ;Button.c: 25: if(pGetState==(void*)0)
 11136                           
 11137                           ; BSR set to: 2
 11138                           
 11139                           ; BSR set to: 2
 11140                           ;Button.c: 24: return;
 11141  0122FC  0102               	movlb	2	; () banked
 11142  0122FE  51EF               	movf	Button_Init@pGetState& (0+255),w,b
 11143  012300  0102               	movlb	2	; () banked
 11144  012302  11F0               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 11145  012304  0102               	movlb	2	; () banked
 11146  012306  11F1               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 11147  012308  B4D8               	btfsc	status,2,c
 11148  01230A  0012               	return	
 11149                           
 11150                           ; BSR set to: 2
 11151                           ;Button.c: 27: if(pFunction==(void*)0)
 11152                           
 11153                           ; BSR set to: 2
 11154                           
 11155                           ; BSR set to: 2
 11156                           ;Button.c: 26: return;
 11157  01230C  0102               	movlb	2	; () banked
 11158  01230E  51F2               	movf	Button_Init@pFunction& (0+255),w,b
 11159  012310  0102               	movlb	2	; () banked
 11160  012312  11F3               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 11161  012314  0102               	movlb	2	; () banked
 11162  012316  11F4               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 11163  012318  B4D8               	btfsc	status,2,c
 11164  01231A  0012               	return	
 11165                           
 11166                           ; BSR set to: 2
 11167                           ;Button.c: 30: if(pThreshold == 0)
 11168                           
 11169                           ; BSR set to: 2
 11170                           
 11171                           ; BSR set to: 2
 11172                           ;Button.c: 28: return;
 11173  01231C  0102               	movlb	2	; () banked
 11174  01231E  51EA               	movf	Button_Init@pThreshold& (0+255),w,b
 11175  012320  0102               	movlb	2	; () banked
 11176  012322  11EB               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 11177  012324  A4D8               	btfss	status,2,c
 11178  012326  D005               	goto	l560
 11179                           
 11180                           ; BSR set to: 2
 11181                           ;Button.c: 31: pThreshold = 1;
 11182  012328  0E00               	movlw	0
 11183  01232A  0102               	movlb	2	; () banked
 11184  01232C  6FEB               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11185  01232E  0E01               	movlw	1
 11186  012330  6FEA               	movwf	Button_Init@pThreshold& (0+255),b
 11187  012332                     l560:
 11188                           
 11189                           ; BSR set to: 2
 11190                           ;Button.c: 34: pInput->mState = 0;
 11191                           
 11192                           ; BSR set to: 2
 11193  012332  C2E8  FFD9         	movff	Button_Init@pInput,fsr2l
 11194  012336  C2E9  FFDA         	movff	Button_Init@pInput+1,fsr2h
 11195  01233A  0E00               	movlw	0
 11196  01233C  6EDF               	movwf	indf2,c
 11197                           
 11198                           ; BSR set to: 2
 11199                           ;Button.c: 35: pInput->mCount = 0;
 11200  01233E  0102               	movlb	2	; () banked
 11201  012340  EE20 F001          	lfsr	2,1
 11202  012344  51E8               	movf	Button_Init@pInput& (0+255),w,b
 11203  012346  26D9               	addwf	fsr2l,f,c
 11204  012348  51E9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11205  01234A  22DA               	addwfc	fsr2h,f,c
 11206  01234C  0E00               	movlw	0
 11207  01234E  6EDF               	movwf	indf2,c
 11208                           
 11209                           ; BSR set to: 2
 11210                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 11211  012350  0102               	movlb	2	; () banked
 11212  012352  EE20 F002          	lfsr	2,2
 11213  012356  51E8               	movf	Button_Init@pInput& (0+255),w,b
 11214  012358  26D9               	addwf	fsr2l,f,c
 11215  01235A  51E9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11216  01235C  22DA               	addwfc	fsr2h,f,c
 11217  01235E  C2EA  FFDE         	movff	Button_Init@pThreshold,postinc2
 11218  012362  C2EB  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 11219                           
 11220                           ; BSR set to: 2
 11221                           ;Button.c: 37: pInput->mFunction = pFunction;
 11222  012366  0102               	movlb	2	; () banked
 11223  012368  EE20 F004          	lfsr	2,4
 11224  01236C  51E8               	movf	Button_Init@pInput& (0+255),w,b
 11225  01236E  26D9               	addwf	fsr2l,f,c
 11226  012370  51E9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11227  012372  22DA               	addwfc	fsr2h,f,c
 11228  012374  C2F2  FFDE         	movff	Button_Init@pFunction,postinc2
 11229  012378  C2F3  FFDE         	movff	Button_Init@pFunction+1,postinc2
 11230  01237C  C2F4  FFDE         	movff	Button_Init@pFunction+2,postinc2
 11231                           
 11232                           ; BSR set to: 2
 11233                           ;Button.c: 38: pInput->mGetState = pGetState;
 11234  012380  0102               	movlb	2	; () banked
 11235  012382  EE20 F007          	lfsr	2,7
 11236  012386  51E8               	movf	Button_Init@pInput& (0+255),w,b
 11237  012388  26D9               	addwf	fsr2l,f,c
 11238  01238A  51E9               	movf	(Button_Init@pInput+1)& (0+255),w,b
 11239  01238C  22DA               	addwfc	fsr2h,f,c
 11240  01238E  C2EF  FFDE         	movff	Button_Init@pGetState,postinc2
 11241  012392  C2F0  FFDE         	movff	Button_Init@pGetState+1,postinc2
 11242  012396  C2F1  FFDE         	movff	Button_Init@pGetState+2,postinc2
 11243                           
 11244                           ; BSR set to: 2
 11245                           ;Button.c: 41: pInitIO();
 11246  01239A  D801               	call	u12098
 11247  01239C  0012               	return	
 11248  01239E                     u12098:
 11249  01239E  0005               	push	
 11250  0123A0  6EFA               	movwf	pclath,c
 11251  0123A2  0102               	movlb	2	; () banked
 11252  0123A4  51EC               	movf	Button_Init@pInitIO& (0+255),w,b
 11253  0123A6  6EFD               	movwf	tosl,c
 11254  0123A8  51ED               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 11255  0123AA  6EFE               	movwf	tosh,c
 11256  0123AC  51EE               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 11257  0123AE  6EFF               	movwf	tosu,c
 11258  0123B0  50FA               	movf	pclath,w,c
 11259  0123B2  0012               	return		;indir
 11260  0123B4                     __end_of_Button_Init:
 11261                           	opt stack 0
 11262                           tosu	equ	0xFFF
 11263                           tosh	equ	0xFFE
 11264                           tosl	equ	0xFFD
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           postdec1	equ	0xFE5
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           plusw2	equ	0xFDB
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _MXK_InitDIPSwitch *****************
 11290 ;; Defined at:
 11291 ;;		line 20 in file "Library/MXK.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;Total ram usage:        0 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:   14
 11312 ;; This function calls:
 11313 ;;		_Port_SetQuadType
 11314 ;; This function is called by:
 11315 ;;		_FunctInitButton
 11316 ;;		_Button_Init
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text48
 11321  0140BC                     __ptext48:
 11322                           	opt stack 0
 11323  0140BC                     _MXK_InitDIPSwitch:
 11324                           	opt stack 13
 11325                           
 11326                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 11327                           
 11328                           ;incstack = 0
 11329  0140BC  0EA3               	movlw	low _PortD
 11330  0140BE  0100               	movlb	0	; () banked
 11331  0140C0  6FEA               	movwf	Port_SetQuadType@pInput& (0+255),b
 11332  0140C2  0E01               	movlw	high _PortD
 11333  0140C4  0100               	movlb	0	; () banked
 11334  0140C6  6FEB               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 11335  0140C8  0E00               	movlw	0
 11336  0140CA  0100               	movlb	0	; () banked
 11337  0140CC  6FEC               	movwf	Port_SetQuadType@pQuad& (0+255),b
 11338  0140CE  0E00               	movlw	0
 11339  0140D0  0100               	movlb	0	; () banked
 11340  0140D2  6FED               	movwf	Port_SetQuadType@pType& (0+255),b
 11341  0140D4  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 11342  0140D8  0012               	return		;funcret
 11343  0140DA                     __end_of_MXK_InitDIPSwitch:
 11344                           	opt stack 0
 11345                           tosu	equ	0xFFF
 11346                           tosh	equ	0xFFE
 11347                           tosl	equ	0xFFD
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           indf0	equ	0xFEF
 11357                           postinc0	equ	0xFEE
 11358                           fsr0h	equ	0xFEA
 11359                           fsr0l	equ	0xFE9
 11360                           wreg	equ	0xFE8
 11361                           postdec1	equ	0xFE5
 11362                           fsr1h	equ	0xFE2
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           plusw2	equ	0xFDB
 11368                           fsr2h	equ	0xFDA
 11369                           fsr2l	equ	0xFD9
 11370                           status	equ	0xFD8
 11371                           
 11372 ;; *************** function _HMI_InitButtons *****************
 11373 ;; Defined at:
 11374 ;;		line 21 in file "HMI.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;		None
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;		None
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  1    wreg      void 
 11381 ;; Registers used:
 11382 ;;		None
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;Total ram usage:        0 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    7
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_HMI_Init
 11399 ;;		_Button_Init
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text49
 11404  01422C                     __ptext49:
 11405                           	opt stack 0
 11406  01422C                     _HMI_InitButtons:
 11407                           	opt stack 20
 11408                           
 11409                           ;HMI.c: 23: TRISE = 0xFF;
 11410                           
 11411                           ;incstack = 0
 11412  01422C  6896               	setf	3990,c	;volatile
 11413  01422E  0012               	return		;funcret
 11414  014230                     __end_of_HMI_InitButtons:
 11415                           	opt stack 0
 11416                           tosu	equ	0xFFF
 11417                           tosh	equ	0xFFE
 11418                           tosl	equ	0xFFD
 11419                           pclath	equ	0xFFA
 11420                           tblptru	equ	0xFF8
 11421                           tblptrh	equ	0xFF7
 11422                           tblptrl	equ	0xFF6
 11423                           tablat	equ	0xFF5
 11424                           prodh	equ	0xFF4
 11425                           prodl	equ	0xFF3
 11426                           intcon	equ	0xFF2
 11427                           indf0	equ	0xFEF
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           plusw2	equ	0xFDB
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8
 11442                           
 11443 ;; *************** function _MXK_InitTestButton *****************
 11444 ;; Defined at:
 11445 ;;		line 10 in file "Library/MXK.c"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;		None
 11448 ;; Auto vars:     Size  Location     Type
 11449 ;;		None
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  1    wreg      void 
 11452 ;; Registers used:
 11453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;Total ram usage:        0 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; Hardware stack levels required when called:   12
 11466 ;; This function calls:
 11467 ;;		_Port_SetPinType
 11468 ;; This function is called by:
 11469 ;;		_FunctInitButton
 11470 ;;		_Button_Init
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           	psect	text50
 11475  0140DA                     __ptext50:
 11476                           	opt stack 0
 11477  0140DA                     _MXK_InitTestButton:
 11478                           	opt stack 15
 11479                           
 11480                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 11481                           
 11482                           ;incstack = 0
 11483  0140DA  0EAD               	movlw	low _PortB
 11484  0140DC  0100               	movlb	0	; () banked
 11485  0140DE  6FDA               	movwf	Port_SetPinType@pInput& (0+255),b
 11486  0140E0  0E01               	movlw	high _PortB
 11487  0140E2  0100               	movlb	0	; () banked
 11488  0140E4  6FDB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11489  0140E6  0E04               	movlw	4
 11490  0140E8  0100               	movlb	0	; () banked
 11491  0140EA  6FDC               	movwf	Port_SetPinType@pPin& (0+255),b
 11492  0140EC  0E00               	movlw	0
 11493  0140EE  0100               	movlb	0	; () banked
 11494  0140F0  6FDD               	movwf	Port_SetPinType@pType& (0+255),b
 11495  0140F2  EC73  F089         	call	_Port_SetPinType	;wreg free
 11496  0140F6  0012               	return		;funcret
 11497  0140F8                     __end_of_MXK_InitTestButton:
 11498                           	opt stack 0
 11499                           tosu	equ	0xFFF
 11500                           tosh	equ	0xFFE
 11501                           tosl	equ	0xFFD
 11502                           pclath	equ	0xFFA
 11503                           tblptru	equ	0xFF8
 11504                           tblptrh	equ	0xFF7
 11505                           tblptrl	equ	0xFF6
 11506                           tablat	equ	0xFF5
 11507                           prodh	equ	0xFF4
 11508                           prodl	equ	0xFF3
 11509                           intcon	equ	0xFF2
 11510                           indf0	equ	0xFEF
 11511                           postinc0	equ	0xFEE
 11512                           fsr0h	equ	0xFEA
 11513                           fsr0l	equ	0xFE9
 11514                           wreg	equ	0xFE8
 11515                           postdec1	equ	0xFE5
 11516                           fsr1h	equ	0xFE2
 11517                           fsr1l	equ	0xFE1
 11518                           indf2	equ	0xFDF
 11519                           postinc2	equ	0xFDE
 11520                           postdec2	equ	0xFDD
 11521                           plusw2	equ	0xFDB
 11522                           fsr2h	equ	0xFDA
 11523                           fsr2l	equ	0xFD9
 11524                           status	equ	0xFD8
 11525                           
 11526 ;; *************** function _Port_SetPinType *****************
 11527 ;; Defined at:
 11528 ;;		line 189 in file "Library/Port.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 11531 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11532 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11533 ;;  pPin            1   40[BANK0 ] enum E6750
 11534 ;;  pType           1   41[BANK0 ] enum E6795
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 11537 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 11538 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 11539 ;;  Output          1   42[BANK0 ] enum E6475
 11540 ;; Return value:  Size  Location     Type
 11541 ;;                  1    wreg      enum E6475
 11542 ;; Registers used:
 11543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11544 ;; Tracked objects:
 11545 ;;		On entry : 0/0
 11546 ;;		On exit  : 0/0
 11547 ;;		Unchanged: 0/0
 11548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11549 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;Total ram usage:        7 bytes
 11554 ;; Hardware stack levels used:    1
 11555 ;; Hardware stack levels required when called:   11
 11556 ;; This function calls:
 11557 ;;		_Byte_SetBit
 11558 ;;		_PortProperty_Valid
 11559 ;;		_Word_SetPair
 11560 ;; This function is called by:
 11561 ;;		_Configure_GPIOs
 11562 ;;		_LED_Init
 11563 ;;		_Port_Init
 11564 ;;		_SPI_Init
 11565 ;;		_Motor_Init
 11566 ;;		_MXK_InitTestButton
 11567 ;;		_MXK_Init
 11568 ;;		_I2C_Init
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text51
 11573  0112E6                     __ptext51:
 11574                           	opt stack 0
 11575  0112E6                     _Port_SetPinType:
 11576                           	opt stack 18
 11577                           
 11578                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 11579                           
 11580                           ;incstack = 0
 11581  0112E6  C0DA  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 11582  0112EA  C0DB  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 11583  0112EE  CFDE F0DF          	movff	postinc2,Port_SetPinType@Props
 11584  0112F2  CFDD F0E0          	movff	postdec2,Port_SetPinType@Props+1
 11585                           
 11586                           ;Port.c: 192: ePinError Output = ePinErrorState;
 11587  0112F6  0E05               	movlw	5
 11588  0112F8  0100               	movlb	0	; () banked
 11589  0112FA  6FDE               	movwf	Port_SetPinType@Output& (0+255),b
 11590                           
 11591                           ;Port.c: 193: switch (pType)
 11592  0112FC  D0B5               	goto	l964
 11593  0112FE                     
 11594                           ; BSR set to: 0
 11595                           ;Port.c: 197: {
 11596                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 11597                           
 11598                           ; BSR set to: 0
 11599  0112FE  0100               	movlb	0	; () banked
 11600  011300  EE20 F002          	lfsr	2,2
 11601  011304  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11602  011306  26D9               	addwf	fsr2l,f,c
 11603  011308  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11604  01130A  22DA               	addwfc	fsr2h,f,c
 11605  01130C  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11606  011310  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11607  011314  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11608  011318  0E01               	movlw	1
 11609  01131A  0100               	movlb	0	; () banked
 11610  01131C  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11611  01131E  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11612                           
 11613                           ;Port.c: 203: break;
 11614  011322  D0B0               	goto	l966
 11615  011324                     
 11616                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 11617  011324  C0DF  F0C3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 11618  011328  C0E0  F0C4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 11619  01132C  0E01               	movlw	1
 11620  01132E  0100               	movlb	0	; () banked
 11621  011330  6FC5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 11622  011332  C0DC  F0C6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 11623  011336  EC01  F099         	call	_PortProperty_Valid	;wreg free
 11624  01133A  0100               	movlb	0	; () banked
 11625  01133C  6FDE               	movwf	Port_SetPinType@Output& (0+255),b
 11626  01133E  0100               	movlb	0	; () banked
 11627  011340  51DE               	movf	Port_SetPinType@Output& (0+255),w,b
 11628  011342  A4D8               	btfss	status,2,c
 11629  011344  0012               	return	
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;Port.c: 208: {
 11633                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 11634  011346  0100               	movlb	0	; () banked
 11635  011348  EE20 F002          	lfsr	2,2
 11636  01134C  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11637  01134E  26D9               	addwf	fsr2l,f,c
 11638  011350  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11639  011352  22DA               	addwfc	fsr2h,f,c
 11640  011354  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11641  011358  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11642  01135C  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11643  011360  0E00               	movlw	0
 11644  011362  0100               	movlb	0	; () banked
 11645  011364  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11646  011366  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11647                           
 11648                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 11649  01136A  0100               	movlb	0	; () banked
 11650  01136C  EE20 F004          	lfsr	2,4
 11651  011370  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11652  011372  26D9               	addwf	fsr2l,f,c
 11653  011374  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11654  011376  22DA               	addwfc	fsr2h,f,c
 11655  011378  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11656  01137C  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11657  011380  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11658  011384  0E00               	movlw	0
 11659  011386  0100               	movlb	0	; () banked
 11660  011388  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11661  01138A  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11662                           
 11663                           ;Port.c: 214: break;
 11664  01138E  D07A               	goto	l966
 11665  011390                     
 11666                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 11667                           
 11668                           ;Port.c: 218: case eTypeOutputOpenSource:
 11669  011390  C0DF  F0C3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 11670  011394  C0E0  F0C4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 11671  011398  0E02               	movlw	2
 11672  01139A  0100               	movlb	0	; () banked
 11673  01139C  6FC5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 11674  01139E  C0DC  F0C6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 11675  0113A2  EC01  F099         	call	_PortProperty_Valid	;wreg free
 11676  0113A6  0100               	movlb	0	; () banked
 11677  0113A8  6FDE               	movwf	Port_SetPinType@Output& (0+255),b
 11678  0113AA  0100               	movlb	0	; () banked
 11679  0113AC  51DE               	movf	Port_SetPinType@Output& (0+255),w,b
 11680  0113AE  A4D8               	btfss	status,2,c
 11681  0113B0  0012               	return	
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;Port.c: 220: {
 11685                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 11686  0113B2  0100               	movlb	0	; () banked
 11687  0113B4  EE20 F002          	lfsr	2,2
 11688  0113B8  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11689  0113BA  26D9               	addwf	fsr2l,f,c
 11690  0113BC  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11691  0113BE  22DA               	addwfc	fsr2h,f,c
 11692  0113C0  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11693  0113C4  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11694  0113C8  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11695  0113CC  0E01               	movlw	1
 11696  0113CE  0100               	movlb	0	; () banked
 11697  0113D0  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11698  0113D2  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11699                           
 11700                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 11701  0113D6  0100               	movlb	0	; () banked
 11702  0113D8  EE20 F004          	lfsr	2,4
 11703  0113DC  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11704  0113DE  26D9               	addwf	fsr2l,f,c
 11705  0113E0  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11706  0113E2  22DA               	addwfc	fsr2h,f,c
 11707  0113E4  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11708  0113E8  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11709  0113EC  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11710  0113F0  0E01               	movlw	1
 11711  0113F2  0100               	movlb	0	; () banked
 11712  0113F4  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11713  0113F6  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11714                           
 11715                           ;Port.c: 226: break;
 11716  0113FA  D044               	goto	l966
 11717  0113FC                     
 11718                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 11719                           
 11720                           ;Port.c: 230: case eTypeOutputPushPull:
 11721  0113FC  C0DF  F0C3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 11722  011400  C0E0  F0C4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 11723  011404  0E00               	movlw	0
 11724  011406  0100               	movlb	0	; () banked
 11725  011408  6FC5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 11726  01140A  C0DC  F0C6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 11727  01140E  EC01  F099         	call	_PortProperty_Valid	;wreg free
 11728  011412  0100               	movlb	0	; () banked
 11729  011414  6FDE               	movwf	Port_SetPinType@Output& (0+255),b
 11730  011416  0100               	movlb	0	; () banked
 11731  011418  51DE               	movf	Port_SetPinType@Output& (0+255),w,b
 11732  01141A  A4D8               	btfss	status,2,c
 11733  01141C  0012               	return	
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;Port.c: 232: {
 11737                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 11738  01141E  0100               	movlb	0	; () banked
 11739  011420  EE20 F002          	lfsr	2,2
 11740  011424  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11741  011426  26D9               	addwf	fsr2l,f,c
 11742  011428  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11743  01142A  22DA               	addwfc	fsr2h,f,c
 11744  01142C  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11745  011430  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11746  011434  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11747  011438  0E00               	movlw	0
 11748  01143A  0100               	movlb	0	; () banked
 11749  01143C  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11750  01143E  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11751                           
 11752                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 11753  011442  0100               	movlb	0	; () banked
 11754  011444  EE20 F004          	lfsr	2,4
 11755  011448  51DA               	movf	Port_SetPinType@pInput& (0+255),w,b
 11756  01144A  26D9               	addwf	fsr2l,f,c
 11757  01144C  51DB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 11758  01144E  22DA               	addwfc	fsr2h,f,c
 11759  011450  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 11760  011454  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 11761  011458  C0DC  F0B6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 11762  01145C  0E00               	movlw	0
 11763  01145E  0100               	movlb	0	; () banked
 11764  011460  6FB7               	movwf	Byte_SetBit@pValue& (0+255),b
 11765  011462  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 11766                           
 11767                           ;Port.c: 239: }
 11768                           
 11769                           ;Port.c: 238: break;
 11770  011466  D00E               	goto	l966
 11771  011468                     l964:
 11772  011468  0100               	movlb	0	; () banked
 11773  01146A  51DD               	movf	Port_SetPinType@pType& (0+255),w,b
 11774                           
 11775                           ; Switch size 1, requested type "space"
 11776                           ; Number of cases is 4, Range of values is 0 to 3
 11777                           ; switch strategies available:
 11778                           ; Name         Instructions Cycles
 11779                           ; simple_byte           13     7 (average)
 11780                           ;	Chosen strategy is simple_byte
 11781  01146C  0A00               	xorlw	0	; case 0
 11782  01146E  B4D8               	btfsc	status,2,c
 11783  011470  D746               	goto	l965
 11784  011472  0A01               	xorlw	1	; case 1
 11785  011474  B4D8               	btfsc	status,2,c
 11786  011476  D756               	goto	l967
 11787  011478  0A03               	xorlw	3	; case 2
 11788  01147A  B4D8               	btfsc	status,2,c
 11789  01147C  D789               	goto	l969
 11790  01147E  0A01               	xorlw	1	; case 3
 11791  011480  B4D8               	btfsc	status,2,c
 11792  011482  D7BC               	goto	l973
 11793  011484                     l966:
 11794                           
 11795                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 11796                           
 11797                           ; BSR set to: 0
 11798  011484  0E08               	movlw	8
 11799  011486  0100               	movlb	0	; () banked
 11800  011488  25DA               	addwf	Port_SetPinType@pInput& (0+255),w,b
 11801  01148A  0100               	movlb	0	; () banked
 11802  01148C  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
 11803  01148E  0E00               	movlw	0
 11804  011490  0100               	movlb	0	; () banked
 11805  011492  21DB               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 11806  011494  0100               	movlb	0	; () banked
 11807  011496  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11808  011498  C0DC  F0C5         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 11809  01149C  C0DD  F0C6         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 11810  0114A0  EC9E  F09D         	call	_Word_SetPair	;wreg free
 11811  0114A4  0012               	return	
 11812  0114A6                     __end_of_Port_SetPinType:
 11813                           	opt stack 0
 11814                           tosu	equ	0xFFF
 11815                           tosh	equ	0xFFE
 11816                           tosl	equ	0xFFD
 11817                           pclath	equ	0xFFA
 11818                           tblptru	equ	0xFF8
 11819                           tblptrh	equ	0xFF7
 11820                           tblptrl	equ	0xFF6
 11821                           tablat	equ	0xFF5
 11822                           prodh	equ	0xFF4
 11823                           prodl	equ	0xFF3
 11824                           intcon	equ	0xFF2
 11825                           indf0	equ	0xFEF
 11826                           postinc0	equ	0xFEE
 11827                           fsr0h	equ	0xFEA
 11828                           fsr0l	equ	0xFE9
 11829                           wreg	equ	0xFE8
 11830                           postdec1	equ	0xFE5
 11831                           fsr1h	equ	0xFE2
 11832                           fsr1l	equ	0xFE1
 11833                           indf2	equ	0xFDF
 11834                           postinc2	equ	0xFDE
 11835                           postdec2	equ	0xFDD
 11836                           plusw2	equ	0xFDB
 11837                           fsr2h	equ	0xFDA
 11838                           fsr2l	equ	0xFD9
 11839                           status	equ	0xFD8
 11840                           
 11841 ;; *************** function _Port_SetQuadType *****************
 11842 ;; Defined at:
 11843 ;;		line 399 in file "Library/Port.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 11846 ;;		 -> PortB(10), PortD(10), 
 11847 ;;  pQuad           1   56[BANK0 ] enum E6776
 11848 ;;  pType           1   57[BANK0 ] enum E6795
 11849 ;; Auto vars:     Size  Location     Type
 11850 ;;  Output          1   58[BANK0 ] enum E6475
 11851 ;; Return value:  Size  Location     Type
 11852 ;;                  1    wreg      enum E6475
 11853 ;; Registers used:
 11854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11855 ;; Tracked objects:
 11856 ;;		On entry : 0/0
 11857 ;;		On exit  : 0/0
 11858 ;;		Unchanged: 0/0
 11859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11863 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11864 ;;Total ram usage:        5 bytes
 11865 ;; Hardware stack levels used:    1
 11866 ;; Hardware stack levels required when called:   13
 11867 ;; This function calls:
 11868 ;;		_Byte_SetQuad
 11869 ;;		_Port_CheckQuadType
 11870 ;;		_Word_SetPair
 11871 ;; This function is called by:
 11872 ;;		_MXK_InitDIPSwitch
 11873 ;;		_MXK_Init
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           	psect	text52
 11878  010A5C                     __ptext52:
 11879                           	opt stack 0
 11880  010A5C                     _Port_SetQuadType:
 11881                           	opt stack 16
 11882                           
 11883                           ;Port.c: 401: ePinError Output = ePinErrorState;
 11884                           
 11885                           ;incstack = 0
 11886  010A5C  0E05               	movlw	5
 11887  010A5E  0100               	movlb	0	; () banked
 11888  010A60  6FEE               	movwf	Port_SetQuadType@Output& (0+255),b
 11889                           
 11890                           ;Port.c: 403: switch (pType)
 11891  010A62  D0C7               	goto	l1028
 11892  010A64                     
 11893                           ; BSR set to: 0
 11894                           ;Port.c: 407: {
 11895                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 11896                           
 11897                           ; BSR set to: 0
 11898  010A64  0100               	movlb	0	; () banked
 11899  010A66  EE20 F002          	lfsr	2,2
 11900  010A6A  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 11901  010A6C  26D9               	addwf	fsr2l,f,c
 11902  010A6E  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 11903  010A70  22DA               	addwfc	fsr2h,f,c
 11904  010A72  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 11905  010A76  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 11906  010A7A  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 11907  010A7E  0E0F               	movlw	15
 11908  010A80  0100               	movlb	0	; () banked
 11909  010A82  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 11910  010A84  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 11911                           
 11912                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 11913  010A88  0100               	movlb	0	; () banked
 11914  010A8A  EE20 F004          	lfsr	2,4
 11915  010A8E  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 11916  010A90  26D9               	addwf	fsr2l,f,c
 11917  010A92  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 11918  010A94  22DA               	addwfc	fsr2h,f,c
 11919  010A96  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 11920  010A9A  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 11921  010A9E  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 11922  010AA2  0E00               	movlw	0
 11923  010AA4  0100               	movlb	0	; () banked
 11924  010AA6  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 11925  010AA8  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 11926                           
 11927                           ;Port.c: 413: }
 11928                           ;Port.c: 415: break;
 11929  010AAC  D0B0               	goto	l1030
 11930  010AAE                     
 11931                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 11932  010AAE  C0EA  F0E3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 11933  010AB2  C0EB  F0E4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 11934  010AB6  C0EC  F0E5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 11935  010ABA  0E03               	movlw	3
 11936  010ABC  0100               	movlb	0	; () banked
 11937  010ABE  6FE6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 11938  010AC0  EC3B  F09C         	call	_Port_CheckQuadType	;wreg free
 11939  010AC4  0100               	movlb	0	; () banked
 11940  010AC6  6FEE               	movwf	Port_SetQuadType@Output& (0+255),b
 11941  010AC8  0100               	movlb	0	; () banked
 11942  010ACA  51EE               	movf	Port_SetQuadType@Output& (0+255),w,b
 11943  010ACC  A4D8               	btfss	status,2,c
 11944  010ACE  0012               	return	
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;Port.c: 418: {
 11948                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 11949  010AD0  0100               	movlb	0	; () banked
 11950  010AD2  EE20 F002          	lfsr	2,2
 11951  010AD6  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 11952  010AD8  26D9               	addwf	fsr2l,f,c
 11953  010ADA  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 11954  010ADC  22DA               	addwfc	fsr2h,f,c
 11955  010ADE  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 11956  010AE2  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 11957  010AE6  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 11958  010AEA  0E00               	movlw	0
 11959  010AEC  0100               	movlb	0	; () banked
 11960  010AEE  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 11961  010AF0  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 11962                           
 11963                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 11964  010AF4  0100               	movlb	0	; () banked
 11965  010AF6  EE20 F004          	lfsr	2,4
 11966  010AFA  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 11967  010AFC  26D9               	addwf	fsr2l,f,c
 11968  010AFE  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 11969  010B00  22DA               	addwfc	fsr2h,f,c
 11970  010B02  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 11971  010B06  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 11972  010B0A  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 11973  010B0E  0E00               	movlw	0
 11974  010B10  0100               	movlb	0	; () banked
 11975  010B12  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 11976  010B14  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 11977                           
 11978                           ;Port.c: 424: }
 11979  010B18  D07A               	goto	l1030
 11980  010B1A                     
 11981                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 11982  010B1A  C0EA  F0E3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 11983  010B1E  C0EB  F0E4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 11984  010B22  C0EC  F0E5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 11985  010B26  0E03               	movlw	3
 11986  010B28  0100               	movlb	0	; () banked
 11987  010B2A  6FE6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 11988  010B2C  EC3B  F09C         	call	_Port_CheckQuadType	;wreg free
 11989  010B30  0100               	movlb	0	; () banked
 11990  010B32  6FEE               	movwf	Port_SetQuadType@Output& (0+255),b
 11991  010B34  0100               	movlb	0	; () banked
 11992  010B36  51EE               	movf	Port_SetQuadType@Output& (0+255),w,b
 11993  010B38  A4D8               	btfss	status,2,c
 11994  010B3A  0012               	return	
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;Port.c: 429: {
 11998                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 11999  010B3C  0100               	movlb	0	; () banked
 12000  010B3E  EE20 F002          	lfsr	2,2
 12001  010B42  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12002  010B44  26D9               	addwf	fsr2l,f,c
 12003  010B46  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12004  010B48  22DA               	addwfc	fsr2h,f,c
 12005  010B4A  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 12006  010B4E  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 12007  010B52  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12008  010B56  0E0F               	movlw	15
 12009  010B58  0100               	movlb	0	; () banked
 12010  010B5A  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 12011  010B5C  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 12012                           
 12013                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 12014  010B60  0100               	movlb	0	; () banked
 12015  010B62  EE20 F004          	lfsr	2,4
 12016  010B66  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12017  010B68  26D9               	addwf	fsr2l,f,c
 12018  010B6A  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12019  010B6C  22DA               	addwfc	fsr2h,f,c
 12020  010B6E  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 12021  010B72  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 12022  010B76  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12023  010B7A  0E0F               	movlw	15
 12024  010B7C  0100               	movlb	0	; () banked
 12025  010B7E  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 12026  010B80  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 12027                           
 12028                           ;Port.c: 435: }
 12029  010B84  D044               	goto	l1030
 12030  010B86                     
 12031                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 12032  010B86  C0EA  F0E3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 12033  010B8A  C0EB  F0E4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 12034  010B8E  C0EC  F0E5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 12035  010B92  0E03               	movlw	3
 12036  010B94  0100               	movlb	0	; () banked
 12037  010B96  6FE6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 12038  010B98  EC3B  F09C         	call	_Port_CheckQuadType	;wreg free
 12039  010B9C  0100               	movlb	0	; () banked
 12040  010B9E  6FEE               	movwf	Port_SetQuadType@Output& (0+255),b
 12041  010BA0  0100               	movlb	0	; () banked
 12042  010BA2  51EE               	movf	Port_SetQuadType@Output& (0+255),w,b
 12043  010BA4  A4D8               	btfss	status,2,c
 12044  010BA6  0012               	return	
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;Port.c: 440: {
 12048                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 12049  010BA8  0100               	movlb	0	; () banked
 12050  010BAA  EE20 F002          	lfsr	2,2
 12051  010BAE  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12052  010BB0  26D9               	addwf	fsr2l,f,c
 12053  010BB2  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12054  010BB4  22DA               	addwfc	fsr2h,f,c
 12055  010BB6  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 12056  010BBA  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 12057  010BBE  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12058  010BC2  0E00               	movlw	0
 12059  010BC4  0100               	movlb	0	; () banked
 12060  010BC6  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 12061  010BC8  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 12062                           
 12063                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 12064  010BCC  0100               	movlb	0	; () banked
 12065  010BCE  EE20 F004          	lfsr	2,4
 12066  010BD2  51EA               	movf	Port_SetQuadType@pInput& (0+255),w,b
 12067  010BD4  26D9               	addwf	fsr2l,f,c
 12068  010BD6  51EB               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12069  010BD8  22DA               	addwfc	fsr2h,f,c
 12070  010BDA  CFDE F0BF          	movff	postinc2,Byte_SetQuad@pInput
 12071  010BDE  CFDD F0C0          	movff	postdec2,Byte_SetQuad@pInput+1
 12072  010BE2  C0EC  F0C1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 12073  010BE6  0E00               	movlw	0
 12074  010BE8  0100               	movlb	0	; () banked
 12075  010BEA  6FC2               	movwf	Byte_SetQuad@pValue& (0+255),b
 12076  010BEC  ECFE  F09F         	call	_Byte_SetQuad	;wreg free
 12077                           
 12078                           ;Port.c: 446: }
 12079  010BF0  D00E               	goto	l1030
 12080  010BF2                     l1028:
 12081  010BF2  0100               	movlb	0	; () banked
 12082  010BF4  51ED               	movf	Port_SetQuadType@pType& (0+255),w,b
 12083                           
 12084                           ; Switch size 1, requested type "space"
 12085                           ; Number of cases is 4, Range of values is 0 to 3
 12086                           ; switch strategies available:
 12087                           ; Name         Instructions Cycles
 12088                           ; simple_byte           13     7 (average)
 12089                           ;	Chosen strategy is simple_byte
 12090  010BF6  0A00               	xorlw	0	; case 0
 12091  010BF8  B4D8               	btfsc	status,2,c
 12092  010BFA  D734               	goto	l1029
 12093  010BFC  0A01               	xorlw	1	; case 1
 12094  010BFE  B4D8               	btfsc	status,2,c
 12095  010C00  D756               	goto	l1031
 12096  010C02  0A03               	xorlw	3	; case 2
 12097  010C04  B4D8               	btfsc	status,2,c
 12098  010C06  D789               	goto	l1035
 12099  010C08  0A01               	xorlw	1	; case 3
 12100  010C0A  B4D8               	btfsc	status,2,c
 12101  010C0C  D7BC               	goto	l1038
 12102  010C0E                     l1030:
 12103                           
 12104                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 12105                           
 12106                           ; BSR set to: 0
 12107  010C0E  0E08               	movlw	8
 12108  010C10  0100               	movlb	0	; () banked
 12109  010C12  25EA               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12110  010C14  0100               	movlb	0	; () banked
 12111  010C16  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
 12112  010C18  0E00               	movlw	0
 12113  010C1A  0100               	movlb	0	; () banked
 12114  010C1C  21EB               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12115  010C1E  0100               	movlb	0	; () banked
 12116  010C20  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12117  010C22  0100               	movlb	0	; () banked
 12118  010C24  51EC               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12119  010C26  0D04               	mullw	4
 12120  010C28  CFF3 F0C5          	movff	prodl,Word_SetPair@pPair
 12121  010C2C  C0ED  F0C6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12122  010C30  EC9E  F09D         	call	_Word_SetPair	;wreg free
 12123                           
 12124                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 12125  010C34  0E08               	movlw	8
 12126  010C36  0100               	movlb	0	; () banked
 12127  010C38  25EA               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12128  010C3A  0100               	movlb	0	; () banked
 12129  010C3C  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
 12130  010C3E  0E00               	movlw	0
 12131  010C40  0100               	movlb	0	; () banked
 12132  010C42  21EB               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12133  010C44  0100               	movlb	0	; () banked
 12134  010C46  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12135  010C48  0100               	movlb	0	; () banked
 12136  010C4A  51EC               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12137  010C4C  0D04               	mullw	4
 12138  010C4E  28F3               	incf	prodl,w,c
 12139  010C50  0100               	movlb	0	; () banked
 12140  010C52  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
 12141  010C54  C0ED  F0C6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12142  010C58  EC9E  F09D         	call	_Word_SetPair	;wreg free
 12143                           
 12144                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 12145  010C5C  0E08               	movlw	8
 12146  010C5E  0100               	movlb	0	; () banked
 12147  010C60  25EA               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12148  010C62  0100               	movlb	0	; () banked
 12149  010C64  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
 12150  010C66  0E00               	movlw	0
 12151  010C68  0100               	movlb	0	; () banked
 12152  010C6A  21EB               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12153  010C6C  0100               	movlb	0	; () banked
 12154  010C6E  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12155  010C70  0100               	movlb	0	; () banked
 12156  010C72  51EC               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12157  010C74  0D04               	mullw	4
 12158  010C76  50F3               	movf	prodl,w,c
 12159  010C78  0F02               	addlw	2
 12160  010C7A  0100               	movlb	0	; () banked
 12161  010C7C  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
 12162  010C7E  C0ED  F0C6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12163  010C82  EC9E  F09D         	call	_Word_SetPair	;wreg free
 12164                           
 12165                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 12166  010C86  0E08               	movlw	8
 12167  010C88  0100               	movlb	0	; () banked
 12168  010C8A  25EA               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 12169  010C8C  0100               	movlb	0	; () banked
 12170  010C8E  6FC3               	movwf	Word_SetPair@pInput& (0+255),b
 12171  010C90  0E00               	movlw	0
 12172  010C92  0100               	movlb	0	; () banked
 12173  010C94  21EB               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 12174  010C96  0100               	movlb	0	; () banked
 12175  010C98  6FC4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12176  010C9A  0100               	movlb	0	; () banked
 12177  010C9C  51EC               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 12178  010C9E  0D04               	mullw	4
 12179  010CA0  50F3               	movf	prodl,w,c
 12180  010CA2  0F03               	addlw	3
 12181  010CA4  0100               	movlb	0	; () banked
 12182  010CA6  6FC5               	movwf	Word_SetPair@pPair& (0+255),b
 12183  010CA8  C0ED  F0C6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 12184  010CAC  EC9E  F09D         	call	_Word_SetPair	;wreg free
 12185  010CB0  0012               	return	
 12186  010CB2                     __end_of_Port_SetQuadType:
 12187                           	opt stack 0
 12188                           tosu	equ	0xFFF
 12189                           tosh	equ	0xFFE
 12190                           tosl	equ	0xFFD
 12191                           pclath	equ	0xFFA
 12192                           tblptru	equ	0xFF8
 12193                           tblptrh	equ	0xFF7
 12194                           tblptrl	equ	0xFF6
 12195                           tablat	equ	0xFF5
 12196                           prodh	equ	0xFF4
 12197                           prodl	equ	0xFF3
 12198                           intcon	equ	0xFF2
 12199                           indf0	equ	0xFEF
 12200                           postinc0	equ	0xFEE
 12201                           fsr0h	equ	0xFEA
 12202                           fsr0l	equ	0xFE9
 12203                           wreg	equ	0xFE8
 12204                           postdec1	equ	0xFE5
 12205                           fsr1h	equ	0xFE2
 12206                           fsr1l	equ	0xFE1
 12207                           indf2	equ	0xFDF
 12208                           postinc2	equ	0xFDE
 12209                           postdec2	equ	0xFDD
 12210                           plusw2	equ	0xFDB
 12211                           fsr2h	equ	0xFDA
 12212                           fsr2l	equ	0xFD9
 12213                           status	equ	0xFD8
 12214                           
 12215 ;; *************** function _Word_SetPair *****************
 12216 ;; Defined at:
 12217 ;;		line 149 in file "Library/Types.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  pInput          2   15[BANK0 ] PTR struct Word
 12220 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12221 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12222 ;;  pPair           1   17[BANK0 ] unsigned char 
 12223 ;;  pValue          1   18[BANK0 ] unsigned char 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;		None
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12235 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12238 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;Total ram usage:        4 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    9
 12242 ;; This function calls:
 12243 ;;		_Byte_SetPair
 12244 ;; This function is called by:
 12245 ;;		_Port_SetPinType
 12246 ;;		_Port_SetQuadType
 12247 ;;		_Port_SetType
 12248 ;;		_Port_SetPairType
 12249 ;;		_PortProperty_Init
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text53
 12254  013B3C                     __ptext53:
 12255                           	opt stack 0
 12256  013B3C                     _Word_SetPair:
 12257                           	opt stack 19
 12258                           
 12259                           ;Types.c: 151: if (pPair >= 4)
 12260                           
 12261                           ;incstack = 0
 12262  013B3C  0E03               	movlw	3
 12263  013B3E  0100               	movlb	0	; () banked
 12264  013B40  65C5               	cpfsgt	Word_SetPair@pPair& (0+255),b
 12265  013B42  D014               	goto	l1328
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 12269  013B44  0E01               	movlw	1
 12270  013B46  0100               	movlb	0	; () banked
 12271  013B48  25C3               	addwf	Word_SetPair@pInput& (0+255),w,b
 12272  013B4A  0100               	movlb	0	; () banked
 12273  013B4C  6FBF               	movwf	Byte_SetPair@pInput& (0+255),b
 12274  013B4E  0E00               	movlw	0
 12275  013B50  0100               	movlb	0	; () banked
 12276  013B52  21C4               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 12277  013B54  0100               	movlb	0	; () banked
 12278  013B56  6FC0               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 12279  013B58  0100               	movlb	0	; () banked
 12280  013B5A  51C5               	movf	Word_SetPair@pPair& (0+255),w,b
 12281  013B5C  0FFC               	addlw	252
 12282  013B5E  0100               	movlb	0	; () banked
 12283  013B60  6FC1               	movwf	Byte_SetPair@pPair& (0+255),b
 12284  013B62  C0C6  F0C2         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 12285  013B66  ECED  F09F         	call	_Byte_SetPair	;wreg free
 12286  013B6A  0012               	return	
 12287  013B6C                     l1328:
 12288                           
 12289                           ;Types.c: 153: else
 12290                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 12291  013B6C  C0C3  F0BF         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 12292  013B70  C0C4  F0C0         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 12293  013B74  C0C5  F0C1         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 12294  013B78  C0C6  F0C2         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 12295  013B7C  ECED  F09F         	call	_Byte_SetPair	;wreg free
 12296  013B80  0012               	return	
 12297  013B82                     __end_of_Word_SetPair:
 12298                           	opt stack 0
 12299                           tosu	equ	0xFFF
 12300                           tosh	equ	0xFFE
 12301                           tosl	equ	0xFFD
 12302                           pclath	equ	0xFFA
 12303                           tblptru	equ	0xFF8
 12304                           tblptrh	equ	0xFF7
 12305                           tblptrl	equ	0xFF6
 12306                           tablat	equ	0xFF5
 12307                           prodh	equ	0xFF4
 12308                           prodl	equ	0xFF3
 12309                           intcon	equ	0xFF2
 12310                           indf0	equ	0xFEF
 12311                           postinc0	equ	0xFEE
 12312                           fsr0h	equ	0xFEA
 12313                           fsr0l	equ	0xFE9
 12314                           wreg	equ	0xFE8
 12315                           postdec1	equ	0xFE5
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           plusw2	equ	0xFDB
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function _Byte_SetPair *****************
 12327 ;; Defined at:
 12328 ;;		line 83 in file "Library/Types.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 12331 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 12332 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 12333 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 12334 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 12335 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 12336 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 12337 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 12338 ;;		 -> NULL(0), 
 12339 ;;  pPair           1   13[BANK0 ] unsigned char 
 12340 ;;  pValue          1   14[BANK0 ] unsigned char 
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      void 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12352 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;Total ram usage:        4 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    8
 12359 ;; This function calls:
 12360 ;;		_Byte_SetZone
 12361 ;; This function is called by:
 12362 ;;		_Word_SetPair
 12363 ;;		_Port_SetPairType
 12364 ;;		_Port_SetPair
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text54
 12369  013FDA                     __ptext54:
 12370                           	opt stack 0
 12371  013FDA                     _Byte_SetPair:
 12372                           	opt stack 19
 12373                           
 12374                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 12375                           
 12376                           ;incstack = 0
 12377  013FDA  C0BF  F0B4         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 12378  013FDE  C0C0  F0B5         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 12379  013FE2  0E04               	movlw	4
 12380  013FE4  0100               	movlb	0	; () banked
 12381  013FE6  6FB6               	movwf	Byte_SetZone@pMax& (0+255),b
 12382  013FE8  C0C1  F0B7         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 12383  013FEC  0E02               	movlw	2
 12384  013FEE  0100               	movlb	0	; () banked
 12385  013FF0  6FB8               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 12386  013FF2  C0C2  F0B9         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 12387  013FF6  ECF2  F094         	call	_Byte_SetZone	;wreg free
 12388  013FFA  0012               	return		;funcret
 12389  013FFC                     __end_of_Byte_SetPair:
 12390                           	opt stack 0
 12391                           tosu	equ	0xFFF
 12392                           tosh	equ	0xFFE
 12393                           tosl	equ	0xFFD
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           indf0	equ	0xFEF
 12403                           postinc0	equ	0xFEE
 12404                           fsr0h	equ	0xFEA
 12405                           fsr0l	equ	0xFE9
 12406                           wreg	equ	0xFE8
 12407                           postdec1	equ	0xFE5
 12408                           fsr1h	equ	0xFE2
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           plusw2	equ	0xFDB
 12414                           fsr2h	equ	0xFDA
 12415                           fsr2l	equ	0xFD9
 12416                           status	equ	0xFD8
 12417                           
 12418 ;; *************** function _Port_CheckQuadType *****************
 12419 ;; Defined at:
 12420 ;;		line 126 in file "Library/Port.c"
 12421 ;; Parameters:    Size  Location     Type
 12422 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 12423 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12424 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12425 ;;  pQuad           1   49[BANK0 ] enum E6776
 12426 ;;  pDrive          1   50[BANK0 ] enum E6469
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  Output          1   53[BANK0 ] enum E6475
 12429 ;;  Pair2           1   52[BANK0 ] enum E6760
 12430 ;;  Pair1           1   51[BANK0 ] enum E6760
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      enum E6475
 12433 ;; Registers used:
 12434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;Total ram usage:        7 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:   12
 12447 ;; This function calls:
 12448 ;;		_Port_CheckPairType
 12449 ;; This function is called by:
 12450 ;;		_Port_CheckPortType
 12451 ;;		_Port_SetQuadType
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           	psect	text55
 12456  013876                     __ptext55:
 12457                           	opt stack 0
 12458  013876                     _Port_CheckQuadType:
 12459                           	opt stack 15
 12460                           
 12461                           ;Port.c: 128: ePinError Output = ePinErrorState;
 12462                           
 12463                           ;incstack = 0
 12464  013876  0E05               	movlw	5
 12465  013878  0100               	movlb	0	; () banked
 12466  01387A  6FE9               	movwf	Port_CheckQuadType@Output& (0+255),b
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 12470  01387C  0100               	movlb	0	; () banked
 12471  01387E  51E5               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 12472  013880  0D02               	mullw	2
 12473  013882  CFF3 F0E7          	movff	prodl,Port_CheckQuadType@Pair1
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 12477  013886  0100               	movlb	0	; () banked
 12478  013888  51E5               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 12479  01388A  0D02               	mullw	2
 12480  01388C  28F3               	incf	prodl,w,c
 12481  01388E  0100               	movlb	0	; () banked
 12482  013890  6FE8               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 12486  013892  C0E3  F0DA         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 12487  013896  C0E4  F0DB         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 12488  01389A  C0E7  F0DC         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 12489  01389E  C0E6  F0DD         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 12490  0138A2  EC3F  F09B         	call	_Port_CheckPairType	;wreg free
 12491  0138A6  0100               	movlb	0	; () banked
 12492  0138A8  6FE9               	movwf	Port_CheckQuadType@Output& (0+255),b
 12493  0138AA  0100               	movlb	0	; () banked
 12494  0138AC  51E9               	movf	Port_CheckQuadType@Output& (0+255),w,b
 12495  0138AE  A4D8               	btfss	status,2,c
 12496  0138B0  D00C               	goto	l945
 12497                           
 12498                           ; BSR set to: 0
 12499                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 12500  0138B2  C0E3  F0DA         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 12501  0138B6  C0E4  F0DB         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 12502  0138BA  C0E8  F0DC         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 12503  0138BE  C0E6  F0DD         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 12504  0138C2  EC3F  F09B         	call	_Port_CheckPairType	;wreg free
 12505  0138C6  0100               	movlb	0	; () banked
 12506  0138C8  6FE9               	movwf	Port_CheckQuadType@Output& (0+255),b
 12507  0138CA                     l945:
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;Port.c: 136: return Output;
 12511                           
 12512                           ; BSR set to: 0
 12513  0138CA  0100               	movlb	0	; () banked
 12514  0138CC  51E9               	movf	Port_CheckQuadType@Output& (0+255),w,b
 12515  0138CE  0012               	return	
 12516  0138D0                     __end_of_Port_CheckQuadType:
 12517                           	opt stack 0
 12518                           tosu	equ	0xFFF
 12519                           tosh	equ	0xFFE
 12520                           tosl	equ	0xFFD
 12521                           pclath	equ	0xFFA
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           prodh	equ	0xFF4
 12527                           prodl	equ	0xFF3
 12528                           intcon	equ	0xFF2
 12529                           indf0	equ	0xFEF
 12530                           postinc0	equ	0xFEE
 12531                           fsr0h	equ	0xFEA
 12532                           fsr0l	equ	0xFE9
 12533                           wreg	equ	0xFE8
 12534                           postdec1	equ	0xFE5
 12535                           fsr1h	equ	0xFE2
 12536                           fsr1l	equ	0xFE1
 12537                           indf2	equ	0xFDF
 12538                           postinc2	equ	0xFDE
 12539                           postdec2	equ	0xFDD
 12540                           plusw2	equ	0xFDB
 12541                           fsr2h	equ	0xFDA
 12542                           fsr2l	equ	0xFD9
 12543                           status	equ	0xFD8
 12544                           
 12545 ;; *************** function _Port_CheckPairType *****************
 12546 ;; Defined at:
 12547 ;;		line 112 in file "Library/Port.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 12550 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12551 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12552 ;;  pPair           1   40[BANK0 ] enum E6760
 12553 ;;  pDrive          1   41[BANK0 ] enum E6469
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 12556 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12557 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 12558 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 12559 ;;		 -> PortC(10), PortF(10), NULL(0), 
 12560 ;;  Output          1   44[BANK0 ] enum E6475
 12561 ;;  Pin2            1   43[BANK0 ] enum E6750
 12562 ;;  Pin1            1   42[BANK0 ] enum E6750
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  1    wreg      enum E6475
 12565 ;; Registers used:
 12566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12572 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;Total ram usage:        9 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:   11
 12579 ;; This function calls:
 12580 ;;		_PortProperty_Valid
 12581 ;; This function is called by:
 12582 ;;		_Port_CheckQuadType
 12583 ;;		_Port_SetPairType
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           	psect	text56
 12588  01367E                     __ptext56:
 12589                           	opt stack 0
 12590  01367E                     _Port_CheckPairType:
 12591                           	opt stack 15
 12592                           
 12593                           ;Port.c: 114: ePinError Output = ePinErrorState;
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;incstack = 0
 12597  01367E  0E05               	movlw	5
 12598  013680  0100               	movlb	0	; () banked
 12599  013682  6FE0               	movwf	Port_CheckPairType@Output& (0+255),b
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 12603  013684  C0DA  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 12604  013688  C0DB  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 12605  01368C  CFDE F0E1          	movff	postinc2,Port_CheckPairType@Props
 12606  013690  CFDD F0E2          	movff	postdec2,Port_CheckPairType@Props+1
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 12610  013694  0100               	movlb	0	; () banked
 12611  013696  51DC               	movf	Port_CheckPairType@pPair& (0+255),w,b
 12612  013698  0D02               	mullw	2
 12613  01369A  CFF3 F0DE          	movff	prodl,Port_CheckPairType@Pin1
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 12617  01369E  0100               	movlb	0	; () banked
 12618  0136A0  51DC               	movf	Port_CheckPairType@pPair& (0+255),w,b
 12619  0136A2  0D02               	mullw	2
 12620  0136A4  28F3               	incf	prodl,w,c
 12621  0136A6  0100               	movlb	0	; () banked
 12622  0136A8  6FDF               	movwf	Port_CheckPairType@Pin2& (0+255),b
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 12626  0136AA  C0E1  F0C3         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 12627  0136AE  C0E2  F0C4         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 12628  0136B2  C0DD  F0C5         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 12629  0136B6  C0DE  F0C6         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 12630  0136BA  EC01  F099         	call	_PortProperty_Valid	;wreg free
 12631  0136BE  0100               	movlb	0	; () banked
 12632  0136C0  6FE0               	movwf	Port_CheckPairType@Output& (0+255),b
 12633  0136C2  0100               	movlb	0	; () banked
 12634  0136C4  51E0               	movf	Port_CheckPairType@Output& (0+255),w,b
 12635  0136C6  A4D8               	btfss	status,2,c
 12636  0136C8  D00C               	goto	l941
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 12640  0136CA  C0E1  F0C3         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 12641  0136CE  C0E2  F0C4         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 12642  0136D2  C0DD  F0C5         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 12643  0136D6  C0DF  F0C6         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 12644  0136DA  EC01  F099         	call	_PortProperty_Valid	;wreg free
 12645  0136DE  0100               	movlb	0	; () banked
 12646  0136E0  6FE0               	movwf	Port_CheckPairType@Output& (0+255),b
 12647  0136E2                     l941:
 12648                           
 12649                           ; BSR set to: 0
 12650                           ;Port.c: 124: return Output;
 12651                           
 12652                           ; BSR set to: 0
 12653  0136E2  0100               	movlb	0	; () banked
 12654  0136E4  51E0               	movf	Port_CheckPairType@Output& (0+255),w,b
 12655  0136E6  0012               	return	
 12656  0136E8                     __end_of_Port_CheckPairType:
 12657                           	opt stack 0
 12658                           tosu	equ	0xFFF
 12659                           tosh	equ	0xFFE
 12660                           tosl	equ	0xFFD
 12661                           pclath	equ	0xFFA
 12662                           tblptru	equ	0xFF8
 12663                           tblptrh	equ	0xFF7
 12664                           tblptrl	equ	0xFF6
 12665                           tablat	equ	0xFF5
 12666                           prodh	equ	0xFF4
 12667                           prodl	equ	0xFF3
 12668                           intcon	equ	0xFF2
 12669                           indf0	equ	0xFEF
 12670                           postinc0	equ	0xFEE
 12671                           fsr0h	equ	0xFEA
 12672                           fsr0l	equ	0xFE9
 12673                           wreg	equ	0xFE8
 12674                           postdec1	equ	0xFE5
 12675                           fsr1h	equ	0xFE2
 12676                           fsr1l	equ	0xFE1
 12677                           indf2	equ	0xFDF
 12678                           postinc2	equ	0xFDE
 12679                           postdec2	equ	0xFDD
 12680                           plusw2	equ	0xFDB
 12681                           fsr2h	equ	0xFDA
 12682                           fsr2l	equ	0xFD9
 12683                           status	equ	0xFD8
 12684                           
 12685 ;; *************** function _PortProperty_Valid *****************
 12686 ;; Defined at:
 12687 ;;		line 220 in file "Library/Types.c"
 12688 ;; Parameters:    Size  Location     Type
 12689 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 12690 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12691 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 12692 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 12693 ;;		 -> PortC(10), PortF(10), NULL(0), 
 12694 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 12695 ;;  pPin            1   18[BANK0 ] unsigned char 
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 12698 ;;  Pair            1   37[BANK0 ] enum E6469
 12699 ;; Return value:  Size  Location     Type
 12700 ;;                  1    wreg      enum E6475
 12701 ;; Registers used:
 12702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12708 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;Total ram usage:       23 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:   10
 12715 ;; This function calls:
 12716 ;;		_Word_GetPair
 12717 ;; This function is called by:
 12718 ;;		_Port_CheckPairType
 12719 ;;		_Port_SetPinType
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text57
 12724  013202                     __ptext57:
 12725                           	opt stack 0
 12726  013202                     _PortProperty_Valid:
 12727                           	opt stack 15
 12728                           
 12729                           ;Types.c: 222: ePinDrive Pair;
 12730                           ;Types.c: 223: const ePinError Errors[4][4] =
 12731                           ;Types.c: 224: {
 12732                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 12733                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 12734                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 12735                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 12736                           ;Types.c: 230: };
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;incstack = 0
 12740  013202  0EA5               	movlw	low PortProperty_Valid@F6830
 12741  013204  6EF6               	movwf	tblptrl,c
 12742  013206                     	if	1	;There is more than 1 active tblptr byte
 12743  013206  0EFC               	movlw	high PortProperty_Valid@F6830
 12744  013208  6EF7               	movwf	tblptrh,c
 12745  01320A                     	endif
 12746  01320A                     	if	1	;There are 3 active tblptr bytes
 12747  01320A  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 12748  01320C  6EF8               	movwf	tblptru,c
 12749  01320E                     	endif
 12750  01320E  EE20  F0C9         	lfsr	2,PortProperty_Valid@Errors
 12751  013212  0E0F               	movlw	15
 12752  013214                     u11090:
 12753  013214  0009               	tblrd		*+
 12754  013216  CFF5 FFDE          	movff	tablat,postinc2
 12755  01321A  06E8               	decf	wreg,f,c
 12756  01321C  E2FB               	bc	u11090
 12757                           
 12758                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 12759  01321E  C0C3  F0C0         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 12760  013222  C0C4  F0C1         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 12761  013226  C0C6  F0C2         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 12762  01322A  EC41  F09E         	call	_Word_GetPair	;wreg free
 12763  01322E  0100               	movlb	0	; () banked
 12764  013230  6FD9               	movwf	PortProperty_Valid@Pair& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 12768  013232  0E04               	movlw	4
 12769  013234  0100               	movlb	0	; () banked
 12770  013236  61C5               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 12771  013238  D020               	goto	l1371
 12772                           
 12773                           ; BSR set to: 0
 12774  01323A  0E04               	movlw	4
 12775  01323C  0100               	movlb	0	; () banked
 12776  01323E  61D9               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 12777  013240  D01C               	goto	l1371
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 12781  013242  0100               	movlb	0	; () banked
 12782  013244  51C5               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 12783  013246  0D04               	mullw	4
 12784  013248  0EC9               	movlw	low PortProperty_Valid@Errors
 12785  01324A  0100               	movlb	0	; () banked
 12786  01324C  6FC7               	movwf	??_PortProperty_Valid& (0+255),b
 12787  01324E  0E00               	movlw	high PortProperty_Valid@Errors
 12788  013250  0100               	movlb	0	; () banked
 12789  013252  6FC8               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 12790  013254  50F3               	movf	prodl,w,c
 12791  013256  0100               	movlb	0	; () banked
 12792  013258  27C7               	addwf	??_PortProperty_Valid& (0+255),f,b
 12793  01325A  50F4               	movf	prodh,w,c
 12794  01325C  0100               	movlb	0	; () banked
 12795  01325E  23C8               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 12796  013260  0100               	movlb	0	; () banked
 12797  013262  51D9               	movf	PortProperty_Valid@Pair& (0+255),w,b
 12798  013264  0D01               	mullw	1
 12799  013266  50F3               	movf	prodl,w,c
 12800  013268  0100               	movlb	0	; () banked
 12801  01326A  25C7               	addwf	??_PortProperty_Valid& (0+255),w,b
 12802  01326C  6ED9               	movwf	fsr2l,c
 12803  01326E  50F4               	movf	prodh,w,c
 12804  013270  0100               	movlb	0	; () banked
 12805  013272  21C8               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 12806  013274  6EDA               	movwf	fsr2h,c
 12807  013276  50DF               	movf	indf2,w,c
 12808                           
 12809                           ; BSR set to: 0
 12810  013278  0012               	return	
 12811  01327A                     l1371:
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;Types.c: 237: return ePinErrorState;
 12815                           
 12816                           ; BSR set to: 0
 12817  01327A  0E05               	movlw	5
 12818  01327C  0012               	return	
 12819  01327E                     __end_of_PortProperty_Valid:
 12820                           	opt stack 0
 12821                           tosu	equ	0xFFF
 12822                           tosh	equ	0xFFE
 12823                           tosl	equ	0xFFD
 12824                           pclath	equ	0xFFA
 12825                           tblptru	equ	0xFF8
 12826                           tblptrh	equ	0xFF7
 12827                           tblptrl	equ	0xFF6
 12828                           tablat	equ	0xFF5
 12829                           prodh	equ	0xFF4
 12830                           prodl	equ	0xFF3
 12831                           intcon	equ	0xFF2
 12832                           indf0	equ	0xFEF
 12833                           postinc0	equ	0xFEE
 12834                           fsr0h	equ	0xFEA
 12835                           fsr0l	equ	0xFE9
 12836                           wreg	equ	0xFE8
 12837                           postdec1	equ	0xFE5
 12838                           fsr1h	equ	0xFE2
 12839                           fsr1l	equ	0xFE1
 12840                           indf2	equ	0xFDF
 12841                           postinc2	equ	0xFDE
 12842                           postdec2	equ	0xFDD
 12843                           plusw2	equ	0xFDB
 12844                           fsr2h	equ	0xFDA
 12845                           fsr2l	equ	0xFD9
 12846                           status	equ	0xFD8
 12847                           
 12848 ;; *************** function _Byte_SetQuad *****************
 12849 ;; Defined at:
 12850 ;;		line 101 in file "Library/Types.c"
 12851 ;; Parameters:    Size  Location     Type
 12852 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 12853 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 12854 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 12855 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 12856 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 12857 ;;		 -> NULL(0), 
 12858 ;;  pQuad           1   13[BANK0 ] unsigned char 
 12859 ;;  pValue          1   14[BANK0 ] unsigned char 
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;		None
 12862 ;; Return value:  Size  Location     Type
 12863 ;;                  1    wreg      void 
 12864 ;; Registers used:
 12865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12871 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;Total ram usage:        4 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:    8
 12878 ;; This function calls:
 12879 ;;		_Byte_SetZone
 12880 ;; This function is called by:
 12881 ;;		_Port_SetQuadType
 12882 ;;		_SPI_Init
 12883 ;;		_SPI_MinSpeed
 12884 ;;		_SPI_MaxSpeed
 12885 ;;		_Port_SetQuad
 12886 ;;		_Word_SetQuad
 12887 ;;		_I2C_Init
 12888 ;; This function uses a non-reentrant model
 12889 ;;
 12890                           
 12891                           	psect	text58
 12892  013FFC                     __ptext58:
 12893                           	opt stack 0
 12894  013FFC                     _Byte_SetQuad:
 12895                           	opt stack 20
 12896                           
 12897                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;incstack = 0
 12901  013FFC  C0BF  F0B4         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 12902  014000  C0C0  F0B5         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 12903  014004  0E02               	movlw	2
 12904  014006  0100               	movlb	0	; () banked
 12905  014008  6FB6               	movwf	Byte_SetZone@pMax& (0+255),b
 12906  01400A  C0C1  F0B7         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 12907  01400E  0E04               	movlw	4
 12908  014010  0100               	movlb	0	; () banked
 12909  014012  6FB8               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 12910  014014  C0C2  F0B9         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 12911  014018  ECF2  F094         	call	_Byte_SetZone	;wreg free
 12912  01401C  0012               	return		;funcret
 12913  01401E                     __end_of_Byte_SetQuad:
 12914                           	opt stack 0
 12915                           tosu	equ	0xFFF
 12916                           tosh	equ	0xFFE
 12917                           tosl	equ	0xFFD
 12918                           pclath	equ	0xFFA
 12919                           tblptru	equ	0xFF8
 12920                           tblptrh	equ	0xFF7
 12921                           tblptrl	equ	0xFF6
 12922                           tablat	equ	0xFF5
 12923                           prodh	equ	0xFF4
 12924                           prodl	equ	0xFF3
 12925                           intcon	equ	0xFF2
 12926                           indf0	equ	0xFEF
 12927                           postinc0	equ	0xFEE
 12928                           fsr0h	equ	0xFEA
 12929                           fsr0l	equ	0xFE9
 12930                           wreg	equ	0xFE8
 12931                           postdec1	equ	0xFE5
 12932                           fsr1h	equ	0xFE2
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           plusw2	equ	0xFDB
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _Byte_SetZone *****************
 12943 ;; Defined at:
 12944 ;;		line 47 in file "Library/Types.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12947 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 12948 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 12949 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 12950 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 12951 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 12952 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 12953 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 12954 ;;		 -> PortC(10), PortF(10), NULL(0), 
 12955 ;;  pMax            1    2[BANK0 ] unsigned char 
 12956 ;;  pChunk          1    3[BANK0 ] unsigned char 
 12957 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 12958 ;;  pValue          1    5[BANK0 ] unsigned char 
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;  MASK            1   10[BANK0 ] unsigned char 
 12961 ;;  Offset          1    9[BANK0 ] unsigned char 
 12962 ;; Return value:  Size  Location     Type
 12963 ;;                  1    wreg      void 
 12964 ;; Registers used:
 12965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : 0/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12971 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;Total ram usage:       11 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:    7
 12978 ;; This function calls:
 12979 ;;		Nothing
 12980 ;; This function is called by:
 12981 ;;		_Byte_SetPair
 12982 ;;		_Byte_SetQuad
 12983 ;;		_Byte_SetTriple
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text59
 12988  0129E4                     __ptext59:
 12989                           	opt stack 0
 12990  0129E4                     _Byte_SetZone:
 12991                           	opt stack 19
 12992                           
 12993                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 12994                           
 12995                           ;incstack = 0
 12996  0129E4  0100               	movlb	0	; () banked
 12997  0129E6  51B8               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 12998  0129E8  0D01               	mullw	1
 12999  0129EA  0EBF               	movlw	low _MASKS
 13000  0129EC  24F3               	addwf	prodl,w,c
 13001  0129EE  6EF6               	movwf	tblptrl,c
 13002  0129F0  0EFC               	movlw	high _MASKS
 13003  0129F2  20F4               	addwfc	prodh,w,c
 13004  0129F4  6EF7               	movwf	tblptrh,c
 13005  0129F6                     	if	1	;There are 3 active tblptr bytes
 13006  0129F6  6AF8               	clrf	tblptru,c
 13007  0129F8  0E00               	movlw	low (__mediumconst shr (0+16))
 13008  0129FA  22F8               	addwfc	tblptru,f,c
 13009  0129FC                     	endif
 13010  0129FC  0008               	tblrd		*
 13011  0129FE  CFF5 F0BE          	movff	tablat,Byte_SetZone@MASK
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;Types.c: 50: UINT8 Offset = 0;
 13015  012A02  0E00               	movlw	0
 13016  012A04  0100               	movlb	0	; () banked
 13017  012A06  6FBD               	movwf	Byte_SetZone@Offset& (0+255),b
 13018                           
 13019                           ;Types.c: 52: while (pChunk >= pMax)
 13020  012A08  D006               	goto	l1278
 13021  012A0A                     
 13022                           ; BSR set to: 0
 13023                           ;Types.c: 53: {
 13024                           ;Types.c: 54: pChunk -= pMax;
 13025                           
 13026                           ; BSR set to: 0
 13027  012A0A  0100               	movlb	0	; () banked
 13028  012A0C  51B6               	movf	Byte_SetZone@pMax& (0+255),w,b
 13029  012A0E  0100               	movlb	0	; () banked
 13030  012A10  5FB7               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;Types.c: 55: Offset += 1;
 13034  012A12  0100               	movlb	0	; () banked
 13035  012A14  2BBD               	incf	Byte_SetZone@Offset& (0+255),f,b
 13036  012A16                     l1278:
 13037                           
 13038                           ; BSR set to: 0
 13039                           
 13040                           ; BSR set to: 0
 13041  012A16  0100               	movlb	0	; () banked
 13042  012A18  51B6               	movf	Byte_SetZone@pMax& (0+255),w,b
 13043  012A1A  0100               	movlb	0	; () banked
 13044  012A1C  5DB7               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 13045  012A1E  B0D8               	btfsc	status,0,c
 13046  012A20  D7F4               	goto	l1279
 13047                           
 13048                           ; BSR set to: 0
 13049                           ;Types.c: 56: }
 13050                           ;Types.c: 57: pChunk *= pChunkSize;
 13051                           
 13052                           ; BSR set to: 0
 13053  012A22  0100               	movlb	0	; () banked
 13054  012A24  51B8               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 13055  012A26  0100               	movlb	0	; () banked
 13056  012A28  03B7               	mulwf	Byte_SetZone@pChunk& (0+255),b
 13057  012A2A  50F3               	movf	prodl,w,c
 13058  012A2C  6FB7               	movwf	Byte_SetZone@pChunk& (0+255),b
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;Types.c: 58: pChunk += Offset;
 13062  012A2E  0100               	movlb	0	; () banked
 13063  012A30  51BD               	movf	Byte_SetZone@Offset& (0+255),w,b
 13064  012A32  0100               	movlb	0	; () banked
 13065  012A34  27B7               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;Types.c: 60: pValue &= MASK;
 13069  012A36  0100               	movlb	0	; () banked
 13070  012A38  51BE               	movf	Byte_SetZone@MASK& (0+255),w,b
 13071  012A3A  0100               	movlb	0	; () banked
 13072  012A3C  17B9               	andwf	Byte_SetZone@pValue& (0+255),f,b
 13073                           
 13074                           ; BSR set to: 0
 13075                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 13076  012A3E  C0B7  F0BA         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 13077  012A42  C0BE  F0BB         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 13078  012A46  0100               	movlb	0	; () banked
 13079  012A48  2BBA               	incf	??_Byte_SetZone& (0+255),f,b
 13080  012A4A  D003               	goto	u11154
 13081  012A4C                     u11155:
 13082  012A4C  0100               	movlb	0	; () banked
 13083  012A4E  90D8               	bcf	status,0,c
 13084  012A50  37BB               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 13085  012A52                     u11154:
 13086  012A52  0100               	movlb	0	; () banked
 13087  012A54  2FBA               	decfsz	??_Byte_SetZone& (0+255),f,b
 13088  012A56  D7FA               	goto	u11155
 13089  012A58  0100               	movlb	0	; () banked
 13090  012A5A  51BB               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 13091  012A5C  0AFF               	xorlw	255
 13092  012A5E  0100               	movlb	0	; () banked
 13093  012A60  6FBC               	movwf	(??_Byte_SetZone+2)& (0+255),b
 13094  012A62  C0B4  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 13095  012A66  C0B5  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 13096  012A6A  0100               	movlb	0	; () banked
 13097  012A6C  51BC               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 13098  012A6E  16DF               	andwf	indf2,f,c
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 13102  012A70  C0B7  F0BA         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 13103  012A74  C0B9  F0BB         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 13104  012A78  0100               	movlb	0	; () banked
 13105  012A7A  2BBA               	incf	??_Byte_SetZone& (0+255),f,b
 13106  012A7C  D003               	goto	u11164
 13107  012A7E                     u11165:
 13108  012A7E  0100               	movlb	0	; () banked
 13109  012A80  90D8               	bcf	status,0,c
 13110  012A82  37BB               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 13111  012A84                     u11164:
 13112  012A84  0100               	movlb	0	; () banked
 13113  012A86  2FBA               	decfsz	??_Byte_SetZone& (0+255),f,b
 13114  012A88  D7FA               	goto	u11165
 13115  012A8A  C0B4  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 13116  012A8E  C0B5  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 13117  012A92  0100               	movlb	0	; () banked
 13118  012A94  51BB               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 13119  012A96  12DF               	iorwf	indf2,f,c
 13120                           
 13121                           ; BSR set to: 0
 13122  012A98  0012               	return		;funcret
 13123  012A9A                     __end_of_Byte_SetZone:
 13124                           	opt stack 0
 13125                           tosu	equ	0xFFF
 13126                           tosh	equ	0xFFE
 13127                           tosl	equ	0xFFD
 13128                           pclath	equ	0xFFA
 13129                           tblptru	equ	0xFF8
 13130                           tblptrh	equ	0xFF7
 13131                           tblptrl	equ	0xFF6
 13132                           tablat	equ	0xFF5
 13133                           prodh	equ	0xFF4
 13134                           prodl	equ	0xFF3
 13135                           intcon	equ	0xFF2
 13136                           indf0	equ	0xFEF
 13137                           postinc0	equ	0xFEE
 13138                           fsr0h	equ	0xFEA
 13139                           fsr0l	equ	0xFE9
 13140                           wreg	equ	0xFE8
 13141                           postdec1	equ	0xFE5
 13142                           fsr1h	equ	0xFE2
 13143                           fsr1l	equ	0xFE1
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           plusw2	equ	0xFDB
 13148                           fsr2h	equ	0xFDA
 13149                           fsr2l	equ	0xFD9
 13150                           status	equ	0xFD8
 13151                           
 13152 ;; *************** function _FunctHMI *****************
 13153 ;; Defined at:
 13154 ;;		line 249 in file "Functions.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;		None
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;		None
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      void 
 13161 ;; Registers used:
 13162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;Total ram usage:        0 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:   13
 13175 ;; This function calls:
 13176 ;;		_Console_Render
 13177 ;;		_Console_SetForecolour
 13178 ;;		_HMI_Render
 13179 ;;		_MXK_BlockSwitchTo
 13180 ;;		_MXK_Dequeue
 13181 ;;		_MXK_Release
 13182 ;;		_printf
 13183 ;; This function is called by:
 13184 ;;		_main
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           	psect	text60
 13189  0123B4                     __ptext60:
 13190                           	opt stack 0
 13191  0123B4                     _FunctHMI:
 13192                           	opt stack 17
 13193                           
 13194                           ;Functions.c: 251: if (MXK_BlockSwitchTo(eMXK_HMI))
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;incstack = 0
 13198  0123B4  0E01               	movlw	1
 13199  0123B6  EC60  F09E         	call	_MXK_BlockSwitchTo
 13200  0123BA  0900               	iorlw	0
 13201  0123BC  B4D8               	btfsc	status,2,c
 13202  0123BE  0012               	return	
 13203                           
 13204                           ;Functions.c: 252: {
 13205                           ;Functions.c: 257: HMI_Render();
 13206  0123C0  EC7F  F09E         	call	_HMI_Render	;wreg free
 13207                           
 13208                           ;Functions.c: 267: static UINT8 v = 200;
 13209                           ;Functions.c: 268: if (!v--)
 13210  0123C4  0100               	movlb	0	; () banked
 13211  0123C6  07FB               	decf	FunctHMI@v& (0+255),f,b
 13212  0123C8  0100               	movlb	0	; () banked
 13213  0123CA  29FB               	incf	FunctHMI@v& (0+255),w,b
 13214  0123CC  A4D8               	btfss	status,2,c
 13215  0123CE  D054               	goto	l2992
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;Functions.c: 269: {
 13219                           ;Functions.c: 270: v = 200;
 13220  0123D0  0EC8               	movlw	200
 13221  0123D2  0100               	movlb	0	; () banked
 13222  0123D4  6FFB               	movwf	FunctHMI@v& (0+255),b
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;Functions.c: 273: Console_SetForecolour(0xF800);
 13226  0123D6  0EF8               	movlw	248
 13227  0123D8  0100               	movlb	0	; () banked
 13228  0123DA  6FB5               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 13229  0123DC  0E00               	movlw	0
 13230  0123DE  6FB4               	movwf	Console_SetForecolour@pColour& (0+255),b
 13231  0123E0  EC04  F0A1         	call	_Console_SetForecolour	;wreg free
 13232                           
 13233                           ;Functions.c: 274: printf("%c", (char)35);
 13234  0123E4  0EFA               	movlw	low STR_2
 13235  0123E6  0100               	movlb	0	; () banked
 13236  0123E8  6FC9               	movwf	printf@f& (0+255),b
 13237  0123EA  0EFF               	movlw	high STR_2
 13238  0123EC  0100               	movlb	0	; () banked
 13239  0123EE  6FCA               	movwf	(printf@f+1)& (0+255),b
 13240  0123F0  0E00               	movlw	0
 13241  0123F2  0100               	movlb	0	; () banked
 13242  0123F4  6FCC               	movwf	(?_printf+3)& (0+255),b
 13243  0123F6  0E23               	movlw	35
 13244  0123F8  6FCB               	movwf	(?_printf+2)& (0+255),b
 13245  0123FA  EC64  F08D         	call	_printf	;wreg free
 13246                           
 13247                           ;Functions.c: 275: printf("SYSTEM STATUS:\n");
 13248  0123FE  0ED3               	movlw	low STR_3
 13249  012400  0100               	movlb	0	; () banked
 13250  012402  6FC9               	movwf	printf@f& (0+255),b
 13251  012404  0EFF               	movlw	high STR_3
 13252  012406  0100               	movlb	0	; () banked
 13253  012408  6FCA               	movwf	(printf@f+1)& (0+255),b
 13254  01240A  EC64  F08D         	call	_printf	;wreg free
 13255                           
 13256                           ;Functions.c: 276: printf("Aug 11 2017");
 13257  01240E  0EE3               	movlw	low STR_4
 13258  012410  0100               	movlb	0	; () banked
 13259  012412  6FC9               	movwf	printf@f& (0+255),b
 13260  012414  0EFF               	movlw	high STR_4
 13261  012416  0100               	movlb	0	; () banked
 13262  012418  6FCA               	movwf	(printf@f+1)& (0+255),b
 13263  01241A  EC64  F08D         	call	_printf	;wreg free
 13264                           
 13265                           ;Functions.c: 277: printf(" ");
 13266  01241E  0EFD               	movlw	low STR_5
 13267  012420  0100               	movlb	0	; () banked
 13268  012422  6FC9               	movwf	printf@f& (0+255),b
 13269  012424  0EFF               	movlw	high STR_5
 13270  012426  0100               	movlb	0	; () banked
 13271  012428  6FCA               	movwf	(printf@f+1)& (0+255),b
 13272  01242A  EC64  F08D         	call	_printf	;wreg free
 13273                           
 13274                           ;Functions.c: 278: printf("1.0");
 13275  01242E  0EF6               	movlw	low STR_6
 13276  012430  0100               	movlb	0	; () banked
 13277  012432  6FC9               	movwf	printf@f& (0+255),b
 13278  012434  0EFF               	movlw	high STR_6
 13279  012436  0100               	movlb	0	; () banked
 13280  012438  6FCA               	movwf	(printf@f+1)& (0+255),b
 13281  01243A  EC64  F08D         	call	_printf	;wreg free
 13282                           
 13283                           ;Functions.c: 279: printf("\n");
 13284  01243E  0EE1               	movlw	low (STR_3+14)
 13285  012440  0100               	movlb	0	; () banked
 13286  012442  6FC9               	movwf	printf@f& (0+255),b
 13287  012444  0EFF               	movlw	high (STR_3+14)
 13288  012446  0100               	movlb	0	; () banked
 13289  012448  6FCA               	movwf	(printf@f+1)& (0+255),b
 13290  01244A  EC64  F08D         	call	_printf	;wreg free
 13291                           
 13292                           ;Functions.c: 296: Console_SetForecolour(0xFFE0);
 13293  01244E  0EFF               	movlw	255
 13294  012450  0100               	movlb	0	; () banked
 13295  012452  6FB5               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 13296  012454  0EE0               	movlw	224
 13297  012456  6FB4               	movwf	Console_SetForecolour@pColour& (0+255),b
 13298  012458  EC04  F0A1         	call	_Console_SetForecolour	;wreg free
 13299                           
 13300                           ;Functions.c: 297: printf("Step rate\t=%u Hz\n", Hz);
 13301  01245C  0EC1               	movlw	low STR_8
 13302  01245E  0100               	movlb	0	; () banked
 13303  012460  6FC9               	movwf	printf@f& (0+255),b
 13304  012462  0EFF               	movlw	high STR_8
 13305  012464  0100               	movlb	0	; () banked
 13306  012466  6FCA               	movwf	(printf@f+1)& (0+255),b
 13307  012468  C0F7  F0CB         	movff	_Hz,?_printf+2
 13308  01246C  C0F8  F0CC         	movff	_Hz+1,?_printf+3
 13309  012470  EC64  F08D         	call	_printf	;wreg free
 13310                           
 13311                           ;Functions.c: 308: Console_Render();
 13312  012474  EC6E  F087         	call	_Console_Render	;wreg free
 13313  012478                     l2992:
 13314                           
 13315                           ;Functions.c: 309: }
 13316                           ;Functions.c: 318: if(MXK_Release())
 13317  012478  EC9A  F0A0         	call	_MXK_Release	;wreg free
 13318  01247C  0900               	iorlw	0
 13319  01247E  B4D8               	btfsc	status,2,c
 13320  012480  0012               	return	
 13321                           
 13322                           ;Functions.c: 319: MXK_Dequeue();
 13323  012482  EC22  F09E         	call	_MXK_Dequeue	;wreg free
 13324  012486  0012               	return	
 13325  012488                     __end_of_FunctHMI:
 13326                           	opt stack 0
 13327                           tosu	equ	0xFFF
 13328                           tosh	equ	0xFFE
 13329                           tosl	equ	0xFFD
 13330                           pclath	equ	0xFFA
 13331                           tblptru	equ	0xFF8
 13332                           tblptrh	equ	0xFF7
 13333                           tblptrl	equ	0xFF6
 13334                           tablat	equ	0xFF5
 13335                           prodh	equ	0xFF4
 13336                           prodl	equ	0xFF3
 13337                           intcon	equ	0xFF2
 13338                           indf0	equ	0xFEF
 13339                           postinc0	equ	0xFEE
 13340                           fsr0h	equ	0xFEA
 13341                           fsr0l	equ	0xFE9
 13342                           wreg	equ	0xFE8
 13343                           postdec1	equ	0xFE5
 13344                           fsr1h	equ	0xFE2
 13345                           fsr1l	equ	0xFE1
 13346                           indf2	equ	0xFDF
 13347                           postinc2	equ	0xFDE
 13348                           postdec2	equ	0xFDD
 13349                           plusw2	equ	0xFDB
 13350                           fsr2h	equ	0xFDA
 13351                           fsr2l	equ	0xFD9
 13352                           status	equ	0xFD8
 13353                           
 13354 ;; *************** function _printf *****************
 13355 ;; Defined at:
 13356 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 13359 ;;		 -> STR_8(18), STR_7(2), STR_6(4), STR_5(2), 
 13360 ;;		 -> STR_4(12), STR_3(16), STR_2(3), 
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  tmpval          4    0        struct .
 13363 ;;  cp              3    0        PTR const unsigned char 
 13364 ;;  ap              2   29[BANK0 ] PTR void [1]
 13365 ;;		 -> ?_printf(2), 
 13366 ;;  val             2   26[BANK0 ] unsigned int 
 13367 ;;  len             2    0        unsigned int 
 13368 ;;  c               1   31[BANK0 ] char 
 13369 ;;  prec            1   28[BANK0 ] char 
 13370 ;;  flag            1   25[BANK0 ] unsigned char 
 13371 ;; Return value:  Size  Location     Type
 13372 ;;                  2   21[BANK0 ] int 
 13373 ;; Registers used:
 13374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;Total ram usage:       11 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; Hardware stack levels required when called:   12
 13387 ;; This function calls:
 13388 ;;		___lwdiv
 13389 ;;		___lwmod
 13390 ;;		_putch
 13391 ;; This function is called by:
 13392 ;;		_FunctHMI
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           	psect	text61
 13397  011AC8                     __ptext61:
 13398                           	opt stack 0
 13399  011AC8                     _printf:
 13400                           	opt stack 17
 13401                           
 13402                           ;doprnt.c: 466: va_list ap;
 13403                           ;doprnt.c: 499: signed char c;
 13404                           ;doprnt.c: 506: signed char prec;
 13405                           ;doprnt.c: 508: unsigned char flag;
 13406                           ;doprnt.c: 523: union {
 13407                           ;doprnt.c: 524: unsigned long vd;
 13408                           ;doprnt.c: 525: double integ;
 13409                           ;doprnt.c: 526: } tmpval;
 13410                           ;doprnt.c: 528: unsigned int val;
 13411                           ;doprnt.c: 529: unsigned len;
 13412                           ;doprnt.c: 530: const char * cp;
 13413                           ;doprnt.c: 533: *ap = __va_start();
 13414                           
 13415                           ;incstack = 0
 13416  011AC8  0ECB               	movlw	low (?_printf+2)
 13417  011ACA  0100               	movlb	0	; () banked
 13418  011ACC  6FD1               	movwf	printf@ap& (0+255),b
 13419  011ACE  0E00               	movlw	high (?_printf+2)
 13420  011AD0  0100               	movlb	0	; () banked
 13421  011AD2  6FD2               	movwf	(printf@ap+1)& (0+255),b
 13422                           
 13423                           ;doprnt.c: 536: while(c = *f++) {
 13424  011AD4  D09E               	goto	u13440
 13425  011AD6                     
 13426                           ; BSR set to: 0
 13427                           ;doprnt.c: 538: if(c != '%')
 13428                           
 13429                           ; BSR set to: 0
 13430  011AD6  0E25               	movlw	37
 13431  011AD8  0100               	movlb	0	; () banked
 13432  011ADA  19D3               	xorwf	printf@c& (0+255),w,b
 13433  011ADC  B4D8               	btfsc	status,2,c
 13434  011ADE  D005               	goto	l3028
 13435                           
 13436                           ; BSR set to: 0
 13437                           ;doprnt.c: 540: {
 13438                           ;doprnt.c: 541: (putch(c) );
 13439  011AE0  0100               	movlb	0	; () banked
 13440  011AE2  51D3               	movf	printf@c& (0+255),w,b
 13441  011AE4  ECCD  F0A0         	call	_putch
 13442                           
 13443                           ;doprnt.c: 542: continue;
 13444  011AE8  D094               	goto	u13440
 13445  011AEA                     l3028:
 13446                           
 13447                           ;doprnt.c: 543: }
 13448                           ;doprnt.c: 548: flag = 0;
 13449  011AEA  0E00               	movlw	0
 13450  011AEC  0100               	movlb	0	; () banked
 13451  011AEE  6FCD               	movwf	printf@flag& (0+255),b
 13452                           
 13453                           ;doprnt.c: 635: switch(c = *f++) {
 13454  011AF0  D015               	goto	l3029
 13455  011AF2                     
 13456                           ; BSR set to: 0
 13457                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13458                           
 13459                           ; BSR set to: 0
 13460  011AF2  C0D1  FFD9         	movff	printf@ap,fsr2l
 13461  011AF6  C0D2  FFDA         	movff	printf@ap+1,fsr2h
 13462  011AFA  50DF               	movf	indf2,w,c
 13463  011AFC  0100               	movlb	0	; () banked
 13464  011AFE  6FD3               	movwf	printf@c& (0+255),b
 13465                           
 13466                           ; BSR set to: 0
 13467  011B00  0E02               	movlw	2
 13468  011B02  0100               	movlb	0	; () banked
 13469  011B04  27D1               	addwf	printf@ap& (0+255),f,b
 13470  011B06  0E00               	movlw	0
 13471  011B08  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
 13472  011B0A                     
 13473                           ; BSR set to: 0
 13474                           ;doprnt.c: 809: (putch(c) );
 13475                           
 13476                           ; BSR set to: 0
 13477  011B0A  0100               	movlb	0	; () banked
 13478  011B0C  51D3               	movf	printf@c& (0+255),w,b
 13479  011B0E  ECCD  F0A0         	call	_putch
 13480                           
 13481                           ;doprnt.c: 810: continue;
 13482  011B12  D07F               	goto	u13440
 13483  011B14                     
 13484                           ;doprnt.c: 818: flag |= 0xC0;
 13485  011B14  0EC0               	movlw	192
 13486  011B16  0100               	movlb	0	; () banked
 13487  011B18  13CD               	iorwf	printf@flag& (0+255),f,b
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;doprnt.c: 822: }
 13491                           
 13492                           ;doprnt.c: 819: break;
 13493  011B1A  D018               	goto	l3035
 13494  011B1C                     l3029:
 13495                           
 13496                           ; BSR set to: 0
 13497                           
 13498                           ; BSR set to: 0
 13499  011B1C  C0C9  FFF6         	movff	printf@f,tblptrl
 13500  011B20  C0CA  FFF7         	movff	printf@f+1,tblptrh
 13501  011B24  0100               	movlb	0	; () banked
 13502  011B26  4BC9               	infsnz	printf@f& (0+255),f,b
 13503  011B28  2BCA               	incf	(printf@f+1)& (0+255),f,b
 13504  011B2A                     	if	0	;tblptru may be non-zero
 13505  011B2A                     	endif
 13506  011B2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13507  011B2A  0E00               	movlw	low (__mediumconst shr (0+16))
 13508  011B2C  6EF8               	movwf	tblptru,c
 13509  011B2E                     	endif
 13510  011B2E  0008               	tblrd		*
 13511  011B30  CFF5 F0D3          	movff	tablat,printf@c
 13512  011B34  0100               	movlb	0	; () banked
 13513  011B36  51D3               	movf	printf@c& (0+255),w,b
 13514                           
 13515                           ; Switch size 1, requested type "space"
 13516                           ; Number of cases is 3, Range of values is 0 to 117
 13517                           ; switch strategies available:
 13518                           ; Name         Instructions Cycles
 13519                           ; simple_byte           10     6 (average)
 13520                           ;	Chosen strategy is simple_byte
 13521  011B38  0A00               	xorlw	0	; case 0
 13522  011B3A  B4D8               	btfsc	status,2,c
 13523  011B3C  0012               	return	
 13524  011B3E  0A63               	xorlw	99	; case 99
 13525  011B40  B4D8               	btfsc	status,2,c
 13526  011B42  D7D7               	goto	l3032
 13527  011B44  0A16               	xorlw	22	; case 117
 13528  011B46  B4D8               	btfsc	status,2,c
 13529  011B48  D7E5               	goto	l3034
 13530  011B4A  D7DF               	goto	l3033
 13531  011B4C                     l3035:
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;doprnt.c: 1273: {
 13535                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13536                           
 13537                           ; BSR set to: 0
 13538  011B4C  C0D1  FFD9         	movff	printf@ap,fsr2l
 13539  011B50  C0D2  FFDA         	movff	printf@ap+1,fsr2h
 13540  011B54  CFDE F0CE          	movff	postinc2,printf@val
 13541  011B58  CFDD F0CF          	movff	postdec2,printf@val+1
 13542                           
 13543                           ; BSR set to: 0
 13544  011B5C  0E02               	movlw	2
 13545  011B5E  0100               	movlb	0	; () banked
 13546  011B60  27D1               	addwf	printf@ap& (0+255),f,b
 13547  011B62  0E00               	movlw	0
 13548  011B64  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
 13549                           
 13550                           ; BSR set to: 0
 13551                           ;doprnt.c: 1287: }
 13552                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13553  011B66  0E01               	movlw	1
 13554  011B68  0100               	movlb	0	; () banked
 13555  011B6A  6FD3               	movwf	printf@c& (0+255),b
 13556  011B6C  D018               	goto	l16583
 13557  011B6E                     
 13558                           ; BSR set to: 0
 13559                           ;doprnt.c: 1306: if(val < dpowers[c])
 13560                           
 13561                           ; BSR set to: 0
 13562  011B6E  0100               	movlb	0	; () banked
 13563  011B70  51D3               	movf	printf@c& (0+255),w,b
 13564  011B72  0D02               	mullw	2
 13565  011B74  0EB5               	movlw	low _dpowers
 13566  011B76  24F3               	addwf	prodl,w,c
 13567  011B78  6EF6               	movwf	tblptrl,c
 13568  011B7A  0EFC               	movlw	high _dpowers
 13569  011B7C  20F4               	addwfc	prodh,w,c
 13570  011B7E  6EF7               	movwf	tblptrh,c
 13571  011B80                     	if	1	;There are 3 active tblptr bytes
 13572  011B80  6AF8               	clrf	tblptru,c
 13573  011B82  0E00               	movlw	low (__mediumconst shr (0+16))
 13574  011B84  22F8               	addwfc	tblptru,f,c
 13575  011B86                     	endif
 13576  011B86  0009               	tblrd		*+
 13577  011B88  50F5               	movf	tablat,w,c
 13578  011B8A  0100               	movlb	0	; () banked
 13579  011B8C  5DCE               	subwf	printf@val& (0+255),w,b
 13580  011B8E  0009               	tblrd		*+
 13581  011B90  50F5               	movf	tablat,w,c
 13582  011B92  0100               	movlb	0	; () banked
 13583  011B94  59CF               	subwfb	(printf@val+1)& (0+255),w,b
 13584  011B96  A0D8               	btfss	status,0,c
 13585  011B98  D007               	goto	u13430
 13586                           
 13587                           ; BSR set to: 0
 13588                           
 13589                           ; BSR set to: 0
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;doprnt.c: 1307: break;
 13593  011B9A  0100               	movlb	0	; () banked
 13594  011B9C  2BD3               	incf	printf@c& (0+255),f,b
 13595  011B9E                     l16583:
 13596                           
 13597                           ; BSR set to: 0
 13598  011B9E  0E05               	movlw	5
 13599  011BA0  0100               	movlb	0	; () banked
 13600  011BA2  19D3               	xorwf	printf@c& (0+255),w,b
 13601  011BA4  A4D8               	btfss	status,2,c
 13602  011BA6  D7E3               	goto	l3036
 13603  011BA8                     u13430:
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;doprnt.c: 1422: {
 13607                           ;doprnt.c: 1469: }
 13608                           ;doprnt.c: 1472: prec = c;
 13609  011BA8  C0D3  F0D0         	movff	printf@c,printf@prec
 13610                           
 13611                           ;doprnt.c: 1474: while(prec--) {
 13612  011BAC  D02C               	goto	l3039
 13613  011BAE                     
 13614                           ; BSR set to: 0
 13615                           ;doprnt.c: 1478: {
 13616                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13617                           
 13618                           ; BSR set to: 0
 13619  011BAE  0100               	movlb	0	; () banked
 13620  011BB0  51D0               	movf	printf@prec& (0+255),w,b
 13621  011BB2  0D02               	mullw	2
 13622  011BB4  0EB5               	movlw	low _dpowers
 13623  011BB6  24F3               	addwf	prodl,w,c
 13624  011BB8  6EF6               	movwf	tblptrl,c
 13625  011BBA  0EFC               	movlw	high _dpowers
 13626  011BBC  20F4               	addwfc	prodh,w,c
 13627  011BBE  6EF7               	movwf	tblptrh,c
 13628  011BC0                     	if	1	;There are 3 active tblptr bytes
 13629  011BC0  6AF8               	clrf	tblptru,c
 13630  011BC2  0E00               	movlw	low (__mediumconst shr (0+16))
 13631  011BC4  22F8               	addwfc	tblptru,f,c
 13632  011BC6                     	endif
 13633  011BC6  0009               	tblrd		*+
 13634  011BC8  CFF5 F0B6          	movff	tablat,___lwdiv@divisor
 13635  011BCC  000A               	tblrd		*-
 13636  011BCE  CFF5 F0B7          	movff	tablat,___lwdiv@divisor+1
 13637  011BD2  C0CE  F0B4         	movff	printf@val,___lwdiv@dividend
 13638  011BD6  C0CF  F0B5         	movff	printf@val+1,___lwdiv@dividend+1
 13639  011BDA  EC3F  F099         	call	___lwdiv	;wreg free
 13640  011BDE  C0B4  F0BB         	movff	?___lwdiv,___lwmod@dividend
 13641  011BE2  C0B5  F0BC         	movff	?___lwdiv+1,___lwmod@dividend+1
 13642  011BE6  0E00               	movlw	0
 13643  011BE8  0100               	movlb	0	; () banked
 13644  011BEA  6FBE               	movwf	(___lwmod@divisor+1)& (0+255),b
 13645  011BEC  0E0A               	movlw	10
 13646  011BEE  6FBD               	movwf	___lwmod@divisor& (0+255),b
 13647  011BF0  EC0A  F09C         	call	___lwmod	;wreg free
 13648  011BF4  0100               	movlb	0	; () banked
 13649  011BF6  51BB               	movf	?___lwmod& (0+255),w,b
 13650  011BF8  0F30               	addlw	48
 13651  011BFA  0100               	movlb	0	; () banked
 13652  011BFC  6FD3               	movwf	printf@c& (0+255),b
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;doprnt.c: 1523: }
 13656                           ;doprnt.c: 1524: (putch(c) );
 13657  011BFE  0100               	movlb	0	; () banked
 13658  011C00  51D3               	movf	printf@c& (0+255),w,b
 13659  011C02  ECCD  F0A0         	call	_putch
 13660  011C06                     l3039:
 13661  011C06  0100               	movlb	0	; () banked
 13662  011C08  07D0               	decf	printf@prec& (0+255),f,b
 13663  011C0A  0100               	movlb	0	; () banked
 13664  011C0C  29D0               	incf	printf@prec& (0+255),w,b
 13665  011C0E  A4D8               	btfss	status,2,c
 13666  011C10  D7CE               	goto	l3040
 13667  011C12                     u13440:
 13668                           
 13669                           ; BSR set to: 0
 13670                           
 13671                           ; BSR set to: 0
 13672  011C12  C0C9  FFF6         	movff	printf@f,tblptrl
 13673  011C16  C0CA  FFF7         	movff	printf@f+1,tblptrh
 13674  011C1A  0100               	movlb	0	; () banked
 13675  011C1C  4BC9               	infsnz	printf@f& (0+255),f,b
 13676  011C1E  2BCA               	incf	(printf@f+1)& (0+255),f,b
 13677  011C20                     	if	0	;tblptru may be non-zero
 13678  011C20                     	endif
 13679  011C20                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13680  011C20  0E00               	movlw	low (__mediumconst shr (0+16))
 13681  011C22  6EF8               	movwf	tblptru,c
 13682  011C24                     	endif
 13683  011C24  0008               	tblrd		*
 13684  011C26  CFF5 F0D3          	movff	tablat,printf@c
 13685  011C2A  0100               	movlb	0	; () banked
 13686  011C2C  51D3               	movf	printf@c& (0+255),w,b
 13687  011C2E  B4D8               	btfsc	status,2,c
 13688  011C30  0012               	return	
 13689  011C32  D751               	goto	l3027
 13690  011C34                     __end_of_printf:
 13691                           	opt stack 0
 13692                           tosu	equ	0xFFF
 13693                           tosh	equ	0xFFE
 13694                           tosl	equ	0xFFD
 13695                           pclath	equ	0xFFA
 13696                           tblptru	equ	0xFF8
 13697                           tblptrh	equ	0xFF7
 13698                           tblptrl	equ	0xFF6
 13699                           tablat	equ	0xFF5
 13700                           prodh	equ	0xFF4
 13701                           prodl	equ	0xFF3
 13702                           intcon	equ	0xFF2
 13703                           indf0	equ	0xFEF
 13704                           postinc0	equ	0xFEE
 13705                           fsr0h	equ	0xFEA
 13706                           fsr0l	equ	0xFE9
 13707                           wreg	equ	0xFE8
 13708                           postdec1	equ	0xFE5
 13709                           fsr1h	equ	0xFE2
 13710                           fsr1l	equ	0xFE1
 13711                           indf2	equ	0xFDF
 13712                           postinc2	equ	0xFDE
 13713                           postdec2	equ	0xFDD
 13714                           plusw2	equ	0xFDB
 13715                           fsr2h	equ	0xFDA
 13716                           fsr2l	equ	0xFD9
 13717                           status	equ	0xFD8
 13718                           
 13719 ;; *************** function _putch *****************
 13720 ;; Defined at:
 13721 ;;		line 454 in file "Library/Console.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  c               1    wreg     unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  c               1   20[BANK0 ] unsigned char 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  1    wreg      void 
 13728 ;; Registers used:
 13729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;Total ram usage:        1 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:   11
 13742 ;; This function calls:
 13743 ;;		_Console_PrintChar
 13744 ;; This function is called by:
 13745 ;;		_printf
 13746 ;; This function uses a non-reentrant model
 13747 ;;
 13748                           
 13749                           	psect	text62
 13750  01419A                     __ptext62:
 13751                           	opt stack 0
 13752  01419A                     _putch:
 13753                           	opt stack 17
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;incstack = 0
 13757                           ;putch@c stored from wreg
 13758  01419A  0100               	movlb	0	; () banked
 13759  01419C  6FC8               	movwf	putch@c& (0+255),b
 13760                           
 13761                           ;Console.c: 456: Console_PrintChar(c);
 13762  01419E  0100               	movlb	0	; () banked
 13763  0141A0  51C8               	movf	putch@c& (0+255),w,b
 13764  0141A2  EC53  F08A         	call	_Console_PrintChar
 13765  0141A6  0012               	return		;funcret
 13766  0141A8                     __end_of_putch:
 13767                           	opt stack 0
 13768                           tosu	equ	0xFFF
 13769                           tosh	equ	0xFFE
 13770                           tosl	equ	0xFFD
 13771                           pclath	equ	0xFFA
 13772                           tblptru	equ	0xFF8
 13773                           tblptrh	equ	0xFF7
 13774                           tblptrl	equ	0xFF6
 13775                           tablat	equ	0xFF5
 13776                           prodh	equ	0xFF4
 13777                           prodl	equ	0xFF3
 13778                           intcon	equ	0xFF2
 13779                           indf0	equ	0xFEF
 13780                           postinc0	equ	0xFEE
 13781                           fsr0h	equ	0xFEA
 13782                           fsr0l	equ	0xFE9
 13783                           wreg	equ	0xFE8
 13784                           postdec1	equ	0xFE5
 13785                           fsr1h	equ	0xFE2
 13786                           fsr1l	equ	0xFE1
 13787                           indf2	equ	0xFDF
 13788                           postinc2	equ	0xFDE
 13789                           postdec2	equ	0xFDD
 13790                           plusw2	equ	0xFDB
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function _Console_PrintChar *****************
 13796 ;; Defined at:
 13797 ;;		line 322 in file "Library/Console.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  pInput          1    wreg     unsigned char 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  pInput          1   19[BANK0 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  1    wreg      void 
 13804 ;; Registers used:
 13805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;Total ram usage:        4 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:   10
 13818 ;; This function calls:
 13819 ;;		_Console_Backspace
 13820 ;;		_Console_FormFeed
 13821 ;;		_Console_IncrementCursor
 13822 ;;		_Console_NewLine
 13823 ;;		_Console_ResetCursor
 13824 ;;		_Console_Tab
 13825 ;; This function is called by:
 13826 ;;		_putch
 13827 ;;		_Console_PrintString
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           	psect	text63
 13832  0114A6                     __ptext63:
 13833                           	opt stack 0
 13834  0114A6                     _Console_PrintChar:
 13835                           	opt stack 17
 13836                           
 13837                           ;incstack = 0
 13838                           ;Console_PrintChar@pInput stored from wreg
 13839  0114A6  0100               	movlb	0	; () banked
 13840  0114A8  6FC7               	movwf	Console_PrintChar@pInput& (0+255),b
 13841                           
 13842                           ;Console.c: 324: switch(pInput)
 13843  0114AA  D0B1               	goto	l1658
 13844  0114AC                     
 13845                           ;Console.c: 327: case '\n':
 13846                           ;Console.c: 328: Console_NewLine();
 13847  0114AC  ECF0  F096         	call	_Console_NewLine	;wreg free
 13848                           
 13849                           ;Console.c: 329: return;
 13850  0114B0  0012               	return	
 13851  0114B2                     
 13852                           ;Console.c: 331: Console_Backspace();
 13853  0114B2  EC74  F09B         	call	_Console_Backspace	;wreg free
 13854                           
 13855                           ;Console.c: 332: return;
 13856  0114B6  0012               	return	
 13857  0114B8                     
 13858                           ;Console.c: 334: Console_FormFeed();
 13859  0114B8  EC2F  F098         	call	_Console_FormFeed	;wreg free
 13860                           
 13861                           ;Console.c: 335: return;
 13862  0114BC  0012               	return	
 13863  0114BE                     
 13864                           ;Console.c: 337: Console_Tab();
 13865  0114BE  EC12  F093         	call	_Console_Tab	;wreg free
 13866                           
 13867                           ;Console.c: 338: return;
 13868  0114C2  0012               	return	
 13869  0114C4                     
 13870                           ;Console.c: 340: Console_IncrementCursor();
 13871  0114C4  EC9C  F09A         	call	_Console_IncrementCursor	;wreg free
 13872                           
 13873                           ;Console.c: 341: return;
 13874  0114C8  0012               	return	
 13875  0114CA                     
 13876                           ;Console.c: 343: Console_ResetCursor();
 13877  0114CA  EC0F  F0A0         	call	_Console_ResetCursor	;wreg free
 13878                           
 13879                           ;Console.c: 344: return;
 13880  0114CE  0012               	return	
 13881  0114D0                     
 13882                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 13883                           
 13884                           ;Console.c: 349: default:
 13885  0114D0  C0C7  F0C4         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 13886  0114D4  0E7F               	movlw	127
 13887  0114D6  0100               	movlb	0	; () banked
 13888  0114D8  17C4               	andwf	??_Console_PrintChar& (0+255),f,b
 13889  0114DA  0100               	movlb	0	; () banked
 13890  0114DC  519B               	movf	_lBufferY& (0+255),w,b
 13891  0114DE  0D14               	mullw	20
 13892  0114E0  0E11               	movlw	low _lBuffer
 13893  0114E2  0100               	movlb	0	; () banked
 13894  0114E4  6FC5               	movwf	(??_Console_PrintChar+1)& (0+255),b
 13895  0114E6  0E0C               	movlw	high _lBuffer
 13896  0114E8  0100               	movlb	0	; () banked
 13897  0114EA  6FC6               	movwf	(??_Console_PrintChar+2)& (0+255),b
 13898  0114EC  50F3               	movf	prodl,w,c
 13899  0114EE  0100               	movlb	0	; () banked
 13900  0114F0  27C5               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 13901  0114F2  50F4               	movf	prodh,w,c
 13902  0114F4  0100               	movlb	0	; () banked
 13903  0114F6  23C6               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 13904  0114F8  0100               	movlb	0	; () banked
 13905  0114FA  519C               	movf	_lBufferX& (0+255),w,b
 13906  0114FC  0D01               	mullw	1
 13907  0114FE  50F3               	movf	prodl,w,c
 13908  011500  0100               	movlb	0	; () banked
 13909  011502  25C5               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 13910  011504  6ED9               	movwf	fsr2l,c
 13911  011506  50F4               	movf	prodh,w,c
 13912  011508  0100               	movlb	0	; () banked
 13913  01150A  21C6               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 13914  01150C  6EDA               	movwf	fsr2h,c
 13915  01150E  50DF               	movf	indf2,w,c
 13916  011510  0B7F               	andlw	127
 13917  011512  0100               	movlb	0	; () banked
 13918  011514  19C4               	xorwf	??_Console_PrintChar& (0+255),w,b
 13919  011516  B4D8               	btfsc	status,2,c
 13920  011518  D02E               	goto	l1669
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;Console.c: 351: {
 13924                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 13925  01151A  0E01               	movlw	1
 13926  01151C  0100               	movlb	0	; () banked
 13927  01151E  6FFC               	movwf	_change& (0+255),b
 13928                           
 13929                           ; BSR set to: 0
 13930  011520  0100               	movlb	0	; () banked
 13931  011522  519B               	movf	_lBufferY& (0+255),w,b
 13932  011524  0D14               	mullw	20
 13933  011526  0E11               	movlw	low _lBuffer
 13934  011528  0100               	movlb	0	; () banked
 13935  01152A  6FC4               	movwf	??_Console_PrintChar& (0+255),b
 13936  01152C  0E0C               	movlw	high _lBuffer
 13937  01152E  0100               	movlb	0	; () banked
 13938  011530  6FC5               	movwf	(??_Console_PrintChar+1)& (0+255),b
 13939  011532  50F3               	movf	prodl,w,c
 13940  011534  0100               	movlb	0	; () banked
 13941  011536  27C4               	addwf	??_Console_PrintChar& (0+255),f,b
 13942  011538  50F4               	movf	prodh,w,c
 13943  01153A  0100               	movlb	0	; () banked
 13944  01153C  23C5               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 13945  01153E  0100               	movlb	0	; () banked
 13946  011540  519C               	movf	_lBufferX& (0+255),w,b
 13947  011542  0D01               	mullw	1
 13948  011544  50F3               	movf	prodl,w,c
 13949  011546  0100               	movlb	0	; () banked
 13950  011548  25C4               	addwf	??_Console_PrintChar& (0+255),w,b
 13951  01154A  6ED9               	movwf	fsr2l,c
 13952  01154C  50F4               	movf	prodh,w,c
 13953  01154E  0100               	movlb	0	; () banked
 13954  011550  21C5               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 13955  011552  6EDA               	movwf	fsr2h,c
 13956  011554  0100               	movlb	0	; () banked
 13957  011556  51C7               	movf	Console_PrintChar@pInput& (0+255),w,b
 13958  011558  0980               	iorlw	128
 13959  01155A  6EDF               	movwf	indf2,c
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 13963  01155C  0100               	movlb	0	; () banked
 13964  01155E  519B               	movf	_lBufferY& (0+255),w,b
 13965  011560  0D02               	mullw	2
 13966  011562  0E24               	movlw	low _lCBuffer
 13967  011564  24F3               	addwf	prodl,w,c
 13968  011566  6ED9               	movwf	fsr2l,c
 13969  011568  0E02               	movlw	high _lCBuffer
 13970  01156A  20F4               	addwfc	prodh,w,c
 13971  01156C  6EDA               	movwf	fsr2h,c
 13972  01156E  C0F9  FFDE         	movff	_gForecolour,postinc2
 13973  011572  C0FA  FFDD         	movff	_gForecolour+1,postdec2
 13974  011576                     l1669:
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;Console.c: 354: }
 13978                           ;Console.c: 368: if(Console_IncrementCursor())
 13979                           
 13980                           ; BSR set to: 0
 13981  011576  EC9C  F09A         	call	_Console_IncrementCursor	;wreg free
 13982  01157A  0900               	iorlw	0
 13983  01157C  B4D8               	btfsc	status,2,c
 13984  01157E  0012               	return	
 13985                           
 13986                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 13987  011580  C0C7  F0C4         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 13988  011584  0E7F               	movlw	127
 13989  011586  0100               	movlb	0	; () banked
 13990  011588  17C4               	andwf	??_Console_PrintChar& (0+255),f,b
 13991  01158A  0100               	movlb	0	; () banked
 13992  01158C  519B               	movf	_lBufferY& (0+255),w,b
 13993  01158E  0D14               	mullw	20
 13994  011590  0E11               	movlw	low _lBuffer
 13995  011592  0100               	movlb	0	; () banked
 13996  011594  6FC5               	movwf	(??_Console_PrintChar+1)& (0+255),b
 13997  011596  0E0C               	movlw	high _lBuffer
 13998  011598  0100               	movlb	0	; () banked
 13999  01159A  6FC6               	movwf	(??_Console_PrintChar+2)& (0+255),b
 14000  01159C  50F3               	movf	prodl,w,c
 14001  01159E  0100               	movlb	0	; () banked
 14002  0115A0  27C5               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 14003  0115A2  50F4               	movf	prodh,w,c
 14004  0115A4  0100               	movlb	0	; () banked
 14005  0115A6  23C6               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 14006  0115A8  0100               	movlb	0	; () banked
 14007  0115AA  519C               	movf	_lBufferX& (0+255),w,b
 14008  0115AC  0D01               	mullw	1
 14009  0115AE  50F3               	movf	prodl,w,c
 14010  0115B0  0100               	movlb	0	; () banked
 14011  0115B2  25C5               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 14012  0115B4  6ED9               	movwf	fsr2l,c
 14013  0115B6  50F4               	movf	prodh,w,c
 14014  0115B8  0100               	movlb	0	; () banked
 14015  0115BA  21C6               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 14016  0115BC  6EDA               	movwf	fsr2h,c
 14017  0115BE  50DF               	movf	indf2,w,c
 14018  0115C0  0B7F               	andlw	127
 14019  0115C2  0100               	movlb	0	; () banked
 14020  0115C4  19C4               	xorwf	??_Console_PrintChar& (0+255),w,b
 14021  0115C6  B4D8               	btfsc	status,2,c
 14022  0115C8  0012               	return	
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 14026  0115CA  0E01               	movlw	1
 14027  0115CC  0100               	movlb	0	; () banked
 14028  0115CE  6FFC               	movwf	_change& (0+255),b
 14029                           
 14030                           ; BSR set to: 0
 14031  0115D0  0100               	movlb	0	; () banked
 14032  0115D2  519B               	movf	_lBufferY& (0+255),w,b
 14033  0115D4  0D14               	mullw	20
 14034  0115D6  0E11               	movlw	low _lBuffer
 14035  0115D8  0100               	movlb	0	; () banked
 14036  0115DA  6FC4               	movwf	??_Console_PrintChar& (0+255),b
 14037  0115DC  0E0C               	movlw	high _lBuffer
 14038  0115DE  0100               	movlb	0	; () banked
 14039  0115E0  6FC5               	movwf	(??_Console_PrintChar+1)& (0+255),b
 14040  0115E2  50F3               	movf	prodl,w,c
 14041  0115E4  0100               	movlb	0	; () banked
 14042  0115E6  27C4               	addwf	??_Console_PrintChar& (0+255),f,b
 14043  0115E8  50F4               	movf	prodh,w,c
 14044  0115EA  0100               	movlb	0	; () banked
 14045  0115EC  23C5               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 14046  0115EE  0100               	movlb	0	; () banked
 14047  0115F0  519C               	movf	_lBufferX& (0+255),w,b
 14048  0115F2  0D01               	mullw	1
 14049  0115F4  50F3               	movf	prodl,w,c
 14050  0115F6  0100               	movlb	0	; () banked
 14051  0115F8  25C4               	addwf	??_Console_PrintChar& (0+255),w,b
 14052  0115FA  6ED9               	movwf	fsr2l,c
 14053  0115FC  50F4               	movf	prodh,w,c
 14054  0115FE  0100               	movlb	0	; () banked
 14055  011600  21C5               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 14056  011602  6EDA               	movwf	fsr2h,c
 14057  011604  0100               	movlb	0	; () banked
 14058  011606  51C7               	movf	Console_PrintChar@pInput& (0+255),w,b
 14059  011608  0980               	iorlw	128
 14060  01160A  6EDF               	movwf	indf2,c
 14061                           
 14062                           ; BSR set to: 0
 14063                           ;Console.c: 372: };
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;Console.c: 371: return;
 14067                           
 14068                           ; BSR set to: 0
 14069                           
 14070                           ; BSR set to: 0
 14071  01160C  0012               	return	
 14072  01160E                     l1658:
 14073                           
 14074                           ; BSR set to: 0
 14075  01160E  0100               	movlb	0	; () banked
 14076  011610  51C7               	movf	Console_PrintChar@pInput& (0+255),w,b
 14077                           
 14078                           ; Switch size 1, requested type "space"
 14079                           ; Number of cases is 8, Range of values is 7 to 35
 14080                           ; switch strategies available:
 14081                           ; Name         Instructions Cycles
 14082                           ; simple_byte           25    13 (average)
 14083                           ;	Chosen strategy is simple_byte
 14084  011612  0A07               	xorlw	7	; case 7
 14085  011614  B4D8               	btfsc	status,2,c
 14086  011616  D756               	goto	l1665
 14087  011618  0A0F               	xorlw	15	; case 8
 14088  01161A  B4D8               	btfsc	status,2,c
 14089  01161C  D74A               	goto	l1662
 14090  01161E  0A01               	xorlw	1	; case 9
 14091  011620  B4D8               	btfsc	status,2,c
 14092  011622  D74D               	goto	l1664
 14093  011624  0A03               	xorlw	3	; case 10
 14094  011626  B4D8               	btfsc	status,2,c
 14095  011628  D741               	goto	l1659
 14096  01162A  0A06               	xorlw	6	; case 12
 14097  01162C  B4D8               	btfsc	status,2,c
 14098  01162E  D744               	goto	l1663
 14099  011630  0A01               	xorlw	1	; case 13
 14100  011632  B4D8               	btfsc	status,2,c
 14101  011634  D73B               	goto	l1659
 14102  011636  0A2D               	xorlw	45	; case 32
 14103  011638  B4D8               	btfsc	status,2,c
 14104  01163A  D74A               	goto	l1667
 14105  01163C  0A03               	xorlw	3	; case 35
 14106  01163E  B4D8               	btfsc	status,2,c
 14107  011640  D744               	goto	l1666
 14108  011642  D746               	goto	l1667
 14109  011644                     __end_of_Console_PrintChar:
 14110                           	opt stack 0
 14111                           tosu	equ	0xFFF
 14112                           tosh	equ	0xFFE
 14113                           tosl	equ	0xFFD
 14114                           pclath	equ	0xFFA
 14115                           tblptru	equ	0xFF8
 14116                           tblptrh	equ	0xFF7
 14117                           tblptrl	equ	0xFF6
 14118                           tablat	equ	0xFF5
 14119                           prodh	equ	0xFF4
 14120                           prodl	equ	0xFF3
 14121                           intcon	equ	0xFF2
 14122                           indf0	equ	0xFEF
 14123                           postinc0	equ	0xFEE
 14124                           fsr0h	equ	0xFEA
 14125                           fsr0l	equ	0xFE9
 14126                           wreg	equ	0xFE8
 14127                           postdec1	equ	0xFE5
 14128                           fsr1h	equ	0xFE2
 14129                           fsr1l	equ	0xFE1
 14130                           indf2	equ	0xFDF
 14131                           postinc2	equ	0xFDE
 14132                           postdec2	equ	0xFDD
 14133                           plusw2	equ	0xFDB
 14134                           fsr2h	equ	0xFDA
 14135                           fsr2l	equ	0xFD9
 14136                           status	equ	0xFD8
 14137                           
 14138 ;; *************** function _Console_Tab *****************
 14139 ;; Defined at:
 14140 ;;		line 260 in file "Library/Console.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;		None
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;  c               1   15[BANK0 ] unsigned char 
 14145 ;;  i               1   14[BANK0 ] unsigned char 
 14146 ;;  t               1   13[BANK0 ] unsigned char 
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  1    wreg      void 
 14149 ;; Registers used:
 14150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14159 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;Total ram usage:        8 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:    9
 14163 ;; This function calls:
 14164 ;;		_Console_ClearCursor
 14165 ;;		_Console_IncrementCursor
 14166 ;;		___awdiv
 14167 ;; This function is called by:
 14168 ;;		_Console_PrintChar
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text64
 14173  012624                     __ptext64:
 14174                           	opt stack 0
 14175  012624                     _Console_Tab:
 14176                           	opt stack 17
 14177                           
 14178                           ;Console.c: 262: UINT8 i = 0;
 14179                           
 14180                           ;incstack = 0
 14181  012624  0E00               	movlw	0
 14182  012626  0100               	movlb	0	; () banked
 14183  012628  6FC2               	movwf	Console_Tab@i& (0+255),b
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 14187  01262A  0EFA               	movlw	250
 14188  01262C  0100               	movlb	0	; () banked
 14189  01262E  25F1               	addwf	_gCursor& (0+255),w,b
 14190  012630  0100               	movlb	0	; () banked
 14191  012632  6FB4               	movwf	___awdiv@dividend& (0+255),b
 14192  012634  0EFF               	movlw	255
 14193  012636  0100               	movlb	0	; () banked
 14194  012638  21F2               	addwfc	(_gCursor+1)& (0+255),w,b
 14195  01263A  0100               	movlb	0	; () banked
 14196  01263C  6FB5               	movwf	(___awdiv@dividend+1)& (0+255),b
 14197  01263E  0E00               	movlw	0
 14198  012640  0100               	movlb	0	; () banked
 14199  012642  6FB7               	movwf	(___awdiv@divisor+1)& (0+255),b
 14200  012644  0E06               	movlw	6
 14201  012646  6FB6               	movwf	___awdiv@divisor& (0+255),b
 14202  012648  ECD7  F093         	call	___awdiv	;wreg free
 14203  01264C  0100               	movlb	0	; () banked
 14204  01264E  51B4               	movf	?___awdiv& (0+255),w,b
 14205  012650  0100               	movlb	0	; () banked
 14206  012652  6FC3               	movwf	Console_Tab@c& (0+255),b
 14207                           
 14208                           ; BSR set to: 0
 14209                           ;Console.c: 264: UINT8 t = c/4;
 14210  012654  C0C3  F0B4         	movff	Console_Tab@c,___awdiv@dividend
 14211  012658  0100               	movlb	0	; () banked
 14212  01265A  6BB5               	clrf	(___awdiv@dividend+1)& (0+255),b
 14213  01265C  0E00               	movlw	0
 14214  01265E  0100               	movlb	0	; () banked
 14215  012660  6FB7               	movwf	(___awdiv@divisor+1)& (0+255),b
 14216  012662  0E04               	movlw	4
 14217  012664  6FB6               	movwf	___awdiv@divisor& (0+255),b
 14218  012666  ECD7  F093         	call	___awdiv	;wreg free
 14219  01266A  0100               	movlb	0	; () banked
 14220  01266C  51B4               	movf	?___awdiv& (0+255),w,b
 14221  01266E  0100               	movlb	0	; () banked
 14222  012670  6FC1               	movwf	Console_Tab@t& (0+255),b
 14223                           
 14224                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 14225  012672  0E00               	movlw	0
 14226  012674  0100               	movlb	0	; () banked
 14227  012676  6FC2               	movwf	Console_Tab@i& (0+255),b
 14228  012678  D006               	goto	l1631
 14229  01267A                     
 14230                           ; BSR set to: 0
 14231                           ;Console.c: 266: {
 14232                           ;Console.c: 267: Console_ClearCursor();
 14233                           
 14234                           ; BSR set to: 0
 14235  01267A  ECE2  F09D         	call	_Console_ClearCursor	;wreg free
 14236                           
 14237                           ;Console.c: 268: Console_IncrementCursor();
 14238  01267E  EC9C  F09A         	call	_Console_IncrementCursor	;wreg free
 14239  012682  0100               	movlb	0	; () banked
 14240  012684  2BC2               	incf	Console_Tab@i& (0+255),f,b
 14241  012686                     l1631:
 14242                           
 14243                           ; BSR set to: 0
 14244                           
 14245                           ; BSR set to: 0
 14246  012686  0100               	movlb	0	; () banked
 14247  012688  51C1               	movf	Console_Tab@t& (0+255),w,b
 14248  01268A  0D04               	mullw	4
 14249  01268C  1EF3               	comf	prodl,f,c
 14250  01268E  1EF4               	comf	prodh,f,c
 14251  012690  4AF3               	infsnz	prodl,f,c
 14252  012692  2AF4               	incf	prodh,f,c
 14253  012694  0100               	movlb	0	; () banked
 14254  012696  51C3               	movf	Console_Tab@c& (0+255),w,b
 14255  012698  0100               	movlb	0	; () banked
 14256  01269A  6FBC               	movwf	??_Console_Tab& (0+255),b
 14257  01269C  6BBD               	clrf	(??_Console_Tab+1)& (0+255),b
 14258  01269E  50F3               	movf	prodl,w,c
 14259  0126A0  0100               	movlb	0	; () banked
 14260  0126A2  27BC               	addwf	??_Console_Tab& (0+255),f,b
 14261  0126A4  50F4               	movf	prodh,w,c
 14262  0126A6  0100               	movlb	0	; () banked
 14263  0126A8  23BD               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 14264  0126AA  0100               	movlb	0	; () banked
 14265  0126AC  1FBC               	comf	??_Console_Tab& (0+255),f,b
 14266  0126AE  1FBD               	comf	(??_Console_Tab+1)& (0+255),f,b
 14267  0126B0  4BBC               	infsnz	??_Console_Tab& (0+255),f,b
 14268  0126B2  2BBD               	incf	(??_Console_Tab+1)& (0+255),f,b
 14269  0126B4  0E04               	movlw	4
 14270  0126B6  0100               	movlb	0	; () banked
 14271  0126B8  27BC               	addwf	??_Console_Tab& (0+255),f,b
 14272  0126BA  0E00               	movlw	0
 14273  0126BC  23BD               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 14274  0126BE  0100               	movlb	0	; () banked
 14275  0126C0  51C2               	movf	Console_Tab@i& (0+255),w,b
 14276  0126C2  0100               	movlb	0	; () banked
 14277  0126C4  6FBE               	movwf	(??_Console_Tab+2)& (0+255),b
 14278  0126C6  6BBF               	clrf	(??_Console_Tab+3)& (0+255),b
 14279  0126C8  0100               	movlb	0	; () banked
 14280  0126CA  51BC               	movf	??_Console_Tab& (0+255),w,b
 14281  0126CC  0100               	movlb	0	; () banked
 14282  0126CE  5DBE               	subwf	(??_Console_Tab+2)& (0+255),w,b
 14283  0126D0  0100               	movlb	0	; () banked
 14284  0126D2  51BF               	movf	(??_Console_Tab+3)& (0+255),w,b
 14285  0126D4  0A80               	xorlw	128
 14286  0126D6  0100               	movlb	0	; () banked
 14287  0126D8  6FC0               	movwf	(??_Console_Tab+4)& (0+255),b
 14288  0126DA  0100               	movlb	0	; () banked
 14289  0126DC  51BD               	movf	(??_Console_Tab+1)& (0+255),w,b
 14290  0126DE  0A80               	xorlw	128
 14291  0126E0  0100               	movlb	0	; () banked
 14292  0126E2  59C0               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 14293  0126E4  B0D8               	btfsc	status,0,c
 14294  0126E6  0012               	return	
 14295  0126E8  D7C8               	goto	l1632
 14296  0126EA                     __end_of_Console_Tab:
 14297                           	opt stack 0
 14298                           tosu	equ	0xFFF
 14299                           tosh	equ	0xFFE
 14300                           tosl	equ	0xFFD
 14301                           pclath	equ	0xFFA
 14302                           tblptru	equ	0xFF8
 14303                           tblptrh	equ	0xFF7
 14304                           tblptrl	equ	0xFF6
 14305                           tablat	equ	0xFF5
 14306                           prodh	equ	0xFF4
 14307                           prodl	equ	0xFF3
 14308                           intcon	equ	0xFF2
 14309                           indf0	equ	0xFEF
 14310                           postinc0	equ	0xFEE
 14311                           fsr0h	equ	0xFEA
 14312                           fsr0l	equ	0xFE9
 14313                           wreg	equ	0xFE8
 14314                           postdec1	equ	0xFE5
 14315                           fsr1h	equ	0xFE2
 14316                           fsr1l	equ	0xFE1
 14317                           indf2	equ	0xFDF
 14318                           postinc2	equ	0xFDE
 14319                           postdec2	equ	0xFDD
 14320                           plusw2	equ	0xFDB
 14321                           fsr2h	equ	0xFDA
 14322                           fsr2l	equ	0xFD9
 14323                           status	equ	0xFD8
 14324                           
 14325 ;; *************** function ___awdiv *****************
 14326 ;; Defined at:
 14327 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;  dividend        2    0[BANK0 ] int 
 14330 ;;  divisor         2    2[BANK0 ] int 
 14331 ;; Auto vars:     Size  Location     Type
 14332 ;;  quotient        2    6[BANK0 ] int 
 14333 ;;  sign            1    5[BANK0 ] unsigned char 
 14334 ;;  counter         1    4[BANK0 ] unsigned char 
 14335 ;; Return value:  Size  Location     Type
 14336 ;;                  2    0[BANK0 ] int 
 14337 ;; Registers used:
 14338 ;;		wreg, status,2, status,0
 14339 ;; Tracked objects:
 14340 ;;		On entry : 0/0
 14341 ;;		On exit  : 0/0
 14342 ;;		Unchanged: 0/0
 14343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14344 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14348 ;;Total ram usage:        8 bytes
 14349 ;; Hardware stack levels used:    1
 14350 ;; Hardware stack levels required when called:    7
 14351 ;; This function calls:
 14352 ;;		Nothing
 14353 ;; This function is called by:
 14354 ;;		_Console_Tab
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           	psect	text65
 14359  0127AE                     __ptext65:
 14360                           	opt stack 0
 14361  0127AE                     ___awdiv:
 14362                           	opt stack 18
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;incstack = 0
 14366  0127AE  0E00               	movlw	0
 14367  0127B0  0100               	movlb	0	; () banked
 14368  0127B2  6FB9               	movwf	___awdiv@sign& (0+255),b
 14369                           
 14370                           ; BSR set to: 0
 14371  0127B4  0100               	movlb	0	; () banked
 14372  0127B6  AFB7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 14373  0127B8  D008               	goto	l3211
 14374                           
 14375                           ; BSR set to: 0
 14376  0127BA  0100               	movlb	0	; () banked
 14377  0127BC  6DB6               	negf	___awdiv@divisor& (0+255),b
 14378  0127BE  1FB7               	comf	(___awdiv@divisor+1)& (0+255),f,b
 14379  0127C0  B0D8               	btfsc	status,0,c
 14380  0127C2  2BB7               	incf	(___awdiv@divisor+1)& (0+255),f,b
 14381                           
 14382                           ; BSR set to: 0
 14383  0127C4  0E01               	movlw	1
 14384  0127C6  0100               	movlb	0	; () banked
 14385  0127C8  6FB9               	movwf	___awdiv@sign& (0+255),b
 14386  0127CA                     l3211:
 14387                           
 14388                           ; BSR set to: 0
 14389                           
 14390                           ; BSR set to: 0
 14391  0127CA  0100               	movlb	0	; () banked
 14392  0127CC  AFB5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 14393  0127CE  D008               	goto	l3212
 14394                           
 14395                           ; BSR set to: 0
 14396  0127D0  0100               	movlb	0	; () banked
 14397  0127D2  6DB4               	negf	___awdiv@dividend& (0+255),b
 14398  0127D4  1FB5               	comf	(___awdiv@dividend+1)& (0+255),f,b
 14399  0127D6  B0D8               	btfsc	status,0,c
 14400  0127D8  2BB5               	incf	(___awdiv@dividend+1)& (0+255),f,b
 14401                           
 14402                           ; BSR set to: 0
 14403  0127DA  0E01               	movlw	1
 14404  0127DC  0100               	movlb	0	; () banked
 14405  0127DE  1BB9               	xorwf	___awdiv@sign& (0+255),f,b
 14406  0127E0                     l3212:
 14407                           
 14408                           ; BSR set to: 0
 14409                           
 14410                           ; BSR set to: 0
 14411  0127E0  0E00               	movlw	0
 14412  0127E2  0100               	movlb	0	; () banked
 14413  0127E4  6FBB               	movwf	(___awdiv@quotient+1)& (0+255),b
 14414  0127E6  0E00               	movlw	0
 14415  0127E8  6FBA               	movwf	___awdiv@quotient& (0+255),b
 14416                           
 14417                           ; BSR set to: 0
 14418  0127EA  0100               	movlb	0	; () banked
 14419  0127EC  51B6               	movf	___awdiv@divisor& (0+255),w,b
 14420  0127EE  0100               	movlb	0	; () banked
 14421  0127F0  11B7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 14422  0127F2  B4D8               	btfsc	status,2,c
 14423  0127F4  D02C               	goto	l3219
 14424                           
 14425                           ; BSR set to: 0
 14426  0127F6  0E01               	movlw	1
 14427  0127F8  0100               	movlb	0	; () banked
 14428  0127FA  6FB8               	movwf	___awdiv@counter& (0+255),b
 14429  0127FC  D006               	goto	l3214
 14430  0127FE                     
 14431                           ; BSR set to: 0
 14432                           
 14433                           ; BSR set to: 0
 14434  0127FE  0100               	movlb	0	; () banked
 14435  012800  90D8               	bcf	status,0,c
 14436  012802  37B6               	rlcf	___awdiv@divisor& (0+255),f,b
 14437  012804  37B7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 14438  012806  0100               	movlb	0	; () banked
 14439  012808  2BB8               	incf	___awdiv@counter& (0+255),f,b
 14440  01280A                     l3214:
 14441                           
 14442                           ; BSR set to: 0
 14443                           
 14444                           ; BSR set to: 0
 14445  01280A  0100               	movlb	0	; () banked
 14446  01280C  AFB7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 14447  01280E  D7F7               	goto	l3215
 14448  012810                     u11560:
 14449                           
 14450                           ; BSR set to: 0
 14451                           
 14452                           ; BSR set to: 0
 14453                           
 14454                           ; BSR set to: 0
 14455  012810  0100               	movlb	0	; () banked
 14456  012812  90D8               	bcf	status,0,c
 14457  012814  37BA               	rlcf	___awdiv@quotient& (0+255),f,b
 14458  012816  37BB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 14459                           
 14460                           ; BSR set to: 0
 14461  012818  0100               	movlb	0	; () banked
 14462  01281A  51B6               	movf	___awdiv@divisor& (0+255),w,b
 14463  01281C  0100               	movlb	0	; () banked
 14464  01281E  5DB4               	subwf	___awdiv@dividend& (0+255),w,b
 14465  012820  0100               	movlb	0	; () banked
 14466  012822  51B7               	movf	(___awdiv@divisor+1)& (0+255),w,b
 14467  012824  0100               	movlb	0	; () banked
 14468  012826  59B5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 14469  012828  A0D8               	btfss	status,0,c
 14470  01282A  D00A               	goto	l3218
 14471                           
 14472                           ; BSR set to: 0
 14473  01282C  0100               	movlb	0	; () banked
 14474  01282E  51B6               	movf	___awdiv@divisor& (0+255),w,b
 14475  012830  0100               	movlb	0	; () banked
 14476  012832  5FB4               	subwf	___awdiv@dividend& (0+255),f,b
 14477  012834  0100               	movlb	0	; () banked
 14478  012836  51B7               	movf	(___awdiv@divisor+1)& (0+255),w,b
 14479  012838  0100               	movlb	0	; () banked
 14480  01283A  5BB5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 14481                           
 14482                           ; BSR set to: 0
 14483  01283C  0100               	movlb	0	; () banked
 14484  01283E  81BA               	bsf	___awdiv@quotient& (0+255),0,b
 14485  012840                     l3218:
 14486                           
 14487                           ; BSR set to: 0
 14488                           
 14489                           ; BSR set to: 0
 14490  012840  0100               	movlb	0	; () banked
 14491  012842  90D8               	bcf	status,0,c
 14492  012844  33B7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 14493  012846  33B6               	rrcf	___awdiv@divisor& (0+255),f,b
 14494                           
 14495                           ; BSR set to: 0
 14496  012848  0100               	movlb	0	; () banked
 14497  01284A  2FB8               	decfsz	___awdiv@counter& (0+255),f,b
 14498  01284C  D7E1               	goto	u11560
 14499  01284E                     l3219:
 14500                           
 14501                           ; BSR set to: 0
 14502                           
 14503                           ; BSR set to: 0
 14504                           
 14505                           ; BSR set to: 0
 14506  01284E  0100               	movlb	0	; () banked
 14507  012850  51B9               	movf	___awdiv@sign& (0+255),w,b
 14508  012852  0100               	movlb	0	; () banked
 14509  012854  B4D8               	btfsc	status,2,c
 14510  012856  D005               	goto	l3220
 14511                           
 14512                           ; BSR set to: 0
 14513  012858  0100               	movlb	0	; () banked
 14514  01285A  6DBA               	negf	___awdiv@quotient& (0+255),b
 14515  01285C  1FBB               	comf	(___awdiv@quotient+1)& (0+255),f,b
 14516  01285E  B0D8               	btfsc	status,0,c
 14517  012860  2BBB               	incf	(___awdiv@quotient+1)& (0+255),f,b
 14518  012862                     l3220:
 14519                           
 14520                           ; BSR set to: 0
 14521                           
 14522                           ; BSR set to: 0
 14523  012862  C0BA  F0B4         	movff	___awdiv@quotient,?___awdiv
 14524  012866  C0BB  F0B5         	movff	___awdiv@quotient+1,?___awdiv+1
 14525  01286A  0012               	return	
 14526  01286C                     __end_of___awdiv:
 14527                           	opt stack 0
 14528                           tosu	equ	0xFFF
 14529                           tosh	equ	0xFFE
 14530                           tosl	equ	0xFFD
 14531                           pclath	equ	0xFFA
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           intcon	equ	0xFF2
 14539                           indf0	equ	0xFEF
 14540                           postinc0	equ	0xFEE
 14541                           fsr0h	equ	0xFEA
 14542                           fsr0l	equ	0xFE9
 14543                           wreg	equ	0xFE8
 14544                           postdec1	equ	0xFE5
 14545                           fsr1h	equ	0xFE2
 14546                           fsr1l	equ	0xFE1
 14547                           indf2	equ	0xFDF
 14548                           postinc2	equ	0xFDE
 14549                           postdec2	equ	0xFDD
 14550                           plusw2	equ	0xFDB
 14551                           fsr2h	equ	0xFDA
 14552                           fsr2l	equ	0xFD9
 14553                           status	equ	0xFD8
 14554                           
 14555 ;; *************** function _Console_IncrementCursor *****************
 14556 ;; Defined at:
 14557 ;;		line 243 in file "Library/Console.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;		None
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;		None
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      unsigned char 
 14564 ;; Registers used:
 14565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14575 ;;Total ram usage:        2 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    8
 14578 ;; This function calls:
 14579 ;;		_Console_FormFeed
 14580 ;;		_Console_NewLine
 14581 ;; This function is called by:
 14582 ;;		_Console_Tab
 14583 ;;		_Console_PrintChar
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           	psect	text66
 14588  013538                     __ptext66:
 14589                           	opt stack 0
 14590  013538                     _Console_IncrementCursor:
 14591                           	opt stack 17
 14592                           
 14593                           ;Console.c: 246: lBufferX += 1;
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;incstack = 0
 14597  013538  0100               	movlb	0	; () banked
 14598  01353A  2B9C               	incf	_lBufferX& (0+255),f,b
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;Console.c: 248: gCursor.x += 6;
 14602  01353C  0E06               	movlw	6
 14603  01353E  0100               	movlb	0	; () banked
 14604  013540  27F1               	addwf	_gCursor& (0+255),f,b
 14605  013542  0E00               	movlw	0
 14606  013544  23F2               	addwfc	(_gCursor+1)& (0+255),f,b
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 14610  013546  0E06               	movlw	6
 14611  013548  0100               	movlb	0	; () banked
 14612  01354A  25F1               	addwf	_gCursor& (0+255),w,b
 14613  01354C  0100               	movlb	0	; () banked
 14614  01354E  6FB8               	movwf	??_Console_IncrementCursor& (0+255),b
 14615  013550  0E00               	movlw	0
 14616  013552  0100               	movlb	0	; () banked
 14617  013554  21F2               	addwfc	(_gCursor+1)& (0+255),w,b
 14618  013556  0100               	movlb	0	; () banked
 14619  013558  6FB9               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 14620  01355A  0100               	movlb	0	; () banked
 14621  01355C  BFB9               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 14622  01355E  D009               	goto	l1626
 14623  013560  0100               	movlb	0	; () banked
 14624  013562  51B9               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 14625  013564  E104               	bnz	u11510
 14626  013566  0E80               	movlw	128
 14627  013568  0100               	movlb	0	; () banked
 14628  01356A  5DB8               	subwf	??_Console_IncrementCursor& (0+255),w,b
 14629  01356C  B0D8               	btfsc	status,0,c
 14630  01356E                     u11510:
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;Console.c: 250: Console_NewLine();
 14634  01356E  ECF0  F096         	call	_Console_NewLine	;wreg free
 14635  013572                     l1626:
 14636                           
 14637                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 14638  013572  0E08               	movlw	8
 14639  013574  0100               	movlb	0	; () banked
 14640  013576  25F3               	addwf	(_gCursor+2)& (0+255),w,b
 14641  013578  0100               	movlb	0	; () banked
 14642  01357A  6FB8               	movwf	??_Console_IncrementCursor& (0+255),b
 14643  01357C  0E00               	movlw	0
 14644  01357E  0100               	movlb	0	; () banked
 14645  013580  21F4               	addwfc	(_gCursor+3)& (0+255),w,b
 14646  013582  0100               	movlb	0	; () banked
 14647  013584  6FB9               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 14648  013586  0100               	movlb	0	; () banked
 14649  013588  BFB9               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 14650  01358A  D00C               	goto	l1627
 14651  01358C  0100               	movlb	0	; () banked
 14652  01358E  51B9               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 14653  013590  E105               	bnz	u11520
 14654  013592  0E80               	movlw	128
 14655  013594  0100               	movlb	0	; () banked
 14656  013596  5DB8               	subwf	??_Console_IncrementCursor& (0+255),w,b
 14657  013598  A0D8               	btfss	status,0,c
 14658  01359A  D004               	goto	l1627
 14659  01359C                     u11520:
 14660                           
 14661                           ; BSR set to: 0
 14662                           ;Console.c: 252: {
 14663                           ;Console.c: 253: Console_FormFeed();
 14664  01359C  EC2F  F098         	call	_Console_FormFeed	;wreg free
 14665                           
 14666                           ;Console.c: 254: return 1;
 14667  0135A0  0E01               	movlw	1
 14668  0135A2  0012               	return	
 14669  0135A4                     l1627:
 14670                           
 14671                           ;Console.c: 255: }
 14672                           ;Console.c: 257: return 0;
 14673  0135A4  0E00               	movlw	0
 14674  0135A6  0012               	return	
 14675  0135A8                     __end_of_Console_IncrementCursor:
 14676                           	opt stack 0
 14677                           tosu	equ	0xFFF
 14678                           tosh	equ	0xFFE
 14679                           tosl	equ	0xFFD
 14680                           pclath	equ	0xFFA
 14681                           tblptru	equ	0xFF8
 14682                           tblptrh	equ	0xFF7
 14683                           tblptrl	equ	0xFF6
 14684                           tablat	equ	0xFF5
 14685                           prodh	equ	0xFF4
 14686                           prodl	equ	0xFF3
 14687                           intcon	equ	0xFF2
 14688                           indf0	equ	0xFEF
 14689                           postinc0	equ	0xFEE
 14690                           fsr0h	equ	0xFEA
 14691                           fsr0l	equ	0xFE9
 14692                           wreg	equ	0xFE8
 14693                           postdec1	equ	0xFE5
 14694                           fsr1h	equ	0xFE2
 14695                           fsr1l	equ	0xFE1
 14696                           indf2	equ	0xFDF
 14697                           postinc2	equ	0xFDE
 14698                           postdec2	equ	0xFDD
 14699                           plusw2	equ	0xFDB
 14700                           fsr2h	equ	0xFDA
 14701                           fsr2l	equ	0xFD9
 14702                           status	equ	0xFD8
 14703                           
 14704 ;; *************** function _Console_NewLine *****************
 14705 ;; Defined at:
 14706 ;;		line 175 in file "Library/Console.c"
 14707 ;; Parameters:    Size  Location     Type
 14708 ;;		None
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;		None
 14711 ;; Return value:  Size  Location     Type
 14712 ;;                  1    wreg      void 
 14713 ;; Registers used:
 14714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;Total ram usage:        2 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:    7
 14727 ;; This function calls:
 14728 ;;		Nothing
 14729 ;; This function is called by:
 14730 ;;		_Console_IncrementCursor
 14731 ;;		_Console_PrintChar
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text67
 14736  012DE0                     __ptext67:
 14737                           	opt stack 0
 14738  012DE0                     _Console_NewLine:
 14739                           	opt stack 17
 14740                           
 14741                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 14742                           
 14743                           ;incstack = 0
 14744  012DE0  D03E               	goto	l1605
 14745  012DE2                     
 14746                           ;Console.c: 179: {
 14747                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 14748  012DE2  0100               	movlb	0	; () banked
 14749  012DE4  519B               	movf	_lBufferY& (0+255),w,b
 14750  012DE6  0D14               	mullw	20
 14751  012DE8  0E11               	movlw	low _lBuffer
 14752  012DEA  0100               	movlb	0	; () banked
 14753  012DEC  6FB4               	movwf	??_Console_NewLine& (0+255),b
 14754  012DEE  0E0C               	movlw	high _lBuffer
 14755  012DF0  0100               	movlb	0	; () banked
 14756  012DF2  6FB5               	movwf	(??_Console_NewLine+1)& (0+255),b
 14757  012DF4  50F3               	movf	prodl,w,c
 14758  012DF6  0100               	movlb	0	; () banked
 14759  012DF8  27B4               	addwf	??_Console_NewLine& (0+255),f,b
 14760  012DFA  50F4               	movf	prodh,w,c
 14761  012DFC  0100               	movlb	0	; () banked
 14762  012DFE  23B5               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 14763  012E00  0100               	movlb	0	; () banked
 14764  012E02  519C               	movf	_lBufferX& (0+255),w,b
 14765  012E04  0D01               	mullw	1
 14766  012E06  50F3               	movf	prodl,w,c
 14767  012E08  0100               	movlb	0	; () banked
 14768  012E0A  25B4               	addwf	??_Console_NewLine& (0+255),w,b
 14769  012E0C  6ED9               	movwf	fsr2l,c
 14770  012E0E  50F4               	movf	prodh,w,c
 14771  012E10  0100               	movlb	0	; () banked
 14772  012E12  21B5               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 14773  012E14  6EDA               	movwf	fsr2h,c
 14774  012E16  50DF               	movf	indf2,w,c
 14775  012E18  B4D8               	btfsc	status,2,c
 14776  012E1A  D01F               	goto	l1607
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 14780  012E1C  0E01               	movlw	1
 14781  012E1E  0100               	movlb	0	; () banked
 14782  012E20  6FFC               	movwf	_change& (0+255),b
 14783                           
 14784                           ; BSR set to: 0
 14785  012E22  0100               	movlb	0	; () banked
 14786  012E24  519B               	movf	_lBufferY& (0+255),w,b
 14787  012E26  0D14               	mullw	20
 14788  012E28  0E11               	movlw	low _lBuffer
 14789  012E2A  0100               	movlb	0	; () banked
 14790  012E2C  6FB4               	movwf	??_Console_NewLine& (0+255),b
 14791  012E2E  0E0C               	movlw	high _lBuffer
 14792  012E30  0100               	movlb	0	; () banked
 14793  012E32  6FB5               	movwf	(??_Console_NewLine+1)& (0+255),b
 14794  012E34  50F3               	movf	prodl,w,c
 14795  012E36  0100               	movlb	0	; () banked
 14796  012E38  27B4               	addwf	??_Console_NewLine& (0+255),f,b
 14797  012E3A  50F4               	movf	prodh,w,c
 14798  012E3C  0100               	movlb	0	; () banked
 14799  012E3E  23B5               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 14800  012E40  0100               	movlb	0	; () banked
 14801  012E42  519C               	movf	_lBufferX& (0+255),w,b
 14802  012E44  0D01               	mullw	1
 14803  012E46  50F3               	movf	prodl,w,c
 14804  012E48  0100               	movlb	0	; () banked
 14805  012E4A  25B4               	addwf	??_Console_NewLine& (0+255),w,b
 14806  012E4C  6ED9               	movwf	fsr2l,c
 14807  012E4E  50F4               	movf	prodh,w,c
 14808  012E50  0100               	movlb	0	; () banked
 14809  012E52  21B5               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 14810  012E54  6EDA               	movwf	fsr2h,c
 14811  012E56  0E80               	movlw	128
 14812  012E58  6EDF               	movwf	indf2,c
 14813  012E5A                     l1607:
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;Console.c: 182: lBufferX ++;
 14817                           
 14818                           ; BSR set to: 0
 14819  012E5A  0100               	movlb	0	; () banked
 14820  012E5C  2B9C               	incf	_lBufferX& (0+255),f,b
 14821  012E5E                     l1605:
 14822                           
 14823                           ; BSR set to: 0
 14824  012E5E  0E13               	movlw	19
 14825  012E60  0100               	movlb	0	; () banked
 14826  012E62  659C               	cpfsgt	_lBufferX& (0+255),b
 14827  012E64  D7BE               	goto	l1606
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;Console.c: 183: }
 14831                           ;Console.c: 185: lBufferX = 0;
 14832                           
 14833                           ; BSR set to: 0
 14834  012E66  0E00               	movlw	0
 14835  012E68  0100               	movlb	0	; () banked
 14836  012E6A  6F9C               	movwf	_lBufferX& (0+255),b
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;Console.c: 186: lBufferY ++;
 14840  012E6C  0100               	movlb	0	; () banked
 14841  012E6E  2B9B               	incf	_lBufferY& (0+255),f,b
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;Console.c: 188: gCursor.y += 8;
 14845  012E70  0E08               	movlw	8
 14846  012E72  0100               	movlb	0	; () banked
 14847  012E74  27F3               	addwf	(_gCursor+2)& (0+255),f,b
 14848  012E76  0E00               	movlw	0
 14849  012E78  23F4               	addwfc	(_gCursor+3)& (0+255),f,b
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;Console.c: 189: gCursor.x = 6;
 14853  012E7A  0E00               	movlw	0
 14854  012E7C  0100               	movlb	0	; () banked
 14855  012E7E  6FF2               	movwf	(_gCursor+1)& (0+255),b
 14856  012E80  0E06               	movlw	6
 14857  012E82  6FF1               	movwf	_gCursor& (0+255),b
 14858                           
 14859                           ; BSR set to: 0
 14860  012E84  0012               	return		;funcret
 14861  012E86                     __end_of_Console_NewLine:
 14862                           	opt stack 0
 14863                           tosu	equ	0xFFF
 14864                           tosh	equ	0xFFE
 14865                           tosl	equ	0xFFD
 14866                           pclath	equ	0xFFA
 14867                           tblptru	equ	0xFF8
 14868                           tblptrh	equ	0xFF7
 14869                           tblptrl	equ	0xFF6
 14870                           tablat	equ	0xFF5
 14871                           prodh	equ	0xFF4
 14872                           prodl	equ	0xFF3
 14873                           intcon	equ	0xFF2
 14874                           indf0	equ	0xFEF
 14875                           postinc0	equ	0xFEE
 14876                           fsr0h	equ	0xFEA
 14877                           fsr0l	equ	0xFE9
 14878                           wreg	equ	0xFE8
 14879                           postdec1	equ	0xFE5
 14880                           fsr1h	equ	0xFE2
 14881                           fsr1l	equ	0xFE1
 14882                           indf2	equ	0xFDF
 14883                           postinc2	equ	0xFDE
 14884                           postdec2	equ	0xFDD
 14885                           plusw2	equ	0xFDB
 14886                           fsr2h	equ	0xFDA
 14887                           fsr2l	equ	0xFD9
 14888                           status	equ	0xFD8
 14889                           
 14890 ;; *************** function _Console_FormFeed *****************
 14891 ;; Defined at:
 14892 ;;		line 192 in file "Library/Console.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;		None
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;  y               1    3[BANK0 ] unsigned char 
 14897 ;;  x               1    2[BANK0 ] unsigned char 
 14898 ;; Return value:  Size  Location     Type
 14899 ;;                  1    wreg      void 
 14900 ;; Registers used:
 14901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14902 ;; Tracked objects:
 14903 ;;		On entry : 0/0
 14904 ;;		On exit  : 0/0
 14905 ;;		Unchanged: 0/0
 14906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;Total ram usage:        4 bytes
 14912 ;; Hardware stack levels used:    1
 14913 ;; Hardware stack levels required when called:    7
 14914 ;; This function calls:
 14915 ;;		Nothing
 14916 ;; This function is called by:
 14917 ;;		_Console_IncrementCursor
 14918 ;;		_Console_PrintChar
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           	psect	text68
 14923  01305E                     __ptext68:
 14924                           	opt stack 0
 14925  01305E                     _Console_FormFeed:
 14926                           	opt stack 17
 14927                           
 14928                           ;Console.c: 195: lBufferX = 0;
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;incstack = 0
 14932  01305E  0E00               	movlw	0
 14933  013060  0100               	movlb	0	; () banked
 14934  013062  6F9C               	movwf	_lBufferX& (0+255),b
 14935                           
 14936                           ;Console.c: 196: lBufferY = 0;
 14937  013064  0E00               	movlw	0
 14938  013066  0100               	movlb	0	; () banked
 14939  013068  6F9B               	movwf	_lBufferY& (0+255),b
 14940                           
 14941                           ;Console.c: 197: UINT8 x, y;
 14942                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 14943  01306A  0E00               	movlw	0
 14944  01306C  0100               	movlb	0	; () banked
 14945  01306E  6FB7               	movwf	Console_FormFeed@y& (0+255),b
 14946  013070                     l14225:
 14947                           
 14948                           ; BSR set to: 0
 14949  013070  0E0E               	movlw	14
 14950  013072  0100               	movlb	0	; () banked
 14951  013074  65B7               	cpfsgt	Console_FormFeed@y& (0+255),b
 14952  013076  D001               	goto	l1612
 14953  013078  D02D               	goto	u11240
 14954  01307A                     l1612:
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 14958                           
 14959                           ; BSR set to: 0
 14960  01307A  0E00               	movlw	0
 14961  01307C  0100               	movlb	0	; () banked
 14962  01307E  6FB6               	movwf	Console_FormFeed@x& (0+255),b
 14963  013080                     l14231:
 14964                           
 14965                           ; BSR set to: 0
 14966  013080  0E13               	movlw	19
 14967  013082  0100               	movlb	0	; () banked
 14968  013084  65B6               	cpfsgt	Console_FormFeed@x& (0+255),b
 14969  013086  D001               	goto	l1614
 14970  013088  D022               	goto	u11230
 14971  01308A                     l1614:
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 14975                           
 14976                           ; BSR set to: 0
 14977  01308A  0E01               	movlw	1
 14978  01308C  0100               	movlb	0	; () banked
 14979  01308E  6FFC               	movwf	_change& (0+255),b
 14980                           
 14981                           ; BSR set to: 0
 14982  013090  0100               	movlb	0	; () banked
 14983  013092  51B7               	movf	Console_FormFeed@y& (0+255),w,b
 14984  013094  0D14               	mullw	20
 14985  013096  0E11               	movlw	low _lBuffer
 14986  013098  0100               	movlb	0	; () banked
 14987  01309A  6FB4               	movwf	??_Console_FormFeed& (0+255),b
 14988  01309C  0E0C               	movlw	high _lBuffer
 14989  01309E  0100               	movlb	0	; () banked
 14990  0130A0  6FB5               	movwf	(??_Console_FormFeed+1)& (0+255),b
 14991  0130A2  50F3               	movf	prodl,w,c
 14992  0130A4  0100               	movlb	0	; () banked
 14993  0130A6  27B4               	addwf	??_Console_FormFeed& (0+255),f,b
 14994  0130A8  50F4               	movf	prodh,w,c
 14995  0130AA  0100               	movlb	0	; () banked
 14996  0130AC  23B5               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 14997  0130AE  0100               	movlb	0	; () banked
 14998  0130B0  51B6               	movf	Console_FormFeed@x& (0+255),w,b
 14999  0130B2  0D01               	mullw	1
 15000  0130B4  50F3               	movf	prodl,w,c
 15001  0130B6  0100               	movlb	0	; () banked
 15002  0130B8  25B4               	addwf	??_Console_FormFeed& (0+255),w,b
 15003  0130BA  6ED9               	movwf	fsr2l,c
 15004  0130BC  50F4               	movf	prodh,w,c
 15005  0130BE  0100               	movlb	0	; () banked
 15006  0130C0  21B5               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 15007  0130C2  6EDA               	movwf	fsr2h,c
 15008  0130C4  0E80               	movlw	128
 15009  0130C6  6EDF               	movwf	indf2,c
 15010                           
 15011                           ; BSR set to: 0
 15012  0130C8  0100               	movlb	0	; () banked
 15013  0130CA  2BB6               	incf	Console_FormFeed@x& (0+255),f,b
 15014  0130CC  D7D9               	goto	l14231
 15015  0130CE                     u11230:
 15016                           
 15017                           ; BSR set to: 0
 15018                           
 15019                           ; BSR set to: 0
 15020  0130CE  0100               	movlb	0	; () banked
 15021  0130D0  2BB7               	incf	Console_FormFeed@y& (0+255),f,b
 15022  0130D2  D7CE               	goto	l14225
 15023  0130D4                     u11240:
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;Console.c: 204: clearall = 1;
 15027                           
 15028                           ; BSR set to: 0
 15029  0130D4  0E01               	movlw	1
 15030  0130D6  0100               	movlb	0	; () banked
 15031  0130D8  6F9D               	movwf	_clearall& (0+255),b
 15032                           
 15033                           ;Console.c: 205: gCursor.x = 6;
 15034  0130DA  0E00               	movlw	0
 15035  0130DC  0100               	movlb	0	; () banked
 15036  0130DE  6FF2               	movwf	(_gCursor+1)& (0+255),b
 15037  0130E0  0E06               	movlw	6
 15038  0130E2  6FF1               	movwf	_gCursor& (0+255),b
 15039                           
 15040                           ;Console.c: 206: gCursor.y = 6;
 15041  0130E4  0E00               	movlw	0
 15042  0130E6  0100               	movlb	0	; () banked
 15043  0130E8  6FF4               	movwf	(_gCursor+3)& (0+255),b
 15044  0130EA  0E06               	movlw	6
 15045  0130EC  6FF3               	movwf	(_gCursor+2)& (0+255),b
 15046                           
 15047                           ; BSR set to: 0
 15048  0130EE  0012               	return		;funcret
 15049  0130F0                     __end_of_Console_FormFeed:
 15050                           	opt stack 0
 15051                           tosu	equ	0xFFF
 15052                           tosh	equ	0xFFE
 15053                           tosl	equ	0xFFD
 15054                           pclath	equ	0xFFA
 15055                           tblptru	equ	0xFF8
 15056                           tblptrh	equ	0xFF7
 15057                           tblptrl	equ	0xFF6
 15058                           tablat	equ	0xFF5
 15059                           prodh	equ	0xFF4
 15060                           prodl	equ	0xFF3
 15061                           intcon	equ	0xFF2
 15062                           indf0	equ	0xFEF
 15063                           postinc0	equ	0xFEE
 15064                           fsr0h	equ	0xFEA
 15065                           fsr0l	equ	0xFE9
 15066                           wreg	equ	0xFE8
 15067                           postdec1	equ	0xFE5
 15068                           fsr1h	equ	0xFE2
 15069                           fsr1l	equ	0xFE1
 15070                           indf2	equ	0xFDF
 15071                           postinc2	equ	0xFDE
 15072                           postdec2	equ	0xFDD
 15073                           plusw2	equ	0xFDB
 15074                           fsr2h	equ	0xFDA
 15075                           fsr2l	equ	0xFD9
 15076                           status	equ	0xFD8
 15077                           
 15078 ;; *************** function _Console_ResetCursor *****************
 15079 ;; Defined at:
 15080 ;;		line 297 in file "Library/Console.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  1    wreg      void 
 15087 ;; Registers used:
 15088 ;;		wreg, status,2
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15098 ;;Total ram usage:        0 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:    7
 15101 ;; This function calls:
 15102 ;;		Nothing
 15103 ;; This function is called by:
 15104 ;;		_Console_PrintChar
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108                           	psect	text69
 15109  01401E                     __ptext69:
 15110                           	opt stack 0
 15111  01401E                     _Console_ResetCursor:
 15112                           	opt stack 19
 15113                           
 15114                           ;Console.c: 299: gCursor.x = 6;
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;incstack = 0
 15118  01401E  0E00               	movlw	0
 15119  014020  0100               	movlb	0	; () banked
 15120  014022  6FF2               	movwf	(_gCursor+1)& (0+255),b
 15121  014024  0E06               	movlw	6
 15122  014026  6FF1               	movwf	_gCursor& (0+255),b
 15123                           
 15124                           ;Console.c: 300: gCursor.y = 6;
 15125  014028  0E00               	movlw	0
 15126  01402A  0100               	movlb	0	; () banked
 15127  01402C  6FF4               	movwf	(_gCursor+3)& (0+255),b
 15128  01402E  0E06               	movlw	6
 15129  014030  6FF3               	movwf	(_gCursor+2)& (0+255),b
 15130                           
 15131                           ;Console.c: 303: lBufferX = 0;
 15132  014032  0E00               	movlw	0
 15133  014034  0100               	movlb	0	; () banked
 15134  014036  6F9C               	movwf	_lBufferX& (0+255),b
 15135                           
 15136                           ;Console.c: 304: lBufferY = 0;
 15137  014038  0E00               	movlw	0
 15138  01403A  0100               	movlb	0	; () banked
 15139  01403C  6F9B               	movwf	_lBufferY& (0+255),b
 15140                           
 15141                           ; BSR set to: 0
 15142  01403E  0012               	return		;funcret
 15143  014040                     __end_of_Console_ResetCursor:
 15144                           	opt stack 0
 15145                           tosu	equ	0xFFF
 15146                           tosh	equ	0xFFE
 15147                           tosl	equ	0xFFD
 15148                           pclath	equ	0xFFA
 15149                           tblptru	equ	0xFF8
 15150                           tblptrh	equ	0xFF7
 15151                           tblptrl	equ	0xFF6
 15152                           tablat	equ	0xFF5
 15153                           prodh	equ	0xFF4
 15154                           prodl	equ	0xFF3
 15155                           intcon	equ	0xFF2
 15156                           indf0	equ	0xFEF
 15157                           postinc0	equ	0xFEE
 15158                           fsr0h	equ	0xFEA
 15159                           fsr0l	equ	0xFE9
 15160                           wreg	equ	0xFE8
 15161                           postdec1	equ	0xFE5
 15162                           fsr1h	equ	0xFE2
 15163                           fsr1l	equ	0xFE1
 15164                           indf2	equ	0xFDF
 15165                           postinc2	equ	0xFDE
 15166                           postdec2	equ	0xFDD
 15167                           plusw2	equ	0xFDB
 15168                           fsr2h	equ	0xFDA
 15169                           fsr2l	equ	0xFD9
 15170                           status	equ	0xFD8
 15171                           
 15172 ;; *************** function _Console_Backspace *****************
 15173 ;; Defined at:
 15174 ;;		line 209 in file "Library/Console.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;		None
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;		None
 15179 ;; Return value:  Size  Location     Type
 15180 ;;                  1    wreg      void 
 15181 ;; Registers used:
 15182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15183 ;; Tracked objects:
 15184 ;;		On entry : 0/0
 15185 ;;		On exit  : 0/0
 15186 ;;		Unchanged: 0/0
 15187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15192 ;;Total ram usage:        0 bytes
 15193 ;; Hardware stack levels used:    1
 15194 ;; Hardware stack levels required when called:    8
 15195 ;; This function calls:
 15196 ;;		_Console_ClearCursor
 15197 ;; This function is called by:
 15198 ;;		_Console_PrintChar
 15199 ;; This function uses a non-reentrant model
 15200 ;;
 15201                           
 15202                           	psect	text70
 15203  0136E8                     __ptext70:
 15204                           	opt stack 0
 15205  0136E8                     _Console_Backspace:
 15206                           	opt stack 18
 15207                           
 15208                           ;Console.c: 211: if (lBufferX > 0)
 15209                           
 15210                           ; BSR set to: 0
 15211                           ;incstack = 0
 15212  0136E8  0100               	movlb	0	; () banked
 15213  0136EA  519C               	movf	_lBufferX& (0+255),w,b
 15214  0136EC  B4D8               	btfsc	status,2,c
 15215  0136EE  D008               	goto	l1619
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;Console.c: 212: {
 15219                           ;Console.c: 213: gCursor.x -= 6;
 15220  0136F0  0100               	movlb	0	; () banked
 15221  0136F2  0EFA               	movlw	250
 15222  0136F4  27F1               	addwf	_gCursor& (0+255),f,b
 15223  0136F6  0EFF               	movlw	255
 15224  0136F8  23F2               	addwfc	(_gCursor+1)& (0+255),f,b
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;Console.c: 216: lBufferX --;
 15228  0136FA  0100               	movlb	0	; () banked
 15229  0136FC  079C               	decf	_lBufferX& (0+255),f,b
 15230                           
 15231                           ;Console.c: 218: }
 15232  0136FE  D024               	goto	l1622
 15233  013700                     l1619:
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;Console.c: 219: else if (lBufferY > 0)
 15237                           
 15238                           ; BSR set to: 0
 15239  013700  0100               	movlb	0	; () banked
 15240  013702  519B               	movf	_lBufferY& (0+255),w,b
 15241  013704  B4D8               	btfsc	status,2,c
 15242  013706  D010               	goto	l1621
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;Console.c: 220: {
 15246                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 15247  013708  0E00               	movlw	0
 15248  01370A  0100               	movlb	0	; () banked
 15249  01370C  6FF2               	movwf	(_gCursor+1)& (0+255),b
 15250  01370E  0E72               	movlw	114
 15251  013710  6FF1               	movwf	_gCursor& (0+255),b
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;Console.c: 222: gCursor.y -= 8;
 15255  013712  0100               	movlb	0	; () banked
 15256  013714  0EF8               	movlw	248
 15257  013716  27F3               	addwf	(_gCursor+2)& (0+255),f,b
 15258  013718  0EFF               	movlw	255
 15259  01371A  23F4               	addwfc	(_gCursor+3)& (0+255),f,b
 15260                           
 15261                           ; BSR set to: 0
 15262                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 15263  01371C  0E13               	movlw	19
 15264  01371E  0100               	movlb	0	; () banked
 15265  013720  6F9C               	movwf	_lBufferX& (0+255),b
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;Console.c: 226: lBufferY --;
 15269  013722  0100               	movlb	0	; () banked
 15270  013724  079B               	decf	_lBufferY& (0+255),f,b
 15271                           
 15272                           ;Console.c: 228: }
 15273  013726  D010               	goto	l1622
 15274  013728                     l1621:
 15275                           
 15276                           ; BSR set to: 0
 15277                           ;Console.c: 229: else
 15278                           ;Console.c: 230: {
 15279                           ;Console.c: 231: gCursor.x = 6;
 15280                           
 15281                           ; BSR set to: 0
 15282  013728  0E00               	movlw	0
 15283  01372A  0100               	movlb	0	; () banked
 15284  01372C  6FF2               	movwf	(_gCursor+1)& (0+255),b
 15285  01372E  0E06               	movlw	6
 15286  013730  6FF1               	movwf	_gCursor& (0+255),b
 15287                           
 15288                           ;Console.c: 232: gCursor.y = 6;
 15289  013732  0E00               	movlw	0
 15290  013734  0100               	movlb	0	; () banked
 15291  013736  6FF4               	movwf	(_gCursor+3)& (0+255),b
 15292  013738  0E06               	movlw	6
 15293  01373A  6FF3               	movwf	(_gCursor+2)& (0+255),b
 15294                           
 15295                           ;Console.c: 235: lBufferX = 0;
 15296  01373C  0E00               	movlw	0
 15297  01373E  0100               	movlb	0	; () banked
 15298  013740  6F9C               	movwf	_lBufferX& (0+255),b
 15299                           
 15300                           ;Console.c: 236: lBufferY = 0;
 15301  013742  0E00               	movlw	0
 15302  013744  0100               	movlb	0	; () banked
 15303  013746  6F9B               	movwf	_lBufferY& (0+255),b
 15304  013748                     l1622:
 15305                           
 15306                           ; BSR set to: 0
 15307                           ;Console.c: 238: }
 15308                           ;Console.c: 240: Console_ClearCursor();
 15309                           
 15310                           ; BSR set to: 0
 15311                           
 15312                           ; BSR set to: 0
 15313  013748  ECE2  F09D         	call	_Console_ClearCursor	;wreg free
 15314  01374C  0012               	return		;funcret
 15315  01374E                     __end_of_Console_Backspace:
 15316                           	opt stack 0
 15317                           tosu	equ	0xFFF
 15318                           tosh	equ	0xFFE
 15319                           tosl	equ	0xFFD
 15320                           pclath	equ	0xFFA
 15321                           tblptru	equ	0xFF8
 15322                           tblptrh	equ	0xFF7
 15323                           tblptrl	equ	0xFF6
 15324                           tablat	equ	0xFF5
 15325                           prodh	equ	0xFF4
 15326                           prodl	equ	0xFF3
 15327                           intcon	equ	0xFF2
 15328                           indf0	equ	0xFEF
 15329                           postinc0	equ	0xFEE
 15330                           fsr0h	equ	0xFEA
 15331                           fsr0l	equ	0xFE9
 15332                           wreg	equ	0xFE8
 15333                           postdec1	equ	0xFE5
 15334                           fsr1h	equ	0xFE2
 15335                           fsr1l	equ	0xFE1
 15336                           indf2	equ	0xFDF
 15337                           postinc2	equ	0xFDE
 15338                           postdec2	equ	0xFDD
 15339                           plusw2	equ	0xFDB
 15340                           fsr2h	equ	0xFDA
 15341                           fsr2l	equ	0xFD9
 15342                           status	equ	0xFD8
 15343                           
 15344 ;; *************** function _Console_ClearCursor *****************
 15345 ;; Defined at:
 15346 ;;		line 308 in file "Library/Console.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  1    wreg      void 
 15353 ;; Registers used:
 15354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15364 ;;Total ram usage:        2 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    7
 15367 ;; This function calls:
 15368 ;;		Nothing
 15369 ;; This function is called by:
 15370 ;;		_Console_Backspace
 15371 ;;		_Console_Tab
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           	psect	text71
 15376  013BC4                     __ptext71:
 15377                           	opt stack 0
 15378  013BC4                     _Console_ClearCursor:
 15379                           	opt stack 18
 15380                           
 15381                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 15382                           
 15383                           ;incstack = 0
 15384  013BC4  0E01               	movlw	1
 15385  013BC6  0100               	movlb	0	; () banked
 15386  013BC8  6FFC               	movwf	_change& (0+255),b
 15387                           
 15388                           ; BSR set to: 0
 15389  013BCA  0100               	movlb	0	; () banked
 15390  013BCC  519B               	movf	_lBufferY& (0+255),w,b
 15391  013BCE  0D14               	mullw	20
 15392  013BD0  0E11               	movlw	low _lBuffer
 15393  013BD2  0100               	movlb	0	; () banked
 15394  013BD4  6FB4               	movwf	??_Console_ClearCursor& (0+255),b
 15395  013BD6  0E0C               	movlw	high _lBuffer
 15396  013BD8  0100               	movlb	0	; () banked
 15397  013BDA  6FB5               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 15398  013BDC  50F3               	movf	prodl,w,c
 15399  013BDE  0100               	movlb	0	; () banked
 15400  013BE0  27B4               	addwf	??_Console_ClearCursor& (0+255),f,b
 15401  013BE2  50F4               	movf	prodh,w,c
 15402  013BE4  0100               	movlb	0	; () banked
 15403  013BE6  23B5               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 15404  013BE8  0100               	movlb	0	; () banked
 15405  013BEA  519C               	movf	_lBufferX& (0+255),w,b
 15406  013BEC  0D01               	mullw	1
 15407  013BEE  50F3               	movf	prodl,w,c
 15408  013BF0  0100               	movlb	0	; () banked
 15409  013BF2  25B4               	addwf	??_Console_ClearCursor& (0+255),w,b
 15410  013BF4  6ED9               	movwf	fsr2l,c
 15411  013BF6  50F4               	movf	prodh,w,c
 15412  013BF8  0100               	movlb	0	; () banked
 15413  013BFA  21B5               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 15414  013BFC  6EDA               	movwf	fsr2h,c
 15415  013BFE  0E80               	movlw	128
 15416  013C00  6EDF               	movwf	indf2,c
 15417                           
 15418                           ; BSR set to: 0
 15419  013C02  0012               	return		;funcret
 15420  013C04                     __end_of_Console_ClearCursor:
 15421                           	opt stack 0
 15422                           tosu	equ	0xFFF
 15423                           tosh	equ	0xFFE
 15424                           tosl	equ	0xFFD
 15425                           pclath	equ	0xFFA
 15426                           tblptru	equ	0xFF8
 15427                           tblptrh	equ	0xFF7
 15428                           tblptrl	equ	0xFF6
 15429                           tablat	equ	0xFF5
 15430                           prodh	equ	0xFF4
 15431                           prodl	equ	0xFF3
 15432                           intcon	equ	0xFF2
 15433                           indf0	equ	0xFEF
 15434                           postinc0	equ	0xFEE
 15435                           fsr0h	equ	0xFEA
 15436                           fsr0l	equ	0xFE9
 15437                           wreg	equ	0xFE8
 15438                           postdec1	equ	0xFE5
 15439                           fsr1h	equ	0xFE2
 15440                           fsr1l	equ	0xFE1
 15441                           indf2	equ	0xFDF
 15442                           postinc2	equ	0xFDE
 15443                           postdec2	equ	0xFDD
 15444                           plusw2	equ	0xFDB
 15445                           fsr2h	equ	0xFDA
 15446                           fsr2l	equ	0xFD9
 15447                           status	equ	0xFD8
 15448                           
 15449 ;; *************** function ___lwmod *****************
 15450 ;; Defined at:
 15451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  dividend        2    7[BANK0 ] unsigned int 
 15454 ;;  divisor         2    9[BANK0 ] unsigned int 
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;  counter         1   11[BANK0 ] unsigned char 
 15457 ;; Return value:  Size  Location     Type
 15458 ;;                  2    7[BANK0 ] unsigned int 
 15459 ;; Registers used:
 15460 ;;		wreg, status,2, status,0
 15461 ;; Tracked objects:
 15462 ;;		On entry : 0/0
 15463 ;;		On exit  : 0/0
 15464 ;;		Unchanged: 0/0
 15465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15466 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15470 ;;Total ram usage:        5 bytes
 15471 ;; Hardware stack levels used:    1
 15472 ;; Hardware stack levels required when called:    7
 15473 ;; This function calls:
 15474 ;;		Nothing
 15475 ;; This function is called by:
 15476 ;;		_printf
 15477 ;;		_itos
 15478 ;; This function uses a non-reentrant model
 15479 ;;
 15480                           
 15481                           	psect	text72
 15482  013814                     __ptext72:
 15483                           	opt stack 0
 15484  013814                     ___lwmod:
 15485                           	opt stack 21
 15486                           
 15487                           ; BSR set to: 0
 15488                           ;incstack = 0
 15489  013814  0100               	movlb	0	; () banked
 15490  013816  51BD               	movf	___lwmod@divisor& (0+255),w,b
 15491  013818  0100               	movlb	0	; () banked
 15492  01381A  11BE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15493  01381C  B4D8               	btfsc	status,2,c
 15494  01381E  D026               	goto	l3462
 15495                           
 15496                           ; BSR set to: 0
 15497  013820  0E01               	movlw	1
 15498  013822  0100               	movlb	0	; () banked
 15499  013824  6FBF               	movwf	___lwmod@counter& (0+255),b
 15500  013826  D006               	goto	l3457
 15501  013828                     
 15502                           ; BSR set to: 0
 15503                           
 15504                           ; BSR set to: 0
 15505  013828  0100               	movlb	0	; () banked
 15506  01382A  90D8               	bcf	status,0,c
 15507  01382C  37BD               	rlcf	___lwmod@divisor& (0+255),f,b
 15508  01382E  37BE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15509  013830  0100               	movlb	0	; () banked
 15510  013832  2BBF               	incf	___lwmod@counter& (0+255),f,b
 15511  013834                     l3457:
 15512                           
 15513                           ; BSR set to: 0
 15514                           
 15515                           ; BSR set to: 0
 15516  013834  0100               	movlb	0	; () banked
 15517  013836  AFBE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15518  013838  D7F7               	goto	l3458
 15519  01383A                     u12630:
 15520                           
 15521                           ; BSR set to: 0
 15522                           
 15523                           ; BSR set to: 0
 15524                           
 15525                           ; BSR set to: 0
 15526  01383A  0100               	movlb	0	; () banked
 15527  01383C  51BD               	movf	___lwmod@divisor& (0+255),w,b
 15528  01383E  0100               	movlb	0	; () banked
 15529  013840  5DBB               	subwf	___lwmod@dividend& (0+255),w,b
 15530  013842  0100               	movlb	0	; () banked
 15531  013844  51BE               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15532  013846  0100               	movlb	0	; () banked
 15533  013848  59BC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15534  01384A  A0D8               	btfss	status,0,c
 15535  01384C  D008               	goto	l3461
 15536                           
 15537                           ; BSR set to: 0
 15538  01384E  0100               	movlb	0	; () banked
 15539  013850  51BD               	movf	___lwmod@divisor& (0+255),w,b
 15540  013852  0100               	movlb	0	; () banked
 15541  013854  5FBB               	subwf	___lwmod@dividend& (0+255),f,b
 15542  013856  0100               	movlb	0	; () banked
 15543  013858  51BE               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15544  01385A  0100               	movlb	0	; () banked
 15545  01385C  5BBC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15546  01385E                     l3461:
 15547                           
 15548                           ; BSR set to: 0
 15549                           
 15550                           ; BSR set to: 0
 15551  01385E  0100               	movlb	0	; () banked
 15552  013860  90D8               	bcf	status,0,c
 15553  013862  33BE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15554  013864  33BD               	rrcf	___lwmod@divisor& (0+255),f,b
 15555                           
 15556                           ; BSR set to: 0
 15557  013866  0100               	movlb	0	; () banked
 15558  013868  2FBF               	decfsz	___lwmod@counter& (0+255),f,b
 15559  01386A  D7E7               	goto	u12630
 15560  01386C                     l3462:
 15561                           
 15562                           ; BSR set to: 0
 15563                           
 15564                           ; BSR set to: 0
 15565  01386C  C0BB  F0BB         	movff	___lwmod@dividend,?___lwmod
 15566  013870  C0BC  F0BC         	movff	___lwmod@dividend+1,?___lwmod+1
 15567                           
 15568                           ; BSR set to: 0
 15569  013874  0012               	return		;funcret
 15570  013876                     __end_of___lwmod:
 15571                           	opt stack 0
 15572                           tosu	equ	0xFFF
 15573                           tosh	equ	0xFFE
 15574                           tosl	equ	0xFFD
 15575                           pclath	equ	0xFFA
 15576                           tblptru	equ	0xFF8
 15577                           tblptrh	equ	0xFF7
 15578                           tblptrl	equ	0xFF6
 15579                           tablat	equ	0xFF5
 15580                           prodh	equ	0xFF4
 15581                           prodl	equ	0xFF3
 15582                           intcon	equ	0xFF2
 15583                           indf0	equ	0xFEF
 15584                           postinc0	equ	0xFEE
 15585                           fsr0h	equ	0xFEA
 15586                           fsr0l	equ	0xFE9
 15587                           wreg	equ	0xFE8
 15588                           postdec1	equ	0xFE5
 15589                           fsr1h	equ	0xFE2
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           plusw2	equ	0xFDB
 15595                           fsr2h	equ	0xFDA
 15596                           fsr2l	equ	0xFD9
 15597                           status	equ	0xFD8
 15598                           
 15599 ;; *************** function ___lwdiv *****************
 15600 ;; Defined at:
 15601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  dividend        2    0[BANK0 ] unsigned int 
 15604 ;;  divisor         2    2[BANK0 ] unsigned int 
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;  quotient        2    5[BANK0 ] unsigned int 
 15607 ;;  counter         1    4[BANK0 ] unsigned char 
 15608 ;; Return value:  Size  Location     Type
 15609 ;;                  2    0[BANK0 ] unsigned int 
 15610 ;; Registers used:
 15611 ;;		wreg, status,2, status,0
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;Total ram usage:        7 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    7
 15624 ;; This function calls:
 15625 ;;		Nothing
 15626 ;; This function is called by:
 15627 ;;		_printf
 15628 ;;		_itos
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           	psect	text73
 15633  01327E                     __ptext73:
 15634                           	opt stack 0
 15635  01327E                     ___lwdiv:
 15636                           	opt stack 21
 15637                           
 15638                           ; BSR set to: 0
 15639                           ;incstack = 0
 15640  01327E  0E00               	movlw	0
 15641  013280  0100               	movlb	0	; () banked
 15642  013282  6FBA               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15643  013284  0E00               	movlw	0
 15644  013286  6FB9               	movwf	___lwdiv@quotient& (0+255),b
 15645                           
 15646                           ; BSR set to: 0
 15647  013288  0100               	movlb	0	; () banked
 15648  01328A  51B6               	movf	___lwdiv@divisor& (0+255),w,b
 15649  01328C  0100               	movlb	0	; () banked
 15650  01328E  11B7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15651  013290  B4D8               	btfsc	status,2,c
 15652  013292  D02C               	goto	l3452
 15653                           
 15654                           ; BSR set to: 0
 15655  013294  0E01               	movlw	1
 15656  013296  0100               	movlb	0	; () banked
 15657  013298  6FB8               	movwf	___lwdiv@counter& (0+255),b
 15658  01329A  D006               	goto	l3447
 15659  01329C                     
 15660                           ; BSR set to: 0
 15661                           
 15662                           ; BSR set to: 0
 15663  01329C  0100               	movlb	0	; () banked
 15664  01329E  90D8               	bcf	status,0,c
 15665  0132A0  37B6               	rlcf	___lwdiv@divisor& (0+255),f,b
 15666  0132A2  37B7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15667  0132A4  0100               	movlb	0	; () banked
 15668  0132A6  2BB8               	incf	___lwdiv@counter& (0+255),f,b
 15669  0132A8                     l3447:
 15670                           
 15671                           ; BSR set to: 0
 15672                           
 15673                           ; BSR set to: 0
 15674  0132A8  0100               	movlb	0	; () banked
 15675  0132AA  AFB7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15676  0132AC  D7F7               	goto	l3448
 15677  0132AE                     u12600:
 15678                           
 15679                           ; BSR set to: 0
 15680                           
 15681                           ; BSR set to: 0
 15682                           
 15683                           ; BSR set to: 0
 15684  0132AE  0100               	movlb	0	; () banked
 15685  0132B0  90D8               	bcf	status,0,c
 15686  0132B2  37B9               	rlcf	___lwdiv@quotient& (0+255),f,b
 15687  0132B4  37BA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15688                           
 15689                           ; BSR set to: 0
 15690  0132B6  0100               	movlb	0	; () banked
 15691  0132B8  51B6               	movf	___lwdiv@divisor& (0+255),w,b
 15692  0132BA  0100               	movlb	0	; () banked
 15693  0132BC  5DB4               	subwf	___lwdiv@dividend& (0+255),w,b
 15694  0132BE  0100               	movlb	0	; () banked
 15695  0132C0  51B7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15696  0132C2  0100               	movlb	0	; () banked
 15697  0132C4  59B5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15698  0132C6  A0D8               	btfss	status,0,c
 15699  0132C8  D00A               	goto	l3451
 15700                           
 15701                           ; BSR set to: 0
 15702  0132CA  0100               	movlb	0	; () banked
 15703  0132CC  51B6               	movf	___lwdiv@divisor& (0+255),w,b
 15704  0132CE  0100               	movlb	0	; () banked
 15705  0132D0  5FB4               	subwf	___lwdiv@dividend& (0+255),f,b
 15706  0132D2  0100               	movlb	0	; () banked
 15707  0132D4  51B7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15708  0132D6  0100               	movlb	0	; () banked
 15709  0132D8  5BB5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15710                           
 15711                           ; BSR set to: 0
 15712  0132DA  0100               	movlb	0	; () banked
 15713  0132DC  81B9               	bsf	___lwdiv@quotient& (0+255),0,b
 15714  0132DE                     l3451:
 15715                           
 15716                           ; BSR set to: 0
 15717                           
 15718                           ; BSR set to: 0
 15719  0132DE  0100               	movlb	0	; () banked
 15720  0132E0  90D8               	bcf	status,0,c
 15721  0132E2  33B7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15722  0132E4  33B6               	rrcf	___lwdiv@divisor& (0+255),f,b
 15723                           
 15724                           ; BSR set to: 0
 15725  0132E6  0100               	movlb	0	; () banked
 15726  0132E8  2FB8               	decfsz	___lwdiv@counter& (0+255),f,b
 15727  0132EA  D7E1               	goto	u12600
 15728  0132EC                     l3452:
 15729                           
 15730                           ; BSR set to: 0
 15731                           
 15732                           ; BSR set to: 0
 15733  0132EC  C0B9  F0B4         	movff	___lwdiv@quotient,?___lwdiv
 15734  0132F0  C0BA  F0B5         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15735                           
 15736                           ; BSR set to: 0
 15737  0132F4  0012               	return		;funcret
 15738  0132F6                     __end_of___lwdiv:
 15739                           	opt stack 0
 15740                           tosu	equ	0xFFF
 15741                           tosh	equ	0xFFE
 15742                           tosl	equ	0xFFD
 15743                           pclath	equ	0xFFA
 15744                           tblptru	equ	0xFF8
 15745                           tblptrh	equ	0xFF7
 15746                           tblptrl	equ	0xFF6
 15747                           tablat	equ	0xFF5
 15748                           prodh	equ	0xFF4
 15749                           prodl	equ	0xFF3
 15750                           intcon	equ	0xFF2
 15751                           indf0	equ	0xFEF
 15752                           postinc0	equ	0xFEE
 15753                           fsr0h	equ	0xFEA
 15754                           fsr0l	equ	0xFE9
 15755                           wreg	equ	0xFE8
 15756                           postdec1	equ	0xFE5
 15757                           fsr1h	equ	0xFE2
 15758                           fsr1l	equ	0xFE1
 15759                           indf2	equ	0xFDF
 15760                           postinc2	equ	0xFDE
 15761                           postdec2	equ	0xFDD
 15762                           plusw2	equ	0xFDB
 15763                           fsr2h	equ	0xFDA
 15764                           fsr2l	equ	0xFD9
 15765                           status	equ	0xFD8
 15766                           
 15767 ;; *************** function _MXK_Dequeue *****************
 15768 ;; Defined at:
 15769 ;;		line 153 in file "Library/MXK.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;		None
 15772 ;; Auto vars:     Size  Location     Type
 15773 ;;		None
 15774 ;; Return value:  Size  Location     Type
 15775 ;;                  1    wreg      void 
 15776 ;; Registers used:
 15777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15778 ;; Tracked objects:
 15779 ;;		On entry : 0/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15787 ;;Total ram usage:        0 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:   12
 15790 ;; This function calls:
 15791 ;;		Absolute function
 15792 ;;		_Motor_Step
 15793 ;; This function is called by:
 15794 ;;		_FunctInitLCD
 15795 ;;		_FunctInitHMI
 15796 ;;		_FunctMotor
 15797 ;;		_FunctHMI
 15798 ;;		_FunctInitIMU
 15799 ;; This function uses a non-reentrant model
 15800 ;;
 15801                           
 15802                           	psect	text74
 15803  013C44                     __ptext74:
 15804                           	opt stack 0
 15805  013C44                     _MXK_Dequeue:
 15806                           	opt stack 17
 15807                           
 15808                           ;MXK.c: 155: if (lQueue)
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;incstack = 0
 15812  013C44  0100               	movlb	0	; () banked
 15813  013C46  5175               	movf	_lQueue& (0+255),w,b	;volatile
 15814  013C48  0100               	movlb	0	; () banked
 15815  013C4A  1176               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15816  013C4C  0100               	movlb	0	; () banked
 15817  013C4E  1177               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15818  013C50  B4D8               	btfsc	status,2,c
 15819  013C52  D00D               	goto	u15159
 15820                           
 15821                           ; BSR set to: 0
 15822                           ;MXK.c: 156: lQueue();
 15823  013C54  D801               	call	u15158
 15824  013C56  D00B               	goto	u15159
 15825  013C58                     u15158:
 15826  013C58  0005               	push	
 15827  013C5A  6EFA               	movwf	pclath,c
 15828  013C5C  0100               	movlb	0	; () banked
 15829  013C5E  5175               	movf	_lQueue& (0+255),w,b	;volatile
 15830  013C60  6EFD               	movwf	tosl,c
 15831  013C62  5176               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 15832  013C64  6EFE               	movwf	tosh,c
 15833  013C66  5177               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 15834  013C68  6EFF               	movwf	tosu,c
 15835  013C6A  50FA               	movf	pclath,w,c
 15836  013C6C  0012               	return		;indir
 15837  013C6E                     u15159:
 15838                           
 15839                           ;MXK.c: 157: lQueue = 0;
 15840  013C6E  0E00               	movlw	0
 15841  013C70  0100               	movlb	0	; () banked
 15842  013C72  6F75               	movwf	_lQueue& (0+255),b	;volatile
 15843  013C74  0E00               	movlw	0
 15844  013C76  0100               	movlb	0	; () banked
 15845  013C78  6F76               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15846  013C7A  0E00               	movlw	0
 15847  013C7C  0100               	movlb	0	; () banked
 15848  013C7E  6F77               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15849                           
 15850                           ; BSR set to: 0
 15851  013C80  0012               	return		;funcret
 15852  013C82                     __end_of_MXK_Dequeue:
 15853                           	opt stack 0
 15854                           tosu	equ	0xFFF
 15855                           tosh	equ	0xFFE
 15856                           tosl	equ	0xFFD
 15857                           pclath	equ	0xFFA
 15858                           tblptru	equ	0xFF8
 15859                           tblptrh	equ	0xFF7
 15860                           tblptrl	equ	0xFF6
 15861                           tablat	equ	0xFF5
 15862                           prodh	equ	0xFF4
 15863                           prodl	equ	0xFF3
 15864                           intcon	equ	0xFF2
 15865                           indf0	equ	0xFEF
 15866                           postinc0	equ	0xFEE
 15867                           fsr0h	equ	0xFEA
 15868                           fsr0l	equ	0xFE9
 15869                           wreg	equ	0xFE8
 15870                           postdec1	equ	0xFE5
 15871                           fsr1h	equ	0xFE2
 15872                           fsr1l	equ	0xFE1
 15873                           indf2	equ	0xFDF
 15874                           postinc2	equ	0xFDE
 15875                           postdec2	equ	0xFDD
 15876                           plusw2	equ	0xFDB
 15877                           fsr2h	equ	0xFDA
 15878                           fsr2l	equ	0xFD9
 15879                           status	equ	0xFD8
 15880                           
 15881 ;; *************** function _Motor_Step *****************
 15882 ;; Defined at:
 15883 ;;		line 75 in file "Library/Motor.c"
 15884 ;; Parameters:    Size  Location     Type
 15885 ;;		None
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;		None
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  1    wreg      void 
 15890 ;; Registers used:
 15891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15901 ;;Total ram usage:        2 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:   11
 15904 ;; This function calls:
 15905 ;;		_MXK_Queue
 15906 ;;		_MXK_Release
 15907 ;;		_MXK_SwitchTo
 15908 ;;		_Port_SetPin
 15909 ;;		_Timer0_Restart
 15910 ;;		_Timer0_Stop
 15911 ;; This function is called by:
 15912 ;;		_Motor_Init
 15913 ;;		_MXK_Dequeue
 15914 ;;		_Timer0_ISR
 15915 ;; This function uses a non-reentrant model
 15916 ;;
 15917                           
 15918                           	psect	text75
 15919  011EF8                     __ptext75:
 15920                           	opt stack 0
 15921  011EF8                     _Motor_Step:
 15922                           	opt stack 0
 15923                           
 15924                           ; BSR set to: 0
 15925                           ;Skip over the trampoline to the duplicate function for level 2
 15926  011EF8  B251               	btfsc	btemp,1,c
 15927  011EFA  EF0F  F090         	goto	i2_Motor_Step
 15928  011EFE                     _Motor_Step$intlevel0:
 15929                           	opt stack 17
 15930                           
 15931                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 15932                           
 15933                           ;incstack = 0
 15934  011EFE  0100               	movlb	0	; () banked
 15935  011F00  EE20 F004          	lfsr	2,4
 15936  011F04  5181               	movf	_lMotor& (0+255),w,b
 15937  011F06  26D9               	addwf	fsr2l,f,c
 15938  011F08  5182               	movf	(_lMotor+1)& (0+255),w,b
 15939  011F0A  22DA               	addwfc	fsr2h,f,c
 15940  011F0C  50DF               	movf	indf2,w,c
 15941  011F0E  ECC1  F09D         	call	_MXK_SwitchTo
 15942  011F12  0900               	iorlw	0
 15943  011F14  B4D8               	btfsc	status,2,c
 15944  011F16  D07A               	goto	l2327
 15945                           
 15946                           ;Motor.c: 78: {
 15947                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 15948  011F18  C081  FFD9         	movff	_lMotor,fsr2l
 15949  011F1C  C082  FFDA         	movff	_lMotor+1,fsr2h
 15950  011F20  50DE               	movf	postinc2,w,c
 15951  011F22  10DE               	iorwf	postinc2,w,c
 15952  011F24  B4D8               	btfsc	status,2,c
 15953  011F26  D06D               	goto	l2328
 15954                           
 15955                           ;Motor.c: 80: {
 15956                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 15957  011F28  C081  FFD9         	movff	_lMotor,fsr2l
 15958  011F2C  C082  FFDA         	movff	_lMotor+1,fsr2h
 15959  011F30  0E01               	movlw	1
 15960  011F32  BEDB               	btfsc	plusw2,7,c
 15961  011F34  D026               	goto	l2329
 15962  011F36  0E01               	movlw	1
 15963  011F38  50DB               	movf	plusw2,w,c
 15964  011F3A  E103               	bnz	u12480
 15965  011F3C  04DE               	decf	postinc2,w,c
 15966  011F3E  A0D8               	btfss	status,0,c
 15967  011F40  D020               	goto	l2329
 15968  011F42                     u12480:
 15969                           
 15970                           ;Motor.c: 83: {
 15971                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 15972  011F42  C081  FFD9         	movff	_lMotor,fsr2l
 15973  011F46  C082  FFDA         	movff	_lMotor+1,fsr2h
 15974  011F4A  28DE               	incf	postinc2,w,c
 15975  011F4C  E104               	bnz	u12490
 15976  011F4E  0E7F               	movlw	127
 15977  011F50  18DE               	xorwf	postinc2,w,c
 15978  011F52  B4D8               	btfsc	status,2,c
 15979  011F54  D007               	goto	l2330
 15980  011F56                     u12490:
 15981                           
 15982                           ;Motor.c: 85: lMotor->mDelta --;
 15983  011F56  C081  FFD9         	movff	_lMotor,fsr2l
 15984  011F5A  C082  FFDA         	movff	_lMotor+1,fsr2h
 15985  011F5E  06DE               	decf	postinc2,f,c
 15986  011F60  0E00               	movlw	0
 15987  011F62  5ADD               	subwfb	postdec2,f,c
 15988  011F64                     l2330:
 15989                           
 15990                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 15991  011F64  0E99               	movlw	low _PortE
 15992  011F66  0100               	movlb	0	; () banked
 15993  011F68  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
 15994  011F6A  0E01               	movlw	high _PortE
 15995  011F6C  0100               	movlb	0	; () banked
 15996  011F6E  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15997  011F70  0E00               	movlw	0
 15998  011F72  0100               	movlb	0	; () banked
 15999  011F74  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
 16000  011F76  0E01               	movlw	1
 16001  011F78  0100               	movlb	0	; () banked
 16002  011F7A  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
 16003  011F7C  EC75  F093         	call	_Port_SetPin	;wreg free
 16004                           
 16005                           ;Motor.c: 88: }
 16006  011F80  D01F               	goto	l2331
 16007  011F82                     l2329:
 16008                           
 16009                           ;Motor.c: 89: else
 16010                           ;Motor.c: 90: {
 16011                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16012  011F82  C081  FFD9         	movff	_lMotor,fsr2l
 16013  011F86  C082  FFDA         	movff	_lMotor+1,fsr2h
 16014  011F8A  04DE               	decf	postinc2,w,c
 16015  011F8C  E104               	bnz	u12500
 16016  011F8E  0E80               	movlw	128
 16017  011F90  18DE               	xorwf	postinc2,w,c
 16018  011F92  B4D8               	btfsc	status,2,c
 16019  011F94  D007               	goto	l2332
 16020  011F96                     u12500:
 16021                           
 16022                           ;Motor.c: 92: lMotor->mDelta ++;
 16023  011F96  C081  FFD9         	movff	_lMotor,fsr2l
 16024  011F9A  C082  FFDA         	movff	_lMotor+1,fsr2h
 16025  011F9E  2ADE               	incf	postinc2,f,c
 16026  011FA0  0E00               	movlw	0
 16027  011FA2  22DD               	addwfc	postdec2,f,c
 16028  011FA4                     l2332:
 16029                           
 16030                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16031  011FA4  0E99               	movlw	low _PortE
 16032  011FA6  0100               	movlb	0	; () banked
 16033  011FA8  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
 16034  011FAA  0E01               	movlw	high _PortE
 16035  011FAC  0100               	movlb	0	; () banked
 16036  011FAE  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16037  011FB0  0E00               	movlw	0
 16038  011FB2  0100               	movlb	0	; () banked
 16039  011FB4  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
 16040  011FB6  0E00               	movlw	0
 16041  011FB8  0100               	movlb	0	; () banked
 16042  011FBA  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
 16043  011FBC  EC75  F093         	call	_Port_SetPin	;wreg free
 16044  011FC0                     l2331:
 16045                           
 16046                           ;Motor.c: 95: }
 16047                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16048  011FC0  0E99               	movlw	low _PortE
 16049  011FC2  0100               	movlb	0	; () banked
 16050  011FC4  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
 16051  011FC6  0E01               	movlw	high _PortE
 16052  011FC8  0100               	movlb	0	; () banked
 16053  011FCA  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16054  011FCC  0E01               	movlw	1
 16055  011FCE  0100               	movlb	0	; () banked
 16056  011FD0  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
 16057  011FD2  0E01               	movlw	1
 16058  011FD4  0100               	movlb	0	; () banked
 16059  011FD6  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
 16060  011FD8  EC75  F093         	call	_Port_SetPin	;wreg free
 16061                           
 16062                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16063  011FDC  0E99               	movlw	low _PortE
 16064  011FDE  0100               	movlb	0	; () banked
 16065  011FE0  6FC3               	movwf	Port_SetPin@pInput& (0+255),b
 16066  011FE2  0E01               	movlw	high _PortE
 16067  011FE4  0100               	movlb	0	; () banked
 16068  011FE6  6FC4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16069  011FE8  0E01               	movlw	1
 16070  011FEA  0100               	movlb	0	; () banked
 16071  011FEC  6FC5               	movwf	Port_SetPin@pPin& (0+255),b
 16072  011FEE  0E00               	movlw	0
 16073  011FF0  0100               	movlb	0	; () banked
 16074  011FF2  6FC6               	movwf	Port_SetPin@pValue& (0+255),b
 16075  011FF4  EC75  F093         	call	_Port_SetPin	;wreg free
 16076                           
 16077                           ;Motor.c: 101: MXK_Release();
 16078  011FF8  EC9A  F0A0         	call	_MXK_Release	;wreg free
 16079                           
 16080                           ;Motor.c: 102: Timer0_Restart();
 16081  011FFC  ECEE  F0A0         	call	_Timer0_Restart	;wreg free
 16082                           
 16083                           ;Motor.c: 103: return;
 16084  012000  0012               	return	
 16085  012002                     l2328:
 16086                           
 16087                           ;Motor.c: 104: }
 16088                           ;Motor.c: 105: MXK_Release();
 16089  012002  EC9A  F0A0         	call	_MXK_Release	;wreg free
 16090                           
 16091                           ;Motor.c: 106: Timer0_Stop();
 16092  012006  EC0D  F0A1         	call	_Timer0_Stop	;wreg free
 16093                           
 16094                           ;Motor.c: 107: return;
 16095  01200A  0012               	return	
 16096  01200C                     l2327:
 16097                           
 16098                           ;Motor.c: 108: }
 16099                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16100  01200C  C078  F0B4         	movff	_lStepFunction,MXK_Queue@pCallback
 16101  012010  C079  F0B5         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16102  012014  C07A  F0B6         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16103  012018  ECD4  F0A0         	call	_MXK_Queue	;wreg free
 16104  01201C  0012               	return		;funcret
 16105  01201E                     __end_of_Motor_Step:
 16106                           	opt stack 0
 16107                           tosu	equ	0xFFF
 16108                           tosh	equ	0xFFE
 16109                           tosl	equ	0xFFD
 16110                           pclath	equ	0xFFA
 16111                           tblptru	equ	0xFF8
 16112                           tblptrh	equ	0xFF7
 16113                           tblptrl	equ	0xFF6
 16114                           tablat	equ	0xFF5
 16115                           prodh	equ	0xFF4
 16116                           prodl	equ	0xFF3
 16117                           intcon	equ	0xFF2
 16118                           indf0	equ	0xFEF
 16119                           postinc0	equ	0xFEE
 16120                           fsr0h	equ	0xFEA
 16121                           fsr0l	equ	0xFE9
 16122                           wreg	equ	0xFE8
 16123                           postdec1	equ	0xFE5
 16124                           fsr1h	equ	0xFE2
 16125                           fsr1l	equ	0xFE1
 16126                           indf2	equ	0xFDF
 16127                           postinc2	equ	0xFDE
 16128                           postdec2	equ	0xFDD
 16129                           plusw2	equ	0xFDB
 16130                           fsr2h	equ	0xFDA
 16131                           fsr2l	equ	0xFD9
 16132                           status	equ	0xFD8
 16133                           
 16134 ;; *************** function _Timer0_Stop *****************
 16135 ;; Defined at:
 16136 ;;		line 89 in file "Library/Timer0.c"
 16137 ;; Parameters:    Size  Location     Type
 16138 ;;		None
 16139 ;; Auto vars:     Size  Location     Type
 16140 ;;		None
 16141 ;; Return value:  Size  Location     Type
 16142 ;;                  1    wreg      void 
 16143 ;; Registers used:
 16144 ;;		None
 16145 ;; Tracked objects:
 16146 ;;		On entry : 0/0
 16147 ;;		On exit  : 0/0
 16148 ;;		Unchanged: 0/0
 16149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16154 ;;Total ram usage:        0 bytes
 16155 ;; Hardware stack levels used:    1
 16156 ;; Hardware stack levels required when called:    7
 16157 ;; This function calls:
 16158 ;;		Nothing
 16159 ;; This function is called by:
 16160 ;;		_Motor_Step
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           	psect	text76
 16165  01421A                     __ptext76:
 16166                           	opt stack 0
 16167  01421A                     _Timer0_Stop:
 16168                           	opt stack 20
 16169                           
 16170                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16171                           
 16172                           ;incstack = 0
 16173  01421A  9AF2               	bcf	intcon,5,c	;volatile
 16174                           
 16175                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16176  01421C  94F2               	bcf	intcon,2,c	;volatile
 16177  01421E  0012               	return		;funcret
 16178  014220                     __end_of_Timer0_Stop:
 16179                           	opt stack 0
 16180                           tosu	equ	0xFFF
 16181                           tosh	equ	0xFFE
 16182                           tosl	equ	0xFFD
 16183                           pclath	equ	0xFFA
 16184                           tblptru	equ	0xFF8
 16185                           tblptrh	equ	0xFF7
 16186                           tblptrl	equ	0xFF6
 16187                           tablat	equ	0xFF5
 16188                           prodh	equ	0xFF4
 16189                           prodl	equ	0xFF3
 16190                           intcon	equ	0xFF2
 16191                           indf0	equ	0xFEF
 16192                           postinc0	equ	0xFEE
 16193                           fsr0h	equ	0xFEA
 16194                           fsr0l	equ	0xFE9
 16195                           wreg	equ	0xFE8
 16196                           postdec1	equ	0xFE5
 16197                           fsr1h	equ	0xFE2
 16198                           fsr1l	equ	0xFE1
 16199                           indf2	equ	0xFDF
 16200                           postinc2	equ	0xFDE
 16201                           postdec2	equ	0xFDD
 16202                           plusw2	equ	0xFDB
 16203                           fsr2h	equ	0xFDA
 16204                           fsr2l	equ	0xFD9
 16205                           status	equ	0xFD8
 16206                           
 16207 ;; *************** function _Timer0_Restart *****************
 16208 ;; Defined at:
 16209 ;;		line 83 in file "Library/Timer0.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;		None
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;		None
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  1    wreg      void 
 16216 ;; Registers used:
 16217 ;;		None
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16227 ;;Total ram usage:        0 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    7
 16230 ;; This function calls:
 16231 ;;		Nothing
 16232 ;; This function is called by:
 16233 ;;		_Motor_Step
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           	psect	text77
 16238  0141DC                     __ptext77:
 16239                           	opt stack 0
 16240  0141DC                     _Timer0_Restart:
 16241                           	opt stack 20
 16242                           
 16243                           ;Timer0.c: 85: TMR0 = COUNTER;
 16244                           
 16245                           ;incstack = 0
 16246  0141DC  C07F  FFD6         	movff	_COUNTER,4054	;volatile
 16247  0141E0  C080  FFD7         	movff	_COUNTER+1,4055	;volatile
 16248                           
 16249                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16250  0141E4  8AF2               	bsf	intcon,5,c	;volatile
 16251  0141E6  0012               	return		;funcret
 16252  0141E8                     __end_of_Timer0_Restart:
 16253                           	opt stack 0
 16254                           tosu	equ	0xFFF
 16255                           tosh	equ	0xFFE
 16256                           tosl	equ	0xFFD
 16257                           pclath	equ	0xFFA
 16258                           tblptru	equ	0xFF8
 16259                           tblptrh	equ	0xFF7
 16260                           tblptrl	equ	0xFF6
 16261                           tablat	equ	0xFF5
 16262                           prodh	equ	0xFF4
 16263                           prodl	equ	0xFF3
 16264                           intcon	equ	0xFF2
 16265                           indf0	equ	0xFEF
 16266                           postinc0	equ	0xFEE
 16267                           fsr0h	equ	0xFEA
 16268                           fsr0l	equ	0xFE9
 16269                           wreg	equ	0xFE8
 16270                           postdec1	equ	0xFE5
 16271                           fsr1h	equ	0xFE2
 16272                           fsr1l	equ	0xFE1
 16273                           indf2	equ	0xFDF
 16274                           postinc2	equ	0xFDE
 16275                           postdec2	equ	0xFDD
 16276                           plusw2	equ	0xFDB
 16277                           fsr2h	equ	0xFDA
 16278                           fsr2l	equ	0xFD9
 16279                           status	equ	0xFD8
 16280                           
 16281 ;; *************** function _Port_SetPin *****************
 16282 ;; Defined at:
 16283 ;;		line 247 in file "Library/Port.c"
 16284 ;; Parameters:    Size  Location     Type
 16285 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16286 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 16287 ;;  pPin            1   17[BANK0 ] enum E6750
 16288 ;;  pValue          1   18[BANK0 ] unsigned char 
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;  Type            1   19[BANK0 ] enum E6795
 16291 ;; Return value:  Size  Location     Type
 16292 ;;                  1    wreg      void 
 16293 ;; Registers used:
 16294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16303 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16304 ;;Total ram usage:        5 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:   10
 16307 ;; This function calls:
 16308 ;;		_Byte_SetBit
 16309 ;;		_Word_GetPair
 16310 ;; This function is called by:
 16311 ;;		_Reset_Low
 16312 ;;		_Reset_High
 16313 ;;		_LED_Set
 16314 ;;		_Port_TogglePin
 16315 ;;		_Motor_Init
 16316 ;;		_Motor_Step
 16317 ;;		_MXK_Init
 16318 ;; This function uses a non-reentrant model
 16319 ;;
 16320                           
 16321                           	psect	text78
 16322  0126EA                     __ptext78:
 16323                           	opt stack 0
 16324  0126EA                     _Port_SetPin:
 16325                           	opt stack 19
 16326                           
 16327                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 16328                           
 16329                           ;incstack = 0
 16330  0126EA  0E08               	movlw	8
 16331  0126EC  0100               	movlb	0	; () banked
 16332  0126EE  25C3               	addwf	Port_SetPin@pInput& (0+255),w,b
 16333  0126F0  0100               	movlb	0	; () banked
 16334  0126F2  6FC0               	movwf	Word_GetPair@pInput& (0+255),b
 16335  0126F4  0E00               	movlw	0
 16336  0126F6  0100               	movlb	0	; () banked
 16337  0126F8  21C4               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 16338  0126FA  0100               	movlb	0	; () banked
 16339  0126FC  6FC1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16340  0126FE  C0C5  F0C2         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 16341  012702  EC41  F09E         	call	_Word_GetPair	;wreg free
 16342  012706  0100               	movlb	0	; () banked
 16343  012708  6FC7               	movwf	Port_SetPin@Type& (0+255),b
 16344                           
 16345                           ;Port.c: 250: switch (Type)
 16346  01270A  D042               	goto	l979
 16347  01270C                     
 16348                           ; BSR set to: 0
 16349                           ;Port.c: 256: pValue &= 1;
 16350                           
 16351                           ; BSR set to: 0
 16352  01270C  0E01               	movlw	1
 16353  01270E  0100               	movlb	0	; () banked
 16354  012710  17C6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16358  012712  0100               	movlb	0	; () banked
 16359  012714  EE20 F002          	lfsr	2,2
 16360  012718  51C3               	movf	Port_SetPin@pInput& (0+255),w,b
 16361  01271A  26D9               	addwf	fsr2l,f,c
 16362  01271C  51C4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16363  01271E  22DA               	addwfc	fsr2h,f,c
 16364  012720  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 16365  012724  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 16366  012728  C0C5  F0B6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16367  01272C  C0C6  F0B7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16368  012730  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 16369                           
 16370                           ;Port.c: 258: break;
 16371  012734  0012               	return	
 16372  012736                     
 16373                           ;Port.c: 261: pValue &= 1;
 16374  012736  0E01               	movlw	1
 16375  012738  0100               	movlb	0	; () banked
 16376  01273A  17C6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16377                           
 16378                           ;Port.c: 262: pValue ^= 1;
 16379  01273C  0E01               	movlw	1
 16380  01273E  0100               	movlb	0	; () banked
 16381  012740  1BC6               	xorwf	Port_SetPin@pValue& (0+255),f,b
 16382                           
 16383                           ; BSR set to: 0
 16384                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16385  012742  0100               	movlb	0	; () banked
 16386  012744  EE20 F002          	lfsr	2,2
 16387  012748  51C3               	movf	Port_SetPin@pInput& (0+255),w,b
 16388  01274A  26D9               	addwf	fsr2l,f,c
 16389  01274C  51C4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16390  01274E  22DA               	addwfc	fsr2h,f,c
 16391  012750  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 16392  012754  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 16393  012758  C0C5  F0B6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16394  01275C  C0C6  F0B7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16395  012760  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 16396                           
 16397                           ;Port.c: 264: break;
 16398  012764  0012               	return	
 16399  012766                     
 16400                           ;Port.c: 266: pValue &= 1;
 16401  012766  0E01               	movlw	1
 16402  012768  0100               	movlb	0	; () banked
 16403  01276A  17C6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 16407  01276C  0100               	movlb	0	; () banked
 16408  01276E  EE20 F004          	lfsr	2,4
 16409  012772  51C3               	movf	Port_SetPin@pInput& (0+255),w,b
 16410  012774  26D9               	addwf	fsr2l,f,c
 16411  012776  51C4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16412  012778  22DA               	addwfc	fsr2h,f,c
 16413  01277A  CFDE F0B4          	movff	postinc2,Byte_SetBit@pInput
 16414  01277E  CFDD F0B5          	movff	postdec2,Byte_SetBit@pInput+1
 16415  012782  C0C5  F0B6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16416  012786  C0C6  F0B7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16417  01278A  ECA7  F09B         	call	_Byte_SetBit	;wreg free
 16418                           
 16419                           ;Port.c: 269: }
 16420                           
 16421                           ;Port.c: 268: break;
 16422  01278E  0012               	return	
 16423  012790                     l979:
 16424  012790  0100               	movlb	0	; () banked
 16425  012792  51C7               	movf	Port_SetPin@Type& (0+255),w,b
 16426                           
 16427                           ; Switch size 1, requested type "space"
 16428                           ; Number of cases is 4, Range of values is 0 to 3
 16429                           ; switch strategies available:
 16430                           ; Name         Instructions Cycles
 16431                           ; simple_byte           13     7 (average)
 16432                           ;	Chosen strategy is simple_byte
 16433  012794  0A00               	xorlw	0	; case 0
 16434  012796  B4D8               	btfsc	status,2,c
 16435  012798  0012               	return	
 16436  01279A  0A01               	xorlw	1	; case 1
 16437  01279C  B4D8               	btfsc	status,2,c
 16438  01279E  D7B6               	goto	l982
 16439  0127A0  0A03               	xorlw	3	; case 2
 16440  0127A2  B4D8               	btfsc	status,2,c
 16441  0127A4  D7C8               	goto	l984
 16442  0127A6  0A01               	xorlw	1	; case 3
 16443  0127A8  A4D8               	btfss	status,2,c
 16444  0127AA  0012               	return	
 16445  0127AC  D7DC               	goto	l985
 16446  0127AE                     __end_of_Port_SetPin:
 16447                           	opt stack 0
 16448                           tosu	equ	0xFFF
 16449                           tosh	equ	0xFFE
 16450                           tosl	equ	0xFFD
 16451                           pclath	equ	0xFFA
 16452                           tblptru	equ	0xFF8
 16453                           tblptrh	equ	0xFF7
 16454                           tblptrl	equ	0xFF6
 16455                           tablat	equ	0xFF5
 16456                           prodh	equ	0xFF4
 16457                           prodl	equ	0xFF3
 16458                           intcon	equ	0xFF2
 16459                           indf0	equ	0xFEF
 16460                           postinc0	equ	0xFEE
 16461                           fsr0h	equ	0xFEA
 16462                           fsr0l	equ	0xFE9
 16463                           wreg	equ	0xFE8
 16464                           postdec1	equ	0xFE5
 16465                           fsr1h	equ	0xFE2
 16466                           fsr1l	equ	0xFE1
 16467                           indf2	equ	0xFDF
 16468                           postinc2	equ	0xFDE
 16469                           postdec2	equ	0xFDD
 16470                           plusw2	equ	0xFDB
 16471                           fsr2h	equ	0xFDA
 16472                           fsr2l	equ	0xFD9
 16473                           status	equ	0xFD8
 16474                           
 16475 ;; *************** function _Word_GetPair *****************
 16476 ;; Defined at:
 16477 ;;		line 156 in file "Library/Types.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16480 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16481 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16482 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16483 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16484 ;;  pPair           1   14[BANK0 ] unsigned char 
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;		None
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  1    wreg      unsigned char 
 16489 ;; Registers used:
 16490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16496 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;Total ram usage:        3 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    9
 16503 ;; This function calls:
 16504 ;;		_Byte_GetPair
 16505 ;; This function is called by:
 16506 ;;		_Port_Init
 16507 ;;		_Port_SetPin
 16508 ;;		_Port_Set
 16509 ;;		_PortProperty_Valid
 16510 ;;		_Port_SetPair
 16511 ;;		_Port_SetQuad
 16512 ;; This function uses a non-reentrant model
 16513 ;;
 16514                           
 16515                           	psect	text79
 16516  013C82                     __ptext79:
 16517                           	opt stack 0
 16518  013C82                     _Word_GetPair:
 16519                           	opt stack 15
 16520                           
 16521                           ;Types.c: 158: if (pPair >= 4)
 16522                           
 16523                           ;incstack = 0
 16524  013C82  0E03               	movlw	3
 16525  013C84  0100               	movlb	0	; () banked
 16526  013C86  65C2               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16527  013C88  D012               	goto	l1333
 16528                           
 16529                           ; BSR set to: 0
 16530                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16531  013C8A  0E01               	movlw	1
 16532  013C8C  0100               	movlb	0	; () banked
 16533  013C8E  25C0               	addwf	Word_GetPair@pInput& (0+255),w,b
 16534  013C90  0100               	movlb	0	; () banked
 16535  013C92  6FBD               	movwf	Byte_GetPair@pInput& (0+255),b
 16536  013C94  0E00               	movlw	0
 16537  013C96  0100               	movlb	0	; () banked
 16538  013C98  21C1               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16539  013C9A  0100               	movlb	0	; () banked
 16540  013C9C  6FBE               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16541  013C9E  0100               	movlb	0	; () banked
 16542  013CA0  51C2               	movf	Word_GetPair@pPair& (0+255),w,b
 16543  013CA2  0FFC               	addlw	252
 16544  013CA4  0100               	movlb	0	; () banked
 16545  013CA6  6FBF               	movwf	Byte_GetPair@pPair& (0+255),b
 16546  013CA8  EC7C  F0A0         	call	_Byte_GetPair	;wreg free
 16547  013CAC  0012               	return	
 16548  013CAE                     l1333:
 16549                           
 16550                           ;Types.c: 160: else
 16551                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16552  013CAE  C0C0  F0BD         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16553  013CB2  C0C1  F0BE         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16554  013CB6  C0C2  F0BF         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16555  013CBA  EC7C  F0A0         	call	_Byte_GetPair	;wreg free
 16556  013CBE  0012               	return	
 16557  013CC0                     __end_of_Word_GetPair:
 16558                           	opt stack 0
 16559                           tosu	equ	0xFFF
 16560                           tosh	equ	0xFFE
 16561                           tosl	equ	0xFFD
 16562                           pclath	equ	0xFFA
 16563                           tblptru	equ	0xFF8
 16564                           tblptrh	equ	0xFF7
 16565                           tblptrl	equ	0xFF6
 16566                           tablat	equ	0xFF5
 16567                           prodh	equ	0xFF4
 16568                           prodl	equ	0xFF3
 16569                           intcon	equ	0xFF2
 16570                           indf0	equ	0xFEF
 16571                           postinc0	equ	0xFEE
 16572                           fsr0h	equ	0xFEA
 16573                           fsr0l	equ	0xFE9
 16574                           wreg	equ	0xFE8
 16575                           postdec1	equ	0xFE5
 16576                           fsr1h	equ	0xFE2
 16577                           fsr1l	equ	0xFE1
 16578                           indf2	equ	0xFDF
 16579                           postinc2	equ	0xFDE
 16580                           postdec2	equ	0xFDD
 16581                           plusw2	equ	0xFDB
 16582                           fsr2h	equ	0xFDA
 16583                           fsr2l	equ	0xFD9
 16584                           status	equ	0xFD8
 16585                           
 16586 ;; *************** function _Byte_GetPair *****************
 16587 ;; Defined at:
 16588 ;;		line 87 in file "Library/Types.c"
 16589 ;; Parameters:    Size  Location     Type
 16590 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16591 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16592 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16593 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16594 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16595 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16596 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16597 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16598 ;;		 -> NULL(0), 
 16599 ;;  pPair           1   11[BANK0 ] unsigned char 
 16600 ;; Auto vars:     Size  Location     Type
 16601 ;;		None
 16602 ;; Return value:  Size  Location     Type
 16603 ;;                  1    wreg      unsigned char 
 16604 ;; Registers used:
 16605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16606 ;; Tracked objects:
 16607 ;;		On entry : 0/0
 16608 ;;		On exit  : 0/0
 16609 ;;		Unchanged: 0/0
 16610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16611 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;Total ram usage:        3 bytes
 16616 ;; Hardware stack levels used:    1
 16617 ;; Hardware stack levels required when called:    8
 16618 ;; This function calls:
 16619 ;;		_Byte_GetZone
 16620 ;; This function is called by:
 16621 ;;		_Word_GetPair
 16622 ;; This function uses a non-reentrant model
 16623 ;;
 16624                           
 16625                           	psect	text80
 16626  0140F8                     __ptext80:
 16627                           	opt stack 0
 16628  0140F8                     _Byte_GetPair:
 16629                           	opt stack 15
 16630                           
 16631                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16632                           
 16633                           ;incstack = 0
 16634  0140F8  C0BD  F0B4         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16635  0140FC  C0BE  F0B5         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16636  014100  0E04               	movlw	4
 16637  014102  0100               	movlb	0	; () banked
 16638  014104  6FB6               	movwf	Byte_GetZone@pMax& (0+255),b
 16639  014106  C0BF  F0B7         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16640  01410A  0E02               	movlw	2
 16641  01410C  0100               	movlb	0	; () banked
 16642  01410E  6FB8               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16643  014110  EC95  F097         	call	_Byte_GetZone	;wreg free
 16644  014114  0012               	return	
 16645  014116                     __end_of_Byte_GetPair:
 16646                           	opt stack 0
 16647                           tosu	equ	0xFFF
 16648                           tosh	equ	0xFFE
 16649                           tosl	equ	0xFFD
 16650                           pclath	equ	0xFFA
 16651                           tblptru	equ	0xFF8
 16652                           tblptrh	equ	0xFF7
 16653                           tblptrl	equ	0xFF6
 16654                           tablat	equ	0xFF5
 16655                           prodh	equ	0xFF4
 16656                           prodl	equ	0xFF3
 16657                           intcon	equ	0xFF2
 16658                           indf0	equ	0xFEF
 16659                           postinc0	equ	0xFEE
 16660                           fsr0h	equ	0xFEA
 16661                           fsr0l	equ	0xFE9
 16662                           wreg	equ	0xFE8
 16663                           postdec1	equ	0xFE5
 16664                           fsr1h	equ	0xFE2
 16665                           fsr1l	equ	0xFE1
 16666                           indf2	equ	0xFDF
 16667                           postinc2	equ	0xFDE
 16668                           postdec2	equ	0xFDD
 16669                           plusw2	equ	0xFDB
 16670                           fsr2h	equ	0xFDA
 16671                           fsr2l	equ	0xFD9
 16672                           status	equ	0xFD8
 16673                           
 16674 ;; *************** function _Byte_GetZone *****************
 16675 ;; Defined at:
 16676 ;;		line 64 in file "Library/Types.c"
 16677 ;; Parameters:    Size  Location     Type
 16678 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16679 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16680 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16681 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16682 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16683 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16684 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16685 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16686 ;;		 -> NULL(0), 
 16687 ;;  pMax            1    2[BANK0 ] unsigned char 
 16688 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16689 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  Output          1    8[BANK0 ] unsigned char 
 16692 ;;  Offset          1    7[BANK0 ] unsigned char 
 16693 ;;  MASK            1    6[BANK0 ] unsigned char 
 16694 ;; Return value:  Size  Location     Type
 16695 ;;                  1    wreg      unsigned char 
 16696 ;; Registers used:
 16697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16698 ;; Tracked objects:
 16699 ;;		On entry : 0/0
 16700 ;;		On exit  : 0/0
 16701 ;;		Unchanged: 0/0
 16702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16703 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16707 ;;Total ram usage:        9 bytes
 16708 ;; Hardware stack levels used:    1
 16709 ;; Hardware stack levels required when called:    7
 16710 ;; This function calls:
 16711 ;;		Nothing
 16712 ;; This function is called by:
 16713 ;;		_Byte_GetPair
 16714 ;;		_Byte_GetTriple
 16715 ;;		_Byte_GetQuad
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           	psect	text81
 16720  012F2A                     __ptext81:
 16721                           	opt stack 0
 16722  012F2A                     _Byte_GetZone:
 16723                           	opt stack 15
 16724                           
 16725                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16726                           
 16727                           ;incstack = 0
 16728  012F2A  C0B4  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16729  012F2E  C0B5  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16730  012F32  0E00               	movlw	low (__mediumconst shr (0+16))
 16731  012F34  6EF8               	movwf	tblptru,c
 16732  012F36  0E0F               	movlw	(high __ramtop+-1)
 16733  012F38  64F7               	cpfsgt	tblptrh,c
 16734  012F3A  D003               	bra	u11057
 16735  012F3C  0008               	tblrd		*
 16736  012F3E  50F5               	movf	tablat,w,c
 16737  012F40  D005               	bra	u11050
 16738  012F42                     u11057:
 16739  012F42  CFF6 FFE9          	movff	tblptrl,fsr0l
 16740  012F46  CFF7 FFEA          	movff	tblptrh,fsr0h
 16741  012F4A  50EF               	movf	indf0,w,c
 16742  012F4C                     u11050:
 16743  012F4C  0100               	movlb	0	; () banked
 16744  012F4E  6FBC               	movwf	Byte_GetZone@Output& (0+255),b
 16745                           
 16746                           ; BSR set to: 0
 16747                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16748  012F50  0100               	movlb	0	; () banked
 16749  012F52  51B8               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16750  012F54  0D01               	mullw	1
 16751  012F56  0EBF               	movlw	low _MASKS
 16752  012F58  24F3               	addwf	prodl,w,c
 16753  012F5A  6EF6               	movwf	tblptrl,c
 16754  012F5C  0EFC               	movlw	high _MASKS
 16755  012F5E  20F4               	addwfc	prodh,w,c
 16756  012F60  6EF7               	movwf	tblptrh,c
 16757  012F62                     	if	1	;There are 3 active tblptr bytes
 16758  012F62  6AF8               	clrf	tblptru,c
 16759  012F64  0E00               	movlw	low (__mediumconst shr (0+16))
 16760  012F66  22F8               	addwfc	tblptru,f,c
 16761  012F68                     	endif
 16762  012F68  0008               	tblrd		*
 16763  012F6A  CFF5 F0BA          	movff	tablat,Byte_GetZone@MASK
 16764                           
 16765                           ; BSR set to: 0
 16766                           ;Types.c: 68: UINT8 Offset = 0;
 16767  012F6E  0E00               	movlw	0
 16768  012F70  0100               	movlb	0	; () banked
 16769  012F72  6FBB               	movwf	Byte_GetZone@Offset& (0+255),b
 16770                           
 16771                           ;Types.c: 70: while (pChunk >= pMax)
 16772  012F74  D006               	goto	l1284
 16773  012F76                     
 16774                           ; BSR set to: 0
 16775                           ;Types.c: 71: {
 16776                           ;Types.c: 72: pChunk -= pMax;
 16777                           
 16778                           ; BSR set to: 0
 16779  012F76  0100               	movlb	0	; () banked
 16780  012F78  51B6               	movf	Byte_GetZone@pMax& (0+255),w,b
 16781  012F7A  0100               	movlb	0	; () banked
 16782  012F7C  5FB7               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16783                           
 16784                           ; BSR set to: 0
 16785                           ;Types.c: 73: Offset += 1;
 16786  012F7E  0100               	movlb	0	; () banked
 16787  012F80  2BBB               	incf	Byte_GetZone@Offset& (0+255),f,b
 16788  012F82                     l1284:
 16789                           
 16790                           ; BSR set to: 0
 16791                           
 16792                           ; BSR set to: 0
 16793  012F82  0100               	movlb	0	; () banked
 16794  012F84  51B6               	movf	Byte_GetZone@pMax& (0+255),w,b
 16795  012F86  0100               	movlb	0	; () banked
 16796  012F88  5DB7               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16797  012F8A  B0D8               	btfsc	status,0,c
 16798  012F8C  D7F4               	goto	l1285
 16799                           
 16800                           ; BSR set to: 0
 16801                           ;Types.c: 74: }
 16802                           ;Types.c: 75: pChunk *= pChunkSize;
 16803                           
 16804                           ; BSR set to: 0
 16805  012F8E  0100               	movlb	0	; () banked
 16806  012F90  51B8               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16807  012F92  0100               	movlb	0	; () banked
 16808  012F94  03B7               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16809  012F96  50F3               	movf	prodl,w,c
 16810  012F98  6FB7               	movwf	Byte_GetZone@pChunk& (0+255),b
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;Types.c: 76: pChunk += Offset;
 16814  012F9A  0100               	movlb	0	; () banked
 16815  012F9C  51BB               	movf	Byte_GetZone@Offset& (0+255),w,b
 16816  012F9E  0100               	movlb	0	; () banked
 16817  012FA0  27B7               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;Types.c: 78: Output >>= pChunk;
 16821  012FA2  0100               	movlb	0	; () banked
 16822  012FA4  29B7               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16823  012FA6  0100               	movlb	0	; () banked
 16824  012FA8  6FB9               	movwf	??_Byte_GetZone& (0+255),b
 16825  012FAA  D003               	goto	u11070
 16826  012FAC                     u11075:
 16827  012FAC  0100               	movlb	0	; () banked
 16828  012FAE  90D8               	bcf	status,0,c
 16829  012FB0  33BC               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16830  012FB2                     u11070:
 16831  012FB2  0100               	movlb	0	; () banked
 16832  012FB4  2FB9               	decfsz	??_Byte_GetZone& (0+255),f,b
 16833  012FB6  D7FA               	goto	u11075
 16834                           
 16835                           ;Types.c: 79: Output &= MASK;
 16836  012FB8  0100               	movlb	0	; () banked
 16837  012FBA  51BA               	movf	Byte_GetZone@MASK& (0+255),w,b
 16838  012FBC  0100               	movlb	0	; () banked
 16839  012FBE  17BC               	andwf	Byte_GetZone@Output& (0+255),f,b
 16840                           
 16841                           ; BSR set to: 0
 16842                           ;Types.c: 80: return Output;
 16843  012FC0  0100               	movlb	0	; () banked
 16844  012FC2  51BC               	movf	Byte_GetZone@Output& (0+255),w,b
 16845  012FC4  0012               	return	
 16846  012FC6                     __end_of_Byte_GetZone:
 16847                           	opt stack 0
 16848                           tosu	equ	0xFFF
 16849                           tosh	equ	0xFFE
 16850                           tosl	equ	0xFFD
 16851                           pclath	equ	0xFFA
 16852                           tblptru	equ	0xFF8
 16853                           tblptrh	equ	0xFF7
 16854                           tblptrl	equ	0xFF6
 16855                           tablat	equ	0xFF5
 16856                           prodh	equ	0xFF4
 16857                           prodl	equ	0xFF3
 16858                           intcon	equ	0xFF2
 16859                           indf0	equ	0xFEF
 16860                           postinc0	equ	0xFEE
 16861                           fsr0h	equ	0xFEA
 16862                           fsr0l	equ	0xFE9
 16863                           wreg	equ	0xFE8
 16864                           postdec1	equ	0xFE5
 16865                           fsr1h	equ	0xFE2
 16866                           fsr1l	equ	0xFE1
 16867                           indf2	equ	0xFDF
 16868                           postinc2	equ	0xFDE
 16869                           postdec2	equ	0xFDD
 16870                           plusw2	equ	0xFDB
 16871                           fsr2h	equ	0xFDA
 16872                           fsr2l	equ	0xFD9
 16873                           status	equ	0xFD8
 16874                           
 16875 ;; *************** function _Byte_SetBit *****************
 16876 ;; Defined at:
 16877 ;;		line 32 in file "Library/Types.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16880 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 16881 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 16882 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16883 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16884 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16885 ;;		 -> NULL(0), 
 16886 ;;  pBit            1    2[BANK0 ] unsigned char 
 16887 ;;  pValue          1    3[BANK0 ] unsigned char 
 16888 ;; Auto vars:     Size  Location     Type
 16889 ;;		None
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  1    wreg      void 
 16892 ;; Registers used:
 16893 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16899 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;Total ram usage:        7 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; Hardware stack levels required when called:    7
 16906 ;; This function calls:
 16907 ;;		Nothing
 16908 ;; This function is called by:
 16909 ;;		_Port_SetPinType
 16910 ;;		_Port_SetPin
 16911 ;;		_SPI_Init
 16912 ;;		_SPI_MinSpeed
 16913 ;;		_SPI_MaxSpeed
 16914 ;;		_Word_SetBit
 16915 ;;		_I2C_Init
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text82
 16920  01374E                     __ptext82:
 16921                           	opt stack 0
 16922  01374E                     _Byte_SetBit:
 16923                           	opt stack 21
 16924                           
 16925                           ;Types.c: 34: pValue &= 1;
 16926                           
 16927                           ; BSR set to: 0
 16928                           ;incstack = 0
 16929  01374E  0E01               	movlw	1
 16930  013750  0100               	movlb	0	; () banked
 16931  013752  17B7               	andwf	Byte_SetBit@pValue& (0+255),f,b
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 16935  013754  C0B6  F0B8         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16936  013758  0E01               	movlw	1
 16937  01375A  0100               	movlb	0	; () banked
 16938  01375C  6FB9               	movwf	(??_Byte_SetBit+1)& (0+255),b
 16939  01375E  0100               	movlb	0	; () banked
 16940  013760  2BB8               	incf	??_Byte_SetBit& (0+255),f,b
 16941  013762  D003               	goto	u11124
 16942  013764                     u11125:
 16943  013764  0100               	movlb	0	; () banked
 16944  013766  90D8               	bcf	status,0,c
 16945  013768  37B9               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16946  01376A                     u11124:
 16947  01376A  0100               	movlb	0	; () banked
 16948  01376C  2FB8               	decfsz	??_Byte_SetBit& (0+255),f,b
 16949  01376E  D7FA               	goto	u11125
 16950  013770  0100               	movlb	0	; () banked
 16951  013772  51B9               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16952  013774  0AFF               	xorlw	255
 16953  013776  0100               	movlb	0	; () banked
 16954  013778  6FBA               	movwf	(??_Byte_SetBit+2)& (0+255),b
 16955  01377A  C0B4  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16956  01377E  C0B5  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16957  013782  0100               	movlb	0	; () banked
 16958  013784  51BA               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 16959  013786  16DF               	andwf	indf2,f,c
 16960                           
 16961                           ; BSR set to: 0
 16962                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 16963  013788  C0B6  F0B8         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16964  01378C  C0B7  F0B9         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 16965  013790  0100               	movlb	0	; () banked
 16966  013792  2BB8               	incf	??_Byte_SetBit& (0+255),f,b
 16967  013794  D003               	goto	u11134
 16968  013796                     u11135:
 16969  013796  0100               	movlb	0	; () banked
 16970  013798  90D8               	bcf	status,0,c
 16971  01379A  37B9               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16972  01379C                     u11134:
 16973  01379C  0100               	movlb	0	; () banked
 16974  01379E  2FB8               	decfsz	??_Byte_SetBit& (0+255),f,b
 16975  0137A0  D7FA               	goto	u11135
 16976  0137A2  C0B4  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16977  0137A6  C0B5  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16978  0137AA  0100               	movlb	0	; () banked
 16979  0137AC  51B9               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16980  0137AE  12DF               	iorwf	indf2,f,c
 16981                           
 16982                           ; BSR set to: 0
 16983  0137B0  0012               	return		;funcret
 16984  0137B2                     __end_of_Byte_SetBit:
 16985                           	opt stack 0
 16986                           tosu	equ	0xFFF
 16987                           tosh	equ	0xFFE
 16988                           tosl	equ	0xFFD
 16989                           pclath	equ	0xFFA
 16990                           tblptru	equ	0xFF8
 16991                           tblptrh	equ	0xFF7
 16992                           tblptrl	equ	0xFF6
 16993                           tablat	equ	0xFF5
 16994                           prodh	equ	0xFF4
 16995                           prodl	equ	0xFF3
 16996                           intcon	equ	0xFF2
 16997                           indf0	equ	0xFEF
 16998                           postinc0	equ	0xFEE
 16999                           fsr0h	equ	0xFEA
 17000                           fsr0l	equ	0xFE9
 17001                           wreg	equ	0xFE8
 17002                           postdec1	equ	0xFE5
 17003                           fsr1h	equ	0xFE2
 17004                           fsr1l	equ	0xFE1
 17005                           indf2	equ	0xFDF
 17006                           postinc2	equ	0xFDE
 17007                           postdec2	equ	0xFDD
 17008                           plusw2	equ	0xFDB
 17009                           fsr2h	equ	0xFDA
 17010                           fsr2l	equ	0xFD9
 17011                           status	equ	0xFD8
 17012                           
 17013 ;; *************** function _MXK_SwitchTo *****************
 17014 ;; Defined at:
 17015 ;;		line 105 in file "Library/MXK.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;  pModule         1    wreg     enum E7037
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;  pModule         1    7[BANK0 ] enum E7037
 17020 ;;  CUR             1    6[BANK0 ] unsigned char 
 17021 ;; Return value:  Size  Location     Type
 17022 ;;                  1    wreg      unsigned char 
 17023 ;; Registers used:
 17024 ;;		wreg, status,2, status,0, cstack
 17025 ;; Tracked objects:
 17026 ;;		On entry : 0/0
 17027 ;;		On exit  : 0/0
 17028 ;;		Unchanged: 0/0
 17029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17034 ;;Total ram usage:        2 bytes
 17035 ;; Hardware stack levels used:    1
 17036 ;; Hardware stack levels required when called:    8
 17037 ;; This function calls:
 17038 ;;		_delay_us
 17039 ;; This function is called by:
 17040 ;;		_Motor_Step
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           	psect	text83
 17045  013B82                     __ptext83:
 17046                           	opt stack 0
 17047  013B82                     _MXK_SwitchTo:
 17048                           	opt stack 19
 17049                           
 17050                           ; BSR set to: 0
 17051                           ;incstack = 0
 17052                           ;MXK_SwitchTo@pModule stored from wreg
 17053  013B82  0100               	movlb	0	; () banked
 17054  013B84  6FBB               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17055                           
 17056                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17057  013B86  5086               	movf	3974,w,c	;volatile
 17058  013B88  0B0F               	andlw	15
 17059  013B8A  0100               	movlb	0	; () banked
 17060  013B8C  6FBA               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17064  013B8E  504E               	movf	_Bus_State,w,c
 17065  013B90  A4D8               	btfss	status,2,c
 17066  013B92  D002               	goto	l2430
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;MXK.c: 110: return 0;
 17070  013B94  0E00               	movlw	0
 17071                           
 17072                           ; BSR set to: 0
 17073  013B96  0012               	return	
 17074  013B98                     l2430:
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17078                           
 17079                           ; BSR set to: 0
 17080  013B98  0E00               	movlw	0
 17081  013B9A  6E4E               	movwf	_Bus_State,c
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;MXK.c: 114: if (CUR != pModule)
 17085  013B9C  0100               	movlb	0	; () banked
 17086  013B9E  51BB               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17087  013BA0  0100               	movlb	0	; () banked
 17088  013BA2  19BA               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17089  013BA4  B4D8               	btfsc	status,2,c
 17090  013BA6  D00C               	goto	l2432
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;MXK.c: 115: {
 17094                           ;MXK.c: 116: PORTG &= ~(0xF);
 17095  013BA8  0EF0               	movlw	240
 17096  013BAA  1686               	andwf	3974,f,c	;volatile
 17097                           
 17098                           ;MXK.c: 117: PORTG |= pModule;
 17099  013BAC  0100               	movlb	0	; () banked
 17100  013BAE  51BB               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17101  013BB0  1286               	iorwf	3974,f,c	;volatile
 17102                           
 17103                           ; BSR set to: 0
 17104                           ;MXK.c: 120: delay_us(10);
 17105  013BB2  0E00               	movlw	0
 17106  013BB4  0100               	movlb	0	; () banked
 17107  013BB6  6FB5               	movwf	(delay_us@us+1)& (0+255),b
 17108  013BB8  0E0A               	movlw	10
 17109  013BBA  6FB4               	movwf	delay_us@us& (0+255),b
 17110  013BBC  EC94  F09C         	call	_delay_us	;wreg free
 17111  013BC0                     l2432:
 17112                           
 17113                           ;MXK.c: 121: }
 17114                           ;MXK.c: 122: return 1;
 17115  013BC0  0E01               	movlw	1
 17116  013BC2  0012               	return	
 17117  013BC4                     __end_of_MXK_SwitchTo:
 17118                           	opt stack 0
 17119                           tosu	equ	0xFFF
 17120                           tosh	equ	0xFFE
 17121                           tosl	equ	0xFFD
 17122                           pclath	equ	0xFFA
 17123                           tblptru	equ	0xFF8
 17124                           tblptrh	equ	0xFF7
 17125                           tblptrl	equ	0xFF6
 17126                           tablat	equ	0xFF5
 17127                           prodh	equ	0xFF4
 17128                           prodl	equ	0xFF3
 17129                           intcon	equ	0xFF2
 17130                           indf0	equ	0xFEF
 17131                           postinc0	equ	0xFEE
 17132                           fsr0h	equ	0xFEA
 17133                           fsr0l	equ	0xFE9
 17134                           wreg	equ	0xFE8
 17135                           postdec1	equ	0xFE5
 17136                           fsr1h	equ	0xFE2
 17137                           fsr1l	equ	0xFE1
 17138                           indf2	equ	0xFDF
 17139                           postinc2	equ	0xFDE
 17140                           postdec2	equ	0xFDD
 17141                           plusw2	equ	0xFDB
 17142                           fsr2h	equ	0xFDA
 17143                           fsr2l	equ	0xFD9
 17144                           status	equ	0xFD8
 17145                           
 17146 ;; *************** function _MXK_Release *****************
 17147 ;; Defined at:
 17148 ;;		line 130 in file "Library/MXK.c"
 17149 ;; Parameters:    Size  Location     Type
 17150 ;;		None
 17151 ;; Auto vars:     Size  Location     Type
 17152 ;;		None
 17153 ;; Return value:  Size  Location     Type
 17154 ;;                  1    wreg      unsigned char 
 17155 ;; Registers used:
 17156 ;;		wreg, status,2, status,0
 17157 ;; Tracked objects:
 17158 ;;		On entry : 0/0
 17159 ;;		On exit  : 0/0
 17160 ;;		Unchanged: 0/0
 17161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17166 ;;Total ram usage:        0 bytes
 17167 ;; Hardware stack levels used:    1
 17168 ;; Hardware stack levels required when called:    7
 17169 ;; This function calls:
 17170 ;;		Nothing
 17171 ;; This function is called by:
 17172 ;;		_Motor_Step
 17173 ;;		_FunctInitLCD
 17174 ;;		_FunctInitHMI
 17175 ;;		_FunctMotor
 17176 ;;		_FunctHMI
 17177 ;;		_FunctInitIMU
 17178 ;; This function uses a non-reentrant model
 17179 ;;
 17180                           
 17181                           	psect	text84
 17182  014134                     __ptext84:
 17183                           	opt stack 0
 17184  014134                     _MXK_Release:
 17185                           	opt stack 22
 17186                           
 17187                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17188                           
 17189                           ;incstack = 0
 17190  014134  0E01               	movlw	1
 17191  014136  6E4E               	movwf	_Bus_State,c
 17192                           
 17193                           ;MXK.c: 134: if (lQueue != 0)
 17194  014138  0100               	movlb	0	; () banked
 17195  01413A  5175               	movf	_lQueue& (0+255),w,b	;volatile
 17196  01413C  0100               	movlb	0	; () banked
 17197  01413E  1176               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17198  014140  0100               	movlb	0	; () banked
 17199  014142  1177               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17200  014144  B4D8               	btfsc	status,2,c
 17201  014146  D002               	goto	l2435
 17202                           
 17203                           ; BSR set to: 0
 17204                           ;MXK.c: 135: return 1;
 17205  014148  0E01               	movlw	1
 17206                           
 17207                           ; BSR set to: 0
 17208  01414A  0012               	return	
 17209  01414C                     l2435:
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;MXK.c: 137: return 0;
 17213                           
 17214                           ; BSR set to: 0
 17215  01414C  0E00               	movlw	0
 17216  01414E  0012               	return	
 17217  014150                     __end_of_MXK_Release:
 17218                           	opt stack 0
 17219                           tosu	equ	0xFFF
 17220                           tosh	equ	0xFFE
 17221                           tosl	equ	0xFFD
 17222                           pclath	equ	0xFFA
 17223                           tblptru	equ	0xFF8
 17224                           tblptrh	equ	0xFF7
 17225                           tblptrl	equ	0xFF6
 17226                           tablat	equ	0xFF5
 17227                           prodh	equ	0xFF4
 17228                           prodl	equ	0xFF3
 17229                           intcon	equ	0xFF2
 17230                           indf0	equ	0xFEF
 17231                           postinc0	equ	0xFEE
 17232                           fsr0h	equ	0xFEA
 17233                           fsr0l	equ	0xFE9
 17234                           wreg	equ	0xFE8
 17235                           postdec1	equ	0xFE5
 17236                           fsr1h	equ	0xFE2
 17237                           fsr1l	equ	0xFE1
 17238                           indf2	equ	0xFDF
 17239                           postinc2	equ	0xFDE
 17240                           postdec2	equ	0xFDD
 17241                           plusw2	equ	0xFDB
 17242                           fsr2h	equ	0xFDA
 17243                           fsr2l	equ	0xFD9
 17244                           status	equ	0xFD8
 17245                           
 17246 ;; *************** function _MXK_Queue *****************
 17247 ;; Defined at:
 17248 ;;		line 144 in file "Library/MXK.c"
 17249 ;; Parameters:    Size  Location     Type
 17250 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17251 ;;		 -> Motor_Step(1), Absolute function(1), 
 17252 ;; Auto vars:     Size  Location     Type
 17253 ;;		None
 17254 ;; Return value:  Size  Location     Type
 17255 ;;                  1    wreg      void 
 17256 ;; Registers used:
 17257 ;;		wreg, status,2, status,0
 17258 ;; Tracked objects:
 17259 ;;		On entry : 0/0
 17260 ;;		On exit  : 0/0
 17261 ;;		Unchanged: 0/0
 17262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17263 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17266 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17267 ;;Total ram usage:        3 bytes
 17268 ;; Hardware stack levels used:    1
 17269 ;; Hardware stack levels required when called:    7
 17270 ;; This function calls:
 17271 ;;		Nothing
 17272 ;; This function is called by:
 17273 ;;		_Motor_Step
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           	psect	text85
 17278  0141A8                     __ptext85:
 17279                           	opt stack 0
 17280  0141A8                     _MXK_Queue:
 17281                           	opt stack 20
 17282                           
 17283                           ;MXK.c: 146: lQueue = pCallback;
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;incstack = 0
 17287  0141A8  C0B4  F075         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17288  0141AC  C0B5  F076         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17289  0141B0  C0B6  F077         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17290  0141B4  0012               	return		;funcret
 17291  0141B6                     __end_of_MXK_Queue:
 17292                           	opt stack 0
 17293                           tosu	equ	0xFFF
 17294                           tosh	equ	0xFFE
 17295                           tosl	equ	0xFFD
 17296                           pclath	equ	0xFFA
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           indf0	equ	0xFEF
 17305                           postinc0	equ	0xFEE
 17306                           fsr0h	equ	0xFEA
 17307                           fsr0l	equ	0xFE9
 17308                           wreg	equ	0xFE8
 17309                           postdec1	equ	0xFE5
 17310                           fsr1h	equ	0xFE2
 17311                           fsr1l	equ	0xFE1
 17312                           indf2	equ	0xFDF
 17313                           postinc2	equ	0xFDE
 17314                           postdec2	equ	0xFDD
 17315                           plusw2	equ	0xFDB
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function _MXK_BlockSwitchTo *****************
 17321 ;; Defined at:
 17322 ;;		line 82 in file "Library/MXK.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  pModule         1    wreg     enum E7037
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;  pModule         1    7[BANK0 ] enum E7037
 17327 ;;  CUR             1    6[BANK0 ] unsigned char 
 17328 ;; Return value:  Size  Location     Type
 17329 ;;                  1    wreg      unsigned char 
 17330 ;; Registers used:
 17331 ;;		wreg, status,2, status,0, cstack
 17332 ;; Tracked objects:
 17333 ;;		On entry : 0/0
 17334 ;;		On exit  : 0/0
 17335 ;;		Unchanged: 0/0
 17336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;Total ram usage:        2 bytes
 17342 ;; Hardware stack levels used:    1
 17343 ;; Hardware stack levels required when called:    8
 17344 ;; This function calls:
 17345 ;;		_delay_us
 17346 ;; This function is called by:
 17347 ;;		_FunctInitLCD
 17348 ;;		_FunctInitHMI
 17349 ;;		_FunctMotor
 17350 ;;		_FunctHMI
 17351 ;;		_FunctInitIMU
 17352 ;; This function uses a non-reentrant model
 17353 ;;
 17354                           
 17355                           	psect	text86
 17356  013CC0                     __ptext86:
 17357                           	opt stack 0
 17358  013CC0                     _MXK_BlockSwitchTo:
 17359                           	opt stack 21
 17360                           
 17361                           ;incstack = 0
 17362                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17363  013CC0  0100               	movlb	0	; () banked
 17364  013CC2  6FBB               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17365                           
 17366                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17367  013CC4  5086               	movf	3974,w,c	;volatile
 17368  013CC6  0B0F               	andlw	15
 17369  013CC8  0100               	movlb	0	; () banked
 17370  013CCA  6FBA               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17371  013CCC                     
 17372                           ; BSR set to: 0
 17373                           
 17374                           ; BSR set to: 0
 17375  013CCC  504E               	movf	_Bus_State,w,c
 17376  013CCE  B4D8               	btfsc	status,2,c
 17377  013CD0  D7FD               	goto	l2424
 17378                           
 17379                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17380  013CD2  0E00               	movlw	0
 17381  013CD4  6E4E               	movwf	_Bus_State,c
 17382                           
 17383                           ;MXK.c: 90: if (CUR != pModule)
 17384  013CD6  0100               	movlb	0	; () banked
 17385  013CD8  51BB               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17386  013CDA  0100               	movlb	0	; () banked
 17387  013CDC  19BA               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17388  013CDE  B4D8               	btfsc	status,2,c
 17389  013CE0  D00C               	goto	l2426
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;MXK.c: 91: {
 17393                           ;MXK.c: 92: PORTG &= ~(0xF);
 17394  013CE2  0EF0               	movlw	240
 17395  013CE4  1686               	andwf	3974,f,c	;volatile
 17396                           
 17397                           ;MXK.c: 93: PORTG |= pModule;
 17398  013CE6  0100               	movlb	0	; () banked
 17399  013CE8  51BB               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17400  013CEA  1286               	iorwf	3974,f,c	;volatile
 17401                           
 17402                           ; BSR set to: 0
 17403                           ;MXK.c: 96: delay_us(10);
 17404  013CEC  0E00               	movlw	0
 17405  013CEE  0100               	movlb	0	; () banked
 17406  013CF0  6FB5               	movwf	(delay_us@us+1)& (0+255),b
 17407  013CF2  0E0A               	movlw	10
 17408  013CF4  6FB4               	movwf	delay_us@us& (0+255),b
 17409  013CF6  EC94  F09C         	call	_delay_us	;wreg free
 17410  013CFA                     l2426:
 17411                           
 17412                           ;MXK.c: 97: }
 17413                           ;MXK.c: 98: return 1;
 17414  013CFA  0E01               	movlw	1
 17415  013CFC  0012               	return	
 17416  013CFE                     __end_of_MXK_BlockSwitchTo:
 17417                           	opt stack 0
 17418                           tosu	equ	0xFFF
 17419                           tosh	equ	0xFFE
 17420                           tosl	equ	0xFFD
 17421                           pclath	equ	0xFFA
 17422                           tblptru	equ	0xFF8
 17423                           tblptrh	equ	0xFF7
 17424                           tblptrl	equ	0xFF6
 17425                           tablat	equ	0xFF5
 17426                           prodh	equ	0xFF4
 17427                           prodl	equ	0xFF3
 17428                           intcon	equ	0xFF2
 17429                           indf0	equ	0xFEF
 17430                           postinc0	equ	0xFEE
 17431                           fsr0h	equ	0xFEA
 17432                           fsr0l	equ	0xFE9
 17433                           wreg	equ	0xFE8
 17434                           postdec1	equ	0xFE5
 17435                           fsr1h	equ	0xFE2
 17436                           fsr1l	equ	0xFE1
 17437                           indf2	equ	0xFDF
 17438                           postinc2	equ	0xFDE
 17439                           postdec2	equ	0xFDD
 17440                           plusw2	equ	0xFDB
 17441                           fsr2h	equ	0xFDA
 17442                           fsr2l	equ	0xFD9
 17443                           status	equ	0xFD8
 17444                           
 17445 ;; *************** function _delay_us *****************
 17446 ;; Defined at:
 17447 ;;		line 255 in file "Library/Types.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;  us              2    0[BANK0 ] unsigned short 
 17450 ;; Auto vars:     Size  Location     Type
 17451 ;;  u               4    2[BANK0 ] unsigned long 
 17452 ;; Return value:  Size  Location     Type
 17453 ;;                  1    wreg      void 
 17454 ;; Registers used:
 17455 ;;		wreg, status,2, status,0
 17456 ;; Tracked objects:
 17457 ;;		On entry : 0/0
 17458 ;;		On exit  : 0/0
 17459 ;;		Unchanged: 0/0
 17460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17461 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17464 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;Total ram usage:        6 bytes
 17466 ;; Hardware stack levels used:    1
 17467 ;; Hardware stack levels required when called:    7
 17468 ;; This function calls:
 17469 ;;		Nothing
 17470 ;; This function is called by:
 17471 ;;		_MXK_BlockSwitchTo
 17472 ;;		_MXK_SwitchTo
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           	psect	text87
 17477  013928                     __ptext87:
 17478                           	opt stack 0
 17479  013928                     _delay_us:
 17480                           	opt stack 19
 17481                           
 17482                           ;Types.c: 256: unsigned long u;
 17483                           ;Types.c: 257: while (us--) {
 17484                           
 17485                           ;incstack = 0
 17486  013928  D01C               	goto	u11770
 17487  01392A                     l14685:
 17488                           
 17489                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17490  01392A  0E00               	movlw	0
 17491  01392C  0100               	movlb	0	; () banked
 17492  01392E  6FB6               	movwf	delay_us@u& (0+255),b
 17493  013930  0E00               	movlw	0
 17494  013932  6FB7               	movwf	(delay_us@u+1)& (0+255),b
 17495  013934  0E00               	movlw	0
 17496  013936  6FB8               	movwf	(delay_us@u+2)& (0+255),b
 17497  013938  0E00               	movlw	0
 17498  01393A  6FB9               	movwf	(delay_us@u+3)& (0+255),b
 17499  01393C                     l14687:
 17500                           
 17501                           ; BSR set to: 0
 17502  01393C  0100               	movlb	0	; () banked
 17503  01393E  51B6               	movf	delay_us@u& (0+255),w,b
 17504  013940  0100               	movlb	0	; () banked
 17505  013942  11B7               	iorwf	(delay_us@u+1)& (0+255),w,b
 17506  013944  0100               	movlb	0	; () banked
 17507  013946  11B8               	iorwf	(delay_us@u+2)& (0+255),w,b
 17508  013948  0100               	movlb	0	; () banked
 17509  01394A  11B9               	iorwf	(delay_us@u+3)& (0+255),w,b
 17510  01394C  A4D8               	btfss	status,2,c
 17511  01394E  D009               	goto	u11770
 17512                           
 17513                           ; BSR set to: 0
 17514                           
 17515                           ; BSR set to: 0
 17516  013950  F000               	nop		; ;# 
 17517  013952  0E01               	movlw	1
 17518  013954  0100               	movlb	0	; () banked
 17519  013956  27B6               	addwf	delay_us@u& (0+255),f,b
 17520  013958  0E00               	movlw	0
 17521  01395A  23B7               	addwfc	(delay_us@u+1)& (0+255),f,b
 17522  01395C  23B8               	addwfc	(delay_us@u+2)& (0+255),f,b
 17523  01395E  23B9               	addwfc	(delay_us@u+3)& (0+255),f,b
 17524  013960  D7ED               	goto	l14687
 17525  013962                     u11770:
 17526                           
 17527                           ; BSR set to: 0
 17528                           
 17529                           ; BSR set to: 0
 17530  013962  0100               	movlb	0	; () banked
 17531  013964  07B4               	decf	delay_us@us& (0+255),f,b
 17532  013966  A0D8               	btfss	status,0,c
 17533  013968  07B5               	decf	(delay_us@us+1)& (0+255),f,b
 17534  01396A  0100               	movlb	0	; () banked
 17535  01396C  29B4               	incf	delay_us@us& (0+255),w,b
 17536  01396E  E1DD               	bnz	l14685
 17537  013970  0100               	movlb	0	; () banked
 17538  013972  29B5               	incf	(delay_us@us+1)& (0+255),w,b
 17539  013974  B4D8               	btfsc	status,2,c
 17540  013976  0012               	return	
 17541  013978  D7D8               	goto	l1384
 17542  01397A                     __end_of_delay_us:
 17543                           	opt stack 0
 17544                           tosu	equ	0xFFF
 17545                           tosh	equ	0xFFE
 17546                           tosl	equ	0xFFD
 17547                           pclath	equ	0xFFA
 17548                           tblptru	equ	0xFF8
 17549                           tblptrh	equ	0xFF7
 17550                           tblptrl	equ	0xFF6
 17551                           tablat	equ	0xFF5
 17552                           prodh	equ	0xFF4
 17553                           prodl	equ	0xFF3
 17554                           intcon	equ	0xFF2
 17555                           indf0	equ	0xFEF
 17556                           postinc0	equ	0xFEE
 17557                           fsr0h	equ	0xFEA
 17558                           fsr0l	equ	0xFE9
 17559                           wreg	equ	0xFE8
 17560                           postdec1	equ	0xFE5
 17561                           fsr1h	equ	0xFE2
 17562                           fsr1l	equ	0xFE1
 17563                           indf2	equ	0xFDF
 17564                           postinc2	equ	0xFDE
 17565                           postdec2	equ	0xFDD
 17566                           plusw2	equ	0xFDB
 17567                           fsr2h	equ	0xFDA
 17568                           fsr2l	equ	0xFD9
 17569                           status	equ	0xFD8
 17570                           
 17571 ;; *************** function _HMI_Render *****************
 17572 ;; Defined at:
 17573 ;;		line 138 in file "HMI.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;		None
 17576 ;; Auto vars:     Size  Location     Type
 17577 ;;  a               2    8[BANK0 ] unsigned short 
 17578 ;; Return value:  Size  Location     Type
 17579 ;;                  1    wreg      void 
 17580 ;; Registers used:
 17581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17582 ;; Tracked objects:
 17583 ;;		On entry : 0/0
 17584 ;;		On exit  : 0/0
 17585 ;;		Unchanged: 0/0
 17586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17591 ;;Total ram usage:        2 bytes
 17592 ;; Hardware stack levels used:    1
 17593 ;; Hardware stack levels required when called:    9
 17594 ;; This function calls:
 17595 ;;		_OutSeg
 17596 ;; This function is called by:
 17597 ;;		_FunctHMI
 17598 ;; This function uses a non-reentrant model
 17599 ;;
 17600                           
 17601                           	psect	text88
 17602  013CFE                     __ptext88:
 17603                           	opt stack 0
 17604  013CFE                     _HMI_Render:
 17605                           	opt stack 20
 17606                           
 17607                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 17608                           
 17609                           ; BSR set to: 0
 17610                           ;incstack = 0
 17611  013CFE  0E00               	movlw	0
 17612  013D00  0100               	movlb	0	; () banked
 17613  013D02  6FBD               	movwf	(HMI_Render@a+1)& (0+255),b
 17614  013D04  0E00               	movlw	0
 17615  013D06  6FBC               	movwf	HMI_Render@a& (0+255),b
 17616  013D08                     l16345:
 17617                           
 17618                           ; BSR set to: 0
 17619  013D08  0100               	movlb	0	; () banked
 17620  013D0A  51BD               	movf	(HMI_Render@a+1)& (0+255),w,b
 17621  013D0C  E116               	bnz	l1788
 17622  013D0E  0E08               	movlw	8
 17623  013D10  0100               	movlb	0	; () banked
 17624  013D12  5DBC               	subwf	HMI_Render@a& (0+255),w,b
 17625  013D14  B0D8               	btfsc	status,0,c
 17626  013D16  0012               	return	
 17627                           
 17628                           ; BSR set to: 0
 17629                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 17630                           
 17631                           ; BSR set to: 0
 17632                           
 17633                           ; BSR set to: 0
 17634  013D18  C0BC  F0B7         	movff	HMI_Render@a,OutSeg@pSegment
 17635  013D1C  0E35               	movlw	low _HMIBoard
 17636  013D1E  0100               	movlb	0	; () banked
 17637  013D20  25BC               	addwf	HMI_Render@a& (0+255),w,b
 17638  013D22  6ED9               	movwf	fsr2l,c
 17639  013D24  0E01               	movlw	high _HMIBoard
 17640  013D26  0100               	movlb	0	; () banked
 17641  013D28  21BD               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 17642  013D2A  6EDA               	movwf	fsr2h,c
 17643  013D2C  50DF               	movf	indf2,w,c
 17644  013D2E  ECBD  F098         	call	_OutSeg
 17645  013D32  0100               	movlb	0	; () banked
 17646  013D34  4BBC               	infsnz	HMI_Render@a& (0+255),f,b
 17647  013D36  2BBD               	incf	(HMI_Render@a+1)& (0+255),f,b
 17648  013D38  D7E7               	goto	l16345
 17649  013D3A                     l1788:
 17650                           
 17651                           ; BSR set to: 0
 17652  013D3A  0012               	return		;funcret
 17653  013D3C                     __end_of_HMI_Render:
 17654                           	opt stack 0
 17655                           tosu	equ	0xFFF
 17656                           tosh	equ	0xFFE
 17657                           tosl	equ	0xFFD
 17658                           pclath	equ	0xFFA
 17659                           tblptru	equ	0xFF8
 17660                           tblptrh	equ	0xFF7
 17661                           tblptrl	equ	0xFF6
 17662                           tablat	equ	0xFF5
 17663                           prodh	equ	0xFF4
 17664                           prodl	equ	0xFF3
 17665                           intcon	equ	0xFF2
 17666                           indf0	equ	0xFEF
 17667                           postinc0	equ	0xFEE
 17668                           fsr0h	equ	0xFEA
 17669                           fsr0l	equ	0xFE9
 17670                           wreg	equ	0xFE8
 17671                           postdec1	equ	0xFE5
 17672                           fsr1h	equ	0xFE2
 17673                           fsr1l	equ	0xFE1
 17674                           indf2	equ	0xFDF
 17675                           postinc2	equ	0xFDE
 17676                           postdec2	equ	0xFDD
 17677                           plusw2	equ	0xFDB
 17678                           fsr2h	equ	0xFDA
 17679                           fsr2l	equ	0xFD9
 17680                           status	equ	0xFD8
 17681                           
 17682 ;; *************** function _OutSeg *****************
 17683 ;; Defined at:
 17684 ;;		line 54 in file "HMI.c"
 17685 ;; Parameters:    Size  Location     Type
 17686 ;;  pInput          1    wreg     unsigned char 
 17687 ;;  pSegment        1    3[BANK0 ] unsigned char 
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;  pInput          1    6[BANK0 ] unsigned char 
 17690 ;;  out             1    7[BANK0 ] volatile unsigned char 
 17691 ;; Return value:  Size  Location     Type
 17692 ;;                  1    wreg      void 
 17693 ;; Registers used:
 17694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17695 ;; Tracked objects:
 17696 ;;		On entry : 0/0
 17697 ;;		On exit  : 0/0
 17698 ;;		Unchanged: 0/0
 17699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17700 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17703 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17704 ;;Total ram usage:        5 bytes
 17705 ;; Hardware stack levels used:    1
 17706 ;; Hardware stack levels required when called:    8
 17707 ;; This function calls:
 17708 ;;		_SPI_Send
 17709 ;; This function is called by:
 17710 ;;		_HMI_Render
 17711 ;;		_HMI_GRender
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           	psect	text89
 17716  01317A                     __ptext89:
 17717                           	opt stack 0
 17718  01317A                     _OutSeg:
 17719                           	opt stack 20
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;incstack = 0
 17723                           ;OutSeg@pInput stored from wreg
 17724  01317A  0100               	movlb	0	; () banked
 17725  01317C  6FBA               	movwf	OutSeg@pInput& (0+255),b
 17726                           
 17727                           ;HMI.c: 58: static UINT8 cur;
 17728                           ;HMI.c: 59: volatile UINT8 out;
 17729                           ;HMI.c: 60: static UINT8 segset;
 17730                           ;HMI.c: 61: static UINT8 a;
 17731                           ;HMI.c: 83: if (pSegment <= 8)
 17732  01317E  0E09               	movlw	9
 17733  013180  0100               	movlb	0	; () banked
 17734  013182  61B7               	cpfslt	OutSeg@pSegment& (0+255),b
 17735  013184  0012               	return	
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;HMI.c: 84: {
 17739                           ;HMI.c: 85: cur = pInput;
 17740  013186  C0BA  F09A         	movff	OutSeg@pInput,OutSeg@cur
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 17744  01318A  0E00               	movlw	0
 17745  01318C  6E3C               	movwf	OutSeg@a,c
 17746  01318E                     l15791:
 17747                           
 17748                           ; BSR set to: 0
 17749  01318E  0E07               	movlw	7
 17750  013190  643C               	cpfsgt	OutSeg@a,c
 17751  013192  D001               	goto	l1776
 17752  013194  D02A               	goto	u12390
 17753  013196                     l1776:
 17754                           
 17755                           ;HMI.c: 87: {
 17756                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 17757                           
 17758                           ; BSR set to: 0
 17759  013196  C09A  F0B8         	movff	OutSeg@cur,??_OutSeg
 17760  01319A  0E01               	movlw	1
 17761  01319C  0100               	movlb	0	; () banked
 17762  01319E  17B8               	andwf	??_OutSeg& (0+255),f,b
 17763  0131A0  0E06               	movlw	6
 17764  0131A2  0100               	movlb	0	; () banked
 17765  0131A4  6FB9               	movwf	(??_OutSeg+1)& (0+255),b
 17766  0131A6                     u12385:
 17767  0131A6  0100               	movlb	0	; () banked
 17768  0131A8  90D8               	bcf	status,0,c
 17769  0131AA  37B8               	rlcf	??_OutSeg& (0+255),f,b
 17770  0131AC  0100               	movlb	0	; () banked
 17771  0131AE  2FB9               	decfsz	(??_OutSeg+1)& (0+255),f,b
 17772  0131B0  D7FA               	goto	u12385
 17773  0131B2  0100               	movlb	0	; () banked
 17774  0131B4  51B8               	movf	??_OutSeg& (0+255),w,b
 17775  0131B6  0100               	movlb	0	; () banked
 17776  0131B8  6F99               	movwf	OutSeg@segset& (0+255),b
 17777                           
 17778                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 17779  0131BA  0100               	movlb	0	; () banked
 17780  0131BC  39B7               	swapf	OutSeg@pSegment& (0+255),w,b
 17781  0131BE  42E8               	rrncf	wreg,f,c
 17782  0131C0  0BF8               	andlw	248
 17783  0131C2  103C               	iorwf	OutSeg@a,w,c
 17784  0131C4  0100               	movlb	0	; () banked
 17785  0131C6  1199               	iorwf	OutSeg@segset& (0+255),w,b
 17786  0131C8  0100               	movlb	0	; () banked
 17787  0131CA  6FBB               	movwf	OutSeg@out& (0+255),b	;volatile
 17788                           
 17789                           ;HMI.c: 90: cur >>= 1;
 17790  0131CC  0100               	movlb	0	; () banked
 17791  0131CE  90D8               	bcf	status,0,c
 17792  0131D0  339A               	rrcf	OutSeg@cur& (0+255),f,b
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 17796  0131D2  0E6F               	movlw	low _SPI1
 17797  0131D4  0100               	movlb	0	; () banked
 17798  0131D6  6FB4               	movwf	SPI_Send@pInput& (0+255),b
 17799  0131D8  0E01               	movlw	high _SPI1
 17800  0131DA  0100               	movlb	0	; () banked
 17801  0131DC  6FB5               	movwf	(SPI_Send@pInput+1)& (0+255),b
 17802  0131DE  C0BB  F0B6         	movff	OutSeg@out,SPI_Send@pData	;volatile
 17803  0131E2  ECD4  F09A         	call	_SPI_Send	;wreg free
 17804  0131E6  2A3C               	incf	OutSeg@a,f,c
 17805  0131E8  D7D2               	goto	l15791
 17806  0131EA                     u12390:
 17807                           
 17808                           ;HMI.c: 96: }
 17809                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 17810  0131EA  0E6F               	movlw	low _SPI1
 17811  0131EC  0100               	movlb	0	; () banked
 17812  0131EE  6FB4               	movwf	SPI_Send@pInput& (0+255),b
 17813  0131F0  0E01               	movlw	high _SPI1
 17814  0131F2  0100               	movlb	0	; () banked
 17815  0131F4  6FB5               	movwf	(SPI_Send@pInput+1)& (0+255),b
 17816  0131F6  0E00               	movlw	0
 17817  0131F8  0100               	movlb	0	; () banked
 17818  0131FA  6FB6               	movwf	SPI_Send@pData& (0+255),b
 17819  0131FC  ECD4  F09A         	call	_SPI_Send	;wreg free
 17820  013200  0012               	return	
 17821  013202                     __end_of_OutSeg:
 17822                           	opt stack 0
 17823                           tosu	equ	0xFFF
 17824                           tosh	equ	0xFFE
 17825                           tosl	equ	0xFFD
 17826                           pclath	equ	0xFFA
 17827                           tblptru	equ	0xFF8
 17828                           tblptrh	equ	0xFF7
 17829                           tblptrl	equ	0xFF6
 17830                           tablat	equ	0xFF5
 17831                           prodh	equ	0xFF4
 17832                           prodl	equ	0xFF3
 17833                           intcon	equ	0xFF2
 17834                           indf0	equ	0xFEF
 17835                           postinc0	equ	0xFEE
 17836                           fsr0h	equ	0xFEA
 17837                           fsr0l	equ	0xFE9
 17838                           wreg	equ	0xFE8
 17839                           postdec1	equ	0xFE5
 17840                           fsr1h	equ	0xFE2
 17841                           fsr1l	equ	0xFE1
 17842                           indf2	equ	0xFDF
 17843                           postinc2	equ	0xFDE
 17844                           postdec2	equ	0xFDD
 17845                           plusw2	equ	0xFDB
 17846                           fsr2h	equ	0xFDA
 17847                           fsr2l	equ	0xFD9
 17848                           status	equ	0xFD8
 17849                           
 17850 ;; *************** function _Console_SetForecolour *****************
 17851 ;; Defined at:
 17852 ;;		line 286 in file "Library/Console.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;  pColour         2    0[BANK0 ] unsigned short 
 17855 ;; Auto vars:     Size  Location     Type
 17856 ;;		None
 17857 ;; Return value:  Size  Location     Type
 17858 ;;                  1    wreg      void 
 17859 ;; Registers used:
 17860 ;;		None
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;Total ram usage:        2 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; Hardware stack levels required when called:    7
 17873 ;; This function calls:
 17874 ;;		Nothing
 17875 ;; This function is called by:
 17876 ;;		_FunctHMI
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           	psect	text90
 17881  014208                     __ptext90:
 17882                           	opt stack 0
 17883  014208                     _Console_SetForecolour:
 17884                           	opt stack 22
 17885                           
 17886                           ;Console.c: 289: gForecolour = pColour;
 17887                           
 17888                           ;incstack = 0
 17889  014208  C0B4  F0F9         	movff	Console_SetForecolour@pColour,_gForecolour
 17890  01420C  C0B5  F0FA         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 17891  014210  0012               	return		;funcret
 17892  014212                     __end_of_Console_SetForecolour:
 17893                           	opt stack 0
 17894                           tosu	equ	0xFFF
 17895                           tosh	equ	0xFFE
 17896                           tosl	equ	0xFFD
 17897                           pclath	equ	0xFFA
 17898                           tblptru	equ	0xFF8
 17899                           tblptrh	equ	0xFF7
 17900                           tblptrl	equ	0xFF6
 17901                           tablat	equ	0xFF5
 17902                           prodh	equ	0xFF4
 17903                           prodl	equ	0xFF3
 17904                           intcon	equ	0xFF2
 17905                           indf0	equ	0xFEF
 17906                           postinc0	equ	0xFEE
 17907                           fsr0h	equ	0xFEA
 17908                           fsr0l	equ	0xFE9
 17909                           wreg	equ	0xFE8
 17910                           postdec1	equ	0xFE5
 17911                           fsr1h	equ	0xFE2
 17912                           fsr1l	equ	0xFE1
 17913                           indf2	equ	0xFDF
 17914                           postinc2	equ	0xFDE
 17915                           postdec2	equ	0xFDD
 17916                           plusw2	equ	0xFDB
 17917                           fsr2h	equ	0xFDA
 17918                           fsr2l	equ	0xFD9
 17919                           status	equ	0xFD8
 17920                           
 17921 ;; *************** function _Console_Render *****************
 17922 ;; Defined at:
 17923 ;;		line 377 in file "Library/Console.c"
 17924 ;; Parameters:    Size  Location     Type
 17925 ;;		None
 17926 ;; Auto vars:     Size  Location     Type
 17927 ;;  lCursor         4   38[BANK0 ] struct Point
 17928 ;;  y               1   43[BANK0 ] unsigned char 
 17929 ;;  x               1   42[BANK0 ] unsigned char 
 17930 ;;  temp            1   37[BANK0 ] unsigned char 
 17931 ;;  Temp            2    0        unsigned short 
 17932 ;; Return value:  Size  Location     Type
 17933 ;;                  1    wreg      void 
 17934 ;; Registers used:
 17935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17936 ;; Tracked objects:
 17937 ;;		On entry : 0/0
 17938 ;;		On exit  : 0/0
 17939 ;;		Unchanged: 0/0
 17940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17942 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17944 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17945 ;;Total ram usage:        9 bytes
 17946 ;; Hardware stack levels used:    1
 17947 ;; Hardware stack levels required when called:   11
 17948 ;; This function calls:
 17949 ;;		_Console_MakeField
 17950 ;;		_LCD_DrawField
 17951 ;;		_LCD_FillRectangle
 17952 ;; This function is called by:
 17953 ;;		_FunctHMI
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           	psect	text91
 17958  010EDC                     __ptext91:
 17959                           	opt stack 0
 17960  010EDC                     _Console_Render:
 17961                           	opt stack 18
 17962                           
 17963                           ;Console.c: 379: Colour Temp;
 17964                           ;Console.c: 380: if (change)
 17965                           
 17966                           ;incstack = 0
 17967  010EDC  0100               	movlb	0	; () banked
 17968  010EDE  51FC               	movf	_change& (0+255),w,b
 17969  010EE0  B4D8               	btfsc	status,2,c
 17970  010EE2  0012               	return	
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;Console.c: 381: {
 17974                           ;Console.c: 382: UINT8 x, y, temp;
 17975                           ;Console.c: 383: Point lCursor = {6,6};
 17976  010EE4  C1F2  F0DA         	movff	Console_Render@F6956,Console_Render@lCursor
 17977  010EE8  C1F3  F0DB         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 17978  010EEC  C1F4  F0DC         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 17979  010EF0  C1F5  F0DD         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 17980                           
 17981                           ; BSR set to: 0
 17982                           ;Console.c: 385: if (clearall)
 17983  010EF4  0100               	movlb	0	; () banked
 17984  010EF6  519D               	movf	_clearall& (0+255),w,b
 17985  010EF8  B4D8               	btfsc	status,2,c
 17986  010EFA  D005               	goto	l1678
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;Console.c: 386: {
 17990                           ;Console.c: 389: temp = lBufferY;
 17991  010EFC  C09B  F0D9         	movff	_lBufferY,Console_Render@temp
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 17995  010F00  0E0F               	movlw	15
 17996  010F02  0100               	movlb	0	; () banked
 17997  010F04  6F9B               	movwf	_lBufferY& (0+255),b
 17998  010F06                     l1678:
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;Console.c: 391: }
 18002                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 18003  010F06  0E00               	movlw	0
 18004  010F08  0100               	movlb	0	; () banked
 18005  010F0A  6FDF               	movwf	Console_Render@y& (0+255),b
 18006  010F0C  D0DF               	goto	l1679
 18007  010F0E                     
 18008                           ; BSR set to: 0
 18009                           ;Console.c: 394: {
 18010                           ;Console.c: 395: gForecolour = lCBuffer[y];
 18011                           
 18012                           ; BSR set to: 0
 18013  010F0E  0100               	movlb	0	; () banked
 18014  010F10  51DF               	movf	Console_Render@y& (0+255),w,b
 18015  010F12  0D02               	mullw	2
 18016  010F14  0E24               	movlw	low _lCBuffer
 18017  010F16  24F3               	addwf	prodl,w,c
 18018  010F18  6ED9               	movwf	fsr2l,c
 18019  010F1A  0E02               	movlw	high _lCBuffer
 18020  010F1C  20F4               	addwfc	prodh,w,c
 18021  010F1E  6EDA               	movwf	fsr2h,c
 18022  010F20  CFDE F0F9          	movff	postinc2,_gForecolour
 18023  010F24  CFDD F0FA          	movff	postdec2,_gForecolour+1
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18027  010F28  0E00               	movlw	0
 18028  010F2A  0100               	movlb	0	; () banked
 18029  010F2C  6FDE               	movwf	Console_Render@x& (0+255),b
 18030  010F2E                     l16291:
 18031                           
 18032                           ; BSR set to: 0
 18033  010F2E  0E13               	movlw	19
 18034  010F30  0100               	movlb	0	; () banked
 18035  010F32  65DE               	cpfsgt	Console_Render@x& (0+255),b
 18036  010F34  D001               	goto	l1681
 18037  010F36  D0BE               	goto	u13130
 18038  010F38                     l1681:
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;Console.c: 397: {
 18042                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 18043                           
 18044                           ; BSR set to: 0
 18045  010F38  0100               	movlb	0	; () banked
 18046  010F3A  51DF               	movf	Console_Render@y& (0+255),w,b
 18047  010F3C  0D14               	mullw	20
 18048  010F3E  0E11               	movlw	low _lBuffer
 18049  010F40  0100               	movlb	0	; () banked
 18050  010F42  6FD7               	movwf	??_Console_Render& (0+255),b
 18051  010F44  0E0C               	movlw	high _lBuffer
 18052  010F46  0100               	movlb	0	; () banked
 18053  010F48  6FD8               	movwf	(??_Console_Render+1)& (0+255),b
 18054  010F4A  50F3               	movf	prodl,w,c
 18055  010F4C  0100               	movlb	0	; () banked
 18056  010F4E  27D7               	addwf	??_Console_Render& (0+255),f,b
 18057  010F50  50F4               	movf	prodh,w,c
 18058  010F52  0100               	movlb	0	; () banked
 18059  010F54  23D8               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18060  010F56  0100               	movlb	0	; () banked
 18061  010F58  51DE               	movf	Console_Render@x& (0+255),w,b
 18062  010F5A  0D01               	mullw	1
 18063  010F5C  50F3               	movf	prodl,w,c
 18064  010F5E  0100               	movlb	0	; () banked
 18065  010F60  25D7               	addwf	??_Console_Render& (0+255),w,b
 18066  010F62  6ED9               	movwf	fsr2l,c
 18067  010F64  50F4               	movf	prodh,w,c
 18068  010F66  0100               	movlb	0	; () banked
 18069  010F68  21D8               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18070  010F6A  6EDA               	movwf	fsr2h,c
 18071  010F6C  AEDF               	btfss	indf2,7,c
 18072  010F6E  D09A               	goto	l1685
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;Console.c: 399: {
 18076                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 18077  010F70  0100               	movlb	0	; () banked
 18078  010F72  51DF               	movf	Console_Render@y& (0+255),w,b
 18079  010F74  0D14               	mullw	20
 18080  010F76  0E11               	movlw	low _lBuffer
 18081  010F78  0100               	movlb	0	; () banked
 18082  010F7A  6FD7               	movwf	??_Console_Render& (0+255),b
 18083  010F7C  0E0C               	movlw	high _lBuffer
 18084  010F7E  0100               	movlb	0	; () banked
 18085  010F80  6FD8               	movwf	(??_Console_Render+1)& (0+255),b
 18086  010F82  50F3               	movf	prodl,w,c
 18087  010F84  0100               	movlb	0	; () banked
 18088  010F86  27D7               	addwf	??_Console_Render& (0+255),f,b
 18089  010F88  50F4               	movf	prodh,w,c
 18090  010F8A  0100               	movlb	0	; () banked
 18091  010F8C  23D8               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18092  010F8E  0100               	movlb	0	; () banked
 18093  010F90  51DE               	movf	Console_Render@x& (0+255),w,b
 18094  010F92  0D01               	mullw	1
 18095  010F94  50F3               	movf	prodl,w,c
 18096  010F96  0100               	movlb	0	; () banked
 18097  010F98  25D7               	addwf	??_Console_Render& (0+255),w,b
 18098  010F9A  6ED9               	movwf	fsr2l,c
 18099  010F9C  50F4               	movf	prodh,w,c
 18100  010F9E  0100               	movlb	0	; () banked
 18101  010FA0  21D8               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18102  010FA2  6EDA               	movwf	fsr2h,c
 18103  010FA4  0E7F               	movlw	127
 18104  010FA6  16DF               	andwf	indf2,f,c
 18105                           
 18106                           ;Console.c: 401: if (lBuffer[y][x])
 18107  010FA8  0100               	movlb	0	; () banked
 18108  010FAA  51DF               	movf	Console_Render@y& (0+255),w,b
 18109  010FAC  0D14               	mullw	20
 18110  010FAE  0E11               	movlw	low _lBuffer
 18111  010FB0  0100               	movlb	0	; () banked
 18112  010FB2  6FD7               	movwf	??_Console_Render& (0+255),b
 18113  010FB4  0E0C               	movlw	high _lBuffer
 18114  010FB6  0100               	movlb	0	; () banked
 18115  010FB8  6FD8               	movwf	(??_Console_Render+1)& (0+255),b
 18116  010FBA  50F3               	movf	prodl,w,c
 18117  010FBC  0100               	movlb	0	; () banked
 18118  010FBE  27D7               	addwf	??_Console_Render& (0+255),f,b
 18119  010FC0  50F4               	movf	prodh,w,c
 18120  010FC2  0100               	movlb	0	; () banked
 18121  010FC4  23D8               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18122  010FC6  0100               	movlb	0	; () banked
 18123  010FC8  51DE               	movf	Console_Render@x& (0+255),w,b
 18124  010FCA  0D01               	mullw	1
 18125  010FCC  50F3               	movf	prodl,w,c
 18126  010FCE  0100               	movlb	0	; () banked
 18127  010FD0  25D7               	addwf	??_Console_Render& (0+255),w,b
 18128  010FD2  6ED9               	movwf	fsr2l,c
 18129  010FD4  50F4               	movf	prodh,w,c
 18130  010FD6  0100               	movlb	0	; () banked
 18131  010FD8  21D8               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18132  010FDA  6EDA               	movwf	fsr2h,c
 18133  010FDC  50DF               	movf	indf2,w,c
 18134  010FDE  B4D8               	btfsc	status,2,c
 18135  010FE0  D04A               	goto	l1684
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;Console.c: 402: {
 18139                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 18140  010FE2  C087  F0BD         	movff	_gBackcolour,LCD_FillRectangle@pColour
 18141  010FE6  C088  F0BE         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 18142  010FEA  C0DA  F0BF         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18143  010FEE  C0DB  F0C0         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18144  010FF2  C0DC  F0C1         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18145  010FF6  C0DD  F0C2         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18146  010FFA  C1FA  F0C3         	movff	_gCharSize,LCD_FillRectangle@pSize
 18147  010FFE  C1FB  F0C4         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18148  011002  C1FC  F0C5         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18149  011006  C1FD  F0C6         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18150  01100A  EC2A  F09A         	call	_LCD_FillRectangle	;wreg free
 18151                           
 18152                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 18153  01100E  0100               	movlb	0	; () banked
 18154  011010  51DF               	movf	Console_Render@y& (0+255),w,b
 18155  011012  0D14               	mullw	20
 18156  011014  0E11               	movlw	low _lBuffer
 18157  011016  0100               	movlb	0	; () banked
 18158  011018  6FD7               	movwf	??_Console_Render& (0+255),b
 18159  01101A  0E0C               	movlw	high _lBuffer
 18160  01101C  0100               	movlb	0	; () banked
 18161  01101E  6FD8               	movwf	(??_Console_Render+1)& (0+255),b
 18162  011020  50F3               	movf	prodl,w,c
 18163  011022  0100               	movlb	0	; () banked
 18164  011024  27D7               	addwf	??_Console_Render& (0+255),f,b
 18165  011026  50F4               	movf	prodh,w,c
 18166  011028  0100               	movlb	0	; () banked
 18167  01102A  23D8               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18168  01102C  0100               	movlb	0	; () banked
 18169  01102E  51DE               	movf	Console_Render@x& (0+255),w,b
 18170  011030  0D01               	mullw	1
 18171  011032  50F3               	movf	prodl,w,c
 18172  011034  0100               	movlb	0	; () banked
 18173  011036  25D7               	addwf	??_Console_Render& (0+255),w,b
 18174  011038  6ED9               	movwf	fsr2l,c
 18175  01103A  50F4               	movf	prodh,w,c
 18176  01103C  0100               	movlb	0	; () banked
 18177  01103E  21D8               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18178  011040  6EDA               	movwf	fsr2h,c
 18179  011042  50DF               	movf	indf2,w,c
 18180  011044  EC44  F092         	call	_Console_MakeField
 18181  011048  C0B9  F0C6         	movff	?_Console_MakeField,LCD_DrawField@pField
 18182  01104C  C0BA  F0C7         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 18183  011050  C0DA  F0C8         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 18184  011054  C0DB  F0C9         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 18185  011058  C0DC  F0CA         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 18186  01105C  C0DD  F0CB         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 18187  011060  C1FA  F0CC         	movff	_gCharSize,LCD_DrawField@pSize
 18188  011064  C1FB  F0CD         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 18189  011068  C1FC  F0CE         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 18190  01106C  C1FD  F0CF         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 18191  011070  EC43  F097         	call	_LCD_DrawField	;wreg free
 18192                           
 18193                           ;Console.c: 405: }
 18194  011074  D017               	goto	l1685
 18195  011076                     l1684:
 18196                           
 18197                           ;Console.c: 406: else
 18198                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 18199  011076  0E00               	movlw	0
 18200  011078  0100               	movlb	0	; () banked
 18201  01107A  6FBE               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 18202  01107C  0E00               	movlw	0
 18203  01107E  6FBD               	movwf	LCD_FillRectangle@pColour& (0+255),b
 18204  011080  C0DA  F0BF         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18205  011084  C0DB  F0C0         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18206  011088  C0DC  F0C1         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18207  01108C  C0DD  F0C2         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18208  011090  C1FA  F0C3         	movff	_gCharSize,LCD_FillRectangle@pSize
 18209  011094  C1FB  F0C4         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18210  011098  C1FC  F0C5         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18211  01109C  C1FD  F0C6         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18212  0110A0  EC2A  F09A         	call	_LCD_FillRectangle	;wreg free
 18213  0110A4                     l1685:
 18214                           
 18215                           ;Console.c: 408: }
 18216                           ;Console.c: 409: lCursor.x += (5 + 1);
 18217  0110A4  0E06               	movlw	6
 18218  0110A6  0100               	movlb	0	; () banked
 18219  0110A8  27DA               	addwf	Console_Render@lCursor& (0+255),f,b
 18220  0110AA  0E00               	movlw	0
 18221  0110AC  23DB               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 18222                           
 18223                           ; BSR set to: 0
 18224  0110AE  0100               	movlb	0	; () banked
 18225  0110B0  2BDE               	incf	Console_Render@x& (0+255),f,b
 18226  0110B2  D73D               	goto	l16291
 18227  0110B4                     u13130:
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;Console.c: 410: }
 18231                           ;Console.c: 411: lCursor.y += (7 + 1);
 18232                           
 18233                           ; BSR set to: 0
 18234  0110B4  0E08               	movlw	8
 18235  0110B6  0100               	movlb	0	; () banked
 18236  0110B8  27DC               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 18237  0110BA  0E00               	movlw	0
 18238  0110BC  23DD               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 18239                           
 18240                           ; BSR set to: 0
 18241                           ;Console.c: 412: lCursor.x = 6;
 18242  0110BE  0E00               	movlw	0
 18243  0110C0  0100               	movlb	0	; () banked
 18244  0110C2  6FDB               	movwf	(Console_Render@lCursor+1)& (0+255),b
 18245  0110C4  0E06               	movlw	6
 18246  0110C6  6FDA               	movwf	Console_Render@lCursor& (0+255),b
 18247                           
 18248                           ; BSR set to: 0
 18249  0110C8  0100               	movlb	0	; () banked
 18250  0110CA  2BDF               	incf	Console_Render@y& (0+255),f,b
 18251  0110CC                     l1679:
 18252                           
 18253                           ; BSR set to: 0
 18254                           
 18255                           ; BSR set to: 0
 18256  0110CC  0100               	movlb	0	; () banked
 18257  0110CE  51DF               	movf	Console_Render@y& (0+255),w,b
 18258  0110D0  0100               	movlb	0	; () banked
 18259  0110D2  5D9B               	subwf	_lBufferY& (0+255),w,b
 18260  0110D4  B0D8               	btfsc	status,0,c
 18261  0110D6  D71B               	goto	l1680
 18262                           
 18263                           ; BSR set to: 0
 18264                           ;Console.c: 413: }
 18265                           ;Console.c: 415: if (clearall)
 18266                           
 18267                           ; BSR set to: 0
 18268  0110D8  0100               	movlb	0	; () banked
 18269  0110DA  519D               	movf	_clearall& (0+255),w,b
 18270  0110DC  B4D8               	btfsc	status,2,c
 18271  0110DE  0012               	return	
 18272                           
 18273                           ; BSR set to: 0
 18274                           ;Console.c: 416: {
 18275                           ;Console.c: 417: clearall = 0;
 18276  0110E0  0E00               	movlw	0
 18277  0110E2  0100               	movlb	0	; () banked
 18278  0110E4  6F9D               	movwf	_clearall& (0+255),b
 18279                           
 18280                           ; BSR set to: 0
 18281                           ;Console.c: 418: lBufferY = temp;
 18282  0110E6  C0D9  F09B         	movff	Console_Render@temp,_lBufferY
 18283                           
 18284                           ; BSR set to: 0
 18285  0110EA  0012               	return	
 18286  0110EC                     __end_of_Console_Render:
 18287                           	opt stack 0
 18288                           tosu	equ	0xFFF
 18289                           tosh	equ	0xFFE
 18290                           tosl	equ	0xFFD
 18291                           pclath	equ	0xFFA
 18292                           tblptru	equ	0xFF8
 18293                           tblptrh	equ	0xFF7
 18294                           tblptrl	equ	0xFF6
 18295                           tablat	equ	0xFF5
 18296                           prodh	equ	0xFF4
 18297                           prodl	equ	0xFF3
 18298                           intcon	equ	0xFF2
 18299                           indf0	equ	0xFEF
 18300                           postinc0	equ	0xFEE
 18301                           fsr0h	equ	0xFEA
 18302                           fsr0l	equ	0xFE9
 18303                           wreg	equ	0xFE8
 18304                           postdec1	equ	0xFE5
 18305                           fsr1h	equ	0xFE2
 18306                           fsr1l	equ	0xFE1
 18307                           indf2	equ	0xFDF
 18308                           postinc2	equ	0xFDE
 18309                           postdec2	equ	0xFDD
 18310                           plusw2	equ	0xFDB
 18311                           fsr2h	equ	0xFDA
 18312                           fsr2l	equ	0xFD9
 18313                           status	equ	0xFD8
 18314                           
 18315 ;; *************** function _LCD_FillRectangle *****************
 18316 ;; Defined at:
 18317 ;;		line 318 in file "Library/LCD.c"
 18318 ;; Parameters:    Size  Location     Type
 18319 ;;  pColour         2    9[BANK0 ] unsigned short 
 18320 ;;  pPoint          4   11[BANK0 ] struct Point
 18321 ;;  pSize           4   15[BANK0 ] struct Point
 18322 ;; Auto vars:     Size  Location     Type
 18323 ;;  j               1   22[BANK0 ] unsigned char 
 18324 ;;  i               1   21[BANK0 ] unsigned char 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;                  1    wreg      void 
 18327 ;; Registers used:
 18328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18334 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18337 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18338 ;;Total ram usage:       14 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:   10
 18341 ;; This function calls:
 18342 ;;		_LCD_Word_Write
 18343 ;;		_Set_Addr_Window
 18344 ;; This function is called by:
 18345 ;;		_Console_Render
 18346 ;;		_Console_ClearLine
 18347 ;;		_TetrisFieldDraw
 18348 ;; This function uses a non-reentrant model
 18349 ;;
 18350                           
 18351                           	psect	text92
 18352  013454                     __ptext92:
 18353                           	opt stack 0
 18354  013454                     _LCD_FillRectangle:
 18355                           	opt stack 18
 18356                           
 18357                           ;LCD.c: 320: UINT8 i = 0x00;
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;incstack = 0
 18361  013454  0E00               	movlw	0
 18362  013456  0100               	movlb	0	; () banked
 18363  013458  6FC9               	movwf	LCD_FillRectangle@i& (0+255),b
 18364                           
 18365                           ;LCD.c: 321: UINT8 j = 0x00;
 18366  01345A  0E00               	movlw	0
 18367  01345C  0100               	movlb	0	; () banked
 18368  01345E  6FCA               	movwf	LCD_FillRectangle@j& (0+255),b
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 18372  013460  C0C1  F0B9         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 18373  013464  0100               	movlb	0	; () banked
 18374  013466  51BF               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18375  013468  0100               	movlb	0	; () banked
 18376  01346A  25C3               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 18377  01346C  0100               	movlb	0	; () banked
 18378  01346E  6FC7               	movwf	??_LCD_FillRectangle& (0+255),b
 18379  013470  0100               	movlb	0	; () banked
 18380  013472  05C7               	decf	??_LCD_FillRectangle& (0+255),w,b
 18381  013474  0100               	movlb	0	; () banked
 18382  013476  6FBA               	movwf	Set_Addr_Window@xe& (0+255),b
 18383  013478  0100               	movlb	0	; () banked
 18384  01347A  51C1               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 18385  01347C  0100               	movlb	0	; () banked
 18386  01347E  25C5               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 18387  013480  0100               	movlb	0	; () banked
 18388  013482  6FC8               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 18389  013484  0100               	movlb	0	; () banked
 18390  013486  05C8               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 18391  013488  0100               	movlb	0	; () banked
 18392  01348A  6FBB               	movwf	Set_Addr_Window@ye& (0+255),b
 18393  01348C  0100               	movlb	0	; () banked
 18394  01348E  51BF               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18395  013490  EC4D  F095         	call	_Set_Addr_Window
 18396                           
 18397                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 18398  013494  C0C5  F0CA         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 18399  013498                     l15245:
 18400  013498  0100               	movlb	0	; () banked
 18401  01349A  51CA               	movf	LCD_FillRectangle@j& (0+255),w,b
 18402  01349C  0100               	movlb	0	; () banked
 18403  01349E  B4D8               	btfsc	status,2,c
 18404  0134A0  0012               	return	
 18405                           
 18406                           ; BSR set to: 0
 18407                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 18408                           
 18409                           ; BSR set to: 0
 18410  0134A2  C0C3  F0C9         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 18411  0134A6                     l15249:
 18412                           
 18413                           ; BSR set to: 0
 18414  0134A6  0100               	movlb	0	; () banked
 18415  0134A8  51C9               	movf	LCD_FillRectangle@i& (0+255),w,b
 18416  0134AA  0100               	movlb	0	; () banked
 18417  0134AC  B4D8               	btfsc	status,2,c
 18418  0134AE  D009               	goto	u12160
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;LCD.c: 333: LCD_Word_Write(pColour);
 18422                           
 18423                           ; BSR set to: 0
 18424                           
 18425                           ; BSR set to: 0
 18426  0134B0  C0BD  F0B9         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 18427  0134B4  C0BE  F0BA         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 18428  0134B8  EC8B  F0A0         	call	_LCD_Word_Write	;wreg free
 18429  0134BC  0100               	movlb	0	; () banked
 18430  0134BE  07C9               	decf	LCD_FillRectangle@i& (0+255),f,b
 18431  0134C0  D7F2               	goto	l15249
 18432  0134C2                     u12160:
 18433                           
 18434                           ; BSR set to: 0
 18435                           
 18436                           ; BSR set to: 0
 18437  0134C2  0100               	movlb	0	; () banked
 18438  0134C4  07CA               	decf	LCD_FillRectangle@j& (0+255),f,b
 18439  0134C6  D7E8               	goto	l15245
 18440  0134C8                     __end_of_LCD_FillRectangle:
 18441                           	opt stack 0
 18442                           tosu	equ	0xFFF
 18443                           tosh	equ	0xFFE
 18444                           tosl	equ	0xFFD
 18445                           pclath	equ	0xFFA
 18446                           tblptru	equ	0xFF8
 18447                           tblptrh	equ	0xFF7
 18448                           tblptrl	equ	0xFF6
 18449                           tablat	equ	0xFF5
 18450                           prodh	equ	0xFF4
 18451                           prodl	equ	0xFF3
 18452                           intcon	equ	0xFF2
 18453                           indf0	equ	0xFEF
 18454                           postinc0	equ	0xFEE
 18455                           fsr0h	equ	0xFEA
 18456                           fsr0l	equ	0xFE9
 18457                           wreg	equ	0xFE8
 18458                           postdec1	equ	0xFE5
 18459                           fsr1h	equ	0xFE2
 18460                           fsr1l	equ	0xFE1
 18461                           indf2	equ	0xFDF
 18462                           postinc2	equ	0xFDE
 18463                           postdec2	equ	0xFDD
 18464                           plusw2	equ	0xFDB
 18465                           fsr2h	equ	0xFDA
 18466                           fsr2l	equ	0xFD9
 18467                           status	equ	0xFD8
 18468                           
 18469 ;; *************** function _LCD_DrawField *****************
 18470 ;; Defined at:
 18471 ;;		line 393 in file "Library/LCD.c"
 18472 ;; Parameters:    Size  Location     Type
 18473 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 18474 ;;		 -> Console_MakeField@Fill(70), 
 18475 ;;  pPoint          4   20[BANK0 ] struct Point
 18476 ;;  pSize           4   24[BANK0 ] struct Point
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;  count           2   30[BANK0 ] unsigned short 
 18479 ;;  i               1   34[BANK0 ] unsigned char 
 18480 ;;  ymax            1   33[BANK0 ] unsigned char 
 18481 ;;  xmax            1   32[BANK0 ] unsigned char 
 18482 ;; Return value:  Size  Location     Type
 18483 ;;                  1    wreg      void 
 18484 ;; Registers used:
 18485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18486 ;; Tracked objects:
 18487 ;;		On entry : 0/0
 18488 ;;		On exit  : 0/0
 18489 ;;		Unchanged: 0/0
 18490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18491 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;Total ram usage:       17 bytes
 18496 ;; Hardware stack levels used:    1
 18497 ;; Hardware stack levels required when called:   10
 18498 ;; This function calls:
 18499 ;;		_LCD_Word_Write
 18500 ;;		_Set_Addr_Window
 18501 ;;		___wmul
 18502 ;; This function is called by:
 18503 ;;		_Console_Render
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           	psect	text93
 18508  012E86                     __ptext93:
 18509                           	opt stack 0
 18510  012E86                     _LCD_DrawField:
 18511                           	opt stack 18
 18512                           
 18513                           ;LCD.c: 396: UINT8 i = 0x00;
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;incstack = 0
 18517  012E86  0E00               	movlw	0
 18518  012E88  0100               	movlb	0	; () banked
 18519  012E8A  6FD6               	movwf	LCD_DrawField@i& (0+255),b
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 18523  012E8C  0100               	movlb	0	; () banked
 18524  012E8E  51C8               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18525  012E90  0100               	movlb	0	; () banked
 18526  012E92  25CC               	addwf	LCD_DrawField@pSize& (0+255),w,b
 18527  012E94  0100               	movlb	0	; () banked
 18528  012E96  6FD4               	movwf	LCD_DrawField@xmax& (0+255),b
 18529                           
 18530                           ; BSR set to: 0
 18531                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 18532  012E98  0100               	movlb	0	; () banked
 18533  012E9A  51CA               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 18534  012E9C  0100               	movlb	0	; () banked
 18535  012E9E  25CE               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 18536  012EA0  0100               	movlb	0	; () banked
 18537  012EA2  6FD5               	movwf	LCD_DrawField@ymax& (0+255),b
 18538                           
 18539                           ; BSR set to: 0
 18540                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 18541  012EA4  C0CE  F0B4         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 18542  012EA8  C0CF  F0B5         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 18543  012EAC  C0CC  F0B6         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 18544  012EB0  C0CD  F0B7         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 18545  012EB4  ECD6  F09E         	call	___wmul	;wreg free
 18546  012EB8  C0B4  F0D2         	movff	?___wmul,LCD_DrawField@count
 18547  012EBC  C0B5  F0D3         	movff	?___wmul+1,LCD_DrawField@count+1
 18548                           
 18549                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 18550  012EC0  C0CA  F0B9         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 18551  012EC4  0100               	movlb	0	; () banked
 18552  012EC6  05D4               	decf	LCD_DrawField@xmax& (0+255),w,b
 18553  012EC8  0100               	movlb	0	; () banked
 18554  012ECA  6FBA               	movwf	Set_Addr_Window@xe& (0+255),b
 18555  012ECC  0100               	movlb	0	; () banked
 18556  012ECE  05D5               	decf	LCD_DrawField@ymax& (0+255),w,b
 18557  012ED0  0100               	movlb	0	; () banked
 18558  012ED2  6FBB               	movwf	Set_Addr_Window@ye& (0+255),b
 18559  012ED4  0100               	movlb	0	; () banked
 18560  012ED6  51C8               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18561  012ED8  EC4D  F095         	call	_Set_Addr_Window
 18562                           
 18563                           ;LCD.c: 403: for(i = 0; i < count; i++)
 18564  012EDC  0E00               	movlw	0
 18565  012EDE  0100               	movlb	0	; () banked
 18566  012EE0  6FD6               	movwf	LCD_DrawField@i& (0+255),b
 18567  012EE2  D013               	goto	l735
 18568  012EE4                     
 18569                           ; BSR set to: 0
 18570                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 18571                           
 18572                           ; BSR set to: 0
 18573  012EE4  0100               	movlb	0	; () banked
 18574  012EE6  51D6               	movf	LCD_DrawField@i& (0+255),w,b
 18575  012EE8  0D02               	mullw	2
 18576  012EEA  50F3               	movf	prodl,w,c
 18577  012EEC  0100               	movlb	0	; () banked
 18578  012EEE  25C6               	addwf	LCD_DrawField@pField& (0+255),w,b
 18579  012EF0  6ED9               	movwf	fsr2l,c
 18580  012EF2  50F4               	movf	prodh,w,c
 18581  012EF4  0100               	movlb	0	; () banked
 18582  012EF6  21C7               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 18583  012EF8  6EDA               	movwf	fsr2h,c
 18584  012EFA  CFDE F0B9          	movff	postinc2,LCD_Word_Write@value
 18585  012EFE  CFDD F0BA          	movff	postdec2,LCD_Word_Write@value+1
 18586  012F02  EC8B  F0A0         	call	_LCD_Word_Write	;wreg free
 18587  012F06  0100               	movlb	0	; () banked
 18588  012F08  2BD6               	incf	LCD_DrawField@i& (0+255),f,b
 18589  012F0A                     l735:
 18590                           
 18591                           ; BSR set to: 0
 18592                           
 18593                           ; BSR set to: 0
 18594  012F0A  0100               	movlb	0	; () banked
 18595  012F0C  51D6               	movf	LCD_DrawField@i& (0+255),w,b
 18596  012F0E  0100               	movlb	0	; () banked
 18597  012F10  6FD0               	movwf	??_LCD_DrawField& (0+255),b
 18598  012F12  6BD1               	clrf	(??_LCD_DrawField+1)& (0+255),b
 18599  012F14  0100               	movlb	0	; () banked
 18600  012F16  51D2               	movf	LCD_DrawField@count& (0+255),w,b
 18601  012F18  0100               	movlb	0	; () banked
 18602  012F1A  5DD0               	subwf	??_LCD_DrawField& (0+255),w,b
 18603  012F1C  0100               	movlb	0	; () banked
 18604  012F1E  51D3               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 18605  012F20  0100               	movlb	0	; () banked
 18606  012F22  59D1               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 18607  012F24  B0D8               	btfsc	status,0,c
 18608  012F26  0012               	return	
 18609  012F28  D7DD               	goto	l736
 18610  012F2A                     __end_of_LCD_DrawField:
 18611                           	opt stack 0
 18612                           tosu	equ	0xFFF
 18613                           tosh	equ	0xFFE
 18614                           tosl	equ	0xFFD
 18615                           pclath	equ	0xFFA
 18616                           tblptru	equ	0xFF8
 18617                           tblptrh	equ	0xFF7
 18618                           tblptrl	equ	0xFF6
 18619                           tablat	equ	0xFF5
 18620                           prodh	equ	0xFF4
 18621                           prodl	equ	0xFF3
 18622                           intcon	equ	0xFF2
 18623                           indf0	equ	0xFEF
 18624                           postinc0	equ	0xFEE
 18625                           fsr0h	equ	0xFEA
 18626                           fsr0l	equ	0xFE9
 18627                           wreg	equ	0xFE8
 18628                           postdec1	equ	0xFE5
 18629                           fsr1h	equ	0xFE2
 18630                           fsr1l	equ	0xFE1
 18631                           indf2	equ	0xFDF
 18632                           postinc2	equ	0xFDE
 18633                           postdec2	equ	0xFDD
 18634                           plusw2	equ	0xFDB
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function ___wmul *****************
 18640 ;; Defined at:
 18641 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18644 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18645 ;; Auto vars:     Size  Location     Type
 18646 ;;  product         2    4[BANK0 ] unsigned int 
 18647 ;; Return value:  Size  Location     Type
 18648 ;;                  2    0[BANK0 ] unsigned int 
 18649 ;; Registers used:
 18650 ;;		wreg, status,2, status,0, prodl, prodh
 18651 ;; Tracked objects:
 18652 ;;		On entry : 0/0
 18653 ;;		On exit  : 0/0
 18654 ;;		Unchanged: 0/0
 18655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;Total ram usage:        6 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:    7
 18663 ;; This function calls:
 18664 ;;		Nothing
 18665 ;; This function is called by:
 18666 ;;		_LCD_DrawField
 18667 ;;		_TetrisBlockFrame
 18668 ;; This function uses a non-reentrant model
 18669 ;;
 18670                           
 18671                           	psect	text94
 18672  013DAC                     __ptext94:
 18673                           	opt stack 0
 18674  013DAC                     ___wmul:
 18675                           	opt stack 20
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;incstack = 0
 18679  013DAC  0100               	movlb	0	; () banked
 18680  013DAE  51B4               	movf	___wmul@multiplier& (0+255),w,b
 18681  013DB0  0100               	movlb	0	; () banked
 18682  013DB2  03B6               	mulwf	___wmul@multiplicand& (0+255),b
 18683  013DB4  CFF3 F0B8          	movff	prodl,___wmul@product
 18684  013DB8  CFF4 F0B9          	movff	prodh,___wmul@product+1
 18685  013DBC  0100               	movlb	0	; () banked
 18686  013DBE  51B4               	movf	___wmul@multiplier& (0+255),w,b
 18687  013DC0  0100               	movlb	0	; () banked
 18688  013DC2  03B7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18689  013DC4  50F3               	movf	prodl,w,c
 18690  013DC6  0100               	movlb	0	; () banked
 18691  013DC8  27B9               	addwf	(___wmul@product+1)& (0+255),f,b
 18692  013DCA  0100               	movlb	0	; () banked
 18693  013DCC  51B5               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18694  013DCE  0100               	movlb	0	; () banked
 18695  013DD0  03B6               	mulwf	___wmul@multiplicand& (0+255),b
 18696  013DD2  50F3               	movf	prodl,w,c
 18697  013DD4  0100               	movlb	0	; () banked
 18698  013DD6  27B9               	addwf	(___wmul@product+1)& (0+255),f,b
 18699                           
 18700                           ; BSR set to: 0
 18701  013DD8  C0B8  F0B4         	movff	___wmul@product,?___wmul
 18702  013DDC  C0B9  F0B5         	movff	___wmul@product+1,?___wmul+1
 18703  013DE0  0012               	return	
 18704  013DE2                     __end_of___wmul:
 18705                           	opt stack 0
 18706                           tosu	equ	0xFFF
 18707                           tosh	equ	0xFFE
 18708                           tosl	equ	0xFFD
 18709                           pclath	equ	0xFFA
 18710                           tblptru	equ	0xFF8
 18711                           tblptrh	equ	0xFF7
 18712                           tblptrl	equ	0xFF6
 18713                           tablat	equ	0xFF5
 18714                           prodh	equ	0xFF4
 18715                           prodl	equ	0xFF3
 18716                           intcon	equ	0xFF2
 18717                           indf0	equ	0xFEF
 18718                           postinc0	equ	0xFEE
 18719                           fsr0h	equ	0xFEA
 18720                           fsr0l	equ	0xFE9
 18721                           wreg	equ	0xFE8
 18722                           postdec1	equ	0xFE5
 18723                           fsr1h	equ	0xFE2
 18724                           fsr1l	equ	0xFE1
 18725                           indf2	equ	0xFDF
 18726                           postinc2	equ	0xFDE
 18727                           postdec2	equ	0xFDD
 18728                           plusw2	equ	0xFDB
 18729                           fsr2h	equ	0xFDA
 18730                           fsr2l	equ	0xFD9
 18731                           status	equ	0xFD8
 18732                           
 18733 ;; *************** function _Set_Addr_Window *****************
 18734 ;; Defined at:
 18735 ;;		line 214 in file "Library/LCD.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;  xs              1    wreg     unsigned char 
 18738 ;;  ys              1    5[BANK0 ] unsigned char 
 18739 ;;  xe              1    6[BANK0 ] unsigned char 
 18740 ;;  ye              1    7[BANK0 ] unsigned char 
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;  xs              1    8[BANK0 ] unsigned char 
 18743 ;; Return value:  Size  Location     Type
 18744 ;;                  1    wreg      void 
 18745 ;; Registers used:
 18746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18747 ;; Tracked objects:
 18748 ;;		On entry : 0/0
 18749 ;;		On exit  : 0/0
 18750 ;;		Unchanged: 0/0
 18751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18752 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18756 ;;Total ram usage:        4 bytes
 18757 ;; Hardware stack levels used:    1
 18758 ;; Hardware stack levels required when called:    9
 18759 ;; This function calls:
 18760 ;;		_LCD_Write
 18761 ;; This function is called by:
 18762 ;;		_LCD_Fill
 18763 ;;		_LCD_FillRectangle
 18764 ;;		_LCD_DrawField
 18765 ;;		_RAM_Address_Set
 18766 ;;		_LCD_DrawPixel
 18767 ;;		_BlockDraw
 18768 ;;		_BlockClear
 18769 ;; This function uses a non-reentrant model
 18770 ;;
 18771                           
 18772                           	psect	text95
 18773  012A9A                     __ptext95:
 18774                           	opt stack 0
 18775  012A9A                     _Set_Addr_Window:
 18776                           	opt stack 18
 18777                           
 18778                           ; BSR set to: 0
 18779                           ;incstack = 0
 18780                           ;Set_Addr_Window@xs stored from wreg
 18781  012A9A  0100               	movlb	0	; () banked
 18782  012A9C  6FBC               	movwf	Set_Addr_Window@xs& (0+255),b
 18783                           
 18784                           ;LCD.c: 216: ys+=2;
 18785  012A9E  0E02               	movlw	2
 18786  012AA0  0100               	movlb	0	; () banked
 18787  012AA2  27B9               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18788                           
 18789                           ;LCD.c: 217: ye+=2;
 18790  012AA4  0E02               	movlw	2
 18791  012AA6  0100               	movlb	0	; () banked
 18792  012AA8  27BB               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18793                           
 18794                           ;LCD.c: 218: xs+=3;
 18795  012AAA  0E03               	movlw	3
 18796  012AAC  0100               	movlb	0	; () banked
 18797  012AAE  27BC               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18798                           
 18799                           ;LCD.c: 219: xe+=3;
 18800  012AB0  0E03               	movlw	3
 18801  012AB2  0100               	movlb	0	; () banked
 18802  012AB4  27BA               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18803                           
 18804                           ; BSR set to: 0
 18805                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18806  012AB6  0E00               	movlw	0
 18807  012AB8  0100               	movlb	0	; () banked
 18808  012ABA  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18809  012ABC  0E2A               	movlw	42
 18810  012ABE  EC20  F0A0         	call	_LCD_Write
 18811                           
 18812                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18813  012AC2  0E01               	movlw	1
 18814  012AC4  0100               	movlb	0	; () banked
 18815  012AC6  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18816  012AC8  0E00               	movlw	0
 18817  012ACA  EC20  F0A0         	call	_LCD_Write
 18818                           
 18819                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18820  012ACE  0E01               	movlw	1
 18821  012AD0  0100               	movlb	0	; () banked
 18822  012AD2  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18823  012AD4  0100               	movlb	0	; () banked
 18824  012AD6  51BC               	movf	Set_Addr_Window@xs& (0+255),w,b
 18825  012AD8  EC20  F0A0         	call	_LCD_Write
 18826                           
 18827                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18828  012ADC  0E01               	movlw	1
 18829  012ADE  0100               	movlb	0	; () banked
 18830  012AE0  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18831  012AE2  0E00               	movlw	0
 18832  012AE4  EC20  F0A0         	call	_LCD_Write
 18833                           
 18834                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18835  012AE8  0E01               	movlw	1
 18836  012AEA  0100               	movlb	0	; () banked
 18837  012AEC  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18838  012AEE  0100               	movlb	0	; () banked
 18839  012AF0  51BA               	movf	Set_Addr_Window@xe& (0+255),w,b
 18840  012AF2  EC20  F0A0         	call	_LCD_Write
 18841                           
 18842                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18843  012AF6  0E00               	movlw	0
 18844  012AF8  0100               	movlb	0	; () banked
 18845  012AFA  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18846  012AFC  0E2B               	movlw	43
 18847  012AFE  EC20  F0A0         	call	_LCD_Write
 18848                           
 18849                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18850  012B02  0E01               	movlw	1
 18851  012B04  0100               	movlb	0	; () banked
 18852  012B06  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18853  012B08  0E00               	movlw	0
 18854  012B0A  EC20  F0A0         	call	_LCD_Write
 18855                           
 18856                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18857  012B0E  0E01               	movlw	1
 18858  012B10  0100               	movlb	0	; () banked
 18859  012B12  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18860  012B14  0100               	movlb	0	; () banked
 18861  012B16  51B9               	movf	Set_Addr_Window@ys& (0+255),w,b
 18862  012B18  EC20  F0A0         	call	_LCD_Write
 18863                           
 18864                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18865  012B1C  0E01               	movlw	1
 18866  012B1E  0100               	movlb	0	; () banked
 18867  012B20  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18868  012B22  0E00               	movlw	0
 18869  012B24  EC20  F0A0         	call	_LCD_Write
 18870                           
 18871                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18872  012B28  0E01               	movlw	1
 18873  012B2A  0100               	movlb	0	; () banked
 18874  012B2C  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18875  012B2E  0100               	movlb	0	; () banked
 18876  012B30  51BB               	movf	Set_Addr_Window@ye& (0+255),w,b
 18877  012B32  EC20  F0A0         	call	_LCD_Write
 18878                           
 18879                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18880  012B36  0E00               	movlw	0
 18881  012B38  0100               	movlb	0	; () banked
 18882  012B3A  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18883  012B3C  0E2C               	movlw	44
 18884  012B3E  EC20  F0A0         	call	_LCD_Write
 18885  012B42  0012               	return		;funcret
 18886  012B44                     __end_of_Set_Addr_Window:
 18887                           	opt stack 0
 18888                           tosu	equ	0xFFF
 18889                           tosh	equ	0xFFE
 18890                           tosl	equ	0xFFD
 18891                           pclath	equ	0xFFA
 18892                           tblptru	equ	0xFF8
 18893                           tblptrh	equ	0xFF7
 18894                           tblptrl	equ	0xFF6
 18895                           tablat	equ	0xFF5
 18896                           prodh	equ	0xFF4
 18897                           prodl	equ	0xFF3
 18898                           intcon	equ	0xFF2
 18899                           indf0	equ	0xFEF
 18900                           postinc0	equ	0xFEE
 18901                           fsr0h	equ	0xFEA
 18902                           fsr0l	equ	0xFE9
 18903                           wreg	equ	0xFE8
 18904                           postdec1	equ	0xFE5
 18905                           fsr1h	equ	0xFE2
 18906                           fsr1l	equ	0xFE1
 18907                           indf2	equ	0xFDF
 18908                           postinc2	equ	0xFDE
 18909                           postdec2	equ	0xFDD
 18910                           plusw2	equ	0xFDB
 18911                           fsr2h	equ	0xFDA
 18912                           fsr2l	equ	0xFD9
 18913                           status	equ	0xFD8
 18914                           
 18915 ;; *************** function _LCD_Word_Write *****************
 18916 ;; Defined at:
 18917 ;;		line 198 in file "Library/LCD.c"
 18918 ;; Parameters:    Size  Location     Type
 18919 ;;  value           2    5[BANK0 ] unsigned short 
 18920 ;; Auto vars:     Size  Location     Type
 18921 ;;		None
 18922 ;; Return value:  Size  Location     Type
 18923 ;;                  1    wreg      void 
 18924 ;; Registers used:
 18925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18926 ;; Tracked objects:
 18927 ;;		On entry : 0/0
 18928 ;;		On exit  : 0/0
 18929 ;;		Unchanged: 0/0
 18930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;Total ram usage:        2 bytes
 18936 ;; Hardware stack levels used:    1
 18937 ;; Hardware stack levels required when called:    9
 18938 ;; This function calls:
 18939 ;;		_LCD_Write
 18940 ;; This function is called by:
 18941 ;;		_LCD_Fill
 18942 ;;		_LCD_FillRectangle
 18943 ;;		_LCD_DrawField
 18944 ;;		_LCD_DrawPixel
 18945 ;;		_BlockDraw
 18946 ;;		_BlockClear
 18947 ;; This function uses a non-reentrant model
 18948 ;;
 18949                           
 18950                           	psect	text96
 18951  014116                     __ptext96:
 18952                           	opt stack 0
 18953  014116                     _LCD_Word_Write:
 18954                           	opt stack 18
 18955                           
 18956                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18957                           
 18958                           ;incstack = 0
 18959  014116  0E01               	movlw	1
 18960  014118  0100               	movlb	0	; () banked
 18961  01411A  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18962  01411C  0100               	movlb	0	; () banked
 18963  01411E  51BA               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18964  014120  EC20  F0A0         	call	_LCD_Write
 18965                           
 18966                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18967  014124  0E01               	movlw	1
 18968  014126  0100               	movlb	0	; () banked
 18969  014128  6FB7               	movwf	LCD_Write@mode& (0+255),b
 18970  01412A  0100               	movlb	0	; () banked
 18971  01412C  51B9               	movf	LCD_Word_Write@value& (0+255),w,b
 18972  01412E  EC20  F0A0         	call	_LCD_Write
 18973  014132  0012               	return		;funcret
 18974  014134                     __end_of_LCD_Word_Write:
 18975                           	opt stack 0
 18976                           tosu	equ	0xFFF
 18977                           tosh	equ	0xFFE
 18978                           tosl	equ	0xFFD
 18979                           pclath	equ	0xFFA
 18980                           tblptru	equ	0xFF8
 18981                           tblptrh	equ	0xFF7
 18982                           tblptrl	equ	0xFF6
 18983                           tablat	equ	0xFF5
 18984                           prodh	equ	0xFF4
 18985                           prodl	equ	0xFF3
 18986                           intcon	equ	0xFF2
 18987                           indf0	equ	0xFEF
 18988                           postinc0	equ	0xFEE
 18989                           fsr0h	equ	0xFEA
 18990                           fsr0l	equ	0xFE9
 18991                           wreg	equ	0xFE8
 18992                           postdec1	equ	0xFE5
 18993                           fsr1h	equ	0xFE2
 18994                           fsr1l	equ	0xFE1
 18995                           indf2	equ	0xFDF
 18996                           postinc2	equ	0xFDE
 18997                           postdec2	equ	0xFDD
 18998                           plusw2	equ	0xFDB
 18999                           fsr2h	equ	0xFDA
 19000                           fsr2l	equ	0xFD9
 19001                           status	equ	0xFD8
 19002                           
 19003 ;; *************** function _LCD_Write *****************
 19004 ;; Defined at:
 19005 ;;		line 67 in file "Library/LCD.c"
 19006 ;; Parameters:    Size  Location     Type
 19007 ;;  value           1    wreg     unsigned char 
 19008 ;;  mode            1    3[BANK0 ] enum E6761
 19009 ;; Auto vars:     Size  Location     Type
 19010 ;;  value           1    4[BANK0 ] unsigned char 
 19011 ;; Return value:  Size  Location     Type
 19012 ;;                  1    wreg      void 
 19013 ;; Registers used:
 19014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19015 ;; Tracked objects:
 19016 ;;		On entry : 0/0
 19017 ;;		On exit  : 0/0
 19018 ;;		Unchanged: 0/0
 19019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19020 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19024 ;;Total ram usage:        2 bytes
 19025 ;; Hardware stack levels used:    1
 19026 ;; Hardware stack levels required when called:    8
 19027 ;; This function calls:
 19028 ;;		_Mode_Set
 19029 ;;		_SPI_Send
 19030 ;; This function is called by:
 19031 ;;		_LCD_Init
 19032 ;;		_LCD_Word_Write
 19033 ;;		_Set_Addr_Window
 19034 ;;		_Set_Rotation
 19035 ;;		_LCD_WriteCMD
 19036 ;;		_LCD_WriteData
 19037 ;;		_LCD_Data_Write
 19038 ;;		_LCD_Data_Write_4k
 19039 ;;		_Invert_Display
 19040 ;; This function uses a non-reentrant model
 19041 ;;
 19042                           
 19043                           	psect	text97
 19044  014040                     __ptext97:
 19045                           	opt stack 0
 19046  014040                     _LCD_Write:
 19047                           	opt stack 19
 19048                           
 19049                           ;incstack = 0
 19050                           ;LCD_Write@value stored from wreg
 19051  014040  0100               	movlb	0	; () banked
 19052  014042  6FB8               	movwf	LCD_Write@value& (0+255),b
 19053                           
 19054                           ;LCD.c: 89: Mode_Set(mode);
 19055  014044  0100               	movlb	0	; () banked
 19056  014046  51B7               	movf	LCD_Write@mode& (0+255),w,b
 19057  014048  ECB5  F0A0         	call	_Mode_Set
 19058                           
 19059                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19060  01404C  0E7A               	movlw	low _SPI2
 19061  01404E  0100               	movlb	0	; () banked
 19062  014050  6FB4               	movwf	SPI_Send@pInput& (0+255),b
 19063  014052  0E01               	movlw	high _SPI2
 19064  014054  0100               	movlb	0	; () banked
 19065  014056  6FB5               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19066  014058  C0B8  F0B6         	movff	LCD_Write@value,SPI_Send@pData
 19067  01405C  ECD4  F09A         	call	_SPI_Send	;wreg free
 19068  014060  0012               	return		;funcret
 19069  014062                     __end_of_LCD_Write:
 19070                           	opt stack 0
 19071                           tosu	equ	0xFFF
 19072                           tosh	equ	0xFFE
 19073                           tosl	equ	0xFFD
 19074                           pclath	equ	0xFFA
 19075                           tblptru	equ	0xFF8
 19076                           tblptrh	equ	0xFF7
 19077                           tblptrl	equ	0xFF6
 19078                           tablat	equ	0xFF5
 19079                           prodh	equ	0xFF4
 19080                           prodl	equ	0xFF3
 19081                           intcon	equ	0xFF2
 19082                           indf0	equ	0xFEF
 19083                           postinc0	equ	0xFEE
 19084                           fsr0h	equ	0xFEA
 19085                           fsr0l	equ	0xFE9
 19086                           wreg	equ	0xFE8
 19087                           postdec1	equ	0xFE5
 19088                           fsr1h	equ	0xFE2
 19089                           fsr1l	equ	0xFE1
 19090                           indf2	equ	0xFDF
 19091                           postinc2	equ	0xFDE
 19092                           postdec2	equ	0xFDD
 19093                           plusw2	equ	0xFDB
 19094                           fsr2h	equ	0xFDA
 19095                           fsr2l	equ	0xFD9
 19096                           status	equ	0xFD8
 19097                           
 19098 ;; *************** function _SPI_Send *****************
 19099 ;; Defined at:
 19100 ;;		line 226 in file "Library/SPI.c"
 19101 ;; Parameters:    Size  Location     Type
 19102 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19103 ;;		 -> SPI1(11), SPI2(11), 
 19104 ;;  pData           1    2[BANK0 ] unsigned char 
 19105 ;; Auto vars:     Size  Location     Type
 19106 ;;		None
 19107 ;; Return value:  Size  Location     Type
 19108 ;;                  1    wreg      unsigned char 
 19109 ;; Registers used:
 19110 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19111 ;; Tracked objects:
 19112 ;;		On entry : 0/0
 19113 ;;		On exit  : 0/0
 19114 ;;		Unchanged: 0/0
 19115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19116 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19119 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19120 ;;Total ram usage:        3 bytes
 19121 ;; Hardware stack levels used:    1
 19122 ;; Hardware stack levels required when called:    7
 19123 ;; This function calls:
 19124 ;;		Nothing
 19125 ;; This function is called by:
 19126 ;;		_LCD_Write
 19127 ;;		_OutSeg
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           	psect	text98
 19132  0135A8                     __ptext98:
 19133                           	opt stack 0
 19134  0135A8                     _SPI_Send:
 19135                           	opt stack 19
 19136                           
 19137                           ;SPI.c: 253: switch (pInput->mChannel)
 19138                           
 19139                           ;incstack = 0
 19140  0135A8  D026               	goto	l1230
 19141  0135AA                     
 19142                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19143  0135AA  C0A8  FFD9         	movff	_PortC+4,fsr2l
 19144  0135AE  C0A9  FFDA         	movff	_PortC+5,fsr2h
 19145  0135B2  0100               	movlb	0	; () banked
 19146  0135B4  94DF               	bcf	indf2,2,c
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;SPI.c: 257: SSP1BUF = pData;
 19150  0135B6  C0B6  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19151  0135BA                     
 19152                           ; BSR set to: 0
 19153  0135BA  A0C7               	btfss	4039,0,c	;volatile
 19154  0135BC  D7FE               	goto	l1233
 19155                           
 19156                           ;SPI.c: 259: pData = SSP1BUF;
 19157  0135BE  CFC9 F0B6          	movff	4041,SPI_Send@pData	;volatile
 19158                           
 19159                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19160  0135C2  C0A8  FFD9         	movff	_PortC+4,fsr2l
 19161  0135C6  C0A9  FFDA         	movff	_PortC+5,fsr2h
 19162  0135CA  0100               	movlb	0	; () banked
 19163  0135CC  84DF               	bsf	indf2,2,c
 19164                           
 19165                           ; BSR set to: 0
 19166                           ;SPI.c: 261: return pData;
 19167                           ;	Return value of _SPI_Send is never used
 19168  0135CE  0012               	return	
 19169  0135D0                     
 19170                           ; BSR set to: 0
 19171                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19172                           
 19173                           ; BSR set to: 0
 19174  0135D0  C1A7  FFD9         	movff	_PortD+4,fsr2l
 19175  0135D4  C1A8  FFDA         	movff	_PortD+5,fsr2h
 19176  0135D8  0101               	movlb	1	; () banked
 19177  0135DA  9EDF               	bcf	indf2,7,c
 19178                           
 19179                           ; BSR set to: 1
 19180                           ;SPI.c: 264: SSP2BUF = pData;
 19181  0135DC  C0B6  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19182  0135E0                     
 19183                           ; BSR set to: 1
 19184  0135E0  A06D               	btfss	3949,0,c	;volatile
 19185  0135E2  D7FE               	goto	l1238
 19186                           
 19187                           ;SPI.c: 266: pData = SSP2BUF;
 19188  0135E4  CF6F F0B6          	movff	3951,SPI_Send@pData	;volatile
 19189                           
 19190                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19191  0135E8  C1A7  FFD9         	movff	_PortD+4,fsr2l
 19192  0135EC  C1A8  FFDA         	movff	_PortD+5,fsr2h
 19193  0135F0  0101               	movlb	1	; () banked
 19194  0135F2  8EDF               	bsf	indf2,7,c
 19195                           
 19196                           ; BSR set to: 1
 19197                           ;SPI.c: 269: };
 19198                           
 19199                           ; BSR set to: 1
 19200                           ;SPI.c: 268: return pData;
 19201                           ;	Return value of _SPI_Send is never used
 19202  0135F4  0012               	return	
 19203  0135F6                     l1230:
 19204                           
 19205                           ; BSR set to: 1
 19206  0135F6  0100               	movlb	0	; () banked
 19207  0135F8  EE20 F002          	lfsr	2,2
 19208  0135FC  51B4               	movf	SPI_Send@pInput& (0+255),w,b
 19209  0135FE  26D9               	addwf	fsr2l,f,c
 19210  013600  51B5               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19211  013602  22DA               	addwfc	fsr2h,f,c
 19212  013604  50DF               	movf	indf2,w,c
 19213                           
 19214                           ; Switch size 1, requested type "space"
 19215                           ; Number of cases is 2, Range of values is 0 to 1
 19216                           ; switch strategies available:
 19217                           ; Name         Instructions Cycles
 19218                           ; simple_byte            7     4 (average)
 19219                           ;	Chosen strategy is simple_byte
 19220  013606  0A00               	xorlw	0	; case 0
 19221  013608  B4D8               	btfsc	status,2,c
 19222  01360A  D7CF               	goto	l1231
 19223  01360C  0A01               	xorlw	1	; case 1
 19224  01360E  A4D8               	btfss	status,2,c
 19225  013610  0012               	return	
 19226  013612  D7DE               	goto	l1236
 19227  013614                     __end_of_SPI_Send:
 19228                           	opt stack 0
 19229                           tosu	equ	0xFFF
 19230                           tosh	equ	0xFFE
 19231                           tosl	equ	0xFFD
 19232                           pclath	equ	0xFFA
 19233                           tblptru	equ	0xFF8
 19234                           tblptrh	equ	0xFF7
 19235                           tblptrl	equ	0xFF6
 19236                           tablat	equ	0xFF5
 19237                           prodh	equ	0xFF4
 19238                           prodl	equ	0xFF3
 19239                           intcon	equ	0xFF2
 19240                           indf0	equ	0xFEF
 19241                           postinc0	equ	0xFEE
 19242                           fsr0h	equ	0xFEA
 19243                           fsr0l	equ	0xFE9
 19244                           wreg	equ	0xFE8
 19245                           postdec1	equ	0xFE5
 19246                           fsr1h	equ	0xFE2
 19247                           fsr1l	equ	0xFE1
 19248                           indf2	equ	0xFDF
 19249                           postinc2	equ	0xFDE
 19250                           postdec2	equ	0xFDD
 19251                           plusw2	equ	0xFDB
 19252                           fsr2h	equ	0xFDA
 19253                           fsr2l	equ	0xFD9
 19254                           status	equ	0xFD8
 19255                           
 19256 ;; *************** function _Mode_Set *****************
 19257 ;; Defined at:
 19258 ;;		line 40 in file "Library/LCD.c"
 19259 ;; Parameters:    Size  Location     Type
 19260 ;;  pMode           1    wreg     enum E6761
 19261 ;; Auto vars:     Size  Location     Type
 19262 ;;  pMode           1    0[BANK0 ] enum E6761
 19263 ;; Return value:  Size  Location     Type
 19264 ;;                  1    wreg      void 
 19265 ;; Registers used:
 19266 ;;		wreg
 19267 ;; Tracked objects:
 19268 ;;		On entry : 0/0
 19269 ;;		On exit  : 0/0
 19270 ;;		Unchanged: 0/0
 19271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19276 ;;Total ram usage:        1 bytes
 19277 ;; Hardware stack levels used:    1
 19278 ;; Hardware stack levels required when called:    7
 19279 ;; This function calls:
 19280 ;;		Nothing
 19281 ;; This function is called by:
 19282 ;;		_LCD_Write
 19283 ;; This function uses a non-reentrant model
 19284 ;;
 19285                           
 19286                           	psect	text99
 19287  01416A                     __ptext99:
 19288                           	opt stack 0
 19289  01416A                     _Mode_Set:
 19290                           	opt stack 19
 19291                           
 19292                           ;incstack = 0
 19293                           ;Mode_Set@pMode stored from wreg
 19294  01416A  0100               	movlb	0	; () banked
 19295  01416C  6FB4               	movwf	Mode_Set@pMode& (0+255),b
 19296                           
 19297                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19298  01416E  0100               	movlb	0	; () banked
 19299  014170  B1B4               	btfsc	Mode_Set@pMode& (0+255),0,b
 19300  014172  D002               	bra	u11465
 19301  014174  9E85               	bcf	3973,7,c	;volatile
 19302  014176  D001               	bra	u11466
 19303  014178                     u11465:
 19304  014178  8E85               	bsf	3973,7,c	;volatile
 19305  01417A                     u11466:
 19306  01417A  0012               	return		;funcret
 19307  01417C                     __end_of_Mode_Set:
 19308                           	opt stack 0
 19309                           tosu	equ	0xFFF
 19310                           tosh	equ	0xFFE
 19311                           tosl	equ	0xFFD
 19312                           pclath	equ	0xFFA
 19313                           tblptru	equ	0xFF8
 19314                           tblptrh	equ	0xFF7
 19315                           tblptrl	equ	0xFF6
 19316                           tablat	equ	0xFF5
 19317                           prodh	equ	0xFF4
 19318                           prodl	equ	0xFF3
 19319                           intcon	equ	0xFF2
 19320                           indf0	equ	0xFEF
 19321                           postinc0	equ	0xFEE
 19322                           fsr0h	equ	0xFEA
 19323                           fsr0l	equ	0xFE9
 19324                           wreg	equ	0xFE8
 19325                           postdec1	equ	0xFE5
 19326                           fsr1h	equ	0xFE2
 19327                           fsr1l	equ	0xFE1
 19328                           indf2	equ	0xFDF
 19329                           postinc2	equ	0xFDE
 19330                           postdec2	equ	0xFDD
 19331                           plusw2	equ	0xFDB
 19332                           fsr2h	equ	0xFDA
 19333                           fsr2l	equ	0xFD9
 19334                           status	equ	0xFD8
 19335                           
 19336 ;; *************** function _Console_MakeField *****************
 19337 ;; Defined at:
 19338 ;;		line 435 in file "Library/Console.c"
 19339 ;; Parameters:    Size  Location     Type
 19340 ;;  pInput          1    wreg     unsigned char 
 19341 ;; Auto vars:     Size  Location     Type
 19342 ;;  pInput          1   11[BANK0 ] unsigned char 
 19343 ;;  y               1   17[BANK0 ] unsigned char 
 19344 ;;  x               1   16[BANK0 ] unsigned char 
 19345 ;;  Column          2   12[BANK0 ] PTR struct Byte
 19346 ;;		 -> Font5x7(480), 
 19347 ;;  Index           2    9[BANK0 ] unsigned short 
 19348 ;; Return value:  Size  Location     Type
 19349 ;;                  2    5[BANK0 ] PTR unsigned short 
 19350 ;; Registers used:
 19351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19352 ;; Tracked objects:
 19353 ;;		On entry : 0/0
 19354 ;;		On exit  : 0/0
 19355 ;;		Unchanged: 0/0
 19356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19358 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19360 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19361 ;;Total ram usage:       13 bytes
 19362 ;; Hardware stack levels used:    1
 19363 ;; Hardware stack levels required when called:    8
 19364 ;; This function calls:
 19365 ;;		_Byte_GetBit
 19366 ;; This function is called by:
 19367 ;;		_Console_Render
 19368 ;; This function uses a non-reentrant model
 19369 ;;
 19370                           
 19371                           	psect	text100
 19372  012488                     __ptext100:
 19373                           	opt stack 0
 19374  012488                     _Console_MakeField:
 19375                           	opt stack 20
 19376                           
 19377                           ;incstack = 0
 19378                           ;Console_MakeField@pInput stored from wreg
 19379  012488  0100               	movlb	0	; () banked
 19380  01248A  6FBF               	movwf	Console_MakeField@pInput& (0+255),b
 19381                           
 19382                           ;Console.c: 437: static Colour Fill[7][5];
 19383                           ;Console.c: 438: pInput -= 32;
 19384  01248C  0E20               	movlw	32
 19385  01248E  0100               	movlb	0	; () banked
 19386  012490  5FBF               	subwf	Console_MakeField@pInput& (0+255),f,b
 19387                           
 19388                           ; BSR set to: 0
 19389                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 19390  012492  0100               	movlb	0	; () banked
 19391  012494  51BF               	movf	Console_MakeField@pInput& (0+255),w,b
 19392  012496  0D05               	mullw	5
 19393  012498  CFF3 F0BD          	movff	prodl,Console_MakeField@Index
 19394  01249C  CFF4 F0BE          	movff	prodh,Console_MakeField@Index+1
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 19398  0124A0  0E12               	movlw	low _Font5x7
 19399  0124A2  0100               	movlb	0	; () banked
 19400  0124A4  25BD               	addwf	Console_MakeField@Index& (0+255),w,b
 19401  0124A6  0100               	movlb	0	; () banked
 19402  0124A8  6FC0               	movwf	Console_MakeField@Column& (0+255),b
 19403  0124AA  0EFD               	movlw	high _Font5x7
 19404  0124AC  0100               	movlb	0	; () banked
 19405  0124AE  21BE               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 19406  0124B0  0100               	movlb	0	; () banked
 19407  0124B2  6FC1               	movwf	(Console_MakeField@Column+1)& (0+255),b
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 19411  0124B4  0E00               	movlw	0
 19412  0124B6  0100               	movlb	0	; () banked
 19413  0124B8  6FC4               	movwf	Console_MakeField@x& (0+255),b
 19414  0124BA                     l15739:
 19415                           
 19416                           ; BSR set to: 0
 19417  0124BA  0E04               	movlw	4
 19418  0124BC  0100               	movlb	0	; () banked
 19419  0124BE  65C4               	cpfsgt	Console_MakeField@x& (0+255),b
 19420  0124C0  D001               	goto	l1699
 19421  0124C2  D043               	goto	u12350
 19422  0124C4                     l1699:
 19423                           
 19424                           ; BSR set to: 0
 19425                           ;Console.c: 444: {
 19426                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 19427                           
 19428                           ; BSR set to: 0
 19429  0124C4  0E00               	movlw	0
 19430  0124C6  0100               	movlb	0	; () banked
 19431  0124C8  6FC5               	movwf	Console_MakeField@y& (0+255),b
 19432  0124CA                     l15745:
 19433                           
 19434                           ; BSR set to: 0
 19435  0124CA  0E06               	movlw	6
 19436  0124CC  0100               	movlb	0	; () banked
 19437  0124CE  65C5               	cpfsgt	Console_MakeField@y& (0+255),b
 19438  0124D0  D001               	goto	l1701
 19439  0124D2  D035               	goto	u12340
 19440  0124D4                     l1701:
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 19444                           
 19445                           ; BSR set to: 0
 19446  0124D4  C0C0  F0B4         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 19447  0124D8  C0C1  F0B5         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 19448  0124DC  C0C5  F0B6         	movff	Console_MakeField@y,Byte_GetBit@pBit
 19449  0124E0  EC26  F09F         	call	_Byte_GetBit	;wreg free
 19450  0124E4  0900               	iorlw	0
 19451  0124E6  A4D8               	btfss	status,2,c
 19452  0124E8  D005               	goto	l1704
 19453  0124EA  C087  F0C2         	movff	_gBackcolour,_Console_MakeField$13393
 19454  0124EE  C088  F0C3         	movff	_gBackcolour+1,_Console_MakeField$13393+1
 19455  0124F2  D004               	goto	l1706
 19456  0124F4                     l1704:
 19457  0124F4  C0F9  F0C2         	movff	_gForecolour,_Console_MakeField$13393
 19458  0124F8  C0FA  F0C3         	movff	_gForecolour+1,_Console_MakeField$13393+1
 19459  0124FC                     l1706:
 19460  0124FC  0100               	movlb	0	; () banked
 19461  0124FE  51C5               	movf	Console_MakeField@y& (0+255),w,b
 19462  012500  0D0A               	mullw	10
 19463  012502  0E40               	movlw	low Console_MakeField@Fill
 19464  012504  0100               	movlb	0	; () banked
 19465  012506  6FBB               	movwf	??_Console_MakeField& (0+255),b
 19466  012508  0E03               	movlw	high Console_MakeField@Fill
 19467  01250A  0100               	movlb	0	; () banked
 19468  01250C  6FBC               	movwf	(??_Console_MakeField+1)& (0+255),b
 19469  01250E  50F3               	movf	prodl,w,c
 19470  012510  0100               	movlb	0	; () banked
 19471  012512  27BB               	addwf	??_Console_MakeField& (0+255),f,b
 19472  012514  50F4               	movf	prodh,w,c
 19473  012516  0100               	movlb	0	; () banked
 19474  012518  23BC               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 19475  01251A  0100               	movlb	0	; () banked
 19476  01251C  51C4               	movf	Console_MakeField@x& (0+255),w,b
 19477  01251E  0D02               	mullw	2
 19478  012520  50F3               	movf	prodl,w,c
 19479  012522  0100               	movlb	0	; () banked
 19480  012524  25BB               	addwf	??_Console_MakeField& (0+255),w,b
 19481  012526  6ED9               	movwf	fsr2l,c
 19482  012528  50F4               	movf	prodh,w,c
 19483  01252A  0100               	movlb	0	; () banked
 19484  01252C  21BC               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 19485  01252E  6EDA               	movwf	fsr2h,c
 19486  012530  C0C2  FFDE         	movff	_Console_MakeField$13393,postinc2
 19487  012534  C0C3  FFDD         	movff	_Console_MakeField$13393+1,postdec2
 19488                           
 19489                           ; BSR set to: 0
 19490  012538  0100               	movlb	0	; () banked
 19491  01253A  2BC5               	incf	Console_MakeField@y& (0+255),f,b
 19492  01253C  D7C6               	goto	l15745
 19493  01253E                     u12340:
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;Console.c: 447: Column += 1;
 19497                           
 19498                           ; BSR set to: 0
 19499  01253E  0100               	movlb	0	; () banked
 19500  012540  4BC0               	infsnz	Console_MakeField@Column& (0+255),f,b
 19501  012542  2BC1               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 19502  012544  0100               	movlb	0	; () banked
 19503  012546  2BC4               	incf	Console_MakeField@x& (0+255),f,b
 19504  012548  D7B8               	goto	l15739
 19505  01254A                     u12350:
 19506                           
 19507                           ; BSR set to: 0
 19508                           ;Console.c: 448: }
 19509                           ;Console.c: 449: return (ColourPtr)Fill;
 19510                           
 19511                           ; BSR set to: 0
 19512  01254A  0E40               	movlw	low Console_MakeField@Fill
 19513  01254C  0100               	movlb	0	; () banked
 19514  01254E  6FB9               	movwf	?_Console_MakeField& (0+255),b
 19515  012550  0E03               	movlw	high Console_MakeField@Fill
 19516  012552  0100               	movlb	0	; () banked
 19517  012554  6FBA               	movwf	(?_Console_MakeField+1)& (0+255),b
 19518  012556  0012               	return	
 19519  012558                     __end_of_Console_MakeField:
 19520                           	opt stack 0
 19521                           tosu	equ	0xFFF
 19522                           tosh	equ	0xFFE
 19523                           tosl	equ	0xFFD
 19524                           pclath	equ	0xFFA
 19525                           tblptru	equ	0xFF8
 19526                           tblptrh	equ	0xFF7
 19527                           tblptrl	equ	0xFF6
 19528                           tablat	equ	0xFF5
 19529                           prodh	equ	0xFF4
 19530                           prodl	equ	0xFF3
 19531                           intcon	equ	0xFF2
 19532                           indf0	equ	0xFEF
 19533                           postinc0	equ	0xFEE
 19534                           fsr0h	equ	0xFEA
 19535                           fsr0l	equ	0xFE9
 19536                           wreg	equ	0xFE8
 19537                           postdec1	equ	0xFE5
 19538                           fsr1h	equ	0xFE2
 19539                           fsr1l	equ	0xFE1
 19540                           indf2	equ	0xFDF
 19541                           postinc2	equ	0xFDE
 19542                           postdec2	equ	0xFDD
 19543                           plusw2	equ	0xFDB
 19544                           fsr2h	equ	0xFDA
 19545                           fsr2l	equ	0xFD9
 19546                           status	equ	0xFD8
 19547                           
 19548 ;; *************** function _Byte_GetBit *****************
 19549 ;; Defined at:
 19550 ;;		line 38 in file "Library/Types.c"
 19551 ;; Parameters:    Size  Location     Type
 19552 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19553 ;;		 -> Font5x7(480), 
 19554 ;;  pBit            1    2[BANK0 ] unsigned char 
 19555 ;; Auto vars:     Size  Location     Type
 19556 ;;  Output          1    4[BANK0 ] unsigned char 
 19557 ;; Return value:  Size  Location     Type
 19558 ;;                  1    wreg      unsigned char 
 19559 ;; Registers used:
 19560 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 19561 ;; Tracked objects:
 19562 ;;		On entry : 0/0
 19563 ;;		On exit  : 0/0
 19564 ;;		Unchanged: 0/0
 19565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19566 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19569 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19570 ;;Total ram usage:        5 bytes
 19571 ;; Hardware stack levels used:    1
 19572 ;; Hardware stack levels required when called:    7
 19573 ;; This function calls:
 19574 ;;		Nothing
 19575 ;; This function is called by:
 19576 ;;		_Console_MakeField
 19577 ;;		_Word_GetBit
 19578 ;; This function uses a non-reentrant model
 19579 ;;
 19580                           
 19581                           	psect	text101
 19582  013E4C                     __ptext101:
 19583                           	opt stack 0
 19584  013E4C                     _Byte_GetBit:
 19585                           	opt stack 20
 19586                           
 19587                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;incstack = 0
 19591  013E4C  C0B4  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 19592  013E50  C0B5  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 19593  013E54                     	if	0	;tblptru may be non-zero
 19594  013E54                     	endif
 19595  013E54                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 19596  013E54  0E00               	movlw	low (__mediumconst shr (0+16))
 19597  013E56  6EF8               	movwf	tblptru,c
 19598  013E58                     	endif
 19599  013E58  0008               	tblrd		*
 19600  013E5A  CFF5 F0B8          	movff	tablat,Byte_GetBit@Output
 19601                           
 19602                           ;Types.c: 42: Output >>= pBit;
 19603  013E5E  0100               	movlb	0	; () banked
 19604  013E60  29B6               	incf	Byte_GetBit@pBit& (0+255),w,b
 19605  013E62  0100               	movlb	0	; () banked
 19606  013E64  6FB7               	movwf	??_Byte_GetBit& (0+255),b
 19607  013E66  D003               	goto	u11860
 19608  013E68                     u11865:
 19609  013E68  0100               	movlb	0	; () banked
 19610  013E6A  90D8               	bcf	status,0,c
 19611  013E6C  33B8               	rrcf	Byte_GetBit@Output& (0+255),f,b
 19612  013E6E                     u11860:
 19613  013E6E  0100               	movlb	0	; () banked
 19614  013E70  2FB7               	decfsz	??_Byte_GetBit& (0+255),f,b
 19615  013E72  D7FA               	goto	u11865
 19616                           
 19617                           ;Types.c: 43: Output &= 1;
 19618  013E74  0E01               	movlw	1
 19619  013E76  0100               	movlb	0	; () banked
 19620  013E78  17B8               	andwf	Byte_GetBit@Output& (0+255),f,b
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;Types.c: 44: return Output;
 19624  013E7A  0100               	movlb	0	; () banked
 19625  013E7C  51B8               	movf	Byte_GetBit@Output& (0+255),w,b
 19626  013E7E  0012               	return	
 19627  013E80                     __end_of_Byte_GetBit:
 19628                           	opt stack 0
 19629                           tosu	equ	0xFFF
 19630                           tosh	equ	0xFFE
 19631                           tosl	equ	0xFFD
 19632                           pclath	equ	0xFFA
 19633                           tblptru	equ	0xFF8
 19634                           tblptrh	equ	0xFF7
 19635                           tblptrl	equ	0xFF6
 19636                           tablat	equ	0xFF5
 19637                           prodh	equ	0xFF4
 19638                           prodl	equ	0xFF3
 19639                           intcon	equ	0xFF2
 19640                           indf0	equ	0xFEF
 19641                           postinc0	equ	0xFEE
 19642                           fsr0h	equ	0xFEA
 19643                           fsr0l	equ	0xFE9
 19644                           wreg	equ	0xFE8
 19645                           postdec1	equ	0xFE5
 19646                           fsr1h	equ	0xFE2
 19647                           fsr1l	equ	0xFE1
 19648                           indf2	equ	0xFDF
 19649                           postinc2	equ	0xFDE
 19650                           postdec2	equ	0xFDD
 19651                           plusw2	equ	0xFDB
 19652                           fsr2h	equ	0xFDA
 19653                           fsr2l	equ	0xFD9
 19654                           status	equ	0xFD8
 19655                           
 19656 ;; *************** function _ISR_Function *****************
 19657 ;; Defined at:
 19658 ;;		line 41 in file "Library/ISR.c"
 19659 ;; Parameters:    Size  Location     Type
 19660 ;;		None
 19661 ;; Auto vars:     Size  Location     Type
 19662 ;;		None
 19663 ;; Return value:  Size  Location     Type
 19664 ;;                  1    wreg      void 
 19665 ;; Registers used:
 19666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19667 ;; Tracked objects:
 19668 ;;		On entry : 0/0
 19669 ;;		On exit  : 0/0
 19670 ;;		Unchanged: 0/0
 19671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19674 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19675 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;Total ram usage:       18 bytes
 19677 ;; Hardware stack levels used:    1
 19678 ;; Hardware stack levels required when called:    6
 19679 ;; This function calls:
 19680 ;;		_Timer0_ISR
 19681 ;; This function is called by:
 19682 ;;		Interrupt level 2
 19683 ;; This function uses a non-reentrant model
 19684 ;;
 19685                           
 19686                           	psect	intcode
 19687  000008                     __pintcode:
 19688                           	opt stack 0
 19689  000008                     _ISR_Function:
 19690                           	opt stack 13
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;incstack = 0
 19694  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19695  00000A  CFFA F017          	movff	pclath,??_ISR_Function
 19696  00000E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 19697  000012  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 19698  000016  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 19699  00001A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 19700  00001E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 19701  000022  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 19702  000026  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 19703  00002A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 19704  00002E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 19705  000032  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 19706  000036  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 19707  00003A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 19708  00003E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 19709  000042  C051  F025         	movff	btemp,??_ISR_Function+14
 19710  000046  C052  F026         	movff	btemp+1,??_ISR_Function+15
 19711  00004A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 19712  00004E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 19713                           
 19714                           ;ISR.c: 44: INTCONbits.INT0IF = 0;
 19715  000052  92F2               	bcf	intcon,1,c	;volatile
 19716                           
 19717                           ;ISR.c: 75: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 19718  000054  B4F2               	btfsc	intcon,2,c	;volatile
 19719  000056  AAF2               	btfss	intcon,5,c	;volatile
 19720  000058  D002               	goto	i2l2290
 19721                           
 19722                           ;ISR.c: 76: Timer0_ISR();
 19723  00005A  EC88  F09F         	call	_Timer0_ISR	;wreg free
 19724  00005E                     i2l2290:
 19725  00005E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 19726  000062  C027  F053         	movff	??_ISR_Function+16,btemp+2
 19727  000066  C026  F052         	movff	??_ISR_Function+15,btemp+1
 19728  00006A  C025  F051         	movff	??_ISR_Function+14,btemp
 19729  00006E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 19730  000072  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 19731  000076  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 19732  00007A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 19733  00007E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 19734  000082  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 19735  000086  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 19736  00008A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 19737  00008E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 19738  000092  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 19739  000096  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 19740  00009A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 19741  00009E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 19742  0000A2  C017  FFFA         	movff	??_ISR_Function,pclath
 19743  0000A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19744  0000A8  0011               	retfie		f
 19745  0000AA                     __end_of_ISR_Function:
 19746                           	opt stack 0
 19747                           tosu	equ	0xFFF
 19748                           tosh	equ	0xFFE
 19749                           tosl	equ	0xFFD
 19750                           pclatu	equ	0xFFB
 19751                           pclath	equ	0xFFA
 19752                           tblptru	equ	0xFF8
 19753                           tblptrh	equ	0xFF7
 19754                           tblptrl	equ	0xFF6
 19755                           tablat	equ	0xFF5
 19756                           prodh	equ	0xFF4
 19757                           prodl	equ	0xFF3
 19758                           intcon	equ	0xFF2
 19759                           indf0	equ	0xFEF
 19760                           postinc0	equ	0xFEE
 19761                           fsr0h	equ	0xFEA
 19762                           fsr0l	equ	0xFE9
 19763                           wreg	equ	0xFE8
 19764                           postdec1	equ	0xFE5
 19765                           fsr1h	equ	0xFE2
 19766                           fsr1l	equ	0xFE1
 19767                           indf2	equ	0xFDF
 19768                           postinc2	equ	0xFDE
 19769                           postdec2	equ	0xFDD
 19770                           plusw2	equ	0xFDB
 19771                           fsr2h	equ	0xFDA
 19772                           fsr2l	equ	0xFD9
 19773                           status	equ	0xFD8
 19774                           
 19775 ;; *************** function _Timer0_ISR *****************
 19776 ;; Defined at:
 19777 ;;		line 94 in file "Library/Timer0.c"
 19778 ;; Parameters:    Size  Location     Type
 19779 ;;		None
 19780 ;; Auto vars:     Size  Location     Type
 19781 ;;		None
 19782 ;; Return value:  Size  Location     Type
 19783 ;;                  1    wreg      void 
 19784 ;; Registers used:
 19785 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19786 ;; Tracked objects:
 19787 ;;		On entry : 0/0
 19788 ;;		On exit  : 0/0
 19789 ;;		Unchanged: 0/0
 19790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19795 ;;Total ram usage:        0 bytes
 19796 ;; Hardware stack levels used:    1
 19797 ;; Hardware stack levels required when called:    5
 19798 ;; This function calls:
 19799 ;;		Absolute function
 19800 ;;		i2_Motor_Step
 19801 ;;		i2_Timer0_Stop
 19802 ;; This function is called by:
 19803 ;;		_ISR_Function
 19804 ;; This function uses a non-reentrant model
 19805 ;;
 19806                           
 19807                           	psect	text103
 19808  013F10                     __ptext103:
 19809                           	opt stack 0
 19810  013F10                     _Timer0_ISR:
 19811                           	opt stack 13
 19812                           
 19813                           ;Timer0.c: 96: Timer0_Stop();
 19814                           
 19815                           ;incstack = 0
 19816  013F10  EC10  F0A1         	call	i2_Timer0_Stop	;wreg free
 19817                           
 19818                           ;Timer0.c: 99: if (gISR != 0)
 19819  013F14  0101               	movlb	1	; () banked
 19820  013F16  5116               	movf	_gISR& (0+255),w,b
 19821  013F18  0101               	movlb	1	; () banked
 19822  013F1A  1117               	iorwf	(_gISR+1)& (0+255),w,b
 19823  013F1C  0101               	movlb	1	; () banked
 19824  013F1E  1118               	iorwf	(_gISR+2)& (0+255),w,b
 19825  013F20  B4D8               	btfsc	status,2,c
 19826  013F22  0012               	return	
 19827                           
 19828                           ; BSR set to: 1
 19829                           ;Timer0.c: 100: gISR();
 19830  013F24  D801               	call	i2u1520_48
 19831  013F26  0012               	return	
 19832  013F28                     i2u1520_48:
 19833  013F28  0005               	push	
 19834  013F2A  6EFA               	movwf	pclath,c
 19835  013F2C  0101               	movlb	1	; () banked
 19836  013F2E  5116               	movf	_gISR& (0+255),w,b
 19837  013F30  6EFD               	movwf	tosl,c
 19838  013F32  5117               	movf	(_gISR+1)& (0+255),w,b
 19839  013F34  6EFE               	movwf	tosh,c
 19840  013F36  5118               	movf	(_gISR+2)& (0+255),w,b
 19841  013F38  6EFF               	movwf	tosu,c
 19842  013F3A  50FA               	movf	pclath,w,c
 19843  013F3C  0012               	return		;indir
 19844  013F3E                     __end_of_Timer0_ISR:
 19845                           	opt stack 0
 19846                           tosu	equ	0xFFF
 19847                           tosh	equ	0xFFE
 19848                           tosl	equ	0xFFD
 19849                           pclatu	equ	0xFFB
 19850                           pclath	equ	0xFFA
 19851                           tblptru	equ	0xFF8
 19852                           tblptrh	equ	0xFF7
 19853                           tblptrl	equ	0xFF6
 19854                           tablat	equ	0xFF5
 19855                           prodh	equ	0xFF4
 19856                           prodl	equ	0xFF3
 19857                           intcon	equ	0xFF2
 19858                           indf0	equ	0xFEF
 19859                           postinc0	equ	0xFEE
 19860                           fsr0h	equ	0xFEA
 19861                           fsr0l	equ	0xFE9
 19862                           wreg	equ	0xFE8
 19863                           postdec1	equ	0xFE5
 19864                           fsr1h	equ	0xFE2
 19865                           fsr1l	equ	0xFE1
 19866                           indf2	equ	0xFDF
 19867                           postinc2	equ	0xFDE
 19868                           postdec2	equ	0xFDD
 19869                           plusw2	equ	0xFDB
 19870                           fsr2h	equ	0xFDA
 19871                           fsr2l	equ	0xFD9
 19872                           status	equ	0xFD8
 19873                           
 19874 ;; *************** function i2_Motor_Step *****************
 19875 ;; Defined at:
 19876 ;;		line 75 in file "Library/Motor.c"
 19877 ;; Parameters:    Size  Location     Type
 19878 ;;		None
 19879 ;; Auto vars:     Size  Location     Type
 19880 ;;		None
 19881 ;; Return value:  Size  Location     Type
 19882 ;;                  1    wreg      void 
 19883 ;; Registers used:
 19884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19885 ;; Tracked objects:
 19886 ;;		On entry : 0/0
 19887 ;;		On exit  : 0/0
 19888 ;;		Unchanged: 0/0
 19889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19892 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19894 ;;Total ram usage:        2 bytes
 19895 ;; Hardware stack levels used:    1
 19896 ;; Hardware stack levels required when called:    4
 19897 ;; This function calls:
 19898 ;;		i2_MXK_Queue
 19899 ;;		i2_MXK_Release
 19900 ;;		i2_MXK_SwitchTo
 19901 ;;		i2_Port_SetPin
 19902 ;;		i2_Timer0_Restart
 19903 ;;		i2_Timer0_Stop
 19904 ;; This function is called by:
 19905 ;; This function uses a non-reentrant model
 19906 ;;
 19907                           
 19908                           	psect	text104
 19909  01201E                     __ptext104:
 19910                           	opt stack 0
 19911  01201E                     i2_Motor_Step:
 19912                           	opt stack 13
 19913                           
 19914                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 19915                           
 19916                           ;incstack = 0
 19917  01201E  0100               	movlb	0	; () banked
 19918  012020  EE20 F004          	lfsr	2,4
 19919  012024  5181               	movf	_lMotor& (0+255),w,b
 19920  012026  26D9               	addwf	fsr2l,f,c
 19921  012028  5182               	movf	(_lMotor+1)& (0+255),w,b
 19922  01202A  22DA               	addwfc	fsr2h,f,c
 19923  01202C  50DF               	movf	indf2,w,c
 19924  01202E  ECF1  F09E         	call	i2_MXK_SwitchTo
 19925  012032  0900               	iorlw	0
 19926  012034  B4D8               	btfsc	status,2,c
 19927  012036  D06A               	goto	i2l2327
 19928                           
 19929                           ;Motor.c: 78: {
 19930                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 19931  012038  C081  FFD9         	movff	_lMotor,fsr2l
 19932  01203C  C082  FFDA         	movff	_lMotor+1,fsr2h
 19933  012040  50DE               	movf	postinc2,w,c
 19934  012042  10DE               	iorwf	postinc2,w,c
 19935  012044  B4D8               	btfsc	status,2,c
 19936  012046  D05D               	goto	i2l2328
 19937                           
 19938                           ;Motor.c: 80: {
 19939                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 19940  012048  C081  FFD9         	movff	_lMotor,fsr2l
 19941  01204C  C082  FFDA         	movff	_lMotor+1,fsr2h
 19942  012050  0E01               	movlw	1
 19943  012052  BEDB               	btfsc	plusw2,7,c
 19944  012054  D022               	goto	i2l2329
 19945  012056  0E01               	movlw	1
 19946  012058  50DB               	movf	plusw2,w,c
 19947  01205A  E103               	bnz	i2u953_40
 19948  01205C  04DE               	decf	postinc2,w,c
 19949  01205E  A0D8               	btfss	status,0,c
 19950  012060  D01C               	goto	i2l2329
 19951  012062                     i2u953_40:
 19952                           
 19953                           ;Motor.c: 83: {
 19954                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 19955  012062  C081  FFD9         	movff	_lMotor,fsr2l
 19956  012066  C082  FFDA         	movff	_lMotor+1,fsr2h
 19957  01206A  28DE               	incf	postinc2,w,c
 19958  01206C  E104               	bnz	i2u954_40
 19959  01206E  0E7F               	movlw	127
 19960  012070  18DE               	xorwf	postinc2,w,c
 19961  012072  B4D8               	btfsc	status,2,c
 19962  012074  D007               	goto	i2l2330
 19963  012076                     i2u954_40:
 19964                           
 19965                           ;Motor.c: 85: lMotor->mDelta --;
 19966  012076  C081  FFD9         	movff	_lMotor,fsr2l
 19967  01207A  C082  FFDA         	movff	_lMotor+1,fsr2h
 19968  01207E  06DE               	decf	postinc2,f,c
 19969  012080  0E00               	movlw	0
 19970  012082  5ADD               	subwfb	postdec2,f,c
 19971  012084                     i2l2330:
 19972                           
 19973                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 19974  012084  0E99               	movlw	low _PortE
 19975  012086  6E10               	movwf	i2Port_SetPin@pInput,c
 19976  012088  0E01               	movlw	high _PortE
 19977  01208A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 19978  01208C  0E00               	movlw	0
 19979  01208E  6E12               	movwf	i2Port_SetPin@pPin,c
 19980  012090  0E01               	movlw	1
 19981  012092  6E13               	movwf	i2Port_SetPin@pValue,c
 19982  012094  ECA2  F095         	call	i2_Port_SetPin	;wreg free
 19983                           
 19984                           ;Motor.c: 88: }
 19985  012098  D01B               	goto	i2l2331
 19986  01209A                     i2l2329:
 19987                           
 19988                           ;Motor.c: 89: else
 19989                           ;Motor.c: 90: {
 19990                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 19991  01209A  C081  FFD9         	movff	_lMotor,fsr2l
 19992  01209E  C082  FFDA         	movff	_lMotor+1,fsr2h
 19993  0120A2  04DE               	decf	postinc2,w,c
 19994  0120A4  E104               	bnz	i2u955_40
 19995  0120A6  0E80               	movlw	128
 19996  0120A8  18DE               	xorwf	postinc2,w,c
 19997  0120AA  B4D8               	btfsc	status,2,c
 19998  0120AC  D007               	goto	i2l2332
 19999  0120AE                     i2u955_40:
 20000                           
 20001                           ;Motor.c: 92: lMotor->mDelta ++;
 20002  0120AE  C081  FFD9         	movff	_lMotor,fsr2l
 20003  0120B2  C082  FFDA         	movff	_lMotor+1,fsr2h
 20004  0120B6  2ADE               	incf	postinc2,f,c
 20005  0120B8  0E00               	movlw	0
 20006  0120BA  22DD               	addwfc	postdec2,f,c
 20007  0120BC                     i2l2332:
 20008                           
 20009                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 20010  0120BC  0E99               	movlw	low _PortE
 20011  0120BE  6E10               	movwf	i2Port_SetPin@pInput,c
 20012  0120C0  0E01               	movlw	high _PortE
 20013  0120C2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20014  0120C4  0E00               	movlw	0
 20015  0120C6  6E12               	movwf	i2Port_SetPin@pPin,c
 20016  0120C8  0E00               	movlw	0
 20017  0120CA  6E13               	movwf	i2Port_SetPin@pValue,c
 20018  0120CC  ECA2  F095         	call	i2_Port_SetPin	;wreg free
 20019  0120D0                     i2l2331:
 20020                           
 20021                           ;Motor.c: 95: }
 20022                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 20023  0120D0  0E99               	movlw	low _PortE
 20024  0120D2  6E10               	movwf	i2Port_SetPin@pInput,c
 20025  0120D4  0E01               	movlw	high _PortE
 20026  0120D6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20027  0120D8  0E01               	movlw	1
 20028  0120DA  6E12               	movwf	i2Port_SetPin@pPin,c
 20029  0120DC  0E01               	movlw	1
 20030  0120DE  6E13               	movwf	i2Port_SetPin@pValue,c
 20031  0120E0  ECA2  F095         	call	i2_Port_SetPin	;wreg free
 20032                           
 20033                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 20034  0120E4  0E99               	movlw	low _PortE
 20035  0120E6  6E10               	movwf	i2Port_SetPin@pInput,c
 20036  0120E8  0E01               	movlw	high _PortE
 20037  0120EA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20038  0120EC  0E01               	movlw	1
 20039  0120EE  6E12               	movwf	i2Port_SetPin@pPin,c
 20040  0120F0  0E00               	movlw	0
 20041  0120F2  6E13               	movwf	i2Port_SetPin@pValue,c
 20042  0120F4  ECA2  F095         	call	i2_Port_SetPin	;wreg free
 20043                           
 20044                           ;Motor.c: 101: MXK_Release();
 20045  0120F8  EC13  F0A1         	call	i2_MXK_Release	;wreg free
 20046                           
 20047                           ;Motor.c: 102: Timer0_Restart();
 20048  0120FC  ECF4  F0A0         	call	i2_Timer0_Restart	;wreg free
 20049                           
 20050                           ;Motor.c: 103: return;
 20051  012100  0012               	return	
 20052  012102                     i2l2328:
 20053                           
 20054                           ;Motor.c: 104: }
 20055                           ;Motor.c: 105: MXK_Release();
 20056  012102  EC13  F0A1         	call	i2_MXK_Release	;wreg free
 20057                           
 20058                           ;Motor.c: 106: Timer0_Stop();
 20059  012106  EC10  F0A1         	call	i2_Timer0_Stop	;wreg free
 20060                           
 20061                           ;Motor.c: 107: return;
 20062  01210A  0012               	return	
 20063  01210C                     i2l2327:
 20064                           
 20065                           ;Motor.c: 108: }
 20066                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 20067  01210C  C078  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 20068  012110  C079  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 20069  012114  C07A  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 20070  012118  ECDB  F0A0         	call	i2_MXK_Queue	;wreg free
 20071  01211C  0012               	return		;funcret
 20072  01211E                     __end_ofi2_Motor_Step:
 20073                           	opt stack 0
 20074                           tosu	equ	0xFFF
 20075                           tosh	equ	0xFFE
 20076                           tosl	equ	0xFFD
 20077                           pclatu	equ	0xFFB
 20078                           pclath	equ	0xFFA
 20079                           tblptru	equ	0xFF8
 20080                           tblptrh	equ	0xFF7
 20081                           tblptrl	equ	0xFF6
 20082                           tablat	equ	0xFF5
 20083                           prodh	equ	0xFF4
 20084                           prodl	equ	0xFF3
 20085                           intcon	equ	0xFF2
 20086                           indf0	equ	0xFEF
 20087                           postinc0	equ	0xFEE
 20088                           fsr0h	equ	0xFEA
 20089                           fsr0l	equ	0xFE9
 20090                           wreg	equ	0xFE8
 20091                           postdec1	equ	0xFE5
 20092                           fsr1h	equ	0xFE2
 20093                           fsr1l	equ	0xFE1
 20094                           indf2	equ	0xFDF
 20095                           postinc2	equ	0xFDE
 20096                           postdec2	equ	0xFDD
 20097                           plusw2	equ	0xFDB
 20098                           fsr2h	equ	0xFDA
 20099                           fsr2l	equ	0xFD9
 20100                           status	equ	0xFD8
 20101                           
 20102 ;; *************** function i2_Timer0_Stop *****************
 20103 ;; Defined at:
 20104 ;;		line 89 in file "Library/Timer0.c"
 20105 ;; Parameters:    Size  Location     Type
 20106 ;;		None
 20107 ;; Auto vars:     Size  Location     Type
 20108 ;;		None
 20109 ;; Return value:  Size  Location     Type
 20110 ;;                  1    wreg      void 
 20111 ;; Registers used:
 20112 ;;		None
 20113 ;; Tracked objects:
 20114 ;;		On entry : 0/0
 20115 ;;		On exit  : 0/0
 20116 ;;		Unchanged: 0/0
 20117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20122 ;;Total ram usage:        0 bytes
 20123 ;; Hardware stack levels used:    1
 20124 ;; This function calls:
 20125 ;;		Nothing
 20126 ;; This function is called by:
 20127 ;;		_Timer0_ISR
 20128 ;;		i2_Motor_Step
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	text105
 20133  014220                     __ptext105:
 20134                           	opt stack 0
 20135  014220                     i2_Timer0_Stop:
 20136                           	opt stack 17
 20137                           
 20138                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 20139                           
 20140                           ;incstack = 0
 20141  014220  9AF2               	bcf	intcon,5,c	;volatile
 20142                           
 20143                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 20144  014222  94F2               	bcf	intcon,2,c	;volatile
 20145  014224  0012               	return		;funcret
 20146  014226                     __end_ofi2_Timer0_Stop:
 20147                           	opt stack 0
 20148                           tosu	equ	0xFFF
 20149                           tosh	equ	0xFFE
 20150                           tosl	equ	0xFFD
 20151                           pclatu	equ	0xFFB
 20152                           pclath	equ	0xFFA
 20153                           tblptru	equ	0xFF8
 20154                           tblptrh	equ	0xFF7
 20155                           tblptrl	equ	0xFF6
 20156                           tablat	equ	0xFF5
 20157                           prodh	equ	0xFF4
 20158                           prodl	equ	0xFF3
 20159                           intcon	equ	0xFF2
 20160                           indf0	equ	0xFEF
 20161                           postinc0	equ	0xFEE
 20162                           fsr0h	equ	0xFEA
 20163                           fsr0l	equ	0xFE9
 20164                           wreg	equ	0xFE8
 20165                           postdec1	equ	0xFE5
 20166                           fsr1h	equ	0xFE2
 20167                           fsr1l	equ	0xFE1
 20168                           indf2	equ	0xFDF
 20169                           postinc2	equ	0xFDE
 20170                           postdec2	equ	0xFDD
 20171                           plusw2	equ	0xFDB
 20172                           fsr2h	equ	0xFDA
 20173                           fsr2l	equ	0xFD9
 20174                           status	equ	0xFD8
 20175                           
 20176 ;; *************** function i2_Timer0_Restart *****************
 20177 ;; Defined at:
 20178 ;;		line 83 in file "Library/Timer0.c"
 20179 ;; Parameters:    Size  Location     Type
 20180 ;;		None
 20181 ;; Auto vars:     Size  Location     Type
 20182 ;;		None
 20183 ;; Return value:  Size  Location     Type
 20184 ;;                  1    wreg      void 
 20185 ;; Registers used:
 20186 ;;		None
 20187 ;; Tracked objects:
 20188 ;;		On entry : 0/0
 20189 ;;		On exit  : 0/0
 20190 ;;		Unchanged: 0/0
 20191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20196 ;;Total ram usage:        0 bytes
 20197 ;; Hardware stack levels used:    1
 20198 ;; This function calls:
 20199 ;;		Nothing
 20200 ;; This function is called by:
 20201 ;;		i2_Motor_Step
 20202 ;; This function uses a non-reentrant model
 20203 ;;
 20204                           
 20205                           	psect	text106
 20206  0141E8                     __ptext106:
 20207                           	opt stack 0
 20208  0141E8                     i2_Timer0_Restart:
 20209                           	opt stack 16
 20210                           
 20211                           ;Timer0.c: 85: TMR0 = COUNTER;
 20212                           
 20213                           ;incstack = 0
 20214  0141E8  C07F  FFD6         	movff	_COUNTER,4054	;volatile
 20215  0141EC  C080  FFD7         	movff	_COUNTER+1,4055	;volatile
 20216                           
 20217                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 20218  0141F0  8AF2               	bsf	intcon,5,c	;volatile
 20219  0141F2  0012               	return		;funcret
 20220  0141F4                     __end_ofi2_Timer0_Restart:
 20221                           	opt stack 0
 20222                           tosu	equ	0xFFF
 20223                           tosh	equ	0xFFE
 20224                           tosl	equ	0xFFD
 20225                           pclatu	equ	0xFFB
 20226                           pclath	equ	0xFFA
 20227                           tblptru	equ	0xFF8
 20228                           tblptrh	equ	0xFF7
 20229                           tblptrl	equ	0xFF6
 20230                           tablat	equ	0xFF5
 20231                           prodh	equ	0xFF4
 20232                           prodl	equ	0xFF3
 20233                           intcon	equ	0xFF2
 20234                           indf0	equ	0xFEF
 20235                           postinc0	equ	0xFEE
 20236                           fsr0h	equ	0xFEA
 20237                           fsr0l	equ	0xFE9
 20238                           wreg	equ	0xFE8
 20239                           postdec1	equ	0xFE5
 20240                           fsr1h	equ	0xFE2
 20241                           fsr1l	equ	0xFE1
 20242                           indf2	equ	0xFDF
 20243                           postinc2	equ	0xFDE
 20244                           postdec2	equ	0xFDD
 20245                           plusw2	equ	0xFDB
 20246                           fsr2h	equ	0xFDA
 20247                           fsr2l	equ	0xFD9
 20248                           status	equ	0xFD8
 20249                           
 20250 ;; *************** function i2_Port_SetPin *****************
 20251 ;; Defined at:
 20252 ;;		line 247 in file "Library/Port.c"
 20253 ;; Parameters:    Size  Location     Type
 20254 ;;  pInput          2   15[COMRAM] const PTR struct Port
 20255 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 20256 ;;  pPin            1   17[COMRAM] enum E6750
 20257 ;;  pValue          1   18[COMRAM] unsigned char 
 20258 ;; Auto vars:     Size  Location     Type
 20259 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 20260 ;; Return value:  Size  Location     Type
 20261 ;;                  1    wreg      void 
 20262 ;; Registers used:
 20263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20264 ;; Tracked objects:
 20265 ;;		On entry : 0/0
 20266 ;;		On exit  : 0/0
 20267 ;;		Unchanged: 0/0
 20268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20272 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20273 ;;Total ram usage:        5 bytes
 20274 ;; Hardware stack levels used:    1
 20275 ;; Hardware stack levels required when called:    3
 20276 ;; This function calls:
 20277 ;;		i2_Byte_SetBit
 20278 ;;		i2_Word_GetPair
 20279 ;; This function is called by:
 20280 ;;		i2_Motor_Step
 20281 ;; This function uses a non-reentrant model
 20282 ;;
 20283                           
 20284                           	psect	text107
 20285  012B44                     __ptext107:
 20286                           	opt stack 0
 20287  012B44                     i2_Port_SetPin:
 20288                           	opt stack 13
 20289                           
 20290                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 20291                           
 20292                           ;incstack = 0
 20293  012B44  0E08               	movlw	8
 20294  012B46  2410               	addwf	i2Port_SetPin@pInput,w,c
 20295  012B48  6E0D               	movwf	i2Word_GetPair@pInput,c
 20296  012B4A  0E00               	movlw	0
 20297  012B4C  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 20298  012B4E  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 20299  012B50  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 20300  012B54  EC70  F09F         	call	i2_Word_GetPair	;wreg free
 20301  012B58  6E14               	movwf	i2Port_SetPin@Type,c
 20302                           
 20303                           ;Port.c: 250: switch (Type)
 20304  012B5A  D03B               	goto	i2l979
 20305  012B5C                     
 20306                           ;Port.c: 256: pValue &= 1;
 20307  012B5C  0E01               	movlw	1
 20308  012B5E  1613               	andwf	i2Port_SetPin@pValue,f,c
 20309                           
 20310                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20311  012B60  EE20 F002          	lfsr	2,2
 20312  012B64  5010               	movf	i2Port_SetPin@pInput,w,c
 20313  012B66  26D9               	addwf	fsr2l,f,c
 20314  012B68  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20315  012B6A  22DA               	addwfc	fsr2h,f,c
 20316  012B6C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20317  012B70  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20318  012B74  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20319  012B78  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20320  012B7C  EC0D  F09D         	call	i2_Byte_SetBit	;wreg free
 20321                           
 20322                           ;Port.c: 258: break;
 20323  012B80  0012               	return	
 20324  012B82                     
 20325                           ;Port.c: 261: pValue &= 1;
 20326  012B82  0E01               	movlw	1
 20327  012B84  1613               	andwf	i2Port_SetPin@pValue,f,c
 20328                           
 20329                           ;Port.c: 262: pValue ^= 1;
 20330  012B86  0E01               	movlw	1
 20331  012B88  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 20332                           
 20333                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20334  012B8A  EE20 F002          	lfsr	2,2
 20335  012B8E  5010               	movf	i2Port_SetPin@pInput,w,c
 20336  012B90  26D9               	addwf	fsr2l,f,c
 20337  012B92  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20338  012B94  22DA               	addwfc	fsr2h,f,c
 20339  012B96  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20340  012B9A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20341  012B9E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20342  012BA2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20343  012BA6  EC0D  F09D         	call	i2_Byte_SetBit	;wreg free
 20344                           
 20345                           ;Port.c: 264: break;
 20346  012BAA  0012               	return	
 20347  012BAC                     
 20348                           ;Port.c: 266: pValue &= 1;
 20349  012BAC  0E01               	movlw	1
 20350  012BAE  1613               	andwf	i2Port_SetPin@pValue,f,c
 20351                           
 20352                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 20353  012BB0  EE20 F004          	lfsr	2,4
 20354  012BB4  5010               	movf	i2Port_SetPin@pInput,w,c
 20355  012BB6  26D9               	addwf	fsr2l,f,c
 20356  012BB8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20357  012BBA  22DA               	addwfc	fsr2h,f,c
 20358  012BBC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20359  012BC0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20360  012BC4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20361  012BC8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20362  012BCC  EC0D  F09D         	call	i2_Byte_SetBit	;wreg free
 20363                           
 20364                           ;Port.c: 269: }
 20365                           
 20366                           ;Port.c: 268: break;
 20367  012BD0  0012               	return	
 20368  012BD2                     i2l979:
 20369  012BD2  5014               	movf	i2Port_SetPin@Type,w,c
 20370                           
 20371                           ; Switch size 1, requested type "space"
 20372                           ; Number of cases is 4, Range of values is 0 to 3
 20373                           ; switch strategies available:
 20374                           ; Name         Instructions Cycles
 20375                           ; simple_byte           13     7 (average)
 20376                           ;	Chosen strategy is simple_byte
 20377  012BD4  0A00               	xorlw	0	; case 0
 20378  012BD6  B4D8               	btfsc	status,2,c
 20379  012BD8  0012               	return	
 20380  012BDA  0A01               	xorlw	1	; case 1
 20381  012BDC  B4D8               	btfsc	status,2,c
 20382  012BDE  D7BE               	goto	i2l982
 20383  012BE0  0A03               	xorlw	3	; case 2
 20384  012BE2  B4D8               	btfsc	status,2,c
 20385  012BE4  D7CE               	goto	i2l984
 20386  012BE6  0A01               	xorlw	1	; case 3
 20387  012BE8  A4D8               	btfss	status,2,c
 20388  012BEA  0012               	return	
 20389  012BEC  D7DF               	goto	i2l985
 20390  012BEE                     __end_ofi2_Port_SetPin:
 20391                           	opt stack 0
 20392                           tosu	equ	0xFFF
 20393                           tosh	equ	0xFFE
 20394                           tosl	equ	0xFFD
 20395                           pclatu	equ	0xFFB
 20396                           pclath	equ	0xFFA
 20397                           tblptru	equ	0xFF8
 20398                           tblptrh	equ	0xFF7
 20399                           tblptrl	equ	0xFF6
 20400                           tablat	equ	0xFF5
 20401                           prodh	equ	0xFF4
 20402                           prodl	equ	0xFF3
 20403                           intcon	equ	0xFF2
 20404                           indf0	equ	0xFEF
 20405                           postinc0	equ	0xFEE
 20406                           fsr0h	equ	0xFEA
 20407                           fsr0l	equ	0xFE9
 20408                           wreg	equ	0xFE8
 20409                           postdec1	equ	0xFE5
 20410                           fsr1h	equ	0xFE2
 20411                           fsr1l	equ	0xFE1
 20412                           indf2	equ	0xFDF
 20413                           postinc2	equ	0xFDE
 20414                           postdec2	equ	0xFDD
 20415                           plusw2	equ	0xFDB
 20416                           fsr2h	equ	0xFDA
 20417                           fsr2l	equ	0xFD9
 20418                           status	equ	0xFD8
 20419                           
 20420 ;; *************** function i2_Word_GetPair *****************
 20421 ;; Defined at:
 20422 ;;		line 156 in file "Library/Types.c"
 20423 ;; Parameters:    Size  Location     Type
 20424 ;;  pInput          2   12[COMRAM] PTR struct Word
 20425 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20426 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20427 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20428 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20429 ;;  pPair           1   14[COMRAM] unsigned char 
 20430 ;; Auto vars:     Size  Location     Type
 20431 ;;		None
 20432 ;; Return value:  Size  Location     Type
 20433 ;;                  1    wreg      unsigned char 
 20434 ;; Registers used:
 20435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20436 ;; Tracked objects:
 20437 ;;		On entry : 0/0
 20438 ;;		On exit  : 0/0
 20439 ;;		Unchanged: 0/0
 20440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20441 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;Total ram usage:        3 bytes
 20446 ;; Hardware stack levels used:    1
 20447 ;; Hardware stack levels required when called:    2
 20448 ;; This function calls:
 20449 ;;		i2_Byte_GetPair
 20450 ;; This function is called by:
 20451 ;;		i2_Port_SetPin
 20452 ;; This function uses a non-reentrant model
 20453 ;;
 20454                           
 20455                           	psect	text108
 20456  013EE0                     __ptext108:
 20457                           	opt stack 0
 20458  013EE0                     i2_Word_GetPair:
 20459                           	opt stack 13
 20460                           
 20461                           ;Types.c: 158: if (pPair >= 4)
 20462                           
 20463                           ;incstack = 0
 20464  013EE0  0E03               	movlw	3
 20465  013EE2  640F               	cpfsgt	i2Word_GetPair@pPair,c
 20466  013EE4  D00C               	goto	i2l1333
 20467                           
 20468                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20469  013EE6  0E01               	movlw	1
 20470  013EE8  240D               	addwf	i2Word_GetPair@pInput,w,c
 20471  013EEA  6E0A               	movwf	i2Byte_GetPair@pInput,c
 20472  013EEC  0E00               	movlw	0
 20473  013EEE  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 20474  013EF0  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 20475  013EF2  500F               	movf	i2Word_GetPair@pPair,w,c
 20476  013EF4  0FFC               	addlw	252
 20477  013EF6  6E0C               	movwf	i2Byte_GetPair@pPair,c
 20478  013EF8  ECA8  F0A0         	call	i2_Byte_GetPair	;wreg free
 20479  013EFC  0012               	return	
 20480  013EFE                     i2l1333:
 20481                           
 20482                           ;Types.c: 160: else
 20483                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20484  013EFE  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 20485  013F02  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 20486  013F06  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 20487  013F0A  ECA8  F0A0         	call	i2_Byte_GetPair	;wreg free
 20488  013F0E  0012               	return	
 20489  013F10                     __end_ofi2_Word_GetPair:
 20490                           	opt stack 0
 20491                           tosu	equ	0xFFF
 20492                           tosh	equ	0xFFE
 20493                           tosl	equ	0xFFD
 20494                           pclatu	equ	0xFFB
 20495                           pclath	equ	0xFFA
 20496                           tblptru	equ	0xFF8
 20497                           tblptrh	equ	0xFF7
 20498                           tblptrl	equ	0xFF6
 20499                           tablat	equ	0xFF5
 20500                           prodh	equ	0xFF4
 20501                           prodl	equ	0xFF3
 20502                           intcon	equ	0xFF2
 20503                           indf0	equ	0xFEF
 20504                           postinc0	equ	0xFEE
 20505                           fsr0h	equ	0xFEA
 20506                           fsr0l	equ	0xFE9
 20507                           wreg	equ	0xFE8
 20508                           postdec1	equ	0xFE5
 20509                           fsr1h	equ	0xFE2
 20510                           fsr1l	equ	0xFE1
 20511                           indf2	equ	0xFDF
 20512                           postinc2	equ	0xFDE
 20513                           postdec2	equ	0xFDD
 20514                           plusw2	equ	0xFDB
 20515                           fsr2h	equ	0xFDA
 20516                           fsr2l	equ	0xFD9
 20517                           status	equ	0xFD8
 20518                           
 20519 ;; *************** function i2_Byte_GetPair *****************
 20520 ;; Defined at:
 20521 ;;		line 87 in file "Library/Types.c"
 20522 ;; Parameters:    Size  Location     Type
 20523 ;;  pInput          2    9[COMRAM] PTR struct Byte
 20524 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20525 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20526 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20527 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20528 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20529 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20530 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20531 ;;		 -> NULL(0), 
 20532 ;;  pPair           1   11[COMRAM] unsigned char 
 20533 ;; Auto vars:     Size  Location     Type
 20534 ;;		None
 20535 ;; Return value:  Size  Location     Type
 20536 ;;                  1    wreg      unsigned char 
 20537 ;; Registers used:
 20538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20539 ;; Tracked objects:
 20540 ;;		On entry : 0/0
 20541 ;;		On exit  : 0/0
 20542 ;;		Unchanged: 0/0
 20543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20544 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20547 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20548 ;;Total ram usage:        3 bytes
 20549 ;; Hardware stack levels used:    1
 20550 ;; Hardware stack levels required when called:    1
 20551 ;; This function calls:
 20552 ;;		i2_Byte_GetZone
 20553 ;; This function is called by:
 20554 ;;		i2_Word_GetPair
 20555 ;; This function uses a non-reentrant model
 20556 ;;
 20557                           
 20558                           	psect	text109
 20559  014150                     __ptext109:
 20560                           	opt stack 0
 20561  014150                     i2_Byte_GetPair:
 20562                           	opt stack 13
 20563                           
 20564                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20565                           
 20566                           ;incstack = 0
 20567  014150  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 20568  014154  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 20569  014158  0E04               	movlw	4
 20570  01415A  6E03               	movwf	i2Byte_GetZone@pMax,c
 20571  01415C  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 20572  014160  0E02               	movlw	2
 20573  014162  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 20574  014164  EC7B  F099         	call	i2_Byte_GetZone	;wreg free
 20575  014168  0012               	return	
 20576  01416A                     __end_ofi2_Byte_GetPair:
 20577                           	opt stack 0
 20578                           tosu	equ	0xFFF
 20579                           tosh	equ	0xFFE
 20580                           tosl	equ	0xFFD
 20581                           pclatu	equ	0xFFB
 20582                           pclath	equ	0xFFA
 20583                           tblptru	equ	0xFF8
 20584                           tblptrh	equ	0xFF7
 20585                           tblptrl	equ	0xFF6
 20586                           tablat	equ	0xFF5
 20587                           prodh	equ	0xFF4
 20588                           prodl	equ	0xFF3
 20589                           intcon	equ	0xFF2
 20590                           indf0	equ	0xFEF
 20591                           postinc0	equ	0xFEE
 20592                           fsr0h	equ	0xFEA
 20593                           fsr0l	equ	0xFE9
 20594                           wreg	equ	0xFE8
 20595                           postdec1	equ	0xFE5
 20596                           fsr1h	equ	0xFE2
 20597                           fsr1l	equ	0xFE1
 20598                           indf2	equ	0xFDF
 20599                           postinc2	equ	0xFDE
 20600                           postdec2	equ	0xFDD
 20601                           plusw2	equ	0xFDB
 20602                           fsr2h	equ	0xFDA
 20603                           fsr2l	equ	0xFD9
 20604                           status	equ	0xFD8
 20605                           
 20606 ;; *************** function i2_Byte_GetZone *****************
 20607 ;; Defined at:
 20608 ;;		line 64 in file "Library/Types.c"
 20609 ;; Parameters:    Size  Location     Type
 20610 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20611 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20612 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20613 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20614 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20615 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20616 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20617 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20618 ;;		 -> NULL(0), 
 20619 ;;  pMax            1    2[COMRAM] unsigned char 
 20620 ;;  pChunk          1    3[COMRAM] unsigned char 
 20621 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 20622 ;; Auto vars:     Size  Location     Type
 20623 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 20624 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 20625 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 20626 ;; Return value:  Size  Location     Type
 20627 ;;                  1    wreg      unsigned char 
 20628 ;; Registers used:
 20629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20630 ;; Tracked objects:
 20631 ;;		On entry : 0/0
 20632 ;;		On exit  : 0/0
 20633 ;;		Unchanged: 0/0
 20634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20635 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20636 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20637 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20638 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20639 ;;Total ram usage:        9 bytes
 20640 ;; Hardware stack levels used:    1
 20641 ;; This function calls:
 20642 ;;		Nothing
 20643 ;; This function is called by:
 20644 ;;		i2_Byte_GetPair
 20645 ;; This function uses a non-reentrant model
 20646 ;;
 20647                           
 20648                           	psect	text110
 20649  0132F6                     __ptext110:
 20650                           	opt stack 0
 20651  0132F6                     i2_Byte_GetZone:
 20652                           	opt stack 13
 20653                           
 20654                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20655                           
 20656                           ;incstack = 0
 20657  0132F6  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 20658  0132FA  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 20659  0132FE  0E00               	movlw	low (__mediumconst shr (0+16))
 20660  013300  6EF8               	movwf	tblptru,c
 20661  013302  0E0F               	movlw	(high __ramtop+-1)
 20662  013304  64F7               	cpfsgt	tblptrh,c
 20663  013306  D003               	bra	i2u679_47
 20664  013308  0008               	tblrd		*
 20665  01330A  50F5               	movf	tablat,w,c
 20666  01330C  D005               	bra	i2u679_40
 20667  01330E                     i2u679_47:
 20668  01330E  CFF6 FFE9          	movff	tblptrl,fsr0l
 20669  013312  CFF7 FFEA          	movff	tblptrh,fsr0h
 20670  013316  50EF               	movf	indf0,w,c
 20671  013318                     i2u679_40:
 20672  013318  6E09               	movwf	i2Byte_GetZone@Output,c
 20673                           
 20674                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20675  01331A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 20676  01331C  0D01               	mullw	1
 20677  01331E  0EBF               	movlw	low _MASKS
 20678  013320  24F3               	addwf	prodl,w,c
 20679  013322  6EF6               	movwf	tblptrl,c
 20680  013324  0EFC               	movlw	high _MASKS
 20681  013326  20F4               	addwfc	prodh,w,c
 20682  013328  6EF7               	movwf	tblptrh,c
 20683  01332A                     	if	1	;There are 3 active tblptr bytes
 20684  01332A  6AF8               	clrf	tblptru,c
 20685  01332C  0E00               	movlw	low (__mediumconst shr (0+16))
 20686  01332E  22F8               	addwfc	tblptru,f,c
 20687  013330                     	endif
 20688  013330  0008               	tblrd		*
 20689  013332  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 20690                           
 20691                           ;Types.c: 68: UINT8 Offset = 0;
 20692  013336  0E00               	movlw	0
 20693  013338  6E08               	movwf	i2Byte_GetZone@Offset,c
 20694                           
 20695                           ;Types.c: 70: while (pChunk >= pMax)
 20696  01333A  D003               	goto	i2l1284
 20697  01333C                     
 20698                           ;Types.c: 71: {
 20699                           ;Types.c: 72: pChunk -= pMax;
 20700  01333C  5003               	movf	i2Byte_GetZone@pMax,w,c
 20701  01333E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 20702                           
 20703                           ;Types.c: 73: Offset += 1;
 20704  013340  2A08               	incf	i2Byte_GetZone@Offset,f,c
 20705  013342                     i2l1284:
 20706  013342  5003               	movf	i2Byte_GetZone@pMax,w,c
 20707  013344  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 20708  013346  B0D8               	btfsc	status,0,c
 20709  013348  D7F9               	goto	i2l1285
 20710                           
 20711                           ;Types.c: 74: }
 20712                           ;Types.c: 75: pChunk *= pChunkSize;
 20713  01334A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 20714  01334C  0204               	mulwf	i2Byte_GetZone@pChunk,c
 20715  01334E  50F3               	movf	prodl,w,c
 20716  013350  6E04               	movwf	i2Byte_GetZone@pChunk,c
 20717                           
 20718                           ;Types.c: 76: pChunk += Offset;
 20719  013352  5008               	movf	i2Byte_GetZone@Offset,w,c
 20720  013354  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 20721                           
 20722                           ;Types.c: 78: Output >>= pChunk;
 20723  013356  2804               	incf	i2Byte_GetZone@pChunk,w,c
 20724  013358  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 20725  01335A  D002               	goto	i2u681_40
 20726  01335C                     i2u681_45:
 20727  01335C  90D8               	bcf	status,0,c
 20728  01335E  3209               	rrcf	i2Byte_GetZone@Output,f,c
 20729  013360                     i2u681_40:
 20730  013360  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 20731  013362  D7FC               	goto	i2u681_45
 20732                           
 20733                           ;Types.c: 79: Output &= MASK;
 20734  013364  5007               	movf	i2Byte_GetZone@MASK,w,c
 20735  013366  1609               	andwf	i2Byte_GetZone@Output,f,c
 20736                           
 20737                           ;Types.c: 80: return Output;
 20738  013368  5009               	movf	i2Byte_GetZone@Output,w,c
 20739  01336A  0012               	return	
 20740  01336C                     __end_ofi2_Byte_GetZone:
 20741                           	opt stack 0
 20742                           tosu	equ	0xFFF
 20743                           tosh	equ	0xFFE
 20744                           tosl	equ	0xFFD
 20745                           pclatu	equ	0xFFB
 20746                           pclath	equ	0xFFA
 20747                           tblptru	equ	0xFF8
 20748                           tblptrh	equ	0xFF7
 20749                           tblptrl	equ	0xFF6
 20750                           tablat	equ	0xFF5
 20751                           prodh	equ	0xFF4
 20752                           prodl	equ	0xFF3
 20753                           intcon	equ	0xFF2
 20754                           indf0	equ	0xFEF
 20755                           postinc0	equ	0xFEE
 20756                           fsr0h	equ	0xFEA
 20757                           fsr0l	equ	0xFE9
 20758                           wreg	equ	0xFE8
 20759                           postdec1	equ	0xFE5
 20760                           fsr1h	equ	0xFE2
 20761                           fsr1l	equ	0xFE1
 20762                           indf2	equ	0xFDF
 20763                           postinc2	equ	0xFDE
 20764                           postdec2	equ	0xFDD
 20765                           plusw2	equ	0xFDB
 20766                           fsr2h	equ	0xFDA
 20767                           fsr2l	equ	0xFD9
 20768                           status	equ	0xFD8
 20769                           
 20770 ;; *************** function i2_Byte_SetBit *****************
 20771 ;; Defined at:
 20772 ;;		line 32 in file "Library/Types.c"
 20773 ;; Parameters:    Size  Location     Type
 20774 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20775 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20776 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20777 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20778 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20779 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20780 ;;		 -> NULL(0), 
 20781 ;;  pBit            1    2[COMRAM] unsigned char 
 20782 ;;  pValue          1    3[COMRAM] unsigned char 
 20783 ;; Auto vars:     Size  Location     Type
 20784 ;;		None
 20785 ;; Return value:  Size  Location     Type
 20786 ;;                  1    wreg      void 
 20787 ;; Registers used:
 20788 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20789 ;; Tracked objects:
 20790 ;;		On entry : 0/0
 20791 ;;		On exit  : 0/0
 20792 ;;		Unchanged: 0/0
 20793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;Total ram usage:        7 bytes
 20799 ;; Hardware stack levels used:    1
 20800 ;; This function calls:
 20801 ;;		Nothing
 20802 ;; This function is called by:
 20803 ;;		i2_Port_SetPin
 20804 ;; This function uses a non-reentrant model
 20805 ;;
 20806                           
 20807                           	psect	text111
 20808  013A1A                     __ptext111:
 20809                           	opt stack 0
 20810  013A1A                     i2_Byte_SetBit:
 20811                           	opt stack 15
 20812                           
 20813                           ;Types.c: 34: pValue &= 1;
 20814                           
 20815                           ;incstack = 0
 20816  013A1A  0E01               	movlw	1
 20817  013A1C  1604               	andwf	i2Byte_SetBit@pValue,f,c
 20818                           
 20819                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20820  013A1E  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 20821  013A22  0E01               	movlw	1
 20822  013A24  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 20823  013A26  2A05               	incf	??i2_Byte_SetBit,f,c
 20824  013A28  D002               	goto	i2u756_44
 20825  013A2A                     i2u756_45:
 20826  013A2A  90D8               	bcf	status,0,c
 20827  013A2C  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 20828  013A2E                     i2u756_44:
 20829  013A2E  2E05               	decfsz	??i2_Byte_SetBit,f,c
 20830  013A30  D7FC               	goto	i2u756_45
 20831  013A32  5006               	movf	??i2_Byte_SetBit+1,w,c
 20832  013A34  0AFF               	xorlw	255
 20833  013A36  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 20834  013A38  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 20835  013A3C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 20836  013A40  5007               	movf	??i2_Byte_SetBit+2,w,c
 20837  013A42  16DF               	andwf	indf2,f,c
 20838                           
 20839                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20840  013A44  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 20841  013A48  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 20842  013A4C  2A05               	incf	??i2_Byte_SetBit,f,c
 20843  013A4E  D002               	goto	i2u757_44
 20844  013A50                     i2u757_45:
 20845  013A50  90D8               	bcf	status,0,c
 20846  013A52  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 20847  013A54                     i2u757_44:
 20848  013A54  2E05               	decfsz	??i2_Byte_SetBit,f,c
 20849  013A56  D7FC               	goto	i2u757_45
 20850  013A58  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 20851  013A5C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 20852  013A60  5006               	movf	??i2_Byte_SetBit+1,w,c
 20853  013A62  12DF               	iorwf	indf2,f,c
 20854  013A64  0012               	return		;funcret
 20855  013A66                     __end_ofi2_Byte_SetBit:
 20856                           	opt stack 0
 20857                           tosu	equ	0xFFF
 20858                           tosh	equ	0xFFE
 20859                           tosl	equ	0xFFD
 20860                           pclatu	equ	0xFFB
 20861                           pclath	equ	0xFFA
 20862                           tblptru	equ	0xFF8
 20863                           tblptrh	equ	0xFF7
 20864                           tblptrl	equ	0xFF6
 20865                           tablat	equ	0xFF5
 20866                           prodh	equ	0xFF4
 20867                           prodl	equ	0xFF3
 20868                           intcon	equ	0xFF2
 20869                           indf0	equ	0xFEF
 20870                           postinc0	equ	0xFEE
 20871                           fsr0h	equ	0xFEA
 20872                           fsr0l	equ	0xFE9
 20873                           wreg	equ	0xFE8
 20874                           postdec1	equ	0xFE5
 20875                           fsr1h	equ	0xFE2
 20876                           fsr1l	equ	0xFE1
 20877                           indf2	equ	0xFDF
 20878                           postinc2	equ	0xFDE
 20879                           postdec2	equ	0xFDD
 20880                           plusw2	equ	0xFDB
 20881                           fsr2h	equ	0xFDA
 20882                           fsr2l	equ	0xFD9
 20883                           status	equ	0xFD8
 20884                           
 20885 ;; *************** function i2_MXK_SwitchTo *****************
 20886 ;; Defined at:
 20887 ;;		line 105 in file "Library/MXK.c"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;  pModule         1    wreg     enum E7037
 20890 ;; Auto vars:     Size  Location     Type
 20891 ;;  pModule         1    7[COMRAM] enum E7037
 20892 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 20893 ;; Return value:  Size  Location     Type
 20894 ;;                  1    wreg      unsigned char 
 20895 ;; Registers used:
 20896 ;;		wreg, status,2, status,0, cstack
 20897 ;; Tracked objects:
 20898 ;;		On entry : 0/0
 20899 ;;		On exit  : 0/0
 20900 ;;		Unchanged: 0/0
 20901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;Total ram usage:        2 bytes
 20907 ;; Hardware stack levels used:    1
 20908 ;; Hardware stack levels required when called:    1
 20909 ;; This function calls:
 20910 ;;		i2_delay_us
 20911 ;; This function is called by:
 20912 ;;		i2_Motor_Step
 20913 ;; This function uses a non-reentrant model
 20914 ;;
 20915                           
 20916                           	psect	text112
 20917  013DE2                     __ptext112:
 20918                           	opt stack 0
 20919  013DE2                     i2_MXK_SwitchTo:
 20920                           	opt stack 15
 20921                           
 20922                           ;incstack = 0
 20923                           ;i2MXK_SwitchTo@pModule stored from wreg
 20924  013DE2  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 20925                           
 20926                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 20927  013DE4  5086               	movf	3974,w,c	;volatile
 20928  013DE6  0B0F               	andlw	15
 20929  013DE8  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 20930                           
 20931                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 20932  013DEA  504E               	movf	_Bus_State,w,c
 20933  013DEC  A4D8               	btfss	status,2,c
 20934  013DEE  D002               	goto	i2l2430
 20935                           
 20936                           ;MXK.c: 110: return 0;
 20937  013DF0  0E00               	movlw	0
 20938  013DF2  0012               	return	
 20939  013DF4                     i2l2430:
 20940                           
 20941                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 20942  013DF4  0E00               	movlw	0
 20943  013DF6  6E4E               	movwf	_Bus_State,c
 20944                           
 20945                           ;MXK.c: 114: if (CUR != pModule)
 20946  013DF8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 20947  013DFA  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 20948  013DFC  B4D8               	btfsc	status,2,c
 20949  013DFE  D00A               	goto	i2l2432
 20950                           
 20951                           ;MXK.c: 115: {
 20952                           ;MXK.c: 116: PORTG &= ~(0xF);
 20953  013E00  0EF0               	movlw	240
 20954  013E02  1686               	andwf	3974,f,c	;volatile
 20955                           
 20956                           ;MXK.c: 117: PORTG |= pModule;
 20957  013E04  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 20958  013E06  1286               	iorwf	3974,f,c	;volatile
 20959                           
 20960                           ;MXK.c: 120: delay_us(10);
 20961  013E08  0E00               	movlw	0
 20962  013E0A  6E02               	movwf	i2delay_us@us+1,c
 20963  013E0C  0E0A               	movlw	10
 20964  013E0E  6E01               	movwf	i2delay_us@us,c
 20965  013E10  EC02  F09E         	call	i2_delay_us	;wreg free
 20966  013E14                     i2l2432:
 20967                           
 20968                           ;MXK.c: 121: }
 20969                           ;MXK.c: 122: return 1;
 20970  013E14  0E01               	movlw	1
 20971  013E16  0012               	return	
 20972  013E18                     __end_ofi2_MXK_SwitchTo:
 20973                           	opt stack 0
 20974                           tosu	equ	0xFFF
 20975                           tosh	equ	0xFFE
 20976                           tosl	equ	0xFFD
 20977                           pclatu	equ	0xFFB
 20978                           pclath	equ	0xFFA
 20979                           tblptru	equ	0xFF8
 20980                           tblptrh	equ	0xFF7
 20981                           tblptrl	equ	0xFF6
 20982                           tablat	equ	0xFF5
 20983                           prodh	equ	0xFF4
 20984                           prodl	equ	0xFF3
 20985                           intcon	equ	0xFF2
 20986                           indf0	equ	0xFEF
 20987                           postinc0	equ	0xFEE
 20988                           fsr0h	equ	0xFEA
 20989                           fsr0l	equ	0xFE9
 20990                           wreg	equ	0xFE8
 20991                           postdec1	equ	0xFE5
 20992                           fsr1h	equ	0xFE2
 20993                           fsr1l	equ	0xFE1
 20994                           indf2	equ	0xFDF
 20995                           postinc2	equ	0xFDE
 20996                           postdec2	equ	0xFDD
 20997                           plusw2	equ	0xFDB
 20998                           fsr2h	equ	0xFDA
 20999                           fsr2l	equ	0xFD9
 21000                           status	equ	0xFD8
 21001                           
 21002 ;; *************** function i2_delay_us *****************
 21003 ;; Defined at:
 21004 ;;		line 255 in file "Library/Types.c"
 21005 ;; Parameters:    Size  Location     Type
 21006 ;;  us              2    0[COMRAM] unsigned short 
 21007 ;; Auto vars:     Size  Location     Type
 21008 ;;  delay_us        4    2[COMRAM] unsigned long 
 21009 ;; Return value:  Size  Location     Type
 21010 ;;                  1    wreg      void 
 21011 ;; Registers used:
 21012 ;;		wreg, status,2, status,0
 21013 ;; Tracked objects:
 21014 ;;		On entry : 0/0
 21015 ;;		On exit  : 0/0
 21016 ;;		Unchanged: 0/0
 21017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21019 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21021 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21022 ;;Total ram usage:        6 bytes
 21023 ;; Hardware stack levels used:    1
 21024 ;; This function calls:
 21025 ;;		Nothing
 21026 ;; This function is called by:
 21027 ;;		i2_MXK_SwitchTo
 21028 ;; This function uses a non-reentrant model
 21029 ;;
 21030                           
 21031                           	psect	text113
 21032  013C04                     __ptext113:
 21033                           	opt stack 0
 21034  013C04                     i2_delay_us:
 21035                           	opt stack 15
 21036                           
 21037                           ;Types.c: 256: unsigned long u;
 21038                           ;Types.c: 257: while (us--) {
 21039                           
 21040                           ;incstack = 0
 21041  013C04  D016               	goto	i2u760_40
 21042  013C06                     i2l10893:
 21043                           
 21044                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 21045  013C06  0E00               	movlw	0
 21046  013C08  6E03               	movwf	i2delay_us@u,c
 21047  013C0A  0E00               	movlw	0
 21048  013C0C  6E04               	movwf	i2delay_us@u+1,c
 21049  013C0E  0E00               	movlw	0
 21050  013C10  6E05               	movwf	i2delay_us@u+2,c
 21051  013C12  0E00               	movlw	0
 21052  013C14  6E06               	movwf	i2delay_us@u+3,c
 21053  013C16                     i2l10895:
 21054  013C16  5003               	movf	i2delay_us@u,w,c
 21055  013C18  1004               	iorwf	i2delay_us@u+1,w,c
 21056  013C1A  1005               	iorwf	i2delay_us@u+2,w,c
 21057  013C1C  1006               	iorwf	i2delay_us@u+3,w,c
 21058  013C1E  A4D8               	btfss	status,2,c
 21059  013C20  D008               	goto	i2u760_40
 21060  013C22  F000               	nop		; ;# 
 21061  013C24  0E01               	movlw	1
 21062  013C26  2603               	addwf	i2delay_us@u,f,c
 21063  013C28  0E00               	movlw	0
 21064  013C2A  2204               	addwfc	i2delay_us@u+1,f,c
 21065  013C2C  2205               	addwfc	i2delay_us@u+2,f,c
 21066  013C2E  2206               	addwfc	i2delay_us@u+3,f,c
 21067  013C30  D7F2               	goto	i2l10895
 21068  013C32                     i2u760_40:
 21069  013C32  0601               	decf	i2delay_us@us,f,c
 21070  013C34  A0D8               	btfss	status,0,c
 21071  013C36  0602               	decf	i2delay_us@us+1,f,c
 21072  013C38  2801               	incf	i2delay_us@us,w,c
 21073  013C3A  E1E5               	bnz	i2l10893
 21074  013C3C  2802               	incf	i2delay_us@us+1,w,c
 21075  013C3E  B4D8               	btfsc	status,2,c
 21076  013C40  0012               	return	
 21077  013C42  D7E1               	goto	i2l1384
 21078  013C44                     __end_ofi2_delay_us:
 21079                           	opt stack 0
 21080                           tosu	equ	0xFFF
 21081                           tosh	equ	0xFFE
 21082                           tosl	equ	0xFFD
 21083                           pclatu	equ	0xFFB
 21084                           pclath	equ	0xFFA
 21085                           tblptru	equ	0xFF8
 21086                           tblptrh	equ	0xFF7
 21087                           tblptrl	equ	0xFF6
 21088                           tablat	equ	0xFF5
 21089                           prodh	equ	0xFF4
 21090                           prodl	equ	0xFF3
 21091                           intcon	equ	0xFF2
 21092                           indf0	equ	0xFEF
 21093                           postinc0	equ	0xFEE
 21094                           fsr0h	equ	0xFEA
 21095                           fsr0l	equ	0xFE9
 21096                           wreg	equ	0xFE8
 21097                           postdec1	equ	0xFE5
 21098                           fsr1h	equ	0xFE2
 21099                           fsr1l	equ	0xFE1
 21100                           indf2	equ	0xFDF
 21101                           postinc2	equ	0xFDE
 21102                           postdec2	equ	0xFDD
 21103                           plusw2	equ	0xFDB
 21104                           fsr2h	equ	0xFDA
 21105                           fsr2l	equ	0xFD9
 21106                           status	equ	0xFD8
 21107                           
 21108 ;; *************** function i2_MXK_Release *****************
 21109 ;; Defined at:
 21110 ;;		line 130 in file "Library/MXK.c"
 21111 ;; Parameters:    Size  Location     Type
 21112 ;;		None
 21113 ;; Auto vars:     Size  Location     Type
 21114 ;;		None
 21115 ;; Return value:  Size  Location     Type
 21116 ;;                  1    wreg      unsigned char 
 21117 ;; Registers used:
 21118 ;;		wreg, status,2, status,0
 21119 ;; Tracked objects:
 21120 ;;		On entry : 0/0
 21121 ;;		On exit  : 0/0
 21122 ;;		Unchanged: 0/0
 21123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21128 ;;Total ram usage:        0 bytes
 21129 ;; Hardware stack levels used:    1
 21130 ;; This function calls:
 21131 ;;		Nothing
 21132 ;; This function is called by:
 21133 ;;		i2_Motor_Step
 21134 ;; This function uses a non-reentrant model
 21135 ;;
 21136                           
 21137                           	psect	text114
 21138  014226                     __ptext114:
 21139                           	opt stack 0
 21140  014226                     i2_MXK_Release:
 21141                           	opt stack 16
 21142                           
 21143                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 21144                           
 21145                           ;incstack = 0
 21146  014226  0E01               	movlw	1
 21147  014228  6E4E               	movwf	_Bus_State,c
 21148                           
 21149                           ;MXK.c: 135: return 1;
 21150                           ;	Return value of i2_MXK_Release is never used
 21151  01422A  0012               	return	
 21152  01422C                     __end_ofi2_MXK_Release:
 21153                           	opt stack 0
 21154                           tosu	equ	0xFFF
 21155                           tosh	equ	0xFFE
 21156                           tosl	equ	0xFFD
 21157                           pclatu	equ	0xFFB
 21158                           pclath	equ	0xFFA
 21159                           tblptru	equ	0xFF8
 21160                           tblptrh	equ	0xFF7
 21161                           tblptrl	equ	0xFF6
 21162                           tablat	equ	0xFF5
 21163                           prodh	equ	0xFF4
 21164                           prodl	equ	0xFF3
 21165                           intcon	equ	0xFF2
 21166                           indf0	equ	0xFEF
 21167                           postinc0	equ	0xFEE
 21168                           fsr0h	equ	0xFEA
 21169                           fsr0l	equ	0xFE9
 21170                           wreg	equ	0xFE8
 21171                           postdec1	equ	0xFE5
 21172                           fsr1h	equ	0xFE2
 21173                           fsr1l	equ	0xFE1
 21174                           indf2	equ	0xFDF
 21175                           postinc2	equ	0xFDE
 21176                           postdec2	equ	0xFDD
 21177                           plusw2	equ	0xFDB
 21178                           fsr2h	equ	0xFDA
 21179                           fsr2l	equ	0xFD9
 21180                           status	equ	0xFD8
 21181                           
 21182 ;; *************** function i2_MXK_Queue *****************
 21183 ;; Defined at:
 21184 ;;		line 144 in file "Library/MXK.c"
 21185 ;; Parameters:    Size  Location     Type
 21186 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 21187 ;;		 -> Motor_Step(1), Absolute function(1), 
 21188 ;; Auto vars:     Size  Location     Type
 21189 ;;		None
 21190 ;; Return value:  Size  Location     Type
 21191 ;;                  1    wreg      void 
 21192 ;; Registers used:
 21193 ;;		wreg, status,2, status,0
 21194 ;; Tracked objects:
 21195 ;;		On entry : 0/0
 21196 ;;		On exit  : 0/0
 21197 ;;		Unchanged: 0/0
 21198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21199 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21202 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21203 ;;Total ram usage:        3 bytes
 21204 ;; Hardware stack levels used:    1
 21205 ;; This function calls:
 21206 ;;		Nothing
 21207 ;; This function is called by:
 21208 ;;		i2_Motor_Step
 21209 ;; This function uses a non-reentrant model
 21210 ;;
 21211                           
 21212                           	psect	text115
 21213  0141B6                     __ptext115:
 21214                           	opt stack 0
 21215  0141B6                     i2_MXK_Queue:
 21216                           	opt stack 16
 21217                           
 21218                           ;MXK.c: 146: lQueue = pCallback;
 21219                           
 21220                           ;incstack = 0
 21221  0141B6  C001  F075         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 21222  0141BA  C002  F076         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 21223  0141BE  C003  F077         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 21224  0141C2  0012               	return		;funcret
 21225  0141C4                     __end_ofi2_MXK_Queue:
 21226                           	opt stack 0
 21227                           tosu	equ	0xFFF
 21228                           tosh	equ	0xFFE
 21229                           tosl	equ	0xFFD
 21230                           pclatu	equ	0xFFB
 21231                           pclath	equ	0xFFA
 21232                           tblptru	equ	0xFF8
 21233                           tblptrh	equ	0xFF7
 21234                           tblptrl	equ	0xFF6
 21235                           tablat	equ	0xFF5
 21236                           prodh	equ	0xFF4
 21237                           prodl	equ	0xFF3
 21238                           intcon	equ	0xFF2
 21239                           indf0	equ	0xFEF
 21240                           postinc0	equ	0xFEE
 21241                           fsr0h	equ	0xFEA
 21242                           fsr0l	equ	0xFE9
 21243                           wreg	equ	0xFE8
 21244                           postdec1	equ	0xFE5
 21245                           fsr1h	equ	0xFE2
 21246                           fsr1l	equ	0xFE1
 21247                           indf2	equ	0xFDF
 21248                           postinc2	equ	0xFDE
 21249                           postdec2	equ	0xFDD
 21250                           plusw2	equ	0xFDB
 21251                           fsr2h	equ	0xFDA
 21252                           fsr2l	equ	0xFD9
 21253                           status	equ	0xFD8
 21254                           tosu	equ	0xFFF
 21255                           tosh	equ	0xFFE
 21256                           tosl	equ	0xFFD
 21257                           pclatu	equ	0xFFB
 21258                           pclath	equ	0xFFA
 21259                           tblptru	equ	0xFF8
 21260                           tblptrh	equ	0xFF7
 21261                           tblptrl	equ	0xFF6
 21262                           tablat	equ	0xFF5
 21263                           prodh	equ	0xFF4
 21264                           prodl	equ	0xFF3
 21265                           intcon	equ	0xFF2
 21266                           indf0	equ	0xFEF
 21267                           postinc0	equ	0xFEE
 21268                           fsr0h	equ	0xFEA
 21269                           fsr0l	equ	0xFE9
 21270                           wreg	equ	0xFE8
 21271                           postdec1	equ	0xFE5
 21272                           fsr1h	equ	0xFE2
 21273                           fsr1l	equ	0xFE1
 21274                           indf2	equ	0xFDF
 21275                           postinc2	equ	0xFDE
 21276                           postdec2	equ	0xFDD
 21277                           plusw2	equ	0xFDB
 21278                           fsr2h	equ	0xFDA
 21279                           fsr2l	equ	0xFD9
 21280                           status	equ	0xFD8
 21281                           
 21282                           	psect	text116
 21283  000000                     __ptext116:
 21284                           	opt stack 0
 21285                           tosu	equ	0xFFF
 21286                           tosh	equ	0xFFE
 21287                           tosl	equ	0xFFD
 21288                           pclatu	equ	0xFFB
 21289                           pclath	equ	0xFFA
 21290                           tblptru	equ	0xFF8
 21291                           tblptrh	equ	0xFF7
 21292                           tblptrl	equ	0xFF6
 21293                           tablat	equ	0xFF5
 21294                           prodh	equ	0xFF4
 21295                           prodl	equ	0xFF3
 21296                           intcon	equ	0xFF2
 21297                           indf0	equ	0xFEF
 21298                           postinc0	equ	0xFEE
 21299                           fsr0h	equ	0xFEA
 21300                           fsr0l	equ	0xFE9
 21301                           wreg	equ	0xFE8
 21302                           postdec1	equ	0xFE5
 21303                           fsr1h	equ	0xFE2
 21304                           fsr1l	equ	0xFE1
 21305                           indf2	equ	0xFDF
 21306                           postinc2	equ	0xFDE
 21307                           postdec2	equ	0xFDD
 21308                           plusw2	equ	0xFDB
 21309                           fsr2h	equ	0xFDA
 21310                           fsr2l	equ	0xFD9
 21311                           status	equ	0xFD8
 21312                           
 21313                           	psect	rparam
 21314  0000                     tosu	equ	0xFFF
 21315                           tosh	equ	0xFFE
 21316                           tosl	equ	0xFFD
 21317                           pclatu	equ	0xFFB
 21318                           pclath	equ	0xFFA
 21319                           tblptru	equ	0xFF8
 21320                           tblptrh	equ	0xFF7
 21321                           tblptrl	equ	0xFF6
 21322                           tablat	equ	0xFF5
 21323                           prodh	equ	0xFF4
 21324                           prodl	equ	0xFF3
 21325                           intcon	equ	0xFF2
 21326                           indf0	equ	0xFEF
 21327                           postinc0	equ	0xFEE
 21328                           fsr0h	equ	0xFEA
 21329                           fsr0l	equ	0xFE9
 21330                           wreg	equ	0xFE8
 21331                           postdec1	equ	0xFE5
 21332                           fsr1h	equ	0xFE2
 21333                           fsr1l	equ	0xFE1
 21334                           indf2	equ	0xFDF
 21335                           postinc2	equ	0xFDE
 21336                           postdec2	equ	0xFDD
 21337                           plusw2	equ	0xFDB
 21338                           fsr2h	equ	0xFDA
 21339                           fsr2l	equ	0xFD9
 21340                           status	equ	0xFD8
 21341                           
 21342                           	psect	temp
 21343  000051                     btemp:
 21344                           	opt stack 0
 21345  000051                     	ds	1
 21346  0000                     int$flags	set	btemp
 21347  0000                     wtemp6	set	btemp+1
 21348                           tosu	equ	0xFFF
 21349                           tosh	equ	0xFFE
 21350                           tosl	equ	0xFFD
 21351                           pclatu	equ	0xFFB
 21352                           pclath	equ	0xFFA
 21353                           tblptru	equ	0xFF8
 21354                           tblptrh	equ	0xFF7
 21355                           tblptrl	equ	0xFF6
 21356                           tablat	equ	0xFF5
 21357                           prodh	equ	0xFF4
 21358                           prodl	equ	0xFF3
 21359                           intcon	equ	0xFF2
 21360                           indf0	equ	0xFEF
 21361                           postinc0	equ	0xFEE
 21362                           fsr0h	equ	0xFEA
 21363                           fsr0l	equ	0xFE9
 21364                           wreg	equ	0xFE8
 21365                           postdec1	equ	0xFE5
 21366                           fsr1h	equ	0xFE2
 21367                           fsr1l	equ	0xFE1
 21368                           indf2	equ	0xFDF
 21369                           postinc2	equ	0xFDE
 21370                           postdec2	equ	0xFDD
 21371                           plusw2	equ	0xFDB
 21372                           fsr2h	equ	0xFDA
 21373                           fsr2l	equ	0xFD9
 21374                           status	equ	0xFD8


Data Sizes:
    Strings     62
    Constant    990
    Data        30
    BSS         3094
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     61     160
    BANK1           256      2     256
    BANK2           256     13     245
    BANK3           256      0     198
    BANK4           192      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[6]), 

    I2C2_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[6]), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[6]), 

    pRunContinue$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[6]), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK0[6]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_8(CODE[18]), STR_7(CODE[2]), STR_6(CODE[4]), STR_5(CODE[2]), 
		 -> STR_4(CODE[12]), STR_3(CODE[16]), STR_2(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    TetrisMoveD@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveU@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveR@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisMoveL@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockReframe@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftD@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftU@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftR@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockShiftL@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockColumnClear@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockRowClear@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockColumnOccupied@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockRowOccupied@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockAnticlockwise@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockClockwise@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockDraw@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockInit@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    TetrisBlockFrame@pInput.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    S15705TetrisBlock$mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    gTestBlock.mBlocks	PTR struct Block[4][4] size(2) Largest target is 2001
		 -> gTetrisField(BIGRAMh[2001]), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Motor_Step(), Absolute function(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    S14973IMU_CMD$pData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), NULL(NULL[0]), 

    pCMD.pData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), NULL(NULL[0]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> IMU_WriteRegContinue(), IMU_WriteRegFinish(), IMU_ReadRegContinue(), IMU_ReadRegFinish(), 
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> IMU_ReadComplete(), Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> IMU_WriteRegContinue(), IMU_WriteRegFinish(), IMU_ReadRegContinue(), IMU_ReadRegFinish(), 
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> IMU_ReadComplete(), Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    S14258I2CT$mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 1
		 -> IMU_Init@pData(COMRAM[1]), IMU_WriteReg@r(COMRAM[1]), IMU_ReadReg@r(COMRAM[1]), NULL(NULL[0]), 

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S13921ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> STR_1(CODE[7]), HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    FIFO_Half@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Half@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Full@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Full@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Empty@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Empty@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Items@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Items@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Read16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Read16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Read@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Read@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_PRead@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_PRead@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Get16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Get16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Get@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Get@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Put16@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Put16@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Put@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Put@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Register@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Register@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    FIFO_Init@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    FIFO_Init@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    LoopMode@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    LoopMode@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    End_2@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    End_2@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    Start_2@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    Start_2@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    S2725SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S2722$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S2695$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S2695$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S2355Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S2355Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S2355Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S2355Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    S2240Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S2240Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S1958$mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    getUSBUSART_FIFO@pInput...mBuffer16	volatile PTR unsigned short  size(2) Largest target is 0

    S1958$mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    getUSBUSART_FIFO@pInput...mBuffer	volatile PTR unsigned char  size(2) Largest target is 0

    CDCDataInHandle	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    CDCDataOutHandle	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pCDCDst.wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCDst.bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCDst.wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S1698_POINTER$wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S1698_POINTER$bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S1698_POINTER$wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S1698_POINTER$bRam	PTR unsigned char  size(2) Largest target is 0

    pCDCSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> SetupPkt(BIGRAMh[8]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 67
		 -> configDescriptor1(CODE[67]), 

    pDst	PTR unsigned char  size(2) Largest target is 8
		 -> CtrlTrfData(BIGRAMh[8]), NULL(NULL[0]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(2) Largest target is 3903
		 -> RAM(DATA[3903]), NULL(NULL[0]), BDT(BIGRAMl[48]), 

    S102$pFunc	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    outPipes.pFunc	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    S92$wRam	PTR unsigned int  size(2) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned int  size(2) Largest target is 0

    S92$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S68$wRom	PTR const unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S68$wRam	PTR unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S68$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S68$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK1[2]), BDT(BIGRAMl[48]), UEP1(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _FunctMotor->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _FunctInitMotor->_Motor_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _FunctInitLCD->_LCD_Init
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _FunctInitHMI->_HMI_Init
    _HMI_SetSegments->_ToSegment
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _FunctHMI->_Console_Render
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___lwmod->___lwdiv
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1208482
                           _FunctHMI
                       _FunctInitHMI
                       _FunctInitLCD
                     _FunctInitMotor
                         _FunctMotor
                         _ISR_Enable
                           _MXK_Init
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                              1 BANK2      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      3     0      3
                                              0 BANK1      2     2      0
                                              0 BANK2      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctMotor                                           2     2      0   68619
                                             31 BANK0      2     2      0
                         _LED_Toggle
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    3535
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _FunctInitMotor                                       0     0      0   89393
                         _Motor_Init
                         _Motor_Move
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctInitLCD                                         0     0      0  323425
                       _Console_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291884
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   16757
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (3) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _FunctInitHMI                                         0     0      0  249842
                           _HMI_Init
                         _HMI_SetBar
                    _HMI_SetSegments
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     598
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK2     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctHMI                                             0     0      0  115043
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    16      4    5260
                                             21 BANK0     11     7      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   76543
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   19601
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   55000
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4   37648
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    9317
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    7115
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FunctHMI
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Console_SetForecolour
     _HMI_Render
       _OutSeg
         _SPI_Send
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _FunctInitHMI
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _HMI_SetBar
     _HMI_SetSegments
       _ToSegment
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
   _FunctInitLCD
     _Console_Init
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
   _FunctInitMotor
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _Motor_Move
       _Timer0_Start
   _FunctMotor
     _LED_Toggle
       _Port_TogglePin
         _Port_GetPin
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _ISR_Enable
   _MXK_Init
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            B00      0     7D1      37       71.1%
BIGRAMl            3FF      0     12C      38       29.3%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C6      11       77.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      D      F5       9       95.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2     100       7      100.0%
BITBANK4            C0      0       0      13        0.0%
BANK4               C0      0       0      14        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3D      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3AB      12        0.0%
DATA                 0      0     CA8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Aug 11 13:02:16 2017

                   i2_Timer0_Stop 4220                  SPI_Init@pChannel 00E5  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 201E  
                               _A 00FD                        _USB_SD_Ptr FD00  
                               _a 00FE              __end_of_BLOCKS_COUNT FD12  
                               _i 0091                                 _j 0090  
                               _k 008D                                 _l 004F  
                               _u 008F                                 _w 0050  
                              _Hz 00F7                      ___awdiv@sign 00B9  
             ___wmul@multiplicand 00B6                     _HMI_DIPSwitch 000000  
              LCD_DrawField@pSize 00CC                LCD_DrawField@count 00D2  
                i2_Timer0_Restart 41E8                       ?_LED_Toggle 0001  
                   ??_Console_Tab 00BC                               l560 2332  
                             l641 1A52                               l642 1A7C  
                             l637 1978                               l670 2FE8  
                             l902 2DB0                               l910 2D94  
                             l735 2F0A                               l639 19E6  
                             l911 2DA2                               l903 2D40  
                             l736 2EE4                               l672 2FFE  
                             l920 2C1E                               l673 3014  
                             l905 2D4E                               l921 2C2C  
                             l674 302A                               l906 2D5C  
                             l922 2C3A                               l907 2D6A  
                             l915 2C64                               l923 2C48  
                             l780 3980                               l772 37F4  
                             l908 2D78                               l924 2C56  
                             l916 2BF4                               _BDT 000400  
                             l941 36E2                               l669 3040  
                             l773 37B8                               l909 2D86  
                             l782 399C                               l774 3804  
                             l918 2C02                               l775 37D6  
                             l919 2C10                               l960 1774  
                             l945 38CA                               l786 3AE4  
                             l890 2C9A                               l787 3AB4  
                             l779 39B8                               l955 178C  
                             l964 1468                               l892 2CA8  
                             l956 172C                               l973 13FC  
                             l965 12FE                               l789 3ACC  
                             l893 2CB6                               l949 3AA8  
                             l957 17BC                               l982 270C  
                             l966 1484                               l894 2CC4  
                             l958 1744                               l967 1324  
                             l895 2CD2                               l959 175C  
                             l984 2736                               l896 2CE0  
                             l985 2766                               l969 1390  
                             l889 2D0A                               l897 2CEE  
                             l898 2CFC                               l979 2790  
                             _PR2 000FCB                               _UIE 000F5C  
                             _UIR 000F62                               _val 007D  
                     ?_HMI_SetBar 0001                      _Word_GetPair 3C82  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 00BB                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00C4  
              Console_MakeField@y 00C5                    _USBDeviceState 0049  
                    Console_Tab@c 00C3                      Console_Tab@i 00C2  
             LCD_DrawField@pField 00C6                      Console_Tab@t 00C1  
                      i2_delay_us 3C04              Port_Set@TypeRequired 00D6  
               Console_FormFeed@x 00B6                 Console_FormFeed@y 00B7  
             LCD_DrawField@pPoint 00C8                    ?_LCD_DrawField 00C6  
           Port_SetPinType@Output 00DE                   Port_SetPin@Type 00C7  
                 Port_SetPin@pPin 00C5                     ?_Byte_GetPair 00BD  
                 __end_of_LED_Set 39CA           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 2B44                      _Word_SetPair 3B3C  
                   ?_Byte_GetZone 00B4                              l1030 0C0E  
                            l1031 0AAE                              l1035 0B1A  
                            l1028 0BF2                              l1029 0A64  
                            l1061 0DAE                              l1230 35F6  
                            l1038 0B86                              l1206 3F72  
                            l1150 0002                              l1062 0CBA  
                            l1231 35AA                              l1207 3F6A  
                            l1151 002A                              l1063 0DCA  
                            l1071 0D6C                              l1160 01DA  
                            l1152 000C                              l1080 07D6  
                            l1064 0CDC                              l1233 35BA  
                            l1225 3ED2                              l1209 3F6E  
                            l1161 0330                              l1153 01A0  
                            l1081 0754                              l1162 0228  
                            l1154 003E                              l1410 07EA  
                            l1163 0276                              l1155 01B2  
                            l1411 07EE                              l1083 0774  
                            l1236 35D0                              l1164 02C4  
                            l1156 00EC                              l1420 0812  
                            l1412 07F2                              l1084 0798  
                            l1068 0D24                              l1333 3CAE  
                            l1149 001A                              l1405 08DA  
                            l1421 0816                              l1413 07F6  
                            l3013 4076                              l1238 35E0  
                            l1166 03A6                              l1430 083A  
                            l1422 081A                              l1414 07FA  
                            l1406 07DE                              l1078 07B8  
                            l1167 039E                              l1159 0312  
                            l1431 083E                              l1423 081E  
                            l1415 07FE                              l3040 1BAE  
                            l3032 1AF2                              l1328 3B6C  
                            l1168 03B8                              l1440 0862  
                            l1432 0842                              l1424 0822  
                            l1416 0802                              l1408 07E2  
                            l1600 311C                              l3033 1B0A  
                            l1169 03A2                              l1441 0866  
                            l1433 0846                              l1425 0826  
                            l1417 0806                              l1409 07E6  
                            l2330 1F64                              l3034 1B14  
                            l1450 088A                              l1442 086A  
                            l1434 084A                              l1426 082A  
                            l1418 080A                              l2331 1FC0  
                            l3211 27CA                              l3035 1B4C  
                            l3027 1AD6                              l1371 327A  
                            l1451 088E                              l1443 086E  
                            l1435 084E                              l1427 082E  
                            l1419 080E                              l1284 2F82  
                            l2332 1FA4                              l1612 307A  
                            l3220 2862                              l3212 27E0  
                            l3036 1B6E                              l3028 1AEA  
                            l1460 08B2                              l1452 0892  
                            l1444 0872                              l1436 0852  
                            l1428 0832                              l1701 24D4  
                            l1285 2F76                              l1621 3728  
                            l1605 2E5E                              l3029 1B1C  
                            l1461 08B6                              l1453 0896  
                            l1445 0876                              l1437 0856  
                            l1429 0836                              l2430 3B98  
                            l1622 3748                              l1614 308A  
                            l1606 2DE2                              l3214 280A  
                            l1278 2A16                              l1462 08BA  
                            l1454 089A                              l1446 087A  
                            l1438 085A                              l2327 200C  
                            l1607 2E5A                              l3215 27FE  
                            l1631 2686                              l3039 1C06  
                            l1279 2A0A                              l1463 08BE  
                            l1455 089E                              l1447 087E  
                            l1439 085E                              l1704 24F4  
                            l1384 392A                              l2424 3CCC  
                            l2432 3BC0                              l2328 2002  
                            l1632 267A                              l1464 08C2  
                            l1456 08A2                              l1448 0882  
                            l1376 3616                              l2329 1F82  
                            l1465 08C6                              l1457 08A6  
                            l1449 0886                              l1706 24FC  
                            l2426 3CFA                              l1626 3572  
                            l3218 2840                              l1466 08CA  
                            l1458 08AA                              l2435 414C  
                            l1619 3700                              l1627 35A4  
                            l3219 284E                              l1467 08CE  
                            l1459 08AE                              l1468 08D2  
                            l1469 08D6                              l1662 14B2  
                            l1830 212A                              l1663 14B8  
                            l1831 2196                              l1680 0F0E  
                            l1664 14BE                              l1832 21B2  
                            l1681 0F38                              l1665 14C4  
                            l1658 160E                              l1666 14CA  
                            l2730 1E04                              l1834 21F6  
                            l3451 32DE                              l1667 14D0  
                            l1659 14AC                              l2731 1E24  
                            l1835 21DC                              l1684 1076  
                            l3452 32EC                              l1685 10A4  
                            l3461 385E                              l1669 1576  
                            l1837 2208                              l1678 0F06  
                            l3462 386C                              l1598 310C  
                            l1679 10CC                              l3447 32A8  
                            l1783 12E4                              l1776 3196  
                            l3448 329C                              l3457 3834  
                            l3458 3828                              l3394 2966  
                            l2690 1CB2                              l1699 24C4  
                            l3395 2956                              l1788 3D3A  
                            l3398 29C0                              l3399 29D2  
                            l2687 1C9A                              l2688 1CA8  
                            l2980 2918                              l2981 28D8  
                            l2992 2478                    ??_Console_Init 00B4  
           Port_SetPinType@pInput 00DA                              STR_1 FFEF  
                            STR_2 FFFA                              STR_3 FFD3  
                            STR_4 FFE3                              STR_5 FFFD  
                            STR_6 FFF6                              STR_7 FFE1  
                            STR_8 FFC1                              _DIST 00F5  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 2DE0                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
             __end_of_GetPortTRIS 2C94                              _UCFG 000F5F  
                            _UEP0 000F4C                              _UEP1 000F4D  
                            _UEIE 000F5D                              _SPI1 016F  
                            _SPI2 017A                              _UEIR 000F63  
                            _UCON 000F65                              _TMR0 000FD6  
                            _Read 0096                              _gISR 0116  
                            _pCMD 0071                   _CDCDataInHandle 0089  
                   ??_Byte_GetBit 00B7                              _pDst 008B  
              SPI_MaxSpeed@pInput 00C3                     ?_Byte_SetByte 00B4  
                   ?_Byte_SetPair 00BF                   __end_of_SPI_DCS 3EE0  
                            _main 4062                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00BF                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                     _BaudRateGen 010E                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00B4                              btemp 0051  
                            _zero 00FF                     ??_Byte_SetBit 00B8  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 00B9  
                            start 00AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                 Timer0_Init@DIVIDE 00CB  
                 ?_SPI_DisableISR 00B4                  Motor_Move@pMotor 00B7  
                   Console_Init@x 00B6                     Console_Init@y 00B7  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FEF2  
            Set_Rotation@rotation 00BA                       ?_ISR_Enable 0001  
    __size_of_Console_ClearCursor 0040                  __end_of_LCD_Fill 3928  
                __end_of_LCD_Init 1AC8           __size_of_FunctInitMotor 0034  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3814  
                   ??_Button_Init 00EF           GetPortProperties@pInput 00B6  
                __end_of_HMI_Init 12E6                             l14231 3080  
                           l14225 3070                             l15221 38F8  
                           l15225 3906                             l14603 3616  
                           l14611 3654                             l15245 3498  
                           l14605 3628                             l16231 1722  
                           l15249 34A6                             l16333 12B8  
                           l16261 3112                             l14647 1E04  
                           l16255 3102                             l16345 3D08  
                           l16291 0F2E                             l14685 392A  
                           l16381 21F6                             l16189 19E6  
                           l14687 393C                             l16199 1A8A  
                           l15745 24CA                             l15739 24BA  
                           l15845 1C9A                             l15791 318E  
                           l16583 1B9E                             _I2C1T 00AE  
                           _I2C2T 01CE                             ?_main 0001  
                 __end_of___awdiv 286C                   _Event_DIPSwitch 000000  
                 __end_of___lldiv 29E4                             u11050 2F4C  
                           u11124 376A                             u11125 3764  
                           u11134 379C                             u11070 2FB2  
                           u11230 30CE                             u11135 3796  
                           u11240 30D4                             u12120 3922  
                           u11057 2F42                             u11154 2A52  
                           u11090 3214                             u13010 1A8A  
                           u11075 2FAC                             u11155 2A4C  
                           u11164 2A84                             u11180 3B2A  
                 ___awdiv@divisor 00B6                             u11165 2A7E  
                           u11510 356E                             u13030 17C2  
                           u12160 34C2                             u11520 359C  
                           u11600 296C                             u13200 215C  
                           u11185 3B24                             u12225 044C  
                           u13130 10B4                             u12235 0464  
                           u12340 253E                             u12500 1F96  
                           u13060 3174                             u12245 047C  
                           u12350 254A                             u13230 21D4  
                           u13207 2152                             u12255 049E  
                           u12600 32AE                             u11560 2810  
                           u11465 4178                             u12265 061E  
                           u11466 417A                             u12098 239E  
                           u12450 1D06                             u12275 069C  
                           u11740 1E70                             u11725 1DBC  
                           u13237 21CA                             u12285 06DE  
                           u12390 31EA                             u12630 383A  
                           u13430 1BA8                             u11670 3654  
                           u12295 0720                             u12480 1F42  
                           u13440 1C12                             u12385 31A6  
                           u11770 3962                             u12490 1F56  
                           u11860 3E6E                             u11865 3E68  
                           u15158 3C58                             u15159 3C6E  
                           u12970 1976                             _INDEX 0095  
                 __end_of___lwdiv 32F6                             _MASKS FCBF  
                 __end_of___lwmod 3876                             _UADDR 000F5E  
                 ___awdiv@counter 00B8                             i2l982 2B5C  
                           i2l984 2B82                             i2l985 2BAC  
                           i2l979 2BD2                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                             _USTAT 000F64  
                ??i2_Byte_GetPair 000D                             _HzInc FD0D  
                           _HzOld 0131                  ??i2_Byte_GetZone 0006  
                   ?_FunctInitLCD 0001                Port_TogglePin@pPin 00CA  
                   ?_FunctInitHMI 0001                    __CFG_FCMEN$OFF 000000  
                           _PortA 02D6                             _PortB 01AD  
                           _PortC 00A4                             _PortD 01A3  
                           _PortE 0199                             _PortF 01B7  
                           _PortG 018F           __end_of_Port_SetPinType 14A6  
                           _sd000 FFAF                             _sd001 FF69  
                           _sd002 FF35                   _ADC_Initialised 0098  
                  ??_Byte_GetPair 00C0                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00C9                   __end_of_dpowers FCBF  
                  ??_Byte_GetZone 00B9          __size_of_Set_Addr_Window 00AA  
             __end_of_Console_Tab 26EA                  __end_of_MXK_Init 1956  
            i2Byte_GetPair@pInput 000A                             _putch 419A  
                __end_of_SPI_Init 041E                  __end_of_SPI_Send 3614  
           __end_ofi2_MXK_Release 422C                             pclath 000FFA  
                           tablat 000FF5                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 00B7                    ??_Byte_SetPair 00C3  
                  ??_Byte_SetQuad 00C3                             plusw2 000FDB  
                  ??_Byte_SetZone 00BA                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 34C8  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 4116               __size_of_LED_Toggle 0048  
     __size_of_Port_CheckPairType 006A               __size_of_HMI_SetBar 000A  
                 __initialization 2558               __size_of_HMI_Render 003E  
             __end_of_Byte_GetBit 3E80                      __end_of_main 4080  
                    SPI_Send9@dat 0133             _control_signal_bitmap 009E  
             __end_of_Byte_SetBit 37B2                  __end_of_InitList FC95  
                __end_of_FunctHMI 2488                        _FunctMotor 286C  
     __size_of_Port_CheckQuadType 005A                      _gTetrisField 0440  
                __end_of_Mode_Set 417C       __size_of_Port_CheckPortType 0048  
                     HMI_Render@a 00BC                            ??_main 00F1  
         _Console_MakeField$13393 00C2                     __activetblptr 000003  
               Port_SetPin@pInput 00C3                 __end_of_LCD_Reset 3A1A  
               Port_SetPin@pValue 00C6                         ??_LED_Set 00C9  
               _MXK_InitDIPSwitch 40BC                 GetPortPORT@pInput 00B6  
                  ??_FunctInitLCD 00ED                    ??_FunctInitHMI 00F1  
          Port_CheckPairType@Pin1 00DE            Port_CheckPairType@Pin2 00DF  
               __end_of_LCD_Write 4062                       _GetPortPORT 2D3A  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 2BEE  
                 ??_LCD_DrawField 00D0        __end_of_PortProperty_Valid 327E  
                __end_of_Port_Set 07D8                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0070               __end_of_Button_Init 23B4  
                    _cdc_mem_type 009F                 Word_GetPair@pPair 00C2  
         LCD_FillRectangle@pPoint 00BF                ?_MXK_InitDIPSwitch 0001  
                _CDCDataOutHandle 0035                         ??_SPI_DCS 00B6  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
          Port_SetQuadType@Output 00EE                            _ANCON0 000FC1  
                ___awdiv@dividend 00B4                            ?_putch 0001  
                ??_Console_Render 00D7                     ToSegment@pCHR 00B4  
           _Console_SetForecolour 4208                  _Console_FormFeed 305E  
          Port_SetQuadType@pInput 00EA                            i2l1333 3EFE  
                          i2l2330 2084                            i2l2331 20D0  
                          i2l1284 3342                            i2l2332 20BC  
                          i2l1285 333C                            i2l2430 3DF4  
                          i2l2327 210C                            i2l1384 3C06  
                          i2l2432 3E14                            i2l2328 2102  
                          i2l2329 209A                            i2l2290 005E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
                          _LLVALS FCE8                            _LNVALS FCF8  
          __end_of_LCD_Word_Write 4134                    _Timer0_Restart 41DC  
                          _TEVALS FCD8               ??_MXK_InitDIPSwitch 00EF  
                          _RLVALS FCE0                            _LZVALS FCD0  
                          _SQVALS FCF0                            _RZVALS FCC8  
                  i2_MXK_SwitchTo 3DE2                   Byte_GetBit@pBit 00B6  
    Console_SetForecolour@pColour 00B4                        _Reset_High 409E  
              Console_Render@temp 00D9                    OutSeg@pSegment 00B7  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00CB  
                __end_of_delay_ms 367E                      LED_Init@pLED 00E1  
                __end_of_delay_us 397A                     ??_Timer0_Init 00C5  
                   ??_Timer2_Init 00C5                     ??_Timer0_Stop 00B4  
                      _Timer0_ISR 3F10                 _shortPacketStatus 0048  
        __size_of_Console_NewLine 00A6                 Timer2_Init@DIVIDE 00CE  
                  __CFG_XINST$OFF 000000                    _USBInputBuffer 0386  
                          _OutSeg 317A          __size_of_HMI_InitButtons 0004  
                      _Motor_Init 220A                        _Motor_Move 3D3C  
                   ??_Motor_Speed 00D3                        _Motor_Step 1EF8  
            _Event_HMI_LeftButton 000000                            ___wmul 3DAC  
                       ??___awdiv 00B8                    __CFG_STVREN$ON 000000  
                          _change 00FC                            _lMotor 0081  
                       ??___lldiv 00BC                            _lQueue 0075  
                      _TestButton 0185              _Event_HMI_DownButton 000000  
                       ??___lwdiv 00B8                __size_of_ToSegment 0284  
                       ??___lwmod 00BF          __end_of_Port_SetQuadType 0CB2  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0085  
            __end_of_Console_Init 317A                 GetPortTRIS@pInput 00B6  
              __size_of_Reset_Low 001E                            clear_0 25BE  
                          clear_1 25D2                            clear_2 25E4  
                          clear_3 25F0                            clear_4 25FC  
                          clear_5 2608                            clear_6 2614  
                ___awdiv@quotient 00BA                        Port_Init@i 02EE  
               __end_of_MXK_Queue 41B6        __end_ofHMI_SetButton@F7369 FD0A  
                          _printf 1AC8         __end_of_MXK_InitDIPSwitch 40DA  
          HMI_SetSegments@pString 00B5                       _Console_Tab 2624  
             LCD_Word_Write@value 00B9                      __pdataCOMRAM 004E  
              __size_of_Port_Init 0192                     ??_Port_GetPin 00B7  
        Port_CheckPortType@Output 00ED                   ??i2_Port_SetPin 0014  
                    __mediumconst FBE2       __end_ofTimer2_Init@PRESCALE FD0D  
        Port_CheckPortType@pDrive 00EC                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001          Port_CheckPortType@pInput 00EA  
                   ??_Port_SetPin 00C7             Console_MakeField@Fill 0340  
                ?_Port_SetPinType 00DA                            putch@c 00C8  
               Motor_Speed@pMotor 00CF                    i2_Word_GetPair 3EE0  
         __end_of_Configure_GPIOs 3538                      _BLOCKS_COUNT FD11  
                     _CtrlTrfData 000438            __end_of_Timer0_Restart 41E8  
                   Set_Rotation@m 00B9                      ?_MXK_Release 0001  
            _controlTransferState 0047                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 3E18                      i2delay_us@us 0001  
                   IMU_WriteReg@r 004A                   ?_LCD_Word_Write 00B9  
                      __accesstop 0060           __end_of__initialization 261A  
                       ?_LCD_Fill 00BD                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00E6                      __pbssBIGRAMh 0440  
                    __pbssBIGRAMl 0C11                       _Byte_GetBit 3E4C  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 41F4  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00BC  
                   ___rparam_used 000001                       _Byte_SetBit 374E  
                   __end_of_MASKS FCC8                    _PortA_Property FFBF  
                       LCD_Fill@i 00BF                         LCD_Fill@j 00C0  
                       LCD_Init@i 00EB                     __end_of_HzInc FD0F  
                  __pcstackCOMRAM 0001                    _PortB_Property FFBD  
                   __end_of_sd000 FFB3                     __end_of_sd001 FF9D  
                   __end_of_sd002 FF69               __size_ofi2_delay_us 0040  
                    __pidataBANK0 417C                      __pidataBANK1 41C4  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 4116  
                 Console_Render@x 00DE                   Console_Render@y 00DF  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC95              __end_of_Byte_GetZone 2FC6  
                  _FunctInitMotor 3E18                       ?_FunctMotor 0001  
                      _gTestBlock 0200                    _PortC_Property FFBB  
             __end_of_Timer0_Init 1D98                     __end_of_putch 41A8  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 1EF8  
             __end_of_Timer0_Stop 4220                         ?_SPI_Init 00E1  
                       ?_SPI_Send 00B4                       _Button_Init 22E0  
               Port_SetType@pType 00F0              __end_of_Byte_SetByte 419A  
            __end_of_Byte_SetPair 3FFC                    _HMI_LeftSwitch 000000  
                  _PortD_Property FFB9              __end_of_Byte_SetQuad 401E  
                    ??_LED_Toggle 00CC              __end_of_Byte_SetZone 2A9A  
             __end_of_Motor_Speed 3F68                    _HMI_DownSwitch 000000  
                   SPI_Send@pData 00B6                      ??_HMI_SetBar 00B4  
                    ??_HMI_Render 00BC                    _PortE_Property FFB7  
                      _cdc_notice 0242          __size_of_HMI_SetSegments 00EC  
          __end_ofi2_Word_GetPair 3F10                        _cdc_rx_len 003F  
                      _cdc_tx_len 003D                    _PortF_Property FFB5  
         _USBTicksSinceSuspendEnd 00A0           Port_CheckQuadType@Pair1 00E7  
         Port_CheckQuadType@Pair2 00E8          MXK_BlockSwitchTo@pModule 00BB  
          ?_Console_SetForecolour 00B4                 _Console_Backspace 36E8  
                 ?_Timer0_Restart 0001                           ??_putch 00C8  
             _Console_ClearCursor 3BC4                 __end_of_ToSegment 0A5C  
                  _PortG_Property FFB3                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK3 0300               __end_of_Port_GetPin 3B3C  
         Port_CheckQuadType@pQuad 00E5                  ??_SPI_DisableISR 00B6  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 409E                         ?_FunctHMI 0001  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00BF  
                      ??_LCD_Init 00E9               __end_of_Port_SetPin 27AE  
          __end_of_PortA_Property FFC1                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00B4                        ??_LED_Init 00E1  
              Byte_SetByte@pValue 00B6                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00EF                     ?_Timer2_Clear 0001  
                     _pBDTEntryIn 002F           Port_CheckPairType@Props 00E1  
          __end_of_PortB_Property FFBF                     ?_Timer0_Start 00B4  
               __end_of_Port_Init 17D6                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00DC                __end_of_LED_Toggle 3AF6  
        LCD_FillRectangle@pColour 00BD              __end_of_FunctInitLCD 3FDA  
             ??_Console_Backspace 00B6              __end_of_FunctInitHMI 3DAC  
               Set_Addr_Window@xe 00BA                 Set_Addr_Window@ye 00BB  
               Set_Addr_Window@xs 00BC                 Set_Addr_Window@ys 00B9  
                         ?_OutSeg 00B7                       ?_Motor_Init 00E1  
              Byte_SetPair@pInput 00BF                       ?_Motor_Move 00B7  
          __end_of_FunctInitMotor 3E4C                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 00C2                __end_of_HMI_SetBar 4208  
          __end_of_PortC_Property FFBD                Word_GetPair@pInput 00C0  
              __end_of_HMI_Render 3D3C                    ??_Set_Rotation 00B9  
                       ?_Port_Set 00C3                           ?___wmul 00B4  
               Port_GetPin@Output 00B9                      ??_ISR_Enable 00B4  
    __size_of_Console_ResetCursor 0022              ?_Console_ClearCursor 0001  
          __end_of_PortD_Property FFBB                           _ADC_AN0 01E3  
                         _ADC_AN1 01DE                           _ADC_AN2 01D9  
                         _ADC_AN3 01D4                        ??_MXK_Init 00F1  
               Port_GetPin@pInput 00B4                 _Console_MakeField 2488  
                      _device_dsc FF9D                 ??_Console_NewLine 00B4  
                      ??_SPI_Init 00E7                        ??_SPI_Send 00B7  
                         ?_printf 00C9                 ??_HMI_InitButtons 00B4  
                      _ep_data_in 012E        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FFB9               Console_Render@F6956 01F2  
              ?_Console_MakeField 00B9                           _COUNTER 007F  
               _configDescriptor1 FEF2                           i2l10893 3C06  
                         i2l10895 3C16                           _LED_Set 397A  
         _Console_IncrementCursor 3538            __end_of_PortF_Property FFB7  
                     _gBackcolour 0087                         _I2C1_Done 0122  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 011F  
                _IMU_ReadComplete 000000                         _I2C1_More 011C  
                       _I2C2_More 0119                         ?_delay_ms 00B4  
       __end_of_Console_Backspace 374E                         ?_delay_us 00B4  
      __end_of_MXK_InitTestButton 40F8                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
          __end_of_PortG_Property FFB5               ??_Console_MakeField 00BB  
                         _SPI_DCS 3EB0              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001                           _UIEbits 000F5C  
                         _UIRbits 000F62              i2Byte_GetZone@Offset 0008  
             __size_of_FunctMotor 00BC                     _cdc_trf_state 003E  
                      ??_FunctHMI 00E0                __end_of_ISR_Enable 41FE  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 00B4                 Event_TestButton@j 008E  
                      ??_Mode_Set 00B4                    ??_Timer2_Clear 00B4  
                         _Font5x7 FD12              i2Byte_GetZone@pChunk 0004  
            i2Byte_GetZone@pInput 0001                    ??_Timer0_Start 00B7  
            SPI_DisableISR@pInput 00B4                   Byte_SetBit@pBit 00B6  
            Port_TogglePin@pInput 00C8                           _pCDCDst 0125  
           __end_ofi2_Byte_SetBit 3A66                           _pCDCSrc 0128  
                         __Hparam 0000                       _Timer0_Init 1C34  
                     _Timer2_Init 1D98                           __Lparam 0000  
                     _Timer0_Stop 421A             __size_of_Console_Init 008A  
                         OutSeg@a 003C   __end_ofPortProperty_Valid@F6830 FCB5  
                   LCD_Write@mode 00B7                   __size_of_OutSeg 0088  
                 ?_FunctInitMotor 0001                        ??_Port_Set 00C6  
       __end_of_Console_MakeField 2558                 _Console_PrintChar 14A6  
                     _Motor_Speed 3F3E                           _Stepper 01C8  
                   ?_Port_SetType 00EE                           _gCursor 00F1  
                         ___awdiv 27AE             ??_Console_ClearCursor 00B4  
                         _lBuffer 0C11                           ___lldiv 2928  
                 __size_of___wmul 0036                           ___lwdiv 327E  
                         ___lwmod 3814          __end_of_Console_FormFeed 30F0  
              ?_Console_PrintChar 0001                           __pcinit 2558  
       __end_of_configDescriptor1 FF35                           __ramtop 1000  
                         __ptext0 4062                           __ptext1 17D6  
                         __ptext2 1644                           __ptext3 0CB2  
                         __ptext4 3A66                           __ptext5 041E  
                         __ptext6 418C                           __ptext7 2BEE  
                         __ptext8 2C94                           __ptext9 2D3A  
                         _inPipes 0029                   __size_of_printf 016C  
     _USBDeferOUTDataStagePackets 0040                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FCB5  
                       _T2CONbits 000FCA                     LED_Set@pValue 00C8  
             __size_of_Reset_High 001E                      ?_GetPortPORT 00B4  
                    ?_GetPortTRIS 00B4               ??_Console_PrintChar 00C4  
                     _Port_GetPin 3AF6                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01EC               LCD_DrawRectangle@p4 01E8  
                    ??i2_delay_us 0003                        ??_delay_ms 00B6  
                      ??_delay_us 00B6                         _DIPSwitch 02CC  
             __size_of_Timer0_ISR 002E                       _Port_SetPin 26EA  
                  LCD_DrawField@i 00D6                __end_of_USB_CD_Ptr FD11  
                       _LCD_Reset 39CA               __size_of_Motor_Init 00D6  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0126  
                       _LCD_Write 4040              __size_of_MXK_Dequeue 003E  
                      delay_ms@ms 00B4              end_of_initialization 261A  
                      delay_us@us 00B4                __end_of_USB_SD_Ptr FD06  
               ??_HMI_SetSegments 00B7           Console_PrintChar@pInput 00C7  
                    _Console_Init 30F0               _pBDTEntryEP0OutNext 0037  
                 _USB1msTickCount 0112              __size_of_MXK_Release 001C  
      __end_of_Port_CheckPairType 36E8   _dummy_encapsulated_cmd_response 02E0  
              _PortProperty_Valid 3202                         i2u1520_48 3F28  
              Byte_SetQuad@pInput 00BF                SPI_MinSpeed@pInput 00C3  
              Byte_SetQuad@pValue 00C2             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 00B8             __size_of_Byte_GetZone 009C  
                 ___lldiv@counter 00C0         __end_of_Console_PrintChar 1644  
                  ??_Port_SetType 01FE        __end_of_Port_CheckQuadType 38D0  
                         printf@c 00D3                           printf@f 00C9  
                  Port_Init@pPort 02EB                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 00BD  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 00C3             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 3AAE             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 3C44                Button_Init@pInitIO 02EC  
           Timer0_Init@pFrequency 00C1               _Event_HMI_DIPSwitch 000000  
               ?_Port_SetQuadType 00EA                       _gForecolour 00F9  
      _USBStatusStageEnabledFlag1 0043        _USBStatusStageEnabledFlag2 0042  
       ??_Console_IncrementCursor 00B8            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00EE  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00BA  
           Console_Render@lCursor 00DA                         _MXK_Queue 41A8  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00B6  
      __size_of_Console_Backspace 0066                         _TRISFbits 000F97  
              _BothEP0OutUOWNsSet 00A1                   _Set_Addr_Window 2A9A  
                  SPI_Init@pClock 00E1                  ??_LCD_Word_Write 00BB  
           __end_of_LCD_DrawField 2F2A                    Port_Set@pInput 00C3  
                  SPI_Init@pInput 00E7              ??_PortProperty_Valid 00C7  
                  Port_Set@pValue 00C5                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 305E                        ?_LCD_Write 00B7  
                    _Byte_GetPair 40F8                      _Byte_GetZone 2F2A  
              HMI_SetButton@F7369 FD06                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 00D4                 LCD_DrawField@ymax 00D5  
                       _USTATcopy 004C                    _Port_TogglePin 3E80  
                _Event_TestButton 000000             __size_of_FunctInitLCD 0024  
           __size_of_FunctInitHMI 0036              Port_SetPinType@Props 00DF  
                    ?_Byte_GetBit 00B4           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 418C                      _Byte_SetPair 3FDA  
                  __end_of_LLVALS FCF0                      _Byte_SetQuad 3FFC  
                  __end_of_LNVALS FD00           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 29E4              Port_SetPinType@pType 00DD  
                  __end_of_TEVALS FCE0                 ?i2_Timer0_Restart 0001  
                  __end_of_RLVALS FCE8                    __end_of_LZVALS FCD8  
                    ?_Byte_SetBit 00B4                         FunctHMI@v 00FB  
                  __end_of_SQVALS FCF8                     ?_SPI_MaxSpeed 00C3  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
                  __end_of_RZVALS FCD0                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 00C3             __end_ofi2_Timer0_Stop 4226  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
                   ?i2_Motor_Step 0001        __size_of_Console_MakeField 00D0  
                  __end_of_OutSeg 3202                      ??_FunctMotor 00D3  
                  __end_of___wmul 3DE2                     __pidataCOMRAM 4230  
           _Event_HMI_RightButton 000000                      ?_Button_Init 02E8  
                       _Bus_State 004E               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 00AA              __end_of_Timer0_Clear 41DC  
               __size_of_MXK_Init 0180                      IMU_ReadReg@r 004B  
               _USBBusIsSuspended 00A2              __end_of_Timer2_Clear 421A  
                  __end_of_printf 1C34                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00C0  
                ??_Timer0_Restart 00B4              __end_of_Timer0_Start 3FB6  
         ??_Console_SetForecolour 00B6                Port_SetType@Output 02E8  
             start_initialization 2558                        ?_MXK_Queue 00B4  
                    _FunctInitLCD 3FB6                      _FunctInitHMI 3D76  
        PortProperty_Valid@Errors 00C9                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 3454                Port_SetType@pInput 00EE  
                      HMI_Init@in 00EF             __end_ofi2_Port_SetPin 2BEE  
                     _cdc_data_rx 024C                       _cdc_data_tx 028C  
          __end_of_Port_TogglePin 3EB0                     ?_Word_SetPair 00C3  
               Byte_SetBit@pInput 00B4                    ??_MXK_SwitchTo 00BA  
               Byte_SetBit@pValue 00B7                ?_LCD_FillRectangle 00BD  
             _Console_ResetCursor 401E       PortProperty_Valid@pPinDrive 00C5  
            MXK_BlockSwitchTo@CUR 00BA          PortProperty_Valid@pInput 00C3  
                   i2_MXK_Release 4226            LCD_FillRectangle@pSize 00C3  
                  SPI_Send@pInput 00B4                __end_of_FunctMotor 2928  
                    ??_Reset_High 00C8          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 00C5             Port_SetQuadType@pQuad 00EC  
                       _ToSegment 07D8               ??_LCD_FillRectangle 00C7  
           Port_SetQuadType@pType 00ED                   _Console_NewLine 2DE0  
               __size_of_FunctHMI 00D4                    ??_SPI_MinSpeed 00C5  
                    _HMI_UpSwitch 000000                         _Reset_Low 4080  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 422C  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 019E  
                       _gCharSize 01FA            _pBDTEntryEP0OutCurrent 0039  
                Timer2_Init@INDEX 0093                         OutSeg@cur 009A  
                  ??i2_Motor_Step 0015                      ??_Motor_Init 00E5  
                        ??_OutSeg 00B8                         OutSeg@out 00BB  
         __size_of_Console_Render 0210                      ??_Motor_Move 00BB  
                    ??_Motor_Step 00C8                Byte_SetZone@Offset 00BD  
                        ??___wmul 00B8              ?_Console_ResetCursor 0001  
                       _Port_Init 1644                       __pdataBANK0 00F1  
                     __pdataBANK1 01F2                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00B7                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B4                Byte_SetZone@pValue 00B9  
                   Mode_Set@pMode 00B4                          ??_printf 00CD  
         __end_of_Set_Addr_Window 2B44          Port_CheckQuadType@Output 00E9  
                       _gLineSize 01F6          Port_CheckQuadType@pDrive 00E6  
                  ??_Word_GetPair 00C3            _USBActiveConfiguration 004D  
        Port_CheckQuadType@pInput 00E3         __end_of_LCD_FillRectangle 34C8  
                        ?_LED_Set 00C8                       __pbssCOMRAM 0029  
              __end_of_Reset_High 40BC                     __pcstackBANK0 00B4  
                   __pcstackBANK1 01FE                     __pcstackBANK2 02E8  
                  ??_Word_SetPair 00C7                __end_of_Timer0_ISR 3F3E  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 00CD  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 0EDC  
                        ?_SPI_DCS 00B4                   ?_Port_TogglePin 00C8  
                     ??_LCD_Write 00B8                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 22E0  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 3D76  
              __end_of_Motor_Step 201E             Timer2_Init@pFrequency 00C1  
                  ?i2_MXK_Release 0001                      _pBDTEntryOut 0100  
                ??_FunctInitMotor 00E5          Port_CheckPairType@Output 00E0  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 00DD  
        Port_CheckPairType@pInput 00DA                _MXK_InitTestButton 40DA  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00C1  
                    ?_Timer2_Init 00C1                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B4                     _lStepFunction 0078  
               Byte_SetPair@pPair 00C1                         __pintcode 0008  
                   __pmediumconst FBE2                      ?_Motor_Speed 00CF  
           ??_Console_ResetCursor 00B4                          ?___awdiv 00B4  
                       __ptext100 2488                         __ptext101 3E4C  
                       __ptext110 32F6                         __ptext111 3A1A  
                       __ptext103 3F10                         __ptext112 3DE2  
                       __ptext104 201E                         __ptext113 3C04  
                       __ptext105 4220                         __ptext114 4226  
                       __ptext106 41E8                         __ptext115 41B6  
                       __ptext107 2B44                         __ptext116 0000  
                       __ptext108 3EE0                         __ptext109 4150  
                       _pShiftVal 007B                          ?___lldiv 00B4  
                      ?_Port_Init 02E9              Timer0_Init@pCPUClock 00C7  
                        ?___lwdiv 00B4                          ?___lwmod 00BB  
             ?_MXK_InitTestButton 0001                _IMU_WriteRegFinish 000000  
               ?_Console_FormFeed 0001                 _GetPortProperties 2C94  
     __end_ofTimer0_Init@PRESCALE FCA5                ??_Console_FormFeed 00B4  
                 _HMI_SetSegments 211E                ?_GetPortProperties 00B4  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00B7                      ?_Port_GetPin 00B4  
            __size_of_Console_Tab 00C6                      ?_Port_SetPin 00C3  
                     _ep_data_out 012B                  ___lwdiv@quotient 00B9  
                 _HMI_RightSwitch 000000               ??_GetPortProperties 00B6  
         __end_of_Console_NewLine 2E86              ??_MXK_InitTestButton 00E1  
              Byte_GetPair@pInput 00BD                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 4230                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 4150  
                        _LCD_Fill 38D0              _IMU_WriteRegContinue 000000  
                        _LCD_Init 1956                    ___wmul@product 00B8  
                        _HMIBoard 0135                    i2_Byte_GetZone 32F6  
                        _LED_Init 37B2                         delay_ms@u 00B6  
                       delay_us@u 00B6                          _HMI_Init 10EC  
              MXK_Queue@pCallback 00B4                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE2bits 000FA0                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 3C04          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00C1  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                        _PIR3bits 000FA4                          i2u760_40 3C32  
                        i2u681_40 3360                          i2u681_45 335C  
                        i2u756_44 3A2E                          i2u756_45 3A2A  
                        i2u757_44 3A54                          i2u757_45 3A50  
                        i2u679_40 3318                          i2u679_47 330E  
                        i2u953_40 2062              __size_of_Byte_SetBit 0064  
                        i2u954_40 2076                          i2u955_40 20AE  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000                          _UEP0bits 000F4C  
                HMI_SetBar@pValue 00B4        _USBDeferINDataStagePackets 0041  
               Button_Init@pInput 02E8           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00DE  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
                        _UCONbits 000F65         __end_of_GetPortProperties 2D3A  
                        _SSP2STAT 000F6D                      _Set_Rotation 2FC6  
           __size_of_Timer2_Clear 0008                 _IMU_ReadRegFinish 000000  
            __end_of_MXK_SwitchTo 3BC4                _Port_CheckPairType 367E  
                        _MXK_Init 17D6             __size_of_Timer0_Start 0026  
                 MXK_SwitchTo@CUR 00BA                          _SPI_Init 0000  
                        _SPI_Send 35A8                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00B9  
               ___wmul@multiplier 00B4                 Byte_GetBit@Output 00B8  
                      printf@flag 00CD              Timer2_Init@pCPUClock 00CA  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 33E0                        printf@prec 00D0  
           Motor_Speed@pFrequency 00D1                 Byte_GetBit@pInput 00B4  
             Port_SetPinType@pPin 00DC                _Port_CheckQuadType 3876  
                   _MXK_DIPSwitch 000000               ?_Port_CheckPairType 00DA  
                    _RemoteWakeup 00A3              __end_of_SPI_MinSpeed 3454  
                 _USBOutputBuffer 0300                     ??_MXK_Dequeue 00CA  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 3A66           PortProperty_Valid@F6830 FCA5  
            __end_ofi2_Motor_Step 211E                   ??i2_MXK_Release 0001  
                       copy_data0 256C                         copy_data1 258C  
                   ??_MXK_Release 00B4            __end_ofi2_Byte_GetPair 416A  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00E3            __end_ofi2_Byte_GetZone 336C  
             __end_ofi2_MXK_Queue 41C4               ?_Port_CheckPortType 00EA  
                        _InitList FBE3                          _FunctHMI 23B4  
            _Motor_Step$intlevel0 1EFE                          _Mode_Set 416A  
              __end_of_device_dsc FFAF                       ??_ToSegment 00B4  
                    _ISR_Function 0008                      _Timer0_Clear 41D0  
                    _Timer2_Clear 4212              __end_of_Word_GetPair 3CC0  
                        _lCBuffer 0224              ??_Port_CheckPairType 00DE  
                     ??_Reset_Low 00C8                          __Hrparam 0000  
                    _Timer0_Start 3F90                      OutSeg@pInput 00BA  
                  _Console_Render 0EDC                          __Lrparam 0000  
                 Timer2_Init@RDIV 00C6                          _SetupPkt 000430  
                  LCD_Write@value 00B8                          _Port_Set 041E  
                    OutSeg@segset 0099                         rand@screw 0097  
            __end_of_Word_SetPair 3B82                       ??_Port_Init 02EC  
         __end_of_HMI_SetSegments 220A              ??_Port_CheckQuadType 00E7  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 3CC0                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00ED                  __size_of___lwmod 0062  
                        _lBufferX 009C                          _lBufferY 009B  
             Timer2_Init@PRESCALE FD0A                _Event_HMI_UpButton 000000  
                 LCD_Fill@pColour 00BD                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                       _line_coding 01C1  
                        _lCurrent 0083            Byte_GetZone@pChunkSize 00B8  
          Byte_SetZone@pChunkSize 00B8             __size_of_Port_SetType 022A  
           i2MXK_SwitchTo@pModule 0008                Motor_Init@pAddress 00E3  
                        _delay_ms 3614                          _delay_us 3928  
                        _clearall 009D                   ___lwdiv@divisor 00B6  
  __size_of_Console_SetForecolour 000A                   ___lwdiv@counter 00B8  
   __end_of_Console_SetForecolour 4212                   Port_GetPin@pPin 00B6  
                        __ptext10 37B2                          __ptext11 397A  
                        __ptext20 41D0                          __ptext12 41F4  
                        __ptext21 3FB6                          __ptext13 286C  
                        __ptext30 409E                          __ptext22 1956  
                        __ptext14 3F3E                          __ptext31 3AAE  
                        __ptext23 2FC6                          __ptext15 3E18  
                        __ptext40 33E0                          __ptext32 3E80  
                        __ptext24 38D0                          __ptext16 3D3C  
                        __ptext41 0000                          __ptext33 3AF6  
                        __ptext25 34C8                          __ptext17 3F90  
                        __ptext50 40DA                          __ptext42 1D98  
                        __ptext34 30F0                          __ptext26 336C  
                        __ptext18 220A                          __ptext51 12E6  
                        __ptext43 2928                          __ptext35 3D76  
                        __ptext27 39CA                          __ptext19 1C34  
                        __ptext60 23B4                          __ptext52 0A5C  
                        __ptext44 4212                          __ptext36 211E  
                        __ptext28 3614                          __ptext61 1AC8  
                        __ptext53 3B3C                          __ptext45 3F68  
                        __ptext37 07D8                          __ptext29 4080  
                        __ptext70 36E8                          __ptext62 419A  
                        __ptext54 3FDA                          __ptext46 3EB0  
                        __ptext38 41FE                          __ptext71 3BC4  
                        __ptext63 14A6                          __ptext55 3876  
                        __ptext47 22E0                          __ptext39 10EC  
             ??_MXK_BlockSwitchTo 00BA                          __ptext80 40F8  
                        __ptext72 3814                          __ptext64 2624  
                        __ptext56 367E                          __ptext48 40BC  
                        __ptext81 2F2A                          __ptext73 327E  
                        __ptext65 27AE                          __ptext57 3202  
                        __ptext49 422C                          __ptext90 4208  
                        __ptext82 374E                          __ptext74 3C44  
                        __ptext66 3538                          __ptext58 3FFC  
                        __ptext91 0EDC                          __ptext83 3B82  
                        __ptext75 1EF8                          __ptext67 2DE0  
                        __ptext59 29E4                          __ptext92 3454  
                        __ptext84 4134                          __ptext76 421A  
                        __ptext68 305E                          __ptext93 2E86  
                        __ptext85 41A8                          __ptext77 41DC  
                        __ptext69 401E                          __ptext94 3DAC  
                        __ptext86 3CC0                          __ptext78 26EA  
                        __ptext95 2A9A                          __ptext87 3928  
                        __ptext79 3C82                          __ptext96 4116  
                        __ptext88 3CFE                          __ptext97 4040  
                        __ptext89 317A                          __ptext98 35A8  
                        __ptext99 416A                      _SSP1CON1bits 000FC6  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 3C82                 HMI_SetSegments@in 00B8  
           Button_Init@pThreshold 02EA                     __size_of_main 001E  
               Byte_GetPair@pPair 00BF            __end_of_Console_Render 10EC  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
             __end_of_MXK_Release 4150                    _MXK_TestButton 000000  
                   i2_Byte_SetBit 3A1A               i2Word_GetPair@pPair 000F  
                        _outPipes 0060         __end_of_MXK_BlockSwitchTo 3CFE  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0164  
            __size_of_Timer2_Init 0160                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0CB2  
                    Port_Set@Type 00DA        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00E9  
           TetrisBlockRotate@undo 003B                         printf@val 00CE  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 010A                    Timer0_Init@PRE 0094  
                    _SSP2STATbits 000F6D                        _LED_Toggle 3AAE  
            Button_Init@pGetState 02EF         _USBDeferStatusStagePacket 0044  
          PortProperty_Valid@Pair 00D9                  ??_Port_TogglePin 00CB  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00C6                        _HMI_SetBar 41FE  
                      _HMI_Render 3CFE                  Byte_SetZone@MASK 00BE  
                     i2_MXK_Queue 41B6                    Timer2_Init@DIV 0106  
                  Timer2_Init@PRE 0092                  Byte_SetZone@pMax 00B6  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 02F2                LCD_FillRectangle@i 00C9  
              LCD_FillRectangle@j 00CA            TetrisFieldDraw@lCorner 006D  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                ___lwmod@dividend 00BB                  ___lldiv@dividend 00B4  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
                  _SPI_DisableISR 3F68                   Port_Init@pInput 02E9  
                        printf@ap 00D1            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 41F4                  ?_HMI_SetSegments 00B5  
         Console_MakeField@Column 00C0             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00B4             __size_of_SPI_MinSpeed 0074  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 00BF  
                ___lldiv@quotient 00BC                     ??_GetPortPORT 00B6  
                 ___lwmod@divisor 00BD                     ??_GetPortTRIS 00B6  
           Timer0_Start@pFunction 00B4                Word_SetPair@pInput 00C3  
           _USBAlternateInterface 01F0                   ___lwmod@counter 00BF  
              Word_SetPair@pValue 00C6                  Motor_Init@pMotor 00E1  
                     _MXK_Dequeue 3C44                   _endpoint_number 0046  
                  LED_Toggle@pLED 00CC                     _LCD_DrawField 2E86  
                _Port_SetQuadType 0A5C                       _MXK_Release 4134  
             _IMU_ReadRegContinue 000000              TetrisFieldDraw@lSize 0069  
       __size_of_Console_FormFeed 0092                      _MXK_SwitchTo 3B82  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00BB  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00C5  
                 _Port_SetPinType 12E6           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00BC      _USBStatusStageTimeoutCounter 0045  
              Byte_GetZone@pChunk 00B7       __end_of_Console_ResetCursor 4040  
              Byte_GetZone@pInput 00B4           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 35A8             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 3F90                      _SPI_MaxSpeed 336C  
                      _USB_CD_Ptr FD0F                      _SPI_MinSpeed 33E0  
              Port_Set@TypeActual 00D8  
