/* 
 * File:   HMI.h
 * Author: David Ledger
 *
 * Created on 25 October 20162:33 PM
 */

#ifndef HMI_H
#define	HMI_H

#include "Types.h"
#include "Button.h"
#include "Config.h"

////////////////////////////////////////////////////////////////////////////////////
typedef struct HMI HMI;
typedef HMI * const HMIPtr;
extern HMI HMIBoard;
////////////////////////////////////////////////////////////////////////////////////
struct HMI
{
    //Sets the bits for the SPI transaction.
    union
    {
        UINT8   Bytes[8];
        struct
        {
            UINT8 pSevenSegment[6];
            union
            {
                struct
                {
                    UINT8 pButton   : 4; 
                    UINT8           : 4;
                };

                struct
                {
                    UINT8 GLED      : 1;
                    UINT8 RLED      : 1;
                    UINT8 BLED      : 1;
                    UINT8 YLED      : 1;
                    UINT8           : 4;
                };

                struct
                {
                    UINT8 UPLED     : 1;
                    UINT8 DOWNLED   : 1;
                    UINT8 LEFTLED   : 1;
                    UINT8 RIGHTLED  : 1;
                    UINT8           : 4;
                };
            };
            UINT8 pBarGraph;
        };
    };

    #ifdef HMI_LOOPING_FIFO
    UINT8Ptr Buffer;
    #endif
    
    Button mRight, mLeft, mUp, mDown;
    Button mDIP;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void    HMI_InitButtons ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
UINT8   HMI_DIPSwitch   ();
UINT8   HMI_LeftSwitch  ();
UINT8   HMI_RightSwitch ();
UINT8   HMI_UpSwitch    ();
UINT8   HMI_DownSwitch  ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void    HMI_Init        ();
////////////////////////////////////////////////////////////////////////////////
void    HMI_Render      ();
void    HMI_GRender     ();
////////////////////////////////////////////////////////////////////////////////
void    HMI_SetLeft     (UINT8 pValue);
void    HMI_SetRight    (UINT8 pValue);
void    HMI_SetUp       (UINT8 pValue);
void    HMI_SetDown     (UINT8 pValue);
UINT8   HMI_GetBar      ();
////////////////////////////////////////////////////////////////////////////////
void    HMI_SetButton   (UINT8 pValue);
void    HMI_SetButtons  (UINT8 pValue);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void    HMI_SetBar      (UINT8 pValue);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void    HMI_SetBargraph (UINT8 pValue);
void    HMI_SetNumber   (int pInput);
void    HMI_SetSegments (str pString);
////////////////////////////////////////////////////////////////////////////////
void    HMI_Poll        ();

#endif	/* HMI_H */

